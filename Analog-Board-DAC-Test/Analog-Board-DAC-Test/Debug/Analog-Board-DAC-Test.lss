
Analog-Board-DAC-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000008d6  0000096a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080014e  0080014e  000009b8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000009b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00001110  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000958  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000232  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053e  00000000  00000000  00001d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034b  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000488  00000000  00000000  00002727  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002baf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_5>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_13>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d0 e1       	ldi	r29, 0x10	; 16
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	e6 ed       	ldi	r30, 0xD6	; 214
  78:	f8 e0       	ldi	r31, 0x08	; 8
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ae 34       	cpi	r26, 0x4E	; 78
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	ae e4       	ldi	r26, 0x4E	; 78
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a3 37       	cpi	r26, 0x73	; 115
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 0a 04 	call	0x814	; 0x814 <main>
  9a:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <_Z16setup_midi_usartv>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
  a2:	87 e2       	ldi	r24, 0x27	; 39
  a4:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
  a8:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
  ac:	88 e9       	ldi	r24, 0x98	; 152
  ae:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
  b2:	08 95       	ret

000000b4 <_Z8setupDACv>:
void setupDAC(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
  b4:	83 b3       	in	r24, 0x13	; 19
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
  be:	97 b1       	in	r25, 0x07	; 7
  c0:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
  c2:	e9 ed       	ldi	r30, 0xD9	; 217
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8f 60       	ori	r24, 0x0F	; 15
  ca:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers 
  cc:	ea ed       	ldi	r30, 0xDA	; 218
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
  d6:	84 b3       	in	r24, 0x14	; 20
  d8:	83 60       	ori	r24, 0x03	; 3
  da:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
  dc:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
  de:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
  e0:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
  e2:	a0 9a       	sbi	0x14, 0	; 20
}
  e4:	08 95       	ret

000000e6 <_Z7set_dachhj>:
void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
  e6:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
  e8:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
  ea:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
  ec:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
  ee:	62 b9       	out	0x02, r22	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2d e0       	ldi	r18, 0x0D	; 13
  f2:	2a 95       	dec	r18
  f4:	f1 f7       	brne	.-4      	; 0xf2 <_Z7set_dachhj+0xc>
  f6:	00 00       	nop
	//} else {
		//
		//dac_mux_address = DAC_MUX_EN1;
	//}
	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
  f8:	ea ed       	ldi	r30, 0xDA	; 218
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	b9 01       	movw	r22, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <_Z7set_dachhj+0x24>
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	8a 95       	dec	r24
 10c:	e2 f7       	brpl	.-8      	; 0x106 <_Z7set_dachhj+0x20>
 10e:	cb 01       	movw	r24, r22
 110:	94 2f       	mov	r25, r20
 112:	98 2b       	or	r25, r24
 114:	90 83       	st	Z, r25
 116:	72 e4       	ldi	r23, 0x42	; 66
 118:	7a 95       	dec	r23
 11a:	f1 f7       	brne	.-4      	; 0x118 <_Z7set_dachhj+0x32>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <_Z7set_dachhj+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
 11e:	90 81       	ld	r25, Z
 120:	80 95       	com	r24
 122:	89 23       	and	r24, r25
 124:	80 83       	st	Z, r24
	
}
 126:	08 95       	ret

00000128 <_Z11display_DECjh>:


void display_DEC(uint16_t number, uint8_t digit)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	2a 97       	sbiw	r28, 0x0a	; 10
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
		SEVEN,
		EIGHT,
		NINE,
		
		
	};
 13c:	de 01       	movw	r26, r28
 13e:	11 96       	adiw	r26, 0x01	; 1
 140:	e0 e0       	ldi	r30, 0x00	; 0
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	3a e0       	ldi	r19, 0x0A	; 10
 146:	01 90       	ld	r0, Z+
 148:	0d 92       	st	X+, r0
 14a:	31 50       	subi	r19, 0x01	; 1
 14c:	e1 f7       	brne	.-8      	; 0x146 <_Z11display_DECjh+0x1e>
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
 14e:	3f ef       	ldi	r19, 0xFF	; 255
 150:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 152:	ea ed       	ldi	r30, 0xDA	; 218
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	30 81       	ld	r19, Z
 158:	30 61       	ori	r19, 0x10	; 16
 15a:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 15c:	30 81       	ld	r19, Z
 15e:	3f 7e       	andi	r19, 0xEF	; 239
 160:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
 162:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
 164:	30 81       	ld	r19, Z
 166:	30 62       	ori	r19, 0x20	; 32
 168:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
 16a:	30 81       	ld	r19, Z
 16c:	3f 7d       	andi	r19, 0xDF	; 223
 16e:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
 170:	62 30       	cpi	r22, 0x02	; 2
 172:	f9 f0       	breq	.+62     	; 0x1b2 <_Z11display_DECjh+0x8a>
 174:	63 30       	cpi	r22, 0x03	; 3
 176:	18 f4       	brcc	.+6      	; 0x17e <_Z11display_DECjh+0x56>
 178:	61 30       	cpi	r22, 0x01	; 1
 17a:	a1 f5       	brne	.+104    	; 0x1e4 <_Z11display_DECjh+0xbc>
 17c:	0d c0       	rjmp	.+26     	; 0x198 <_Z11display_DECjh+0x70>
 17e:	64 30       	cpi	r22, 0x04	; 4
 180:	29 f1       	breq	.+74     	; 0x1cc <_Z11display_DECjh+0xa4>
 182:	68 30       	cpi	r22, 0x08	; 8
 184:	79 f5       	brne	.+94     	; 0x1e4 <_Z11display_DECjh+0xbc>
		
		case ONES:
		cathode_byte = DEC[(number % 10)]; //print first decimal digit
 186:	6a e0       	ldi	r22, 0x0A	; 10
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__udivmodhi4>
 18e:	fe 01       	movw	r30, r28
 190:	e8 0f       	add	r30, r24
 192:	f9 1f       	adc	r31, r25
 194:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 196:	26 c0       	rjmp	.+76     	; 0x1e4 <_Z11display_DECjh+0xbc>
		
		case TENS:
		cathode_byte = DEC[((number % 100) / 10)]; //print second decimal digit
 198:	64 e6       	ldi	r22, 0x64	; 100
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__udivmodhi4>
 1a0:	6a e0       	ldi	r22, 0x0A	; 10
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__udivmodhi4>
 1a8:	fe 01       	movw	r30, r28
 1aa:	e6 0f       	add	r30, r22
 1ac:	f7 1f       	adc	r31, r23
 1ae:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 1b0:	19 c0       	rjmp	.+50     	; 0x1e4 <_Z11display_DECjh+0xbc>
		
		case HUNDS:
		cathode_byte = DEC[((number % 1000) / 100)]; //print third decimal digit
 1b2:	68 ee       	ldi	r22, 0xE8	; 232
 1b4:	73 e0       	ldi	r23, 0x03	; 3
 1b6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__udivmodhi4>
 1ba:	64 e6       	ldi	r22, 0x64	; 100
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__udivmodhi4>
 1c2:	fe 01       	movw	r30, r28
 1c4:	e6 0f       	add	r30, r22
 1c6:	f7 1f       	adc	r31, r23
 1c8:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 1ca:	0c c0       	rjmp	.+24     	; 0x1e4 <_Z11display_DECjh+0xbc>
		
		case THOUS:
		cathode_byte = DEC[((number % 10000) / 1000)]; //print fourth decimal digit
 1cc:	60 e1       	ldi	r22, 0x10	; 16
 1ce:	77 e2       	ldi	r23, 0x27	; 39
 1d0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__udivmodhi4>
 1d4:	68 ee       	ldi	r22, 0xE8	; 232
 1d6:	73 e0       	ldi	r23, 0x03	; 3
 1d8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__udivmodhi4>
 1dc:	fe 01       	movw	r30, r28
 1de:	e6 0f       	add	r30, r22
 1e0:	f7 1f       	adc	r31, r23
 1e2:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
 1e4:	20 95       	com	r18
 1e6:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 1e8:	ea ed       	ldi	r30, 0xDA	; 218
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 61       	ori	r24, 0x10	; 16
 1f0:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 1f2:	80 81       	ld	r24, Z
 1f4:	8f 7e       	andi	r24, 0xEF	; 239
 1f6:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
 1f8:	2a 96       	adiw	r28, 0x0a	; 10
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <_Z8setupADCv>:

void setupADC(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
 20a:	ea e7       	ldi	r30, 0x7A	; 122
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	84 60       	ori	r24, 0x04	; 4
 212:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
 214:	ac e7       	ldi	r26, 0x7C	; 124
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	8c 91       	ld	r24, X
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	8c 93       	st	X, r24
	//MUX2:0 is 000 by default in ADMUX
	//ADMUX &= ~(1<<MUX0); //set ADC multiplexer to read ADC0 (PF0 on PORTF, pin 97)
	
	//ADCSRA |= (1<<ADATE); //set ADC in free running mode
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
 21e:	ae e7       	ldi	r26, 0x7E	; 126
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	8c 91       	ld	r24, X
 224:	81 60       	ori	r24, 0x01	; 1
 226:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
 228:	80 81       	ld	r24, Z
 22a:	80 68       	ori	r24, 0x80	; 128
 22c:	80 83       	st	Z, r24
	//adc_value = ADCL;
	//adc_value = adc_value | (ADCH <<8);
	//adc_previous = adc_value;
	//PORTH |= (1<<POTMUX_EN0); //set POTMUX_EN0
	
}
 22e:	08 95       	ret

00000230 <__vector_13>:

ISR (USART_RX_vect) { // USART receive interrupt
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
	 
	 //if (UDR0 == 248) {
		 //PORTB ^= (1<<ARP_SYNC_LED);
		 //return;
	 //}		  
	 value_to_display = UDR0;
 242:	80 91 c6 00 	lds	r24, 0x00C6
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 4d 01 	sts	0x014D, r25
 24c:	80 93 4c 01 	sts	0x014C, r24
	 uint8_t status_byte = value_to_display >> 4;
 250:	80 91 4c 01 	lds	r24, 0x014C
 254:	90 91 4d 01 	lds	r25, 0x014D
 258:	92 95       	swap	r25
 25a:	82 95       	swap	r24
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	89 27       	eor	r24, r25
 260:	9f 70       	andi	r25, 0x0F	; 15
 262:	89 27       	eor	r24, r25
	 
	 if ((status_byte >> 3) == 1) 
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	9c 01       	movw	r18, r24
 268:	35 95       	asr	r19
 26a:	27 95       	ror	r18
 26c:	35 95       	asr	r19
 26e:	27 95       	ror	r18
 270:	35 95       	asr	r19
 272:	27 95       	ror	r18
 274:	21 30       	cpi	r18, 0x01	; 1
 276:	31 05       	cpc	r19, r1
 278:	31 f4       	brne	.+12     	; 0x286 <__vector_13+0x56>
	 { 
		 if ((status_byte >> 0) & 1) {PORTF |= (1<<GATE);} else {PORTF &= ~(1<<GATE);}
 27a:	80 ff       	sbrs	r24, 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <__vector_13+0x52>
 27e:	89 9a       	sbi	0x11, 1	; 17
 280:	09 c0       	rjmp	.+18     	; 0x294 <__vector_13+0x64>
 282:	89 98       	cbi	0x11, 1	; 17
 284:	07 c0       	rjmp	.+14     	; 0x294 <__vector_13+0x64>
		//PORTF ^= (1<<GATE);	 
     }	else if (value_to_display == 0) {PORTF &= ~(1<<GATE);}
 286:	80 91 4c 01 	lds	r24, 0x014C
 28a:	90 91 4d 01 	lds	r25, 0x014D
 28e:	00 97       	sbiw	r24, 0x00	; 0
 290:	09 f4       	brne	.+2      	; 0x294 <__vector_13+0x64>
 292:	89 98       	cbi	0x11, 1	; 17
	  
	
}
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 92       	push	r2
 2b2:	3f 92       	push	r3
 2b4:	4f 92       	push	r4
 2b6:	5f 92       	push	r5
 2b8:	6f 92       	push	r6
 2ba:	7f 92       	push	r7
 2bc:	8f 92       	push	r8
 2be:	9f 92       	push	r9
 2c0:	af 92       	push	r10
 2c2:	bf 92       	push	r11
 2c4:	cf 92       	push	r12
 2c6:	df 92       	push	r13
 2c8:	ef 92       	push	r14
 2ca:	ff 92       	push	r15
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	
	display_DEC(value_to_display, digit[place]);
 2ec:	80 91 4c 01 	lds	r24, 0x014C
 2f0:	90 91 4d 01 	lds	r25, 0x014D
 2f4:	e0 91 64 01 	lds	r30, 0x0164
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	e6 5f       	subi	r30, 0xF6	; 246
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	60 81       	ld	r22, Z
 300:	0e 94 94 00 	call	0x128	; 0x128 <_Z11display_DECjh>
 304:	cc 24       	eor	r12, r12
 306:	dd 24       	eor	r13, r13
 308:	c3 94       	inc	r12
 30a:	00 e0       	ldi	r16, 0x00	; 0
 30c:	10 e0       	ldi	r17, 0x00	; 0
			
			//read pots on U2 and set appriate DAC S&H channel
			for (int i = 0; i <=15; i++)
			{
				DATA_BUS = i;
				POT_MUX &= ~(1<<POTMUX_EN0);
 30e:	0f 2e       	mov	r0, r31
 310:	fa ed       	ldi	r31, 0xDA	; 218
 312:	ef 2e       	mov	r14, r31
 314:	ff 24       	eor	r15, r15
 316:	f0 2d       	mov	r31, r0
				_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.	
				ADCSRA |= (1<<ADSC); //start ADC conversion
 318:	ca e7       	ldi	r28, 0x7A	; 122
 31a:	d0 e0       	ldi	r29, 0x00	; 0
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
				POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
				//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
								
				//adc_previous = adc_value;
				adc_value = ADCL;
 31c:	0f 2e       	mov	r0, r31
 31e:	f8 e7       	ldi	r31, 0x78	; 120
 320:	8f 2e       	mov	r8, r31
 322:	99 24       	eor	r9, r9
 324:	f0 2d       	mov	r31, r0
				adc_value = adc_value | (ADCH <<8);
 326:	0f 2e       	mov	r0, r31
 328:	f9 e7       	ldi	r31, 0x79	; 121
 32a:	4f 2e       	mov	r4, r31
 32c:	55 24       	eor	r5, r5
 32e:	f0 2d       	mov	r31, r0
				} else if (i == 11) //exception to handle ARP_RATE pot
				{
					//store ARP pot value, but don't set DAC
									
				} else {
					set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
 330:	0f 2e       	mov	r0, r31
 332:	fc e2       	ldi	r31, 0x2C	; 44
 334:	2f 2e       	mov	r2, r31
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	3f 2e       	mov	r3, r31
 33a:	f0 2d       	mov	r31, r0
 33c:	05 c0       	rjmp	.+10     	; 0x348 <__vector_5+0xa2>
	
}

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
	
	display_DEC(value_to_display, digit[place]);
 33e:	0f 5f       	subi	r16, 0xFF	; 255
 340:	1f 4f       	sbci	r17, 0xFF	; 255
 342:	08 94       	sec
 344:	c1 1c       	adc	r12, r1
 346:	d1 1c       	adc	r13, r1
 348:	f8 01       	movw	r30, r16
			//POT_MUX |= (1<<POTMUX_EN0);
			
			//read pots on U2 and set appriate DAC S&H channel
			for (int i = 0; i <=15; i++)
			{
				DATA_BUS = i;
 34a:	02 b9       	out	0x02, r16	; 2
				POT_MUX &= ~(1<<POTMUX_EN0);
 34c:	d7 01       	movw	r26, r14
 34e:	8c 91       	ld	r24, X
 350:	8f 7b       	andi	r24, 0xBF	; 191
 352:	8c 93       	st	X, r24
 354:	bd e0       	ldi	r27, 0x0D	; 13
 356:	ba 95       	dec	r27
 358:	f1 f7       	brne	.-4      	; 0x356 <__vector_5+0xb0>
 35a:	00 00       	nop
				_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.	
				ADCSRA |= (1<<ADSC); //start ADC conversion
 35c:	88 81       	ld	r24, Y
 35e:	80 64       	ori	r24, 0x40	; 64
 360:	88 83       	st	Y, r24
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
 362:	88 81       	ld	r24, Y
 364:	86 fd       	sbrc	r24, 6
 366:	fd cf       	rjmp	.-6      	; 0x362 <__vector_5+0xbc>
				POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
 368:	d7 01       	movw	r26, r14
 36a:	8c 91       	ld	r24, X
 36c:	80 64       	ori	r24, 0x40	; 64
 36e:	8c 93       	st	X, r24
				//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
								
				//adc_previous = adc_value;
				adc_value = ADCL;
 370:	d4 01       	movw	r26, r8
 372:	8c 91       	ld	r24, X
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	90 93 61 01 	sts	0x0161, r25
 37a:	80 93 60 01 	sts	0x0160, r24
				adc_value = adc_value | (ADCH <<8);
 37e:	d2 01       	movw	r26, r4
 380:	2c 91       	ld	r18, X
 382:	80 91 60 01 	lds	r24, 0x0160
 386:	90 91 61 01 	lds	r25, 0x0161
 38a:	b2 2e       	mov	r11, r18
 38c:	aa 24       	eor	r10, r10
 38e:	8a 29       	or	r24, r10
 390:	9b 29       	or	r25, r11
 392:	90 93 61 01 	sts	0x0161, r25
 396:	80 93 60 01 	sts	0x0160, r24
				//set_dac(i, dac_channel[i]); //set DAC
				//for testing, set one DAC S&H channel to a fixed value and measure it as flanking S&H channels are swept from 0-10V
				//currently using this to set OSCA_INIT_CV and do fine tuning
							
				
				if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
 39a:	c8 01       	movw	r24, r16
 39c:	08 97       	sbiw	r24, 0x08	; 8
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	91 05       	cpc	r25, r1
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <__vector_5+0x100>
 3a4:	44 c0       	rjmp	.+136    	; 0x42e <__vector_5+0x188>
				{
					uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
					if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
 3a6:	e9 30       	cpi	r30, 0x09	; 9
 3a8:	f1 05       	cpc	r31, r1
 3aa:	19 f0       	breq	.+6      	; 0x3b2 <__vector_5+0x10c>
				//currently using this to set OSCA_INIT_CV and do fine tuning
							
				
				if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
				{
					uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
 3ac:	2f e9       	ldi	r18, 0x9F	; 159
 3ae:	38 e1       	ldi	r19, 0x18	; 24
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <__vector_5+0x110>
					if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
 3b2:	25 e0       	ldi	r18, 0x05	; 5
 3b4:	3f e1       	ldi	r19, 0x1F	; 31
					if (adc_value >= 512) {
 3b6:	80 91 60 01 	lds	r24, 0x0160
 3ba:	90 91 61 01 	lds	r25, 0x0161
 3be:	b2 e0       	ldi	r27, 0x02	; 2
 3c0:	80 30       	cpi	r24, 0x00	; 0
 3c2:	9b 07       	cpc	r25, r27
 3c4:	d8 f0       	brcs	.+54     	; 0x3fc <__vector_5+0x156>
						set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value + (adc_value - 512)));
 3c6:	ee 0f       	add	r30, r30
 3c8:	ff 1f       	adc	r31, r31
 3ca:	e2 0d       	add	r30, r2
 3cc:	f3 1d       	adc	r31, r3
 3ce:	81 81       	ldd	r24, Z+1	; 0x01
 3d0:	60 81       	ld	r22, Z
 3d2:	40 91 60 01 	lds	r20, 0x0160
 3d6:	50 91 61 01 	lds	r21, 0x0161
 3da:	40 50       	subi	r20, 0x00	; 0
 3dc:	52 40       	sbci	r21, 0x02	; 2
 3de:	42 0f       	add	r20, r18
 3e0:	53 1f       	adc	r21, r19
 3e2:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z7set_dachhj>
						tune_offset = adc_value - 512;
 3e6:	80 91 60 01 	lds	r24, 0x0160
 3ea:	90 91 61 01 	lds	r25, 0x0161
 3ee:	80 50       	subi	r24, 0x00	; 0
 3f0:	92 40       	sbci	r25, 0x02	; 2
 3f2:	90 93 5f 01 	sts	0x015F, r25
 3f6:	80 93 5e 01 	sts	0x015E, r24
 3fa:	2f c0       	rjmp	.+94     	; 0x45a <__vector_5+0x1b4>
					} else {
						set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value - (512- adc_value))); 
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	e2 0d       	add	r30, r2
 402:	f3 1d       	adc	r31, r3
 404:	81 81       	ldd	r24, Z+1	; 0x01
 406:	60 81       	ld	r22, Z
 408:	40 91 60 01 	lds	r20, 0x0160
 40c:	50 91 61 01 	lds	r21, 0x0161
 410:	40 50       	subi	r20, 0x00	; 0
 412:	52 40       	sbci	r21, 0x02	; 2
 414:	42 0f       	add	r20, r18
 416:	53 1f       	adc	r21, r19
 418:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z7set_dachhj>
						tune_offset = adc_value;
 41c:	80 91 60 01 	lds	r24, 0x0160
 420:	90 91 61 01 	lds	r25, 0x0161
 424:	90 93 5f 01 	sts	0x015F, r25
 428:	80 93 5e 01 	sts	0x015E, r24
 42c:	16 c0       	rjmp	.+44     	; 0x45a <__vector_5+0x1b4>
					
				//} else if (i == 0) //when i = 0 need to set DAC to value read by pot 15 on U2
				//{
					//set_dac(dac_pot_decoder_0[15][1],dac_pot_decoder_0[15][0], adc_value << 4);
					//value_to_display = adc_value;
				} else if (i == 11) //exception to handle ARP_RATE pot
 42e:	eb 30       	cpi	r30, 0x0B	; 11
 430:	f1 05       	cpc	r31, r1
 432:	09 f4       	brne	.+2      	; 0x436 <__vector_5+0x190>
 434:	84 cf       	rjmp	.-248    	; 0x33e <__vector_5+0x98>
				{
					//store ARP pot value, but don't set DAC
									
				} else {
					set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	e2 0d       	add	r30, r2
 43c:	f3 1d       	adc	r31, r3
 43e:	81 81       	ldd	r24, Z+1	; 0x01
 440:	60 81       	ld	r22, Z
 442:	40 91 60 01 	lds	r20, 0x0160
 446:	50 91 61 01 	lds	r21, 0x0161
 44a:	42 95       	swap	r20
 44c:	52 95       	swap	r21
 44e:	50 7f       	andi	r21, 0xF0	; 240
 450:	54 27       	eor	r21, r20
 452:	40 7f       	andi	r20, 0xF0	; 240
 454:	54 27       	eor	r21, r20
 456:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z7set_dachhj>
		    //POT_MUX &= ~(1<<POTMUX_EN0); //clear POTMUX_EN0 to select input on U2
			//_delay_us(10);
			//POT_MUX |= (1<<POTMUX_EN0);
			
			//read pots on U2 and set appriate DAC S&H channel
			for (int i = 0; i <=15; i++)
 45a:	e0 e1       	ldi	r30, 0x10	; 16
 45c:	ce 16       	cp	r12, r30
 45e:	d1 04       	cpc	r13, r1
 460:	0c f4       	brge	.+2      	; 0x464 <__vector_5+0x1be>
 462:	6d cf       	rjmp	.-294    	; 0x33e <__vector_5+0x98>
 464:	00 e0       	ldi	r16, 0x00	; 0
 466:	10 e0       	ldi	r17, 0x00	; 0
			//POT_MUX |= (1<<POTMUX_EN1);
			for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
			{
				
				DATA_BUS = i+1; //U4 input 0 is not used (grounded)
				POT_MUX &= ~(1<<POTMUX_EN1);
 468:	0f 2e       	mov	r0, r31
 46a:	fa ed       	ldi	r31, 0xDA	; 218
 46c:	ef 2e       	mov	r14, r31
 46e:	ff 24       	eor	r15, r15
 470:	f0 2d       	mov	r31, r0
				_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
				ADCSRA |= (1<<ADSC); //start ADC conversion
 472:	ca e7       	ldi	r28, 0x7A	; 122
 474:	d0 e0       	ldi	r29, 0x00	; 0
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
				POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2		
				//adc_previous = adc_value;
				adc_value = ADCL;
 476:	0f 2e       	mov	r0, r31
 478:	f8 e7       	ldi	r31, 0x78	; 120
 47a:	cf 2e       	mov	r12, r31
 47c:	dd 24       	eor	r13, r13
 47e:	f0 2d       	mov	r31, r0
				adc_value = adc_value | (ADCH <<8);
 480:	0f 2e       	mov	r0, r31
 482:	f9 e7       	ldi	r31, 0x79	; 121
 484:	af 2e       	mov	r10, r31
 486:	bb 24       	eor	r11, r11
 488:	f0 2d       	mov	r31, r0
				//if (i == 0) //when i = 0 need to set DAC to value read by pot 15 on U4
				//{
					//set_dac(dac_pot_decoder_1[14][1],dac_pot_decoder_1[14][0], adc_value << 4);
					////value_to_display = adc_value;
				//} else {
					set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
 48a:	0f 2e       	mov	r0, r31
 48c:	fe e0       	ldi	r31, 0x0E	; 14
 48e:	8f 2e       	mov	r8, r31
 490:	f1 e0       	ldi	r31, 0x01	; 1
 492:	9f 2e       	mov	r9, r31
 494:	f0 2d       	mov	r31, r0
     }	else if (value_to_display == 0) {PORTF &= ~(1<<GATE);}
	  
	
}

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
 496:	80 2f       	mov	r24, r16
 498:	8f 5f       	subi	r24, 0xFF	; 255
			//_delay_us(10);
			//POT_MUX |= (1<<POTMUX_EN1);
			for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
			{
				
				DATA_BUS = i+1; //U4 input 0 is not used (grounded)
 49a:	82 b9       	out	0x02, r24	; 2
				POT_MUX &= ~(1<<POTMUX_EN1);
 49c:	d7 01       	movw	r26, r14
 49e:	8c 91       	ld	r24, X
 4a0:	8f 77       	andi	r24, 0x7F	; 127
 4a2:	8c 93       	st	X, r24
 4a4:	bd e0       	ldi	r27, 0x0D	; 13
 4a6:	ba 95       	dec	r27
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__vector_5+0x200>
 4aa:	00 00       	nop
				_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
				ADCSRA |= (1<<ADSC); //start ADC conversion
 4ac:	88 81       	ld	r24, Y
 4ae:	80 64       	ori	r24, 0x40	; 64
 4b0:	88 83       	st	Y, r24
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
 4b2:	88 81       	ld	r24, Y
 4b4:	86 fd       	sbrc	r24, 6
 4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <__vector_5+0x20c>
				POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2		
 4b8:	f7 01       	movw	r30, r14
 4ba:	80 81       	ld	r24, Z
 4bc:	80 68       	ori	r24, 0x80	; 128
 4be:	80 83       	st	Z, r24
				//adc_previous = adc_value;
				adc_value = ADCL;
 4c0:	d6 01       	movw	r26, r12
 4c2:	8c 91       	ld	r24, X
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	90 93 61 01 	sts	0x0161, r25
 4ca:	80 93 60 01 	sts	0x0160, r24
				adc_value = adc_value | (ADCH <<8);
 4ce:	f5 01       	movw	r30, r10
 4d0:	20 81       	ld	r18, Z
 4d2:	80 91 60 01 	lds	r24, 0x0160
 4d6:	90 91 61 01 	lds	r25, 0x0161
 4da:	72 2e       	mov	r7, r18
 4dc:	66 24       	eor	r6, r6
 4de:	86 29       	or	r24, r6
 4e0:	97 29       	or	r25, r7
 4e2:	90 93 61 01 	sts	0x0161, r25
 4e6:	80 93 60 01 	sts	0x0160, r24
				//if (i == 0) //when i = 0 need to set DAC to value read by pot 15 on U4
				//{
					//set_dac(dac_pot_decoder_1[14][1],dac_pot_decoder_1[14][0], adc_value << 4);
					////value_to_display = adc_value;
				//} else {
					set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
 4ea:	f8 01       	movw	r30, r16
 4ec:	ee 0f       	add	r30, r30
 4ee:	ff 1f       	adc	r31, r31
 4f0:	e8 0d       	add	r30, r8
 4f2:	f9 1d       	adc	r31, r9
 4f4:	81 81       	ldd	r24, Z+1	; 0x01
 4f6:	60 81       	ld	r22, Z
 4f8:	40 91 60 01 	lds	r20, 0x0160
 4fc:	50 91 61 01 	lds	r21, 0x0161
 500:	42 95       	swap	r20
 502:	52 95       	swap	r21
 504:	50 7f       	andi	r21, 0xF0	; 240
 506:	54 27       	eor	r21, r20
 508:	40 7f       	andi	r20, 0xF0	; 240
 50a:	54 27       	eor	r21, r20
 50c:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z7set_dachhj>
			
			//now read second set of pots form U4 databus should already = 15 from previous loop.
		    //POT_MUX &= ~(1<<POTMUX_EN1); //clear POTMUX_EN1 to select input on U4
			//_delay_us(10);
			//POT_MUX |= (1<<POTMUX_EN1);
			for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
 510:	0f 5f       	subi	r16, 0xFF	; 255
 512:	1f 4f       	sbci	r17, 0xFF	; 255
 514:	0f 30       	cpi	r16, 0x0F	; 15
 516:	11 05       	cpc	r17, r1
 518:	09 f0       	breq	.+2      	; 0x51c <__vector_5+0x276>
 51a:	bd cf       	rjmp	.-134    	; 0x496 <__vector_5+0x1f0>
				//}
								
				//POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U4
		  }

		DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
 51c:	a1 98       	cbi	0x14, 1	; 20
		DAC_CTRL |= (1<<DAC_RS);
 51e:	a1 9a       	sbi	0x14, 1	; 20
	//do SPI read/write every 5 interrupts (16.5 ms)
	if (switch_timer++ == 5)
 520:	80 91 65 01 	lds	r24, 0x0165
 524:	98 2f       	mov	r25, r24
 526:	9f 5f       	subi	r25, 0xFF	; 255
 528:	90 93 65 01 	sts	0x0165, r25
 52c:	85 30       	cpi	r24, 0x05	; 5
 52e:	09 f0       	breq	.+2      	; 0x532 <__vector_5+0x28c>
 530:	44 c1       	rjmp	.+648    	; 0x7ba <__vector_5+0x514>
	{
		switch_timer = 0;
 532:	10 92 65 01 	sts	0x0165, r1
		
		
		SPI_PORT |= SPI_SW_LATCH;
 536:	2d 9a       	sbi	0x05, 5	; 5
		((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
		((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
		((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
		((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
		((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
		ISW8_SW_ON << ISW8_LED; 
 538:	20 91 6a 01 	lds	r18, 0x016A
 53c:	60 91 6a 01 	lds	r22, 0x016A
 540:	80 91 6a 01 	lds	r24, 0x016A
 544:	70 91 6a 01 	lds	r23, 0x016A
 548:	50 91 6a 01 	lds	r21, 0x016A
 54c:	40 91 6a 01 	lds	r20, 0x016A
 550:	30 91 6a 01 	lds	r19, 0x016A
 554:	90 91 6f 01 	lds	r25, 0x016F
 558:	71 70       	andi	r23, 0x01	; 1
 55a:	64 70       	andi	r22, 0x04	; 4
 55c:	67 2b       	or	r22, r23
 55e:	50 71       	andi	r21, 0x10	; 16
 560:	56 2b       	or	r21, r22
 562:	40 72       	andi	r20, 0x20	; 32
 564:	45 2b       	or	r20, r21
 566:	30 74       	andi	r19, 0x40	; 64
 568:	34 2b       	or	r19, r20
 56a:	97 95       	ror	r25
 56c:	99 27       	eor	r25, r25
 56e:	97 95       	ror	r25
 570:	93 2b       	or	r25, r19
 572:	22 1f       	adc	r18, r18
 574:	22 27       	eor	r18, r18
 576:	22 1f       	adc	r18, r18
 578:	22 0f       	add	r18, r18
 57a:	29 2b       	or	r18, r25
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	88 70       	andi	r24, 0x08	; 8
 588:	90 70       	andi	r25, 0x00	; 0
 58a:	82 2b       	or	r24, r18
 58c:	8e bd       	out	0x2e, r24	; 46
		
		while (!(SPSR & (1<<SPIF)));
 58e:	0d b4       	in	r0, 0x2d	; 45
 590:	07 fe       	sbrs	r0, 7
 592:	fd cf       	rjmp	.-6      	; 0x58e <__vector_5+0x2e8>
		
		//Now read SPDR for switch data shifted in from 74XX165 U14
		spi_sw_current_state = SPDR;
 594:	8e b5       	in	r24, 0x2e	; 46
 596:	80 93 6c 01 	sts	0x016C, r24
		
		spi_sw_current_state ^= spi_sw_previous_state;
 59a:	80 91 6c 01 	lds	r24, 0x016C
 59e:	90 91 6b 01 	lds	r25, 0x016B
 5a2:	89 27       	eor	r24, r25
 5a4:	80 93 6c 01 	sts	0x016C, r24
		spi_sw_previous_state ^= spi_sw_current_state;
 5a8:	80 91 6b 01 	lds	r24, 0x016B
 5ac:	90 91 6c 01 	lds	r25, 0x016C
 5b0:	89 27       	eor	r24, r25
 5b2:	80 93 6b 01 	sts	0x016B, r24
		spi_sw_current_state &= spi_sw_previous_state;
 5b6:	80 91 6c 01 	lds	r24, 0x016C
 5ba:	90 91 6b 01 	lds	r25, 0x016B
 5be:	89 23       	and	r24, r25
 5c0:	80 93 6c 01 	sts	0x016C, r24
		
		//toggle switch state 		

		if (spi_sw_current_state & (1<<ISW1_SW)) sw_latch_five ^= (1 << ISW1_SW);
 5c4:	80 91 6c 01 	lds	r24, 0x016C
 5c8:	82 ff       	sbrs	r24, 2
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <__vector_5+0x332>
 5cc:	90 91 6a 01 	lds	r25, 0x016A
 5d0:	84 e0       	ldi	r24, 0x04	; 4
 5d2:	89 27       	eor	r24, r25
 5d4:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW2_SW)) sw_latch_five ^= (1 << ISW2_SW);					
 5d8:	80 91 6c 01 	lds	r24, 0x016C
 5dc:	81 ff       	sbrs	r24, 1
 5de:	06 c0       	rjmp	.+12     	; 0x5ec <__vector_5+0x346>
 5e0:	90 91 6a 01 	lds	r25, 0x016A
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	89 27       	eor	r24, r25
 5e8:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW3_SW)) sw_latch_five ^= (1 << ISW3_SW);
 5ec:	80 91 6c 01 	lds	r24, 0x016C
 5f0:	80 ff       	sbrs	r24, 0
 5f2:	06 c0       	rjmp	.+12     	; 0x600 <__vector_5+0x35a>
 5f4:	90 91 6a 01 	lds	r25, 0x016A
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	89 27       	eor	r24, r25
 5fc:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW4_SW)) sw_latch_five ^= (1 << ISW4_SW);	
 600:	80 91 6c 01 	lds	r24, 0x016C
 604:	88 23       	and	r24, r24
 606:	2c f4       	brge	.+10     	; 0x612 <__vector_5+0x36c>
 608:	80 91 6a 01 	lds	r24, 0x016A
 60c:	80 58       	subi	r24, 0x80	; 128
 60e:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW5_SW)) sw_latch_five ^= (1 << ISW5_SW);
 612:	80 91 6c 01 	lds	r24, 0x016C
 616:	84 ff       	sbrs	r24, 4
 618:	06 c0       	rjmp	.+12     	; 0x626 <__vector_5+0x380>
 61a:	90 91 6a 01 	lds	r25, 0x016A
 61e:	80 e1       	ldi	r24, 0x10	; 16
 620:	89 27       	eor	r24, r25
 622:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW6_SW)) sw_latch_five ^= (1 << ISW6_SW);
 626:	80 91 6c 01 	lds	r24, 0x016C
 62a:	85 ff       	sbrs	r24, 5
 62c:	06 c0       	rjmp	.+12     	; 0x63a <__vector_5+0x394>
 62e:	90 91 6a 01 	lds	r25, 0x016A
 632:	80 e2       	ldi	r24, 0x20	; 32
 634:	89 27       	eor	r24, r25
 636:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW7_SW)) sw_latch_five ^= (1 << ISW7_SW);
 63a:	80 91 6c 01 	lds	r24, 0x016C
 63e:	86 ff       	sbrs	r24, 6
 640:	06 c0       	rjmp	.+12     	; 0x64e <__vector_5+0x3a8>
 642:	90 91 6a 01 	lds	r25, 0x016A
 646:	80 e4       	ldi	r24, 0x40	; 64
 648:	89 27       	eor	r24, r25
 64a:	80 93 6a 01 	sts	0x016A, r24
		
		//SHIFT 4th BYTE
		SPDR = 0; //no LEDs connected in current test set up
 64e:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 650:	0d b4       	in	r0, 0x2d	; 45
 652:	07 fe       	sbrs	r0, 7
 654:	fd cf       	rjmp	.-6      	; 0x650 <__vector_5+0x3aa>
		//Now read SPDR for switch data shifted in from 74XX165 (U9)
		//check if ISW12_SW bit is set
		if (SPDR >> 5 & 1)
 656:	0e b4       	in	r0, 0x2e	; 46
 658:	05 fe       	sbrs	r0, 5
 65a:	04 c0       	rjmp	.+8      	; 0x664 <__vector_5+0x3be>
		{
			ISW12_SW_ON = 1;
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	80 93 72 01 	sts	0x0172, r24
 662:	02 c0       	rjmp	.+4      	; 0x668 <__vector_5+0x3c2>
		}
		else
		{
			ISW12_SW_ON = 0;
 664:	10 92 72 01 	sts	0x0172, r1
		}
		//check if ISW13_SW bit is set
		if (SPDR >> 6 & 1)
 668:	0e b4       	in	r0, 0x2e	; 46
 66a:	06 fe       	sbrs	r0, 6
 66c:	04 c0       	rjmp	.+8      	; 0x676 <__vector_5+0x3d0>
		{
			ISW13_SW_ON = 1;
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	80 93 71 01 	sts	0x0171, r24
 674:	02 c0       	rjmp	.+4      	; 0x67a <__vector_5+0x3d4>
		}
		else
		{
			ISW13_SW_ON = 0;
 676:	10 92 71 01 	sts	0x0171, r1
		}
		
		//SHIFT 3th BYTE
		SPDR = 0;
 67a:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 67c:	0d b4       	in	r0, 0x2d	; 45
 67e:	07 fe       	sbrs	r0, 7
 680:	fd cf       	rjmp	.-6      	; 0x67c <__vector_5+0x3d6>

		//SHIFT 2th BYTE
		SPDR = 0;
 682:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 684:	0d b4       	in	r0, 0x2d	; 45
 686:	07 fe       	sbrs	r0, 7
 688:	fd cf       	rjmp	.-6      	; 0x684 <__vector_5+0x3de>
		
		//SHIFT 1st BYTE
		//SPDR = (ISW12_SW_ON << 2) | ISW11_LED; //TURN ON ISW12 (if ISW12_SW is ON) and ISW11 LEDs, both on 74XX595 U8, first shift register in chain
		SPDR = (ISW12_SW_ON <<2) | (ISW13_SW_ON << 7); //turn on ISW12 if ISW12_SW is ON, turn ISW11 (MSB of first shift register chain) if ISW13_SW is ON
 68a:	80 91 72 01 	lds	r24, 0x0172
 68e:	90 91 71 01 	lds	r25, 0x0171
 692:	97 95       	ror	r25
 694:	99 27       	eor	r25, r25
 696:	97 95       	ror	r25
 698:	88 0f       	add	r24, r24
 69a:	88 0f       	add	r24, r24
 69c:	89 2b       	or	r24, r25
 69e:	8e bd       	out	0x2e, r24	; 46
		//Wait for SPI shift to complete
		while (!(SPSR & (1<<SPIF)));
 6a0:	0d b4       	in	r0, 0x2d	; 45
 6a2:	07 fe       	sbrs	r0, 7
 6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <__vector_5+0x3fa>
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
 6a6:	ed ed       	ldi	r30, 0xDD	; 221
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	87 7f       	andi	r24, 0xF7	; 247
 6ae:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
 6b0:	80 81       	ld	r24, Z
 6b2:	88 60       	ori	r24, 0x08	; 8
 6b4:	80 83       	st	Z, r24
		
		//clear SPI_SW_LATCH
		SPI_PORT &= ~SPI_SW_LATCH;	
 6b6:	2d 98       	cbi	0x05, 5	; 5
		//this toggle code works, but I haven't figured out how it works
		//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
		current_sw_state = SWITCH_PORT;
 6b8:	8f b1       	in	r24, 0x0f	; 15
 6ba:	80 93 6d 01 	sts	0x016D, r24
		current_sw_state ^= previous_sw_state;
 6be:	80 91 6d 01 	lds	r24, 0x016D
 6c2:	90 91 6e 01 	lds	r25, 0x016E
 6c6:	89 27       	eor	r24, r25
 6c8:	80 93 6d 01 	sts	0x016D, r24
		previous_sw_state ^= current_sw_state;
 6cc:	80 91 6e 01 	lds	r24, 0x016E
 6d0:	90 91 6d 01 	lds	r25, 0x016D
 6d4:	89 27       	eor	r24, r25
 6d6:	80 93 6e 01 	sts	0x016E, r24
		current_sw_state &= previous_sw_state;
 6da:	80 91 6d 01 	lds	r24, 0x016D
 6de:	90 91 6e 01 	lds	r25, 0x016E
 6e2:	89 23       	and	r24, r25
 6e4:	80 93 6d 01 	sts	0x016D, r24
		
		if (current_sw_state & (1<<ISW8_SW)) 
 6e8:	80 91 6d 01 	lds	r24, 0x016D
 6ec:	82 ff       	sbrs	r24, 2
 6ee:	06 c0       	rjmp	.+12     	; 0x6fc <__vector_5+0x456>
		{
			ISW8_SW_ON ^= 1 << 0; //toggle switch state
 6f0:	90 91 6f 01 	lds	r25, 0x016F
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	89 27       	eor	r24, r25
 6f8:	80 93 6f 01 	sts	0x016F, r24
		}
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
 6fc:	ed ed       	ldi	r30, 0xDD	; 221
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	8f 7b       	andi	r24, 0xBF	; 191
 704:	80 83       	st	Z, r24
		((sw_latch_five >> ISW2_SW) & 1) << 2 |
		((sw_latch_five >> ISW3_SW) & 1) << 1 |
		((sw_latch_five >> ISW5_SW) & 1) << 6 |
		((sw_latch_five >> ISW6_SW) & 1) << 7 |
		((sw_latch_five >> ISW7_SW) & 1) << 5 |
		ISW8_SW_ON << 4;
 706:	40 91 6a 01 	lds	r20, 0x016A
 70a:	a0 91 6a 01 	lds	r26, 0x016A
 70e:	30 91 6a 01 	lds	r19, 0x016A
 712:	60 91 6a 01 	lds	r22, 0x016A
 716:	20 91 6a 01 	lds	r18, 0x016A
 71a:	80 91 6a 01 	lds	r24, 0x016A
 71e:	50 91 6a 01 	lds	r21, 0x016A
 722:	90 91 6f 01 	lds	r25, 0x016F
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	b5 95       	asr	r27
 72a:	a7 95       	ror	r26
 72c:	b5 95       	asr	r27
 72e:	a7 95       	ror	r26
 730:	a1 70       	andi	r26, 0x01	; 1
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	61 70       	andi	r22, 0x01	; 1
 736:	70 70       	andi	r23, 0x00	; 0
 738:	66 0f       	add	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	6a 2b       	or	r22, r26
 73e:	92 95       	swap	r25
 740:	90 7f       	andi	r25, 0xF0	; 240
 742:	69 2b       	or	r22, r25
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	95 95       	asr	r25
 748:	87 95       	ror	r24
 74a:	95 95       	asr	r25
 74c:	87 95       	ror	r24
 74e:	95 95       	asr	r25
 750:	87 95       	ror	r24
 752:	95 95       	asr	r25
 754:	87 95       	ror	r24
 756:	95 95       	asr	r25
 758:	87 95       	ror	r24
 75a:	96 95       	lsr	r25
 75c:	98 2f       	mov	r25, r24
 75e:	88 27       	eor	r24, r24
 760:	97 95       	ror	r25
 762:	87 95       	ror	r24
 764:	86 2b       	or	r24, r22
 766:	44 1f       	adc	r20, r20
 768:	44 27       	eor	r20, r20
 76a:	44 1f       	adc	r20, r20
 76c:	44 0f       	add	r20, r20
 76e:	44 0f       	add	r20, r20
 770:	44 0f       	add	r20, r20
 772:	84 2b       	or	r24, r20
 774:	63 2f       	mov	r22, r19
 776:	70 e0       	ldi	r23, 0x00	; 0
 778:	66 0f       	add	r22, r22
 77a:	77 1f       	adc	r23, r23
 77c:	64 70       	andi	r22, 0x04	; 4
 77e:	70 70       	andi	r23, 0x00	; 0
 780:	68 2b       	or	r22, r24
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	c9 01       	movw	r24, r18
 786:	88 0f       	add	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	80 74       	andi	r24, 0x40	; 64
 790:	90 70       	andi	r25, 0x00	; 0
 792:	68 2b       	or	r22, r24
 794:	85 2f       	mov	r24, r21
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	96 95       	lsr	r25
 79a:	87 95       	ror	r24
 79c:	80 72       	andi	r24, 0x20	; 32
 79e:	90 70       	andi	r25, 0x00	; 0
 7a0:	86 2b       	or	r24, r22
 7a2:	82 b9       	out	0x02, r24	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
 7a4:	80 81       	ld	r24, Z
 7a6:	80 64       	ori	r24, 0x40	; 64
 7a8:	80 83       	st	Z, r24
 7aa:	46 e0       	ldi	r20, 0x06	; 6
 7ac:	4a 95       	dec	r20
 7ae:	f1 f7       	brne	.-4      	; 0x7ac <__vector_5+0x506>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <__vector_5+0x50c>
		_delay_us(1);
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
 7b2:	80 81       	ld	r24, Z
 7b4:	8f 7b       	andi	r24, 0xBF	; 191
 7b6:	80 83       	st	Z, r24
		DATA_BUS = 0;			  	
 7b8:	12 b8       	out	0x02, r1	; 2
	}
	
	

	//increment digit display place
	if (place++ == 3) //post increment
 7ba:	80 91 64 01 	lds	r24, 0x0164
 7be:	98 2f       	mov	r25, r24
 7c0:	9f 5f       	subi	r25, 0xFF	; 255
 7c2:	90 93 64 01 	sts	0x0164, r25
 7c6:	83 30       	cpi	r24, 0x03	; 3
 7c8:	11 f4       	brne	.+4      	; 0x7ce <__vector_5+0x528>
	{
		place = 0;
 7ca:	10 92 64 01 	sts	0x0164, r1
	}
	

	
}	
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	bf 91       	pop	r27
 7d8:	af 91       	pop	r26
 7da:	9f 91       	pop	r25
 7dc:	8f 91       	pop	r24
 7de:	7f 91       	pop	r23
 7e0:	6f 91       	pop	r22
 7e2:	5f 91       	pop	r21
 7e4:	4f 91       	pop	r20
 7e6:	3f 91       	pop	r19
 7e8:	2f 91       	pop	r18
 7ea:	1f 91       	pop	r17
 7ec:	0f 91       	pop	r16
 7ee:	ff 90       	pop	r15
 7f0:	ef 90       	pop	r14
 7f2:	df 90       	pop	r13
 7f4:	cf 90       	pop	r12
 7f6:	bf 90       	pop	r11
 7f8:	af 90       	pop	r10
 7fa:	9f 90       	pop	r9
 7fc:	8f 90       	pop	r8
 7fe:	7f 90       	pop	r7
 800:	6f 90       	pop	r6
 802:	5f 90       	pop	r5
 804:	4f 90       	pop	r4
 806:	3f 90       	pop	r3
 808:	2f 90       	pop	r2
 80a:	0f 90       	pop	r0
 80c:	0f be       	out	0x3f, r0	; 63
 80e:	0f 90       	pop	r0
 810:	1f 90       	pop	r1
 812:	18 95       	reti

00000814 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
 814:	80 e8       	ldi	r24, 0x80	; 128
 816:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
 818:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
 81a:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
 81c:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
	//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
	//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
	DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
 81e:	84 b1       	in	r24, 0x04	; 4
 820:	87 62       	ori	r24, 0x27	; 39
 822:	84 b9       	out	0x04, r24	; 4
	
	//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
	DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
 824:	ec ed       	ldi	r30, 0xDC	; 220
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	8c 65       	ori	r24, 0x5C	; 92
 82c:	80 83       	st	Z, r24
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
	SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
 82e:	85 b1       	in	r24, 0x05	; 5
 830:	89 7d       	andi	r24, 0xD9	; 217
 832:	85 b9       	out	0x05, r24	; 5
	
	//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
	SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
 834:	ed ed       	ldi	r30, 0xDD	; 221
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	83 7f       	andi	r24, 0xF3	; 243
 83c:	80 83       	st	Z, r24
	
	//SET UP SPI
	SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
 83e:	80 e5       	ldi	r24, 0x50	; 80
 840:	8c bd       	out	0x2c, r24	; 44
	
	//Pull LED_LATCH LOW
	SPI_LATCH_PORT &= ~LED_LATCH;
 842:	80 81       	ld	r24, Z
 844:	87 7f       	andi	r24, 0xF7	; 247
 846:	80 83       	st	Z, r24
	////Wait for SPI shift to complete
	//while (!(SPSR & (1<<SPIF)));
	
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
	
	SPI_LATCH_PORT &= ~LED_LATCH;
 848:	80 81       	ld	r24, Z
 84a:	87 7f       	andi	r24, 0xF7	; 247
 84c:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 84e:	80 81       	ld	r24, Z
 850:	88 60       	ori	r24, 0x08	; 8
 852:	80 83       	st	Z, r24
	
	//set EG2 POL
	EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
 854:	80 81       	ld	r24, Z
 856:	8f 7e       	andi	r24, 0xEF	; 239
 858:	80 83       	st	Z, r24
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
 85a:	a9 ed       	ldi	r26, 0xD9	; 217
 85c:	b0 e0       	ldi	r27, 0x00	; 0
 85e:	8c 91       	ld	r24, X
 860:	80 6c       	ori	r24, 0xC0	; 192
 862:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
 864:	ea ed       	ldi	r30, 0xDA	; 218
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
 86a:	80 6c       	ori	r24, 0xC0	; 192
 86c:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
 86e:	81 b1       	in	r24, 0x01	; 1
 870:	8f ef       	ldi	r24, 0xFF	; 255
 872:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
 874:	92 b1       	in	r25, 0x02	; 2
 876:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
 878:	8c 91       	ld	r24, X
 87a:	80 63       	ori	r24, 0x30	; 48
 87c:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
 87e:	80 81       	ld	r24, Z
 880:	8f 7c       	andi	r24, 0xCF	; 207
 882:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<ISW8_SW); //set ISW8_SW pin as input
 884:	82 98       	cbi	0x10, 2	; 16
	//setup ADC, free running for now. Not sure if this is the way it should be done. Look into benefits of one-shot ADC
    setupADC();	
 886:	0e 94 05 01 	call	0x20a	; 0x20a <_Z8setupADCv>
	
	//setup DAC
	setupDAC();
 88a:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z8setupDACv>
	
	setup_midi_usart();
 88e:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z16setup_midi_usartv>
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
 892:	e0 eb       	ldi	r30, 0xB0	; 176
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	86 60       	ori	r24, 0x06	; 6
 89a:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
 89c:	e0 e7       	ldi	r30, 0x70	; 112
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	81 60       	ori	r24, 0x01	; 1
 8a4:	80 83       	st	Z, r24
	sei(); //enable global interrupts
 8a6:	78 94       	sei
 8a8:	ff cf       	rjmp	.-2      	; 0x8a8 <main+0x94>

000008aa <__udivmodhi4>:
 8aa:	aa 1b       	sub	r26, r26
 8ac:	bb 1b       	sub	r27, r27
 8ae:	51 e1       	ldi	r21, 0x11	; 17
 8b0:	07 c0       	rjmp	.+14     	; 0x8c0 <__udivmodhi4_ep>

000008b2 <__udivmodhi4_loop>:
 8b2:	aa 1f       	adc	r26, r26
 8b4:	bb 1f       	adc	r27, r27
 8b6:	a6 17       	cp	r26, r22
 8b8:	b7 07       	cpc	r27, r23
 8ba:	10 f0       	brcs	.+4      	; 0x8c0 <__udivmodhi4_ep>
 8bc:	a6 1b       	sub	r26, r22
 8be:	b7 0b       	sbc	r27, r23

000008c0 <__udivmodhi4_ep>:
 8c0:	88 1f       	adc	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	5a 95       	dec	r21
 8c6:	a9 f7       	brne	.-22     	; 0x8b2 <__udivmodhi4_loop>
 8c8:	80 95       	com	r24
 8ca:	90 95       	com	r25
 8cc:	bc 01       	movw	r22, r24
 8ce:	cd 01       	movw	r24, r26
 8d0:	08 95       	ret

000008d2 <_exit>:
 8d2:	f8 94       	cli

000008d4 <__stop_program>:
 8d4:	ff cf       	rjmp	.-2      	; 0x8d4 <__stop_program>
