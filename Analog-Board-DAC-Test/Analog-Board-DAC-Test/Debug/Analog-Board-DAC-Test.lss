
Analog-Board-DAC-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000848  000008dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000848  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080014c  0080014c  00000928  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00001080  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ef  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000223  00000000  00000000  00001a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051d  00000000  00000000  00001c32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000301  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040e  00000000  00000000  00002575  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_5>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d0 e1       	ldi	r29, 0x10	; 16
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	e8 e4       	ldi	r30, 0x48	; 72
  78:	f8 e0       	ldi	r31, 0x08	; 8
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ac 34       	cpi	r26, 0x4C	; 76
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	ac e4       	ldi	r26, 0x4C	; 76
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a3 37       	cpi	r26, 0x73	; 115
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 c6 03 	call	0x78c	; 0x78c <main>
  9a:	0c 94 22 04 	jmp	0x844	; 0x844 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <_Z8setupDACv>:
	{RELEASE_1,		DAC_MUX_EN3}							
};

void setupDAC(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
  a2:	83 b3       	in	r24, 0x13	; 19
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
  ac:	97 b1       	in	r25, 0x07	; 7
  ae:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
  b0:	e9 ed       	ldi	r30, 0xD9	; 217
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers 
  ba:	ea ed       	ldi	r30, 0xDA	; 218
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
  c4:	84 b3       	in	r24, 0x14	; 20
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
  ca:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
  cc:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
  ce:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
  d0:	a0 9a       	sbi	0x14, 0	; 20
}
  d2:	08 95       	ret

000000d4 <_Z7set_dachhj>:
void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
  d4:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
  d6:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
  d8:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
  da:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
  dc:	62 b9       	out	0x02, r22	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2d e0       	ldi	r18, 0x0D	; 13
  e0:	2a 95       	dec	r18
  e2:	f1 f7       	brne	.-4      	; 0xe0 <_Z7set_dachhj+0xc>
  e4:	00 00       	nop
	//} else {
		//
		//dac_mux_address = DAC_MUX_EN1;
	//}
	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
  e6:	ea ed       	ldi	r30, 0xDA	; 218
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	40 81       	ld	r20, Z
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	b9 01       	movw	r22, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <_Z7set_dachhj+0x24>
  f4:	66 0f       	add	r22, r22
  f6:	77 1f       	adc	r23, r23
  f8:	8a 95       	dec	r24
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <_Z7set_dachhj+0x20>
  fc:	cb 01       	movw	r24, r22
  fe:	94 2f       	mov	r25, r20
 100:	98 2b       	or	r25, r24
 102:	90 83       	st	Z, r25
 104:	72 e4       	ldi	r23, 0x42	; 66
 106:	7a 95       	dec	r23
 108:	f1 f7       	brne	.-4      	; 0x106 <_Z7set_dachhj+0x32>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_Z7set_dachhj+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
 10c:	90 81       	ld	r25, Z
 10e:	80 95       	com	r24
 110:	89 23       	and	r24, r25
 112:	80 83       	st	Z, r24
	
}
 114:	08 95       	ret

00000116 <_Z11display_DECjh>:


void display_DEC(uint16_t number, uint8_t digit)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	2a 97       	sbiw	r28, 0x0a	; 10
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
		SEVEN,
		EIGHT,
		NINE,
		
		
	};
 12a:	de 01       	movw	r26, r28
 12c:	11 96       	adiw	r26, 0x01	; 1
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	3a e0       	ldi	r19, 0x0A	; 10
 134:	01 90       	ld	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	31 50       	subi	r19, 0x01	; 1
 13a:	e1 f7       	brne	.-8      	; 0x134 <_Z11display_DECjh+0x1e>
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
 13c:	3f ef       	ldi	r19, 0xFF	; 255
 13e:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 140:	ea ed       	ldi	r30, 0xDA	; 218
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	30 81       	ld	r19, Z
 146:	30 61       	ori	r19, 0x10	; 16
 148:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 14a:	30 81       	ld	r19, Z
 14c:	3f 7e       	andi	r19, 0xEF	; 239
 14e:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
 150:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
 152:	30 81       	ld	r19, Z
 154:	30 62       	ori	r19, 0x20	; 32
 156:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
 158:	30 81       	ld	r19, Z
 15a:	3f 7d       	andi	r19, 0xDF	; 223
 15c:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
 15e:	62 30       	cpi	r22, 0x02	; 2
 160:	f9 f0       	breq	.+62     	; 0x1a0 <_Z11display_DECjh+0x8a>
 162:	63 30       	cpi	r22, 0x03	; 3
 164:	18 f4       	brcc	.+6      	; 0x16c <_Z11display_DECjh+0x56>
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	a1 f5       	brne	.+104    	; 0x1d2 <_Z11display_DECjh+0xbc>
 16a:	0d c0       	rjmp	.+26     	; 0x186 <_Z11display_DECjh+0x70>
 16c:	64 30       	cpi	r22, 0x04	; 4
 16e:	29 f1       	breq	.+74     	; 0x1ba <_Z11display_DECjh+0xa4>
 170:	68 30       	cpi	r22, 0x08	; 8
 172:	79 f5       	brne	.+94     	; 0x1d2 <_Z11display_DECjh+0xbc>
		
		case ONES:
		cathode_byte = DEC[(number % 10)]; //print first decimal digit
 174:	6a e0       	ldi	r22, 0x0A	; 10
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	0e 94 0e 04 	call	0x81c	; 0x81c <__udivmodhi4>
 17c:	fe 01       	movw	r30, r28
 17e:	e8 0f       	add	r30, r24
 180:	f9 1f       	adc	r31, r25
 182:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 184:	26 c0       	rjmp	.+76     	; 0x1d2 <_Z11display_DECjh+0xbc>
		
		case TENS:
		cathode_byte = DEC[((number % 100) / 10)]; //print second decimal digit
 186:	64 e6       	ldi	r22, 0x64	; 100
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	0e 94 0e 04 	call	0x81c	; 0x81c <__udivmodhi4>
 18e:	6a e0       	ldi	r22, 0x0A	; 10
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	0e 94 0e 04 	call	0x81c	; 0x81c <__udivmodhi4>
 196:	fe 01       	movw	r30, r28
 198:	e6 0f       	add	r30, r22
 19a:	f7 1f       	adc	r31, r23
 19c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 19e:	19 c0       	rjmp	.+50     	; 0x1d2 <_Z11display_DECjh+0xbc>
		
		case HUNDS:
		cathode_byte = DEC[((number % 1000) / 100)]; //print third decimal digit
 1a0:	68 ee       	ldi	r22, 0xE8	; 232
 1a2:	73 e0       	ldi	r23, 0x03	; 3
 1a4:	0e 94 0e 04 	call	0x81c	; 0x81c <__udivmodhi4>
 1a8:	64 e6       	ldi	r22, 0x64	; 100
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 0e 04 	call	0x81c	; 0x81c <__udivmodhi4>
 1b0:	fe 01       	movw	r30, r28
 1b2:	e6 0f       	add	r30, r22
 1b4:	f7 1f       	adc	r31, r23
 1b6:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <_Z11display_DECjh+0xbc>
		
		case THOUS:
		cathode_byte = DEC[((number % 10000) / 1000)]; //print fourth decimal digit
 1ba:	60 e1       	ldi	r22, 0x10	; 16
 1bc:	77 e2       	ldi	r23, 0x27	; 39
 1be:	0e 94 0e 04 	call	0x81c	; 0x81c <__udivmodhi4>
 1c2:	68 ee       	ldi	r22, 0xE8	; 232
 1c4:	73 e0       	ldi	r23, 0x03	; 3
 1c6:	0e 94 0e 04 	call	0x81c	; 0x81c <__udivmodhi4>
 1ca:	fe 01       	movw	r30, r28
 1cc:	e6 0f       	add	r30, r22
 1ce:	f7 1f       	adc	r31, r23
 1d0:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
 1d2:	20 95       	com	r18
 1d4:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 1d6:	ea ed       	ldi	r30, 0xDA	; 218
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 61       	ori	r24, 0x10	; 16
 1de:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 7e       	andi	r24, 0xEF	; 239
 1e4:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
 1e6:	2a 96       	adiw	r28, 0x0a	; 10
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <_Z8setupADCv>:

void setupADC(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
 1f8:	ea e7       	ldi	r30, 0x7A	; 122
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
 202:	ac e7       	ldi	r26, 0x7C	; 124
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	8c 91       	ld	r24, X
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	8c 93       	st	X, r24
	//MUX2:0 is 000 by default in ADMUX
	//ADMUX &= ~(1<<MUX0); //set ADC multiplexer to read ADC0 (PF0 on PORTF, pin 97)
	
	//ADCSRA |= (1<<ADATE); //set ADC in free running mode
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
 20c:	ae e7       	ldi	r26, 0x7E	; 126
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	8c 91       	ld	r24, X
 212:	81 60       	ori	r24, 0x01	; 1
 214:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
 216:	80 81       	ld	r24, Z
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	80 83       	st	Z, r24
	//adc_value = ADCL;
	//adc_value = adc_value | (ADCH <<8);
	//adc_previous = adc_value;
	//PORTH |= (1<<POTMUX_EN0); //set POTMUX_EN0
	
}
 21c:	08 95       	ret

0000021e <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	2f 92       	push	r2
 22a:	3f 92       	push	r3
 22c:	4f 92       	push	r4
 22e:	5f 92       	push	r5
 230:	6f 92       	push	r6
 232:	7f 92       	push	r7
 234:	8f 92       	push	r8
 236:	9f 92       	push	r9
 238:	af 92       	push	r10
 23a:	bf 92       	push	r11
 23c:	cf 92       	push	r12
 23e:	df 92       	push	r13
 240:	ef 92       	push	r14
 242:	ff 92       	push	r15
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	2f 93       	push	r18
 24a:	3f 93       	push	r19
 24c:	4f 93       	push	r20
 24e:	5f 93       	push	r21
 250:	6f 93       	push	r22
 252:	7f 93       	push	r23
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	af 93       	push	r26
 25a:	bf 93       	push	r27
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	
	display_DEC(value_to_display, digit[place]);
 264:	80 91 5c 01 	lds	r24, 0x015C
 268:	90 91 5d 01 	lds	r25, 0x015D
 26c:	e0 91 64 01 	lds	r30, 0x0164
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	e6 5f       	subi	r30, 0xF6	; 246
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	60 81       	ld	r22, Z
 278:	0e 94 8b 00 	call	0x116	; 0x116 <_Z11display_DECjh>
 27c:	cc 24       	eor	r12, r12
 27e:	dd 24       	eor	r13, r13
 280:	c3 94       	inc	r12
 282:	00 e0       	ldi	r16, 0x00	; 0
 284:	10 e0       	ldi	r17, 0x00	; 0
			
			//read pots on U2 and set appriate DAC S&H channel
			for (int i = 0; i <=15; i++)
			{
				DATA_BUS = i;
				POT_MUX &= ~(1<<POTMUX_EN0);
 286:	0f 2e       	mov	r0, r31
 288:	fa ed       	ldi	r31, 0xDA	; 218
 28a:	ef 2e       	mov	r14, r31
 28c:	ff 24       	eor	r15, r15
 28e:	f0 2d       	mov	r31, r0
				_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.	
				ADCSRA |= (1<<ADSC); //start ADC conversion
 290:	ca e7       	ldi	r28, 0x7A	; 122
 292:	d0 e0       	ldi	r29, 0x00	; 0
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
				POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
				//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
								
				//adc_previous = adc_value;
				adc_value = ADCL;
 294:	0f 2e       	mov	r0, r31
 296:	f8 e7       	ldi	r31, 0x78	; 120
 298:	8f 2e       	mov	r8, r31
 29a:	99 24       	eor	r9, r9
 29c:	f0 2d       	mov	r31, r0
				adc_value = adc_value | (ADCH <<8);
 29e:	0f 2e       	mov	r0, r31
 2a0:	f9 e7       	ldi	r31, 0x79	; 121
 2a2:	4f 2e       	mov	r4, r31
 2a4:	55 24       	eor	r5, r5
 2a6:	f0 2d       	mov	r31, r0
				} else if (i == 11) //exception to handle ARP_RATE pot
				{
					//store ARP pot value, but don't set DAC
									
				} else {
					set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
 2a8:	0f 2e       	mov	r0, r31
 2aa:	fc e2       	ldi	r31, 0x2C	; 44
 2ac:	2f 2e       	mov	r2, r31
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	3f 2e       	mov	r3, r31
 2b2:	f0 2d       	mov	r31, r0
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <__vector_5+0xa2>
	
}

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
	
	display_DEC(value_to_display, digit[place]);
 2b6:	0f 5f       	subi	r16, 0xFF	; 255
 2b8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ba:	08 94       	sec
 2bc:	c1 1c       	adc	r12, r1
 2be:	d1 1c       	adc	r13, r1
 2c0:	f8 01       	movw	r30, r16
			//POT_MUX |= (1<<POTMUX_EN0);
			
			//read pots on U2 and set appriate DAC S&H channel
			for (int i = 0; i <=15; i++)
			{
				DATA_BUS = i;
 2c2:	02 b9       	out	0x02, r16	; 2
				POT_MUX &= ~(1<<POTMUX_EN0);
 2c4:	d7 01       	movw	r26, r14
 2c6:	8c 91       	ld	r24, X
 2c8:	8f 7b       	andi	r24, 0xBF	; 191
 2ca:	8c 93       	st	X, r24
 2cc:	bd e0       	ldi	r27, 0x0D	; 13
 2ce:	ba 95       	dec	r27
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <__vector_5+0xb0>
 2d2:	00 00       	nop
				_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.	
				ADCSRA |= (1<<ADSC); //start ADC conversion
 2d4:	88 81       	ld	r24, Y
 2d6:	80 64       	ori	r24, 0x40	; 64
 2d8:	88 83       	st	Y, r24
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
 2da:	88 81       	ld	r24, Y
 2dc:	86 fd       	sbrc	r24, 6
 2de:	fd cf       	rjmp	.-6      	; 0x2da <__vector_5+0xbc>
				POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
 2e0:	d7 01       	movw	r26, r14
 2e2:	8c 91       	ld	r24, X
 2e4:	80 64       	ori	r24, 0x40	; 64
 2e6:	8c 93       	st	X, r24
				//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
								
				//adc_previous = adc_value;
				adc_value = ADCL;
 2e8:	d4 01       	movw	r26, r8
 2ea:	8c 91       	ld	r24, X
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	90 93 61 01 	sts	0x0161, r25
 2f2:	80 93 60 01 	sts	0x0160, r24
				adc_value = adc_value | (ADCH <<8);
 2f6:	d2 01       	movw	r26, r4
 2f8:	2c 91       	ld	r18, X
 2fa:	80 91 60 01 	lds	r24, 0x0160
 2fe:	90 91 61 01 	lds	r25, 0x0161
 302:	b2 2e       	mov	r11, r18
 304:	aa 24       	eor	r10, r10
 306:	8a 29       	or	r24, r10
 308:	9b 29       	or	r25, r11
 30a:	90 93 61 01 	sts	0x0161, r25
 30e:	80 93 60 01 	sts	0x0160, r24
				//set_dac(i, dac_channel[i]); //set DAC
				//for testing, set one DAC S&H channel to a fixed value and measure it as flanking S&H channels are swept from 0-10V
				//currently using this to set OSCA_INIT_CV and do fine tuning
							
				
				if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
 312:	c8 01       	movw	r24, r16
 314:	08 97       	sbiw	r24, 0x08	; 8
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	91 05       	cpc	r25, r1
 31a:	08 f0       	brcs	.+2      	; 0x31e <__vector_5+0x100>
 31c:	44 c0       	rjmp	.+136    	; 0x3a6 <__vector_5+0x188>
				{
					uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
					if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
 31e:	e9 30       	cpi	r30, 0x09	; 9
 320:	f1 05       	cpc	r31, r1
 322:	19 f0       	breq	.+6      	; 0x32a <__vector_5+0x10c>
				//currently using this to set OSCA_INIT_CV and do fine tuning
							
				
				if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
				{
					uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
 324:	2f e9       	ldi	r18, 0x9F	; 159
 326:	38 e1       	ldi	r19, 0x18	; 24
 328:	02 c0       	rjmp	.+4      	; 0x32e <__vector_5+0x110>
					if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
 32a:	25 e0       	ldi	r18, 0x05	; 5
 32c:	3f e1       	ldi	r19, 0x1F	; 31
					if (adc_value >= 512) {
 32e:	80 91 60 01 	lds	r24, 0x0160
 332:	90 91 61 01 	lds	r25, 0x0161
 336:	b2 e0       	ldi	r27, 0x02	; 2
 338:	80 30       	cpi	r24, 0x00	; 0
 33a:	9b 07       	cpc	r25, r27
 33c:	d8 f0       	brcs	.+54     	; 0x374 <__vector_5+0x156>
						set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value + (adc_value - 512)));
 33e:	ee 0f       	add	r30, r30
 340:	ff 1f       	adc	r31, r31
 342:	e2 0d       	add	r30, r2
 344:	f3 1d       	adc	r31, r3
 346:	81 81       	ldd	r24, Z+1	; 0x01
 348:	60 81       	ld	r22, Z
 34a:	40 91 60 01 	lds	r20, 0x0160
 34e:	50 91 61 01 	lds	r21, 0x0161
 352:	40 50       	subi	r20, 0x00	; 0
 354:	52 40       	sbci	r21, 0x02	; 2
 356:	42 0f       	add	r20, r18
 358:	53 1f       	adc	r21, r19
 35a:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z7set_dachhj>
						tune_offset = adc_value - 512;
 35e:	80 91 60 01 	lds	r24, 0x0160
 362:	90 91 61 01 	lds	r25, 0x0161
 366:	80 50       	subi	r24, 0x00	; 0
 368:	92 40       	sbci	r25, 0x02	; 2
 36a:	90 93 5f 01 	sts	0x015F, r25
 36e:	80 93 5e 01 	sts	0x015E, r24
 372:	2f c0       	rjmp	.+94     	; 0x3d2 <__vector_5+0x1b4>
					} else {
						set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value - (512- adc_value))); 
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	e2 0d       	add	r30, r2
 37a:	f3 1d       	adc	r31, r3
 37c:	81 81       	ldd	r24, Z+1	; 0x01
 37e:	60 81       	ld	r22, Z
 380:	40 91 60 01 	lds	r20, 0x0160
 384:	50 91 61 01 	lds	r21, 0x0161
 388:	40 50       	subi	r20, 0x00	; 0
 38a:	52 40       	sbci	r21, 0x02	; 2
 38c:	42 0f       	add	r20, r18
 38e:	53 1f       	adc	r21, r19
 390:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z7set_dachhj>
						tune_offset = adc_value;
 394:	80 91 60 01 	lds	r24, 0x0160
 398:	90 91 61 01 	lds	r25, 0x0161
 39c:	90 93 5f 01 	sts	0x015F, r25
 3a0:	80 93 5e 01 	sts	0x015E, r24
 3a4:	16 c0       	rjmp	.+44     	; 0x3d2 <__vector_5+0x1b4>
					
				//} else if (i == 0) //when i = 0 need to set DAC to value read by pot 15 on U2
				//{
					//set_dac(dac_pot_decoder_0[15][1],dac_pot_decoder_0[15][0], adc_value << 4);
					//value_to_display = adc_value;
				} else if (i == 11) //exception to handle ARP_RATE pot
 3a6:	eb 30       	cpi	r30, 0x0B	; 11
 3a8:	f1 05       	cpc	r31, r1
 3aa:	09 f4       	brne	.+2      	; 0x3ae <__vector_5+0x190>
 3ac:	84 cf       	rjmp	.-248    	; 0x2b6 <__vector_5+0x98>
				{
					//store ARP pot value, but don't set DAC
									
				} else {
					set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	e2 0d       	add	r30, r2
 3b4:	f3 1d       	adc	r31, r3
 3b6:	81 81       	ldd	r24, Z+1	; 0x01
 3b8:	60 81       	ld	r22, Z
 3ba:	40 91 60 01 	lds	r20, 0x0160
 3be:	50 91 61 01 	lds	r21, 0x0161
 3c2:	42 95       	swap	r20
 3c4:	52 95       	swap	r21
 3c6:	50 7f       	andi	r21, 0xF0	; 240
 3c8:	54 27       	eor	r21, r20
 3ca:	40 7f       	andi	r20, 0xF0	; 240
 3cc:	54 27       	eor	r21, r20
 3ce:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z7set_dachhj>
		    //POT_MUX &= ~(1<<POTMUX_EN0); //clear POTMUX_EN0 to select input on U2
			//_delay_us(10);
			//POT_MUX |= (1<<POTMUX_EN0);
			
			//read pots on U2 and set appriate DAC S&H channel
			for (int i = 0; i <=15; i++)
 3d2:	e0 e1       	ldi	r30, 0x10	; 16
 3d4:	ce 16       	cp	r12, r30
 3d6:	d1 04       	cpc	r13, r1
 3d8:	0c f4       	brge	.+2      	; 0x3dc <__vector_5+0x1be>
 3da:	6d cf       	rjmp	.-294    	; 0x2b6 <__vector_5+0x98>
 3dc:	00 e0       	ldi	r16, 0x00	; 0
 3de:	10 e0       	ldi	r17, 0x00	; 0
			//POT_MUX |= (1<<POTMUX_EN1);
			for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
			{
				
				DATA_BUS = i+1; //U4 input 0 is not used (grounded)
				POT_MUX &= ~(1<<POTMUX_EN1);
 3e0:	0f 2e       	mov	r0, r31
 3e2:	fa ed       	ldi	r31, 0xDA	; 218
 3e4:	ef 2e       	mov	r14, r31
 3e6:	ff 24       	eor	r15, r15
 3e8:	f0 2d       	mov	r31, r0
				_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
				ADCSRA |= (1<<ADSC); //start ADC conversion
 3ea:	ca e7       	ldi	r28, 0x7A	; 122
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
				POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2		
				//adc_previous = adc_value;
				adc_value = ADCL;
 3ee:	0f 2e       	mov	r0, r31
 3f0:	f8 e7       	ldi	r31, 0x78	; 120
 3f2:	cf 2e       	mov	r12, r31
 3f4:	dd 24       	eor	r13, r13
 3f6:	f0 2d       	mov	r31, r0
				adc_value = adc_value | (ADCH <<8);
 3f8:	0f 2e       	mov	r0, r31
 3fa:	f9 e7       	ldi	r31, 0x79	; 121
 3fc:	af 2e       	mov	r10, r31
 3fe:	bb 24       	eor	r11, r11
 400:	f0 2d       	mov	r31, r0
				//if (i == 0) //when i = 0 need to set DAC to value read by pot 15 on U4
				//{
					//set_dac(dac_pot_decoder_1[14][1],dac_pot_decoder_1[14][0], adc_value << 4);
					////value_to_display = adc_value;
				//} else {
					set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
 402:	0f 2e       	mov	r0, r31
 404:	fe e0       	ldi	r31, 0x0E	; 14
 406:	8f 2e       	mov	r8, r31
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	9f 2e       	mov	r9, r31
 40c:	f0 2d       	mov	r31, r0
	//adc_previous = adc_value;
	//PORTH |= (1<<POTMUX_EN0); //set POTMUX_EN0
	
}

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
 40e:	80 2f       	mov	r24, r16
 410:	8f 5f       	subi	r24, 0xFF	; 255
			//_delay_us(10);
			//POT_MUX |= (1<<POTMUX_EN1);
			for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
			{
				
				DATA_BUS = i+1; //U4 input 0 is not used (grounded)
 412:	82 b9       	out	0x02, r24	; 2
				POT_MUX &= ~(1<<POTMUX_EN1);
 414:	d7 01       	movw	r26, r14
 416:	8c 91       	ld	r24, X
 418:	8f 77       	andi	r24, 0x7F	; 127
 41a:	8c 93       	st	X, r24
 41c:	bd e0       	ldi	r27, 0x0D	; 13
 41e:	ba 95       	dec	r27
 420:	f1 f7       	brne	.-4      	; 0x41e <__vector_5+0x200>
 422:	00 00       	nop
				_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
				ADCSRA |= (1<<ADSC); //start ADC conversion
 424:	88 81       	ld	r24, Y
 426:	80 64       	ori	r24, 0x40	; 64
 428:	88 83       	st	Y, r24
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
 42a:	88 81       	ld	r24, Y
 42c:	86 fd       	sbrc	r24, 6
 42e:	fd cf       	rjmp	.-6      	; 0x42a <__vector_5+0x20c>
				POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2		
 430:	f7 01       	movw	r30, r14
 432:	80 81       	ld	r24, Z
 434:	80 68       	ori	r24, 0x80	; 128
 436:	80 83       	st	Z, r24
				//adc_previous = adc_value;
				adc_value = ADCL;
 438:	d6 01       	movw	r26, r12
 43a:	8c 91       	ld	r24, X
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	90 93 61 01 	sts	0x0161, r25
 442:	80 93 60 01 	sts	0x0160, r24
				adc_value = adc_value | (ADCH <<8);
 446:	f5 01       	movw	r30, r10
 448:	20 81       	ld	r18, Z
 44a:	80 91 60 01 	lds	r24, 0x0160
 44e:	90 91 61 01 	lds	r25, 0x0161
 452:	72 2e       	mov	r7, r18
 454:	66 24       	eor	r6, r6
 456:	86 29       	or	r24, r6
 458:	97 29       	or	r25, r7
 45a:	90 93 61 01 	sts	0x0161, r25
 45e:	80 93 60 01 	sts	0x0160, r24
				//if (i == 0) //when i = 0 need to set DAC to value read by pot 15 on U4
				//{
					//set_dac(dac_pot_decoder_1[14][1],dac_pot_decoder_1[14][0], adc_value << 4);
					////value_to_display = adc_value;
				//} else {
					set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
 462:	f8 01       	movw	r30, r16
 464:	ee 0f       	add	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	e8 0d       	add	r30, r8
 46a:	f9 1d       	adc	r31, r9
 46c:	81 81       	ldd	r24, Z+1	; 0x01
 46e:	60 81       	ld	r22, Z
 470:	40 91 60 01 	lds	r20, 0x0160
 474:	50 91 61 01 	lds	r21, 0x0161
 478:	42 95       	swap	r20
 47a:	52 95       	swap	r21
 47c:	50 7f       	andi	r21, 0xF0	; 240
 47e:	54 27       	eor	r21, r20
 480:	40 7f       	andi	r20, 0xF0	; 240
 482:	54 27       	eor	r21, r20
 484:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z7set_dachhj>
			
			//now read second set of pots form U4 databus should already = 15 from previous loop.
		    //POT_MUX &= ~(1<<POTMUX_EN1); //clear POTMUX_EN1 to select input on U4
			//_delay_us(10);
			//POT_MUX |= (1<<POTMUX_EN1);
			for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
 488:	0f 5f       	subi	r16, 0xFF	; 255
 48a:	1f 4f       	sbci	r17, 0xFF	; 255
 48c:	0f 30       	cpi	r16, 0x0F	; 15
 48e:	11 05       	cpc	r17, r1
 490:	09 f0       	breq	.+2      	; 0x494 <__vector_5+0x276>
 492:	bd cf       	rjmp	.-134    	; 0x40e <__vector_5+0x1f0>
				//}
								
				//POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U4
		  }

		DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
 494:	a1 98       	cbi	0x14, 1	; 20
		DAC_CTRL |= (1<<DAC_RS);
 496:	a1 9a       	sbi	0x14, 1	; 20
	//do SPI read/write every 5 interrupts (16.5 ms)
	if (switch_timer++ == 5)
 498:	80 91 65 01 	lds	r24, 0x0165
 49c:	98 2f       	mov	r25, r24
 49e:	9f 5f       	subi	r25, 0xFF	; 255
 4a0:	90 93 65 01 	sts	0x0165, r25
 4a4:	85 30       	cpi	r24, 0x05	; 5
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__vector_5+0x28c>
 4a8:	44 c1       	rjmp	.+648    	; 0x732 <__vector_5+0x514>
	{
		switch_timer = 0;
 4aa:	10 92 65 01 	sts	0x0165, r1
		
		
		SPI_PORT |= SPI_SW_LATCH;
 4ae:	2d 9a       	sbi	0x05, 5	; 5
		((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
		((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
		((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
		((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
		((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
		ISW8_SW_ON << ISW8_LED; 
 4b0:	20 91 6a 01 	lds	r18, 0x016A
 4b4:	60 91 6a 01 	lds	r22, 0x016A
 4b8:	80 91 6a 01 	lds	r24, 0x016A
 4bc:	70 91 6a 01 	lds	r23, 0x016A
 4c0:	50 91 6a 01 	lds	r21, 0x016A
 4c4:	40 91 6a 01 	lds	r20, 0x016A
 4c8:	30 91 6a 01 	lds	r19, 0x016A
 4cc:	90 91 6f 01 	lds	r25, 0x016F
 4d0:	71 70       	andi	r23, 0x01	; 1
 4d2:	64 70       	andi	r22, 0x04	; 4
 4d4:	67 2b       	or	r22, r23
 4d6:	50 71       	andi	r21, 0x10	; 16
 4d8:	56 2b       	or	r21, r22
 4da:	40 72       	andi	r20, 0x20	; 32
 4dc:	45 2b       	or	r20, r21
 4de:	30 74       	andi	r19, 0x40	; 64
 4e0:	34 2b       	or	r19, r20
 4e2:	97 95       	ror	r25
 4e4:	99 27       	eor	r25, r25
 4e6:	97 95       	ror	r25
 4e8:	93 2b       	or	r25, r19
 4ea:	22 1f       	adc	r18, r18
 4ec:	22 27       	eor	r18, r18
 4ee:	22 1f       	adc	r18, r18
 4f0:	22 0f       	add	r18, r18
 4f2:	29 2b       	or	r18, r25
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	88 70       	andi	r24, 0x08	; 8
 500:	90 70       	andi	r25, 0x00	; 0
 502:	82 2b       	or	r24, r18
 504:	8e bd       	out	0x2e, r24	; 46
		
		while (!(SPSR & (1<<SPIF)));
 506:	0d b4       	in	r0, 0x2d	; 45
 508:	07 fe       	sbrs	r0, 7
 50a:	fd cf       	rjmp	.-6      	; 0x506 <__vector_5+0x2e8>
		
		//Now read SPDR for switch data shifted in from 74XX165 U14
		spi_sw_current_state = SPDR;
 50c:	8e b5       	in	r24, 0x2e	; 46
 50e:	80 93 6c 01 	sts	0x016C, r24
		
		spi_sw_current_state ^= spi_sw_previous_state;
 512:	80 91 6c 01 	lds	r24, 0x016C
 516:	90 91 6b 01 	lds	r25, 0x016B
 51a:	89 27       	eor	r24, r25
 51c:	80 93 6c 01 	sts	0x016C, r24
		spi_sw_previous_state ^= spi_sw_current_state;
 520:	80 91 6b 01 	lds	r24, 0x016B
 524:	90 91 6c 01 	lds	r25, 0x016C
 528:	89 27       	eor	r24, r25
 52a:	80 93 6b 01 	sts	0x016B, r24
		spi_sw_current_state &= spi_sw_previous_state;
 52e:	80 91 6c 01 	lds	r24, 0x016C
 532:	90 91 6b 01 	lds	r25, 0x016B
 536:	89 23       	and	r24, r25
 538:	80 93 6c 01 	sts	0x016C, r24
		
		//toggle switch state 		

		if (spi_sw_current_state & (1<<ISW1_SW)) sw_latch_five ^= (1 << ISW1_SW);
 53c:	80 91 6c 01 	lds	r24, 0x016C
 540:	82 ff       	sbrs	r24, 2
 542:	06 c0       	rjmp	.+12     	; 0x550 <__vector_5+0x332>
 544:	90 91 6a 01 	lds	r25, 0x016A
 548:	84 e0       	ldi	r24, 0x04	; 4
 54a:	89 27       	eor	r24, r25
 54c:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW2_SW)) sw_latch_five ^= (1 << ISW2_SW);					
 550:	80 91 6c 01 	lds	r24, 0x016C
 554:	81 ff       	sbrs	r24, 1
 556:	06 c0       	rjmp	.+12     	; 0x564 <__vector_5+0x346>
 558:	90 91 6a 01 	lds	r25, 0x016A
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	89 27       	eor	r24, r25
 560:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW3_SW)) sw_latch_five ^= (1 << ISW3_SW);
 564:	80 91 6c 01 	lds	r24, 0x016C
 568:	80 ff       	sbrs	r24, 0
 56a:	06 c0       	rjmp	.+12     	; 0x578 <__vector_5+0x35a>
 56c:	90 91 6a 01 	lds	r25, 0x016A
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	89 27       	eor	r24, r25
 574:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW4_SW)) sw_latch_five ^= (1 << ISW4_SW);	
 578:	80 91 6c 01 	lds	r24, 0x016C
 57c:	88 23       	and	r24, r24
 57e:	2c f4       	brge	.+10     	; 0x58a <__vector_5+0x36c>
 580:	80 91 6a 01 	lds	r24, 0x016A
 584:	80 58       	subi	r24, 0x80	; 128
 586:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW5_SW)) sw_latch_five ^= (1 << ISW5_SW);
 58a:	80 91 6c 01 	lds	r24, 0x016C
 58e:	84 ff       	sbrs	r24, 4
 590:	06 c0       	rjmp	.+12     	; 0x59e <__vector_5+0x380>
 592:	90 91 6a 01 	lds	r25, 0x016A
 596:	80 e1       	ldi	r24, 0x10	; 16
 598:	89 27       	eor	r24, r25
 59a:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW6_SW)) sw_latch_five ^= (1 << ISW6_SW);
 59e:	80 91 6c 01 	lds	r24, 0x016C
 5a2:	85 ff       	sbrs	r24, 5
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <__vector_5+0x394>
 5a6:	90 91 6a 01 	lds	r25, 0x016A
 5aa:	80 e2       	ldi	r24, 0x20	; 32
 5ac:	89 27       	eor	r24, r25
 5ae:	80 93 6a 01 	sts	0x016A, r24
		if (spi_sw_current_state & (1<<ISW7_SW)) sw_latch_five ^= (1 << ISW7_SW);
 5b2:	80 91 6c 01 	lds	r24, 0x016C
 5b6:	86 ff       	sbrs	r24, 6
 5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <__vector_5+0x3a8>
 5ba:	90 91 6a 01 	lds	r25, 0x016A
 5be:	80 e4       	ldi	r24, 0x40	; 64
 5c0:	89 27       	eor	r24, r25
 5c2:	80 93 6a 01 	sts	0x016A, r24
		
		//SHIFT 4th BYTE
		SPDR = 0; //no LEDs connected in current test set up
 5c6:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 5c8:	0d b4       	in	r0, 0x2d	; 45
 5ca:	07 fe       	sbrs	r0, 7
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <__vector_5+0x3aa>
		//Now read SPDR for switch data shifted in from 74XX165 (U9)
		//check if ISW12_SW bit is set
		if (SPDR >> 5 & 1)
 5ce:	0e b4       	in	r0, 0x2e	; 46
 5d0:	05 fe       	sbrs	r0, 5
 5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__vector_5+0x3be>
		{
			ISW12_SW_ON = 1;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	80 93 72 01 	sts	0x0172, r24
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <__vector_5+0x3c2>
		}
		else
		{
			ISW12_SW_ON = 0;
 5dc:	10 92 72 01 	sts	0x0172, r1
		}
		//check if ISW13_SW bit is set
		if (SPDR >> 6 & 1)
 5e0:	0e b4       	in	r0, 0x2e	; 46
 5e2:	06 fe       	sbrs	r0, 6
 5e4:	04 c0       	rjmp	.+8      	; 0x5ee <__vector_5+0x3d0>
		{
			ISW13_SW_ON = 1;
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	80 93 71 01 	sts	0x0171, r24
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <__vector_5+0x3d4>
		}
		else
		{
			ISW13_SW_ON = 0;
 5ee:	10 92 71 01 	sts	0x0171, r1
		}
		
		//SHIFT 3th BYTE
		SPDR = 0;
 5f2:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 5f4:	0d b4       	in	r0, 0x2d	; 45
 5f6:	07 fe       	sbrs	r0, 7
 5f8:	fd cf       	rjmp	.-6      	; 0x5f4 <__vector_5+0x3d6>

		//SHIFT 2th BYTE
		SPDR = 0;
 5fa:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 5fc:	0d b4       	in	r0, 0x2d	; 45
 5fe:	07 fe       	sbrs	r0, 7
 600:	fd cf       	rjmp	.-6      	; 0x5fc <__vector_5+0x3de>
		
		//SHIFT 1st BYTE
		//SPDR = (ISW12_SW_ON << 2) | ISW11_LED; //TURN ON ISW12 (if ISW12_SW is ON) and ISW11 LEDs, both on 74XX595 U8, first shift register in chain
		SPDR = (ISW12_SW_ON <<2) | (ISW13_SW_ON << 7); //turn on ISW12 if ISW12_SW is ON, turn ISW11 (MSB of first shift register chain) if ISW13_SW is ON
 602:	80 91 72 01 	lds	r24, 0x0172
 606:	90 91 71 01 	lds	r25, 0x0171
 60a:	97 95       	ror	r25
 60c:	99 27       	eor	r25, r25
 60e:	97 95       	ror	r25
 610:	88 0f       	add	r24, r24
 612:	88 0f       	add	r24, r24
 614:	89 2b       	or	r24, r25
 616:	8e bd       	out	0x2e, r24	; 46
		//Wait for SPI shift to complete
		while (!(SPSR & (1<<SPIF)));
 618:	0d b4       	in	r0, 0x2d	; 45
 61a:	07 fe       	sbrs	r0, 7
 61c:	fd cf       	rjmp	.-6      	; 0x618 <__vector_5+0x3fa>
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
 61e:	ed ed       	ldi	r30, 0xDD	; 221
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	87 7f       	andi	r24, 0xF7	; 247
 626:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
 628:	80 81       	ld	r24, Z
 62a:	88 60       	ori	r24, 0x08	; 8
 62c:	80 83       	st	Z, r24
		
		//clear SPI_SW_LATCH
		SPI_PORT &= ~SPI_SW_LATCH;	
 62e:	2d 98       	cbi	0x05, 5	; 5
		//this toggle code works, but I haven't figured out how it works
		//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
		current_sw_state = SWITCH_PORT;
 630:	8f b1       	in	r24, 0x0f	; 15
 632:	80 93 6d 01 	sts	0x016D, r24
		current_sw_state ^= previous_sw_state;
 636:	80 91 6d 01 	lds	r24, 0x016D
 63a:	90 91 6e 01 	lds	r25, 0x016E
 63e:	89 27       	eor	r24, r25
 640:	80 93 6d 01 	sts	0x016D, r24
		previous_sw_state ^= current_sw_state;
 644:	80 91 6e 01 	lds	r24, 0x016E
 648:	90 91 6d 01 	lds	r25, 0x016D
 64c:	89 27       	eor	r24, r25
 64e:	80 93 6e 01 	sts	0x016E, r24
		current_sw_state &= previous_sw_state;
 652:	80 91 6d 01 	lds	r24, 0x016D
 656:	90 91 6e 01 	lds	r25, 0x016E
 65a:	89 23       	and	r24, r25
 65c:	80 93 6d 01 	sts	0x016D, r24
		
		if (current_sw_state & (1<<ISW8_SW)) 
 660:	80 91 6d 01 	lds	r24, 0x016D
 664:	82 ff       	sbrs	r24, 2
 666:	06 c0       	rjmp	.+12     	; 0x674 <__vector_5+0x456>
		{
			ISW8_SW_ON ^= 1 << 0; //toggle switch state
 668:	90 91 6f 01 	lds	r25, 0x016F
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	89 27       	eor	r24, r25
 670:	80 93 6f 01 	sts	0x016F, r24
		}
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
 674:	ed ed       	ldi	r30, 0xDD	; 221
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	8f 7b       	andi	r24, 0xBF	; 191
 67c:	80 83       	st	Z, r24
		((sw_latch_five >> ISW2_SW) & 1) << 2 |
		((sw_latch_five >> ISW3_SW) & 1) << 1 |
		((sw_latch_five >> ISW5_SW) & 1) << 6 |
		((sw_latch_five >> ISW6_SW) & 1) << 7 |
		((sw_latch_five >> ISW7_SW) & 1) << 5 |
		ISW8_SW_ON << 4;
 67e:	40 91 6a 01 	lds	r20, 0x016A
 682:	a0 91 6a 01 	lds	r26, 0x016A
 686:	30 91 6a 01 	lds	r19, 0x016A
 68a:	60 91 6a 01 	lds	r22, 0x016A
 68e:	20 91 6a 01 	lds	r18, 0x016A
 692:	80 91 6a 01 	lds	r24, 0x016A
 696:	50 91 6a 01 	lds	r21, 0x016A
 69a:	90 91 6f 01 	lds	r25, 0x016F
 69e:	b0 e0       	ldi	r27, 0x00	; 0
 6a0:	b5 95       	asr	r27
 6a2:	a7 95       	ror	r26
 6a4:	b5 95       	asr	r27
 6a6:	a7 95       	ror	r26
 6a8:	a1 70       	andi	r26, 0x01	; 1
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	61 70       	andi	r22, 0x01	; 1
 6ae:	70 70       	andi	r23, 0x00	; 0
 6b0:	66 0f       	add	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	6a 2b       	or	r22, r26
 6b6:	92 95       	swap	r25
 6b8:	90 7f       	andi	r25, 0xF0	; 240
 6ba:	69 2b       	or	r22, r25
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	95 95       	asr	r25
 6c0:	87 95       	ror	r24
 6c2:	95 95       	asr	r25
 6c4:	87 95       	ror	r24
 6c6:	95 95       	asr	r25
 6c8:	87 95       	ror	r24
 6ca:	95 95       	asr	r25
 6cc:	87 95       	ror	r24
 6ce:	95 95       	asr	r25
 6d0:	87 95       	ror	r24
 6d2:	96 95       	lsr	r25
 6d4:	98 2f       	mov	r25, r24
 6d6:	88 27       	eor	r24, r24
 6d8:	97 95       	ror	r25
 6da:	87 95       	ror	r24
 6dc:	86 2b       	or	r24, r22
 6de:	44 1f       	adc	r20, r20
 6e0:	44 27       	eor	r20, r20
 6e2:	44 1f       	adc	r20, r20
 6e4:	44 0f       	add	r20, r20
 6e6:	44 0f       	add	r20, r20
 6e8:	44 0f       	add	r20, r20
 6ea:	84 2b       	or	r24, r20
 6ec:	63 2f       	mov	r22, r19
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	66 0f       	add	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	64 70       	andi	r22, 0x04	; 4
 6f6:	70 70       	andi	r23, 0x00	; 0
 6f8:	68 2b       	or	r22, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	c9 01       	movw	r24, r18
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	80 74       	andi	r24, 0x40	; 64
 708:	90 70       	andi	r25, 0x00	; 0
 70a:	68 2b       	or	r22, r24
 70c:	85 2f       	mov	r24, r21
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	96 95       	lsr	r25
 712:	87 95       	ror	r24
 714:	80 72       	andi	r24, 0x20	; 32
 716:	90 70       	andi	r25, 0x00	; 0
 718:	86 2b       	or	r24, r22
 71a:	82 b9       	out	0x02, r24	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
 71c:	80 81       	ld	r24, Z
 71e:	80 64       	ori	r24, 0x40	; 64
 720:	80 83       	st	Z, r24
 722:	46 e0       	ldi	r20, 0x06	; 6
 724:	4a 95       	dec	r20
 726:	f1 f7       	brne	.-4      	; 0x724 <__vector_5+0x506>
 728:	00 c0       	rjmp	.+0      	; 0x72a <__vector_5+0x50c>
		_delay_us(1);
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
 72a:	80 81       	ld	r24, Z
 72c:	8f 7b       	andi	r24, 0xBF	; 191
 72e:	80 83       	st	Z, r24
		DATA_BUS = 0;			  	
 730:	12 b8       	out	0x02, r1	; 2
	}
	
	

	//increment digit display place
	if (place++ == 3) //post increment
 732:	80 91 64 01 	lds	r24, 0x0164
 736:	98 2f       	mov	r25, r24
 738:	9f 5f       	subi	r25, 0xFF	; 255
 73a:	90 93 64 01 	sts	0x0164, r25
 73e:	83 30       	cpi	r24, 0x03	; 3
 740:	11 f4       	brne	.+4      	; 0x746 <__vector_5+0x528>
	{
		place = 0;
 742:	10 92 64 01 	sts	0x0164, r1
	}
	

	
}	
 746:	ff 91       	pop	r31
 748:	ef 91       	pop	r30
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	bf 91       	pop	r27
 750:	af 91       	pop	r26
 752:	9f 91       	pop	r25
 754:	8f 91       	pop	r24
 756:	7f 91       	pop	r23
 758:	6f 91       	pop	r22
 75a:	5f 91       	pop	r21
 75c:	4f 91       	pop	r20
 75e:	3f 91       	pop	r19
 760:	2f 91       	pop	r18
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	df 90       	pop	r13
 76c:	cf 90       	pop	r12
 76e:	bf 90       	pop	r11
 770:	af 90       	pop	r10
 772:	9f 90       	pop	r9
 774:	8f 90       	pop	r8
 776:	7f 90       	pop	r7
 778:	6f 90       	pop	r6
 77a:	5f 90       	pop	r5
 77c:	4f 90       	pop	r4
 77e:	3f 90       	pop	r3
 780:	2f 90       	pop	r2
 782:	0f 90       	pop	r0
 784:	0f be       	out	0x3f, r0	; 63
 786:	0f 90       	pop	r0
 788:	1f 90       	pop	r1
 78a:	18 95       	reti

0000078c <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
 78c:	80 e8       	ldi	r24, 0x80	; 128
 78e:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
 790:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
 792:	27 9a       	sbi	0x04, 7	; 4
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
	//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
	//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
	DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
 794:	84 b1       	in	r24, 0x04	; 4
 796:	87 62       	ori	r24, 0x27	; 39
 798:	84 b9       	out	0x04, r24	; 4
	
	//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
	DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
 79a:	ec ed       	ldi	r30, 0xDC	; 220
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	8c 65       	ori	r24, 0x5C	; 92
 7a2:	80 83       	st	Z, r24
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
	SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
 7a4:	85 b1       	in	r24, 0x05	; 5
 7a6:	89 7d       	andi	r24, 0xD9	; 217
 7a8:	85 b9       	out	0x05, r24	; 5
	
	//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
	SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
 7aa:	ed ed       	ldi	r30, 0xDD	; 221
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	83 7f       	andi	r24, 0xF3	; 243
 7b2:	80 83       	st	Z, r24
	
	//SET UP SPI
	SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
 7b4:	80 e5       	ldi	r24, 0x50	; 80
 7b6:	8c bd       	out	0x2c, r24	; 44
	
	//Pull LED_LATCH LOW
	SPI_LATCH_PORT &= ~LED_LATCH;
 7b8:	80 81       	ld	r24, Z
 7ba:	87 7f       	andi	r24, 0xF7	; 247
 7bc:	80 83       	st	Z, r24
	////Wait for SPI shift to complete
	//while (!(SPSR & (1<<SPIF)));
	
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
	
	SPI_LATCH_PORT &= ~LED_LATCH;
 7be:	80 81       	ld	r24, Z
 7c0:	87 7f       	andi	r24, 0xF7	; 247
 7c2:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 7c4:	80 81       	ld	r24, Z
 7c6:	88 60       	ori	r24, 0x08	; 8
 7c8:	80 83       	st	Z, r24
	
	//set EG2 POL
	EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
 7ca:	80 81       	ld	r24, Z
 7cc:	8f 7e       	andi	r24, 0xEF	; 239
 7ce:	80 83       	st	Z, r24
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
 7d0:	a9 ed       	ldi	r26, 0xD9	; 217
 7d2:	b0 e0       	ldi	r27, 0x00	; 0
 7d4:	8c 91       	ld	r24, X
 7d6:	80 6c       	ori	r24, 0xC0	; 192
 7d8:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
 7da:	ea ed       	ldi	r30, 0xDA	; 218
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	80 6c       	ori	r24, 0xC0	; 192
 7e2:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
 7e4:	81 b1       	in	r24, 0x01	; 1
 7e6:	8f ef       	ldi	r24, 0xFF	; 255
 7e8:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
 7ea:	92 b1       	in	r25, 0x02	; 2
 7ec:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
 7ee:	8c 91       	ld	r24, X
 7f0:	80 63       	ori	r24, 0x30	; 48
 7f2:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
 7f4:	80 81       	ld	r24, Z
 7f6:	8f 7c       	andi	r24, 0xCF	; 207
 7f8:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<ISW8_SW); //set ISW8_SW pin as input
 7fa:	82 98       	cbi	0x10, 2	; 16
	//setup ADC, free running for now. Not sure if this is the way it should be done. Look into benefits of one-shot ADC
    setupADC();	
 7fc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_Z8setupADCv>
	
	//setup DAC
	setupDAC();
 800:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8setupDACv>
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
 804:	e0 eb       	ldi	r30, 0xB0	; 176
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	80 81       	ld	r24, Z
 80a:	86 60       	ori	r24, 0x06	; 6
 80c:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
 80e:	e0 e7       	ldi	r30, 0x70	; 112
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	81 60       	ori	r24, 0x01	; 1
 816:	80 83       	st	Z, r24
	sei(); //enable global interrupts
 818:	78 94       	sei
 81a:	ff cf       	rjmp	.-2      	; 0x81a <main+0x8e>

0000081c <__udivmodhi4>:
 81c:	aa 1b       	sub	r26, r26
 81e:	bb 1b       	sub	r27, r27
 820:	51 e1       	ldi	r21, 0x11	; 17
 822:	07 c0       	rjmp	.+14     	; 0x832 <__udivmodhi4_ep>

00000824 <__udivmodhi4_loop>:
 824:	aa 1f       	adc	r26, r26
 826:	bb 1f       	adc	r27, r27
 828:	a6 17       	cp	r26, r22
 82a:	b7 07       	cpc	r27, r23
 82c:	10 f0       	brcs	.+4      	; 0x832 <__udivmodhi4_ep>
 82e:	a6 1b       	sub	r26, r22
 830:	b7 0b       	sbc	r27, r23

00000832 <__udivmodhi4_ep>:
 832:	88 1f       	adc	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	5a 95       	dec	r21
 838:	a9 f7       	brne	.-22     	; 0x824 <__udivmodhi4_loop>
 83a:	80 95       	com	r24
 83c:	90 95       	com	r25
 83e:	bc 01       	movw	r22, r24
 840:	cd 01       	movw	r24, r26
 842:	08 95       	ret

00000844 <_exit>:
 844:	f8 94       	cli

00000846 <__stop_program>:
 846:	ff cf       	rjmp	.-2      	; 0x846 <__stop_program>
