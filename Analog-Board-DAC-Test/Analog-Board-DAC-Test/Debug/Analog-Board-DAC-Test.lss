
Analog-Board-DAC-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000007c0  00000854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080010e  0080010e  00000862  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000864  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000848  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000025b  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fb  00000000  00000000  00001afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002dc  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000391  00000000  00000000  000023f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002789  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_5>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d0 e1       	ldi	r29, 0x10	; 16
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	e0 ec       	ldi	r30, 0xC0	; 192
  78:	f7 e0       	ldi	r31, 0x07	; 7
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ae 30       	cpi	r26, 0x0E	; 14
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	ae e0       	ldi	r26, 0x0E	; 14
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a5 33       	cpi	r26, 0x35	; 53
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 84 03 	call	0x708	; 0x708 <main>
  9a:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <_Z8setupDACv>:
	0,
	0
};
void setupDAC(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
  a2:	83 b3       	in	r24, 0x13	; 19
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
  ac:	97 b1       	in	r25, 0x07	; 7
  ae:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
  b0:	e9 ed       	ldi	r30, 0xD9	; 217
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers 
  ba:	ea ed       	ldi	r30, 0xDA	; 218
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
  c4:	84 b3       	in	r24, 0x14	; 20
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
  ca:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
  cc:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
  ce:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
  d0:	a0 9a       	sbi	0x14, 0	; 20
}
  d2:	08 95       	ret

000000d4 <_Z7set_dachj>:
void set_dac(uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
  d4:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
  d6:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
  d8:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
  da:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
  dc:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2d e0       	ldi	r18, 0x0D	; 13
  e0:	2a 95       	dec	r18
  e2:	f1 f7       	brne	.-4      	; 0xe0 <_Z7set_dachj+0xc>
  e4:	00 00       	nop
	} else {
		
		dac_mux_address = DAC_MUX_EN1;
	}
	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
  e6:	40 91 da 00 	lds	r20, 0x00DA
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	88 30       	cpi	r24, 0x08	; 8
  f0:	10 f4       	brcc	.+4      	; 0xf6 <_Z7set_dachj+0x22>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <_Z7set_dachj+0x2c>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	2a 95       	dec	r18
 102:	e2 f7       	brpl	.-8      	; 0xfc <_Z7set_dachj+0x28>
 104:	94 2f       	mov	r25, r20
 106:	98 2b       	or	r25, r24
 108:	ea ed       	ldi	r30, 0xDA	; 218
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 83       	st	Z, r25
 10e:	22 e4       	ldi	r18, 0x42	; 66
 110:	2a 95       	dec	r18
 112:	f1 f7       	brne	.-4      	; 0x110 <_Z7set_dachj+0x3c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <_Z7set_dachj+0x42>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
 116:	90 81       	ld	r25, Z
 118:	80 95       	com	r24
 11a:	89 23       	and	r24, r25
 11c:	80 83       	st	Z, r24
	
}
 11e:	08 95       	ret

00000120 <_Z11display_DECjh>:


void display_DEC(uint16_t number, uint8_t digit)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2a 97       	sbiw	r28, 0x0a	; 10
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
		SEVEN,
		EIGHT,
		NINE,
		
		
	};
 134:	de 01       	movw	r26, r28
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	e0 e0       	ldi	r30, 0x00	; 0
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	3a e0       	ldi	r19, 0x0A	; 10
 13e:	01 90       	ld	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	31 50       	subi	r19, 0x01	; 1
 144:	e1 f7       	brne	.-8      	; 0x13e <_Z11display_DECjh+0x1e>
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
 146:	3f ef       	ldi	r19, 0xFF	; 255
 148:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 14a:	ea ed       	ldi	r30, 0xDA	; 218
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	30 81       	ld	r19, Z
 150:	30 61       	ori	r19, 0x10	; 16
 152:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 154:	30 81       	ld	r19, Z
 156:	3f 7e       	andi	r19, 0xEF	; 239
 158:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
 15a:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
 15c:	30 81       	ld	r19, Z
 15e:	30 62       	ori	r19, 0x20	; 32
 160:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
 162:	30 81       	ld	r19, Z
 164:	3f 7d       	andi	r19, 0xDF	; 223
 166:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
 168:	62 30       	cpi	r22, 0x02	; 2
 16a:	f9 f0       	breq	.+62     	; 0x1aa <_Z11display_DECjh+0x8a>
 16c:	63 30       	cpi	r22, 0x03	; 3
 16e:	18 f4       	brcc	.+6      	; 0x176 <_Z11display_DECjh+0x56>
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	a1 f5       	brne	.+104    	; 0x1dc <_Z11display_DECjh+0xbc>
 174:	0d c0       	rjmp	.+26     	; 0x190 <_Z11display_DECjh+0x70>
 176:	64 30       	cpi	r22, 0x04	; 4
 178:	29 f1       	breq	.+74     	; 0x1c4 <_Z11display_DECjh+0xa4>
 17a:	68 30       	cpi	r22, 0x08	; 8
 17c:	79 f5       	brne	.+94     	; 0x1dc <_Z11display_DECjh+0xbc>
		
		case ONES:
		cathode_byte = DEC[(number % 10)]; //print first decimal digit
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 ca 03 	call	0x794	; 0x794 <__udivmodhi4>
 186:	fe 01       	movw	r30, r28
 188:	e8 0f       	add	r30, r24
 18a:	f9 1f       	adc	r31, r25
 18c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 18e:	26 c0       	rjmp	.+76     	; 0x1dc <_Z11display_DECjh+0xbc>
		
		case TENS:
		cathode_byte = DEC[((number % 100) / 10)]; //print second decimal digit
 190:	64 e6       	ldi	r22, 0x64	; 100
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	0e 94 ca 03 	call	0x794	; 0x794 <__udivmodhi4>
 198:	6a e0       	ldi	r22, 0x0A	; 10
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 ca 03 	call	0x794	; 0x794 <__udivmodhi4>
 1a0:	fe 01       	movw	r30, r28
 1a2:	e6 0f       	add	r30, r22
 1a4:	f7 1f       	adc	r31, r23
 1a6:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 1a8:	19 c0       	rjmp	.+50     	; 0x1dc <_Z11display_DECjh+0xbc>
		
		case HUNDS:
		cathode_byte = DEC[((number % 1000) / 100)]; //print third decimal digit
 1aa:	68 ee       	ldi	r22, 0xE8	; 232
 1ac:	73 e0       	ldi	r23, 0x03	; 3
 1ae:	0e 94 ca 03 	call	0x794	; 0x794 <__udivmodhi4>
 1b2:	64 e6       	ldi	r22, 0x64	; 100
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	0e 94 ca 03 	call	0x794	; 0x794 <__udivmodhi4>
 1ba:	fe 01       	movw	r30, r28
 1bc:	e6 0f       	add	r30, r22
 1be:	f7 1f       	adc	r31, r23
 1c0:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 1c2:	0c c0       	rjmp	.+24     	; 0x1dc <_Z11display_DECjh+0xbc>
		
		case THOUS:
		cathode_byte = DEC[((number % 10000) / 1000)]; //print fourth decimal digit
 1c4:	60 e1       	ldi	r22, 0x10	; 16
 1c6:	77 e2       	ldi	r23, 0x27	; 39
 1c8:	0e 94 ca 03 	call	0x794	; 0x794 <__udivmodhi4>
 1cc:	68 ee       	ldi	r22, 0xE8	; 232
 1ce:	73 e0       	ldi	r23, 0x03	; 3
 1d0:	0e 94 ca 03 	call	0x794	; 0x794 <__udivmodhi4>
 1d4:	fe 01       	movw	r30, r28
 1d6:	e6 0f       	add	r30, r22
 1d8:	f7 1f       	adc	r31, r23
 1da:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
 1dc:	20 95       	com	r18
 1de:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 1e0:	ea ed       	ldi	r30, 0xDA	; 218
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 7e       	andi	r24, 0xEF	; 239
 1ee:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
 1f0:	2a 96       	adiw	r28, 0x0a	; 10
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <_Z8setupADCv>:

void setupADC(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
 202:	ea e7       	ldi	r30, 0x7A	; 122
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	84 60       	ori	r24, 0x04	; 4
 20a:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
 20c:	ac e7       	ldi	r26, 0x7C	; 124
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	8c 91       	ld	r24, X
 212:	80 64       	ori	r24, 0x40	; 64
 214:	8c 93       	st	X, r24
	//MUX2:0 is 000 by default in ADMUX
	//ADMUX &= ~(1<<MUX0); //set ADC multiplexer to read ADC0 (PF0 on PORTF, pin 97)
	
	//ADCSRA |= (1<<ADATE); //set ADC in free running mode
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
 216:	ae e7       	ldi	r26, 0x7E	; 126
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	8c 91       	ld	r24, X
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
 220:	80 81       	ld	r24, Z
 222:	80 68       	ori	r24, 0x80	; 128
 224:	80 83       	st	Z, r24
	//adc_value = ADCL;
	//adc_value = adc_value | (ADCH <<8);
	//adc_previous = adc_value;
	//PORTH |= (1<<POTMUX_EN0); //set POTMUX_EN0
	
}
 226:	08 95       	ret

00000228 <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 92       	push	r2
 234:	3f 92       	push	r3
 236:	4f 92       	push	r4
 238:	5f 92       	push	r5
 23a:	6f 92       	push	r6
 23c:	7f 92       	push	r7
 23e:	8f 92       	push	r8
 240:	9f 92       	push	r9
 242:	af 92       	push	r10
 244:	bf 92       	push	r11
 246:	cf 92       	push	r12
 248:	df 92       	push	r13
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	2f 93       	push	r18
 254:	3f 93       	push	r19
 256:	4f 93       	push	r20
 258:	5f 93       	push	r21
 25a:	6f 93       	push	r22
 25c:	7f 93       	push	r23
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	af 93       	push	r26
 264:	bf 93       	push	r27
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	
	display_DEC(value_to_display, digit[place]);
 26e:	80 91 1e 01 	lds	r24, 0x011E
 272:	90 91 1f 01 	lds	r25, 0x011F
 276:	e0 91 26 01 	lds	r30, 0x0126
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	e6 5f       	subi	r30, 0xF6	; 246
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	60 81       	ld	r22, Z
 282:	0e 94 90 00 	call	0x120	; 0x120 <_Z11display_DECjh>
			//this set up leaves ADC S&H too long between interrupts (droop, noise), so here the ADC to read pot 15 is set up
			//before the ADC read/DAC write loop executes.
			//this is stupidly baroque and it might be possible to read ADC and write DAC for same i (ie. not i-1 as currently implemented)
			//in fact, this first set up does away with the delay and there doesn't seem to be much noise on pot 15 read, but it's hard to tell as it
			//is VCO1 FM depth control. Oh wait, not there is plenty of noise without settling time introduced by delay
            DATA_BUS = 15; //set pot mux address on databus
 286:	8f e0       	ldi	r24, 0x0F	; 15
 288:	82 b9       	out	0x02, r24	; 2
		    POT_MUX &= ~(1<<POTMUX_EN0); //clear POTMUX_EN0 to select input on U2
 28a:	ea ed       	ldi	r30, 0xDA	; 218
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	8f 7b       	andi	r24, 0xBF	; 191
 292:	80 83       	st	Z, r24
 294:	32 e4       	ldi	r19, 0x42	; 66
 296:	3a 95       	dec	r19
 298:	f1 f7       	brne	.-4      	; 0x296 <__vector_5+0x6e>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <__vector_5+0x74>
			_delay_us(10);
			POT_MUX |= (1<<POTMUX_EN0);
 29c:	80 81       	ld	r24, Z
 29e:	80 64       	ori	r24, 0x40	; 64
 2a0:	80 83       	st	Z, r24
 2a2:	cc 24       	eor	r12, r12
 2a4:	dd 24       	eor	r13, r13
 2a6:	c3 94       	inc	r12
 2a8:	00 e0       	ldi	r16, 0x00	; 0
 2aa:	10 e0       	ldi	r17, 0x00	; 0
			for (int i = 0; i <=15; i++)
			{
					
				ADCSRA |= (1<<ADSC); //start ADC conversion
 2ac:	ca e7       	ldi	r28, 0x7A	; 122
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
				//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
								
				//adc_previous = adc_value;
				adc_value = ADCL;
 2b0:	0f 2e       	mov	r0, r31
 2b2:	f8 e7       	ldi	r31, 0x78	; 120
 2b4:	8f 2e       	mov	r8, r31
 2b6:	99 24       	eor	r9, r9
 2b8:	f0 2d       	mov	r31, r0
				adc_value = adc_value | (ADCH <<8);
 2ba:	0f 2e       	mov	r0, r31
 2bc:	f9 e7       	ldi	r31, 0x79	; 121
 2be:	6f 2e       	mov	r6, r31
 2c0:	77 24       	eor	r7, r7
 2c2:	f0 2d       	mov	r31, r0
				
				//set up mux for next ADC read - allows pot mux node settling time while DAC is being set.
				POT_MUX &= ~(1<<POTMUX_EN0); //clear POTMUX_EN0 to select input on U2
 2c4:	0f 2e       	mov	r0, r31
 2c6:	fa ed       	ldi	r31, 0xDA	; 218
 2c8:	ef 2e       	mov	r14, r31
 2ca:	ff 24       	eor	r15, r15
 2cc:	f0 2d       	mov	r31, r0
				//set_dac(i, dac_channel[i]); //set DAC
				//for testing, set one DAC S&H channel to a fixed value and measure it as flanking S&H channels are swept from 0-10V
				//currently using this to set OSCA_INIT_CV and do fine tuning
				if (i == 4 || i == 13) 
				{
					uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
 2ce:	0f 2e       	mov	r0, r31
 2d0:	ff e9       	ldi	r31, 0x9F	; 159
 2d2:	4f 2e       	mov	r4, r31
 2d4:	f8 e1       	ldi	r31, 0x18	; 24
 2d6:	5f 2e       	mov	r5, r31
 2d8:	f0 2d       	mov	r31, r0
					if (i == 13)tune_value += 1638; //add an octave (1V) to VCO2 pitch
 2da:	0f 2e       	mov	r0, r31
 2dc:	f5 e0       	ldi	r31, 0x05	; 5
 2de:	2f 2e       	mov	r2, r31
 2e0:	ff e1       	ldi	r31, 0x1F	; 31
 2e2:	3f 2e       	mov	r3, r31
 2e4:	f0 2d       	mov	r31, r0
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <__vector_5+0xca>
			//in fact, this first set up does away with the delay and there doesn't seem to be much noise on pot 15 read, but it's hard to tell as it
			//is VCO1 FM depth control. Oh wait, not there is plenty of noise without settling time introduced by delay
            DATA_BUS = 15; //set pot mux address on databus
		    POT_MUX &= ~(1<<POTMUX_EN0); //clear POTMUX_EN0 to select input on U2
			_delay_us(10);
			POT_MUX |= (1<<POTMUX_EN0);
 2e8:	0f 5f       	subi	r16, 0xFF	; 255
 2ea:	1f 4f       	sbci	r17, 0xFF	; 255
 2ec:	08 94       	sec
 2ee:	c1 1c       	adc	r12, r1
 2f0:	d1 1c       	adc	r13, r1
			for (int i = 0; i <=15; i++)
			{
					
				ADCSRA |= (1<<ADSC); //start ADC conversion
 2f2:	88 81       	ld	r24, Y
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	88 83       	st	Y, r24
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
 2f8:	88 81       	ld	r24, Y
 2fa:	86 fd       	sbrc	r24, 6
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <__vector_5+0xd0>
				//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
								
				//adc_previous = adc_value;
				adc_value = ADCL;
 2fe:	f4 01       	movw	r30, r8
 300:	80 81       	ld	r24, Z
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	90 93 23 01 	sts	0x0123, r25
 308:	80 93 22 01 	sts	0x0122, r24
				adc_value = adc_value | (ADCH <<8);
 30c:	f3 01       	movw	r30, r6
 30e:	20 81       	ld	r18, Z
 310:	80 91 22 01 	lds	r24, 0x0122
 314:	90 91 23 01 	lds	r25, 0x0123
 318:	b2 2e       	mov	r11, r18
 31a:	aa 24       	eor	r10, r10
 31c:	8a 29       	or	r24, r10
 31e:	9b 29       	or	r25, r11
 320:	90 93 23 01 	sts	0x0123, r25
 324:	80 93 22 01 	sts	0x0122, r24
				
				//set up mux for next ADC read - allows pot mux node settling time while DAC is being set.
				POT_MUX &= ~(1<<POTMUX_EN0); //clear POTMUX_EN0 to select input on U2
 328:	f7 01       	movw	r30, r14
 32a:	80 81       	ld	r24, Z
 32c:	8f 7b       	andi	r24, 0xBF	; 191
 32e:	80 83       	st	Z, r24
				DATA_BUS = i; //set pot mux address on databus				
 330:	20 2f       	mov	r18, r16
 332:	02 b9       	out	0x02, r16	; 2
 334:	c8 01       	movw	r24, r16
				//dac_channel[i] = adc_value << 4; //convert 10 bit ADC value to 14 bit DAC value
				//set_dac(i, dac_channel[i]); //set DAC
				//for testing, set one DAC S&H channel to a fixed value and measure it as flanking S&H channels are swept from 0-10V
				//currently using this to set OSCA_INIT_CV and do fine tuning
				if (i == 4 || i == 13) 
 336:	04 30       	cpi	r16, 0x04	; 4
 338:	11 05       	cpc	r17, r1
 33a:	29 f0       	breq	.+10     	; 0x346 <__vector_5+0x11e>
 33c:	8d 30       	cpi	r24, 0x0D	; 13
 33e:	91 05       	cpc	r25, r1
 340:	a9 f5       	brne	.+106    	; 0x3ac <__vector_5+0x184>
				{
					uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
					if (i == 13)tune_value += 1638; //add an octave (1V) to VCO2 pitch
 342:	a1 01       	movw	r20, r2
 344:	01 c0       	rjmp	.+2      	; 0x348 <__vector_5+0x120>
				//set_dac(i, dac_channel[i]); //set DAC
				//for testing, set one DAC S&H channel to a fixed value and measure it as flanking S&H channels are swept from 0-10V
				//currently using this to set OSCA_INIT_CV and do fine tuning
				if (i == 4 || i == 13) 
				{
					uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
 346:	a2 01       	movw	r20, r4
					if (i == 13)tune_value += 1638; //add an octave (1V) to VCO2 pitch
					if (adc_value >= 512) {set_dac(i,(tune_value + (adc_value - 512))); tune_offset = adc_value - 512;} else {set_dac(i,(tune_value - (512- adc_value))); tune_offset = adc_value;}
 348:	80 91 22 01 	lds	r24, 0x0122
 34c:	90 91 23 01 	lds	r25, 0x0123
 350:	f2 e0       	ldi	r31, 0x02	; 2
 352:	80 30       	cpi	r24, 0x00	; 0
 354:	9f 07       	cpc	r25, r31
 356:	b0 f0       	brcs	.+44     	; 0x384 <__vector_5+0x15c>
 358:	60 91 22 01 	lds	r22, 0x0122
 35c:	70 91 23 01 	lds	r23, 0x0123
 360:	60 50       	subi	r22, 0x00	; 0
 362:	72 40       	sbci	r23, 0x02	; 2
 364:	64 0f       	add	r22, r20
 366:	75 1f       	adc	r23, r21
 368:	82 2f       	mov	r24, r18
 36a:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z7set_dachj>
 36e:	80 91 22 01 	lds	r24, 0x0122
 372:	90 91 23 01 	lds	r25, 0x0123
 376:	80 50       	subi	r24, 0x00	; 0
 378:	92 40       	sbci	r25, 0x02	; 2
 37a:	90 93 21 01 	sts	0x0121, r25
 37e:	80 93 20 01 	sts	0x0120, r24
 382:	3d c0       	rjmp	.+122    	; 0x3fe <__vector_5+0x1d6>
 384:	60 91 22 01 	lds	r22, 0x0122
 388:	70 91 23 01 	lds	r23, 0x0123
 38c:	60 50       	subi	r22, 0x00	; 0
 38e:	72 40       	sbci	r23, 0x02	; 2
 390:	64 0f       	add	r22, r20
 392:	75 1f       	adc	r23, r21
 394:	82 2f       	mov	r24, r18
 396:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z7set_dachj>
 39a:	80 91 22 01 	lds	r24, 0x0122
 39e:	90 91 23 01 	lds	r25, 0x0123
 3a2:	90 93 21 01 	sts	0x0121, r25
 3a6:	80 93 20 01 	sts	0x0120, r24
 3aa:	29 c0       	rjmp	.+82     	; 0x3fe <__vector_5+0x1d6>
					//set_dac(i, tune_value);
					
				} else if (i == 0)
 3ac:	00 97       	sbiw	r24, 0x00	; 0
 3ae:	d1 f4       	brne	.+52     	; 0x3e4 <__vector_5+0x1bc>
				{
					set_dac(i, adc_value << 4);
 3b0:	60 91 22 01 	lds	r22, 0x0122
 3b4:	70 91 23 01 	lds	r23, 0x0123
 3b8:	62 95       	swap	r22
 3ba:	72 95       	swap	r23
 3bc:	70 7f       	andi	r23, 0xF0	; 240
 3be:	76 27       	eor	r23, r22
 3c0:	60 7f       	andi	r22, 0xF0	; 240
 3c2:	76 27       	eor	r23, r22
 3c4:	80 2f       	mov	r24, r16
 3c6:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z7set_dachj>
					value_to_display = adc_value;
 3ca:	80 91 22 01 	lds	r24, 0x0122
 3ce:	90 91 23 01 	lds	r25, 0x0123
 3d2:	90 93 1f 01 	sts	0x011F, r25
 3d6:	80 93 1e 01 	sts	0x011E, r24
				} else {set_dac(i, adc_value << 4);}
					
                //set_dac(i, adc_value << 4);
				POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
 3da:	f7 01       	movw	r30, r14
 3dc:	80 81       	ld	r24, Z
 3de:	80 64       	ori	r24, 0x40	; 64
 3e0:	80 83       	st	Z, r24
 3e2:	82 cf       	rjmp	.-252    	; 0x2e8 <__vector_5+0xc0>
					
				} else if (i == 0)
				{
					set_dac(i, adc_value << 4);
					value_to_display = adc_value;
				} else {set_dac(i, adc_value << 4);}
 3e4:	60 91 22 01 	lds	r22, 0x0122
 3e8:	70 91 23 01 	lds	r23, 0x0123
 3ec:	62 95       	swap	r22
 3ee:	72 95       	swap	r23
 3f0:	70 7f       	andi	r23, 0xF0	; 240
 3f2:	76 27       	eor	r23, r22
 3f4:	60 7f       	andi	r22, 0xF0	; 240
 3f6:	76 27       	eor	r23, r22
 3f8:	80 2f       	mov	r24, r16
 3fa:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z7set_dachj>
					
                //set_dac(i, adc_value << 4);
				POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
 3fe:	f7 01       	movw	r30, r14
 400:	80 81       	ld	r24, Z
 402:	80 64       	ori	r24, 0x40	; 64
 404:	80 83       	st	Z, r24
			//is VCO1 FM depth control. Oh wait, not there is plenty of noise without settling time introduced by delay
            DATA_BUS = 15; //set pot mux address on databus
		    POT_MUX &= ~(1<<POTMUX_EN0); //clear POTMUX_EN0 to select input on U2
			_delay_us(10);
			POT_MUX |= (1<<POTMUX_EN0);
			for (int i = 0; i <=15; i++)
 406:	f0 e1       	ldi	r31, 0x10	; 16
 408:	cf 16       	cp	r12, r31
 40a:	d1 04       	cpc	r13, r1
 40c:	0c f4       	brge	.+2      	; 0x410 <__vector_5+0x1e8>
 40e:	6c cf       	rjmp	.-296    	; 0x2e8 <__vector_5+0xc0>
                //set_dac(i, adc_value << 4);
				POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
				//POT_MUX |= (1<<POTMUX_EN1); //needed to set this for some reason otherwise was reading both pot demuxers at once - need to check this out.	
						
			}			
			DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
 410:	a1 98       	cbi	0x14, 1	; 20
			DAC_CTRL |= (1<<DAC_RS);	
 412:	a1 9a       	sbi	0x14, 1	; 20
		//if (deflection <= 1) adc_value = adc_previous;
	//}				


	//do SPI read/write every 5 interrupts (16.5 ms)
	if (switch_timer++ == 5)
 414:	80 91 27 01 	lds	r24, 0x0127
 418:	98 2f       	mov	r25, r24
 41a:	9f 5f       	subi	r25, 0xFF	; 255
 41c:	90 93 27 01 	sts	0x0127, r25
 420:	85 30       	cpi	r24, 0x05	; 5
 422:	09 f0       	breq	.+2      	; 0x426 <__vector_5+0x1fe>
 424:	44 c1       	rjmp	.+648    	; 0x6ae <__vector_5+0x486>
	{
		switch_timer = 0;
 426:	10 92 27 01 	sts	0x0127, r1
		
		
		SPI_PORT |= SPI_SW_LATCH;
 42a:	2d 9a       	sbi	0x05, 5	; 5
		((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
		((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
		((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
		((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
		((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
		ISW8_SW_ON << ISW8_LED; 
 42c:	20 91 2c 01 	lds	r18, 0x012C
 430:	60 91 2c 01 	lds	r22, 0x012C
 434:	80 91 2c 01 	lds	r24, 0x012C
 438:	70 91 2c 01 	lds	r23, 0x012C
 43c:	50 91 2c 01 	lds	r21, 0x012C
 440:	40 91 2c 01 	lds	r20, 0x012C
 444:	30 91 2c 01 	lds	r19, 0x012C
 448:	90 91 31 01 	lds	r25, 0x0131
 44c:	71 70       	andi	r23, 0x01	; 1
 44e:	64 70       	andi	r22, 0x04	; 4
 450:	67 2b       	or	r22, r23
 452:	50 71       	andi	r21, 0x10	; 16
 454:	56 2b       	or	r21, r22
 456:	40 72       	andi	r20, 0x20	; 32
 458:	45 2b       	or	r20, r21
 45a:	30 74       	andi	r19, 0x40	; 64
 45c:	34 2b       	or	r19, r20
 45e:	97 95       	ror	r25
 460:	99 27       	eor	r25, r25
 462:	97 95       	ror	r25
 464:	93 2b       	or	r25, r19
 466:	22 1f       	adc	r18, r18
 468:	22 27       	eor	r18, r18
 46a:	22 1f       	adc	r18, r18
 46c:	22 0f       	add	r18, r18
 46e:	29 2b       	or	r18, r25
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	88 70       	andi	r24, 0x08	; 8
 47c:	90 70       	andi	r25, 0x00	; 0
 47e:	82 2b       	or	r24, r18
 480:	8e bd       	out	0x2e, r24	; 46
		
		while (!(SPSR & (1<<SPIF)));
 482:	0d b4       	in	r0, 0x2d	; 45
 484:	07 fe       	sbrs	r0, 7
 486:	fd cf       	rjmp	.-6      	; 0x482 <__vector_5+0x25a>
		
		//Now read SPDR for switch data shifted in from 74XX165 U14
		spi_sw_current_state = SPDR;
 488:	8e b5       	in	r24, 0x2e	; 46
 48a:	80 93 2e 01 	sts	0x012E, r24
		
		spi_sw_current_state ^= spi_sw_previous_state;
 48e:	80 91 2e 01 	lds	r24, 0x012E
 492:	90 91 2d 01 	lds	r25, 0x012D
 496:	89 27       	eor	r24, r25
 498:	80 93 2e 01 	sts	0x012E, r24
		spi_sw_previous_state ^= spi_sw_current_state;
 49c:	80 91 2d 01 	lds	r24, 0x012D
 4a0:	90 91 2e 01 	lds	r25, 0x012E
 4a4:	89 27       	eor	r24, r25
 4a6:	80 93 2d 01 	sts	0x012D, r24
		spi_sw_current_state &= spi_sw_previous_state;
 4aa:	80 91 2e 01 	lds	r24, 0x012E
 4ae:	90 91 2d 01 	lds	r25, 0x012D
 4b2:	89 23       	and	r24, r25
 4b4:	80 93 2e 01 	sts	0x012E, r24
		
		//toggle switch state 		

		if (spi_sw_current_state & (1<<ISW1_SW)) sw_latch_five ^= (1 << ISW1_SW);
 4b8:	80 91 2e 01 	lds	r24, 0x012E
 4bc:	82 ff       	sbrs	r24, 2
 4be:	06 c0       	rjmp	.+12     	; 0x4cc <__vector_5+0x2a4>
 4c0:	90 91 2c 01 	lds	r25, 0x012C
 4c4:	84 e0       	ldi	r24, 0x04	; 4
 4c6:	89 27       	eor	r24, r25
 4c8:	80 93 2c 01 	sts	0x012C, r24
		if (spi_sw_current_state & (1<<ISW2_SW)) sw_latch_five ^= (1 << ISW2_SW);					
 4cc:	80 91 2e 01 	lds	r24, 0x012E
 4d0:	81 ff       	sbrs	r24, 1
 4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <__vector_5+0x2b8>
 4d4:	90 91 2c 01 	lds	r25, 0x012C
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	89 27       	eor	r24, r25
 4dc:	80 93 2c 01 	sts	0x012C, r24
		if (spi_sw_current_state & (1<<ISW3_SW)) sw_latch_five ^= (1 << ISW3_SW);
 4e0:	80 91 2e 01 	lds	r24, 0x012E
 4e4:	80 ff       	sbrs	r24, 0
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <__vector_5+0x2cc>
 4e8:	90 91 2c 01 	lds	r25, 0x012C
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	89 27       	eor	r24, r25
 4f0:	80 93 2c 01 	sts	0x012C, r24
		if (spi_sw_current_state & (1<<ISW4_SW)) sw_latch_five ^= (1 << ISW4_SW);	
 4f4:	80 91 2e 01 	lds	r24, 0x012E
 4f8:	88 23       	and	r24, r24
 4fa:	2c f4       	brge	.+10     	; 0x506 <__vector_5+0x2de>
 4fc:	80 91 2c 01 	lds	r24, 0x012C
 500:	80 58       	subi	r24, 0x80	; 128
 502:	80 93 2c 01 	sts	0x012C, r24
		if (spi_sw_current_state & (1<<ISW5_SW)) sw_latch_five ^= (1 << ISW5_SW);
 506:	80 91 2e 01 	lds	r24, 0x012E
 50a:	84 ff       	sbrs	r24, 4
 50c:	06 c0       	rjmp	.+12     	; 0x51a <__vector_5+0x2f2>
 50e:	90 91 2c 01 	lds	r25, 0x012C
 512:	80 e1       	ldi	r24, 0x10	; 16
 514:	89 27       	eor	r24, r25
 516:	80 93 2c 01 	sts	0x012C, r24
		if (spi_sw_current_state & (1<<ISW6_SW)) sw_latch_five ^= (1 << ISW6_SW);
 51a:	80 91 2e 01 	lds	r24, 0x012E
 51e:	85 ff       	sbrs	r24, 5
 520:	06 c0       	rjmp	.+12     	; 0x52e <__vector_5+0x306>
 522:	90 91 2c 01 	lds	r25, 0x012C
 526:	80 e2       	ldi	r24, 0x20	; 32
 528:	89 27       	eor	r24, r25
 52a:	80 93 2c 01 	sts	0x012C, r24
		if (spi_sw_current_state & (1<<ISW7_SW)) sw_latch_five ^= (1 << ISW7_SW);
 52e:	80 91 2e 01 	lds	r24, 0x012E
 532:	86 ff       	sbrs	r24, 6
 534:	06 c0       	rjmp	.+12     	; 0x542 <__vector_5+0x31a>
 536:	90 91 2c 01 	lds	r25, 0x012C
 53a:	80 e4       	ldi	r24, 0x40	; 64
 53c:	89 27       	eor	r24, r25
 53e:	80 93 2c 01 	sts	0x012C, r24
		
		//SHIFT 4th BYTE
		SPDR = 0; //no LEDs connected in current test set up
 542:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 544:	0d b4       	in	r0, 0x2d	; 45
 546:	07 fe       	sbrs	r0, 7
 548:	fd cf       	rjmp	.-6      	; 0x544 <__vector_5+0x31c>
		//Now read SPDR for switch data shifted in from 74XX165 (U9)
		//check if ISW12_SW bit is set
		if (SPDR >> 5 & 1)
 54a:	0e b4       	in	r0, 0x2e	; 46
 54c:	05 fe       	sbrs	r0, 5
 54e:	04 c0       	rjmp	.+8      	; 0x558 <__vector_5+0x330>
		{
			ISW12_SW_ON = 1;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	80 93 34 01 	sts	0x0134, r24
 556:	02 c0       	rjmp	.+4      	; 0x55c <__vector_5+0x334>
		}
		else
		{
			ISW12_SW_ON = 0;
 558:	10 92 34 01 	sts	0x0134, r1
		}
		//check if ISW13_SW bit is set
		if (SPDR >> 6 & 1)
 55c:	0e b4       	in	r0, 0x2e	; 46
 55e:	06 fe       	sbrs	r0, 6
 560:	04 c0       	rjmp	.+8      	; 0x56a <__vector_5+0x342>
		{
			ISW13_SW_ON = 1;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	80 93 33 01 	sts	0x0133, r24
 568:	02 c0       	rjmp	.+4      	; 0x56e <__vector_5+0x346>
		}
		else
		{
			ISW13_SW_ON = 0;
 56a:	10 92 33 01 	sts	0x0133, r1
		}
		
		//SHIFT 3th BYTE
		SPDR = 0;
 56e:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 570:	0d b4       	in	r0, 0x2d	; 45
 572:	07 fe       	sbrs	r0, 7
 574:	fd cf       	rjmp	.-6      	; 0x570 <__vector_5+0x348>

		//SHIFT 2th BYTE
		SPDR = 0;
 576:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 578:	0d b4       	in	r0, 0x2d	; 45
 57a:	07 fe       	sbrs	r0, 7
 57c:	fd cf       	rjmp	.-6      	; 0x578 <__vector_5+0x350>
		
		//SHIFT 1st BYTE
		//SPDR = (ISW12_SW_ON << 2) | ISW11_LED; //TURN ON ISW12 (if ISW12_SW is ON) and ISW11 LEDs, both on 74XX595 U8, first shift register in chain
		SPDR = (ISW12_SW_ON <<2) | (ISW13_SW_ON << 7); //turn on ISW12 if ISW12_SW is ON, turn ISW11 (MSB of first shift register chain) if ISW13_SW is ON
 57e:	80 91 34 01 	lds	r24, 0x0134
 582:	90 91 33 01 	lds	r25, 0x0133
 586:	97 95       	ror	r25
 588:	99 27       	eor	r25, r25
 58a:	97 95       	ror	r25
 58c:	88 0f       	add	r24, r24
 58e:	88 0f       	add	r24, r24
 590:	89 2b       	or	r24, r25
 592:	8e bd       	out	0x2e, r24	; 46
		//Wait for SPI shift to complete
		while (!(SPSR & (1<<SPIF)));
 594:	0d b4       	in	r0, 0x2d	; 45
 596:	07 fe       	sbrs	r0, 7
 598:	fd cf       	rjmp	.-6      	; 0x594 <__vector_5+0x36c>
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
 59a:	ed ed       	ldi	r30, 0xDD	; 221
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	87 7f       	andi	r24, 0xF7	; 247
 5a2:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
 5a4:	80 81       	ld	r24, Z
 5a6:	88 60       	ori	r24, 0x08	; 8
 5a8:	80 83       	st	Z, r24
		
		//clear SPI_SW_LATCH
		SPI_PORT &= ~SPI_SW_LATCH;	
 5aa:	2d 98       	cbi	0x05, 5	; 5
		//this toggle code works, but I haven't figured out how it works
		//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
		current_sw_state = SWITCH_PORT;
 5ac:	8f b1       	in	r24, 0x0f	; 15
 5ae:	80 93 2f 01 	sts	0x012F, r24
		current_sw_state ^= previous_sw_state;
 5b2:	80 91 2f 01 	lds	r24, 0x012F
 5b6:	90 91 30 01 	lds	r25, 0x0130
 5ba:	89 27       	eor	r24, r25
 5bc:	80 93 2f 01 	sts	0x012F, r24
		previous_sw_state ^= current_sw_state;
 5c0:	80 91 30 01 	lds	r24, 0x0130
 5c4:	90 91 2f 01 	lds	r25, 0x012F
 5c8:	89 27       	eor	r24, r25
 5ca:	80 93 30 01 	sts	0x0130, r24
		current_sw_state &= previous_sw_state;
 5ce:	80 91 2f 01 	lds	r24, 0x012F
 5d2:	90 91 30 01 	lds	r25, 0x0130
 5d6:	89 23       	and	r24, r25
 5d8:	80 93 2f 01 	sts	0x012F, r24
		
		if (current_sw_state & (1<<ISW8_SW)) 
 5dc:	80 91 2f 01 	lds	r24, 0x012F
 5e0:	82 ff       	sbrs	r24, 2
 5e2:	06 c0       	rjmp	.+12     	; 0x5f0 <__vector_5+0x3c8>
		{
			ISW8_SW_ON ^= 1 << 0; //toggle switch state
 5e4:	90 91 31 01 	lds	r25, 0x0131
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	89 27       	eor	r24, r25
 5ec:	80 93 31 01 	sts	0x0131, r24
		}
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
 5f0:	ed ed       	ldi	r30, 0xDD	; 221
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	8f 7b       	andi	r24, 0xBF	; 191
 5f8:	80 83       	st	Z, r24
		((sw_latch_five >> ISW2_SW) & 1) << 2 |
		((sw_latch_five >> ISW3_SW) & 1) << 1 |
		((sw_latch_five >> ISW5_SW) & 1) << 6 |
		((sw_latch_five >> ISW6_SW) & 1) << 7 |
		((sw_latch_five >> ISW7_SW) & 1) << 5 |
		ISW8_SW_ON << 4;
 5fa:	40 91 2c 01 	lds	r20, 0x012C
 5fe:	a0 91 2c 01 	lds	r26, 0x012C
 602:	30 91 2c 01 	lds	r19, 0x012C
 606:	60 91 2c 01 	lds	r22, 0x012C
 60a:	20 91 2c 01 	lds	r18, 0x012C
 60e:	80 91 2c 01 	lds	r24, 0x012C
 612:	50 91 2c 01 	lds	r21, 0x012C
 616:	90 91 31 01 	lds	r25, 0x0131
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	b5 95       	asr	r27
 61e:	a7 95       	ror	r26
 620:	b5 95       	asr	r27
 622:	a7 95       	ror	r26
 624:	a1 70       	andi	r26, 0x01	; 1
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	61 70       	andi	r22, 0x01	; 1
 62a:	70 70       	andi	r23, 0x00	; 0
 62c:	66 0f       	add	r22, r22
 62e:	77 1f       	adc	r23, r23
 630:	6a 2b       	or	r22, r26
 632:	92 95       	swap	r25
 634:	90 7f       	andi	r25, 0xF0	; 240
 636:	69 2b       	or	r22, r25
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	95 95       	asr	r25
 63c:	87 95       	ror	r24
 63e:	95 95       	asr	r25
 640:	87 95       	ror	r24
 642:	95 95       	asr	r25
 644:	87 95       	ror	r24
 646:	95 95       	asr	r25
 648:	87 95       	ror	r24
 64a:	95 95       	asr	r25
 64c:	87 95       	ror	r24
 64e:	96 95       	lsr	r25
 650:	98 2f       	mov	r25, r24
 652:	88 27       	eor	r24, r24
 654:	97 95       	ror	r25
 656:	87 95       	ror	r24
 658:	86 2b       	or	r24, r22
 65a:	44 1f       	adc	r20, r20
 65c:	44 27       	eor	r20, r20
 65e:	44 1f       	adc	r20, r20
 660:	44 0f       	add	r20, r20
 662:	44 0f       	add	r20, r20
 664:	44 0f       	add	r20, r20
 666:	84 2b       	or	r24, r20
 668:	63 2f       	mov	r22, r19
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	66 0f       	add	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	64 70       	andi	r22, 0x04	; 4
 672:	70 70       	andi	r23, 0x00	; 0
 674:	68 2b       	or	r22, r24
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	c9 01       	movw	r24, r18
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	80 74       	andi	r24, 0x40	; 64
 684:	90 70       	andi	r25, 0x00	; 0
 686:	68 2b       	or	r22, r24
 688:	85 2f       	mov	r24, r21
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	96 95       	lsr	r25
 68e:	87 95       	ror	r24
 690:	80 72       	andi	r24, 0x20	; 32
 692:	90 70       	andi	r25, 0x00	; 0
 694:	86 2b       	or	r24, r22
 696:	82 b9       	out	0x02, r24	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
 698:	80 81       	ld	r24, Z
 69a:	80 64       	ori	r24, 0x40	; 64
 69c:	80 83       	st	Z, r24
 69e:	36 e0       	ldi	r19, 0x06	; 6
 6a0:	3a 95       	dec	r19
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <__vector_5+0x478>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <__vector_5+0x47e>
		_delay_us(1);
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
 6a6:	80 81       	ld	r24, Z
 6a8:	8f 7b       	andi	r24, 0xBF	; 191
 6aa:	80 83       	st	Z, r24
		DATA_BUS = 0;			  	
 6ac:	12 b8       	out	0x02, r1	; 2
	}
	
	

	//increment digit display place
	if (place++ == 3) //post increment
 6ae:	80 91 26 01 	lds	r24, 0x0126
 6b2:	98 2f       	mov	r25, r24
 6b4:	9f 5f       	subi	r25, 0xFF	; 255
 6b6:	90 93 26 01 	sts	0x0126, r25
 6ba:	83 30       	cpi	r24, 0x03	; 3
 6bc:	11 f4       	brne	.+4      	; 0x6c2 <__vector_5+0x49a>
	{
		place = 0;
 6be:	10 92 26 01 	sts	0x0126, r1
	}
	

	
}	
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	bf 91       	pop	r27
 6cc:	af 91       	pop	r26
 6ce:	9f 91       	pop	r25
 6d0:	8f 91       	pop	r24
 6d2:	7f 91       	pop	r23
 6d4:	6f 91       	pop	r22
 6d6:	5f 91       	pop	r21
 6d8:	4f 91       	pop	r20
 6da:	3f 91       	pop	r19
 6dc:	2f 91       	pop	r18
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	df 90       	pop	r13
 6e8:	cf 90       	pop	r12
 6ea:	bf 90       	pop	r11
 6ec:	af 90       	pop	r10
 6ee:	9f 90       	pop	r9
 6f0:	8f 90       	pop	r8
 6f2:	7f 90       	pop	r7
 6f4:	6f 90       	pop	r6
 6f6:	5f 90       	pop	r5
 6f8:	4f 90       	pop	r4
 6fa:	3f 90       	pop	r3
 6fc:	2f 90       	pop	r2
 6fe:	0f 90       	pop	r0
 700:	0f be       	out	0x3f, r0	; 63
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
 708:	80 e8       	ldi	r24, 0x80	; 128
 70a:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
 70c:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
 70e:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
 710:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
	//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
	//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
	DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
 712:	84 b1       	in	r24, 0x04	; 4
 714:	87 62       	ori	r24, 0x27	; 39
 716:	84 b9       	out	0x04, r24	; 4
	
	//SET SPI_EN and LED_LATCH and VCO_SW_LATCH pins as outputs
	DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH));
 718:	ec ed       	ldi	r30, 0xDC	; 220
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	8c 64       	ori	r24, 0x4C	; 76
 720:	80 83       	st	Z, r24
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
	SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
 722:	85 b1       	in	r24, 0x05	; 5
 724:	89 7d       	andi	r24, 0xD9	; 217
 726:	85 b9       	out	0x05, r24	; 5
	
	//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
	SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
 728:	ed ed       	ldi	r30, 0xDD	; 221
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	83 7f       	andi	r24, 0xF3	; 243
 730:	80 83       	st	Z, r24
	
	//SET UP SPI
	SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
 732:	80 e5       	ldi	r24, 0x50	; 80
 734:	8c bd       	out	0x2c, r24	; 44
	
	//Pull LED_LATCH LOW
	SPI_LATCH_PORT &= ~LED_LATCH;
 736:	80 81       	ld	r24, Z
 738:	87 7f       	andi	r24, 0xF7	; 247
 73a:	80 83       	st	Z, r24
	////Wait for SPI shift to complete
	//while (!(SPSR & (1<<SPIF)));
	
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
	
	SPI_LATCH_PORT &= ~LED_LATCH;
 73c:	80 81       	ld	r24, Z
 73e:	87 7f       	andi	r24, 0xF7	; 247
 740:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 742:	80 81       	ld	r24, Z
 744:	88 60       	ori	r24, 0x08	; 8
 746:	80 83       	st	Z, r24
	
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
 748:	a9 ed       	ldi	r26, 0xD9	; 217
 74a:	b0 e0       	ldi	r27, 0x00	; 0
 74c:	8c 91       	ld	r24, X
 74e:	80 6c       	ori	r24, 0xC0	; 192
 750:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
 752:	ea ed       	ldi	r30, 0xDA	; 218
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	80 81       	ld	r24, Z
 758:	80 6c       	ori	r24, 0xC0	; 192
 75a:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
 75c:	81 b1       	in	r24, 0x01	; 1
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
 762:	92 b1       	in	r25, 0x02	; 2
 764:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
 766:	8c 91       	ld	r24, X
 768:	80 63       	ori	r24, 0x30	; 48
 76a:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
 76c:	80 81       	ld	r24, Z
 76e:	8f 7c       	andi	r24, 0xCF	; 207
 770:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<ISW8_SW); //set ISW8_SW pin as input
 772:	82 98       	cbi	0x10, 2	; 16
	//setup ADC, free running for now. Not sure if this is the way it should be done. Look into benefits of one-shot ADC
    setupADC();	
 774:	0e 94 01 01 	call	0x202	; 0x202 <_Z8setupADCv>
	
	//setup DAC
	setupDAC();
 778:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8setupDACv>
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
 77c:	e0 eb       	ldi	r30, 0xB0	; 176
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	86 60       	ori	r24, 0x06	; 6
 784:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
 786:	e0 e7       	ldi	r30, 0x70	; 112
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	81 60       	ori	r24, 0x01	; 1
 78e:	80 83       	st	Z, r24
	sei(); //enable global interrupts
 790:	78 94       	sei
 792:	ff cf       	rjmp	.-2      	; 0x792 <main+0x8a>

00000794 <__udivmodhi4>:
 794:	aa 1b       	sub	r26, r26
 796:	bb 1b       	sub	r27, r27
 798:	51 e1       	ldi	r21, 0x11	; 17
 79a:	07 c0       	rjmp	.+14     	; 0x7aa <__udivmodhi4_ep>

0000079c <__udivmodhi4_loop>:
 79c:	aa 1f       	adc	r26, r26
 79e:	bb 1f       	adc	r27, r27
 7a0:	a6 17       	cp	r26, r22
 7a2:	b7 07       	cpc	r27, r23
 7a4:	10 f0       	brcs	.+4      	; 0x7aa <__udivmodhi4_ep>
 7a6:	a6 1b       	sub	r26, r22
 7a8:	b7 0b       	sbc	r27, r23

000007aa <__udivmodhi4_ep>:
 7aa:	88 1f       	adc	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	5a 95       	dec	r21
 7b0:	a9 f7       	brne	.-22     	; 0x79c <__udivmodhi4_loop>
 7b2:	80 95       	com	r24
 7b4:	90 95       	com	r25
 7b6:	bc 01       	movw	r22, r24
 7b8:	cd 01       	movw	r24, r26
 7ba:	08 95       	ret

000007bc <_exit>:
 7bc:	f8 94       	cli

000007be <__stop_program>:
 7be:	ff cf       	rjmp	.-2      	; 0x7be <__stop_program>
