
Analog-Board-DAC-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000004d6  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080010e  0080010e  00000578  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c0  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000229  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000490  00000000  00000000  00001659  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000209  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f1  00000000  00000000  00001e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000020f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_5>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d0 e1       	ldi	r29, 0x10	; 16
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	e6 ed       	ldi	r30, 0xD6	; 214
  78:	f4 e0       	ldi	r31, 0x04	; 4
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ae 30       	cpi	r26, 0x0E	; 14
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	ae e0       	ldi	r26, 0x0E	; 14
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a6 32       	cpi	r26, 0x26	; 38
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 10 02 	call	0x420	; 0x420 <main>
  9a:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <_Z8setupDACv>:
	0,
	0
};
void setupDAC(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
  a2:	83 b3       	in	r24, 0x13	; 19
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
  ac:	97 b1       	in	r25, 0x07	; 7
  ae:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
  b0:	e9 ed       	ldi	r30, 0xD9	; 217
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers 
  ba:	ea ed       	ldi	r30, 0xDA	; 218
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
  c4:	84 b3       	in	r24, 0x14	; 20
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
  ca:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
  cc:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
  ce:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
  d0:	a0 9a       	sbi	0x14, 0	; 20
}
  d2:	08 95       	ret

000000d4 <_Z7set_dachj>:
void set_dac(uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
  d4:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
  d6:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
  d8:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
  da:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
  dc:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2d e0       	ldi	r18, 0x0D	; 13
  e0:	2a 95       	dec	r18
  e2:	f1 f7       	brne	.-4      	; 0xe0 <_Z7set_dachj+0xc>
  e4:	00 00       	nop
	} else {
		
		dac_mux_address = DAC_MUX_EN1;
	}
	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
  e6:	40 91 da 00 	lds	r20, 0x00DA
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	88 30       	cpi	r24, 0x08	; 8
  f0:	10 f4       	brcc	.+4      	; 0xf6 <_Z7set_dachj+0x22>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <_Z7set_dachj+0x2c>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	2a 95       	dec	r18
 102:	e2 f7       	brpl	.-8      	; 0xfc <_Z7set_dachj+0x28>
 104:	94 2f       	mov	r25, r20
 106:	98 2b       	or	r25, r24
 108:	ea ed       	ldi	r30, 0xDA	; 218
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 83       	st	Z, r25
 10e:	22 e4       	ldi	r18, 0x42	; 66
 110:	2a 95       	dec	r18
 112:	f1 f7       	brne	.-4      	; 0x110 <_Z7set_dachj+0x3c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <_Z7set_dachj+0x42>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
 116:	90 81       	ld	r25, Z
 118:	80 95       	com	r24
 11a:	89 23       	and	r24, r25
 11c:	80 83       	st	Z, r24
	
}
 11e:	08 95       	ret

00000120 <_Z11display_DECjh>:


void display_DEC(uint16_t number, uint8_t digit)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2a 97       	sbiw	r28, 0x0a	; 10
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
		SEVEN,
		EIGHT,
		NINE,
		
		
	};
 134:	de 01       	movw	r26, r28
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	e0 e0       	ldi	r30, 0x00	; 0
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	3a e0       	ldi	r19, 0x0A	; 10
 13e:	01 90       	ld	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	31 50       	subi	r19, 0x01	; 1
 144:	e1 f7       	brne	.-8      	; 0x13e <_Z11display_DECjh+0x1e>
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
 146:	3f ef       	ldi	r19, 0xFF	; 255
 148:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 14a:	ea ed       	ldi	r30, 0xDA	; 218
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	30 81       	ld	r19, Z
 150:	30 61       	ori	r19, 0x10	; 16
 152:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 154:	30 81       	ld	r19, Z
 156:	3f 7e       	andi	r19, 0xEF	; 239
 158:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
 15a:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
 15c:	30 81       	ld	r19, Z
 15e:	30 62       	ori	r19, 0x20	; 32
 160:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
 162:	30 81       	ld	r19, Z
 164:	3f 7d       	andi	r19, 0xDF	; 223
 166:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
 168:	62 30       	cpi	r22, 0x02	; 2
 16a:	f9 f0       	breq	.+62     	; 0x1aa <_Z11display_DECjh+0x8a>
 16c:	63 30       	cpi	r22, 0x03	; 3
 16e:	18 f4       	brcc	.+6      	; 0x176 <_Z11display_DECjh+0x56>
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	a1 f5       	brne	.+104    	; 0x1dc <_Z11display_DECjh+0xbc>
 174:	0d c0       	rjmp	.+26     	; 0x190 <_Z11display_DECjh+0x70>
 176:	64 30       	cpi	r22, 0x04	; 4
 178:	29 f1       	breq	.+74     	; 0x1c4 <_Z11display_DECjh+0xa4>
 17a:	68 30       	cpi	r22, 0x08	; 8
 17c:	79 f5       	brne	.+94     	; 0x1dc <_Z11display_DECjh+0xbc>
		
		case ONES:
		cathode_byte = DEC[(number % 10)]; //print first decimal digit
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 186:	fe 01       	movw	r30, r28
 188:	e8 0f       	add	r30, r24
 18a:	f9 1f       	adc	r31, r25
 18c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 18e:	26 c0       	rjmp	.+76     	; 0x1dc <_Z11display_DECjh+0xbc>
		
		case TENS:
		cathode_byte = DEC[((number % 100) / 10)]; //print second decimal digit
 190:	64 e6       	ldi	r22, 0x64	; 100
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 198:	6a e0       	ldi	r22, 0x0A	; 10
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 1a0:	fe 01       	movw	r30, r28
 1a2:	e6 0f       	add	r30, r22
 1a4:	f7 1f       	adc	r31, r23
 1a6:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 1a8:	19 c0       	rjmp	.+50     	; 0x1dc <_Z11display_DECjh+0xbc>
		
		case HUNDS:
		cathode_byte = DEC[((number % 1000) / 100)]; //print third decimal digit
 1aa:	68 ee       	ldi	r22, 0xE8	; 232
 1ac:	73 e0       	ldi	r23, 0x03	; 3
 1ae:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 1b2:	64 e6       	ldi	r22, 0x64	; 100
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 1ba:	fe 01       	movw	r30, r28
 1bc:	e6 0f       	add	r30, r22
 1be:	f7 1f       	adc	r31, r23
 1c0:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 1c2:	0c c0       	rjmp	.+24     	; 0x1dc <_Z11display_DECjh+0xbc>
		
		case THOUS:
		cathode_byte = DEC[((number % 10000) / 1000)]; //print fourth decimal digit
 1c4:	60 e1       	ldi	r22, 0x10	; 16
 1c6:	77 e2       	ldi	r23, 0x27	; 39
 1c8:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 1cc:	68 ee       	ldi	r22, 0xE8	; 232
 1ce:	73 e0       	ldi	r23, 0x03	; 3
 1d0:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 1d4:	fe 01       	movw	r30, r28
 1d6:	e6 0f       	add	r30, r22
 1d8:	f7 1f       	adc	r31, r23
 1da:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
 1dc:	20 95       	com	r18
 1de:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 1e0:	ea ed       	ldi	r30, 0xDA	; 218
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 7e       	andi	r24, 0xEF	; 239
 1ee:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
 1f0:	2a 96       	adiw	r28, 0x0a	; 10
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <_Z8setupADCv>:

void setupADC(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
 202:	ea e7       	ldi	r30, 0x7A	; 122
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	84 60       	ori	r24, 0x04	; 4
 20a:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
 20c:	ac e7       	ldi	r26, 0x7C	; 124
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	8c 91       	ld	r24, X
 212:	80 64       	ori	r24, 0x40	; 64
 214:	8c 93       	st	X, r24
	//MUX2:0 is 000 by default in ADMUX
	//ADMUX &= ~(1<<MUX0); //set ADC multiplexer to read ADC0 (PF0 on PORTF, pin 97)
	
	//ADCSRA |= (1<<ADATE); //set ADC in free running mode
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
 216:	ae e7       	ldi	r26, 0x7E	; 126
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	8c 91       	ld	r24, X
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
 220:	80 81       	ld	r24, Z
 222:	80 68       	ori	r24, 0x80	; 128
 224:	80 83       	st	Z, r24
	//adc_value = ADCL;
	//adc_value = adc_value | (ADCH <<8);
	//adc_previous = adc_value;
	//PORTH |= (1<<POTMUX_EN0); //set POTMUX_EN0
	
}
 226:	08 95       	ret

00000228 <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	6f 92       	push	r6
 234:	7f 92       	push	r7
 236:	8f 92       	push	r8
 238:	9f 92       	push	r9
 23a:	af 92       	push	r10
 23c:	bf 92       	push	r11
 23e:	cf 92       	push	r12
 240:	df 92       	push	r13
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	
	display_DEC(adc_value, digit[place]);
 266:	80 91 1e 01 	lds	r24, 0x011E
 26a:	90 91 1f 01 	lds	r25, 0x011F
 26e:	e0 91 22 01 	lds	r30, 0x0122
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	e6 5f       	subi	r30, 0xF6	; 246
 276:	fe 4f       	sbci	r31, 0xFE	; 254
 278:	60 81       	ld	r22, Z
 27a:	0e 94 90 00 	call	0x120	; 0x120 <_Z11display_DECjh>
 27e:	cc 24       	eor	r12, r12
 280:	dd 24       	eor	r13, r13
 282:	c3 94       	inc	r12
 284:	ee 24       	eor	r14, r14
 286:	ff 24       	eor	r15, r15
				//NEED TO HAVE ONE CHANNEL GROUNDED TO RESET MULTIPLEXER INPUT - NOT IF DELAY BETWEEN SETTING CHANNEL ADDRESS ON MUX AND 
				//READING POT IS SUFFICIENTLY LONG. 2us IS ENOUGH TO PRODUCE >1-2 mV OFFSET FROM FULL SWEEP OF PREVIOUS POT CHANNEL
				//DATA_BUS = 0; //set multiplexer to pot 0, kept at GND				

				//_delay_us(4); //2 us is minimum delay required to produce mux channel cross talk of <= 1 bit. Still need to see if this is affected by S&H			
				ADCSRA |= (1<<ADSC); //start ADC conversion
 288:	ca e7       	ldi	r28, 0x7A	; 122
 28a:	d0 e0       	ldi	r29, 0x00	; 0
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
				//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
								
				//adc_previous = adc_value;
				adc_value = ADCL;
 28c:	0f 2e       	mov	r0, r31
 28e:	f8 e7       	ldi	r31, 0x78	; 120
 290:	8f 2e       	mov	r8, r31
 292:	99 24       	eor	r9, r9
 294:	f0 2d       	mov	r31, r0
				adc_value = adc_value | (ADCH <<8);
 296:	0f 2e       	mov	r0, r31
 298:	f9 e7       	ldi	r31, 0x79	; 121
 29a:	6f 2e       	mov	r6, r31
 29c:	77 24       	eor	r7, r7
 29e:	f0 2d       	mov	r31, r0
				
				//set up mux for next ADC read
				POT_MUX &= ~(1<<POTMUX_EN0); //clear POTMUX_EN0 to select input on U2
 2a0:	0a ed       	ldi	r16, 0xDA	; 218
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	06 c0       	rjmp	.+12     	; 0x2b2 <__vector_5+0x8a>
	
}

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
	
	display_DEC(adc_value, digit[place]);
 2a6:	08 94       	sec
 2a8:	e1 1c       	adc	r14, r1
 2aa:	f1 1c       	adc	r15, r1
 2ac:	08 94       	sec
 2ae:	c1 1c       	adc	r12, r1
 2b0:	d1 1c       	adc	r13, r1
				//NEED TO HAVE ONE CHANNEL GROUNDED TO RESET MULTIPLEXER INPUT - NOT IF DELAY BETWEEN SETTING CHANNEL ADDRESS ON MUX AND 
				//READING POT IS SUFFICIENTLY LONG. 2us IS ENOUGH TO PRODUCE >1-2 mV OFFSET FROM FULL SWEEP OF PREVIOUS POT CHANNEL
				//DATA_BUS = 0; //set multiplexer to pot 0, kept at GND				

				//_delay_us(4); //2 us is minimum delay required to produce mux channel cross talk of <= 1 bit. Still need to see if this is affected by S&H			
				ADCSRA |= (1<<ADSC); //start ADC conversion
 2b2:	88 81       	ld	r24, Y
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	88 83       	st	Y, r24
				while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
 2b8:	88 81       	ld	r24, Y
 2ba:	86 fd       	sbrc	r24, 6
 2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <__vector_5+0x90>
				//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
								
				//adc_previous = adc_value;
				adc_value = ADCL;
 2be:	f4 01       	movw	r30, r8
 2c0:	80 81       	ld	r24, Z
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	90 93 1f 01 	sts	0x011F, r25
 2c8:	80 93 1e 01 	sts	0x011E, r24
				adc_value = adc_value | (ADCH <<8);
 2cc:	f3 01       	movw	r30, r6
 2ce:	20 81       	ld	r18, Z
 2d0:	80 91 1e 01 	lds	r24, 0x011E
 2d4:	90 91 1f 01 	lds	r25, 0x011F
 2d8:	b2 2e       	mov	r11, r18
 2da:	aa 24       	eor	r10, r10
 2dc:	8a 29       	or	r24, r10
 2de:	9b 29       	or	r25, r11
 2e0:	90 93 1f 01 	sts	0x011F, r25
 2e4:	80 93 1e 01 	sts	0x011E, r24
				
				//set up mux for next ADC read
				POT_MUX &= ~(1<<POTMUX_EN0); //clear POTMUX_EN0 to select input on U2
 2e8:	f8 01       	movw	r30, r16
 2ea:	80 81       	ld	r24, Z
 2ec:	8f 7b       	andi	r24, 0xBF	; 191
 2ee:	80 83       	st	Z, r24
				DATA_BUS = i; //set pot mux address on databus				
 2f0:	8e 2d       	mov	r24, r14
 2f2:	e2 b8       	out	0x02, r14	; 2
				//dac_channel[i] = adc_value << 4; //convert 10 bit ADC value to 14 bit DAC value
				//set_dac(i, dac_channel[i]); //set DAC
				//for testing, set one DAC S&H channel to a fixed value and measure it as flanking S&H channels are swept from 0-10V
				if (i == 5) {set_dac(i, 0x2000);} else {set_dac(i, adc_value << 4);}
 2f4:	f5 e0       	ldi	r31, 0x05	; 5
 2f6:	ef 16       	cp	r14, r31
 2f8:	f1 04       	cpc	r15, r1
 2fa:	49 f4       	brne	.+18     	; 0x30e <__vector_5+0xe6>
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 e2       	ldi	r23, 0x20	; 32
 300:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z7set_dachj>
                //set_dac(i, adc_value << 4);
				POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
 304:	f8 01       	movw	r30, r16
 306:	80 81       	ld	r24, Z
 308:	80 64       	ori	r24, 0x40	; 64
 30a:	80 83       	st	Z, r24
 30c:	cc cf       	rjmp	.-104    	; 0x2a6 <__vector_5+0x7e>
				POT_MUX &= ~(1<<POTMUX_EN0); //clear POTMUX_EN0 to select input on U2
				DATA_BUS = i; //set pot mux address on databus				
				//dac_channel[i] = adc_value << 4; //convert 10 bit ADC value to 14 bit DAC value
				//set_dac(i, dac_channel[i]); //set DAC
				//for testing, set one DAC S&H channel to a fixed value and measure it as flanking S&H channels are swept from 0-10V
				if (i == 5) {set_dac(i, 0x2000);} else {set_dac(i, adc_value << 4);}
 30e:	60 91 1e 01 	lds	r22, 0x011E
 312:	70 91 1f 01 	lds	r23, 0x011F
 316:	62 95       	swap	r22
 318:	72 95       	swap	r23
 31a:	70 7f       	andi	r23, 0xF0	; 240
 31c:	76 27       	eor	r23, r22
 31e:	60 7f       	andi	r22, 0xF0	; 240
 320:	76 27       	eor	r23, r22
 322:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z7set_dachj>
                //set_dac(i, adc_value << 4);
				POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
 326:	f8 01       	movw	r30, r16
 328:	80 81       	ld	r24, Z
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	80 83       	st	Z, r24
			//adc_value = adc_sum>>2; //right shift by 2 to convert 14 bit sum to 12 bit result
	
				
	//	} else {
			//DATA_BUS = 0;
			for (int i = 0; i <=15; i++)
 32e:	f0 e1       	ldi	r31, 0x10	; 16
 330:	cf 16       	cp	r12, r31
 332:	d1 04       	cpc	r13, r1
 334:	0c f4       	brge	.+2      	; 0x338 <__vector_5+0x110>
 336:	b7 cf       	rjmp	.-146    	; 0x2a6 <__vector_5+0x7e>
                //set_dac(i, adc_value << 4);
				POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
				//POT_MUX |= (1<<POTMUX_EN1); //needed to set this for some reason otherwise was reading both pot demuxers at once - need to check this out.	
						
			}			
			DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
 338:	a1 98       	cbi	0x14, 1	; 20
			DAC_CTRL |= (1<<DAC_RS);	
 33a:	a1 9a       	sbi	0x14, 1	; 20
		//int deflection = adc_value - adc_previous;
		//if (deflection < 0 ) deflection = adc_previous - adc_value;
		//if (deflection <= 1) adc_value = adc_previous;
	//}				
	//toggle ARP_SYNC LED
	PINB = (1<<ARP_SYNC_LED);
 33c:	80 e8       	ldi	r24, 0x80	; 128
 33e:	83 b9       	out	0x03, r24	; 3
	SPI_PORT |= SPI_SW_LATCH;
 340:	2d 9a       	sbi	0x05, 5	; 5
		
	//SHIFT 5th BYTE
	SPDR =  ISW4_SW_ON << 1 | ISW8_LED; //ISW8_LED is MSB on 74XX595 U16
 342:	80 91 23 01 	lds	r24, 0x0123
 346:	88 0f       	add	r24, r24
 348:	80 68       	ori	r24, 0x80	; 128
 34a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 34c:	0d b4       	in	r0, 0x2d	; 45
 34e:	07 fe       	sbrs	r0, 7
 350:	fd cf       	rjmp	.-6      	; 0x34c <__vector_5+0x124>
		
	//Now read SPDR for switch data shifted in from 74XX165 U14
	if (SPDR >> 7 & 1) //check if ISW4_SW bit is set (MSB on U14)
 352:	0e b4       	in	r0, 0x2e	; 46
 354:	07 fe       	sbrs	r0, 7
 356:	04 c0       	rjmp	.+8      	; 0x360 <__vector_5+0x138>
	{
		ISW4_SW_ON = 1;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 23 01 	sts	0x0123, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <__vector_5+0x13c>
	}
	else
	{
		ISW4_SW_ON = 0;
 360:	10 92 23 01 	sts	0x0123, r1
	}
	//SHIFT 4th BYTE
	SPDR = 0; //no LEDs connected in current test set up
 364:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 366:	0d b4       	in	r0, 0x2d	; 45
 368:	07 fe       	sbrs	r0, 7
 36a:	fd cf       	rjmp	.-6      	; 0x366 <__vector_5+0x13e>
	//Now read SPDR for switch data shifted in from 74XX165 (U9)
	//check if ISW12_SW bit is set
	if (SPDR >> 5 & 1)
 36c:	0e b4       	in	r0, 0x2e	; 46
 36e:	05 fe       	sbrs	r0, 5
 370:	04 c0       	rjmp	.+8      	; 0x37a <__vector_5+0x152>
	{
		ISW12_SW_ON = 1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 93 25 01 	sts	0x0125, r24
 378:	02 c0       	rjmp	.+4      	; 0x37e <__vector_5+0x156>
	}
	else
	{
		ISW12_SW_ON = 0;
 37a:	10 92 25 01 	sts	0x0125, r1
	}
	//check if ISW13_SW bit is set
	if (SPDR >> 6 & 1)
 37e:	0e b4       	in	r0, 0x2e	; 46
 380:	06 fe       	sbrs	r0, 6
 382:	04 c0       	rjmp	.+8      	; 0x38c <__vector_5+0x164>
	{
		ISW13_SW_ON = 1;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	80 93 24 01 	sts	0x0124, r24
 38a:	02 c0       	rjmp	.+4      	; 0x390 <__vector_5+0x168>
	}
	else
	{
		ISW13_SW_ON = 0;
 38c:	10 92 24 01 	sts	0x0124, r1
	}
		
	//SHIFT 3th BYTE
	SPDR = 0;
 390:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 392:	0d b4       	in	r0, 0x2d	; 45
 394:	07 fe       	sbrs	r0, 7
 396:	fd cf       	rjmp	.-6      	; 0x392 <__vector_5+0x16a>

	//SHIFT 2th BYTE
	SPDR = 0;
 398:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 39a:	0d b4       	in	r0, 0x2d	; 45
 39c:	07 fe       	sbrs	r0, 7
 39e:	fd cf       	rjmp	.-6      	; 0x39a <__vector_5+0x172>
		
	//SHIFT 1st BYTE
	//SPDR = (ISW12_SW_ON << 2) | ISW11_LED; //TURN ON ISW12 (if ISW12_SW is ON) and ISW11 LEDs, both on 74XX595 U8, first shift register in chain
	SPDR = (ISW12_SW_ON <<2) | (ISW13_SW_ON << 7); //turn on ISW12 if ISW12_SW is ON, turn ISW11 (MSB of first shift register chain) if ISW13_SW is ON
 3a0:	80 91 25 01 	lds	r24, 0x0125
 3a4:	90 91 24 01 	lds	r25, 0x0124
 3a8:	97 95       	ror	r25
 3aa:	99 27       	eor	r25, r25
 3ac:	97 95       	ror	r25
 3ae:	88 0f       	add	r24, r24
 3b0:	88 0f       	add	r24, r24
 3b2:	89 2b       	or	r24, r25
 3b4:	8e bd       	out	0x2e, r24	; 46
	//Wait for SPI shift to complete
	while (!(SPSR & (1<<SPIF)));
 3b6:	0d b4       	in	r0, 0x2d	; 45
 3b8:	07 fe       	sbrs	r0, 7
 3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <__vector_5+0x18e>
		
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
	SPI_LATCH_PORT &= ~LED_LATCH;
 3bc:	ed ed       	ldi	r30, 0xDD	; 221
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	87 7f       	andi	r24, 0xF7	; 247
 3c4:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 3c6:	80 81       	ld	r24, Z
 3c8:	88 60       	ori	r24, 0x08	; 8
 3ca:	80 83       	st	Z, r24
		
	//clear SPI_SW_LATCH
	SPI_PORT &= ~SPI_SW_LATCH;
 3cc:	2d 98       	cbi	0x05, 5	; 5
			//display_value = (float(adc_value)/1024)*10000; //at the moment, only last read POT (0b111) value is displayed
		//}			
	//display_DEC(display_value, digit[place]);
	
	//increment digit display place
	if (place++ == 3) //post increment
 3ce:	80 91 22 01 	lds	r24, 0x0122
 3d2:	98 2f       	mov	r25, r24
 3d4:	9f 5f       	subi	r25, 0xFF	; 255
 3d6:	90 93 22 01 	sts	0x0122, r25
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	11 f4       	brne	.+4      	; 0x3e2 <__vector_5+0x1ba>
	{
		place = 0;
 3de:	10 92 22 01 	sts	0x0122, r1
	}
	

	
}	
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	7f 91       	pop	r23
 3f4:	6f 91       	pop	r22
 3f6:	5f 91       	pop	r21
 3f8:	4f 91       	pop	r20
 3fa:	3f 91       	pop	r19
 3fc:	2f 91       	pop	r18
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	ff 90       	pop	r15
 404:	ef 90       	pop	r14
 406:	df 90       	pop	r13
 408:	cf 90       	pop	r12
 40a:	bf 90       	pop	r11
 40c:	af 90       	pop	r10
 40e:	9f 90       	pop	r9
 410:	8f 90       	pop	r8
 412:	7f 90       	pop	r7
 414:	6f 90       	pop	r6
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
 420:	80 e8       	ldi	r24, 0x80	; 128
 422:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
 424:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
 426:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
 428:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
	//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
	//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
	DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
 42a:	84 b1       	in	r24, 0x04	; 4
 42c:	87 62       	ori	r24, 0x27	; 39
 42e:	84 b9       	out	0x04, r24	; 4
	
	//SET SPI_EN and LED_LATCH pins as outputs
	DDRJ |= (SPI_EN | LED_LATCH);
 430:	ec ed       	ldi	r30, 0xDC	; 220
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	8c 60       	ori	r24, 0x0C	; 12
 438:	80 83       	st	Z, r24
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
	SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
 43a:	85 b1       	in	r24, 0x05	; 5
 43c:	89 7d       	andi	r24, 0xD9	; 217
 43e:	85 b9       	out	0x05, r24	; 5
	
	//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
	SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
 440:	ed ed       	ldi	r30, 0xDD	; 221
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	83 7f       	andi	r24, 0xF3	; 243
 448:	80 83       	st	Z, r24
	
	//SET UP SPI
	SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
 44a:	80 e5       	ldi	r24, 0x50	; 80
 44c:	8c bd       	out	0x2c, r24	; 44
	
	//Pull LED_LATCH LOW
	SPI_LATCH_PORT &= ~LED_LATCH;
 44e:	80 81       	ld	r24, Z
 450:	87 7f       	andi	r24, 0xF7	; 247
 452:	80 83       	st	Z, r24
	////Wait for SPI shift to complete
	//while (!(SPSR & (1<<SPIF)));
	
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
	
	SPI_LATCH_PORT &= ~LED_LATCH;
 454:	80 81       	ld	r24, Z
 456:	87 7f       	andi	r24, 0xF7	; 247
 458:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 45a:	80 81       	ld	r24, Z
 45c:	88 60       	ori	r24, 0x08	; 8
 45e:	80 83       	st	Z, r24
	
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
 460:	a9 ed       	ldi	r26, 0xD9	; 217
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	8c 91       	ld	r24, X
 466:	80 6c       	ori	r24, 0xC0	; 192
 468:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
 46a:	ea ed       	ldi	r30, 0xDA	; 218
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	80 6c       	ori	r24, 0xC0	; 192
 472:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
 474:	81 b1       	in	r24, 0x01	; 1
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
 47a:	92 b1       	in	r25, 0x02	; 2
 47c:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
 47e:	8c 91       	ld	r24, X
 480:	80 63       	ori	r24, 0x30	; 48
 482:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
 484:	80 81       	ld	r24, Z
 486:	8f 7c       	andi	r24, 0xCF	; 207
 488:	80 83       	st	Z, r24
	

	//setup ADC, free running for now. Not sure if this is the way it should be done. Look into benefits of one-shot ADC
    setupADC();	
 48a:	0e 94 01 01 	call	0x202	; 0x202 <_Z8setupADCv>
	
	//setup DAC
	setupDAC();
 48e:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8setupDACv>
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
 492:	e0 eb       	ldi	r30, 0xB0	; 176
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	86 60       	ori	r24, 0x06	; 6
 49a:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
 49c:	e0 e7       	ldi	r30, 0x70	; 112
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	81 60       	ori	r24, 0x01	; 1
 4a4:	80 83       	st	Z, r24
	sei(); //enable global interrupts
 4a6:	78 94       	sei
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <main+0x88>

000004aa <__udivmodhi4>:
 4aa:	aa 1b       	sub	r26, r26
 4ac:	bb 1b       	sub	r27, r27
 4ae:	51 e1       	ldi	r21, 0x11	; 17
 4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <__udivmodhi4_ep>

000004b2 <__udivmodhi4_loop>:
 4b2:	aa 1f       	adc	r26, r26
 4b4:	bb 1f       	adc	r27, r27
 4b6:	a6 17       	cp	r26, r22
 4b8:	b7 07       	cpc	r27, r23
 4ba:	10 f0       	brcs	.+4      	; 0x4c0 <__udivmodhi4_ep>
 4bc:	a6 1b       	sub	r26, r22
 4be:	b7 0b       	sbc	r27, r23

000004c0 <__udivmodhi4_ep>:
 4c0:	88 1f       	adc	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	5a 95       	dec	r21
 4c6:	a9 f7       	brne	.-22     	; 0x4b2 <__udivmodhi4_loop>
 4c8:	80 95       	com	r24
 4ca:	90 95       	com	r25
 4cc:	bc 01       	movw	r22, r24
 4ce:	cd 01       	movw	r24, r26
 4d0:	08 95       	ret

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
