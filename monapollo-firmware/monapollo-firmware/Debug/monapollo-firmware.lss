
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003c16  00003cca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c16  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000213  008002b0  008002b0  00003e7a  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  000044f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000300  00000000  00000000  00005428  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a0c  00000000  00000000  00005728  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018b0  00000000  00000000  0000c134  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002149  00000000  00000000  0000d9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d8c  00000000  00000000  0000fb30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000198a  00000000  00000000  000108bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002eaa  00000000  00000000  00012246  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  000150f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_9>
      28:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e6 e1       	ldi	r30, 0x16	; 22
      78:	fc e3       	ldi	r31, 0x3C	; 60
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a3 3c       	cpi	r26, 0xC3	; 195
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 1a 04 	call	0x834	; 0x834 <main>
      9a:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:
struct arp arp;


//static struct midi_note arp_sequence[24] = {0,0};

void update_arp_sequence(void) {
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
	
	//arp.step_number = gate_buffer + arp.range * gate_buffer; //gate buffer is the number of currently held notes
	
	arp.step_number = gate_buffer*(arp.range + 1);
     15e:	80 91 84 03 	lds	r24, 0x0384
     162:	8f 5f       	subi	r24, 0xFF	; 255
     164:	90 91 b0 02 	lds	r25, 0x02B0
     168:	89 9f       	mul	r24, r25
     16a:	80 2d       	mov	r24, r0
     16c:	11 24       	eor	r1, r1
     16e:	80 93 85 03 	sts	0x0385, r24
     172:	00 e0       	ldi	r16, 0x00	; 0
	
	
	//set root notes
	uint8_t step = 0;
	for (int range = 0; range <= arp.range; range++) {
     174:	aa 24       	eor	r10, r10
     176:	bb 24       	eor	r11, r11
	
	arp.step_number = gate_buffer*(arp.range + 1);
	
	
	//set root notes
	uint8_t step = 0;
     178:	10 e0       	ldi	r17, 0x00	; 0
	for (int range = 0; range <= arp.range; range++) {
		
		
		for (int i = 0; i <= gate_buffer; i++) {
     17a:	88 24       	eor	r8, r8
     17c:	99 24       	eor	r9, r9
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
			//uint8_t root_note = get_indexed_note(i);
			
			
			switch(arp.mode) {
     17e:	0f 2e       	mov	r0, r31
     180:	f9 e8       	ldi	r31, 0x89	; 137
     182:	ef 2e       	mov	r14, r31
     184:	f3 e0       	ldi	r31, 0x03	; 3
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
				
				case UP:
				
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     18a:	0f 2e       	mov	r0, r31
     18c:	f4 e8       	ldi	r31, 0x84	; 132
     18e:	cf 2e       	mov	r12, r31
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	df 2e       	mov	r13, r31
     194:	f0 2d       	mov	r31, r0
     196:	35 c0       	rjmp	.+106    	; 0x202 <update_arp_sequence+0xbc>
	for (int range = 0; range <= arp.range; range++) {
		
		
		for (int i = 0; i <= gate_buffer; i++) {
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	8c 1b       	sub	r24, r28
     19c:	0e 94 28 01 	call	0x250	; 0x250 <get_indexed_note>
     1a0:	28 2f       	mov	r18, r24
			//uint8_t root_note = get_indexed_note(i);
			
			
			switch(arp.mode) {
     1a2:	f7 01       	movw	r30, r14
     1a4:	80 81       	ld	r24, Z
     1a6:	88 23       	and	r24, r24
     1a8:	19 f0       	breq	.+6      	; 0x1b0 <update_arp_sequence+0x6a>
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	c1 f4       	brne	.+48     	; 0x1de <update_arp_sequence+0x98>
     1ae:	0c c0       	rjmp	.+24     	; 0x1c8 <update_arp_sequence+0x82>
				
				case UP:
				
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1b0:	81 2f       	mov	r24, r17
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	03 96       	adiw	r24, 0x03	; 3
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	8c 0d       	add	r24, r12
     1bc:	9d 1d       	adc	r25, r13
     1be:	20 0f       	add	r18, r16
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18
     1c4:	1f 5f       	subi	r17, 0xFF	; 255
				
					break;
     1c6:	0b c0       	rjmp	.+22     	; 0x1de <update_arp_sequence+0x98>
					
				case DOWN:
				
					arp.sequence[step++].note = root_note - (range*12); //will need to handle min note out of range here
     1c8:	81 2f       	mov	r24, r17
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	03 96       	adiw	r24, 0x03	; 3
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	8c 0d       	add	r24, r12
     1d4:	9d 1d       	adc	r25, r13
     1d6:	20 1b       	sub	r18, r16
     1d8:	fc 01       	movw	r30, r24
     1da:	20 83       	st	Z, r18
     1dc:	1f 5f       	subi	r17, 0xFF	; 255
	//set root notes
	uint8_t step = 0;
	for (int range = 0; range <= arp.range; range++) {
		
		
		for (int i = 0; i <= gate_buffer; i++) {
     1de:	21 96       	adiw	r28, 0x01	; 1
     1e0:	80 91 b0 02 	lds	r24, 0x02B0
     1e4:	28 2f       	mov	r18, r24
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	2c 17       	cp	r18, r28
     1ea:	3d 07       	cpc	r19, r29
     1ec:	ac f6       	brge	.-86     	; 0x198 <update_arp_sequence+0x52>
	arp.step_number = gate_buffer*(arp.range + 1);
	
	
	//set root notes
	uint8_t step = 0;
	for (int range = 0; range <= arp.range; range++) {
     1ee:	08 94       	sec
     1f0:	a1 1c       	adc	r10, r1
     1f2:	b1 1c       	adc	r11, r1
     1f4:	04 5f       	subi	r16, 0xF4	; 244
     1f6:	f6 01       	movw	r30, r12
     1f8:	80 81       	ld	r24, Z
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	8a 15       	cp	r24, r10
     1fe:	9b 05       	cpc	r25, r11
     200:	24 f0       	brlt	.+8      	; 0x20a <update_arp_sequence+0xc4>
		
		
		for (int i = 0; i <= gate_buffer; i++) {
     202:	80 91 b0 02 	lds	r24, 0x02B0
     206:	e4 01       	movw	r28, r8
     208:	c7 cf       	rjmp	.-114    	; 0x198 <update_arp_sequence+0x52>
	

		
	
	
}
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	df 90       	pop	r13
     218:	cf 90       	pop	r12
     21a:	bf 90       	pop	r11
     21c:	af 90       	pop	r10
     21e:	9f 90       	pop	r9
     220:	8f 90       	pop	r8
     222:	08 95       	ret

00000224 <step_arp_note>:

void step_arp_note(void) { //updates arp note according to range, mode and keys held
	
	
	if (++arp.step_position >= arp.step_number) arp.step_position  = 0; //reset step position when at end of sequence 
     224:	80 91 86 03 	lds	r24, 0x0386
     228:	8f 5f       	subi	r24, 0xFF	; 255
     22a:	80 93 86 03 	sts	0x0386, r24
     22e:	90 91 85 03 	lds	r25, 0x0385
     232:	89 17       	cp	r24, r25
     234:	10 f0       	brcs	.+4      	; 0x23a <step_arp_note+0x16>
     236:	10 92 86 03 	sts	0x0386, r1
	
	arp.current_note = arp.sequence[arp.step_position].note;
     23a:	e0 91 86 03 	lds	r30, 0x0386
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	ee 0f       	add	r30, r30
     242:	ff 1f       	adc	r31, r31
     244:	e6 57       	subi	r30, 0x76	; 118
     246:	fc 4f       	sbci	r31, 0xFC	; 252
     248:	80 81       	ld	r24, Z
     24a:	80 93 87 03 	sts	0x0387, r24
	

     24e:	08 95       	ret

00000250 <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     250:	e8 2f       	mov	r30, r24
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	e8 54       	subi	r30, 0x48	; 72
     25a:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     25c:	80 81       	ld	r24, Z
     25e:	08 95       	ret

00000260 <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.clock_source == OFF) {
     260:	80 91 88 03 	lds	r24, 0x0388
     264:	82 30       	cpi	r24, 0x02	; 2
     266:	19 f4       	brne	.+6      	; 0x26e <get_current_note+0xe>
		
		note = current_note;
     268:	80 91 b1 02 	lds	r24, 0x02B1
     26c:	08 95       	ret

		
	} else {
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     26e:	80 91 87 03 	lds	r24, 0x0387
		
		
	}
	return note;
	
}
     272:	08 95       	ret

00000274 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	18 2f       	mov	r17, r24
     27e:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     280:	8a eb       	ldi	r24, 0xBA	; 186
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	ec 01       	movw	r28, r24
     286:	22 97       	sbiw	r28, 0x02	; 2
     288:	be 01       	movw	r22, r28
     28a:	4e e0       	ldi	r20, 0x0E	; 14
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     292:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     294:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     296:	10 93 b1 02 	sts	0x02B1, r17
	
} 
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	08 95       	ret

000002a4 <remove_note>:
void remove_note(uint8_t note){
     2a4:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     2a6:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     2aa:	c8 17       	cp	r28, r24
     2ac:	41 f0       	breq	.+16     	; 0x2be <remove_note+0x1a>
     2ae:	ea eb       	ldi	r30, 0xBA	; 186
     2b0:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2b2:	41 e0       	ldi	r20, 0x01	; 1
     2b4:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     2b6:	90 81       	ld	r25, Z
     2b8:	98 17       	cp	r25, r24
     2ba:	59 f4       	brne	.+22     	; 0x2d2 <remove_note+0x2e>
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     2c2:	fa 01       	movw	r30, r20
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	e8 54       	subi	r30, 0x48	; 72
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	80 83       	st	Z, r24
			free_slot = i;
			break;
     2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2d2:	4f 5f       	subi	r20, 0xFF	; 255
     2d4:	5f 4f       	sbci	r21, 0xFF	; 255
     2d6:	32 96       	adiw	r30, 0x02	; 2
     2d8:	48 30       	cpi	r20, 0x08	; 8
     2da:	51 05       	cpc	r21, r1
     2dc:	61 f7       	brne	.-40     	; 0x2b6 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     2de:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	ca 01       	movw	r24, r20
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	bc 01       	movw	r22, r24
     2ea:	66 54       	subi	r22, 0x46	; 70
     2ec:	7e 4f       	sbci	r23, 0xFE	; 254
     2ee:	40 95       	com	r20
     2f0:	50 95       	com	r21
     2f2:	48 5f       	subi	r20, 0xF8	; 248
     2f4:	5f 4f       	sbci	r21, 0xFF	; 255
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	88 54       	subi	r24, 0x48	; 72
     2fc:	9e 4f       	sbci	r25, 0xFE	; 254
     2fe:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <memmove>
	note_pool[7].note = EMPTY;	
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     308:	80 91 b8 01 	lds	r24, 0x01B8
     30c:	8f 3f       	cpi	r24, 0xFF	; 255
     30e:	19 f4       	brne	.+6      	; 0x316 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     310:	c0 93 b1 02 	sts	0x02B1, r28
     314:	02 c0       	rjmp	.+4      	; 0x31a <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     316:	80 93 b1 02 	sts	0x02B1, r24

	}	
	
}
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     31e:	8d e0       	ldi	r24, 0x0D	; 13
     320:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     32a:	08 95       	ret

0000032c <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     32c:	90 93 89 00 	sts	0x0089, r25
     330:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     334:	20 91 84 00 	lds	r18, 0x0084
     338:	30 91 85 00 	lds	r19, 0x0085
     33c:	82 17       	cp	r24, r18
     33e:	93 07       	cpc	r25, r19
     340:	28 f4       	brcc	.+10     	; 0x34c <update_clock_rate+0x20>
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	90 93 85 00 	sts	0x0085, r25
     348:	80 93 84 00 	sts	0x0084, r24
     34c:	08 95       	ret

0000034e <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     34e:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     350:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     352:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     354:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     356:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     358:	8c 91       	ld	r24, X
     35a:	87 70       	andi	r24, 0x07	; 7
     35c:	82 b9       	out	0x02, r24	; 2
     35e:	66 e0       	ldi	r22, 0x06	; 6
     360:	6a 95       	dec	r22
     362:	f1 f7       	brne	.-4      	; 0x360 <set_control_voltage+0x12>
     364:	00 c0       	rjmp	.+0      	; 0x366 <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     366:	ea ed       	ldi	r30, 0xDA	; 218
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	40 81       	ld	r20, Z
     36c:	8c 91       	ld	r24, X
     36e:	86 95       	lsr	r24
     370:	86 95       	lsr	r24
     372:	86 95       	lsr	r24
     374:	87 70       	andi	r24, 0x07	; 7
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	b9 01       	movw	r22, r18
     37c:	02 c0       	rjmp	.+4      	; 0x382 <set_control_voltage+0x34>
     37e:	66 0f       	add	r22, r22
     380:	77 1f       	adc	r23, r23
     382:	8a 95       	dec	r24
     384:	e2 f7       	brpl	.-8      	; 0x37e <set_control_voltage+0x30>
     386:	cb 01       	movw	r24, r22
     388:	84 2b       	or	r24, r20
     38a:	80 83       	st	Z, r24
     38c:	76 e0       	ldi	r23, 0x06	; 6
     38e:	7a 95       	dec	r23
     390:	f1 f7       	brne	.-4      	; 0x38e <set_control_voltage+0x40>
     392:	00 c0       	rjmp	.+0      	; 0x394 <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     394:	80 81       	ld	r24, Z
     396:	9c 91       	ld	r25, X
     398:	96 95       	lsr	r25
     39a:	96 95       	lsr	r25
     39c:	96 95       	lsr	r25
     39e:	97 70       	andi	r25, 0x07	; 7
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <set_control_voltage+0x58>
     3a2:	22 0f       	add	r18, r18
     3a4:	33 1f       	adc	r19, r19
     3a6:	9a 95       	dec	r25
     3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <set_control_voltage+0x54>
     3aa:	20 95       	com	r18
     3ac:	28 23       	and	r18, r24
     3ae:	20 83       	st	Z, r18
	
}	
     3b0:	08 95       	ret

000003b2 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     3b2:	83 b3       	in	r24, 0x13	; 19
     3b4:	83 60       	ori	r24, 0x03	; 3
     3b6:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     3b8:	8f ef       	ldi	r24, 0xFF	; 255
     3ba:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     3bc:	97 b1       	in	r25, 0x07	; 7
     3be:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     3c0:	e9 ed       	ldi	r30, 0xD9	; 217
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	8f 60       	ori	r24, 0x0F	; 15
     3c8:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     3ca:	ea ed       	ldi	r30, 0xDA	; 218
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	80 7f       	andi	r24, 0xF0	; 240
     3d2:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     3d4:	84 b3       	in	r24, 0x14	; 20
     3d6:	83 60       	ori	r24, 0x03	; 3
     3d8:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     3da:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     3dc:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     3de:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     3e0:	a0 9a       	sbi	0x14, 0	; 20
}
     3e2:	08 95       	ret

000003e4 <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	2e 97       	sbiw	r28, 0x0e	; 14
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     3fc:	28 e0       	ldi	r18, 0x08	; 8
     3fe:	29 83       	std	Y+1, r18	; 0x01
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	2a 83       	std	Y+2, r18	; 0x02
     404:	22 e0       	ldi	r18, 0x02	; 2
     406:	2b 83       	std	Y+3, r18	; 0x03
     408:	24 e0       	ldi	r18, 0x04	; 4
     40a:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     40c:	de 01       	movw	r26, r28
     40e:	15 96       	adiw	r26, 0x05	; 5
     410:	e7 ee       	ldi	r30, 0xE7	; 231
     412:	f1 e0       	ldi	r31, 0x01	; 1
     414:	2a e0       	ldi	r18, 0x0A	; 10
     416:	01 90       	ld	r0, Z+
     418:	0d 92       	st	X+, r0
     41a:	21 50       	subi	r18, 0x01	; 1
     41c:	e1 f7       	brne	.-8      	; 0x416 <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     41e:	2f ef       	ldi	r18, 0xFF	; 255
     420:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     422:	ea ed       	ldi	r30, 0xDA	; 218
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	20 81       	ld	r18, Z
     428:	20 61       	ori	r18, 0x10	; 16
     42a:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     42c:	20 81       	ld	r18, Z
     42e:	2f 7e       	andi	r18, 0xEF	; 239
     430:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     432:	06 2f       	mov	r16, r22
     434:	10 e0       	ldi	r17, 0x00	; 0
     436:	de 01       	movw	r26, r28
     438:	a0 0f       	add	r26, r16
     43a:	b1 1f       	adc	r27, r17
     43c:	11 96       	adiw	r26, 0x01	; 1
     43e:	2c 91       	ld	r18, X
     440:	11 97       	sbiw	r26, 0x01	; 1
     442:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     444:	20 81       	ld	r18, Z
     446:	20 62       	ori	r18, 0x20	; 32
     448:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     44a:	20 81       	ld	r18, Z
     44c:	2f 7d       	andi	r18, 0xDF	; 223
     44e:	20 83       	st	Z, r18
     450:	48 2f       	mov	r20, r24
     452:	59 2f       	mov	r21, r25
     454:	87 e2       	ldi	r24, 0x27	; 39
     456:	40 31       	cpi	r20, 0x10	; 16
     458:	58 07       	cpc	r21, r24
     45a:	10 f0       	brcs	.+4      	; 0x460 <display_dec+0x7c>
     45c:	4f e0       	ldi	r20, 0x0F	; 15
     45e:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     460:	ca 01       	movw	r24, r20
     462:	96 95       	lsr	r25
     464:	87 95       	ror	r24
     466:	96 95       	lsr	r25
     468:	87 95       	ror	r24
     46a:	9a 01       	movw	r18, r20
     46c:	36 95       	lsr	r19
     46e:	27 95       	ror	r18
     470:	28 0f       	add	r18, r24
     472:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     474:	c9 01       	movw	r24, r18
     476:	92 95       	swap	r25
     478:	82 95       	swap	r24
     47a:	8f 70       	andi	r24, 0x0F	; 15
     47c:	89 27       	eor	r24, r25
     47e:	9f 70       	andi	r25, 0x0F	; 15
     480:	89 27       	eor	r24, r25
     482:	82 0f       	add	r24, r18
     484:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     486:	29 2f       	mov	r18, r25
     488:	33 27       	eor	r19, r19
     48a:	82 0f       	add	r24, r18
     48c:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     48e:	96 95       	lsr	r25
     490:	87 95       	ror	r24
     492:	96 95       	lsr	r25
     494:	87 95       	ror	r24
     496:	96 95       	lsr	r25
     498:	87 95       	ror	r24
	r = number - q2 * 10;
     49a:	28 2f       	mov	r18, r24
     49c:	22 0f       	add	r18, r18
     49e:	32 2f       	mov	r19, r18
     4a0:	33 0f       	add	r19, r19
     4a2:	33 0f       	add	r19, r19
     4a4:	23 0f       	add	r18, r19
     4a6:	e4 2f       	mov	r30, r20
     4a8:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	ea 30       	cpi	r30, 0x0A	; 10
     4b0:	10 f4       	brcc	.+4      	; 0x4b6 <display_dec+0xd2>
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	68 0f       	add	r22, r24
     4b8:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     4ba:	9b 01       	movw	r18, r22
     4bc:	36 95       	lsr	r19
     4be:	27 95       	ror	r18
     4c0:	36 95       	lsr	r19
     4c2:	27 95       	ror	r18
     4c4:	ab 01       	movw	r20, r22
     4c6:	56 95       	lsr	r21
     4c8:	47 95       	ror	r20
     4ca:	24 0f       	add	r18, r20
     4cc:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     4ce:	c9 01       	movw	r24, r18
     4d0:	92 95       	swap	r25
     4d2:	82 95       	swap	r24
     4d4:	8f 70       	andi	r24, 0x0F	; 15
     4d6:	89 27       	eor	r24, r25
     4d8:	9f 70       	andi	r25, 0x0F	; 15
     4da:	89 27       	eor	r24, r25
     4dc:	82 0f       	add	r24, r18
     4de:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     4e0:	29 2f       	mov	r18, r25
     4e2:	33 27       	eor	r19, r19
     4e4:	82 0f       	add	r24, r18
     4e6:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     4e8:	96 95       	lsr	r25
     4ea:	87 95       	ror	r24
     4ec:	96 95       	lsr	r25
     4ee:	87 95       	ror	r24
     4f0:	96 95       	lsr	r25
     4f2:	87 95       	ror	r24
	r = qa - q3 * 10;
     4f4:	98 2f       	mov	r25, r24
     4f6:	99 0f       	add	r25, r25
     4f8:	29 2f       	mov	r18, r25
     4fa:	22 0f       	add	r18, r18
     4fc:	22 0f       	add	r18, r18
     4fe:	92 0f       	add	r25, r18
     500:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	6a 30       	cpi	r22, 0x0A	; 10
     506:	08 f4       	brcc	.+2      	; 0x50a <display_dec+0x126>
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	89 0f       	add	r24, r25
	tens_place = rem[r];
     50c:	41 ef       	ldi	r20, 0xF1	; 241
     50e:	51 e0       	ldi	r21, 0x01	; 1
     510:	da 01       	movw	r26, r20
     512:	a6 0f       	add	r26, r22
     514:	b1 1d       	adc	r27, r1
     516:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     518:	28 2f       	mov	r18, r24
     51a:	26 95       	lsr	r18
     51c:	26 95       	lsr	r18
     51e:	98 2f       	mov	r25, r24
     520:	96 95       	lsr	r25
     522:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     524:	29 2f       	mov	r18, r25
     526:	22 95       	swap	r18
     528:	2f 70       	andi	r18, 0x0F	; 15
     52a:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     52c:	96 95       	lsr	r25
     52e:	96 95       	lsr	r25
     530:	96 95       	lsr	r25
	r = qb - q4 * 10;
     532:	29 2f       	mov	r18, r25
     534:	22 0f       	add	r18, r18
     536:	62 2f       	mov	r22, r18
     538:	66 0f       	add	r22, r22
     53a:	66 0f       	add	r22, r22
     53c:	26 0f       	add	r18, r22
     53e:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     540:	da 01       	movw	r26, r20
     542:	a8 0f       	add	r26, r24
     544:	b1 1d       	adc	r27, r1
     546:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     548:	4e 0f       	add	r20, r30
     54a:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     54c:	fa 01       	movw	r30, r20
     54e:	40 81       	ld	r20, Z
     550:	40 93 b4 02 	sts	0x02B4, r20
	digit_index[1] = tens_place;
     554:	30 93 b5 02 	sts	0x02B5, r19
	digit_index[2] = hunds_place;
     558:	20 93 b6 02 	sts	0x02B6, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	8a 30       	cpi	r24, 0x0A	; 10
     560:	08 f4       	brcc	.+2      	; 0x564 <display_dec+0x180>
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     566:	90 93 b7 02 	sts	0x02B7, r25

	cathode_byte = dec[digit_index[place]];
     56a:	f8 01       	movw	r30, r16
     56c:	ec 54       	subi	r30, 0x4C	; 76
     56e:	fd 4f       	sbci	r31, 0xFD	; 253
     570:	80 81       	ld	r24, Z
     572:	fe 01       	movw	r30, r28
     574:	e8 0f       	add	r30, r24
     576:	f1 1d       	adc	r31, r1
     578:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     57a:	90 91 07 03 	lds	r25, 0x0307
     57e:	92 30       	cpi	r25, 0x02	; 2
     580:	11 f4       	brne	.+4      	; 0x586 <display_dec+0x1a2>
     582:	80 62       	ori	r24, 0x20	; 32
     584:	03 c0       	rjmp	.+6      	; 0x58c <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     586:	91 30       	cpi	r25, 0x01	; 1
     588:	09 f4       	brne	.+2      	; 0x58c <display_dec+0x1a8>
     58a:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     58c:	80 95       	com	r24
     58e:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     590:	ea ed       	ldi	r30, 0xDA	; 218
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	80 61       	ori	r24, 0x10	; 16
     598:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     59a:	80 81       	ld	r24, Z
     59c:	8f 7e       	andi	r24, 0xEF	; 239
     59e:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     5a0:	2e 96       	adiw	r28, 0x0e	; 14
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	08 95       	ret

000005b6 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     5b6:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     5b8:	66 23       	and	r22, r22
     5ba:	69 f4       	brne	.+26     	; 0x5d6 <update_display+0x20>

		
			
		display_dec(number, place);
     5bc:	c0 91 b8 02 	lds	r28, 0x02B8
     5c0:	6c 2f       	mov	r22, r28
     5c2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     5c6:	8c 2f       	mov	r24, r28
     5c8:	8f 5f       	subi	r24, 0xFF	; 255
     5ca:	80 93 b8 02 	sts	0x02B8, r24
     5ce:	c3 30       	cpi	r28, 0x03	; 3
     5d0:	11 f4       	brne	.+4      	; 0x5d6 <update_display+0x20>
		{
			place = 0;
     5d2:	10 92 b8 02 	sts	0x02B8, r1
		
		
	}
	
	
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     5da:	1f 92       	push	r1
     5dc:	0f 92       	push	r0
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	0f 92       	push	r0
     5e2:	11 24       	eor	r1, r1
     5e4:	8f 93       	push	r24
     5e6:	9f 93       	push	r25
     5e8:	ef 93       	push	r30
     5ea:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     5ec:	80 91 7c 03 	lds	r24, 0x037C
     5f0:	81 50       	subi	r24, 0x01	; 1
     5f2:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     5f4:	80 91 7d 03 	lds	r24, 0x037D
     5f8:	88 23       	and	r24, r24
     5fa:	a1 f4       	brne	.+40     	; 0x624 <__vector_10+0x4a>
		count_finished = FALSE;
     5fc:	10 92 7a 03 	sts	0x037A, r1
		no_overflow = TRUE;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     606:	80 93 7d 03 	sts	0x037D, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     60a:	e1 e8       	ldi	r30, 0x81	; 129
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	90 91 7b 03 	lds	r25, 0x037B
     614:	89 2b       	or	r24, r25
     616:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     618:	ef e6       	ldi	r30, 0x6F	; 111
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	81 60       	ori	r24, 0x01	; 1
     620:	80 83       	st	Z, r24
     622:	11 c0       	rjmp	.+34     	; 0x646 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     624:	e4 e8       	ldi	r30, 0x84	; 132
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	90 93 79 03 	sts	0x0379, r25
     630:	80 93 78 03 	sts	0x0378, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     634:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 7a 03 	sts	0x037A, r24
		period_counter = 0;
     63e:	10 92 7d 03 	sts	0x037D, r1
		TCNT1 = 0; //reset timer/counter 1
     642:	11 82       	std	Z+1, r1	; 0x01
     644:	10 82       	st	Z, r1
	}
	
	
	
	
}
     646:	ff 91       	pop	r31
     648:	ef 91       	pop	r30
     64a:	9f 91       	pop	r25
     64c:	8f 91       	pop	r24
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	0f 90       	pop	r0
     654:	1f 90       	pop	r1
     656:	18 95       	reti

00000658 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     658:	1f 92       	push	r1
     65a:	0f 92       	push	r0
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	0f 92       	push	r0
     660:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     662:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     670:	1f 92       	push	r1
     672:	0f 92       	push	r0
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	0f 92       	push	r0
     678:	11 24       	eor	r1, r1
     67a:	2f 93       	push	r18
     67c:	3f 93       	push	r19
     67e:	4f 93       	push	r20
     680:	5f 93       	push	r21
     682:	6f 93       	push	r22
     684:	7f 93       	push	r23
     686:	8f 93       	push	r24
     688:	9f 93       	push	r25
     68a:	af 93       	push	r26
     68c:	bf 93       	push	r27
     68e:	ef 93       	push	r30
     690:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     692:	80 91 ca 03 	lds	r24, 0x03CA
     696:	86 95       	lsr	r24
     698:	90 91 cb 03 	lds	r25, 0x03CB
     69c:	98 17       	cp	r25, r24
     69e:	31 f4       	brne	.+12     	; 0x6ac <__vector_7+0x3c>
				
		PORTB &= ~ (1<<ARP_SYNC_LED);
     6a0:	2f 98       	cbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     6a2:	80 91 88 03 	lds	r24, 0x0388
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	09 f4       	brne	.+2      	; 0x6ac <__vector_7+0x3c>
     6aa:	89 98       	cbi	0x11, 1	; 17
	}	
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     6ac:	80 91 cb 03 	lds	r24, 0x03CB
     6b0:	8f 5f       	subi	r24, 0xFF	; 255
     6b2:	80 93 cb 03 	sts	0x03CB, r24
     6b6:	90 91 ca 03 	lds	r25, 0x03CA
     6ba:	89 17       	cp	r24, r25
     6bc:	89 f4       	brne	.+34     	; 0x6e0 <__vector_7+0x70>
		
		system_clock.ppqn_counter = 0;
     6be:	10 92 cb 03 	sts	0x03CB, r1
		PORTB |= (1<<ARP_SYNC_LED);
     6c2:	2f 9a       	sbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) {
     6c4:	80 91 88 03 	lds	r24, 0x0388
     6c8:	81 30       	cpi	r24, 0x01	; 1
     6ca:	51 f4       	brne	.+20     	; 0x6e0 <__vector_7+0x70>
			
			//step arp note here based on range and note sequence from assigner	
			step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
     6cc:	0e 94 12 01 	call	0x224	; 0x224 <step_arp_note>
			
			if (gate_buffer) { //arp
     6d0:	80 91 b0 02 	lds	r24, 0x02B0
     6d4:	88 23       	and	r24, r24
     6d6:	11 f0       	breq	.+4      	; 0x6dc <__vector_7+0x6c>
				
				PORTF |= (1<<GATE);
     6d8:	89 9a       	sbi	0x11, 1	; 17
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <__vector_7+0x70>
				
			} else {
			
				arp.step_position = 0; //no notes being played, reset arp step position
     6dc:	10 92 86 03 	sts	0x0386, r1
				
			//if (gate_buffer != 0) PORTF |= (1<<GATE); //if arp is running and there are notes to be played, turn gate ON
		}			
	}
	
     6e0:	ff 91       	pop	r31
     6e2:	ef 91       	pop	r30
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	7f 91       	pop	r23
     6ee:	6f 91       	pop	r22
     6f0:	5f 91       	pop	r21
     6f2:	4f 91       	pop	r20
     6f4:	3f 91       	pop	r19
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     702:	68 3f       	cpi	r22, 0xF8	; 248
     704:	19 f0       	breq	.+6      	; 0x70c <real_time_event+0xa>
     706:	6a 3f       	cpi	r22, 0xFA	; 250
     708:	c1 f4       	brne	.+48     	; 0x73a <real_time_event+0x38>
     70a:	15 c0       	rjmp	.+42     	; 0x736 <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     70c:	80 91 d1 03 	lds	r24, 0x03D1
     710:	8f 5f       	subi	r24, 0xFF	; 255
     712:	80 93 d1 03 	sts	0x03D1, r24
     716:	90 91 d0 03 	lds	r25, 0x03D0
     71a:	89 17       	cp	r24, r25
     71c:	71 f4       	brne	.+28     	; 0x73a <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     71e:	2c 9a       	sbi	0x05, 4	; 5
     720:	86 e0       	ldi	r24, 0x06	; 6
     722:	8a 95       	dec	r24
     724:	f1 f7       	brne	.-4      	; 0x722 <real_time_event+0x20>
     726:	00 c0       	rjmp	.+0      	; 0x728 <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     728:	85 b1       	in	r24, 0x05	; 5
     72a:	80 58       	subi	r24, 0x80	; 128
     72c:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     72e:	10 92 d1 03 	sts	0x03D1, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     732:	2c 98       	cbi	0x05, 4	; 5
     734:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     736:	10 92 d1 03 	sts	0x03D1, r1
     73a:	08 95       	ret

0000073c <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     73c:	84 2f       	mov	r24, r20
	
	remove_note(note);
     73e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <remove_note>
	gate_buffer--;
     742:	80 91 b0 02 	lds	r24, 0x02B0
     746:	81 50       	subi	r24, 0x01	; 1
     748:	80 93 b0 02 	sts	0x02B0, r24
	if (arp.clock_source == OFF) {	//if arp is off handle gate
     74c:	90 91 88 03 	lds	r25, 0x0388
     750:	92 30       	cpi	r25, 0x02	; 2
     752:	21 f4       	brne	.+8      	; 0x75c <note_off_event+0x20>
		//gate_buffer--;
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     754:	88 23       	and	r24, r24
     756:	21 f4       	brne	.+8      	; 0x760 <note_off_event+0x24>
     758:	89 98       	cbi	0x11, 1	; 17
     75a:	08 95       	ret
	} else {
		
		update_arp_sequence();
     75c:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     760:	08 95       	ret

00000762 <note_on_event>:





void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     762:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     764:	90 91 ff 02 	lds	r25, 0x02FF
     768:	90 ff       	sbrs	r25, 0
     76a:	06 c0       	rjmp	.+12     	; 0x778 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     76c:	2c 9a       	sbi	0x05, 4	; 5
     76e:	96 e0       	ldi	r25, 0x06	; 6
     770:	9a 95       	dec	r25
     772:	f1 f7       	brne	.-4      	; 0x770 <note_on_event+0xe>
     774:	00 c0       	rjmp	.+0      	; 0x776 <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     776:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     778:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     77c:	22 23       	and	r18, r18
     77e:	59 f4       	brne	.+22     	; 0x796 <note_on_event+0x34>
		remove_note(note);
     780:	0e 94 52 01 	call	0x2a4	; 0x2a4 <remove_note>
		gate_buffer--;
     784:	80 91 b0 02 	lds	r24, 0x02B0
     788:	81 50       	subi	r24, 0x01	; 1
     78a:	80 93 b0 02 	sts	0x02B0, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     78e:	88 23       	and	r24, r24
     790:	91 f4       	brne	.+36     	; 0x7b6 <note_on_event+0x54>
     792:	89 98       	cbi	0x11, 1	; 17
     794:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);
     796:	62 2f       	mov	r22, r18
     798:	0e 94 3a 01 	call	0x274	; 0x274 <new_note>
		
		gate_buffer++;
     79c:	80 91 b0 02 	lds	r24, 0x02B0
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	80 93 b0 02 	sts	0x02B0, r24
		if (arp.clock_source == OFF) { //if arp is off, handle gate
     7a6:	80 91 88 03 	lds	r24, 0x0388
     7aa:	82 30       	cpi	r24, 0x02	; 2
     7ac:	11 f4       	brne	.+4      	; 0x7b2 <note_on_event+0x50>
			//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
			//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
			//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
			//could implement this with timers. MIDI Implant is 0.5 ms. Could maybe use Timer1 here to generate 0.3-0.5 ms gate retrigger
			
			PORTF |= (1<<GATE); //if arp is OFF then turn on gate. Otherwise arpeggiator handles GATE
     7ae:	89 9a       	sbi	0x11, 1	; 17
     7b0:	08 95       	ret
		} else {
			
			update_arp_sequence();
     7b2:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     7b6:	08 95       	ret

000007b8 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     7b8:	87 e2       	ldi	r24, 0x27	; 39
     7ba:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     7be:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     7c2:	88 e9       	ldi	r24, 0x98	; 152
     7c4:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     7c8:	08 95       	ret

000007ca <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     7ca:	1f 92       	push	r1
     7cc:	0f 92       	push	r0
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	0f 92       	push	r0
     7d2:	11 24       	eor	r1, r1
     7d4:	2f 93       	push	r18
     7d6:	3f 93       	push	r19
     7d8:	4f 93       	push	r20
     7da:	5f 93       	push	r21
     7dc:	6f 93       	push	r22
     7de:	7f 93       	push	r23
     7e0:	8f 93       	push	r24
     7e2:	9f 93       	push	r25
     7e4:	af 93       	push	r26
     7e6:	bf 93       	push	r27
     7e8:	ef 93       	push	r30
     7ea:	ff 93       	push	r31
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	0f 92       	push	r0
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     7f6:	80 91 c6 00 	lds	r24, 0x00C6
     7fa:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     7fc:	86 ed       	ldi	r24, 0xD6	; 214
     7fe:	93 e0       	ldi	r25, 0x03	; 3
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	ae 01       	movw	r20, r28
     804:	4f 5f       	subi	r20, 0xFF	; 255
     806:	5f 4f       	sbci	r21, 0xFF	; 255
     808:	0e 94 67 19 	call	0x32ce	; 0x32ce <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     80c:	0f 90       	pop	r0
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     834:	c0 e8       	ldi	r28, 0x80	; 128
     836:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     838:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     83a:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     83c:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     83e:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     840:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     842:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     844:	0e 94 60 07 	call	0xec0	; 0xec0 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     848:	a9 ed       	ldi	r26, 0xD9	; 217
     84a:	b0 e0       	ldi	r27, 0x00	; 0
     84c:	8c 91       	ld	r24, X
     84e:	80 6c       	ori	r24, 0xC0	; 192
     850:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     852:	ea ed       	ldi	r30, 0xDA	; 218
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	80 6c       	ori	r24, 0xC0	; 192
     85a:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     85c:	81 b1       	in	r24, 0x01	; 1
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     862:	92 b1       	in	r25, 0x02	; 2
     864:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     866:	8c 91       	ld	r24, X
     868:	80 63       	ori	r24, 0x30	; 48
     86a:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     86c:	80 81       	ld	r24, Z
     86e:	8f 7c       	andi	r24, 0xCF	; 207
     870:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     872:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     874:	ec ed       	ldi	r30, 0xDC	; 220
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	80 62       	ori	r24, 0x20	; 32
     87c:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     87e:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     880:	ed ed       	ldi	r30, 0xDD	; 221
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	80 62       	ori	r24, 0x20	; 32
     888:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     88a:	80 81       	ld	r24, Z
     88c:	8f 7d       	andi	r24, 0xDF	; 223
     88e:	80 83       	st	Z, r24
	DATA_BUS = 0;
     890:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     892:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     896:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     89a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     89e:	c6 ed       	ldi	r28, 0xD6	; 214
     8a0:	d3 e0       	ldi	r29, 0x03	; 3
     8a2:	ce 01       	movw	r24, r28
     8a4:	0e 94 36 19 	call	0x326c	; 0x326c <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     8a8:	ce 01       	movw	r24, r28
     8aa:	61 eb       	ldi	r22, 0xB1	; 177
     8ac:	73 e0       	ldi	r23, 0x03	; 3
     8ae:	0e 94 fe 18 	call	0x31fc	; 0x31fc <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     8b2:	ce 01       	movw	r24, r28
     8b4:	6e e9       	ldi	r22, 0x9E	; 158
     8b6:	73 e0       	ldi	r23, 0x03	; 3
     8b8:	0e 94 02 19 	call	0x3204	; 0x3204 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     8bc:	ce 01       	movw	r24, r28
     8be:	61 e8       	ldi	r22, 0x81	; 129
     8c0:	73 e0       	ldi	r23, 0x03	; 3
     8c2:	0e 94 22 19 	call	0x3244	; 0x3244 <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     8c6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     8ca:	0e 94 85 07 	call	0xf0a	; 0xf0a <update_spi>
	
	
	current_patch.number = 1;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     8d4:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     8d6:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 fe 09 	call	0x13fc	; 0x13fc <load_patch>
	
	setup_system_clock();
     8e0:	0e 94 8f 01 	call	0x31e	; 0x31e <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     8e4:	88 e1       	ldi	r24, 0x18	; 24
     8e6:	80 93 ca 03 	sts	0x03CA, r24
	arp.step_position = 0; //initialize step position
     8ea:	10 92 86 03 	sts	0x0386, r1

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     8ee:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     8f0:	0f 2e       	mov	r0, r31
     8f2:	f0 e8       	ldi	r31, 0x80	; 128
     8f4:	ef 2e       	mov	r14, r31
     8f6:	f3 e0       	ldi	r31, 0x03	; 3
     8f8:	ff 2e       	mov	r15, r31
     8fa:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     8fc:	0f 2e       	mov	r0, r31
     8fe:	f7 e0       	ldi	r31, 0x07	; 7
     900:	cf 2e       	mov	r12, r31
     902:	f3 e0       	ldi	r31, 0x03	; 3
     904:	df 2e       	mov	r13, r31
     906:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     908:	bb 24       	eor	r11, r11
     90a:	68 94       	set
     90c:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     90e:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     910:	c8 01       	movw	r24, r16
     912:	0e 94 91 1b 	call	0x3722	; 0x3722 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     916:	80 91 fd 01 	lds	r24, 0x01FD
     91a:	90 91 fe 01 	lds	r25, 0x01FE
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	0e 94 db 02 	call	0x5b6	; 0x5b6 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     924:	0e 94 c1 04 	call	0x982	; 0x982 <scan_pots>
		update_control_voltages();
     928:	0e 94 4e 05 	call	0xa9c	; 0xa9c <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     92c:	80 91 b9 02 	lds	r24, 0x02B9
     930:	98 2f       	mov	r25, r24
     932:	9f 5f       	subi	r25, 0xFF	; 255
     934:	90 93 b9 02 	sts	0x02B9, r25
     938:	85 30       	cpi	r24, 0x05	; 5
     93a:	51 f7       	brne	.-44     	; 0x910 <main+0xdc>
		{
			switch_timer = 0;
     93c:	10 92 b9 02 	sts	0x02B9, r1
			switch_press = 0; //reset global switch press flag
     940:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     944:	f7 01       	movw	r30, r14
     946:	c0 81       	ld	r28, Z
     948:	0e 94 18 16 	call	0x2c30	; 0x2c30 <read_switch_port>
     94c:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     94e:	f6 01       	movw	r30, r12
     950:	90 81       	ld	r25, Z
     952:	91 30       	cpi	r25, 0x01	; 1
     954:	11 f4       	brne	.+4      	; 0x95a <main+0x126>
     956:	cd 2f       	mov	r28, r29
     958:	01 c0       	rjmp	.+2      	; 0x95c <main+0x128>
     95a:	c0 e0       	ldi	r28, 0x00	; 0
     95c:	c8 2b       	or	r28, r24
     95e:	f7 01       	movw	r30, r14
     960:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     962:	0e 94 85 07 	call	0xf0a	; 0xf0a <update_spi>
			if (switch_press) { 
     966:	80 91 c1 02 	lds	r24, 0x02C1
     96a:	88 23       	and	r24, r24
     96c:	39 f0       	breq	.+14     	; 0x97c <main+0x148>
				update_patch();
     96e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     972:	f6 01       	movw	r30, r12
     974:	80 81       	ld	r24, Z
     976:	88 23       	and	r24, r24
     978:	09 f4       	brne	.+2      	; 0x97c <main+0x148>
     97a:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     97c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <update_patch_programmer>
     980:	c7 cf       	rjmp	.-114    	; 0x910 <main+0xdc>

00000982 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     982:	bf 92       	push	r11
     984:	cf 92       	push	r12
     986:	df 92       	push	r13
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	c0 e0       	ldi	r28, 0x00	; 0
     996:	d1 e0       	ldi	r29, 0x01	; 1
     998:	02 ec       	ldi	r16, 0xC2	; 194
     99a:	12 e0       	ldi	r17, 0x02	; 2
     99c:	0f 2e       	mov	r0, r31
     99e:	fc e3       	ldi	r31, 0x3C	; 60
     9a0:	cf 2e       	mov	r12, r31
     9a2:	dd 24       	eor	r13, r13
     9a4:	f0 2d       	mov	r31, r0
     9a6:	cc 0e       	add	r12, r28
     9a8:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     9aa:	0f 2e       	mov	r0, r31
     9ac:	f7 e0       	ldi	r31, 0x07	; 7
     9ae:	ef 2e       	mov	r14, r31
     9b0:	f3 e0       	ldi	r31, 0x03	; 3
     9b2:	ff 2e       	mov	r15, r31
     9b4:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     9b6:	bb 24       	eor	r11, r11
     9b8:	68 94       	set
     9ba:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     9bc:	88 81       	ld	r24, Y
     9be:	99 81       	ldd	r25, Y+1	; 0x01
     9c0:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     9c4:	90 93 bc 02 	sts	0x02BC, r25
     9c8:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     9cc:	e8 81       	ld	r30, Y
     9ce:	f9 81       	ldd	r31, Y+1	; 0x01
     9d0:	40 81       	ld	r20, Z
     9d2:	21 81       	ldd	r18, Z+1	; 0x01
     9d4:	52 2f       	mov	r21, r18
     9d6:	53 70       	andi	r21, 0x03	; 3
     9d8:	84 1b       	sub	r24, r20
     9da:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     9dc:	95 95       	asr	r25
     9de:	87 95       	ror	r24
     9e0:	95 95       	asr	r25
     9e2:	87 95       	ror	r24
     9e4:	84 0f       	add	r24, r20
     9e6:	95 1f       	adc	r25, r21
     9e8:	80 83       	st	Z, r24
     9ea:	89 2f       	mov	r24, r25
     9ec:	83 70       	andi	r24, 0x03	; 3
     9ee:	2c 7f       	andi	r18, 0xFC	; 252
     9f0:	28 2b       	or	r18, r24
     9f2:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     9f4:	e9 91       	ld	r30, Y+
     9f6:	f9 91       	ld	r31, Y+
     9f8:	92 81       	ldd	r25, Z+2	; 0x02
     9fa:	20 81       	ld	r18, Z
     9fc:	81 81       	ldd	r24, Z+1	; 0x01
     9fe:	38 2f       	mov	r19, r24
     a00:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     a02:	d7 01       	movw	r26, r14
     a04:	8c 91       	ld	r24, X
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	19 f0       	breq	.+6      	; 0xa10 <scan_pots+0x8e>
     a0a:	83 81       	ldd	r24, Z+3	; 0x03
     a0c:	88 23       	and	r24, r24
     a0e:	24 f0       	brlt	.+8      	; 0xa18 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     a10:	f8 01       	movw	r30, r16
     a12:	31 83       	std	Z+1, r19	; 0x01
     a14:	20 83       	st	Z, r18
     a16:	14 c0       	rjmp	.+40     	; 0xa40 <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     a18:	49 2f       	mov	r20, r25
     a1a:	43 50       	subi	r20, 0x03	; 3
     a1c:	c9 01       	movw	r24, r18
     a1e:	95 95       	asr	r25
     a20:	87 95       	ror	r24
     a22:	95 95       	asr	r25
     a24:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     a26:	94 2f       	mov	r25, r20
     a28:	98 1b       	sub	r25, r24
     a2a:	9a 3f       	cpi	r25, 0xFA	; 250
     a2c:	48 f4       	brcc	.+18     	; 0xa40 <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     a2e:	d8 01       	movw	r26, r16
     a30:	11 96       	adiw	r26, 0x01	; 1
     a32:	3c 93       	st	X, r19
     a34:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     a36:	83 81       	ldd	r24, Z+3	; 0x03
     a38:	8f 77       	andi	r24, 0x7F	; 127
     a3a:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     a3c:	f7 01       	movw	r30, r14
     a3e:	b0 82       	st	Z, r11
     a40:	0e 5f       	subi	r16, 0xFE	; 254
     a42:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     a44:	cc 15       	cp	r28, r12
     a46:	dd 05       	cpc	r29, r13
     a48:	09 f0       	breq	.+2      	; 0xa4c <scan_pots+0xca>
     a4a:	b8 cf       	rjmp	.-144    	; 0x9bc <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     a4c:	8c e7       	ldi	r24, 0x7C	; 124
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     a54:	90 93 bc 02 	sts	0x02BC, r25
     a58:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     a5c:	20 91 7c 01 	lds	r18, 0x017C
     a60:	40 91 7d 01 	lds	r20, 0x017D
     a64:	34 2f       	mov	r19, r20
     a66:	33 70       	andi	r19, 0x03	; 3
     a68:	82 1b       	sub	r24, r18
     a6a:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     a6c:	95 95       	asr	r25
     a6e:	87 95       	ror	r24
     a70:	95 95       	asr	r25
     a72:	87 95       	ror	r24
     a74:	28 0f       	add	r18, r24
     a76:	39 1f       	adc	r19, r25
     a78:	20 93 7c 01 	sts	0x017C, r18
     a7c:	83 2f       	mov	r24, r19
     a7e:	83 70       	andi	r24, 0x03	; 3
     a80:	4c 7f       	andi	r20, 0xFC	; 252
     a82:	48 2b       	or	r20, r24
     a84:	40 93 7d 01 	sts	0x017D, r20
	
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	bf 90       	pop	r11
     a9a:	08 95       	ret

00000a9c <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     aa0:	60 91 c2 02 	lds	r22, 0x02C2
     aa4:	70 91 c3 02 	lds	r23, 0x02C3
     aa8:	62 95       	swap	r22
     aaa:	72 95       	swap	r23
     aac:	70 7f       	andi	r23, 0xF0	; 240
     aae:	76 27       	eor	r23, r22
     ab0:	60 7f       	andi	r22, 0xF0	; 240
     ab2:	76 27       	eor	r23, r22
     ab4:	84 ee       	ldi	r24, 0xE4	; 228
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     abc:	60 91 c4 02 	lds	r22, 0x02C4
     ac0:	70 91 c5 02 	lds	r23, 0x02C5
     ac4:	62 95       	swap	r22
     ac6:	72 95       	swap	r23
     ac8:	70 7f       	andi	r23, 0xF0	; 240
     aca:	76 27       	eor	r23, r22
     acc:	60 7f       	andi	r22, 0xF0	; 240
     ace:	76 27       	eor	r23, r22
     ad0:	83 ee       	ldi	r24, 0xE3	; 227
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     ad8:	60 91 c6 02 	lds	r22, 0x02C6
     adc:	70 91 c7 02 	lds	r23, 0x02C7
     ae0:	66 0f       	add	r22, r22
     ae2:	77 1f       	adc	r23, r23
     ae4:	66 0f       	add	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	66 0f       	add	r22, r22
     aea:	77 1f       	adc	r23, r23
     aec:	82 ee       	ldi	r24, 0xE2	; 226
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     af4:	60 91 c8 02 	lds	r22, 0x02C8
     af8:	70 91 c9 02 	lds	r23, 0x02C9
     afc:	62 95       	swap	r22
     afe:	72 95       	swap	r23
     b00:	70 7f       	andi	r23, 0xF0	; 240
     b02:	76 27       	eor	r23, r22
     b04:	60 7f       	andi	r22, 0xF0	; 240
     b06:	76 27       	eor	r23, r22
     b08:	83 eb       	ldi	r24, 0xB3	; 179
     b0a:	92 e0       	ldi	r25, 0x02	; 2
     b0c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     b10:	60 91 ca 02 	lds	r22, 0x02CA
     b14:	70 91 cb 02 	lds	r23, 0x02CB
     b18:	66 0f       	add	r22, r22
     b1a:	77 1f       	adc	r23, r23
     b1c:	66 0f       	add	r22, r22
     b1e:	77 1f       	adc	r23, r23
     b20:	66 0f       	add	r22, r22
     b22:	77 1f       	adc	r23, r23
     b24:	81 ee       	ldi	r24, 0xE1	; 225
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     b2c:	60 91 cc 02 	lds	r22, 0x02CC
     b30:	70 91 cd 02 	lds	r23, 0x02CD
     b34:	62 95       	swap	r22
     b36:	72 95       	swap	r23
     b38:	70 7f       	andi	r23, 0xF0	; 240
     b3a:	76 27       	eor	r23, r22
     b3c:	60 7f       	andi	r22, 0xF0	; 240
     b3e:	76 27       	eor	r23, r22
     b40:	80 ee       	ldi	r24, 0xE0	; 224
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     b48:	60 91 ce 02 	lds	r22, 0x02CE
     b4c:	70 91 cf 02 	lds	r23, 0x02CF
     b50:	62 95       	swap	r22
     b52:	72 95       	swap	r23
     b54:	70 7f       	andi	r23, 0xF0	; 240
     b56:	76 27       	eor	r23, r22
     b58:	60 7f       	andi	r22, 0xF0	; 240
     b5a:	76 27       	eor	r23, r22
     b5c:	8f ed       	ldi	r24, 0xDF	; 223
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     b64:	60 91 d0 02 	lds	r22, 0x02D0
     b68:	70 91 d1 02 	lds	r23, 0x02D1
     b6c:	62 95       	swap	r22
     b6e:	72 95       	swap	r23
     b70:	70 7f       	andi	r23, 0xF0	; 240
     b72:	76 27       	eor	r23, r22
     b74:	60 7f       	andi	r22, 0xF0	; 240
     b76:	76 27       	eor	r23, r22
     b78:	8e ed       	ldi	r24, 0xDE	; 222
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     b80:	80 91 d4 02 	lds	r24, 0x02D4
     b84:	90 91 d5 02 	lds	r25, 0x02D5
     b88:	c0 e0       	ldi	r28, 0x00	; 0
     b8a:	d2 e0       	ldi	r29, 0x02	; 2
     b8c:	c8 1b       	sub	r28, r24
     b8e:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     b90:	60 91 73 03 	lds	r22, 0x0373
     b94:	70 91 74 03 	lds	r23, 0x0374
     b98:	60 50       	subi	r22, 0x00	; 0
     b9a:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     b9c:	80 91 d2 02 	lds	r24, 0x02D2
     ba0:	90 91 d3 02 	lds	r25, 0x02D3
     ba4:	68 1b       	sub	r22, r24
     ba6:	79 0b       	sbc	r23, r25
     ba8:	6c 0f       	add	r22, r28
     baa:	7d 1f       	adc	r23, r29
     bac:	8d ed       	ldi	r24, 0xDD	; 221
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     bb4:	60 91 75 03 	lds	r22, 0x0375
     bb8:	70 91 76 03 	lds	r23, 0x0376
     bbc:	6c 0f       	add	r22, r28
     bbe:	7d 1f       	adc	r23, r29
     bc0:	8c ed       	ldi	r24, 0xDC	; 220
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     bc8:	60 91 d6 02 	lds	r22, 0x02D6
     bcc:	70 91 d7 02 	lds	r23, 0x02D7
     bd0:	62 95       	swap	r22
     bd2:	72 95       	swap	r23
     bd4:	70 7f       	andi	r23, 0xF0	; 240
     bd6:	76 27       	eor	r23, r22
     bd8:	60 7f       	andi	r22, 0xF0	; 240
     bda:	76 27       	eor	r23, r22
     bdc:	8b ed       	ldi	r24, 0xDB	; 219
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     be4:	60 91 da 02 	lds	r22, 0x02DA
     be8:	70 91 db 02 	lds	r23, 0x02DB
     bec:	62 95       	swap	r22
     bee:	72 95       	swap	r23
     bf0:	70 7f       	andi	r23, 0xF0	; 240
     bf2:	76 27       	eor	r23, r22
     bf4:	60 7f       	andi	r22, 0xF0	; 240
     bf6:	76 27       	eor	r23, r22
     bf8:	8a ed       	ldi	r24, 0xDA	; 218
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     c00:	60 91 dc 02 	lds	r22, 0x02DC
     c04:	70 91 dd 02 	lds	r23, 0x02DD
     c08:	62 95       	swap	r22
     c0a:	72 95       	swap	r23
     c0c:	70 7f       	andi	r23, 0xF0	; 240
     c0e:	76 27       	eor	r23, r22
     c10:	60 7f       	andi	r22, 0xF0	; 240
     c12:	76 27       	eor	r23, r22
     c14:	89 ed       	ldi	r24, 0xD9	; 217
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     c1c:	60 91 7c 01 	lds	r22, 0x017C
     c20:	80 91 7d 01 	lds	r24, 0x017D
     c24:	78 2f       	mov	r23, r24
     c26:	73 70       	andi	r23, 0x03	; 3
     c28:	62 95       	swap	r22
     c2a:	72 95       	swap	r23
     c2c:	70 7f       	andi	r23, 0xF0	; 240
     c2e:	76 27       	eor	r23, r22
     c30:	60 7f       	andi	r22, 0xF0	; 240
     c32:	76 27       	eor	r23, r22
     c34:	88 ed       	ldi	r24, 0xD8	; 216
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     c3c:	60 91 de 02 	lds	r22, 0x02DE
     c40:	70 91 df 02 	lds	r23, 0x02DF
     c44:	62 95       	swap	r22
     c46:	72 95       	swap	r23
     c48:	70 7f       	andi	r23, 0xF0	; 240
     c4a:	76 27       	eor	r23, r22
     c4c:	60 7f       	andi	r22, 0xF0	; 240
     c4e:	76 27       	eor	r23, r22
     c50:	87 ed       	ldi	r24, 0xD7	; 215
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     c58:	60 91 e0 02 	lds	r22, 0x02E0
     c5c:	70 91 e1 02 	lds	r23, 0x02E1
     c60:	62 95       	swap	r22
     c62:	72 95       	swap	r23
     c64:	70 7f       	andi	r23, 0xF0	; 240
     c66:	76 27       	eor	r23, r22
     c68:	60 7f       	andi	r22, 0xF0	; 240
     c6a:	76 27       	eor	r23, r22
     c6c:	86 ed       	ldi	r24, 0xD6	; 214
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     c74:	60 91 e2 02 	lds	r22, 0x02E2
     c78:	70 91 e3 02 	lds	r23, 0x02E3
     c7c:	62 95       	swap	r22
     c7e:	72 95       	swap	r23
     c80:	70 7f       	andi	r23, 0xF0	; 240
     c82:	76 27       	eor	r23, r22
     c84:	60 7f       	andi	r22, 0xF0	; 240
     c86:	76 27       	eor	r23, r22
     c88:	85 ed       	ldi	r24, 0xD5	; 213
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     c90:	0e 94 30 01 	call	0x260	; 0x260 <get_current_note>
     c94:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     c96:	88 30       	cpi	r24, 0x08	; 8
     c98:	08 f4       	brcc	.+2      	; 0xc9c <update_control_voltages+0x200>
     c9a:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = current_patch.number + 100*(arp.sequence[arp.step_position].note); //100*note;
	//value_to_display = arp.sequence[arp.step_position].note;
	value_to_display = arp.step_position;
     c9c:	80 91 86 03 	lds	r24, 0x0386
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	90 93 fe 01 	sts	0x01FE, r25
     ca6:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     caa:	8c 2f       	mov	r24, r28
     cac:	88 50       	subi	r24, 0x08	; 8
     cae:	6f e0       	ldi	r22, 0x0F	; 15
     cb0:	73 e0       	ldi	r23, 0x03	; 3
     cb2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     cb6:	bc 01       	movw	r22, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	20 91 e6 02 	lds	r18, 0x02E6
     cc0:	30 91 e7 02 	lds	r19, 0x02E7
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__mulsi3>
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	07 2e       	mov	r0, r23
     cd2:	7a e0       	ldi	r23, 0x0A	; 10
     cd4:	b6 95       	lsr	r27
     cd6:	a7 95       	ror	r26
     cd8:	97 95       	ror	r25
     cda:	87 95       	ror	r24
     cdc:	7a 95       	dec	r23
     cde:	d1 f7       	brne	.-12     	; 0xcd4 <update_control_voltages+0x238>
     ce0:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     ce2:	60 91 e4 02 	lds	r22, 0x02E4
     ce6:	70 91 e5 02 	lds	r23, 0x02E5
     cea:	62 95       	swap	r22
     cec:	72 95       	swap	r23
     cee:	70 7f       	andi	r23, 0xF0	; 240
     cf0:	76 27       	eor	r23, r22
     cf2:	60 7f       	andi	r22, 0xF0	; 240
     cf4:	76 27       	eor	r23, r22
     cf6:	86 0f       	add	r24, r22
     cf8:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     cfa:	bc 01       	movw	r22, r24
     cfc:	80 e4       	ldi	r24, 0x40	; 64
     cfe:	60 30       	cpi	r22, 0x00	; 0
     d00:	78 07       	cpc	r23, r24
     d02:	10 f0       	brcs	.+4      	; 0xd08 <update_control_voltages+0x26c>
     d04:	6f ef       	ldi	r22, 0xFF	; 255
     d06:	7f e3       	ldi	r23, 0x3F	; 63
     d08:	84 ed       	ldi	r24, 0xD4	; 212
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     d10:	60 91 e8 02 	lds	r22, 0x02E8
     d14:	70 91 e9 02 	lds	r23, 0x02E9
     d18:	62 95       	swap	r22
     d1a:	72 95       	swap	r23
     d1c:	70 7f       	andi	r23, 0xF0	; 240
     d1e:	76 27       	eor	r23, r22
     d20:	60 7f       	andi	r22, 0xF0	; 240
     d22:	76 27       	eor	r23, r22
     d24:	82 ed       	ldi	r24, 0xD2	; 210
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     d2c:	60 91 ea 02 	lds	r22, 0x02EA
     d30:	70 91 eb 02 	lds	r23, 0x02EB
     d34:	62 95       	swap	r22
     d36:	72 95       	swap	r23
     d38:	70 7f       	andi	r23, 0xF0	; 240
     d3a:	76 27       	eor	r23, r22
     d3c:	60 7f       	andi	r22, 0xF0	; 240
     d3e:	76 27       	eor	r23, r22
     d40:	81 ed       	ldi	r24, 0xD1	; 209
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     d48:	60 91 ec 02 	lds	r22, 0x02EC
     d4c:	70 91 ed 02 	lds	r23, 0x02ED
     d50:	62 95       	swap	r22
     d52:	72 95       	swap	r23
     d54:	70 7f       	andi	r23, 0xF0	; 240
     d56:	76 27       	eor	r23, r22
     d58:	60 7f       	andi	r22, 0xF0	; 240
     d5a:	76 27       	eor	r23, r22
     d5c:	80 ed       	ldi	r24, 0xD0	; 208
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     d64:	60 91 ee 02 	lds	r22, 0x02EE
     d68:	70 91 ef 02 	lds	r23, 0x02EF
     d6c:	62 95       	swap	r22
     d6e:	72 95       	swap	r23
     d70:	70 7f       	andi	r23, 0xF0	; 240
     d72:	76 27       	eor	r23, r22
     d74:	60 7f       	andi	r22, 0xF0	; 240
     d76:	76 27       	eor	r23, r22
     d78:	8f ec       	ldi	r24, 0xCF	; 207
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     d80:	60 91 f0 02 	lds	r22, 0x02F0
     d84:	70 91 f1 02 	lds	r23, 0x02F1
     d88:	62 95       	swap	r22
     d8a:	72 95       	swap	r23
     d8c:	70 7f       	andi	r23, 0xF0	; 240
     d8e:	76 27       	eor	r23, r22
     d90:	60 7f       	andi	r22, 0xF0	; 240
     d92:	76 27       	eor	r23, r22
     d94:	8e ec       	ldi	r24, 0xCE	; 206
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     d9c:	60 91 f2 02 	lds	r22, 0x02F2
     da0:	70 91 f3 02 	lds	r23, 0x02F3
     da4:	62 95       	swap	r22
     da6:	72 95       	swap	r23
     da8:	70 7f       	andi	r23, 0xF0	; 240
     daa:	76 27       	eor	r23, r22
     dac:	60 7f       	andi	r22, 0xF0	; 240
     dae:	76 27       	eor	r23, r22
     db0:	8d ec       	ldi	r24, 0xCD	; 205
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     db8:	60 91 f4 02 	lds	r22, 0x02F4
     dbc:	70 91 f5 02 	lds	r23, 0x02F5
     dc0:	62 95       	swap	r22
     dc2:	72 95       	swap	r23
     dc4:	70 7f       	andi	r23, 0xF0	; 240
     dc6:	76 27       	eor	r23, r22
     dc8:	60 7f       	andi	r22, 0xF0	; 240
     dca:	76 27       	eor	r23, r22
     dcc:	8c ec       	ldi	r24, 0xCC	; 204
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     dd4:	60 91 f8 02 	lds	r22, 0x02F8
     dd8:	70 91 f9 02 	lds	r23, 0x02F9
     ddc:	62 95       	swap	r22
     dde:	72 95       	swap	r23
     de0:	70 7f       	andi	r23, 0xF0	; 240
     de2:	76 27       	eor	r23, r22
     de4:	60 7f       	andi	r22, 0xF0	; 240
     de6:	76 27       	eor	r23, r22
     de8:	8a ec       	ldi	r24, 0xCA	; 202
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     df0:	60 91 f6 02 	lds	r22, 0x02F6
     df4:	70 91 f7 02 	lds	r23, 0x02F7
     df8:	62 95       	swap	r22
     dfa:	72 95       	swap	r23
     dfc:	70 7f       	andi	r23, 0xF0	; 240
     dfe:	76 27       	eor	r23, r22
     e00:	60 7f       	andi	r22, 0xF0	; 240
     e02:	76 27       	eor	r23, r22
     e04:	8b ec       	ldi	r24, 0xCB	; 203
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     e0c:	60 91 fc 02 	lds	r22, 0x02FC
     e10:	70 91 fd 02 	lds	r23, 0x02FD
     e14:	62 95       	swap	r22
     e16:	72 95       	swap	r23
     e18:	70 7f       	andi	r23, 0xF0	; 240
     e1a:	76 27       	eor	r23, r22
     e1c:	60 7f       	andi	r22, 0xF0	; 240
     e1e:	76 27       	eor	r23, r22
     e20:	88 ec       	ldi	r24, 0xC8	; 200
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     e28:	60 91 fa 02 	lds	r22, 0x02FA
     e2c:	70 91 fb 02 	lds	r23, 0x02FB
     e30:	62 95       	swap	r22
     e32:	72 95       	swap	r23
     e34:	70 7f       	andi	r23, 0xF0	; 240
     e36:	76 27       	eor	r23, r22
     e38:	60 7f       	andi	r22, 0xF0	; 240
     e3a:	76 27       	eor	r23, r22
     e3c:	89 ec       	ldi	r24, 0xC9	; 201
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     e44:	8c 2f       	mov	r24, r28
     e46:	6f e0       	ldi	r22, 0x0F	; 15
     e48:	0e 94 de 0c 	call	0x19bc	; 0x19bc <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     e4c:	61 e5       	ldi	r22, 0x51	; 81
     e4e:	73 e0       	ldi	r23, 0x03	; 3
     e50:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <interpolate_pitch_cv>
     e54:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     e56:	86 ee       	ldi	r24, 0xE6	; 230
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     e5e:	8c 2f       	mov	r24, r28
     e60:	60 ef       	ldi	r22, 0xF0	; 240
     e62:	0e 94 de 0c 	call	0x19bc	; 0x19bc <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     e66:	6f e2       	ldi	r22, 0x2F	; 47
     e68:	73 e0       	ldi	r23, 0x03	; 3
     e6a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <interpolate_pitch_cv>
     e6e:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     e70:	85 ee       	ldi	r24, 0xE5	; 229
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     e78:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     e7a:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     e7c:	20 91 88 01 	lds	r18, 0x0188
     e80:	80 91 89 01 	lds	r24, 0x0189
     e84:	38 2f       	mov	r19, r24
     e86:	33 70       	andi	r19, 0x03	; 3
     e88:	83 ef       	ldi	r24, 0xF3	; 243
     e8a:	94 e0       	ldi	r25, 0x04	; 4
     e8c:	82 1b       	sub	r24, r18
     e8e:	93 0b       	sbc	r25, r19
     e90:	90 93 cd 03 	sts	0x03CD, r25
     e94:	80 93 cc 03 	sts	0x03CC, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     e98:	20 91 ce 03 	lds	r18, 0x03CE
     e9c:	30 91 cf 03 	lds	r19, 0x03CF
     ea0:	82 17       	cp	r24, r18
     ea2:	93 07       	cpc	r25, r19
     ea4:	11 f0       	breq	.+4      	; 0xeaa <update_control_voltages+0x40e>
		
		update_clock_rate(system_clock.rate);
     ea6:	0e 94 96 01 	call	0x32c	; 0x32c <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     eaa:	80 91 cc 03 	lds	r24, 0x03CC
     eae:	90 91 cd 03 	lds	r25, 0x03CD
     eb2:	90 93 cf 03 	sts	0x03CF, r25
     eb6:	80 93 ce 03 	sts	0x03CE, r24
	
}			
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     ec0:	84 b1       	in	r24, 0x04	; 4
     ec2:	87 62       	ori	r24, 0x27	; 39
     ec4:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     ec6:	ec ed       	ldi	r30, 0xDC	; 220
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8c 65       	ori	r24, 0x5C	; 92
     ece:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     ed0:	85 b1       	in	r24, 0x05	; 5
     ed2:	89 7d       	andi	r24, 0xD9	; 217
     ed4:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     ed6:	ed ed       	ldi	r30, 0xDD	; 221
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	83 7f       	andi	r24, 0xF3	; 243
     ede:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     ee0:	80 e5       	ldi	r24, 0x50	; 80
     ee2:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     ee4:	80 81       	ld	r24, Z
     ee6:	87 7f       	andi	r24, 0xF7	; 247
     ee8:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     eea:	80 81       	ld	r24, Z
     eec:	87 7f       	andi	r24, 0xF7	; 247
     eee:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     ef0:	80 81       	ld	r24, Z
     ef2:	88 60       	ori	r24, 0x08	; 8
     ef4:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 7e       	andi	r24, 0xEF	; 239
     efa:	80 83       	st	Z, r24
	
}
     efc:	08 95       	ret

00000efe <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     efe:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     f00:	0d b4       	in	r0, 0x2d	; 45
     f02:	07 fe       	sbrs	r0, 7
     f04:	fd cf       	rjmp	.-6      	; 0xf00 <spi_shift_byte+0x2>
	return SPDR;
     f06:	8e b5       	in	r24, 0x2e	; 46
	
}
     f08:	08 95       	ret

00000f0a <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     f0a:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     f0c:	80 91 02 03 	lds	r24, 0x0302
     f10:	0e 94 7f 07 	call	0xefe	; 0xefe <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     f14:	90 91 c1 02 	lds	r25, 0x02C1
     f18:	98 2b       	or	r25, r24
     f1a:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     f1e:	20 91 bf 02 	lds	r18, 0x02BF
     f22:	98 2f       	mov	r25, r24
     f24:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     f26:	89 2f       	mov	r24, r25
     f28:	82 27       	eor	r24, r18
     f2a:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     f2e:	89 23       	and	r24, r25
     f30:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     f34:	90 91 7e 03 	lds	r25, 0x037E
     f38:	89 27       	eor	r24, r25
     f3a:	80 93 7e 03 	sts	0x037E, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     f3e:	80 91 01 03 	lds	r24, 0x0301
     f42:	0e 94 7f 07 	call	0xefe	; 0xefe <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     f46:	90 91 c1 02 	lds	r25, 0x02C1
     f4a:	98 2b       	or	r25, r24
     f4c:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     f50:	20 91 bd 02 	lds	r18, 0x02BD
     f54:	98 2f       	mov	r25, r24
     f56:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     f58:	89 2f       	mov	r24, r25
     f5a:	82 27       	eor	r24, r18
     f5c:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     f60:	89 23       	and	r24, r25
     f62:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     f66:	90 91 7f 03 	lds	r25, 0x037F
     f6a:	89 27       	eor	r24, r25
     f6c:	80 93 7f 03 	sts	0x037F, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     f70:	80 91 00 03 	lds	r24, 0x0300
     f74:	0e 94 7f 07 	call	0xefe	; 0xefe <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     f78:	80 91 ff 02 	lds	r24, 0x02FF
     f7c:	0e 94 7f 07 	call	0xefe	; 0xefe <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     f80:	80 91 07 03 	lds	r24, 0x0307
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	11 f4       	brne	.+4      	; 0xf8c <update_spi+0x82>
     f88:	20 e8       	ldi	r18, 0x80	; 128
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <update_spi+0x84>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
     f8e:	80 91 80 03 	lds	r24, 0x0380
     f92:	88 1f       	adc	r24, r24
     f94:	88 27       	eor	r24, r24
     f96:	88 1f       	adc	r24, r24
     f98:	82 95       	swap	r24
     f9a:	88 0f       	add	r24, r24
     f9c:	88 0f       	add	r24, r24
     f9e:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     fa0:	90 91 fe 02 	lds	r25, 0x02FE
     fa4:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     fa6:	82 2b       	or	r24, r18
     fa8:	0e 94 7f 07 	call	0xefe	; 0xefe <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     fac:	ed ed       	ldi	r30, 0xDD	; 221
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	87 7f       	andi	r24, 0xF7	; 247
     fb4:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     fb6:	80 81       	ld	r24, Z
     fb8:	88 60       	ori	r24, 0x08	; 8
     fba:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     fbc:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     fbe:	08 95       	ret

00000fc0 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     fc0:	a0 e0       	ldi	r26, 0x00	; 0
     fc2:	b1 e0       	ldi	r27, 0x01	; 1
     fc4:	9d 01       	movw	r18, r26
     fc6:	24 5c       	subi	r18, 0xC4	; 196
     fc8:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     fca:	ed 91       	ld	r30, X+
     fcc:	fc 91       	ld	r31, X
     fce:	11 97       	sbiw	r26, 0x01	; 1
     fd0:	80 81       	ld	r24, Z
     fd2:	41 81       	ldd	r20, Z+1	; 0x01
     fd4:	94 2f       	mov	r25, r20
     fd6:	93 70       	andi	r25, 0x03	; 3
     fd8:	95 95       	asr	r25
     fda:	87 95       	ror	r24
     fdc:	95 95       	asr	r25
     fde:	87 95       	ror	r24
     fe0:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     fe2:	ed 91       	ld	r30, X+
     fe4:	fd 91       	ld	r31, X+
     fe6:	83 81       	ldd	r24, Z+3	; 0x03
     fe8:	80 68       	ori	r24, 0x80	; 128
     fea:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
     fec:	a2 17       	cp	r26, r18
     fee:	b3 07       	cpc	r27, r19
     ff0:	61 f7       	brne	.-40     	; 0xfca <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     ff2:	08 95       	ret

00000ff4 <unlock_pots>:

void unlock_pots(void) {
     ff4:	e0 e0       	ldi	r30, 0x00	; 0
     ff6:	f1 e0       	ldi	r31, 0x01	; 1
     ff8:	cf 01       	movw	r24, r30
     ffa:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
     ffc:	a1 91       	ld	r26, Z+
     ffe:	b1 91       	ld	r27, Z+
    1000:	13 96       	adiw	r26, 0x03	; 3
    1002:	2c 91       	ld	r18, X
    1004:	13 97       	sbiw	r26, 0x03	; 3
    1006:	2f 77       	andi	r18, 0x7F	; 127
    1008:	13 96       	adiw	r26, 0x03	; 3
    100a:	2c 93       	st	X, r18
    100c:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
    100e:	e8 17       	cp	r30, r24
    1010:	f9 07       	cpc	r31, r25
    1012:	a1 f7       	brne	.-24     	; 0xffc <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
    1014:	08 95       	ret

00001016 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	ab 97       	sbiw	r28, 0x2b	; 43
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
    102e:	ee ed       	ldi	r30, 0xDE	; 222
    1030:	f2 e0       	ldi	r31, 0x02	; 2
    1032:	20 91 de 02 	lds	r18, 0x02DE
    1036:	82 2f       	mov	r24, r18
    1038:	82 95       	swap	r24
    103a:	80 7f       	andi	r24, 0xF0	; 240
    103c:	22 95       	swap	r18
    103e:	2f 70       	andi	r18, 0x0F	; 15
    1040:	90 91 df 02 	lds	r25, 0x02DF
    1044:	93 70       	andi	r25, 0x03	; 3
    1046:	92 95       	swap	r25
    1048:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
    104a:	df 01       	movw	r26, r30
    104c:	5a 97       	sbiw	r26, 0x1a	; 26
    104e:	3c 91       	ld	r19, X
    1050:	53 2f       	mov	r21, r19
    1052:	55 0f       	add	r21, r21
    1054:	55 0f       	add	r21, r21
    1056:	4a 81       	ldd	r20, Y+2	; 0x02
    1058:	43 70       	andi	r20, 0x03	; 3
    105a:	45 2b       	or	r20, r21
    105c:	4a 83       	std	Y+2, r20	; 0x02
    105e:	63 2f       	mov	r22, r19
    1060:	62 95       	swap	r22
    1062:	66 95       	lsr	r22
    1064:	66 95       	lsr	r22
    1066:	63 70       	andi	r22, 0x03	; 3
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	4c 91       	ld	r20, X
    106c:	43 70       	andi	r20, 0x03	; 3
    106e:	44 0f       	add	r20, r20
    1070:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    1072:	df 01       	movw	r26, r30
    1074:	58 97       	sbiw	r26, 0x18	; 24
    1076:	3c 91       	ld	r19, X
    1078:	53 2f       	mov	r21, r19
    107a:	52 95       	swap	r21
    107c:	50 7f       	andi	r21, 0xF0	; 240
    107e:	46 2b       	or	r20, r22
    1080:	45 2b       	or	r20, r21
    1082:	4b 83       	std	Y+3, r20	; 0x03
    1084:	63 2f       	mov	r22, r19
    1086:	62 95       	swap	r22
    1088:	6f 70       	andi	r22, 0x0F	; 15
    108a:	11 96       	adiw	r26, 0x01	; 1
    108c:	4c 91       	ld	r20, X
    108e:	43 70       	andi	r20, 0x03	; 3
    1090:	42 95       	swap	r20
    1092:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    1094:	df 01       	movw	r26, r30
    1096:	56 97       	sbiw	r26, 0x16	; 22
    1098:	3c 91       	ld	r19, X
    109a:	53 2f       	mov	r21, r19
    109c:	52 95       	swap	r21
    109e:	55 0f       	add	r21, r21
    10a0:	55 0f       	add	r21, r21
    10a2:	50 7c       	andi	r21, 0xC0	; 192
    10a4:	46 2b       	or	r20, r22
    10a6:	45 2b       	or	r20, r21
    10a8:	4c 83       	std	Y+4, r20	; 0x04
    10aa:	11 96       	adiw	r26, 0x01	; 1
    10ac:	4c 91       	ld	r20, X
    10ae:	42 95       	swap	r20
    10b0:	44 0f       	add	r20, r20
    10b2:	44 0f       	add	r20, r20
    10b4:	40 7c       	andi	r20, 0xC0	; 192
    10b6:	36 95       	lsr	r19
    10b8:	36 95       	lsr	r19
    10ba:	34 2b       	or	r19, r20
    10bc:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    10be:	df 01       	movw	r26, r30
    10c0:	54 97       	sbiw	r26, 0x14	; 20
    10c2:	3c 91       	ld	r19, X
    10c4:	3e 83       	std	Y+6, r19	; 0x06
    10c6:	11 96       	adiw	r26, 0x01	; 1
    10c8:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    10ca:	df 01       	movw	r26, r30
    10cc:	52 97       	sbiw	r26, 0x12	; 18
    10ce:	3c 91       	ld	r19, X
    10d0:	53 2f       	mov	r21, r19
    10d2:	55 0f       	add	r21, r21
    10d4:	55 0f       	add	r21, r21
    10d6:	43 70       	andi	r20, 0x03	; 3
    10d8:	45 2b       	or	r20, r21
    10da:	4f 83       	std	Y+7, r20	; 0x07
    10dc:	63 2f       	mov	r22, r19
    10de:	62 95       	swap	r22
    10e0:	66 95       	lsr	r22
    10e2:	66 95       	lsr	r22
    10e4:	63 70       	andi	r22, 0x03	; 3
    10e6:	11 96       	adiw	r26, 0x01	; 1
    10e8:	4c 91       	ld	r20, X
    10ea:	43 70       	andi	r20, 0x03	; 3
    10ec:	44 0f       	add	r20, r20
    10ee:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    10f0:	df 01       	movw	r26, r30
    10f2:	50 97       	sbiw	r26, 0x10	; 16
    10f4:	3c 91       	ld	r19, X
    10f6:	53 2f       	mov	r21, r19
    10f8:	52 95       	swap	r21
    10fa:	50 7f       	andi	r21, 0xF0	; 240
    10fc:	46 2b       	or	r20, r22
    10fe:	45 2b       	or	r20, r21
    1100:	48 87       	std	Y+8, r20	; 0x08
    1102:	63 2f       	mov	r22, r19
    1104:	62 95       	swap	r22
    1106:	6f 70       	andi	r22, 0x0F	; 15
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	4c 91       	ld	r20, X
    110c:	43 70       	andi	r20, 0x03	; 3
    110e:	42 95       	swap	r20
    1110:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    1112:	df 01       	movw	r26, r30
    1114:	1e 97       	sbiw	r26, 0x0e	; 14
    1116:	3c 91       	ld	r19, X
    1118:	53 2f       	mov	r21, r19
    111a:	52 95       	swap	r21
    111c:	55 0f       	add	r21, r21
    111e:	55 0f       	add	r21, r21
    1120:	50 7c       	andi	r21, 0xC0	; 192
    1122:	46 2b       	or	r20, r22
    1124:	45 2b       	or	r20, r21
    1126:	49 87       	std	Y+9, r20	; 0x09
    1128:	11 96       	adiw	r26, 0x01	; 1
    112a:	4c 91       	ld	r20, X
    112c:	42 95       	swap	r20
    112e:	44 0f       	add	r20, r20
    1130:	44 0f       	add	r20, r20
    1132:	40 7c       	andi	r20, 0xC0	; 192
    1134:	36 95       	lsr	r19
    1136:	36 95       	lsr	r19
    1138:	34 2b       	or	r19, r20
    113a:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    113c:	df 01       	movw	r26, r30
    113e:	1c 97       	sbiw	r26, 0x0c	; 12
    1140:	3c 91       	ld	r19, X
    1142:	3b 87       	std	Y+11, r19	; 0x0b
    1144:	11 96       	adiw	r26, 0x01	; 1
    1146:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1148:	df 01       	movw	r26, r30
    114a:	1a 97       	sbiw	r26, 0x0a	; 10
    114c:	3c 91       	ld	r19, X
    114e:	53 2f       	mov	r21, r19
    1150:	55 0f       	add	r21, r21
    1152:	55 0f       	add	r21, r21
    1154:	43 70       	andi	r20, 0x03	; 3
    1156:	45 2b       	or	r20, r21
    1158:	4c 87       	std	Y+12, r20	; 0x0c
    115a:	63 2f       	mov	r22, r19
    115c:	62 95       	swap	r22
    115e:	66 95       	lsr	r22
    1160:	66 95       	lsr	r22
    1162:	63 70       	andi	r22, 0x03	; 3
    1164:	11 96       	adiw	r26, 0x01	; 1
    1166:	4c 91       	ld	r20, X
    1168:	43 70       	andi	r20, 0x03	; 3
    116a:	44 0f       	add	r20, r20
    116c:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    116e:	df 01       	movw	r26, r30
    1170:	18 97       	sbiw	r26, 0x08	; 8
    1172:	3c 91       	ld	r19, X
    1174:	53 2f       	mov	r21, r19
    1176:	52 95       	swap	r21
    1178:	50 7f       	andi	r21, 0xF0	; 240
    117a:	46 2b       	or	r20, r22
    117c:	45 2b       	or	r20, r21
    117e:	4d 87       	std	Y+13, r20	; 0x0d
    1180:	63 2f       	mov	r22, r19
    1182:	62 95       	swap	r22
    1184:	6f 70       	andi	r22, 0x0F	; 15
    1186:	11 96       	adiw	r26, 0x01	; 1
    1188:	4c 91       	ld	r20, X
    118a:	43 70       	andi	r20, 0x03	; 3
    118c:	42 95       	swap	r20
    118e:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    1190:	df 01       	movw	r26, r30
    1192:	16 97       	sbiw	r26, 0x06	; 6
    1194:	3c 91       	ld	r19, X
    1196:	53 2f       	mov	r21, r19
    1198:	52 95       	swap	r21
    119a:	55 0f       	add	r21, r21
    119c:	55 0f       	add	r21, r21
    119e:	50 7c       	andi	r21, 0xC0	; 192
    11a0:	46 2b       	or	r20, r22
    11a2:	45 2b       	or	r20, r21
    11a4:	4e 87       	std	Y+14, r20	; 0x0e
    11a6:	11 96       	adiw	r26, 0x01	; 1
    11a8:	4c 91       	ld	r20, X
    11aa:	42 95       	swap	r20
    11ac:	44 0f       	add	r20, r20
    11ae:	44 0f       	add	r20, r20
    11b0:	40 7c       	andi	r20, 0xC0	; 192
    11b2:	36 95       	lsr	r19
    11b4:	36 95       	lsr	r19
    11b6:	34 2b       	or	r19, r20
    11b8:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    11ba:	df 01       	movw	r26, r30
    11bc:	14 97       	sbiw	r26, 0x04	; 4
    11be:	3c 91       	ld	r19, X
    11c0:	38 8b       	std	Y+16, r19	; 0x10
    11c2:	11 96       	adiw	r26, 0x01	; 1
    11c4:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    11c6:	df 01       	movw	r26, r30
    11c8:	12 97       	sbiw	r26, 0x02	; 2
    11ca:	3c 91       	ld	r19, X
    11cc:	53 2f       	mov	r21, r19
    11ce:	55 0f       	add	r21, r21
    11d0:	55 0f       	add	r21, r21
    11d2:	43 70       	andi	r20, 0x03	; 3
    11d4:	45 2b       	or	r20, r21
    11d6:	49 8b       	std	Y+17, r20	; 0x11
    11d8:	32 95       	swap	r19
    11da:	36 95       	lsr	r19
    11dc:	36 95       	lsr	r19
    11de:	33 70       	andi	r19, 0x03	; 3
    11e0:	11 96       	adiw	r26, 0x01	; 1
    11e2:	4c 91       	ld	r20, X
    11e4:	43 70       	andi	r20, 0x03	; 3
    11e6:	44 0f       	add	r20, r20
    11e8:	44 0f       	add	r20, r20
    11ea:	83 2b       	or	r24, r19
    11ec:	84 2b       	or	r24, r20
    11ee:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    11f0:	80 91 e0 02 	lds	r24, 0x02E0
    11f4:	38 2f       	mov	r19, r24
    11f6:	32 95       	swap	r19
    11f8:	33 0f       	add	r19, r19
    11fa:	33 0f       	add	r19, r19
    11fc:	30 7c       	andi	r19, 0xC0	; 192
    11fe:	92 2b       	or	r25, r18
    1200:	93 2b       	or	r25, r19
    1202:	9b 8b       	std	Y+19, r25	; 0x13
    1204:	93 81       	ldd	r25, Z+3	; 0x03
    1206:	92 95       	swap	r25
    1208:	99 0f       	add	r25, r25
    120a:	99 0f       	add	r25, r25
    120c:	90 7c       	andi	r25, 0xC0	; 192
    120e:	86 95       	lsr	r24
    1210:	86 95       	lsr	r24
    1212:	89 2b       	or	r24, r25
    1214:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    1216:	80 91 e2 02 	lds	r24, 0x02E2
    121a:	8d 8b       	std	Y+21, r24	; 0x15
    121c:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    121e:	80 91 e4 02 	lds	r24, 0x02E4
    1222:	28 2f       	mov	r18, r24
    1224:	22 0f       	add	r18, r18
    1226:	22 0f       	add	r18, r18
    1228:	93 70       	andi	r25, 0x03	; 3
    122a:	92 2b       	or	r25, r18
    122c:	9e 8b       	std	Y+22, r25	; 0x16
    122e:	38 2f       	mov	r19, r24
    1230:	32 95       	swap	r19
    1232:	36 95       	lsr	r19
    1234:	36 95       	lsr	r19
    1236:	33 70       	andi	r19, 0x03	; 3
    1238:	97 81       	ldd	r25, Z+7	; 0x07
    123a:	93 70       	andi	r25, 0x03	; 3
    123c:	99 0f       	add	r25, r25
    123e:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    1240:	80 91 e6 02 	lds	r24, 0x02E6
    1244:	28 2f       	mov	r18, r24
    1246:	22 95       	swap	r18
    1248:	20 7f       	andi	r18, 0xF0	; 240
    124a:	93 2b       	or	r25, r19
    124c:	92 2b       	or	r25, r18
    124e:	9f 8b       	std	Y+23, r25	; 0x17
    1250:	38 2f       	mov	r19, r24
    1252:	32 95       	swap	r19
    1254:	3f 70       	andi	r19, 0x0F	; 15
    1256:	91 85       	ldd	r25, Z+9	; 0x09
    1258:	93 70       	andi	r25, 0x03	; 3
    125a:	92 95       	swap	r25
    125c:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    125e:	80 91 e8 02 	lds	r24, 0x02E8
    1262:	28 2f       	mov	r18, r24
    1264:	22 95       	swap	r18
    1266:	22 0f       	add	r18, r18
    1268:	22 0f       	add	r18, r18
    126a:	20 7c       	andi	r18, 0xC0	; 192
    126c:	93 2b       	or	r25, r19
    126e:	92 2b       	or	r25, r18
    1270:	98 8f       	std	Y+24, r25	; 0x18
    1272:	93 85       	ldd	r25, Z+11	; 0x0b
    1274:	92 95       	swap	r25
    1276:	99 0f       	add	r25, r25
    1278:	99 0f       	add	r25, r25
    127a:	90 7c       	andi	r25, 0xC0	; 192
    127c:	86 95       	lsr	r24
    127e:	86 95       	lsr	r24
    1280:	89 2b       	or	r24, r25
    1282:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    1284:	80 91 ea 02 	lds	r24, 0x02EA
    1288:	8a 8f       	std	Y+26, r24	; 0x1a
    128a:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    128c:	80 91 ec 02 	lds	r24, 0x02EC
    1290:	28 2f       	mov	r18, r24
    1292:	22 0f       	add	r18, r18
    1294:	22 0f       	add	r18, r18
    1296:	93 70       	andi	r25, 0x03	; 3
    1298:	92 2b       	or	r25, r18
    129a:	9b 8f       	std	Y+27, r25	; 0x1b
    129c:	38 2f       	mov	r19, r24
    129e:	32 95       	swap	r19
    12a0:	36 95       	lsr	r19
    12a2:	36 95       	lsr	r19
    12a4:	33 70       	andi	r19, 0x03	; 3
    12a6:	97 85       	ldd	r25, Z+15	; 0x0f
    12a8:	93 70       	andi	r25, 0x03	; 3
    12aa:	99 0f       	add	r25, r25
    12ac:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    12ae:	80 91 ee 02 	lds	r24, 0x02EE
    12b2:	28 2f       	mov	r18, r24
    12b4:	22 95       	swap	r18
    12b6:	20 7f       	andi	r18, 0xF0	; 240
    12b8:	93 2b       	or	r25, r19
    12ba:	92 2b       	or	r25, r18
    12bc:	9c 8f       	std	Y+28, r25	; 0x1c
    12be:	38 2f       	mov	r19, r24
    12c0:	32 95       	swap	r19
    12c2:	3f 70       	andi	r19, 0x0F	; 15
    12c4:	91 89       	ldd	r25, Z+17	; 0x11
    12c6:	93 70       	andi	r25, 0x03	; 3
    12c8:	92 95       	swap	r25
    12ca:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    12cc:	80 91 f0 02 	lds	r24, 0x02F0
    12d0:	28 2f       	mov	r18, r24
    12d2:	22 95       	swap	r18
    12d4:	22 0f       	add	r18, r18
    12d6:	22 0f       	add	r18, r18
    12d8:	20 7c       	andi	r18, 0xC0	; 192
    12da:	93 2b       	or	r25, r19
    12dc:	92 2b       	or	r25, r18
    12de:	9d 8f       	std	Y+29, r25	; 0x1d
    12e0:	93 89       	ldd	r25, Z+19	; 0x13
    12e2:	92 95       	swap	r25
    12e4:	99 0f       	add	r25, r25
    12e6:	99 0f       	add	r25, r25
    12e8:	90 7c       	andi	r25, 0xC0	; 192
    12ea:	86 95       	lsr	r24
    12ec:	86 95       	lsr	r24
    12ee:	89 2b       	or	r24, r25
    12f0:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    12f2:	80 91 f2 02 	lds	r24, 0x02F2
    12f6:	8f 8f       	std	Y+31, r24	; 0x1f
    12f8:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    12fa:	80 91 f4 02 	lds	r24, 0x02F4
    12fe:	28 2f       	mov	r18, r24
    1300:	22 0f       	add	r18, r18
    1302:	22 0f       	add	r18, r18
    1304:	93 70       	andi	r25, 0x03	; 3
    1306:	92 2b       	or	r25, r18
    1308:	98 a3       	lds	r25, 0x58
    130a:	38 2f       	mov	r19, r24
    130c:	32 95       	swap	r19
    130e:	36 95       	lsr	r19
    1310:	36 95       	lsr	r19
    1312:	33 70       	andi	r19, 0x03	; 3
    1314:	97 89       	ldd	r25, Z+23	; 0x17
    1316:	93 70       	andi	r25, 0x03	; 3
    1318:	99 0f       	add	r25, r25
    131a:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    131c:	80 91 f6 02 	lds	r24, 0x02F6
    1320:	28 2f       	mov	r18, r24
    1322:	22 95       	swap	r18
    1324:	20 7f       	andi	r18, 0xF0	; 240
    1326:	93 2b       	or	r25, r19
    1328:	92 2b       	or	r25, r18
    132a:	99 a3       	lds	r25, 0x59
    132c:	38 2f       	mov	r19, r24
    132e:	32 95       	swap	r19
    1330:	3f 70       	andi	r19, 0x0F	; 15
    1332:	91 8d       	ldd	r25, Z+25	; 0x19
    1334:	93 70       	andi	r25, 0x03	; 3
    1336:	92 95       	swap	r25
    1338:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    133a:	80 91 f8 02 	lds	r24, 0x02F8
    133e:	28 2f       	mov	r18, r24
    1340:	22 95       	swap	r18
    1342:	22 0f       	add	r18, r18
    1344:	22 0f       	add	r18, r18
    1346:	20 7c       	andi	r18, 0xC0	; 192
    1348:	93 2b       	or	r25, r19
    134a:	92 2b       	or	r25, r18
    134c:	9a a3       	lds	r25, 0x5a
    134e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1350:	92 95       	swap	r25
    1352:	99 0f       	add	r25, r25
    1354:	99 0f       	add	r25, r25
    1356:	90 7c       	andi	r25, 0xC0	; 192
    1358:	86 95       	lsr	r24
    135a:	86 95       	lsr	r24
    135c:	89 2b       	or	r24, r25
    135e:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    1360:	80 91 fa 02 	lds	r24, 0x02FA
    1364:	8c a3       	lds	r24, 0x5c
    1366:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    1368:	80 91 fc 02 	lds	r24, 0x02FC
    136c:	28 2f       	mov	r18, r24
    136e:	22 0f       	add	r18, r18
    1370:	22 0f       	add	r18, r18
    1372:	93 70       	andi	r25, 0x03	; 3
    1374:	92 2b       	or	r25, r18
    1376:	9d a3       	lds	r25, 0x5d
    1378:	82 95       	swap	r24
    137a:	86 95       	lsr	r24
    137c:	86 95       	lsr	r24
    137e:	83 70       	andi	r24, 0x03	; 3
    1380:	2e a1       	lds	r18, 0x4e
    1382:	20 7f       	andi	r18, 0xF0	; 240
    1384:	97 8d       	ldd	r25, Z+31	; 0x1f
    1386:	93 70       	andi	r25, 0x03	; 3
    1388:	99 0f       	add	r25, r25
    138a:	99 0f       	add	r25, r25
    138c:	82 2b       	or	r24, r18
    138e:	89 2b       	or	r24, r25
    1390:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    1392:	80 91 fe 02 	lds	r24, 0x02FE
    1396:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    1398:	80 91 ff 02 	lds	r24, 0x02FF
    139c:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    139e:	80 91 00 03 	lds	r24, 0x0300
    13a2:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    13a4:	80 91 01 03 	lds	r24, 0x0301
    13a8:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    13aa:	80 91 02 03 	lds	r24, 0x0302
    13ae:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    13b0:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    13b4:	80 91 80 03 	lds	r24, 0x0380
    13b8:	8f 77       	andi	r24, 0x7F	; 127
    13ba:	80 93 80 03 	sts	0x0380, r24
	current_patch.mode = MEMORY;
    13be:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    13c2:	21 2f       	mov	r18, r17
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	8b e2       	ldi	r24, 0x2B	; 43
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	28 9f       	mul	r18, r24
    13cc:	b0 01       	movw	r22, r0
    13ce:	29 9f       	mul	r18, r25
    13d0:	70 0d       	add	r23, r0
    13d2:	38 9f       	mul	r19, r24
    13d4:	70 0d       	add	r23, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	60 50       	subi	r22, 0x00	; 0
    13da:	70 40       	sbci	r23, 0x00	; 0
    13dc:	ce 01       	movw	r24, r28
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	4b e2       	ldi	r20, 0x2B	; 43
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__eeupd_block_m6450a>
}	
    13e8:	ab 96       	adiw	r28, 0x2b	; 43
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	08 95       	ret

000013fc <load_patch>:
	
void load_patch(uint8_t patch_number) {
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	c3 54       	subi	r28, 0x43	; 67
    1408:	d0 40       	sbci	r29, 0x00	; 0
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	2b e2       	ldi	r18, 0x2B	; 43
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	82 9f       	mul	r24, r18
    141c:	b0 01       	movw	r22, r0
    141e:	83 9f       	mul	r24, r19
    1420:	70 0d       	add	r23, r0
    1422:	92 9f       	mul	r25, r18
    1424:	70 0d       	add	r23, r0
    1426:	11 24       	eor	r1, r1
    1428:	60 50       	subi	r22, 0x00	; 0
    142a:	70 40       	sbci	r23, 0x00	; 0
    142c:	ce 01       	movw	r24, r28
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	4b e2       	ldi	r20, 0x2B	; 43
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    1438:	ee ed       	ldi	r30, 0xDE	; 222
    143a:	f2 e0       	ldi	r31, 0x02	; 2
    143c:	8a 89       	ldd	r24, Y+18	; 0x12
    143e:	28 2f       	mov	r18, r24
    1440:	22 95       	swap	r18
    1442:	2f 70       	andi	r18, 0x0F	; 15
    1444:	9b 89       	ldd	r25, Y+19	; 0x13
    1446:	39 2f       	mov	r19, r25
    1448:	32 95       	swap	r19
    144a:	30 7f       	andi	r19, 0xF0	; 240
    144c:	32 2b       	or	r19, r18
    144e:	29 2f       	mov	r18, r25
    1450:	22 95       	swap	r18
    1452:	2f 70       	andi	r18, 0x0F	; 15
    1454:	23 70       	andi	r18, 0x03	; 3
    1456:	30 93 de 02 	sts	0x02DE, r19
    145a:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    145e:	df 01       	movw	r26, r30
    1460:	5a 97       	sbiw	r26, 0x1a	; 26
    1462:	4a 81       	ldd	r20, Y+2	; 0x02
    1464:	46 95       	lsr	r20
    1466:	46 95       	lsr	r20
    1468:	2b 81       	ldd	r18, Y+3	; 0x03
    146a:	32 2f       	mov	r19, r18
    146c:	32 95       	swap	r19
    146e:	33 0f       	add	r19, r19
    1470:	33 0f       	add	r19, r19
    1472:	30 7c       	andi	r19, 0xC0	; 192
    1474:	43 2b       	or	r20, r19
    1476:	32 2f       	mov	r19, r18
    1478:	36 95       	lsr	r19
    147a:	36 95       	lsr	r19
    147c:	33 70       	andi	r19, 0x03	; 3
    147e:	4c 93       	st	X, r20
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    1484:	df 01       	movw	r26, r30
    1486:	58 97       	sbiw	r26, 0x18	; 24
    1488:	32 2f       	mov	r19, r18
    148a:	32 95       	swap	r19
    148c:	3f 70       	andi	r19, 0x0F	; 15
    148e:	2c 81       	ldd	r18, Y+4	; 0x04
    1490:	42 2f       	mov	r20, r18
    1492:	42 95       	swap	r20
    1494:	40 7f       	andi	r20, 0xF0	; 240
    1496:	43 2b       	or	r20, r19
    1498:	32 2f       	mov	r19, r18
    149a:	32 95       	swap	r19
    149c:	3f 70       	andi	r19, 0x0F	; 15
    149e:	33 70       	andi	r19, 0x03	; 3
    14a0:	4c 93       	st	X, r20
    14a2:	11 96       	adiw	r26, 0x01	; 1
    14a4:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    14a6:	df 01       	movw	r26, r30
    14a8:	56 97       	sbiw	r26, 0x16	; 22
    14aa:	22 95       	swap	r18
    14ac:	26 95       	lsr	r18
    14ae:	26 95       	lsr	r18
    14b0:	23 70       	andi	r18, 0x03	; 3
    14b2:	3d 81       	ldd	r19, Y+5	; 0x05
    14b4:	43 2f       	mov	r20, r19
    14b6:	44 0f       	add	r20, r20
    14b8:	44 0f       	add	r20, r20
    14ba:	24 2b       	or	r18, r20
    14bc:	32 95       	swap	r19
    14be:	36 95       	lsr	r19
    14c0:	36 95       	lsr	r19
    14c2:	33 70       	andi	r19, 0x03	; 3
    14c4:	2c 93       	st	X, r18
    14c6:	11 96       	adiw	r26, 0x01	; 1
    14c8:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    14ca:	df 01       	movw	r26, r30
    14cc:	54 97       	sbiw	r26, 0x14	; 20
    14ce:	4e 81       	ldd	r20, Y+6	; 0x06
    14d0:	2f 81       	ldd	r18, Y+7	; 0x07
    14d2:	32 2f       	mov	r19, r18
    14d4:	33 70       	andi	r19, 0x03	; 3
    14d6:	4c 93       	st	X, r20
    14d8:	11 96       	adiw	r26, 0x01	; 1
    14da:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    14dc:	df 01       	movw	r26, r30
    14de:	52 97       	sbiw	r26, 0x12	; 18
    14e0:	32 2f       	mov	r19, r18
    14e2:	36 95       	lsr	r19
    14e4:	36 95       	lsr	r19
    14e6:	28 85       	ldd	r18, Y+8	; 0x08
    14e8:	42 2f       	mov	r20, r18
    14ea:	42 95       	swap	r20
    14ec:	44 0f       	add	r20, r20
    14ee:	44 0f       	add	r20, r20
    14f0:	40 7c       	andi	r20, 0xC0	; 192
    14f2:	43 2b       	or	r20, r19
    14f4:	32 2f       	mov	r19, r18
    14f6:	36 95       	lsr	r19
    14f8:	36 95       	lsr	r19
    14fa:	33 70       	andi	r19, 0x03	; 3
    14fc:	4c 93       	st	X, r20
    14fe:	11 96       	adiw	r26, 0x01	; 1
    1500:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1502:	df 01       	movw	r26, r30
    1504:	50 97       	sbiw	r26, 0x10	; 16
    1506:	32 2f       	mov	r19, r18
    1508:	32 95       	swap	r19
    150a:	3f 70       	andi	r19, 0x0F	; 15
    150c:	29 85       	ldd	r18, Y+9	; 0x09
    150e:	42 2f       	mov	r20, r18
    1510:	42 95       	swap	r20
    1512:	40 7f       	andi	r20, 0xF0	; 240
    1514:	43 2b       	or	r20, r19
    1516:	32 2f       	mov	r19, r18
    1518:	32 95       	swap	r19
    151a:	3f 70       	andi	r19, 0x0F	; 15
    151c:	33 70       	andi	r19, 0x03	; 3
    151e:	4c 93       	st	X, r20
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    1524:	df 01       	movw	r26, r30
    1526:	1e 97       	sbiw	r26, 0x0e	; 14
    1528:	22 95       	swap	r18
    152a:	26 95       	lsr	r18
    152c:	26 95       	lsr	r18
    152e:	23 70       	andi	r18, 0x03	; 3
    1530:	3a 85       	ldd	r19, Y+10	; 0x0a
    1532:	43 2f       	mov	r20, r19
    1534:	44 0f       	add	r20, r20
    1536:	44 0f       	add	r20, r20
    1538:	24 2b       	or	r18, r20
    153a:	32 95       	swap	r19
    153c:	36 95       	lsr	r19
    153e:	36 95       	lsr	r19
    1540:	33 70       	andi	r19, 0x03	; 3
    1542:	2c 93       	st	X, r18
    1544:	11 96       	adiw	r26, 0x01	; 1
    1546:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    1548:	df 01       	movw	r26, r30
    154a:	1c 97       	sbiw	r26, 0x0c	; 12
    154c:	4b 85       	ldd	r20, Y+11	; 0x0b
    154e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1550:	32 2f       	mov	r19, r18
    1552:	33 70       	andi	r19, 0x03	; 3
    1554:	4c 93       	st	X, r20
    1556:	11 96       	adiw	r26, 0x01	; 1
    1558:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    155a:	df 01       	movw	r26, r30
    155c:	1a 97       	sbiw	r26, 0x0a	; 10
    155e:	32 2f       	mov	r19, r18
    1560:	36 95       	lsr	r19
    1562:	36 95       	lsr	r19
    1564:	2d 85       	ldd	r18, Y+13	; 0x0d
    1566:	42 2f       	mov	r20, r18
    1568:	42 95       	swap	r20
    156a:	44 0f       	add	r20, r20
    156c:	44 0f       	add	r20, r20
    156e:	40 7c       	andi	r20, 0xC0	; 192
    1570:	43 2b       	or	r20, r19
    1572:	32 2f       	mov	r19, r18
    1574:	36 95       	lsr	r19
    1576:	36 95       	lsr	r19
    1578:	33 70       	andi	r19, 0x03	; 3
    157a:	4c 93       	st	X, r20
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    1580:	df 01       	movw	r26, r30
    1582:	18 97       	sbiw	r26, 0x08	; 8
    1584:	32 2f       	mov	r19, r18
    1586:	32 95       	swap	r19
    1588:	3f 70       	andi	r19, 0x0F	; 15
    158a:	2e 85       	ldd	r18, Y+14	; 0x0e
    158c:	42 2f       	mov	r20, r18
    158e:	42 95       	swap	r20
    1590:	40 7f       	andi	r20, 0xF0	; 240
    1592:	43 2b       	or	r20, r19
    1594:	32 2f       	mov	r19, r18
    1596:	32 95       	swap	r19
    1598:	3f 70       	andi	r19, 0x0F	; 15
    159a:	33 70       	andi	r19, 0x03	; 3
    159c:	4c 93       	st	X, r20
    159e:	11 96       	adiw	r26, 0x01	; 1
    15a0:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    15a2:	df 01       	movw	r26, r30
    15a4:	16 97       	sbiw	r26, 0x06	; 6
    15a6:	22 95       	swap	r18
    15a8:	26 95       	lsr	r18
    15aa:	26 95       	lsr	r18
    15ac:	23 70       	andi	r18, 0x03	; 3
    15ae:	3f 85       	ldd	r19, Y+15	; 0x0f
    15b0:	43 2f       	mov	r20, r19
    15b2:	44 0f       	add	r20, r20
    15b4:	44 0f       	add	r20, r20
    15b6:	24 2b       	or	r18, r20
    15b8:	32 95       	swap	r19
    15ba:	36 95       	lsr	r19
    15bc:	36 95       	lsr	r19
    15be:	33 70       	andi	r19, 0x03	; 3
    15c0:	2c 93       	st	X, r18
    15c2:	11 96       	adiw	r26, 0x01	; 1
    15c4:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    15c6:	df 01       	movw	r26, r30
    15c8:	14 97       	sbiw	r26, 0x04	; 4
    15ca:	48 89       	ldd	r20, Y+16	; 0x10
    15cc:	29 89       	ldd	r18, Y+17	; 0x11
    15ce:	32 2f       	mov	r19, r18
    15d0:	33 70       	andi	r19, 0x03	; 3
    15d2:	4c 93       	st	X, r20
    15d4:	11 96       	adiw	r26, 0x01	; 1
    15d6:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    15d8:	df 01       	movw	r26, r30
    15da:	12 97       	sbiw	r26, 0x02	; 2
    15dc:	26 95       	lsr	r18
    15de:	26 95       	lsr	r18
    15e0:	38 2f       	mov	r19, r24
    15e2:	32 95       	swap	r19
    15e4:	33 0f       	add	r19, r19
    15e6:	33 0f       	add	r19, r19
    15e8:	30 7c       	andi	r19, 0xC0	; 192
    15ea:	23 2b       	or	r18, r19
    15ec:	86 95       	lsr	r24
    15ee:	86 95       	lsr	r24
    15f0:	83 70       	andi	r24, 0x03	; 3
    15f2:	2c 93       	st	X, r18
    15f4:	11 96       	adiw	r26, 0x01	; 1
    15f6:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    15f8:	92 95       	swap	r25
    15fa:	96 95       	lsr	r25
    15fc:	96 95       	lsr	r25
    15fe:	93 70       	andi	r25, 0x03	; 3
    1600:	8c 89       	ldd	r24, Y+20	; 0x14
    1602:	28 2f       	mov	r18, r24
    1604:	22 0f       	add	r18, r18
    1606:	22 0f       	add	r18, r18
    1608:	92 2b       	or	r25, r18
    160a:	82 95       	swap	r24
    160c:	86 95       	lsr	r24
    160e:	86 95       	lsr	r24
    1610:	83 70       	andi	r24, 0x03	; 3
    1612:	90 93 e0 02 	sts	0x02E0, r25
    1616:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    1618:	2d 89       	ldd	r18, Y+21	; 0x15
    161a:	8e 89       	ldd	r24, Y+22	; 0x16
    161c:	98 2f       	mov	r25, r24
    161e:	93 70       	andi	r25, 0x03	; 3
    1620:	20 93 e2 02 	sts	0x02E2, r18
    1624:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    1626:	98 2f       	mov	r25, r24
    1628:	96 95       	lsr	r25
    162a:	96 95       	lsr	r25
    162c:	8f 89       	ldd	r24, Y+23	; 0x17
    162e:	28 2f       	mov	r18, r24
    1630:	22 95       	swap	r18
    1632:	22 0f       	add	r18, r18
    1634:	22 0f       	add	r18, r18
    1636:	20 7c       	andi	r18, 0xC0	; 192
    1638:	29 2b       	or	r18, r25
    163a:	98 2f       	mov	r25, r24
    163c:	96 95       	lsr	r25
    163e:	96 95       	lsr	r25
    1640:	93 70       	andi	r25, 0x03	; 3
    1642:	20 93 e4 02 	sts	0x02E4, r18
    1646:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    1648:	98 2f       	mov	r25, r24
    164a:	92 95       	swap	r25
    164c:	9f 70       	andi	r25, 0x0F	; 15
    164e:	88 8d       	ldd	r24, Y+24	; 0x18
    1650:	28 2f       	mov	r18, r24
    1652:	22 95       	swap	r18
    1654:	20 7f       	andi	r18, 0xF0	; 240
    1656:	29 2b       	or	r18, r25
    1658:	98 2f       	mov	r25, r24
    165a:	92 95       	swap	r25
    165c:	9f 70       	andi	r25, 0x0F	; 15
    165e:	93 70       	andi	r25, 0x03	; 3
    1660:	20 93 e6 02 	sts	0x02E6, r18
    1664:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    1666:	82 95       	swap	r24
    1668:	86 95       	lsr	r24
    166a:	86 95       	lsr	r24
    166c:	83 70       	andi	r24, 0x03	; 3
    166e:	99 8d       	ldd	r25, Y+25	; 0x19
    1670:	29 2f       	mov	r18, r25
    1672:	22 0f       	add	r18, r18
    1674:	22 0f       	add	r18, r18
    1676:	82 2b       	or	r24, r18
    1678:	92 95       	swap	r25
    167a:	96 95       	lsr	r25
    167c:	96 95       	lsr	r25
    167e:	93 70       	andi	r25, 0x03	; 3
    1680:	80 93 e8 02 	sts	0x02E8, r24
    1684:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    1686:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168a:	98 2f       	mov	r25, r24
    168c:	93 70       	andi	r25, 0x03	; 3
    168e:	20 93 ea 02 	sts	0x02EA, r18
    1692:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    1694:	98 2f       	mov	r25, r24
    1696:	96 95       	lsr	r25
    1698:	96 95       	lsr	r25
    169a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    169c:	28 2f       	mov	r18, r24
    169e:	22 95       	swap	r18
    16a0:	22 0f       	add	r18, r18
    16a2:	22 0f       	add	r18, r18
    16a4:	20 7c       	andi	r18, 0xC0	; 192
    16a6:	29 2b       	or	r18, r25
    16a8:	98 2f       	mov	r25, r24
    16aa:	96 95       	lsr	r25
    16ac:	96 95       	lsr	r25
    16ae:	93 70       	andi	r25, 0x03	; 3
    16b0:	20 93 ec 02 	sts	0x02EC, r18
    16b4:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    16b6:	98 2f       	mov	r25, r24
    16b8:	92 95       	swap	r25
    16ba:	9f 70       	andi	r25, 0x0F	; 15
    16bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16be:	28 2f       	mov	r18, r24
    16c0:	22 95       	swap	r18
    16c2:	20 7f       	andi	r18, 0xF0	; 240
    16c4:	29 2b       	or	r18, r25
    16c6:	98 2f       	mov	r25, r24
    16c8:	92 95       	swap	r25
    16ca:	9f 70       	andi	r25, 0x0F	; 15
    16cc:	93 70       	andi	r25, 0x03	; 3
    16ce:	20 93 ee 02 	sts	0x02EE, r18
    16d2:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    16d4:	82 95       	swap	r24
    16d6:	86 95       	lsr	r24
    16d8:	86 95       	lsr	r24
    16da:	83 70       	andi	r24, 0x03	; 3
    16dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16de:	29 2f       	mov	r18, r25
    16e0:	22 0f       	add	r18, r18
    16e2:	22 0f       	add	r18, r18
    16e4:	82 2b       	or	r24, r18
    16e6:	92 95       	swap	r25
    16e8:	96 95       	lsr	r25
    16ea:	96 95       	lsr	r25
    16ec:	93 70       	andi	r25, 0x03	; 3
    16ee:	80 93 f0 02 	sts	0x02F0, r24
    16f2:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    16f4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    16f6:	88 a1       	lds	r24, 0x48
    16f8:	98 2f       	mov	r25, r24
    16fa:	93 70       	andi	r25, 0x03	; 3
    16fc:	20 93 f2 02 	sts	0x02F2, r18
    1700:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1702:	98 2f       	mov	r25, r24
    1704:	96 95       	lsr	r25
    1706:	96 95       	lsr	r25
    1708:	89 a1       	lds	r24, 0x49
    170a:	28 2f       	mov	r18, r24
    170c:	22 95       	swap	r18
    170e:	22 0f       	add	r18, r18
    1710:	22 0f       	add	r18, r18
    1712:	20 7c       	andi	r18, 0xC0	; 192
    1714:	29 2b       	or	r18, r25
    1716:	98 2f       	mov	r25, r24
    1718:	96 95       	lsr	r25
    171a:	96 95       	lsr	r25
    171c:	93 70       	andi	r25, 0x03	; 3
    171e:	20 93 f4 02 	sts	0x02F4, r18
    1722:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    1724:	98 2f       	mov	r25, r24
    1726:	92 95       	swap	r25
    1728:	9f 70       	andi	r25, 0x0F	; 15
    172a:	8a a1       	lds	r24, 0x4a
    172c:	28 2f       	mov	r18, r24
    172e:	22 95       	swap	r18
    1730:	20 7f       	andi	r18, 0xF0	; 240
    1732:	29 2b       	or	r18, r25
    1734:	98 2f       	mov	r25, r24
    1736:	92 95       	swap	r25
    1738:	9f 70       	andi	r25, 0x0F	; 15
    173a:	93 70       	andi	r25, 0x03	; 3
    173c:	20 93 f6 02 	sts	0x02F6, r18
    1740:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1742:	82 95       	swap	r24
    1744:	86 95       	lsr	r24
    1746:	86 95       	lsr	r24
    1748:	83 70       	andi	r24, 0x03	; 3
    174a:	9b a1       	lds	r25, 0x4b
    174c:	29 2f       	mov	r18, r25
    174e:	22 0f       	add	r18, r18
    1750:	22 0f       	add	r18, r18
    1752:	82 2b       	or	r24, r18
    1754:	92 95       	swap	r25
    1756:	96 95       	lsr	r25
    1758:	96 95       	lsr	r25
    175a:	93 70       	andi	r25, 0x03	; 3
    175c:	80 93 f8 02 	sts	0x02F8, r24
    1760:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1762:	2c a1       	lds	r18, 0x4c
    1764:	8d a1       	lds	r24, 0x4d
    1766:	98 2f       	mov	r25, r24
    1768:	93 70       	andi	r25, 0x03	; 3
    176a:	20 93 fa 02 	sts	0x02FA, r18
    176e:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1770:	98 2f       	mov	r25, r24
    1772:	96 95       	lsr	r25
    1774:	96 95       	lsr	r25
    1776:	8e a1       	lds	r24, 0x4e
    1778:	28 2f       	mov	r18, r24
    177a:	22 95       	swap	r18
    177c:	22 0f       	add	r18, r18
    177e:	22 0f       	add	r18, r18
    1780:	20 7c       	andi	r18, 0xC0	; 192
    1782:	29 2b       	or	r18, r25
    1784:	86 95       	lsr	r24
    1786:	86 95       	lsr	r24
    1788:	98 2f       	mov	r25, r24
    178a:	93 70       	andi	r25, 0x03	; 3
    178c:	20 93 fc 02 	sts	0x02FC, r18
    1790:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    1792:	7f a1       	lds	r23, 0x4f
    1794:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    1798:	68 a5       	lds	r22, 0x68
    179a:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    179e:	89 a5       	lds	r24, 0x69
    17a0:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    17a4:	9a a5       	lds	r25, 0x6a
    17a6:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    17aa:	1b a5       	lds	r17, 0x6b
    17ac:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    17b0:	de 01       	movw	r26, r28
    17b2:	9c 96       	adiw	r26, 0x2c	; 44
    17b4:	ef ef       	ldi	r30, 0xFF	; 255
    17b6:	f1 e0       	ldi	r31, 0x01	; 1
    17b8:	28 e0       	ldi	r18, 0x08	; 8
    17ba:	01 90       	ld	r0, Z+
    17bc:	0d 92       	st	X+, r0
    17be:	21 50       	subi	r18, 0x01	; 1
    17c0:	e1 f7       	brne	.-8      	; 0x17ba <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    17c2:	e9 2f       	mov	r30, r25
    17c4:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	9f 01       	movw	r18, r30
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	22 0f       	add	r18, r18
    17d0:	33 1f       	adc	r19, r19
    17d2:	a9 01       	movw	r20, r18
    17d4:	44 0f       	add	r20, r20
    17d6:	55 1f       	adc	r21, r21
    17d8:	44 0f       	add	r20, r20
    17da:	55 1f       	adc	r21, r21
    17dc:	44 0f       	add	r20, r20
    17de:	55 1f       	adc	r21, r21
    17e0:	42 1b       	sub	r20, r18
    17e2:	53 0b       	sbc	r21, r19
    17e4:	4e 0f       	add	r20, r30
    17e6:	5f 1f       	adc	r21, r31
    17e8:	55 95       	asr	r21
    17ea:	47 95       	ror	r20
    17ec:	55 95       	asr	r21
    17ee:	47 95       	ror	r20
    17f0:	55 95       	asr	r21
    17f2:	47 95       	ror	r20
    17f4:	55 95       	asr	r21
    17f6:	47 95       	ror	r20
    17f8:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    17fa:	fe 01       	movw	r30, r28
    17fc:	e4 0f       	add	r30, r20
    17fe:	f1 1d       	adc	r31, r1
    1800:	24 a5       	lds	r18, 0x64
    1802:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    1806:	de 01       	movw	r26, r28
    1808:	d4 96       	adiw	r26, 0x34	; 52
    180a:	e7 e0       	ldi	r30, 0x07	; 7
    180c:	f2 e0       	ldi	r31, 0x02	; 2
    180e:	28 e0       	ldi	r18, 0x08	; 8
    1810:	01 90       	ld	r0, Z+
    1812:	0d 92       	st	X+, r0
    1814:	21 50       	subi	r18, 0x01	; 1
    1816:	e1 f7       	brne	.-8      	; 0x1810 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    1818:	29 2f       	mov	r18, r25
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	20 7e       	andi	r18, 0xE0	; 224
    181e:	30 70       	andi	r19, 0x00	; 0
    1820:	35 95       	asr	r19
    1822:	27 95       	ror	r18
    1824:	35 95       	asr	r19
    1826:	27 95       	ror	r18
    1828:	35 95       	asr	r19
    182a:	27 95       	ror	r18
    182c:	83 70       	andi	r24, 0x03	; 3
    182e:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    1830:	42 2f       	mov	r20, r18
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	ca 01       	movw	r24, r20
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	9c 01       	movw	r18, r24
    1840:	22 0f       	add	r18, r18
    1842:	33 1f       	adc	r19, r19
    1844:	22 0f       	add	r18, r18
    1846:	33 1f       	adc	r19, r19
    1848:	22 0f       	add	r18, r18
    184a:	33 1f       	adc	r19, r19
    184c:	28 1b       	sub	r18, r24
    184e:	39 0b       	sbc	r19, r25
    1850:	42 0f       	add	r20, r18
    1852:	53 1f       	adc	r21, r19
    1854:	ca 01       	movw	r24, r20
    1856:	95 95       	asr	r25
    1858:	87 95       	ror	r24
    185a:	95 95       	asr	r25
    185c:	87 95       	ror	r24
    185e:	95 95       	asr	r25
    1860:	87 95       	ror	r24
    1862:	95 95       	asr	r25
    1864:	87 95       	ror	r24
    1866:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    1868:	fe 01       	movw	r30, r28
    186a:	e8 0f       	add	r30, r24
    186c:	f1 1d       	adc	r31, r1
    186e:	84 a9       	sts	0x44, r24
    1870:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    1874:	de 01       	movw	r26, r28
    1876:	dc 96       	adiw	r26, 0x3c	; 60
    1878:	ef e0       	ldi	r30, 0x0F	; 15
    187a:	f2 e0       	ldi	r31, 0x02	; 2
    187c:	88 e0       	ldi	r24, 0x08	; 8
    187e:	01 90       	ld	r0, Z+
    1880:	0d 92       	st	X+, r0
    1882:	81 50       	subi	r24, 0x01	; 1
    1884:	e1 f7       	brne	.-8      	; 0x187e <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    1886:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    1888:	46 2f       	mov	r20, r22
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	ca 01       	movw	r24, r20
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	9c 01       	movw	r18, r24
    1898:	22 0f       	add	r18, r18
    189a:	33 1f       	adc	r19, r19
    189c:	22 0f       	add	r18, r18
    189e:	33 1f       	adc	r19, r19
    18a0:	22 0f       	add	r18, r18
    18a2:	33 1f       	adc	r19, r19
    18a4:	28 1b       	sub	r18, r24
    18a6:	39 0b       	sbc	r19, r25
    18a8:	42 0f       	add	r20, r18
    18aa:	53 1f       	adc	r21, r19
    18ac:	ca 01       	movw	r24, r20
    18ae:	95 95       	asr	r25
    18b0:	87 95       	ror	r24
    18b2:	95 95       	asr	r25
    18b4:	87 95       	ror	r24
    18b6:	95 95       	asr	r25
    18b8:	87 95       	ror	r24
    18ba:	95 95       	asr	r25
    18bc:	87 95       	ror	r24
    18be:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    18c0:	fe 01       	movw	r30, r28
    18c2:	e8 0f       	add	r30, r24
    18c4:	f1 1d       	adc	r31, r1
    18c6:	84 ad       	sts	0x64, r24
    18c8:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    18cc:	21 2f       	mov	r18, r17
    18ce:	26 95       	lsr	r18
    18d0:	27 95       	ror	r18
    18d2:	22 27       	eor	r18, r18
    18d4:	27 95       	ror	r18
    18d6:	81 2f       	mov	r24, r17
    18d8:	81 70       	andi	r24, 0x01	; 1
    18da:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    18dc:	81 2f       	mov	r24, r17
    18de:	86 95       	lsr	r24
    18e0:	86 95       	lsr	r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	81 70       	andi	r24, 0x01	; 1
    18e6:	90 70       	andi	r25, 0x00	; 0
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    18f0:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    18f2:	81 2f       	mov	r24, r17
    18f4:	86 95       	lsr	r24
    18f6:	86 95       	lsr	r24
    18f8:	86 95       	lsr	r24
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	90 70       	andi	r25, 0x00	; 0
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1904:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1906:	81 2f       	mov	r24, r17
    1908:	82 95       	swap	r24
    190a:	8f 70       	andi	r24, 0x0F	; 15
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	81 70       	andi	r24, 0x01	; 1
    1910:	90 70       	andi	r25, 0x00	; 0
    1912:	82 95       	swap	r24
    1914:	92 95       	swap	r25
    1916:	90 7f       	andi	r25, 0xF0	; 240
    1918:	98 27       	eor	r25, r24
    191a:	80 7f       	andi	r24, 0xF0	; 240
    191c:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    191e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    1920:	81 2f       	mov	r24, r17
    1922:	82 95       	swap	r24
    1924:	86 95       	lsr	r24
    1926:	87 70       	andi	r24, 0x07	; 7
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	81 70       	andi	r24, 0x01	; 1
    192c:	90 70       	andi	r25, 0x00	; 0
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	82 95       	swap	r24
    1934:	92 95       	swap	r25
    1936:	90 7f       	andi	r25, 0xF0	; 240
    1938:	98 27       	eor	r25, r24
    193a:	80 7f       	andi	r24, 0xF0	; 240
    193c:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    193e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1940:	81 2f       	mov	r24, r17
    1942:	82 95       	swap	r24
    1944:	86 95       	lsr	r24
    1946:	86 95       	lsr	r24
    1948:	83 70       	andi	r24, 0x03	; 3
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	81 70       	andi	r24, 0x01	; 1
    194e:	90 70       	andi	r25, 0x00	; 0
    1950:	00 24       	eor	r0, r0
    1952:	96 95       	lsr	r25
    1954:	87 95       	ror	r24
    1956:	07 94       	ror	r0
    1958:	96 95       	lsr	r25
    195a:	87 95       	ror	r24
    195c:	07 94       	ror	r0
    195e:	98 2f       	mov	r25, r24
    1960:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1962:	82 2b       	or	r24, r18
    1964:	80 93 7e 03 	sts	0x037E, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    1968:	87 2f       	mov	r24, r23
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	81 70       	andi	r24, 0x01	; 1
    196e:	90 70       	andi	r25, 0x00	; 0
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    197c:	90 91 80 03 	lds	r25, 0x0380
    1980:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1982:	89 2b       	or	r24, r25
    1984:	11 1f       	adc	r17, r17
    1986:	11 27       	eor	r17, r17
    1988:	11 1f       	adc	r17, r17
    198a:	11 0f       	add	r17, r17
    198c:	11 0f       	add	r17, r17
    198e:	81 2b       	or	r24, r17
    1990:	80 93 80 03 	sts	0x0380, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1994:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    1998:	80 91 80 03 	lds	r24, 0x0380
    199c:	8f 77       	andi	r24, 0x7F	; 127
    199e:	80 93 80 03 	sts	0x0380, r24
	
	current_patch.mode = MEMORY;
    19a2:	10 92 07 03 	sts	0x0307, r1
	
}
    19a6:	cd 5b       	subi	r28, 0xBD	; 189
    19a8:	df 4f       	sbci	r29, 0xFF	; 255
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	08 95       	ret

000019bc <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    19bc:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    19c0:	60 3f       	cpi	r22, 0xF0	; 240
    19c2:	11 f4       	brne	.+4      	; 0x19c8 <transpose_note+0xc>
    19c4:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    19c8:	29 2f       	mov	r18, r25
    19ca:	22 0f       	add	r18, r18
    19cc:	92 0f       	add	r25, r18
    19ce:	99 0f       	add	r25, r25
    19d0:	99 0f       	add	r25, r25
    19d2:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    19d4:	89 38       	cpi	r24, 0x89	; 137
    19d6:	08 f0       	brcs	.+2      	; 0x19da <transpose_note+0x1e>
    19d8:	88 e8       	ldi	r24, 0x88	; 136
	
}
    19da:	08 95       	ret

000019dc <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    19dc:	80 91 7e 03 	lds	r24, 0x037E
    19e0:	98 2f       	mov	r25, r24
    19e2:	96 95       	lsr	r25
    19e4:	96 95       	lsr	r25
    19e6:	96 95       	lsr	r25
    19e8:	90 ff       	sbrs	r25, 0
    19ea:	0e c0       	rjmp	.+28     	; 0x1a08 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    19ec:	90 91 08 03 	lds	r25, 0x0308
    19f0:	9f 5f       	subi	r25, 0xFF	; 255
    19f2:	90 93 08 03 	sts	0x0308, r25
    19f6:	95 30       	cpi	r25, 0x05	; 5
    19f8:	19 f4       	brne	.+6      	; 0x1a00 <update_octave_range+0x24>
    19fa:	94 e0       	ldi	r25, 0x04	; 4
    19fc:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1a00:	98 e0       	ldi	r25, 0x08	; 8
    1a02:	89 27       	eor	r24, r25
    1a04:	80 93 7e 03 	sts	0x037E, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1a08:	80 91 7f 03 	lds	r24, 0x037F
    1a0c:	98 2f       	mov	r25, r24
    1a0e:	96 95       	lsr	r25
    1a10:	96 95       	lsr	r25
    1a12:	96 95       	lsr	r25
    1a14:	90 ff       	sbrs	r25, 0
    1a16:	0b c0       	rjmp	.+22     	; 0x1a2e <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1a18:	90 91 08 03 	lds	r25, 0x0308
    1a1c:	99 23       	and	r25, r25
    1a1e:	19 f0       	breq	.+6      	; 0x1a26 <update_octave_range+0x4a>
    1a20:	91 50       	subi	r25, 0x01	; 1
    1a22:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1a26:	98 e0       	ldi	r25, 0x08	; 8
    1a28:	89 27       	eor	r24, r25
    1a2a:	80 93 7f 03 	sts	0x037F, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1a2e:	80 91 08 03 	lds	r24, 0x0308
    1a32:	e1 e2       	ldi	r30, 0x21	; 33
    1a34:	f2 e0       	ldi	r31, 0x02	; 2
    1a36:	e8 0f       	add	r30, r24
    1a38:	f1 1d       	adc	r31, r1
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	00 80       	ld	r0, Z
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <update_octave_range+0x6a>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <update_octave_range+0x66>
    1a4a:	58 2f       	mov	r21, r24
    1a4c:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1a50:	90 91 7f 03 	lds	r25, 0x037F
    1a54:	29 2f       	mov	r18, r25
    1a56:	26 95       	lsr	r18
    1a58:	26 95       	lsr	r18
    1a5a:	20 ff       	sbrs	r18, 0
    1a5c:	0e c0       	rjmp	.+28     	; 0x1a7a <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1a5e:	80 91 09 03 	lds	r24, 0x0309
    1a62:	8f 5f       	subi	r24, 0xFF	; 255
    1a64:	80 93 09 03 	sts	0x0309, r24
    1a68:	85 30       	cpi	r24, 0x05	; 5
    1a6a:	19 f4       	brne	.+6      	; 0x1a72 <update_octave_range+0x96>
    1a6c:	84 e0       	ldi	r24, 0x04	; 4
    1a6e:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1a72:	84 e0       	ldi	r24, 0x04	; 4
    1a74:	98 27       	eor	r25, r24
    1a76:	90 93 7f 03 	sts	0x037F, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1a7a:	90 91 7f 03 	lds	r25, 0x037F
    1a7e:	29 2f       	mov	r18, r25
    1a80:	26 95       	lsr	r18
    1a82:	20 ff       	sbrs	r18, 0
    1a84:	0b c0       	rjmp	.+22     	; 0x1a9c <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1a86:	80 91 09 03 	lds	r24, 0x0309
    1a8a:	88 23       	and	r24, r24
    1a8c:	19 f0       	breq	.+6      	; 0x1a94 <update_octave_range+0xb8>
    1a8e:	81 50       	subi	r24, 0x01	; 1
    1a90:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	98 27       	eor	r25, r24
    1a98:	90 93 7f 03 	sts	0x037F, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1a9c:	40 91 00 03 	lds	r20, 0x0300
    1aa0:	4c 7f       	andi	r20, 0xFC	; 252
    1aa2:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1aa6:	90 91 09 03 	lds	r25, 0x0309
    1aaa:	93 30       	cpi	r25, 0x03	; 3
    1aac:	88 f0       	brcs	.+34     	; 0x1ad0 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1aae:	ec e1       	ldi	r30, 0x1C	; 28
    1ab0:	f2 e0       	ldi	r31, 0x02	; 2
    1ab2:	e9 0f       	add	r30, r25
    1ab4:	f1 1d       	adc	r31, r1
    1ab6:	21 e0       	ldi	r18, 0x01	; 1
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	c9 01       	movw	r24, r18
    1abc:	00 80       	ld	r0, Z
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <update_octave_range+0xe8>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <update_octave_range+0xe4>
    1ac8:	84 2b       	or	r24, r20
    1aca:	80 93 00 03 	sts	0x0300, r24
    1ace:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1ad0:	ec e1       	ldi	r30, 0x1C	; 28
    1ad2:	f2 e0       	ldi	r31, 0x02	; 2
    1ad4:	e9 0f       	add	r30, r25
    1ad6:	f1 1d       	adc	r31, r1
    1ad8:	21 e0       	ldi	r18, 0x01	; 1
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	c9 01       	movw	r24, r18
    1ade:	00 80       	ld	r0, Z
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <update_octave_range+0x10a>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <update_octave_range+0x106>
    1aea:	85 2b       	or	r24, r21
    1aec:	80 93 01 03 	sts	0x0301, r24
    1af0:	08 95       	ret

00001af2 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1af2:	80 91 7f 03 	lds	r24, 0x037F
    1af6:	88 23       	and	r24, r24
    1af8:	64 f4       	brge	.+24     	; 0x1b12 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1afa:	80 58       	subi	r24, 0x80	; 128
    1afc:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1b00:	80 91 0a 03 	lds	r24, 0x030A
    1b04:	8f 5f       	subi	r24, 0xFF	; 255
    1b06:	80 93 0a 03 	sts	0x030A, r24
    1b0a:	85 30       	cpi	r24, 0x05	; 5
    1b0c:	11 f4       	brne	.+4      	; 0x1b12 <update_lfo_shape+0x20>
    1b0e:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1b12:	e0 91 0a 03 	lds	r30, 0x030A
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	ee 0f       	add	r30, r30
    1b1a:	ff 1f       	adc	r31, r31
    1b1c:	ea 5d       	subi	r30, 0xDA	; 218
    1b1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	01 80       	ldd	r0, Z+1	; 0x01
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <update_lfo_shape+0x3a>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1b30:	90 91 ff 02 	lds	r25, 0x02FF
    1b34:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1b36:	89 2b       	or	r24, r25
    1b38:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1b3c:	80 81       	ld	r24, Z
    1b3e:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1b40:	ed ed       	ldi	r30, 0xDD	; 221
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	80 62       	ori	r24, 0x20	; 32
    1b48:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1b4a:	80 81       	ld	r24, Z
    1b4c:	8f 7d       	andi	r24, 0xDF	; 223
    1b4e:	80 83       	st	Z, r24
	
}		
    1b50:	08 95       	ret

00001b52 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1b52:	80 91 7f 03 	lds	r24, 0x037F
    1b56:	80 ff       	sbrs	r24, 0
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	89 27       	eor	r24, r25
    1b5e:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1b62:	80 91 0b 03 	lds	r24, 0x030B
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	80 93 0b 03 	sts	0x030B, r24
    1b6c:	85 30       	cpi	r24, 0x05	; 5
    1b6e:	11 f4       	brne	.+4      	; 0x1b74 <update_lfo_sync+0x22>
    1b70:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1b74:	10 92 d1 03 	sts	0x03D1, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1b78:	60 91 ff 02 	lds	r22, 0x02FF
    1b7c:	60 7f       	andi	r22, 0xF0	; 240
    1b7e:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1b82:	20 91 0b 03 	lds	r18, 0x030B
    1b86:	22 23       	and	r18, r18
    1b88:	71 f0       	breq	.+28     	; 0x1ba6 <update_lfo_sync+0x54>
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	21 50       	subi	r18, 0x01	; 1
    1b8e:	30 40       	sbci	r19, 0x00	; 0
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	ca 01       	movw	r24, r20
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <update_lfo_sync+0x4a>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	2a 95       	dec	r18
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <update_lfo_sync+0x46>
    1ba0:	86 2b       	or	r24, r22
    1ba2:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1ba6:	80 91 ff 02 	lds	r24, 0x02FF
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	8f 70       	andi	r24, 0x0F	; 15
    1bae:	90 70       	andi	r25, 0x00	; 0
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	89 f0       	breq	.+34     	; 0x1bd8 <update_lfo_sync+0x86>
    1bb6:	83 30       	cpi	r24, 0x03	; 3
    1bb8:	91 05       	cpc	r25, r1
    1bba:	24 f4       	brge	.+8      	; 0x1bc4 <update_lfo_sync+0x72>
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	b9 f4       	brne	.+46     	; 0x1bf0 <update_lfo_sync+0x9e>
    1bc2:	07 c0       	rjmp	.+14     	; 0x1bd2 <update_lfo_sync+0x80>
    1bc4:	84 30       	cpi	r24, 0x04	; 4
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	59 f0       	breq	.+22     	; 0x1be0 <update_lfo_sync+0x8e>
    1bca:	88 30       	cpi	r24, 0x08	; 8
    1bcc:	91 05       	cpc	r25, r1
    1bce:	81 f4       	brne	.+32     	; 0x1bf0 <update_lfo_sync+0x9e>
    1bd0:	0b c0       	rjmp	.+22     	; 0x1be8 <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1bd2:	10 92 d0 03 	sts	0x03D0, r1
			
			break;
    1bd6:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			midi_clock.divider = 24; //1:4
    1bd8:	88 e1       	ldi	r24, 0x18	; 24
    1bda:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1bde:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1be0:	8c e0       	ldi	r24, 0x0C	; 12
    1be2:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1be6:	08 95       	ret
			
		case 0b1000:
			midi_clock.divider = 6; //1:16	 		
    1be8:	86 e0       	ldi	r24, 0x06	; 6
    1bea:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1bee:	08 95       	ret
		
		default:
			midi_clock.divider = 0; //need to turn midi sync off here. How?
    1bf0:	10 92 d0 03 	sts	0x03D0, r1
    1bf4:	08 95       	ret

00001bf6 <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1bf6:	80 91 7f 03 	lds	r24, 0x037F
    1bfa:	98 2f       	mov	r25, r24
    1bfc:	92 95       	swap	r25
    1bfe:	96 95       	lsr	r25
    1c00:	96 95       	lsr	r25
    1c02:	93 70       	andi	r25, 0x03	; 3
    1c04:	90 ff       	sbrs	r25, 0
    1c06:	0f c0       	rjmp	.+30     	; 0x1c26 <update_arp_sync+0x30>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1c08:	90 e4       	ldi	r25, 0x40	; 64
    1c0a:	89 27       	eor	r24, r25
    1c0c:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1c10:	80 91 0c 03 	lds	r24, 0x030C
    1c14:	8f 5f       	subi	r24, 0xFF	; 255
    1c16:	80 93 0c 03 	sts	0x030C, r24
    1c1a:	85 30       	cpi	r24, 0x05	; 5
    1c1c:	11 f4       	brne	.+4      	; 0x1c22 <update_arp_sync+0x2c>
    1c1e:	10 92 0c 03 	sts	0x030C, r1
		system_clock.ppqn_counter = 0; //reset counter
    1c22:	10 92 cb 03 	sts	0x03CB, r1
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1c26:	60 91 00 03 	lds	r22, 0x0300
    1c2a:	63 7c       	andi	r22, 0xC3	; 195
    1c2c:	60 93 00 03 	sts	0x0300, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1c30:	20 91 0c 03 	lds	r18, 0x030C
    1c34:	22 23       	and	r18, r18
    1c36:	71 f0       	breq	.+28     	; 0x1c54 <update_arp_sync+0x5e>
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	2f 5f       	subi	r18, 0xFF	; 255
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	41 e0       	ldi	r20, 0x01	; 1
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	ca 01       	movw	r24, r20
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <update_arp_sync+0x54>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	2a 95       	dec	r18
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <update_arp_sync+0x50>
    1c4e:	86 2b       	or	r24, r22
    1c50:	80 93 00 03 	sts	0x0300, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1c54:	80 91 00 03 	lds	r24, 0x0300
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	8c 73       	andi	r24, 0x3C	; 60
    1c5c:	90 70       	andi	r25, 0x00	; 0
    1c5e:	88 30       	cpi	r24, 0x08	; 8
    1c60:	91 05       	cpc	r25, r1
    1c62:	91 f0       	breq	.+36     	; 0x1c88 <update_arp_sync+0x92>
    1c64:	89 30       	cpi	r24, 0x09	; 9
    1c66:	91 05       	cpc	r25, r1
    1c68:	24 f4       	brge	.+8      	; 0x1c72 <update_arp_sync+0x7c>
    1c6a:	84 30       	cpi	r24, 0x04	; 4
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	c1 f4       	brne	.+48     	; 0x1ca0 <update_arp_sync+0xaa>
    1c70:	07 c0       	rjmp	.+14     	; 0x1c80 <update_arp_sync+0x8a>
    1c72:	80 31       	cpi	r24, 0x10	; 16
    1c74:	91 05       	cpc	r25, r1
    1c76:	61 f0       	breq	.+24     	; 0x1c90 <update_arp_sync+0x9a>
    1c78:	80 32       	cpi	r24, 0x20	; 32
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	89 f4       	brne	.+34     	; 0x1ca0 <update_arp_sync+0xaa>
    1c7e:	0c c0       	rjmp	.+24     	; 0x1c98 <update_arp_sync+0xa2>
			
		case 0b00000100:
			system_clock.divider = 48; //1:2
    1c80:	80 e3       	ldi	r24, 0x30	; 48
    1c82:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1c86:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = 24; //1:4
    1c88:	88 e1       	ldi	r24, 0x18	; 24
    1c8a:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1c8e:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = 12; //1:8
    1c90:	8c e0       	ldi	r24, 0x0C	; 12
    1c92:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1c96:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = 6; //1:16	
    1c98:	86 e0       	ldi	r24, 0x06	; 6
    1c9a:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1c9e:	08 95       	ret
			
		default:
			system_clock.divider = 2; //should be 1 but this never turns arp_sync_led off - need to fix this	
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	80 93 ca 03 	sts	0x03CA, r24
    1ca6:	08 95       	ret

00001ca8 <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1ca8:	80 91 7f 03 	lds	r24, 0x037F
    1cac:	80 31       	cpi	r24, 0x10	; 16
    1cae:	69 f4       	brne	.+26     	; 0x1cca <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1cb0:	10 92 7f 03 	sts	0x037F, r1
		
		if (++arp_range == 4) arp_range = 0;
    1cb4:	80 91 0d 03 	lds	r24, 0x030D
    1cb8:	8f 5f       	subi	r24, 0xFF	; 255
    1cba:	80 93 0d 03 	sts	0x030D, r24
    1cbe:	84 30       	cpi	r24, 0x04	; 4
    1cc0:	11 f4       	brne	.+4      	; 0x1cc6 <update_arp_range+0x1e>
    1cc2:	10 92 0d 03 	sts	0x030D, r1
		arp.step_position = 0; //reset step position if range changes
    1cc6:	10 92 86 03 	sts	0x0386, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1cca:	80 91 fe 02 	lds	r24, 0x02FE
    1cce:	8d 7f       	andi	r24, 0xFD	; 253
    1cd0:	80 93 fe 02 	sts	0x02FE, r24
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1cd4:	80 91 00 03 	lds	r24, 0x0300
    1cd8:	8f 73       	andi	r24, 0x3F	; 63
    1cda:	80 93 00 03 	sts	0x0300, r24
	
	arp.range = arp_range;
    1cde:	80 91 0d 03 	lds	r24, 0x030D
    1ce2:	80 93 84 03 	sts	0x0384, r24
	
	update_arp_sequence(); //update sequence with new settings
    1ce6:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1cea:	80 91 0d 03 	lds	r24, 0x030D
    1cee:	82 30       	cpi	r24, 0x02	; 2
    1cf0:	51 f0       	breq	.+20     	; 0x1d06 <update_arp_range+0x5e>
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	71 f0       	breq	.+28     	; 0x1d12 <update_arp_range+0x6a>
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	89 f4       	brne	.+34     	; 0x1d1c <update_arp_range+0x74>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1cfa:	80 91 fe 02 	lds	r24, 0x02FE
    1cfe:	82 60       	ori	r24, 0x02	; 2
    1d00:	80 93 fe 02 	sts	0x02FE, r24
			break;
    1d04:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1d06:	80 91 00 03 	lds	r24, 0x0300
    1d0a:	80 64       	ori	r24, 0x40	; 64
    1d0c:	80 93 00 03 	sts	0x0300, r24
			break;
    1d10:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1d12:	80 91 00 03 	lds	r24, 0x0300
    1d16:	80 68       	ori	r24, 0x80	; 128
    1d18:	80 93 00 03 	sts	0x0300, r24
    1d1c:	08 95       	ret

00001d1e <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1d1e:	80 91 7f 03 	lds	r24, 0x037F
    1d22:	98 2f       	mov	r25, r24
    1d24:	92 95       	swap	r25
    1d26:	96 95       	lsr	r25
    1d28:	97 70       	andi	r25, 0x07	; 7
    1d2a:	90 ff       	sbrs	r25, 0
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <update_arp_mode+0x2e>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1d2e:	90 e2       	ldi	r25, 0x20	; 32
    1d30:	89 27       	eor	r24, r25
    1d32:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_mode == 5) arp_mode = 0;
    1d36:	80 91 0e 03 	lds	r24, 0x030E
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	80 93 0e 03 	sts	0x030E, r24
    1d40:	85 30       	cpi	r24, 0x05	; 5
    1d42:	11 f4       	brne	.+4      	; 0x1d48 <update_arp_mode+0x2a>
    1d44:	10 92 0e 03 	sts	0x030E, r1
		arp.step_position = 0; //reset step position if mode changes
    1d48:	10 92 86 03 	sts	0x0386, r1
		
	}

	arp.clock_source = INTERNAL_CLOCK;	
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	80 93 88 03 	sts	0x0388, r24

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1d52:	90 91 fe 02 	lds	r25, 0x02FE
    1d56:	93 7c       	andi	r25, 0xC3	; 195
    1d58:	90 93 fe 02 	sts	0x02FE, r25
	
	switch(arp_mode) {
    1d5c:	80 91 0e 03 	lds	r24, 0x030E
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	81 f0       	breq	.+32     	; 0x1d84 <update_arp_mode+0x66>
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	28 f0       	brcs	.+10     	; 0x1d72 <update_arp_mode+0x54>
    1d68:	82 30       	cpi	r24, 0x02	; 2
    1d6a:	91 f0       	breq	.+36     	; 0x1d90 <update_arp_mode+0x72>
    1d6c:	83 30       	cpi	r24, 0x03	; 3
    1d6e:	f1 f4       	brne	.+60     	; 0x1dac <update_arp_mode+0x8e>
    1d70:	16 c0       	rjmp	.+44     	; 0x1d9e <update_arp_mode+0x80>
		
		case 0:
		
			//turn arp off
			arp.clock_source = OFF;
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	80 93 88 03 	sts	0x0388, r24
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    1d78:	80 91 b0 02 	lds	r24, 0x02B0
    1d7c:	88 23       	and	r24, r24
    1d7e:	e1 f4       	brne	.+56     	; 0x1db8 <update_arp_mode+0x9a>
    1d80:	89 98       	cbi	0x11, 1	; 17
    1d82:	1a c0       	rjmp	.+52     	; 0x1db8 <update_arp_mode+0x9a>
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1d84:	94 62       	ori	r25, 0x24	; 36
    1d86:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP;
    1d8a:	10 92 89 03 	sts	0x0389, r1
			break;	
    1d8e:	14 c0       	rjmp	.+40     	; 0x1db8 <update_arp_mode+0x9a>
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1d90:	94 61       	ori	r25, 0x14	; 20
    1d92:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = DOWN;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	80 93 89 03 	sts	0x0389, r24
			break;
    1d9c:	0d c0       	rjmp	.+26     	; 0x1db8 <update_arp_mode+0x9a>
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1d9e:	94 63       	ori	r25, 0x34	; 52
    1da0:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP_DOWN;
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	80 93 89 03 	sts	0x0389, r24
			break;
    1daa:	06 c0       	rjmp	.+12     	; 0x1db8 <update_arp_mode+0x9a>
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1dac:	9c 60       	ori	r25, 0x0C	; 12
    1dae:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = RANDOM;
    1db2:	84 e0       	ldi	r24, 0x04	; 4
    1db4:	80 93 89 03 	sts	0x0389, r24
			
					
		
	}
	
	update_arp_sequence(); //update arp sequence with new mode
    1db8:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	



}
    1dbc:	08 95       	ret

00001dbe <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1dbe:	90 91 7e 03 	lds	r25, 0x037E
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1dc2:	80 91 80 03 	lds	r24, 0x0380
    1dc6:	86 95       	lsr	r24
    1dc8:	86 95       	lsr	r24
    1dca:	68 2f       	mov	r22, r24
    1dcc:	67 95       	ror	r22
    1dce:	66 27       	eor	r22, r22
    1dd0:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1dd2:	29 2f       	mov	r18, r25
    1dd4:	21 70       	andi	r18, 0x01	; 1
    1dd6:	26 2b       	or	r18, r22
    1dd8:	69 2f       	mov	r22, r25
    1dda:	66 1f       	adc	r22, r22
    1ddc:	66 27       	eor	r22, r22
    1dde:	66 1f       	adc	r22, r22
    1de0:	66 0f       	add	r22, r22
    1de2:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1de4:	29 2f       	mov	r18, r25
    1de6:	26 95       	lsr	r18
    1de8:	26 95       	lsr	r18
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	21 70       	andi	r18, 0x01	; 1
    1dee:	30 70       	andi	r19, 0x00	; 0
    1df0:	d9 01       	movw	r26, r18
    1df2:	aa 0f       	add	r26, r26
    1df4:	bb 1f       	adc	r27, r27
    1df6:	aa 0f       	add	r26, r26
    1df8:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1dfa:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1dfc:	a9 2f       	mov	r26, r25
    1dfe:	a6 95       	lsr	r26
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	a1 70       	andi	r26, 0x01	; 1
    1e04:	b0 70       	andi	r27, 0x00	; 0
    1e06:	fd 01       	movw	r30, r26
    1e08:	ee 0f       	add	r30, r30
    1e0a:	ff 1f       	adc	r31, r31
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	ee 0f       	add	r30, r30
    1e12:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e14:	a6 2f       	mov	r26, r22
    1e16:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1e18:	e9 2f       	mov	r30, r25
    1e1a:	e2 95       	swap	r30
    1e1c:	ef 70       	andi	r30, 0x0F	; 15
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	e1 70       	andi	r30, 0x01	; 1
    1e22:	f0 70       	andi	r31, 0x00	; 0
    1e24:	bf 01       	movw	r22, r30
    1e26:	62 95       	swap	r22
    1e28:	72 95       	swap	r23
    1e2a:	70 7f       	andi	r23, 0xF0	; 240
    1e2c:	76 27       	eor	r23, r22
    1e2e:	60 7f       	andi	r22, 0xF0	; 240
    1e30:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e32:	ea 2f       	mov	r30, r26
    1e34:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1e36:	69 2f       	mov	r22, r25
    1e38:	62 95       	swap	r22
    1e3a:	66 95       	lsr	r22
    1e3c:	67 70       	andi	r22, 0x07	; 7
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	61 70       	andi	r22, 0x01	; 1
    1e42:	70 70       	andi	r23, 0x00	; 0
    1e44:	ab 01       	movw	r20, r22
    1e46:	44 0f       	add	r20, r20
    1e48:	55 1f       	adc	r21, r21
    1e4a:	42 95       	swap	r20
    1e4c:	52 95       	swap	r21
    1e4e:	50 7f       	andi	r21, 0xF0	; 240
    1e50:	54 27       	eor	r21, r20
    1e52:	40 7f       	andi	r20, 0xF0	; 240
    1e54:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e56:	6e 2f       	mov	r22, r30
    1e58:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1e5a:	49 2f       	mov	r20, r25
    1e5c:	42 95       	swap	r20
    1e5e:	46 95       	lsr	r20
    1e60:	46 95       	lsr	r20
    1e62:	43 70       	andi	r20, 0x03	; 3
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	41 70       	andi	r20, 0x01	; 1
    1e68:	50 70       	andi	r21, 0x00	; 0
    1e6a:	9a 01       	movw	r18, r20
    1e6c:	00 24       	eor	r0, r0
    1e6e:	36 95       	lsr	r19
    1e70:	27 95       	ror	r18
    1e72:	07 94       	ror	r0
    1e74:	36 95       	lsr	r19
    1e76:	27 95       	ror	r18
    1e78:	07 94       	ror	r0
    1e7a:	32 2f       	mov	r19, r18
    1e7c:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e7e:	26 2b       	or	r18, r22
    1e80:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1e84:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1e86:	81 95       	neg	r24
    1e88:	89 27       	eor	r24, r25
    1e8a:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1e8c:	89 27       	eor	r24, r25
    1e8e:	0e 94 48 16 	call	0x2c90	; 0x2c90 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1e92:	ed ed       	ldi	r30, 0xDD	; 221
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1e98:	90 91 80 03 	lds	r25, 0x0380
    1e9c:	96 95       	lsr	r25
    1e9e:	96 95       	lsr	r25
    1ea0:	96 95       	lsr	r25
    1ea2:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1ea4:	91 95       	neg	r25
    1ea6:	80 81       	ld	r24, Z
    1ea8:	89 27       	eor	r24, r25
    1eaa:	80 71       	andi	r24, 0x10	; 16
    1eac:	82 27       	eor	r24, r18
    1eae:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1eb0:	ee ef       	ldi	r30, 0xFE	; 254
    1eb2:	f2 e0       	ldi	r31, 0x02	; 2
    1eb4:	80 81       	ld	r24, Z
    1eb6:	98 27       	eor	r25, r24
    1eb8:	91 70       	andi	r25, 0x01	; 1
    1eba:	89 27       	eor	r24, r25
    1ebc:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1ebe:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1ec2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1ec6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    1eca:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <update_arp_sync>
	update_arp_range();
    1ece:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <update_arp_range>
	update_arp_mode();
    1ed2:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    1ed6:	08 95       	ret

00001ed8 <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1edc:	90 91 07 03 	lds	r25, 0x0307
    1ee0:	95 30       	cpi	r25, 0x05	; 5
    1ee2:	01 f5       	brne	.+64     	; 0x1f24 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1ee4:	87 e0       	ldi	r24, 0x07	; 7
    1ee6:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1ee8:	cd ed       	ldi	r28, 0xDD	; 221
    1eea:	d0 e0       	ldi	r29, 0x00	; 0
    1eec:	88 81       	ld	r24, Y
    1eee:	80 62       	ori	r24, 0x20	; 32
    1ef0:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1ef2:	88 81       	ld	r24, Y
    1ef4:	8f 7d       	andi	r24, 0xDF	; 223
    1ef6:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1ef8:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1efa:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1efe:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f00:	88 81       	ld	r24, Y
    1f02:	80 62       	ori	r24, 0x20	; 32
    1f04:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f06:	88 81       	ld	r24, Y
    1f08:	8f 7d       	andi	r24, 0xDF	; 223
    1f0a:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f0c:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1f0e:	80 91 ff 02 	lds	r24, 0x02FF
    1f12:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1f14:	80 68       	ori	r24, 0x80	; 128
    1f16:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1f1a:	0e 94 8f 01 	call	0x31e	; 0x31e <setup_system_clock>

		current_patch.mode = MEMORY;
    1f1e:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1f22:	63 c0       	rjmp	.+198    	; 0x1fea <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1f24:	80 91 80 03 	lds	r24, 0x0380
    1f28:	28 2f       	mov	r18, r24
    1f2a:	22 95       	swap	r18
    1f2c:	26 95       	lsr	r18
    1f2e:	26 95       	lsr	r18
    1f30:	23 70       	andi	r18, 0x03	; 3
    1f32:	20 ff       	sbrs	r18, 0
    1f34:	15 c0       	rjmp	.+42     	; 0x1f60 <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1f36:	20 e4       	ldi	r18, 0x40	; 64
    1f38:	82 27       	eor	r24, r18
    1f3a:	80 93 80 03 	sts	0x0380, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1f3e:	80 91 03 03 	lds	r24, 0x0303
    1f42:	8f 5f       	subi	r24, 0xFF	; 255
    1f44:	80 93 03 03 	sts	0x0303, r24
    1f48:	85 32       	cpi	r24, 0x25	; 37
    1f4a:	21 f4       	brne	.+8      	; 0x1f54 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1f4c:	84 e2       	ldi	r24, 0x24	; 36
    1f4e:	80 93 03 03 	sts	0x0303, r24
    1f52:	06 c0       	rjmp	.+12     	; 0x1f60 <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1f54:	93 30       	cpi	r25, 0x03	; 3
    1f56:	21 f0       	breq	.+8      	; 0x1f60 <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1f58:	0e 94 fe 09 	call	0x13fc	; 0x13fc <load_patch>
			update_patch();
    1f5c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1f60:	80 91 80 03 	lds	r24, 0x0380
    1f64:	98 2f       	mov	r25, r24
    1f66:	92 95       	swap	r25
    1f68:	96 95       	lsr	r25
    1f6a:	97 70       	andi	r25, 0x07	; 7
    1f6c:	90 ff       	sbrs	r25, 0
    1f6e:	15 c0       	rjmp	.+42     	; 0x1f9a <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1f70:	90 e2       	ldi	r25, 0x20	; 32
    1f72:	89 27       	eor	r24, r25
    1f74:	80 93 80 03 	sts	0x0380, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1f78:	80 91 03 03 	lds	r24, 0x0303
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	19 f0       	breq	.+6      	; 0x1f86 <update_patch_programmer+0xae>
    1f80:	81 50       	subi	r24, 0x01	; 1
    1f82:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1f86:	80 91 07 03 	lds	r24, 0x0307
    1f8a:	83 30       	cpi	r24, 0x03	; 3
    1f8c:	31 f0       	breq	.+12     	; 0x1f9a <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    1f8e:	80 91 03 03 	lds	r24, 0x0303
    1f92:	0e 94 fe 09 	call	0x13fc	; 0x13fc <load_patch>
			update_patch();
    1f96:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1f9a:	80 91 80 03 	lds	r24, 0x0380
    1f9e:	98 2f       	mov	r25, r24
    1fa0:	92 95       	swap	r25
    1fa2:	9f 70       	andi	r25, 0x0F	; 15
    1fa4:	90 ff       	sbrs	r25, 0
    1fa6:	15 c0       	rjmp	.+42     	; 0x1fd2 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1fa8:	90 e1       	ldi	r25, 0x10	; 16
    1faa:	89 27       	eor	r24, r25
    1fac:	80 93 80 03 	sts	0x0380, r24
		if (current_patch.mode != WRITE) {
    1fb0:	90 91 07 03 	lds	r25, 0x0307
    1fb4:	93 30       	cpi	r25, 0x03	; 3
    1fb6:	49 f0       	breq	.+18     	; 0x1fca <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1fb8:	8f 77       	andi	r24, 0x7F	; 127
    1fba:	80 93 80 03 	sts	0x0380, r24
			current_patch.mode = WRITE;
    1fbe:	83 e0       	ldi	r24, 0x03	; 3
    1fc0:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1fc4:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lock_pots>
    1fc8:	04 c0       	rjmp	.+8      	; 0x1fd2 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1fca:	80 91 03 03 	lds	r24, 0x0303
    1fce:	0e 94 0b 08 	call	0x1016	; 0x1016 <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1fd2:	80 91 80 03 	lds	r24, 0x0380
    1fd6:	88 23       	and	r24, r24
    1fd8:	44 f4       	brge	.+16     	; 0x1fea <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1fda:	80 68       	ori	r24, 0x80	; 128
    1fdc:	80 93 80 03 	sts	0x0380, r24
		current_patch.mode = MANUAL;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    1fe6:	0e 94 fa 07 	call	0xff4	; 0xff4 <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	08 95       	ret

00001ff0 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1ff0:	88 ed       	ldi	r24, 0xD8	; 216
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1ffc:	81 ee       	ldi	r24, 0xE1	; 225
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2008:	82 ee       	ldi	r24, 0xE2	; 226
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2014:	83 eb       	ldi	r24, 0xB3	; 179
    2016:	92 e0       	ldi	r25, 0x02	; 2
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	70 e0       	ldi	r23, 0x00	; 0
    201c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2020:	8a ed       	ldi	r24, 0xDA	; 218
    2022:	91 e0       	ldi	r25, 0x01	; 1
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    202c:	8f ed       	ldi	r24, 0xDF	; 223
    202e:	91 e0       	ldi	r25, 0x01	; 1
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2038:	80 ee       	ldi	r24, 0xE0	; 224
    203a:	91 e0       	ldi	r25, 0x01	; 1
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2044:	81 ed       	ldi	r24, 0xD1	; 209
    2046:	91 e0       	ldi	r25, 0x01	; 1
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2050:	86 ed       	ldi	r24, 0xD6	; 214
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    205c:	82 ed       	ldi	r24, 0xD2	; 210
    205e:	91 e0       	ldi	r25, 0x01	; 1
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	70 e0       	ldi	r23, 0x00	; 0
    2064:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2068:	83 ed       	ldi	r24, 0xD3	; 211
    206a:	91 e0       	ldi	r25, 0x01	; 1
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    2074:	84 ed       	ldi	r24, 0xD4	; 212
    2076:	91 e0       	ldi	r25, 0x01	; 1
    2078:	6f ef       	ldi	r22, 0xFF	; 255
    207a:	7f e3       	ldi	r23, 0x3F	; 63
    207c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    2080:	85 ed       	ldi	r24, 0xD5	; 213
    2082:	91 e0       	ldi	r25, 0x01	; 1
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    208c:	89 ed       	ldi	r24, 0xD9	; 217
    208e:	91 e0       	ldi	r25, 0x01	; 1
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2098:	8e ec       	ldi	r24, 0xCE	; 206
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    20a4:	8c ec       	ldi	r24, 0xCC	; 204
    20a6:	91 e0       	ldi	r25, 0x01	; 1
    20a8:	60 e0       	ldi	r22, 0x00	; 0
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    20b0:	8a ec       	ldi	r24, 0xCA	; 202
    20b2:	91 e0       	ldi	r25, 0x01	; 1
    20b4:	6f ef       	ldi	r22, 0xFF	; 255
    20b6:	7f e3       	ldi	r23, 0x3F	; 63
    20b8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    20bc:	88 ec       	ldi	r24, 0xC8	; 200
    20be:	91 e0       	ldi	r25, 0x01	; 1
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	70 e0       	ldi	r23, 0x00	; 0
    20c4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    20c8:	80 ed       	ldi	r24, 0xD0	; 208
    20ca:	91 e0       	ldi	r25, 0x01	; 1
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    20d4:	83 ee       	ldi	r24, 0xE3	; 227
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	70 e0       	ldi	r23, 0x00	; 0
    20dc:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    20e0:	84 ee       	ldi	r24, 0xE4	; 228
    20e2:	91 e0       	ldi	r25, 0x01	; 1
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	70 e0       	ldi	r23, 0x00	; 0
    20e8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
}	
    20ec:	08 95       	ret

000020ee <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    20ee:	2f 92       	push	r2
    20f0:	3f 92       	push	r3
    20f2:	4f 92       	push	r4
    20f4:	5f 92       	push	r5
    20f6:	6f 92       	push	r6
    20f8:	7f 92       	push	r7
    20fa:	8f 92       	push	r8
    20fc:	9f 92       	push	r9
    20fe:	af 92       	push	r10
    2100:	bf 92       	push	r11
    2102:	cf 92       	push	r12
    2104:	df 92       	push	r13
    2106:	ef 92       	push	r14
    2108:	ff 92       	push	r15
    210a:	0f 93       	push	r16
    210c:	1f 93       	push	r17
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	2c 97       	sbiw	r28, 0x0c	; 12
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	08 2f       	mov	r16, r24
    2124:	78 87       	std	Y+8, r23	; 0x08
    2126:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    2128:	80 91 7b 03 	lds	r24, 0x037B
    212c:	83 60       	ori	r24, 0x03	; 3
    212e:	80 93 7b 03 	sts	0x037B, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    2132:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    2136:	10 92 7a 03 	sts	0x037A, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    213a:	0f 30       	cpi	r16, 0x0F	; 15
    213c:	e1 f4       	brne	.+56     	; 0x2176 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    213e:	0f 2e       	mov	r0, r31
    2140:	f6 ee       	ldi	r31, 0xE6	; 230
    2142:	4f 2e       	mov	r4, r31
    2144:	f1 e0       	ldi	r31, 0x01	; 1
    2146:	5f 2e       	mov	r5, r31
    2148:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    214a:	0f 2e       	mov	r0, r31
    214c:	fe ed       	ldi	r31, 0xDE	; 222
    214e:	2f 2e       	mov	r2, r31
    2150:	f1 e0       	ldi	r31, 0x01	; 1
    2152:	3f 2e       	mov	r3, r31
    2154:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    2156:	23 ee       	ldi	r18, 0xE3	; 227
    2158:	31 e0       	ldi	r19, 0x01	; 1
    215a:	3a 83       	std	Y+2, r19	; 0x02
    215c:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    215e:	0f 2e       	mov	r0, r31
    2160:	fc ed       	ldi	r31, 0xDC	; 220
    2162:	8f 2e       	mov	r8, r31
    2164:	f1 e0       	ldi	r31, 0x01	; 1
    2166:	9f 2e       	mov	r9, r31
    2168:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    216a:	82 e7       	ldi	r24, 0x72	; 114
    216c:	96 e0       	ldi	r25, 0x06	; 6
    216e:	9a 87       	std	Y+10, r25	; 0x0a
    2170:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	1b c0       	rjmp	.+54     	; 0x21ac <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2176:	0f 2e       	mov	r0, r31
    2178:	f5 ee       	ldi	r31, 0xE5	; 229
    217a:	4f 2e       	mov	r4, r31
    217c:	f1 e0       	ldi	r31, 0x01	; 1
    217e:	5f 2e       	mov	r5, r31
    2180:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    2182:	0f 2e       	mov	r0, r31
    2184:	f7 ed       	ldi	r31, 0xD7	; 215
    2186:	2f 2e       	mov	r2, r31
    2188:	f1 e0       	ldi	r31, 0x01	; 1
    218a:	3f 2e       	mov	r3, r31
    218c:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    218e:	e4 ee       	ldi	r30, 0xE4	; 228
    2190:	f1 e0       	ldi	r31, 0x01	; 1
    2192:	fa 83       	std	Y+2, r31	; 0x02
    2194:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2196:	0f 2e       	mov	r0, r31
    2198:	fd ed       	ldi	r31, 0xDD	; 221
    219a:	8f 2e       	mov	r8, r31
    219c:	f1 e0       	ldi	r31, 0x01	; 1
    219e:	9f 2e       	mov	r9, r31
    21a0:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    21a2:	20 e7       	ldi	r18, 0x70	; 112
    21a4:	36 e0       	ldi	r19, 0x06	; 6
    21a6:	3a 87       	std	Y+10, r19	; 0x0a
    21a8:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    21aa:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    21ac:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    21ae:	ed ed       	ldi	r30, 0xDD	; 221
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	80 64       	ori	r24, 0x40	; 64
    21b6:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    21b8:	80 81       	ld	r24, Z
    21ba:	8f 7b       	andi	r24, 0xBF	; 191
    21bc:	80 83       	st	Z, r24
	DATA_BUS = 0;
    21be:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    21c0:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    21c2:	84 b5       	in	r24, 0x24	; 36
    21c4:	8f 60       	ori	r24, 0x0F	; 15
    21c6:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    21cc:	ee e6       	ldi	r30, 0x6E	; 110
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	90 81       	ld	r25, Z
    21d2:	92 60       	ori	r25, 0x02	; 2
    21d4:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    21d6:	80 93 7c 03 	sts	0x037C, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    21da:	8d e0       	ldi	r24, 0x0D	; 13
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	9c 83       	std	Y+4, r25	; 0x04
    21e0:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    21e2:	80 2f       	mov	r24, r16
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	8c 01       	movw	r16, r24
    21e8:	0f 5f       	subi	r16, 0xFF	; 255
    21ea:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    21ec:	0f 2e       	mov	r0, r31
    21ee:	f8 ed       	ldi	r31, 0xD8	; 216
    21f0:	ef 2e       	mov	r14, r31
    21f2:	f1 e0       	ldi	r31, 0x01	; 1
    21f4:	ff 2e       	mov	r15, r31
    21f6:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    21f8:	0f 2e       	mov	r0, r31
    21fa:	f4 ed       	ldi	r31, 0xD4	; 212
    21fc:	cf 2e       	mov	r12, r31
    21fe:	f1 e0       	ldi	r31, 0x01	; 1
    2200:	df 2e       	mov	r13, r31
    2202:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    2204:	0f 2e       	mov	r0, r31
    2206:	fa ec       	ldi	r31, 0xCA	; 202
    2208:	af 2e       	mov	r10, r31
    220a:	f1 e0       	ldi	r31, 0x01	; 1
    220c:	bf 2e       	mov	r11, r31
    220e:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    2210:	0f 2e       	mov	r0, r31
    2212:	fb ec       	ldi	r31, 0xCB	; 203
    2214:	6f 2e       	mov	r6, r31
    2216:	f1 e0       	ldi	r31, 0x01	; 1
    2218:	7f 2e       	mov	r7, r31
    221a:	f0 2d       	mov	r31, r0
    221c:	e0 e0       	ldi	r30, 0x00	; 0
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	fc 87       	std	Y+12, r31	; 0x0c
    2222:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    2224:	21 e0       	ldi	r18, 0x01	; 1
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	0b 80       	ldd	r0, Y+3	; 0x03
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <set_vco_init_cv+0x142>
    222c:	22 0f       	add	r18, r18
    222e:	33 1f       	adc	r19, r19
    2230:	0a 94       	dec	r0
    2232:	e2 f7       	brpl	.-8      	; 0x222c <set_vco_init_cv+0x13e>
    2234:	3e 83       	std	Y+6, r19	; 0x06
    2236:	2d 83       	std	Y+5, r18	; 0x05
    2238:	8b 85       	ldd	r24, Y+11	; 0x0b
    223a:	9c 85       	ldd	r25, Y+12	; 0x0c
    223c:	82 2b       	or	r24, r18
    223e:	93 2b       	or	r25, r19
    2240:	9c 87       	std	Y+12, r25	; 0x0c
    2242:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    2244:	c4 01       	movw	r24, r8
    2246:	6b 85       	ldd	r22, Y+11	; 0x0b
    2248:	7c 85       	ldd	r23, Y+12	; 0x0c
    224a:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
		
		
		count_finished = FALSE;
    224e:	10 92 7a 03 	sts	0x037A, r1
		period_counter = 0;
    2252:	10 92 7d 03 	sts	0x037D, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    2256:	8f e0       	ldi	r24, 0x0F	; 15
    2258:	e8 e1       	ldi	r30, 0x18	; 24
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	a8 95       	wdr
    2262:	e0 93 60 00 	sts	0x0060, r30
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    226c:	80 91 7a 03 	lds	r24, 0x037A
    2270:	88 23       	and	r24, r24
    2272:	89 f5       	brne	.+98     	; 0x22d6 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    2274:	c8 01       	movw	r24, r16
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	0e 94 db 02 	call	0x5b6	; 0x5b6 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    227c:	c4 01       	movw	r24, r8
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    2286:	c1 01       	movw	r24, r2
    2288:	6f ef       	ldi	r22, 0xFF	; 255
    228a:	7f e3       	ldi	r23, 0x3F	; 63
    228c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    2290:	c7 01       	movw	r24, r14
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    229a:	c6 01       	movw	r24, r12
    229c:	6f ef       	ldi	r22, 0xFF	; 255
    229e:	7f e3       	ldi	r23, 0x3F	; 63
    22a0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    22a4:	c5 01       	movw	r24, r10
    22a6:	6f ef       	ldi	r22, 0xFF	; 255
    22a8:	7f e3       	ldi	r23, 0x3F	; 63
    22aa:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    22ae:	c3 01       	movw	r24, r6
    22b0:	6f ef       	ldi	r22, 0xFF	; 255
    22b2:	7f e3       	ldi	r23, 0x3F	; 63
    22b4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	6f ef       	ldi	r22, 0xFF	; 255
    22be:	7f e3       	ldi	r23, 0x3F	; 63
    22c0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    22c4:	c2 01       	movw	r24, r4
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    22ce:	80 91 7a 03 	lds	r24, 0x037A
    22d2:	88 23       	and	r24, r24
    22d4:	79 f2       	breq	.-98     	; 0x2274 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    22d6:	88 e1       	ldi	r24, 0x18	; 24
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	80 93 60 00 	sts	0x0060, r24
    22e0:	10 92 60 00 	sts	0x0060, r1
    22e4:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    22e6:	80 91 78 03 	lds	r24, 0x0378
    22ea:	90 91 79 03 	lds	r25, 0x0379
    22ee:	ef 81       	ldd	r30, Y+7	; 0x07
    22f0:	f8 85       	ldd	r31, Y+8	; 0x08
    22f2:	e8 17       	cp	r30, r24
    22f4:	f9 07       	cpc	r31, r25
    22f6:	20 f0       	brcs	.+8      	; 0x2300 <set_vco_init_cv+0x212>
    22f8:	80 91 af 02 	lds	r24, 0x02AF
    22fc:	88 23       	and	r24, r24
    22fe:	51 f4       	brne	.+20     	; 0x2314 <set_vco_init_cv+0x226>
    2300:	8d 81       	ldd	r24, Y+5	; 0x05
    2302:	9e 81       	ldd	r25, Y+6	; 0x06
    2304:	80 95       	com	r24
    2306:	90 95       	com	r25
    2308:	2b 85       	ldd	r18, Y+11	; 0x0b
    230a:	3c 85       	ldd	r19, Y+12	; 0x0c
    230c:	28 23       	and	r18, r24
    230e:	39 23       	and	r19, r25
    2310:	3c 87       	std	Y+12, r19	; 0x0c
    2312:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
    2324:	ef ef       	ldi	r30, 0xFF	; 255
    2326:	8f 3f       	cpi	r24, 0xFF	; 255
    2328:	9e 07       	cpc	r25, r30
    232a:	09 f0       	breq	.+2      	; 0x232e <set_vco_init_cv+0x240>
    232c:	7b cf       	rjmp	.-266    	; 0x2224 <set_vco_init_cv+0x136>
    232e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2330:	3c 85       	ldd	r19, Y+12	; 0x0c
    2332:	3e 83       	std	Y+6, r19	; 0x06
    2334:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	91 e0       	ldi	r25, 0x01	; 1
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    2342:	89 ec       	ldi	r24, 0xC9	; 201
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	70 e0       	ldi	r23, 0x00	; 0
    234a:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    234e:	84 ed       	ldi	r24, 0xD4	; 212
    2350:	91 e0       	ldi	r25, 0x01	; 1
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    235a:	88 ed       	ldi	r24, 0xD8	; 216
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    2366:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    2368:	ee e6       	ldi	r30, 0x6E	; 110
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	8d 7f       	andi	r24, 0xFD	; 253
    2370:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2372:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	6d 81       	ldd	r22, Y+5	; 0x05
    237a:	7e 81       	ldd	r23, Y+6	; 0x06
    237c:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	2c 96       	adiw	r28, 0x0c	; 12
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	ff 90       	pop	r15
    239a:	ef 90       	pop	r14
    239c:	df 90       	pop	r13
    239e:	cf 90       	pop	r12
    23a0:	bf 90       	pop	r11
    23a2:	af 90       	pop	r10
    23a4:	9f 90       	pop	r9
    23a6:	8f 90       	pop	r8
    23a8:	7f 90       	pop	r7
    23aa:	6f 90       	pop	r6
    23ac:	5f 90       	pop	r5
    23ae:	4f 90       	pop	r4
    23b0:	3f 90       	pop	r3
    23b2:	2f 90       	pop	r2
    23b4:	08 95       	ret

000023b6 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    23b6:	2f 92       	push	r2
    23b8:	3f 92       	push	r3
    23ba:	4f 92       	push	r4
    23bc:	5f 92       	push	r5
    23be:	6f 92       	push	r6
    23c0:	7f 92       	push	r7
    23c2:	8f 92       	push	r8
    23c4:	9f 92       	push	r9
    23c6:	af 92       	push	r10
    23c8:	bf 92       	push	r11
    23ca:	cf 92       	push	r12
    23cc:	df 92       	push	r13
    23ce:	ef 92       	push	r14
    23d0:	ff 92       	push	r15
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	c0 54       	subi	r28, 0x40	; 64
    23e0:	d0 40       	sbci	r29, 0x00	; 0
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    23ee:	de 01       	movw	r26, r28
    23f0:	11 96       	adiw	r26, 0x01	; 1
    23f2:	e0 e3       	ldi	r30, 0x30	; 48
    23f4:	f2 e0       	ldi	r31, 0x02	; 2
    23f6:	80 e3       	ldi	r24, 0x30	; 48
    23f8:	01 90       	ld	r0, Z+
    23fa:	0d 92       	st	X+, r0
    23fc:	81 50       	subi	r24, 0x01	; 1
    23fe:	e1 f7       	brne	.-8      	; 0x23f8 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    2400:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    2404:	0f 30       	cpi	r16, 0x0F	; 15
    2406:	11 f5       	brne	.+68     	; 0x244c <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    2408:	40 90 75 03 	lds	r4, 0x0375
    240c:	50 90 76 03 	lds	r5, 0x0376
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2410:	0f 2e       	mov	r0, r31
    2412:	f6 ee       	ldi	r31, 0xE6	; 230
    2414:	8f 2e       	mov	r8, r31
    2416:	f1 e0       	ldi	r31, 0x01	; 1
    2418:	9f 2e       	mov	r9, r31
    241a:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    241c:	0f 2e       	mov	r0, r31
    241e:	fe ed       	ldi	r31, 0xDE	; 222
    2420:	2f 2e       	mov	r2, r31
    2422:	f1 e0       	ldi	r31, 0x01	; 1
    2424:	3f 2e       	mov	r3, r31
    2426:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    2428:	23 ee       	ldi	r18, 0xE3	; 227
    242a:	31 e0       	ldi	r19, 0x01	; 1
    242c:	3a ab       	sts	0x5a, r19
    242e:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2430:	0f 2e       	mov	r0, r31
    2432:	fc ed       	ldi	r31, 0xDC	; 220
    2434:	6f 2e       	mov	r6, r31
    2436:	f1 e0       	ldi	r31, 0x01	; 1
    2438:	7f 2e       	mov	r7, r31
    243a:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    243c:	01 e5       	ldi	r16, 0x51	; 81
    243e:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2440:	cc 24       	eor	r12, r12
    2442:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    2444:	ee 24       	eor	r14, r14
    2446:	68 94       	set
    2448:	e1 f8       	bld	r14, 1
    244a:	22 c0       	rjmp	.+68     	; 0x2490 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    244c:	40 90 73 03 	lds	r4, 0x0373
    2450:	50 90 74 03 	lds	r5, 0x0374
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2454:	0f 2e       	mov	r0, r31
    2456:	f5 ee       	ldi	r31, 0xE5	; 229
    2458:	8f 2e       	mov	r8, r31
    245a:	f1 e0       	ldi	r31, 0x01	; 1
    245c:	9f 2e       	mov	r9, r31
    245e:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2460:	0f 2e       	mov	r0, r31
    2462:	f7 ed       	ldi	r31, 0xD7	; 215
    2464:	2f 2e       	mov	r2, r31
    2466:	f1 e0       	ldi	r31, 0x01	; 1
    2468:	3f 2e       	mov	r3, r31
    246a:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    246c:	44 ee       	ldi	r20, 0xE4	; 228
    246e:	51 e0       	ldi	r21, 0x01	; 1
    2470:	5a ab       	sts	0x5a, r21
    2472:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2474:	0f 2e       	mov	r0, r31
    2476:	fd ed       	ldi	r31, 0xDD	; 221
    2478:	6f 2e       	mov	r6, r31
    247a:	f1 e0       	ldi	r31, 0x01	; 1
    247c:	7f 2e       	mov	r7, r31
    247e:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    2480:	0f e2       	ldi	r16, 0x2F	; 47
    2482:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    2484:	cc 24       	eor	r12, r12
    2486:	68 94       	set
    2488:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    248a:	ee 24       	eor	r14, r14
    248c:	68 94       	set
    248e:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    2490:	c3 01       	movw	r24, r6
    2492:	b2 01       	movw	r22, r4
    2494:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    2498:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    249a:	ed ed       	ldi	r30, 0xDD	; 221
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	80 64       	ori	r24, 0x40	; 64
    24a2:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    24a4:	80 81       	ld	r24, Z
    24a6:	8f 7b       	andi	r24, 0xBF	; 191
    24a8:	80 83       	st	Z, r24
		DATA_BUS = 0;
    24aa:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    24ac:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	80 93 7c 03 	sts	0x037C, r24
		
		compare_match_counter = 0;	
    24b4:	10 92 77 03 	sts	0x0377, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    24b8:	8c 2d       	mov	r24, r12
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	24 e6       	ldi	r18, 0x64	; 100
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	82 9f       	mul	r24, r18
    24c2:	d0 01       	movw	r26, r0
    24c4:	83 9f       	mul	r24, r19
    24c6:	b0 0d       	add	r27, r0
    24c8:	92 9f       	mul	r25, r18
    24ca:	b0 0d       	add	r27, r0
    24cc:	11 24       	eor	r1, r1
    24ce:	bc ab       	sts	0x5c, r27
    24d0:	ab ab       	sts	0x5b, r26
    24d2:	fe 01       	movw	r30, r28
    24d4:	31 96       	adiw	r30, 0x01	; 1
    24d6:	fc af       	sts	0x7c, r31
    24d8:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    24da:	98 01       	movw	r18, r16
    24dc:	2e 5f       	subi	r18, 0xFE	; 254
    24de:	3f 4f       	sbci	r19, 0xFF	; 255
    24e0:	21 96       	adiw	r28, 0x01	; 1
    24e2:	3f af       	sts	0x7f, r19
    24e4:	2e af       	sts	0x7e, r18
    24e6:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    24e8:	1e ae       	sts	0xbe, r17
    24ea:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    24ec:	0f 2e       	mov	r0, r31
    24ee:	f8 ed       	ldi	r31, 0xD8	; 216
    24f0:	ef 2e       	mov	r14, r31
    24f2:	f1 e0       	ldi	r31, 0x01	; 1
    24f4:	ff 2e       	mov	r15, r31
    24f6:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    24f8:	0f 2e       	mov	r0, r31
    24fa:	f4 ed       	ldi	r31, 0xD4	; 212
    24fc:	cf 2e       	mov	r12, r31
    24fe:	f1 e0       	ldi	r31, 0x01	; 1
    2500:	df 2e       	mov	r13, r31
    2502:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2504:	0f 2e       	mov	r0, r31
    2506:	fa ec       	ldi	r31, 0xCA	; 202
    2508:	af 2e       	mov	r10, r31
    250a:	f1 e0       	ldi	r31, 0x01	; 1
    250c:	bf 2e       	mov	r11, r31
    250e:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    2510:	eb ad       	sts	0x6b, r30
    2512:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    2514:	80 81       	ld	r24, Z
    2516:	80 93 7c 03 	sts	0x037C, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    251a:	84 b5       	in	r24, 0x24	; 36
    251c:	8f 60       	ori	r24, 0x0F	; 15
    251e:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    2524:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    2526:	4d ad       	sts	0x6d, r20
    2528:	5e ad       	sts	0x6e, r21
    252a:	43 30       	cpi	r20, 0x03	; 3
    252c:	51 05       	cpc	r21, r1
    252e:	24 f4       	brge	.+8      	; 0x2538 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2530:	83 e0       	ldi	r24, 0x03	; 3
    2532:	80 93 7b 03 	sts	0x037B, r24
    2536:	03 c0       	rjmp	.+6      	; 0x253e <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    2538:	82 e0       	ldi	r24, 0x02	; 2
    253a:	80 93 7b 03 	sts	0x037B, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    253e:	81 81       	ldd	r24, Z+1	; 0x01
    2540:	92 81       	ldd	r25, Z+2	; 0x02
    2542:	9a af       	sts	0x7a, r25
    2544:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2546:	ad e0       	ldi	r26, 0x0D	; 13
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	be ab       	sts	0x5e, r27
    254c:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    254e:	00 e0       	ldi	r16, 0x00	; 0
    2550:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2552:	e1 e0       	ldi	r30, 0x01	; 1
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	0d a8       	sts	0x8d, r16
    2558:	02 c0       	rjmp	.+4      	; 0x255e <tune_8ths+0x1a8>
    255a:	ee 0f       	add	r30, r30
    255c:	ff 1f       	adc	r31, r31
    255e:	0a 94       	dec	r0
    2560:	e2 f7       	brpl	.-8      	; 0x255a <tune_8ths+0x1a4>
    2562:	f8 af       	sts	0x78, r31
    2564:	ef ab       	sts	0x5f, r30
    2566:	0e 2b       	or	r16, r30
    2568:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    256a:	ae e6       	ldi	r26, 0x6E	; 110
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	8c 91       	ld	r24, X
    2570:	8d 7f       	andi	r24, 0xFD	; 253
    2572:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2574:	c4 01       	movw	r24, r8
    2576:	b8 01       	movw	r22, r16
    2578:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    257c:	e3 ef       	ldi	r30, 0xF3	; 243
    257e:	f1 e0       	ldi	r31, 0x01	; 1
    2580:	31 97       	sbiw	r30, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <tune_8ths+0x1ca>
    2584:	00 c0       	rjmp	.+0      	; 0x2586 <tune_8ths+0x1d0>
    2586:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2588:	ae e6       	ldi	r26, 0x6E	; 110
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	8c 91       	ld	r24, X
    258e:	82 60       	ori	r24, 0x02	; 2
    2590:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    2592:	10 92 7a 03 	sts	0x037A, r1
				period_counter = 0;
    2596:	10 92 7d 03 	sts	0x037D, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    259a:	e8 e1       	ldi	r30, 0x18	; 24
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	2f e0       	ldi	r18, 0x0F	; 15
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	a8 95       	wdr
    25a6:	e0 93 60 00 	sts	0x0060, r30
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    25b0:	80 91 7a 03 	lds	r24, 0x037A
    25b4:	88 23       	and	r24, r24
    25b6:	81 f5       	brne	.+96     	; 0x2618 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    25b8:	80 91 7c 03 	lds	r24, 0x037C
    25bc:	4b a9       	sts	0x4b, r20
    25be:	5c a9       	sts	0x4c, r21
    25c0:	48 0f       	add	r20, r24
    25c2:	51 1d       	adc	r21, r1
    25c4:	ca 01       	movw	r24, r20
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    25cc:	c3 01       	movw	r24, r6
    25ce:	b2 01       	movw	r22, r4
    25d0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    25d4:	c4 01       	movw	r24, r8
    25d6:	b8 01       	movw	r22, r16
    25d8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    25dc:	c7 01       	movw	r24, r14
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	70 e0       	ldi	r23, 0x00	; 0
    25e2:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    25e6:	c6 01       	movw	r24, r12
    25e8:	6f ef       	ldi	r22, 0xFF	; 255
    25ea:	7f e3       	ldi	r23, 0x3F	; 63
    25ec:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    25f0:	c5 01       	movw	r24, r10
    25f2:	6f ef       	ldi	r22, 0xFF	; 255
    25f4:	7f e3       	ldi	r23, 0x3F	; 63
    25f6:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    25fa:	c1 01       	movw	r24, r2
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	70 e2       	ldi	r23, 0x20	; 32
    2600:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    2604:	89 a9       	sts	0x49, r24
    2606:	9a a9       	sts	0x4a, r25
    2608:	6f ef       	ldi	r22, 0xFF	; 255
    260a:	7f e3       	ldi	r23, 0x3F	; 63
    260c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2610:	80 91 7a 03 	lds	r24, 0x037A
    2614:	88 23       	and	r24, r24
    2616:	81 f2       	breq	.-96     	; 0x25b8 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    2618:	58 e1       	ldi	r21, 0x18	; 24
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	50 93 60 00 	sts	0x0060, r21
    2622:	10 92 60 00 	sts	0x0060, r1
    2626:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    2628:	80 91 78 03 	lds	r24, 0x0378
    262c:	90 91 79 03 	lds	r25, 0x0379
    2630:	a9 ad       	sts	0x69, r26
    2632:	ba ad       	sts	0x6a, r27
    2634:	a8 17       	cp	r26, r24
    2636:	b9 07       	cpc	r27, r25
    2638:	50 f0       	brcs	.+20     	; 0x264e <tune_8ths+0x298>
    263a:	80 91 af 02 	lds	r24, 0x02AF
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	31 f4       	brne	.+12     	; 0x264e <tune_8ths+0x298>
    2642:	8f a9       	sts	0x4f, r24
    2644:	98 ad       	sts	0x68, r25
    2646:	80 95       	com	r24
    2648:	90 95       	com	r25
    264a:	08 23       	and	r16, r24
    264c:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    264e:	80 91 78 03 	lds	r24, 0x0378
    2652:	90 91 79 03 	lds	r25, 0x0379
    2656:	e9 ad       	sts	0x69, r30
    2658:	fa ad       	sts	0x6a, r31
    265a:	8e 17       	cp	r24, r30
    265c:	9f 07       	cpc	r25, r31
    265e:	21 f4       	brne	.+8      	; 0x2668 <tune_8ths+0x2b2>
    2660:	80 91 af 02 	lds	r24, 0x02AF
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	71 f0       	breq	.+28     	; 0x2684 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    2668:	f1 e0       	ldi	r31, 0x01	; 1
    266a:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    266e:	2d a9       	sts	0x4d, r18
    2670:	3e a9       	sts	0x4e, r19
    2672:	21 50       	subi	r18, 0x01	; 1
    2674:	30 40       	sbci	r19, 0x00	; 0
    2676:	3e ab       	sts	0x5e, r19
    2678:	2d ab       	sts	0x5d, r18
    267a:	4f ef       	ldi	r20, 0xFF	; 255
    267c:	2f 3f       	cpi	r18, 0xFF	; 255
    267e:	34 07       	cpc	r19, r20
    2680:	09 f0       	breq	.+2      	; 0x2684 <tune_8ths+0x2ce>
    2682:	67 cf       	rjmp	.-306    	; 0x2552 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    2684:	21 96       	adiw	r28, 0x01	; 1
    2686:	ae ad       	sts	0x6e, r26
    2688:	bf ad       	sts	0x6f, r27
    268a:	21 97       	sbiw	r28, 0x01	; 1
    268c:	0d 93       	st	X+, r16
    268e:	1d 93       	st	X+, r17
    2690:	21 96       	adiw	r28, 0x01	; 1
    2692:	bf af       	sts	0x7f, r27
    2694:	ae af       	sts	0x7e, r26
    2696:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2698:	ee e6       	ldi	r30, 0x6E	; 110
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	8d 7f       	andi	r24, 0xFD	; 253
    26a0:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    26a2:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    26a4:	2d ad       	sts	0x6d, r18
    26a6:	3e ad       	sts	0x6e, r19
    26a8:	2f 5f       	subi	r18, 0xFF	; 255
    26aa:	3f 4f       	sbci	r19, 0xFF	; 255
    26ac:	3e af       	sts	0x7e, r19
    26ae:	2d af       	sts	0x7d, r18
    26b0:	4b ad       	sts	0x6b, r20
    26b2:	5c ad       	sts	0x6c, r21
    26b4:	4d 5f       	subi	r20, 0xFD	; 253
    26b6:	5f 4f       	sbci	r21, 0xFF	; 255
    26b8:	5c af       	sts	0x7c, r21
    26ba:	4b af       	sts	0x7b, r20
    26bc:	20 31       	cpi	r18, 0x10	; 16
    26be:	31 05       	cpc	r19, r1
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <tune_8ths+0x30e>
    26c2:	26 cf       	rjmp	.-436    	; 0x2510 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    26c4:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    26c6:	c0 5c       	subi	r28, 0xC0	; 192
    26c8:	df 4f       	sbci	r29, 0xFF	; 255
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	ff 90       	pop	r15
    26de:	ef 90       	pop	r14
    26e0:	df 90       	pop	r13
    26e2:	cf 90       	pop	r12
    26e4:	bf 90       	pop	r11
    26e6:	af 90       	pop	r10
    26e8:	9f 90       	pop	r9
    26ea:	8f 90       	pop	r8
    26ec:	7f 90       	pop	r7
    26ee:	6f 90       	pop	r6
    26f0:	5f 90       	pop	r5
    26f2:	4f 90       	pop	r4
    26f4:	3f 90       	pop	r3
    26f6:	2f 90       	pop	r2
    26f8:	08 95       	ret

000026fa <tune_filter>:
	
void tune_filter(void) {
    26fa:	2f 92       	push	r2
    26fc:	3f 92       	push	r3
    26fe:	4f 92       	push	r4
    2700:	5f 92       	push	r5
    2702:	6f 92       	push	r6
    2704:	7f 92       	push	r7
    2706:	8f 92       	push	r8
    2708:	9f 92       	push	r9
    270a:	af 92       	push	r10
    270c:	bf 92       	push	r11
    270e:	cf 92       	push	r12
    2710:	df 92       	push	r13
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	e9 97       	sbiw	r28, 0x39	; 57
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    272e:	de 01       	movw	r26, r28
    2730:	11 96       	adiw	r26, 0x01	; 1
    2732:	e0 e6       	ldi	r30, 0x60	; 96
    2734:	f2 e0       	ldi	r31, 0x02	; 2
    2736:	8d e2       	ldi	r24, 0x2D	; 45
    2738:	01 90       	ld	r0, Z+
    273a:	0d 92       	st	X+, r0
    273c:	81 50       	subi	r24, 0x01	; 1
    273e:	e1 f7       	brne	.-8      	; 0x2738 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2740:	88 ed       	ldi	r24, 0xD8	; 216
    2742:	91 e0       	ldi	r25, 0x01	; 1
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	70 e0       	ldi	r23, 0x00	; 0
    2748:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    274c:	81 ee       	ldi	r24, 0xE1	; 225
    274e:	91 e0       	ldi	r25, 0x01	; 1
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2758:	82 ee       	ldi	r24, 0xE2	; 226
    275a:	91 e0       	ldi	r25, 0x01	; 1
    275c:	60 e0       	ldi	r22, 0x00	; 0
    275e:	70 e0       	ldi	r23, 0x00	; 0
    2760:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2764:	83 eb       	ldi	r24, 0xB3	; 179
    2766:	92 e0       	ldi	r25, 0x02	; 2
    2768:	60 e0       	ldi	r22, 0x00	; 0
    276a:	70 e0       	ldi	r23, 0x00	; 0
    276c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2770:	8a ed       	ldi	r24, 0xDA	; 218
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    277c:	8f ed       	ldi	r24, 0xDF	; 223
    277e:	91 e0       	ldi	r25, 0x01	; 1
    2780:	60 e0       	ldi	r22, 0x00	; 0
    2782:	70 e0       	ldi	r23, 0x00	; 0
    2784:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2788:	80 ee       	ldi	r24, 0xE0	; 224
    278a:	91 e0       	ldi	r25, 0x01	; 1
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	70 e0       	ldi	r23, 0x00	; 0
    2790:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2794:	81 ed       	ldi	r24, 0xD1	; 209
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	70 e0       	ldi	r23, 0x00	; 0
    279c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    27a0:	86 ed       	ldi	r24, 0xD6	; 214
    27a2:	91 e0       	ldi	r25, 0x01	; 1
    27a4:	60 e0       	ldi	r22, 0x00	; 0
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    27ac:	82 ed       	ldi	r24, 0xD2	; 210
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	70 e0       	ldi	r23, 0x00	; 0
    27b4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    27b8:	83 ed       	ldi	r24, 0xD3	; 211
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	70 e0       	ldi	r23, 0x00	; 0
    27c0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    27c4:	84 ed       	ldi	r24, 0xD4	; 212
    27c6:	91 e0       	ldi	r25, 0x01	; 1
    27c8:	6f ef       	ldi	r22, 0xFF	; 255
    27ca:	7f e3       	ldi	r23, 0x3F	; 63
    27cc:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    27d0:	85 ed       	ldi	r24, 0xD5	; 213
    27d2:	91 e0       	ldi	r25, 0x01	; 1
    27d4:	6f ef       	ldi	r22, 0xFF	; 255
    27d6:	7f e3       	ldi	r23, 0x3F	; 63
    27d8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    27dc:	89 ed       	ldi	r24, 0xD9	; 217
    27de:	91 e0       	ldi	r25, 0x01	; 1
    27e0:	60 e0       	ldi	r22, 0x00	; 0
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    27e8:	8e ec       	ldi	r24, 0xCE	; 206
    27ea:	91 e0       	ldi	r25, 0x01	; 1
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    27f4:	8c ec       	ldi	r24, 0xCC	; 204
    27f6:	91 e0       	ldi	r25, 0x01	; 1
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2800:	8a ec       	ldi	r24, 0xCA	; 202
    2802:	91 e0       	ldi	r25, 0x01	; 1
    2804:	6f ef       	ldi	r22, 0xFF	; 255
    2806:	7f e3       	ldi	r23, 0x3F	; 63
    2808:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    280c:	88 ec       	ldi	r24, 0xC8	; 200
    280e:	91 e0       	ldi	r25, 0x01	; 1
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    2818:	80 ed       	ldi	r24, 0xD0	; 208
    281a:	91 e0       	ldi	r25, 0x01	; 1
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2824:	83 ee       	ldi	r24, 0xE3	; 227
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	70 e0       	ldi	r23, 0x00	; 0
    282c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2830:	84 ee       	ldi	r24, 0xE4	; 228
    2832:	91 e0       	ldi	r25, 0x01	; 1
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	70 e0       	ldi	r23, 0x00	; 0
    2838:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    283c:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    283e:	ed ed       	ldi	r30, 0xDD	; 221
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	80 64       	ori	r24, 0x40	; 64
    2846:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2848:	80 81       	ld	r24, Z
    284a:	8f 7b       	andi	r24, 0xBF	; 191
    284c:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	80 93 7c 03 	sts	0x037C, r24
	PORTF |= (1<<GATE); //turn gate on
    2854:	89 9a       	sbi	0x11, 1	; 17
    2856:	9e 01       	movw	r18, r28
    2858:	2f 5f       	subi	r18, 0xFF	; 255
    285a:	3f 4f       	sbci	r19, 0xFF	; 255
    285c:	3d ab       	sts	0x5d, r19
    285e:	2c ab       	sts	0x5c, r18
    2860:	81 e1       	ldi	r24, 0x11	; 17
    2862:	93 e0       	ldi	r25, 0x03	; 3
    2864:	99 af       	sts	0x79, r25
    2866:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2868:	1f aa       	sts	0x9f, r17
    286a:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    286c:	0f 2e       	mov	r0, r31
    286e:	f4 ed       	ldi	r31, 0xD4	; 212
    2870:	af 2e       	mov	r10, r31
    2872:	f1 e0       	ldi	r31, 0x01	; 1
    2874:	bf 2e       	mov	r11, r31
    2876:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2878:	0f 2e       	mov	r0, r31
    287a:	f8 ed       	ldi	r31, 0xD8	; 216
    287c:	6f 2e       	mov	r6, r31
    287e:	f1 e0       	ldi	r31, 0x01	; 1
    2880:	7f 2e       	mov	r7, r31
    2882:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2884:	0f 2e       	mov	r0, r31
    2886:	f5 ed       	ldi	r31, 0xD5	; 213
    2888:	4f 2e       	mov	r4, r31
    288a:	f1 e0       	ldi	r31, 0x01	; 1
    288c:	5f 2e       	mov	r5, r31
    288e:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    2890:	0f 2e       	mov	r0, r31
    2892:	fa ec       	ldi	r31, 0xCA	; 202
    2894:	2f 2e       	mov	r2, r31
    2896:	f1 e0       	ldi	r31, 0x01	; 1
    2898:	3f 2e       	mov	r3, r31
    289a:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    289c:	ac a9       	sts	0x4c, r26
    289e:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    28a0:	8c 91       	ld	r24, X
    28a2:	80 93 7c 03 	sts	0x037C, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    28a6:	84 b5       	in	r24, 0x24	; 36
    28a8:	8f 60       	ori	r24, 0x0F	; 15
    28aa:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    28b0:	ee e6       	ldi	r30, 0x6E	; 110
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	82 60       	ori	r24, 0x02	; 2
    28b8:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    28ba:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    28bc:	ee a9       	sts	0x4e, r30
    28be:	ff a9       	sts	0x4f, r31
    28c0:	e2 30       	cpi	r30, 0x02	; 2
    28c2:	f1 05       	cpc	r31, r1
    28c4:	24 f4       	brge	.+8      	; 0x28ce <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    28c6:	83 e0       	ldi	r24, 0x03	; 3
    28c8:	80 93 7b 03 	sts	0x037B, r24
    28cc:	03 c0       	rjmp	.+6      	; 0x28d4 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    28ce:	82 e0       	ldi	r24, 0x02	; 2
    28d0:	80 93 7b 03 	sts	0x037B, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    28d4:	11 96       	adiw	r26, 0x01	; 1
    28d6:	2d 91       	ld	r18, X+
    28d8:	3c 91       	ld	r19, X
    28da:	12 97       	sbiw	r26, 0x02	; 2
    28dc:	3b ab       	sts	0x5b, r19
    28de:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    28e0:	8d e0       	ldi	r24, 0x0D	; 13
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	9f a7       	lds	r25, 0x7f
    28e6:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    28e8:	ee 24       	eor	r14, r14
    28ea:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    28ec:	0f 2e       	mov	r0, r31
    28ee:	f1 ed       	ldi	r31, 0xD1	; 209
    28f0:	cf 2e       	mov	r12, r31
    28f2:	f1 e0       	ldi	r31, 0x01	; 1
    28f4:	df 2e       	mov	r13, r31
    28f6:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    28f8:	0f 2e       	mov	r0, r31
    28fa:	f6 ed       	ldi	r31, 0xD6	; 214
    28fc:	8f 2e       	mov	r8, r31
    28fe:	f1 e0       	ldi	r31, 0x01	; 1
    2900:	9f 2e       	mov	r9, r31
    2902:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	fc 01       	movw	r30, r24
    290a:	0e a4       	lds	r16, 0xae
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <tune_filter+0x218>
    290e:	ee 0f       	add	r30, r30
    2910:	ff 1f       	adc	r31, r31
    2912:	0a 94       	dec	r0
    2914:	e2 f7       	brpl	.-8      	; 0x290e <tune_filter+0x214>
    2916:	f9 ab       	sts	0x59, r31
    2918:	e8 ab       	sts	0x58, r30
    291a:	ee 2a       	or	r14, r30
    291c:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    291e:	c5 01       	movw	r24, r10
    2920:	b7 01       	movw	r22, r14
    2922:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			count_finished = FALSE;
    2926:	10 92 7a 03 	sts	0x037A, r1
			period_counter = 0;
    292a:	10 92 7d 03 	sts	0x037D, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    292e:	8f e0       	ldi	r24, 0x0F	; 15
    2930:	28 e1       	ldi	r18, 0x18	; 24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	a8 95       	wdr
    293a:	20 93 60 00 	sts	0x0060, r18
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2944:	80 91 7a 03 	lds	r24, 0x037A
    2948:	88 23       	and	r24, r24
    294a:	b1 f5       	brne	.+108    	; 0x29b8 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    294c:	02 ed       	ldi	r16, 0xD2	; 210
    294e:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2950:	80 91 7c 03 	lds	r24, 0x037C
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	84 5d       	subi	r24, 0xD4	; 212
    2958:	9e 4f       	sbci	r25, 0xFE	; 254
    295a:	60 e0       	ldi	r22, 0x00	; 0
    295c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2960:	c5 01       	movw	r24, r10
    2962:	b7 01       	movw	r22, r14
    2964:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2968:	c3 01       	movw	r24, r6
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2972:	c2 01       	movw	r24, r4
    2974:	6f ef       	ldi	r22, 0xFF	; 255
    2976:	7f e3       	ldi	r23, 0x3F	; 63
    2978:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    297c:	c1 01       	movw	r24, r2
    297e:	6f ef       	ldi	r22, 0xFF	; 255
    2980:	7f e3       	ldi	r23, 0x3F	; 63
    2982:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    2986:	8e ec       	ldi	r24, 0xCE	; 206
    2988:	91 e0       	ldi	r25, 0x01	; 1
    298a:	60 e0       	ldi	r22, 0x00	; 0
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2992:	c6 01       	movw	r24, r12
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	70 e0       	ldi	r23, 0x00	; 0
    2998:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    299c:	c4 01       	movw	r24, r8
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	70 e0       	ldi	r23, 0x00	; 0
    29a2:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    29a6:	c8 01       	movw	r24, r16
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    29b0:	80 91 7a 03 	lds	r24, 0x037A
    29b4:	88 23       	and	r24, r24
    29b6:	61 f2       	breq	.-104    	; 0x2950 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    29b8:	88 e1       	ldi	r24, 0x18	; 24
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	80 93 60 00 	sts	0x0060, r24
    29c2:	10 92 60 00 	sts	0x0060, r1
    29c6:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    29c8:	80 91 78 03 	lds	r24, 0x0378
    29cc:	90 91 79 03 	lds	r25, 0x0379
    29d0:	2a a9       	sts	0x4a, r18
    29d2:	3b a9       	sts	0x4b, r19
    29d4:	28 17       	cp	r18, r24
    29d6:	39 07       	cpc	r19, r25
    29d8:	50 f0       	brcs	.+20     	; 0x29ee <tune_filter+0x2f4>
    29da:	80 91 af 02 	lds	r24, 0x02AF
    29de:	81 30       	cpi	r24, 0x01	; 1
    29e0:	31 f4       	brne	.+12     	; 0x29ee <tune_filter+0x2f4>
    29e2:	88 a9       	sts	0x48, r24
    29e4:	99 a9       	sts	0x49, r25
    29e6:	80 95       	com	r24
    29e8:	90 95       	com	r25
    29ea:	e8 22       	and	r14, r24
    29ec:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    29ee:	80 91 78 03 	lds	r24, 0x0378
    29f2:	90 91 79 03 	lds	r25, 0x0379
    29f6:	ea a9       	sts	0x4a, r30
    29f8:	fb a9       	sts	0x4b, r31
    29fa:	8e 17       	cp	r24, r30
    29fc:	9f 07       	cpc	r25, r31
    29fe:	21 f4       	brne	.+8      	; 0x2a08 <tune_filter+0x30e>
    2a00:	80 91 af 02 	lds	r24, 0x02AF
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	71 f0       	breq	.+28     	; 0x2a24 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2a0e:	2e a5       	lds	r18, 0x6e
    2a10:	3f a5       	lds	r19, 0x6f
    2a12:	21 50       	subi	r18, 0x01	; 1
    2a14:	30 40       	sbci	r19, 0x00	; 0
    2a16:	3f a7       	lds	r19, 0x7f
    2a18:	2e a7       	lds	r18, 0x7e
    2a1a:	8f ef       	ldi	r24, 0xFF	; 255
    2a1c:	2f 3f       	cpi	r18, 0xFF	; 255
    2a1e:	38 07       	cpc	r19, r24
    2a20:	09 f0       	breq	.+2      	; 0x2a24 <tune_filter+0x32a>
    2a22:	70 cf       	rjmp	.-288    	; 0x2904 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2a24:	ee a9       	sts	0x4e, r30
    2a26:	ff a9       	sts	0x4f, r31
    2a28:	31 96       	adiw	r30, 0x01	; 1
    2a2a:	ff ab       	sts	0x5f, r31
    2a2c:	ee ab       	sts	0x5e, r30
    2a2e:	c7 01       	movw	r24, r14
    2a30:	80 96       	adiw	r24, 0x20	; 32
    2a32:	e8 ad       	sts	0x68, r30
    2a34:	f9 ad       	sts	0x69, r31
    2a36:	81 93       	st	Z+, r24
    2a38:	91 93       	st	Z+, r25
    2a3a:	f9 af       	sts	0x79, r31
    2a3c:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2a3e:	ee e6       	ldi	r30, 0x6E	; 110
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	8d 7f       	andi	r24, 0xFD	; 253
    2a46:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2a48:	14 bc       	out	0x24, r1	; 36
    2a4a:	2c a9       	sts	0x4c, r18
    2a4c:	3d a9       	sts	0x4d, r19
    2a4e:	2d 5f       	subi	r18, 0xFD	; 253
    2a50:	3f 4f       	sbci	r19, 0xFF	; 255
    2a52:	3d ab       	sts	0x5d, r19
    2a54:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2a56:	8e a9       	sts	0x4e, r24
    2a58:	9f a9       	sts	0x4f, r25
    2a5a:	8f 30       	cpi	r24, 0x0F	; 15
    2a5c:	91 05       	cpc	r25, r1
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <tune_filter+0x368>
    2a60:	1d cf       	rjmp	.-454    	; 0x289c <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2a62:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2a64:	e9 96       	adiw	r28, 0x39	; 57
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	1f 91       	pop	r17
    2a76:	0f 91       	pop	r16
    2a78:	ff 90       	pop	r15
    2a7a:	ef 90       	pop	r14
    2a7c:	df 90       	pop	r13
    2a7e:	cf 90       	pop	r12
    2a80:	bf 90       	pop	r11
    2a82:	af 90       	pop	r10
    2a84:	9f 90       	pop	r9
    2a86:	8f 90       	pop	r8
    2a88:	7f 90       	pop	r7
    2a8a:	6f 90       	pop	r6
    2a8c:	5f 90       	pop	r5
    2a8e:	4f 90       	pop	r4
    2a90:	3f 90       	pop	r3
    2a92:	2f 90       	pop	r2
    2a94:	08 95       	ret

00002a96 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2a96:	8f e0       	ldi	r24, 0x0F	; 15
    2a98:	93 e0       	ldi	r25, 0x03	; 3
    2a9a:	6c e0       	ldi	r22, 0x0C	; 12
    2a9c:	76 e0       	ldi	r23, 0x06	; 6
    2a9e:	40 e2       	ldi	r20, 0x20	; 32
    2aa0:	50 e0       	ldi	r21, 0x00	; 0
    2aa2:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2aa6:	81 e5       	ldi	r24, 0x51	; 81
    2aa8:	93 e0       	ldi	r25, 0x03	; 3
    2aaa:	6e e4       	ldi	r22, 0x4E	; 78
    2aac:	76 e0       	ldi	r23, 0x06	; 6
    2aae:	42 e2       	ldi	r20, 0x22	; 34
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2ab6:	8f e2       	ldi	r24, 0x2F	; 47
    2ab8:	93 e0       	ldi	r25, 0x03	; 3
    2aba:	6c e2       	ldi	r22, 0x2C	; 44
    2abc:	76 e0       	ldi	r23, 0x06	; 6
    2abe:	42 e2       	ldi	r20, 0x22	; 34
    2ac0:	50 e0       	ldi	r21, 0x00	; 0
    2ac2:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__eeupd_block_m6450a>
	
	
}
    2ac6:	08 95       	ret

00002ac8 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2ac8:	82 e7       	ldi	r24, 0x72	; 114
    2aca:	96 e0       	ldi	r25, 0x06	; 6
    2acc:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_word_m6450a>
    2ad0:	90 93 76 03 	sts	0x0376, r25
    2ad4:	80 93 75 03 	sts	0x0375, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2ad8:	80 e7       	ldi	r24, 0x70	; 112
    2ada:	96 e0       	ldi	r25, 0x06	; 6
    2adc:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_word_m6450a>
    2ae0:	90 93 74 03 	sts	0x0374, r25
    2ae4:	80 93 73 03 	sts	0x0373, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2ae8:	81 e5       	ldi	r24, 0x51	; 81
    2aea:	93 e0       	ldi	r25, 0x03	; 3
    2aec:	6e e4       	ldi	r22, 0x4E	; 78
    2aee:	76 e0       	ldi	r23, 0x06	; 6
    2af0:	42 e2       	ldi	r20, 0x22	; 34
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2af8:	8f e2       	ldi	r24, 0x2F	; 47
    2afa:	93 e0       	ldi	r25, 0x03	; 3
    2afc:	6c e2       	ldi	r22, 0x2C	; 44
    2afe:	76 e0       	ldi	r23, 0x06	; 6
    2b00:	42 e2       	ldi	r20, 0x22	; 34
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2b08:	8f e0       	ldi	r24, 0x0F	; 15
    2b0a:	93 e0       	ldi	r25, 0x03	; 3
    2b0c:	6c e0       	ldi	r22, 0x0C	; 12
    2b0e:	76 e0       	ldi	r23, 0x06	; 6
    2b10:	40 e2       	ldi	r20, 0x20	; 32
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2b18:	08 95       	ret

00002b1a <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2b1a:	98 2f       	mov	r25, r24
    2b1c:	96 95       	lsr	r25
    2b1e:	96 95       	lsr	r25
    2b20:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2b22:	29 2f       	mov	r18, r25
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	f9 01       	movw	r30, r18
    2b28:	31 97       	sbiw	r30, 0x01	; 1
    2b2a:	ee 0f       	add	r30, r30
    2b2c:	ff 1f       	adc	r31, r31
    2b2e:	e6 0f       	add	r30, r22
    2b30:	f7 1f       	adc	r31, r23
    2b32:	01 90       	ld	r0, Z+
    2b34:	f0 81       	ld	r31, Z
    2b36:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2b38:	22 0f       	add	r18, r18
    2b3a:	33 1f       	adc	r19, r19
    2b3c:	26 0f       	add	r18, r22
    2b3e:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2b40:	d9 01       	movw	r26, r18
    2b42:	4d 91       	ld	r20, X+
    2b44:	5c 91       	ld	r21, X
    2b46:	11 97       	sbiw	r26, 0x01	; 1
    2b48:	4e 1b       	sub	r20, r30
    2b4a:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2b4c:	99 0f       	add	r25, r25
    2b4e:	99 0f       	add	r25, r25
    2b50:	99 0f       	add	r25, r25
    2b52:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	48 9f       	mul	r20, r24
    2b58:	90 01       	movw	r18, r0
    2b5a:	49 9f       	mul	r20, r25
    2b5c:	30 0d       	add	r19, r0
    2b5e:	58 9f       	mul	r21, r24
    2b60:	30 0d       	add	r19, r0
    2b62:	11 24       	eor	r1, r1
    2b64:	36 95       	lsr	r19
    2b66:	27 95       	ror	r18
    2b68:	36 95       	lsr	r19
    2b6a:	27 95       	ror	r18
    2b6c:	36 95       	lsr	r19
    2b6e:	27 95       	ror	r18
    2b70:	e2 0f       	add	r30, r18
    2b72:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2b74:	8e 2f       	mov	r24, r30
    2b76:	9f 2f       	mov	r25, r31
    2b78:	08 95       	ret

00002b7a <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	a2 97       	sbiw	r28, 0x22	; 34
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	f8 94       	cli
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2b8e:	de 01       	movw	r26, r28
    2b90:	11 96       	adiw	r26, 0x01	; 1
    2b92:	ed e8       	ldi	r30, 0x8D	; 141
    2b94:	f2 e0       	ldi	r31, 0x02	; 2
    2b96:	82 e2       	ldi	r24, 0x22	; 34
    2b98:	01 90       	ld	r0, Z+
    2b9a:	0d 92       	st	X+, r0
    2b9c:	81 50       	subi	r24, 0x01	; 1
    2b9e:	e1 f7       	brne	.-8      	; 0x2b98 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2ba0:	a1 e5       	ldi	r26, 0x51	; 81
    2ba2:	b3 e0       	ldi	r27, 0x03	; 3
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	31 96       	adiw	r30, 0x01	; 1
    2ba8:	82 e2       	ldi	r24, 0x22	; 34
    2baa:	01 90       	ld	r0, Z+
    2bac:	0d 92       	st	X+, r0
    2bae:	81 50       	subi	r24, 0x01	; 1
    2bb0:	e1 f7       	brne	.-8      	; 0x2baa <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2bb2:	af e2       	ldi	r26, 0x2F	; 47
    2bb4:	b3 e0       	ldi	r27, 0x03	; 3
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	31 96       	adiw	r30, 0x01	; 1
    2bba:	82 e2       	ldi	r24, 0x22	; 34
    2bbc:	01 90       	ld	r0, Z+
    2bbe:	0d 92       	st	X+, r0
    2bc0:	81 50       	subi	r24, 0x01	; 1
    2bc2:	e1 f7       	brne	.-8      	; 0x2bbc <set_one_volt_per_octave+0x42>
	
	
}
    2bc4:	a2 96       	adiw	r28, 0x22	; 34
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	08 95       	ret

00002bd6 <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2bd6:	ef e6       	ldi	r30, 0x6F	; 111
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	82 70       	andi	r24, 0x02	; 2
    2bde:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2be0:	e1 e8       	ldi	r30, 0x81	; 129
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	87 7f       	andi	r24, 0xF7	; 247
    2be8:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2bea:	8f e0       	ldi	r24, 0x0F	; 15
    2bec:	6f e0       	ldi	r22, 0x0F	; 15
    2bee:	7e e5       	ldi	r23, 0x5E	; 94
    2bf0:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_vco_init_cv>
    2bf4:	90 93 76 03 	sts	0x0376, r25
    2bf8:	80 93 75 03 	sts	0x0375, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2bfc:	80 ef       	ldi	r24, 0xF0	; 240
    2bfe:	6f e0       	ldi	r22, 0x0F	; 15
    2c00:	7e e5       	ldi	r23, 0x5E	; 94
    2c02:	0e 94 77 10 	call	0x20ee	; 0x20ee <set_vco_init_cv>
    2c06:	90 93 74 03 	sts	0x0374, r25
    2c0a:	80 93 73 03 	sts	0x0373, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2c0e:	8f e0       	ldi	r24, 0x0F	; 15
    2c10:	0e 94 db 11 	call	0x23b6	; 0x23b6 <tune_8ths>
			tune_8ths(VCO2);
    2c14:	80 ef       	ldi	r24, 0xF0	; 240
    2c16:	0e 94 db 11 	call	0x23b6	; 0x23b6 <tune_8ths>
			tune_filter();
    2c1a:	0e 94 7d 13 	call	0x26fa	; 0x26fa <tune_filter>
			save_tuning_tables();
    2c1e:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <save_tuning_tables>
    2c22:	8f e4       	ldi	r24, 0x4F	; 79
    2c24:	93 ec       	ldi	r25, 0xC3	; 195
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <tune+0x50>
    2c2a:	00 c0       	rjmp	.+0      	; 0x2c2c <tune+0x56>
    2c2c:	00 00       	nop
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2c2e:	08 95       	ret

00002c30 <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2c30:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2c32:	98 2f       	mov	r25, r24
    2c34:	9c 70       	andi	r25, 0x0C	; 12
    2c36:	20 91 c1 02 	lds	r18, 0x02C1
    2c3a:	92 2b       	or	r25, r18
    2c3c:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2c40:	98 2f       	mov	r25, r24
    2c42:	92 95       	swap	r25
    2c44:	96 95       	lsr	r25
    2c46:	97 70       	andi	r25, 0x07	; 7
    2c48:	90 ff       	sbrs	r25, 0
    2c4a:	16 c0       	rjmp	.+44     	; 0x2c78 <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2c4c:	20 91 81 03 	lds	r18, 0x0381
    2c50:	30 91 82 03 	lds	r19, 0x0382
    2c54:	2f 5f       	subi	r18, 0xFF	; 255
    2c56:	3f 4f       	sbci	r19, 0xFF	; 255
    2c58:	30 93 82 03 	sts	0x0382, r19
    2c5c:	20 93 81 03 	sts	0x0381, r18
    2c60:	92 e0       	ldi	r25, 0x02	; 2
    2c62:	28 35       	cpi	r18, 0x58	; 88
    2c64:	39 07       	cpc	r19, r25
    2c66:	61 f4       	brne	.+24     	; 0x2c80 <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2c68:	10 92 82 03 	sts	0x0382, r1
    2c6c:	10 92 81 03 	sts	0x0381, r1
			current_patch.mode = CAL;
    2c70:	95 e0       	ldi	r25, 0x05	; 5
    2c72:	90 93 07 03 	sts	0x0307, r25
    2c76:	04 c0       	rjmp	.+8      	; 0x2c80 <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2c78:	10 92 82 03 	sts	0x0382, r1
    2c7c:	10 92 81 03 	sts	0x0381, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2c80:	90 91 83 03 	lds	r25, 0x0383
    2c84:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2c86:	98 27       	eor	r25, r24
    2c88:	90 93 83 03 	sts	0x0383, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2c8c:	89 23       	and	r24, r25
    2c8e:	08 95       	ret

00002c90 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2c90:	ed ed       	ldi	r30, 0xDD	; 221
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	90 81       	ld	r25, Z
    2c96:	9f 7b       	andi	r25, 0xBF	; 191
    2c98:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2c9a:	28 2f       	mov	r18, r24
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	21 70       	andi	r18, 0x01	; 1
    2ca0:	30 70       	andi	r19, 0x00	; 0
    2ca2:	22 0f       	add	r18, r18
    2ca4:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2ca6:	68 2f       	mov	r22, r24
    2ca8:	62 95       	swap	r22
    2caa:	66 95       	lsr	r22
    2cac:	67 70       	andi	r22, 0x07	; 7
    2cae:	67 95       	ror	r22
    2cb0:	66 27       	eor	r22, r22
    2cb2:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cb4:	26 2b       	or	r18, r22
    2cb6:	98 2f       	mov	r25, r24
    2cb8:	96 95       	lsr	r25
    2cba:	96 95       	lsr	r25
    2cbc:	91 70       	andi	r25, 0x01	; 1
    2cbe:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2cc0:	68 2f       	mov	r22, r24
    2cc2:	66 1f       	adc	r22, r22
    2cc4:	66 27       	eor	r22, r22
    2cc6:	66 1f       	adc	r22, r22
    2cc8:	66 0f       	add	r22, r22
    2cca:	66 0f       	add	r22, r22
    2ccc:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cce:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2cd0:	a8 2f       	mov	r26, r24
    2cd2:	a6 95       	lsr	r26
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	a1 70       	andi	r26, 0x01	; 1
    2cd8:	b0 70       	andi	r27, 0x00	; 0
    2cda:	bd 01       	movw	r22, r26
    2cdc:	66 0f       	add	r22, r22
    2cde:	77 1f       	adc	r23, r23
    2ce0:	66 0f       	add	r22, r22
    2ce2:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2ce4:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2ce6:	68 2f       	mov	r22, r24
    2ce8:	62 95       	swap	r22
    2cea:	6f 70       	andi	r22, 0x0F	; 15
    2cec:	70 e0       	ldi	r23, 0x00	; 0
    2cee:	61 70       	andi	r22, 0x01	; 1
    2cf0:	70 70       	andi	r23, 0x00	; 0
    2cf2:	ab 01       	movw	r20, r22
    2cf4:	00 24       	eor	r0, r0
    2cf6:	56 95       	lsr	r21
    2cf8:	47 95       	ror	r20
    2cfa:	07 94       	ror	r0
    2cfc:	56 95       	lsr	r21
    2cfe:	47 95       	ror	r20
    2d00:	07 94       	ror	r0
    2d02:	54 2f       	mov	r21, r20
    2d04:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d06:	62 2f       	mov	r22, r18
    2d08:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2d0a:	48 2f       	mov	r20, r24
    2d0c:	42 95       	swap	r20
    2d0e:	46 95       	lsr	r20
    2d10:	46 95       	lsr	r20
    2d12:	43 70       	andi	r20, 0x03	; 3
    2d14:	50 e0       	ldi	r21, 0x00	; 0
    2d16:	41 70       	andi	r20, 0x01	; 1
    2d18:	50 70       	andi	r21, 0x00	; 0
    2d1a:	9a 01       	movw	r18, r20
    2d1c:	22 0f       	add	r18, r18
    2d1e:	33 1f       	adc	r19, r19
    2d20:	22 95       	swap	r18
    2d22:	32 95       	swap	r19
    2d24:	30 7f       	andi	r19, 0xF0	; 240
    2d26:	32 27       	eor	r19, r18
    2d28:	20 7f       	andi	r18, 0xF0	; 240
    2d2a:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d2c:	46 2f       	mov	r20, r22
    2d2e:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2d30:	86 95       	lsr	r24
    2d32:	86 95       	lsr	r24
    2d34:	86 95       	lsr	r24
    2d36:	28 2f       	mov	r18, r24
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	21 70       	andi	r18, 0x01	; 1
    2d3c:	30 70       	andi	r19, 0x00	; 0
    2d3e:	c9 01       	movw	r24, r18
    2d40:	82 95       	swap	r24
    2d42:	92 95       	swap	r25
    2d44:	90 7f       	andi	r25, 0xF0	; 240
    2d46:	98 27       	eor	r25, r24
    2d48:	80 7f       	andi	r24, 0xF0	; 240
    2d4a:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d4c:	84 2b       	or	r24, r20
    2d4e:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2d50:	80 81       	ld	r24, Z
    2d52:	80 64       	ori	r24, 0x40	; 64
    2d54:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2d56:	80 81       	ld	r24, Z
    2d58:	8f 7b       	andi	r24, 0xBF	; 191
    2d5a:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2d5c:	12 b8       	out	0x02, r1	; 2
	
	
    2d5e:	08 95       	ret

00002d60 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2d60:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2d62:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2d64:	74 83       	std	Z+4, r23	; 0x04
    2d66:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2d68:	11 82       	std	Z+1, r1	; 0x01
    2d6a:	10 82       	st	Z, r1
}
    2d6c:	08 95       	ret

00002d6e <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2d6e:	1f 93       	push	r17
    2d70:	cf 93       	push	r28
    2d72:	df 93       	push	r29
    2d74:	ec 01       	movw	r28, r24
    2d76:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2d78:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <store_and_clear_interrupt>
    2d7c:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2d7e:	39 81       	ldd	r19, Y+1	; 0x01
    2d80:	83 2f       	mov	r24, r19
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	01 96       	adiw	r24, 0x01	; 1
    2d86:	6a 81       	ldd	r22, Y+2	; 0x02
    2d88:	70 e0       	ldi	r23, 0x00	; 0
    2d8a:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__divmodhi4>
    2d8e:	48 81       	ld	r20, Y
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	84 17       	cp	r24, r20
    2d94:	95 07       	cpc	r25, r21
    2d96:	29 f4       	brne	.+10     	; 0x2da2 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2d98:	82 2f       	mov	r24, r18
    2d9a:	0e 94 29 17 	call	0x2e52	; 0x2e52 <restore_interrupt_setting>
      return false;
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	11 c0       	rjmp	.+34     	; 0x2dc4 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2da2:	eb 81       	ldd	r30, Y+3	; 0x03
    2da4:	fc 81       	ldd	r31, Y+4	; 0x04
    2da6:	e3 0f       	add	r30, r19
    2da8:	f1 1d       	adc	r31, r1
    2daa:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	01 96       	adiw	r24, 0x01	; 1
    2db2:	6a 81       	ldd	r22, Y+2	; 0x02
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__divmodhi4>
    2dba:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2dbc:	82 2f       	mov	r24, r18
    2dbe:	0e 94 29 17 	call	0x2e52	; 0x2e52 <restore_interrupt_setting>
      return true;
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	1f 91       	pop	r17
    2dca:	08 95       	ret

00002dcc <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2dcc:	cf 93       	push	r28
    2dce:	df 93       	push	r29
    2dd0:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2dd2:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2dd6:	29 81       	ldd	r18, Y+1	; 0x01
    2dd8:	98 81       	ld	r25, Y
    2dda:	29 17       	cp	r18, r25
    2ddc:	18 f0       	brcs	.+6      	; 0x2de4 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2dde:	c2 2f       	mov	r28, r18
    2de0:	c9 1b       	sub	r28, r25
    2de2:	03 c0       	rjmp	.+6      	; 0x2dea <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2de4:	ca 81       	ldd	r28, Y+2	; 0x02
    2de6:	c2 0f       	add	r28, r18
    2de8:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2dea:	0e 94 29 17 	call	0x2e52	; 0x2e52 <restore_interrupt_setting>
   return len;
}
    2dee:	8c 2f       	mov	r24, r28
    2df0:	df 91       	pop	r29
    2df2:	cf 91       	pop	r28
    2df4:	08 95       	ret

00002df6 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2df6:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2df8:	20 81       	ld	r18, Z
    2dfa:	86 2f       	mov	r24, r22
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	82 0f       	add	r24, r18
    2e00:	91 1d       	adc	r25, r1
    2e02:	62 81       	ldd	r22, Z+2	; 0x02
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__divmodhi4>
    2e0a:	03 80       	ldd	r0, Z+3	; 0x03
    2e0c:	f4 81       	ldd	r31, Z+4	; 0x04
    2e0e:	e0 2d       	mov	r30, r0
    2e10:	e8 0f       	add	r30, r24
    2e12:	f9 1f       	adc	r31, r25
}
    2e14:	80 81       	ld	r24, Z
    2e16:	08 95       	ret

00002e18 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	ec 01       	movw	r28, r24
    2e20:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2e22:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <store_and_clear_interrupt>
    2e26:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2e28:	88 81       	ld	r24, Y
    2e2a:	21 2f       	mov	r18, r17
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	28 0f       	add	r18, r24
    2e30:	31 1d       	adc	r19, r1
    2e32:	6a 81       	ldd	r22, Y+2	; 0x02
    2e34:	c9 01       	movw	r24, r18
    2e36:	70 e0       	ldi	r23, 0x00	; 0
    2e38:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__divmodhi4>
    2e3c:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2e3e:	84 2f       	mov	r24, r20
    2e40:	0e 94 29 17 	call	0x2e52	; 0x2e52 <restore_interrupt_setting>
}
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	1f 91       	pop	r17
    2e4a:	08 95       	ret

00002e4c <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2e4c:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2e4e:	f8 94       	cli
   return sreg;
}
    2e50:	08 95       	ret

00002e52 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2e52:	8f bf       	out	0x3f, r24	; 63
}
    2e54:	08 95       	ret

00002e56 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2e56:	88 1f       	adc	r24, r24
    2e58:	88 27       	eor	r24, r24
    2e5a:	88 1f       	adc	r24, r24
    2e5c:	08 95       	ret

00002e5e <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2e5e:	91 e0       	ldi	r25, 0x01	; 1
    2e60:	88 3f       	cpi	r24, 0xF8	; 248
    2e62:	08 f4       	brcc	.+2      	; 0x2e66 <midi_is_realtime+0x8>
    2e64:	90 e0       	ldi	r25, 0x00	; 0
}
    2e66:	89 2f       	mov	r24, r25
    2e68:	08 95       	ret

00002e6a <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	20 7f       	andi	r18, 0xF0	; 240
    2e70:	30 70       	andi	r19, 0x00	; 0
    2e72:	20 3c       	cpi	r18, 0xC0	; 192
    2e74:	31 05       	cpc	r19, r1
    2e76:	e9 f1       	breq	.+122    	; 0x2ef2 <midi_packet_length+0x88>
    2e78:	21 3c       	cpi	r18, 0xC1	; 193
    2e7a:	31 05       	cpc	r19, r1
    2e7c:	8c f4       	brge	.+34     	; 0x2ea0 <midi_packet_length+0x36>
    2e7e:	20 39       	cpi	r18, 0x90	; 144
    2e80:	31 05       	cpc	r19, r1
    2e82:	e1 f0       	breq	.+56     	; 0x2ebc <midi_packet_length+0x52>
    2e84:	21 39       	cpi	r18, 0x91	; 145
    2e86:	31 05       	cpc	r19, r1
    2e88:	24 f4       	brge	.+8      	; 0x2e92 <midi_packet_length+0x28>
    2e8a:	20 38       	cpi	r18, 0x80	; 128
    2e8c:	31 05       	cpc	r19, r1
    2e8e:	79 f5       	brne	.+94     	; 0x2eee <midi_packet_length+0x84>
    2e90:	15 c0       	rjmp	.+42     	; 0x2ebc <midi_packet_length+0x52>
    2e92:	20 3a       	cpi	r18, 0xA0	; 160
    2e94:	31 05       	cpc	r19, r1
    2e96:	91 f0       	breq	.+36     	; 0x2ebc <midi_packet_length+0x52>
    2e98:	20 3b       	cpi	r18, 0xB0	; 176
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	41 f5       	brne	.+80     	; 0x2eee <midi_packet_length+0x84>
    2e9e:	0e c0       	rjmp	.+28     	; 0x2ebc <midi_packet_length+0x52>
    2ea0:	20 3e       	cpi	r18, 0xE0	; 224
    2ea2:	31 05       	cpc	r19, r1
    2ea4:	59 f0       	breq	.+22     	; 0x2ebc <midi_packet_length+0x52>
    2ea6:	21 3e       	cpi	r18, 0xE1	; 225
    2ea8:	31 05       	cpc	r19, r1
    2eaa:	24 f4       	brge	.+8      	; 0x2eb4 <midi_packet_length+0x4a>
    2eac:	20 3d       	cpi	r18, 0xD0	; 208
    2eae:	31 05       	cpc	r19, r1
    2eb0:	f1 f4       	brne	.+60     	; 0x2eee <midi_packet_length+0x84>
    2eb2:	1f c0       	rjmp	.+62     	; 0x2ef2 <midi_packet_length+0x88>
    2eb4:	20 3f       	cpi	r18, 0xF0	; 240
    2eb6:	31 05       	cpc	r19, r1
    2eb8:	d1 f4       	brne	.+52     	; 0x2eee <midi_packet_length+0x84>
    2eba:	02 c0       	rjmp	.+4      	; 0x2ec0 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2ebc:	83 e0       	ldi	r24, 0x03	; 3
    2ebe:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2ec0:	86 3f       	cpi	r24, 0xF6	; 246
    2ec2:	79 f0       	breq	.+30     	; 0x2ee2 <midi_packet_length+0x78>
    2ec4:	87 3f       	cpi	r24, 0xF7	; 247
    2ec6:	38 f4       	brcc	.+14     	; 0x2ed6 <midi_packet_length+0x6c>
    2ec8:	82 3f       	cpi	r24, 0xF2	; 242
    2eca:	a9 f0       	breq	.+42     	; 0x2ef6 <midi_packet_length+0x8c>
    2ecc:	83 3f       	cpi	r24, 0xF3	; 243
    2ece:	59 f0       	breq	.+22     	; 0x2ee6 <midi_packet_length+0x7c>
    2ed0:	81 3f       	cpi	r24, 0xF1	; 241
    2ed2:	59 f4       	brne	.+22     	; 0x2eea <midi_packet_length+0x80>
    2ed4:	08 c0       	rjmp	.+16     	; 0x2ee6 <midi_packet_length+0x7c>
    2ed6:	88 3f       	cpi	r24, 0xF8	; 248
    2ed8:	40 f0       	brcs	.+16     	; 0x2eea <midi_packet_length+0x80>
    2eda:	8d 3f       	cpi	r24, 0xFD	; 253
    2edc:	10 f0       	brcs	.+4      	; 0x2ee2 <midi_packet_length+0x78>
    2ede:	8e 3f       	cpi	r24, 0xFE	; 254
    2ee0:	20 f0       	brcs	.+8      	; 0x2eea <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
    2ee8:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2ef6:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2ef8:	08 95       	ret

00002efa <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2efa:	0f 93       	push	r16
    2efc:	34 2f       	mov	r19, r20
    2efe:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2f00:	46 2f       	mov	r20, r22
    2f02:	4f 70       	andi	r20, 0x0F	; 15
    2f04:	40 6b       	ori	r20, 0xB0	; 176
    2f06:	23 2f       	mov	r18, r19
    2f08:	2f 77       	andi	r18, 0x7F	; 127
    2f0a:	0f 77       	andi	r16, 0x7F	; 127
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	ed 91       	ld	r30, X+
    2f10:	fc 91       	ld	r31, X
    2f12:	63 e0       	ldi	r22, 0x03	; 3
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2f18:	0f 91       	pop	r16
    2f1a:	08 95       	ret

00002f1c <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2f1c:	0f 93       	push	r16
    2f1e:	34 2f       	mov	r19, r20
    2f20:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2f22:	46 2f       	mov	r20, r22
    2f24:	4f 70       	andi	r20, 0x0F	; 15
    2f26:	40 69       	ori	r20, 0x90	; 144
    2f28:	23 2f       	mov	r18, r19
    2f2a:	2f 77       	andi	r18, 0x7F	; 127
    2f2c:	0f 77       	andi	r16, 0x7F	; 127
    2f2e:	dc 01       	movw	r26, r24
    2f30:	ed 91       	ld	r30, X+
    2f32:	fc 91       	ld	r31, X
    2f34:	63 e0       	ldi	r22, 0x03	; 3
    2f36:	70 e0       	ldi	r23, 0x00	; 0
    2f38:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2f3a:	0f 91       	pop	r16
    2f3c:	08 95       	ret

00002f3e <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2f3e:	0f 93       	push	r16
    2f40:	34 2f       	mov	r19, r20
    2f42:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2f44:	46 2f       	mov	r20, r22
    2f46:	4f 70       	andi	r20, 0x0F	; 15
    2f48:	40 68       	ori	r20, 0x80	; 128
    2f4a:	23 2f       	mov	r18, r19
    2f4c:	2f 77       	andi	r18, 0x7F	; 127
    2f4e:	0f 77       	andi	r16, 0x7F	; 127
    2f50:	dc 01       	movw	r26, r24
    2f52:	ed 91       	ld	r30, X+
    2f54:	fc 91       	ld	r31, X
    2f56:	63 e0       	ldi	r22, 0x03	; 3
    2f58:	70 e0       	ldi	r23, 0x00	; 0
    2f5a:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2f5c:	0f 91       	pop	r16
    2f5e:	08 95       	ret

00002f60 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2f60:	0f 93       	push	r16
    2f62:	34 2f       	mov	r19, r20
    2f64:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2f66:	46 2f       	mov	r20, r22
    2f68:	4f 70       	andi	r20, 0x0F	; 15
    2f6a:	40 6a       	ori	r20, 0xA0	; 160
    2f6c:	23 2f       	mov	r18, r19
    2f6e:	2f 77       	andi	r18, 0x7F	; 127
    2f70:	0f 77       	andi	r16, 0x7F	; 127
    2f72:	dc 01       	movw	r26, r24
    2f74:	ed 91       	ld	r30, X+
    2f76:	fc 91       	ld	r31, X
    2f78:	63 e0       	ldi	r22, 0x03	; 3
    2f7a:	70 e0       	ldi	r23, 0x00	; 0
    2f7c:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2f7e:	0f 91       	pop	r16
    2f80:	08 95       	ret

00002f82 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2f86:	20 e2       	ldi	r18, 0x20	; 32
    2f88:	40 30       	cpi	r20, 0x00	; 0
    2f8a:	52 07       	cpc	r21, r18
    2f8c:	44 f4       	brge	.+16     	; 0x2f9e <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2f8e:	a0 ee       	ldi	r26, 0xE0	; 224
    2f90:	40 30       	cpi	r20, 0x00	; 0
    2f92:	5a 07       	cpc	r21, r26
    2f94:	3c f0       	brlt	.+14     	; 0x2fa4 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2f96:	8a 01       	movw	r16, r20
    2f98:	00 50       	subi	r16, 0x00	; 0
    2f9a:	10 4e       	sbci	r17, 0xE0	; 224
    2f9c:	05 c0       	rjmp	.+10     	; 0x2fa8 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2f9e:	0f ef       	ldi	r16, 0xFF	; 255
    2fa0:	1f e3       	ldi	r17, 0x3F	; 63
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2fa4:	00 e0       	ldi	r16, 0x00	; 0
    2fa6:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2fa8:	46 2f       	mov	r20, r22
    2faa:	4f 70       	andi	r20, 0x0F	; 15
    2fac:	40 6e       	ori	r20, 0xE0	; 224
    2fae:	20 2f       	mov	r18, r16
    2fb0:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2fb2:	00 0f       	add	r16, r16
    2fb4:	01 2f       	mov	r16, r17
    2fb6:	00 1f       	adc	r16, r16
    2fb8:	11 0b       	sbc	r17, r17
    2fba:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2fbc:	0f 77       	andi	r16, 0x7F	; 127
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	ed 91       	ld	r30, X+
    2fc2:	fc 91       	ld	r31, X
    2fc4:	63 e0       	ldi	r22, 0x03	; 3
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	08 95       	ret

00002fd0 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2fd0:	0f 93       	push	r16
    2fd2:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2fd4:	46 2f       	mov	r20, r22
    2fd6:	4f 70       	andi	r20, 0x0F	; 15
    2fd8:	40 6c       	ori	r20, 0xC0	; 192
    2fda:	2f 77       	andi	r18, 0x7F	; 127
    2fdc:	dc 01       	movw	r26, r24
    2fde:	ed 91       	ld	r30, X+
    2fe0:	fc 91       	ld	r31, X
    2fe2:	62 e0       	ldi	r22, 0x02	; 2
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	00 e0       	ldi	r16, 0x00	; 0
    2fe8:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2fea:	0f 91       	pop	r16
    2fec:	08 95       	ret

00002fee <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2fee:	0f 93       	push	r16
    2ff0:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2ff2:	46 2f       	mov	r20, r22
    2ff4:	4f 70       	andi	r20, 0x0F	; 15
    2ff6:	40 6d       	ori	r20, 0xD0	; 208
    2ff8:	2f 77       	andi	r18, 0x7F	; 127
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	ed 91       	ld	r30, X+
    2ffe:	fc 91       	ld	r31, X
    3000:	62 e0       	ldi	r22, 0x02	; 2
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	00 e0       	ldi	r16, 0x00	; 0
    3006:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    3008:	0f 91       	pop	r16
    300a:	08 95       	ret

0000300c <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    300c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    300e:	dc 01       	movw	r26, r24
    3010:	ed 91       	ld	r30, X+
    3012:	fc 91       	ld	r31, X
    3014:	61 e0       	ldi	r22, 0x01	; 1
    3016:	70 e0       	ldi	r23, 0x00	; 0
    3018:	48 ef       	ldi	r20, 0xF8	; 248
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	00 e0       	ldi	r16, 0x00	; 0
    301e:	09 95       	icall
}
    3020:	0f 91       	pop	r16
    3022:	08 95       	ret

00003024 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    3024:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    3026:	dc 01       	movw	r26, r24
    3028:	ed 91       	ld	r30, X+
    302a:	fc 91       	ld	r31, X
    302c:	61 e0       	ldi	r22, 0x01	; 1
    302e:	70 e0       	ldi	r23, 0x00	; 0
    3030:	49 ef       	ldi	r20, 0xF9	; 249
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	00 e0       	ldi	r16, 0x00	; 0
    3036:	09 95       	icall
}
    3038:	0f 91       	pop	r16
    303a:	08 95       	ret

0000303c <midi_send_start>:

void midi_send_start(MidiDevice * device){
    303c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    303e:	dc 01       	movw	r26, r24
    3040:	ed 91       	ld	r30, X+
    3042:	fc 91       	ld	r31, X
    3044:	61 e0       	ldi	r22, 0x01	; 1
    3046:	70 e0       	ldi	r23, 0x00	; 0
    3048:	4a ef       	ldi	r20, 0xFA	; 250
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	00 e0       	ldi	r16, 0x00	; 0
    304e:	09 95       	icall
}
    3050:	0f 91       	pop	r16
    3052:	08 95       	ret

00003054 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    3054:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    3056:	dc 01       	movw	r26, r24
    3058:	ed 91       	ld	r30, X+
    305a:	fc 91       	ld	r31, X
    305c:	61 e0       	ldi	r22, 0x01	; 1
    305e:	70 e0       	ldi	r23, 0x00	; 0
    3060:	4b ef       	ldi	r20, 0xFB	; 251
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	00 e0       	ldi	r16, 0x00	; 0
    3066:	09 95       	icall
}
    3068:	0f 91       	pop	r16
    306a:	08 95       	ret

0000306c <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    306c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    306e:	dc 01       	movw	r26, r24
    3070:	ed 91       	ld	r30, X+
    3072:	fc 91       	ld	r31, X
    3074:	61 e0       	ldi	r22, 0x01	; 1
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	4c ef       	ldi	r20, 0xFC	; 252
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	00 e0       	ldi	r16, 0x00	; 0
    307e:	09 95       	icall
}
    3080:	0f 91       	pop	r16
    3082:	08 95       	ret

00003084 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    3084:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    3086:	dc 01       	movw	r26, r24
    3088:	ed 91       	ld	r30, X+
    308a:	fc 91       	ld	r31, X
    308c:	61 e0       	ldi	r22, 0x01	; 1
    308e:	70 e0       	ldi	r23, 0x00	; 0
    3090:	4e ef       	ldi	r20, 0xFE	; 254
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	00 e0       	ldi	r16, 0x00	; 0
    3096:	09 95       	icall
}
    3098:	0f 91       	pop	r16
    309a:	08 95       	ret

0000309c <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    309c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    309e:	dc 01       	movw	r26, r24
    30a0:	ed 91       	ld	r30, X+
    30a2:	fc 91       	ld	r31, X
    30a4:	61 e0       	ldi	r22, 0x01	; 1
    30a6:	70 e0       	ldi	r23, 0x00	; 0
    30a8:	4f ef       	ldi	r20, 0xFF	; 255
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	00 e0       	ldi	r16, 0x00	; 0
    30ae:	09 95       	icall
}
    30b0:	0f 91       	pop	r16
    30b2:	08 95       	ret

000030b4 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    30b4:	0f 93       	push	r16
   device->send_func(device, 2,
    30b6:	26 2f       	mov	r18, r22
    30b8:	2f 77       	andi	r18, 0x7F	; 127
    30ba:	dc 01       	movw	r26, r24
    30bc:	ed 91       	ld	r30, X+
    30be:	fc 91       	ld	r31, X
    30c0:	62 e0       	ldi	r22, 0x02	; 2
    30c2:	70 e0       	ldi	r23, 0x00	; 0
    30c4:	41 ef       	ldi	r20, 0xF1	; 241
    30c6:	00 e0       	ldi	r16, 0x00	; 0
    30c8:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    30ca:	0f 91       	pop	r16
    30cc:	08 95       	ret

000030ce <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    30ce:	0f 93       	push	r16
    30d0:	1f 93       	push	r17
   device->send_func(device, 3,
    30d2:	26 2f       	mov	r18, r22
    30d4:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    30d6:	8b 01       	movw	r16, r22
    30d8:	00 0f       	add	r16, r16
    30da:	01 2f       	mov	r16, r17
    30dc:	00 1f       	adc	r16, r16
    30de:	11 0b       	sbc	r17, r17
    30e0:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    30e2:	0f 77       	andi	r16, 0x7F	; 127
    30e4:	dc 01       	movw	r26, r24
    30e6:	ed 91       	ld	r30, X+
    30e8:	fc 91       	ld	r31, X
    30ea:	63 e0       	ldi	r22, 0x03	; 3
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	42 ef       	ldi	r20, 0xF2	; 242
    30f0:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    30f2:	1f 91       	pop	r17
    30f4:	0f 91       	pop	r16
    30f6:	08 95       	ret

000030f8 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    30f8:	0f 93       	push	r16
   device->send_func(device, 2,
    30fa:	26 2f       	mov	r18, r22
    30fc:	2f 77       	andi	r18, 0x7F	; 127
    30fe:	dc 01       	movw	r26, r24
    3100:	ed 91       	ld	r30, X+
    3102:	fc 91       	ld	r31, X
    3104:	62 e0       	ldi	r22, 0x02	; 2
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	43 ef       	ldi	r20, 0xF3	; 243
    310a:	00 e0       	ldi	r16, 0x00	; 0
    310c:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    310e:	0f 91       	pop	r16
    3110:	08 95       	ret

00003112 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    3112:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    3114:	dc 01       	movw	r26, r24
    3116:	ed 91       	ld	r30, X+
    3118:	fc 91       	ld	r31, X
    311a:	61 e0       	ldi	r22, 0x01	; 1
    311c:	70 e0       	ldi	r23, 0x00	; 0
    311e:	46 ef       	ldi	r20, 0xF6	; 246
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	00 e0       	ldi	r16, 0x00	; 0
    3124:	09 95       	icall
}
    3126:	0f 91       	pop	r16
    3128:	08 95       	ret

0000312a <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    312a:	0f 93       	push	r16
    312c:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    312e:	dc 01       	movw	r26, r24
    3130:	ed 91       	ld	r30, X+
    3132:	fc 91       	ld	r31, X
    3134:	61 e0       	ldi	r22, 0x01	; 1
    3136:	70 e0       	ldi	r23, 0x00	; 0
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	00 e0       	ldi	r16, 0x00	; 0
    313c:	09 95       	icall
}
    313e:	0f 91       	pop	r16
    3140:	08 95       	ret

00003142 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    3142:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    3144:	dc 01       	movw	r26, r24
    3146:	ed 91       	ld	r30, X+
    3148:	fc 91       	ld	r31, X
    314a:	09 95       	icall
}
    314c:	0f 91       	pop	r16
    314e:	08 95       	ret

00003150 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    3150:	6f 92       	push	r6
    3152:	7f 92       	push	r7
    3154:	8f 92       	push	r8
    3156:	9f 92       	push	r9
    3158:	af 92       	push	r10
    315a:	bf 92       	push	r11
    315c:	cf 92       	push	r12
    315e:	df 92       	push	r13
    3160:	ef 92       	push	r14
    3162:	ff 92       	push	r15
    3164:	0f 93       	push	r16
    3166:	1f 93       	push	r17
    3168:	cf 93       	push	r28
    316a:	df 93       	push	r29
    316c:	00 d0       	rcall	.+0      	; 0x316e <midi_send_array+0x1e>
    316e:	0f 92       	push	r0
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	4c 01       	movw	r8, r24
    3176:	6b 01       	movw	r12, r22
    3178:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    317a:	61 15       	cp	r22, r1
    317c:	71 05       	cpc	r23, r1
    317e:	41 f1       	breq	.+80     	; 0x31d0 <midi_send_array+0x80>
    3180:	ee 24       	eor	r14, r14
    3182:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    3184:	0f 2e       	mov	r0, r31
    3186:	f3 e0       	ldi	r31, 0x03	; 3
    3188:	6f 2e       	mov	r6, r31
    318a:	77 24       	eor	r7, r7
    318c:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    318e:	19 82       	std	Y+1, r1	; 0x01
    3190:	1a 82       	std	Y+2, r1	; 0x02
    3192:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    3194:	86 01       	movw	r16, r12
    3196:	0e 19       	sub	r16, r14
    3198:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    319a:	04 30       	cpi	r16, 0x04	; 4
    319c:	11 05       	cpc	r17, r1
    319e:	08 f0       	brcs	.+2      	; 0x31a2 <midi_send_array+0x52>
    31a0:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    31a2:	b5 01       	movw	r22, r10
    31a4:	6e 0d       	add	r22, r14
    31a6:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    31a8:	ce 01       	movw	r24, r28
    31aa:	01 96       	adiw	r24, 0x01	; 1
    31ac:	40 2f       	mov	r20, r16
    31ae:	51 2f       	mov	r21, r17
    31b0:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    31b4:	c4 01       	movw	r24, r8
    31b6:	b8 01       	movw	r22, r16
    31b8:	49 81       	ldd	r20, Y+1	; 0x01
    31ba:	2a 81       	ldd	r18, Y+2	; 0x02
    31bc:	0b 81       	ldd	r16, Y+3	; 0x03
    31be:	0e 94 a1 18 	call	0x3142	; 0x3142 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    31c2:	83 e0       	ldi	r24, 0x03	; 3
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	e8 0e       	add	r14, r24
    31c8:	f9 1e       	adc	r15, r25
    31ca:	ec 14       	cp	r14, r12
    31cc:	fd 04       	cpc	r15, r13
    31ce:	f8 f2       	brcs	.-66     	; 0x318e <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	1f 91       	pop	r17
    31dc:	0f 91       	pop	r16
    31de:	ff 90       	pop	r15
    31e0:	ef 90       	pop	r14
    31e2:	df 90       	pop	r13
    31e4:	cf 90       	pop	r12
    31e6:	bf 90       	pop	r11
    31e8:	af 90       	pop	r10
    31ea:	9f 90       	pop	r9
    31ec:	8f 90       	pop	r8
    31ee:	7f 90       	pop	r7
    31f0:	6f 90       	pop	r6
    31f2:	08 95       	ret

000031f4 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    31f4:	fc 01       	movw	r30, r24
    31f6:	73 83       	std	Z+3, r23	; 0x03
    31f8:	62 83       	std	Z+2, r22	; 0x02
}
    31fa:	08 95       	ret

000031fc <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    31fc:	fc 01       	movw	r30, r24
    31fe:	75 83       	std	Z+5, r23	; 0x05
    3200:	64 83       	std	Z+4, r22	; 0x04
}
    3202:	08 95       	ret

00003204 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    3204:	fc 01       	movw	r30, r24
    3206:	77 83       	std	Z+7, r23	; 0x07
    3208:	66 83       	std	Z+6, r22	; 0x06
}
    320a:	08 95       	ret

0000320c <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    320c:	fc 01       	movw	r30, r24
    320e:	71 87       	std	Z+9, r23	; 0x09
    3210:	60 87       	std	Z+8, r22	; 0x08
}
    3212:	08 95       	ret

00003214 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    3214:	fc 01       	movw	r30, r24
    3216:	73 87       	std	Z+11, r23	; 0x0b
    3218:	62 87       	std	Z+10, r22	; 0x0a
}
    321a:	08 95       	ret

0000321c <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    321c:	fc 01       	movw	r30, r24
    321e:	75 87       	std	Z+13, r23	; 0x0d
    3220:	64 87       	std	Z+12, r22	; 0x0c
}
    3222:	08 95       	ret

00003224 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    3224:	fc 01       	movw	r30, r24
    3226:	77 87       	std	Z+15, r23	; 0x0f
    3228:	66 87       	std	Z+14, r22	; 0x0e
}
    322a:	08 95       	ret

0000322c <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    322c:	fc 01       	movw	r30, r24
    322e:	71 8b       	std	Z+17, r23	; 0x11
    3230:	60 8b       	std	Z+16, r22	; 0x10
}
    3232:	08 95       	ret

00003234 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    3234:	fc 01       	movw	r30, r24
    3236:	73 8b       	std	Z+19, r23	; 0x13
    3238:	62 8b       	std	Z+18, r22	; 0x12
}
    323a:	08 95       	ret

0000323c <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    323c:	fc 01       	movw	r30, r24
    323e:	75 8b       	std	Z+21, r23	; 0x15
    3240:	64 8b       	std	Z+20, r22	; 0x14
}
    3242:	08 95       	ret

00003244 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    3244:	fc 01       	movw	r30, r24
    3246:	77 8b       	std	Z+23, r23	; 0x17
    3248:	66 8b       	std	Z+22, r22	; 0x16
}
    324a:	08 95       	ret

0000324c <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    324c:	fc 01       	movw	r30, r24
    324e:	71 8f       	std	Z+25, r23	; 0x19
    3250:	60 8f       	std	Z+24, r22	; 0x18
}
    3252:	08 95       	ret

00003254 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    3254:	fc 01       	movw	r30, r24
    3256:	73 8f       	std	Z+27, r23	; 0x1b
    3258:	62 8f       	std	Z+26, r22	; 0x1a
}
    325a:	08 95       	ret

0000325c <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    325c:	fc 01       	movw	r30, r24
    325e:	75 8f       	std	Z+29, r23	; 0x1d
    3260:	64 8f       	std	Z+28, r22	; 0x1c
}
    3262:	08 95       	ret

00003264 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    3264:	fc 01       	movw	r30, r24
    3266:	77 8f       	std	Z+31, r23	; 0x1f
    3268:	66 8f       	std	Z+30, r22	; 0x1e
}
    326a:	08 95       	ret

0000326c <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    326c:	cf 93       	push	r28
    326e:	df 93       	push	r29
    3270:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    3272:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    3274:	1f a2       	lds	r17, 0x9f
    3276:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    3278:	bc 01       	movw	r22, r24
    327a:	68 5d       	subi	r22, 0xD8	; 216
    327c:	7f 4f       	sbci	r23, 0xFF	; 255
    327e:	88 51       	subi	r24, 0x18	; 24
    3280:	9f 4f       	sbci	r25, 0xFF	; 255
    3282:	40 ec       	ldi	r20, 0xC0	; 192
    3284:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    3288:	1b 82       	std	Y+3, r1	; 0x03
    328a:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    328c:	1d 82       	std	Y+5, r1	; 0x05
    328e:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    3290:	1f 82       	std	Y+7, r1	; 0x07
    3292:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    3294:	19 86       	std	Y+9, r1	; 0x09
    3296:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    3298:	1b 86       	std	Y+11, r1	; 0x0b
    329a:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    329c:	1d 86       	std	Y+13, r1	; 0x0d
    329e:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    32a0:	1f 86       	std	Y+15, r1	; 0x0f
    32a2:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    32a4:	19 8a       	std	Y+17, r1	; 0x11
    32a6:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    32a8:	1b 8a       	std	Y+19, r1	; 0x13
    32aa:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    32ac:	1d 8a       	std	Y+21, r1	; 0x15
    32ae:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    32b0:	1f 8a       	std	Y+23, r1	; 0x17
    32b2:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    32b4:	19 8e       	std	Y+25, r1	; 0x19
    32b6:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    32b8:	1b 8e       	std	Y+27, r1	; 0x1b
    32ba:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    32bc:	1d 8e       	std	Y+29, r1	; 0x1d
    32be:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    32c0:	1f 8e       	std	Y+31, r1	; 0x1f
    32c2:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    32c4:	19 a2       	lds	r17, 0x99
    32c6:	18 a2       	lds	r17, 0x98
}
    32c8:	df 91       	pop	r29
    32ca:	cf 91       	pop	r28
    32cc:	08 95       	ret

000032ce <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    32ce:	ef 92       	push	r14
    32d0:	ff 92       	push	r15
    32d2:	0f 93       	push	r16
    32d4:	1f 93       	push	r17
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    32dc:	66 23       	and	r22, r22
    32de:	99 f0       	breq	.+38     	; 0x3306 <midi_device_input+0x38>
    32e0:	04 2f       	mov	r16, r20
    32e2:	15 2f       	mov	r17, r21
    32e4:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    32e6:	0f 2e       	mov	r0, r31
    32e8:	f8 ee       	ldi	r31, 0xE8	; 232
    32ea:	ef 2e       	mov	r14, r31
    32ec:	ff 24       	eor	r15, r15
    32ee:	f0 2d       	mov	r31, r0
    32f0:	e8 0e       	add	r14, r24
    32f2:	f9 1e       	adc	r15, r25
    32f4:	f8 01       	movw	r30, r16
    32f6:	61 91       	ld	r22, Z+
    32f8:	8f 01       	movw	r16, r30
    32fa:	c7 01       	movw	r24, r14
    32fc:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3300:	cf 5f       	subi	r28, 0xFF	; 255
    3302:	cd 17       	cp	r28, r29
    3304:	b9 f7       	brne	.-18     	; 0x32f4 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    3306:	df 91       	pop	r29
    3308:	cf 91       	pop	r28
    330a:	1f 91       	pop	r17
    330c:	0f 91       	pop	r16
    330e:	ff 90       	pop	r15
    3310:	ef 90       	pop	r14
    3312:	08 95       	ret

00003314 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    3314:	fc 01       	movw	r30, r24
    3316:	71 83       	std	Z+1, r23	; 0x01
    3318:	60 83       	st	Z, r22
}
    331a:	08 95       	ret

0000331c <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    331c:	fc 01       	movw	r30, r24
    331e:	71 a3       	lds	r23, 0x51
    3320:	60 a3       	lds	r22, 0x50
}
    3322:	08 95       	ret

00003324 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    3324:	af 92       	push	r10
    3326:	bf 92       	push	r11
    3328:	cf 92       	push	r12
    332a:	df 92       	push	r13
    332c:	ef 92       	push	r14
    332e:	ff 92       	push	r15
    3330:	0f 93       	push	r16
    3332:	1f 93       	push	r17
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	00 d0       	rcall	.+0      	; 0x333a <midi_input_callbacks+0x16>
    333a:	0f 92       	push	r0
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
    3340:	6c 01       	movw	r12, r24
    3342:	5b 01       	movw	r10, r22
    3344:	f4 2e       	mov	r15, r20
    3346:	e2 2e       	mov	r14, r18
    3348:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    334a:	dc 01       	movw	r26, r24
    334c:	95 96       	adiw	r26, 0x25	; 37
    334e:	8c 91       	ld	r24, X
    3350:	95 97       	sbiw	r26, 0x25	; 37
    3352:	84 30       	cpi	r24, 0x04	; 4
    3354:	e9 f4       	brne	.+58     	; 0x3390 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    3356:	5a 96       	adiw	r26, 0x1a	; 26
    3358:	ed 91       	ld	r30, X+
    335a:	fc 91       	ld	r31, X
    335c:	5b 97       	sbiw	r26, 0x1b	; 27
    335e:	30 97       	sbiw	r30, 0x00	; 0
    3360:	09 f4       	brne	.+2      	; 0x3364 <midi_input_callbacks+0x40>
    3362:	ee c0       	rjmp	.+476    	; 0x3540 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    3364:	cb 01       	movw	r24, r22
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	63 e0       	ldi	r22, 0x03	; 3
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__udivmodhi4>
    3370:	cb 01       	movw	r24, r22
    3372:	88 0f       	add	r24, r24
    3374:	99 1f       	adc	r25, r25
    3376:	68 0f       	add	r22, r24
    3378:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    337a:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    337c:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    337e:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    3380:	4a 2d       	mov	r20, r10
    3382:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    3384:	c6 01       	movw	r24, r12
    3386:	9e 01       	movw	r18, r28
    3388:	2f 5f       	subi	r18, 0xFF	; 255
    338a:	3f 4f       	sbci	r19, 0xFF	; 255
    338c:	09 95       	icall
    338e:	c8 c0       	rjmp	.+400    	; 0x3520 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    3390:	62 30       	cpi	r22, 0x02	; 2
    3392:	71 05       	cpc	r23, r1
    3394:	09 f4       	brne	.+2      	; 0x3398 <midi_input_callbacks+0x74>
    3396:	5f c0       	rjmp	.+190    	; 0x3456 <midi_input_callbacks+0x132>
    3398:	63 30       	cpi	r22, 0x03	; 3
    339a:	71 05       	cpc	r23, r1
    339c:	29 f0       	breq	.+10     	; 0x33a8 <midi_input_callbacks+0x84>
    339e:	61 30       	cpi	r22, 0x01	; 1
    33a0:	71 05       	cpc	r23, r1
    33a2:	09 f0       	breq	.+2      	; 0x33a6 <midi_input_callbacks+0x82>
    33a4:	b3 c0       	rjmp	.+358    	; 0x350c <midi_input_callbacks+0x1e8>
    33a6:	99 c0       	rjmp	.+306    	; 0x34da <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    33a8:	84 2f       	mov	r24, r20
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	80 7f       	andi	r24, 0xF0	; 240
    33ae:	90 70       	andi	r25, 0x00	; 0
    33b0:	80 3a       	cpi	r24, 0xA0	; 160
    33b2:	91 05       	cpc	r25, r1
    33b4:	29 f1       	breq	.+74     	; 0x3400 <midi_input_callbacks+0xdc>
    33b6:	81 3a       	cpi	r24, 0xA1	; 161
    33b8:	91 05       	cpc	r25, r1
    33ba:	3c f4       	brge	.+14     	; 0x33ca <midi_input_callbacks+0xa6>
    33bc:	80 38       	cpi	r24, 0x80	; 128
    33be:	91 05       	cpc	r25, r1
    33c0:	c9 f0       	breq	.+50     	; 0x33f4 <midi_input_callbacks+0xd0>
    33c2:	80 39       	cpi	r24, 0x90	; 144
    33c4:	91 05       	cpc	r25, r1
    33c6:	91 f5       	brne	.+100    	; 0x342c <midi_input_callbacks+0x108>
    33c8:	0f c0       	rjmp	.+30     	; 0x33e8 <midi_input_callbacks+0xc4>
    33ca:	80 3e       	cpi	r24, 0xE0	; 224
    33cc:	91 05       	cpc	r25, r1
    33ce:	f1 f0       	breq	.+60     	; 0x340c <midi_input_callbacks+0xe8>
    33d0:	80 3f       	cpi	r24, 0xF0	; 240
    33d2:	91 05       	cpc	r25, r1
    33d4:	09 f1       	breq	.+66     	; 0x3418 <midi_input_callbacks+0xf4>
    33d6:	80 3b       	cpi	r24, 0xB0	; 176
    33d8:	91 05       	cpc	r25, r1
    33da:	41 f5       	brne	.+80     	; 0x342c <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    33dc:	d6 01       	movw	r26, r12
    33de:	12 96       	adiw	r26, 0x02	; 2
    33e0:	ed 91       	ld	r30, X+
    33e2:	fc 91       	ld	r31, X
    33e4:	13 97       	sbiw	r26, 0x03	; 3
              break;
    33e6:	24 c0       	rjmp	.+72     	; 0x3430 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    33e8:	d6 01       	movw	r26, r12
    33ea:	14 96       	adiw	r26, 0x04	; 4
    33ec:	ed 91       	ld	r30, X+
    33ee:	fc 91       	ld	r31, X
    33f0:	15 97       	sbiw	r26, 0x05	; 5
              break;
    33f2:	1e c0       	rjmp	.+60     	; 0x3430 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    33f4:	d6 01       	movw	r26, r12
    33f6:	16 96       	adiw	r26, 0x06	; 6
    33f8:	ed 91       	ld	r30, X+
    33fa:	fc 91       	ld	r31, X
    33fc:	17 97       	sbiw	r26, 0x07	; 7
              break;
    33fe:	18 c0       	rjmp	.+48     	; 0x3430 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    3400:	d6 01       	movw	r26, r12
    3402:	18 96       	adiw	r26, 0x08	; 8
    3404:	ed 91       	ld	r30, X+
    3406:	fc 91       	ld	r31, X
    3408:	19 97       	sbiw	r26, 0x09	; 9
              break;
    340a:	12 c0       	rjmp	.+36     	; 0x3430 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    340c:	d6 01       	movw	r26, r12
    340e:	1a 96       	adiw	r26, 0x0a	; 10
    3410:	ed 91       	ld	r30, X+
    3412:	fc 91       	ld	r31, X
    3414:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    3416:	0c c0       	rjmp	.+24     	; 0x3430 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    3418:	b2 ef       	ldi	r27, 0xF2	; 242
    341a:	4b 17       	cp	r20, r27
    341c:	09 f0       	breq	.+2      	; 0x3420 <midi_input_callbacks+0xfc>
    341e:	90 c0       	rjmp	.+288    	; 0x3540 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    3420:	d6 01       	movw	r26, r12
    3422:	1c 96       	adiw	r26, 0x0c	; 12
    3424:	ed 91       	ld	r30, X+
    3426:	fc 91       	ld	r31, X
    3428:	1d 97       	sbiw	r26, 0x0d	; 13
    342a:	02 c0       	rjmp	.+4      	; 0x3430 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    342c:	e0 e0       	ldi	r30, 0x00	; 0
    342e:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    3430:	30 97       	sbiw	r30, 0x00	; 0
    3432:	09 f4       	brne	.+2      	; 0x3436 <midi_input_callbacks+0x112>
    3434:	85 c0       	rjmp	.+266    	; 0x3540 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    3436:	b2 ef       	ldi	r27, 0xF2	; 242
    3438:	fb 16       	cp	r15, r27
    343a:	31 f4       	brne	.+12     	; 0x3448 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    343c:	c6 01       	movw	r24, r12
    343e:	62 ef       	ldi	r22, 0xF2	; 242
    3440:	4e 2d       	mov	r20, r14
    3442:	21 2f       	mov	r18, r17
    3444:	09 95       	icall
    3446:	6c c0       	rjmp	.+216    	; 0x3520 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    3448:	6f 2d       	mov	r22, r15
    344a:	6f 70       	andi	r22, 0x0F	; 15
    344c:	c6 01       	movw	r24, r12
    344e:	4e 2d       	mov	r20, r14
    3450:	21 2f       	mov	r18, r17
    3452:	09 95       	icall
    3454:	65 c0       	rjmp	.+202    	; 0x3520 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3456:	84 2f       	mov	r24, r20
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	80 7f       	andi	r24, 0xF0	; 240
    345c:	90 70       	andi	r25, 0x00	; 0
    345e:	80 3d       	cpi	r24, 0xD0	; 208
    3460:	91 05       	cpc	r25, r1
    3462:	61 f0       	breq	.+24     	; 0x347c <midi_input_callbacks+0x158>
    3464:	80 3f       	cpi	r24, 0xF0	; 240
    3466:	91 05       	cpc	r25, r1
    3468:	79 f0       	breq	.+30     	; 0x3488 <midi_input_callbacks+0x164>
    346a:	80 3c       	cpi	r24, 0xC0	; 192
    346c:	91 05       	cpc	r25, r1
    346e:	f9 f4       	brne	.+62     	; 0x34ae <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    3470:	d6 01       	movw	r26, r12
    3472:	1e 96       	adiw	r26, 0x0e	; 14
    3474:	ed 91       	ld	r30, X+
    3476:	fc 91       	ld	r31, X
    3478:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    347a:	1b c0       	rjmp	.+54     	; 0x34b2 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    347c:	d6 01       	movw	r26, r12
    347e:	50 96       	adiw	r26, 0x10	; 16
    3480:	ed 91       	ld	r30, X+
    3482:	fc 91       	ld	r31, X
    3484:	51 97       	sbiw	r26, 0x11	; 17
              break;
    3486:	15 c0       	rjmp	.+42     	; 0x34b2 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    3488:	b3 ef       	ldi	r27, 0xF3	; 243
    348a:	4b 17       	cp	r20, r27
    348c:	31 f4       	brne	.+12     	; 0x349a <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    348e:	d6 01       	movw	r26, r12
    3490:	52 96       	adiw	r26, 0x12	; 18
    3492:	ed 91       	ld	r30, X+
    3494:	fc 91       	ld	r31, X
    3496:	53 97       	sbiw	r26, 0x13	; 19
    3498:	0c c0       	rjmp	.+24     	; 0x34b2 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    349a:	b1 ef       	ldi	r27, 0xF1	; 241
    349c:	4b 17       	cp	r20, r27
    349e:	09 f0       	breq	.+2      	; 0x34a2 <midi_input_callbacks+0x17e>
    34a0:	4f c0       	rjmp	.+158    	; 0x3540 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    34a2:	d6 01       	movw	r26, r12
    34a4:	54 96       	adiw	r26, 0x14	; 20
    34a6:	ed 91       	ld	r30, X+
    34a8:	fc 91       	ld	r31, X
    34aa:	55 97       	sbiw	r26, 0x15	; 21
    34ac:	02 c0       	rjmp	.+4      	; 0x34b2 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    34ae:	e0 e0       	ldi	r30, 0x00	; 0
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    34b2:	30 97       	sbiw	r30, 0x00	; 0
    34b4:	09 f4       	brne	.+2      	; 0x34b8 <midi_input_callbacks+0x194>
    34b6:	44 c0       	rjmp	.+136    	; 0x3540 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    34b8:	b3 ef       	ldi	r27, 0xF3	; 243
    34ba:	fb 16       	cp	r15, r27
    34bc:	19 f0       	breq	.+6      	; 0x34c4 <midi_input_callbacks+0x1a0>
    34be:	81 ef       	ldi	r24, 0xF1	; 241
    34c0:	f8 16       	cp	r15, r24
    34c2:	29 f4       	brne	.+10     	; 0x34ce <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    34c4:	c6 01       	movw	r24, r12
    34c6:	6f 2d       	mov	r22, r15
    34c8:	4e 2d       	mov	r20, r14
    34ca:	09 95       	icall
    34cc:	29 c0       	rjmp	.+82     	; 0x3520 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    34ce:	6f 2d       	mov	r22, r15
    34d0:	6f 70       	andi	r22, 0x0F	; 15
    34d2:	c6 01       	movw	r24, r12
    34d4:	4e 2d       	mov	r20, r14
    34d6:	09 95       	icall
    34d8:	23 c0       	rjmp	.+70     	; 0x3520 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    34da:	84 2f       	mov	r24, r20
    34dc:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <midi_is_realtime>
    34e0:	88 23       	and	r24, r24
    34e2:	31 f0       	breq	.+12     	; 0x34f0 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    34e4:	d6 01       	movw	r26, r12
    34e6:	56 96       	adiw	r26, 0x16	; 22
    34e8:	ed 91       	ld	r30, X+
    34ea:	fc 91       	ld	r31, X
    34ec:	57 97       	sbiw	r26, 0x17	; 23
    34ee:	08 c0       	rjmp	.+16     	; 0x3500 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    34f0:	b6 ef       	ldi	r27, 0xF6	; 246
    34f2:	fb 16       	cp	r15, r27
    34f4:	29 f5       	brne	.+74     	; 0x3540 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    34f6:	d6 01       	movw	r26, r12
    34f8:	58 96       	adiw	r26, 0x18	; 24
    34fa:	ed 91       	ld	r30, X+
    34fc:	fc 91       	ld	r31, X
    34fe:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    3500:	30 97       	sbiw	r30, 0x00	; 0
    3502:	f1 f0       	breq	.+60     	; 0x3540 <midi_input_callbacks+0x21c>
            func(device, byte0);
    3504:	c6 01       	movw	r24, r12
    3506:	6f 2d       	mov	r22, r15
    3508:	09 95       	icall
    350a:	0a c0       	rjmp	.+20     	; 0x3520 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    350c:	64 30       	cpi	r22, 0x04	; 4
    350e:	71 05       	cpc	r23, r1
    3510:	a8 f4       	brcc	.+42     	; 0x353c <midi_input_callbacks+0x218>
    3512:	16 c0       	rjmp	.+44     	; 0x3540 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    3514:	c6 01       	movw	r24, r12
    3516:	b5 01       	movw	r22, r10
    3518:	4f 2d       	mov	r20, r15
    351a:	2e 2d       	mov	r18, r14
    351c:	01 2f       	mov	r16, r17
    351e:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    3520:	d6 01       	movw	r26, r12
    3522:	5e 96       	adiw	r26, 0x1e	; 30
    3524:	ed 91       	ld	r30, X+
    3526:	fc 91       	ld	r31, X
    3528:	5f 97       	sbiw	r26, 0x1f	; 31
    352a:	30 97       	sbiw	r30, 0x00	; 0
    352c:	89 f0       	breq	.+34     	; 0x3550 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    352e:	c6 01       	movw	r24, r12
    3530:	b5 01       	movw	r22, r10
    3532:	4f 2d       	mov	r20, r15
    3534:	2e 2d       	mov	r18, r14
    3536:	01 2f       	mov	r16, r17
    3538:	09 95       	icall
    353a:	0a c0       	rjmp	.+20     	; 0x3550 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    353c:	aa 24       	eor	r10, r10
    353e:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    3540:	d6 01       	movw	r26, r12
    3542:	5c 96       	adiw	r26, 0x1c	; 28
    3544:	ed 91       	ld	r30, X+
    3546:	fc 91       	ld	r31, X
    3548:	5d 97       	sbiw	r26, 0x1d	; 29
    354a:	30 97       	sbiw	r30, 0x00	; 0
    354c:	19 f7       	brne	.-58     	; 0x3514 <midi_input_callbacks+0x1f0>
    354e:	e8 cf       	rjmp	.-48     	; 0x3520 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	1f 91       	pop	r17
    355c:	0f 91       	pop	r16
    355e:	ff 90       	pop	r15
    3560:	ef 90       	pop	r14
    3562:	df 90       	pop	r13
    3564:	cf 90       	pop	r12
    3566:	bf 90       	pop	r11
    3568:	af 90       	pop	r10
    356a:	08 95       	ret

0000356c <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    356c:	ef 92       	push	r14
    356e:	ff 92       	push	r15
    3570:	0f 93       	push	r16
    3572:	cf 93       	push	r28
    3574:	df 93       	push	r29
    3576:	7c 01       	movw	r14, r24
    3578:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    357a:	86 2f       	mov	r24, r22
    357c:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <midi_is_realtime>
    3580:	88 23       	and	r24, r24
    3582:	91 f0       	breq	.+36     	; 0x35a8 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    3584:	d7 01       	movw	r26, r14
    3586:	95 96       	adiw	r26, 0x25	; 37
    3588:	dc 91       	ld	r29, X
    358a:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	95 96       	adiw	r26, 0x25	; 37
    3590:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    3592:	c7 01       	movw	r24, r14
    3594:	61 e0       	ldi	r22, 0x01	; 1
    3596:	70 e0       	ldi	r23, 0x00	; 0
    3598:	4c 2f       	mov	r20, r28
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	00 e0       	ldi	r16, 0x00	; 0
    359e:	0e 94 92 19 	call	0x3324	; 0x3324 <midi_input_callbacks>
    device->input_state = state;
    35a2:	f7 01       	movw	r30, r14
    35a4:	d5 a3       	lds	r29, 0x55
    35a6:	b7 c0       	rjmp	.+366    	; 0x3716 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    35a8:	8c 2f       	mov	r24, r28
    35aa:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <midi_is_statusbyte>
    35ae:	88 23       	and	r24, r24
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <midi_process_byte+0x48>
    35b2:	73 c0       	rjmp	.+230    	; 0x369a <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    35b4:	d7 01       	movw	r26, r14
    35b6:	95 96       	adiw	r26, 0x25	; 37
    35b8:	8c 91       	ld	r24, X
    35ba:	95 97       	sbiw	r26, 0x25	; 37
    35bc:	84 30       	cpi	r24, 0x04	; 4
    35be:	49 f0       	breq	.+18     	; 0x35d2 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    35c0:	92 96       	adiw	r26, 0x22	; 34
    35c2:	cc 93       	st	X, r28
    35c4:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	97 96       	adiw	r26, 0x27	; 39
    35cc:	9c 93       	st	X, r25
    35ce:	8e 93       	st	-X, r24
    35d0:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    35d2:	8c 2f       	mov	r24, r28
    35d4:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <midi_packet_length>
    35d8:	81 30       	cpi	r24, 0x01	; 1
    35da:	41 f0       	breq	.+16     	; 0x35ec <midi_process_byte+0x80>
    35dc:	81 30       	cpi	r24, 0x01	; 1
    35de:	00 f1       	brcs	.+64     	; 0x3620 <midi_process_byte+0xb4>
    35e0:	82 30       	cpi	r24, 0x02	; 2
    35e2:	a1 f0       	breq	.+40     	; 0x360c <midi_process_byte+0xa0>
    35e4:	83 30       	cpi	r24, 0x03	; 3
    35e6:	09 f0       	breq	.+2      	; 0x35ea <midi_process_byte+0x7e>
    35e8:	4f c0       	rjmp	.+158    	; 0x3688 <midi_process_byte+0x11c>
    35ea:	14 c0       	rjmp	.+40     	; 0x3614 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	f7 01       	movw	r30, r14
    35f0:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    35f2:	c7 01       	movw	r24, r14
    35f4:	61 e0       	ldi	r22, 0x01	; 1
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	4c 2f       	mov	r20, r28
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	00 e0       	ldi	r16, 0x00	; 0
    35fe:	0e 94 92 19 	call	0x3324	; 0x3324 <midi_input_callbacks>
        device->input_state = IDLE;
    3602:	d7 01       	movw	r26, r14
    3604:	95 96       	adiw	r26, 0x25	; 37
    3606:	1c 92       	st	X, r1
    3608:	95 97       	sbiw	r26, 0x25	; 37
        break;
    360a:	85 c0       	rjmp	.+266    	; 0x3716 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    360c:	82 e0       	ldi	r24, 0x02	; 2
    360e:	f7 01       	movw	r30, r14
    3610:	85 a3       	lds	r24, 0x55
        break;
    3612:	81 c0       	rjmp	.+258    	; 0x3716 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    3614:	83 e0       	ldi	r24, 0x03	; 3
    3616:	d7 01       	movw	r26, r14
    3618:	95 96       	adiw	r26, 0x25	; 37
    361a:	8c 93       	st	X, r24
    361c:	95 97       	sbiw	r26, 0x25	; 37
        break;
    361e:	7b c0       	rjmp	.+246    	; 0x3716 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    3620:	c0 3f       	cpi	r28, 0xF0	; 240
    3622:	19 f0       	breq	.+6      	; 0x362a <midi_process_byte+0xbe>
    3624:	c7 3f       	cpi	r28, 0xF7	; 247
    3626:	59 f5       	brne	.+86     	; 0x367e <midi_process_byte+0x112>
    3628:	0a c0       	rjmp	.+20     	; 0x363e <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    362a:	84 e0       	ldi	r24, 0x04	; 4
    362c:	f7 01       	movw	r30, r14
    362e:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    3630:	80 ef       	ldi	r24, 0xF0	; 240
    3632:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	97 a3       	lds	r25, 0x57
    363a:	86 a3       	lds	r24, 0x56
            break;
    363c:	6c c0       	rjmp	.+216    	; 0x3716 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    363e:	d7 01       	movw	r26, r14
    3640:	96 96       	adiw	r26, 0x26	; 38
    3642:	2d 91       	ld	r18, X+
    3644:	3c 91       	ld	r19, X
    3646:	97 97       	sbiw	r26, 0x27	; 39
    3648:	c9 01       	movw	r24, r18
    364a:	63 e0       	ldi	r22, 0x03	; 3
    364c:	70 e0       	ldi	r23, 0x00	; 0
    364e:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__udivmodhi4>
    3652:	f7 01       	movw	r30, r14
    3654:	e8 0f       	add	r30, r24
    3656:	f9 1f       	adc	r31, r25
    3658:	87 ef       	ldi	r24, 0xF7	; 247
    365a:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    365c:	b9 01       	movw	r22, r18
    365e:	6f 5f       	subi	r22, 0xFF	; 255
    3660:	7f 4f       	sbci	r23, 0xFF	; 255
    3662:	f7 01       	movw	r30, r14
    3664:	77 a3       	lds	r23, 0x57
    3666:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3668:	c7 01       	movw	r24, r14
    366a:	42 a1       	lds	r20, 0x42
    366c:	23 a1       	lds	r18, 0x43
    366e:	04 a1       	lds	r16, 0x44
    3670:	0e 94 92 19 	call	0x3324	; 0x3324 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3674:	d7 01       	movw	r26, r14
    3676:	95 96       	adiw	r26, 0x25	; 37
    3678:	1c 92       	st	X, r1
    367a:	95 97       	sbiw	r26, 0x25	; 37
            break;
    367c:	4c c0       	rjmp	.+152    	; 0x3716 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    367e:	f7 01       	movw	r30, r14
    3680:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    3682:	17 a2       	lds	r17, 0x97
    3684:	16 a2       	lds	r17, 0x96
    3686:	47 c0       	rjmp	.+142    	; 0x3716 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    3688:	d7 01       	movw	r26, r14
    368a:	95 96       	adiw	r26, 0x25	; 37
    368c:	1c 92       	st	X, r1
    368e:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    3690:	97 96       	adiw	r26, 0x27	; 39
    3692:	1c 92       	st	X, r1
    3694:	1e 92       	st	-X, r1
    3696:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3698:	3e c0       	rjmp	.+124    	; 0x3716 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    369a:	f7 01       	movw	r30, r14
    369c:	25 a1       	lds	r18, 0x45
    369e:	22 23       	and	r18, r18
    36a0:	d1 f1       	breq	.+116    	; 0x3716 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    36a2:	06 a0       	lds	r16, 0x86
    36a4:	f7 a1       	lds	r31, 0x47
    36a6:	e0 2d       	mov	r30, r0
    36a8:	cf 01       	movw	r24, r30
    36aa:	63 e0       	ldi	r22, 0x03	; 3
    36ac:	70 e0       	ldi	r23, 0x00	; 0
    36ae:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__udivmodhi4>
    36b2:	ac 01       	movw	r20, r24
    36b4:	8e 0d       	add	r24, r14
    36b6:	9f 1d       	adc	r25, r15
    36b8:	dc 01       	movw	r26, r24
    36ba:	92 96       	adiw	r26, 0x22	; 34
    36bc:	cc 93       	st	X, r28
    36be:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    36c0:	bf 01       	movw	r22, r30
    36c2:	6f 5f       	subi	r22, 0xFF	; 255
    36c4:	7f 4f       	sbci	r23, 0xFF	; 255
    36c6:	f7 01       	movw	r30, r14
    36c8:	77 a3       	lds	r23, 0x57
    36ca:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    36cc:	41 30       	cpi	r20, 0x01	; 1
    36ce:	51 05       	cpc	r21, r1
    36d0:	91 f0       	breq	.+36     	; 0x36f6 <midi_process_byte+0x18a>
    36d2:	42 30       	cpi	r20, 0x02	; 2
    36d4:	51 05       	cpc	r21, r1
    36d6:	f9 f4       	brne	.+62     	; 0x3716 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    36d8:	c7 01       	movw	r24, r14
    36da:	42 a1       	lds	r20, 0x42
    36dc:	23 a1       	lds	r18, 0x43
    36de:	04 a1       	lds	r16, 0x44
    36e0:	0e 94 92 19 	call	0x3324	; 0x3324 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    36e4:	f7 01       	movw	r30, r14
    36e6:	85 a1       	lds	r24, 0x45
    36e8:	84 30       	cpi	r24, 0x04	; 4
    36ea:	a9 f0       	breq	.+42     	; 0x3716 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	97 a3       	lds	r25, 0x57
    36f2:	86 a3       	lds	r24, 0x56
    36f4:	10 c0       	rjmp	.+32     	; 0x3716 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    36f6:	22 30       	cpi	r18, 0x02	; 2
    36f8:	71 f4       	brne	.+28     	; 0x3716 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    36fa:	c7 01       	movw	r24, r14
    36fc:	42 a1       	lds	r20, 0x42
    36fe:	23 a1       	lds	r18, 0x43
    3700:	00 e0       	ldi	r16, 0x00	; 0
    3702:	0e 94 92 19 	call	0x3324	; 0x3324 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3706:	f7 01       	movw	r30, r14
    3708:	85 a1       	lds	r24, 0x45
    370a:	84 30       	cpi	r24, 0x04	; 4
    370c:	21 f0       	breq	.+8      	; 0x3716 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	97 a3       	lds	r25, 0x57
    3714:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	0f 91       	pop	r16
    371c:	ff 90       	pop	r15
    371e:	ef 90       	pop	r14
    3720:	08 95       	ret

00003722 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    3722:	cf 92       	push	r12
    3724:	df 92       	push	r13
    3726:	ef 92       	push	r14
    3728:	ff 92       	push	r15
    372a:	0f 93       	push	r16
    372c:	1f 93       	push	r17
    372e:	cf 93       	push	r28
    3730:	df 93       	push	r29
    3732:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    3734:	dc 01       	movw	r26, r24
    3736:	90 96       	adiw	r26, 0x20	; 32
    3738:	ed 91       	ld	r30, X+
    373a:	fc 91       	ld	r31, X
    373c:	91 97       	sbiw	r26, 0x21	; 33
    373e:	30 97       	sbiw	r30, 0x00	; 0
    3740:	09 f0       	breq	.+2      	; 0x3744 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    3742:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    3744:	0f 2e       	mov	r0, r31
    3746:	f8 ee       	ldi	r31, 0xE8	; 232
    3748:	ef 2e       	mov	r14, r31
    374a:	ff 24       	eor	r15, r15
    374c:	f0 2d       	mov	r31, r0
    374e:	ec 0c       	add	r14, r12
    3750:	fd 1c       	adc	r15, r13
    3752:	c7 01       	movw	r24, r14
    3754:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3758:	c8 2f       	mov	r28, r24
    375a:	d0 e0       	ldi	r29, 0x00	; 0
    375c:	20 97       	sbiw	r28, 0x00	; 0
    375e:	99 f0       	breq	.+38     	; 0x3786 <midi_device_process+0x64>
    3760:	00 e0       	ldi	r16, 0x00	; 0
    3762:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    3764:	c7 01       	movw	r24, r14
    3766:	60 e0       	ldi	r22, 0x00	; 0
    3768:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <bytequeue_get>
    376c:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    376e:	c6 01       	movw	r24, r12
    3770:	0e 94 b6 1a 	call	0x356c	; 0x356c <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3774:	c7 01       	movw	r24, r14
    3776:	61 e0       	ldi	r22, 0x01	; 1
    3778:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    377c:	0f 5f       	subi	r16, 0xFF	; 255
    377e:	1f 4f       	sbci	r17, 0xFF	; 255
    3780:	0c 17       	cp	r16, r28
    3782:	1d 07       	cpc	r17, r29
    3784:	78 f3       	brcs	.-34     	; 0x3764 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    3786:	df 91       	pop	r29
    3788:	cf 91       	pop	r28
    378a:	1f 91       	pop	r17
    378c:	0f 91       	pop	r16
    378e:	ff 90       	pop	r15
    3790:	ef 90       	pop	r14
    3792:	df 90       	pop	r13
    3794:	cf 90       	pop	r12
    3796:	08 95       	ret

00003798 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3798:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    379a:	67 e0       	ldi	r22, 0x07	; 7
    379c:	70 e0       	ldi	r23, 0x00	; 0
    379e:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__udivmodhi4>
    37a2:	48 2f       	mov	r20, r24
   if (remainder)
    37a4:	88 23       	and	r24, r24
    37a6:	81 f0       	breq	.+32     	; 0x37c8 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    37a8:	c9 01       	movw	r24, r18
    37aa:	67 e0       	ldi	r22, 0x07	; 7
    37ac:	70 e0       	ldi	r23, 0x00	; 0
    37ae:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__udivmodhi4>
    37b2:	cb 01       	movw	r24, r22
    37b4:	88 0f       	add	r24, r24
    37b6:	99 1f       	adc	r25, r25
    37b8:	88 0f       	add	r24, r24
    37ba:	99 1f       	adc	r25, r25
    37bc:	88 0f       	add	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	01 96       	adiw	r24, 0x01	; 1
    37c2:	84 0f       	add	r24, r20
    37c4:	91 1d       	adc	r25, r1
    37c6:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    37c8:	c9 01       	movw	r24, r18
    37ca:	67 e0       	ldi	r22, 0x07	; 7
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__udivmodhi4>
    37d2:	cb 01       	movw	r24, r22
    37d4:	88 0f       	add	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	88 0f       	add	r24, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	88 0f       	add	r24, r24
    37de:	99 1f       	adc	r25, r25
}
    37e0:	08 95       	ret

000037e2 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    37e2:	48 2f       	mov	r20, r24
    37e4:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    37e6:	a1 f0       	breq	.+40     	; 0x3810 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    37e8:	9c 01       	movw	r18, r24
    37ea:	36 95       	lsr	r19
    37ec:	27 95       	ror	r18
    37ee:	36 95       	lsr	r19
    37f0:	27 95       	ror	r18
    37f2:	36 95       	lsr	r19
    37f4:	27 95       	ror	r18
    37f6:	c9 01       	movw	r24, r18
    37f8:	88 0f       	add	r24, r24
    37fa:	99 1f       	adc	r25, r25
    37fc:	88 0f       	add	r24, r24
    37fe:	99 1f       	adc	r25, r25
    3800:	88 0f       	add	r24, r24
    3802:	99 1f       	adc	r25, r25
    3804:	82 1b       	sub	r24, r18
    3806:	93 0b       	sbc	r25, r19
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	84 0f       	add	r24, r20
    380c:	91 1d       	adc	r25, r1
    380e:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    3810:	9c 01       	movw	r18, r24
    3812:	36 95       	lsr	r19
    3814:	27 95       	ror	r18
    3816:	36 95       	lsr	r19
    3818:	27 95       	ror	r18
    381a:	36 95       	lsr	r19
    381c:	27 95       	ror	r18
    381e:	c9 01       	movw	r24, r18
    3820:	88 0f       	add	r24, r24
    3822:	99 1f       	adc	r25, r25
    3824:	88 0f       	add	r24, r24
    3826:	99 1f       	adc	r25, r25
    3828:	88 0f       	add	r24, r24
    382a:	99 1f       	adc	r25, r25
    382c:	82 1b       	sub	r24, r18
    382e:	93 0b       	sbc	r25, r19
}
    3830:	08 95       	ret

00003832 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3832:	2f 92       	push	r2
    3834:	3f 92       	push	r3
    3836:	4f 92       	push	r4
    3838:	5f 92       	push	r5
    383a:	6f 92       	push	r6
    383c:	7f 92       	push	r7
    383e:	8f 92       	push	r8
    3840:	9f 92       	push	r9
    3842:	af 92       	push	r10
    3844:	bf 92       	push	r11
    3846:	cf 92       	push	r12
    3848:	df 92       	push	r13
    384a:	ef 92       	push	r14
    384c:	ff 92       	push	r15
    384e:	0f 93       	push	r16
    3850:	1f 93       	push	r17
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
    3856:	00 d0       	rcall	.+0      	; 0x3858 <sysex_encode+0x26>
    3858:	00 d0       	rcall	.+0      	; 0x385a <sysex_encode+0x28>
    385a:	00 d0       	rcall	.+0      	; 0x385c <sysex_encode+0x2a>
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
    3860:	1c 01       	movw	r2, r24
    3862:	7a 83       	std	Y+2, r23	; 0x02
    3864:	69 83       	std	Y+1, r22	; 0x01
    3866:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3868:	ca 01       	movw	r24, r20
    386a:	67 e0       	ldi	r22, 0x07	; 7
    386c:	70 e0       	ldi	r23, 0x00	; 0
    386e:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__udivmodhi4>
    3872:	2b 01       	movw	r4, r22
    3874:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3876:	61 15       	cp	r22, r1
    3878:	71 05       	cpc	r23, r1
    387a:	b1 f1       	breq	.+108    	; 0x38e8 <sysex_encode+0xb6>
    387c:	81 01       	movw	r16, r2
    387e:	e9 80       	ldd	r14, Y+1	; 0x01
    3880:	fa 80       	ldd	r15, Y+2	; 0x02
    3882:	cc 24       	eor	r12, r12
    3884:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3886:	88 24       	eor	r8, r8
    3888:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    388a:	1e 83       	std	Y+6, r17	; 0x06
    388c:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    388e:	f8 01       	movw	r30, r16
    3890:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3892:	fc 82       	std	Y+4, r15	; 0x04
    3894:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3896:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3898:	ab 81       	ldd	r26, Y+3	; 0x03
    389a:	bc 81       	ldd	r27, Y+4	; 0x04
    389c:	2d 91       	ld	r18, X+
    389e:	bc 83       	std	Y+4, r27	; 0x04
    38a0:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    38a2:	4f 5f       	subi	r20, 0xFF	; 255
    38a4:	5f 4f       	sbci	r21, 0xFF	; 255
    38a6:	82 2f       	mov	r24, r18
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	80 78       	andi	r24, 0x80	; 128
    38ac:	90 70       	andi	r25, 0x00	; 0
    38ae:	bc 01       	movw	r22, r24
    38b0:	04 2e       	mov	r0, r20
    38b2:	02 c0       	rjmp	.+4      	; 0x38b8 <sysex_encode+0x86>
    38b4:	75 95       	asr	r23
    38b6:	67 95       	ror	r22
    38b8:	0a 94       	dec	r0
    38ba:	e2 f7       	brpl	.-8      	; 0x38b4 <sysex_encode+0x82>
    38bc:	ad 81       	ldd	r26, Y+5	; 0x05
    38be:	be 81       	ldd	r27, Y+6	; 0x06
    38c0:	8c 91       	ld	r24, X
    38c2:	86 2b       	or	r24, r22
    38c4:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    38c6:	2f 77       	andi	r18, 0x7F	; 127
    38c8:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38ca:	47 30       	cpi	r20, 0x07	; 7
    38cc:	51 05       	cpc	r21, r1
    38ce:	21 f7       	brne	.-56     	; 0x3898 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    38d0:	08 94       	sec
    38d2:	c1 1c       	adc	r12, r1
    38d4:	d1 1c       	adc	r13, r1
    38d6:	08 5f       	subi	r16, 0xF8	; 248
    38d8:	1f 4f       	sbci	r17, 0xFF	; 255
    38da:	e7 e0       	ldi	r30, 0x07	; 7
    38dc:	f0 e0       	ldi	r31, 0x00	; 0
    38de:	ee 0e       	add	r14, r30
    38e0:	ff 1e       	adc	r15, r31
    38e2:	ca 14       	cp	r12, r10
    38e4:	db 04       	cpc	r13, r11
    38e6:	89 f6       	brne	.-94     	; 0x388a <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    38e8:	c3 01       	movw	r24, r6
    38ea:	67 e0       	ldi	r22, 0x07	; 7
    38ec:	70 e0       	ldi	r23, 0x00	; 0
    38ee:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__udivmodhi4>
   if (remainder) {
    38f2:	88 23       	and	r24, r24
    38f4:	d9 f1       	breq	.+118    	; 0x396c <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    38f6:	82 01       	movw	r16, r4
    38f8:	00 0f       	add	r16, r16
    38fa:	11 1f       	adc	r17, r17
    38fc:	00 0f       	add	r16, r16
    38fe:	11 1f       	adc	r17, r17
    3900:	00 0f       	add	r16, r16
    3902:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3904:	78 01       	movw	r14, r16
    3906:	e4 18       	sub	r14, r4
    3908:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    390a:	d1 01       	movw	r26, r2
    390c:	a0 0f       	add	r26, r16
    390e:	b1 1f       	adc	r27, r17
    3910:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3912:	68 2f       	mov	r22, r24
    3914:	70 e0       	ldi	r23, 0x00	; 0
    3916:	61 15       	cp	r22, r1
    3918:	71 05       	cpc	r23, r1
    391a:	19 f1       	breq	.+70     	; 0x3962 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    391c:	e9 81       	ldd	r30, Y+1	; 0x01
    391e:	fa 81       	ldd	r31, Y+2	; 0x02
    3920:	ee 0e       	add	r14, r30
    3922:	ff 1e       	adc	r15, r31
    3924:	c8 01       	movw	r24, r16
    3926:	01 96       	adiw	r24, 0x01	; 1
    3928:	28 0e       	add	r2, r24
    392a:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    3930:	f7 01       	movw	r30, r14
    3932:	41 91       	ld	r20, Z+
    3934:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3936:	2f 5f       	subi	r18, 0xFF	; 255
    3938:	3f 4f       	sbci	r19, 0xFF	; 255
    393a:	84 2f       	mov	r24, r20
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	80 78       	andi	r24, 0x80	; 128
    3940:	90 70       	andi	r25, 0x00	; 0
    3942:	02 2e       	mov	r0, r18
    3944:	02 c0       	rjmp	.+4      	; 0x394a <sysex_encode+0x118>
    3946:	95 95       	asr	r25
    3948:	87 95       	ror	r24
    394a:	0a 94       	dec	r0
    394c:	e2 f7       	brpl	.-8      	; 0x3946 <sysex_encode+0x114>
    394e:	9c 91       	ld	r25, X
    3950:	89 2b       	or	r24, r25
    3952:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3954:	4f 77       	andi	r20, 0x7F	; 127
    3956:	f1 01       	movw	r30, r2
    3958:	41 93       	st	Z+, r20
    395a:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    395c:	26 17       	cp	r18, r22
    395e:	37 07       	cpc	r19, r23
    3960:	38 f3       	brcs	.-50     	; 0x3930 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3962:	c8 01       	movw	r24, r16
    3964:	01 96       	adiw	r24, 0x01	; 1
    3966:	86 0f       	add	r24, r22
    3968:	97 1f       	adc	r25, r23
    396a:	07 c0       	rjmp	.+14     	; 0x397a <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    396c:	c2 01       	movw	r24, r4
    396e:	88 0f       	add	r24, r24
    3970:	99 1f       	adc	r25, r25
    3972:	88 0f       	add	r24, r24
    3974:	99 1f       	adc	r25, r25
    3976:	88 0f       	add	r24, r24
    3978:	99 1f       	adc	r25, r25
   }
}
    397a:	26 96       	adiw	r28, 0x06	; 6
    397c:	0f b6       	in	r0, 0x3f	; 63
    397e:	f8 94       	cli
    3980:	de bf       	out	0x3e, r29	; 62
    3982:	0f be       	out	0x3f, r0	; 63
    3984:	cd bf       	out	0x3d, r28	; 61
    3986:	df 91       	pop	r29
    3988:	cf 91       	pop	r28
    398a:	1f 91       	pop	r17
    398c:	0f 91       	pop	r16
    398e:	ff 90       	pop	r15
    3990:	ef 90       	pop	r14
    3992:	df 90       	pop	r13
    3994:	cf 90       	pop	r12
    3996:	bf 90       	pop	r11
    3998:	af 90       	pop	r10
    399a:	9f 90       	pop	r9
    399c:	8f 90       	pop	r8
    399e:	7f 90       	pop	r7
    39a0:	6f 90       	pop	r6
    39a2:	5f 90       	pop	r5
    39a4:	4f 90       	pop	r4
    39a6:	3f 90       	pop	r3
    39a8:	2f 90       	pop	r2
    39aa:	08 95       	ret

000039ac <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    39ac:	6f 92       	push	r6
    39ae:	7f 92       	push	r7
    39b0:	8f 92       	push	r8
    39b2:	9f 92       	push	r9
    39b4:	af 92       	push	r10
    39b6:	bf 92       	push	r11
    39b8:	cf 92       	push	r12
    39ba:	df 92       	push	r13
    39bc:	ef 92       	push	r14
    39be:	ff 92       	push	r15
    39c0:	0f 93       	push	r16
    39c2:	1f 93       	push	r17
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
    39c8:	3c 01       	movw	r6, r24
    39ca:	4b 01       	movw	r8, r22
    39cc:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    39ce:	42 30       	cpi	r20, 0x02	; 2
    39d0:	51 05       	cpc	r21, r1
    39d2:	08 f4       	brcc	.+2      	; 0x39d6 <sysex_decode+0x2a>
    39d4:	6f c0       	rjmp	.+222    	; 0x3ab4 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    39d6:	7a 01       	movw	r14, r20
    39d8:	f6 94       	lsr	r15
    39da:	e7 94       	ror	r14
    39dc:	f6 94       	lsr	r15
    39de:	e7 94       	ror	r14
    39e0:	f6 94       	lsr	r15
    39e2:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    39e4:	e1 14       	cp	r14, r1
    39e6:	f1 04       	cpc	r15, r1
    39e8:	29 f1       	breq	.+74     	; 0x3a34 <sysex_decode+0x88>
    39ea:	eb 01       	movw	r28, r22
    39ec:	b3 01       	movw	r22, r6
    39ee:	00 e0       	ldi	r16, 0x00	; 0
    39f0:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    39f2:	cc 24       	eor	r12, r12
    39f4:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    39f6:	de 01       	movw	r26, r28
    39f8:	11 96       	adiw	r26, 0x01	; 1
    39fa:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    39fc:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    39fe:	2d 91       	ld	r18, X+
    3a00:	2f 77       	andi	r18, 0x7F	; 127
    3a02:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a04:	4f 5f       	subi	r20, 0xFF	; 255
    3a06:	5f 4f       	sbci	r21, 0xFF	; 255
    3a08:	88 81       	ld	r24, Y
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	04 2e       	mov	r0, r20
    3a0e:	02 c0       	rjmp	.+4      	; 0x3a14 <sysex_decode+0x68>
    3a10:	88 0f       	add	r24, r24
    3a12:	99 1f       	adc	r25, r25
    3a14:	0a 94       	dec	r0
    3a16:	e2 f7       	brpl	.-8      	; 0x3a10 <sysex_decode+0x64>
    3a18:	80 78       	andi	r24, 0x80	; 128
    3a1a:	28 2b       	or	r18, r24
    3a1c:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a1e:	47 30       	cpi	r20, 0x07	; 7
    3a20:	51 05       	cpc	r21, r1
    3a22:	69 f7       	brne	.-38     	; 0x39fe <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3a24:	0f 5f       	subi	r16, 0xFF	; 255
    3a26:	1f 4f       	sbci	r17, 0xFF	; 255
    3a28:	28 96       	adiw	r28, 0x08	; 8
    3a2a:	69 5f       	subi	r22, 0xF9	; 249
    3a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2e:	0e 15       	cp	r16, r14
    3a30:	1f 05       	cpc	r17, r15
    3a32:	09 f7       	brne	.-62     	; 0x39f6 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3a34:	5a 2d       	mov	r21, r10
    3a36:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3a38:	99 f1       	breq	.+102    	; 0x3aa0 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3a3a:	e7 01       	movw	r28, r14
    3a3c:	cc 0f       	add	r28, r28
    3a3e:	dd 1f       	adc	r29, r29
    3a40:	cc 0f       	add	r28, r28
    3a42:	dd 1f       	adc	r29, r29
    3a44:	cc 0f       	add	r28, r28
    3a46:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3a48:	8e 01       	movw	r16, r28
    3a4a:	0e 19       	sub	r16, r14
    3a4c:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3a4e:	65 2f       	mov	r22, r21
    3a50:	70 e0       	ldi	r23, 0x00	; 0
    3a52:	61 50       	subi	r22, 0x01	; 1
    3a54:	70 40       	sbci	r23, 0x00	; 0
    3a56:	f9 f0       	breq	.+62     	; 0x3a96 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a58:	ce 01       	movw	r24, r28
    3a5a:	01 96       	adiw	r24, 0x01	; 1
    3a5c:	d4 01       	movw	r26, r8
    3a5e:	a8 0f       	add	r26, r24
    3a60:	b9 1f       	adc	r27, r25
    3a62:	f3 01       	movw	r30, r6
    3a64:	e0 0f       	add	r30, r16
    3a66:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a6c:	c8 0d       	add	r28, r8
    3a6e:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3a70:	4d 91       	ld	r20, X+
    3a72:	4f 77       	andi	r20, 0x7F	; 127
    3a74:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a76:	2f 5f       	subi	r18, 0xFF	; 255
    3a78:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7a:	88 81       	ld	r24, Y
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	02 2e       	mov	r0, r18
    3a80:	02 c0       	rjmp	.+4      	; 0x3a86 <sysex_decode+0xda>
    3a82:	88 0f       	add	r24, r24
    3a84:	99 1f       	adc	r25, r25
    3a86:	0a 94       	dec	r0
    3a88:	e2 f7       	brpl	.-8      	; 0x3a82 <sysex_decode+0xd6>
    3a8a:	80 78       	andi	r24, 0x80	; 128
    3a8c:	48 2b       	or	r20, r24
    3a8e:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3a90:	26 17       	cp	r18, r22
    3a92:	37 07       	cpc	r19, r23
    3a94:	68 f3       	brcs	.-38     	; 0x3a70 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3a96:	c8 01       	movw	r24, r16
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	85 0f       	add	r24, r21
    3a9c:	91 1d       	adc	r25, r1
    3a9e:	0c c0       	rjmp	.+24     	; 0x3ab8 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3aa0:	c7 01       	movw	r24, r14
    3aa2:	88 0f       	add	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	88 0f       	add	r24, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	88 0f       	add	r24, r24
    3aac:	99 1f       	adc	r25, r25
    3aae:	8e 19       	sub	r24, r14
    3ab0:	9f 09       	sbc	r25, r15
    3ab2:	02 c0       	rjmp	.+4      	; 0x3ab8 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3ab8:	df 91       	pop	r29
    3aba:	cf 91       	pop	r28
    3abc:	1f 91       	pop	r17
    3abe:	0f 91       	pop	r16
    3ac0:	ff 90       	pop	r15
    3ac2:	ef 90       	pop	r14
    3ac4:	df 90       	pop	r13
    3ac6:	cf 90       	pop	r12
    3ac8:	bf 90       	pop	r11
    3aca:	af 90       	pop	r10
    3acc:	9f 90       	pop	r9
    3ace:	8f 90       	pop	r8
    3ad0:	7f 90       	pop	r7
    3ad2:	6f 90       	pop	r6
    3ad4:	08 95       	ret

00003ad6 <__mulsi3>:
    3ad6:	62 9f       	mul	r22, r18
    3ad8:	d0 01       	movw	r26, r0
    3ada:	73 9f       	mul	r23, r19
    3adc:	f0 01       	movw	r30, r0
    3ade:	82 9f       	mul	r24, r18
    3ae0:	e0 0d       	add	r30, r0
    3ae2:	f1 1d       	adc	r31, r1
    3ae4:	64 9f       	mul	r22, r20
    3ae6:	e0 0d       	add	r30, r0
    3ae8:	f1 1d       	adc	r31, r1
    3aea:	92 9f       	mul	r25, r18
    3aec:	f0 0d       	add	r31, r0
    3aee:	83 9f       	mul	r24, r19
    3af0:	f0 0d       	add	r31, r0
    3af2:	74 9f       	mul	r23, r20
    3af4:	f0 0d       	add	r31, r0
    3af6:	65 9f       	mul	r22, r21
    3af8:	f0 0d       	add	r31, r0
    3afa:	99 27       	eor	r25, r25
    3afc:	72 9f       	mul	r23, r18
    3afe:	b0 0d       	add	r27, r0
    3b00:	e1 1d       	adc	r30, r1
    3b02:	f9 1f       	adc	r31, r25
    3b04:	63 9f       	mul	r22, r19
    3b06:	b0 0d       	add	r27, r0
    3b08:	e1 1d       	adc	r30, r1
    3b0a:	f9 1f       	adc	r31, r25
    3b0c:	bd 01       	movw	r22, r26
    3b0e:	cf 01       	movw	r24, r30
    3b10:	11 24       	eor	r1, r1
    3b12:	08 95       	ret

00003b14 <__udivmodhi4>:
    3b14:	aa 1b       	sub	r26, r26
    3b16:	bb 1b       	sub	r27, r27
    3b18:	51 e1       	ldi	r21, 0x11	; 17
    3b1a:	07 c0       	rjmp	.+14     	; 0x3b2a <__udivmodhi4_ep>

00003b1c <__udivmodhi4_loop>:
    3b1c:	aa 1f       	adc	r26, r26
    3b1e:	bb 1f       	adc	r27, r27
    3b20:	a6 17       	cp	r26, r22
    3b22:	b7 07       	cpc	r27, r23
    3b24:	10 f0       	brcs	.+4      	; 0x3b2a <__udivmodhi4_ep>
    3b26:	a6 1b       	sub	r26, r22
    3b28:	b7 0b       	sbc	r27, r23

00003b2a <__udivmodhi4_ep>:
    3b2a:	88 1f       	adc	r24, r24
    3b2c:	99 1f       	adc	r25, r25
    3b2e:	5a 95       	dec	r21
    3b30:	a9 f7       	brne	.-22     	; 0x3b1c <__udivmodhi4_loop>
    3b32:	80 95       	com	r24
    3b34:	90 95       	com	r25
    3b36:	bc 01       	movw	r22, r24
    3b38:	cd 01       	movw	r24, r26
    3b3a:	08 95       	ret

00003b3c <__divmodhi4>:
    3b3c:	97 fb       	bst	r25, 7
    3b3e:	09 2e       	mov	r0, r25
    3b40:	07 26       	eor	r0, r23
    3b42:	0a d0       	rcall	.+20     	; 0x3b58 <__divmodhi4_neg1>
    3b44:	77 fd       	sbrc	r23, 7
    3b46:	04 d0       	rcall	.+8      	; 0x3b50 <__divmodhi4_neg2>
    3b48:	e5 df       	rcall	.-54     	; 0x3b14 <__udivmodhi4>
    3b4a:	06 d0       	rcall	.+12     	; 0x3b58 <__divmodhi4_neg1>
    3b4c:	00 20       	and	r0, r0
    3b4e:	1a f4       	brpl	.+6      	; 0x3b56 <__divmodhi4_exit>

00003b50 <__divmodhi4_neg2>:
    3b50:	70 95       	com	r23
    3b52:	61 95       	neg	r22
    3b54:	7f 4f       	sbci	r23, 0xFF	; 255

00003b56 <__divmodhi4_exit>:
    3b56:	08 95       	ret

00003b58 <__divmodhi4_neg1>:
    3b58:	f6 f7       	brtc	.-4      	; 0x3b56 <__divmodhi4_exit>
    3b5a:	90 95       	com	r25
    3b5c:	81 95       	neg	r24
    3b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b60:	08 95       	ret

00003b62 <memcpy>:
    3b62:	fb 01       	movw	r30, r22
    3b64:	dc 01       	movw	r26, r24
    3b66:	02 c0       	rjmp	.+4      	; 0x3b6c <memcpy+0xa>
    3b68:	01 90       	ld	r0, Z+
    3b6a:	0d 92       	st	X+, r0
    3b6c:	41 50       	subi	r20, 0x01	; 1
    3b6e:	50 40       	sbci	r21, 0x00	; 0
    3b70:	d8 f7       	brcc	.-10     	; 0x3b68 <memcpy+0x6>
    3b72:	08 95       	ret

00003b74 <memmove>:
    3b74:	68 17       	cp	r22, r24
    3b76:	79 07       	cpc	r23, r25
    3b78:	68 f4       	brcc	.+26     	; 0x3b94 <memmove+0x20>
    3b7a:	fb 01       	movw	r30, r22
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	e4 0f       	add	r30, r20
    3b80:	f5 1f       	adc	r31, r21
    3b82:	a4 0f       	add	r26, r20
    3b84:	b5 1f       	adc	r27, r21
    3b86:	02 c0       	rjmp	.+4      	; 0x3b8c <memmove+0x18>
    3b88:	02 90       	ld	r0, -Z
    3b8a:	0e 92       	st	-X, r0
    3b8c:	41 50       	subi	r20, 0x01	; 1
    3b8e:	50 40       	sbci	r21, 0x00	; 0
    3b90:	d8 f7       	brcc	.-10     	; 0x3b88 <memmove+0x14>
    3b92:	08 95       	ret
    3b94:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <memcpy>

00003b98 <__eerd_block_m6450a>:
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22

00003b9c <__eerd_blraw_m6450a>:
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	f9 99       	sbic	0x1f, 1	; 31
    3ba0:	fe cf       	rjmp	.-4      	; 0x3b9e <__eerd_blraw_m6450a+0x2>
    3ba2:	06 c0       	rjmp	.+12     	; 0x3bb0 <__eerd_blraw_m6450a+0x14>
    3ba4:	f2 bd       	out	0x22, r31	; 34
    3ba6:	e1 bd       	out	0x21, r30	; 33
    3ba8:	f8 9a       	sbi	0x1f, 0	; 31
    3baa:	31 96       	adiw	r30, 0x01	; 1
    3bac:	00 b4       	in	r0, 0x20	; 32
    3bae:	0d 92       	st	X+, r0
    3bb0:	41 50       	subi	r20, 0x01	; 1
    3bb2:	50 40       	sbci	r21, 0x00	; 0
    3bb4:	b8 f7       	brcc	.-18     	; 0x3ba4 <__eerd_blraw_m6450a+0x8>
    3bb6:	08 95       	ret

00003bb8 <__eerd_word_m6450a>:
    3bb8:	a8 e1       	ldi	r26, 0x18	; 24
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	42 e0       	ldi	r20, 0x02	; 2
    3bbe:	50 e0       	ldi	r21, 0x00	; 0
    3bc0:	0c 94 ce 1d 	jmp	0x3b9c	; 0x3b9c <__eerd_blraw_m6450a>

00003bc4 <__eeupd_block_m6450a>:
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	a4 0f       	add	r26, r20
    3bc8:	b5 1f       	adc	r27, r21
    3bca:	41 50       	subi	r20, 0x01	; 1
    3bcc:	50 40       	sbci	r21, 0x00	; 0
    3bce:	48 f0       	brcs	.+18     	; 0x3be2 <__eeupd_block_m6450a+0x1e>
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	84 0f       	add	r24, r20
    3bd4:	95 1f       	adc	r25, r21
    3bd6:	2e 91       	ld	r18, -X
    3bd8:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__eeupd_r18_m6450a>
    3bdc:	41 50       	subi	r20, 0x01	; 1
    3bde:	50 40       	sbci	r21, 0x00	; 0
    3be0:	d0 f7       	brcc	.-12     	; 0x3bd6 <__eeupd_block_m6450a+0x12>
    3be2:	08 95       	ret

00003be4 <__eeupd_byte_m6450a>:
    3be4:	26 2f       	mov	r18, r22

00003be6 <__eeupd_r18_m6450a>:
    3be6:	f9 99       	sbic	0x1f, 1	; 31
    3be8:	fe cf       	rjmp	.-4      	; 0x3be6 <__eeupd_r18_m6450a>
    3bea:	92 bd       	out	0x22, r25	; 34
    3bec:	81 bd       	out	0x21, r24	; 33
    3bee:	f8 9a       	sbi	0x1f, 0	; 31
    3bf0:	01 97       	sbiw	r24, 0x01	; 1
    3bf2:	00 b4       	in	r0, 0x20	; 32
    3bf4:	02 16       	cp	r0, r18
    3bf6:	31 f0       	breq	.+12     	; 0x3c04 <__eeupd_r18_m6450a+0x1e>
    3bf8:	20 bd       	out	0x20, r18	; 32
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	fa 9a       	sbi	0x1f, 2	; 31
    3c00:	f9 9a       	sbi	0x1f, 1	; 31
    3c02:	0f be       	out	0x3f, r0	; 63
    3c04:	08 95       	ret

00003c06 <__eeupd_word_m6450a>:
    3c06:	01 96       	adiw	r24, 0x01	; 1
    3c08:	27 2f       	mov	r18, r23
    3c0a:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__eeupd_r18_m6450a>
    3c0e:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__eeupd_byte_m6450a>

00003c12 <_exit>:
    3c12:	f8 94       	cli

00003c14 <__stop_program>:
    3c14:	ff cf       	rjmp	.-2      	; 0x3c14 <__stop_program>
