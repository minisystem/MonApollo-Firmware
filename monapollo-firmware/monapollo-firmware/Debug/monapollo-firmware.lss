
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003c34  00003ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c34  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000213  008002b0  008002b0  00003e98  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  0000450c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000300  00000000  00000000  00005440  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a08  00000000  00000000  00005740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018b0  00000000  00000000  0000c148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000214b  00000000  00000000  0000d9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d8c  00000000  00000000  0000fb44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000198a  00000000  00000000  000108d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002ea6  00000000  00000000  0001225a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00015100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__vector_9>
      28:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e4 e3       	ldi	r30, 0x34	; 52
      78:	fc e3       	ldi	r31, 0x3C	; 60
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a3 3c       	cpi	r26, 0xC3	; 195
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 1c 04 	call	0x838	; 0x838 <main>
      9a:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:
struct arp arp;


//static struct midi_note arp_sequence[24] = {0,0};

void update_arp_sequence(void) {
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
	
	//arp.step_number = gate_buffer + arp.range * gate_buffer; //gate buffer is the number of currently held notes
	//uint8_t temp_range = 1;
	arp.step_number = gate_buffer*(arp.range + 1);
     15e:	80 91 84 03 	lds	r24, 0x0384
     162:	8f 5f       	subi	r24, 0xFF	; 255
     164:	90 91 b0 02 	lds	r25, 0x02B0
     168:	89 9f       	mul	r24, r25
     16a:	80 2d       	mov	r24, r0
     16c:	11 24       	eor	r1, r1
     16e:	80 93 85 03 	sts	0x0385, r24
     172:	00 e0       	ldi	r16, 0x00	; 0
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     174:	aa 24       	eor	r10, r10
     176:	bb 24       	eor	r11, r11
	//uint8_t temp_range = 1;
	arp.step_number = gate_buffer*(arp.range + 1);
	
	
	//set arp sequence
	uint8_t step = 0;
     178:	10 e0       	ldi	r17, 0x00	; 0
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     17a:	88 24       	eor	r8, r8
     17c:	99 24       	eor	r9, r9
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     17e:	0f 2e       	mov	r0, r31
     180:	f9 e8       	ldi	r31, 0x89	; 137
     182:	ef 2e       	mov	r14, r31
     184:	f3 e0       	ldi	r31, 0x03	; 3
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
				
				case UP:
				
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     18a:	0f 2e       	mov	r0, r31
     18c:	f4 e8       	ldi	r31, 0x84	; 132
     18e:	cf 2e       	mov	r12, r31
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	df 2e       	mov	r13, r31
     194:	f0 2d       	mov	r31, r0
     196:	36 c0       	rjmp	.+108    	; 0x204 <update_arp_sequence+0xbe>
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     198:	e4 01       	movw	r28, r8
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
     19a:	81 50       	subi	r24, 0x01	; 1
     19c:	8c 1b       	sub	r24, r28
     19e:	0e 94 2a 01 	call	0x254	; 0x254 <get_indexed_note>
     1a2:	28 2f       	mov	r18, r24
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     1a4:	f7 01       	movw	r30, r14
     1a6:	80 81       	ld	r24, Z
     1a8:	88 23       	and	r24, r24
     1aa:	19 f0       	breq	.+6      	; 0x1b2 <update_arp_sequence+0x6c>
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	c1 f4       	brne	.+48     	; 0x1e0 <update_arp_sequence+0x9a>
     1b0:	0c c0       	rjmp	.+24     	; 0x1ca <update_arp_sequence+0x84>
				
				case UP:
				
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1b2:	81 2f       	mov	r24, r17
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	03 96       	adiw	r24, 0x03	; 3
     1b8:	88 0f       	add	r24, r24
     1ba:	99 1f       	adc	r25, r25
     1bc:	8c 0d       	add	r24, r12
     1be:	9d 1d       	adc	r25, r13
     1c0:	20 0f       	add	r18, r16
     1c2:	fc 01       	movw	r30, r24
     1c4:	20 83       	st	Z, r18
     1c6:	1f 5f       	subi	r17, 0xFF	; 255
				
					break;
     1c8:	0b c0       	rjmp	.+22     	; 0x1e0 <update_arp_sequence+0x9a>
					
				case DOWN:
				
					arp.sequence[step++].note = root_note - (range*12); //will need to handle min note out of range here
     1ca:	81 2f       	mov	r24, r17
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	03 96       	adiw	r24, 0x03	; 3
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	8c 0d       	add	r24, r12
     1d6:	9d 1d       	adc	r25, r13
     1d8:	20 1b       	sub	r18, r16
     1da:	fc 01       	movw	r30, r24
     1dc:	20 83       	st	Z, r18
     1de:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     1e0:	21 96       	adiw	r28, 0x01	; 1
     1e2:	80 91 b0 02 	lds	r24, 0x02B0
     1e6:	28 2f       	mov	r18, r24
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	c2 17       	cp	r28, r18
     1ec:	d3 07       	cpc	r29, r19
     1ee:	ac f2       	brlt	.-86     	; 0x19a <update_arp_sequence+0x54>
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     1f0:	08 94       	sec
     1f2:	a1 1c       	adc	r10, r1
     1f4:	b1 1c       	adc	r11, r1
     1f6:	04 5f       	subi	r16, 0xF4	; 244
     1f8:	f6 01       	movw	r30, r12
     1fa:	80 81       	ld	r24, Z
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	8a 15       	cp	r24, r10
     200:	9b 05       	cpc	r25, r11
     202:	2c f0       	brlt	.+10     	; 0x20e <update_arp_sequence+0xc8>
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     204:	80 91 b0 02 	lds	r24, 0x02B0
     208:	88 23       	and	r24, r24
     20a:	31 f6       	brne	.-116    	; 0x198 <update_arp_sequence+0x52>
     20c:	f1 cf       	rjmp	.-30     	; 0x1f0 <update_arp_sequence+0xaa>
	

		
	
	
}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	ff 90       	pop	r15
     218:	ef 90       	pop	r14
     21a:	df 90       	pop	r13
     21c:	cf 90       	pop	r12
     21e:	bf 90       	pop	r11
     220:	af 90       	pop	r10
     222:	9f 90       	pop	r9
     224:	8f 90       	pop	r8
     226:	08 95       	ret

00000228 <step_arp_note>:

void step_arp_note(void) { //updates arp note according to range, mode and keys held
	
	
	if (++arp.step_position >= arp.step_number) arp.step_position  = 0; //reset step position when at end of sequence 
     228:	80 91 86 03 	lds	r24, 0x0386
     22c:	8f 5f       	subi	r24, 0xFF	; 255
     22e:	80 93 86 03 	sts	0x0386, r24
     232:	90 91 85 03 	lds	r25, 0x0385
     236:	89 17       	cp	r24, r25
     238:	10 f0       	brcs	.+4      	; 0x23e <step_arp_note+0x16>
     23a:	10 92 86 03 	sts	0x0386, r1
	
	arp.current_note = arp.sequence[arp.step_position].note;
     23e:	e0 91 86 03 	lds	r30, 0x0386
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	ee 0f       	add	r30, r30
     246:	ff 1f       	adc	r31, r31
     248:	e6 57       	subi	r30, 0x76	; 118
     24a:	fc 4f       	sbci	r31, 0xFC	; 252
     24c:	80 81       	ld	r24, Z
     24e:	80 93 87 03 	sts	0x0387, r24
	

     252:	08 95       	ret

00000254 <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     254:	e8 2f       	mov	r30, r24
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ee 0f       	add	r30, r30
     25a:	ff 1f       	adc	r31, r31
     25c:	e8 54       	subi	r30, 0x48	; 72
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     260:	80 81       	ld	r24, Z
     262:	08 95       	ret

00000264 <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.clock_source == OFF) {
     264:	80 91 88 03 	lds	r24, 0x0388
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	19 f4       	brne	.+6      	; 0x272 <get_current_note+0xe>
		
		note = current_note;
     26c:	80 91 b1 02 	lds	r24, 0x02B1
     270:	08 95       	ret

		
	} else {
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     272:	80 91 87 03 	lds	r24, 0x0387
		
		
	}
	return note;
	
}
     276:	08 95       	ret

00000278 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	18 2f       	mov	r17, r24
     282:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     284:	8a eb       	ldi	r24, 0xBA	; 186
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	ec 01       	movw	r28, r24
     28a:	22 97       	sbiw	r28, 0x02	; 2
     28c:	be 01       	movw	r22, r28
     28e:	4e e0       	ldi	r20, 0x0E	; 14
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     296:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     298:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     29a:	10 93 b1 02 	sts	0x02B1, r17
	
} 
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	08 95       	ret

000002a8 <remove_note>:
void remove_note(uint8_t note){
     2a8:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     2aa:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     2ae:	c8 17       	cp	r28, r24
     2b0:	41 f0       	breq	.+16     	; 0x2c2 <remove_note+0x1a>
     2b2:	ea eb       	ldi	r30, 0xBA	; 186
     2b4:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     2ba:	90 81       	ld	r25, Z
     2bc:	98 17       	cp	r25, r24
     2be:	59 f4       	brne	.+22     	; 0x2d6 <remove_note+0x2e>
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     2c6:	fa 01       	movw	r30, r20
     2c8:	ee 0f       	add	r30, r30
     2ca:	ff 1f       	adc	r31, r31
     2cc:	e8 54       	subi	r30, 0x48	; 72
     2ce:	fe 4f       	sbci	r31, 0xFE	; 254
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	80 83       	st	Z, r24
			free_slot = i;
			break;
     2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2d6:	4f 5f       	subi	r20, 0xFF	; 255
     2d8:	5f 4f       	sbci	r21, 0xFF	; 255
     2da:	32 96       	adiw	r30, 0x02	; 2
     2dc:	48 30       	cpi	r20, 0x08	; 8
     2de:	51 05       	cpc	r21, r1
     2e0:	61 f7       	brne	.-40     	; 0x2ba <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     2e2:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	ca 01       	movw	r24, r20
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	bc 01       	movw	r22, r24
     2ee:	66 54       	subi	r22, 0x46	; 70
     2f0:	7e 4f       	sbci	r23, 0xFE	; 254
     2f2:	40 95       	com	r20
     2f4:	50 95       	com	r21
     2f6:	48 5f       	subi	r20, 0xF8	; 248
     2f8:	5f 4f       	sbci	r21, 0xFF	; 255
     2fa:	44 0f       	add	r20, r20
     2fc:	55 1f       	adc	r21, r21
     2fe:	88 54       	subi	r24, 0x48	; 72
     300:	9e 4f       	sbci	r25, 0xFE	; 254
     302:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <memmove>
	note_pool[7].note = EMPTY;	
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     30c:	80 91 b8 01 	lds	r24, 0x01B8
     310:	8f 3f       	cpi	r24, 0xFF	; 255
     312:	19 f4       	brne	.+6      	; 0x31a <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     314:	c0 93 b1 02 	sts	0x02B1, r28
     318:	02 c0       	rjmp	.+4      	; 0x31e <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     31a:	80 93 b1 02 	sts	0x02B1, r24

	}	
	
}
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     322:	8d e0       	ldi	r24, 0x0D	; 13
     324:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     32e:	08 95       	ret

00000330 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     330:	90 93 89 00 	sts	0x0089, r25
     334:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     338:	20 91 84 00 	lds	r18, 0x0084
     33c:	30 91 85 00 	lds	r19, 0x0085
     340:	82 17       	cp	r24, r18
     342:	93 07       	cpc	r25, r19
     344:	28 f4       	brcc	.+10     	; 0x350 <update_clock_rate+0x20>
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	90 93 85 00 	sts	0x0085, r25
     34c:	80 93 84 00 	sts	0x0084, r24
     350:	08 95       	ret

00000352 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     352:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     354:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     356:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     358:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     35a:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     35c:	8c 91       	ld	r24, X
     35e:	87 70       	andi	r24, 0x07	; 7
     360:	82 b9       	out	0x02, r24	; 2
     362:	66 e0       	ldi	r22, 0x06	; 6
     364:	6a 95       	dec	r22
     366:	f1 f7       	brne	.-4      	; 0x364 <set_control_voltage+0x12>
     368:	00 c0       	rjmp	.+0      	; 0x36a <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     36a:	ea ed       	ldi	r30, 0xDA	; 218
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	40 81       	ld	r20, Z
     370:	8c 91       	ld	r24, X
     372:	86 95       	lsr	r24
     374:	86 95       	lsr	r24
     376:	86 95       	lsr	r24
     378:	87 70       	andi	r24, 0x07	; 7
     37a:	21 e0       	ldi	r18, 0x01	; 1
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	b9 01       	movw	r22, r18
     380:	02 c0       	rjmp	.+4      	; 0x386 <set_control_voltage+0x34>
     382:	66 0f       	add	r22, r22
     384:	77 1f       	adc	r23, r23
     386:	8a 95       	dec	r24
     388:	e2 f7       	brpl	.-8      	; 0x382 <set_control_voltage+0x30>
     38a:	cb 01       	movw	r24, r22
     38c:	84 2b       	or	r24, r20
     38e:	80 83       	st	Z, r24
     390:	76 e0       	ldi	r23, 0x06	; 6
     392:	7a 95       	dec	r23
     394:	f1 f7       	brne	.-4      	; 0x392 <set_control_voltage+0x40>
     396:	00 c0       	rjmp	.+0      	; 0x398 <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     398:	80 81       	ld	r24, Z
     39a:	9c 91       	ld	r25, X
     39c:	96 95       	lsr	r25
     39e:	96 95       	lsr	r25
     3a0:	96 95       	lsr	r25
     3a2:	97 70       	andi	r25, 0x07	; 7
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <set_control_voltage+0x58>
     3a6:	22 0f       	add	r18, r18
     3a8:	33 1f       	adc	r19, r19
     3aa:	9a 95       	dec	r25
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <set_control_voltage+0x54>
     3ae:	20 95       	com	r18
     3b0:	28 23       	and	r18, r24
     3b2:	20 83       	st	Z, r18
	
}	
     3b4:	08 95       	ret

000003b6 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     3b6:	83 b3       	in	r24, 0x13	; 19
     3b8:	83 60       	ori	r24, 0x03	; 3
     3ba:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     3c0:	97 b1       	in	r25, 0x07	; 7
     3c2:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     3c4:	e9 ed       	ldi	r30, 0xD9	; 217
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 60       	ori	r24, 0x0F	; 15
     3cc:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     3ce:	ea ed       	ldi	r30, 0xDA	; 218
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	80 7f       	andi	r24, 0xF0	; 240
     3d6:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     3d8:	84 b3       	in	r24, 0x14	; 20
     3da:	83 60       	ori	r24, 0x03	; 3
     3dc:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     3de:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     3e0:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     3e2:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     3e4:	a0 9a       	sbi	0x14, 0	; 20
}
     3e6:	08 95       	ret

000003e8 <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	2e 97       	sbiw	r28, 0x0e	; 14
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     400:	28 e0       	ldi	r18, 0x08	; 8
     402:	29 83       	std	Y+1, r18	; 0x01
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	2a 83       	std	Y+2, r18	; 0x02
     408:	22 e0       	ldi	r18, 0x02	; 2
     40a:	2b 83       	std	Y+3, r18	; 0x03
     40c:	24 e0       	ldi	r18, 0x04	; 4
     40e:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     410:	de 01       	movw	r26, r28
     412:	15 96       	adiw	r26, 0x05	; 5
     414:	e7 ee       	ldi	r30, 0xE7	; 231
     416:	f1 e0       	ldi	r31, 0x01	; 1
     418:	2a e0       	ldi	r18, 0x0A	; 10
     41a:	01 90       	ld	r0, Z+
     41c:	0d 92       	st	X+, r0
     41e:	21 50       	subi	r18, 0x01	; 1
     420:	e1 f7       	brne	.-8      	; 0x41a <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     422:	2f ef       	ldi	r18, 0xFF	; 255
     424:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     426:	ea ed       	ldi	r30, 0xDA	; 218
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	20 81       	ld	r18, Z
     42c:	20 61       	ori	r18, 0x10	; 16
     42e:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     430:	20 81       	ld	r18, Z
     432:	2f 7e       	andi	r18, 0xEF	; 239
     434:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     436:	06 2f       	mov	r16, r22
     438:	10 e0       	ldi	r17, 0x00	; 0
     43a:	de 01       	movw	r26, r28
     43c:	a0 0f       	add	r26, r16
     43e:	b1 1f       	adc	r27, r17
     440:	11 96       	adiw	r26, 0x01	; 1
     442:	2c 91       	ld	r18, X
     444:	11 97       	sbiw	r26, 0x01	; 1
     446:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     448:	20 81       	ld	r18, Z
     44a:	20 62       	ori	r18, 0x20	; 32
     44c:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     44e:	20 81       	ld	r18, Z
     450:	2f 7d       	andi	r18, 0xDF	; 223
     452:	20 83       	st	Z, r18
     454:	48 2f       	mov	r20, r24
     456:	59 2f       	mov	r21, r25
     458:	87 e2       	ldi	r24, 0x27	; 39
     45a:	40 31       	cpi	r20, 0x10	; 16
     45c:	58 07       	cpc	r21, r24
     45e:	10 f0       	brcs	.+4      	; 0x464 <display_dec+0x7c>
     460:	4f e0       	ldi	r20, 0x0F	; 15
     462:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     464:	ca 01       	movw	r24, r20
     466:	96 95       	lsr	r25
     468:	87 95       	ror	r24
     46a:	96 95       	lsr	r25
     46c:	87 95       	ror	r24
     46e:	9a 01       	movw	r18, r20
     470:	36 95       	lsr	r19
     472:	27 95       	ror	r18
     474:	28 0f       	add	r18, r24
     476:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     478:	c9 01       	movw	r24, r18
     47a:	92 95       	swap	r25
     47c:	82 95       	swap	r24
     47e:	8f 70       	andi	r24, 0x0F	; 15
     480:	89 27       	eor	r24, r25
     482:	9f 70       	andi	r25, 0x0F	; 15
     484:	89 27       	eor	r24, r25
     486:	82 0f       	add	r24, r18
     488:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     48a:	29 2f       	mov	r18, r25
     48c:	33 27       	eor	r19, r19
     48e:	82 0f       	add	r24, r18
     490:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     492:	96 95       	lsr	r25
     494:	87 95       	ror	r24
     496:	96 95       	lsr	r25
     498:	87 95       	ror	r24
     49a:	96 95       	lsr	r25
     49c:	87 95       	ror	r24
	r = number - q2 * 10;
     49e:	28 2f       	mov	r18, r24
     4a0:	22 0f       	add	r18, r18
     4a2:	32 2f       	mov	r19, r18
     4a4:	33 0f       	add	r19, r19
     4a6:	33 0f       	add	r19, r19
     4a8:	23 0f       	add	r18, r19
     4aa:	e4 2f       	mov	r30, r20
     4ac:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	ea 30       	cpi	r30, 0x0A	; 10
     4b4:	10 f4       	brcc	.+4      	; 0x4ba <display_dec+0xd2>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	68 0f       	add	r22, r24
     4bc:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     4be:	9b 01       	movw	r18, r22
     4c0:	36 95       	lsr	r19
     4c2:	27 95       	ror	r18
     4c4:	36 95       	lsr	r19
     4c6:	27 95       	ror	r18
     4c8:	ab 01       	movw	r20, r22
     4ca:	56 95       	lsr	r21
     4cc:	47 95       	ror	r20
     4ce:	24 0f       	add	r18, r20
     4d0:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     4d2:	c9 01       	movw	r24, r18
     4d4:	92 95       	swap	r25
     4d6:	82 95       	swap	r24
     4d8:	8f 70       	andi	r24, 0x0F	; 15
     4da:	89 27       	eor	r24, r25
     4dc:	9f 70       	andi	r25, 0x0F	; 15
     4de:	89 27       	eor	r24, r25
     4e0:	82 0f       	add	r24, r18
     4e2:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     4e4:	29 2f       	mov	r18, r25
     4e6:	33 27       	eor	r19, r19
     4e8:	82 0f       	add	r24, r18
     4ea:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     4ec:	96 95       	lsr	r25
     4ee:	87 95       	ror	r24
     4f0:	96 95       	lsr	r25
     4f2:	87 95       	ror	r24
     4f4:	96 95       	lsr	r25
     4f6:	87 95       	ror	r24
	r = qa - q3 * 10;
     4f8:	98 2f       	mov	r25, r24
     4fa:	99 0f       	add	r25, r25
     4fc:	29 2f       	mov	r18, r25
     4fe:	22 0f       	add	r18, r18
     500:	22 0f       	add	r18, r18
     502:	92 0f       	add	r25, r18
     504:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	6a 30       	cpi	r22, 0x0A	; 10
     50a:	08 f4       	brcc	.+2      	; 0x50e <display_dec+0x126>
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	89 0f       	add	r24, r25
	tens_place = rem[r];
     510:	41 ef       	ldi	r20, 0xF1	; 241
     512:	51 e0       	ldi	r21, 0x01	; 1
     514:	da 01       	movw	r26, r20
     516:	a6 0f       	add	r26, r22
     518:	b1 1d       	adc	r27, r1
     51a:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     51c:	28 2f       	mov	r18, r24
     51e:	26 95       	lsr	r18
     520:	26 95       	lsr	r18
     522:	98 2f       	mov	r25, r24
     524:	96 95       	lsr	r25
     526:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     528:	29 2f       	mov	r18, r25
     52a:	22 95       	swap	r18
     52c:	2f 70       	andi	r18, 0x0F	; 15
     52e:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     530:	96 95       	lsr	r25
     532:	96 95       	lsr	r25
     534:	96 95       	lsr	r25
	r = qb - q4 * 10;
     536:	29 2f       	mov	r18, r25
     538:	22 0f       	add	r18, r18
     53a:	62 2f       	mov	r22, r18
     53c:	66 0f       	add	r22, r22
     53e:	66 0f       	add	r22, r22
     540:	26 0f       	add	r18, r22
     542:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     544:	da 01       	movw	r26, r20
     546:	a8 0f       	add	r26, r24
     548:	b1 1d       	adc	r27, r1
     54a:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     54c:	4e 0f       	add	r20, r30
     54e:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     550:	fa 01       	movw	r30, r20
     552:	40 81       	ld	r20, Z
     554:	40 93 b4 02 	sts	0x02B4, r20
	digit_index[1] = tens_place;
     558:	30 93 b5 02 	sts	0x02B5, r19
	digit_index[2] = hunds_place;
     55c:	20 93 b6 02 	sts	0x02B6, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	8a 30       	cpi	r24, 0x0A	; 10
     564:	08 f4       	brcc	.+2      	; 0x568 <display_dec+0x180>
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     56a:	90 93 b7 02 	sts	0x02B7, r25

	cathode_byte = dec[digit_index[place]];
     56e:	f8 01       	movw	r30, r16
     570:	ec 54       	subi	r30, 0x4C	; 76
     572:	fd 4f       	sbci	r31, 0xFD	; 253
     574:	80 81       	ld	r24, Z
     576:	fe 01       	movw	r30, r28
     578:	e8 0f       	add	r30, r24
     57a:	f1 1d       	adc	r31, r1
     57c:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     57e:	90 91 07 03 	lds	r25, 0x0307
     582:	92 30       	cpi	r25, 0x02	; 2
     584:	11 f4       	brne	.+4      	; 0x58a <display_dec+0x1a2>
     586:	80 62       	ori	r24, 0x20	; 32
     588:	03 c0       	rjmp	.+6      	; 0x590 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     58a:	91 30       	cpi	r25, 0x01	; 1
     58c:	09 f4       	brne	.+2      	; 0x590 <display_dec+0x1a8>
     58e:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     590:	80 95       	com	r24
     592:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     594:	ea ed       	ldi	r30, 0xDA	; 218
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	80 61       	ori	r24, 0x10	; 16
     59c:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     59e:	80 81       	ld	r24, Z
     5a0:	8f 7e       	andi	r24, 0xEF	; 239
     5a2:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     5a4:	2e 96       	adiw	r28, 0x0e	; 14
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	08 95       	ret

000005ba <update_display>:

void update_display(uint16_t number, uint8_t type) {
     5ba:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     5bc:	66 23       	and	r22, r22
     5be:	69 f4       	brne	.+26     	; 0x5da <update_display+0x20>

		
			
		display_dec(number, place);
     5c0:	c0 91 b8 02 	lds	r28, 0x02B8
     5c4:	6c 2f       	mov	r22, r28
     5c6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     5ca:	8c 2f       	mov	r24, r28
     5cc:	8f 5f       	subi	r24, 0xFF	; 255
     5ce:	80 93 b8 02 	sts	0x02B8, r24
     5d2:	c3 30       	cpi	r28, 0x03	; 3
     5d4:	11 f4       	brne	.+4      	; 0x5da <update_display+0x20>
		{
			place = 0;
     5d6:	10 92 b8 02 	sts	0x02B8, r1
		
		
	}
	
	
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	8f 93       	push	r24
     5ea:	9f 93       	push	r25
     5ec:	ef 93       	push	r30
     5ee:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     5f0:	80 91 7c 03 	lds	r24, 0x037C
     5f4:	81 50       	subi	r24, 0x01	; 1
     5f6:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     5f8:	80 91 7d 03 	lds	r24, 0x037D
     5fc:	88 23       	and	r24, r24
     5fe:	a1 f4       	brne	.+40     	; 0x628 <__vector_10+0x4a>
		count_finished = FALSE;
     600:	10 92 7a 03 	sts	0x037A, r1
		no_overflow = TRUE;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     60a:	80 93 7d 03 	sts	0x037D, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     60e:	e1 e8       	ldi	r30, 0x81	; 129
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	90 91 7b 03 	lds	r25, 0x037B
     618:	89 2b       	or	r24, r25
     61a:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     61c:	ef e6       	ldi	r30, 0x6F	; 111
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	81 60       	ori	r24, 0x01	; 1
     624:	80 83       	st	Z, r24
     626:	11 c0       	rjmp	.+34     	; 0x64a <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     628:	e4 e8       	ldi	r30, 0x84	; 132
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	91 81       	ldd	r25, Z+1	; 0x01
     630:	90 93 79 03 	sts	0x0379, r25
     634:	80 93 78 03 	sts	0x0378, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     638:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 7a 03 	sts	0x037A, r24
		period_counter = 0;
     642:	10 92 7d 03 	sts	0x037D, r1
		TCNT1 = 0; //reset timer/counter 1
     646:	11 82       	std	Z+1, r1	; 0x01
     648:	10 82       	st	Z, r1
	}
	
	
	
	
}
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <__vector_9>:



ISR (TIMER1_OVF_vect) {
     65c:	1f 92       	push	r1
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	0f 92       	push	r0
     664:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     666:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     674:	1f 92       	push	r1
     676:	0f 92       	push	r0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	2f 93       	push	r18
     680:	3f 93       	push	r19
     682:	4f 93       	push	r20
     684:	5f 93       	push	r21
     686:	6f 93       	push	r22
     688:	7f 93       	push	r23
     68a:	8f 93       	push	r24
     68c:	9f 93       	push	r25
     68e:	af 93       	push	r26
     690:	bf 93       	push	r27
     692:	ef 93       	push	r30
     694:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     696:	80 91 ca 03 	lds	r24, 0x03CA
     69a:	86 95       	lsr	r24
     69c:	90 91 cb 03 	lds	r25, 0x03CB
     6a0:	98 17       	cp	r25, r24
     6a2:	31 f4       	brne	.+12     	; 0x6b0 <__vector_7+0x3c>
				
		PORTB &= ~ (1<<ARP_SYNC_LED);
     6a4:	2f 98       	cbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     6a6:	80 91 88 03 	lds	r24, 0x0388
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <__vector_7+0x3c>
     6ae:	89 98       	cbi	0x11, 1	; 17
	}	
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     6b0:	80 91 cb 03 	lds	r24, 0x03CB
     6b4:	8f 5f       	subi	r24, 0xFF	; 255
     6b6:	80 93 cb 03 	sts	0x03CB, r24
     6ba:	90 91 ca 03 	lds	r25, 0x03CA
     6be:	89 17       	cp	r24, r25
     6c0:	89 f4       	brne	.+34     	; 0x6e4 <__vector_7+0x70>
		
		system_clock.ppqn_counter = 0;
     6c2:	10 92 cb 03 	sts	0x03CB, r1
		PORTB |= (1<<ARP_SYNC_LED);
     6c6:	2f 9a       	sbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) {
     6c8:	80 91 88 03 	lds	r24, 0x0388
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	51 f4       	brne	.+20     	; 0x6e4 <__vector_7+0x70>
			
			//step arp note here based on range and note sequence from assigner	
			step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
     6d0:	0e 94 14 01 	call	0x228	; 0x228 <step_arp_note>
			
			if (gate_buffer) { //arp
     6d4:	80 91 b0 02 	lds	r24, 0x02B0
     6d8:	88 23       	and	r24, r24
     6da:	11 f0       	breq	.+4      	; 0x6e0 <__vector_7+0x6c>
				
				PORTF |= (1<<GATE);
     6dc:	89 9a       	sbi	0x11, 1	; 17
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <__vector_7+0x70>
				
			} else {
			
				arp.step_position = 0; //no notes being played, reset arp step position
     6e0:	10 92 86 03 	sts	0x0386, r1
				
			//if (gate_buffer != 0) PORTF |= (1<<GATE); //if arp is running and there are notes to be played, turn gate ON
		}			
	}
	
     6e4:	ff 91       	pop	r31
     6e6:	ef 91       	pop	r30
     6e8:	bf 91       	pop	r27
     6ea:	af 91       	pop	r26
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	7f 91       	pop	r23
     6f2:	6f 91       	pop	r22
     6f4:	5f 91       	pop	r21
     6f6:	4f 91       	pop	r20
     6f8:	3f 91       	pop	r19
     6fa:	2f 91       	pop	r18
     6fc:	0f 90       	pop	r0
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	0f 90       	pop	r0
     702:	1f 90       	pop	r1
     704:	18 95       	reti

00000706 <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     706:	68 3f       	cpi	r22, 0xF8	; 248
     708:	19 f0       	breq	.+6      	; 0x710 <real_time_event+0xa>
     70a:	6a 3f       	cpi	r22, 0xFA	; 250
     70c:	c1 f4       	brne	.+48     	; 0x73e <real_time_event+0x38>
     70e:	15 c0       	rjmp	.+42     	; 0x73a <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     710:	80 91 d1 03 	lds	r24, 0x03D1
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	80 93 d1 03 	sts	0x03D1, r24
     71a:	90 91 d0 03 	lds	r25, 0x03D0
     71e:	89 17       	cp	r24, r25
     720:	71 f4       	brne	.+28     	; 0x73e <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     722:	2c 9a       	sbi	0x05, 4	; 5
     724:	86 e0       	ldi	r24, 0x06	; 6
     726:	8a 95       	dec	r24
     728:	f1 f7       	brne	.-4      	; 0x726 <real_time_event+0x20>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     72c:	85 b1       	in	r24, 0x05	; 5
     72e:	80 58       	subi	r24, 0x80	; 128
     730:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     732:	10 92 d1 03 	sts	0x03D1, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     736:	2c 98       	cbi	0x05, 4	; 5
     738:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     73a:	10 92 d1 03 	sts	0x03D1, r1
     73e:	08 95       	ret

00000740 <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     740:	84 2f       	mov	r24, r20
	
	remove_note(note);
     742:	0e 94 54 01 	call	0x2a8	; 0x2a8 <remove_note>
	gate_buffer--;
     746:	80 91 b0 02 	lds	r24, 0x02B0
     74a:	81 50       	subi	r24, 0x01	; 1
     74c:	80 93 b0 02 	sts	0x02B0, r24
	if (arp.clock_source == OFF) {	//if arp is off handle gate
     750:	90 91 88 03 	lds	r25, 0x0388
     754:	92 30       	cpi	r25, 0x02	; 2
     756:	21 f4       	brne	.+8      	; 0x760 <note_off_event+0x20>
		//gate_buffer--;
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     758:	88 23       	and	r24, r24
     75a:	21 f4       	brne	.+8      	; 0x764 <note_off_event+0x24>
     75c:	89 98       	cbi	0x11, 1	; 17
     75e:	08 95       	ret
	} else {
		
		update_arp_sequence();
     760:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     764:	08 95       	ret

00000766 <note_on_event>:





void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     766:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     768:	90 91 ff 02 	lds	r25, 0x02FF
     76c:	90 ff       	sbrs	r25, 0
     76e:	06 c0       	rjmp	.+12     	; 0x77c <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     770:	2c 9a       	sbi	0x05, 4	; 5
     772:	96 e0       	ldi	r25, 0x06	; 6
     774:	9a 95       	dec	r25
     776:	f1 f7       	brne	.-4      	; 0x774 <note_on_event+0xe>
     778:	00 c0       	rjmp	.+0      	; 0x77a <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     77a:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     77c:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     780:	22 23       	and	r18, r18
     782:	59 f4       	brne	.+22     	; 0x79a <note_on_event+0x34>
		remove_note(note);
     784:	0e 94 54 01 	call	0x2a8	; 0x2a8 <remove_note>
		gate_buffer--;
     788:	80 91 b0 02 	lds	r24, 0x02B0
     78c:	81 50       	subi	r24, 0x01	; 1
     78e:	80 93 b0 02 	sts	0x02B0, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     792:	88 23       	and	r24, r24
     794:	91 f4       	brne	.+36     	; 0x7ba <note_on_event+0x54>
     796:	89 98       	cbi	0x11, 1	; 17
     798:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);
     79a:	62 2f       	mov	r22, r18
     79c:	0e 94 3c 01 	call	0x278	; 0x278 <new_note>
		
		gate_buffer++;
     7a0:	80 91 b0 02 	lds	r24, 0x02B0
     7a4:	8f 5f       	subi	r24, 0xFF	; 255
     7a6:	80 93 b0 02 	sts	0x02B0, r24
		if (arp.clock_source == OFF) { //if arp is off, handle gate
     7aa:	80 91 88 03 	lds	r24, 0x0388
     7ae:	82 30       	cpi	r24, 0x02	; 2
     7b0:	11 f4       	brne	.+4      	; 0x7b6 <note_on_event+0x50>
			//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
			//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
			//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
			//could implement this with timers. MIDI Implant is 0.5 ms. Could maybe use Timer1 here to generate 0.3-0.5 ms gate retrigger
			
			PORTF |= (1<<GATE); //if arp is OFF then turn on gate. Otherwise arpeggiator handles GATE
     7b2:	89 9a       	sbi	0x11, 1	; 17
     7b4:	08 95       	ret
		} else {
			
			update_arp_sequence();
     7b6:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     7ba:	08 95       	ret

000007bc <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     7bc:	87 e2       	ldi	r24, 0x27	; 39
     7be:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     7c2:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     7c6:	88 e9       	ldi	r24, 0x98	; 152
     7c8:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     7cc:	08 95       	ret

000007ce <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	2f 93       	push	r18
     7da:	3f 93       	push	r19
     7dc:	4f 93       	push	r20
     7de:	5f 93       	push	r21
     7e0:	6f 93       	push	r22
     7e2:	7f 93       	push	r23
     7e4:	8f 93       	push	r24
     7e6:	9f 93       	push	r25
     7e8:	af 93       	push	r26
     7ea:	bf 93       	push	r27
     7ec:	ef 93       	push	r30
     7ee:	ff 93       	push	r31
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	0f 92       	push	r0
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     7fa:	80 91 c6 00 	lds	r24, 0x00C6
     7fe:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     800:	86 ed       	ldi	r24, 0xD6	; 214
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	ae 01       	movw	r20, r28
     808:	4f 5f       	subi	r20, 0xFF	; 255
     80a:	5f 4f       	sbci	r21, 0xFF	; 255
     80c:	0e 94 76 19 	call	0x32ec	; 0x32ec <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     810:	0f 90       	pop	r0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	bf 91       	pop	r27
     81c:	af 91       	pop	r26
     81e:	9f 91       	pop	r25
     820:	8f 91       	pop	r24
     822:	7f 91       	pop	r23
     824:	6f 91       	pop	r22
     826:	5f 91       	pop	r21
     828:	4f 91       	pop	r20
     82a:	3f 91       	pop	r19
     82c:	2f 91       	pop	r18
     82e:	0f 90       	pop	r0
     830:	0f be       	out	0x3f, r0	; 63
     832:	0f 90       	pop	r0
     834:	1f 90       	pop	r1
     836:	18 95       	reti

00000838 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     838:	c0 e8       	ldi	r28, 0x80	; 128
     83a:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     83c:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     83e:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     840:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     842:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     844:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     846:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     848:	0e 94 6f 07 	call	0xede	; 0xede <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     84c:	a9 ed       	ldi	r26, 0xD9	; 217
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	8c 91       	ld	r24, X
     852:	80 6c       	ori	r24, 0xC0	; 192
     854:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     856:	ea ed       	ldi	r30, 0xDA	; 218
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	80 6c       	ori	r24, 0xC0	; 192
     85e:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     860:	81 b1       	in	r24, 0x01	; 1
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     866:	92 b1       	in	r25, 0x02	; 2
     868:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     86a:	8c 91       	ld	r24, X
     86c:	80 63       	ori	r24, 0x30	; 48
     86e:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     870:	80 81       	ld	r24, Z
     872:	8f 7c       	andi	r24, 0xCF	; 207
     874:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     876:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     878:	ec ed       	ldi	r30, 0xDC	; 220
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	80 62       	ori	r24, 0x20	; 32
     880:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     882:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     884:	ed ed       	ldi	r30, 0xDD	; 221
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	80 62       	ori	r24, 0x20	; 32
     88c:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     88e:	80 81       	ld	r24, Z
     890:	8f 7d       	andi	r24, 0xDF	; 223
     892:	80 83       	st	Z, r24
	DATA_BUS = 0;
     894:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     896:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     89a:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     89e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     8a2:	c6 ed       	ldi	r28, 0xD6	; 214
     8a4:	d3 e0       	ldi	r29, 0x03	; 3
     8a6:	ce 01       	movw	r24, r28
     8a8:	0e 94 45 19 	call	0x328a	; 0x328a <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     8ac:	ce 01       	movw	r24, r28
     8ae:	63 eb       	ldi	r22, 0xB3	; 179
     8b0:	73 e0       	ldi	r23, 0x03	; 3
     8b2:	0e 94 0d 19 	call	0x321a	; 0x321a <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     8b6:	ce 01       	movw	r24, r28
     8b8:	60 ea       	ldi	r22, 0xA0	; 160
     8ba:	73 e0       	ldi	r23, 0x03	; 3
     8bc:	0e 94 11 19 	call	0x3222	; 0x3222 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     8c0:	ce 01       	movw	r24, r28
     8c2:	63 e8       	ldi	r22, 0x83	; 131
     8c4:	73 e0       	ldi	r23, 0x03	; 3
     8c6:	0e 94 31 19 	call	0x3262	; 0x3262 <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     8ca:	0e 94 de 03 	call	0x7bc	; 0x7bc <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     8ce:	0e 94 94 07 	call	0xf28	; 0xf28 <update_spi>
	
	
	current_patch.number = 1;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     8d8:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     8da:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	0e 94 0d 0a 	call	0x141a	; 0x141a <load_patch>
	
	setup_system_clock();
     8e4:	0e 94 91 01 	call	0x322	; 0x322 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     8e8:	88 e1       	ldi	r24, 0x18	; 24
     8ea:	80 93 ca 03 	sts	0x03CA, r24
	arp.step_position = 0; //initialize step position
     8ee:	10 92 86 03 	sts	0x0386, r1

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     8f2:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     8f4:	0f 2e       	mov	r0, r31
     8f6:	f0 e8       	ldi	r31, 0x80	; 128
     8f8:	ef 2e       	mov	r14, r31
     8fa:	f3 e0       	ldi	r31, 0x03	; 3
     8fc:	ff 2e       	mov	r15, r31
     8fe:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     900:	0f 2e       	mov	r0, r31
     902:	f7 e0       	ldi	r31, 0x07	; 7
     904:	cf 2e       	mov	r12, r31
     906:	f3 e0       	ldi	r31, 0x03	; 3
     908:	df 2e       	mov	r13, r31
     90a:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     90c:	bb 24       	eor	r11, r11
     90e:	68 94       	set
     910:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     912:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     914:	c8 01       	movw	r24, r16
     916:	0e 94 a0 1b 	call	0x3740	; 0x3740 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     91a:	80 91 fd 01 	lds	r24, 0x01FD
     91e:	90 91 fe 01 	lds	r25, 0x01FE
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	0e 94 dd 02 	call	0x5ba	; 0x5ba <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     928:	0e 94 c3 04 	call	0x986	; 0x986 <scan_pots>
		update_control_voltages();
     92c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     930:	80 91 b9 02 	lds	r24, 0x02B9
     934:	98 2f       	mov	r25, r24
     936:	9f 5f       	subi	r25, 0xFF	; 255
     938:	90 93 b9 02 	sts	0x02B9, r25
     93c:	85 30       	cpi	r24, 0x05	; 5
     93e:	51 f7       	brne	.-44     	; 0x914 <main+0xdc>
		{
			switch_timer = 0;
     940:	10 92 b9 02 	sts	0x02B9, r1
			switch_press = 0; //reset global switch press flag
     944:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     948:	f7 01       	movw	r30, r14
     94a:	c0 81       	ld	r28, Z
     94c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <read_switch_port>
     950:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     952:	f6 01       	movw	r30, r12
     954:	90 81       	ld	r25, Z
     956:	91 30       	cpi	r25, 0x01	; 1
     958:	11 f4       	brne	.+4      	; 0x95e <main+0x126>
     95a:	cd 2f       	mov	r28, r29
     95c:	01 c0       	rjmp	.+2      	; 0x960 <main+0x128>
     95e:	c0 e0       	ldi	r28, 0x00	; 0
     960:	c8 2b       	or	r28, r24
     962:	f7 01       	movw	r30, r14
     964:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     966:	0e 94 94 07 	call	0xf28	; 0xf28 <update_spi>
			if (switch_press) { 
     96a:	80 91 c1 02 	lds	r24, 0x02C1
     96e:	88 23       	and	r24, r24
     970:	39 f0       	breq	.+14     	; 0x980 <main+0x148>
				update_patch();
     972:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     976:	f6 01       	movw	r30, r12
     978:	80 81       	ld	r24, Z
     97a:	88 23       	and	r24, r24
     97c:	09 f4       	brne	.+2      	; 0x980 <main+0x148>
     97e:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     980:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <update_patch_programmer>
     984:	c7 cf       	rjmp	.-114    	; 0x914 <main+0xdc>

00000986 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     986:	bf 92       	push	r11
     988:	cf 92       	push	r12
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	c0 e0       	ldi	r28, 0x00	; 0
     99a:	d1 e0       	ldi	r29, 0x01	; 1
     99c:	02 ec       	ldi	r16, 0xC2	; 194
     99e:	12 e0       	ldi	r17, 0x02	; 2
     9a0:	0f 2e       	mov	r0, r31
     9a2:	fc e3       	ldi	r31, 0x3C	; 60
     9a4:	cf 2e       	mov	r12, r31
     9a6:	dd 24       	eor	r13, r13
     9a8:	f0 2d       	mov	r31, r0
     9aa:	cc 0e       	add	r12, r28
     9ac:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     9ae:	0f 2e       	mov	r0, r31
     9b0:	f7 e0       	ldi	r31, 0x07	; 7
     9b2:	ef 2e       	mov	r14, r31
     9b4:	f3 e0       	ldi	r31, 0x03	; 3
     9b6:	ff 2e       	mov	r15, r31
     9b8:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     9ba:	bb 24       	eor	r11, r11
     9bc:	68 94       	set
     9be:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     9c0:	88 81       	ld	r24, Y
     9c2:	99 81       	ldd	r25, Y+1	; 0x01
     9c4:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     9c8:	90 93 bc 02 	sts	0x02BC, r25
     9cc:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     9d0:	e8 81       	ld	r30, Y
     9d2:	f9 81       	ldd	r31, Y+1	; 0x01
     9d4:	40 81       	ld	r20, Z
     9d6:	21 81       	ldd	r18, Z+1	; 0x01
     9d8:	52 2f       	mov	r21, r18
     9da:	53 70       	andi	r21, 0x03	; 3
     9dc:	84 1b       	sub	r24, r20
     9de:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     9e0:	95 95       	asr	r25
     9e2:	87 95       	ror	r24
     9e4:	95 95       	asr	r25
     9e6:	87 95       	ror	r24
     9e8:	84 0f       	add	r24, r20
     9ea:	95 1f       	adc	r25, r21
     9ec:	80 83       	st	Z, r24
     9ee:	89 2f       	mov	r24, r25
     9f0:	83 70       	andi	r24, 0x03	; 3
     9f2:	2c 7f       	andi	r18, 0xFC	; 252
     9f4:	28 2b       	or	r18, r24
     9f6:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     9f8:	e9 91       	ld	r30, Y+
     9fa:	f9 91       	ld	r31, Y+
     9fc:	92 81       	ldd	r25, Z+2	; 0x02
     9fe:	20 81       	ld	r18, Z
     a00:	81 81       	ldd	r24, Z+1	; 0x01
     a02:	38 2f       	mov	r19, r24
     a04:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     a06:	d7 01       	movw	r26, r14
     a08:	8c 91       	ld	r24, X
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	19 f0       	breq	.+6      	; 0xa14 <scan_pots+0x8e>
     a0e:	83 81       	ldd	r24, Z+3	; 0x03
     a10:	88 23       	and	r24, r24
     a12:	24 f0       	brlt	.+8      	; 0xa1c <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     a14:	f8 01       	movw	r30, r16
     a16:	31 83       	std	Z+1, r19	; 0x01
     a18:	20 83       	st	Z, r18
     a1a:	14 c0       	rjmp	.+40     	; 0xa44 <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     a1c:	49 2f       	mov	r20, r25
     a1e:	43 50       	subi	r20, 0x03	; 3
     a20:	c9 01       	movw	r24, r18
     a22:	95 95       	asr	r25
     a24:	87 95       	ror	r24
     a26:	95 95       	asr	r25
     a28:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     a2a:	94 2f       	mov	r25, r20
     a2c:	98 1b       	sub	r25, r24
     a2e:	9a 3f       	cpi	r25, 0xFA	; 250
     a30:	48 f4       	brcc	.+18     	; 0xa44 <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     a32:	d8 01       	movw	r26, r16
     a34:	11 96       	adiw	r26, 0x01	; 1
     a36:	3c 93       	st	X, r19
     a38:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     a3a:	83 81       	ldd	r24, Z+3	; 0x03
     a3c:	8f 77       	andi	r24, 0x7F	; 127
     a3e:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     a40:	f7 01       	movw	r30, r14
     a42:	b0 82       	st	Z, r11
     a44:	0e 5f       	subi	r16, 0xFE	; 254
     a46:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     a48:	cc 15       	cp	r28, r12
     a4a:	dd 05       	cpc	r29, r13
     a4c:	09 f0       	breq	.+2      	; 0xa50 <scan_pots+0xca>
     a4e:	b8 cf       	rjmp	.-144    	; 0x9c0 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     a50:	8c e7       	ldi	r24, 0x7C	; 124
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     a58:	90 93 bc 02 	sts	0x02BC, r25
     a5c:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     a60:	20 91 7c 01 	lds	r18, 0x017C
     a64:	40 91 7d 01 	lds	r20, 0x017D
     a68:	34 2f       	mov	r19, r20
     a6a:	33 70       	andi	r19, 0x03	; 3
     a6c:	82 1b       	sub	r24, r18
     a6e:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     a70:	95 95       	asr	r25
     a72:	87 95       	ror	r24
     a74:	95 95       	asr	r25
     a76:	87 95       	ror	r24
     a78:	28 0f       	add	r18, r24
     a7a:	39 1f       	adc	r19, r25
     a7c:	20 93 7c 01 	sts	0x017C, r18
     a80:	83 2f       	mov	r24, r19
     a82:	83 70       	andi	r24, 0x03	; 3
     a84:	4c 7f       	andi	r20, 0xFC	; 252
     a86:	48 2b       	or	r20, r24
     a88:	40 93 7d 01 	sts	0x017D, r20
	
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	bf 90       	pop	r11
     a9e:	08 95       	ret

00000aa0 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     aa4:	60 91 c2 02 	lds	r22, 0x02C2
     aa8:	70 91 c3 02 	lds	r23, 0x02C3
     aac:	62 95       	swap	r22
     aae:	72 95       	swap	r23
     ab0:	70 7f       	andi	r23, 0xF0	; 240
     ab2:	76 27       	eor	r23, r22
     ab4:	60 7f       	andi	r22, 0xF0	; 240
     ab6:	76 27       	eor	r23, r22
     ab8:	84 ee       	ldi	r24, 0xE4	; 228
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     ac0:	60 91 c4 02 	lds	r22, 0x02C4
     ac4:	70 91 c5 02 	lds	r23, 0x02C5
     ac8:	62 95       	swap	r22
     aca:	72 95       	swap	r23
     acc:	70 7f       	andi	r23, 0xF0	; 240
     ace:	76 27       	eor	r23, r22
     ad0:	60 7f       	andi	r22, 0xF0	; 240
     ad2:	76 27       	eor	r23, r22
     ad4:	83 ee       	ldi	r24, 0xE3	; 227
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     adc:	60 91 c6 02 	lds	r22, 0x02C6
     ae0:	70 91 c7 02 	lds	r23, 0x02C7
     ae4:	66 0f       	add	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	66 0f       	add	r22, r22
     aea:	77 1f       	adc	r23, r23
     aec:	66 0f       	add	r22, r22
     aee:	77 1f       	adc	r23, r23
     af0:	82 ee       	ldi	r24, 0xE2	; 226
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     af8:	60 91 c8 02 	lds	r22, 0x02C8
     afc:	70 91 c9 02 	lds	r23, 0x02C9
     b00:	62 95       	swap	r22
     b02:	72 95       	swap	r23
     b04:	70 7f       	andi	r23, 0xF0	; 240
     b06:	76 27       	eor	r23, r22
     b08:	60 7f       	andi	r22, 0xF0	; 240
     b0a:	76 27       	eor	r23, r22
     b0c:	83 eb       	ldi	r24, 0xB3	; 179
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     b14:	60 91 ca 02 	lds	r22, 0x02CA
     b18:	70 91 cb 02 	lds	r23, 0x02CB
     b1c:	66 0f       	add	r22, r22
     b1e:	77 1f       	adc	r23, r23
     b20:	66 0f       	add	r22, r22
     b22:	77 1f       	adc	r23, r23
     b24:	66 0f       	add	r22, r22
     b26:	77 1f       	adc	r23, r23
     b28:	81 ee       	ldi	r24, 0xE1	; 225
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     b30:	60 91 cc 02 	lds	r22, 0x02CC
     b34:	70 91 cd 02 	lds	r23, 0x02CD
     b38:	62 95       	swap	r22
     b3a:	72 95       	swap	r23
     b3c:	70 7f       	andi	r23, 0xF0	; 240
     b3e:	76 27       	eor	r23, r22
     b40:	60 7f       	andi	r22, 0xF0	; 240
     b42:	76 27       	eor	r23, r22
     b44:	80 ee       	ldi	r24, 0xE0	; 224
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     b4c:	60 91 ce 02 	lds	r22, 0x02CE
     b50:	70 91 cf 02 	lds	r23, 0x02CF
     b54:	62 95       	swap	r22
     b56:	72 95       	swap	r23
     b58:	70 7f       	andi	r23, 0xF0	; 240
     b5a:	76 27       	eor	r23, r22
     b5c:	60 7f       	andi	r22, 0xF0	; 240
     b5e:	76 27       	eor	r23, r22
     b60:	8f ed       	ldi	r24, 0xDF	; 223
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     b68:	60 91 d0 02 	lds	r22, 0x02D0
     b6c:	70 91 d1 02 	lds	r23, 0x02D1
     b70:	62 95       	swap	r22
     b72:	72 95       	swap	r23
     b74:	70 7f       	andi	r23, 0xF0	; 240
     b76:	76 27       	eor	r23, r22
     b78:	60 7f       	andi	r22, 0xF0	; 240
     b7a:	76 27       	eor	r23, r22
     b7c:	8e ed       	ldi	r24, 0xDE	; 222
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     b84:	80 91 d4 02 	lds	r24, 0x02D4
     b88:	90 91 d5 02 	lds	r25, 0x02D5
     b8c:	c0 e0       	ldi	r28, 0x00	; 0
     b8e:	d2 e0       	ldi	r29, 0x02	; 2
     b90:	c8 1b       	sub	r28, r24
     b92:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     b94:	60 91 73 03 	lds	r22, 0x0373
     b98:	70 91 74 03 	lds	r23, 0x0374
     b9c:	60 50       	subi	r22, 0x00	; 0
     b9e:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     ba0:	80 91 d2 02 	lds	r24, 0x02D2
     ba4:	90 91 d3 02 	lds	r25, 0x02D3
     ba8:	68 1b       	sub	r22, r24
     baa:	79 0b       	sbc	r23, r25
     bac:	6c 0f       	add	r22, r28
     bae:	7d 1f       	adc	r23, r29
     bb0:	8d ed       	ldi	r24, 0xDD	; 221
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     bb8:	60 91 75 03 	lds	r22, 0x0375
     bbc:	70 91 76 03 	lds	r23, 0x0376
     bc0:	6c 0f       	add	r22, r28
     bc2:	7d 1f       	adc	r23, r29
     bc4:	8c ed       	ldi	r24, 0xDC	; 220
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     bcc:	60 91 d6 02 	lds	r22, 0x02D6
     bd0:	70 91 d7 02 	lds	r23, 0x02D7
     bd4:	62 95       	swap	r22
     bd6:	72 95       	swap	r23
     bd8:	70 7f       	andi	r23, 0xF0	; 240
     bda:	76 27       	eor	r23, r22
     bdc:	60 7f       	andi	r22, 0xF0	; 240
     bde:	76 27       	eor	r23, r22
     be0:	8b ed       	ldi	r24, 0xDB	; 219
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     be8:	60 91 da 02 	lds	r22, 0x02DA
     bec:	70 91 db 02 	lds	r23, 0x02DB
     bf0:	62 95       	swap	r22
     bf2:	72 95       	swap	r23
     bf4:	70 7f       	andi	r23, 0xF0	; 240
     bf6:	76 27       	eor	r23, r22
     bf8:	60 7f       	andi	r22, 0xF0	; 240
     bfa:	76 27       	eor	r23, r22
     bfc:	8a ed       	ldi	r24, 0xDA	; 218
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     c04:	60 91 dc 02 	lds	r22, 0x02DC
     c08:	70 91 dd 02 	lds	r23, 0x02DD
     c0c:	62 95       	swap	r22
     c0e:	72 95       	swap	r23
     c10:	70 7f       	andi	r23, 0xF0	; 240
     c12:	76 27       	eor	r23, r22
     c14:	60 7f       	andi	r22, 0xF0	; 240
     c16:	76 27       	eor	r23, r22
     c18:	89 ed       	ldi	r24, 0xD9	; 217
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     c20:	60 91 7c 01 	lds	r22, 0x017C
     c24:	80 91 7d 01 	lds	r24, 0x017D
     c28:	78 2f       	mov	r23, r24
     c2a:	73 70       	andi	r23, 0x03	; 3
     c2c:	62 95       	swap	r22
     c2e:	72 95       	swap	r23
     c30:	70 7f       	andi	r23, 0xF0	; 240
     c32:	76 27       	eor	r23, r22
     c34:	60 7f       	andi	r22, 0xF0	; 240
     c36:	76 27       	eor	r23, r22
     c38:	88 ed       	ldi	r24, 0xD8	; 216
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     c40:	60 91 de 02 	lds	r22, 0x02DE
     c44:	70 91 df 02 	lds	r23, 0x02DF
     c48:	62 95       	swap	r22
     c4a:	72 95       	swap	r23
     c4c:	70 7f       	andi	r23, 0xF0	; 240
     c4e:	76 27       	eor	r23, r22
     c50:	60 7f       	andi	r22, 0xF0	; 240
     c52:	76 27       	eor	r23, r22
     c54:	87 ed       	ldi	r24, 0xD7	; 215
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     c5c:	60 91 e0 02 	lds	r22, 0x02E0
     c60:	70 91 e1 02 	lds	r23, 0x02E1
     c64:	62 95       	swap	r22
     c66:	72 95       	swap	r23
     c68:	70 7f       	andi	r23, 0xF0	; 240
     c6a:	76 27       	eor	r23, r22
     c6c:	60 7f       	andi	r22, 0xF0	; 240
     c6e:	76 27       	eor	r23, r22
     c70:	86 ed       	ldi	r24, 0xD6	; 214
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     c78:	60 91 e2 02 	lds	r22, 0x02E2
     c7c:	70 91 e3 02 	lds	r23, 0x02E3
     c80:	62 95       	swap	r22
     c82:	72 95       	swap	r23
     c84:	70 7f       	andi	r23, 0xF0	; 240
     c86:	76 27       	eor	r23, r22
     c88:	60 7f       	andi	r22, 0xF0	; 240
     c8a:	76 27       	eor	r23, r22
     c8c:	85 ed       	ldi	r24, 0xD5	; 213
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     c94:	0e 94 32 01 	call	0x264	; 0x264 <get_current_note>
     c98:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     c9a:	88 30       	cpi	r24, 0x08	; 8
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <update_control_voltages+0x200>
     c9e:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = current_patch.number + 100*(arp.sequence[arp.step_position].note); //100*note;
	//value_to_display = arp.sequence[arp.step_position].note;
	//uint8_t arp_note = arp.sequence[arp.step_position].note;
	//if (arp_note == EMPTY) arp_note = 0;
	value_to_display = current_patch.number + 100*arp.step_position;
     ca0:	60 91 03 03 	lds	r22, 0x0303
     ca4:	40 91 86 03 	lds	r20, 0x0386
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	24 e6       	ldi	r18, 0x64	; 100
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	42 9f       	mul	r20, r18
     cb0:	c0 01       	movw	r24, r0
     cb2:	43 9f       	mul	r20, r19
     cb4:	90 0d       	add	r25, r0
     cb6:	52 9f       	mul	r21, r18
     cb8:	90 0d       	add	r25, r0
     cba:	11 24       	eor	r1, r1
     cbc:	86 0f       	add	r24, r22
     cbe:	91 1d       	adc	r25, r1
     cc0:	90 93 fe 01 	sts	0x01FE, r25
     cc4:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     cc8:	8c 2f       	mov	r24, r28
     cca:	88 50       	subi	r24, 0x08	; 8
     ccc:	6f e0       	ldi	r22, 0x0F	; 15
     cce:	73 e0       	ldi	r23, 0x03	; 3
     cd0:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     cd4:	bc 01       	movw	r22, r24
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	20 91 e6 02 	lds	r18, 0x02E6
     cde:	30 91 e7 02 	lds	r19, 0x02E7
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <__mulsi3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	07 2e       	mov	r0, r23
     cf0:	7a e0       	ldi	r23, 0x0A	; 10
     cf2:	b6 95       	lsr	r27
     cf4:	a7 95       	ror	r26
     cf6:	97 95       	ror	r25
     cf8:	87 95       	ror	r24
     cfa:	7a 95       	dec	r23
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <update_control_voltages+0x252>
     cfe:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     d00:	60 91 e4 02 	lds	r22, 0x02E4
     d04:	70 91 e5 02 	lds	r23, 0x02E5
     d08:	62 95       	swap	r22
     d0a:	72 95       	swap	r23
     d0c:	70 7f       	andi	r23, 0xF0	; 240
     d0e:	76 27       	eor	r23, r22
     d10:	60 7f       	andi	r22, 0xF0	; 240
     d12:	76 27       	eor	r23, r22
     d14:	86 0f       	add	r24, r22
     d16:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     d18:	bc 01       	movw	r22, r24
     d1a:	80 e4       	ldi	r24, 0x40	; 64
     d1c:	60 30       	cpi	r22, 0x00	; 0
     d1e:	78 07       	cpc	r23, r24
     d20:	10 f0       	brcs	.+4      	; 0xd26 <update_control_voltages+0x286>
     d22:	6f ef       	ldi	r22, 0xFF	; 255
     d24:	7f e3       	ldi	r23, 0x3F	; 63
     d26:	84 ed       	ldi	r24, 0xD4	; 212
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     d2e:	60 91 e8 02 	lds	r22, 0x02E8
     d32:	70 91 e9 02 	lds	r23, 0x02E9
     d36:	62 95       	swap	r22
     d38:	72 95       	swap	r23
     d3a:	70 7f       	andi	r23, 0xF0	; 240
     d3c:	76 27       	eor	r23, r22
     d3e:	60 7f       	andi	r22, 0xF0	; 240
     d40:	76 27       	eor	r23, r22
     d42:	82 ed       	ldi	r24, 0xD2	; 210
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     d4a:	60 91 ea 02 	lds	r22, 0x02EA
     d4e:	70 91 eb 02 	lds	r23, 0x02EB
     d52:	62 95       	swap	r22
     d54:	72 95       	swap	r23
     d56:	70 7f       	andi	r23, 0xF0	; 240
     d58:	76 27       	eor	r23, r22
     d5a:	60 7f       	andi	r22, 0xF0	; 240
     d5c:	76 27       	eor	r23, r22
     d5e:	81 ed       	ldi	r24, 0xD1	; 209
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     d66:	60 91 ec 02 	lds	r22, 0x02EC
     d6a:	70 91 ed 02 	lds	r23, 0x02ED
     d6e:	62 95       	swap	r22
     d70:	72 95       	swap	r23
     d72:	70 7f       	andi	r23, 0xF0	; 240
     d74:	76 27       	eor	r23, r22
     d76:	60 7f       	andi	r22, 0xF0	; 240
     d78:	76 27       	eor	r23, r22
     d7a:	80 ed       	ldi	r24, 0xD0	; 208
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     d82:	60 91 ee 02 	lds	r22, 0x02EE
     d86:	70 91 ef 02 	lds	r23, 0x02EF
     d8a:	62 95       	swap	r22
     d8c:	72 95       	swap	r23
     d8e:	70 7f       	andi	r23, 0xF0	; 240
     d90:	76 27       	eor	r23, r22
     d92:	60 7f       	andi	r22, 0xF0	; 240
     d94:	76 27       	eor	r23, r22
     d96:	8f ec       	ldi	r24, 0xCF	; 207
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     d9e:	60 91 f0 02 	lds	r22, 0x02F0
     da2:	70 91 f1 02 	lds	r23, 0x02F1
     da6:	62 95       	swap	r22
     da8:	72 95       	swap	r23
     daa:	70 7f       	andi	r23, 0xF0	; 240
     dac:	76 27       	eor	r23, r22
     dae:	60 7f       	andi	r22, 0xF0	; 240
     db0:	76 27       	eor	r23, r22
     db2:	8e ec       	ldi	r24, 0xCE	; 206
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     dba:	60 91 f2 02 	lds	r22, 0x02F2
     dbe:	70 91 f3 02 	lds	r23, 0x02F3
     dc2:	62 95       	swap	r22
     dc4:	72 95       	swap	r23
     dc6:	70 7f       	andi	r23, 0xF0	; 240
     dc8:	76 27       	eor	r23, r22
     dca:	60 7f       	andi	r22, 0xF0	; 240
     dcc:	76 27       	eor	r23, r22
     dce:	8d ec       	ldi	r24, 0xCD	; 205
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     dd6:	60 91 f4 02 	lds	r22, 0x02F4
     dda:	70 91 f5 02 	lds	r23, 0x02F5
     dde:	62 95       	swap	r22
     de0:	72 95       	swap	r23
     de2:	70 7f       	andi	r23, 0xF0	; 240
     de4:	76 27       	eor	r23, r22
     de6:	60 7f       	andi	r22, 0xF0	; 240
     de8:	76 27       	eor	r23, r22
     dea:	8c ec       	ldi	r24, 0xCC	; 204
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     df2:	60 91 f8 02 	lds	r22, 0x02F8
     df6:	70 91 f9 02 	lds	r23, 0x02F9
     dfa:	62 95       	swap	r22
     dfc:	72 95       	swap	r23
     dfe:	70 7f       	andi	r23, 0xF0	; 240
     e00:	76 27       	eor	r23, r22
     e02:	60 7f       	andi	r22, 0xF0	; 240
     e04:	76 27       	eor	r23, r22
     e06:	8a ec       	ldi	r24, 0xCA	; 202
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     e0e:	60 91 f6 02 	lds	r22, 0x02F6
     e12:	70 91 f7 02 	lds	r23, 0x02F7
     e16:	62 95       	swap	r22
     e18:	72 95       	swap	r23
     e1a:	70 7f       	andi	r23, 0xF0	; 240
     e1c:	76 27       	eor	r23, r22
     e1e:	60 7f       	andi	r22, 0xF0	; 240
     e20:	76 27       	eor	r23, r22
     e22:	8b ec       	ldi	r24, 0xCB	; 203
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     e2a:	60 91 fc 02 	lds	r22, 0x02FC
     e2e:	70 91 fd 02 	lds	r23, 0x02FD
     e32:	62 95       	swap	r22
     e34:	72 95       	swap	r23
     e36:	70 7f       	andi	r23, 0xF0	; 240
     e38:	76 27       	eor	r23, r22
     e3a:	60 7f       	andi	r22, 0xF0	; 240
     e3c:	76 27       	eor	r23, r22
     e3e:	88 ec       	ldi	r24, 0xC8	; 200
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     e46:	60 91 fa 02 	lds	r22, 0x02FA
     e4a:	70 91 fb 02 	lds	r23, 0x02FB
     e4e:	62 95       	swap	r22
     e50:	72 95       	swap	r23
     e52:	70 7f       	andi	r23, 0xF0	; 240
     e54:	76 27       	eor	r23, r22
     e56:	60 7f       	andi	r22, 0xF0	; 240
     e58:	76 27       	eor	r23, r22
     e5a:	89 ec       	ldi	r24, 0xC9	; 201
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     e62:	8c 2f       	mov	r24, r28
     e64:	6f e0       	ldi	r22, 0x0F	; 15
     e66:	0e 94 ed 0c 	call	0x19da	; 0x19da <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     e6a:	61 e5       	ldi	r22, 0x51	; 81
     e6c:	73 e0       	ldi	r23, 0x03	; 3
     e6e:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <interpolate_pitch_cv>
     e72:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     e74:	86 ee       	ldi	r24, 0xE6	; 230
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     e7c:	8c 2f       	mov	r24, r28
     e7e:	60 ef       	ldi	r22, 0xF0	; 240
     e80:	0e 94 ed 0c 	call	0x19da	; 0x19da <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     e84:	6f e2       	ldi	r22, 0x2F	; 47
     e86:	73 e0       	ldi	r23, 0x03	; 3
     e88:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <interpolate_pitch_cv>
     e8c:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     e8e:	85 ee       	ldi	r24, 0xE5	; 229
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     e96:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     e98:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     e9a:	20 91 88 01 	lds	r18, 0x0188
     e9e:	80 91 89 01 	lds	r24, 0x0189
     ea2:	38 2f       	mov	r19, r24
     ea4:	33 70       	andi	r19, 0x03	; 3
     ea6:	83 ef       	ldi	r24, 0xF3	; 243
     ea8:	94 e0       	ldi	r25, 0x04	; 4
     eaa:	82 1b       	sub	r24, r18
     eac:	93 0b       	sbc	r25, r19
     eae:	90 93 cd 03 	sts	0x03CD, r25
     eb2:	80 93 cc 03 	sts	0x03CC, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     eb6:	20 91 ce 03 	lds	r18, 0x03CE
     eba:	30 91 cf 03 	lds	r19, 0x03CF
     ebe:	82 17       	cp	r24, r18
     ec0:	93 07       	cpc	r25, r19
     ec2:	11 f0       	breq	.+4      	; 0xec8 <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
     ec4:	0e 94 98 01 	call	0x330	; 0x330 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     ec8:	80 91 cc 03 	lds	r24, 0x03CC
     ecc:	90 91 cd 03 	lds	r25, 0x03CD
     ed0:	90 93 cf 03 	sts	0x03CF, r25
     ed4:	80 93 ce 03 	sts	0x03CE, r24
	
}			
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     ede:	84 b1       	in	r24, 0x04	; 4
     ee0:	87 62       	ori	r24, 0x27	; 39
     ee2:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     ee4:	ec ed       	ldi	r30, 0xDC	; 220
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8c 65       	ori	r24, 0x5C	; 92
     eec:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     eee:	85 b1       	in	r24, 0x05	; 5
     ef0:	89 7d       	andi	r24, 0xD9	; 217
     ef2:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     ef4:	ed ed       	ldi	r30, 0xDD	; 221
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	83 7f       	andi	r24, 0xF3	; 243
     efc:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     efe:	80 e5       	ldi	r24, 0x50	; 80
     f00:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     f02:	80 81       	ld	r24, Z
     f04:	87 7f       	andi	r24, 0xF7	; 247
     f06:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     f08:	80 81       	ld	r24, Z
     f0a:	87 7f       	andi	r24, 0xF7	; 247
     f0c:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     f0e:	80 81       	ld	r24, Z
     f10:	88 60       	ori	r24, 0x08	; 8
     f12:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     f14:	80 81       	ld	r24, Z
     f16:	8f 7e       	andi	r24, 0xEF	; 239
     f18:	80 83       	st	Z, r24
	
}
     f1a:	08 95       	ret

00000f1c <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     f1c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     f1e:	0d b4       	in	r0, 0x2d	; 45
     f20:	07 fe       	sbrs	r0, 7
     f22:	fd cf       	rjmp	.-6      	; 0xf1e <spi_shift_byte+0x2>
	return SPDR;
     f24:	8e b5       	in	r24, 0x2e	; 46
	
}
     f26:	08 95       	ret

00000f28 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     f28:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     f2a:	80 91 02 03 	lds	r24, 0x0302
     f2e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     f32:	90 91 c1 02 	lds	r25, 0x02C1
     f36:	98 2b       	or	r25, r24
     f38:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     f3c:	20 91 bf 02 	lds	r18, 0x02BF
     f40:	98 2f       	mov	r25, r24
     f42:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     f44:	89 2f       	mov	r24, r25
     f46:	82 27       	eor	r24, r18
     f48:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     f4c:	89 23       	and	r24, r25
     f4e:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     f52:	90 91 7e 03 	lds	r25, 0x037E
     f56:	89 27       	eor	r24, r25
     f58:	80 93 7e 03 	sts	0x037E, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     f5c:	80 91 01 03 	lds	r24, 0x0301
     f60:	0e 94 8e 07 	call	0xf1c	; 0xf1c <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     f64:	90 91 c1 02 	lds	r25, 0x02C1
     f68:	98 2b       	or	r25, r24
     f6a:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     f6e:	20 91 bd 02 	lds	r18, 0x02BD
     f72:	98 2f       	mov	r25, r24
     f74:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     f76:	89 2f       	mov	r24, r25
     f78:	82 27       	eor	r24, r18
     f7a:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     f7e:	89 23       	and	r24, r25
     f80:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     f84:	90 91 7f 03 	lds	r25, 0x037F
     f88:	89 27       	eor	r24, r25
     f8a:	80 93 7f 03 	sts	0x037F, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     f8e:	80 91 00 03 	lds	r24, 0x0300
     f92:	0e 94 8e 07 	call	0xf1c	; 0xf1c <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     f96:	80 91 ff 02 	lds	r24, 0x02FF
     f9a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     f9e:	80 91 07 03 	lds	r24, 0x0307
     fa2:	83 30       	cpi	r24, 0x03	; 3
     fa4:	11 f4       	brne	.+4      	; 0xfaa <update_spi+0x82>
     fa6:	20 e8       	ldi	r18, 0x80	; 128
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <update_spi+0x84>
     faa:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
     fac:	80 91 80 03 	lds	r24, 0x0380
     fb0:	88 1f       	adc	r24, r24
     fb2:	88 27       	eor	r24, r24
     fb4:	88 1f       	adc	r24, r24
     fb6:	82 95       	swap	r24
     fb8:	88 0f       	add	r24, r24
     fba:	88 0f       	add	r24, r24
     fbc:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     fbe:	90 91 fe 02 	lds	r25, 0x02FE
     fc2:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     fc4:	82 2b       	or	r24, r18
     fc6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     fca:	ed ed       	ldi	r30, 0xDD	; 221
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	87 7f       	andi	r24, 0xF7	; 247
     fd2:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     fd4:	80 81       	ld	r24, Z
     fd6:	88 60       	ori	r24, 0x08	; 8
     fd8:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     fda:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     fdc:	08 95       	ret

00000fde <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	b1 e0       	ldi	r27, 0x01	; 1
     fe2:	9d 01       	movw	r18, r26
     fe4:	24 5c       	subi	r18, 0xC4	; 196
     fe6:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     fe8:	ed 91       	ld	r30, X+
     fea:	fc 91       	ld	r31, X
     fec:	11 97       	sbiw	r26, 0x01	; 1
     fee:	80 81       	ld	r24, Z
     ff0:	41 81       	ldd	r20, Z+1	; 0x01
     ff2:	94 2f       	mov	r25, r20
     ff4:	93 70       	andi	r25, 0x03	; 3
     ff6:	95 95       	asr	r25
     ff8:	87 95       	ror	r24
     ffa:	95 95       	asr	r25
     ffc:	87 95       	ror	r24
     ffe:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
    1000:	ed 91       	ld	r30, X+
    1002:	fd 91       	ld	r31, X+
    1004:	83 81       	ldd	r24, Z+3	; 0x03
    1006:	80 68       	ori	r24, 0x80	; 128
    1008:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
    100a:	a2 17       	cp	r26, r18
    100c:	b3 07       	cpc	r27, r19
    100e:	61 f7       	brne	.-40     	; 0xfe8 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
    1010:	08 95       	ret

00001012 <unlock_pots>:

void unlock_pots(void) {
    1012:	e0 e0       	ldi	r30, 0x00	; 0
    1014:	f1 e0       	ldi	r31, 0x01	; 1
    1016:	cf 01       	movw	r24, r30
    1018:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
    101a:	a1 91       	ld	r26, Z+
    101c:	b1 91       	ld	r27, Z+
    101e:	13 96       	adiw	r26, 0x03	; 3
    1020:	2c 91       	ld	r18, X
    1022:	13 97       	sbiw	r26, 0x03	; 3
    1024:	2f 77       	andi	r18, 0x7F	; 127
    1026:	13 96       	adiw	r26, 0x03	; 3
    1028:	2c 93       	st	X, r18
    102a:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
    102c:	e8 17       	cp	r30, r24
    102e:	f9 07       	cpc	r31, r25
    1030:	a1 f7       	brne	.-24     	; 0x101a <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
    1032:	08 95       	ret

00001034 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	ab 97       	sbiw	r28, 0x2b	; 43
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
    104c:	ee ed       	ldi	r30, 0xDE	; 222
    104e:	f2 e0       	ldi	r31, 0x02	; 2
    1050:	20 91 de 02 	lds	r18, 0x02DE
    1054:	82 2f       	mov	r24, r18
    1056:	82 95       	swap	r24
    1058:	80 7f       	andi	r24, 0xF0	; 240
    105a:	22 95       	swap	r18
    105c:	2f 70       	andi	r18, 0x0F	; 15
    105e:	90 91 df 02 	lds	r25, 0x02DF
    1062:	93 70       	andi	r25, 0x03	; 3
    1064:	92 95       	swap	r25
    1066:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
    1068:	df 01       	movw	r26, r30
    106a:	5a 97       	sbiw	r26, 0x1a	; 26
    106c:	3c 91       	ld	r19, X
    106e:	53 2f       	mov	r21, r19
    1070:	55 0f       	add	r21, r21
    1072:	55 0f       	add	r21, r21
    1074:	4a 81       	ldd	r20, Y+2	; 0x02
    1076:	43 70       	andi	r20, 0x03	; 3
    1078:	45 2b       	or	r20, r21
    107a:	4a 83       	std	Y+2, r20	; 0x02
    107c:	63 2f       	mov	r22, r19
    107e:	62 95       	swap	r22
    1080:	66 95       	lsr	r22
    1082:	66 95       	lsr	r22
    1084:	63 70       	andi	r22, 0x03	; 3
    1086:	11 96       	adiw	r26, 0x01	; 1
    1088:	4c 91       	ld	r20, X
    108a:	43 70       	andi	r20, 0x03	; 3
    108c:	44 0f       	add	r20, r20
    108e:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    1090:	df 01       	movw	r26, r30
    1092:	58 97       	sbiw	r26, 0x18	; 24
    1094:	3c 91       	ld	r19, X
    1096:	53 2f       	mov	r21, r19
    1098:	52 95       	swap	r21
    109a:	50 7f       	andi	r21, 0xF0	; 240
    109c:	46 2b       	or	r20, r22
    109e:	45 2b       	or	r20, r21
    10a0:	4b 83       	std	Y+3, r20	; 0x03
    10a2:	63 2f       	mov	r22, r19
    10a4:	62 95       	swap	r22
    10a6:	6f 70       	andi	r22, 0x0F	; 15
    10a8:	11 96       	adiw	r26, 0x01	; 1
    10aa:	4c 91       	ld	r20, X
    10ac:	43 70       	andi	r20, 0x03	; 3
    10ae:	42 95       	swap	r20
    10b0:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    10b2:	df 01       	movw	r26, r30
    10b4:	56 97       	sbiw	r26, 0x16	; 22
    10b6:	3c 91       	ld	r19, X
    10b8:	53 2f       	mov	r21, r19
    10ba:	52 95       	swap	r21
    10bc:	55 0f       	add	r21, r21
    10be:	55 0f       	add	r21, r21
    10c0:	50 7c       	andi	r21, 0xC0	; 192
    10c2:	46 2b       	or	r20, r22
    10c4:	45 2b       	or	r20, r21
    10c6:	4c 83       	std	Y+4, r20	; 0x04
    10c8:	11 96       	adiw	r26, 0x01	; 1
    10ca:	4c 91       	ld	r20, X
    10cc:	42 95       	swap	r20
    10ce:	44 0f       	add	r20, r20
    10d0:	44 0f       	add	r20, r20
    10d2:	40 7c       	andi	r20, 0xC0	; 192
    10d4:	36 95       	lsr	r19
    10d6:	36 95       	lsr	r19
    10d8:	34 2b       	or	r19, r20
    10da:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    10dc:	df 01       	movw	r26, r30
    10de:	54 97       	sbiw	r26, 0x14	; 20
    10e0:	3c 91       	ld	r19, X
    10e2:	3e 83       	std	Y+6, r19	; 0x06
    10e4:	11 96       	adiw	r26, 0x01	; 1
    10e6:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    10e8:	df 01       	movw	r26, r30
    10ea:	52 97       	sbiw	r26, 0x12	; 18
    10ec:	3c 91       	ld	r19, X
    10ee:	53 2f       	mov	r21, r19
    10f0:	55 0f       	add	r21, r21
    10f2:	55 0f       	add	r21, r21
    10f4:	43 70       	andi	r20, 0x03	; 3
    10f6:	45 2b       	or	r20, r21
    10f8:	4f 83       	std	Y+7, r20	; 0x07
    10fa:	63 2f       	mov	r22, r19
    10fc:	62 95       	swap	r22
    10fe:	66 95       	lsr	r22
    1100:	66 95       	lsr	r22
    1102:	63 70       	andi	r22, 0x03	; 3
    1104:	11 96       	adiw	r26, 0x01	; 1
    1106:	4c 91       	ld	r20, X
    1108:	43 70       	andi	r20, 0x03	; 3
    110a:	44 0f       	add	r20, r20
    110c:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    110e:	df 01       	movw	r26, r30
    1110:	50 97       	sbiw	r26, 0x10	; 16
    1112:	3c 91       	ld	r19, X
    1114:	53 2f       	mov	r21, r19
    1116:	52 95       	swap	r21
    1118:	50 7f       	andi	r21, 0xF0	; 240
    111a:	46 2b       	or	r20, r22
    111c:	45 2b       	or	r20, r21
    111e:	48 87       	std	Y+8, r20	; 0x08
    1120:	63 2f       	mov	r22, r19
    1122:	62 95       	swap	r22
    1124:	6f 70       	andi	r22, 0x0F	; 15
    1126:	11 96       	adiw	r26, 0x01	; 1
    1128:	4c 91       	ld	r20, X
    112a:	43 70       	andi	r20, 0x03	; 3
    112c:	42 95       	swap	r20
    112e:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    1130:	df 01       	movw	r26, r30
    1132:	1e 97       	sbiw	r26, 0x0e	; 14
    1134:	3c 91       	ld	r19, X
    1136:	53 2f       	mov	r21, r19
    1138:	52 95       	swap	r21
    113a:	55 0f       	add	r21, r21
    113c:	55 0f       	add	r21, r21
    113e:	50 7c       	andi	r21, 0xC0	; 192
    1140:	46 2b       	or	r20, r22
    1142:	45 2b       	or	r20, r21
    1144:	49 87       	std	Y+9, r20	; 0x09
    1146:	11 96       	adiw	r26, 0x01	; 1
    1148:	4c 91       	ld	r20, X
    114a:	42 95       	swap	r20
    114c:	44 0f       	add	r20, r20
    114e:	44 0f       	add	r20, r20
    1150:	40 7c       	andi	r20, 0xC0	; 192
    1152:	36 95       	lsr	r19
    1154:	36 95       	lsr	r19
    1156:	34 2b       	or	r19, r20
    1158:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    115a:	df 01       	movw	r26, r30
    115c:	1c 97       	sbiw	r26, 0x0c	; 12
    115e:	3c 91       	ld	r19, X
    1160:	3b 87       	std	Y+11, r19	; 0x0b
    1162:	11 96       	adiw	r26, 0x01	; 1
    1164:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1166:	df 01       	movw	r26, r30
    1168:	1a 97       	sbiw	r26, 0x0a	; 10
    116a:	3c 91       	ld	r19, X
    116c:	53 2f       	mov	r21, r19
    116e:	55 0f       	add	r21, r21
    1170:	55 0f       	add	r21, r21
    1172:	43 70       	andi	r20, 0x03	; 3
    1174:	45 2b       	or	r20, r21
    1176:	4c 87       	std	Y+12, r20	; 0x0c
    1178:	63 2f       	mov	r22, r19
    117a:	62 95       	swap	r22
    117c:	66 95       	lsr	r22
    117e:	66 95       	lsr	r22
    1180:	63 70       	andi	r22, 0x03	; 3
    1182:	11 96       	adiw	r26, 0x01	; 1
    1184:	4c 91       	ld	r20, X
    1186:	43 70       	andi	r20, 0x03	; 3
    1188:	44 0f       	add	r20, r20
    118a:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    118c:	df 01       	movw	r26, r30
    118e:	18 97       	sbiw	r26, 0x08	; 8
    1190:	3c 91       	ld	r19, X
    1192:	53 2f       	mov	r21, r19
    1194:	52 95       	swap	r21
    1196:	50 7f       	andi	r21, 0xF0	; 240
    1198:	46 2b       	or	r20, r22
    119a:	45 2b       	or	r20, r21
    119c:	4d 87       	std	Y+13, r20	; 0x0d
    119e:	63 2f       	mov	r22, r19
    11a0:	62 95       	swap	r22
    11a2:	6f 70       	andi	r22, 0x0F	; 15
    11a4:	11 96       	adiw	r26, 0x01	; 1
    11a6:	4c 91       	ld	r20, X
    11a8:	43 70       	andi	r20, 0x03	; 3
    11aa:	42 95       	swap	r20
    11ac:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    11ae:	df 01       	movw	r26, r30
    11b0:	16 97       	sbiw	r26, 0x06	; 6
    11b2:	3c 91       	ld	r19, X
    11b4:	53 2f       	mov	r21, r19
    11b6:	52 95       	swap	r21
    11b8:	55 0f       	add	r21, r21
    11ba:	55 0f       	add	r21, r21
    11bc:	50 7c       	andi	r21, 0xC0	; 192
    11be:	46 2b       	or	r20, r22
    11c0:	45 2b       	or	r20, r21
    11c2:	4e 87       	std	Y+14, r20	; 0x0e
    11c4:	11 96       	adiw	r26, 0x01	; 1
    11c6:	4c 91       	ld	r20, X
    11c8:	42 95       	swap	r20
    11ca:	44 0f       	add	r20, r20
    11cc:	44 0f       	add	r20, r20
    11ce:	40 7c       	andi	r20, 0xC0	; 192
    11d0:	36 95       	lsr	r19
    11d2:	36 95       	lsr	r19
    11d4:	34 2b       	or	r19, r20
    11d6:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    11d8:	df 01       	movw	r26, r30
    11da:	14 97       	sbiw	r26, 0x04	; 4
    11dc:	3c 91       	ld	r19, X
    11de:	38 8b       	std	Y+16, r19	; 0x10
    11e0:	11 96       	adiw	r26, 0x01	; 1
    11e2:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    11e4:	df 01       	movw	r26, r30
    11e6:	12 97       	sbiw	r26, 0x02	; 2
    11e8:	3c 91       	ld	r19, X
    11ea:	53 2f       	mov	r21, r19
    11ec:	55 0f       	add	r21, r21
    11ee:	55 0f       	add	r21, r21
    11f0:	43 70       	andi	r20, 0x03	; 3
    11f2:	45 2b       	or	r20, r21
    11f4:	49 8b       	std	Y+17, r20	; 0x11
    11f6:	32 95       	swap	r19
    11f8:	36 95       	lsr	r19
    11fa:	36 95       	lsr	r19
    11fc:	33 70       	andi	r19, 0x03	; 3
    11fe:	11 96       	adiw	r26, 0x01	; 1
    1200:	4c 91       	ld	r20, X
    1202:	43 70       	andi	r20, 0x03	; 3
    1204:	44 0f       	add	r20, r20
    1206:	44 0f       	add	r20, r20
    1208:	83 2b       	or	r24, r19
    120a:	84 2b       	or	r24, r20
    120c:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    120e:	80 91 e0 02 	lds	r24, 0x02E0
    1212:	38 2f       	mov	r19, r24
    1214:	32 95       	swap	r19
    1216:	33 0f       	add	r19, r19
    1218:	33 0f       	add	r19, r19
    121a:	30 7c       	andi	r19, 0xC0	; 192
    121c:	92 2b       	or	r25, r18
    121e:	93 2b       	or	r25, r19
    1220:	9b 8b       	std	Y+19, r25	; 0x13
    1222:	93 81       	ldd	r25, Z+3	; 0x03
    1224:	92 95       	swap	r25
    1226:	99 0f       	add	r25, r25
    1228:	99 0f       	add	r25, r25
    122a:	90 7c       	andi	r25, 0xC0	; 192
    122c:	86 95       	lsr	r24
    122e:	86 95       	lsr	r24
    1230:	89 2b       	or	r24, r25
    1232:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    1234:	80 91 e2 02 	lds	r24, 0x02E2
    1238:	8d 8b       	std	Y+21, r24	; 0x15
    123a:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    123c:	80 91 e4 02 	lds	r24, 0x02E4
    1240:	28 2f       	mov	r18, r24
    1242:	22 0f       	add	r18, r18
    1244:	22 0f       	add	r18, r18
    1246:	93 70       	andi	r25, 0x03	; 3
    1248:	92 2b       	or	r25, r18
    124a:	9e 8b       	std	Y+22, r25	; 0x16
    124c:	38 2f       	mov	r19, r24
    124e:	32 95       	swap	r19
    1250:	36 95       	lsr	r19
    1252:	36 95       	lsr	r19
    1254:	33 70       	andi	r19, 0x03	; 3
    1256:	97 81       	ldd	r25, Z+7	; 0x07
    1258:	93 70       	andi	r25, 0x03	; 3
    125a:	99 0f       	add	r25, r25
    125c:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    125e:	80 91 e6 02 	lds	r24, 0x02E6
    1262:	28 2f       	mov	r18, r24
    1264:	22 95       	swap	r18
    1266:	20 7f       	andi	r18, 0xF0	; 240
    1268:	93 2b       	or	r25, r19
    126a:	92 2b       	or	r25, r18
    126c:	9f 8b       	std	Y+23, r25	; 0x17
    126e:	38 2f       	mov	r19, r24
    1270:	32 95       	swap	r19
    1272:	3f 70       	andi	r19, 0x0F	; 15
    1274:	91 85       	ldd	r25, Z+9	; 0x09
    1276:	93 70       	andi	r25, 0x03	; 3
    1278:	92 95       	swap	r25
    127a:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    127c:	80 91 e8 02 	lds	r24, 0x02E8
    1280:	28 2f       	mov	r18, r24
    1282:	22 95       	swap	r18
    1284:	22 0f       	add	r18, r18
    1286:	22 0f       	add	r18, r18
    1288:	20 7c       	andi	r18, 0xC0	; 192
    128a:	93 2b       	or	r25, r19
    128c:	92 2b       	or	r25, r18
    128e:	98 8f       	std	Y+24, r25	; 0x18
    1290:	93 85       	ldd	r25, Z+11	; 0x0b
    1292:	92 95       	swap	r25
    1294:	99 0f       	add	r25, r25
    1296:	99 0f       	add	r25, r25
    1298:	90 7c       	andi	r25, 0xC0	; 192
    129a:	86 95       	lsr	r24
    129c:	86 95       	lsr	r24
    129e:	89 2b       	or	r24, r25
    12a0:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    12a2:	80 91 ea 02 	lds	r24, 0x02EA
    12a6:	8a 8f       	std	Y+26, r24	; 0x1a
    12a8:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    12aa:	80 91 ec 02 	lds	r24, 0x02EC
    12ae:	28 2f       	mov	r18, r24
    12b0:	22 0f       	add	r18, r18
    12b2:	22 0f       	add	r18, r18
    12b4:	93 70       	andi	r25, 0x03	; 3
    12b6:	92 2b       	or	r25, r18
    12b8:	9b 8f       	std	Y+27, r25	; 0x1b
    12ba:	38 2f       	mov	r19, r24
    12bc:	32 95       	swap	r19
    12be:	36 95       	lsr	r19
    12c0:	36 95       	lsr	r19
    12c2:	33 70       	andi	r19, 0x03	; 3
    12c4:	97 85       	ldd	r25, Z+15	; 0x0f
    12c6:	93 70       	andi	r25, 0x03	; 3
    12c8:	99 0f       	add	r25, r25
    12ca:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    12cc:	80 91 ee 02 	lds	r24, 0x02EE
    12d0:	28 2f       	mov	r18, r24
    12d2:	22 95       	swap	r18
    12d4:	20 7f       	andi	r18, 0xF0	; 240
    12d6:	93 2b       	or	r25, r19
    12d8:	92 2b       	or	r25, r18
    12da:	9c 8f       	std	Y+28, r25	; 0x1c
    12dc:	38 2f       	mov	r19, r24
    12de:	32 95       	swap	r19
    12e0:	3f 70       	andi	r19, 0x0F	; 15
    12e2:	91 89       	ldd	r25, Z+17	; 0x11
    12e4:	93 70       	andi	r25, 0x03	; 3
    12e6:	92 95       	swap	r25
    12e8:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    12ea:	80 91 f0 02 	lds	r24, 0x02F0
    12ee:	28 2f       	mov	r18, r24
    12f0:	22 95       	swap	r18
    12f2:	22 0f       	add	r18, r18
    12f4:	22 0f       	add	r18, r18
    12f6:	20 7c       	andi	r18, 0xC0	; 192
    12f8:	93 2b       	or	r25, r19
    12fa:	92 2b       	or	r25, r18
    12fc:	9d 8f       	std	Y+29, r25	; 0x1d
    12fe:	93 89       	ldd	r25, Z+19	; 0x13
    1300:	92 95       	swap	r25
    1302:	99 0f       	add	r25, r25
    1304:	99 0f       	add	r25, r25
    1306:	90 7c       	andi	r25, 0xC0	; 192
    1308:	86 95       	lsr	r24
    130a:	86 95       	lsr	r24
    130c:	89 2b       	or	r24, r25
    130e:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    1310:	80 91 f2 02 	lds	r24, 0x02F2
    1314:	8f 8f       	std	Y+31, r24	; 0x1f
    1316:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    1318:	80 91 f4 02 	lds	r24, 0x02F4
    131c:	28 2f       	mov	r18, r24
    131e:	22 0f       	add	r18, r18
    1320:	22 0f       	add	r18, r18
    1322:	93 70       	andi	r25, 0x03	; 3
    1324:	92 2b       	or	r25, r18
    1326:	98 a3       	lds	r25, 0x58
    1328:	38 2f       	mov	r19, r24
    132a:	32 95       	swap	r19
    132c:	36 95       	lsr	r19
    132e:	36 95       	lsr	r19
    1330:	33 70       	andi	r19, 0x03	; 3
    1332:	97 89       	ldd	r25, Z+23	; 0x17
    1334:	93 70       	andi	r25, 0x03	; 3
    1336:	99 0f       	add	r25, r25
    1338:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    133a:	80 91 f6 02 	lds	r24, 0x02F6
    133e:	28 2f       	mov	r18, r24
    1340:	22 95       	swap	r18
    1342:	20 7f       	andi	r18, 0xF0	; 240
    1344:	93 2b       	or	r25, r19
    1346:	92 2b       	or	r25, r18
    1348:	99 a3       	lds	r25, 0x59
    134a:	38 2f       	mov	r19, r24
    134c:	32 95       	swap	r19
    134e:	3f 70       	andi	r19, 0x0F	; 15
    1350:	91 8d       	ldd	r25, Z+25	; 0x19
    1352:	93 70       	andi	r25, 0x03	; 3
    1354:	92 95       	swap	r25
    1356:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    1358:	80 91 f8 02 	lds	r24, 0x02F8
    135c:	28 2f       	mov	r18, r24
    135e:	22 95       	swap	r18
    1360:	22 0f       	add	r18, r18
    1362:	22 0f       	add	r18, r18
    1364:	20 7c       	andi	r18, 0xC0	; 192
    1366:	93 2b       	or	r25, r19
    1368:	92 2b       	or	r25, r18
    136a:	9a a3       	lds	r25, 0x5a
    136c:	93 8d       	ldd	r25, Z+27	; 0x1b
    136e:	92 95       	swap	r25
    1370:	99 0f       	add	r25, r25
    1372:	99 0f       	add	r25, r25
    1374:	90 7c       	andi	r25, 0xC0	; 192
    1376:	86 95       	lsr	r24
    1378:	86 95       	lsr	r24
    137a:	89 2b       	or	r24, r25
    137c:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    137e:	80 91 fa 02 	lds	r24, 0x02FA
    1382:	8c a3       	lds	r24, 0x5c
    1384:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    1386:	80 91 fc 02 	lds	r24, 0x02FC
    138a:	28 2f       	mov	r18, r24
    138c:	22 0f       	add	r18, r18
    138e:	22 0f       	add	r18, r18
    1390:	93 70       	andi	r25, 0x03	; 3
    1392:	92 2b       	or	r25, r18
    1394:	9d a3       	lds	r25, 0x5d
    1396:	82 95       	swap	r24
    1398:	86 95       	lsr	r24
    139a:	86 95       	lsr	r24
    139c:	83 70       	andi	r24, 0x03	; 3
    139e:	2e a1       	lds	r18, 0x4e
    13a0:	20 7f       	andi	r18, 0xF0	; 240
    13a2:	97 8d       	ldd	r25, Z+31	; 0x1f
    13a4:	93 70       	andi	r25, 0x03	; 3
    13a6:	99 0f       	add	r25, r25
    13a8:	99 0f       	add	r25, r25
    13aa:	82 2b       	or	r24, r18
    13ac:	89 2b       	or	r24, r25
    13ae:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    13b0:	80 91 fe 02 	lds	r24, 0x02FE
    13b4:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    13b6:	80 91 ff 02 	lds	r24, 0x02FF
    13ba:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    13bc:	80 91 00 03 	lds	r24, 0x0300
    13c0:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    13c2:	80 91 01 03 	lds	r24, 0x0301
    13c6:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    13c8:	80 91 02 03 	lds	r24, 0x0302
    13cc:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    13ce:	0e 94 ef 07 	call	0xfde	; 0xfde <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    13d2:	80 91 80 03 	lds	r24, 0x0380
    13d6:	8f 77       	andi	r24, 0x7F	; 127
    13d8:	80 93 80 03 	sts	0x0380, r24
	current_patch.mode = MEMORY;
    13dc:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    13e0:	21 2f       	mov	r18, r17
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	8b e2       	ldi	r24, 0x2B	; 43
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	28 9f       	mul	r18, r24
    13ea:	b0 01       	movw	r22, r0
    13ec:	29 9f       	mul	r18, r25
    13ee:	70 0d       	add	r23, r0
    13f0:	38 9f       	mul	r19, r24
    13f2:	70 0d       	add	r23, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	60 50       	subi	r22, 0x00	; 0
    13f8:	70 40       	sbci	r23, 0x00	; 0
    13fa:	ce 01       	movw	r24, r28
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	4b e2       	ldi	r20, 0x2B	; 43
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__eeupd_block_m6450a>
}	
    1406:	ab 96       	adiw	r28, 0x2b	; 43
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	08 95       	ret

0000141a <load_patch>:
	
void load_patch(uint8_t patch_number) {
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	c3 54       	subi	r28, 0x43	; 67
    1426:	d0 40       	sbci	r29, 0x00	; 0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	2b e2       	ldi	r18, 0x2B	; 43
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	82 9f       	mul	r24, r18
    143a:	b0 01       	movw	r22, r0
    143c:	83 9f       	mul	r24, r19
    143e:	70 0d       	add	r23, r0
    1440:	92 9f       	mul	r25, r18
    1442:	70 0d       	add	r23, r0
    1444:	11 24       	eor	r1, r1
    1446:	60 50       	subi	r22, 0x00	; 0
    1448:	70 40       	sbci	r23, 0x00	; 0
    144a:	ce 01       	movw	r24, r28
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	4b e2       	ldi	r20, 0x2B	; 43
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    1456:	ee ed       	ldi	r30, 0xDE	; 222
    1458:	f2 e0       	ldi	r31, 0x02	; 2
    145a:	8a 89       	ldd	r24, Y+18	; 0x12
    145c:	28 2f       	mov	r18, r24
    145e:	22 95       	swap	r18
    1460:	2f 70       	andi	r18, 0x0F	; 15
    1462:	9b 89       	ldd	r25, Y+19	; 0x13
    1464:	39 2f       	mov	r19, r25
    1466:	32 95       	swap	r19
    1468:	30 7f       	andi	r19, 0xF0	; 240
    146a:	32 2b       	or	r19, r18
    146c:	29 2f       	mov	r18, r25
    146e:	22 95       	swap	r18
    1470:	2f 70       	andi	r18, 0x0F	; 15
    1472:	23 70       	andi	r18, 0x03	; 3
    1474:	30 93 de 02 	sts	0x02DE, r19
    1478:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    147c:	df 01       	movw	r26, r30
    147e:	5a 97       	sbiw	r26, 0x1a	; 26
    1480:	4a 81       	ldd	r20, Y+2	; 0x02
    1482:	46 95       	lsr	r20
    1484:	46 95       	lsr	r20
    1486:	2b 81       	ldd	r18, Y+3	; 0x03
    1488:	32 2f       	mov	r19, r18
    148a:	32 95       	swap	r19
    148c:	33 0f       	add	r19, r19
    148e:	33 0f       	add	r19, r19
    1490:	30 7c       	andi	r19, 0xC0	; 192
    1492:	43 2b       	or	r20, r19
    1494:	32 2f       	mov	r19, r18
    1496:	36 95       	lsr	r19
    1498:	36 95       	lsr	r19
    149a:	33 70       	andi	r19, 0x03	; 3
    149c:	4c 93       	st	X, r20
    149e:	11 96       	adiw	r26, 0x01	; 1
    14a0:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    14a2:	df 01       	movw	r26, r30
    14a4:	58 97       	sbiw	r26, 0x18	; 24
    14a6:	32 2f       	mov	r19, r18
    14a8:	32 95       	swap	r19
    14aa:	3f 70       	andi	r19, 0x0F	; 15
    14ac:	2c 81       	ldd	r18, Y+4	; 0x04
    14ae:	42 2f       	mov	r20, r18
    14b0:	42 95       	swap	r20
    14b2:	40 7f       	andi	r20, 0xF0	; 240
    14b4:	43 2b       	or	r20, r19
    14b6:	32 2f       	mov	r19, r18
    14b8:	32 95       	swap	r19
    14ba:	3f 70       	andi	r19, 0x0F	; 15
    14bc:	33 70       	andi	r19, 0x03	; 3
    14be:	4c 93       	st	X, r20
    14c0:	11 96       	adiw	r26, 0x01	; 1
    14c2:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    14c4:	df 01       	movw	r26, r30
    14c6:	56 97       	sbiw	r26, 0x16	; 22
    14c8:	22 95       	swap	r18
    14ca:	26 95       	lsr	r18
    14cc:	26 95       	lsr	r18
    14ce:	23 70       	andi	r18, 0x03	; 3
    14d0:	3d 81       	ldd	r19, Y+5	; 0x05
    14d2:	43 2f       	mov	r20, r19
    14d4:	44 0f       	add	r20, r20
    14d6:	44 0f       	add	r20, r20
    14d8:	24 2b       	or	r18, r20
    14da:	32 95       	swap	r19
    14dc:	36 95       	lsr	r19
    14de:	36 95       	lsr	r19
    14e0:	33 70       	andi	r19, 0x03	; 3
    14e2:	2c 93       	st	X, r18
    14e4:	11 96       	adiw	r26, 0x01	; 1
    14e6:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    14e8:	df 01       	movw	r26, r30
    14ea:	54 97       	sbiw	r26, 0x14	; 20
    14ec:	4e 81       	ldd	r20, Y+6	; 0x06
    14ee:	2f 81       	ldd	r18, Y+7	; 0x07
    14f0:	32 2f       	mov	r19, r18
    14f2:	33 70       	andi	r19, 0x03	; 3
    14f4:	4c 93       	st	X, r20
    14f6:	11 96       	adiw	r26, 0x01	; 1
    14f8:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    14fa:	df 01       	movw	r26, r30
    14fc:	52 97       	sbiw	r26, 0x12	; 18
    14fe:	32 2f       	mov	r19, r18
    1500:	36 95       	lsr	r19
    1502:	36 95       	lsr	r19
    1504:	28 85       	ldd	r18, Y+8	; 0x08
    1506:	42 2f       	mov	r20, r18
    1508:	42 95       	swap	r20
    150a:	44 0f       	add	r20, r20
    150c:	44 0f       	add	r20, r20
    150e:	40 7c       	andi	r20, 0xC0	; 192
    1510:	43 2b       	or	r20, r19
    1512:	32 2f       	mov	r19, r18
    1514:	36 95       	lsr	r19
    1516:	36 95       	lsr	r19
    1518:	33 70       	andi	r19, 0x03	; 3
    151a:	4c 93       	st	X, r20
    151c:	11 96       	adiw	r26, 0x01	; 1
    151e:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1520:	df 01       	movw	r26, r30
    1522:	50 97       	sbiw	r26, 0x10	; 16
    1524:	32 2f       	mov	r19, r18
    1526:	32 95       	swap	r19
    1528:	3f 70       	andi	r19, 0x0F	; 15
    152a:	29 85       	ldd	r18, Y+9	; 0x09
    152c:	42 2f       	mov	r20, r18
    152e:	42 95       	swap	r20
    1530:	40 7f       	andi	r20, 0xF0	; 240
    1532:	43 2b       	or	r20, r19
    1534:	32 2f       	mov	r19, r18
    1536:	32 95       	swap	r19
    1538:	3f 70       	andi	r19, 0x0F	; 15
    153a:	33 70       	andi	r19, 0x03	; 3
    153c:	4c 93       	st	X, r20
    153e:	11 96       	adiw	r26, 0x01	; 1
    1540:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    1542:	df 01       	movw	r26, r30
    1544:	1e 97       	sbiw	r26, 0x0e	; 14
    1546:	22 95       	swap	r18
    1548:	26 95       	lsr	r18
    154a:	26 95       	lsr	r18
    154c:	23 70       	andi	r18, 0x03	; 3
    154e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1550:	43 2f       	mov	r20, r19
    1552:	44 0f       	add	r20, r20
    1554:	44 0f       	add	r20, r20
    1556:	24 2b       	or	r18, r20
    1558:	32 95       	swap	r19
    155a:	36 95       	lsr	r19
    155c:	36 95       	lsr	r19
    155e:	33 70       	andi	r19, 0x03	; 3
    1560:	2c 93       	st	X, r18
    1562:	11 96       	adiw	r26, 0x01	; 1
    1564:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    1566:	df 01       	movw	r26, r30
    1568:	1c 97       	sbiw	r26, 0x0c	; 12
    156a:	4b 85       	ldd	r20, Y+11	; 0x0b
    156c:	2c 85       	ldd	r18, Y+12	; 0x0c
    156e:	32 2f       	mov	r19, r18
    1570:	33 70       	andi	r19, 0x03	; 3
    1572:	4c 93       	st	X, r20
    1574:	11 96       	adiw	r26, 0x01	; 1
    1576:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1578:	df 01       	movw	r26, r30
    157a:	1a 97       	sbiw	r26, 0x0a	; 10
    157c:	32 2f       	mov	r19, r18
    157e:	36 95       	lsr	r19
    1580:	36 95       	lsr	r19
    1582:	2d 85       	ldd	r18, Y+13	; 0x0d
    1584:	42 2f       	mov	r20, r18
    1586:	42 95       	swap	r20
    1588:	44 0f       	add	r20, r20
    158a:	44 0f       	add	r20, r20
    158c:	40 7c       	andi	r20, 0xC0	; 192
    158e:	43 2b       	or	r20, r19
    1590:	32 2f       	mov	r19, r18
    1592:	36 95       	lsr	r19
    1594:	36 95       	lsr	r19
    1596:	33 70       	andi	r19, 0x03	; 3
    1598:	4c 93       	st	X, r20
    159a:	11 96       	adiw	r26, 0x01	; 1
    159c:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    159e:	df 01       	movw	r26, r30
    15a0:	18 97       	sbiw	r26, 0x08	; 8
    15a2:	32 2f       	mov	r19, r18
    15a4:	32 95       	swap	r19
    15a6:	3f 70       	andi	r19, 0x0F	; 15
    15a8:	2e 85       	ldd	r18, Y+14	; 0x0e
    15aa:	42 2f       	mov	r20, r18
    15ac:	42 95       	swap	r20
    15ae:	40 7f       	andi	r20, 0xF0	; 240
    15b0:	43 2b       	or	r20, r19
    15b2:	32 2f       	mov	r19, r18
    15b4:	32 95       	swap	r19
    15b6:	3f 70       	andi	r19, 0x0F	; 15
    15b8:	33 70       	andi	r19, 0x03	; 3
    15ba:	4c 93       	st	X, r20
    15bc:	11 96       	adiw	r26, 0x01	; 1
    15be:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    15c0:	df 01       	movw	r26, r30
    15c2:	16 97       	sbiw	r26, 0x06	; 6
    15c4:	22 95       	swap	r18
    15c6:	26 95       	lsr	r18
    15c8:	26 95       	lsr	r18
    15ca:	23 70       	andi	r18, 0x03	; 3
    15cc:	3f 85       	ldd	r19, Y+15	; 0x0f
    15ce:	43 2f       	mov	r20, r19
    15d0:	44 0f       	add	r20, r20
    15d2:	44 0f       	add	r20, r20
    15d4:	24 2b       	or	r18, r20
    15d6:	32 95       	swap	r19
    15d8:	36 95       	lsr	r19
    15da:	36 95       	lsr	r19
    15dc:	33 70       	andi	r19, 0x03	; 3
    15de:	2c 93       	st	X, r18
    15e0:	11 96       	adiw	r26, 0x01	; 1
    15e2:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    15e4:	df 01       	movw	r26, r30
    15e6:	14 97       	sbiw	r26, 0x04	; 4
    15e8:	48 89       	ldd	r20, Y+16	; 0x10
    15ea:	29 89       	ldd	r18, Y+17	; 0x11
    15ec:	32 2f       	mov	r19, r18
    15ee:	33 70       	andi	r19, 0x03	; 3
    15f0:	4c 93       	st	X, r20
    15f2:	11 96       	adiw	r26, 0x01	; 1
    15f4:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    15f6:	df 01       	movw	r26, r30
    15f8:	12 97       	sbiw	r26, 0x02	; 2
    15fa:	26 95       	lsr	r18
    15fc:	26 95       	lsr	r18
    15fe:	38 2f       	mov	r19, r24
    1600:	32 95       	swap	r19
    1602:	33 0f       	add	r19, r19
    1604:	33 0f       	add	r19, r19
    1606:	30 7c       	andi	r19, 0xC0	; 192
    1608:	23 2b       	or	r18, r19
    160a:	86 95       	lsr	r24
    160c:	86 95       	lsr	r24
    160e:	83 70       	andi	r24, 0x03	; 3
    1610:	2c 93       	st	X, r18
    1612:	11 96       	adiw	r26, 0x01	; 1
    1614:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    1616:	92 95       	swap	r25
    1618:	96 95       	lsr	r25
    161a:	96 95       	lsr	r25
    161c:	93 70       	andi	r25, 0x03	; 3
    161e:	8c 89       	ldd	r24, Y+20	; 0x14
    1620:	28 2f       	mov	r18, r24
    1622:	22 0f       	add	r18, r18
    1624:	22 0f       	add	r18, r18
    1626:	92 2b       	or	r25, r18
    1628:	82 95       	swap	r24
    162a:	86 95       	lsr	r24
    162c:	86 95       	lsr	r24
    162e:	83 70       	andi	r24, 0x03	; 3
    1630:	90 93 e0 02 	sts	0x02E0, r25
    1634:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    1636:	2d 89       	ldd	r18, Y+21	; 0x15
    1638:	8e 89       	ldd	r24, Y+22	; 0x16
    163a:	98 2f       	mov	r25, r24
    163c:	93 70       	andi	r25, 0x03	; 3
    163e:	20 93 e2 02 	sts	0x02E2, r18
    1642:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    1644:	98 2f       	mov	r25, r24
    1646:	96 95       	lsr	r25
    1648:	96 95       	lsr	r25
    164a:	8f 89       	ldd	r24, Y+23	; 0x17
    164c:	28 2f       	mov	r18, r24
    164e:	22 95       	swap	r18
    1650:	22 0f       	add	r18, r18
    1652:	22 0f       	add	r18, r18
    1654:	20 7c       	andi	r18, 0xC0	; 192
    1656:	29 2b       	or	r18, r25
    1658:	98 2f       	mov	r25, r24
    165a:	96 95       	lsr	r25
    165c:	96 95       	lsr	r25
    165e:	93 70       	andi	r25, 0x03	; 3
    1660:	20 93 e4 02 	sts	0x02E4, r18
    1664:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    1666:	98 2f       	mov	r25, r24
    1668:	92 95       	swap	r25
    166a:	9f 70       	andi	r25, 0x0F	; 15
    166c:	88 8d       	ldd	r24, Y+24	; 0x18
    166e:	28 2f       	mov	r18, r24
    1670:	22 95       	swap	r18
    1672:	20 7f       	andi	r18, 0xF0	; 240
    1674:	29 2b       	or	r18, r25
    1676:	98 2f       	mov	r25, r24
    1678:	92 95       	swap	r25
    167a:	9f 70       	andi	r25, 0x0F	; 15
    167c:	93 70       	andi	r25, 0x03	; 3
    167e:	20 93 e6 02 	sts	0x02E6, r18
    1682:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    1684:	82 95       	swap	r24
    1686:	86 95       	lsr	r24
    1688:	86 95       	lsr	r24
    168a:	83 70       	andi	r24, 0x03	; 3
    168c:	99 8d       	ldd	r25, Y+25	; 0x19
    168e:	29 2f       	mov	r18, r25
    1690:	22 0f       	add	r18, r18
    1692:	22 0f       	add	r18, r18
    1694:	82 2b       	or	r24, r18
    1696:	92 95       	swap	r25
    1698:	96 95       	lsr	r25
    169a:	96 95       	lsr	r25
    169c:	93 70       	andi	r25, 0x03	; 3
    169e:	80 93 e8 02 	sts	0x02E8, r24
    16a2:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    16a4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a8:	98 2f       	mov	r25, r24
    16aa:	93 70       	andi	r25, 0x03	; 3
    16ac:	20 93 ea 02 	sts	0x02EA, r18
    16b0:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    16b2:	98 2f       	mov	r25, r24
    16b4:	96 95       	lsr	r25
    16b6:	96 95       	lsr	r25
    16b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16ba:	28 2f       	mov	r18, r24
    16bc:	22 95       	swap	r18
    16be:	22 0f       	add	r18, r18
    16c0:	22 0f       	add	r18, r18
    16c2:	20 7c       	andi	r18, 0xC0	; 192
    16c4:	29 2b       	or	r18, r25
    16c6:	98 2f       	mov	r25, r24
    16c8:	96 95       	lsr	r25
    16ca:	96 95       	lsr	r25
    16cc:	93 70       	andi	r25, 0x03	; 3
    16ce:	20 93 ec 02 	sts	0x02EC, r18
    16d2:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    16d4:	98 2f       	mov	r25, r24
    16d6:	92 95       	swap	r25
    16d8:	9f 70       	andi	r25, 0x0F	; 15
    16da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16dc:	28 2f       	mov	r18, r24
    16de:	22 95       	swap	r18
    16e0:	20 7f       	andi	r18, 0xF0	; 240
    16e2:	29 2b       	or	r18, r25
    16e4:	98 2f       	mov	r25, r24
    16e6:	92 95       	swap	r25
    16e8:	9f 70       	andi	r25, 0x0F	; 15
    16ea:	93 70       	andi	r25, 0x03	; 3
    16ec:	20 93 ee 02 	sts	0x02EE, r18
    16f0:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    16f2:	82 95       	swap	r24
    16f4:	86 95       	lsr	r24
    16f6:	86 95       	lsr	r24
    16f8:	83 70       	andi	r24, 0x03	; 3
    16fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16fc:	29 2f       	mov	r18, r25
    16fe:	22 0f       	add	r18, r18
    1700:	22 0f       	add	r18, r18
    1702:	82 2b       	or	r24, r18
    1704:	92 95       	swap	r25
    1706:	96 95       	lsr	r25
    1708:	96 95       	lsr	r25
    170a:	93 70       	andi	r25, 0x03	; 3
    170c:	80 93 f0 02 	sts	0x02F0, r24
    1710:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    1712:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1714:	88 a1       	lds	r24, 0x48
    1716:	98 2f       	mov	r25, r24
    1718:	93 70       	andi	r25, 0x03	; 3
    171a:	20 93 f2 02 	sts	0x02F2, r18
    171e:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1720:	98 2f       	mov	r25, r24
    1722:	96 95       	lsr	r25
    1724:	96 95       	lsr	r25
    1726:	89 a1       	lds	r24, 0x49
    1728:	28 2f       	mov	r18, r24
    172a:	22 95       	swap	r18
    172c:	22 0f       	add	r18, r18
    172e:	22 0f       	add	r18, r18
    1730:	20 7c       	andi	r18, 0xC0	; 192
    1732:	29 2b       	or	r18, r25
    1734:	98 2f       	mov	r25, r24
    1736:	96 95       	lsr	r25
    1738:	96 95       	lsr	r25
    173a:	93 70       	andi	r25, 0x03	; 3
    173c:	20 93 f4 02 	sts	0x02F4, r18
    1740:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    1742:	98 2f       	mov	r25, r24
    1744:	92 95       	swap	r25
    1746:	9f 70       	andi	r25, 0x0F	; 15
    1748:	8a a1       	lds	r24, 0x4a
    174a:	28 2f       	mov	r18, r24
    174c:	22 95       	swap	r18
    174e:	20 7f       	andi	r18, 0xF0	; 240
    1750:	29 2b       	or	r18, r25
    1752:	98 2f       	mov	r25, r24
    1754:	92 95       	swap	r25
    1756:	9f 70       	andi	r25, 0x0F	; 15
    1758:	93 70       	andi	r25, 0x03	; 3
    175a:	20 93 f6 02 	sts	0x02F6, r18
    175e:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1760:	82 95       	swap	r24
    1762:	86 95       	lsr	r24
    1764:	86 95       	lsr	r24
    1766:	83 70       	andi	r24, 0x03	; 3
    1768:	9b a1       	lds	r25, 0x4b
    176a:	29 2f       	mov	r18, r25
    176c:	22 0f       	add	r18, r18
    176e:	22 0f       	add	r18, r18
    1770:	82 2b       	or	r24, r18
    1772:	92 95       	swap	r25
    1774:	96 95       	lsr	r25
    1776:	96 95       	lsr	r25
    1778:	93 70       	andi	r25, 0x03	; 3
    177a:	80 93 f8 02 	sts	0x02F8, r24
    177e:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1780:	2c a1       	lds	r18, 0x4c
    1782:	8d a1       	lds	r24, 0x4d
    1784:	98 2f       	mov	r25, r24
    1786:	93 70       	andi	r25, 0x03	; 3
    1788:	20 93 fa 02 	sts	0x02FA, r18
    178c:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    178e:	98 2f       	mov	r25, r24
    1790:	96 95       	lsr	r25
    1792:	96 95       	lsr	r25
    1794:	8e a1       	lds	r24, 0x4e
    1796:	28 2f       	mov	r18, r24
    1798:	22 95       	swap	r18
    179a:	22 0f       	add	r18, r18
    179c:	22 0f       	add	r18, r18
    179e:	20 7c       	andi	r18, 0xC0	; 192
    17a0:	29 2b       	or	r18, r25
    17a2:	86 95       	lsr	r24
    17a4:	86 95       	lsr	r24
    17a6:	98 2f       	mov	r25, r24
    17a8:	93 70       	andi	r25, 0x03	; 3
    17aa:	20 93 fc 02 	sts	0x02FC, r18
    17ae:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    17b0:	7f a1       	lds	r23, 0x4f
    17b2:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    17b6:	68 a5       	lds	r22, 0x68
    17b8:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    17bc:	89 a5       	lds	r24, 0x69
    17be:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    17c2:	9a a5       	lds	r25, 0x6a
    17c4:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    17c8:	1b a5       	lds	r17, 0x6b
    17ca:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    17ce:	de 01       	movw	r26, r28
    17d0:	9c 96       	adiw	r26, 0x2c	; 44
    17d2:	ef ef       	ldi	r30, 0xFF	; 255
    17d4:	f1 e0       	ldi	r31, 0x01	; 1
    17d6:	28 e0       	ldi	r18, 0x08	; 8
    17d8:	01 90       	ld	r0, Z+
    17da:	0d 92       	st	X+, r0
    17dc:	21 50       	subi	r18, 0x01	; 1
    17de:	e1 f7       	brne	.-8      	; 0x17d8 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    17e0:	e9 2f       	mov	r30, r25
    17e2:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	9f 01       	movw	r18, r30
    17e8:	22 0f       	add	r18, r18
    17ea:	33 1f       	adc	r19, r19
    17ec:	22 0f       	add	r18, r18
    17ee:	33 1f       	adc	r19, r19
    17f0:	a9 01       	movw	r20, r18
    17f2:	44 0f       	add	r20, r20
    17f4:	55 1f       	adc	r21, r21
    17f6:	44 0f       	add	r20, r20
    17f8:	55 1f       	adc	r21, r21
    17fa:	44 0f       	add	r20, r20
    17fc:	55 1f       	adc	r21, r21
    17fe:	42 1b       	sub	r20, r18
    1800:	53 0b       	sbc	r21, r19
    1802:	4e 0f       	add	r20, r30
    1804:	5f 1f       	adc	r21, r31
    1806:	55 95       	asr	r21
    1808:	47 95       	ror	r20
    180a:	55 95       	asr	r21
    180c:	47 95       	ror	r20
    180e:	55 95       	asr	r21
    1810:	47 95       	ror	r20
    1812:	55 95       	asr	r21
    1814:	47 95       	ror	r20
    1816:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1818:	fe 01       	movw	r30, r28
    181a:	e4 0f       	add	r30, r20
    181c:	f1 1d       	adc	r31, r1
    181e:	24 a5       	lds	r18, 0x64
    1820:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    1824:	de 01       	movw	r26, r28
    1826:	d4 96       	adiw	r26, 0x34	; 52
    1828:	e7 e0       	ldi	r30, 0x07	; 7
    182a:	f2 e0       	ldi	r31, 0x02	; 2
    182c:	28 e0       	ldi	r18, 0x08	; 8
    182e:	01 90       	ld	r0, Z+
    1830:	0d 92       	st	X+, r0
    1832:	21 50       	subi	r18, 0x01	; 1
    1834:	e1 f7       	brne	.-8      	; 0x182e <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    1836:	29 2f       	mov	r18, r25
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	20 7e       	andi	r18, 0xE0	; 224
    183c:	30 70       	andi	r19, 0x00	; 0
    183e:	35 95       	asr	r19
    1840:	27 95       	ror	r18
    1842:	35 95       	asr	r19
    1844:	27 95       	ror	r18
    1846:	35 95       	asr	r19
    1848:	27 95       	ror	r18
    184a:	83 70       	andi	r24, 0x03	; 3
    184c:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    184e:	42 2f       	mov	r20, r18
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	ca 01       	movw	r24, r20
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	9c 01       	movw	r18, r24
    185e:	22 0f       	add	r18, r18
    1860:	33 1f       	adc	r19, r19
    1862:	22 0f       	add	r18, r18
    1864:	33 1f       	adc	r19, r19
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	28 1b       	sub	r18, r24
    186c:	39 0b       	sbc	r19, r25
    186e:	42 0f       	add	r20, r18
    1870:	53 1f       	adc	r21, r19
    1872:	ca 01       	movw	r24, r20
    1874:	95 95       	asr	r25
    1876:	87 95       	ror	r24
    1878:	95 95       	asr	r25
    187a:	87 95       	ror	r24
    187c:	95 95       	asr	r25
    187e:	87 95       	ror	r24
    1880:	95 95       	asr	r25
    1882:	87 95       	ror	r24
    1884:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    1886:	fe 01       	movw	r30, r28
    1888:	e8 0f       	add	r30, r24
    188a:	f1 1d       	adc	r31, r1
    188c:	84 a9       	sts	0x44, r24
    188e:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    1892:	de 01       	movw	r26, r28
    1894:	dc 96       	adiw	r26, 0x3c	; 60
    1896:	ef e0       	ldi	r30, 0x0F	; 15
    1898:	f2 e0       	ldi	r31, 0x02	; 2
    189a:	88 e0       	ldi	r24, 0x08	; 8
    189c:	01 90       	ld	r0, Z+
    189e:	0d 92       	st	X+, r0
    18a0:	81 50       	subi	r24, 0x01	; 1
    18a2:	e1 f7       	brne	.-8      	; 0x189c <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    18a4:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    18a6:	46 2f       	mov	r20, r22
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	ca 01       	movw	r24, r20
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	9c 01       	movw	r18, r24
    18b6:	22 0f       	add	r18, r18
    18b8:	33 1f       	adc	r19, r19
    18ba:	22 0f       	add	r18, r18
    18bc:	33 1f       	adc	r19, r19
    18be:	22 0f       	add	r18, r18
    18c0:	33 1f       	adc	r19, r19
    18c2:	28 1b       	sub	r18, r24
    18c4:	39 0b       	sbc	r19, r25
    18c6:	42 0f       	add	r20, r18
    18c8:	53 1f       	adc	r21, r19
    18ca:	ca 01       	movw	r24, r20
    18cc:	95 95       	asr	r25
    18ce:	87 95       	ror	r24
    18d0:	95 95       	asr	r25
    18d2:	87 95       	ror	r24
    18d4:	95 95       	asr	r25
    18d6:	87 95       	ror	r24
    18d8:	95 95       	asr	r25
    18da:	87 95       	ror	r24
    18dc:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    18de:	fe 01       	movw	r30, r28
    18e0:	e8 0f       	add	r30, r24
    18e2:	f1 1d       	adc	r31, r1
    18e4:	84 ad       	sts	0x64, r24
    18e6:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    18ea:	21 2f       	mov	r18, r17
    18ec:	26 95       	lsr	r18
    18ee:	27 95       	ror	r18
    18f0:	22 27       	eor	r18, r18
    18f2:	27 95       	ror	r18
    18f4:	81 2f       	mov	r24, r17
    18f6:	81 70       	andi	r24, 0x01	; 1
    18f8:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    18fa:	81 2f       	mov	r24, r17
    18fc:	86 95       	lsr	r24
    18fe:	86 95       	lsr	r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	81 70       	andi	r24, 0x01	; 1
    1904:	90 70       	andi	r25, 0x00	; 0
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    190e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1910:	81 2f       	mov	r24, r17
    1912:	86 95       	lsr	r24
    1914:	86 95       	lsr	r24
    1916:	86 95       	lsr	r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	81 70       	andi	r24, 0x01	; 1
    191c:	90 70       	andi	r25, 0x00	; 0
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1922:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1924:	81 2f       	mov	r24, r17
    1926:	82 95       	swap	r24
    1928:	8f 70       	andi	r24, 0x0F	; 15
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	81 70       	andi	r24, 0x01	; 1
    192e:	90 70       	andi	r25, 0x00	; 0
    1930:	82 95       	swap	r24
    1932:	92 95       	swap	r25
    1934:	90 7f       	andi	r25, 0xF0	; 240
    1936:	98 27       	eor	r25, r24
    1938:	80 7f       	andi	r24, 0xF0	; 240
    193a:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    193c:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    193e:	81 2f       	mov	r24, r17
    1940:	82 95       	swap	r24
    1942:	86 95       	lsr	r24
    1944:	87 70       	andi	r24, 0x07	; 7
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	81 70       	andi	r24, 0x01	; 1
    194a:	90 70       	andi	r25, 0x00	; 0
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	82 95       	swap	r24
    1952:	92 95       	swap	r25
    1954:	90 7f       	andi	r25, 0xF0	; 240
    1956:	98 27       	eor	r25, r24
    1958:	80 7f       	andi	r24, 0xF0	; 240
    195a:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    195c:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    195e:	81 2f       	mov	r24, r17
    1960:	82 95       	swap	r24
    1962:	86 95       	lsr	r24
    1964:	86 95       	lsr	r24
    1966:	83 70       	andi	r24, 0x03	; 3
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	81 70       	andi	r24, 0x01	; 1
    196c:	90 70       	andi	r25, 0x00	; 0
    196e:	00 24       	eor	r0, r0
    1970:	96 95       	lsr	r25
    1972:	87 95       	ror	r24
    1974:	07 94       	ror	r0
    1976:	96 95       	lsr	r25
    1978:	87 95       	ror	r24
    197a:	07 94       	ror	r0
    197c:	98 2f       	mov	r25, r24
    197e:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1980:	82 2b       	or	r24, r18
    1982:	80 93 7e 03 	sts	0x037E, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    1986:	87 2f       	mov	r24, r23
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	81 70       	andi	r24, 0x01	; 1
    198c:	90 70       	andi	r25, 0x00	; 0
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    199a:	90 91 80 03 	lds	r25, 0x0380
    199e:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    19a0:	89 2b       	or	r24, r25
    19a2:	11 1f       	adc	r17, r17
    19a4:	11 27       	eor	r17, r17
    19a6:	11 1f       	adc	r17, r17
    19a8:	11 0f       	add	r17, r17
    19aa:	11 0f       	add	r17, r17
    19ac:	81 2b       	or	r24, r17
    19ae:	80 93 80 03 	sts	0x0380, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    19b2:	0e 94 ef 07 	call	0xfde	; 0xfde <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    19b6:	80 91 80 03 	lds	r24, 0x0380
    19ba:	8f 77       	andi	r24, 0x7F	; 127
    19bc:	80 93 80 03 	sts	0x0380, r24
	
	current_patch.mode = MEMORY;
    19c0:	10 92 07 03 	sts	0x0307, r1
	
}
    19c4:	cd 5b       	subi	r28, 0xBD	; 189
    19c6:	df 4f       	sbci	r29, 0xFF	; 255
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	08 95       	ret

000019da <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    19da:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    19de:	60 3f       	cpi	r22, 0xF0	; 240
    19e0:	11 f4       	brne	.+4      	; 0x19e6 <transpose_note+0xc>
    19e2:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    19e6:	29 2f       	mov	r18, r25
    19e8:	22 0f       	add	r18, r18
    19ea:	92 0f       	add	r25, r18
    19ec:	99 0f       	add	r25, r25
    19ee:	99 0f       	add	r25, r25
    19f0:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    19f2:	89 38       	cpi	r24, 0x89	; 137
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <transpose_note+0x1e>
    19f6:	88 e8       	ldi	r24, 0x88	; 136
	
}
    19f8:	08 95       	ret

000019fa <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    19fa:	80 91 7e 03 	lds	r24, 0x037E
    19fe:	98 2f       	mov	r25, r24
    1a00:	96 95       	lsr	r25
    1a02:	96 95       	lsr	r25
    1a04:	96 95       	lsr	r25
    1a06:	90 ff       	sbrs	r25, 0
    1a08:	0e c0       	rjmp	.+28     	; 0x1a26 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1a0a:	90 91 08 03 	lds	r25, 0x0308
    1a0e:	9f 5f       	subi	r25, 0xFF	; 255
    1a10:	90 93 08 03 	sts	0x0308, r25
    1a14:	95 30       	cpi	r25, 0x05	; 5
    1a16:	19 f4       	brne	.+6      	; 0x1a1e <update_octave_range+0x24>
    1a18:	94 e0       	ldi	r25, 0x04	; 4
    1a1a:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1a1e:	98 e0       	ldi	r25, 0x08	; 8
    1a20:	89 27       	eor	r24, r25
    1a22:	80 93 7e 03 	sts	0x037E, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1a26:	80 91 7f 03 	lds	r24, 0x037F
    1a2a:	98 2f       	mov	r25, r24
    1a2c:	96 95       	lsr	r25
    1a2e:	96 95       	lsr	r25
    1a30:	96 95       	lsr	r25
    1a32:	90 ff       	sbrs	r25, 0
    1a34:	0b c0       	rjmp	.+22     	; 0x1a4c <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1a36:	90 91 08 03 	lds	r25, 0x0308
    1a3a:	99 23       	and	r25, r25
    1a3c:	19 f0       	breq	.+6      	; 0x1a44 <update_octave_range+0x4a>
    1a3e:	91 50       	subi	r25, 0x01	; 1
    1a40:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1a44:	98 e0       	ldi	r25, 0x08	; 8
    1a46:	89 27       	eor	r24, r25
    1a48:	80 93 7f 03 	sts	0x037F, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1a4c:	80 91 08 03 	lds	r24, 0x0308
    1a50:	e1 e2       	ldi	r30, 0x21	; 33
    1a52:	f2 e0       	ldi	r31, 0x02	; 2
    1a54:	e8 0f       	add	r30, r24
    1a56:	f1 1d       	adc	r31, r1
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	00 80       	ld	r0, Z
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <update_octave_range+0x6a>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <update_octave_range+0x66>
    1a68:	58 2f       	mov	r21, r24
    1a6a:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1a6e:	90 91 7f 03 	lds	r25, 0x037F
    1a72:	29 2f       	mov	r18, r25
    1a74:	26 95       	lsr	r18
    1a76:	26 95       	lsr	r18
    1a78:	20 ff       	sbrs	r18, 0
    1a7a:	0e c0       	rjmp	.+28     	; 0x1a98 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1a7c:	80 91 09 03 	lds	r24, 0x0309
    1a80:	8f 5f       	subi	r24, 0xFF	; 255
    1a82:	80 93 09 03 	sts	0x0309, r24
    1a86:	85 30       	cpi	r24, 0x05	; 5
    1a88:	19 f4       	brne	.+6      	; 0x1a90 <update_octave_range+0x96>
    1a8a:	84 e0       	ldi	r24, 0x04	; 4
    1a8c:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1a90:	84 e0       	ldi	r24, 0x04	; 4
    1a92:	98 27       	eor	r25, r24
    1a94:	90 93 7f 03 	sts	0x037F, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1a98:	90 91 7f 03 	lds	r25, 0x037F
    1a9c:	29 2f       	mov	r18, r25
    1a9e:	26 95       	lsr	r18
    1aa0:	20 ff       	sbrs	r18, 0
    1aa2:	0b c0       	rjmp	.+22     	; 0x1aba <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1aa4:	80 91 09 03 	lds	r24, 0x0309
    1aa8:	88 23       	and	r24, r24
    1aaa:	19 f0       	breq	.+6      	; 0x1ab2 <update_octave_range+0xb8>
    1aac:	81 50       	subi	r24, 0x01	; 1
    1aae:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	98 27       	eor	r25, r24
    1ab6:	90 93 7f 03 	sts	0x037F, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1aba:	40 91 00 03 	lds	r20, 0x0300
    1abe:	4c 7f       	andi	r20, 0xFC	; 252
    1ac0:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1ac4:	90 91 09 03 	lds	r25, 0x0309
    1ac8:	93 30       	cpi	r25, 0x03	; 3
    1aca:	88 f0       	brcs	.+34     	; 0x1aee <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1acc:	ec e1       	ldi	r30, 0x1C	; 28
    1ace:	f2 e0       	ldi	r31, 0x02	; 2
    1ad0:	e9 0f       	add	r30, r25
    1ad2:	f1 1d       	adc	r31, r1
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	c9 01       	movw	r24, r18
    1ada:	00 80       	ld	r0, Z
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <update_octave_range+0xe8>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <update_octave_range+0xe4>
    1ae6:	84 2b       	or	r24, r20
    1ae8:	80 93 00 03 	sts	0x0300, r24
    1aec:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1aee:	ec e1       	ldi	r30, 0x1C	; 28
    1af0:	f2 e0       	ldi	r31, 0x02	; 2
    1af2:	e9 0f       	add	r30, r25
    1af4:	f1 1d       	adc	r31, r1
    1af6:	21 e0       	ldi	r18, 0x01	; 1
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	c9 01       	movw	r24, r18
    1afc:	00 80       	ld	r0, Z
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <update_octave_range+0x10a>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	0a 94       	dec	r0
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <update_octave_range+0x106>
    1b08:	85 2b       	or	r24, r21
    1b0a:	80 93 01 03 	sts	0x0301, r24
    1b0e:	08 95       	ret

00001b10 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1b10:	80 91 7f 03 	lds	r24, 0x037F
    1b14:	88 23       	and	r24, r24
    1b16:	64 f4       	brge	.+24     	; 0x1b30 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1b18:	80 58       	subi	r24, 0x80	; 128
    1b1a:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1b1e:	80 91 0a 03 	lds	r24, 0x030A
    1b22:	8f 5f       	subi	r24, 0xFF	; 255
    1b24:	80 93 0a 03 	sts	0x030A, r24
    1b28:	85 30       	cpi	r24, 0x05	; 5
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <update_lfo_shape+0x20>
    1b2c:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1b30:	e0 91 0a 03 	lds	r30, 0x030A
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	ee 0f       	add	r30, r30
    1b38:	ff 1f       	adc	r31, r31
    1b3a:	ea 5d       	subi	r30, 0xDA	; 218
    1b3c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	01 80       	ldd	r0, Z+1	; 0x01
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <update_lfo_shape+0x3a>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1b4e:	90 91 ff 02 	lds	r25, 0x02FF
    1b52:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1b54:	89 2b       	or	r24, r25
    1b56:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1b5a:	80 81       	ld	r24, Z
    1b5c:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1b5e:	ed ed       	ldi	r30, 0xDD	; 221
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	80 62       	ori	r24, 0x20	; 32
    1b66:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1b68:	80 81       	ld	r24, Z
    1b6a:	8f 7d       	andi	r24, 0xDF	; 223
    1b6c:	80 83       	st	Z, r24
	
}		
    1b6e:	08 95       	ret

00001b70 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1b70:	80 91 7f 03 	lds	r24, 0x037F
    1b74:	80 ff       	sbrs	r24, 0
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1b78:	91 e0       	ldi	r25, 0x01	; 1
    1b7a:	89 27       	eor	r24, r25
    1b7c:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1b80:	80 91 0b 03 	lds	r24, 0x030B
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	80 93 0b 03 	sts	0x030B, r24
    1b8a:	85 30       	cpi	r24, 0x05	; 5
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <update_lfo_sync+0x22>
    1b8e:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1b92:	10 92 d1 03 	sts	0x03D1, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1b96:	60 91 ff 02 	lds	r22, 0x02FF
    1b9a:	60 7f       	andi	r22, 0xF0	; 240
    1b9c:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1ba0:	20 91 0b 03 	lds	r18, 0x030B
    1ba4:	22 23       	and	r18, r18
    1ba6:	71 f0       	breq	.+28     	; 0x1bc4 <update_lfo_sync+0x54>
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	21 50       	subi	r18, 0x01	; 1
    1bac:	30 40       	sbci	r19, 0x00	; 0
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	ca 01       	movw	r24, r20
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <update_lfo_sync+0x4a>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	2a 95       	dec	r18
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <update_lfo_sync+0x46>
    1bbe:	86 2b       	or	r24, r22
    1bc0:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1bc4:	80 91 ff 02 	lds	r24, 0x02FF
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	8f 70       	andi	r24, 0x0F	; 15
    1bcc:	90 70       	andi	r25, 0x00	; 0
    1bce:	82 30       	cpi	r24, 0x02	; 2
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	89 f0       	breq	.+34     	; 0x1bf6 <update_lfo_sync+0x86>
    1bd4:	83 30       	cpi	r24, 0x03	; 3
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	24 f4       	brge	.+8      	; 0x1be2 <update_lfo_sync+0x72>
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	91 05       	cpc	r25, r1
    1bde:	b9 f4       	brne	.+46     	; 0x1c0e <update_lfo_sync+0x9e>
    1be0:	07 c0       	rjmp	.+14     	; 0x1bf0 <update_lfo_sync+0x80>
    1be2:	84 30       	cpi	r24, 0x04	; 4
    1be4:	91 05       	cpc	r25, r1
    1be6:	59 f0       	breq	.+22     	; 0x1bfe <update_lfo_sync+0x8e>
    1be8:	88 30       	cpi	r24, 0x08	; 8
    1bea:	91 05       	cpc	r25, r1
    1bec:	81 f4       	brne	.+32     	; 0x1c0e <update_lfo_sync+0x9e>
    1bee:	0b c0       	rjmp	.+22     	; 0x1c06 <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1bf0:	10 92 d0 03 	sts	0x03D0, r1
			
			break;
    1bf4:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			midi_clock.divider = 24; //1:4
    1bf6:	88 e1       	ldi	r24, 0x18	; 24
    1bf8:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1bfc:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1bfe:	8c e0       	ldi	r24, 0x0C	; 12
    1c00:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1c04:	08 95       	ret
			
		case 0b1000:
			midi_clock.divider = 6; //1:16	 		
    1c06:	86 e0       	ldi	r24, 0x06	; 6
    1c08:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1c0c:	08 95       	ret
		
		default:
			midi_clock.divider = 0; //need to turn midi sync off here. How?
    1c0e:	10 92 d0 03 	sts	0x03D0, r1
    1c12:	08 95       	ret

00001c14 <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1c14:	80 91 7f 03 	lds	r24, 0x037F
    1c18:	98 2f       	mov	r25, r24
    1c1a:	92 95       	swap	r25
    1c1c:	96 95       	lsr	r25
    1c1e:	96 95       	lsr	r25
    1c20:	93 70       	andi	r25, 0x03	; 3
    1c22:	90 ff       	sbrs	r25, 0
    1c24:	0f c0       	rjmp	.+30     	; 0x1c44 <update_arp_sync+0x30>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1c26:	90 e4       	ldi	r25, 0x40	; 64
    1c28:	89 27       	eor	r24, r25
    1c2a:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1c2e:	80 91 0c 03 	lds	r24, 0x030C
    1c32:	8f 5f       	subi	r24, 0xFF	; 255
    1c34:	80 93 0c 03 	sts	0x030C, r24
    1c38:	85 30       	cpi	r24, 0x05	; 5
    1c3a:	11 f4       	brne	.+4      	; 0x1c40 <update_arp_sync+0x2c>
    1c3c:	10 92 0c 03 	sts	0x030C, r1
		system_clock.ppqn_counter = 0; //reset counter
    1c40:	10 92 cb 03 	sts	0x03CB, r1
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1c44:	60 91 00 03 	lds	r22, 0x0300
    1c48:	63 7c       	andi	r22, 0xC3	; 195
    1c4a:	60 93 00 03 	sts	0x0300, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1c4e:	20 91 0c 03 	lds	r18, 0x030C
    1c52:	22 23       	and	r18, r18
    1c54:	71 f0       	breq	.+28     	; 0x1c72 <update_arp_sync+0x5e>
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	2f 5f       	subi	r18, 0xFF	; 255
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
    1c60:	ca 01       	movw	r24, r20
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <update_arp_sync+0x54>
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	2a 95       	dec	r18
    1c6a:	e2 f7       	brpl	.-8      	; 0x1c64 <update_arp_sync+0x50>
    1c6c:	86 2b       	or	r24, r22
    1c6e:	80 93 00 03 	sts	0x0300, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1c72:	80 91 00 03 	lds	r24, 0x0300
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	8c 73       	andi	r24, 0x3C	; 60
    1c7a:	90 70       	andi	r25, 0x00	; 0
    1c7c:	88 30       	cpi	r24, 0x08	; 8
    1c7e:	91 05       	cpc	r25, r1
    1c80:	91 f0       	breq	.+36     	; 0x1ca6 <update_arp_sync+0x92>
    1c82:	89 30       	cpi	r24, 0x09	; 9
    1c84:	91 05       	cpc	r25, r1
    1c86:	24 f4       	brge	.+8      	; 0x1c90 <update_arp_sync+0x7c>
    1c88:	84 30       	cpi	r24, 0x04	; 4
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	c1 f4       	brne	.+48     	; 0x1cbe <update_arp_sync+0xaa>
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <update_arp_sync+0x8a>
    1c90:	80 31       	cpi	r24, 0x10	; 16
    1c92:	91 05       	cpc	r25, r1
    1c94:	61 f0       	breq	.+24     	; 0x1cae <update_arp_sync+0x9a>
    1c96:	80 32       	cpi	r24, 0x20	; 32
    1c98:	91 05       	cpc	r25, r1
    1c9a:	89 f4       	brne	.+34     	; 0x1cbe <update_arp_sync+0xaa>
    1c9c:	0c c0       	rjmp	.+24     	; 0x1cb6 <update_arp_sync+0xa2>
			
		case 0b00000100:
			system_clock.divider = 48; //1:2
    1c9e:	80 e3       	ldi	r24, 0x30	; 48
    1ca0:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1ca4:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = 24; //1:4
    1ca6:	88 e1       	ldi	r24, 0x18	; 24
    1ca8:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1cac:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = 12; //1:8
    1cae:	8c e0       	ldi	r24, 0x0C	; 12
    1cb0:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1cb4:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = 6; //1:16	
    1cb6:	86 e0       	ldi	r24, 0x06	; 6
    1cb8:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1cbc:	08 95       	ret
			
		default:
			system_clock.divider = 2; //should be 1 but this never turns arp_sync_led off - need to fix this	
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	80 93 ca 03 	sts	0x03CA, r24
    1cc4:	08 95       	ret

00001cc6 <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1cc6:	80 91 7f 03 	lds	r24, 0x037F
    1cca:	80 31       	cpi	r24, 0x10	; 16
    1ccc:	69 f4       	brne	.+26     	; 0x1ce8 <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1cce:	10 92 7f 03 	sts	0x037F, r1
		
		if (++arp_range == 4) arp_range = 0;
    1cd2:	80 91 0d 03 	lds	r24, 0x030D
    1cd6:	8f 5f       	subi	r24, 0xFF	; 255
    1cd8:	80 93 0d 03 	sts	0x030D, r24
    1cdc:	84 30       	cpi	r24, 0x04	; 4
    1cde:	11 f4       	brne	.+4      	; 0x1ce4 <update_arp_range+0x1e>
    1ce0:	10 92 0d 03 	sts	0x030D, r1
		arp.step_position = 0; //reset step position if range changes
    1ce4:	10 92 86 03 	sts	0x0386, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1ce8:	80 91 fe 02 	lds	r24, 0x02FE
    1cec:	8d 7f       	andi	r24, 0xFD	; 253
    1cee:	80 93 fe 02 	sts	0x02FE, r24
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1cf2:	80 91 00 03 	lds	r24, 0x0300
    1cf6:	8f 73       	andi	r24, 0x3F	; 63
    1cf8:	80 93 00 03 	sts	0x0300, r24
	
	arp.range = arp_range;
    1cfc:	80 91 0d 03 	lds	r24, 0x030D
    1d00:	80 93 84 03 	sts	0x0384, r24
	
	update_arp_sequence(); //update sequence with new settings
    1d04:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1d08:	80 91 0d 03 	lds	r24, 0x030D
    1d0c:	82 30       	cpi	r24, 0x02	; 2
    1d0e:	51 f0       	breq	.+20     	; 0x1d24 <update_arp_range+0x5e>
    1d10:	83 30       	cpi	r24, 0x03	; 3
    1d12:	71 f0       	breq	.+28     	; 0x1d30 <update_arp_range+0x6a>
    1d14:	81 30       	cpi	r24, 0x01	; 1
    1d16:	89 f4       	brne	.+34     	; 0x1d3a <update_arp_range+0x74>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1d18:	80 91 fe 02 	lds	r24, 0x02FE
    1d1c:	82 60       	ori	r24, 0x02	; 2
    1d1e:	80 93 fe 02 	sts	0x02FE, r24
			break;
    1d22:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1d24:	80 91 00 03 	lds	r24, 0x0300
    1d28:	80 64       	ori	r24, 0x40	; 64
    1d2a:	80 93 00 03 	sts	0x0300, r24
			break;
    1d2e:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1d30:	80 91 00 03 	lds	r24, 0x0300
    1d34:	80 68       	ori	r24, 0x80	; 128
    1d36:	80 93 00 03 	sts	0x0300, r24
    1d3a:	08 95       	ret

00001d3c <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1d3c:	80 91 7f 03 	lds	r24, 0x037F
    1d40:	98 2f       	mov	r25, r24
    1d42:	92 95       	swap	r25
    1d44:	96 95       	lsr	r25
    1d46:	97 70       	andi	r25, 0x07	; 7
    1d48:	90 ff       	sbrs	r25, 0
    1d4a:	0f c0       	rjmp	.+30     	; 0x1d6a <update_arp_mode+0x2e>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1d4c:	90 e2       	ldi	r25, 0x20	; 32
    1d4e:	89 27       	eor	r24, r25
    1d50:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_mode == 5) arp_mode = 0;
    1d54:	80 91 0e 03 	lds	r24, 0x030E
    1d58:	8f 5f       	subi	r24, 0xFF	; 255
    1d5a:	80 93 0e 03 	sts	0x030E, r24
    1d5e:	85 30       	cpi	r24, 0x05	; 5
    1d60:	11 f4       	brne	.+4      	; 0x1d66 <update_arp_mode+0x2a>
    1d62:	10 92 0e 03 	sts	0x030E, r1
		arp.step_position = 0; //reset step position if mode changes
    1d66:	10 92 86 03 	sts	0x0386, r1
		
	}

	arp.clock_source = INTERNAL_CLOCK;	
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	80 93 88 03 	sts	0x0388, r24

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1d70:	90 91 fe 02 	lds	r25, 0x02FE
    1d74:	93 7c       	andi	r25, 0xC3	; 195
    1d76:	90 93 fe 02 	sts	0x02FE, r25
	
	switch(arp_mode) {
    1d7a:	80 91 0e 03 	lds	r24, 0x030E
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	81 f0       	breq	.+32     	; 0x1da2 <update_arp_mode+0x66>
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	28 f0       	brcs	.+10     	; 0x1d90 <update_arp_mode+0x54>
    1d86:	82 30       	cpi	r24, 0x02	; 2
    1d88:	91 f0       	breq	.+36     	; 0x1dae <update_arp_mode+0x72>
    1d8a:	83 30       	cpi	r24, 0x03	; 3
    1d8c:	f1 f4       	brne	.+60     	; 0x1dca <update_arp_mode+0x8e>
    1d8e:	16 c0       	rjmp	.+44     	; 0x1dbc <update_arp_mode+0x80>
		
		case 0:
		
			//turn arp off
			arp.clock_source = OFF;
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	80 93 88 03 	sts	0x0388, r24
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    1d96:	80 91 b0 02 	lds	r24, 0x02B0
    1d9a:	88 23       	and	r24, r24
    1d9c:	e1 f4       	brne	.+56     	; 0x1dd6 <update_arp_mode+0x9a>
    1d9e:	89 98       	cbi	0x11, 1	; 17
    1da0:	1a c0       	rjmp	.+52     	; 0x1dd6 <update_arp_mode+0x9a>
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1da2:	94 62       	ori	r25, 0x24	; 36
    1da4:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP;
    1da8:	10 92 89 03 	sts	0x0389, r1
			break;	
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <update_arp_mode+0x9a>
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1dae:	94 61       	ori	r25, 0x14	; 20
    1db0:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = DOWN;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	80 93 89 03 	sts	0x0389, r24
			break;
    1dba:	0d c0       	rjmp	.+26     	; 0x1dd6 <update_arp_mode+0x9a>
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1dbc:	94 63       	ori	r25, 0x34	; 52
    1dbe:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP_DOWN;
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	80 93 89 03 	sts	0x0389, r24
			break;
    1dc8:	06 c0       	rjmp	.+12     	; 0x1dd6 <update_arp_mode+0x9a>
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1dca:	9c 60       	ori	r25, 0x0C	; 12
    1dcc:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = RANDOM;
    1dd0:	84 e0       	ldi	r24, 0x04	; 4
    1dd2:	80 93 89 03 	sts	0x0389, r24
			
					
		
	}
	
	update_arp_sequence(); //update arp sequence with new mode
    1dd6:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	



}
    1dda:	08 95       	ret

00001ddc <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ddc:	90 91 7e 03 	lds	r25, 0x037E
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1de0:	80 91 80 03 	lds	r24, 0x0380
    1de4:	86 95       	lsr	r24
    1de6:	86 95       	lsr	r24
    1de8:	68 2f       	mov	r22, r24
    1dea:	67 95       	ror	r22
    1dec:	66 27       	eor	r22, r22
    1dee:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1df0:	29 2f       	mov	r18, r25
    1df2:	21 70       	andi	r18, 0x01	; 1
    1df4:	26 2b       	or	r18, r22
    1df6:	69 2f       	mov	r22, r25
    1df8:	66 1f       	adc	r22, r22
    1dfa:	66 27       	eor	r22, r22
    1dfc:	66 1f       	adc	r22, r22
    1dfe:	66 0f       	add	r22, r22
    1e00:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1e02:	29 2f       	mov	r18, r25
    1e04:	26 95       	lsr	r18
    1e06:	26 95       	lsr	r18
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	21 70       	andi	r18, 0x01	; 1
    1e0c:	30 70       	andi	r19, 0x00	; 0
    1e0e:	d9 01       	movw	r26, r18
    1e10:	aa 0f       	add	r26, r26
    1e12:	bb 1f       	adc	r27, r27
    1e14:	aa 0f       	add	r26, r26
    1e16:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e18:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1e1a:	a9 2f       	mov	r26, r25
    1e1c:	a6 95       	lsr	r26
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	a1 70       	andi	r26, 0x01	; 1
    1e22:	b0 70       	andi	r27, 0x00	; 0
    1e24:	fd 01       	movw	r30, r26
    1e26:	ee 0f       	add	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	ee 0f       	add	r30, r30
    1e2c:	ff 1f       	adc	r31, r31
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e32:	a6 2f       	mov	r26, r22
    1e34:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1e36:	e9 2f       	mov	r30, r25
    1e38:	e2 95       	swap	r30
    1e3a:	ef 70       	andi	r30, 0x0F	; 15
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	e1 70       	andi	r30, 0x01	; 1
    1e40:	f0 70       	andi	r31, 0x00	; 0
    1e42:	bf 01       	movw	r22, r30
    1e44:	62 95       	swap	r22
    1e46:	72 95       	swap	r23
    1e48:	70 7f       	andi	r23, 0xF0	; 240
    1e4a:	76 27       	eor	r23, r22
    1e4c:	60 7f       	andi	r22, 0xF0	; 240
    1e4e:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e50:	ea 2f       	mov	r30, r26
    1e52:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1e54:	69 2f       	mov	r22, r25
    1e56:	62 95       	swap	r22
    1e58:	66 95       	lsr	r22
    1e5a:	67 70       	andi	r22, 0x07	; 7
    1e5c:	70 e0       	ldi	r23, 0x00	; 0
    1e5e:	61 70       	andi	r22, 0x01	; 1
    1e60:	70 70       	andi	r23, 0x00	; 0
    1e62:	ab 01       	movw	r20, r22
    1e64:	44 0f       	add	r20, r20
    1e66:	55 1f       	adc	r21, r21
    1e68:	42 95       	swap	r20
    1e6a:	52 95       	swap	r21
    1e6c:	50 7f       	andi	r21, 0xF0	; 240
    1e6e:	54 27       	eor	r21, r20
    1e70:	40 7f       	andi	r20, 0xF0	; 240
    1e72:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e74:	6e 2f       	mov	r22, r30
    1e76:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1e78:	49 2f       	mov	r20, r25
    1e7a:	42 95       	swap	r20
    1e7c:	46 95       	lsr	r20
    1e7e:	46 95       	lsr	r20
    1e80:	43 70       	andi	r20, 0x03	; 3
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	41 70       	andi	r20, 0x01	; 1
    1e86:	50 70       	andi	r21, 0x00	; 0
    1e88:	9a 01       	movw	r18, r20
    1e8a:	00 24       	eor	r0, r0
    1e8c:	36 95       	lsr	r19
    1e8e:	27 95       	ror	r18
    1e90:	07 94       	ror	r0
    1e92:	36 95       	lsr	r19
    1e94:	27 95       	ror	r18
    1e96:	07 94       	ror	r0
    1e98:	32 2f       	mov	r19, r18
    1e9a:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e9c:	26 2b       	or	r18, r22
    1e9e:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1ea2:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1ea4:	81 95       	neg	r24
    1ea6:	89 27       	eor	r24, r25
    1ea8:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1eaa:	89 27       	eor	r24, r25
    1eac:	0e 94 57 16 	call	0x2cae	; 0x2cae <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1eb0:	ed ed       	ldi	r30, 0xDD	; 221
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1eb6:	90 91 80 03 	lds	r25, 0x0380
    1eba:	96 95       	lsr	r25
    1ebc:	96 95       	lsr	r25
    1ebe:	96 95       	lsr	r25
    1ec0:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1ec2:	91 95       	neg	r25
    1ec4:	80 81       	ld	r24, Z
    1ec6:	89 27       	eor	r24, r25
    1ec8:	80 71       	andi	r24, 0x10	; 16
    1eca:	82 27       	eor	r24, r18
    1ecc:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1ece:	ee ef       	ldi	r30, 0xFE	; 254
    1ed0:	f2 e0       	ldi	r31, 0x02	; 2
    1ed2:	80 81       	ld	r24, Z
    1ed4:	98 27       	eor	r25, r24
    1ed6:	91 70       	andi	r25, 0x01	; 1
    1ed8:	89 27       	eor	r24, r25
    1eda:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1edc:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1ee0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1ee4:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    1ee8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <update_arp_sync>
	update_arp_range();
    1eec:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <update_arp_range>
	update_arp_mode();
    1ef0:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    1ef4:	08 95       	ret

00001ef6 <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1efa:	90 91 07 03 	lds	r25, 0x0307
    1efe:	95 30       	cpi	r25, 0x05	; 5
    1f00:	01 f5       	brne	.+64     	; 0x1f42 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1f02:	87 e0       	ldi	r24, 0x07	; 7
    1f04:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f06:	cd ed       	ldi	r28, 0xDD	; 221
    1f08:	d0 e0       	ldi	r29, 0x00	; 0
    1f0a:	88 81       	ld	r24, Y
    1f0c:	80 62       	ori	r24, 0x20	; 32
    1f0e:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f10:	88 81       	ld	r24, Y
    1f12:	8f 7d       	andi	r24, 0xDF	; 223
    1f14:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f16:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1f18:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1f1c:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f1e:	88 81       	ld	r24, Y
    1f20:	80 62       	ori	r24, 0x20	; 32
    1f22:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f24:	88 81       	ld	r24, Y
    1f26:	8f 7d       	andi	r24, 0xDF	; 223
    1f28:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f2a:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1f2c:	80 91 ff 02 	lds	r24, 0x02FF
    1f30:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1f32:	80 68       	ori	r24, 0x80	; 128
    1f34:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1f38:	0e 94 91 01 	call	0x322	; 0x322 <setup_system_clock>

		current_patch.mode = MEMORY;
    1f3c:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1f40:	63 c0       	rjmp	.+198    	; 0x2008 <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1f42:	80 91 80 03 	lds	r24, 0x0380
    1f46:	28 2f       	mov	r18, r24
    1f48:	22 95       	swap	r18
    1f4a:	26 95       	lsr	r18
    1f4c:	26 95       	lsr	r18
    1f4e:	23 70       	andi	r18, 0x03	; 3
    1f50:	20 ff       	sbrs	r18, 0
    1f52:	15 c0       	rjmp	.+42     	; 0x1f7e <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1f54:	20 e4       	ldi	r18, 0x40	; 64
    1f56:	82 27       	eor	r24, r18
    1f58:	80 93 80 03 	sts	0x0380, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1f5c:	80 91 03 03 	lds	r24, 0x0303
    1f60:	8f 5f       	subi	r24, 0xFF	; 255
    1f62:	80 93 03 03 	sts	0x0303, r24
    1f66:	85 32       	cpi	r24, 0x25	; 37
    1f68:	21 f4       	brne	.+8      	; 0x1f72 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1f6a:	84 e2       	ldi	r24, 0x24	; 36
    1f6c:	80 93 03 03 	sts	0x0303, r24
    1f70:	06 c0       	rjmp	.+12     	; 0x1f7e <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1f72:	93 30       	cpi	r25, 0x03	; 3
    1f74:	21 f0       	breq	.+8      	; 0x1f7e <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1f76:	0e 94 0d 0a 	call	0x141a	; 0x141a <load_patch>
			update_patch();
    1f7a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1f7e:	80 91 80 03 	lds	r24, 0x0380
    1f82:	98 2f       	mov	r25, r24
    1f84:	92 95       	swap	r25
    1f86:	96 95       	lsr	r25
    1f88:	97 70       	andi	r25, 0x07	; 7
    1f8a:	90 ff       	sbrs	r25, 0
    1f8c:	15 c0       	rjmp	.+42     	; 0x1fb8 <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1f8e:	90 e2       	ldi	r25, 0x20	; 32
    1f90:	89 27       	eor	r24, r25
    1f92:	80 93 80 03 	sts	0x0380, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1f96:	80 91 03 03 	lds	r24, 0x0303
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	19 f0       	breq	.+6      	; 0x1fa4 <update_patch_programmer+0xae>
    1f9e:	81 50       	subi	r24, 0x01	; 1
    1fa0:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1fa4:	80 91 07 03 	lds	r24, 0x0307
    1fa8:	83 30       	cpi	r24, 0x03	; 3
    1faa:	31 f0       	breq	.+12     	; 0x1fb8 <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    1fac:	80 91 03 03 	lds	r24, 0x0303
    1fb0:	0e 94 0d 0a 	call	0x141a	; 0x141a <load_patch>
			update_patch();
    1fb4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1fb8:	80 91 80 03 	lds	r24, 0x0380
    1fbc:	98 2f       	mov	r25, r24
    1fbe:	92 95       	swap	r25
    1fc0:	9f 70       	andi	r25, 0x0F	; 15
    1fc2:	90 ff       	sbrs	r25, 0
    1fc4:	15 c0       	rjmp	.+42     	; 0x1ff0 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1fc6:	90 e1       	ldi	r25, 0x10	; 16
    1fc8:	89 27       	eor	r24, r25
    1fca:	80 93 80 03 	sts	0x0380, r24
		if (current_patch.mode != WRITE) {
    1fce:	90 91 07 03 	lds	r25, 0x0307
    1fd2:	93 30       	cpi	r25, 0x03	; 3
    1fd4:	49 f0       	breq	.+18     	; 0x1fe8 <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1fd6:	8f 77       	andi	r24, 0x7F	; 127
    1fd8:	80 93 80 03 	sts	0x0380, r24
			current_patch.mode = WRITE;
    1fdc:	83 e0       	ldi	r24, 0x03	; 3
    1fde:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1fe2:	0e 94 ef 07 	call	0xfde	; 0xfde <lock_pots>
    1fe6:	04 c0       	rjmp	.+8      	; 0x1ff0 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1fe8:	80 91 03 03 	lds	r24, 0x0303
    1fec:	0e 94 1a 08 	call	0x1034	; 0x1034 <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1ff0:	80 91 80 03 	lds	r24, 0x0380
    1ff4:	88 23       	and	r24, r24
    1ff6:	44 f4       	brge	.+16     	; 0x2008 <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1ff8:	80 68       	ori	r24, 0x80	; 128
    1ffa:	80 93 80 03 	sts	0x0380, r24
		current_patch.mode = MANUAL;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    2004:	0e 94 09 08 	call	0x1012	; 0x1012 <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	08 95       	ret

0000200e <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    200e:	88 ed       	ldi	r24, 0xD8	; 216
    2010:	91 e0       	ldi	r25, 0x01	; 1
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    201a:	81 ee       	ldi	r24, 0xE1	; 225
    201c:	91 e0       	ldi	r25, 0x01	; 1
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2026:	82 ee       	ldi	r24, 0xE2	; 226
    2028:	91 e0       	ldi	r25, 0x01	; 1
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	70 e0       	ldi	r23, 0x00	; 0
    202e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2032:	83 eb       	ldi	r24, 0xB3	; 179
    2034:	92 e0       	ldi	r25, 0x02	; 2
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	70 e0       	ldi	r23, 0x00	; 0
    203a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    203e:	8a ed       	ldi	r24, 0xDA	; 218
    2040:	91 e0       	ldi	r25, 0x01	; 1
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    204a:	8f ed       	ldi	r24, 0xDF	; 223
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2056:	80 ee       	ldi	r24, 0xE0	; 224
    2058:	91 e0       	ldi	r25, 0x01	; 1
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2062:	81 ed       	ldi	r24, 0xD1	; 209
    2064:	91 e0       	ldi	r25, 0x01	; 1
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    206e:	86 ed       	ldi	r24, 0xD6	; 214
    2070:	91 e0       	ldi	r25, 0x01	; 1
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    207a:	82 ed       	ldi	r24, 0xD2	; 210
    207c:	91 e0       	ldi	r25, 0x01	; 1
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2086:	83 ed       	ldi	r24, 0xD3	; 211
    2088:	91 e0       	ldi	r25, 0x01	; 1
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    2092:	84 ed       	ldi	r24, 0xD4	; 212
    2094:	91 e0       	ldi	r25, 0x01	; 1
    2096:	6f ef       	ldi	r22, 0xFF	; 255
    2098:	7f e3       	ldi	r23, 0x3F	; 63
    209a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    209e:	85 ed       	ldi	r24, 0xD5	; 213
    20a0:	91 e0       	ldi	r25, 0x01	; 1
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    20aa:	89 ed       	ldi	r24, 0xD9	; 217
    20ac:	91 e0       	ldi	r25, 0x01	; 1
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    20b6:	8e ec       	ldi	r24, 0xCE	; 206
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    20c2:	8c ec       	ldi	r24, 0xCC	; 204
    20c4:	91 e0       	ldi	r25, 0x01	; 1
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    20ce:	8a ec       	ldi	r24, 0xCA	; 202
    20d0:	91 e0       	ldi	r25, 0x01	; 1
    20d2:	6f ef       	ldi	r22, 0xFF	; 255
    20d4:	7f e3       	ldi	r23, 0x3F	; 63
    20d6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    20da:	88 ec       	ldi	r24, 0xC8	; 200
    20dc:	91 e0       	ldi	r25, 0x01	; 1
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    20e6:	80 ed       	ldi	r24, 0xD0	; 208
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	70 e0       	ldi	r23, 0x00	; 0
    20ee:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    20f2:	83 ee       	ldi	r24, 0xE3	; 227
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    20fe:	84 ee       	ldi	r24, 0xE4	; 228
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	70 e0       	ldi	r23, 0x00	; 0
    2106:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
}	
    210a:	08 95       	ret

0000210c <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    210c:	2f 92       	push	r2
    210e:	3f 92       	push	r3
    2110:	4f 92       	push	r4
    2112:	5f 92       	push	r5
    2114:	6f 92       	push	r6
    2116:	7f 92       	push	r7
    2118:	8f 92       	push	r8
    211a:	9f 92       	push	r9
    211c:	af 92       	push	r10
    211e:	bf 92       	push	r11
    2120:	cf 92       	push	r12
    2122:	df 92       	push	r13
    2124:	ef 92       	push	r14
    2126:	ff 92       	push	r15
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	2c 97       	sbiw	r28, 0x0c	; 12
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	08 2f       	mov	r16, r24
    2142:	78 87       	std	Y+8, r23	; 0x08
    2144:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    2146:	80 91 7b 03 	lds	r24, 0x037B
    214a:	83 60       	ori	r24, 0x03	; 3
    214c:	80 93 7b 03 	sts	0x037B, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    2150:	0e 94 07 10 	call	0x200e	; 0x200e <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    2154:	10 92 7a 03 	sts	0x037A, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    2158:	0f 30       	cpi	r16, 0x0F	; 15
    215a:	e1 f4       	brne	.+56     	; 0x2194 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    215c:	0f 2e       	mov	r0, r31
    215e:	f6 ee       	ldi	r31, 0xE6	; 230
    2160:	4f 2e       	mov	r4, r31
    2162:	f1 e0       	ldi	r31, 0x01	; 1
    2164:	5f 2e       	mov	r5, r31
    2166:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    2168:	0f 2e       	mov	r0, r31
    216a:	fe ed       	ldi	r31, 0xDE	; 222
    216c:	2f 2e       	mov	r2, r31
    216e:	f1 e0       	ldi	r31, 0x01	; 1
    2170:	3f 2e       	mov	r3, r31
    2172:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    2174:	23 ee       	ldi	r18, 0xE3	; 227
    2176:	31 e0       	ldi	r19, 0x01	; 1
    2178:	3a 83       	std	Y+2, r19	; 0x02
    217a:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    217c:	0f 2e       	mov	r0, r31
    217e:	fc ed       	ldi	r31, 0xDC	; 220
    2180:	8f 2e       	mov	r8, r31
    2182:	f1 e0       	ldi	r31, 0x01	; 1
    2184:	9f 2e       	mov	r9, r31
    2186:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    2188:	82 e7       	ldi	r24, 0x72	; 114
    218a:	96 e0       	ldi	r25, 0x06	; 6
    218c:	9a 87       	std	Y+10, r25	; 0x0a
    218e:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	1b c0       	rjmp	.+54     	; 0x21ca <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2194:	0f 2e       	mov	r0, r31
    2196:	f5 ee       	ldi	r31, 0xE5	; 229
    2198:	4f 2e       	mov	r4, r31
    219a:	f1 e0       	ldi	r31, 0x01	; 1
    219c:	5f 2e       	mov	r5, r31
    219e:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    21a0:	0f 2e       	mov	r0, r31
    21a2:	f7 ed       	ldi	r31, 0xD7	; 215
    21a4:	2f 2e       	mov	r2, r31
    21a6:	f1 e0       	ldi	r31, 0x01	; 1
    21a8:	3f 2e       	mov	r3, r31
    21aa:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    21ac:	e4 ee       	ldi	r30, 0xE4	; 228
    21ae:	f1 e0       	ldi	r31, 0x01	; 1
    21b0:	fa 83       	std	Y+2, r31	; 0x02
    21b2:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    21b4:	0f 2e       	mov	r0, r31
    21b6:	fd ed       	ldi	r31, 0xDD	; 221
    21b8:	8f 2e       	mov	r8, r31
    21ba:	f1 e0       	ldi	r31, 0x01	; 1
    21bc:	9f 2e       	mov	r9, r31
    21be:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    21c0:	20 e7       	ldi	r18, 0x70	; 112
    21c2:	36 e0       	ldi	r19, 0x06	; 6
    21c4:	3a 87       	std	Y+10, r19	; 0x0a
    21c6:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    21c8:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    21ca:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    21cc:	ed ed       	ldi	r30, 0xDD	; 221
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	80 64       	ori	r24, 0x40	; 64
    21d4:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    21d6:	80 81       	ld	r24, Z
    21d8:	8f 7b       	andi	r24, 0xBF	; 191
    21da:	80 83       	st	Z, r24
	DATA_BUS = 0;
    21dc:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    21de:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    21e0:	84 b5       	in	r24, 0x24	; 36
    21e2:	8f 60       	ori	r24, 0x0F	; 15
    21e4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    21ea:	ee e6       	ldi	r30, 0x6E	; 110
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	90 81       	ld	r25, Z
    21f0:	92 60       	ori	r25, 0x02	; 2
    21f2:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    21f4:	80 93 7c 03 	sts	0x037C, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    21f8:	8d e0       	ldi	r24, 0x0D	; 13
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9c 83       	std	Y+4, r25	; 0x04
    21fe:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    2200:	80 2f       	mov	r24, r16
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	8c 01       	movw	r16, r24
    2206:	0f 5f       	subi	r16, 0xFF	; 255
    2208:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    220a:	0f 2e       	mov	r0, r31
    220c:	f8 ed       	ldi	r31, 0xD8	; 216
    220e:	ef 2e       	mov	r14, r31
    2210:	f1 e0       	ldi	r31, 0x01	; 1
    2212:	ff 2e       	mov	r15, r31
    2214:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    2216:	0f 2e       	mov	r0, r31
    2218:	f4 ed       	ldi	r31, 0xD4	; 212
    221a:	cf 2e       	mov	r12, r31
    221c:	f1 e0       	ldi	r31, 0x01	; 1
    221e:	df 2e       	mov	r13, r31
    2220:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    2222:	0f 2e       	mov	r0, r31
    2224:	fa ec       	ldi	r31, 0xCA	; 202
    2226:	af 2e       	mov	r10, r31
    2228:	f1 e0       	ldi	r31, 0x01	; 1
    222a:	bf 2e       	mov	r11, r31
    222c:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    222e:	0f 2e       	mov	r0, r31
    2230:	fb ec       	ldi	r31, 0xCB	; 203
    2232:	6f 2e       	mov	r6, r31
    2234:	f1 e0       	ldi	r31, 0x01	; 1
    2236:	7f 2e       	mov	r7, r31
    2238:	f0 2d       	mov	r31, r0
    223a:	e0 e0       	ldi	r30, 0x00	; 0
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	fc 87       	std	Y+12, r31	; 0x0c
    2240:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    2242:	21 e0       	ldi	r18, 0x01	; 1
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	0b 80       	ldd	r0, Y+3	; 0x03
    2248:	02 c0       	rjmp	.+4      	; 0x224e <set_vco_init_cv+0x142>
    224a:	22 0f       	add	r18, r18
    224c:	33 1f       	adc	r19, r19
    224e:	0a 94       	dec	r0
    2250:	e2 f7       	brpl	.-8      	; 0x224a <set_vco_init_cv+0x13e>
    2252:	3e 83       	std	Y+6, r19	; 0x06
    2254:	2d 83       	std	Y+5, r18	; 0x05
    2256:	8b 85       	ldd	r24, Y+11	; 0x0b
    2258:	9c 85       	ldd	r25, Y+12	; 0x0c
    225a:	82 2b       	or	r24, r18
    225c:	93 2b       	or	r25, r19
    225e:	9c 87       	std	Y+12, r25	; 0x0c
    2260:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    2262:	c4 01       	movw	r24, r8
    2264:	6b 85       	ldd	r22, Y+11	; 0x0b
    2266:	7c 85       	ldd	r23, Y+12	; 0x0c
    2268:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
		
		
		count_finished = FALSE;
    226c:	10 92 7a 03 	sts	0x037A, r1
		period_counter = 0;
    2270:	10 92 7d 03 	sts	0x037D, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    2274:	8f e0       	ldi	r24, 0x0F	; 15
    2276:	e8 e1       	ldi	r30, 0x18	; 24
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	a8 95       	wdr
    2280:	e0 93 60 00 	sts	0x0060, r30
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    228a:	80 91 7a 03 	lds	r24, 0x037A
    228e:	88 23       	and	r24, r24
    2290:	89 f5       	brne	.+98     	; 0x22f4 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    2292:	c8 01       	movw	r24, r16
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	0e 94 dd 02 	call	0x5ba	; 0x5ba <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    229a:	c4 01       	movw	r24, r8
    229c:	6b 85       	ldd	r22, Y+11	; 0x0b
    229e:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a0:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    22a4:	c1 01       	movw	r24, r2
    22a6:	6f ef       	ldi	r22, 0xFF	; 255
    22a8:	7f e3       	ldi	r23, 0x3F	; 63
    22aa:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    22ae:	c7 01       	movw	r24, r14
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    22b8:	c6 01       	movw	r24, r12
    22ba:	6f ef       	ldi	r22, 0xFF	; 255
    22bc:	7f e3       	ldi	r23, 0x3F	; 63
    22be:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    22c2:	c5 01       	movw	r24, r10
    22c4:	6f ef       	ldi	r22, 0xFF	; 255
    22c6:	7f e3       	ldi	r23, 0x3F	; 63
    22c8:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    22cc:	c3 01       	movw	r24, r6
    22ce:	6f ef       	ldi	r22, 0xFF	; 255
    22d0:	7f e3       	ldi	r23, 0x3F	; 63
    22d2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	6f ef       	ldi	r22, 0xFF	; 255
    22dc:	7f e3       	ldi	r23, 0x3F	; 63
    22de:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    22e2:	c2 01       	movw	r24, r4
    22e4:	60 e0       	ldi	r22, 0x00	; 0
    22e6:	70 e0       	ldi	r23, 0x00	; 0
    22e8:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    22ec:	80 91 7a 03 	lds	r24, 0x037A
    22f0:	88 23       	and	r24, r24
    22f2:	79 f2       	breq	.-98     	; 0x2292 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    22f4:	88 e1       	ldi	r24, 0x18	; 24
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	80 93 60 00 	sts	0x0060, r24
    22fe:	10 92 60 00 	sts	0x0060, r1
    2302:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    2304:	80 91 78 03 	lds	r24, 0x0378
    2308:	90 91 79 03 	lds	r25, 0x0379
    230c:	ef 81       	ldd	r30, Y+7	; 0x07
    230e:	f8 85       	ldd	r31, Y+8	; 0x08
    2310:	e8 17       	cp	r30, r24
    2312:	f9 07       	cpc	r31, r25
    2314:	20 f0       	brcs	.+8      	; 0x231e <set_vco_init_cv+0x212>
    2316:	80 91 af 02 	lds	r24, 0x02AF
    231a:	88 23       	and	r24, r24
    231c:	51 f4       	brne	.+20     	; 0x2332 <set_vco_init_cv+0x226>
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	80 95       	com	r24
    2324:	90 95       	com	r25
    2326:	2b 85       	ldd	r18, Y+11	; 0x0b
    2328:	3c 85       	ldd	r19, Y+12	; 0x0c
    232a:	28 23       	and	r18, r24
    232c:	39 23       	and	r19, r25
    232e:	3c 87       	std	Y+12, r19	; 0x0c
    2330:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	9c 83       	std	Y+4, r25	; 0x04
    2340:	8b 83       	std	Y+3, r24	; 0x03
    2342:	ef ef       	ldi	r30, 0xFF	; 255
    2344:	8f 3f       	cpi	r24, 0xFF	; 255
    2346:	9e 07       	cpc	r25, r30
    2348:	09 f0       	breq	.+2      	; 0x234c <set_vco_init_cv+0x240>
    234a:	7b cf       	rjmp	.-266    	; 0x2242 <set_vco_init_cv+0x136>
    234c:	2b 85       	ldd	r18, Y+11	; 0x0b
    234e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2350:	3e 83       	std	Y+6, r19	; 0x06
    2352:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    2354:	88 ec       	ldi	r24, 0xC8	; 200
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    2360:	89 ec       	ldi	r24, 0xC9	; 201
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    236c:	84 ed       	ldi	r24, 0xD4	; 212
    236e:	91 e0       	ldi	r25, 0x01	; 1
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    2378:	88 ed       	ldi	r24, 0xD8	; 216
    237a:	91 e0       	ldi	r25, 0x01	; 1
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    2384:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    2386:	ee e6       	ldi	r30, 0x6E	; 110
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	8d 7f       	andi	r24, 0xFD	; 253
    238e:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2390:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	6d 81       	ldd	r22, Y+5	; 0x05
    2398:	7e 81       	ldd	r23, Y+6	; 0x06
    239a:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	2c 96       	adiw	r28, 0x0c	; 12
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	ff 90       	pop	r15
    23b8:	ef 90       	pop	r14
    23ba:	df 90       	pop	r13
    23bc:	cf 90       	pop	r12
    23be:	bf 90       	pop	r11
    23c0:	af 90       	pop	r10
    23c2:	9f 90       	pop	r9
    23c4:	8f 90       	pop	r8
    23c6:	7f 90       	pop	r7
    23c8:	6f 90       	pop	r6
    23ca:	5f 90       	pop	r5
    23cc:	4f 90       	pop	r4
    23ce:	3f 90       	pop	r3
    23d0:	2f 90       	pop	r2
    23d2:	08 95       	ret

000023d4 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    23d4:	2f 92       	push	r2
    23d6:	3f 92       	push	r3
    23d8:	4f 92       	push	r4
    23da:	5f 92       	push	r5
    23dc:	6f 92       	push	r6
    23de:	7f 92       	push	r7
    23e0:	8f 92       	push	r8
    23e2:	9f 92       	push	r9
    23e4:	af 92       	push	r10
    23e6:	bf 92       	push	r11
    23e8:	cf 92       	push	r12
    23ea:	df 92       	push	r13
    23ec:	ef 92       	push	r14
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	c0 54       	subi	r28, 0x40	; 64
    23fe:	d0 40       	sbci	r29, 0x00	; 0
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    240c:	de 01       	movw	r26, r28
    240e:	11 96       	adiw	r26, 0x01	; 1
    2410:	e0 e3       	ldi	r30, 0x30	; 48
    2412:	f2 e0       	ldi	r31, 0x02	; 2
    2414:	80 e3       	ldi	r24, 0x30	; 48
    2416:	01 90       	ld	r0, Z+
    2418:	0d 92       	st	X+, r0
    241a:	81 50       	subi	r24, 0x01	; 1
    241c:	e1 f7       	brne	.-8      	; 0x2416 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    241e:	0e 94 07 10 	call	0x200e	; 0x200e <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    2422:	0f 30       	cpi	r16, 0x0F	; 15
    2424:	11 f5       	brne	.+68     	; 0x246a <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    2426:	40 90 75 03 	lds	r4, 0x0375
    242a:	50 90 76 03 	lds	r5, 0x0376
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    242e:	0f 2e       	mov	r0, r31
    2430:	f6 ee       	ldi	r31, 0xE6	; 230
    2432:	8f 2e       	mov	r8, r31
    2434:	f1 e0       	ldi	r31, 0x01	; 1
    2436:	9f 2e       	mov	r9, r31
    2438:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    243a:	0f 2e       	mov	r0, r31
    243c:	fe ed       	ldi	r31, 0xDE	; 222
    243e:	2f 2e       	mov	r2, r31
    2440:	f1 e0       	ldi	r31, 0x01	; 1
    2442:	3f 2e       	mov	r3, r31
    2444:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    2446:	23 ee       	ldi	r18, 0xE3	; 227
    2448:	31 e0       	ldi	r19, 0x01	; 1
    244a:	3a ab       	sts	0x5a, r19
    244c:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    244e:	0f 2e       	mov	r0, r31
    2450:	fc ed       	ldi	r31, 0xDC	; 220
    2452:	6f 2e       	mov	r6, r31
    2454:	f1 e0       	ldi	r31, 0x01	; 1
    2456:	7f 2e       	mov	r7, r31
    2458:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    245a:	01 e5       	ldi	r16, 0x51	; 81
    245c:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    245e:	cc 24       	eor	r12, r12
    2460:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    2462:	ee 24       	eor	r14, r14
    2464:	68 94       	set
    2466:	e1 f8       	bld	r14, 1
    2468:	22 c0       	rjmp	.+68     	; 0x24ae <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    246a:	40 90 73 03 	lds	r4, 0x0373
    246e:	50 90 74 03 	lds	r5, 0x0374
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2472:	0f 2e       	mov	r0, r31
    2474:	f5 ee       	ldi	r31, 0xE5	; 229
    2476:	8f 2e       	mov	r8, r31
    2478:	f1 e0       	ldi	r31, 0x01	; 1
    247a:	9f 2e       	mov	r9, r31
    247c:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    247e:	0f 2e       	mov	r0, r31
    2480:	f7 ed       	ldi	r31, 0xD7	; 215
    2482:	2f 2e       	mov	r2, r31
    2484:	f1 e0       	ldi	r31, 0x01	; 1
    2486:	3f 2e       	mov	r3, r31
    2488:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    248a:	44 ee       	ldi	r20, 0xE4	; 228
    248c:	51 e0       	ldi	r21, 0x01	; 1
    248e:	5a ab       	sts	0x5a, r21
    2490:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2492:	0f 2e       	mov	r0, r31
    2494:	fd ed       	ldi	r31, 0xDD	; 221
    2496:	6f 2e       	mov	r6, r31
    2498:	f1 e0       	ldi	r31, 0x01	; 1
    249a:	7f 2e       	mov	r7, r31
    249c:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    249e:	0f e2       	ldi	r16, 0x2F	; 47
    24a0:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    24a2:	cc 24       	eor	r12, r12
    24a4:	68 94       	set
    24a6:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    24a8:	ee 24       	eor	r14, r14
    24aa:	68 94       	set
    24ac:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    24ae:	c3 01       	movw	r24, r6
    24b0:	b2 01       	movw	r22, r4
    24b2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    24b6:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    24b8:	ed ed       	ldi	r30, 0xDD	; 221
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	80 64       	ori	r24, 0x40	; 64
    24c0:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    24c2:	80 81       	ld	r24, Z
    24c4:	8f 7b       	andi	r24, 0xBF	; 191
    24c6:	80 83       	st	Z, r24
		DATA_BUS = 0;
    24c8:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    24ca:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	80 93 7c 03 	sts	0x037C, r24
		
		compare_match_counter = 0;	
    24d2:	10 92 77 03 	sts	0x0377, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    24d6:	8c 2d       	mov	r24, r12
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	24 e6       	ldi	r18, 0x64	; 100
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	82 9f       	mul	r24, r18
    24e0:	d0 01       	movw	r26, r0
    24e2:	83 9f       	mul	r24, r19
    24e4:	b0 0d       	add	r27, r0
    24e6:	92 9f       	mul	r25, r18
    24e8:	b0 0d       	add	r27, r0
    24ea:	11 24       	eor	r1, r1
    24ec:	bc ab       	sts	0x5c, r27
    24ee:	ab ab       	sts	0x5b, r26
    24f0:	fe 01       	movw	r30, r28
    24f2:	31 96       	adiw	r30, 0x01	; 1
    24f4:	fc af       	sts	0x7c, r31
    24f6:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    24f8:	98 01       	movw	r18, r16
    24fa:	2e 5f       	subi	r18, 0xFE	; 254
    24fc:	3f 4f       	sbci	r19, 0xFF	; 255
    24fe:	21 96       	adiw	r28, 0x01	; 1
    2500:	3f af       	sts	0x7f, r19
    2502:	2e af       	sts	0x7e, r18
    2504:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2506:	1e ae       	sts	0xbe, r17
    2508:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    250a:	0f 2e       	mov	r0, r31
    250c:	f8 ed       	ldi	r31, 0xD8	; 216
    250e:	ef 2e       	mov	r14, r31
    2510:	f1 e0       	ldi	r31, 0x01	; 1
    2512:	ff 2e       	mov	r15, r31
    2514:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    2516:	0f 2e       	mov	r0, r31
    2518:	f4 ed       	ldi	r31, 0xD4	; 212
    251a:	cf 2e       	mov	r12, r31
    251c:	f1 e0       	ldi	r31, 0x01	; 1
    251e:	df 2e       	mov	r13, r31
    2520:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2522:	0f 2e       	mov	r0, r31
    2524:	fa ec       	ldi	r31, 0xCA	; 202
    2526:	af 2e       	mov	r10, r31
    2528:	f1 e0       	ldi	r31, 0x01	; 1
    252a:	bf 2e       	mov	r11, r31
    252c:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    252e:	eb ad       	sts	0x6b, r30
    2530:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    2532:	80 81       	ld	r24, Z
    2534:	80 93 7c 03 	sts	0x037C, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2538:	84 b5       	in	r24, 0x24	; 36
    253a:	8f 60       	ori	r24, 0x0F	; 15
    253c:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    2542:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    2544:	4d ad       	sts	0x6d, r20
    2546:	5e ad       	sts	0x6e, r21
    2548:	43 30       	cpi	r20, 0x03	; 3
    254a:	51 05       	cpc	r21, r1
    254c:	24 f4       	brge	.+8      	; 0x2556 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    254e:	83 e0       	ldi	r24, 0x03	; 3
    2550:	80 93 7b 03 	sts	0x037B, r24
    2554:	03 c0       	rjmp	.+6      	; 0x255c <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	80 93 7b 03 	sts	0x037B, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    255c:	81 81       	ldd	r24, Z+1	; 0x01
    255e:	92 81       	ldd	r25, Z+2	; 0x02
    2560:	9a af       	sts	0x7a, r25
    2562:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2564:	ad e0       	ldi	r26, 0x0D	; 13
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	be ab       	sts	0x5e, r27
    256a:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    256c:	00 e0       	ldi	r16, 0x00	; 0
    256e:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2570:	e1 e0       	ldi	r30, 0x01	; 1
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	0d a8       	sts	0x8d, r16
    2576:	02 c0       	rjmp	.+4      	; 0x257c <tune_8ths+0x1a8>
    2578:	ee 0f       	add	r30, r30
    257a:	ff 1f       	adc	r31, r31
    257c:	0a 94       	dec	r0
    257e:	e2 f7       	brpl	.-8      	; 0x2578 <tune_8ths+0x1a4>
    2580:	f8 af       	sts	0x78, r31
    2582:	ef ab       	sts	0x5f, r30
    2584:	0e 2b       	or	r16, r30
    2586:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    2588:	ae e6       	ldi	r26, 0x6E	; 110
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	8c 91       	ld	r24, X
    258e:	8d 7f       	andi	r24, 0xFD	; 253
    2590:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2592:	c4 01       	movw	r24, r8
    2594:	b8 01       	movw	r22, r16
    2596:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    259a:	e3 ef       	ldi	r30, 0xF3	; 243
    259c:	f1 e0       	ldi	r31, 0x01	; 1
    259e:	31 97       	sbiw	r30, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <tune_8ths+0x1ca>
    25a2:	00 c0       	rjmp	.+0      	; 0x25a4 <tune_8ths+0x1d0>
    25a4:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    25a6:	ae e6       	ldi	r26, 0x6E	; 110
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	8c 91       	ld	r24, X
    25ac:	82 60       	ori	r24, 0x02	; 2
    25ae:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    25b0:	10 92 7a 03 	sts	0x037A, r1
				period_counter = 0;
    25b4:	10 92 7d 03 	sts	0x037D, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    25b8:	e8 e1       	ldi	r30, 0x18	; 24
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	2f e0       	ldi	r18, 0x0F	; 15
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	a8 95       	wdr
    25c4:	e0 93 60 00 	sts	0x0060, r30
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    25ce:	80 91 7a 03 	lds	r24, 0x037A
    25d2:	88 23       	and	r24, r24
    25d4:	81 f5       	brne	.+96     	; 0x2636 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    25d6:	80 91 7c 03 	lds	r24, 0x037C
    25da:	4b a9       	sts	0x4b, r20
    25dc:	5c a9       	sts	0x4c, r21
    25de:	48 0f       	add	r20, r24
    25e0:	51 1d       	adc	r21, r1
    25e2:	ca 01       	movw	r24, r20
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    25ea:	c3 01       	movw	r24, r6
    25ec:	b2 01       	movw	r22, r4
    25ee:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    25f2:	c4 01       	movw	r24, r8
    25f4:	b8 01       	movw	r22, r16
    25f6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    25fa:	c7 01       	movw	r24, r14
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    2604:	c6 01       	movw	r24, r12
    2606:	6f ef       	ldi	r22, 0xFF	; 255
    2608:	7f e3       	ldi	r23, 0x3F	; 63
    260a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    260e:	c5 01       	movw	r24, r10
    2610:	6f ef       	ldi	r22, 0xFF	; 255
    2612:	7f e3       	ldi	r23, 0x3F	; 63
    2614:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    2618:	c1 01       	movw	r24, r2
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	70 e2       	ldi	r23, 0x20	; 32
    261e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    2622:	89 a9       	sts	0x49, r24
    2624:	9a a9       	sts	0x4a, r25
    2626:	6f ef       	ldi	r22, 0xFF	; 255
    2628:	7f e3       	ldi	r23, 0x3F	; 63
    262a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    262e:	80 91 7a 03 	lds	r24, 0x037A
    2632:	88 23       	and	r24, r24
    2634:	81 f2       	breq	.-96     	; 0x25d6 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    2636:	58 e1       	ldi	r21, 0x18	; 24
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	50 93 60 00 	sts	0x0060, r21
    2640:	10 92 60 00 	sts	0x0060, r1
    2644:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    2646:	80 91 78 03 	lds	r24, 0x0378
    264a:	90 91 79 03 	lds	r25, 0x0379
    264e:	a9 ad       	sts	0x69, r26
    2650:	ba ad       	sts	0x6a, r27
    2652:	a8 17       	cp	r26, r24
    2654:	b9 07       	cpc	r27, r25
    2656:	50 f0       	brcs	.+20     	; 0x266c <tune_8ths+0x298>
    2658:	80 91 af 02 	lds	r24, 0x02AF
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	31 f4       	brne	.+12     	; 0x266c <tune_8ths+0x298>
    2660:	8f a9       	sts	0x4f, r24
    2662:	98 ad       	sts	0x68, r25
    2664:	80 95       	com	r24
    2666:	90 95       	com	r25
    2668:	08 23       	and	r16, r24
    266a:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    266c:	80 91 78 03 	lds	r24, 0x0378
    2670:	90 91 79 03 	lds	r25, 0x0379
    2674:	e9 ad       	sts	0x69, r30
    2676:	fa ad       	sts	0x6a, r31
    2678:	8e 17       	cp	r24, r30
    267a:	9f 07       	cpc	r25, r31
    267c:	21 f4       	brne	.+8      	; 0x2686 <tune_8ths+0x2b2>
    267e:	80 91 af 02 	lds	r24, 0x02AF
    2682:	81 30       	cpi	r24, 0x01	; 1
    2684:	71 f0       	breq	.+28     	; 0x26a2 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    2686:	f1 e0       	ldi	r31, 0x01	; 1
    2688:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    268c:	2d a9       	sts	0x4d, r18
    268e:	3e a9       	sts	0x4e, r19
    2690:	21 50       	subi	r18, 0x01	; 1
    2692:	30 40       	sbci	r19, 0x00	; 0
    2694:	3e ab       	sts	0x5e, r19
    2696:	2d ab       	sts	0x5d, r18
    2698:	4f ef       	ldi	r20, 0xFF	; 255
    269a:	2f 3f       	cpi	r18, 0xFF	; 255
    269c:	34 07       	cpc	r19, r20
    269e:	09 f0       	breq	.+2      	; 0x26a2 <tune_8ths+0x2ce>
    26a0:	67 cf       	rjmp	.-306    	; 0x2570 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    26a2:	21 96       	adiw	r28, 0x01	; 1
    26a4:	ae ad       	sts	0x6e, r26
    26a6:	bf ad       	sts	0x6f, r27
    26a8:	21 97       	sbiw	r28, 0x01	; 1
    26aa:	0d 93       	st	X+, r16
    26ac:	1d 93       	st	X+, r17
    26ae:	21 96       	adiw	r28, 0x01	; 1
    26b0:	bf af       	sts	0x7f, r27
    26b2:	ae af       	sts	0x7e, r26
    26b4:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    26b6:	ee e6       	ldi	r30, 0x6E	; 110
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	8d 7f       	andi	r24, 0xFD	; 253
    26be:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    26c0:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    26c2:	2d ad       	sts	0x6d, r18
    26c4:	3e ad       	sts	0x6e, r19
    26c6:	2f 5f       	subi	r18, 0xFF	; 255
    26c8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ca:	3e af       	sts	0x7e, r19
    26cc:	2d af       	sts	0x7d, r18
    26ce:	4b ad       	sts	0x6b, r20
    26d0:	5c ad       	sts	0x6c, r21
    26d2:	4d 5f       	subi	r20, 0xFD	; 253
    26d4:	5f 4f       	sbci	r21, 0xFF	; 255
    26d6:	5c af       	sts	0x7c, r21
    26d8:	4b af       	sts	0x7b, r20
    26da:	20 31       	cpi	r18, 0x10	; 16
    26dc:	31 05       	cpc	r19, r1
    26de:	09 f0       	breq	.+2      	; 0x26e2 <tune_8ths+0x30e>
    26e0:	26 cf       	rjmp	.-436    	; 0x252e <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    26e2:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    26e4:	c0 5c       	subi	r28, 0xC0	; 192
    26e6:	df 4f       	sbci	r29, 0xFF	; 255
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	1f 91       	pop	r17
    26f8:	0f 91       	pop	r16
    26fa:	ff 90       	pop	r15
    26fc:	ef 90       	pop	r14
    26fe:	df 90       	pop	r13
    2700:	cf 90       	pop	r12
    2702:	bf 90       	pop	r11
    2704:	af 90       	pop	r10
    2706:	9f 90       	pop	r9
    2708:	8f 90       	pop	r8
    270a:	7f 90       	pop	r7
    270c:	6f 90       	pop	r6
    270e:	5f 90       	pop	r5
    2710:	4f 90       	pop	r4
    2712:	3f 90       	pop	r3
    2714:	2f 90       	pop	r2
    2716:	08 95       	ret

00002718 <tune_filter>:
	
void tune_filter(void) {
    2718:	2f 92       	push	r2
    271a:	3f 92       	push	r3
    271c:	4f 92       	push	r4
    271e:	5f 92       	push	r5
    2720:	6f 92       	push	r6
    2722:	7f 92       	push	r7
    2724:	8f 92       	push	r8
    2726:	9f 92       	push	r9
    2728:	af 92       	push	r10
    272a:	bf 92       	push	r11
    272c:	cf 92       	push	r12
    272e:	df 92       	push	r13
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	e9 97       	sbiw	r28, 0x39	; 57
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    274c:	de 01       	movw	r26, r28
    274e:	11 96       	adiw	r26, 0x01	; 1
    2750:	e0 e6       	ldi	r30, 0x60	; 96
    2752:	f2 e0       	ldi	r31, 0x02	; 2
    2754:	8d e2       	ldi	r24, 0x2D	; 45
    2756:	01 90       	ld	r0, Z+
    2758:	0d 92       	st	X+, r0
    275a:	81 50       	subi	r24, 0x01	; 1
    275c:	e1 f7       	brne	.-8      	; 0x2756 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    275e:	88 ed       	ldi	r24, 0xD8	; 216
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	60 e0       	ldi	r22, 0x00	; 0
    2764:	70 e0       	ldi	r23, 0x00	; 0
    2766:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    276a:	81 ee       	ldi	r24, 0xE1	; 225
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	70 e0       	ldi	r23, 0x00	; 0
    2772:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2776:	82 ee       	ldi	r24, 0xE2	; 226
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2782:	83 eb       	ldi	r24, 0xB3	; 179
    2784:	92 e0       	ldi	r25, 0x02	; 2
    2786:	60 e0       	ldi	r22, 0x00	; 0
    2788:	70 e0       	ldi	r23, 0x00	; 0
    278a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    278e:	8a ed       	ldi	r24, 0xDA	; 218
    2790:	91 e0       	ldi	r25, 0x01	; 1
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    279a:	8f ed       	ldi	r24, 0xDF	; 223
    279c:	91 e0       	ldi	r25, 0x01	; 1
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	70 e0       	ldi	r23, 0x00	; 0
    27a2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    27a6:	80 ee       	ldi	r24, 0xE0	; 224
    27a8:	91 e0       	ldi	r25, 0x01	; 1
    27aa:	60 e0       	ldi	r22, 0x00	; 0
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    27b2:	81 ed       	ldi	r24, 0xD1	; 209
    27b4:	91 e0       	ldi	r25, 0x01	; 1
    27b6:	60 e0       	ldi	r22, 0x00	; 0
    27b8:	70 e0       	ldi	r23, 0x00	; 0
    27ba:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    27be:	86 ed       	ldi	r24, 0xD6	; 214
    27c0:	91 e0       	ldi	r25, 0x01	; 1
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    27ca:	82 ed       	ldi	r24, 0xD2	; 210
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	70 e0       	ldi	r23, 0x00	; 0
    27d2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    27d6:	83 ed       	ldi	r24, 0xD3	; 211
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	60 e0       	ldi	r22, 0x00	; 0
    27dc:	70 e0       	ldi	r23, 0x00	; 0
    27de:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    27e2:	84 ed       	ldi	r24, 0xD4	; 212
    27e4:	91 e0       	ldi	r25, 0x01	; 1
    27e6:	6f ef       	ldi	r22, 0xFF	; 255
    27e8:	7f e3       	ldi	r23, 0x3F	; 63
    27ea:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    27ee:	85 ed       	ldi	r24, 0xD5	; 213
    27f0:	91 e0       	ldi	r25, 0x01	; 1
    27f2:	6f ef       	ldi	r22, 0xFF	; 255
    27f4:	7f e3       	ldi	r23, 0x3F	; 63
    27f6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    27fa:	89 ed       	ldi	r24, 0xD9	; 217
    27fc:	91 e0       	ldi	r25, 0x01	; 1
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2806:	8e ec       	ldi	r24, 0xCE	; 206
    2808:	91 e0       	ldi	r25, 0x01	; 1
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	70 e0       	ldi	r23, 0x00	; 0
    280e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2812:	8c ec       	ldi	r24, 0xCC	; 204
    2814:	91 e0       	ldi	r25, 0x01	; 1
    2816:	60 e0       	ldi	r22, 0x00	; 0
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    281e:	8a ec       	ldi	r24, 0xCA	; 202
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	6f ef       	ldi	r22, 0xFF	; 255
    2824:	7f e3       	ldi	r23, 0x3F	; 63
    2826:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    282a:	88 ec       	ldi	r24, 0xC8	; 200
    282c:	91 e0       	ldi	r25, 0x01	; 1
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    2836:	80 ed       	ldi	r24, 0xD0	; 208
    2838:	91 e0       	ldi	r25, 0x01	; 1
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	70 e0       	ldi	r23, 0x00	; 0
    283e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2842:	83 ee       	ldi	r24, 0xE3	; 227
    2844:	91 e0       	ldi	r25, 0x01	; 1
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	70 e0       	ldi	r23, 0x00	; 0
    284a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    284e:	84 ee       	ldi	r24, 0xE4	; 228
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    285a:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    285c:	ed ed       	ldi	r30, 0xDD	; 221
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	80 64       	ori	r24, 0x40	; 64
    2864:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2866:	80 81       	ld	r24, Z
    2868:	8f 7b       	andi	r24, 0xBF	; 191
    286a:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	80 93 7c 03 	sts	0x037C, r24
	PORTF |= (1<<GATE); //turn gate on
    2872:	89 9a       	sbi	0x11, 1	; 17
    2874:	9e 01       	movw	r18, r28
    2876:	2f 5f       	subi	r18, 0xFF	; 255
    2878:	3f 4f       	sbci	r19, 0xFF	; 255
    287a:	3d ab       	sts	0x5d, r19
    287c:	2c ab       	sts	0x5c, r18
    287e:	81 e1       	ldi	r24, 0x11	; 17
    2880:	93 e0       	ldi	r25, 0x03	; 3
    2882:	99 af       	sts	0x79, r25
    2884:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2886:	1f aa       	sts	0x9f, r17
    2888:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    288a:	0f 2e       	mov	r0, r31
    288c:	f4 ed       	ldi	r31, 0xD4	; 212
    288e:	af 2e       	mov	r10, r31
    2890:	f1 e0       	ldi	r31, 0x01	; 1
    2892:	bf 2e       	mov	r11, r31
    2894:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2896:	0f 2e       	mov	r0, r31
    2898:	f8 ed       	ldi	r31, 0xD8	; 216
    289a:	6f 2e       	mov	r6, r31
    289c:	f1 e0       	ldi	r31, 0x01	; 1
    289e:	7f 2e       	mov	r7, r31
    28a0:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    28a2:	0f 2e       	mov	r0, r31
    28a4:	f5 ed       	ldi	r31, 0xD5	; 213
    28a6:	4f 2e       	mov	r4, r31
    28a8:	f1 e0       	ldi	r31, 0x01	; 1
    28aa:	5f 2e       	mov	r5, r31
    28ac:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    28ae:	0f 2e       	mov	r0, r31
    28b0:	fa ec       	ldi	r31, 0xCA	; 202
    28b2:	2f 2e       	mov	r2, r31
    28b4:	f1 e0       	ldi	r31, 0x01	; 1
    28b6:	3f 2e       	mov	r3, r31
    28b8:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    28ba:	ac a9       	sts	0x4c, r26
    28bc:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    28be:	8c 91       	ld	r24, X
    28c0:	80 93 7c 03 	sts	0x037C, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    28c4:	84 b5       	in	r24, 0x24	; 36
    28c6:	8f 60       	ori	r24, 0x0F	; 15
    28c8:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    28ce:	ee e6       	ldi	r30, 0x6E	; 110
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	82 60       	ori	r24, 0x02	; 2
    28d6:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    28d8:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    28da:	ee a9       	sts	0x4e, r30
    28dc:	ff a9       	sts	0x4f, r31
    28de:	e2 30       	cpi	r30, 0x02	; 2
    28e0:	f1 05       	cpc	r31, r1
    28e2:	24 f4       	brge	.+8      	; 0x28ec <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    28e4:	83 e0       	ldi	r24, 0x03	; 3
    28e6:	80 93 7b 03 	sts	0x037B, r24
    28ea:	03 c0       	rjmp	.+6      	; 0x28f2 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	80 93 7b 03 	sts	0x037B, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    28f2:	11 96       	adiw	r26, 0x01	; 1
    28f4:	2d 91       	ld	r18, X+
    28f6:	3c 91       	ld	r19, X
    28f8:	12 97       	sbiw	r26, 0x02	; 2
    28fa:	3b ab       	sts	0x5b, r19
    28fc:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    28fe:	8d e0       	ldi	r24, 0x0D	; 13
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	9f a7       	lds	r25, 0x7f
    2904:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2906:	ee 24       	eor	r14, r14
    2908:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    290a:	0f 2e       	mov	r0, r31
    290c:	f1 ed       	ldi	r31, 0xD1	; 209
    290e:	cf 2e       	mov	r12, r31
    2910:	f1 e0       	ldi	r31, 0x01	; 1
    2912:	df 2e       	mov	r13, r31
    2914:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2916:	0f 2e       	mov	r0, r31
    2918:	f6 ed       	ldi	r31, 0xD6	; 214
    291a:	8f 2e       	mov	r8, r31
    291c:	f1 e0       	ldi	r31, 0x01	; 1
    291e:	9f 2e       	mov	r9, r31
    2920:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	fc 01       	movw	r30, r24
    2928:	0e a4       	lds	r16, 0xae
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <tune_filter+0x218>
    292c:	ee 0f       	add	r30, r30
    292e:	ff 1f       	adc	r31, r31
    2930:	0a 94       	dec	r0
    2932:	e2 f7       	brpl	.-8      	; 0x292c <tune_filter+0x214>
    2934:	f9 ab       	sts	0x59, r31
    2936:	e8 ab       	sts	0x58, r30
    2938:	ee 2a       	or	r14, r30
    293a:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    293c:	c5 01       	movw	r24, r10
    293e:	b7 01       	movw	r22, r14
    2940:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			count_finished = FALSE;
    2944:	10 92 7a 03 	sts	0x037A, r1
			period_counter = 0;
    2948:	10 92 7d 03 	sts	0x037D, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    294c:	8f e0       	ldi	r24, 0x0F	; 15
    294e:	28 e1       	ldi	r18, 0x18	; 24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	a8 95       	wdr
    2958:	20 93 60 00 	sts	0x0060, r18
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2962:	80 91 7a 03 	lds	r24, 0x037A
    2966:	88 23       	and	r24, r24
    2968:	b1 f5       	brne	.+108    	; 0x29d6 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    296a:	02 ed       	ldi	r16, 0xD2	; 210
    296c:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    296e:	80 91 7c 03 	lds	r24, 0x037C
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	84 5d       	subi	r24, 0xD4	; 212
    2976:	9e 4f       	sbci	r25, 0xFE	; 254
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    297e:	c5 01       	movw	r24, r10
    2980:	b7 01       	movw	r22, r14
    2982:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2986:	c3 01       	movw	r24, r6
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2990:	c2 01       	movw	r24, r4
    2992:	6f ef       	ldi	r22, 0xFF	; 255
    2994:	7f e3       	ldi	r23, 0x3F	; 63
    2996:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    299a:	c1 01       	movw	r24, r2
    299c:	6f ef       	ldi	r22, 0xFF	; 255
    299e:	7f e3       	ldi	r23, 0x3F	; 63
    29a0:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    29a4:	8e ec       	ldi	r24, 0xCE	; 206
    29a6:	91 e0       	ldi	r25, 0x01	; 1
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    29b0:	c6 01       	movw	r24, r12
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    29ba:	c4 01       	movw	r24, r8
    29bc:	60 e0       	ldi	r22, 0x00	; 0
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    29c4:	c8 01       	movw	r24, r16
    29c6:	60 e0       	ldi	r22, 0x00	; 0
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    29ce:	80 91 7a 03 	lds	r24, 0x037A
    29d2:	88 23       	and	r24, r24
    29d4:	61 f2       	breq	.-104    	; 0x296e <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    29d6:	88 e1       	ldi	r24, 0x18	; 24
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	80 93 60 00 	sts	0x0060, r24
    29e0:	10 92 60 00 	sts	0x0060, r1
    29e4:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    29e6:	80 91 78 03 	lds	r24, 0x0378
    29ea:	90 91 79 03 	lds	r25, 0x0379
    29ee:	2a a9       	sts	0x4a, r18
    29f0:	3b a9       	sts	0x4b, r19
    29f2:	28 17       	cp	r18, r24
    29f4:	39 07       	cpc	r19, r25
    29f6:	50 f0       	brcs	.+20     	; 0x2a0c <tune_filter+0x2f4>
    29f8:	80 91 af 02 	lds	r24, 0x02AF
    29fc:	81 30       	cpi	r24, 0x01	; 1
    29fe:	31 f4       	brne	.+12     	; 0x2a0c <tune_filter+0x2f4>
    2a00:	88 a9       	sts	0x48, r24
    2a02:	99 a9       	sts	0x49, r25
    2a04:	80 95       	com	r24
    2a06:	90 95       	com	r25
    2a08:	e8 22       	and	r14, r24
    2a0a:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2a0c:	80 91 78 03 	lds	r24, 0x0378
    2a10:	90 91 79 03 	lds	r25, 0x0379
    2a14:	ea a9       	sts	0x4a, r30
    2a16:	fb a9       	sts	0x4b, r31
    2a18:	8e 17       	cp	r24, r30
    2a1a:	9f 07       	cpc	r25, r31
    2a1c:	21 f4       	brne	.+8      	; 0x2a26 <tune_filter+0x30e>
    2a1e:	80 91 af 02 	lds	r24, 0x02AF
    2a22:	81 30       	cpi	r24, 0x01	; 1
    2a24:	71 f0       	breq	.+28     	; 0x2a42 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2a2c:	2e a5       	lds	r18, 0x6e
    2a2e:	3f a5       	lds	r19, 0x6f
    2a30:	21 50       	subi	r18, 0x01	; 1
    2a32:	30 40       	sbci	r19, 0x00	; 0
    2a34:	3f a7       	lds	r19, 0x7f
    2a36:	2e a7       	lds	r18, 0x7e
    2a38:	8f ef       	ldi	r24, 0xFF	; 255
    2a3a:	2f 3f       	cpi	r18, 0xFF	; 255
    2a3c:	38 07       	cpc	r19, r24
    2a3e:	09 f0       	breq	.+2      	; 0x2a42 <tune_filter+0x32a>
    2a40:	70 cf       	rjmp	.-288    	; 0x2922 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2a42:	ee a9       	sts	0x4e, r30
    2a44:	ff a9       	sts	0x4f, r31
    2a46:	31 96       	adiw	r30, 0x01	; 1
    2a48:	ff ab       	sts	0x5f, r31
    2a4a:	ee ab       	sts	0x5e, r30
    2a4c:	c7 01       	movw	r24, r14
    2a4e:	80 96       	adiw	r24, 0x20	; 32
    2a50:	e8 ad       	sts	0x68, r30
    2a52:	f9 ad       	sts	0x69, r31
    2a54:	81 93       	st	Z+, r24
    2a56:	91 93       	st	Z+, r25
    2a58:	f9 af       	sts	0x79, r31
    2a5a:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2a5c:	ee e6       	ldi	r30, 0x6E	; 110
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	8d 7f       	andi	r24, 0xFD	; 253
    2a64:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2a66:	14 bc       	out	0x24, r1	; 36
    2a68:	2c a9       	sts	0x4c, r18
    2a6a:	3d a9       	sts	0x4d, r19
    2a6c:	2d 5f       	subi	r18, 0xFD	; 253
    2a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a70:	3d ab       	sts	0x5d, r19
    2a72:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2a74:	8e a9       	sts	0x4e, r24
    2a76:	9f a9       	sts	0x4f, r25
    2a78:	8f 30       	cpi	r24, 0x0F	; 15
    2a7a:	91 05       	cpc	r25, r1
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <tune_filter+0x368>
    2a7e:	1d cf       	rjmp	.-454    	; 0x28ba <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2a80:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2a82:	e9 96       	adiw	r28, 0x39	; 57
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	ff 90       	pop	r15
    2a98:	ef 90       	pop	r14
    2a9a:	df 90       	pop	r13
    2a9c:	cf 90       	pop	r12
    2a9e:	bf 90       	pop	r11
    2aa0:	af 90       	pop	r10
    2aa2:	9f 90       	pop	r9
    2aa4:	8f 90       	pop	r8
    2aa6:	7f 90       	pop	r7
    2aa8:	6f 90       	pop	r6
    2aaa:	5f 90       	pop	r5
    2aac:	4f 90       	pop	r4
    2aae:	3f 90       	pop	r3
    2ab0:	2f 90       	pop	r2
    2ab2:	08 95       	ret

00002ab4 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2ab4:	8f e0       	ldi	r24, 0x0F	; 15
    2ab6:	93 e0       	ldi	r25, 0x03	; 3
    2ab8:	6c e0       	ldi	r22, 0x0C	; 12
    2aba:	76 e0       	ldi	r23, 0x06	; 6
    2abc:	40 e2       	ldi	r20, 0x20	; 32
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2ac4:	81 e5       	ldi	r24, 0x51	; 81
    2ac6:	93 e0       	ldi	r25, 0x03	; 3
    2ac8:	6e e4       	ldi	r22, 0x4E	; 78
    2aca:	76 e0       	ldi	r23, 0x06	; 6
    2acc:	42 e2       	ldi	r20, 0x22	; 34
    2ace:	50 e0       	ldi	r21, 0x00	; 0
    2ad0:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2ad4:	8f e2       	ldi	r24, 0x2F	; 47
    2ad6:	93 e0       	ldi	r25, 0x03	; 3
    2ad8:	6c e2       	ldi	r22, 0x2C	; 44
    2ada:	76 e0       	ldi	r23, 0x06	; 6
    2adc:	42 e2       	ldi	r20, 0x22	; 34
    2ade:	50 e0       	ldi	r21, 0x00	; 0
    2ae0:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__eeupd_block_m6450a>
	
	
}
    2ae4:	08 95       	ret

00002ae6 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2ae6:	82 e7       	ldi	r24, 0x72	; 114
    2ae8:	96 e0       	ldi	r25, 0x06	; 6
    2aea:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <__eerd_word_m6450a>
    2aee:	90 93 76 03 	sts	0x0376, r25
    2af2:	80 93 75 03 	sts	0x0375, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2af6:	80 e7       	ldi	r24, 0x70	; 112
    2af8:	96 e0       	ldi	r25, 0x06	; 6
    2afa:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <__eerd_word_m6450a>
    2afe:	90 93 74 03 	sts	0x0374, r25
    2b02:	80 93 73 03 	sts	0x0373, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2b06:	81 e5       	ldi	r24, 0x51	; 81
    2b08:	93 e0       	ldi	r25, 0x03	; 3
    2b0a:	6e e4       	ldi	r22, 0x4E	; 78
    2b0c:	76 e0       	ldi	r23, 0x06	; 6
    2b0e:	42 e2       	ldi	r20, 0x22	; 34
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2b16:	8f e2       	ldi	r24, 0x2F	; 47
    2b18:	93 e0       	ldi	r25, 0x03	; 3
    2b1a:	6c e2       	ldi	r22, 0x2C	; 44
    2b1c:	76 e0       	ldi	r23, 0x06	; 6
    2b1e:	42 e2       	ldi	r20, 0x22	; 34
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2b26:	8f e0       	ldi	r24, 0x0F	; 15
    2b28:	93 e0       	ldi	r25, 0x03	; 3
    2b2a:	6c e0       	ldi	r22, 0x0C	; 12
    2b2c:	76 e0       	ldi	r23, 0x06	; 6
    2b2e:	40 e2       	ldi	r20, 0x20	; 32
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2b36:	08 95       	ret

00002b38 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2b38:	98 2f       	mov	r25, r24
    2b3a:	96 95       	lsr	r25
    2b3c:	96 95       	lsr	r25
    2b3e:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2b40:	29 2f       	mov	r18, r25
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	f9 01       	movw	r30, r18
    2b46:	31 97       	sbiw	r30, 0x01	; 1
    2b48:	ee 0f       	add	r30, r30
    2b4a:	ff 1f       	adc	r31, r31
    2b4c:	e6 0f       	add	r30, r22
    2b4e:	f7 1f       	adc	r31, r23
    2b50:	01 90       	ld	r0, Z+
    2b52:	f0 81       	ld	r31, Z
    2b54:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2b56:	22 0f       	add	r18, r18
    2b58:	33 1f       	adc	r19, r19
    2b5a:	26 0f       	add	r18, r22
    2b5c:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2b5e:	d9 01       	movw	r26, r18
    2b60:	4d 91       	ld	r20, X+
    2b62:	5c 91       	ld	r21, X
    2b64:	11 97       	sbiw	r26, 0x01	; 1
    2b66:	4e 1b       	sub	r20, r30
    2b68:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2b6a:	99 0f       	add	r25, r25
    2b6c:	99 0f       	add	r25, r25
    2b6e:	99 0f       	add	r25, r25
    2b70:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	48 9f       	mul	r20, r24
    2b76:	90 01       	movw	r18, r0
    2b78:	49 9f       	mul	r20, r25
    2b7a:	30 0d       	add	r19, r0
    2b7c:	58 9f       	mul	r21, r24
    2b7e:	30 0d       	add	r19, r0
    2b80:	11 24       	eor	r1, r1
    2b82:	36 95       	lsr	r19
    2b84:	27 95       	ror	r18
    2b86:	36 95       	lsr	r19
    2b88:	27 95       	ror	r18
    2b8a:	36 95       	lsr	r19
    2b8c:	27 95       	ror	r18
    2b8e:	e2 0f       	add	r30, r18
    2b90:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2b92:	8e 2f       	mov	r24, r30
    2b94:	9f 2f       	mov	r25, r31
    2b96:	08 95       	ret

00002b98 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	a2 97       	sbiw	r28, 0x22	; 34
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2bac:	de 01       	movw	r26, r28
    2bae:	11 96       	adiw	r26, 0x01	; 1
    2bb0:	ed e8       	ldi	r30, 0x8D	; 141
    2bb2:	f2 e0       	ldi	r31, 0x02	; 2
    2bb4:	82 e2       	ldi	r24, 0x22	; 34
    2bb6:	01 90       	ld	r0, Z+
    2bb8:	0d 92       	st	X+, r0
    2bba:	81 50       	subi	r24, 0x01	; 1
    2bbc:	e1 f7       	brne	.-8      	; 0x2bb6 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2bbe:	a1 e5       	ldi	r26, 0x51	; 81
    2bc0:	b3 e0       	ldi	r27, 0x03	; 3
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	31 96       	adiw	r30, 0x01	; 1
    2bc6:	82 e2       	ldi	r24, 0x22	; 34
    2bc8:	01 90       	ld	r0, Z+
    2bca:	0d 92       	st	X+, r0
    2bcc:	81 50       	subi	r24, 0x01	; 1
    2bce:	e1 f7       	brne	.-8      	; 0x2bc8 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2bd0:	af e2       	ldi	r26, 0x2F	; 47
    2bd2:	b3 e0       	ldi	r27, 0x03	; 3
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	31 96       	adiw	r30, 0x01	; 1
    2bd8:	82 e2       	ldi	r24, 0x22	; 34
    2bda:	01 90       	ld	r0, Z+
    2bdc:	0d 92       	st	X+, r0
    2bde:	81 50       	subi	r24, 0x01	; 1
    2be0:	e1 f7       	brne	.-8      	; 0x2bda <set_one_volt_per_octave+0x42>
	
	
}
    2be2:	a2 96       	adiw	r28, 0x22	; 34
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	df 91       	pop	r29
    2bf0:	cf 91       	pop	r28
    2bf2:	08 95       	ret

00002bf4 <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2bf4:	ef e6       	ldi	r30, 0x6F	; 111
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	82 70       	andi	r24, 0x02	; 2
    2bfc:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2bfe:	e1 e8       	ldi	r30, 0x81	; 129
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	87 7f       	andi	r24, 0xF7	; 247
    2c06:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2c08:	8f e0       	ldi	r24, 0x0F	; 15
    2c0a:	6f e0       	ldi	r22, 0x0F	; 15
    2c0c:	7e e5       	ldi	r23, 0x5E	; 94
    2c0e:	0e 94 86 10 	call	0x210c	; 0x210c <set_vco_init_cv>
    2c12:	90 93 76 03 	sts	0x0376, r25
    2c16:	80 93 75 03 	sts	0x0375, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2c1a:	80 ef       	ldi	r24, 0xF0	; 240
    2c1c:	6f e0       	ldi	r22, 0x0F	; 15
    2c1e:	7e e5       	ldi	r23, 0x5E	; 94
    2c20:	0e 94 86 10 	call	0x210c	; 0x210c <set_vco_init_cv>
    2c24:	90 93 74 03 	sts	0x0374, r25
    2c28:	80 93 73 03 	sts	0x0373, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2c2c:	8f e0       	ldi	r24, 0x0F	; 15
    2c2e:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <tune_8ths>
			tune_8ths(VCO2);
    2c32:	80 ef       	ldi	r24, 0xF0	; 240
    2c34:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <tune_8ths>
			tune_filter();
    2c38:	0e 94 8c 13 	call	0x2718	; 0x2718 <tune_filter>
			save_tuning_tables();
    2c3c:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <save_tuning_tables>
    2c40:	8f e4       	ldi	r24, 0x4F	; 79
    2c42:	93 ec       	ldi	r25, 0xC3	; 195
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <tune+0x50>
    2c48:	00 c0       	rjmp	.+0      	; 0x2c4a <tune+0x56>
    2c4a:	00 00       	nop
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2c4c:	08 95       	ret

00002c4e <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2c4e:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2c50:	98 2f       	mov	r25, r24
    2c52:	9c 70       	andi	r25, 0x0C	; 12
    2c54:	20 91 c1 02 	lds	r18, 0x02C1
    2c58:	92 2b       	or	r25, r18
    2c5a:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2c5e:	98 2f       	mov	r25, r24
    2c60:	92 95       	swap	r25
    2c62:	96 95       	lsr	r25
    2c64:	97 70       	andi	r25, 0x07	; 7
    2c66:	90 ff       	sbrs	r25, 0
    2c68:	16 c0       	rjmp	.+44     	; 0x2c96 <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2c6a:	20 91 81 03 	lds	r18, 0x0381
    2c6e:	30 91 82 03 	lds	r19, 0x0382
    2c72:	2f 5f       	subi	r18, 0xFF	; 255
    2c74:	3f 4f       	sbci	r19, 0xFF	; 255
    2c76:	30 93 82 03 	sts	0x0382, r19
    2c7a:	20 93 81 03 	sts	0x0381, r18
    2c7e:	92 e0       	ldi	r25, 0x02	; 2
    2c80:	28 35       	cpi	r18, 0x58	; 88
    2c82:	39 07       	cpc	r19, r25
    2c84:	61 f4       	brne	.+24     	; 0x2c9e <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2c86:	10 92 82 03 	sts	0x0382, r1
    2c8a:	10 92 81 03 	sts	0x0381, r1
			current_patch.mode = CAL;
    2c8e:	95 e0       	ldi	r25, 0x05	; 5
    2c90:	90 93 07 03 	sts	0x0307, r25
    2c94:	04 c0       	rjmp	.+8      	; 0x2c9e <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2c96:	10 92 82 03 	sts	0x0382, r1
    2c9a:	10 92 81 03 	sts	0x0381, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2c9e:	90 91 83 03 	lds	r25, 0x0383
    2ca2:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2ca4:	98 27       	eor	r25, r24
    2ca6:	90 93 83 03 	sts	0x0383, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2caa:	89 23       	and	r24, r25
    2cac:	08 95       	ret

00002cae <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2cae:	ed ed       	ldi	r30, 0xDD	; 221
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	90 81       	ld	r25, Z
    2cb4:	9f 7b       	andi	r25, 0xBF	; 191
    2cb6:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2cb8:	28 2f       	mov	r18, r24
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	21 70       	andi	r18, 0x01	; 1
    2cbe:	30 70       	andi	r19, 0x00	; 0
    2cc0:	22 0f       	add	r18, r18
    2cc2:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2cc4:	68 2f       	mov	r22, r24
    2cc6:	62 95       	swap	r22
    2cc8:	66 95       	lsr	r22
    2cca:	67 70       	andi	r22, 0x07	; 7
    2ccc:	67 95       	ror	r22
    2cce:	66 27       	eor	r22, r22
    2cd0:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cd2:	26 2b       	or	r18, r22
    2cd4:	98 2f       	mov	r25, r24
    2cd6:	96 95       	lsr	r25
    2cd8:	96 95       	lsr	r25
    2cda:	91 70       	andi	r25, 0x01	; 1
    2cdc:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2cde:	68 2f       	mov	r22, r24
    2ce0:	66 1f       	adc	r22, r22
    2ce2:	66 27       	eor	r22, r22
    2ce4:	66 1f       	adc	r22, r22
    2ce6:	66 0f       	add	r22, r22
    2ce8:	66 0f       	add	r22, r22
    2cea:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cec:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2cee:	a8 2f       	mov	r26, r24
    2cf0:	a6 95       	lsr	r26
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	a1 70       	andi	r26, 0x01	; 1
    2cf6:	b0 70       	andi	r27, 0x00	; 0
    2cf8:	bd 01       	movw	r22, r26
    2cfa:	66 0f       	add	r22, r22
    2cfc:	77 1f       	adc	r23, r23
    2cfe:	66 0f       	add	r22, r22
    2d00:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d02:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2d04:	68 2f       	mov	r22, r24
    2d06:	62 95       	swap	r22
    2d08:	6f 70       	andi	r22, 0x0F	; 15
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
    2d0c:	61 70       	andi	r22, 0x01	; 1
    2d0e:	70 70       	andi	r23, 0x00	; 0
    2d10:	ab 01       	movw	r20, r22
    2d12:	00 24       	eor	r0, r0
    2d14:	56 95       	lsr	r21
    2d16:	47 95       	ror	r20
    2d18:	07 94       	ror	r0
    2d1a:	56 95       	lsr	r21
    2d1c:	47 95       	ror	r20
    2d1e:	07 94       	ror	r0
    2d20:	54 2f       	mov	r21, r20
    2d22:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d24:	62 2f       	mov	r22, r18
    2d26:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2d28:	48 2f       	mov	r20, r24
    2d2a:	42 95       	swap	r20
    2d2c:	46 95       	lsr	r20
    2d2e:	46 95       	lsr	r20
    2d30:	43 70       	andi	r20, 0x03	; 3
    2d32:	50 e0       	ldi	r21, 0x00	; 0
    2d34:	41 70       	andi	r20, 0x01	; 1
    2d36:	50 70       	andi	r21, 0x00	; 0
    2d38:	9a 01       	movw	r18, r20
    2d3a:	22 0f       	add	r18, r18
    2d3c:	33 1f       	adc	r19, r19
    2d3e:	22 95       	swap	r18
    2d40:	32 95       	swap	r19
    2d42:	30 7f       	andi	r19, 0xF0	; 240
    2d44:	32 27       	eor	r19, r18
    2d46:	20 7f       	andi	r18, 0xF0	; 240
    2d48:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d4a:	46 2f       	mov	r20, r22
    2d4c:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2d4e:	86 95       	lsr	r24
    2d50:	86 95       	lsr	r24
    2d52:	86 95       	lsr	r24
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	21 70       	andi	r18, 0x01	; 1
    2d5a:	30 70       	andi	r19, 0x00	; 0
    2d5c:	c9 01       	movw	r24, r18
    2d5e:	82 95       	swap	r24
    2d60:	92 95       	swap	r25
    2d62:	90 7f       	andi	r25, 0xF0	; 240
    2d64:	98 27       	eor	r25, r24
    2d66:	80 7f       	andi	r24, 0xF0	; 240
    2d68:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d6a:	84 2b       	or	r24, r20
    2d6c:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2d6e:	80 81       	ld	r24, Z
    2d70:	80 64       	ori	r24, 0x40	; 64
    2d72:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2d74:	80 81       	ld	r24, Z
    2d76:	8f 7b       	andi	r24, 0xBF	; 191
    2d78:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2d7a:	12 b8       	out	0x02, r1	; 2
	
	
    2d7c:	08 95       	ret

00002d7e <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2d7e:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2d80:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2d82:	74 83       	std	Z+4, r23	; 0x04
    2d84:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2d86:	11 82       	std	Z+1, r1	; 0x01
    2d88:	10 82       	st	Z, r1
}
    2d8a:	08 95       	ret

00002d8c <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	ec 01       	movw	r28, r24
    2d94:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2d96:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <store_and_clear_interrupt>
    2d9a:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2d9c:	39 81       	ldd	r19, Y+1	; 0x01
    2d9e:	83 2f       	mov	r24, r19
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	01 96       	adiw	r24, 0x01	; 1
    2da4:	6a 81       	ldd	r22, Y+2	; 0x02
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divmodhi4>
    2dac:	48 81       	ld	r20, Y
    2dae:	50 e0       	ldi	r21, 0x00	; 0
    2db0:	84 17       	cp	r24, r20
    2db2:	95 07       	cpc	r25, r21
    2db4:	29 f4       	brne	.+10     	; 0x2dc0 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2db6:	82 2f       	mov	r24, r18
    2db8:	0e 94 38 17 	call	0x2e70	; 0x2e70 <restore_interrupt_setting>
      return false;
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	11 c0       	rjmp	.+34     	; 0x2de2 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2dc0:	eb 81       	ldd	r30, Y+3	; 0x03
    2dc2:	fc 81       	ldd	r31, Y+4	; 0x04
    2dc4:	e3 0f       	add	r30, r19
    2dc6:	f1 1d       	adc	r31, r1
    2dc8:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	01 96       	adiw	r24, 0x01	; 1
    2dd0:	6a 81       	ldd	r22, Y+2	; 0x02
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divmodhi4>
    2dd8:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2dda:	82 2f       	mov	r24, r18
    2ddc:	0e 94 38 17 	call	0x2e70	; 0x2e70 <restore_interrupt_setting>
      return true;
    2de0:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2de2:	df 91       	pop	r29
    2de4:	cf 91       	pop	r28
    2de6:	1f 91       	pop	r17
    2de8:	08 95       	ret

00002dea <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2df0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2df4:	29 81       	ldd	r18, Y+1	; 0x01
    2df6:	98 81       	ld	r25, Y
    2df8:	29 17       	cp	r18, r25
    2dfa:	18 f0       	brcs	.+6      	; 0x2e02 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2dfc:	c2 2f       	mov	r28, r18
    2dfe:	c9 1b       	sub	r28, r25
    2e00:	03 c0       	rjmp	.+6      	; 0x2e08 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2e02:	ca 81       	ldd	r28, Y+2	; 0x02
    2e04:	c2 0f       	add	r28, r18
    2e06:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2e08:	0e 94 38 17 	call	0x2e70	; 0x2e70 <restore_interrupt_setting>
   return len;
}
    2e0c:	8c 2f       	mov	r24, r28
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	08 95       	ret

00002e14 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2e14:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2e16:	20 81       	ld	r18, Z
    2e18:	86 2f       	mov	r24, r22
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	82 0f       	add	r24, r18
    2e1e:	91 1d       	adc	r25, r1
    2e20:	62 81       	ldd	r22, Z+2	; 0x02
    2e22:	70 e0       	ldi	r23, 0x00	; 0
    2e24:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divmodhi4>
    2e28:	03 80       	ldd	r0, Z+3	; 0x03
    2e2a:	f4 81       	ldd	r31, Z+4	; 0x04
    2e2c:	e0 2d       	mov	r30, r0
    2e2e:	e8 0f       	add	r30, r24
    2e30:	f9 1f       	adc	r31, r25
}
    2e32:	80 81       	ld	r24, Z
    2e34:	08 95       	ret

00002e36 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	ec 01       	movw	r28, r24
    2e3e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2e40:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <store_and_clear_interrupt>
    2e44:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2e46:	88 81       	ld	r24, Y
    2e48:	21 2f       	mov	r18, r17
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	28 0f       	add	r18, r24
    2e4e:	31 1d       	adc	r19, r1
    2e50:	6a 81       	ldd	r22, Y+2	; 0x02
    2e52:	c9 01       	movw	r24, r18
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__divmodhi4>
    2e5a:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2e5c:	84 2f       	mov	r24, r20
    2e5e:	0e 94 38 17 	call	0x2e70	; 0x2e70 <restore_interrupt_setting>
}
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	1f 91       	pop	r17
    2e68:	08 95       	ret

00002e6a <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2e6a:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2e6c:	f8 94       	cli
   return sreg;
}
    2e6e:	08 95       	ret

00002e70 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2e70:	8f bf       	out	0x3f, r24	; 63
}
    2e72:	08 95       	ret

00002e74 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2e74:	88 1f       	adc	r24, r24
    2e76:	88 27       	eor	r24, r24
    2e78:	88 1f       	adc	r24, r24
    2e7a:	08 95       	ret

00002e7c <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	88 3f       	cpi	r24, 0xF8	; 248
    2e80:	08 f4       	brcc	.+2      	; 0x2e84 <midi_is_realtime+0x8>
    2e82:	90 e0       	ldi	r25, 0x00	; 0
}
    2e84:	89 2f       	mov	r24, r25
    2e86:	08 95       	ret

00002e88 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2e88:	28 2f       	mov	r18, r24
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	20 7f       	andi	r18, 0xF0	; 240
    2e8e:	30 70       	andi	r19, 0x00	; 0
    2e90:	20 3c       	cpi	r18, 0xC0	; 192
    2e92:	31 05       	cpc	r19, r1
    2e94:	e9 f1       	breq	.+122    	; 0x2f10 <midi_packet_length+0x88>
    2e96:	21 3c       	cpi	r18, 0xC1	; 193
    2e98:	31 05       	cpc	r19, r1
    2e9a:	8c f4       	brge	.+34     	; 0x2ebe <midi_packet_length+0x36>
    2e9c:	20 39       	cpi	r18, 0x90	; 144
    2e9e:	31 05       	cpc	r19, r1
    2ea0:	e1 f0       	breq	.+56     	; 0x2eda <midi_packet_length+0x52>
    2ea2:	21 39       	cpi	r18, 0x91	; 145
    2ea4:	31 05       	cpc	r19, r1
    2ea6:	24 f4       	brge	.+8      	; 0x2eb0 <midi_packet_length+0x28>
    2ea8:	20 38       	cpi	r18, 0x80	; 128
    2eaa:	31 05       	cpc	r19, r1
    2eac:	79 f5       	brne	.+94     	; 0x2f0c <midi_packet_length+0x84>
    2eae:	15 c0       	rjmp	.+42     	; 0x2eda <midi_packet_length+0x52>
    2eb0:	20 3a       	cpi	r18, 0xA0	; 160
    2eb2:	31 05       	cpc	r19, r1
    2eb4:	91 f0       	breq	.+36     	; 0x2eda <midi_packet_length+0x52>
    2eb6:	20 3b       	cpi	r18, 0xB0	; 176
    2eb8:	31 05       	cpc	r19, r1
    2eba:	41 f5       	brne	.+80     	; 0x2f0c <midi_packet_length+0x84>
    2ebc:	0e c0       	rjmp	.+28     	; 0x2eda <midi_packet_length+0x52>
    2ebe:	20 3e       	cpi	r18, 0xE0	; 224
    2ec0:	31 05       	cpc	r19, r1
    2ec2:	59 f0       	breq	.+22     	; 0x2eda <midi_packet_length+0x52>
    2ec4:	21 3e       	cpi	r18, 0xE1	; 225
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	24 f4       	brge	.+8      	; 0x2ed2 <midi_packet_length+0x4a>
    2eca:	20 3d       	cpi	r18, 0xD0	; 208
    2ecc:	31 05       	cpc	r19, r1
    2ece:	f1 f4       	brne	.+60     	; 0x2f0c <midi_packet_length+0x84>
    2ed0:	1f c0       	rjmp	.+62     	; 0x2f10 <midi_packet_length+0x88>
    2ed2:	20 3f       	cpi	r18, 0xF0	; 240
    2ed4:	31 05       	cpc	r19, r1
    2ed6:	d1 f4       	brne	.+52     	; 0x2f0c <midi_packet_length+0x84>
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2eda:	83 e0       	ldi	r24, 0x03	; 3
    2edc:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2ede:	86 3f       	cpi	r24, 0xF6	; 246
    2ee0:	79 f0       	breq	.+30     	; 0x2f00 <midi_packet_length+0x78>
    2ee2:	87 3f       	cpi	r24, 0xF7	; 247
    2ee4:	38 f4       	brcc	.+14     	; 0x2ef4 <midi_packet_length+0x6c>
    2ee6:	82 3f       	cpi	r24, 0xF2	; 242
    2ee8:	a9 f0       	breq	.+42     	; 0x2f14 <midi_packet_length+0x8c>
    2eea:	83 3f       	cpi	r24, 0xF3	; 243
    2eec:	59 f0       	breq	.+22     	; 0x2f04 <midi_packet_length+0x7c>
    2eee:	81 3f       	cpi	r24, 0xF1	; 241
    2ef0:	59 f4       	brne	.+22     	; 0x2f08 <midi_packet_length+0x80>
    2ef2:	08 c0       	rjmp	.+16     	; 0x2f04 <midi_packet_length+0x7c>
    2ef4:	88 3f       	cpi	r24, 0xF8	; 248
    2ef6:	40 f0       	brcs	.+16     	; 0x2f08 <midi_packet_length+0x80>
    2ef8:	8d 3f       	cpi	r24, 0xFD	; 253
    2efa:	10 f0       	brcs	.+4      	; 0x2f00 <midi_packet_length+0x78>
    2efc:	8e 3f       	cpi	r24, 0xFE	; 254
    2efe:	20 f0       	brcs	.+8      	; 0x2f08 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2f14:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2f16:	08 95       	ret

00002f18 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2f18:	0f 93       	push	r16
    2f1a:	34 2f       	mov	r19, r20
    2f1c:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2f1e:	46 2f       	mov	r20, r22
    2f20:	4f 70       	andi	r20, 0x0F	; 15
    2f22:	40 6b       	ori	r20, 0xB0	; 176
    2f24:	23 2f       	mov	r18, r19
    2f26:	2f 77       	andi	r18, 0x7F	; 127
    2f28:	0f 77       	andi	r16, 0x7F	; 127
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	ed 91       	ld	r30, X+
    2f2e:	fc 91       	ld	r31, X
    2f30:	63 e0       	ldi	r22, 0x03	; 3
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2f36:	0f 91       	pop	r16
    2f38:	08 95       	ret

00002f3a <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2f3a:	0f 93       	push	r16
    2f3c:	34 2f       	mov	r19, r20
    2f3e:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2f40:	46 2f       	mov	r20, r22
    2f42:	4f 70       	andi	r20, 0x0F	; 15
    2f44:	40 69       	ori	r20, 0x90	; 144
    2f46:	23 2f       	mov	r18, r19
    2f48:	2f 77       	andi	r18, 0x7F	; 127
    2f4a:	0f 77       	andi	r16, 0x7F	; 127
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	ed 91       	ld	r30, X+
    2f50:	fc 91       	ld	r31, X
    2f52:	63 e0       	ldi	r22, 0x03	; 3
    2f54:	70 e0       	ldi	r23, 0x00	; 0
    2f56:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2f58:	0f 91       	pop	r16
    2f5a:	08 95       	ret

00002f5c <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2f5c:	0f 93       	push	r16
    2f5e:	34 2f       	mov	r19, r20
    2f60:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2f62:	46 2f       	mov	r20, r22
    2f64:	4f 70       	andi	r20, 0x0F	; 15
    2f66:	40 68       	ori	r20, 0x80	; 128
    2f68:	23 2f       	mov	r18, r19
    2f6a:	2f 77       	andi	r18, 0x7F	; 127
    2f6c:	0f 77       	andi	r16, 0x7F	; 127
    2f6e:	dc 01       	movw	r26, r24
    2f70:	ed 91       	ld	r30, X+
    2f72:	fc 91       	ld	r31, X
    2f74:	63 e0       	ldi	r22, 0x03	; 3
    2f76:	70 e0       	ldi	r23, 0x00	; 0
    2f78:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2f7a:	0f 91       	pop	r16
    2f7c:	08 95       	ret

00002f7e <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2f7e:	0f 93       	push	r16
    2f80:	34 2f       	mov	r19, r20
    2f82:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2f84:	46 2f       	mov	r20, r22
    2f86:	4f 70       	andi	r20, 0x0F	; 15
    2f88:	40 6a       	ori	r20, 0xA0	; 160
    2f8a:	23 2f       	mov	r18, r19
    2f8c:	2f 77       	andi	r18, 0x7F	; 127
    2f8e:	0f 77       	andi	r16, 0x7F	; 127
    2f90:	dc 01       	movw	r26, r24
    2f92:	ed 91       	ld	r30, X+
    2f94:	fc 91       	ld	r31, X
    2f96:	63 e0       	ldi	r22, 0x03	; 3
    2f98:	70 e0       	ldi	r23, 0x00	; 0
    2f9a:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2f9c:	0f 91       	pop	r16
    2f9e:	08 95       	ret

00002fa0 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2fa0:	0f 93       	push	r16
    2fa2:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2fa4:	20 e2       	ldi	r18, 0x20	; 32
    2fa6:	40 30       	cpi	r20, 0x00	; 0
    2fa8:	52 07       	cpc	r21, r18
    2faa:	44 f4       	brge	.+16     	; 0x2fbc <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2fac:	a0 ee       	ldi	r26, 0xE0	; 224
    2fae:	40 30       	cpi	r20, 0x00	; 0
    2fb0:	5a 07       	cpc	r21, r26
    2fb2:	3c f0       	brlt	.+14     	; 0x2fc2 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2fb4:	8a 01       	movw	r16, r20
    2fb6:	00 50       	subi	r16, 0x00	; 0
    2fb8:	10 4e       	sbci	r17, 0xE0	; 224
    2fba:	05 c0       	rjmp	.+10     	; 0x2fc6 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2fbc:	0f ef       	ldi	r16, 0xFF	; 255
    2fbe:	1f e3       	ldi	r17, 0x3F	; 63
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2fc2:	00 e0       	ldi	r16, 0x00	; 0
    2fc4:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2fc6:	46 2f       	mov	r20, r22
    2fc8:	4f 70       	andi	r20, 0x0F	; 15
    2fca:	40 6e       	ori	r20, 0xE0	; 224
    2fcc:	20 2f       	mov	r18, r16
    2fce:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2fd0:	00 0f       	add	r16, r16
    2fd2:	01 2f       	mov	r16, r17
    2fd4:	00 1f       	adc	r16, r16
    2fd6:	11 0b       	sbc	r17, r17
    2fd8:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2fda:	0f 77       	andi	r16, 0x7F	; 127
    2fdc:	dc 01       	movw	r26, r24
    2fde:	ed 91       	ld	r30, X+
    2fe0:	fc 91       	ld	r31, X
    2fe2:	63 e0       	ldi	r22, 0x03	; 3
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2fe8:	1f 91       	pop	r17
    2fea:	0f 91       	pop	r16
    2fec:	08 95       	ret

00002fee <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2fee:	0f 93       	push	r16
    2ff0:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2ff2:	46 2f       	mov	r20, r22
    2ff4:	4f 70       	andi	r20, 0x0F	; 15
    2ff6:	40 6c       	ori	r20, 0xC0	; 192
    2ff8:	2f 77       	andi	r18, 0x7F	; 127
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	ed 91       	ld	r30, X+
    2ffe:	fc 91       	ld	r31, X
    3000:	62 e0       	ldi	r22, 0x02	; 2
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	00 e0       	ldi	r16, 0x00	; 0
    3006:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    3008:	0f 91       	pop	r16
    300a:	08 95       	ret

0000300c <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    300c:	0f 93       	push	r16
    300e:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    3010:	46 2f       	mov	r20, r22
    3012:	4f 70       	andi	r20, 0x0F	; 15
    3014:	40 6d       	ori	r20, 0xD0	; 208
    3016:	2f 77       	andi	r18, 0x7F	; 127
    3018:	dc 01       	movw	r26, r24
    301a:	ed 91       	ld	r30, X+
    301c:	fc 91       	ld	r31, X
    301e:	62 e0       	ldi	r22, 0x02	; 2
    3020:	70 e0       	ldi	r23, 0x00	; 0
    3022:	00 e0       	ldi	r16, 0x00	; 0
    3024:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    3026:	0f 91       	pop	r16
    3028:	08 95       	ret

0000302a <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    302a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    302c:	dc 01       	movw	r26, r24
    302e:	ed 91       	ld	r30, X+
    3030:	fc 91       	ld	r31, X
    3032:	61 e0       	ldi	r22, 0x01	; 1
    3034:	70 e0       	ldi	r23, 0x00	; 0
    3036:	48 ef       	ldi	r20, 0xF8	; 248
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	00 e0       	ldi	r16, 0x00	; 0
    303c:	09 95       	icall
}
    303e:	0f 91       	pop	r16
    3040:	08 95       	ret

00003042 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    3042:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    3044:	dc 01       	movw	r26, r24
    3046:	ed 91       	ld	r30, X+
    3048:	fc 91       	ld	r31, X
    304a:	61 e0       	ldi	r22, 0x01	; 1
    304c:	70 e0       	ldi	r23, 0x00	; 0
    304e:	49 ef       	ldi	r20, 0xF9	; 249
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	00 e0       	ldi	r16, 0x00	; 0
    3054:	09 95       	icall
}
    3056:	0f 91       	pop	r16
    3058:	08 95       	ret

0000305a <midi_send_start>:

void midi_send_start(MidiDevice * device){
    305a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    305c:	dc 01       	movw	r26, r24
    305e:	ed 91       	ld	r30, X+
    3060:	fc 91       	ld	r31, X
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	4a ef       	ldi	r20, 0xFA	; 250
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	00 e0       	ldi	r16, 0x00	; 0
    306c:	09 95       	icall
}
    306e:	0f 91       	pop	r16
    3070:	08 95       	ret

00003072 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    3072:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    3074:	dc 01       	movw	r26, r24
    3076:	ed 91       	ld	r30, X+
    3078:	fc 91       	ld	r31, X
    307a:	61 e0       	ldi	r22, 0x01	; 1
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	4b ef       	ldi	r20, 0xFB	; 251
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	00 e0       	ldi	r16, 0x00	; 0
    3084:	09 95       	icall
}
    3086:	0f 91       	pop	r16
    3088:	08 95       	ret

0000308a <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    308a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    308c:	dc 01       	movw	r26, r24
    308e:	ed 91       	ld	r30, X+
    3090:	fc 91       	ld	r31, X
    3092:	61 e0       	ldi	r22, 0x01	; 1
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	4c ef       	ldi	r20, 0xFC	; 252
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	00 e0       	ldi	r16, 0x00	; 0
    309c:	09 95       	icall
}
    309e:	0f 91       	pop	r16
    30a0:	08 95       	ret

000030a2 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    30a2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    30a4:	dc 01       	movw	r26, r24
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	61 e0       	ldi	r22, 0x01	; 1
    30ac:	70 e0       	ldi	r23, 0x00	; 0
    30ae:	4e ef       	ldi	r20, 0xFE	; 254
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	00 e0       	ldi	r16, 0x00	; 0
    30b4:	09 95       	icall
}
    30b6:	0f 91       	pop	r16
    30b8:	08 95       	ret

000030ba <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    30ba:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    30bc:	dc 01       	movw	r26, r24
    30be:	ed 91       	ld	r30, X+
    30c0:	fc 91       	ld	r31, X
    30c2:	61 e0       	ldi	r22, 0x01	; 1
    30c4:	70 e0       	ldi	r23, 0x00	; 0
    30c6:	4f ef       	ldi	r20, 0xFF	; 255
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	00 e0       	ldi	r16, 0x00	; 0
    30cc:	09 95       	icall
}
    30ce:	0f 91       	pop	r16
    30d0:	08 95       	ret

000030d2 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    30d2:	0f 93       	push	r16
   device->send_func(device, 2,
    30d4:	26 2f       	mov	r18, r22
    30d6:	2f 77       	andi	r18, 0x7F	; 127
    30d8:	dc 01       	movw	r26, r24
    30da:	ed 91       	ld	r30, X+
    30dc:	fc 91       	ld	r31, X
    30de:	62 e0       	ldi	r22, 0x02	; 2
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	41 ef       	ldi	r20, 0xF1	; 241
    30e4:	00 e0       	ldi	r16, 0x00	; 0
    30e6:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    30e8:	0f 91       	pop	r16
    30ea:	08 95       	ret

000030ec <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    30ec:	0f 93       	push	r16
    30ee:	1f 93       	push	r17
   device->send_func(device, 3,
    30f0:	26 2f       	mov	r18, r22
    30f2:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    30f4:	8b 01       	movw	r16, r22
    30f6:	00 0f       	add	r16, r16
    30f8:	01 2f       	mov	r16, r17
    30fa:	00 1f       	adc	r16, r16
    30fc:	11 0b       	sbc	r17, r17
    30fe:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    3100:	0f 77       	andi	r16, 0x7F	; 127
    3102:	dc 01       	movw	r26, r24
    3104:	ed 91       	ld	r30, X+
    3106:	fc 91       	ld	r31, X
    3108:	63 e0       	ldi	r22, 0x03	; 3
    310a:	70 e0       	ldi	r23, 0x00	; 0
    310c:	42 ef       	ldi	r20, 0xF2	; 242
    310e:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	08 95       	ret

00003116 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    3116:	0f 93       	push	r16
   device->send_func(device, 2,
    3118:	26 2f       	mov	r18, r22
    311a:	2f 77       	andi	r18, 0x7F	; 127
    311c:	dc 01       	movw	r26, r24
    311e:	ed 91       	ld	r30, X+
    3120:	fc 91       	ld	r31, X
    3122:	62 e0       	ldi	r22, 0x02	; 2
    3124:	70 e0       	ldi	r23, 0x00	; 0
    3126:	43 ef       	ldi	r20, 0xF3	; 243
    3128:	00 e0       	ldi	r16, 0x00	; 0
    312a:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    312c:	0f 91       	pop	r16
    312e:	08 95       	ret

00003130 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    3130:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    3132:	dc 01       	movw	r26, r24
    3134:	ed 91       	ld	r30, X+
    3136:	fc 91       	ld	r31, X
    3138:	61 e0       	ldi	r22, 0x01	; 1
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	46 ef       	ldi	r20, 0xF6	; 246
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	00 e0       	ldi	r16, 0x00	; 0
    3142:	09 95       	icall
}
    3144:	0f 91       	pop	r16
    3146:	08 95       	ret

00003148 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    3148:	0f 93       	push	r16
    314a:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    314c:	dc 01       	movw	r26, r24
    314e:	ed 91       	ld	r30, X+
    3150:	fc 91       	ld	r31, X
    3152:	61 e0       	ldi	r22, 0x01	; 1
    3154:	70 e0       	ldi	r23, 0x00	; 0
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	00 e0       	ldi	r16, 0x00	; 0
    315a:	09 95       	icall
}
    315c:	0f 91       	pop	r16
    315e:	08 95       	ret

00003160 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    3160:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    3162:	dc 01       	movw	r26, r24
    3164:	ed 91       	ld	r30, X+
    3166:	fc 91       	ld	r31, X
    3168:	09 95       	icall
}
    316a:	0f 91       	pop	r16
    316c:	08 95       	ret

0000316e <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    316e:	6f 92       	push	r6
    3170:	7f 92       	push	r7
    3172:	8f 92       	push	r8
    3174:	9f 92       	push	r9
    3176:	af 92       	push	r10
    3178:	bf 92       	push	r11
    317a:	cf 92       	push	r12
    317c:	df 92       	push	r13
    317e:	ef 92       	push	r14
    3180:	ff 92       	push	r15
    3182:	0f 93       	push	r16
    3184:	1f 93       	push	r17
    3186:	cf 93       	push	r28
    3188:	df 93       	push	r29
    318a:	00 d0       	rcall	.+0      	; 0x318c <midi_send_array+0x1e>
    318c:	0f 92       	push	r0
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	4c 01       	movw	r8, r24
    3194:	6b 01       	movw	r12, r22
    3196:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    3198:	61 15       	cp	r22, r1
    319a:	71 05       	cpc	r23, r1
    319c:	41 f1       	breq	.+80     	; 0x31ee <midi_send_array+0x80>
    319e:	ee 24       	eor	r14, r14
    31a0:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    31a2:	0f 2e       	mov	r0, r31
    31a4:	f3 e0       	ldi	r31, 0x03	; 3
    31a6:	6f 2e       	mov	r6, r31
    31a8:	77 24       	eor	r7, r7
    31aa:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    31ac:	19 82       	std	Y+1, r1	; 0x01
    31ae:	1a 82       	std	Y+2, r1	; 0x02
    31b0:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    31b2:	86 01       	movw	r16, r12
    31b4:	0e 19       	sub	r16, r14
    31b6:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    31b8:	04 30       	cpi	r16, 0x04	; 4
    31ba:	11 05       	cpc	r17, r1
    31bc:	08 f0       	brcs	.+2      	; 0x31c0 <midi_send_array+0x52>
    31be:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    31c0:	b5 01       	movw	r22, r10
    31c2:	6e 0d       	add	r22, r14
    31c4:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    31c6:	ce 01       	movw	r24, r28
    31c8:	01 96       	adiw	r24, 0x01	; 1
    31ca:	40 2f       	mov	r20, r16
    31cc:	51 2f       	mov	r21, r17
    31ce:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    31d2:	c4 01       	movw	r24, r8
    31d4:	b8 01       	movw	r22, r16
    31d6:	49 81       	ldd	r20, Y+1	; 0x01
    31d8:	2a 81       	ldd	r18, Y+2	; 0x02
    31da:	0b 81       	ldd	r16, Y+3	; 0x03
    31dc:	0e 94 b0 18 	call	0x3160	; 0x3160 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    31e0:	83 e0       	ldi	r24, 0x03	; 3
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	e8 0e       	add	r14, r24
    31e6:	f9 1e       	adc	r15, r25
    31e8:	ec 14       	cp	r14, r12
    31ea:	fd 04       	cpc	r15, r13
    31ec:	f8 f2       	brcs	.-66     	; 0x31ac <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	1f 91       	pop	r17
    31fa:	0f 91       	pop	r16
    31fc:	ff 90       	pop	r15
    31fe:	ef 90       	pop	r14
    3200:	df 90       	pop	r13
    3202:	cf 90       	pop	r12
    3204:	bf 90       	pop	r11
    3206:	af 90       	pop	r10
    3208:	9f 90       	pop	r9
    320a:	8f 90       	pop	r8
    320c:	7f 90       	pop	r7
    320e:	6f 90       	pop	r6
    3210:	08 95       	ret

00003212 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    3212:	fc 01       	movw	r30, r24
    3214:	73 83       	std	Z+3, r23	; 0x03
    3216:	62 83       	std	Z+2, r22	; 0x02
}
    3218:	08 95       	ret

0000321a <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    321a:	fc 01       	movw	r30, r24
    321c:	75 83       	std	Z+5, r23	; 0x05
    321e:	64 83       	std	Z+4, r22	; 0x04
}
    3220:	08 95       	ret

00003222 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    3222:	fc 01       	movw	r30, r24
    3224:	77 83       	std	Z+7, r23	; 0x07
    3226:	66 83       	std	Z+6, r22	; 0x06
}
    3228:	08 95       	ret

0000322a <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    322a:	fc 01       	movw	r30, r24
    322c:	71 87       	std	Z+9, r23	; 0x09
    322e:	60 87       	std	Z+8, r22	; 0x08
}
    3230:	08 95       	ret

00003232 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    3232:	fc 01       	movw	r30, r24
    3234:	73 87       	std	Z+11, r23	; 0x0b
    3236:	62 87       	std	Z+10, r22	; 0x0a
}
    3238:	08 95       	ret

0000323a <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    323a:	fc 01       	movw	r30, r24
    323c:	75 87       	std	Z+13, r23	; 0x0d
    323e:	64 87       	std	Z+12, r22	; 0x0c
}
    3240:	08 95       	ret

00003242 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    3242:	fc 01       	movw	r30, r24
    3244:	77 87       	std	Z+15, r23	; 0x0f
    3246:	66 87       	std	Z+14, r22	; 0x0e
}
    3248:	08 95       	ret

0000324a <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    324a:	fc 01       	movw	r30, r24
    324c:	71 8b       	std	Z+17, r23	; 0x11
    324e:	60 8b       	std	Z+16, r22	; 0x10
}
    3250:	08 95       	ret

00003252 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    3252:	fc 01       	movw	r30, r24
    3254:	73 8b       	std	Z+19, r23	; 0x13
    3256:	62 8b       	std	Z+18, r22	; 0x12
}
    3258:	08 95       	ret

0000325a <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    325a:	fc 01       	movw	r30, r24
    325c:	75 8b       	std	Z+21, r23	; 0x15
    325e:	64 8b       	std	Z+20, r22	; 0x14
}
    3260:	08 95       	ret

00003262 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    3262:	fc 01       	movw	r30, r24
    3264:	77 8b       	std	Z+23, r23	; 0x17
    3266:	66 8b       	std	Z+22, r22	; 0x16
}
    3268:	08 95       	ret

0000326a <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    326a:	fc 01       	movw	r30, r24
    326c:	71 8f       	std	Z+25, r23	; 0x19
    326e:	60 8f       	std	Z+24, r22	; 0x18
}
    3270:	08 95       	ret

00003272 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    3272:	fc 01       	movw	r30, r24
    3274:	73 8f       	std	Z+27, r23	; 0x1b
    3276:	62 8f       	std	Z+26, r22	; 0x1a
}
    3278:	08 95       	ret

0000327a <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    327a:	fc 01       	movw	r30, r24
    327c:	75 8f       	std	Z+29, r23	; 0x1d
    327e:	64 8f       	std	Z+28, r22	; 0x1c
}
    3280:	08 95       	ret

00003282 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    3282:	fc 01       	movw	r30, r24
    3284:	77 8f       	std	Z+31, r23	; 0x1f
    3286:	66 8f       	std	Z+30, r22	; 0x1e
}
    3288:	08 95       	ret

0000328a <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    3290:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    3292:	1f a2       	lds	r17, 0x9f
    3294:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    3296:	bc 01       	movw	r22, r24
    3298:	68 5d       	subi	r22, 0xD8	; 216
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	88 51       	subi	r24, 0x18	; 24
    329e:	9f 4f       	sbci	r25, 0xFF	; 255
    32a0:	40 ec       	ldi	r20, 0xC0	; 192
    32a2:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    32a6:	1b 82       	std	Y+3, r1	; 0x03
    32a8:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    32aa:	1d 82       	std	Y+5, r1	; 0x05
    32ac:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    32ae:	1f 82       	std	Y+7, r1	; 0x07
    32b0:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    32b2:	19 86       	std	Y+9, r1	; 0x09
    32b4:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    32b6:	1b 86       	std	Y+11, r1	; 0x0b
    32b8:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    32ba:	1d 86       	std	Y+13, r1	; 0x0d
    32bc:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    32be:	1f 86       	std	Y+15, r1	; 0x0f
    32c0:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    32c2:	19 8a       	std	Y+17, r1	; 0x11
    32c4:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    32c6:	1b 8a       	std	Y+19, r1	; 0x13
    32c8:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    32ca:	1d 8a       	std	Y+21, r1	; 0x15
    32cc:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    32ce:	1f 8a       	std	Y+23, r1	; 0x17
    32d0:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    32d2:	19 8e       	std	Y+25, r1	; 0x19
    32d4:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    32d6:	1b 8e       	std	Y+27, r1	; 0x1b
    32d8:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    32da:	1d 8e       	std	Y+29, r1	; 0x1d
    32dc:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    32de:	1f 8e       	std	Y+31, r1	; 0x1f
    32e0:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    32e2:	19 a2       	lds	r17, 0x99
    32e4:	18 a2       	lds	r17, 0x98
}
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	08 95       	ret

000032ec <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    32ec:	ef 92       	push	r14
    32ee:	ff 92       	push	r15
    32f0:	0f 93       	push	r16
    32f2:	1f 93       	push	r17
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    32fa:	66 23       	and	r22, r22
    32fc:	99 f0       	breq	.+38     	; 0x3324 <midi_device_input+0x38>
    32fe:	04 2f       	mov	r16, r20
    3300:	15 2f       	mov	r17, r21
    3302:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    3304:	0f 2e       	mov	r0, r31
    3306:	f8 ee       	ldi	r31, 0xE8	; 232
    3308:	ef 2e       	mov	r14, r31
    330a:	ff 24       	eor	r15, r15
    330c:	f0 2d       	mov	r31, r0
    330e:	e8 0e       	add	r14, r24
    3310:	f9 1e       	adc	r15, r25
    3312:	f8 01       	movw	r30, r16
    3314:	61 91       	ld	r22, Z+
    3316:	8f 01       	movw	r16, r30
    3318:	c7 01       	movw	r24, r14
    331a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    331e:	cf 5f       	subi	r28, 0xFF	; 255
    3320:	cd 17       	cp	r28, r29
    3322:	b9 f7       	brne	.-18     	; 0x3312 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    3324:	df 91       	pop	r29
    3326:	cf 91       	pop	r28
    3328:	1f 91       	pop	r17
    332a:	0f 91       	pop	r16
    332c:	ff 90       	pop	r15
    332e:	ef 90       	pop	r14
    3330:	08 95       	ret

00003332 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    3332:	fc 01       	movw	r30, r24
    3334:	71 83       	std	Z+1, r23	; 0x01
    3336:	60 83       	st	Z, r22
}
    3338:	08 95       	ret

0000333a <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    333a:	fc 01       	movw	r30, r24
    333c:	71 a3       	lds	r23, 0x51
    333e:	60 a3       	lds	r22, 0x50
}
    3340:	08 95       	ret

00003342 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    3342:	af 92       	push	r10
    3344:	bf 92       	push	r11
    3346:	cf 92       	push	r12
    3348:	df 92       	push	r13
    334a:	ef 92       	push	r14
    334c:	ff 92       	push	r15
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	00 d0       	rcall	.+0      	; 0x3358 <midi_input_callbacks+0x16>
    3358:	0f 92       	push	r0
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
    335e:	6c 01       	movw	r12, r24
    3360:	5b 01       	movw	r10, r22
    3362:	f4 2e       	mov	r15, r20
    3364:	e2 2e       	mov	r14, r18
    3366:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    3368:	dc 01       	movw	r26, r24
    336a:	95 96       	adiw	r26, 0x25	; 37
    336c:	8c 91       	ld	r24, X
    336e:	95 97       	sbiw	r26, 0x25	; 37
    3370:	84 30       	cpi	r24, 0x04	; 4
    3372:	e9 f4       	brne	.+58     	; 0x33ae <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    3374:	5a 96       	adiw	r26, 0x1a	; 26
    3376:	ed 91       	ld	r30, X+
    3378:	fc 91       	ld	r31, X
    337a:	5b 97       	sbiw	r26, 0x1b	; 27
    337c:	30 97       	sbiw	r30, 0x00	; 0
    337e:	09 f4       	brne	.+2      	; 0x3382 <midi_input_callbacks+0x40>
    3380:	ee c0       	rjmp	.+476    	; 0x355e <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    3382:	cb 01       	movw	r24, r22
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	63 e0       	ldi	r22, 0x03	; 3
    3388:	70 e0       	ldi	r23, 0x00	; 0
    338a:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__udivmodhi4>
    338e:	cb 01       	movw	r24, r22
    3390:	88 0f       	add	r24, r24
    3392:	99 1f       	adc	r25, r25
    3394:	68 0f       	add	r22, r24
    3396:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    3398:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    339a:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    339c:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    339e:	4a 2d       	mov	r20, r10
    33a0:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    33a2:	c6 01       	movw	r24, r12
    33a4:	9e 01       	movw	r18, r28
    33a6:	2f 5f       	subi	r18, 0xFF	; 255
    33a8:	3f 4f       	sbci	r19, 0xFF	; 255
    33aa:	09 95       	icall
    33ac:	c8 c0       	rjmp	.+400    	; 0x353e <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    33ae:	62 30       	cpi	r22, 0x02	; 2
    33b0:	71 05       	cpc	r23, r1
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <midi_input_callbacks+0x74>
    33b4:	5f c0       	rjmp	.+190    	; 0x3474 <midi_input_callbacks+0x132>
    33b6:	63 30       	cpi	r22, 0x03	; 3
    33b8:	71 05       	cpc	r23, r1
    33ba:	29 f0       	breq	.+10     	; 0x33c6 <midi_input_callbacks+0x84>
    33bc:	61 30       	cpi	r22, 0x01	; 1
    33be:	71 05       	cpc	r23, r1
    33c0:	09 f0       	breq	.+2      	; 0x33c4 <midi_input_callbacks+0x82>
    33c2:	b3 c0       	rjmp	.+358    	; 0x352a <midi_input_callbacks+0x1e8>
    33c4:	99 c0       	rjmp	.+306    	; 0x34f8 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    33c6:	84 2f       	mov	r24, r20
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	80 7f       	andi	r24, 0xF0	; 240
    33cc:	90 70       	andi	r25, 0x00	; 0
    33ce:	80 3a       	cpi	r24, 0xA0	; 160
    33d0:	91 05       	cpc	r25, r1
    33d2:	29 f1       	breq	.+74     	; 0x341e <midi_input_callbacks+0xdc>
    33d4:	81 3a       	cpi	r24, 0xA1	; 161
    33d6:	91 05       	cpc	r25, r1
    33d8:	3c f4       	brge	.+14     	; 0x33e8 <midi_input_callbacks+0xa6>
    33da:	80 38       	cpi	r24, 0x80	; 128
    33dc:	91 05       	cpc	r25, r1
    33de:	c9 f0       	breq	.+50     	; 0x3412 <midi_input_callbacks+0xd0>
    33e0:	80 39       	cpi	r24, 0x90	; 144
    33e2:	91 05       	cpc	r25, r1
    33e4:	91 f5       	brne	.+100    	; 0x344a <midi_input_callbacks+0x108>
    33e6:	0f c0       	rjmp	.+30     	; 0x3406 <midi_input_callbacks+0xc4>
    33e8:	80 3e       	cpi	r24, 0xE0	; 224
    33ea:	91 05       	cpc	r25, r1
    33ec:	f1 f0       	breq	.+60     	; 0x342a <midi_input_callbacks+0xe8>
    33ee:	80 3f       	cpi	r24, 0xF0	; 240
    33f0:	91 05       	cpc	r25, r1
    33f2:	09 f1       	breq	.+66     	; 0x3436 <midi_input_callbacks+0xf4>
    33f4:	80 3b       	cpi	r24, 0xB0	; 176
    33f6:	91 05       	cpc	r25, r1
    33f8:	41 f5       	brne	.+80     	; 0x344a <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    33fa:	d6 01       	movw	r26, r12
    33fc:	12 96       	adiw	r26, 0x02	; 2
    33fe:	ed 91       	ld	r30, X+
    3400:	fc 91       	ld	r31, X
    3402:	13 97       	sbiw	r26, 0x03	; 3
              break;
    3404:	24 c0       	rjmp	.+72     	; 0x344e <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    3406:	d6 01       	movw	r26, r12
    3408:	14 96       	adiw	r26, 0x04	; 4
    340a:	ed 91       	ld	r30, X+
    340c:	fc 91       	ld	r31, X
    340e:	15 97       	sbiw	r26, 0x05	; 5
              break;
    3410:	1e c0       	rjmp	.+60     	; 0x344e <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    3412:	d6 01       	movw	r26, r12
    3414:	16 96       	adiw	r26, 0x06	; 6
    3416:	ed 91       	ld	r30, X+
    3418:	fc 91       	ld	r31, X
    341a:	17 97       	sbiw	r26, 0x07	; 7
              break;
    341c:	18 c0       	rjmp	.+48     	; 0x344e <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    341e:	d6 01       	movw	r26, r12
    3420:	18 96       	adiw	r26, 0x08	; 8
    3422:	ed 91       	ld	r30, X+
    3424:	fc 91       	ld	r31, X
    3426:	19 97       	sbiw	r26, 0x09	; 9
              break;
    3428:	12 c0       	rjmp	.+36     	; 0x344e <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    342a:	d6 01       	movw	r26, r12
    342c:	1a 96       	adiw	r26, 0x0a	; 10
    342e:	ed 91       	ld	r30, X+
    3430:	fc 91       	ld	r31, X
    3432:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    3434:	0c c0       	rjmp	.+24     	; 0x344e <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    3436:	b2 ef       	ldi	r27, 0xF2	; 242
    3438:	4b 17       	cp	r20, r27
    343a:	09 f0       	breq	.+2      	; 0x343e <midi_input_callbacks+0xfc>
    343c:	90 c0       	rjmp	.+288    	; 0x355e <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    343e:	d6 01       	movw	r26, r12
    3440:	1c 96       	adiw	r26, 0x0c	; 12
    3442:	ed 91       	ld	r30, X+
    3444:	fc 91       	ld	r31, X
    3446:	1d 97       	sbiw	r26, 0x0d	; 13
    3448:	02 c0       	rjmp	.+4      	; 0x344e <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    344a:	e0 e0       	ldi	r30, 0x00	; 0
    344c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    344e:	30 97       	sbiw	r30, 0x00	; 0
    3450:	09 f4       	brne	.+2      	; 0x3454 <midi_input_callbacks+0x112>
    3452:	85 c0       	rjmp	.+266    	; 0x355e <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    3454:	b2 ef       	ldi	r27, 0xF2	; 242
    3456:	fb 16       	cp	r15, r27
    3458:	31 f4       	brne	.+12     	; 0x3466 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    345a:	c6 01       	movw	r24, r12
    345c:	62 ef       	ldi	r22, 0xF2	; 242
    345e:	4e 2d       	mov	r20, r14
    3460:	21 2f       	mov	r18, r17
    3462:	09 95       	icall
    3464:	6c c0       	rjmp	.+216    	; 0x353e <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    3466:	6f 2d       	mov	r22, r15
    3468:	6f 70       	andi	r22, 0x0F	; 15
    346a:	c6 01       	movw	r24, r12
    346c:	4e 2d       	mov	r20, r14
    346e:	21 2f       	mov	r18, r17
    3470:	09 95       	icall
    3472:	65 c0       	rjmp	.+202    	; 0x353e <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3474:	84 2f       	mov	r24, r20
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	80 7f       	andi	r24, 0xF0	; 240
    347a:	90 70       	andi	r25, 0x00	; 0
    347c:	80 3d       	cpi	r24, 0xD0	; 208
    347e:	91 05       	cpc	r25, r1
    3480:	61 f0       	breq	.+24     	; 0x349a <midi_input_callbacks+0x158>
    3482:	80 3f       	cpi	r24, 0xF0	; 240
    3484:	91 05       	cpc	r25, r1
    3486:	79 f0       	breq	.+30     	; 0x34a6 <midi_input_callbacks+0x164>
    3488:	80 3c       	cpi	r24, 0xC0	; 192
    348a:	91 05       	cpc	r25, r1
    348c:	f9 f4       	brne	.+62     	; 0x34cc <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    348e:	d6 01       	movw	r26, r12
    3490:	1e 96       	adiw	r26, 0x0e	; 14
    3492:	ed 91       	ld	r30, X+
    3494:	fc 91       	ld	r31, X
    3496:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    3498:	1b c0       	rjmp	.+54     	; 0x34d0 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    349a:	d6 01       	movw	r26, r12
    349c:	50 96       	adiw	r26, 0x10	; 16
    349e:	ed 91       	ld	r30, X+
    34a0:	fc 91       	ld	r31, X
    34a2:	51 97       	sbiw	r26, 0x11	; 17
              break;
    34a4:	15 c0       	rjmp	.+42     	; 0x34d0 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    34a6:	b3 ef       	ldi	r27, 0xF3	; 243
    34a8:	4b 17       	cp	r20, r27
    34aa:	31 f4       	brne	.+12     	; 0x34b8 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    34ac:	d6 01       	movw	r26, r12
    34ae:	52 96       	adiw	r26, 0x12	; 18
    34b0:	ed 91       	ld	r30, X+
    34b2:	fc 91       	ld	r31, X
    34b4:	53 97       	sbiw	r26, 0x13	; 19
    34b6:	0c c0       	rjmp	.+24     	; 0x34d0 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    34b8:	b1 ef       	ldi	r27, 0xF1	; 241
    34ba:	4b 17       	cp	r20, r27
    34bc:	09 f0       	breq	.+2      	; 0x34c0 <midi_input_callbacks+0x17e>
    34be:	4f c0       	rjmp	.+158    	; 0x355e <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    34c0:	d6 01       	movw	r26, r12
    34c2:	54 96       	adiw	r26, 0x14	; 20
    34c4:	ed 91       	ld	r30, X+
    34c6:	fc 91       	ld	r31, X
    34c8:	55 97       	sbiw	r26, 0x15	; 21
    34ca:	02 c0       	rjmp	.+4      	; 0x34d0 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    34cc:	e0 e0       	ldi	r30, 0x00	; 0
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    34d0:	30 97       	sbiw	r30, 0x00	; 0
    34d2:	09 f4       	brne	.+2      	; 0x34d6 <midi_input_callbacks+0x194>
    34d4:	44 c0       	rjmp	.+136    	; 0x355e <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    34d6:	b3 ef       	ldi	r27, 0xF3	; 243
    34d8:	fb 16       	cp	r15, r27
    34da:	19 f0       	breq	.+6      	; 0x34e2 <midi_input_callbacks+0x1a0>
    34dc:	81 ef       	ldi	r24, 0xF1	; 241
    34de:	f8 16       	cp	r15, r24
    34e0:	29 f4       	brne	.+10     	; 0x34ec <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    34e2:	c6 01       	movw	r24, r12
    34e4:	6f 2d       	mov	r22, r15
    34e6:	4e 2d       	mov	r20, r14
    34e8:	09 95       	icall
    34ea:	29 c0       	rjmp	.+82     	; 0x353e <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    34ec:	6f 2d       	mov	r22, r15
    34ee:	6f 70       	andi	r22, 0x0F	; 15
    34f0:	c6 01       	movw	r24, r12
    34f2:	4e 2d       	mov	r20, r14
    34f4:	09 95       	icall
    34f6:	23 c0       	rjmp	.+70     	; 0x353e <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    34f8:	84 2f       	mov	r24, r20
    34fa:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <midi_is_realtime>
    34fe:	88 23       	and	r24, r24
    3500:	31 f0       	breq	.+12     	; 0x350e <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    3502:	d6 01       	movw	r26, r12
    3504:	56 96       	adiw	r26, 0x16	; 22
    3506:	ed 91       	ld	r30, X+
    3508:	fc 91       	ld	r31, X
    350a:	57 97       	sbiw	r26, 0x17	; 23
    350c:	08 c0       	rjmp	.+16     	; 0x351e <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    350e:	b6 ef       	ldi	r27, 0xF6	; 246
    3510:	fb 16       	cp	r15, r27
    3512:	29 f5       	brne	.+74     	; 0x355e <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    3514:	d6 01       	movw	r26, r12
    3516:	58 96       	adiw	r26, 0x18	; 24
    3518:	ed 91       	ld	r30, X+
    351a:	fc 91       	ld	r31, X
    351c:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    351e:	30 97       	sbiw	r30, 0x00	; 0
    3520:	f1 f0       	breq	.+60     	; 0x355e <midi_input_callbacks+0x21c>
            func(device, byte0);
    3522:	c6 01       	movw	r24, r12
    3524:	6f 2d       	mov	r22, r15
    3526:	09 95       	icall
    3528:	0a c0       	rjmp	.+20     	; 0x353e <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    352a:	64 30       	cpi	r22, 0x04	; 4
    352c:	71 05       	cpc	r23, r1
    352e:	a8 f4       	brcc	.+42     	; 0x355a <midi_input_callbacks+0x218>
    3530:	16 c0       	rjmp	.+44     	; 0x355e <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    3532:	c6 01       	movw	r24, r12
    3534:	b5 01       	movw	r22, r10
    3536:	4f 2d       	mov	r20, r15
    3538:	2e 2d       	mov	r18, r14
    353a:	01 2f       	mov	r16, r17
    353c:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    353e:	d6 01       	movw	r26, r12
    3540:	5e 96       	adiw	r26, 0x1e	; 30
    3542:	ed 91       	ld	r30, X+
    3544:	fc 91       	ld	r31, X
    3546:	5f 97       	sbiw	r26, 0x1f	; 31
    3548:	30 97       	sbiw	r30, 0x00	; 0
    354a:	89 f0       	breq	.+34     	; 0x356e <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    354c:	c6 01       	movw	r24, r12
    354e:	b5 01       	movw	r22, r10
    3550:	4f 2d       	mov	r20, r15
    3552:	2e 2d       	mov	r18, r14
    3554:	01 2f       	mov	r16, r17
    3556:	09 95       	icall
    3558:	0a c0       	rjmp	.+20     	; 0x356e <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    355a:	aa 24       	eor	r10, r10
    355c:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    355e:	d6 01       	movw	r26, r12
    3560:	5c 96       	adiw	r26, 0x1c	; 28
    3562:	ed 91       	ld	r30, X+
    3564:	fc 91       	ld	r31, X
    3566:	5d 97       	sbiw	r26, 0x1d	; 29
    3568:	30 97       	sbiw	r30, 0x00	; 0
    356a:	19 f7       	brne	.-58     	; 0x3532 <midi_input_callbacks+0x1f0>
    356c:	e8 cf       	rjmp	.-48     	; 0x353e <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	1f 91       	pop	r17
    357a:	0f 91       	pop	r16
    357c:	ff 90       	pop	r15
    357e:	ef 90       	pop	r14
    3580:	df 90       	pop	r13
    3582:	cf 90       	pop	r12
    3584:	bf 90       	pop	r11
    3586:	af 90       	pop	r10
    3588:	08 95       	ret

0000358a <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    358a:	ef 92       	push	r14
    358c:	ff 92       	push	r15
    358e:	0f 93       	push	r16
    3590:	cf 93       	push	r28
    3592:	df 93       	push	r29
    3594:	7c 01       	movw	r14, r24
    3596:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    3598:	86 2f       	mov	r24, r22
    359a:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <midi_is_realtime>
    359e:	88 23       	and	r24, r24
    35a0:	91 f0       	breq	.+36     	; 0x35c6 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    35a2:	d7 01       	movw	r26, r14
    35a4:	95 96       	adiw	r26, 0x25	; 37
    35a6:	dc 91       	ld	r29, X
    35a8:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	95 96       	adiw	r26, 0x25	; 37
    35ae:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    35b0:	c7 01       	movw	r24, r14
    35b2:	61 e0       	ldi	r22, 0x01	; 1
    35b4:	70 e0       	ldi	r23, 0x00	; 0
    35b6:	4c 2f       	mov	r20, r28
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	00 e0       	ldi	r16, 0x00	; 0
    35bc:	0e 94 a1 19 	call	0x3342	; 0x3342 <midi_input_callbacks>
    device->input_state = state;
    35c0:	f7 01       	movw	r30, r14
    35c2:	d5 a3       	lds	r29, 0x55
    35c4:	b7 c0       	rjmp	.+366    	; 0x3734 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    35c6:	8c 2f       	mov	r24, r28
    35c8:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <midi_is_statusbyte>
    35cc:	88 23       	and	r24, r24
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <midi_process_byte+0x48>
    35d0:	73 c0       	rjmp	.+230    	; 0x36b8 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    35d2:	d7 01       	movw	r26, r14
    35d4:	95 96       	adiw	r26, 0x25	; 37
    35d6:	8c 91       	ld	r24, X
    35d8:	95 97       	sbiw	r26, 0x25	; 37
    35da:	84 30       	cpi	r24, 0x04	; 4
    35dc:	49 f0       	breq	.+18     	; 0x35f0 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    35de:	92 96       	adiw	r26, 0x22	; 34
    35e0:	cc 93       	st	X, r28
    35e2:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	97 96       	adiw	r26, 0x27	; 39
    35ea:	9c 93       	st	X, r25
    35ec:	8e 93       	st	-X, r24
    35ee:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    35f0:	8c 2f       	mov	r24, r28
    35f2:	0e 94 44 17 	call	0x2e88	; 0x2e88 <midi_packet_length>
    35f6:	81 30       	cpi	r24, 0x01	; 1
    35f8:	41 f0       	breq	.+16     	; 0x360a <midi_process_byte+0x80>
    35fa:	81 30       	cpi	r24, 0x01	; 1
    35fc:	00 f1       	brcs	.+64     	; 0x363e <midi_process_byte+0xb4>
    35fe:	82 30       	cpi	r24, 0x02	; 2
    3600:	a1 f0       	breq	.+40     	; 0x362a <midi_process_byte+0xa0>
    3602:	83 30       	cpi	r24, 0x03	; 3
    3604:	09 f0       	breq	.+2      	; 0x3608 <midi_process_byte+0x7e>
    3606:	4f c0       	rjmp	.+158    	; 0x36a6 <midi_process_byte+0x11c>
    3608:	14 c0       	rjmp	.+40     	; 0x3632 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	f7 01       	movw	r30, r14
    360e:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3610:	c7 01       	movw	r24, r14
    3612:	61 e0       	ldi	r22, 0x01	; 1
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	4c 2f       	mov	r20, r28
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	00 e0       	ldi	r16, 0x00	; 0
    361c:	0e 94 a1 19 	call	0x3342	; 0x3342 <midi_input_callbacks>
        device->input_state = IDLE;
    3620:	d7 01       	movw	r26, r14
    3622:	95 96       	adiw	r26, 0x25	; 37
    3624:	1c 92       	st	X, r1
    3626:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3628:	85 c0       	rjmp	.+266    	; 0x3734 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	f7 01       	movw	r30, r14
    362e:	85 a3       	lds	r24, 0x55
        break;
    3630:	81 c0       	rjmp	.+258    	; 0x3734 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    3632:	83 e0       	ldi	r24, 0x03	; 3
    3634:	d7 01       	movw	r26, r14
    3636:	95 96       	adiw	r26, 0x25	; 37
    3638:	8c 93       	st	X, r24
    363a:	95 97       	sbiw	r26, 0x25	; 37
        break;
    363c:	7b c0       	rjmp	.+246    	; 0x3734 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    363e:	c0 3f       	cpi	r28, 0xF0	; 240
    3640:	19 f0       	breq	.+6      	; 0x3648 <midi_process_byte+0xbe>
    3642:	c7 3f       	cpi	r28, 0xF7	; 247
    3644:	59 f5       	brne	.+86     	; 0x369c <midi_process_byte+0x112>
    3646:	0a c0       	rjmp	.+20     	; 0x365c <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    3648:	84 e0       	ldi	r24, 0x04	; 4
    364a:	f7 01       	movw	r30, r14
    364c:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    364e:	80 ef       	ldi	r24, 0xF0	; 240
    3650:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	97 a3       	lds	r25, 0x57
    3658:	86 a3       	lds	r24, 0x56
            break;
    365a:	6c c0       	rjmp	.+216    	; 0x3734 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    365c:	d7 01       	movw	r26, r14
    365e:	96 96       	adiw	r26, 0x26	; 38
    3660:	2d 91       	ld	r18, X+
    3662:	3c 91       	ld	r19, X
    3664:	97 97       	sbiw	r26, 0x27	; 39
    3666:	c9 01       	movw	r24, r18
    3668:	63 e0       	ldi	r22, 0x03	; 3
    366a:	70 e0       	ldi	r23, 0x00	; 0
    366c:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__udivmodhi4>
    3670:	f7 01       	movw	r30, r14
    3672:	e8 0f       	add	r30, r24
    3674:	f9 1f       	adc	r31, r25
    3676:	87 ef       	ldi	r24, 0xF7	; 247
    3678:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    367a:	b9 01       	movw	r22, r18
    367c:	6f 5f       	subi	r22, 0xFF	; 255
    367e:	7f 4f       	sbci	r23, 0xFF	; 255
    3680:	f7 01       	movw	r30, r14
    3682:	77 a3       	lds	r23, 0x57
    3684:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3686:	c7 01       	movw	r24, r14
    3688:	42 a1       	lds	r20, 0x42
    368a:	23 a1       	lds	r18, 0x43
    368c:	04 a1       	lds	r16, 0x44
    368e:	0e 94 a1 19 	call	0x3342	; 0x3342 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3692:	d7 01       	movw	r26, r14
    3694:	95 96       	adiw	r26, 0x25	; 37
    3696:	1c 92       	st	X, r1
    3698:	95 97       	sbiw	r26, 0x25	; 37
            break;
    369a:	4c c0       	rjmp	.+152    	; 0x3734 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    369c:	f7 01       	movw	r30, r14
    369e:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    36a0:	17 a2       	lds	r17, 0x97
    36a2:	16 a2       	lds	r17, 0x96
    36a4:	47 c0       	rjmp	.+142    	; 0x3734 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    36a6:	d7 01       	movw	r26, r14
    36a8:	95 96       	adiw	r26, 0x25	; 37
    36aa:	1c 92       	st	X, r1
    36ac:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    36ae:	97 96       	adiw	r26, 0x27	; 39
    36b0:	1c 92       	st	X, r1
    36b2:	1e 92       	st	-X, r1
    36b4:	96 97       	sbiw	r26, 0x26	; 38
        break;
    36b6:	3e c0       	rjmp	.+124    	; 0x3734 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    36b8:	f7 01       	movw	r30, r14
    36ba:	25 a1       	lds	r18, 0x45
    36bc:	22 23       	and	r18, r18
    36be:	d1 f1       	breq	.+116    	; 0x3734 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    36c0:	06 a0       	lds	r16, 0x86
    36c2:	f7 a1       	lds	r31, 0x47
    36c4:	e0 2d       	mov	r30, r0
    36c6:	cf 01       	movw	r24, r30
    36c8:	63 e0       	ldi	r22, 0x03	; 3
    36ca:	70 e0       	ldi	r23, 0x00	; 0
    36cc:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__udivmodhi4>
    36d0:	ac 01       	movw	r20, r24
    36d2:	8e 0d       	add	r24, r14
    36d4:	9f 1d       	adc	r25, r15
    36d6:	dc 01       	movw	r26, r24
    36d8:	92 96       	adiw	r26, 0x22	; 34
    36da:	cc 93       	st	X, r28
    36dc:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    36de:	bf 01       	movw	r22, r30
    36e0:	6f 5f       	subi	r22, 0xFF	; 255
    36e2:	7f 4f       	sbci	r23, 0xFF	; 255
    36e4:	f7 01       	movw	r30, r14
    36e6:	77 a3       	lds	r23, 0x57
    36e8:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    36ea:	41 30       	cpi	r20, 0x01	; 1
    36ec:	51 05       	cpc	r21, r1
    36ee:	91 f0       	breq	.+36     	; 0x3714 <midi_process_byte+0x18a>
    36f0:	42 30       	cpi	r20, 0x02	; 2
    36f2:	51 05       	cpc	r21, r1
    36f4:	f9 f4       	brne	.+62     	; 0x3734 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    36f6:	c7 01       	movw	r24, r14
    36f8:	42 a1       	lds	r20, 0x42
    36fa:	23 a1       	lds	r18, 0x43
    36fc:	04 a1       	lds	r16, 0x44
    36fe:	0e 94 a1 19 	call	0x3342	; 0x3342 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    3702:	f7 01       	movw	r30, r14
    3704:	85 a1       	lds	r24, 0x45
    3706:	84 30       	cpi	r24, 0x04	; 4
    3708:	a9 f0       	breq	.+42     	; 0x3734 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	97 a3       	lds	r25, 0x57
    3710:	86 a3       	lds	r24, 0x56
    3712:	10 c0       	rjmp	.+32     	; 0x3734 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3714:	22 30       	cpi	r18, 0x02	; 2
    3716:	71 f4       	brne	.+28     	; 0x3734 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3718:	c7 01       	movw	r24, r14
    371a:	42 a1       	lds	r20, 0x42
    371c:	23 a1       	lds	r18, 0x43
    371e:	00 e0       	ldi	r16, 0x00	; 0
    3720:	0e 94 a1 19 	call	0x3342	; 0x3342 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3724:	f7 01       	movw	r30, r14
    3726:	85 a1       	lds	r24, 0x45
    3728:	84 30       	cpi	r24, 0x04	; 4
    372a:	21 f0       	breq	.+8      	; 0x3734 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	97 a3       	lds	r25, 0x57
    3732:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	0f 91       	pop	r16
    373a:	ff 90       	pop	r15
    373c:	ef 90       	pop	r14
    373e:	08 95       	ret

00003740 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    3740:	cf 92       	push	r12
    3742:	df 92       	push	r13
    3744:	ef 92       	push	r14
    3746:	ff 92       	push	r15
    3748:	0f 93       	push	r16
    374a:	1f 93       	push	r17
    374c:	cf 93       	push	r28
    374e:	df 93       	push	r29
    3750:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    3752:	dc 01       	movw	r26, r24
    3754:	90 96       	adiw	r26, 0x20	; 32
    3756:	ed 91       	ld	r30, X+
    3758:	fc 91       	ld	r31, X
    375a:	91 97       	sbiw	r26, 0x21	; 33
    375c:	30 97       	sbiw	r30, 0x00	; 0
    375e:	09 f0       	breq	.+2      	; 0x3762 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    3760:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    3762:	0f 2e       	mov	r0, r31
    3764:	f8 ee       	ldi	r31, 0xE8	; 232
    3766:	ef 2e       	mov	r14, r31
    3768:	ff 24       	eor	r15, r15
    376a:	f0 2d       	mov	r31, r0
    376c:	ec 0c       	add	r14, r12
    376e:	fd 1c       	adc	r15, r13
    3770:	c7 01       	movw	r24, r14
    3772:	0e 94 f5 16 	call	0x2dea	; 0x2dea <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3776:	c8 2f       	mov	r28, r24
    3778:	d0 e0       	ldi	r29, 0x00	; 0
    377a:	20 97       	sbiw	r28, 0x00	; 0
    377c:	99 f0       	breq	.+38     	; 0x37a4 <midi_device_process+0x64>
    377e:	00 e0       	ldi	r16, 0x00	; 0
    3780:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    3782:	c7 01       	movw	r24, r14
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <bytequeue_get>
    378a:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    378c:	c6 01       	movw	r24, r12
    378e:	0e 94 c5 1a 	call	0x358a	; 0x358a <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3792:	c7 01       	movw	r24, r14
    3794:	61 e0       	ldi	r22, 0x01	; 1
    3796:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    379a:	0f 5f       	subi	r16, 0xFF	; 255
    379c:	1f 4f       	sbci	r17, 0xFF	; 255
    379e:	0c 17       	cp	r16, r28
    37a0:	1d 07       	cpc	r17, r29
    37a2:	78 f3       	brcs	.-34     	; 0x3782 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    37a4:	df 91       	pop	r29
    37a6:	cf 91       	pop	r28
    37a8:	1f 91       	pop	r17
    37aa:	0f 91       	pop	r16
    37ac:	ff 90       	pop	r15
    37ae:	ef 90       	pop	r14
    37b0:	df 90       	pop	r13
    37b2:	cf 90       	pop	r12
    37b4:	08 95       	ret

000037b6 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    37b6:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    37b8:	67 e0       	ldi	r22, 0x07	; 7
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__udivmodhi4>
    37c0:	48 2f       	mov	r20, r24
   if (remainder)
    37c2:	88 23       	and	r24, r24
    37c4:	81 f0       	breq	.+32     	; 0x37e6 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    37c6:	c9 01       	movw	r24, r18
    37c8:	67 e0       	ldi	r22, 0x07	; 7
    37ca:	70 e0       	ldi	r23, 0x00	; 0
    37cc:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__udivmodhi4>
    37d0:	cb 01       	movw	r24, r22
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	88 0f       	add	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	88 0f       	add	r24, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	01 96       	adiw	r24, 0x01	; 1
    37e0:	84 0f       	add	r24, r20
    37e2:	91 1d       	adc	r25, r1
    37e4:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    37e6:	c9 01       	movw	r24, r18
    37e8:	67 e0       	ldi	r22, 0x07	; 7
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__udivmodhi4>
    37f0:	cb 01       	movw	r24, r22
    37f2:	88 0f       	add	r24, r24
    37f4:	99 1f       	adc	r25, r25
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
}
    37fe:	08 95       	ret

00003800 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3800:	48 2f       	mov	r20, r24
    3802:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3804:	a1 f0       	breq	.+40     	; 0x382e <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3806:	9c 01       	movw	r18, r24
    3808:	36 95       	lsr	r19
    380a:	27 95       	ror	r18
    380c:	36 95       	lsr	r19
    380e:	27 95       	ror	r18
    3810:	36 95       	lsr	r19
    3812:	27 95       	ror	r18
    3814:	c9 01       	movw	r24, r18
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	82 1b       	sub	r24, r18
    3824:	93 0b       	sbc	r25, r19
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	84 0f       	add	r24, r20
    382a:	91 1d       	adc	r25, r1
    382c:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    382e:	9c 01       	movw	r18, r24
    3830:	36 95       	lsr	r19
    3832:	27 95       	ror	r18
    3834:	36 95       	lsr	r19
    3836:	27 95       	ror	r18
    3838:	36 95       	lsr	r19
    383a:	27 95       	ror	r18
    383c:	c9 01       	movw	r24, r18
    383e:	88 0f       	add	r24, r24
    3840:	99 1f       	adc	r25, r25
    3842:	88 0f       	add	r24, r24
    3844:	99 1f       	adc	r25, r25
    3846:	88 0f       	add	r24, r24
    3848:	99 1f       	adc	r25, r25
    384a:	82 1b       	sub	r24, r18
    384c:	93 0b       	sbc	r25, r19
}
    384e:	08 95       	ret

00003850 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3850:	2f 92       	push	r2
    3852:	3f 92       	push	r3
    3854:	4f 92       	push	r4
    3856:	5f 92       	push	r5
    3858:	6f 92       	push	r6
    385a:	7f 92       	push	r7
    385c:	8f 92       	push	r8
    385e:	9f 92       	push	r9
    3860:	af 92       	push	r10
    3862:	bf 92       	push	r11
    3864:	cf 92       	push	r12
    3866:	df 92       	push	r13
    3868:	ef 92       	push	r14
    386a:	ff 92       	push	r15
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	00 d0       	rcall	.+0      	; 0x3876 <sysex_encode+0x26>
    3876:	00 d0       	rcall	.+0      	; 0x3878 <sysex_encode+0x28>
    3878:	00 d0       	rcall	.+0      	; 0x387a <sysex_encode+0x2a>
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
    387e:	1c 01       	movw	r2, r24
    3880:	7a 83       	std	Y+2, r23	; 0x02
    3882:	69 83       	std	Y+1, r22	; 0x01
    3884:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3886:	ca 01       	movw	r24, r20
    3888:	67 e0       	ldi	r22, 0x07	; 7
    388a:	70 e0       	ldi	r23, 0x00	; 0
    388c:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__udivmodhi4>
    3890:	2b 01       	movw	r4, r22
    3892:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3894:	61 15       	cp	r22, r1
    3896:	71 05       	cpc	r23, r1
    3898:	b1 f1       	breq	.+108    	; 0x3906 <sysex_encode+0xb6>
    389a:	81 01       	movw	r16, r2
    389c:	e9 80       	ldd	r14, Y+1	; 0x01
    389e:	fa 80       	ldd	r15, Y+2	; 0x02
    38a0:	cc 24       	eor	r12, r12
    38a2:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38a4:	88 24       	eor	r8, r8
    38a6:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    38a8:	1e 83       	std	Y+6, r17	; 0x06
    38aa:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    38ac:	f8 01       	movw	r30, r16
    38ae:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    38b0:	fc 82       	std	Y+4, r15	; 0x04
    38b2:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38b4:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    38b6:	ab 81       	ldd	r26, Y+3	; 0x03
    38b8:	bc 81       	ldd	r27, Y+4	; 0x04
    38ba:	2d 91       	ld	r18, X+
    38bc:	bc 83       	std	Y+4, r27	; 0x04
    38be:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    38c0:	4f 5f       	subi	r20, 0xFF	; 255
    38c2:	5f 4f       	sbci	r21, 0xFF	; 255
    38c4:	82 2f       	mov	r24, r18
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	80 78       	andi	r24, 0x80	; 128
    38ca:	90 70       	andi	r25, 0x00	; 0
    38cc:	bc 01       	movw	r22, r24
    38ce:	04 2e       	mov	r0, r20
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <sysex_encode+0x86>
    38d2:	75 95       	asr	r23
    38d4:	67 95       	ror	r22
    38d6:	0a 94       	dec	r0
    38d8:	e2 f7       	brpl	.-8      	; 0x38d2 <sysex_encode+0x82>
    38da:	ad 81       	ldd	r26, Y+5	; 0x05
    38dc:	be 81       	ldd	r27, Y+6	; 0x06
    38de:	8c 91       	ld	r24, X
    38e0:	86 2b       	or	r24, r22
    38e2:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    38e4:	2f 77       	andi	r18, 0x7F	; 127
    38e6:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38e8:	47 30       	cpi	r20, 0x07	; 7
    38ea:	51 05       	cpc	r21, r1
    38ec:	21 f7       	brne	.-56     	; 0x38b6 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    38ee:	08 94       	sec
    38f0:	c1 1c       	adc	r12, r1
    38f2:	d1 1c       	adc	r13, r1
    38f4:	08 5f       	subi	r16, 0xF8	; 248
    38f6:	1f 4f       	sbci	r17, 0xFF	; 255
    38f8:	e7 e0       	ldi	r30, 0x07	; 7
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	ee 0e       	add	r14, r30
    38fe:	ff 1e       	adc	r15, r31
    3900:	ca 14       	cp	r12, r10
    3902:	db 04       	cpc	r13, r11
    3904:	89 f6       	brne	.-94     	; 0x38a8 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3906:	c3 01       	movw	r24, r6
    3908:	67 e0       	ldi	r22, 0x07	; 7
    390a:	70 e0       	ldi	r23, 0x00	; 0
    390c:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__udivmodhi4>
   if (remainder) {
    3910:	88 23       	and	r24, r24
    3912:	d9 f1       	breq	.+118    	; 0x398a <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3914:	82 01       	movw	r16, r4
    3916:	00 0f       	add	r16, r16
    3918:	11 1f       	adc	r17, r17
    391a:	00 0f       	add	r16, r16
    391c:	11 1f       	adc	r17, r17
    391e:	00 0f       	add	r16, r16
    3920:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3922:	78 01       	movw	r14, r16
    3924:	e4 18       	sub	r14, r4
    3926:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3928:	d1 01       	movw	r26, r2
    392a:	a0 0f       	add	r26, r16
    392c:	b1 1f       	adc	r27, r17
    392e:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3930:	68 2f       	mov	r22, r24
    3932:	70 e0       	ldi	r23, 0x00	; 0
    3934:	61 15       	cp	r22, r1
    3936:	71 05       	cpc	r23, r1
    3938:	19 f1       	breq	.+70     	; 0x3980 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    393a:	e9 81       	ldd	r30, Y+1	; 0x01
    393c:	fa 81       	ldd	r31, Y+2	; 0x02
    393e:	ee 0e       	add	r14, r30
    3940:	ff 1e       	adc	r15, r31
    3942:	c8 01       	movw	r24, r16
    3944:	01 96       	adiw	r24, 0x01	; 1
    3946:	28 0e       	add	r2, r24
    3948:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    394e:	f7 01       	movw	r30, r14
    3950:	41 91       	ld	r20, Z+
    3952:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3954:	2f 5f       	subi	r18, 0xFF	; 255
    3956:	3f 4f       	sbci	r19, 0xFF	; 255
    3958:	84 2f       	mov	r24, r20
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	80 78       	andi	r24, 0x80	; 128
    395e:	90 70       	andi	r25, 0x00	; 0
    3960:	02 2e       	mov	r0, r18
    3962:	02 c0       	rjmp	.+4      	; 0x3968 <sysex_encode+0x118>
    3964:	95 95       	asr	r25
    3966:	87 95       	ror	r24
    3968:	0a 94       	dec	r0
    396a:	e2 f7       	brpl	.-8      	; 0x3964 <sysex_encode+0x114>
    396c:	9c 91       	ld	r25, X
    396e:	89 2b       	or	r24, r25
    3970:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3972:	4f 77       	andi	r20, 0x7F	; 127
    3974:	f1 01       	movw	r30, r2
    3976:	41 93       	st	Z+, r20
    3978:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    397a:	26 17       	cp	r18, r22
    397c:	37 07       	cpc	r19, r23
    397e:	38 f3       	brcs	.-50     	; 0x394e <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3980:	c8 01       	movw	r24, r16
    3982:	01 96       	adiw	r24, 0x01	; 1
    3984:	86 0f       	add	r24, r22
    3986:	97 1f       	adc	r25, r23
    3988:	07 c0       	rjmp	.+14     	; 0x3998 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    398a:	c2 01       	movw	r24, r4
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	88 0f       	add	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	88 0f       	add	r24, r24
    3996:	99 1f       	adc	r25, r25
   }
}
    3998:	26 96       	adiw	r28, 0x06	; 6
    399a:	0f b6       	in	r0, 0x3f	; 63
    399c:	f8 94       	cli
    399e:	de bf       	out	0x3e, r29	; 62
    39a0:	0f be       	out	0x3f, r0	; 63
    39a2:	cd bf       	out	0x3d, r28	; 61
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	1f 91       	pop	r17
    39aa:	0f 91       	pop	r16
    39ac:	ff 90       	pop	r15
    39ae:	ef 90       	pop	r14
    39b0:	df 90       	pop	r13
    39b2:	cf 90       	pop	r12
    39b4:	bf 90       	pop	r11
    39b6:	af 90       	pop	r10
    39b8:	9f 90       	pop	r9
    39ba:	8f 90       	pop	r8
    39bc:	7f 90       	pop	r7
    39be:	6f 90       	pop	r6
    39c0:	5f 90       	pop	r5
    39c2:	4f 90       	pop	r4
    39c4:	3f 90       	pop	r3
    39c6:	2f 90       	pop	r2
    39c8:	08 95       	ret

000039ca <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    39ca:	6f 92       	push	r6
    39cc:	7f 92       	push	r7
    39ce:	8f 92       	push	r8
    39d0:	9f 92       	push	r9
    39d2:	af 92       	push	r10
    39d4:	bf 92       	push	r11
    39d6:	cf 92       	push	r12
    39d8:	df 92       	push	r13
    39da:	ef 92       	push	r14
    39dc:	ff 92       	push	r15
    39de:	0f 93       	push	r16
    39e0:	1f 93       	push	r17
    39e2:	cf 93       	push	r28
    39e4:	df 93       	push	r29
    39e6:	3c 01       	movw	r6, r24
    39e8:	4b 01       	movw	r8, r22
    39ea:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    39ec:	42 30       	cpi	r20, 0x02	; 2
    39ee:	51 05       	cpc	r21, r1
    39f0:	08 f4       	brcc	.+2      	; 0x39f4 <sysex_decode+0x2a>
    39f2:	6f c0       	rjmp	.+222    	; 0x3ad2 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    39f4:	7a 01       	movw	r14, r20
    39f6:	f6 94       	lsr	r15
    39f8:	e7 94       	ror	r14
    39fa:	f6 94       	lsr	r15
    39fc:	e7 94       	ror	r14
    39fe:	f6 94       	lsr	r15
    3a00:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3a02:	e1 14       	cp	r14, r1
    3a04:	f1 04       	cpc	r15, r1
    3a06:	29 f1       	breq	.+74     	; 0x3a52 <sysex_decode+0x88>
    3a08:	eb 01       	movw	r28, r22
    3a0a:	b3 01       	movw	r22, r6
    3a0c:	00 e0       	ldi	r16, 0x00	; 0
    3a0e:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a10:	cc 24       	eor	r12, r12
    3a12:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a14:	de 01       	movw	r26, r28
    3a16:	11 96       	adiw	r26, 0x01	; 1
    3a18:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a1a:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3a1c:	2d 91       	ld	r18, X+
    3a1e:	2f 77       	andi	r18, 0x7F	; 127
    3a20:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a22:	4f 5f       	subi	r20, 0xFF	; 255
    3a24:	5f 4f       	sbci	r21, 0xFF	; 255
    3a26:	88 81       	ld	r24, Y
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	04 2e       	mov	r0, r20
    3a2c:	02 c0       	rjmp	.+4      	; 0x3a32 <sysex_decode+0x68>
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	0a 94       	dec	r0
    3a34:	e2 f7       	brpl	.-8      	; 0x3a2e <sysex_decode+0x64>
    3a36:	80 78       	andi	r24, 0x80	; 128
    3a38:	28 2b       	or	r18, r24
    3a3a:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a3c:	47 30       	cpi	r20, 0x07	; 7
    3a3e:	51 05       	cpc	r21, r1
    3a40:	69 f7       	brne	.-38     	; 0x3a1c <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3a42:	0f 5f       	subi	r16, 0xFF	; 255
    3a44:	1f 4f       	sbci	r17, 0xFF	; 255
    3a46:	28 96       	adiw	r28, 0x08	; 8
    3a48:	69 5f       	subi	r22, 0xF9	; 249
    3a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a4c:	0e 15       	cp	r16, r14
    3a4e:	1f 05       	cpc	r17, r15
    3a50:	09 f7       	brne	.-62     	; 0x3a14 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3a52:	5a 2d       	mov	r21, r10
    3a54:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3a56:	99 f1       	breq	.+102    	; 0x3abe <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3a58:	e7 01       	movw	r28, r14
    3a5a:	cc 0f       	add	r28, r28
    3a5c:	dd 1f       	adc	r29, r29
    3a5e:	cc 0f       	add	r28, r28
    3a60:	dd 1f       	adc	r29, r29
    3a62:	cc 0f       	add	r28, r28
    3a64:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3a66:	8e 01       	movw	r16, r28
    3a68:	0e 19       	sub	r16, r14
    3a6a:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3a6c:	65 2f       	mov	r22, r21
    3a6e:	70 e0       	ldi	r23, 0x00	; 0
    3a70:	61 50       	subi	r22, 0x01	; 1
    3a72:	70 40       	sbci	r23, 0x00	; 0
    3a74:	f9 f0       	breq	.+62     	; 0x3ab4 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a76:	ce 01       	movw	r24, r28
    3a78:	01 96       	adiw	r24, 0x01	; 1
    3a7a:	d4 01       	movw	r26, r8
    3a7c:	a8 0f       	add	r26, r24
    3a7e:	b9 1f       	adc	r27, r25
    3a80:	f3 01       	movw	r30, r6
    3a82:	e0 0f       	add	r30, r16
    3a84:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a8a:	c8 0d       	add	r28, r8
    3a8c:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3a8e:	4d 91       	ld	r20, X+
    3a90:	4f 77       	andi	r20, 0x7F	; 127
    3a92:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a94:	2f 5f       	subi	r18, 0xFF	; 255
    3a96:	3f 4f       	sbci	r19, 0xFF	; 255
    3a98:	88 81       	ld	r24, Y
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	02 2e       	mov	r0, r18
    3a9e:	02 c0       	rjmp	.+4      	; 0x3aa4 <sysex_decode+0xda>
    3aa0:	88 0f       	add	r24, r24
    3aa2:	99 1f       	adc	r25, r25
    3aa4:	0a 94       	dec	r0
    3aa6:	e2 f7       	brpl	.-8      	; 0x3aa0 <sysex_decode+0xd6>
    3aa8:	80 78       	andi	r24, 0x80	; 128
    3aaa:	48 2b       	or	r20, r24
    3aac:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3aae:	26 17       	cp	r18, r22
    3ab0:	37 07       	cpc	r19, r23
    3ab2:	68 f3       	brcs	.-38     	; 0x3a8e <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3ab4:	c8 01       	movw	r24, r16
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	85 0f       	add	r24, r21
    3aba:	91 1d       	adc	r25, r1
    3abc:	0c c0       	rjmp	.+24     	; 0x3ad6 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3abe:	c7 01       	movw	r24, r14
    3ac0:	88 0f       	add	r24, r24
    3ac2:	99 1f       	adc	r25, r25
    3ac4:	88 0f       	add	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	88 0f       	add	r24, r24
    3aca:	99 1f       	adc	r25, r25
    3acc:	8e 19       	sub	r24, r14
    3ace:	9f 09       	sbc	r25, r15
    3ad0:	02 c0       	rjmp	.+4      	; 0x3ad6 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3ad6:	df 91       	pop	r29
    3ad8:	cf 91       	pop	r28
    3ada:	1f 91       	pop	r17
    3adc:	0f 91       	pop	r16
    3ade:	ff 90       	pop	r15
    3ae0:	ef 90       	pop	r14
    3ae2:	df 90       	pop	r13
    3ae4:	cf 90       	pop	r12
    3ae6:	bf 90       	pop	r11
    3ae8:	af 90       	pop	r10
    3aea:	9f 90       	pop	r9
    3aec:	8f 90       	pop	r8
    3aee:	7f 90       	pop	r7
    3af0:	6f 90       	pop	r6
    3af2:	08 95       	ret

00003af4 <__mulsi3>:
    3af4:	62 9f       	mul	r22, r18
    3af6:	d0 01       	movw	r26, r0
    3af8:	73 9f       	mul	r23, r19
    3afa:	f0 01       	movw	r30, r0
    3afc:	82 9f       	mul	r24, r18
    3afe:	e0 0d       	add	r30, r0
    3b00:	f1 1d       	adc	r31, r1
    3b02:	64 9f       	mul	r22, r20
    3b04:	e0 0d       	add	r30, r0
    3b06:	f1 1d       	adc	r31, r1
    3b08:	92 9f       	mul	r25, r18
    3b0a:	f0 0d       	add	r31, r0
    3b0c:	83 9f       	mul	r24, r19
    3b0e:	f0 0d       	add	r31, r0
    3b10:	74 9f       	mul	r23, r20
    3b12:	f0 0d       	add	r31, r0
    3b14:	65 9f       	mul	r22, r21
    3b16:	f0 0d       	add	r31, r0
    3b18:	99 27       	eor	r25, r25
    3b1a:	72 9f       	mul	r23, r18
    3b1c:	b0 0d       	add	r27, r0
    3b1e:	e1 1d       	adc	r30, r1
    3b20:	f9 1f       	adc	r31, r25
    3b22:	63 9f       	mul	r22, r19
    3b24:	b0 0d       	add	r27, r0
    3b26:	e1 1d       	adc	r30, r1
    3b28:	f9 1f       	adc	r31, r25
    3b2a:	bd 01       	movw	r22, r26
    3b2c:	cf 01       	movw	r24, r30
    3b2e:	11 24       	eor	r1, r1
    3b30:	08 95       	ret

00003b32 <__udivmodhi4>:
    3b32:	aa 1b       	sub	r26, r26
    3b34:	bb 1b       	sub	r27, r27
    3b36:	51 e1       	ldi	r21, 0x11	; 17
    3b38:	07 c0       	rjmp	.+14     	; 0x3b48 <__udivmodhi4_ep>

00003b3a <__udivmodhi4_loop>:
    3b3a:	aa 1f       	adc	r26, r26
    3b3c:	bb 1f       	adc	r27, r27
    3b3e:	a6 17       	cp	r26, r22
    3b40:	b7 07       	cpc	r27, r23
    3b42:	10 f0       	brcs	.+4      	; 0x3b48 <__udivmodhi4_ep>
    3b44:	a6 1b       	sub	r26, r22
    3b46:	b7 0b       	sbc	r27, r23

00003b48 <__udivmodhi4_ep>:
    3b48:	88 1f       	adc	r24, r24
    3b4a:	99 1f       	adc	r25, r25
    3b4c:	5a 95       	dec	r21
    3b4e:	a9 f7       	brne	.-22     	; 0x3b3a <__udivmodhi4_loop>
    3b50:	80 95       	com	r24
    3b52:	90 95       	com	r25
    3b54:	bc 01       	movw	r22, r24
    3b56:	cd 01       	movw	r24, r26
    3b58:	08 95       	ret

00003b5a <__divmodhi4>:
    3b5a:	97 fb       	bst	r25, 7
    3b5c:	09 2e       	mov	r0, r25
    3b5e:	07 26       	eor	r0, r23
    3b60:	0a d0       	rcall	.+20     	; 0x3b76 <__divmodhi4_neg1>
    3b62:	77 fd       	sbrc	r23, 7
    3b64:	04 d0       	rcall	.+8      	; 0x3b6e <__divmodhi4_neg2>
    3b66:	e5 df       	rcall	.-54     	; 0x3b32 <__udivmodhi4>
    3b68:	06 d0       	rcall	.+12     	; 0x3b76 <__divmodhi4_neg1>
    3b6a:	00 20       	and	r0, r0
    3b6c:	1a f4       	brpl	.+6      	; 0x3b74 <__divmodhi4_exit>

00003b6e <__divmodhi4_neg2>:
    3b6e:	70 95       	com	r23
    3b70:	61 95       	neg	r22
    3b72:	7f 4f       	sbci	r23, 0xFF	; 255

00003b74 <__divmodhi4_exit>:
    3b74:	08 95       	ret

00003b76 <__divmodhi4_neg1>:
    3b76:	f6 f7       	brtc	.-4      	; 0x3b74 <__divmodhi4_exit>
    3b78:	90 95       	com	r25
    3b7a:	81 95       	neg	r24
    3b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b7e:	08 95       	ret

00003b80 <memcpy>:
    3b80:	fb 01       	movw	r30, r22
    3b82:	dc 01       	movw	r26, r24
    3b84:	02 c0       	rjmp	.+4      	; 0x3b8a <memcpy+0xa>
    3b86:	01 90       	ld	r0, Z+
    3b88:	0d 92       	st	X+, r0
    3b8a:	41 50       	subi	r20, 0x01	; 1
    3b8c:	50 40       	sbci	r21, 0x00	; 0
    3b8e:	d8 f7       	brcc	.-10     	; 0x3b86 <memcpy+0x6>
    3b90:	08 95       	ret

00003b92 <memmove>:
    3b92:	68 17       	cp	r22, r24
    3b94:	79 07       	cpc	r23, r25
    3b96:	68 f4       	brcc	.+26     	; 0x3bb2 <memmove+0x20>
    3b98:	fb 01       	movw	r30, r22
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	e4 0f       	add	r30, r20
    3b9e:	f5 1f       	adc	r31, r21
    3ba0:	a4 0f       	add	r26, r20
    3ba2:	b5 1f       	adc	r27, r21
    3ba4:	02 c0       	rjmp	.+4      	; 0x3baa <memmove+0x18>
    3ba6:	02 90       	ld	r0, -Z
    3ba8:	0e 92       	st	-X, r0
    3baa:	41 50       	subi	r20, 0x01	; 1
    3bac:	50 40       	sbci	r21, 0x00	; 0
    3bae:	d8 f7       	brcc	.-10     	; 0x3ba6 <memmove+0x14>
    3bb0:	08 95       	ret
    3bb2:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <memcpy>

00003bb6 <__eerd_block_m6450a>:
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22

00003bba <__eerd_blraw_m6450a>:
    3bba:	fc 01       	movw	r30, r24
    3bbc:	f9 99       	sbic	0x1f, 1	; 31
    3bbe:	fe cf       	rjmp	.-4      	; 0x3bbc <__eerd_blraw_m6450a+0x2>
    3bc0:	06 c0       	rjmp	.+12     	; 0x3bce <__eerd_blraw_m6450a+0x14>
    3bc2:	f2 bd       	out	0x22, r31	; 34
    3bc4:	e1 bd       	out	0x21, r30	; 33
    3bc6:	f8 9a       	sbi	0x1f, 0	; 31
    3bc8:	31 96       	adiw	r30, 0x01	; 1
    3bca:	00 b4       	in	r0, 0x20	; 32
    3bcc:	0d 92       	st	X+, r0
    3bce:	41 50       	subi	r20, 0x01	; 1
    3bd0:	50 40       	sbci	r21, 0x00	; 0
    3bd2:	b8 f7       	brcc	.-18     	; 0x3bc2 <__eerd_blraw_m6450a+0x8>
    3bd4:	08 95       	ret

00003bd6 <__eerd_word_m6450a>:
    3bd6:	a8 e1       	ldi	r26, 0x18	; 24
    3bd8:	b0 e0       	ldi	r27, 0x00	; 0
    3bda:	42 e0       	ldi	r20, 0x02	; 2
    3bdc:	50 e0       	ldi	r21, 0x00	; 0
    3bde:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <__eerd_blraw_m6450a>

00003be2 <__eeupd_block_m6450a>:
    3be2:	dc 01       	movw	r26, r24
    3be4:	a4 0f       	add	r26, r20
    3be6:	b5 1f       	adc	r27, r21
    3be8:	41 50       	subi	r20, 0x01	; 1
    3bea:	50 40       	sbci	r21, 0x00	; 0
    3bec:	48 f0       	brcs	.+18     	; 0x3c00 <__eeupd_block_m6450a+0x1e>
    3bee:	cb 01       	movw	r24, r22
    3bf0:	84 0f       	add	r24, r20
    3bf2:	95 1f       	adc	r25, r21
    3bf4:	2e 91       	ld	r18, -X
    3bf6:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <__eeupd_r18_m6450a>
    3bfa:	41 50       	subi	r20, 0x01	; 1
    3bfc:	50 40       	sbci	r21, 0x00	; 0
    3bfe:	d0 f7       	brcc	.-12     	; 0x3bf4 <__eeupd_block_m6450a+0x12>
    3c00:	08 95       	ret

00003c02 <__eeupd_byte_m6450a>:
    3c02:	26 2f       	mov	r18, r22

00003c04 <__eeupd_r18_m6450a>:
    3c04:	f9 99       	sbic	0x1f, 1	; 31
    3c06:	fe cf       	rjmp	.-4      	; 0x3c04 <__eeupd_r18_m6450a>
    3c08:	92 bd       	out	0x22, r25	; 34
    3c0a:	81 bd       	out	0x21, r24	; 33
    3c0c:	f8 9a       	sbi	0x1f, 0	; 31
    3c0e:	01 97       	sbiw	r24, 0x01	; 1
    3c10:	00 b4       	in	r0, 0x20	; 32
    3c12:	02 16       	cp	r0, r18
    3c14:	31 f0       	breq	.+12     	; 0x3c22 <__eeupd_r18_m6450a+0x1e>
    3c16:	20 bd       	out	0x20, r18	; 32
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	fa 9a       	sbi	0x1f, 2	; 31
    3c1e:	f9 9a       	sbi	0x1f, 1	; 31
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	08 95       	ret

00003c24 <__eeupd_word_m6450a>:
    3c24:	01 96       	adiw	r24, 0x01	; 1
    3c26:	27 2f       	mov	r18, r23
    3c28:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <__eeupd_r18_m6450a>
    3c2c:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__eeupd_byte_m6450a>

00003c30 <_exit>:
    3c30:	f8 94       	cli

00003c32 <__stop_program>:
    3c32:	ff cf       	rjmp	.-2      	; 0x3c32 <__stop_program>
