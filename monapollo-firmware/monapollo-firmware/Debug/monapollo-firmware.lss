
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000016a2  00001736  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  0080014e  0080014e  00001784  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00001fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b99  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bff  00000000  00000000  00004d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000137d  00000000  00000000  00005958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008bc  00000000  00000000  00006cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000de2  00000000  00000000  00007594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ca6  00000000  00000000  00008376  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e2 ea       	ldi	r30, 0xA2	; 162
      78:	f6 e1       	ldi	r31, 0x16	; 22
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ae 34       	cpi	r26, 0x4E	; 78
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	12 e0       	ldi	r17, 0x02	; 2
      88:	ae e4       	ldi	r26, 0x4E	; 78
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a2 35       	cpi	r26, 0x52	; 82
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 cd 01 	call	0x39a	; 0x39a <main>
      9a:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <setup_dac>:
#include "hardware.h"
#include "dac.h"

void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     120:	83 b3       	in	r24, 0x13	; 19
     122:	83 60       	ori	r24, 0x03	; 3
     124:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     12a:	97 b1       	in	r25, 0x07	; 7
     12c:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     12e:	e9 ed       	ldi	r30, 0xD9	; 217
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	8f 60       	ori	r24, 0x0F	; 15
     136:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     138:	ea ed       	ldi	r30, 0xDA	; 218
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	80 7f       	andi	r24, 0xF0	; 240
     140:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     142:	84 b3       	in	r24, 0x14	; 20
     144:	83 60       	ori	r24, 0x03	; 3
     146:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     148:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     14a:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     14c:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     14e:	a0 9a       	sbi	0x14, 0	; 20
}
     150:	08 95       	ret

00000152 <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     152:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     154:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     156:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     158:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     15a:	62 b9       	out	0x02, r22	; 2
     15c:	2d e0       	ldi	r18, 0x0D	; 13
     15e:	2a 95       	dec	r18
     160:	f1 f7       	brne	.-4      	; 0x15e <set_dac+0xc>
     162:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     164:	ea ed       	ldi	r30, 0xDA	; 218
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	40 81       	ld	r20, Z
     16a:	21 e0       	ldi	r18, 0x01	; 1
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	b9 01       	movw	r22, r18
     170:	02 c0       	rjmp	.+4      	; 0x176 <set_dac+0x24>
     172:	66 0f       	add	r22, r22
     174:	77 1f       	adc	r23, r23
     176:	8a 95       	dec	r24
     178:	e2 f7       	brpl	.-8      	; 0x172 <set_dac+0x20>
     17a:	cb 01       	movw	r24, r22
     17c:	94 2f       	mov	r25, r20
     17e:	98 2b       	or	r25, r24
     180:	90 83       	st	Z, r25
     182:	72 e4       	ldi	r23, 0x42	; 66
     184:	7a 95       	dec	r23
     186:	f1 f7       	brne	.-4      	; 0x184 <set_dac+0x32>
     188:	00 c0       	rjmp	.+0      	; 0x18a <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     18a:	90 81       	ld	r25, Z
     18c:	80 95       	com	r24
     18e:	89 23       	and	r24, r25
     190:	80 83       	st	Z, r24
	
}
     192:	08 95       	ret

00000194 <display_dec>:
#include "display.h"
#include "hardware.h"
#include "display_map.h"

void display_dec(uint16_t number, uint8_t digit)
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	2a 97       	sbiw	r28, 0x0a	; 10
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     1a8:	de 01       	movw	r26, r28
     1aa:	11 96       	adiw	r26, 0x01	; 1
     1ac:	e0 e0       	ldi	r30, 0x00	; 0
     1ae:	f1 e0       	ldi	r31, 0x01	; 1
     1b0:	3a e0       	ldi	r19, 0x0A	; 10
     1b2:	01 90       	ld	r0, Z+
     1b4:	0d 92       	st	X+, r0
     1b6:	31 50       	subi	r19, 0x01	; 1
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     1ba:	3f ef       	ldi	r19, 0xFF	; 255
     1bc:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     1be:	ea ed       	ldi	r30, 0xDA	; 218
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	30 81       	ld	r19, Z
     1c4:	30 61       	ori	r19, 0x10	; 16
     1c6:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     1c8:	30 81       	ld	r19, Z
     1ca:	3f 7e       	andi	r19, 0xEF	; 239
     1cc:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     1ce:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     1d0:	30 81       	ld	r19, Z
     1d2:	30 62       	ori	r19, 0x20	; 32
     1d4:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     1d6:	30 81       	ld	r19, Z
     1d8:	3f 7d       	andi	r19, 0xDF	; 223
     1da:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
     1dc:	62 30       	cpi	r22, 0x02	; 2
     1de:	f9 f0       	breq	.+62     	; 0x21e <display_dec+0x8a>
     1e0:	63 30       	cpi	r22, 0x03	; 3
     1e2:	18 f4       	brcc	.+6      	; 0x1ea <display_dec+0x56>
     1e4:	61 30       	cpi	r22, 0x01	; 1
     1e6:	a1 f5       	brne	.+104    	; 0x250 <display_dec+0xbc>
     1e8:	0d c0       	rjmp	.+26     	; 0x204 <display_dec+0x70>
     1ea:	64 30       	cpi	r22, 0x04	; 4
     1ec:	29 f1       	breq	.+74     	; 0x238 <display_dec+0xa4>
     1ee:	68 30       	cpi	r22, 0x08	; 8
     1f0:	79 f5       	brne	.+94     	; 0x250 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     1f2:	6a e0       	ldi	r22, 0x0A	; 10
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
     1fa:	fe 01       	movw	r30, r28
     1fc:	e8 0f       	add	r30, r24
     1fe:	f9 1f       	adc	r31, r25
     200:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     202:	26 c0       	rjmp	.+76     	; 0x250 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     204:	64 e6       	ldi	r22, 0x64	; 100
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
     20c:	6a e0       	ldi	r22, 0x0A	; 10
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
     214:	fe 01       	movw	r30, r28
     216:	e6 0f       	add	r30, r22
     218:	f7 1f       	adc	r31, r23
     21a:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     21c:	19 c0       	rjmp	.+50     	; 0x250 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     21e:	68 ee       	ldi	r22, 0xE8	; 232
     220:	73 e0       	ldi	r23, 0x03	; 3
     222:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
     226:	64 e6       	ldi	r22, 0x64	; 100
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
     22e:	fe 01       	movw	r30, r28
     230:	e6 0f       	add	r30, r22
     232:	f7 1f       	adc	r31, r23
     234:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     236:	0c c0       	rjmp	.+24     	; 0x250 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     238:	60 e1       	ldi	r22, 0x10	; 16
     23a:	77 e2       	ldi	r23, 0x27	; 39
     23c:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
     240:	68 ee       	ldi	r22, 0xE8	; 232
     242:	73 e0       	ldi	r23, 0x03	; 3
     244:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
     248:	fe 01       	movw	r30, r28
     24a:	e6 0f       	add	r30, r22
     24c:	f7 1f       	adc	r31, r23
     24e:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     250:	20 95       	com	r18
     252:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     254:	ea ed       	ldi	r30, 0xDA	; 218
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	80 61       	ori	r24, 0x10	; 16
     25c:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     25e:	80 81       	ld	r24, Z
     260:	8f 7e       	andi	r24, 0xEF	; 239
     262:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
     264:	2a 96       	adiw	r28, 0x0a	; 10
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <note_on_event>:

volatile uint8_t place = 0; //digit place for LED display

void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	value_to_display = note;
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	50 93 0f 01 	sts	0x010F, r21
     27c:	40 93 0e 01 	sts	0x010E, r20
	
	if (velocity == 0) {
     280:	22 23       	and	r18, r18
     282:	11 f4       	brne	.+4      	; 0x288 <note_on_event+0x12>
		
		PORTF &= ~(1<<GATE);
     284:	89 98       	cbi	0x11, 1	; 17
     286:	08 95       	ret
	} else {
		PORTF |= (1<<GATE);
     288:	89 9a       	sbi	0x11, 1	; 17
     28a:	08 95       	ret

0000028c <note_off_event>:
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	PORTF &= ~(1<<GATE);
     28c:	89 98       	cbi	0x11, 1	; 17
}
     28e:	08 95       	ret

00000290 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     290:	87 e2       	ldi	r24, 0x27	; 39
     292:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     296:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     29a:	88 e9       	ldi	r24, 0x98	; 152
     29c:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     2a0:	08 95       	ret

000002a2 <__vector_13>:
	THOUS,
};



ISR (USART_RX_vect) { // USART receive interrupt
     2a2:	1f 92       	push	r1
     2a4:	0f 92       	push	r0
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	0f 92       	push	r0
     2aa:	11 24       	eor	r1, r1
     2ac:	2f 93       	push	r18
     2ae:	3f 93       	push	r19
     2b0:	4f 93       	push	r20
     2b2:	5f 93       	push	r21
     2b4:	6f 93       	push	r22
     2b6:	7f 93       	push	r23
     2b8:	8f 93       	push	r24
     2ba:	9f 93       	push	r25
     2bc:	af 93       	push	r26
     2be:	bf 93       	push	r27
     2c0:	ef 93       	push	r30
     2c2:	ff 93       	push	r31
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	0f 92       	push	r0
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
	 
	uint8_t inByte = UDR0;
     2ce:	80 91 c6 00 	lds	r24, 0x00C6
     2d2:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);	
     2d4:	85 e6       	ldi	r24, 0x65	; 101
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	ae 01       	movw	r20, r28
     2dc:	4f 5f       	subi	r20, 0xFF	; 255
     2de:	5f 4f       	sbci	r21, 0xFF	; 255
     2e0:	0e 94 1b 07 	call	0xe36	; 0xe36 <midi_device_input>
	  	
}
     2e4:	0f 90       	pop	r0
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	ff 91       	pop	r31
     2ec:	ef 91       	pop	r30
     2ee:	bf 91       	pop	r27
     2f0:	af 91       	pop	r26
     2f2:	9f 91       	pop	r25
     2f4:	8f 91       	pop	r24
     2f6:	7f 91       	pop	r23
     2f8:	6f 91       	pop	r22
     2fa:	5f 91       	pop	r21
     2fc:	4f 91       	pop	r20
     2fe:	3f 91       	pop	r19
     300:	2f 91       	pop	r18
     302:	0f 90       	pop	r0
     304:	0f be       	out	0x3f, r0	; 63
     306:	0f 90       	pop	r0
     308:	1f 90       	pop	r1
     30a:	18 95       	reti

0000030c <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
     30c:	1f 92       	push	r1
     30e:	0f 92       	push	r0
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	0f 92       	push	r0
     314:	11 24       	eor	r1, r1
     316:	2f 93       	push	r18
     318:	3f 93       	push	r19
     31a:	4f 93       	push	r20
     31c:	5f 93       	push	r21
     31e:	6f 93       	push	r22
     320:	7f 93       	push	r23
     322:	8f 93       	push	r24
     324:	9f 93       	push	r25
     326:	af 93       	push	r26
     328:	bf 93       	push	r27
     32a:	ef 93       	push	r30
     32c:	ff 93       	push	r31
	
	display_dec(value_to_display, digit[place]);
     32e:	80 91 0e 01 	lds	r24, 0x010E
     332:	90 91 0f 01 	lds	r25, 0x010F
     336:	20 91 4e 01 	lds	r18, 0x014E
     33a:	ea e0       	ldi	r30, 0x0A	; 10
     33c:	f1 e0       	ldi	r31, 0x01	; 1
     33e:	e2 0f       	add	r30, r18
     340:	f1 1d       	adc	r31, r1
     342:	60 81       	ld	r22, Z
     344:	0e 94 ca 00 	call	0x194	; 0x194 <display_dec>
	
	scan_pots_and_update_control_voltages();		
     348:	0e 94 10 02 	call	0x420	; 0x420 <scan_pots_and_update_control_voltages>

		
	//do SPI read/write every 5 interrupts (16.5 ms)
	if (switch_timer++ == 5)
     34c:	80 91 4f 01 	lds	r24, 0x014F
     350:	98 2f       	mov	r25, r24
     352:	9f 5f       	subi	r25, 0xFF	; 255
     354:	90 93 4f 01 	sts	0x014F, r25
     358:	85 30       	cpi	r24, 0x05	; 5
     35a:	21 f4       	brne	.+8      	; 0x364 <__vector_5+0x58>
	{
		switch_timer = 0;
     35c:	10 92 4f 01 	sts	0x014F, r1
		update_spi();	
     360:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <update_spi>
			  	
	}
		
	//increment digit display place
	if (place++ == 3) //post increment
     364:	80 91 4e 01 	lds	r24, 0x014E
     368:	98 2f       	mov	r25, r24
     36a:	9f 5f       	subi	r25, 0xFF	; 255
     36c:	90 93 4e 01 	sts	0x014E, r25
     370:	83 30       	cpi	r24, 0x03	; 3
     372:	11 f4       	brne	.+4      	; 0x378 <__vector_5+0x6c>
	{
		place = 0;
     374:	10 92 4e 01 	sts	0x014E, r1
	}
	

	
}	
     378:	ff 91       	pop	r31
     37a:	ef 91       	pop	r30
     37c:	bf 91       	pop	r27
     37e:	af 91       	pop	r26
     380:	9f 91       	pop	r25
     382:	8f 91       	pop	r24
     384:	7f 91       	pop	r23
     386:	6f 91       	pop	r22
     388:	5f 91       	pop	r21
     38a:	4f 91       	pop	r20
     38c:	3f 91       	pop	r19
     38e:	2f 91       	pop	r18
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     39a:	80 e8       	ldi	r24, 0x80	; 128
     39c:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     39e:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     3a0:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     3a2:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     3a4:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     3a6:	a2 98       	cbi	0x14, 2	; 20
	
	setup_spi(); 
     3a8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     3ac:	a9 ed       	ldi	r26, 0xD9	; 217
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
     3b0:	8c 91       	ld	r24, X
     3b2:	80 6c       	ori	r24, 0xC0	; 192
     3b4:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     3b6:	ea ed       	ldi	r30, 0xDA	; 218
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	80 6c       	ori	r24, 0xC0	; 192
     3be:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     3c0:	81 b1       	in	r24, 0x01	; 1
     3c2:	8f ef       	ldi	r24, 0xFF	; 255
     3c4:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     3c6:	92 b1       	in	r25, 0x02	; 2
     3c8:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     3ca:	8c 91       	ld	r24, X
     3cc:	80 63       	ori	r24, 0x30	; 48
     3ce:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     3d0:	80 81       	ld	r24, Z
     3d2:	8f 7c       	andi	r24, 0xCF	; 207
     3d4:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<ISW8_SW); //set ISW8_SW pin as input
     3d6:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     3d8:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     3dc:	0e 94 90 00 	call	0x120	; 0x120 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     3e0:	c5 e6       	ldi	r28, 0x65	; 101
     3e2:	d1 e0       	ldi	r29, 0x01	; 1
     3e4:	ce 01       	movw	r24, r28
     3e6:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     3ea:	ce 01       	movw	r24, r28
     3ec:	6b e3       	ldi	r22, 0x3B	; 59
     3ee:	71 e0       	ldi	r23, 0x01	; 1
     3f0:	0e 94 b2 06 	call	0xd64	; 0xd64 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     3f4:	ce 01       	movw	r24, r28
     3f6:	66 e4       	ldi	r22, 0x46	; 70
     3f8:	71 e0       	ldi	r23, 0x01	; 1
     3fa:	0e 94 b6 06 	call	0xd6c	; 0xd6c <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     3fe:	0e 94 48 01 	call	0x290	; 0x290 <setup_midi_usart>
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
     402:	e0 eb       	ldi	r30, 0xB0	; 176
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	86 60       	ori	r24, 0x06	; 6
     40a:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
     40c:	e0 e7       	ldi	r30, 0x70	; 112
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	81 60       	ori	r24, 0x01	; 1
     414:	80 83       	st	Z, r24
	sei(); //enable global interrupts
     416:	78 94       	sei

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     418:	ce 01       	movw	r24, r28
     41a:	0e 94 45 09 	call	0x128a	; 0x128a <midi_device_process>
     41e:	fc cf       	rjmp	.-8      	; 0x418 <main+0x7e>

00000420 <scan_pots_and_update_control_voltages>:
	{SUSTAIN_1,		DAC_MUX_EN3},
	{RELEASE_2,		DAC_MUX_EN3},
	{RELEASE_1,		DAC_MUX_EN3}							
};

void scan_pots_and_update_control_voltages(void) {
     420:	8f 92       	push	r8
     422:	9f 92       	push	r9
     424:	af 92       	push	r10
     426:	bf 92       	push	r11
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	ee 24       	eor	r14, r14
     43a:	ff 24       	eor	r15, r15
     43c:	e3 94       	inc	r14
     43e:	00 e0       	ldi	r16, 0x00	; 0
     440:	10 e0       	ldi	r17, 0x00	; 0
		} else if (i == 11) //exception to handle ARP_RATE pot
		{
			//store ARP pot value, but don't set DAC
			
		} else {
			set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
     442:	0f 2e       	mov	r0, r31
     444:	fe e2       	ldi	r31, 0x2E	; 46
     446:	cf 2e       	mov	r12, r31
     448:	f1 e0       	ldi	r31, 0x01	; 1
     44a:	df 2e       	mov	r13, r31
     44c:	f0 2d       	mov	r31, r0
		adc_value = read_pot(POTMUX_EN0, i);
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     44e:	0f 2e       	mov	r0, r31
     450:	f5 e0       	ldi	r31, 0x05	; 5
     452:	8f 2e       	mov	r8, r31
     454:	ff e1       	ldi	r31, 0x1F	; 31
     456:	9f 2e       	mov	r9, r31
     458:	f0 2d       	mov	r31, r0

		adc_value = read_pot(POTMUX_EN0, i);
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
     45a:	0f 2e       	mov	r0, r31
     45c:	ff e9       	ldi	r31, 0x9F	; 159
     45e:	af 2e       	mov	r10, r31
     460:	f8 e1       	ldi	r31, 0x18	; 24
     462:	bf 2e       	mov	r11, r31
     464:	f0 2d       	mov	r31, r0
     466:	05 c0       	rjmp	.+10     	; 0x472 <scan_pots_and_update_control_voltages+0x52>
};

void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     468:	0f 5f       	subi	r16, 0xFF	; 255
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	08 94       	sec
     46e:	e1 1c       	adc	r14, r1
     470:	f1 1c       	adc	r15, r1
     472:	e8 01       	movw	r28, r16
	{

		adc_value = read_pot(POTMUX_EN0, i);
     474:	86 e0       	ldi	r24, 0x06	; 6
     476:	60 2f       	mov	r22, r16
     478:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     47c:	90 93 53 01 	sts	0x0153, r25
     480:	80 93 52 01 	sts	0x0152, r24
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
     484:	c8 01       	movw	r24, r16
     486:	08 97       	sbiw	r24, 0x08	; 8
     488:	82 30       	cpi	r24, 0x02	; 2
     48a:	91 05       	cpc	r25, r1
     48c:	08 f0       	brcs	.+2      	; 0x490 <scan_pots_and_update_control_voltages+0x70>
     48e:	44 c0       	rjmp	.+136    	; 0x518 <scan_pots_and_update_control_voltages+0xf8>
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     490:	09 30       	cpi	r16, 0x09	; 9
     492:	11 05       	cpc	r17, r1
     494:	11 f0       	breq	.+4      	; 0x49a <scan_pots_and_update_control_voltages+0x7a>

		adc_value = read_pot(POTMUX_EN0, i);
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
     496:	95 01       	movw	r18, r10
     498:	01 c0       	rjmp	.+2      	; 0x49c <scan_pots_and_update_control_voltages+0x7c>
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     49a:	94 01       	movw	r18, r8
			if (adc_value >= 512) {
     49c:	80 91 52 01 	lds	r24, 0x0152
     4a0:	90 91 53 01 	lds	r25, 0x0153
     4a4:	42 e0       	ldi	r20, 0x02	; 2
     4a6:	80 30       	cpi	r24, 0x00	; 0
     4a8:	94 07       	cpc	r25, r20
     4aa:	e0 f0       	brcs	.+56     	; 0x4e4 <scan_pots_and_update_control_voltages+0xc4>
				set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value + (adc_value - 512)));
     4ac:	fe 01       	movw	r30, r28
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	ec 0d       	add	r30, r12
     4b4:	fd 1d       	adc	r31, r13
     4b6:	81 81       	ldd	r24, Z+1	; 0x01
     4b8:	60 81       	ld	r22, Z
     4ba:	40 91 52 01 	lds	r20, 0x0152
     4be:	50 91 53 01 	lds	r21, 0x0153
     4c2:	40 50       	subi	r20, 0x00	; 0
     4c4:	52 40       	sbci	r21, 0x02	; 2
     4c6:	42 0f       	add	r20, r18
     4c8:	53 1f       	adc	r21, r19
     4ca:	0e 94 a9 00 	call	0x152	; 0x152 <set_dac>
				tune_offset = adc_value - 512;
     4ce:	80 91 52 01 	lds	r24, 0x0152
     4d2:	90 91 53 01 	lds	r25, 0x0153
     4d6:	80 50       	subi	r24, 0x00	; 0
     4d8:	92 40       	sbci	r25, 0x02	; 2
     4da:	90 93 51 01 	sts	0x0151, r25
     4de:	80 93 50 01 	sts	0x0150, r24
     4e2:	31 c0       	rjmp	.+98     	; 0x546 <scan_pots_and_update_control_voltages+0x126>
			} else {
				set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value - (512- adc_value)));
     4e4:	fe 01       	movw	r30, r28
     4e6:	ee 0f       	add	r30, r30
     4e8:	ff 1f       	adc	r31, r31
     4ea:	ec 0d       	add	r30, r12
     4ec:	fd 1d       	adc	r31, r13
     4ee:	81 81       	ldd	r24, Z+1	; 0x01
     4f0:	60 81       	ld	r22, Z
     4f2:	40 91 52 01 	lds	r20, 0x0152
     4f6:	50 91 53 01 	lds	r21, 0x0153
     4fa:	40 50       	subi	r20, 0x00	; 0
     4fc:	52 40       	sbci	r21, 0x02	; 2
     4fe:	42 0f       	add	r20, r18
     500:	53 1f       	adc	r21, r19
     502:	0e 94 a9 00 	call	0x152	; 0x152 <set_dac>
				tune_offset = adc_value;
     506:	80 91 52 01 	lds	r24, 0x0152
     50a:	90 91 53 01 	lds	r25, 0x0153
     50e:	90 93 51 01 	sts	0x0151, r25
     512:	80 93 50 01 	sts	0x0150, r24
     516:	17 c0       	rjmp	.+46     	; 0x546 <scan_pots_and_update_control_voltages+0x126>
			}

		} else if (i == 11) //exception to handle ARP_RATE pot
     518:	0b 30       	cpi	r16, 0x0B	; 11
     51a:	11 05       	cpc	r17, r1
     51c:	09 f4       	brne	.+2      	; 0x520 <scan_pots_and_update_control_voltages+0x100>
     51e:	a4 cf       	rjmp	.-184    	; 0x468 <scan_pots_and_update_control_voltages+0x48>
		{
			//store ARP pot value, but don't set DAC
			
		} else {
			set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
     520:	f8 01       	movw	r30, r16
     522:	ee 0f       	add	r30, r30
     524:	ff 1f       	adc	r31, r31
     526:	ec 0d       	add	r30, r12
     528:	fd 1d       	adc	r31, r13
     52a:	81 81       	ldd	r24, Z+1	; 0x01
     52c:	60 81       	ld	r22, Z
     52e:	40 91 52 01 	lds	r20, 0x0152
     532:	50 91 53 01 	lds	r21, 0x0153
     536:	42 95       	swap	r20
     538:	52 95       	swap	r21
     53a:	50 7f       	andi	r21, 0xF0	; 240
     53c:	54 27       	eor	r21, r20
     53e:	40 7f       	andi	r20, 0xF0	; 240
     540:	54 27       	eor	r21, r20
     542:	0e 94 a9 00 	call	0x152	; 0x152 <set_dac>
};

void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     546:	80 e1       	ldi	r24, 0x10	; 16
     548:	e8 16       	cp	r14, r24
     54a:	f1 04       	cpc	r15, r1
     54c:	0c f4       	brge	.+2      	; 0x550 <scan_pots_and_update_control_voltages+0x130>
     54e:	8c cf       	rjmp	.-232    	; 0x468 <scan_pots_and_update_control_voltages+0x48>
     550:	c0 e0       	ldi	r28, 0x00	; 0
     552:	d0 e0       	ldi	r29, 0x00	; 0
		//adc_value = ADCL;
		//adc_value = adc_value | (ADCH <<8);
		
		adc_value = read_pot(POTMUX_EN1, i+1);
		
		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
     554:	00 e1       	ldi	r16, 0x10	; 16
     556:	11 e0       	ldi	r17, 0x01	; 1
	{SUSTAIN_1,		DAC_MUX_EN3},
	{RELEASE_2,		DAC_MUX_EN3},
	{RELEASE_1,		DAC_MUX_EN3}							
};

void scan_pots_and_update_control_voltages(void) {
     558:	6c 2f       	mov	r22, r28
     55a:	6f 5f       	subi	r22, 0xFF	; 255
		//POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2
		////adc_previous = adc_value;
		//adc_value = ADCL;
		//adc_value = adc_value | (ADCH <<8);
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     55c:	87 e0       	ldi	r24, 0x07	; 7
     55e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     562:	90 93 53 01 	sts	0x0153, r25
     566:	80 93 52 01 	sts	0x0152, r24
		
		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
     56a:	fe 01       	movw	r30, r28
     56c:	ee 0f       	add	r30, r30
     56e:	ff 1f       	adc	r31, r31
     570:	e0 0f       	add	r30, r16
     572:	f1 1f       	adc	r31, r17
     574:	81 81       	ldd	r24, Z+1	; 0x01
     576:	60 81       	ld	r22, Z
     578:	40 91 52 01 	lds	r20, 0x0152
     57c:	50 91 53 01 	lds	r21, 0x0153
     580:	42 95       	swap	r20
     582:	52 95       	swap	r21
     584:	50 7f       	andi	r21, 0xF0	; 240
     586:	54 27       	eor	r21, r20
     588:	40 7f       	andi	r20, 0xF0	; 240
     58a:	54 27       	eor	r21, r20
     58c:	0e 94 a9 00 	call	0x152	; 0x152 <set_dac>
		}
		
	}
	
	//now read second set of pots form U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     590:	21 96       	adiw	r28, 0x01	; 1
     592:	cf 30       	cpi	r28, 0x0F	; 15
     594:	d1 05       	cpc	r29, r1
     596:	01 f7       	brne	.-64     	; 0x558 <scan_pots_and_update_control_voltages+0x138>
		
		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);

	}

	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     598:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     59a:	a1 9a       	sbi	0x14, 1	; 20
	
	
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	df 90       	pop	r13
     5aa:	cf 90       	pop	r12
     5ac:	bf 90       	pop	r11
     5ae:	af 90       	pop	r10
     5b0:	9f 90       	pop	r9
     5b2:	8f 90       	pop	r8
     5b4:	08 95       	ret

000005b6 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     5b6:	84 b1       	in	r24, 0x04	; 4
     5b8:	87 62       	ori	r24, 0x27	; 39
     5ba:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     5bc:	ec ed       	ldi	r30, 0xDC	; 220
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	8c 65       	ori	r24, 0x5C	; 92
     5c4:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     5c6:	85 b1       	in	r24, 0x05	; 5
     5c8:	89 7d       	andi	r24, 0xD9	; 217
     5ca:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     5cc:	ed ed       	ldi	r30, 0xDD	; 221
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	83 7f       	andi	r24, 0xF3	; 243
     5d4:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     5d6:	80 e5       	ldi	r24, 0x50	; 80
     5d8:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     5da:	80 81       	ld	r24, Z
     5dc:	87 7f       	andi	r24, 0xF7	; 247
     5de:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     5e0:	80 81       	ld	r24, Z
     5e2:	87 7f       	andi	r24, 0xF7	; 247
     5e4:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     5e6:	80 81       	ld	r24, Z
     5e8:	88 60       	ori	r24, 0x08	; 8
     5ea:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     5ec:	80 81       	ld	r24, Z
     5ee:	8f 7e       	andi	r24, 0xEF	; 239
     5f0:	80 83       	st	Z, r24
	
}
     5f2:	08 95       	ret

000005f4 <update_spi>:

void update_spi(void) {
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
	
			SPI_PORT |= SPI_SW_LATCH;
     5fc:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE
			SPDR =
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     5fe:	c0 91 5a 01 	lds	r28, 0x015A
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     602:	40 91 5a 01 	lds	r20, 0x015A
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     606:	00 91 5a 01 	lds	r16, 0x015A
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     60a:	80 91 5a 01 	lds	r24, 0x015A
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     60e:	a0 91 5a 01 	lds	r26, 0x015A
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     612:	60 91 5a 01 	lds	r22, 0x015A
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     616:	20 91 5a 01 	lds	r18, 0x015A
			ISW8_SW_ON << ISW8_LED;
     61a:	90 91 5f 01 	lds	r25, 0x015F
     61e:	97 95       	ror	r25
     620:	99 27       	eor	r25, r25
     622:	97 95       	ror	r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     624:	81 70       	andi	r24, 0x01	; 1
     626:	98 2b       	or	r25, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     628:	cc 1f       	adc	r28, r28
     62a:	cc 27       	eor	r28, r28
     62c:	cc 1f       	adc	r28, r28
     62e:	cc 0f       	add	r28, r28
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     630:	c9 2b       	or	r28, r25
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     632:	46 95       	lsr	r20
     634:	46 95       	lsr	r20
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	41 70       	andi	r20, 0x01	; 1
     63a:	50 70       	andi	r21, 0x00	; 0
     63c:	ca 01       	movw	r24, r20
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     646:	8c 2b       	or	r24, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     648:	06 95       	lsr	r16
     64a:	10 e0       	ldi	r17, 0x00	; 0
     64c:	01 70       	andi	r16, 0x01	; 1
     64e:	10 70       	andi	r17, 0x00	; 0
     650:	e8 01       	movw	r28, r16
     652:	cc 0f       	add	r28, r28
     654:	dd 1f       	adc	r29, r29
     656:	cc 0f       	add	r28, r28
     658:	dd 1f       	adc	r29, r29
     65a:	cc 0f       	add	r28, r28
     65c:	dd 1f       	adc	r29, r29
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     65e:	c8 2b       	or	r28, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     660:	a2 95       	swap	r26
     662:	af 70       	andi	r26, 0x0F	; 15
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	a1 70       	andi	r26, 0x01	; 1
     668:	b0 70       	andi	r27, 0x00	; 0
     66a:	fd 01       	movw	r30, r26
     66c:	e2 95       	swap	r30
     66e:	f2 95       	swap	r31
     670:	f0 7f       	andi	r31, 0xF0	; 240
     672:	fe 27       	eor	r31, r30
     674:	e0 7f       	andi	r30, 0xF0	; 240
     676:	fe 27       	eor	r31, r30
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     678:	ec 2b       	or	r30, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     67a:	62 95       	swap	r22
     67c:	66 95       	lsr	r22
     67e:	67 70       	andi	r22, 0x07	; 7
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	61 70       	andi	r22, 0x01	; 1
     684:	70 70       	andi	r23, 0x00	; 0
     686:	ab 01       	movw	r20, r22
     688:	44 0f       	add	r20, r20
     68a:	55 1f       	adc	r21, r21
     68c:	42 95       	swap	r20
     68e:	52 95       	swap	r21
     690:	50 7f       	andi	r21, 0xF0	; 240
     692:	54 27       	eor	r21, r20
     694:	40 7f       	andi	r20, 0xF0	; 240
     696:	54 27       	eor	r21, r20
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     698:	4e 2b       	or	r20, r30
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     69a:	22 95       	swap	r18
     69c:	26 95       	lsr	r18
     69e:	26 95       	lsr	r18
     6a0:	23 70       	andi	r18, 0x03	; 3
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	21 70       	andi	r18, 0x01	; 1
     6a6:	30 70       	andi	r19, 0x00	; 0
     6a8:	c9 01       	movw	r24, r18
     6aa:	00 24       	eor	r0, r0
     6ac:	96 95       	lsr	r25
     6ae:	87 95       	ror	r24
     6b0:	07 94       	ror	r0
     6b2:	96 95       	lsr	r25
     6b4:	87 95       	ror	r24
     6b6:	07 94       	ror	r0
     6b8:	98 2f       	mov	r25, r24
     6ba:	80 2d       	mov	r24, r0
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6bc:	84 2b       	or	r24, r20
     6be:	8e bd       	out	0x2e, r24	; 46
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
			ISW8_SW_ON << ISW8_LED;
			
			while (!(SPSR & (1<<SPIF)));
     6c0:	0d b4       	in	r0, 0x2d	; 45
     6c2:	07 fe       	sbrs	r0, 7
     6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <update_spi+0xcc>
			
			//Now read SPDR for switch data shifted in from 74XX165 U14
			spi_sw_current_state = SPDR;
     6c6:	8e b5       	in	r24, 0x2e	; 46
     6c8:	80 93 5c 01 	sts	0x015C, r24
			
			spi_sw_current_state ^= spi_sw_previous_state;
     6cc:	80 91 5c 01 	lds	r24, 0x015C
     6d0:	90 91 5b 01 	lds	r25, 0x015B
     6d4:	89 27       	eor	r24, r25
     6d6:	80 93 5c 01 	sts	0x015C, r24
			spi_sw_previous_state ^= spi_sw_current_state;
     6da:	80 91 5b 01 	lds	r24, 0x015B
     6de:	90 91 5c 01 	lds	r25, 0x015C
     6e2:	89 27       	eor	r24, r25
     6e4:	80 93 5b 01 	sts	0x015B, r24
			spi_sw_current_state &= spi_sw_previous_state;
     6e8:	80 91 5c 01 	lds	r24, 0x015C
     6ec:	90 91 5b 01 	lds	r25, 0x015B
     6f0:	89 23       	and	r24, r25
     6f2:	80 93 5c 01 	sts	0x015C, r24
			
			//toggle switch state		
			sw_latch_five ^= spi_sw_current_state; //Omar's solution. Replaces above 7 lines of if/then statements. Duh!
     6f6:	80 91 5a 01 	lds	r24, 0x015A
     6fa:	90 91 5c 01 	lds	r25, 0x015C
     6fe:	89 27       	eor	r24, r25
     700:	80 93 5a 01 	sts	0x015A, r24
			
			//SHIFT 4th BYTE
			SPDR = 0; //no LEDs connected in current test set up
     704:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     706:	0d b4       	in	r0, 0x2d	; 45
     708:	07 fe       	sbrs	r0, 7
     70a:	fd cf       	rjmp	.-6      	; 0x706 <update_spi+0x112>
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			sw_latch_four = SPDR;
     70c:	8e b5       	in	r24, 0x2e	; 46
     70e:	80 93 59 01 	sts	0x0159, r24
			//toggling not implemented here yet.
			ISW12_SW_ON = (sw_latch_four >> ISW12_SW) & 1;
     712:	80 91 59 01 	lds	r24, 0x0159
     716:	82 95       	swap	r24
     718:	86 95       	lsr	r24
     71a:	87 70       	andi	r24, 0x07	; 7
     71c:	81 70       	andi	r24, 0x01	; 1
     71e:	80 93 62 01 	sts	0x0162, r24
			//check if ISW13_SW bit is set
			ISW13_SW_ON = (sw_latch_four >> ISW13_SW) & 1;
     722:	80 91 59 01 	lds	r24, 0x0159
     726:	82 95       	swap	r24
     728:	86 95       	lsr	r24
     72a:	86 95       	lsr	r24
     72c:	83 70       	andi	r24, 0x03	; 3
     72e:	81 70       	andi	r24, 0x01	; 1
     730:	80 93 61 01 	sts	0x0161, r24

			
			//SHIFT 3th BYTE
			SPDR = 0;
     734:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     736:	0d b4       	in	r0, 0x2d	; 45
     738:	07 fe       	sbrs	r0, 7
     73a:	fd cf       	rjmp	.-6      	; 0x736 <update_spi+0x142>

			//SHIFT 2th BYTE
			SPDR = 0;
     73c:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     73e:	0d b4       	in	r0, 0x2d	; 45
     740:	07 fe       	sbrs	r0, 7
     742:	fd cf       	rjmp	.-6      	; 0x73e <update_spi+0x14a>
			
			//SHIFT 1st BYTE
			
			SPDR = (ISW12_SW_ON << ISW12_LED) | (ISW11_SW_ON << ISW11_LED) | (ISW9_SW_ON << ISW9_LED); 
     744:	20 91 62 01 	lds	r18, 0x0162
     748:	80 91 63 01 	lds	r24, 0x0163
     74c:	90 91 64 01 	lds	r25, 0x0164
     750:	22 0f       	add	r18, r18
     752:	22 0f       	add	r18, r18
     754:	87 95       	ror	r24
     756:	88 27       	eor	r24, r24
     758:	87 95       	ror	r24
     75a:	82 2b       	or	r24, r18
     75c:	89 2b       	or	r24, r25
     75e:	8e bd       	out	0x2e, r24	; 46
			//Wait for SPI shift to complete
			while (!(SPSR & (1<<SPIF)));
     760:	0d b4       	in	r0, 0x2d	; 45
     762:	07 fe       	sbrs	r0, 7
     764:	fd cf       	rjmp	.-6      	; 0x760 <update_spi+0x16c>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     766:	ed ed       	ldi	r30, 0xDD	; 221
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	87 7f       	andi	r24, 0xF7	; 247
     76e:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     770:	80 81       	ld	r24, Z
     772:	88 60       	ori	r24, 0x08	; 8
     774:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     776:	2d 98       	cbi	0x05, 5	; 5
			
			//now read switches directly connected to MCU
			//this toggle code works, but I haven't figured out how it works
			//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
			current_sw_state = SWITCH_PORT;
     778:	8f b1       	in	r24, 0x0f	; 15
     77a:	80 93 5d 01 	sts	0x015D, r24
			current_sw_state ^= previous_sw_state;
     77e:	80 91 5d 01 	lds	r24, 0x015D
     782:	90 91 5e 01 	lds	r25, 0x015E
     786:	89 27       	eor	r24, r25
     788:	80 93 5d 01 	sts	0x015D, r24
			previous_sw_state ^= current_sw_state;
     78c:	80 91 5e 01 	lds	r24, 0x015E
     790:	90 91 5d 01 	lds	r25, 0x015D
     794:	89 27       	eor	r24, r25
     796:	80 93 5e 01 	sts	0x015E, r24
			current_sw_state &= previous_sw_state;
     79a:	80 91 5d 01 	lds	r24, 0x015D
     79e:	90 91 5e 01 	lds	r25, 0x015E
     7a2:	89 23       	and	r24, r25
     7a4:	80 93 5d 01 	sts	0x015D, r24
			
			if (current_sw_state & (1<<ISW8_SW))
     7a8:	80 91 5d 01 	lds	r24, 0x015D
     7ac:	82 ff       	sbrs	r24, 2
     7ae:	06 c0       	rjmp	.+12     	; 0x7bc <update_spi+0x1c8>
			{
				ISW8_SW_ON ^= 1 << 0; //toggle switch state
     7b0:	90 91 5f 01 	lds	r25, 0x015F
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	89 27       	eor	r24, r25
     7b8:	80 93 5f 01 	sts	0x015F, r24
			}
			
			if (current_sw_state & (1<<ISW11_SW)) {
     7bc:	80 91 5d 01 	lds	r24, 0x015D
     7c0:	84 ff       	sbrs	r24, 4
     7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <update_spi+0x1dc>
				
				ISW11_SW_ON ^= 1 << 0; //toggle switch state
     7c4:	90 91 63 01 	lds	r25, 0x0163
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	89 27       	eor	r24, r25
     7cc:	80 93 63 01 	sts	0x0163, r24
			}
			
			if (current_sw_state & (1<<ISW9_SW)) {
     7d0:	80 91 5d 01 	lds	r24, 0x015D
     7d4:	83 ff       	sbrs	r24, 3
     7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <update_spi+0x1f0>
				
				ISW9_SW_ON ^= 1 << 0; //toggle switch state
     7d8:	90 91 64 01 	lds	r25, 0x0164
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	89 27       	eor	r24, r25
     7e0:	80 93 64 01 	sts	0x0164, r24
			}
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     7e4:	ed ed       	ldi	r30, 0xDD	; 221
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z
     7ea:	8f 7b       	andi	r24, 0xBF	; 191
     7ec:	80 83       	st	Z, r24
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
     7ee:	40 91 5a 01 	lds	r20, 0x015A
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     7f2:	30 91 5a 01 	lds	r19, 0x015A
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
     7f6:	c0 91 5a 01 	lds	r28, 0x015A
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
     7fa:	00 91 5a 01 	lds	r16, 0x015A
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
     7fe:	60 91 5a 01 	lds	r22, 0x015A
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
     802:	a0 91 5a 01 	lds	r26, 0x015A
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
     806:	20 91 5a 01 	lds	r18, 0x015A
			ISW8_SW_ON << 4;
     80a:	80 91 5f 01 	lds	r24, 0x015F
     80e:	82 95       	swap	r24
     810:	80 7f       	andi	r24, 0xF0	; 240
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     812:	36 95       	lsr	r19
     814:	36 95       	lsr	r19
     816:	31 70       	andi	r19, 0x01	; 1
     818:	38 2b       	or	r19, r24
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
     81a:	10 e0       	ldi	r17, 0x00	; 0
     81c:	01 70       	andi	r16, 0x01	; 1
     81e:	10 70       	andi	r17, 0x00	; 0
     820:	c8 01       	movw	r24, r16
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     826:	83 2b       	or	r24, r19
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
     828:	a2 95       	swap	r26
     82a:	a6 95       	lsr	r26
     82c:	a7 70       	andi	r26, 0x07	; 7
     82e:	a7 95       	ror	r26
     830:	aa 27       	eor	r26, r26
     832:	a7 95       	ror	r26
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     834:	8a 2b       	or	r24, r26
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
     836:	44 1f       	adc	r20, r20
     838:	44 27       	eor	r20, r20
     83a:	44 1f       	adc	r20, r20
     83c:	44 0f       	add	r20, r20
     83e:	44 0f       	add	r20, r20
     840:	44 0f       	add	r20, r20
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     842:	48 2b       	or	r20, r24
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
     844:	c6 95       	lsr	r28
     846:	d0 e0       	ldi	r29, 0x00	; 0
     848:	c1 70       	andi	r28, 0x01	; 1
     84a:	d0 70       	andi	r29, 0x00	; 0
     84c:	de 01       	movw	r26, r28
     84e:	aa 0f       	add	r26, r26
     850:	bb 1f       	adc	r27, r27
     852:	aa 0f       	add	r26, r26
     854:	bb 1f       	adc	r27, r27
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     856:	a4 2b       	or	r26, r20
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
     858:	62 95       	swap	r22
     85a:	6f 70       	andi	r22, 0x0F	; 15
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	61 70       	andi	r22, 0x01	; 1
     860:	70 70       	andi	r23, 0x00	; 0
     862:	ab 01       	movw	r20, r22
     864:	00 24       	eor	r0, r0
     866:	56 95       	lsr	r21
     868:	47 95       	ror	r20
     86a:	07 94       	ror	r0
     86c:	56 95       	lsr	r21
     86e:	47 95       	ror	r20
     870:	07 94       	ror	r0
     872:	54 2f       	mov	r21, r20
     874:	40 2d       	mov	r20, r0
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     876:	4a 2b       	or	r20, r26
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
     878:	22 95       	swap	r18
     87a:	26 95       	lsr	r18
     87c:	26 95       	lsr	r18
     87e:	23 70       	andi	r18, 0x03	; 3
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	21 70       	andi	r18, 0x01	; 1
     884:	30 70       	andi	r19, 0x00	; 0
     886:	c9 01       	movw	r24, r18
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	82 95       	swap	r24
     88e:	92 95       	swap	r25
     890:	90 7f       	andi	r25, 0xF0	; 240
     892:	98 27       	eor	r25, r24
     894:	80 7f       	andi	r24, 0xF0	; 240
     896:	98 27       	eor	r25, r24
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     898:	84 2b       	or	r24, r20
     89a:	82 b9       	out	0x02, r24	; 2
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
			ISW8_SW_ON << 4;
			VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     89c:	80 81       	ld	r24, Z
     89e:	80 64       	ori	r24, 0x40	; 64
     8a0:	80 83       	st	Z, r24
     8a2:	00 00       	nop
			_delay_us(1);
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     8a4:	80 81       	ld	r24, Z
     8a6:	8f 7b       	andi	r24, 0xBF	; 191
     8a8:	80 83       	st	Z, r24
			DATA_BUS = 0;
     8aa:	12 b8       	out	0x02, r1	; 2
			
			//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
			//need to make sure this doesn't interfere with anything else on this port
			EG2_POL_PORT ^= (-ISW9_SW_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     8ac:	90 81       	ld	r25, Z
     8ae:	80 91 64 01 	lds	r24, 0x0164
     8b2:	20 81       	ld	r18, Z
     8b4:	81 95       	neg	r24
     8b6:	82 27       	eor	r24, r18
     8b8:	80 71       	andi	r24, 0x10	; 16
     8ba:	89 27       	eor	r24, r25
     8bc:	80 83       	st	Z, r24
	
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	08 95       	ret

000008c8 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     8c8:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     8ca:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     8cc:	74 83       	std	Z+4, r23	; 0x04
     8ce:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
     8d0:	11 82       	std	Z+1, r1	; 0x01
     8d2:	10 82       	st	Z, r1
}
     8d4:	08 95       	ret

000008d6 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	ec 01       	movw	r28, r24
     8de:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     8e0:	0e 94 da 04 	call	0x9b4	; 0x9b4 <store_and_clear_interrupt>
     8e4:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     8e6:	39 81       	ldd	r19, Y+1	; 0x01
     8e8:	83 2f       	mov	r24, r19
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	6a 81       	ldd	r22, Y+2	; 0x02
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divmodhi4>
     8f6:	48 81       	ld	r20, Y
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	84 17       	cp	r24, r20
     8fc:	95 07       	cpc	r25, r21
     8fe:	29 f4       	brne	.+10     	; 0x90a <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
     900:	82 2f       	mov	r24, r18
     902:	0e 94 dd 04 	call	0x9ba	; 0x9ba <restore_interrupt_setting>
      return false;
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	11 c0       	rjmp	.+34     	; 0x92c <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
     90a:	eb 81       	ldd	r30, Y+3	; 0x03
     90c:	fc 81       	ldd	r31, Y+4	; 0x04
     90e:	e3 0f       	add	r30, r19
     910:	f1 1d       	adc	r31, r1
     912:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	6a 81       	ldd	r22, Y+2	; 0x02
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divmodhi4>
     922:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     924:	82 2f       	mov	r24, r18
     926:	0e 94 dd 04 	call	0x9ba	; 0x9ba <restore_interrupt_setting>
      return true;
     92a:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	08 95       	ret

00000934 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     93a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     93e:	29 81       	ldd	r18, Y+1	; 0x01
     940:	98 81       	ld	r25, Y
     942:	29 17       	cp	r18, r25
     944:	18 f0       	brcs	.+6      	; 0x94c <bytequeue_length+0x18>
      len = queue->end - queue->start;
     946:	c2 2f       	mov	r28, r18
     948:	c9 1b       	sub	r28, r25
     94a:	03 c0       	rjmp	.+6      	; 0x952 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
     94c:	ca 81       	ldd	r28, Y+2	; 0x02
     94e:	c2 0f       	add	r28, r18
     950:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
     952:	0e 94 dd 04 	call	0x9ba	; 0x9ba <restore_interrupt_setting>
   return len;
}
     956:	8c 2f       	mov	r24, r28
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     95e:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     960:	20 81       	ld	r18, Z
     962:	86 2f       	mov	r24, r22
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	82 0f       	add	r24, r18
     968:	91 1d       	adc	r25, r1
     96a:	62 81       	ldd	r22, Z+2	; 0x02
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divmodhi4>
     972:	03 80       	ldd	r0, Z+3	; 0x03
     974:	f4 81       	ldd	r31, Z+4	; 0x04
     976:	e0 2d       	mov	r30, r0
     978:	e8 0f       	add	r30, r24
     97a:	f9 1f       	adc	r31, r25
}
     97c:	80 81       	ld	r24, Z
     97e:	08 95       	ret

00000980 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	ec 01       	movw	r28, r24
     988:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     98a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <store_and_clear_interrupt>
     98e:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     990:	88 81       	ld	r24, Y
     992:	21 2f       	mov	r18, r17
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	28 0f       	add	r18, r24
     998:	31 1d       	adc	r19, r1
     99a:	6a 81       	ldd	r22, Y+2	; 0x02
     99c:	c9 01       	movw	r24, r18
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divmodhi4>
     9a4:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
     9a6:	84 2f       	mov	r24, r20
     9a8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <restore_interrupt_setting>
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	08 95       	ret

000009b4 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
     9b4:	8f b7       	in	r24, 0x3f	; 63
   cli();
     9b6:	f8 94       	cli
   return sreg;
}
     9b8:	08 95       	ret

000009ba <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
     9ba:	8f bf       	out	0x3f, r24	; 63
}
     9bc:	08 95       	ret

000009be <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     9be:	88 1f       	adc	r24, r24
     9c0:	88 27       	eor	r24, r24
     9c2:	88 1f       	adc	r24, r24
     9c4:	08 95       	ret

000009c6 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	88 3f       	cpi	r24, 0xF8	; 248
     9ca:	08 f4       	brcc	.+2      	; 0x9ce <midi_is_realtime+0x8>
     9cc:	90 e0       	ldi	r25, 0x00	; 0
}
     9ce:	89 2f       	mov	r24, r25
     9d0:	08 95       	ret

000009d2 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     9d2:	28 2f       	mov	r18, r24
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	20 7f       	andi	r18, 0xF0	; 240
     9d8:	30 70       	andi	r19, 0x00	; 0
     9da:	20 3c       	cpi	r18, 0xC0	; 192
     9dc:	31 05       	cpc	r19, r1
     9de:	e9 f1       	breq	.+122    	; 0xa5a <midi_packet_length+0x88>
     9e0:	21 3c       	cpi	r18, 0xC1	; 193
     9e2:	31 05       	cpc	r19, r1
     9e4:	8c f4       	brge	.+34     	; 0xa08 <midi_packet_length+0x36>
     9e6:	20 39       	cpi	r18, 0x90	; 144
     9e8:	31 05       	cpc	r19, r1
     9ea:	e1 f0       	breq	.+56     	; 0xa24 <midi_packet_length+0x52>
     9ec:	21 39       	cpi	r18, 0x91	; 145
     9ee:	31 05       	cpc	r19, r1
     9f0:	24 f4       	brge	.+8      	; 0x9fa <midi_packet_length+0x28>
     9f2:	20 38       	cpi	r18, 0x80	; 128
     9f4:	31 05       	cpc	r19, r1
     9f6:	79 f5       	brne	.+94     	; 0xa56 <midi_packet_length+0x84>
     9f8:	15 c0       	rjmp	.+42     	; 0xa24 <midi_packet_length+0x52>
     9fa:	20 3a       	cpi	r18, 0xA0	; 160
     9fc:	31 05       	cpc	r19, r1
     9fe:	91 f0       	breq	.+36     	; 0xa24 <midi_packet_length+0x52>
     a00:	20 3b       	cpi	r18, 0xB0	; 176
     a02:	31 05       	cpc	r19, r1
     a04:	41 f5       	brne	.+80     	; 0xa56 <midi_packet_length+0x84>
     a06:	0e c0       	rjmp	.+28     	; 0xa24 <midi_packet_length+0x52>
     a08:	20 3e       	cpi	r18, 0xE0	; 224
     a0a:	31 05       	cpc	r19, r1
     a0c:	59 f0       	breq	.+22     	; 0xa24 <midi_packet_length+0x52>
     a0e:	21 3e       	cpi	r18, 0xE1	; 225
     a10:	31 05       	cpc	r19, r1
     a12:	24 f4       	brge	.+8      	; 0xa1c <midi_packet_length+0x4a>
     a14:	20 3d       	cpi	r18, 0xD0	; 208
     a16:	31 05       	cpc	r19, r1
     a18:	f1 f4       	brne	.+60     	; 0xa56 <midi_packet_length+0x84>
     a1a:	1f c0       	rjmp	.+62     	; 0xa5a <midi_packet_length+0x88>
     a1c:	20 3f       	cpi	r18, 0xF0	; 240
     a1e:	31 05       	cpc	r19, r1
     a20:	d1 f4       	brne	.+52     	; 0xa56 <midi_packet_length+0x84>
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
     a28:	86 3f       	cpi	r24, 0xF6	; 246
     a2a:	79 f0       	breq	.+30     	; 0xa4a <midi_packet_length+0x78>
     a2c:	87 3f       	cpi	r24, 0xF7	; 247
     a2e:	38 f4       	brcc	.+14     	; 0xa3e <midi_packet_length+0x6c>
     a30:	82 3f       	cpi	r24, 0xF2	; 242
     a32:	a9 f0       	breq	.+42     	; 0xa5e <midi_packet_length+0x8c>
     a34:	83 3f       	cpi	r24, 0xF3	; 243
     a36:	59 f0       	breq	.+22     	; 0xa4e <midi_packet_length+0x7c>
     a38:	81 3f       	cpi	r24, 0xF1	; 241
     a3a:	59 f4       	brne	.+22     	; 0xa52 <midi_packet_length+0x80>
     a3c:	08 c0       	rjmp	.+16     	; 0xa4e <midi_packet_length+0x7c>
     a3e:	88 3f       	cpi	r24, 0xF8	; 248
     a40:	40 f0       	brcs	.+16     	; 0xa52 <midi_packet_length+0x80>
     a42:	8d 3f       	cpi	r24, 0xFD	; 253
     a44:	10 f0       	brcs	.+4      	; 0xa4a <midi_packet_length+0x78>
     a46:	8e 3f       	cpi	r24, 0xFE	; 254
     a48:	20 f0       	brcs	.+8      	; 0xa52 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	08 95       	ret
         }
      default:
         return UNDEFINED;
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
     a5e:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
     a60:	08 95       	ret

00000a62 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
     a62:	0f 93       	push	r16
     a64:	34 2f       	mov	r19, r20
     a66:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
     a68:	46 2f       	mov	r20, r22
     a6a:	4f 70       	andi	r20, 0x0F	; 15
     a6c:	40 6b       	ori	r20, 0xB0	; 176
     a6e:	23 2f       	mov	r18, r19
     a70:	2f 77       	andi	r18, 0x7F	; 127
     a72:	0f 77       	andi	r16, 0x7F	; 127
     a74:	dc 01       	movw	r26, r24
     a76:	ed 91       	ld	r30, X+
     a78:	fc 91       	ld	r31, X
     a7a:	63 e0       	ldi	r22, 0x03	; 3
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
     a80:	0f 91       	pop	r16
     a82:	08 95       	ret

00000a84 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     a84:	0f 93       	push	r16
     a86:	34 2f       	mov	r19, r20
     a88:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     a8a:	46 2f       	mov	r20, r22
     a8c:	4f 70       	andi	r20, 0x0F	; 15
     a8e:	40 69       	ori	r20, 0x90	; 144
     a90:	23 2f       	mov	r18, r19
     a92:	2f 77       	andi	r18, 0x7F	; 127
     a94:	0f 77       	andi	r16, 0x7F	; 127
     a96:	dc 01       	movw	r26, r24
     a98:	ed 91       	ld	r30, X+
     a9a:	fc 91       	ld	r31, X
     a9c:	63 e0       	ldi	r22, 0x03	; 3
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     aa2:	0f 91       	pop	r16
     aa4:	08 95       	ret

00000aa6 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     aa6:	0f 93       	push	r16
     aa8:	34 2f       	mov	r19, r20
     aaa:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     aac:	46 2f       	mov	r20, r22
     aae:	4f 70       	andi	r20, 0x0F	; 15
     ab0:	40 68       	ori	r20, 0x80	; 128
     ab2:	23 2f       	mov	r18, r19
     ab4:	2f 77       	andi	r18, 0x7F	; 127
     ab6:	0f 77       	andi	r16, 0x7F	; 127
     ab8:	dc 01       	movw	r26, r24
     aba:	ed 91       	ld	r30, X+
     abc:	fc 91       	ld	r31, X
     abe:	63 e0       	ldi	r22, 0x03	; 3
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     ac4:	0f 91       	pop	r16
     ac6:	08 95       	ret

00000ac8 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
     ac8:	0f 93       	push	r16
     aca:	34 2f       	mov	r19, r20
     acc:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
     ace:	46 2f       	mov	r20, r22
     ad0:	4f 70       	andi	r20, 0x0F	; 15
     ad2:	40 6a       	ori	r20, 0xA0	; 160
     ad4:	23 2f       	mov	r18, r19
     ad6:	2f 77       	andi	r18, 0x7F	; 127
     ad8:	0f 77       	andi	r16, 0x7F	; 127
     ada:	dc 01       	movw	r26, r24
     adc:	ed 91       	ld	r30, X+
     ade:	fc 91       	ld	r31, X
     ae0:	63 e0       	ldi	r22, 0x03	; 3
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
     ae6:	0f 91       	pop	r16
     ae8:	08 95       	ret

00000aea <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
     aee:	20 e2       	ldi	r18, 0x20	; 32
     af0:	40 30       	cpi	r20, 0x00	; 0
     af2:	52 07       	cpc	r21, r18
     af4:	44 f4       	brge	.+16     	; 0xb06 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
     af6:	a0 ee       	ldi	r26, 0xE0	; 224
     af8:	40 30       	cpi	r20, 0x00	; 0
     afa:	5a 07       	cpc	r21, r26
     afc:	3c f0       	brlt	.+14     	; 0xb0c <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
     afe:	8a 01       	movw	r16, r20
     b00:	00 50       	subi	r16, 0x00	; 0
     b02:	10 4e       	sbci	r17, 0xE0	; 224
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
     b06:	0f ef       	ldi	r16, 0xFF	; 255
     b08:	1f e3       	ldi	r17, 0x3F	; 63
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
     b0c:	00 e0       	ldi	r16, 0x00	; 0
     b0e:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     b10:	46 2f       	mov	r20, r22
     b12:	4f 70       	andi	r20, 0x0F	; 15
     b14:	40 6e       	ori	r20, 0xE0	; 224
     b16:	20 2f       	mov	r18, r16
     b18:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
     b1a:	00 0f       	add	r16, r16
     b1c:	01 2f       	mov	r16, r17
     b1e:	00 1f       	adc	r16, r16
     b20:	11 0b       	sbc	r17, r17
     b22:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     b24:	0f 77       	andi	r16, 0x7F	; 127
     b26:	dc 01       	movw	r26, r24
     b28:	ed 91       	ld	r30, X+
     b2a:	fc 91       	ld	r31, X
     b2c:	63 e0       	ldi	r22, 0x03	; 3
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
     b38:	0f 93       	push	r16
     b3a:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     b3c:	46 2f       	mov	r20, r22
     b3e:	4f 70       	andi	r20, 0x0F	; 15
     b40:	40 6c       	ori	r20, 0xC0	; 192
     b42:	2f 77       	andi	r18, 0x7F	; 127
     b44:	dc 01       	movw	r26, r24
     b46:	ed 91       	ld	r30, X+
     b48:	fc 91       	ld	r31, X
     b4a:	62 e0       	ldi	r22, 0x02	; 2
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	00 e0       	ldi	r16, 0x00	; 0
     b50:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
     b52:	0f 91       	pop	r16
     b54:	08 95       	ret

00000b56 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
     b56:	0f 93       	push	r16
     b58:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     b5a:	46 2f       	mov	r20, r22
     b5c:	4f 70       	andi	r20, 0x0F	; 15
     b5e:	40 6d       	ori	r20, 0xD0	; 208
     b60:	2f 77       	andi	r18, 0x7F	; 127
     b62:	dc 01       	movw	r26, r24
     b64:	ed 91       	ld	r30, X+
     b66:	fc 91       	ld	r31, X
     b68:	62 e0       	ldi	r22, 0x02	; 2
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	00 e0       	ldi	r16, 0x00	; 0
     b6e:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
     b70:	0f 91       	pop	r16
     b72:	08 95       	ret

00000b74 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
     b74:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
     b76:	dc 01       	movw	r26, r24
     b78:	ed 91       	ld	r30, X+
     b7a:	fc 91       	ld	r31, X
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	48 ef       	ldi	r20, 0xF8	; 248
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	00 e0       	ldi	r16, 0x00	; 0
     b86:	09 95       	icall
}
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
     b8c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
     b8e:	dc 01       	movw	r26, r24
     b90:	ed 91       	ld	r30, X+
     b92:	fc 91       	ld	r31, X
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	49 ef       	ldi	r20, 0xF9	; 249
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	00 e0       	ldi	r16, 0x00	; 0
     b9e:	09 95       	icall
}
     ba0:	0f 91       	pop	r16
     ba2:	08 95       	ret

00000ba4 <midi_send_start>:

void midi_send_start(MidiDevice * device){
     ba4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
     ba6:	dc 01       	movw	r26, r24
     ba8:	ed 91       	ld	r30, X+
     baa:	fc 91       	ld	r31, X
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	4a ef       	ldi	r20, 0xFA	; 250
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	00 e0       	ldi	r16, 0x00	; 0
     bb6:	09 95       	icall
}
     bb8:	0f 91       	pop	r16
     bba:	08 95       	ret

00000bbc <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
     bbc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
     bbe:	dc 01       	movw	r26, r24
     bc0:	ed 91       	ld	r30, X+
     bc2:	fc 91       	ld	r31, X
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	4b ef       	ldi	r20, 0xFB	; 251
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	00 e0       	ldi	r16, 0x00	; 0
     bce:	09 95       	icall
}
     bd0:	0f 91       	pop	r16
     bd2:	08 95       	ret

00000bd4 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
     bd4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
     bd6:	dc 01       	movw	r26, r24
     bd8:	ed 91       	ld	r30, X+
     bda:	fc 91       	ld	r31, X
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	4c ef       	ldi	r20, 0xFC	; 252
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	00 e0       	ldi	r16, 0x00	; 0
     be6:	09 95       	icall
}
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret

00000bec <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
     bec:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
     bee:	dc 01       	movw	r26, r24
     bf0:	ed 91       	ld	r30, X+
     bf2:	fc 91       	ld	r31, X
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	4e ef       	ldi	r20, 0xFE	; 254
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	09 95       	icall
}
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
     c04:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
     c06:	dc 01       	movw	r26, r24
     c08:	ed 91       	ld	r30, X+
     c0a:	fc 91       	ld	r31, X
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	4f ef       	ldi	r20, 0xFF	; 255
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	00 e0       	ldi	r16, 0x00	; 0
     c16:	09 95       	icall
}
     c18:	0f 91       	pop	r16
     c1a:	08 95       	ret

00000c1c <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
     c1c:	0f 93       	push	r16
   device->send_func(device, 2,
     c1e:	26 2f       	mov	r18, r22
     c20:	2f 77       	andi	r18, 0x7F	; 127
     c22:	dc 01       	movw	r26, r24
     c24:	ed 91       	ld	r30, X+
     c26:	fc 91       	ld	r31, X
     c28:	62 e0       	ldi	r22, 0x02	; 2
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	41 ef       	ldi	r20, 0xF1	; 241
     c2e:	00 e0       	ldi	r16, 0x00	; 0
     c30:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
   device->send_func(device, 3,
     c3a:	26 2f       	mov	r18, r22
     c3c:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
     c3e:	8b 01       	movw	r16, r22
     c40:	00 0f       	add	r16, r16
     c42:	01 2f       	mov	r16, r17
     c44:	00 1f       	adc	r16, r16
     c46:	11 0b       	sbc	r17, r17
     c48:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
     c4a:	0f 77       	andi	r16, 0x7F	; 127
     c4c:	dc 01       	movw	r26, r24
     c4e:	ed 91       	ld	r30, X+
     c50:	fc 91       	ld	r31, X
     c52:	63 e0       	ldi	r22, 0x03	; 3
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	42 ef       	ldi	r20, 0xF2	; 242
     c58:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret

00000c60 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
     c60:	0f 93       	push	r16
   device->send_func(device, 2,
     c62:	26 2f       	mov	r18, r22
     c64:	2f 77       	andi	r18, 0x7F	; 127
     c66:	dc 01       	movw	r26, r24
     c68:	ed 91       	ld	r30, X+
     c6a:	fc 91       	ld	r31, X
     c6c:	62 e0       	ldi	r22, 0x02	; 2
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	43 ef       	ldi	r20, 0xF3	; 243
     c72:	00 e0       	ldi	r16, 0x00	; 0
     c74:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
     c76:	0f 91       	pop	r16
     c78:	08 95       	ret

00000c7a <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
     c7a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
     c7c:	dc 01       	movw	r26, r24
     c7e:	ed 91       	ld	r30, X+
     c80:	fc 91       	ld	r31, X
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	46 ef       	ldi	r20, 0xF6	; 246
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	00 e0       	ldi	r16, 0x00	; 0
     c8c:	09 95       	icall
}
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
     c92:	0f 93       	push	r16
     c94:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
     c96:	dc 01       	movw	r26, r24
     c98:	ed 91       	ld	r30, X+
     c9a:	fc 91       	ld	r31, X
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	00 e0       	ldi	r16, 0x00	; 0
     ca4:	09 95       	icall
}
     ca6:	0f 91       	pop	r16
     ca8:	08 95       	ret

00000caa <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
     caa:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
     cac:	dc 01       	movw	r26, r24
     cae:	ed 91       	ld	r30, X+
     cb0:	fc 91       	ld	r31, X
     cb2:	09 95       	icall
}
     cb4:	0f 91       	pop	r16
     cb6:	08 95       	ret

00000cb8 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
     cb8:	6f 92       	push	r6
     cba:	7f 92       	push	r7
     cbc:	8f 92       	push	r8
     cbe:	9f 92       	push	r9
     cc0:	af 92       	push	r10
     cc2:	bf 92       	push	r11
     cc4:	cf 92       	push	r12
     cc6:	df 92       	push	r13
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <midi_send_array+0x1e>
     cd6:	0f 92       	push	r0
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	4c 01       	movw	r8, r24
     cde:	6b 01       	movw	r12, r22
     ce0:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
     ce2:	61 15       	cp	r22, r1
     ce4:	71 05       	cpc	r23, r1
     ce6:	41 f1       	breq	.+80     	; 0xd38 <midi_send_array+0x80>
     ce8:	ee 24       	eor	r14, r14
     cea:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
     cec:	0f 2e       	mov	r0, r31
     cee:	f3 e0       	ldi	r31, 0x03	; 3
     cf0:	6f 2e       	mov	r6, r31
     cf2:	77 24       	eor	r7, r7
     cf4:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
     cf6:	19 82       	std	Y+1, r1	; 0x01
     cf8:	1a 82       	std	Y+2, r1	; 0x02
     cfa:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
     cfc:	86 01       	movw	r16, r12
     cfe:	0e 19       	sub	r16, r14
     d00:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
     d02:	04 30       	cpi	r16, 0x04	; 4
     d04:	11 05       	cpc	r17, r1
     d06:	08 f0       	brcs	.+2      	; 0xd0a <midi_send_array+0x52>
     d08:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
     d0a:	b5 01       	movw	r22, r10
     d0c:	6e 0d       	add	r22, r14
     d0e:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
     d10:	ce 01       	movw	r24, r28
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	40 2f       	mov	r20, r16
     d16:	51 2f       	mov	r21, r17
     d18:	0e 94 46 0b 	call	0x168c	; 0x168c <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
     d1c:	c4 01       	movw	r24, r8
     d1e:	b8 01       	movw	r22, r16
     d20:	49 81       	ldd	r20, Y+1	; 0x01
     d22:	2a 81       	ldd	r18, Y+2	; 0x02
     d24:	0b 81       	ldd	r16, Y+3	; 0x03
     d26:	0e 94 55 06 	call	0xcaa	; 0xcaa <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
     d2a:	83 e0       	ldi	r24, 0x03	; 3
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	e8 0e       	add	r14, r24
     d30:	f9 1e       	adc	r15, r25
     d32:	ec 14       	cp	r14, r12
     d34:	fd 04       	cpc	r15, r13
     d36:	f8 f2       	brcs	.-66     	; 0xcf6 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	df 90       	pop	r13
     d4c:	cf 90       	pop	r12
     d4e:	bf 90       	pop	r11
     d50:	af 90       	pop	r10
     d52:	9f 90       	pop	r9
     d54:	8f 90       	pop	r8
     d56:	7f 90       	pop	r7
     d58:	6f 90       	pop	r6
     d5a:	08 95       	ret

00000d5c <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
     d5c:	fc 01       	movw	r30, r24
     d5e:	73 83       	std	Z+3, r23	; 0x03
     d60:	62 83       	std	Z+2, r22	; 0x02
}
     d62:	08 95       	ret

00000d64 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
     d64:	fc 01       	movw	r30, r24
     d66:	75 83       	std	Z+5, r23	; 0x05
     d68:	64 83       	std	Z+4, r22	; 0x04
}
     d6a:	08 95       	ret

00000d6c <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
     d6c:	fc 01       	movw	r30, r24
     d6e:	77 83       	std	Z+7, r23	; 0x07
     d70:	66 83       	std	Z+6, r22	; 0x06
}
     d72:	08 95       	ret

00000d74 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
     d74:	fc 01       	movw	r30, r24
     d76:	71 87       	std	Z+9, r23	; 0x09
     d78:	60 87       	std	Z+8, r22	; 0x08
}
     d7a:	08 95       	ret

00000d7c <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
     d7c:	fc 01       	movw	r30, r24
     d7e:	73 87       	std	Z+11, r23	; 0x0b
     d80:	62 87       	std	Z+10, r22	; 0x0a
}
     d82:	08 95       	ret

00000d84 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
     d84:	fc 01       	movw	r30, r24
     d86:	75 87       	std	Z+13, r23	; 0x0d
     d88:	64 87       	std	Z+12, r22	; 0x0c
}
     d8a:	08 95       	ret

00000d8c <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
     d8c:	fc 01       	movw	r30, r24
     d8e:	77 87       	std	Z+15, r23	; 0x0f
     d90:	66 87       	std	Z+14, r22	; 0x0e
}
     d92:	08 95       	ret

00000d94 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
     d94:	fc 01       	movw	r30, r24
     d96:	71 8b       	std	Z+17, r23	; 0x11
     d98:	60 8b       	std	Z+16, r22	; 0x10
}
     d9a:	08 95       	ret

00000d9c <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
     d9c:	fc 01       	movw	r30, r24
     d9e:	73 8b       	std	Z+19, r23	; 0x13
     da0:	62 8b       	std	Z+18, r22	; 0x12
}
     da2:	08 95       	ret

00000da4 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
     da4:	fc 01       	movw	r30, r24
     da6:	75 8b       	std	Z+21, r23	; 0x15
     da8:	64 8b       	std	Z+20, r22	; 0x14
}
     daa:	08 95       	ret

00000dac <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
     dac:	fc 01       	movw	r30, r24
     dae:	77 8b       	std	Z+23, r23	; 0x17
     db0:	66 8b       	std	Z+22, r22	; 0x16
}
     db2:	08 95       	ret

00000db4 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
     db4:	fc 01       	movw	r30, r24
     db6:	71 8f       	std	Z+25, r23	; 0x19
     db8:	60 8f       	std	Z+24, r22	; 0x18
}
     dba:	08 95       	ret

00000dbc <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
     dbc:	fc 01       	movw	r30, r24
     dbe:	73 8f       	std	Z+27, r23	; 0x1b
     dc0:	62 8f       	std	Z+26, r22	; 0x1a
}
     dc2:	08 95       	ret

00000dc4 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
     dc4:	fc 01       	movw	r30, r24
     dc6:	75 8f       	std	Z+29, r23	; 0x1d
     dc8:	64 8f       	std	Z+28, r22	; 0x1c
}
     dca:	08 95       	ret

00000dcc <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
     dcc:	fc 01       	movw	r30, r24
     dce:	77 8f       	std	Z+31, r23	; 0x1f
     dd0:	66 8f       	std	Z+30, r22	; 0x1e
}
     dd2:	08 95       	ret

00000dd4 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
     dda:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
     ddc:	1f a2       	lds	r17, 0x9f
     dde:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
     de0:	bc 01       	movw	r22, r24
     de2:	68 5d       	subi	r22, 0xD8	; 216
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	88 51       	subi	r24, 0x18	; 24
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	40 ec       	ldi	r20, 0xC0	; 192
     dec:	0e 94 64 04 	call	0x8c8	; 0x8c8 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
     df0:	1b 82       	std	Y+3, r1	; 0x03
     df2:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
     df4:	1d 82       	std	Y+5, r1	; 0x05
     df6:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
     df8:	1f 82       	std	Y+7, r1	; 0x07
     dfa:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
     dfc:	19 86       	std	Y+9, r1	; 0x09
     dfe:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
     e00:	1b 86       	std	Y+11, r1	; 0x0b
     e02:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
     e04:	1d 86       	std	Y+13, r1	; 0x0d
     e06:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
     e08:	1f 86       	std	Y+15, r1	; 0x0f
     e0a:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
     e0c:	19 8a       	std	Y+17, r1	; 0x11
     e0e:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
     e10:	1b 8a       	std	Y+19, r1	; 0x13
     e12:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
     e14:	1d 8a       	std	Y+21, r1	; 0x15
     e16:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
     e18:	1f 8a       	std	Y+23, r1	; 0x17
     e1a:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
     e1c:	19 8e       	std	Y+25, r1	; 0x19
     e1e:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
     e20:	1b 8e       	std	Y+27, r1	; 0x1b
     e22:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
     e24:	1d 8e       	std	Y+29, r1	; 0x1d
     e26:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
     e28:	1f 8e       	std	Y+31, r1	; 0x1f
     e2a:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
     e2c:	19 a2       	lds	r17, 0x99
     e2e:	18 a2       	lds	r17, 0x98
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
     e44:	66 23       	and	r22, r22
     e46:	99 f0       	breq	.+38     	; 0xe6e <midi_device_input+0x38>
     e48:	04 2f       	mov	r16, r20
     e4a:	15 2f       	mov	r17, r21
     e4c:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
     e4e:	0f 2e       	mov	r0, r31
     e50:	f8 ee       	ldi	r31, 0xE8	; 232
     e52:	ef 2e       	mov	r14, r31
     e54:	ff 24       	eor	r15, r15
     e56:	f0 2d       	mov	r31, r0
     e58:	e8 0e       	add	r14, r24
     e5a:	f9 1e       	adc	r15, r25
     e5c:	f8 01       	movw	r30, r16
     e5e:	61 91       	ld	r22, Z+
     e60:	8f 01       	movw	r16, r30
     e62:	c7 01       	movw	r24, r14
     e64:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
     e68:	cf 5f       	subi	r28, 0xFF	; 255
     e6a:	cd 17       	cp	r28, r29
     e6c:	b9 f7       	brne	.-18     	; 0xe5c <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	08 95       	ret

00000e7c <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
     e7c:	fc 01       	movw	r30, r24
     e7e:	71 83       	std	Z+1, r23	; 0x01
     e80:	60 83       	st	Z, r22
}
     e82:	08 95       	ret

00000e84 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
     e84:	fc 01       	movw	r30, r24
     e86:	71 a3       	lds	r23, 0x51
     e88:	60 a3       	lds	r22, 0x50
}
     e8a:	08 95       	ret

00000e8c <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
     e8c:	af 92       	push	r10
     e8e:	bf 92       	push	r11
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <midi_input_callbacks+0x16>
     ea2:	0f 92       	push	r0
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	6c 01       	movw	r12, r24
     eaa:	5b 01       	movw	r10, r22
     eac:	f4 2e       	mov	r15, r20
     eae:	e2 2e       	mov	r14, r18
     eb0:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
     eb2:	dc 01       	movw	r26, r24
     eb4:	95 96       	adiw	r26, 0x25	; 37
     eb6:	8c 91       	ld	r24, X
     eb8:	95 97       	sbiw	r26, 0x25	; 37
     eba:	84 30       	cpi	r24, 0x04	; 4
     ebc:	e9 f4       	brne	.+58     	; 0xef8 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
     ebe:	5a 96       	adiw	r26, 0x1a	; 26
     ec0:	ed 91       	ld	r30, X+
     ec2:	fc 91       	ld	r31, X
     ec4:	5b 97       	sbiw	r26, 0x1b	; 27
     ec6:	30 97       	sbiw	r30, 0x00	; 0
     ec8:	09 f4       	brne	.+2      	; 0xecc <midi_input_callbacks+0x40>
     eca:	ee c0       	rjmp	.+476    	; 0x10a8 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
     ecc:	cb 01       	movw	r24, r22
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	63 e0       	ldi	r22, 0x03	; 3
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
     ed8:	cb 01       	movw	r24, r22
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	68 0f       	add	r22, r24
     ee0:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
     ee2:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
     ee4:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
     ee6:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
     ee8:	4a 2d       	mov	r20, r10
     eea:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
     eec:	c6 01       	movw	r24, r12
     eee:	9e 01       	movw	r18, r28
     ef0:	2f 5f       	subi	r18, 0xFF	; 255
     ef2:	3f 4f       	sbci	r19, 0xFF	; 255
     ef4:	09 95       	icall
     ef6:	c8 c0       	rjmp	.+400    	; 0x1088 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
     ef8:	62 30       	cpi	r22, 0x02	; 2
     efa:	71 05       	cpc	r23, r1
     efc:	09 f4       	brne	.+2      	; 0xf00 <midi_input_callbacks+0x74>
     efe:	5f c0       	rjmp	.+190    	; 0xfbe <midi_input_callbacks+0x132>
     f00:	63 30       	cpi	r22, 0x03	; 3
     f02:	71 05       	cpc	r23, r1
     f04:	29 f0       	breq	.+10     	; 0xf10 <midi_input_callbacks+0x84>
     f06:	61 30       	cpi	r22, 0x01	; 1
     f08:	71 05       	cpc	r23, r1
     f0a:	09 f0       	breq	.+2      	; 0xf0e <midi_input_callbacks+0x82>
     f0c:	b3 c0       	rjmp	.+358    	; 0x1074 <midi_input_callbacks+0x1e8>
     f0e:	99 c0       	rjmp	.+306    	; 0x1042 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     f10:	84 2f       	mov	r24, r20
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	80 7f       	andi	r24, 0xF0	; 240
     f16:	90 70       	andi	r25, 0x00	; 0
     f18:	80 3a       	cpi	r24, 0xA0	; 160
     f1a:	91 05       	cpc	r25, r1
     f1c:	29 f1       	breq	.+74     	; 0xf68 <midi_input_callbacks+0xdc>
     f1e:	81 3a       	cpi	r24, 0xA1	; 161
     f20:	91 05       	cpc	r25, r1
     f22:	3c f4       	brge	.+14     	; 0xf32 <midi_input_callbacks+0xa6>
     f24:	80 38       	cpi	r24, 0x80	; 128
     f26:	91 05       	cpc	r25, r1
     f28:	c9 f0       	breq	.+50     	; 0xf5c <midi_input_callbacks+0xd0>
     f2a:	80 39       	cpi	r24, 0x90	; 144
     f2c:	91 05       	cpc	r25, r1
     f2e:	91 f5       	brne	.+100    	; 0xf94 <midi_input_callbacks+0x108>
     f30:	0f c0       	rjmp	.+30     	; 0xf50 <midi_input_callbacks+0xc4>
     f32:	80 3e       	cpi	r24, 0xE0	; 224
     f34:	91 05       	cpc	r25, r1
     f36:	f1 f0       	breq	.+60     	; 0xf74 <midi_input_callbacks+0xe8>
     f38:	80 3f       	cpi	r24, 0xF0	; 240
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f1       	breq	.+66     	; 0xf80 <midi_input_callbacks+0xf4>
     f3e:	80 3b       	cpi	r24, 0xB0	; 176
     f40:	91 05       	cpc	r25, r1
     f42:	41 f5       	brne	.+80     	; 0xf94 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
     f44:	d6 01       	movw	r26, r12
     f46:	12 96       	adiw	r26, 0x02	; 2
     f48:	ed 91       	ld	r30, X+
     f4a:	fc 91       	ld	r31, X
     f4c:	13 97       	sbiw	r26, 0x03	; 3
              break;
     f4e:	24 c0       	rjmp	.+72     	; 0xf98 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
     f50:	d6 01       	movw	r26, r12
     f52:	14 96       	adiw	r26, 0x04	; 4
     f54:	ed 91       	ld	r30, X+
     f56:	fc 91       	ld	r31, X
     f58:	15 97       	sbiw	r26, 0x05	; 5
              break;
     f5a:	1e c0       	rjmp	.+60     	; 0xf98 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
     f5c:	d6 01       	movw	r26, r12
     f5e:	16 96       	adiw	r26, 0x06	; 6
     f60:	ed 91       	ld	r30, X+
     f62:	fc 91       	ld	r31, X
     f64:	17 97       	sbiw	r26, 0x07	; 7
              break;
     f66:	18 c0       	rjmp	.+48     	; 0xf98 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
     f68:	d6 01       	movw	r26, r12
     f6a:	18 96       	adiw	r26, 0x08	; 8
     f6c:	ed 91       	ld	r30, X+
     f6e:	fc 91       	ld	r31, X
     f70:	19 97       	sbiw	r26, 0x09	; 9
              break;
     f72:	12 c0       	rjmp	.+36     	; 0xf98 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
     f74:	d6 01       	movw	r26, r12
     f76:	1a 96       	adiw	r26, 0x0a	; 10
     f78:	ed 91       	ld	r30, X+
     f7a:	fc 91       	ld	r31, X
     f7c:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
     f7e:	0c c0       	rjmp	.+24     	; 0xf98 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
     f80:	b2 ef       	ldi	r27, 0xF2	; 242
     f82:	4b 17       	cp	r20, r27
     f84:	09 f0       	breq	.+2      	; 0xf88 <midi_input_callbacks+0xfc>
     f86:	90 c0       	rjmp	.+288    	; 0x10a8 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
     f88:	d6 01       	movw	r26, r12
     f8a:	1c 96       	adiw	r26, 0x0c	; 12
     f8c:	ed 91       	ld	r30, X+
     f8e:	fc 91       	ld	r31, X
     f90:	1d 97       	sbiw	r26, 0x0d	; 13
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
     f94:	e0 e0       	ldi	r30, 0x00	; 0
     f96:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
     f98:	30 97       	sbiw	r30, 0x00	; 0
     f9a:	09 f4       	brne	.+2      	; 0xf9e <midi_input_callbacks+0x112>
     f9c:	85 c0       	rjmp	.+266    	; 0x10a8 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
     f9e:	b2 ef       	ldi	r27, 0xF2	; 242
     fa0:	fb 16       	cp	r15, r27
     fa2:	31 f4       	brne	.+12     	; 0xfb0 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
     fa4:	c6 01       	movw	r24, r12
     fa6:	62 ef       	ldi	r22, 0xF2	; 242
     fa8:	4e 2d       	mov	r20, r14
     faa:	21 2f       	mov	r18, r17
     fac:	09 95       	icall
     fae:	6c c0       	rjmp	.+216    	; 0x1088 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
     fb0:	6f 2d       	mov	r22, r15
     fb2:	6f 70       	andi	r22, 0x0F	; 15
     fb4:	c6 01       	movw	r24, r12
     fb6:	4e 2d       	mov	r20, r14
     fb8:	21 2f       	mov	r18, r17
     fba:	09 95       	icall
     fbc:	65 c0       	rjmp	.+202    	; 0x1088 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     fbe:	84 2f       	mov	r24, r20
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	80 7f       	andi	r24, 0xF0	; 240
     fc4:	90 70       	andi	r25, 0x00	; 0
     fc6:	80 3d       	cpi	r24, 0xD0	; 208
     fc8:	91 05       	cpc	r25, r1
     fca:	61 f0       	breq	.+24     	; 0xfe4 <midi_input_callbacks+0x158>
     fcc:	80 3f       	cpi	r24, 0xF0	; 240
     fce:	91 05       	cpc	r25, r1
     fd0:	79 f0       	breq	.+30     	; 0xff0 <midi_input_callbacks+0x164>
     fd2:	80 3c       	cpi	r24, 0xC0	; 192
     fd4:	91 05       	cpc	r25, r1
     fd6:	f9 f4       	brne	.+62     	; 0x1016 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
     fd8:	d6 01       	movw	r26, r12
     fda:	1e 96       	adiw	r26, 0x0e	; 14
     fdc:	ed 91       	ld	r30, X+
     fde:	fc 91       	ld	r31, X
     fe0:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
     fe2:	1b c0       	rjmp	.+54     	; 0x101a <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
     fe4:	d6 01       	movw	r26, r12
     fe6:	50 96       	adiw	r26, 0x10	; 16
     fe8:	ed 91       	ld	r30, X+
     fea:	fc 91       	ld	r31, X
     fec:	51 97       	sbiw	r26, 0x11	; 17
              break;
     fee:	15 c0       	rjmp	.+42     	; 0x101a <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
     ff0:	b3 ef       	ldi	r27, 0xF3	; 243
     ff2:	4b 17       	cp	r20, r27
     ff4:	31 f4       	brne	.+12     	; 0x1002 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
     ff6:	d6 01       	movw	r26, r12
     ff8:	52 96       	adiw	r26, 0x12	; 18
     ffa:	ed 91       	ld	r30, X+
     ffc:	fc 91       	ld	r31, X
     ffe:	53 97       	sbiw	r26, 0x13	; 19
    1000:	0c c0       	rjmp	.+24     	; 0x101a <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1002:	b1 ef       	ldi	r27, 0xF1	; 241
    1004:	4b 17       	cp	r20, r27
    1006:	09 f0       	breq	.+2      	; 0x100a <midi_input_callbacks+0x17e>
    1008:	4f c0       	rjmp	.+158    	; 0x10a8 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    100a:	d6 01       	movw	r26, r12
    100c:	54 96       	adiw	r26, 0x14	; 20
    100e:	ed 91       	ld	r30, X+
    1010:	fc 91       	ld	r31, X
    1012:	55 97       	sbiw	r26, 0x15	; 21
    1014:	02 c0       	rjmp	.+4      	; 0x101a <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1016:	e0 e0       	ldi	r30, 0x00	; 0
    1018:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    101a:	30 97       	sbiw	r30, 0x00	; 0
    101c:	09 f4       	brne	.+2      	; 0x1020 <midi_input_callbacks+0x194>
    101e:	44 c0       	rjmp	.+136    	; 0x10a8 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1020:	b3 ef       	ldi	r27, 0xF3	; 243
    1022:	fb 16       	cp	r15, r27
    1024:	19 f0       	breq	.+6      	; 0x102c <midi_input_callbacks+0x1a0>
    1026:	81 ef       	ldi	r24, 0xF1	; 241
    1028:	f8 16       	cp	r15, r24
    102a:	29 f4       	brne	.+10     	; 0x1036 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    102c:	c6 01       	movw	r24, r12
    102e:	6f 2d       	mov	r22, r15
    1030:	4e 2d       	mov	r20, r14
    1032:	09 95       	icall
    1034:	29 c0       	rjmp	.+82     	; 0x1088 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    1036:	6f 2d       	mov	r22, r15
    1038:	6f 70       	andi	r22, 0x0F	; 15
    103a:	c6 01       	movw	r24, r12
    103c:	4e 2d       	mov	r20, r14
    103e:	09 95       	icall
    1040:	23 c0       	rjmp	.+70     	; 0x1088 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1042:	84 2f       	mov	r24, r20
    1044:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <midi_is_realtime>
    1048:	88 23       	and	r24, r24
    104a:	31 f0       	breq	.+12     	; 0x1058 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    104c:	d6 01       	movw	r26, r12
    104e:	56 96       	adiw	r26, 0x16	; 22
    1050:	ed 91       	ld	r30, X+
    1052:	fc 91       	ld	r31, X
    1054:	57 97       	sbiw	r26, 0x17	; 23
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    1058:	b6 ef       	ldi	r27, 0xF6	; 246
    105a:	fb 16       	cp	r15, r27
    105c:	29 f5       	brne	.+74     	; 0x10a8 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    105e:	d6 01       	movw	r26, r12
    1060:	58 96       	adiw	r26, 0x18	; 24
    1062:	ed 91       	ld	r30, X+
    1064:	fc 91       	ld	r31, X
    1066:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1068:	30 97       	sbiw	r30, 0x00	; 0
    106a:	f1 f0       	breq	.+60     	; 0x10a8 <midi_input_callbacks+0x21c>
            func(device, byte0);
    106c:	c6 01       	movw	r24, r12
    106e:	6f 2d       	mov	r22, r15
    1070:	09 95       	icall
    1072:	0a c0       	rjmp	.+20     	; 0x1088 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1074:	64 30       	cpi	r22, 0x04	; 4
    1076:	71 05       	cpc	r23, r1
    1078:	a8 f4       	brcc	.+42     	; 0x10a4 <midi_input_callbacks+0x218>
    107a:	16 c0       	rjmp	.+44     	; 0x10a8 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    107c:	c6 01       	movw	r24, r12
    107e:	b5 01       	movw	r22, r10
    1080:	4f 2d       	mov	r20, r15
    1082:	2e 2d       	mov	r18, r14
    1084:	01 2f       	mov	r16, r17
    1086:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1088:	d6 01       	movw	r26, r12
    108a:	5e 96       	adiw	r26, 0x1e	; 30
    108c:	ed 91       	ld	r30, X+
    108e:	fc 91       	ld	r31, X
    1090:	5f 97       	sbiw	r26, 0x1f	; 31
    1092:	30 97       	sbiw	r30, 0x00	; 0
    1094:	89 f0       	breq	.+34     	; 0x10b8 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1096:	c6 01       	movw	r24, r12
    1098:	b5 01       	movw	r22, r10
    109a:	4f 2d       	mov	r20, r15
    109c:	2e 2d       	mov	r18, r14
    109e:	01 2f       	mov	r16, r17
    10a0:	09 95       	icall
    10a2:	0a c0       	rjmp	.+20     	; 0x10b8 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    10a4:	aa 24       	eor	r10, r10
    10a6:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    10a8:	d6 01       	movw	r26, r12
    10aa:	5c 96       	adiw	r26, 0x1c	; 28
    10ac:	ed 91       	ld	r30, X+
    10ae:	fc 91       	ld	r31, X
    10b0:	5d 97       	sbiw	r26, 0x1d	; 29
    10b2:	30 97       	sbiw	r30, 0x00	; 0
    10b4:	19 f7       	brne	.-58     	; 0x107c <midi_input_callbacks+0x1f0>
    10b6:	e8 cf       	rjmp	.-48     	; 0x1088 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	bf 90       	pop	r11
    10d0:	af 90       	pop	r10
    10d2:	08 95       	ret

000010d4 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    10d4:	ef 92       	push	r14
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	7c 01       	movw	r14, r24
    10e0:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    10e2:	86 2f       	mov	r24, r22
    10e4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <midi_is_realtime>
    10e8:	88 23       	and	r24, r24
    10ea:	91 f0       	breq	.+36     	; 0x1110 <__stack+0x11>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    10ec:	d7 01       	movw	r26, r14
    10ee:	95 96       	adiw	r26, 0x25	; 37
    10f0:	dc 91       	ld	r29, X
    10f2:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	95 96       	adiw	r26, 0x25	; 37
    10f8:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    10fa:	c7 01       	movw	r24, r14
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	4c 2f       	mov	r20, r28
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	00 e0       	ldi	r16, 0x00	; 0
    1106:	0e 94 46 07 	call	0xe8c	; 0xe8c <midi_input_callbacks>
    device->input_state = state;
    110a:	f7 01       	movw	r30, r14
    110c:	d5 a3       	lds	r29, 0x55
    110e:	b7 c0       	rjmp	.+366    	; 0x127e <__stack+0x17f>
  } else if (midi_is_statusbyte(input)) {
    1110:	8c 2f       	mov	r24, r28
    1112:	0e 94 df 04 	call	0x9be	; 0x9be <midi_is_statusbyte>
    1116:	88 23       	and	r24, r24
    1118:	09 f4       	brne	.+2      	; 0x111c <__stack+0x1d>
    111a:	73 c0       	rjmp	.+230    	; 0x1202 <__stack+0x103>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    111c:	d7 01       	movw	r26, r14
    111e:	95 96       	adiw	r26, 0x25	; 37
    1120:	8c 91       	ld	r24, X
    1122:	95 97       	sbiw	r26, 0x25	; 37
    1124:	84 30       	cpi	r24, 0x04	; 4
    1126:	49 f0       	breq	.+18     	; 0x113a <__stack+0x3b>
      device->input_buffer[0] = input;
    1128:	92 96       	adiw	r26, 0x22	; 34
    112a:	cc 93       	st	X, r28
    112c:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	97 96       	adiw	r26, 0x27	; 39
    1134:	9c 93       	st	X, r25
    1136:	8e 93       	st	-X, r24
    1138:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    113a:	8c 2f       	mov	r24, r28
    113c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <midi_packet_length>
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	41 f0       	breq	.+16     	; 0x1154 <__stack+0x55>
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	00 f1       	brcs	.+64     	; 0x1188 <__stack+0x89>
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	a1 f0       	breq	.+40     	; 0x1174 <__stack+0x75>
    114c:	83 30       	cpi	r24, 0x03	; 3
    114e:	09 f0       	breq	.+2      	; 0x1152 <__stack+0x53>
    1150:	4f c0       	rjmp	.+158    	; 0x11f0 <__stack+0xf1>
    1152:	14 c0       	rjmp	.+40     	; 0x117c <__stack+0x7d>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	f7 01       	movw	r30, r14
    1158:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    115a:	c7 01       	movw	r24, r14
    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	4c 2f       	mov	r20, r28
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	00 e0       	ldi	r16, 0x00	; 0
    1166:	0e 94 46 07 	call	0xe8c	; 0xe8c <midi_input_callbacks>
        device->input_state = IDLE;
    116a:	d7 01       	movw	r26, r14
    116c:	95 96       	adiw	r26, 0x25	; 37
    116e:	1c 92       	st	X, r1
    1170:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1172:	85 c0       	rjmp	.+266    	; 0x127e <__stack+0x17f>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	f7 01       	movw	r30, r14
    1178:	85 a3       	lds	r24, 0x55
        break;
    117a:	81 c0       	rjmp	.+258    	; 0x127e <__stack+0x17f>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	d7 01       	movw	r26, r14
    1180:	95 96       	adiw	r26, 0x25	; 37
    1182:	8c 93       	st	X, r24
    1184:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1186:	7b c0       	rjmp	.+246    	; 0x127e <__stack+0x17f>
      case UNDEFINED:
        switch(input) {
    1188:	c0 3f       	cpi	r28, 0xF0	; 240
    118a:	19 f0       	breq	.+6      	; 0x1192 <__stack+0x93>
    118c:	c7 3f       	cpi	r28, 0xF7	; 247
    118e:	59 f5       	brne	.+86     	; 0x11e6 <__stack+0xe7>
    1190:	0a c0       	rjmp	.+20     	; 0x11a6 <__stack+0xa7>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1192:	84 e0       	ldi	r24, 0x04	; 4
    1194:	f7 01       	movw	r30, r14
    1196:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    1198:	80 ef       	ldi	r24, 0xF0	; 240
    119a:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	97 a3       	lds	r25, 0x57
    11a2:	86 a3       	lds	r24, 0x56
            break;
    11a4:	6c c0       	rjmp	.+216    	; 0x127e <__stack+0x17f>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    11a6:	d7 01       	movw	r26, r14
    11a8:	96 96       	adiw	r26, 0x26	; 38
    11aa:	2d 91       	ld	r18, X+
    11ac:	3c 91       	ld	r19, X
    11ae:	97 97       	sbiw	r26, 0x27	; 39
    11b0:	c9 01       	movw	r24, r18
    11b2:	63 e0       	ldi	r22, 0x03	; 3
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
    11ba:	f7 01       	movw	r30, r14
    11bc:	e8 0f       	add	r30, r24
    11be:	f9 1f       	adc	r31, r25
    11c0:	87 ef       	ldi	r24, 0xF7	; 247
    11c2:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    11c4:	b9 01       	movw	r22, r18
    11c6:	6f 5f       	subi	r22, 0xFF	; 255
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	f7 01       	movw	r30, r14
    11cc:	77 a3       	lds	r23, 0x57
    11ce:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    11d0:	c7 01       	movw	r24, r14
    11d2:	42 a1       	lds	r20, 0x42
    11d4:	23 a1       	lds	r18, 0x43
    11d6:	04 a1       	lds	r16, 0x44
    11d8:	0e 94 46 07 	call	0xe8c	; 0xe8c <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    11dc:	d7 01       	movw	r26, r14
    11de:	95 96       	adiw	r26, 0x25	; 37
    11e0:	1c 92       	st	X, r1
    11e2:	95 97       	sbiw	r26, 0x25	; 37
            break;
    11e4:	4c c0       	rjmp	.+152    	; 0x127e <__stack+0x17f>
          default:
            device->input_state = IDLE;
    11e6:	f7 01       	movw	r30, r14
    11e8:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    11ea:	17 a2       	lds	r17, 0x97
    11ec:	16 a2       	lds	r17, 0x96
    11ee:	47 c0       	rjmp	.+142    	; 0x127e <__stack+0x17f>
        }

        break;
      default:
        device->input_state = IDLE;
    11f0:	d7 01       	movw	r26, r14
    11f2:	95 96       	adiw	r26, 0x25	; 37
    11f4:	1c 92       	st	X, r1
    11f6:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    11f8:	97 96       	adiw	r26, 0x27	; 39
    11fa:	1c 92       	st	X, r1
    11fc:	1e 92       	st	-X, r1
    11fe:	96 97       	sbiw	r26, 0x26	; 38
        break;
    1200:	3e c0       	rjmp	.+124    	; 0x127e <__stack+0x17f>
    }
  } else {
    if (device->input_state != IDLE) {
    1202:	f7 01       	movw	r30, r14
    1204:	25 a1       	lds	r18, 0x45
    1206:	22 23       	and	r18, r18
    1208:	d1 f1       	breq	.+116    	; 0x127e <__stack+0x17f>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    120a:	06 a0       	lds	r16, 0x86
    120c:	f7 a1       	lds	r31, 0x47
    120e:	e0 2d       	mov	r30, r0
    1210:	cf 01       	movw	r24, r30
    1212:	63 e0       	ldi	r22, 0x03	; 3
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
    121a:	ac 01       	movw	r20, r24
    121c:	8e 0d       	add	r24, r14
    121e:	9f 1d       	adc	r25, r15
    1220:	dc 01       	movw	r26, r24
    1222:	92 96       	adiw	r26, 0x22	; 34
    1224:	cc 93       	st	X, r28
    1226:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1228:	bf 01       	movw	r22, r30
    122a:	6f 5f       	subi	r22, 0xFF	; 255
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	f7 01       	movw	r30, r14
    1230:	77 a3       	lds	r23, 0x57
    1232:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    1234:	41 30       	cpi	r20, 0x01	; 1
    1236:	51 05       	cpc	r21, r1
    1238:	91 f0       	breq	.+36     	; 0x125e <__stack+0x15f>
    123a:	42 30       	cpi	r20, 0x02	; 2
    123c:	51 05       	cpc	r21, r1
    123e:	f9 f4       	brne	.+62     	; 0x127e <__stack+0x17f>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1240:	c7 01       	movw	r24, r14
    1242:	42 a1       	lds	r20, 0x42
    1244:	23 a1       	lds	r18, 0x43
    1246:	04 a1       	lds	r16, 0x44
    1248:	0e 94 46 07 	call	0xe8c	; 0xe8c <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    124c:	f7 01       	movw	r30, r14
    124e:	85 a1       	lds	r24, 0x45
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	a9 f0       	breq	.+42     	; 0x127e <__stack+0x17f>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	97 a3       	lds	r25, 0x57
    125a:	86 a3       	lds	r24, 0x56
    125c:	10 c0       	rjmp	.+32     	; 0x127e <__stack+0x17f>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	71 f4       	brne	.+28     	; 0x127e <__stack+0x17f>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1262:	c7 01       	movw	r24, r14
    1264:	42 a1       	lds	r20, 0x42
    1266:	23 a1       	lds	r18, 0x43
    1268:	00 e0       	ldi	r16, 0x00	; 0
    126a:	0e 94 46 07 	call	0xe8c	; 0xe8c <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    126e:	f7 01       	movw	r30, r14
    1270:	85 a1       	lds	r24, 0x45
    1272:	84 30       	cpi	r24, 0x04	; 4
    1274:	21 f0       	breq	.+8      	; 0x127e <__stack+0x17f>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	97 a3       	lds	r25, 0x57
    127c:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	08 95       	ret

0000128a <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    129c:	dc 01       	movw	r26, r24
    129e:	90 96       	adiw	r26, 0x20	; 32
    12a0:	ed 91       	ld	r30, X+
    12a2:	fc 91       	ld	r31, X
    12a4:	91 97       	sbiw	r26, 0x21	; 33
    12a6:	30 97       	sbiw	r30, 0x00	; 0
    12a8:	09 f0       	breq	.+2      	; 0x12ac <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    12aa:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    12ac:	0f 2e       	mov	r0, r31
    12ae:	f8 ee       	ldi	r31, 0xE8	; 232
    12b0:	ef 2e       	mov	r14, r31
    12b2:	ff 24       	eor	r15, r15
    12b4:	f0 2d       	mov	r31, r0
    12b6:	ec 0c       	add	r14, r12
    12b8:	fd 1c       	adc	r15, r13
    12ba:	c7 01       	movw	r24, r14
    12bc:	0e 94 9a 04 	call	0x934	; 0x934 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    12c0:	c8 2f       	mov	r28, r24
    12c2:	d0 e0       	ldi	r29, 0x00	; 0
    12c4:	20 97       	sbiw	r28, 0x00	; 0
    12c6:	99 f0       	breq	.+38     	; 0x12ee <midi_device_process+0x64>
    12c8:	00 e0       	ldi	r16, 0x00	; 0
    12ca:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    12cc:	c7 01       	movw	r24, r14
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	0e 94 af 04 	call	0x95e	; 0x95e <bytequeue_get>
    12d4:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    12d6:	c6 01       	movw	r24, r12
    12d8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    12dc:	c7 01       	movw	r24, r14
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	0e 94 c0 04 	call	0x980	; 0x980 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    12e4:	0f 5f       	subi	r16, 0xFF	; 255
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	0c 17       	cp	r16, r28
    12ea:	1d 07       	cpc	r17, r29
    12ec:	78 f3       	brcs	.-34     	; 0x12cc <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	08 95       	ret

00001300 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    1300:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    1302:	67 e0       	ldi	r22, 0x07	; 7
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
    130a:	48 2f       	mov	r20, r24
   if (remainder)
    130c:	88 23       	and	r24, r24
    130e:	81 f0       	breq	.+32     	; 0x1330 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    1310:	c9 01       	movw	r24, r18
    1312:	67 e0       	ldi	r22, 0x07	; 7
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
    131a:	cb 01       	movw	r24, r22
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	84 0f       	add	r24, r20
    132c:	91 1d       	adc	r25, r1
    132e:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    1330:	c9 01       	movw	r24, r18
    1332:	67 e0       	ldi	r22, 0x07	; 7
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
    133a:	cb 01       	movw	r24, r22
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
}
    1348:	08 95       	ret

0000134a <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    134a:	48 2f       	mov	r20, r24
    134c:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    134e:	a1 f0       	breq	.+40     	; 0x1378 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    1350:	9c 01       	movw	r18, r24
    1352:	36 95       	lsr	r19
    1354:	27 95       	ror	r18
    1356:	36 95       	lsr	r19
    1358:	27 95       	ror	r18
    135a:	36 95       	lsr	r19
    135c:	27 95       	ror	r18
    135e:	c9 01       	movw	r24, r18
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	82 1b       	sub	r24, r18
    136e:	93 0b       	sbc	r25, r19
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	84 0f       	add	r24, r20
    1374:	91 1d       	adc	r25, r1
    1376:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    1378:	9c 01       	movw	r18, r24
    137a:	36 95       	lsr	r19
    137c:	27 95       	ror	r18
    137e:	36 95       	lsr	r19
    1380:	27 95       	ror	r18
    1382:	36 95       	lsr	r19
    1384:	27 95       	ror	r18
    1386:	c9 01       	movw	r24, r18
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	82 1b       	sub	r24, r18
    1396:	93 0b       	sbc	r25, r19
}
    1398:	08 95       	ret

0000139a <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    139a:	2f 92       	push	r2
    139c:	3f 92       	push	r3
    139e:	4f 92       	push	r4
    13a0:	5f 92       	push	r5
    13a2:	6f 92       	push	r6
    13a4:	7f 92       	push	r7
    13a6:	8f 92       	push	r8
    13a8:	9f 92       	push	r9
    13aa:	af 92       	push	r10
    13ac:	bf 92       	push	r11
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <sysex_encode+0x26>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <sysex_encode+0x28>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <sysex_encode+0x2a>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	1c 01       	movw	r2, r24
    13ca:	7a 83       	std	Y+2, r23	; 0x02
    13cc:	69 83       	std	Y+1, r22	; 0x01
    13ce:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    13d0:	ca 01       	movw	r24, r20
    13d2:	67 e0       	ldi	r22, 0x07	; 7
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
    13da:	2b 01       	movw	r4, r22
    13dc:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    13de:	61 15       	cp	r22, r1
    13e0:	71 05       	cpc	r23, r1
    13e2:	b1 f1       	breq	.+108    	; 0x1450 <sysex_encode+0xb6>
    13e4:	81 01       	movw	r16, r2
    13e6:	e9 80       	ldd	r14, Y+1	; 0x01
    13e8:	fa 80       	ldd	r15, Y+2	; 0x02
    13ea:	cc 24       	eor	r12, r12
    13ec:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    13ee:	88 24       	eor	r8, r8
    13f0:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    13f2:	1e 83       	std	Y+6, r17	; 0x06
    13f4:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    13f6:	f8 01       	movw	r30, r16
    13f8:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    13fa:	fc 82       	std	Y+4, r15	; 0x04
    13fc:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    13fe:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    1400:	ab 81       	ldd	r26, Y+3	; 0x03
    1402:	bc 81       	ldd	r27, Y+4	; 0x04
    1404:	2d 91       	ld	r18, X+
    1406:	bc 83       	std	Y+4, r27	; 0x04
    1408:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    140a:	4f 5f       	subi	r20, 0xFF	; 255
    140c:	5f 4f       	sbci	r21, 0xFF	; 255
    140e:	82 2f       	mov	r24, r18
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	80 78       	andi	r24, 0x80	; 128
    1414:	90 70       	andi	r25, 0x00	; 0
    1416:	bc 01       	movw	r22, r24
    1418:	04 2e       	mov	r0, r20
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <sysex_encode+0x86>
    141c:	75 95       	asr	r23
    141e:	67 95       	ror	r22
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <sysex_encode+0x82>
    1424:	ad 81       	ldd	r26, Y+5	; 0x05
    1426:	be 81       	ldd	r27, Y+6	; 0x06
    1428:	8c 91       	ld	r24, X
    142a:	86 2b       	or	r24, r22
    142c:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    142e:	2f 77       	andi	r18, 0x7F	; 127
    1430:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1432:	47 30       	cpi	r20, 0x07	; 7
    1434:	51 05       	cpc	r21, r1
    1436:	21 f7       	brne	.-56     	; 0x1400 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    1438:	08 94       	sec
    143a:	c1 1c       	adc	r12, r1
    143c:	d1 1c       	adc	r13, r1
    143e:	08 5f       	subi	r16, 0xF8	; 248
    1440:	1f 4f       	sbci	r17, 0xFF	; 255
    1442:	e7 e0       	ldi	r30, 0x07	; 7
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	ee 0e       	add	r14, r30
    1448:	ff 1e       	adc	r15, r31
    144a:	ca 14       	cp	r12, r10
    144c:	db 04       	cpc	r13, r11
    144e:	89 f6       	brne	.-94     	; 0x13f2 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    1450:	c3 01       	movw	r24, r6
    1452:	67 e0       	ldi	r22, 0x07	; 7
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	0e 94 1f 0b 	call	0x163e	; 0x163e <__udivmodhi4>
   if (remainder) {
    145a:	88 23       	and	r24, r24
    145c:	d9 f1       	breq	.+118    	; 0x14d4 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    145e:	82 01       	movw	r16, r4
    1460:	00 0f       	add	r16, r16
    1462:	11 1f       	adc	r17, r17
    1464:	00 0f       	add	r16, r16
    1466:	11 1f       	adc	r17, r17
    1468:	00 0f       	add	r16, r16
    146a:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    146c:	78 01       	movw	r14, r16
    146e:	e4 18       	sub	r14, r4
    1470:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    1472:	d1 01       	movw	r26, r2
    1474:	a0 0f       	add	r26, r16
    1476:	b1 1f       	adc	r27, r17
    1478:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    147a:	68 2f       	mov	r22, r24
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	61 15       	cp	r22, r1
    1480:	71 05       	cpc	r23, r1
    1482:	19 f1       	breq	.+70     	; 0x14ca <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1484:	e9 81       	ldd	r30, Y+1	; 0x01
    1486:	fa 81       	ldd	r31, Y+2	; 0x02
    1488:	ee 0e       	add	r14, r30
    148a:	ff 1e       	adc	r15, r31
    148c:	c8 01       	movw	r24, r16
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	28 0e       	add	r2, r24
    1492:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    1498:	f7 01       	movw	r30, r14
    149a:	41 91       	ld	r20, Z+
    149c:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    149e:	2f 5f       	subi	r18, 0xFF	; 255
    14a0:	3f 4f       	sbci	r19, 0xFF	; 255
    14a2:	84 2f       	mov	r24, r20
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	80 78       	andi	r24, 0x80	; 128
    14a8:	90 70       	andi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <sysex_encode+0x118>
    14ae:	95 95       	asr	r25
    14b0:	87 95       	ror	r24
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <sysex_encode+0x114>
    14b6:	9c 91       	ld	r25, X
    14b8:	89 2b       	or	r24, r25
    14ba:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    14bc:	4f 77       	andi	r20, 0x7F	; 127
    14be:	f1 01       	movw	r30, r2
    14c0:	41 93       	st	Z+, r20
    14c2:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    14c4:	26 17       	cp	r18, r22
    14c6:	37 07       	cpc	r19, r23
    14c8:	38 f3       	brcs	.-50     	; 0x1498 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    14ca:	c8 01       	movw	r24, r16
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	86 0f       	add	r24, r22
    14d0:	97 1f       	adc	r25, r23
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    14d4:	c2 01       	movw	r24, r4
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
   }
}
    14e2:	26 96       	adiw	r28, 0x06	; 6
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	9f 90       	pop	r9
    1504:	8f 90       	pop	r8
    1506:	7f 90       	pop	r7
    1508:	6f 90       	pop	r6
    150a:	5f 90       	pop	r5
    150c:	4f 90       	pop	r4
    150e:	3f 90       	pop	r3
    1510:	2f 90       	pop	r2
    1512:	08 95       	ret

00001514 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1514:	6f 92       	push	r6
    1516:	7f 92       	push	r7
    1518:	8f 92       	push	r8
    151a:	9f 92       	push	r9
    151c:	af 92       	push	r10
    151e:	bf 92       	push	r11
    1520:	cf 92       	push	r12
    1522:	df 92       	push	r13
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	3c 01       	movw	r6, r24
    1532:	4b 01       	movw	r8, r22
    1534:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    1536:	42 30       	cpi	r20, 0x02	; 2
    1538:	51 05       	cpc	r21, r1
    153a:	08 f4       	brcc	.+2      	; 0x153e <sysex_decode+0x2a>
    153c:	6f c0       	rjmp	.+222    	; 0x161c <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    153e:	7a 01       	movw	r14, r20
    1540:	f6 94       	lsr	r15
    1542:	e7 94       	ror	r14
    1544:	f6 94       	lsr	r15
    1546:	e7 94       	ror	r14
    1548:	f6 94       	lsr	r15
    154a:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    154c:	e1 14       	cp	r14, r1
    154e:	f1 04       	cpc	r15, r1
    1550:	29 f1       	breq	.+74     	; 0x159c <sysex_decode+0x88>
    1552:	eb 01       	movw	r28, r22
    1554:	b3 01       	movw	r22, r6
    1556:	00 e0       	ldi	r16, 0x00	; 0
    1558:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    155a:	cc 24       	eor	r12, r12
    155c:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    155e:	de 01       	movw	r26, r28
    1560:	11 96       	adiw	r26, 0x01	; 1
    1562:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    1564:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    1566:	2d 91       	ld	r18, X+
    1568:	2f 77       	andi	r18, 0x7F	; 127
    156a:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    156c:	4f 5f       	subi	r20, 0xFF	; 255
    156e:	5f 4f       	sbci	r21, 0xFF	; 255
    1570:	88 81       	ld	r24, Y
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	04 2e       	mov	r0, r20
    1576:	02 c0       	rjmp	.+4      	; 0x157c <sysex_decode+0x68>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <sysex_decode+0x64>
    1580:	80 78       	andi	r24, 0x80	; 128
    1582:	28 2b       	or	r18, r24
    1584:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    1586:	47 30       	cpi	r20, 0x07	; 7
    1588:	51 05       	cpc	r21, r1
    158a:	69 f7       	brne	.-38     	; 0x1566 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    158c:	0f 5f       	subi	r16, 0xFF	; 255
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	28 96       	adiw	r28, 0x08	; 8
    1592:	69 5f       	subi	r22, 0xF9	; 249
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	0e 15       	cp	r16, r14
    1598:	1f 05       	cpc	r17, r15
    159a:	09 f7       	brne	.-62     	; 0x155e <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    159c:	5a 2d       	mov	r21, r10
    159e:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    15a0:	99 f1       	breq	.+102    	; 0x1608 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    15a2:	e7 01       	movw	r28, r14
    15a4:	cc 0f       	add	r28, r28
    15a6:	dd 1f       	adc	r29, r29
    15a8:	cc 0f       	add	r28, r28
    15aa:	dd 1f       	adc	r29, r29
    15ac:	cc 0f       	add	r28, r28
    15ae:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    15b0:	8e 01       	movw	r16, r28
    15b2:	0e 19       	sub	r16, r14
    15b4:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    15b6:	65 2f       	mov	r22, r21
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	61 50       	subi	r22, 0x01	; 1
    15bc:	70 40       	sbci	r23, 0x00	; 0
    15be:	f9 f0       	breq	.+62     	; 0x15fe <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    15c0:	ce 01       	movw	r24, r28
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	d4 01       	movw	r26, r8
    15c6:	a8 0f       	add	r26, r24
    15c8:	b9 1f       	adc	r27, r25
    15ca:	f3 01       	movw	r30, r6
    15cc:	e0 0f       	add	r30, r16
    15ce:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    15d4:	c8 0d       	add	r28, r8
    15d6:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    15d8:	4d 91       	ld	r20, X+
    15da:	4f 77       	andi	r20, 0x7F	; 127
    15dc:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    15de:	2f 5f       	subi	r18, 0xFF	; 255
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	88 81       	ld	r24, Y
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <sysex_decode+0xda>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <sysex_decode+0xd6>
    15f2:	80 78       	andi	r24, 0x80	; 128
    15f4:	48 2b       	or	r20, r24
    15f6:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    15f8:	26 17       	cp	r18, r22
    15fa:	37 07       	cpc	r19, r23
    15fc:	68 f3       	brcs	.-38     	; 0x15d8 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    15fe:	c8 01       	movw	r24, r16
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	85 0f       	add	r24, r21
    1604:	91 1d       	adc	r25, r1
    1606:	0c c0       	rjmp	.+24     	; 0x1620 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    1608:	c7 01       	movw	r24, r14
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	8e 19       	sub	r24, r14
    1618:	9f 09       	sbc	r25, r15
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	9f 90       	pop	r9
    1636:	8f 90       	pop	r8
    1638:	7f 90       	pop	r7
    163a:	6f 90       	pop	r6
    163c:	08 95       	ret

0000163e <__udivmodhi4>:
    163e:	aa 1b       	sub	r26, r26
    1640:	bb 1b       	sub	r27, r27
    1642:	51 e1       	ldi	r21, 0x11	; 17
    1644:	07 c0       	rjmp	.+14     	; 0x1654 <__udivmodhi4_ep>

00001646 <__udivmodhi4_loop>:
    1646:	aa 1f       	adc	r26, r26
    1648:	bb 1f       	adc	r27, r27
    164a:	a6 17       	cp	r26, r22
    164c:	b7 07       	cpc	r27, r23
    164e:	10 f0       	brcs	.+4      	; 0x1654 <__udivmodhi4_ep>
    1650:	a6 1b       	sub	r26, r22
    1652:	b7 0b       	sbc	r27, r23

00001654 <__udivmodhi4_ep>:
    1654:	88 1f       	adc	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	5a 95       	dec	r21
    165a:	a9 f7       	brne	.-22     	; 0x1646 <__udivmodhi4_loop>
    165c:	80 95       	com	r24
    165e:	90 95       	com	r25
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	08 95       	ret

00001666 <__divmodhi4>:
    1666:	97 fb       	bst	r25, 7
    1668:	09 2e       	mov	r0, r25
    166a:	07 26       	eor	r0, r23
    166c:	0a d0       	rcall	.+20     	; 0x1682 <__divmodhi4_neg1>
    166e:	77 fd       	sbrc	r23, 7
    1670:	04 d0       	rcall	.+8      	; 0x167a <__divmodhi4_neg2>
    1672:	e5 df       	rcall	.-54     	; 0x163e <__udivmodhi4>
    1674:	06 d0       	rcall	.+12     	; 0x1682 <__divmodhi4_neg1>
    1676:	00 20       	and	r0, r0
    1678:	1a f4       	brpl	.+6      	; 0x1680 <__divmodhi4_exit>

0000167a <__divmodhi4_neg2>:
    167a:	70 95       	com	r23
    167c:	61 95       	neg	r22
    167e:	7f 4f       	sbci	r23, 0xFF	; 255

00001680 <__divmodhi4_exit>:
    1680:	08 95       	ret

00001682 <__divmodhi4_neg1>:
    1682:	f6 f7       	brtc	.-4      	; 0x1680 <__divmodhi4_exit>
    1684:	90 95       	com	r25
    1686:	81 95       	neg	r24
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	08 95       	ret

0000168c <memcpy>:
    168c:	fb 01       	movw	r30, r22
    168e:	dc 01       	movw	r26, r24
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <memcpy+0xa>
    1692:	01 90       	ld	r0, Z+
    1694:	0d 92       	st	X+, r0
    1696:	41 50       	subi	r20, 0x01	; 1
    1698:	50 40       	sbci	r21, 0x00	; 0
    169a:	d8 f7       	brcc	.-10     	; 0x1692 <memcpy+0x6>
    169c:	08 95       	ret

0000169e <_exit>:
    169e:	f8 94       	cli

000016a0 <__stop_program>:
    16a0:	ff cf       	rjmp	.-2      	; 0x16a0 <__stop_program>
