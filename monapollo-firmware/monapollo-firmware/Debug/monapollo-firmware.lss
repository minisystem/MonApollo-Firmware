
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00002192  00002226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002192  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000355  008001bc  008001bc  000022e2  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  000022e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014a  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000260  00000000  00000000  00002c68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e7f  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f81  00000000  00000000  00006d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001802  00000000  00000000  00007cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a5c  00000000  00000000  000094cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001195  00000000  00000000  00009f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024d1  00000000  00000000  0000b0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000d58e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_9>
      28:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e2 e9       	ldi	r30, 0x92	; 146
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	15 e0       	ldi	r17, 0x05	; 5
      88:	ac eb       	ldi	r26, 0xBC	; 188
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a1 31       	cpi	r26, 0x11	; 17
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 a3 02 	call	0x546	; 0x546 <main>
      9a:	0c 94 c7 10 	jmp	0x218e	; 0x218e <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <get_current_note>:

uint8_t get_current_note() {
	
	return note_pool[0].note;
	
}
     120:	80 91 00 01 	lds	r24, 0x0100
     124:	08 95       	ret

00000126 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	18 2f       	mov	r17, r24
     130:	06 2f       	mov	r16, r22
	

		
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //sizeof struct - sizeof one element of struct
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	ec 01       	movw	r28, r24
     138:	22 97       	sbiw	r28, 0x02	; 2
     13a:	be 01       	movw	r22, r28
     13c:	4e e0       	ldi	r20, 0x0E	; 14
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	0e 94 b5 10 	call	0x216a	; 0x216a <memmove>
		
	
	
	note_pool[0].note = note;
     144:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     146:	09 83       	std	Y+1, r16	; 0x01
	
	
	
	
} 
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	1f 91       	pop	r17
     14e:	0f 91       	pop	r16
     150:	08 95       	ret

00000152 <remove_note>:
	
	uint8_t free_slot = 0;
	
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     152:	90 91 00 01 	lds	r25, 0x0100
     156:	98 17       	cp	r25, r24
     158:	41 f0       	breq	.+16     	; 0x16a <remove_note+0x18>
     15a:	e2 e0       	ldi	r30, 0x02	; 2
     15c:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     15e:	41 e0       	ldi	r20, 0x01	; 1
     160:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     162:	90 81       	ld	r25, Z
     164:	98 17       	cp	r25, r24
     166:	59 f4       	brne	.+22     	; 0x17e <remove_note+0x2c>
     168:	02 c0       	rjmp	.+4      	; 0x16e <remove_note+0x1c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = -1;
     16e:	fa 01       	movw	r30, r20
     170:	ee 0f       	add	r30, r30
     172:	ff 1f       	adc	r31, r31
     174:	e0 50       	subi	r30, 0x00	; 0
     176:	ff 4f       	sbci	r31, 0xFF	; 255
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	80 83       	st	Z, r24
			free_slot = i;
			break;
     17c:	07 c0       	rjmp	.+14     	; 0x18c <remove_note+0x3a>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     17e:	4f 5f       	subi	r20, 0xFF	; 255
     180:	5f 4f       	sbci	r21, 0xFF	; 255
     182:	32 96       	adiw	r30, 0x02	; 2
     184:	48 30       	cpi	r20, 0x08	; 8
     186:	51 05       	cpc	r21, r1
     188:	61 f7       	brne	.-40     	; 0x162 <remove_note+0x10>
	
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     18a:	40 e0       	ldi	r20, 0x00	; 0
	
	//if it's the first note, then return. Omar pointed out that this optimization will cause problems if you release most recently played note
	//if (free_slot == 0) return;

	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	ca 01       	movw	r24, r20
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	bc 01       	movw	r22, r24
     196:	6e 5f       	subi	r22, 0xFE	; 254
     198:	7e 4f       	sbci	r23, 0xFE	; 254
     19a:	40 95       	com	r20
     19c:	50 95       	com	r21
     19e:	48 5f       	subi	r20, 0xF8	; 248
     1a0:	5f 4f       	sbci	r21, 0xFF	; 255
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	80 50       	subi	r24, 0x00	; 0
     1a8:	9f 4f       	sbci	r25, 0xFF	; 255
     1aa:	0e 94 b5 10 	call	0x216a	; 0x216a <memmove>
	note_pool[7].note = -1;
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
     1b0:	80 93 0e 01 	sts	0x010E, r24
	
	//if releasing the last note in the stack then need to preserve pitch for envelope release
	//if (free_slot == 0) note_pool[0].note = note;
	
}
     1b4:	08 95       	ret

000001b6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1b6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1b8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1ba:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1bc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1be:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     1c0:	8c 91       	ld	r24, X
     1c2:	82 b9       	out	0x02, r24	; 2
     1c4:	8d e0       	ldi	r24, 0x0D	; 13
     1c6:	8a 95       	dec	r24
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <set_control_voltage+0x10>
     1ca:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     1cc:	ea ed       	ldi	r30, 0xDA	; 218
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	40 81       	ld	r20, Z
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	c9 01       	movw	r24, r18
     1d8:	11 96       	adiw	r26, 0x01	; 1
     1da:	0c 90       	ld	r0, X
     1dc:	11 97       	sbiw	r26, 0x01	; 1
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <set_control_voltage+0x2e>
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	0a 94       	dec	r0
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <set_control_voltage+0x2a>
     1e8:	84 2b       	or	r24, r20
     1ea:	80 83       	st	Z, r24
     1ec:	82 e4       	ldi	r24, 0x42	; 66
     1ee:	8a 95       	dec	r24
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <set_control_voltage+0x38>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <set_control_voltage+0x3e>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     1f4:	80 81       	ld	r24, Z
     1f6:	11 96       	adiw	r26, 0x01	; 1
     1f8:	0c 90       	ld	r0, X
     1fa:	11 97       	sbiw	r26, 0x01	; 1
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <set_control_voltage+0x4c>
     1fe:	22 0f       	add	r18, r18
     200:	33 1f       	adc	r19, r19
     202:	0a 94       	dec	r0
     204:	e2 f7       	brpl	.-8      	; 0x1fe <set_control_voltage+0x48>
     206:	20 95       	com	r18
     208:	28 23       	and	r18, r24
     20a:	20 83       	st	Z, r18
	
}	
     20c:	08 95       	ret

0000020e <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     20e:	83 b3       	in	r24, 0x13	; 19
     210:	83 60       	ori	r24, 0x03	; 3
     212:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     214:	8f ef       	ldi	r24, 0xFF	; 255
     216:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     218:	97 b1       	in	r25, 0x07	; 7
     21a:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     21c:	e9 ed       	ldi	r30, 0xD9	; 217
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	8f 60       	ori	r24, 0x0F	; 15
     224:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     226:	ea ed       	ldi	r30, 0xDA	; 218
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	80 7f       	andi	r24, 0xF0	; 240
     22e:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     230:	84 b3       	in	r24, 0x14	; 20
     232:	83 60       	ori	r24, 0x03	; 3
     234:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     236:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     238:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     23a:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     23c:	a0 9a       	sbi	0x14, 0	; 20
}
     23e:	08 95       	ret

00000240 <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     240:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     242:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     244:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     246:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     248:	62 b9       	out	0x02, r22	; 2
     24a:	2d e0       	ldi	r18, 0x0D	; 13
     24c:	2a 95       	dec	r18
     24e:	f1 f7       	brne	.-4      	; 0x24c <set_dac+0xc>
     250:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     252:	ea ed       	ldi	r30, 0xDA	; 218
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	40 81       	ld	r20, Z
     258:	21 e0       	ldi	r18, 0x01	; 1
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	b9 01       	movw	r22, r18
     25e:	02 c0       	rjmp	.+4      	; 0x264 <set_dac+0x24>
     260:	66 0f       	add	r22, r22
     262:	77 1f       	adc	r23, r23
     264:	8a 95       	dec	r24
     266:	e2 f7       	brpl	.-8      	; 0x260 <set_dac+0x20>
     268:	cb 01       	movw	r24, r22
     26a:	94 2f       	mov	r25, r20
     26c:	98 2b       	or	r25, r24
     26e:	90 83       	st	Z, r25
     270:	72 e4       	ldi	r23, 0x42	; 66
     272:	7a 95       	dec	r23
     274:	f1 f7       	brne	.-4      	; 0x272 <set_dac+0x32>
     276:	00 c0       	rjmp	.+0      	; 0x278 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     278:	90 81       	ld	r25, Z
     27a:	80 95       	com	r24
     27c:	89 23       	and	r24, r25
     27e:	80 83       	st	Z, r24
	
}
     280:	08 95       	ret

00000282 <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t digit)
{
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	2a 97       	sbiw	r28, 0x0a	; 10
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	de bf       	out	0x3e, r29	; 62
     292:	0f be       	out	0x3f, r0	; 63
     294:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     296:	de 01       	movw	r26, r28
     298:	11 96       	adiw	r26, 0x01	; 1
     29a:	ee e4       	ldi	r30, 0x4E	; 78
     29c:	f1 e0       	ldi	r31, 0x01	; 1
     29e:	3a e0       	ldi	r19, 0x0A	; 10
     2a0:	01 90       	ld	r0, Z+
     2a2:	0d 92       	st	X+, r0
     2a4:	31 50       	subi	r19, 0x01	; 1
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2a8:	3f ef       	ldi	r19, 0xFF	; 255
     2aa:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2ac:	ea ed       	ldi	r30, 0xDA	; 218
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	30 81       	ld	r19, Z
     2b2:	30 61       	ori	r19, 0x10	; 16
     2b4:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2b6:	30 81       	ld	r19, Z
     2b8:	3f 7e       	andi	r19, 0xEF	; 239
     2ba:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     2bc:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2be:	30 81       	ld	r19, Z
     2c0:	30 62       	ori	r19, 0x20	; 32
     2c2:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2c4:	30 81       	ld	r19, Z
     2c6:	3f 7d       	andi	r19, 0xDF	; 223
     2c8:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
     2ca:	62 30       	cpi	r22, 0x02	; 2
     2cc:	f9 f0       	breq	.+62     	; 0x30c <display_dec+0x8a>
     2ce:	63 30       	cpi	r22, 0x03	; 3
     2d0:	18 f4       	brcc	.+6      	; 0x2d8 <display_dec+0x56>
     2d2:	61 30       	cpi	r22, 0x01	; 1
     2d4:	a1 f5       	brne	.+104    	; 0x33e <display_dec+0xbc>
     2d6:	0d c0       	rjmp	.+26     	; 0x2f2 <display_dec+0x70>
     2d8:	64 30       	cpi	r22, 0x04	; 4
     2da:	29 f1       	breq	.+74     	; 0x326 <display_dec+0xa4>
     2dc:	68 30       	cpi	r22, 0x08	; 8
     2de:	79 f5       	brne	.+94     	; 0x33e <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     2e0:	6a e0       	ldi	r22, 0x0A	; 10
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
     2e8:	fe 01       	movw	r30, r28
     2ea:	e8 0f       	add	r30, r24
     2ec:	f9 1f       	adc	r31, r25
     2ee:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     2f0:	26 c0       	rjmp	.+76     	; 0x33e <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     2f2:	64 e6       	ldi	r22, 0x64	; 100
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
     2fa:	6a e0       	ldi	r22, 0x0A	; 10
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
     302:	fe 01       	movw	r30, r28
     304:	e6 0f       	add	r30, r22
     306:	f7 1f       	adc	r31, r23
     308:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     30a:	19 c0       	rjmp	.+50     	; 0x33e <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     30c:	68 ee       	ldi	r22, 0xE8	; 232
     30e:	73 e0       	ldi	r23, 0x03	; 3
     310:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
     314:	64 e6       	ldi	r22, 0x64	; 100
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
     31c:	fe 01       	movw	r30, r28
     31e:	e6 0f       	add	r30, r22
     320:	f7 1f       	adc	r31, r23
     322:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     324:	0c c0       	rjmp	.+24     	; 0x33e <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     326:	60 e1       	ldi	r22, 0x10	; 16
     328:	77 e2       	ldi	r23, 0x27	; 39
     32a:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
     32e:	68 ee       	ldi	r22, 0xE8	; 232
     330:	73 e0       	ldi	r23, 0x03	; 3
     332:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
     336:	fe 01       	movw	r30, r28
     338:	e6 0f       	add	r30, r22
     33a:	f7 1f       	adc	r31, r23
     33c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     33e:	20 95       	com	r18
     340:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     342:	ea ed       	ldi	r30, 0xDA	; 218
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	80 61       	ori	r24, 0x10	; 16
     34a:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     34c:	80 81       	ld	r24, Z
     34e:	8f 7e       	andi	r24, 0xEF	; 239
     350:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     352:	2a 96       	adiw	r28, 0x0a	; 10
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	de bf       	out	0x3e, r29	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	cd bf       	out	0x3d, r28	; 61
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	00 d0       	rcall	.+0      	; 0x36c <update_display+0x8>
     36c:	00 d0       	rcall	.+0      	; 0x36e <update_display+0xa>
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t place = 0;
	
	uint8_t digit[] = {
     372:	28 e0       	ldi	r18, 0x08	; 8
     374:	29 83       	std	Y+1, r18	; 0x01
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	2a 83       	std	Y+2, r18	; 0x02
     37a:	22 e0       	ldi	r18, 0x02	; 2
     37c:	2b 83       	std	Y+3, r18	; 0x03
     37e:	24 e0       	ldi	r18, 0x04	; 4
     380:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	if (type == DEC) {
     382:	66 23       	and	r22, r22
     384:	81 f4       	brne	.+32     	; 0x3a6 <update_display+0x42>

		
			
		display_dec(number, digit[place]);
     386:	10 91 c0 01 	lds	r17, 0x01C0
     38a:	fe 01       	movw	r30, r28
     38c:	e1 0f       	add	r30, r17
     38e:	f1 1d       	adc	r31, r1
     390:	61 81       	ldd	r22, Z+1	; 0x01
     392:	0e 94 41 01 	call	0x282	; 0x282 <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     396:	81 2f       	mov	r24, r17
     398:	8f 5f       	subi	r24, 0xFF	; 255
     39a:	80 93 c0 01 	sts	0x01C0, r24
     39e:	13 30       	cpi	r17, 0x03	; 3
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <update_display+0x42>
		{
			place = 0;
     3a2:	10 92 c0 01 	sts	0x01C0, r1
		
		
	}
	
	
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	08 95       	ret

000003b6 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     3b6:	1f 92       	push	r1
     3b8:	0f 92       	push	r0
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	0f 92       	push	r0
     3be:	11 24       	eor	r1, r1
     3c0:	8f 93       	push	r24
     3c2:	9f 93       	push	r25
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
	compare_match_counter++;
     3c8:	80 91 1d 04 	lds	r24, 0x041D
     3cc:	8f 5f       	subi	r24, 0xFF	; 255
     3ce:	80 93 1d 04 	sts	0x041D, r24
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     3d2:	80 91 22 04 	lds	r24, 0x0422
     3d6:	81 50       	subi	r24, 0x01	; 1
     3d8:	87 bd       	out	0x27, r24	; 39
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp sync LED
     3da:	85 b1       	in	r24, 0x05	; 5
     3dc:	80 58       	subi	r24, 0x80	; 128
     3de:	85 b9       	out	0x05, r24	; 5
	if (period_counter == 0) {
     3e0:	80 91 23 04 	lds	r24, 0x0423
     3e4:	88 23       	and	r24, r24
     3e6:	a1 f4       	brne	.+40     	; 0x410 <__vector_10+0x5a>
		count_finished = FALSE;
     3e8:	10 92 20 04 	sts	0x0420, r1
		no_overflow = TRUE;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 ba 01 	sts	0x01BA, r24
		period_counter = 1; //set period counter to 1
     3f2:	80 93 23 04 	sts	0x0423, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     3f6:	e1 e8       	ldi	r30, 0x81	; 129
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	90 91 21 04 	lds	r25, 0x0421
     400:	89 2b       	or	r24, r25
     402:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     404:	ef e6       	ldi	r30, 0x6F	; 111
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	81 60       	ori	r24, 0x01	; 1
     40c:	80 83       	st	Z, r24
     40e:	18 c0       	rjmp	.+48     	; 0x440 <__vector_10+0x8a>
	} else {
		
		osc_count = TCNT1;
     410:	e4 e8       	ldi	r30, 0x84	; 132
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	90 93 1f 04 	sts	0x041F, r25
     41c:	80 93 1e 04 	sts	0x041E, r24
		value_to_display = compare_match_counter;//osc_count;
     420:	80 91 1d 04 	lds	r24, 0x041D
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	90 93 97 01 	sts	0x0197, r25
     42a:	80 93 96 01 	sts	0x0196, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     42e:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	80 93 20 04 	sts	0x0420, r24
		period_counter = 0;
     438:	10 92 23 04 	sts	0x0423, r1
		TCNT1 = 0; //reset timer/counter 1
     43c:	11 82       	std	Z+1, r1	; 0x01
     43e:	10 82       	st	Z, r1
	}
	
	
	
	
}
     440:	ff 91       	pop	r31
     442:	ef 91       	pop	r30
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	0f 90       	pop	r0
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	0f 90       	pop	r0
     44e:	1f 90       	pop	r1
     450:	18 95       	reti

00000452 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     452:	1f 92       	push	r1
     454:	0f 92       	push	r0
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	0f 92       	push	r0
     45a:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     45c:	10 92 ba 01 	sts	0x01BA, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp sync LED
	
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <note_off_event>:
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off 
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     46a:	84 2f       	mov	r24, r20
	remove_note(note);
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 a9 00 	call	0x152	; 0x152 <remove_note>
	gate_buffer--;
     472:	80 91 c2 01 	lds	r24, 0x01C2
     476:	81 50       	subi	r24, 0x01	; 1
     478:	80 93 c2 01 	sts	0x01C2, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     47c:	88 23       	and	r24, r24
     47e:	09 f4       	brne	.+2      	; 0x482 <note_off_event+0x18>
     480:	89 98       	cbi	0x11, 1	; 17
     482:	08 95       	ret

00000484 <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     484:	84 2f       	mov	r24, r20
	
	value_to_display = note;
     486:	e4 2f       	mov	r30, r20
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	f0 93 97 01 	sts	0x0197, r31
     48e:	e0 93 96 01 	sts	0x0196, r30
	midi_note_number = note;
     492:	40 93 01 02 	sts	0x0201, r20
	if (velocity == 0) {
     496:	22 23       	and	r18, r18
     498:	61 f4       	brne	.+24     	; 0x4b2 <note_on_event+0x2e>
		remove_note(note);
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 a9 00 	call	0x152	; 0x152 <remove_note>
		gate_buffer--;
     4a0:	80 91 c2 01 	lds	r24, 0x01C2
     4a4:	81 50       	subi	r24, 0x01	; 1
     4a6:	80 93 c2 01 	sts	0x01C2, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     4aa:	88 23       	and	r24, r24
     4ac:	69 f4       	brne	.+26     	; 0x4c8 <note_on_event+0x44>
     4ae:	89 98       	cbi	0x11, 1	; 17
     4b0:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	62 2f       	mov	r22, r18
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	0e 94 93 00 	call	0x126	; 0x126 <new_note>
		gate_buffer++; //increment gate_buffer
     4bc:	80 91 c2 01 	lds	r24, 0x01C2
     4c0:	8f 5f       	subi	r24, 0xFF	; 255
     4c2:	80 93 c2 01 	sts	0x01C2, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off 
		PORTF |= (1<<GATE);
     4c6:	89 9a       	sbi	0x11, 1	; 17
     4c8:	08 95       	ret

000004ca <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     4ca:	87 e2       	ldi	r24, 0x27	; 39
     4cc:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     4d0:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     4d4:	88 e9       	ldi	r24, 0x98	; 152
     4d6:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     4da:	08 95       	ret

000004dc <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     4dc:	1f 92       	push	r1
     4de:	0f 92       	push	r0
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	0f 92       	push	r0
     4e4:	11 24       	eor	r1, r1
     4e6:	2f 93       	push	r18
     4e8:	3f 93       	push	r19
     4ea:	4f 93       	push	r20
     4ec:	5f 93       	push	r21
     4ee:	6f 93       	push	r22
     4f0:	7f 93       	push	r23
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
     4f6:	af 93       	push	r26
     4f8:	bf 93       	push	r27
     4fa:	ef 93       	push	r30
     4fc:	ff 93       	push	r31
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	0f 92       	push	r0
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
	 
	uint8_t inByte = UDR0;
     508:	80 91 c6 00 	lds	r24, 0x00C6
     50c:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     50e:	84 e2       	ldi	r24, 0x24	; 36
     510:	94 e0       	ldi	r25, 0x04	; 4
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	ae 01       	movw	r20, r28
     516:	4f 5f       	subi	r20, 0xFF	; 255
     518:	5f 4f       	sbci	r21, 0xFF	; 255
     51a:	0e 94 81 0c 	call	0x1902	; 0x1902 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     51e:	0f 90       	pop	r0
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	ff 91       	pop	r31
     526:	ef 91       	pop	r30
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	7f 91       	pop	r23
     532:	6f 91       	pop	r22
     534:	5f 91       	pop	r21
     536:	4f 91       	pop	r20
     538:	3f 91       	pop	r19
     53a:	2f 91       	pop	r18
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     546:	80 e8       	ldi	r24, 0x80	; 128
     548:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     54a:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     54c:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     54e:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     550:	9a 9a       	sbi	0x13, 2	; 19
	//PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
	PORTG |= (1<<TUNE_SELECT);
     552:	a2 9a       	sbi	0x14, 2	; 20
	
	setup_spi(); 
     554:	0e 94 10 04 	call	0x820	; 0x820 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     558:	a9 ed       	ldi	r26, 0xD9	; 217
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	8c 91       	ld	r24, X
     55e:	80 6c       	ori	r24, 0xC0	; 192
     560:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     562:	ea ed       	ldi	r30, 0xDA	; 218
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	80 6c       	ori	r24, 0xC0	; 192
     56a:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     56c:	81 b1       	in	r24, 0x01	; 1
     56e:	8f ef       	ldi	r24, 0xFF	; 255
     570:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     572:	92 b1       	in	r25, 0x02	; 2
     574:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     576:	8c 91       	ld	r24, X
     578:	80 63       	ori	r24, 0x30	; 48
     57a:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     57c:	80 81       	ld	r24, Z
     57e:	8f 7c       	andi	r24, 0xCF	; 207
     580:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<ISW8_SW); //set ISW8_SW pin as input
     582:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     584:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     588:	0e 94 07 01 	call	0x20e	; 0x20e <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     58c:	c4 e2       	ldi	r28, 0x24	; 36
     58e:	d4 e0       	ldi	r29, 0x04	; 4
     590:	ce 01       	movw	r24, r28
     592:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     596:	ce 01       	movw	r24, r28
     598:	62 e4       	ldi	r22, 0x42	; 66
     59a:	72 e0       	ldi	r23, 0x02	; 2
     59c:	0e 94 18 0c 	call	0x1830	; 0x1830 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     5a0:	ce 01       	movw	r24, r28
     5a2:	65 e3       	ldi	r22, 0x35	; 53
     5a4:	72 e0       	ldi	r23, 0x02	; 2
     5a6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     5aa:	0e 94 65 02 	call	0x4ca	; 0x4ca <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     5ae:	0e 94 2f 04 	call	0x85e	; 0x85e <update_spi>
	//TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
	//TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms
	

		
	sei(); //enable global interrupts
     5b2:	78 94       	sei
	
	////set initial pitch offset CVs
	vco1_init_cv = set_vco_init_cv(VCO1);
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 00 06 	call	0xc00	; 0xc00 <set_vco_init_cv>
     5ba:	90 93 1c 04 	sts	0x041C, r25
     5be:	80 93 1b 04 	sts	0x041B, r24
	vco2_init_cv = set_vco_init_cv(VCO2);
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0e 94 00 06 	call	0xc00	; 0xc00 <set_vco_init_cv>
     5c8:	90 93 1a 04 	sts	0x041A, r25
     5cc:	80 93 19 04 	sts	0x0419, r24
	value_to_display = compare_match_counter;//vco1_init_cv;
     5d0:	80 91 1d 04 	lds	r24, 0x041D
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	90 93 97 01 	sts	0x0197, r25
     5da:	80 93 96 01 	sts	0x0196, r24
	
	

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     5de:	ce 01       	movw	r24, r28
     5e0:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <midi_device_process>
	
		update_display(value_to_display, DEC);
     5e4:	80 91 96 01 	lds	r24, 0x0196
     5e8:	90 91 97 01 	lds	r25, 0x0197
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	0e 94 b2 01 	call	0x364	; 0x364 <update_display>
			
		scan_pots_and_update_control_voltages();
     5f2:	0e 94 08 03 	call	0x610	; 0x610 <scan_pots_and_update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     5f6:	80 91 c1 01 	lds	r24, 0x01C1
     5fa:	98 2f       	mov	r25, r24
     5fc:	9f 5f       	subi	r25, 0xFF	; 255
     5fe:	90 93 c1 01 	sts	0x01C1, r25
     602:	85 30       	cpi	r24, 0x05	; 5
     604:	61 f7       	brne	.-40     	; 0x5de <main+0x98>
		{
			switch_timer = 0;
     606:	10 92 c1 01 	sts	0x01C1, r1
			update_spi();
     60a:	0e 94 2f 04 	call	0x85e	; 0x85e <update_spi>
     60e:	e7 cf       	rjmp	.-50     	; 0x5de <main+0x98>

00000610 <scan_pots_and_update_control_voltages>:
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     610:	4f 92       	push	r4
     612:	5f 92       	push	r5
     614:	6f 92       	push	r6
     616:	7f 92       	push	r7
     618:	8f 92       	push	r8
     61a:	9f 92       	push	r9
     61c:	af 92       	push	r10
     61e:	bf 92       	push	r11
     620:	cf 92       	push	r12
     622:	df 92       	push	r13
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     630:	01 ee       	ldi	r16, 0xE1	; 225
     632:	11 e0       	ldi	r17, 0x01	; 1
     634:	0f 2e       	mov	r0, r31
     636:	f6 e7       	ldi	r31, 0x76	; 118
     638:	cf 2e       	mov	r12, r31
     63a:	f1 e0       	ldi	r31, 0x01	; 1
     63c:	df 2e       	mov	r13, r31
     63e:	f0 2d       	mov	r31, r0
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     640:	ee 24       	eor	r14, r14
     642:	ff 24       	eor	r15, r15
     644:	e3 94       	inc	r14
     646:	c0 e0       	ldi	r28, 0x00	; 0
     648:	d0 e0       	ldi	r29, 0x00	; 0
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     64a:	0f 2e       	mov	r0, r31
     64c:	fa e3       	ldi	r31, 0x3A	; 58
     64e:	8f 2e       	mov	r8, r31
     650:	f1 e0       	ldi	r31, 0x01	; 1
     652:	9f 2e       	mov	r9, r31
     654:	f0 2d       	mov	r31, r0
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2
				//adc_difference = adc_value - adc_previous;
				//adc_previous = adc_previous + (adc_difference>>2);
				//value_to_display = adc_previous;
				tune_offset = 512 - pot_group_0[i];
     656:	aa 24       	eor	r10, r10
     658:	bb 24       	eor	r11, r11
     65a:	68 94       	set
     65c:	b1 f8       	bld	r11, 1
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     65e:	0f 2e       	mov	r0, r31
     660:	f8 e3       	ldi	r31, 0x38	; 56
     662:	6f 2e       	mov	r6, r31
     664:	f1 e0       	ldi	r31, 0x01	; 1
     666:	7f 2e       	mov	r7, r31
     668:	f0 2d       	mov	r31, r0
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     66a:	0f 2e       	mov	r0, r31
     66c:	f2 e4       	ldi	r31, 0x42	; 66
     66e:	4f 2e       	mov	r4, r31
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	5f 2e       	mov	r5, r31
     674:	f0 2d       	mov	r31, r0
     676:	08 c0       	rjmp	.+16     	; 0x688 <scan_pots_and_update_control_voltages+0x78>
	}; 
	
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	08 94       	sec
     67c:	e1 1c       	adc	r14, r1
     67e:	f1 1c       	adc	r15, r1
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	c8 0e       	add	r12, r24
     686:	d9 1e       	adc	r13, r25
	{

		adc_value = read_pot(POTMUX_EN0, i);
     688:	86 e0       	ldi	r24, 0x06	; 6
     68a:	6c 2f       	mov	r22, r28
     68c:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     690:	90 93 07 02 	sts	0x0207, r25
     694:	80 93 06 02 	sts	0x0206, r24
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
     698:	80 91 06 02 	lds	r24, 0x0206
     69c:	90 91 07 02 	lds	r25, 0x0207
     6a0:	f8 01       	movw	r30, r16
     6a2:	60 81       	ld	r22, Z
     6a4:	71 81       	ldd	r23, Z+1	; 0x01
     6a6:	86 1b       	sub	r24, r22
     6a8:	97 0b       	sbc	r25, r23
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
     6aa:	95 95       	asr	r25
     6ac:	87 95       	ror	r24
     6ae:	95 95       	asr	r25
     6b0:	87 95       	ror	r24
     6b2:	9c 01       	movw	r18, r24
     6b4:	26 0f       	add	r18, r22
     6b6:	37 1f       	adc	r19, r23
     6b8:	21 93       	st	Z+, r18
     6ba:	31 93       	st	Z+, r19
     6bc:	8f 01       	movw	r16, r30
		int fine_offset = 0;
		
		switch (i)
     6be:	c8 30       	cpi	r28, 0x08	; 8
     6c0:	d1 05       	cpc	r29, r1
     6c2:	71 f0       	breq	.+28     	; 0x6e0 <scan_pots_and_update_control_voltages+0xd0>
     6c4:	c9 30       	cpi	r28, 0x09	; 9
     6c6:	d1 05       	cpc	r29, r1
     6c8:	24 f4       	brge	.+8      	; 0x6d2 <scan_pots_and_update_control_voltages+0xc2>
     6ca:	c4 30       	cpi	r28, 0x04	; 4
     6cc:	d1 05       	cpc	r29, r1
     6ce:	b1 f5       	brne	.+108    	; 0x73c <scan_pots_and_update_control_voltages+0x12c>
     6d0:	2a c0       	rjmp	.+84     	; 0x726 <scan_pots_and_update_control_voltages+0x116>
     6d2:	c9 30       	cpi	r28, 0x09	; 9
     6d4:	d1 05       	cpc	r29, r1
     6d6:	b1 f0       	breq	.+44     	; 0x704 <scan_pots_and_update_control_voltages+0xf4>
     6d8:	cb 30       	cpi	r28, 0x0B	; 11
     6da:	d1 05       	cpc	r29, r1
     6dc:	79 f5       	brne	.+94     	; 0x73c <scan_pots_and_update_control_voltages+0x12c>
     6de:	3a c0       	rjmp	.+116    	; 0x754 <scan_pots_and_update_control_voltages+0x144>
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     6e0:	60 91 19 04 	lds	r22, 0x0419
     6e4:	70 91 1a 04 	lds	r23, 0x041A
		switch (i)
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
     6e8:	60 50       	subi	r22, 0x00	; 0
     6ea:	7e 4f       	sbci	r23, 0xFE	; 254
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     6ec:	80 91 02 02 	lds	r24, 0x0202
     6f0:	90 91 03 02 	lds	r25, 0x0203
     6f4:	68 0f       	add	r22, r24
     6f6:	79 1f       	adc	r23, r25
     6f8:	62 1b       	sub	r22, r18
     6fa:	73 0b       	sbc	r23, r19
     6fc:	c4 01       	movw	r24, r8
     6fe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
				
				break;
     702:	ba cf       	rjmp	.-140    	; 0x678 <scan_pots_and_update_control_voltages+0x68>
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2
				//adc_difference = adc_value - adc_previous;
				//adc_previous = adc_previous + (adc_difference>>2);
				//value_to_display = adc_previous;
				tune_offset = 512 - pot_group_0[i];
     704:	b5 01       	movw	r22, r10
     706:	62 1b       	sub	r22, r18
     708:	73 0b       	sbc	r23, r19
     70a:	70 93 03 02 	sts	0x0203, r23
     70e:	60 93 02 02 	sts	0x0202, r22
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     712:	80 91 1b 04 	lds	r24, 0x041B
     716:	90 91 1c 04 	lds	r25, 0x041C
     71a:	68 0f       	add	r22, r24
     71c:	79 1f       	adc	r23, r25
     71e:	c3 01       	movw	r24, r6
     720:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
				break;
     724:	a9 cf       	rjmp	.-174    	; 0x678 <scan_pots_and_update_control_voltages+0x68>
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     726:	b9 01       	movw	r22, r18
     728:	66 0f       	add	r22, r22
     72a:	77 1f       	adc	r23, r23
     72c:	66 0f       	add	r22, r22
     72e:	77 1f       	adc	r23, r23
     730:	66 0f       	add	r22, r22
     732:	77 1f       	adc	r23, r23
     734:	c2 01       	movw	r24, r4
     736:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
				break;
     73a:	9e cf       	rjmp	.-196    	; 0x678 <scan_pots_and_update_control_voltages+0x68>
			
			default: //set control voltage full-scale
				set_control_voltage(pot_decoder_0[i], pot_group_0[i] << 4);
     73c:	b9 01       	movw	r22, r18
     73e:	62 95       	swap	r22
     740:	72 95       	swap	r23
     742:	70 7f       	andi	r23, 0xF0	; 240
     744:	76 27       	eor	r23, r22
     746:	60 7f       	andi	r22, 0xF0	; 240
     748:	76 27       	eor	r23, r22
     74a:	f6 01       	movw	r30, r12
     74c:	80 81       	ld	r24, Z
     74e:	91 81       	ldd	r25, Z+1	; 0x01
     750:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	}; 
	
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     754:	f0 e1       	ldi	r31, 0x10	; 16
     756:	ef 16       	cp	r14, r31
     758:	f1 04       	cpc	r15, r1
     75a:	0c f4       	brge	.+2      	; 0x75e <scan_pots_and_update_control_voltages+0x14e>
     75c:	8d cf       	rjmp	.-230    	; 0x678 <scan_pots_and_update_control_voltages+0x68>
     75e:	03 ec       	ldi	r16, 0xC3	; 195
     760:	11 e0       	ldi	r17, 0x01	; 1
     762:	0f 2e       	mov	r0, r31
     764:	f8 e5       	ldi	r31, 0x58	; 88
     766:	ef 2e       	mov	r14, r31
     768:	f1 e0       	ldi	r31, 0x01	; 1
     76a:	ff 2e       	mov	r15, r31
     76c:	f0 2d       	mov	r31, r0
     76e:	c1 e0       	ldi	r28, 0x01	; 1
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     770:	87 e0       	ldi	r24, 0x07	; 7
     772:	6c 2f       	mov	r22, r28
     774:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     778:	90 93 07 02 	sts	0x0207, r25
     77c:	80 93 06 02 	sts	0x0206, r24
		int adc_change = adc_value - pot_group_1[i];
     780:	60 91 06 02 	lds	r22, 0x0206
     784:	70 91 07 02 	lds	r23, 0x0207
     788:	f8 01       	movw	r30, r16
     78a:	80 81       	ld	r24, Z
     78c:	91 81       	ldd	r25, Z+1	; 0x01
     78e:	68 1b       	sub	r22, r24
     790:	79 0b       	sbc	r23, r25
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);		
     792:	75 95       	asr	r23
     794:	67 95       	ror	r22
     796:	75 95       	asr	r23
     798:	67 95       	ror	r22
     79a:	68 0f       	add	r22, r24
     79c:	79 1f       	adc	r23, r25
     79e:	61 93       	st	Z+, r22
     7a0:	71 93       	st	Z+, r23
     7a2:	8f 01       	movw	r16, r30
		
		set_control_voltage(pot_decoder_1[i], pot_group_1[i] <<4);
     7a4:	62 95       	swap	r22
     7a6:	72 95       	swap	r23
     7a8:	70 7f       	andi	r23, 0xF0	; 240
     7aa:	76 27       	eor	r23, r22
     7ac:	60 7f       	andi	r22, 0xF0	; 240
     7ae:	76 27       	eor	r23, r22
     7b0:	f7 01       	movw	r30, r14
     7b2:	81 91       	ld	r24, Z+
     7b4:	91 91       	ld	r25, Z+
     7b6:	7f 01       	movw	r14, r30
     7b8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
     7bc:	cf 5f       	subi	r28, 0xFF	; 255
		//}
		
	}
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     7be:	c0 31       	cpi	r28, 0x10	; 16
     7c0:	b9 f6       	brne	.-82     	; 0x770 <scan_pots_and_update_control_voltages+0x160>
	}
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	set_control_voltage(&vco1_pitch_cv, vco1_pitch_table[get_current_note()]); //need to change this to get note number from assigner. Something like get_current_note()
     7c2:	0e 94 90 00 	call	0x120	; 0x120 <get_current_note>
     7c6:	e8 2f       	mov	r30, r24
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	e7 5e       	subi	r30, 0xE7	; 231
     7d0:	fc 4f       	sbci	r31, 0xFC	; 252
     7d2:	60 81       	ld	r22, Z
     7d4:	71 81       	ldd	r23, Z+1	; 0x01
     7d6:	8c e4       	ldi	r24, 0x4C	; 76
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	
	set_control_voltage(&vco2_pitch_cv, vco2_pitch_table[get_current_note() + 12]); //temporarily pitch VCO2 one octave up from VCO1
     7de:	0e 94 90 00 	call	0x120	; 0x120 <get_current_note>
     7e2:	e8 2f       	mov	r30, r24
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	ef 5c       	subi	r30, 0xCF	; 207
     7ec:	fd 4f       	sbci	r31, 0xFD	; 253
     7ee:	60 81       	ld	r22, Z
     7f0:	71 81       	ldd	r23, Z+1	; 0x01
     7f2:	8a e4       	ldi	r24, 0x4A	; 74
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     7fa:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     7fc:	a1 9a       	sbi	0x14, 1	; 20
	
	
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	df 90       	pop	r13
     80c:	cf 90       	pop	r12
     80e:	bf 90       	pop	r11
     810:	af 90       	pop	r10
     812:	9f 90       	pop	r9
     814:	8f 90       	pop	r8
     816:	7f 90       	pop	r7
     818:	6f 90       	pop	r6
     81a:	5f 90       	pop	r5
     81c:	4f 90       	pop	r4
     81e:	08 95       	ret

00000820 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     820:	84 b1       	in	r24, 0x04	; 4
     822:	87 62       	ori	r24, 0x27	; 39
     824:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     826:	ec ed       	ldi	r30, 0xDC	; 220
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	8c 65       	ori	r24, 0x5C	; 92
     82e:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     830:	85 b1       	in	r24, 0x05	; 5
     832:	89 7d       	andi	r24, 0xD9	; 217
     834:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     836:	ed ed       	ldi	r30, 0xDD	; 221
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	83 7f       	andi	r24, 0xF3	; 243
     83e:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     840:	80 e5       	ldi	r24, 0x50	; 80
     842:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     844:	80 81       	ld	r24, Z
     846:	87 7f       	andi	r24, 0xF7	; 247
     848:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     84a:	80 81       	ld	r24, Z
     84c:	87 7f       	andi	r24, 0xF7	; 247
     84e:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     850:	80 81       	ld	r24, Z
     852:	88 60       	ori	r24, 0x08	; 8
     854:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     856:	80 81       	ld	r24, Z
     858:	8f 7e       	andi	r24, 0xEF	; 239
     85a:	80 83       	st	Z, r24
	
}
     85c:	08 95       	ret

0000085e <update_spi>:

void update_spi(void) {
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
	
			SPI_PORT |= SPI_SW_LATCH;
     866:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE
			SPDR =
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     868:	c0 91 0e 02 	lds	r28, 0x020E
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     86c:	40 91 0e 02 	lds	r20, 0x020E
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     870:	00 91 0e 02 	lds	r16, 0x020E
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     874:	80 91 0e 02 	lds	r24, 0x020E
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     878:	a0 91 0e 02 	lds	r26, 0x020E
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     87c:	60 91 0e 02 	lds	r22, 0x020E
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     880:	20 91 0e 02 	lds	r18, 0x020E
			ISW8_SW_ON << ISW8_LED;
     884:	90 91 13 02 	lds	r25, 0x0213
     888:	97 95       	ror	r25
     88a:	99 27       	eor	r25, r25
     88c:	97 95       	ror	r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     88e:	81 70       	andi	r24, 0x01	; 1
     890:	98 2b       	or	r25, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     892:	cc 1f       	adc	r28, r28
     894:	cc 27       	eor	r28, r28
     896:	cc 1f       	adc	r28, r28
     898:	cc 0f       	add	r28, r28
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     89a:	c9 2b       	or	r28, r25
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     89c:	46 95       	lsr	r20
     89e:	46 95       	lsr	r20
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	41 70       	andi	r20, 0x01	; 1
     8a4:	50 70       	andi	r21, 0x00	; 0
     8a6:	ca 01       	movw	r24, r20
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     8b0:	8c 2b       	or	r24, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     8b2:	06 95       	lsr	r16
     8b4:	10 e0       	ldi	r17, 0x00	; 0
     8b6:	01 70       	andi	r16, 0x01	; 1
     8b8:	10 70       	andi	r17, 0x00	; 0
     8ba:	e8 01       	movw	r28, r16
     8bc:	cc 0f       	add	r28, r28
     8be:	dd 1f       	adc	r29, r29
     8c0:	cc 0f       	add	r28, r28
     8c2:	dd 1f       	adc	r29, r29
     8c4:	cc 0f       	add	r28, r28
     8c6:	dd 1f       	adc	r29, r29
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     8c8:	c8 2b       	or	r28, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     8ca:	a2 95       	swap	r26
     8cc:	af 70       	andi	r26, 0x0F	; 15
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	a1 70       	andi	r26, 0x01	; 1
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	fd 01       	movw	r30, r26
     8d6:	e2 95       	swap	r30
     8d8:	f2 95       	swap	r31
     8da:	f0 7f       	andi	r31, 0xF0	; 240
     8dc:	fe 27       	eor	r31, r30
     8de:	e0 7f       	andi	r30, 0xF0	; 240
     8e0:	fe 27       	eor	r31, r30
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     8e2:	ec 2b       	or	r30, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     8e4:	62 95       	swap	r22
     8e6:	66 95       	lsr	r22
     8e8:	67 70       	andi	r22, 0x07	; 7
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	61 70       	andi	r22, 0x01	; 1
     8ee:	70 70       	andi	r23, 0x00	; 0
     8f0:	ab 01       	movw	r20, r22
     8f2:	44 0f       	add	r20, r20
     8f4:	55 1f       	adc	r21, r21
     8f6:	42 95       	swap	r20
     8f8:	52 95       	swap	r21
     8fa:	50 7f       	andi	r21, 0xF0	; 240
     8fc:	54 27       	eor	r21, r20
     8fe:	40 7f       	andi	r20, 0xF0	; 240
     900:	54 27       	eor	r21, r20
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     902:	4e 2b       	or	r20, r30
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     904:	22 95       	swap	r18
     906:	26 95       	lsr	r18
     908:	26 95       	lsr	r18
     90a:	23 70       	andi	r18, 0x03	; 3
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	21 70       	andi	r18, 0x01	; 1
     910:	30 70       	andi	r19, 0x00	; 0
     912:	c9 01       	movw	r24, r18
     914:	00 24       	eor	r0, r0
     916:	96 95       	lsr	r25
     918:	87 95       	ror	r24
     91a:	07 94       	ror	r0
     91c:	96 95       	lsr	r25
     91e:	87 95       	ror	r24
     920:	07 94       	ror	r0
     922:	98 2f       	mov	r25, r24
     924:	80 2d       	mov	r24, r0
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     926:	84 2b       	or	r24, r20
     928:	8e bd       	out	0x2e, r24	; 46
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
			ISW8_SW_ON << ISW8_LED;
			
			while (!(SPSR & (1<<SPIF)));
     92a:	0d b4       	in	r0, 0x2d	; 45
     92c:	07 fe       	sbrs	r0, 7
     92e:	fd cf       	rjmp	.-6      	; 0x92a <update_spi+0xcc>
			
			//Now read SPDR for switch data shifted in from 74XX165 U14
			spi_sw_current_state = SPDR;
     930:	8e b5       	in	r24, 0x2e	; 46
     932:	80 93 10 02 	sts	0x0210, r24
			
			spi_sw_current_state ^= spi_sw_previous_state;
     936:	80 91 10 02 	lds	r24, 0x0210
     93a:	90 91 0f 02 	lds	r25, 0x020F
     93e:	89 27       	eor	r24, r25
     940:	80 93 10 02 	sts	0x0210, r24
			spi_sw_previous_state ^= spi_sw_current_state;
     944:	80 91 0f 02 	lds	r24, 0x020F
     948:	90 91 10 02 	lds	r25, 0x0210
     94c:	89 27       	eor	r24, r25
     94e:	80 93 0f 02 	sts	0x020F, r24
			spi_sw_current_state &= spi_sw_previous_state;
     952:	80 91 10 02 	lds	r24, 0x0210
     956:	90 91 0f 02 	lds	r25, 0x020F
     95a:	89 23       	and	r24, r25
     95c:	80 93 10 02 	sts	0x0210, r24
			
			//toggle switch state		
			sw_latch_five ^= spi_sw_current_state; //Omar's solution.
     960:	80 91 0e 02 	lds	r24, 0x020E
     964:	90 91 10 02 	lds	r25, 0x0210
     968:	89 27       	eor	r24, r25
     96a:	80 93 0e 02 	sts	0x020E, r24
			
			//SHIFT 4th BYTE
			SPDR = 0; //no LEDs connected in current test set up
     96e:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     970:	0d b4       	in	r0, 0x2d	; 45
     972:	07 fe       	sbrs	r0, 7
     974:	fd cf       	rjmp	.-6      	; 0x970 <update_spi+0x112>
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			sw_latch_four = SPDR;
     976:	8e b5       	in	r24, 0x2e	; 46
     978:	80 93 0d 02 	sts	0x020D, r24
			//toggling not implemented here yet.
			ISW12_SW_ON = (sw_latch_four >> ISW12_SW) & 1;
     97c:	80 91 0d 02 	lds	r24, 0x020D
     980:	82 95       	swap	r24
     982:	86 95       	lsr	r24
     984:	87 70       	andi	r24, 0x07	; 7
     986:	81 70       	andi	r24, 0x01	; 1
     988:	80 93 16 02 	sts	0x0216, r24
			//check if ISW13_SW bit is set
			ISW13_SW_ON = (sw_latch_four >> ISW13_SW) & 1;
     98c:	80 91 0d 02 	lds	r24, 0x020D
     990:	82 95       	swap	r24
     992:	86 95       	lsr	r24
     994:	86 95       	lsr	r24
     996:	83 70       	andi	r24, 0x03	; 3
     998:	81 70       	andi	r24, 0x01	; 1
     99a:	80 93 15 02 	sts	0x0215, r24

			
			//SHIFT 3th BYTE
			SPDR = 0;
     99e:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     9a0:	0d b4       	in	r0, 0x2d	; 45
     9a2:	07 fe       	sbrs	r0, 7
     9a4:	fd cf       	rjmp	.-6      	; 0x9a0 <update_spi+0x142>

			//SHIFT 2th BYTE
			SPDR = 0;
     9a6:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     9a8:	0d b4       	in	r0, 0x2d	; 45
     9aa:	07 fe       	sbrs	r0, 7
     9ac:	fd cf       	rjmp	.-6      	; 0x9a8 <update_spi+0x14a>
			
			//SHIFT 1st BYTE
			
			SPDR = (ISW12_SW_ON << ISW12_LED) | (ISW11_SW_ON << ISW11_LED) | (ISW9_SW_ON << ISW9_LED); 
     9ae:	20 91 16 02 	lds	r18, 0x0216
     9b2:	80 91 17 02 	lds	r24, 0x0217
     9b6:	90 91 18 02 	lds	r25, 0x0218
     9ba:	22 0f       	add	r18, r18
     9bc:	22 0f       	add	r18, r18
     9be:	87 95       	ror	r24
     9c0:	88 27       	eor	r24, r24
     9c2:	87 95       	ror	r24
     9c4:	82 2b       	or	r24, r18
     9c6:	89 2b       	or	r24, r25
     9c8:	8e bd       	out	0x2e, r24	; 46
			//Wait for SPI shift to complete
			while (!(SPSR & (1<<SPIF)));
     9ca:	0d b4       	in	r0, 0x2d	; 45
     9cc:	07 fe       	sbrs	r0, 7
     9ce:	fd cf       	rjmp	.-6      	; 0x9ca <update_spi+0x16c>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     9d0:	ed ed       	ldi	r30, 0xDD	; 221
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	87 7f       	andi	r24, 0xF7	; 247
     9d8:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     9da:	80 81       	ld	r24, Z
     9dc:	88 60       	ori	r24, 0x08	; 8
     9de:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     9e0:	2d 98       	cbi	0x05, 5	; 5
			
			//now read switches directly connected to MCU
			//this toggle code works, but I haven't figured out how it works
			//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
			current_sw_state = SWITCH_PORT;
     9e2:	8f b1       	in	r24, 0x0f	; 15
     9e4:	80 93 11 02 	sts	0x0211, r24
			current_sw_state ^= previous_sw_state;
     9e8:	80 91 11 02 	lds	r24, 0x0211
     9ec:	90 91 12 02 	lds	r25, 0x0212
     9f0:	89 27       	eor	r24, r25
     9f2:	80 93 11 02 	sts	0x0211, r24
			previous_sw_state ^= current_sw_state;
     9f6:	80 91 12 02 	lds	r24, 0x0212
     9fa:	90 91 11 02 	lds	r25, 0x0211
     9fe:	89 27       	eor	r24, r25
     a00:	80 93 12 02 	sts	0x0212, r24
			current_sw_state &= previous_sw_state;
     a04:	80 91 11 02 	lds	r24, 0x0211
     a08:	90 91 12 02 	lds	r25, 0x0212
     a0c:	89 23       	and	r24, r25
     a0e:	80 93 11 02 	sts	0x0211, r24
			
			if (current_sw_state & (1<<ISW8_SW))
     a12:	80 91 11 02 	lds	r24, 0x0211
     a16:	82 ff       	sbrs	r24, 2
     a18:	06 c0       	rjmp	.+12     	; 0xa26 <update_spi+0x1c8>
			{
				ISW8_SW_ON ^= 1 << 0; //toggle switch state
     a1a:	90 91 13 02 	lds	r25, 0x0213
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	89 27       	eor	r24, r25
     a22:	80 93 13 02 	sts	0x0213, r24
			}
			
			if (current_sw_state & (1<<ISW11_SW)) {
     a26:	80 91 11 02 	lds	r24, 0x0211
     a2a:	84 ff       	sbrs	r24, 4
     a2c:	06 c0       	rjmp	.+12     	; 0xa3a <update_spi+0x1dc>
				
				ISW11_SW_ON ^= 1 << 0; //toggle switch state
     a2e:	90 91 17 02 	lds	r25, 0x0217
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	89 27       	eor	r24, r25
     a36:	80 93 17 02 	sts	0x0217, r24
			}
			
			if (current_sw_state & (1<<ISW9_SW)) {
     a3a:	80 91 11 02 	lds	r24, 0x0211
     a3e:	83 ff       	sbrs	r24, 3
     a40:	06 c0       	rjmp	.+12     	; 0xa4e <update_spi+0x1f0>
				
				ISW9_SW_ON ^= 1 << 0; //toggle switch state
     a42:	90 91 18 02 	lds	r25, 0x0218
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	89 27       	eor	r24, r25
     a4a:	80 93 18 02 	sts	0x0218, r24
			}
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     a4e:	ed ed       	ldi	r30, 0xDD	; 221
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	8f 7b       	andi	r24, 0xBF	; 191
     a56:	80 83       	st	Z, r24
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
     a58:	40 91 0e 02 	lds	r20, 0x020E
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     a5c:	30 91 0e 02 	lds	r19, 0x020E
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
     a60:	c0 91 0e 02 	lds	r28, 0x020E
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
     a64:	00 91 0e 02 	lds	r16, 0x020E
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
     a68:	60 91 0e 02 	lds	r22, 0x020E
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
     a6c:	a0 91 0e 02 	lds	r26, 0x020E
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
     a70:	20 91 0e 02 	lds	r18, 0x020E
			ISW8_SW_ON << BMOD;
     a74:	80 91 13 02 	lds	r24, 0x0213
     a78:	82 95       	swap	r24
     a7a:	80 7f       	andi	r24, 0xF0	; 240
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     a7c:	36 95       	lsr	r19
     a7e:	36 95       	lsr	r19
     a80:	31 70       	andi	r19, 0x01	; 1
     a82:	38 2b       	or	r19, r24
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
     a84:	10 e0       	ldi	r17, 0x00	; 0
     a86:	01 70       	andi	r16, 0x01	; 1
     a88:	10 70       	andi	r17, 0x00	; 0
     a8a:	c8 01       	movw	r24, r16
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     a90:	83 2b       	or	r24, r19
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
     a92:	a2 95       	swap	r26
     a94:	a6 95       	lsr	r26
     a96:	a7 70       	andi	r26, 0x07	; 7
     a98:	a7 95       	ror	r26
     a9a:	aa 27       	eor	r26, r26
     a9c:	a7 95       	ror	r26
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     a9e:	8a 2b       	or	r24, r26
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
     aa0:	44 1f       	adc	r20, r20
     aa2:	44 27       	eor	r20, r20
     aa4:	44 1f       	adc	r20, r20
     aa6:	44 0f       	add	r20, r20
     aa8:	44 0f       	add	r20, r20
     aaa:	44 0f       	add	r20, r20
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     aac:	48 2b       	or	r20, r24
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
     aae:	c6 95       	lsr	r28
     ab0:	d0 e0       	ldi	r29, 0x00	; 0
     ab2:	c1 70       	andi	r28, 0x01	; 1
     ab4:	d0 70       	andi	r29, 0x00	; 0
     ab6:	de 01       	movw	r26, r28
     ab8:	aa 0f       	add	r26, r26
     aba:	bb 1f       	adc	r27, r27
     abc:	aa 0f       	add	r26, r26
     abe:	bb 1f       	adc	r27, r27
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     ac0:	a4 2b       	or	r26, r20
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
     ac2:	62 95       	swap	r22
     ac4:	6f 70       	andi	r22, 0x0F	; 15
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	61 70       	andi	r22, 0x01	; 1
     aca:	70 70       	andi	r23, 0x00	; 0
     acc:	ab 01       	movw	r20, r22
     ace:	00 24       	eor	r0, r0
     ad0:	56 95       	lsr	r21
     ad2:	47 95       	ror	r20
     ad4:	07 94       	ror	r0
     ad6:	56 95       	lsr	r21
     ad8:	47 95       	ror	r20
     ada:	07 94       	ror	r0
     adc:	54 2f       	mov	r21, r20
     ade:	40 2d       	mov	r20, r0
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     ae0:	4a 2b       	or	r20, r26
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
     ae2:	22 95       	swap	r18
     ae4:	26 95       	lsr	r18
     ae6:	26 95       	lsr	r18
     ae8:	23 70       	andi	r18, 0x03	; 3
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	21 70       	andi	r18, 0x01	; 1
     aee:	30 70       	andi	r19, 0x00	; 0
     af0:	c9 01       	movw	r24, r18
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	82 95       	swap	r24
     af8:	92 95       	swap	r25
     afa:	90 7f       	andi	r25, 0xF0	; 240
     afc:	98 27       	eor	r25, r24
     afe:	80 7f       	andi	r24, 0xF0	; 240
     b00:	98 27       	eor	r25, r24
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     b02:	84 2b       	or	r24, r20
     b04:	82 b9       	out	0x02, r24	; 2
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
			ISW8_SW_ON << BMOD;
			VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     b06:	80 81       	ld	r24, Z
     b08:	80 64       	ori	r24, 0x40	; 64
     b0a:	80 83       	st	Z, r24
     b0c:	00 00       	nop
			_delay_us(1); //why is this delay here????
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     b0e:	80 81       	ld	r24, Z
     b10:	8f 7b       	andi	r24, 0xBF	; 191
     b12:	80 83       	st	Z, r24
			DATA_BUS = 0;
     b14:	12 b8       	out	0x02, r1	; 2
			
			//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
			//need to make sure this doesn't interfere with anything else on this port
			EG2_POL_PORT ^= (-ISW9_SW_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     b16:	90 81       	ld	r25, Z
     b18:	80 91 18 02 	lds	r24, 0x0218
     b1c:	20 81       	ld	r18, Z
     b1e:	81 95       	neg	r24
     b20:	82 27       	eor	r24, r18
     b22:	80 71       	andi	r24, 0x10	; 16
     b24:	89 27       	eor	r24, r25
     b26:	80 83       	st	Z, r24
			
			if (ISW11_SW_ON) { //temporary tune button hack
     b28:	80 91 17 02 	lds	r24, 0x0217
     b2c:	88 23       	and	r24, r24
     b2e:	09 f4       	brne	.+2      	; 0xb32 <update_spi+0x2d4>
     b30:	62 c0       	rjmp	.+196    	; 0xbf6 <update_spi+0x398>
				
				ISW11_SW_ON ^= 1<<0; //toggle switch state
     b32:	90 91 17 02 	lds	r25, 0x0217
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	89 27       	eor	r24, r25
     b3a:	80 93 17 02 	sts	0x0217, r24
				current_sw_state ^= (1<<ISW11_SW); //toggle read switch state
     b3e:	90 91 11 02 	lds	r25, 0x0211
     b42:	80 e1       	ldi	r24, 0x10	; 16
     b44:	89 27       	eor	r24, r25
     b46:	80 93 11 02 	sts	0x0211, r24
				//update_spi();
				vco1_init_cv = set_vco_init_cv(VCO1);
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 00 06 	call	0xc00	; 0xc00 <set_vco_init_cv>
     b50:	90 93 1c 04 	sts	0x041C, r25
     b54:	80 93 1b 04 	sts	0x041B, r24
				vco2_init_cv = set_vco_init_cv(VCO2);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	0e 94 00 06 	call	0xc00	; 0xc00 <set_vco_init_cv>
     b5e:	90 93 1a 04 	sts	0x041A, r25
     b62:	80 93 19 04 	sts	0x0419, r24
				//vco1_pitch_table[11] = 1638; //need initial value here for 7 bit additive tuning algorithm to work. Once Octave 0 is tuned, this won't be necessray as C0/MIDI note 0 is 0V
				//vco2_pitch_table[11] = 1638;
				tune_octave(1, VCO1);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(1, VCO2);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(2, VCO1);
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(2, VCO2);
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(3, VCO1);
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(3, VCO2);
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(4, VCO1);
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(4, VCO2);
     b9e:	84 e0       	ldi	r24, 0x04	; 4
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(5, VCO1);
     ba6:	85 e0       	ldi	r24, 0x05	; 5
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(5, VCO2);
     bae:	85 e0       	ldi	r24, 0x05	; 5
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(6, VCO1);
     bb6:	86 e0       	ldi	r24, 0x06	; 6
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(6, VCO2);
     bbe:	86 e0       	ldi	r24, 0x06	; 6
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(7, VCO1);
     bc6:	87 e0       	ldi	r24, 0x07	; 7
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(7, VCO2);
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(8, VCO1);
     bd6:	88 e0       	ldi	r24, 0x08	; 8
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(8, VCO2);
     bde:	88 e0       	ldi	r24, 0x08	; 8
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(9, VCO1);
     be6:	89 e0       	ldi	r24, 0x09	; 9
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
				tune_octave(9, VCO2);
     bee:	89 e0       	ldi	r24, 0x09	; 9
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	0e 94 a9 07 	call	0xf52	; 0xf52 <tune_octave>
					//
				//}
				
			}
	
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <set_vco_init_cv>:
volatile uint16_t vco2_init_cv = 0;

uint16_t vco1_pitch_table[128] = {0};
uint16_t vco2_pitch_table[128] = {0};
	
uint16_t set_vco_init_cv(uint8_t vco) {
     c00:	2f 92       	push	r2
     c02:	3f 92       	push	r3
     c04:	4f 92       	push	r4
     c06:	5f 92       	push	r5
     c08:	6f 92       	push	r6
     c0a:	7f 92       	push	r7
     c0c:	8f 92       	push	r8
     c0e:	9f 92       	push	r9
     c10:	af 92       	push	r10
     c12:	bf 92       	push	r11
     c14:	cf 92       	push	r12
     c16:	df 92       	push	r13
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	28 97       	sbiw	r28, 0x08	; 8
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	08 2f       	mov	r16, r24

	uint16_t init_cv = 0;
	 timer1_clock |= (1<<CS11) | (1<<CS10);
     c36:	80 91 21 04 	lds	r24, 0x0421
     c3a:	83 60       	ori	r24, 0x03	; 3
     c3c:	80 93 21 04 	sts	0x0421, r24
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     c40:	80 e3       	ldi	r24, 0x30	; 48
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     c4c:	82 e4       	ldi	r24, 0x42	; 66
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     c58:	84 e4       	ldi	r24, 0x44	; 68
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     c64:	8e eb       	ldi	r24, 0xBE	; 190
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     c70:	84 e3       	ldi	r24, 0x34	; 52
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     c7c:	8e e3       	ldi	r24, 0x3E	; 62
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     c88:	80 e4       	ldi	r24, 0x40	; 64
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     c94:	82 e2       	ldi	r24, 0x22	; 34
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     ca0:	8c e2       	ldi	r24, 0x2C	; 44
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     cac:	84 e2       	ldi	r24, 0x24	; 36
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     cb8:	86 e2       	ldi	r24, 0x26	; 38
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     cc4:	88 e2       	ldi	r24, 0x28	; 40
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	6f ef       	ldi	r22, 0xFF	; 255
     cca:	7f e3       	ldi	r23, 0x3F	; 63
     ccc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     cd0:	8a e2       	ldi	r24, 0x2A	; 42
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     cdc:	82 e3       	ldi	r24, 0x32	; 50
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     ce8:	8c e1       	ldi	r24, 0x1C	; 28
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     cf4:	88 e1       	ldi	r24, 0x18	; 24
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     d00:	84 e1       	ldi	r24, 0x14	; 20
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	6f ef       	ldi	r22, 0xFF	; 255
     d06:	7f e3       	ldi	r23, 0x3F	; 63
     d08:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     d0c:	80 e1       	ldi	r24, 0x10	; 16
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     d18:	80 e2       	ldi	r24, 0x20	; 32
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
     d24:	10 92 20 04 	sts	0x0420, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
     d28:	00 23       	and	r16, r16
     d2a:	c1 f4       	brne	.+48     	; 0xd5c <set_vco_init_cv+0x15c>
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     d2c:	0f 2e       	mov	r0, r31
     d2e:	fc e4       	ldi	r31, 0x4C	; 76
     d30:	4f 2e       	mov	r4, r31
     d32:	f1 e0       	ldi	r31, 0x01	; 1
     d34:	5f 2e       	mov	r5, r31
     d36:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     d38:	0f 2e       	mov	r0, r31
     d3a:	fc e3       	ldi	r31, 0x3C	; 60
     d3c:	2f 2e       	mov	r2, r31
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	3f 2e       	mov	r3, r31
     d42:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     d44:	26 e4       	ldi	r18, 0x46	; 70
     d46:	31 e0       	ldi	r19, 0x01	; 1
     d48:	3a 83       	std	Y+2, r19	; 0x02
     d4a:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     d4c:	0f 2e       	mov	r0, r31
     d4e:	f8 e3       	ldi	r31, 0x38	; 56
     d50:	6f 2e       	mov	r6, r31
     d52:	f1 e0       	ldi	r31, 0x01	; 1
     d54:	7f 2e       	mov	r7, r31
     d56:	f0 2d       	mov	r31, r0

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_SAW);
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	17 c0       	rjmp	.+46     	; 0xd8a <set_vco_init_cv+0x18a>
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     d5c:	0f 2e       	mov	r0, r31
     d5e:	fa e4       	ldi	r31, 0x4A	; 74
     d60:	4f 2e       	mov	r4, r31
     d62:	f1 e0       	ldi	r31, 0x01	; 1
     d64:	5f 2e       	mov	r5, r31
     d66:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     d68:	0f 2e       	mov	r0, r31
     d6a:	fe e2       	ldi	r31, 0x2E	; 46
     d6c:	2f 2e       	mov	r2, r31
     d6e:	f1 e0       	ldi	r31, 0x01	; 1
     d70:	3f 2e       	mov	r3, r31
     d72:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     d74:	88 e4       	ldi	r24, 0x48	; 72
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	9a 83       	std	Y+2, r25	; 0x02
     d7a:	89 83       	std	Y+1, r24	; 0x01
		reference_count = 19111;//38222; //MIDI note C0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     d7c:	0f 2e       	mov	r0, r31
     d7e:	fa e3       	ldi	r31, 0x3A	; 58
     d80:	6f 2e       	mov	r6, r31
     d82:	f1 e0       	ldi	r31, 0x01	; 1
     d84:	7f 2e       	mov	r7, r31
     d86:	f0 2d       	mov	r31, r0
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = 19111;//38222; //MIDI note C0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_SAW);
     d88:	80 e4       	ldi	r24, 0x40	; 64
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = 19111;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
     d8a:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     d8c:	ed ed       	ldi	r30, 0xDD	; 221
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	80 64       	ori	r24, 0x40	; 64
     d94:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     d96:	80 81       	ld	r24, Z
     d98:	8f 7b       	andi	r24, 0xBF	; 191
     d9a:	80 83       	st	Z, r24
	DATA_BUS = 0;
     d9c:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
     d9e:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
     da0:	84 b5       	in	r24, 0x24	; 36
     da2:	8f 60       	ori	r24, 0x0F	; 15
     da4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
     daa:	ee e6       	ldi	r30, 0x6E	; 110
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	90 81       	ld	r25, Z
     db0:	92 60       	ori	r25, 0x02	; 2
     db2:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
     db4:	80 93 22 04 	sts	0x0422, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     db8:	ed e0       	ldi	r30, 0x0D	; 13
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	fc 83       	std	Y+4, r31	; 0x04
     dbe:	eb 83       	std	Y+3, r30	; 0x03
uint16_t vco1_pitch_table[128] = {0};
uint16_t vco2_pitch_table[128] = {0};
	
uint16_t set_vco_init_cv(uint8_t vco) {

	uint16_t init_cv = 0;
     dc0:	18 86       	std	Y+8, r1	; 0x08
     dc2:	1f 82       	std	Y+7, r1	; 0x07
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
     dc4:	80 2f       	mov	r24, r16
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	8c 01       	movw	r16, r24
     dca:	0f 5f       	subi	r16, 0xFF	; 255
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
     dce:	0f 2e       	mov	r0, r31
     dd0:	f0 e3       	ldi	r31, 0x30	; 48
     dd2:	ef 2e       	mov	r14, r31
     dd4:	f1 e0       	ldi	r31, 0x01	; 1
     dd6:	ff 2e       	mov	r15, r31
     dd8:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
     dda:	0f 2e       	mov	r0, r31
     ddc:	f8 e2       	ldi	r31, 0x28	; 40
     dde:	cf 2e       	mov	r12, r31
     de0:	f1 e0       	ldi	r31, 0x01	; 1
     de2:	df 2e       	mov	r13, r31
     de4:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
     de6:	0f 2e       	mov	r0, r31
     de8:	f4 e1       	ldi	r31, 0x14	; 20
     dea:	af 2e       	mov	r10, r31
     dec:	f1 e0       	ldi	r31, 0x01	; 1
     dee:	bf 2e       	mov	r11, r31
     df0:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     df2:	0f 2e       	mov	r0, r31
     df4:	f6 e1       	ldi	r31, 0x16	; 22
     df6:	8f 2e       	mov	r8, r31
     df8:	f1 e0       	ldi	r31, 0x01	; 1
     dfa:	9f 2e       	mov	r9, r31
     dfc:	f0 2d       	mov	r31, r0
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
     dfe:	21 e0       	ldi	r18, 0x01	; 1
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	0b 80       	ldd	r0, Y+3	; 0x03
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <set_vco_init_cv+0x20a>
     e06:	22 0f       	add	r18, r18
     e08:	33 1f       	adc	r19, r19
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <set_vco_init_cv+0x206>
     e0e:	3e 83       	std	Y+6, r19	; 0x06
     e10:	2d 83       	std	Y+5, r18	; 0x05
     e12:	8f 81       	ldd	r24, Y+7	; 0x07
     e14:	98 85       	ldd	r25, Y+8	; 0x08
     e16:	82 2b       	or	r24, r18
     e18:	93 2b       	or	r25, r19
     e1a:	98 87       	std	Y+8, r25	; 0x08
     e1c:	8f 83       	std	Y+7, r24	; 0x07
		
		set_control_voltage(vco_init_cv, init_cv);
     e1e:	c3 01       	movw	r24, r6
     e20:	6f 81       	ldd	r22, Y+7	; 0x07
     e22:	78 85       	ldd	r23, Y+8	; 0x08
     e24:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
		
		
		count_finished = FALSE;
     e28:	10 92 20 04 	sts	0x0420, r1
		period_counter = 0;
     e2c:	10 92 23 04 	sts	0x0423, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     e30:	80 91 20 04 	lds	r24, 0x0420
     e34:	88 23       	and	r24, r24
     e36:	89 f5       	brne	.+98     	; 0xe9a <set_vco_init_cv+0x29a>
			
			update_display(vco + 1, DEC);
     e38:	c8 01       	movw	r24, r16
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	0e 94 b2 01 	call	0x364	; 0x364 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
     e40:	c3 01       	movw	r24, r6
     e42:	6f 81       	ldd	r22, Y+7	; 0x07
     e44:	78 85       	ldd	r23, Y+8	; 0x08
     e46:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
     e4a:	c1 01       	movw	r24, r2
     e4c:	6f ef       	ldi	r22, 0xFF	; 255
     e4e:	7f e3       	ldi	r23, 0x3F	; 63
     e50:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
     e54:	c7 01       	movw	r24, r14
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
     e5e:	c6 01       	movw	r24, r12
     e60:	6f ef       	ldi	r22, 0xFF	; 255
     e62:	7f e3       	ldi	r23, 0x3F	; 63
     e64:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
     e68:	c5 01       	movw	r24, r10
     e6a:	6f ef       	ldi	r22, 0xFF	; 255
     e6c:	7f e3       	ldi	r23, 0x3F	; 63
     e6e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     e72:	c4 01       	movw	r24, r8
     e74:	6f ef       	ldi	r22, 0xFF	; 255
     e76:	7f e3       	ldi	r23, 0x3F	; 63
     e78:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	6f ef       	ldi	r22, 0xFF	; 255
     e82:	7f e3       	ldi	r23, 0x3F	; 63
     e84:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
     e88:	c2 01       	movw	r24, r4
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
		
		count_finished = FALSE;
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     e92:	80 91 20 04 	lds	r24, 0x0420
     e96:	88 23       	and	r24, r24
     e98:	79 f2       	breq	.-98     	; 0xe38 <set_vco_init_cv+0x238>
			set_control_voltage(vco_pitch_cv, 0);	
			
		}
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE not AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
     e9a:	80 91 1e 04 	lds	r24, 0x041E
     e9e:	90 91 1f 04 	lds	r25, 0x041F
     ea2:	ea e4       	ldi	r30, 0x4A	; 74
     ea4:	88 3a       	cpi	r24, 0xA8	; 168
     ea6:	9e 07       	cpc	r25, r30
     ea8:	20 f4       	brcc	.+8      	; 0xeb2 <set_vco_init_cv+0x2b2>
     eaa:	80 91 ba 01 	lds	r24, 0x01BA
     eae:	88 23       	and	r24, r24
     eb0:	51 f4       	brne	.+20     	; 0xec6 <set_vco_init_cv+0x2c6>
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	80 95       	com	r24
     eb8:	90 95       	com	r25
     eba:	2f 81       	ldd	r18, Y+7	; 0x07
     ebc:	38 85       	ldd	r19, Y+8	; 0x08
     ebe:	28 23       	and	r18, r24
     ec0:	39 23       	and	r19, r25
     ec2:	38 87       	std	Y+8, r19	; 0x08
     ec4:	2f 83       	std	Y+7, r18	; 0x07
		no_overflow = TRUE;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	80 93 ba 01 	sts	0x01BA, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	9c 81       	ldd	r25, Y+4	; 0x04
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	9c 83       	std	Y+4, r25	; 0x04
     ed4:	8b 83       	std	Y+3, r24	; 0x03
     ed6:	ef ef       	ldi	r30, 0xFF	; 255
     ed8:	8f 3f       	cpi	r24, 0xFF	; 255
     eda:	9e 07       	cpc	r25, r30
     edc:	09 f0       	breq	.+2      	; 0xee0 <set_vco_init_cv+0x2e0>
     ede:	8f cf       	rjmp	.-226    	; 0xdfe <set_vco_init_cv+0x1fe>
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
     ee0:	80 e1       	ldi	r24, 0x10	; 16
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
     eec:	82 e1       	ldi	r24, 0x12	; 18
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
     ef8:	88 e2       	ldi	r24, 0x28	; 40
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
     f04:	80 e3       	ldi	r24, 0x30	; 48
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
     f10:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
     f12:	ee e6       	ldi	r30, 0x6E	; 110
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8d 7f       	andi	r24, 0xFD	; 253
     f1a:	80 83       	st	Z, r24
	
	return init_cv;
	
}
     f1c:	8f 81       	ldd	r24, Y+7	; 0x07
     f1e:	98 85       	ldd	r25, Y+8	; 0x08
     f20:	28 96       	adiw	r28, 0x08	; 8
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	9f 90       	pop	r9
     f42:	8f 90       	pop	r8
     f44:	7f 90       	pop	r7
     f46:	6f 90       	pop	r6
     f48:	5f 90       	pop	r5
     f4a:	4f 90       	pop	r4
     f4c:	3f 90       	pop	r3
     f4e:	2f 90       	pop	r2
     f50:	08 95       	ret

00000f52 <tune_octave>:

void tune_octave(uint8_t octave, uint8_t vco) {
     f52:	2f 92       	push	r2
     f54:	3f 92       	push	r3
     f56:	4f 92       	push	r4
     f58:	5f 92       	push	r5
     f5a:	6f 92       	push	r6
     f5c:	7f 92       	push	r7
     f5e:	8f 92       	push	r8
     f60:	9f 92       	push	r9
     f62:	af 92       	push	r10
     f64:	bf 92       	push	r11
     f66:	cf 92       	push	r12
     f68:	df 92       	push	r13
     f6a:	ef 92       	push	r14
     f6c:	ff 92       	push	r15
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	e6 97       	sbiw	r28, 0x36	; 54
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	f8 2e       	mov	r15, r24
     f88:	06 2f       	mov	r16, r22

	uint16_t pitch_reference[12] = { //holds the 16 bit timer counts for each note within an octave independent of octave # being tuned
     f8a:	de 01       	movw	r26, r28
     f8c:	11 96       	adiw	r26, 0x01	; 1
     f8e:	e8 e9       	ldi	r30, 0x98	; 152
     f90:	f1 e0       	ldi	r31, 0x01	; 1
     f92:	88 e1       	ldi	r24, 0x18	; 24
     f94:	01 90       	ld	r0, Z+
     f96:	0d 92       	st	X+, r0
     f98:	81 50       	subi	r24, 0x01	; 1
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <tune_octave+0x42>
	PITCH_Ab,
	PITCH_B
	    
    };
	
	uint8_t period_table[10] = {1, 2, 4, 1, 2, 4, 8, 16, 32, 64}; //the number of  periods that need to be counted for octaves 0-9
     f9c:	de 01       	movw	r26, r28
     f9e:	59 96       	adiw	r26, 0x19	; 25
     fa0:	e0 eb       	ldi	r30, 0xB0	; 176
     fa2:	f1 e0       	ldi	r31, 0x01	; 1
     fa4:	8a e0       	ldi	r24, 0x0A	; 10
     fa6:	01 90       	ld	r0, Z+
     fa8:	0d 92       	st	X+, r0
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <tune_octave+0x54>
	//octaves 0-2 use /64 0.312500 MHz timer/counter1 clock rate
	//octaves 3-9 use /8 2.5 MHz timer/counter1 clock rate
	
	period = period_table[octave]; //set period number to be counted
     fae:	af 2c       	mov	r10, r15
     fb0:	bb 24       	eor	r11, r11
     fb2:	fe 01       	movw	r30, r28
     fb4:	ea 0d       	add	r30, r10
     fb6:	fb 1d       	adc	r31, r11
     fb8:	81 8d       	ldd	r24, Z+25	; 0x19
     fba:	80 93 22 04 	sts	0x0422, r24
	
	//to do:
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     fbe:	80 e3       	ldi	r24, 0x30	; 48
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     fca:	82 e4       	ldi	r24, 0x42	; 66
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     fd6:	84 e4       	ldi	r24, 0x44	; 68
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     fe2:	8e eb       	ldi	r24, 0xBE	; 190
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     fee:	84 e3       	ldi	r24, 0x34	; 52
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     ffa:	8e e3       	ldi	r24, 0x3E	; 62
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1006:	80 e4       	ldi	r24, 0x40	; 64
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1012:	82 e2       	ldi	r24, 0x22	; 34
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    101e:	8c e2       	ldi	r24, 0x2C	; 44
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    102a:	84 e2       	ldi	r24, 0x24	; 36
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1036:	86 e2       	ldi	r24, 0x26	; 38
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1042:	88 e2       	ldi	r24, 0x28	; 40
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	6f ef       	ldi	r22, 0xFF	; 255
    1048:	7f e3       	ldi	r23, 0x3F	; 63
    104a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    104e:	8a e2       	ldi	r24, 0x2A	; 42
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    105a:	82 e3       	ldi	r24, 0x32	; 50
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1066:	8c e1       	ldi	r24, 0x1C	; 28
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1072:	88 e1       	ldi	r24, 0x18	; 24
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    107e:	84 e1       	ldi	r24, 0x14	; 20
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	6f ef       	ldi	r22, 0xFF	; 255
    1084:	7f e3       	ldi	r23, 0x3F	; 63
    1086:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    108a:	80 e1       	ldi	r24, 0x10	; 16
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1096:	80 e2       	ldi	r24, 0x20	; 32
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;	

	if (vco == VCO1) { //set up parameters for VCO1 tuning
    10a2:	00 23       	and	r16, r16
    10a4:	09 f5       	brne	.+66     	; 0x10e8 <tune_octave+0x196>
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
		init_cv = vco1_init_cv;
    10a6:	20 91 1b 04 	lds	r18, 0x041B
    10aa:	30 91 1c 04 	lds	r19, 0x041C
    10ae:	3e a3       	lds	r19, 0x5e
    10b0:	2d a3       	lds	r18, 0x5d
		//turn on VCO1 SAW, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    10b2:	0f 2e       	mov	r0, r31
    10b4:	fc e4       	ldi	r31, 0x4C	; 76
    10b6:	2f 2e       	mov	r2, r31
    10b8:	f1 e0       	ldi	r31, 0x01	; 1
    10ba:	3f 2e       	mov	r3, r31
    10bc:	f0 2d       	mov	r31, r0

		//turn on VCO1 SAW, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    10be:	8c e3       	ldi	r24, 0x3C	; 60
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	9c a7       	lds	r25, 0x7c
    10c4:	8b a7       	lds	r24, 0x7b
	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    10c6:	e6 e4       	ldi	r30, 0x46	; 70
    10c8:	f1 e0       	ldi	r31, 0x01	; 1
    10ca:	fa a7       	lds	r31, 0x7a
    10cc:	e9 a7       	lds	r30, 0x79

	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    10ce:	28 e3       	ldi	r18, 0x38	; 56
    10d0:	31 e0       	ldi	r19, 0x01	; 1
    10d2:	38 a7       	lds	r19, 0x78
    10d4:	2f a3       	lds	r18, 0x5f
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
		init_cv = vco1_init_cv;
		vco_pitch_table = vco1_pitch_table;
    10d6:	09 e1       	ldi	r16, 0x19	; 25
    10d8:	13 e0       	ldi	r17, 0x03	; 3
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
    10da:	0f 2e       	mov	r0, r31
    10dc:	fa e0       	ldi	r31, 0x0A	; 10
    10de:	cf 2e       	mov	r12, r31
    10e0:	f0 2d       	mov	r31, r0
	struct control_voltage *vco_pitch_cv;	

	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte |= (1<<VCO1_SAW);
    10e2:	ee 24       	eor	r14, r14
    10e4:	e3 94       	inc	r14
    10e6:	21 c0       	rjmp	.+66     	; 0x112a <__stack+0x2b>
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
    10e8:	80 91 19 04 	lds	r24, 0x0419
    10ec:	90 91 1a 04 	lds	r25, 0x041A
    10f0:	9e a3       	lds	r25, 0x5e
    10f2:	8d a3       	lds	r24, 0x5d
		//turn on VCO2 SAW, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    10f4:	0f 2e       	mov	r0, r31
    10f6:	fa e4       	ldi	r31, 0x4A	; 74
    10f8:	2f 2e       	mov	r2, r31
    10fa:	f1 e0       	ldi	r31, 0x01	; 1
    10fc:	3f 2e       	mov	r3, r31
    10fe:	f0 2d       	mov	r31, r0
		
		//turn on VCO2 SAW, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1100:	ee e2       	ldi	r30, 0x2E	; 46
    1102:	f1 e0       	ldi	r31, 0x01	; 1
    1104:	fc a7       	lds	r31, 0x7c
    1106:	eb a7       	lds	r30, 0x7b
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1108:	28 e4       	ldi	r18, 0x48	; 72
    110a:	31 e0       	ldi	r19, 0x01	; 1
    110c:	3a a7       	lds	r19, 0x7a
    110e:	29 a7       	lds	r18, 0x79
		
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1110:	8a e3       	ldi	r24, 0x3A	; 58
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	98 a7       	lds	r25, 0x78
    1116:	8f a3       	lds	r24, 0x5f
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
		vco_pitch_table = vco2_pitch_table;
    1118:	09 e1       	ldi	r16, 0x19	; 25
    111a:	12 e0       	ldi	r17, 0x02	; 2
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
    111c:	0f 2e       	mov	r0, r31
    111e:	f4 e1       	ldi	r31, 0x14	; 20
    1120:	cf 2e       	mov	r12, r31
    1122:	f0 2d       	mov	r31, r0
		
		
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte |= (1<<VCO2_SAW);
    1124:	ee 24       	eor	r14, r14
    1126:	68 94       	set
    1128:	e6 f8       	bld	r14, 6
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
		vco_pitch_table = vco2_pitch_table;
	}
	
	if (octave <= 2) {
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	9f 15       	cp	r25, r15
    112e:	20 f0       	brcs	.+8      	; 0x1138 <__stack+0x39>
		
		//set timer/counter1 to /64 0.3125 MHz
		timer1_clock = (1<<CS11) | (1<<CS10);
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	80 93 21 04 	sts	0x0421, r24
    1136:	03 c0       	rjmp	.+6      	; 0x113e <__stack+0x3f>
		
	} else {
		
		//set timer/counter1 to /8 2.5 MHz
		timer1_clock = (1<<CS11);
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	80 93 21 04 	sts	0x0421, r24
		
	}

	//set VCO init offset CV
	set_control_voltage(vco_init_cv, init_cv);
    113e:	8f a1       	lds	r24, 0x4f
    1140:	98 a5       	lds	r25, 0x68
    1142:	6d a1       	lds	r22, 0x4d
    1144:	7e a1       	lds	r23, 0x4e
    1146:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
	
	//latch switch data
	DATA_BUS = switch_byte;
    114a:	e2 b8       	out	0x02, r14	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    114c:	ed ed       	ldi	r30, 0xDD	; 221
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	80 64       	ori	r24, 0x40	; 64
    1154:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1156:	80 81       	ld	r24, Z
    1158:	8f 7b       	andi	r24, 0xBF	; 191
    115a:	80 83       	st	Z, r24
	DATA_BUS = 0;
    115c:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    115e:	89 9a       	sbi	0x11, 1	; 17
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1160:	84 b5       	in	r24, 0x24	; 36
    1162:	8f 60       	ori	r24, 0x0F	; 15
    1164:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    116a:	ee e6       	ldi	r30, 0x6E	; 110
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	82 60       	ori	r24, 0x02	; 2
    1172:	80 83       	st	Z, r24
	compare_match_counter = 0;	
    1174:	10 92 1d 04 	sts	0x041D, r1
    1178:	fe 01       	movw	r30, r28
    117a:	31 96       	adiw	r30, 0x01	; 1
    117c:	fc ab       	sts	0x5c, r31
    117e:	eb ab       	sts	0x5b, r30
	for (int note_number = 0; note_number <= 11; note_number++) 
		{
		
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
    1180:	c5 01       	movw	r24, r10
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	8a 0d       	add	r24, r10
    1188:	9b 1d       	adc	r25, r11
	
	return init_cv;
	
}

void tune_octave(uint8_t octave, uint8_t vco) {
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	02 97       	sbiw	r24, 0x02	; 2
    1198:	98 01       	movw	r18, r16
    119a:	28 0f       	add	r18, r24
    119c:	39 1f       	adc	r19, r25
    119e:	3e ab       	sts	0x5e, r19
    11a0:	2d ab       	sts	0x5d, r18
    11a2:	ce 01       	movw	r24, r28
    11a4:	49 96       	adiw	r24, 0x19	; 25
    11a6:	9c a3       	lds	r25, 0x5c
    11a8:	8b a3       	lds	r24, 0x5b
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    11aa:	ac 0c       	add	r10, r12
    11ac:	b1 1c       	adc	r11, r1
				
				//not sure what's really necessary here - definitely pitch and init_cv, but what else?
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
				set_control_voltage(vco_init_cv, init_cv);
				set_control_voltage(vco_pw_cv, MAX);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    11ae:	0f 2e       	mov	r0, r31
    11b0:	f0 e3       	ldi	r31, 0x30	; 48
    11b2:	8f 2e       	mov	r8, r31
    11b4:	f1 e0       	ldi	r31, 0x01	; 1
    11b6:	9f 2e       	mov	r9, r31
    11b8:	f0 2d       	mov	r31, r0
				set_control_voltage(&cutoff_cv, MAX);
    11ba:	0f 2e       	mov	r0, r31
    11bc:	f8 e2       	ldi	r31, 0x28	; 40
    11be:	6f 2e       	mov	r6, r31
    11c0:	f1 e0       	ldi	r31, 0x01	; 1
    11c2:	7f 2e       	mov	r7, r31
    11c4:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    11c6:	0f 2e       	mov	r0, r31
    11c8:	f4 e1       	ldi	r31, 0x14	; 20
    11ca:	4f 2e       	mov	r4, r31
    11cc:	f1 e0       	ldi	r31, 0x01	; 1
    11ce:	5f 2e       	mov	r5, r31
    11d0:	f0 2d       	mov	r31, r0
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
	compare_match_counter = 0;	
	for (int note_number = 0; note_number <= 11; note_number++) 
		{
		
		uint16_t reference_count = pitch_reference[note_number];
    11d2:	eb a9       	sts	0x4b, r30
    11d4:	fc a9       	sts	0x4c, r31
    11d6:	21 91       	ld	r18, Z+
    11d8:	31 91       	ld	r19, Z+
    11da:	fc ab       	sts	0x5c, r31
    11dc:	eb ab       	sts	0x5b, r30
    11de:	38 ab       	sts	0x58, r19
    11e0:	2f a7       	lds	r18, 0x7f
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
    11e2:	ed a9       	sts	0x4d, r30
    11e4:	fe a9       	sts	0x4e, r31
    11e6:	81 91       	ld	r24, Z+
    11e8:	91 91       	ld	r25, Z+
    11ea:	fe ab       	sts	0x5e, r31
    11ec:	ed ab       	sts	0x5d, r30
    11ee:	8c 01       	movw	r16, r24
    11f0:	08 57       	subi	r16, 0x78	; 120
    11f2:	1f 4f       	sbci	r17, 0xFF	; 255
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
    11f4:	26 e0       	ldi	r18, 0x06	; 6
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	3e a7       	lds	r19, 0x7e
    11fa:	2d a7       	lds	r18, 0x7d
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    11fc:	0f 2e       	mov	r0, r31
    11fe:	f4 e6       	ldi	r31, 0x64	; 100
    1200:	cf 2e       	mov	r12, r31
    1202:	dd 24       	eor	r13, r13
    1204:	f0 2d       	mov	r31, r0
				set_control_voltage(vco_init_cv, init_cv);
				set_control_voltage(vco_pw_cv, MAX);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&cutoff_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1206:	86 e1       	ldi	r24, 0x16	; 22
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	f8 2e       	mov	r15, r24
    120c:	e9 2e       	mov	r14, r25
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
			osc_pitch_cv = (osc_pitch_cv >> dac_bit) << dac_bit; //clear bits to be set. Omar scoffed at this line as if it didn't need to be done. Why?
    120e:	c8 01       	movw	r24, r16
    1210:	0d a4       	lds	r16, 0xad
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <__stack+0x119>
    1214:	96 95       	lsr	r25
    1216:	87 95       	ror	r24
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <__stack+0x115>
    121c:	8c 01       	movw	r16, r24
    121e:	0d a4       	lds	r16, 0xad
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <__stack+0x127>
    1222:	00 0f       	add	r16, r16
    1224:	11 1f       	adc	r17, r17
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <__stack+0x123>
			//oh, maybe because it should just be done once before loop. Doing it for each iteration after bit 7 is redundant
			osc_pitch_cv |= (1<<dac_bit);
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	fc 01       	movw	r30, r24
    1230:	0d a4       	lds	r16, 0xad
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <__stack+0x139>
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <__stack+0x135>
    123c:	fa ab       	sts	0x5a, r31
    123e:	e9 ab       	sts	0x59, r30
    1240:	0e 2b       	or	r16, r30
    1242:	1f 2b       	or	r17, r31

			set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1244:	c1 01       	movw	r24, r2
    1246:	b8 01       	movw	r22, r16
    1248:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
			count_finished = FALSE;
    124c:	10 92 20 04 	sts	0x0420, r1
			period_counter = 0;
    1250:	10 92 23 04 	sts	0x0423, r1
			

			while (count_finished == FALSE) {
    1254:	80 91 20 04 	lds	r24, 0x0420
    1258:	88 23       	and	r24, r24
    125a:	09 f0       	breq	.+2      	; 0x125e <__stack+0x15f>
    125c:	42 c0       	rjmp	.+132    	; 0x12e2 <__stack+0x1e3>
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    125e:	80 91 1d 04 	lds	r24, 0x041D
    1262:	82 95       	swap	r24
    1264:	8f 70       	andi	r24, 0x0F	; 15
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	2c 9d       	mul	r18, r12
    126c:	c0 01       	movw	r24, r0
    126e:	2d 9d       	mul	r18, r13
    1270:	90 0d       	add	r25, r0
    1272:	3c 9d       	mul	r19, r12
    1274:	90 0d       	add	r25, r0
    1276:	11 24       	eor	r1, r1
    1278:	8a 0d       	add	r24, r10
    127a:	9b 1d       	adc	r25, r11
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	0e 94 b2 01 	call	0x364	; 0x364 <update_display>
				//need to have a watchdog timer here to escape while loop if it takes too long
				
				//not sure what's really necessary here - definitely pitch and init_cv, but what else?
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1282:	c1 01       	movw	r24, r2
    1284:	b8 01       	movw	r22, r16
    1286:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
				set_control_voltage(vco_init_cv, init_cv);
    128a:	8f a1       	lds	r24, 0x4f
    128c:	98 a5       	lds	r25, 0x68
    128e:	6d a1       	lds	r22, 0x4d
    1290:	7e a1       	lds	r23, 0x4e
    1292:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
				set_control_voltage(vco_pw_cv, MAX);
    1296:	8b a5       	lds	r24, 0x6b
    1298:	9c a5       	lds	r25, 0x6c
    129a:	6f ef       	ldi	r22, 0xFF	; 255
    129c:	7f e3       	ldi	r23, 0x3F	; 63
    129e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    12a2:	c4 01       	movw	r24, r8
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
				set_control_voltage(&cutoff_cv, MAX);
    12ac:	c3 01       	movw	r24, r6
    12ae:	6f ef       	ldi	r22, 0xFF	; 255
    12b0:	7f e3       	ldi	r23, 0x3F	; 63
    12b2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    12b6:	c2 01       	movw	r24, r4
    12b8:	6f ef       	ldi	r22, 0xFF	; 255
    12ba:	7f e3       	ldi	r23, 0x3F	; 63
    12bc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
				set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    12c0:	8f 2d       	mov	r24, r15
    12c2:	9e 2d       	mov	r25, r14
    12c4:	6f ef       	ldi	r22, 0xFF	; 255
    12c6:	7f e3       	ldi	r23, 0x3F	; 63
    12c8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
				set_control_voltage(vco_mix_cv, MAX);
    12cc:	89 a5       	lds	r24, 0x69
    12ce:	9a a5       	lds	r25, 0x6a
    12d0:	6f ef       	ldi	r22, 0xFF	; 255
    12d2:	7f e3       	ldi	r23, 0x3F	; 63
    12d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, osc_pitch_cv);
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
    12d8:	80 91 20 04 	lds	r24, 0x0420
    12dc:	88 23       	and	r24, r24
    12de:	09 f4       	brne	.+2      	; 0x12e2 <__stack+0x1e3>
    12e0:	be cf       	rjmp	.-132    	; 0x125e <__stack+0x15f>
			
			
			}							
				
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    12e2:	80 91 1e 04 	lds	r24, 0x041E
    12e6:	90 91 1f 04 	lds	r25, 0x041F
    12ea:	2f a5       	lds	r18, 0x6f
    12ec:	38 a9       	sts	0x48, r19
    12ee:	28 17       	cp	r18, r24
    12f0:	39 07       	cpc	r19, r25
    12f2:	50 f0       	brcs	.+20     	; 0x1308 <__stack+0x209>
    12f4:	80 91 ba 01 	lds	r24, 0x01BA
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	31 f4       	brne	.+12     	; 0x1308 <__stack+0x209>
    12fc:	89 a9       	sts	0x49, r24
    12fe:	9a a9       	sts	0x4a, r25
    1300:	80 95       	com	r24
    1302:	90 95       	com	r25
    1304:	08 23       	and	r16, r24
    1306:	19 23       	and	r17, r25
				
			if (osc_count == reference_count && no_overflow == TRUE) {
    1308:	80 91 1e 04 	lds	r24, 0x041E
    130c:	90 91 1f 04 	lds	r25, 0x041F
    1310:	ef a5       	lds	r30, 0x6f
    1312:	f8 a9       	sts	0x48, r31
    1314:	8e 17       	cp	r24, r30
    1316:	9f 07       	cpc	r25, r31
    1318:	21 f4       	brne	.+8      	; 0x1322 <__stack+0x223>
    131a:	80 91 ba 01 	lds	r24, 0x01BA
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	71 f0       	breq	.+28     	; 0x133e <__stack+0x23f>
				break;	//if you hit the reference count then get out of here		
			}				
			no_overflow = TRUE;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 93 ba 01 	sts	0x01BA, r24
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
    1328:	2d a5       	lds	r18, 0x6d
    132a:	3e a5       	lds	r19, 0x6e
    132c:	21 50       	subi	r18, 0x01	; 1
    132e:	30 40       	sbci	r19, 0x00	; 0
    1330:	3e a7       	lds	r19, 0x7e
    1332:	2d a7       	lds	r18, 0x7d
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	2f 3f       	cpi	r18, 0xFF	; 255
    1338:	38 07       	cpc	r19, r24
    133a:	09 f0       	breq	.+2      	; 0x133e <__stack+0x23f>
    133c:	68 cf       	rjmp	.-304    	; 0x120e <__stack+0x10f>
		}
		
		//will need to make an excpetion for C0 here as its pitch has already been determined by set_vco_init_cv() and so C0 will be 0V
		//for now maybe just start tuning octaves 1 and up
		//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
		*(vco_pitch_table + (octave*12 + note_number)) = osc_pitch_cv;		
    133e:	ed a9       	sts	0x4d, r30
    1340:	fe a9       	sts	0x4e, r31
    1342:	11 83       	std	Z+1, r17	; 0x01
    1344:	00 83       	st	Z, r16
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
	compare_match_counter = 0;	
	for (int note_number = 0; note_number <= 11; note_number++) 
    1346:	2b a9       	sts	0x4b, r18
    1348:	3c a9       	sts	0x4c, r19
    134a:	8b a1       	lds	r24, 0x4b
    134c:	9c a1       	lds	r25, 0x4c
    134e:	28 17       	cp	r18, r24
    1350:	39 07       	cpc	r19, r25
    1352:	09 f0       	breq	.+2      	; 0x1356 <__stack+0x257>
    1354:	3e cf       	rjmp	.-388    	; 0x11d2 <__stack+0xd3>
		
	}
	

	
	PORTF &= ~(1<<GATE); //turn gate off
    1356:	89 98       	cbi	0x11, 1	; 17
		
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1358:	ee e6       	ldi	r30, 0x6E	; 110
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8d 7f       	andi	r24, 0xFD	; 253
    1360:	80 83       	st	Z, r24
	
	
    1362:	e6 96       	adiw	r28, 0x36	; 54
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	df 90       	pop	r13
    137c:	cf 90       	pop	r12
    137e:	bf 90       	pop	r11
    1380:	af 90       	pop	r10
    1382:	9f 90       	pop	r9
    1384:	8f 90       	pop	r8
    1386:	7f 90       	pop	r7
    1388:	6f 90       	pop	r6
    138a:	5f 90       	pop	r5
    138c:	4f 90       	pop	r4
    138e:	3f 90       	pop	r3
    1390:	2f 90       	pop	r2
    1392:	08 95       	ret

00001394 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1394:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1396:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1398:	74 83       	std	Z+4, r23	; 0x04
    139a:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    139c:	11 82       	std	Z+1, r1	; 0x01
    139e:	10 82       	st	Z, r1
}
    13a0:	08 95       	ret

000013a2 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	ec 01       	movw	r28, r24
    13aa:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    13ac:	0e 94 40 0a 	call	0x1480	; 0x1480 <store_and_clear_interrupt>
    13b0:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    13b2:	39 81       	ldd	r19, Y+1	; 0x01
    13b4:	83 2f       	mov	r24, r19
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	6a 81       	ldd	r22, Y+2	; 0x02
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	0e 94 99 10 	call	0x2132	; 0x2132 <__divmodhi4>
    13c2:	48 81       	ld	r20, Y
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	84 17       	cp	r24, r20
    13c8:	95 07       	cpc	r25, r21
    13ca:	29 f4       	brne	.+10     	; 0x13d6 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    13cc:	82 2f       	mov	r24, r18
    13ce:	0e 94 43 0a 	call	0x1486	; 0x1486 <restore_interrupt_setting>
      return false;
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	11 c0       	rjmp	.+34     	; 0x13f8 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    13d6:	eb 81       	ldd	r30, Y+3	; 0x03
    13d8:	fc 81       	ldd	r31, Y+4	; 0x04
    13da:	e3 0f       	add	r30, r19
    13dc:	f1 1d       	adc	r31, r1
    13de:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	6a 81       	ldd	r22, Y+2	; 0x02
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	0e 94 99 10 	call	0x2132	; 0x2132 <__divmodhi4>
    13ee:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    13f0:	82 2f       	mov	r24, r18
    13f2:	0e 94 43 0a 	call	0x1486	; 0x1486 <restore_interrupt_setting>
      return true;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	08 95       	ret

00001400 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1406:	0e 94 40 0a 	call	0x1480	; 0x1480 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    140a:	29 81       	ldd	r18, Y+1	; 0x01
    140c:	98 81       	ld	r25, Y
    140e:	29 17       	cp	r18, r25
    1410:	18 f0       	brcs	.+6      	; 0x1418 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1412:	c2 2f       	mov	r28, r18
    1414:	c9 1b       	sub	r28, r25
    1416:	03 c0       	rjmp	.+6      	; 0x141e <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    1418:	ca 81       	ldd	r28, Y+2	; 0x02
    141a:	c2 0f       	add	r28, r18
    141c:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    141e:	0e 94 43 0a 	call	0x1486	; 0x1486 <restore_interrupt_setting>
   return len;
}
    1422:	8c 2f       	mov	r24, r28
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    142a:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    142c:	20 81       	ld	r18, Z
    142e:	86 2f       	mov	r24, r22
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	82 0f       	add	r24, r18
    1434:	91 1d       	adc	r25, r1
    1436:	62 81       	ldd	r22, Z+2	; 0x02
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	0e 94 99 10 	call	0x2132	; 0x2132 <__divmodhi4>
    143e:	03 80       	ldd	r0, Z+3	; 0x03
    1440:	f4 81       	ldd	r31, Z+4	; 0x04
    1442:	e0 2d       	mov	r30, r0
    1444:	e8 0f       	add	r30, r24
    1446:	f9 1f       	adc	r31, r25
}
    1448:	80 81       	ld	r24, Z
    144a:	08 95       	ret

0000144c <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	ec 01       	movw	r28, r24
    1454:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1456:	0e 94 40 0a 	call	0x1480	; 0x1480 <store_and_clear_interrupt>
    145a:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    145c:	88 81       	ld	r24, Y
    145e:	21 2f       	mov	r18, r17
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	28 0f       	add	r18, r24
    1464:	31 1d       	adc	r19, r1
    1466:	6a 81       	ldd	r22, Y+2	; 0x02
    1468:	c9 01       	movw	r24, r18
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	0e 94 99 10 	call	0x2132	; 0x2132 <__divmodhi4>
    1470:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1472:	84 2f       	mov	r24, r20
    1474:	0e 94 43 0a 	call	0x1486	; 0x1486 <restore_interrupt_setting>
}
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	08 95       	ret

00001480 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1480:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1482:	f8 94       	cli
   return sreg;
}
    1484:	08 95       	ret

00001486 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1486:	8f bf       	out	0x3f, r24	; 63
}
    1488:	08 95       	ret

0000148a <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    148a:	88 1f       	adc	r24, r24
    148c:	88 27       	eor	r24, r24
    148e:	88 1f       	adc	r24, r24
    1490:	08 95       	ret

00001492 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	88 3f       	cpi	r24, 0xF8	; 248
    1496:	08 f4       	brcc	.+2      	; 0x149a <midi_is_realtime+0x8>
    1498:	90 e0       	ldi	r25, 0x00	; 0
}
    149a:	89 2f       	mov	r24, r25
    149c:	08 95       	ret

0000149e <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	20 7f       	andi	r18, 0xF0	; 240
    14a4:	30 70       	andi	r19, 0x00	; 0
    14a6:	20 3c       	cpi	r18, 0xC0	; 192
    14a8:	31 05       	cpc	r19, r1
    14aa:	e9 f1       	breq	.+122    	; 0x1526 <midi_packet_length+0x88>
    14ac:	21 3c       	cpi	r18, 0xC1	; 193
    14ae:	31 05       	cpc	r19, r1
    14b0:	8c f4       	brge	.+34     	; 0x14d4 <midi_packet_length+0x36>
    14b2:	20 39       	cpi	r18, 0x90	; 144
    14b4:	31 05       	cpc	r19, r1
    14b6:	e1 f0       	breq	.+56     	; 0x14f0 <midi_packet_length+0x52>
    14b8:	21 39       	cpi	r18, 0x91	; 145
    14ba:	31 05       	cpc	r19, r1
    14bc:	24 f4       	brge	.+8      	; 0x14c6 <midi_packet_length+0x28>
    14be:	20 38       	cpi	r18, 0x80	; 128
    14c0:	31 05       	cpc	r19, r1
    14c2:	79 f5       	brne	.+94     	; 0x1522 <midi_packet_length+0x84>
    14c4:	15 c0       	rjmp	.+42     	; 0x14f0 <midi_packet_length+0x52>
    14c6:	20 3a       	cpi	r18, 0xA0	; 160
    14c8:	31 05       	cpc	r19, r1
    14ca:	91 f0       	breq	.+36     	; 0x14f0 <midi_packet_length+0x52>
    14cc:	20 3b       	cpi	r18, 0xB0	; 176
    14ce:	31 05       	cpc	r19, r1
    14d0:	41 f5       	brne	.+80     	; 0x1522 <midi_packet_length+0x84>
    14d2:	0e c0       	rjmp	.+28     	; 0x14f0 <midi_packet_length+0x52>
    14d4:	20 3e       	cpi	r18, 0xE0	; 224
    14d6:	31 05       	cpc	r19, r1
    14d8:	59 f0       	breq	.+22     	; 0x14f0 <midi_packet_length+0x52>
    14da:	21 3e       	cpi	r18, 0xE1	; 225
    14dc:	31 05       	cpc	r19, r1
    14de:	24 f4       	brge	.+8      	; 0x14e8 <midi_packet_length+0x4a>
    14e0:	20 3d       	cpi	r18, 0xD0	; 208
    14e2:	31 05       	cpc	r19, r1
    14e4:	f1 f4       	brne	.+60     	; 0x1522 <midi_packet_length+0x84>
    14e6:	1f c0       	rjmp	.+62     	; 0x1526 <midi_packet_length+0x88>
    14e8:	20 3f       	cpi	r18, 0xF0	; 240
    14ea:	31 05       	cpc	r19, r1
    14ec:	d1 f4       	brne	.+52     	; 0x1522 <midi_packet_length+0x84>
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    14f4:	86 3f       	cpi	r24, 0xF6	; 246
    14f6:	79 f0       	breq	.+30     	; 0x1516 <midi_packet_length+0x78>
    14f8:	87 3f       	cpi	r24, 0xF7	; 247
    14fa:	38 f4       	brcc	.+14     	; 0x150a <midi_packet_length+0x6c>
    14fc:	82 3f       	cpi	r24, 0xF2	; 242
    14fe:	a9 f0       	breq	.+42     	; 0x152a <midi_packet_length+0x8c>
    1500:	83 3f       	cpi	r24, 0xF3	; 243
    1502:	59 f0       	breq	.+22     	; 0x151a <midi_packet_length+0x7c>
    1504:	81 3f       	cpi	r24, 0xF1	; 241
    1506:	59 f4       	brne	.+22     	; 0x151e <midi_packet_length+0x80>
    1508:	08 c0       	rjmp	.+16     	; 0x151a <midi_packet_length+0x7c>
    150a:	88 3f       	cpi	r24, 0xF8	; 248
    150c:	40 f0       	brcs	.+16     	; 0x151e <midi_packet_length+0x80>
    150e:	8d 3f       	cpi	r24, 0xFD	; 253
    1510:	10 f0       	brcs	.+4      	; 0x1516 <midi_packet_length+0x78>
    1512:	8e 3f       	cpi	r24, 0xFE	; 254
    1514:	20 f0       	brcs	.+8      	; 0x151e <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1526:	82 e0       	ldi	r24, 0x02	; 2
    1528:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    152a:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    152c:	08 95       	ret

0000152e <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    152e:	0f 93       	push	r16
    1530:	34 2f       	mov	r19, r20
    1532:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1534:	46 2f       	mov	r20, r22
    1536:	4f 70       	andi	r20, 0x0F	; 15
    1538:	40 6b       	ori	r20, 0xB0	; 176
    153a:	23 2f       	mov	r18, r19
    153c:	2f 77       	andi	r18, 0x7F	; 127
    153e:	0f 77       	andi	r16, 0x7F	; 127
    1540:	dc 01       	movw	r26, r24
    1542:	ed 91       	ld	r30, X+
    1544:	fc 91       	ld	r31, X
    1546:	63 e0       	ldi	r22, 0x03	; 3
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    154c:	0f 91       	pop	r16
    154e:	08 95       	ret

00001550 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1550:	0f 93       	push	r16
    1552:	34 2f       	mov	r19, r20
    1554:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1556:	46 2f       	mov	r20, r22
    1558:	4f 70       	andi	r20, 0x0F	; 15
    155a:	40 69       	ori	r20, 0x90	; 144
    155c:	23 2f       	mov	r18, r19
    155e:	2f 77       	andi	r18, 0x7F	; 127
    1560:	0f 77       	andi	r16, 0x7F	; 127
    1562:	dc 01       	movw	r26, r24
    1564:	ed 91       	ld	r30, X+
    1566:	fc 91       	ld	r31, X
    1568:	63 e0       	ldi	r22, 0x03	; 3
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1572:	0f 93       	push	r16
    1574:	34 2f       	mov	r19, r20
    1576:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1578:	46 2f       	mov	r20, r22
    157a:	4f 70       	andi	r20, 0x0F	; 15
    157c:	40 68       	ori	r20, 0x80	; 128
    157e:	23 2f       	mov	r18, r19
    1580:	2f 77       	andi	r18, 0x7F	; 127
    1582:	0f 77       	andi	r16, 0x7F	; 127
    1584:	dc 01       	movw	r26, r24
    1586:	ed 91       	ld	r30, X+
    1588:	fc 91       	ld	r31, X
    158a:	63 e0       	ldi	r22, 0x03	; 3
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1594:	0f 93       	push	r16
    1596:	34 2f       	mov	r19, r20
    1598:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    159a:	46 2f       	mov	r20, r22
    159c:	4f 70       	andi	r20, 0x0F	; 15
    159e:	40 6a       	ori	r20, 0xA0	; 160
    15a0:	23 2f       	mov	r18, r19
    15a2:	2f 77       	andi	r18, 0x7F	; 127
    15a4:	0f 77       	andi	r16, 0x7F	; 127
    15a6:	dc 01       	movw	r26, r24
    15a8:	ed 91       	ld	r30, X+
    15aa:	fc 91       	ld	r31, X
    15ac:	63 e0       	ldi	r22, 0x03	; 3
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    15b2:	0f 91       	pop	r16
    15b4:	08 95       	ret

000015b6 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    15ba:	20 e2       	ldi	r18, 0x20	; 32
    15bc:	40 30       	cpi	r20, 0x00	; 0
    15be:	52 07       	cpc	r21, r18
    15c0:	44 f4       	brge	.+16     	; 0x15d2 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    15c2:	a0 ee       	ldi	r26, 0xE0	; 224
    15c4:	40 30       	cpi	r20, 0x00	; 0
    15c6:	5a 07       	cpc	r21, r26
    15c8:	3c f0       	brlt	.+14     	; 0x15d8 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    15ca:	8a 01       	movw	r16, r20
    15cc:	00 50       	subi	r16, 0x00	; 0
    15ce:	10 4e       	sbci	r17, 0xE0	; 224
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    15d2:	0f ef       	ldi	r16, 0xFF	; 255
    15d4:	1f e3       	ldi	r17, 0x3F	; 63
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    15d8:	00 e0       	ldi	r16, 0x00	; 0
    15da:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    15dc:	46 2f       	mov	r20, r22
    15de:	4f 70       	andi	r20, 0x0F	; 15
    15e0:	40 6e       	ori	r20, 0xE0	; 224
    15e2:	20 2f       	mov	r18, r16
    15e4:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    15e6:	00 0f       	add	r16, r16
    15e8:	01 2f       	mov	r16, r17
    15ea:	00 1f       	adc	r16, r16
    15ec:	11 0b       	sbc	r17, r17
    15ee:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    15f0:	0f 77       	andi	r16, 0x7F	; 127
    15f2:	dc 01       	movw	r26, r24
    15f4:	ed 91       	ld	r30, X+
    15f6:	fc 91       	ld	r31, X
    15f8:	63 e0       	ldi	r22, 0x03	; 3
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	08 95       	ret

00001604 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1604:	0f 93       	push	r16
    1606:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1608:	46 2f       	mov	r20, r22
    160a:	4f 70       	andi	r20, 0x0F	; 15
    160c:	40 6c       	ori	r20, 0xC0	; 192
    160e:	2f 77       	andi	r18, 0x7F	; 127
    1610:	dc 01       	movw	r26, r24
    1612:	ed 91       	ld	r30, X+
    1614:	fc 91       	ld	r31, X
    1616:	62 e0       	ldi	r22, 0x02	; 2
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	00 e0       	ldi	r16, 0x00	; 0
    161c:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    161e:	0f 91       	pop	r16
    1620:	08 95       	ret

00001622 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1622:	0f 93       	push	r16
    1624:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1626:	46 2f       	mov	r20, r22
    1628:	4f 70       	andi	r20, 0x0F	; 15
    162a:	40 6d       	ori	r20, 0xD0	; 208
    162c:	2f 77       	andi	r18, 0x7F	; 127
    162e:	dc 01       	movw	r26, r24
    1630:	ed 91       	ld	r30, X+
    1632:	fc 91       	ld	r31, X
    1634:	62 e0       	ldi	r22, 0x02	; 2
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	00 e0       	ldi	r16, 0x00	; 0
    163a:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    163c:	0f 91       	pop	r16
    163e:	08 95       	ret

00001640 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1640:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1642:	dc 01       	movw	r26, r24
    1644:	ed 91       	ld	r30, X+
    1646:	fc 91       	ld	r31, X
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	48 ef       	ldi	r20, 0xF8	; 248
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	00 e0       	ldi	r16, 0x00	; 0
    1652:	09 95       	icall
}
    1654:	0f 91       	pop	r16
    1656:	08 95       	ret

00001658 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1658:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    165a:	dc 01       	movw	r26, r24
    165c:	ed 91       	ld	r30, X+
    165e:	fc 91       	ld	r31, X
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	49 ef       	ldi	r20, 0xF9	; 249
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	00 e0       	ldi	r16, 0x00	; 0
    166a:	09 95       	icall
}
    166c:	0f 91       	pop	r16
    166e:	08 95       	ret

00001670 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1670:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1672:	dc 01       	movw	r26, r24
    1674:	ed 91       	ld	r30, X+
    1676:	fc 91       	ld	r31, X
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	4a ef       	ldi	r20, 0xFA	; 250
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	00 e0       	ldi	r16, 0x00	; 0
    1682:	09 95       	icall
}
    1684:	0f 91       	pop	r16
    1686:	08 95       	ret

00001688 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1688:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    168a:	dc 01       	movw	r26, r24
    168c:	ed 91       	ld	r30, X+
    168e:	fc 91       	ld	r31, X
    1690:	61 e0       	ldi	r22, 0x01	; 1
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	4b ef       	ldi	r20, 0xFB	; 251
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	00 e0       	ldi	r16, 0x00	; 0
    169a:	09 95       	icall
}
    169c:	0f 91       	pop	r16
    169e:	08 95       	ret

000016a0 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    16a0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    16a2:	dc 01       	movw	r26, r24
    16a4:	ed 91       	ld	r30, X+
    16a6:	fc 91       	ld	r31, X
    16a8:	61 e0       	ldi	r22, 0x01	; 1
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	4c ef       	ldi	r20, 0xFC	; 252
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	00 e0       	ldi	r16, 0x00	; 0
    16b2:	09 95       	icall
}
    16b4:	0f 91       	pop	r16
    16b6:	08 95       	ret

000016b8 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    16b8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    16ba:	dc 01       	movw	r26, r24
    16bc:	ed 91       	ld	r30, X+
    16be:	fc 91       	ld	r31, X
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	4e ef       	ldi	r20, 0xFE	; 254
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	00 e0       	ldi	r16, 0x00	; 0
    16ca:	09 95       	icall
}
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    16d0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    16d2:	dc 01       	movw	r26, r24
    16d4:	ed 91       	ld	r30, X+
    16d6:	fc 91       	ld	r31, X
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	4f ef       	ldi	r20, 0xFF	; 255
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	00 e0       	ldi	r16, 0x00	; 0
    16e2:	09 95       	icall
}
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    16e8:	0f 93       	push	r16
   device->send_func(device, 2,
    16ea:	26 2f       	mov	r18, r22
    16ec:	2f 77       	andi	r18, 0x7F	; 127
    16ee:	dc 01       	movw	r26, r24
    16f0:	ed 91       	ld	r30, X+
    16f2:	fc 91       	ld	r31, X
    16f4:	62 e0       	ldi	r22, 0x02	; 2
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	41 ef       	ldi	r20, 0xF1	; 241
    16fa:	00 e0       	ldi	r16, 0x00	; 0
    16fc:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    16fe:	0f 91       	pop	r16
    1700:	08 95       	ret

00001702 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
   device->send_func(device, 3,
    1706:	26 2f       	mov	r18, r22
    1708:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    170a:	8b 01       	movw	r16, r22
    170c:	00 0f       	add	r16, r16
    170e:	01 2f       	mov	r16, r17
    1710:	00 1f       	adc	r16, r16
    1712:	11 0b       	sbc	r17, r17
    1714:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1716:	0f 77       	andi	r16, 0x7F	; 127
    1718:	dc 01       	movw	r26, r24
    171a:	ed 91       	ld	r30, X+
    171c:	fc 91       	ld	r31, X
    171e:	63 e0       	ldi	r22, 0x03	; 3
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	42 ef       	ldi	r20, 0xF2	; 242
    1724:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	08 95       	ret

0000172c <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    172c:	0f 93       	push	r16
   device->send_func(device, 2,
    172e:	26 2f       	mov	r18, r22
    1730:	2f 77       	andi	r18, 0x7F	; 127
    1732:	dc 01       	movw	r26, r24
    1734:	ed 91       	ld	r30, X+
    1736:	fc 91       	ld	r31, X
    1738:	62 e0       	ldi	r22, 0x02	; 2
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	43 ef       	ldi	r20, 0xF3	; 243
    173e:	00 e0       	ldi	r16, 0x00	; 0
    1740:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1742:	0f 91       	pop	r16
    1744:	08 95       	ret

00001746 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1746:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1748:	dc 01       	movw	r26, r24
    174a:	ed 91       	ld	r30, X+
    174c:	fc 91       	ld	r31, X
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	46 ef       	ldi	r20, 0xF6	; 246
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	00 e0       	ldi	r16, 0x00	; 0
    1758:	09 95       	icall
}
    175a:	0f 91       	pop	r16
    175c:	08 95       	ret

0000175e <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    175e:	0f 93       	push	r16
    1760:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1762:	dc 01       	movw	r26, r24
    1764:	ed 91       	ld	r30, X+
    1766:	fc 91       	ld	r31, X
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	00 e0       	ldi	r16, 0x00	; 0
    1770:	09 95       	icall
}
    1772:	0f 91       	pop	r16
    1774:	08 95       	ret

00001776 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1776:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1778:	dc 01       	movw	r26, r24
    177a:	ed 91       	ld	r30, X+
    177c:	fc 91       	ld	r31, X
    177e:	09 95       	icall
}
    1780:	0f 91       	pop	r16
    1782:	08 95       	ret

00001784 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1784:	6f 92       	push	r6
    1786:	7f 92       	push	r7
    1788:	8f 92       	push	r8
    178a:	9f 92       	push	r9
    178c:	af 92       	push	r10
    178e:	bf 92       	push	r11
    1790:	cf 92       	push	r12
    1792:	df 92       	push	r13
    1794:	ef 92       	push	r14
    1796:	ff 92       	push	r15
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <midi_send_array+0x1e>
    17a2:	0f 92       	push	r0
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	4c 01       	movw	r8, r24
    17aa:	6b 01       	movw	r12, r22
    17ac:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    17ae:	61 15       	cp	r22, r1
    17b0:	71 05       	cpc	r23, r1
    17b2:	41 f1       	breq	.+80     	; 0x1804 <midi_send_array+0x80>
    17b4:	ee 24       	eor	r14, r14
    17b6:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    17b8:	0f 2e       	mov	r0, r31
    17ba:	f3 e0       	ldi	r31, 0x03	; 3
    17bc:	6f 2e       	mov	r6, r31
    17be:	77 24       	eor	r7, r7
    17c0:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    17c2:	19 82       	std	Y+1, r1	; 0x01
    17c4:	1a 82       	std	Y+2, r1	; 0x02
    17c6:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    17c8:	86 01       	movw	r16, r12
    17ca:	0e 19       	sub	r16, r14
    17cc:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    17ce:	04 30       	cpi	r16, 0x04	; 4
    17d0:	11 05       	cpc	r17, r1
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <midi_send_array+0x52>
    17d4:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    17d6:	b5 01       	movw	r22, r10
    17d8:	6e 0d       	add	r22, r14
    17da:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    17dc:	ce 01       	movw	r24, r28
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	40 2f       	mov	r20, r16
    17e2:	51 2f       	mov	r21, r17
    17e4:	0e 94 ac 10 	call	0x2158	; 0x2158 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    17e8:	c4 01       	movw	r24, r8
    17ea:	b8 01       	movw	r22, r16
    17ec:	49 81       	ldd	r20, Y+1	; 0x01
    17ee:	2a 81       	ldd	r18, Y+2	; 0x02
    17f0:	0b 81       	ldd	r16, Y+3	; 0x03
    17f2:	0e 94 bb 0b 	call	0x1776	; 0x1776 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    17f6:	83 e0       	ldi	r24, 0x03	; 3
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	e8 0e       	add	r14, r24
    17fc:	f9 1e       	adc	r15, r25
    17fe:	ec 14       	cp	r14, r12
    1800:	fd 04       	cpc	r15, r13
    1802:	f8 f2       	brcs	.-66     	; 0x17c2 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	ef 90       	pop	r14
    1816:	df 90       	pop	r13
    1818:	cf 90       	pop	r12
    181a:	bf 90       	pop	r11
    181c:	af 90       	pop	r10
    181e:	9f 90       	pop	r9
    1820:	8f 90       	pop	r8
    1822:	7f 90       	pop	r7
    1824:	6f 90       	pop	r6
    1826:	08 95       	ret

00001828 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1828:	fc 01       	movw	r30, r24
    182a:	73 83       	std	Z+3, r23	; 0x03
    182c:	62 83       	std	Z+2, r22	; 0x02
}
    182e:	08 95       	ret

00001830 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1830:	fc 01       	movw	r30, r24
    1832:	75 83       	std	Z+5, r23	; 0x05
    1834:	64 83       	std	Z+4, r22	; 0x04
}
    1836:	08 95       	ret

00001838 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1838:	fc 01       	movw	r30, r24
    183a:	77 83       	std	Z+7, r23	; 0x07
    183c:	66 83       	std	Z+6, r22	; 0x06
}
    183e:	08 95       	ret

00001840 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1840:	fc 01       	movw	r30, r24
    1842:	71 87       	std	Z+9, r23	; 0x09
    1844:	60 87       	std	Z+8, r22	; 0x08
}
    1846:	08 95       	ret

00001848 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1848:	fc 01       	movw	r30, r24
    184a:	73 87       	std	Z+11, r23	; 0x0b
    184c:	62 87       	std	Z+10, r22	; 0x0a
}
    184e:	08 95       	ret

00001850 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1850:	fc 01       	movw	r30, r24
    1852:	75 87       	std	Z+13, r23	; 0x0d
    1854:	64 87       	std	Z+12, r22	; 0x0c
}
    1856:	08 95       	ret

00001858 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1858:	fc 01       	movw	r30, r24
    185a:	77 87       	std	Z+15, r23	; 0x0f
    185c:	66 87       	std	Z+14, r22	; 0x0e
}
    185e:	08 95       	ret

00001860 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1860:	fc 01       	movw	r30, r24
    1862:	71 8b       	std	Z+17, r23	; 0x11
    1864:	60 8b       	std	Z+16, r22	; 0x10
}
    1866:	08 95       	ret

00001868 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1868:	fc 01       	movw	r30, r24
    186a:	73 8b       	std	Z+19, r23	; 0x13
    186c:	62 8b       	std	Z+18, r22	; 0x12
}
    186e:	08 95       	ret

00001870 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1870:	fc 01       	movw	r30, r24
    1872:	75 8b       	std	Z+21, r23	; 0x15
    1874:	64 8b       	std	Z+20, r22	; 0x14
}
    1876:	08 95       	ret

00001878 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1878:	fc 01       	movw	r30, r24
    187a:	77 8b       	std	Z+23, r23	; 0x17
    187c:	66 8b       	std	Z+22, r22	; 0x16
}
    187e:	08 95       	ret

00001880 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1880:	fc 01       	movw	r30, r24
    1882:	71 8f       	std	Z+25, r23	; 0x19
    1884:	60 8f       	std	Z+24, r22	; 0x18
}
    1886:	08 95       	ret

00001888 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    1888:	fc 01       	movw	r30, r24
    188a:	73 8f       	std	Z+27, r23	; 0x1b
    188c:	62 8f       	std	Z+26, r22	; 0x1a
}
    188e:	08 95       	ret

00001890 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1890:	fc 01       	movw	r30, r24
    1892:	75 8f       	std	Z+29, r23	; 0x1d
    1894:	64 8f       	std	Z+28, r22	; 0x1c
}
    1896:	08 95       	ret

00001898 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1898:	fc 01       	movw	r30, r24
    189a:	77 8f       	std	Z+31, r23	; 0x1f
    189c:	66 8f       	std	Z+30, r22	; 0x1e
}
    189e:	08 95       	ret

000018a0 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    18a6:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    18a8:	1f a2       	lds	r17, 0x9f
    18aa:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    18ac:	bc 01       	movw	r22, r24
    18ae:	68 5d       	subi	r22, 0xD8	; 216
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    18b2:	88 51       	subi	r24, 0x18	; 24
    18b4:	9f 4f       	sbci	r25, 0xFF	; 255
    18b6:	40 ec       	ldi	r20, 0xC0	; 192
    18b8:	0e 94 ca 09 	call	0x1394	; 0x1394 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    18bc:	1b 82       	std	Y+3, r1	; 0x03
    18be:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    18c0:	1d 82       	std	Y+5, r1	; 0x05
    18c2:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    18c4:	1f 82       	std	Y+7, r1	; 0x07
    18c6:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    18c8:	19 86       	std	Y+9, r1	; 0x09
    18ca:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    18cc:	1b 86       	std	Y+11, r1	; 0x0b
    18ce:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    18d0:	1d 86       	std	Y+13, r1	; 0x0d
    18d2:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    18d4:	1f 86       	std	Y+15, r1	; 0x0f
    18d6:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    18d8:	19 8a       	std	Y+17, r1	; 0x11
    18da:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    18dc:	1b 8a       	std	Y+19, r1	; 0x13
    18de:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    18e0:	1d 8a       	std	Y+21, r1	; 0x15
    18e2:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    18e4:	1f 8a       	std	Y+23, r1	; 0x17
    18e6:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    18e8:	19 8e       	std	Y+25, r1	; 0x19
    18ea:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    18ec:	1b 8e       	std	Y+27, r1	; 0x1b
    18ee:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    18f0:	1d 8e       	std	Y+29, r1	; 0x1d
    18f2:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    18f4:	1f 8e       	std	Y+31, r1	; 0x1f
    18f6:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    18f8:	19 a2       	lds	r17, 0x99
    18fa:	18 a2       	lds	r17, 0x98
}
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	08 95       	ret

00001902 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1910:	66 23       	and	r22, r22
    1912:	99 f0       	breq	.+38     	; 0x193a <midi_device_input+0x38>
    1914:	04 2f       	mov	r16, r20
    1916:	15 2f       	mov	r17, r21
    1918:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    191a:	0f 2e       	mov	r0, r31
    191c:	f8 ee       	ldi	r31, 0xE8	; 232
    191e:	ef 2e       	mov	r14, r31
    1920:	ff 24       	eor	r15, r15
    1922:	f0 2d       	mov	r31, r0
    1924:	e8 0e       	add	r14, r24
    1926:	f9 1e       	adc	r15, r25
    1928:	f8 01       	movw	r30, r16
    192a:	61 91       	ld	r22, Z+
    192c:	8f 01       	movw	r16, r30
    192e:	c7 01       	movw	r24, r14
    1930:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1934:	cf 5f       	subi	r28, 0xFF	; 255
    1936:	cd 17       	cp	r28, r29
    1938:	b9 f7       	brne	.-18     	; 0x1928 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	ff 90       	pop	r15
    1944:	ef 90       	pop	r14
    1946:	08 95       	ret

00001948 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    1948:	fc 01       	movw	r30, r24
    194a:	71 83       	std	Z+1, r23	; 0x01
    194c:	60 83       	st	Z, r22
}
    194e:	08 95       	ret

00001950 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    1950:	fc 01       	movw	r30, r24
    1952:	71 a3       	lds	r23, 0x51
    1954:	60 a3       	lds	r22, 0x50
}
    1956:	08 95       	ret

00001958 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1958:	af 92       	push	r10
    195a:	bf 92       	push	r11
    195c:	cf 92       	push	r12
    195e:	df 92       	push	r13
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	00 d0       	rcall	.+0      	; 0x196e <midi_input_callbacks+0x16>
    196e:	0f 92       	push	r0
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	6c 01       	movw	r12, r24
    1976:	5b 01       	movw	r10, r22
    1978:	f4 2e       	mov	r15, r20
    197a:	e2 2e       	mov	r14, r18
    197c:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    197e:	dc 01       	movw	r26, r24
    1980:	95 96       	adiw	r26, 0x25	; 37
    1982:	8c 91       	ld	r24, X
    1984:	95 97       	sbiw	r26, 0x25	; 37
    1986:	84 30       	cpi	r24, 0x04	; 4
    1988:	e9 f4       	brne	.+58     	; 0x19c4 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    198a:	5a 96       	adiw	r26, 0x1a	; 26
    198c:	ed 91       	ld	r30, X+
    198e:	fc 91       	ld	r31, X
    1990:	5b 97       	sbiw	r26, 0x1b	; 27
    1992:	30 97       	sbiw	r30, 0x00	; 0
    1994:	09 f4       	brne	.+2      	; 0x1998 <midi_input_callbacks+0x40>
    1996:	ee c0       	rjmp	.+476    	; 0x1b74 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1998:	cb 01       	movw	r24, r22
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	63 e0       	ldi	r22, 0x03	; 3
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
    19a4:	cb 01       	movw	r24, r22
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	68 0f       	add	r22, r24
    19ac:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    19ae:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    19b0:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    19b2:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    19b4:	4a 2d       	mov	r20, r10
    19b6:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    19b8:	c6 01       	movw	r24, r12
    19ba:	9e 01       	movw	r18, r28
    19bc:	2f 5f       	subi	r18, 0xFF	; 255
    19be:	3f 4f       	sbci	r19, 0xFF	; 255
    19c0:	09 95       	icall
    19c2:	c8 c0       	rjmp	.+400    	; 0x1b54 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    19c4:	62 30       	cpi	r22, 0x02	; 2
    19c6:	71 05       	cpc	r23, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <midi_input_callbacks+0x74>
    19ca:	5f c0       	rjmp	.+190    	; 0x1a8a <midi_input_callbacks+0x132>
    19cc:	63 30       	cpi	r22, 0x03	; 3
    19ce:	71 05       	cpc	r23, r1
    19d0:	29 f0       	breq	.+10     	; 0x19dc <midi_input_callbacks+0x84>
    19d2:	61 30       	cpi	r22, 0x01	; 1
    19d4:	71 05       	cpc	r23, r1
    19d6:	09 f0       	breq	.+2      	; 0x19da <midi_input_callbacks+0x82>
    19d8:	b3 c0       	rjmp	.+358    	; 0x1b40 <midi_input_callbacks+0x1e8>
    19da:	99 c0       	rjmp	.+306    	; 0x1b0e <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    19dc:	84 2f       	mov	r24, r20
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	80 7f       	andi	r24, 0xF0	; 240
    19e2:	90 70       	andi	r25, 0x00	; 0
    19e4:	80 3a       	cpi	r24, 0xA0	; 160
    19e6:	91 05       	cpc	r25, r1
    19e8:	29 f1       	breq	.+74     	; 0x1a34 <midi_input_callbacks+0xdc>
    19ea:	81 3a       	cpi	r24, 0xA1	; 161
    19ec:	91 05       	cpc	r25, r1
    19ee:	3c f4       	brge	.+14     	; 0x19fe <midi_input_callbacks+0xa6>
    19f0:	80 38       	cpi	r24, 0x80	; 128
    19f2:	91 05       	cpc	r25, r1
    19f4:	c9 f0       	breq	.+50     	; 0x1a28 <midi_input_callbacks+0xd0>
    19f6:	80 39       	cpi	r24, 0x90	; 144
    19f8:	91 05       	cpc	r25, r1
    19fa:	91 f5       	brne	.+100    	; 0x1a60 <midi_input_callbacks+0x108>
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <midi_input_callbacks+0xc4>
    19fe:	80 3e       	cpi	r24, 0xE0	; 224
    1a00:	91 05       	cpc	r25, r1
    1a02:	f1 f0       	breq	.+60     	; 0x1a40 <midi_input_callbacks+0xe8>
    1a04:	80 3f       	cpi	r24, 0xF0	; 240
    1a06:	91 05       	cpc	r25, r1
    1a08:	09 f1       	breq	.+66     	; 0x1a4c <midi_input_callbacks+0xf4>
    1a0a:	80 3b       	cpi	r24, 0xB0	; 176
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	41 f5       	brne	.+80     	; 0x1a60 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    1a10:	d6 01       	movw	r26, r12
    1a12:	12 96       	adiw	r26, 0x02	; 2
    1a14:	ed 91       	ld	r30, X+
    1a16:	fc 91       	ld	r31, X
    1a18:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1a1a:	24 c0       	rjmp	.+72     	; 0x1a64 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1a1c:	d6 01       	movw	r26, r12
    1a1e:	14 96       	adiw	r26, 0x04	; 4
    1a20:	ed 91       	ld	r30, X+
    1a22:	fc 91       	ld	r31, X
    1a24:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1a26:	1e c0       	rjmp	.+60     	; 0x1a64 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1a28:	d6 01       	movw	r26, r12
    1a2a:	16 96       	adiw	r26, 0x06	; 6
    1a2c:	ed 91       	ld	r30, X+
    1a2e:	fc 91       	ld	r31, X
    1a30:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1a32:	18 c0       	rjmp	.+48     	; 0x1a64 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1a34:	d6 01       	movw	r26, r12
    1a36:	18 96       	adiw	r26, 0x08	; 8
    1a38:	ed 91       	ld	r30, X+
    1a3a:	fc 91       	ld	r31, X
    1a3c:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1a3e:	12 c0       	rjmp	.+36     	; 0x1a64 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1a40:	d6 01       	movw	r26, r12
    1a42:	1a 96       	adiw	r26, 0x0a	; 10
    1a44:	ed 91       	ld	r30, X+
    1a46:	fc 91       	ld	r31, X
    1a48:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1a4a:	0c c0       	rjmp	.+24     	; 0x1a64 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1a4c:	b2 ef       	ldi	r27, 0xF2	; 242
    1a4e:	4b 17       	cp	r20, r27
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <midi_input_callbacks+0xfc>
    1a52:	90 c0       	rjmp	.+288    	; 0x1b74 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    1a54:	d6 01       	movw	r26, r12
    1a56:	1c 96       	adiw	r26, 0x0c	; 12
    1a58:	ed 91       	ld	r30, X+
    1a5a:	fc 91       	ld	r31, X
    1a5c:	1d 97       	sbiw	r26, 0x0d	; 13
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1a60:	e0 e0       	ldi	r30, 0x00	; 0
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1a64:	30 97       	sbiw	r30, 0x00	; 0
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <midi_input_callbacks+0x112>
    1a68:	85 c0       	rjmp	.+266    	; 0x1b74 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1a6a:	b2 ef       	ldi	r27, 0xF2	; 242
    1a6c:	fb 16       	cp	r15, r27
    1a6e:	31 f4       	brne	.+12     	; 0x1a7c <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    1a70:	c6 01       	movw	r24, r12
    1a72:	62 ef       	ldi	r22, 0xF2	; 242
    1a74:	4e 2d       	mov	r20, r14
    1a76:	21 2f       	mov	r18, r17
    1a78:	09 95       	icall
    1a7a:	6c c0       	rjmp	.+216    	; 0x1b54 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1a7c:	6f 2d       	mov	r22, r15
    1a7e:	6f 70       	andi	r22, 0x0F	; 15
    1a80:	c6 01       	movw	r24, r12
    1a82:	4e 2d       	mov	r20, r14
    1a84:	21 2f       	mov	r18, r17
    1a86:	09 95       	icall
    1a88:	65 c0       	rjmp	.+202    	; 0x1b54 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1a8a:	84 2f       	mov	r24, r20
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	80 7f       	andi	r24, 0xF0	; 240
    1a90:	90 70       	andi	r25, 0x00	; 0
    1a92:	80 3d       	cpi	r24, 0xD0	; 208
    1a94:	91 05       	cpc	r25, r1
    1a96:	61 f0       	breq	.+24     	; 0x1ab0 <midi_input_callbacks+0x158>
    1a98:	80 3f       	cpi	r24, 0xF0	; 240
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	79 f0       	breq	.+30     	; 0x1abc <midi_input_callbacks+0x164>
    1a9e:	80 3c       	cpi	r24, 0xC0	; 192
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	f9 f4       	brne	.+62     	; 0x1ae2 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1aa4:	d6 01       	movw	r26, r12
    1aa6:	1e 96       	adiw	r26, 0x0e	; 14
    1aa8:	ed 91       	ld	r30, X+
    1aaa:	fc 91       	ld	r31, X
    1aac:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1aae:	1b c0       	rjmp	.+54     	; 0x1ae6 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1ab0:	d6 01       	movw	r26, r12
    1ab2:	50 96       	adiw	r26, 0x10	; 16
    1ab4:	ed 91       	ld	r30, X+
    1ab6:	fc 91       	ld	r31, X
    1ab8:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1aba:	15 c0       	rjmp	.+42     	; 0x1ae6 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1abc:	b3 ef       	ldi	r27, 0xF3	; 243
    1abe:	4b 17       	cp	r20, r27
    1ac0:	31 f4       	brne	.+12     	; 0x1ace <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    1ac2:	d6 01       	movw	r26, r12
    1ac4:	52 96       	adiw	r26, 0x12	; 18
    1ac6:	ed 91       	ld	r30, X+
    1ac8:	fc 91       	ld	r31, X
    1aca:	53 97       	sbiw	r26, 0x13	; 19
    1acc:	0c c0       	rjmp	.+24     	; 0x1ae6 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1ace:	b1 ef       	ldi	r27, 0xF1	; 241
    1ad0:	4b 17       	cp	r20, r27
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <midi_input_callbacks+0x17e>
    1ad4:	4f c0       	rjmp	.+158    	; 0x1b74 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    1ad6:	d6 01       	movw	r26, r12
    1ad8:	54 96       	adiw	r26, 0x14	; 20
    1ada:	ed 91       	ld	r30, X+
    1adc:	fc 91       	ld	r31, X
    1ade:	55 97       	sbiw	r26, 0x15	; 21
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1ae2:	e0 e0       	ldi	r30, 0x00	; 0
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1ae6:	30 97       	sbiw	r30, 0x00	; 0
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <midi_input_callbacks+0x194>
    1aea:	44 c0       	rjmp	.+136    	; 0x1b74 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1aec:	b3 ef       	ldi	r27, 0xF3	; 243
    1aee:	fb 16       	cp	r15, r27
    1af0:	19 f0       	breq	.+6      	; 0x1af8 <midi_input_callbacks+0x1a0>
    1af2:	81 ef       	ldi	r24, 0xF1	; 241
    1af4:	f8 16       	cp	r15, r24
    1af6:	29 f4       	brne	.+10     	; 0x1b02 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1af8:	c6 01       	movw	r24, r12
    1afa:	6f 2d       	mov	r22, r15
    1afc:	4e 2d       	mov	r20, r14
    1afe:	09 95       	icall
    1b00:	29 c0       	rjmp	.+82     	; 0x1b54 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    1b02:	6f 2d       	mov	r22, r15
    1b04:	6f 70       	andi	r22, 0x0F	; 15
    1b06:	c6 01       	movw	r24, r12
    1b08:	4e 2d       	mov	r20, r14
    1b0a:	09 95       	icall
    1b0c:	23 c0       	rjmp	.+70     	; 0x1b54 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1b0e:	84 2f       	mov	r24, r20
    1b10:	0e 94 49 0a 	call	0x1492	; 0x1492 <midi_is_realtime>
    1b14:	88 23       	and	r24, r24
    1b16:	31 f0       	breq	.+12     	; 0x1b24 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    1b18:	d6 01       	movw	r26, r12
    1b1a:	56 96       	adiw	r26, 0x16	; 22
    1b1c:	ed 91       	ld	r30, X+
    1b1e:	fc 91       	ld	r31, X
    1b20:	57 97       	sbiw	r26, 0x17	; 23
    1b22:	08 c0       	rjmp	.+16     	; 0x1b34 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    1b24:	b6 ef       	ldi	r27, 0xF6	; 246
    1b26:	fb 16       	cp	r15, r27
    1b28:	29 f5       	brne	.+74     	; 0x1b74 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    1b2a:	d6 01       	movw	r26, r12
    1b2c:	58 96       	adiw	r26, 0x18	; 24
    1b2e:	ed 91       	ld	r30, X+
    1b30:	fc 91       	ld	r31, X
    1b32:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1b34:	30 97       	sbiw	r30, 0x00	; 0
    1b36:	f1 f0       	breq	.+60     	; 0x1b74 <midi_input_callbacks+0x21c>
            func(device, byte0);
    1b38:	c6 01       	movw	r24, r12
    1b3a:	6f 2d       	mov	r22, r15
    1b3c:	09 95       	icall
    1b3e:	0a c0       	rjmp	.+20     	; 0x1b54 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1b40:	64 30       	cpi	r22, 0x04	; 4
    1b42:	71 05       	cpc	r23, r1
    1b44:	a8 f4       	brcc	.+42     	; 0x1b70 <midi_input_callbacks+0x218>
    1b46:	16 c0       	rjmp	.+44     	; 0x1b74 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1b48:	c6 01       	movw	r24, r12
    1b4a:	b5 01       	movw	r22, r10
    1b4c:	4f 2d       	mov	r20, r15
    1b4e:	2e 2d       	mov	r18, r14
    1b50:	01 2f       	mov	r16, r17
    1b52:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1b54:	d6 01       	movw	r26, r12
    1b56:	5e 96       	adiw	r26, 0x1e	; 30
    1b58:	ed 91       	ld	r30, X+
    1b5a:	fc 91       	ld	r31, X
    1b5c:	5f 97       	sbiw	r26, 0x1f	; 31
    1b5e:	30 97       	sbiw	r30, 0x00	; 0
    1b60:	89 f0       	breq	.+34     	; 0x1b84 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1b62:	c6 01       	movw	r24, r12
    1b64:	b5 01       	movw	r22, r10
    1b66:	4f 2d       	mov	r20, r15
    1b68:	2e 2d       	mov	r18, r14
    1b6a:	01 2f       	mov	r16, r17
    1b6c:	09 95       	icall
    1b6e:	0a c0       	rjmp	.+20     	; 0x1b84 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    1b70:	aa 24       	eor	r10, r10
    1b72:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1b74:	d6 01       	movw	r26, r12
    1b76:	5c 96       	adiw	r26, 0x1c	; 28
    1b78:	ed 91       	ld	r30, X+
    1b7a:	fc 91       	ld	r31, X
    1b7c:	5d 97       	sbiw	r26, 0x1d	; 29
    1b7e:	30 97       	sbiw	r30, 0x00	; 0
    1b80:	19 f7       	brne	.-58     	; 0x1b48 <midi_input_callbacks+0x1f0>
    1b82:	e8 cf       	rjmp	.-48     	; 0x1b54 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	1f 91       	pop	r17
    1b90:	0f 91       	pop	r16
    1b92:	ff 90       	pop	r15
    1b94:	ef 90       	pop	r14
    1b96:	df 90       	pop	r13
    1b98:	cf 90       	pop	r12
    1b9a:	bf 90       	pop	r11
    1b9c:	af 90       	pop	r10
    1b9e:	08 95       	ret

00001ba0 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1ba0:	ef 92       	push	r14
    1ba2:	ff 92       	push	r15
    1ba4:	0f 93       	push	r16
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	7c 01       	movw	r14, r24
    1bac:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    1bae:	86 2f       	mov	r24, r22
    1bb0:	0e 94 49 0a 	call	0x1492	; 0x1492 <midi_is_realtime>
    1bb4:	88 23       	and	r24, r24
    1bb6:	91 f0       	breq	.+36     	; 0x1bdc <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1bb8:	d7 01       	movw	r26, r14
    1bba:	95 96       	adiw	r26, 0x25	; 37
    1bbc:	dc 91       	ld	r29, X
    1bbe:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	95 96       	adiw	r26, 0x25	; 37
    1bc4:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    1bc6:	c7 01       	movw	r24, r14
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	4c 2f       	mov	r20, r28
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	00 e0       	ldi	r16, 0x00	; 0
    1bd2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <midi_input_callbacks>
    device->input_state = state;
    1bd6:	f7 01       	movw	r30, r14
    1bd8:	d5 a3       	lds	r29, 0x55
    1bda:	b7 c0       	rjmp	.+366    	; 0x1d4a <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    1bdc:	8c 2f       	mov	r24, r28
    1bde:	0e 94 45 0a 	call	0x148a	; 0x148a <midi_is_statusbyte>
    1be2:	88 23       	and	r24, r24
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <midi_process_byte+0x48>
    1be6:	73 c0       	rjmp	.+230    	; 0x1cce <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1be8:	d7 01       	movw	r26, r14
    1bea:	95 96       	adiw	r26, 0x25	; 37
    1bec:	8c 91       	ld	r24, X
    1bee:	95 97       	sbiw	r26, 0x25	; 37
    1bf0:	84 30       	cpi	r24, 0x04	; 4
    1bf2:	49 f0       	breq	.+18     	; 0x1c06 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    1bf4:	92 96       	adiw	r26, 0x22	; 34
    1bf6:	cc 93       	st	X, r28
    1bf8:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	97 96       	adiw	r26, 0x27	; 39
    1c00:	9c 93       	st	X, r25
    1c02:	8e 93       	st	-X, r24
    1c04:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    1c06:	8c 2f       	mov	r24, r28
    1c08:	0e 94 4f 0a 	call	0x149e	; 0x149e <midi_packet_length>
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	41 f0       	breq	.+16     	; 0x1c20 <midi_process_byte+0x80>
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	00 f1       	brcs	.+64     	; 0x1c54 <midi_process_byte+0xb4>
    1c14:	82 30       	cpi	r24, 0x02	; 2
    1c16:	a1 f0       	breq	.+40     	; 0x1c40 <midi_process_byte+0xa0>
    1c18:	83 30       	cpi	r24, 0x03	; 3
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <midi_process_byte+0x7e>
    1c1c:	4f c0       	rjmp	.+158    	; 0x1cbc <midi_process_byte+0x11c>
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	f7 01       	movw	r30, r14
    1c24:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    1c26:	c7 01       	movw	r24, r14
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	4c 2f       	mov	r20, r28
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	00 e0       	ldi	r16, 0x00	; 0
    1c32:	0e 94 ac 0c 	call	0x1958	; 0x1958 <midi_input_callbacks>
        device->input_state = IDLE;
    1c36:	d7 01       	movw	r26, r14
    1c38:	95 96       	adiw	r26, 0x25	; 37
    1c3a:	1c 92       	st	X, r1
    1c3c:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1c3e:	85 c0       	rjmp	.+266    	; 0x1d4a <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	f7 01       	movw	r30, r14
    1c44:	85 a3       	lds	r24, 0x55
        break;
    1c46:	81 c0       	rjmp	.+258    	; 0x1d4a <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	d7 01       	movw	r26, r14
    1c4c:	95 96       	adiw	r26, 0x25	; 37
    1c4e:	8c 93       	st	X, r24
    1c50:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1c52:	7b c0       	rjmp	.+246    	; 0x1d4a <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    1c54:	c0 3f       	cpi	r28, 0xF0	; 240
    1c56:	19 f0       	breq	.+6      	; 0x1c5e <midi_process_byte+0xbe>
    1c58:	c7 3f       	cpi	r28, 0xF7	; 247
    1c5a:	59 f5       	brne	.+86     	; 0x1cb2 <midi_process_byte+0x112>
    1c5c:	0a c0       	rjmp	.+20     	; 0x1c72 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1c5e:	84 e0       	ldi	r24, 0x04	; 4
    1c60:	f7 01       	movw	r30, r14
    1c62:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    1c64:	80 ef       	ldi	r24, 0xF0	; 240
    1c66:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	97 a3       	lds	r25, 0x57
    1c6e:	86 a3       	lds	r24, 0x56
            break;
    1c70:	6c c0       	rjmp	.+216    	; 0x1d4a <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1c72:	d7 01       	movw	r26, r14
    1c74:	96 96       	adiw	r26, 0x26	; 38
    1c76:	2d 91       	ld	r18, X+
    1c78:	3c 91       	ld	r19, X
    1c7a:	97 97       	sbiw	r26, 0x27	; 39
    1c7c:	c9 01       	movw	r24, r18
    1c7e:	63 e0       	ldi	r22, 0x03	; 3
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
    1c86:	f7 01       	movw	r30, r14
    1c88:	e8 0f       	add	r30, r24
    1c8a:	f9 1f       	adc	r31, r25
    1c8c:	87 ef       	ldi	r24, 0xF7	; 247
    1c8e:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    1c90:	b9 01       	movw	r22, r18
    1c92:	6f 5f       	subi	r22, 0xFF	; 255
    1c94:	7f 4f       	sbci	r23, 0xFF	; 255
    1c96:	f7 01       	movw	r30, r14
    1c98:	77 a3       	lds	r23, 0x57
    1c9a:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1c9c:	c7 01       	movw	r24, r14
    1c9e:	42 a1       	lds	r20, 0x42
    1ca0:	23 a1       	lds	r18, 0x43
    1ca2:	04 a1       	lds	r16, 0x44
    1ca4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1ca8:	d7 01       	movw	r26, r14
    1caa:	95 96       	adiw	r26, 0x25	; 37
    1cac:	1c 92       	st	X, r1
    1cae:	95 97       	sbiw	r26, 0x25	; 37
            break;
    1cb0:	4c c0       	rjmp	.+152    	; 0x1d4a <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    1cb2:	f7 01       	movw	r30, r14
    1cb4:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    1cb6:	17 a2       	lds	r17, 0x97
    1cb8:	16 a2       	lds	r17, 0x96
    1cba:	47 c0       	rjmp	.+142    	; 0x1d4a <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    1cbc:	d7 01       	movw	r26, r14
    1cbe:	95 96       	adiw	r26, 0x25	; 37
    1cc0:	1c 92       	st	X, r1
    1cc2:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    1cc4:	97 96       	adiw	r26, 0x27	; 39
    1cc6:	1c 92       	st	X, r1
    1cc8:	1e 92       	st	-X, r1
    1cca:	96 97       	sbiw	r26, 0x26	; 38
        break;
    1ccc:	3e c0       	rjmp	.+124    	; 0x1d4a <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    1cce:	f7 01       	movw	r30, r14
    1cd0:	25 a1       	lds	r18, 0x45
    1cd2:	22 23       	and	r18, r18
    1cd4:	d1 f1       	breq	.+116    	; 0x1d4a <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1cd6:	06 a0       	lds	r16, 0x86
    1cd8:	f7 a1       	lds	r31, 0x47
    1cda:	e0 2d       	mov	r30, r0
    1cdc:	cf 01       	movw	r24, r30
    1cde:	63 e0       	ldi	r22, 0x03	; 3
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
    1ce6:	ac 01       	movw	r20, r24
    1ce8:	8e 0d       	add	r24, r14
    1cea:	9f 1d       	adc	r25, r15
    1cec:	dc 01       	movw	r26, r24
    1cee:	92 96       	adiw	r26, 0x22	; 34
    1cf0:	cc 93       	st	X, r28
    1cf2:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1cf4:	bf 01       	movw	r22, r30
    1cf6:	6f 5f       	subi	r22, 0xFF	; 255
    1cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfa:	f7 01       	movw	r30, r14
    1cfc:	77 a3       	lds	r23, 0x57
    1cfe:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    1d00:	41 30       	cpi	r20, 0x01	; 1
    1d02:	51 05       	cpc	r21, r1
    1d04:	91 f0       	breq	.+36     	; 0x1d2a <midi_process_byte+0x18a>
    1d06:	42 30       	cpi	r20, 0x02	; 2
    1d08:	51 05       	cpc	r21, r1
    1d0a:	f9 f4       	brne	.+62     	; 0x1d4a <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1d0c:	c7 01       	movw	r24, r14
    1d0e:	42 a1       	lds	r20, 0x42
    1d10:	23 a1       	lds	r18, 0x43
    1d12:	04 a1       	lds	r16, 0x44
    1d14:	0e 94 ac 0c 	call	0x1958	; 0x1958 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1d18:	f7 01       	movw	r30, r14
    1d1a:	85 a1       	lds	r24, 0x45
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	a9 f0       	breq	.+42     	; 0x1d4a <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	97 a3       	lds	r25, 0x57
    1d26:	86 a3       	lds	r24, 0x56
    1d28:	10 c0       	rjmp	.+32     	; 0x1d4a <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	71 f4       	brne	.+28     	; 0x1d4a <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1d2e:	c7 01       	movw	r24, r14
    1d30:	42 a1       	lds	r20, 0x42
    1d32:	23 a1       	lds	r18, 0x43
    1d34:	00 e0       	ldi	r16, 0x00	; 0
    1d36:	0e 94 ac 0c 	call	0x1958	; 0x1958 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1d3a:	f7 01       	movw	r30, r14
    1d3c:	85 a1       	lds	r24, 0x45
    1d3e:	84 30       	cpi	r24, 0x04	; 4
    1d40:	21 f0       	breq	.+8      	; 0x1d4a <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	97 a3       	lds	r25, 0x57
    1d48:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	0f 91       	pop	r16
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	08 95       	ret

00001d56 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1d56:	cf 92       	push	r12
    1d58:	df 92       	push	r13
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1d68:	dc 01       	movw	r26, r24
    1d6a:	90 96       	adiw	r26, 0x20	; 32
    1d6c:	ed 91       	ld	r30, X+
    1d6e:	fc 91       	ld	r31, X
    1d70:	91 97       	sbiw	r26, 0x21	; 33
    1d72:	30 97       	sbiw	r30, 0x00	; 0
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1d76:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1d78:	0f 2e       	mov	r0, r31
    1d7a:	f8 ee       	ldi	r31, 0xE8	; 232
    1d7c:	ef 2e       	mov	r14, r31
    1d7e:	ff 24       	eor	r15, r15
    1d80:	f0 2d       	mov	r31, r0
    1d82:	ec 0c       	add	r14, r12
    1d84:	fd 1c       	adc	r15, r13
    1d86:	c7 01       	movw	r24, r14
    1d88:	0e 94 00 0a 	call	0x1400	; 0x1400 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1d8c:	c8 2f       	mov	r28, r24
    1d8e:	d0 e0       	ldi	r29, 0x00	; 0
    1d90:	20 97       	sbiw	r28, 0x00	; 0
    1d92:	99 f0       	breq	.+38     	; 0x1dba <midi_device_process+0x64>
    1d94:	00 e0       	ldi	r16, 0x00	; 0
    1d96:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1d98:	c7 01       	movw	r24, r14
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	0e 94 15 0a 	call	0x142a	; 0x142a <bytequeue_get>
    1da0:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1da2:	c6 01       	movw	r24, r12
    1da4:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1da8:	c7 01       	movw	r24, r14
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	0e 94 26 0a 	call	0x144c	; 0x144c <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1db0:	0f 5f       	subi	r16, 0xFF	; 255
    1db2:	1f 4f       	sbci	r17, 0xFF	; 255
    1db4:	0c 17       	cp	r16, r28
    1db6:	1d 07       	cpc	r17, r29
    1db8:	78 f3       	brcs	.-34     	; 0x1d98 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	08 95       	ret

00001dcc <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    1dcc:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    1dce:	67 e0       	ldi	r22, 0x07	; 7
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
    1dd6:	48 2f       	mov	r20, r24
   if (remainder)
    1dd8:	88 23       	and	r24, r24
    1dda:	81 f0       	breq	.+32     	; 0x1dfc <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    1ddc:	c9 01       	movw	r24, r18
    1dde:	67 e0       	ldi	r22, 0x07	; 7
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
    1de6:	cb 01       	movw	r24, r22
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	84 0f       	add	r24, r20
    1df8:	91 1d       	adc	r25, r1
    1dfa:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    1dfc:	c9 01       	movw	r24, r18
    1dfe:	67 e0       	ldi	r22, 0x07	; 7
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
    1e06:	cb 01       	movw	r24, r22
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
}
    1e14:	08 95       	ret

00001e16 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    1e16:	48 2f       	mov	r20, r24
    1e18:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    1e1a:	a1 f0       	breq	.+40     	; 0x1e44 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    1e1c:	9c 01       	movw	r18, r24
    1e1e:	36 95       	lsr	r19
    1e20:	27 95       	ror	r18
    1e22:	36 95       	lsr	r19
    1e24:	27 95       	ror	r18
    1e26:	36 95       	lsr	r19
    1e28:	27 95       	ror	r18
    1e2a:	c9 01       	movw	r24, r18
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	82 1b       	sub	r24, r18
    1e3a:	93 0b       	sbc	r25, r19
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	84 0f       	add	r24, r20
    1e40:	91 1d       	adc	r25, r1
    1e42:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    1e44:	9c 01       	movw	r18, r24
    1e46:	36 95       	lsr	r19
    1e48:	27 95       	ror	r18
    1e4a:	36 95       	lsr	r19
    1e4c:	27 95       	ror	r18
    1e4e:	36 95       	lsr	r19
    1e50:	27 95       	ror	r18
    1e52:	c9 01       	movw	r24, r18
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	82 1b       	sub	r24, r18
    1e62:	93 0b       	sbc	r25, r19
}
    1e64:	08 95       	ret

00001e66 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1e66:	2f 92       	push	r2
    1e68:	3f 92       	push	r3
    1e6a:	4f 92       	push	r4
    1e6c:	5f 92       	push	r5
    1e6e:	6f 92       	push	r6
    1e70:	7f 92       	push	r7
    1e72:	8f 92       	push	r8
    1e74:	9f 92       	push	r9
    1e76:	af 92       	push	r10
    1e78:	bf 92       	push	r11
    1e7a:	cf 92       	push	r12
    1e7c:	df 92       	push	r13
    1e7e:	ef 92       	push	r14
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <sysex_encode+0x26>
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <sysex_encode+0x28>
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <sysex_encode+0x2a>
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	1c 01       	movw	r2, r24
    1e96:	7a 83       	std	Y+2, r23	; 0x02
    1e98:	69 83       	std	Y+1, r22	; 0x01
    1e9a:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    1e9c:	ca 01       	movw	r24, r20
    1e9e:	67 e0       	ldi	r22, 0x07	; 7
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
    1ea6:	2b 01       	movw	r4, r22
    1ea8:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    1eaa:	61 15       	cp	r22, r1
    1eac:	71 05       	cpc	r23, r1
    1eae:	b1 f1       	breq	.+108    	; 0x1f1c <sysex_encode+0xb6>
    1eb0:	81 01       	movw	r16, r2
    1eb2:	e9 80       	ldd	r14, Y+1	; 0x01
    1eb4:	fa 80       	ldd	r15, Y+2	; 0x02
    1eb6:	cc 24       	eor	r12, r12
    1eb8:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1eba:	88 24       	eor	r8, r8
    1ebc:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1ebe:	1e 83       	std	Y+6, r17	; 0x06
    1ec0:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1ec6:	fc 82       	std	Y+4, r15	; 0x04
    1ec8:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1eca:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    1ecc:	ab 81       	ldd	r26, Y+3	; 0x03
    1ece:	bc 81       	ldd	r27, Y+4	; 0x04
    1ed0:	2d 91       	ld	r18, X+
    1ed2:	bc 83       	std	Y+4, r27	; 0x04
    1ed4:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    1ed6:	4f 5f       	subi	r20, 0xFF	; 255
    1ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eda:	82 2f       	mov	r24, r18
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	80 78       	andi	r24, 0x80	; 128
    1ee0:	90 70       	andi	r25, 0x00	; 0
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	04 2e       	mov	r0, r20
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <sysex_encode+0x86>
    1ee8:	75 95       	asr	r23
    1eea:	67 95       	ror	r22
    1eec:	0a 94       	dec	r0
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <sysex_encode+0x82>
    1ef0:	ad 81       	ldd	r26, Y+5	; 0x05
    1ef2:	be 81       	ldd	r27, Y+6	; 0x06
    1ef4:	8c 91       	ld	r24, X
    1ef6:	86 2b       	or	r24, r22
    1ef8:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1efa:	2f 77       	andi	r18, 0x7F	; 127
    1efc:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1efe:	47 30       	cpi	r20, 0x07	; 7
    1f00:	51 05       	cpc	r21, r1
    1f02:	21 f7       	brne	.-56     	; 0x1ecc <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    1f04:	08 94       	sec
    1f06:	c1 1c       	adc	r12, r1
    1f08:	d1 1c       	adc	r13, r1
    1f0a:	08 5f       	subi	r16, 0xF8	; 248
    1f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0e:	e7 e0       	ldi	r30, 0x07	; 7
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	ee 0e       	add	r14, r30
    1f14:	ff 1e       	adc	r15, r31
    1f16:	ca 14       	cp	r12, r10
    1f18:	db 04       	cpc	r13, r11
    1f1a:	89 f6       	brne	.-94     	; 0x1ebe <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    1f1c:	c3 01       	movw	r24, r6
    1f1e:	67 e0       	ldi	r22, 0x07	; 7
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
   if (remainder) {
    1f26:	88 23       	and	r24, r24
    1f28:	d9 f1       	breq	.+118    	; 0x1fa0 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    1f2a:	82 01       	movw	r16, r4
    1f2c:	00 0f       	add	r16, r16
    1f2e:	11 1f       	adc	r17, r17
    1f30:	00 0f       	add	r16, r16
    1f32:	11 1f       	adc	r17, r17
    1f34:	00 0f       	add	r16, r16
    1f36:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    1f38:	78 01       	movw	r14, r16
    1f3a:	e4 18       	sub	r14, r4
    1f3c:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    1f3e:	d1 01       	movw	r26, r2
    1f40:	a0 0f       	add	r26, r16
    1f42:	b1 1f       	adc	r27, r17
    1f44:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    1f46:	68 2f       	mov	r22, r24
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	61 15       	cp	r22, r1
    1f4c:	71 05       	cpc	r23, r1
    1f4e:	19 f1       	breq	.+70     	; 0x1f96 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1f50:	e9 81       	ldd	r30, Y+1	; 0x01
    1f52:	fa 81       	ldd	r31, Y+2	; 0x02
    1f54:	ee 0e       	add	r14, r30
    1f56:	ff 1e       	adc	r15, r31
    1f58:	c8 01       	movw	r24, r16
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	28 0e       	add	r2, r24
    1f5e:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    1f64:	f7 01       	movw	r30, r14
    1f66:	41 91       	ld	r20, Z+
    1f68:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    1f6a:	2f 5f       	subi	r18, 0xFF	; 255
    1f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6e:	84 2f       	mov	r24, r20
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	80 78       	andi	r24, 0x80	; 128
    1f74:	90 70       	andi	r25, 0x00	; 0
    1f76:	02 2e       	mov	r0, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <sysex_encode+0x118>
    1f7a:	95 95       	asr	r25
    1f7c:	87 95       	ror	r24
    1f7e:	0a 94       	dec	r0
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <sysex_encode+0x114>
    1f82:	9c 91       	ld	r25, X
    1f84:	89 2b       	or	r24, r25
    1f86:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1f88:	4f 77       	andi	r20, 0x7F	; 127
    1f8a:	f1 01       	movw	r30, r2
    1f8c:	41 93       	st	Z+, r20
    1f8e:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    1f90:	26 17       	cp	r18, r22
    1f92:	37 07       	cpc	r19, r23
    1f94:	38 f3       	brcs	.-50     	; 0x1f64 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    1f96:	c8 01       	movw	r24, r16
    1f98:	01 96       	adiw	r24, 0x01	; 1
    1f9a:	86 0f       	add	r24, r22
    1f9c:	97 1f       	adc	r25, r23
    1f9e:	07 c0       	rjmp	.+14     	; 0x1fae <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    1fa0:	c2 01       	movw	r24, r4
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
   }
}
    1fae:	26 96       	adiw	r28, 0x06	; 6
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	df 90       	pop	r13
    1fc8:	cf 90       	pop	r12
    1fca:	bf 90       	pop	r11
    1fcc:	af 90       	pop	r10
    1fce:	9f 90       	pop	r9
    1fd0:	8f 90       	pop	r8
    1fd2:	7f 90       	pop	r7
    1fd4:	6f 90       	pop	r6
    1fd6:	5f 90       	pop	r5
    1fd8:	4f 90       	pop	r4
    1fda:	3f 90       	pop	r3
    1fdc:	2f 90       	pop	r2
    1fde:	08 95       	ret

00001fe0 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1fe0:	6f 92       	push	r6
    1fe2:	7f 92       	push	r7
    1fe4:	8f 92       	push	r8
    1fe6:	9f 92       	push	r9
    1fe8:	af 92       	push	r10
    1fea:	bf 92       	push	r11
    1fec:	cf 92       	push	r12
    1fee:	df 92       	push	r13
    1ff0:	ef 92       	push	r14
    1ff2:	ff 92       	push	r15
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	3c 01       	movw	r6, r24
    1ffe:	4b 01       	movw	r8, r22
    2000:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    2002:	42 30       	cpi	r20, 0x02	; 2
    2004:	51 05       	cpc	r21, r1
    2006:	08 f4       	brcc	.+2      	; 0x200a <sysex_decode+0x2a>
    2008:	6f c0       	rjmp	.+222    	; 0x20e8 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    200a:	7a 01       	movw	r14, r20
    200c:	f6 94       	lsr	r15
    200e:	e7 94       	ror	r14
    2010:	f6 94       	lsr	r15
    2012:	e7 94       	ror	r14
    2014:	f6 94       	lsr	r15
    2016:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    2018:	e1 14       	cp	r14, r1
    201a:	f1 04       	cpc	r15, r1
    201c:	29 f1       	breq	.+74     	; 0x2068 <sysex_decode+0x88>
    201e:	eb 01       	movw	r28, r22
    2020:	b3 01       	movw	r22, r6
    2022:	00 e0       	ldi	r16, 0x00	; 0
    2024:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2026:	cc 24       	eor	r12, r12
    2028:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    202a:	de 01       	movw	r26, r28
    202c:	11 96       	adiw	r26, 0x01	; 1
    202e:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2030:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    2032:	2d 91       	ld	r18, X+
    2034:	2f 77       	andi	r18, 0x7F	; 127
    2036:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2038:	4f 5f       	subi	r20, 0xFF	; 255
    203a:	5f 4f       	sbci	r21, 0xFF	; 255
    203c:	88 81       	ld	r24, Y
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	04 2e       	mov	r0, r20
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <sysex_decode+0x68>
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	0a 94       	dec	r0
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <sysex_decode+0x64>
    204c:	80 78       	andi	r24, 0x80	; 128
    204e:	28 2b       	or	r18, r24
    2050:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2052:	47 30       	cpi	r20, 0x07	; 7
    2054:	51 05       	cpc	r21, r1
    2056:	69 f7       	brne	.-38     	; 0x2032 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    2058:	0f 5f       	subi	r16, 0xFF	; 255
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
    205c:	28 96       	adiw	r28, 0x08	; 8
    205e:	69 5f       	subi	r22, 0xF9	; 249
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	0e 15       	cp	r16, r14
    2064:	1f 05       	cpc	r17, r15
    2066:	09 f7       	brne	.-62     	; 0x202a <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    2068:	5a 2d       	mov	r21, r10
    206a:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    206c:	99 f1       	breq	.+102    	; 0x20d4 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    206e:	e7 01       	movw	r28, r14
    2070:	cc 0f       	add	r28, r28
    2072:	dd 1f       	adc	r29, r29
    2074:	cc 0f       	add	r28, r28
    2076:	dd 1f       	adc	r29, r29
    2078:	cc 0f       	add	r28, r28
    207a:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    207c:	8e 01       	movw	r16, r28
    207e:	0e 19       	sub	r16, r14
    2080:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    2082:	65 2f       	mov	r22, r21
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	61 50       	subi	r22, 0x01	; 1
    2088:	70 40       	sbci	r23, 0x00	; 0
    208a:	f9 f0       	breq	.+62     	; 0x20ca <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    208c:	ce 01       	movw	r24, r28
    208e:	01 96       	adiw	r24, 0x01	; 1
    2090:	d4 01       	movw	r26, r8
    2092:	a8 0f       	add	r26, r24
    2094:	b9 1f       	adc	r27, r25
    2096:	f3 01       	movw	r30, r6
    2098:	e0 0f       	add	r30, r16
    209a:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    20a0:	c8 0d       	add	r28, r8
    20a2:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    20a4:	4d 91       	ld	r20, X+
    20a6:	4f 77       	andi	r20, 0x7F	; 127
    20a8:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    20aa:	2f 5f       	subi	r18, 0xFF	; 255
    20ac:	3f 4f       	sbci	r19, 0xFF	; 255
    20ae:	88 81       	ld	r24, Y
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 2e       	mov	r0, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <sysex_decode+0xda>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0a 94       	dec	r0
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <sysex_decode+0xd6>
    20be:	80 78       	andi	r24, 0x80	; 128
    20c0:	48 2b       	or	r20, r24
    20c2:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    20c4:	26 17       	cp	r18, r22
    20c6:	37 07       	cpc	r19, r23
    20c8:	68 f3       	brcs	.-38     	; 0x20a4 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    20ca:	c8 01       	movw	r24, r16
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	85 0f       	add	r24, r21
    20d0:	91 1d       	adc	r25, r1
    20d2:	0c c0       	rjmp	.+24     	; 0x20ec <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    20d4:	c7 01       	movw	r24, r14
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	8e 19       	sub	r24, r14
    20e4:	9f 09       	sbc	r25, r15
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	ef 90       	pop	r14
    20f8:	df 90       	pop	r13
    20fa:	cf 90       	pop	r12
    20fc:	bf 90       	pop	r11
    20fe:	af 90       	pop	r10
    2100:	9f 90       	pop	r9
    2102:	8f 90       	pop	r8
    2104:	7f 90       	pop	r7
    2106:	6f 90       	pop	r6
    2108:	08 95       	ret

0000210a <__udivmodhi4>:
    210a:	aa 1b       	sub	r26, r26
    210c:	bb 1b       	sub	r27, r27
    210e:	51 e1       	ldi	r21, 0x11	; 17
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <__udivmodhi4_ep>

00002112 <__udivmodhi4_loop>:
    2112:	aa 1f       	adc	r26, r26
    2114:	bb 1f       	adc	r27, r27
    2116:	a6 17       	cp	r26, r22
    2118:	b7 07       	cpc	r27, r23
    211a:	10 f0       	brcs	.+4      	; 0x2120 <__udivmodhi4_ep>
    211c:	a6 1b       	sub	r26, r22
    211e:	b7 0b       	sbc	r27, r23

00002120 <__udivmodhi4_ep>:
    2120:	88 1f       	adc	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	5a 95       	dec	r21
    2126:	a9 f7       	brne	.-22     	; 0x2112 <__udivmodhi4_loop>
    2128:	80 95       	com	r24
    212a:	90 95       	com	r25
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	08 95       	ret

00002132 <__divmodhi4>:
    2132:	97 fb       	bst	r25, 7
    2134:	09 2e       	mov	r0, r25
    2136:	07 26       	eor	r0, r23
    2138:	0a d0       	rcall	.+20     	; 0x214e <__divmodhi4_neg1>
    213a:	77 fd       	sbrc	r23, 7
    213c:	04 d0       	rcall	.+8      	; 0x2146 <__divmodhi4_neg2>
    213e:	e5 df       	rcall	.-54     	; 0x210a <__udivmodhi4>
    2140:	06 d0       	rcall	.+12     	; 0x214e <__divmodhi4_neg1>
    2142:	00 20       	and	r0, r0
    2144:	1a f4       	brpl	.+6      	; 0x214c <__divmodhi4_exit>

00002146 <__divmodhi4_neg2>:
    2146:	70 95       	com	r23
    2148:	61 95       	neg	r22
    214a:	7f 4f       	sbci	r23, 0xFF	; 255

0000214c <__divmodhi4_exit>:
    214c:	08 95       	ret

0000214e <__divmodhi4_neg1>:
    214e:	f6 f7       	brtc	.-4      	; 0x214c <__divmodhi4_exit>
    2150:	90 95       	com	r25
    2152:	81 95       	neg	r24
    2154:	9f 4f       	sbci	r25, 0xFF	; 255
    2156:	08 95       	ret

00002158 <memcpy>:
    2158:	fb 01       	movw	r30, r22
    215a:	dc 01       	movw	r26, r24
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <memcpy+0xa>
    215e:	01 90       	ld	r0, Z+
    2160:	0d 92       	st	X+, r0
    2162:	41 50       	subi	r20, 0x01	; 1
    2164:	50 40       	sbci	r21, 0x00	; 0
    2166:	d8 f7       	brcc	.-10     	; 0x215e <memcpy+0x6>
    2168:	08 95       	ret

0000216a <memmove>:
    216a:	68 17       	cp	r22, r24
    216c:	79 07       	cpc	r23, r25
    216e:	68 f4       	brcc	.+26     	; 0x218a <memmove+0x20>
    2170:	fb 01       	movw	r30, r22
    2172:	dc 01       	movw	r26, r24
    2174:	e4 0f       	add	r30, r20
    2176:	f5 1f       	adc	r31, r21
    2178:	a4 0f       	add	r26, r20
    217a:	b5 1f       	adc	r27, r21
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <memmove+0x18>
    217e:	02 90       	ld	r0, -Z
    2180:	0e 92       	st	-X, r0
    2182:	41 50       	subi	r20, 0x01	; 1
    2184:	50 40       	sbci	r21, 0x00	; 0
    2186:	d8 f7       	brcc	.-10     	; 0x217e <memmove+0x14>
    2188:	08 95       	ret
    218a:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <memcpy>

0000218e <_exit>:
    218e:	f8 94       	cli

00002190 <__stop_program>:
    2190:	ff cf       	rjmp	.-2      	; 0x2190 <__stop_program>
