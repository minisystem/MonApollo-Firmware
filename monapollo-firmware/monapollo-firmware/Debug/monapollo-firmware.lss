
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003a44  00003af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a44  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d0  008002b0  008002b0  00003ca8  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  0000431c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002e0  00000000  00000000  00005250  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006365  00000000  00000000  00005530  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001722  00000000  00000000  0000b895  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002077  00000000  00000000  0000cfb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cd8  00000000  00000000  0000f030  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000192e  00000000  00000000  0000fd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002c85  00000000  00000000  00011636  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  000142bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_9>
      28:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e4 e4       	ldi	r30, 0x44	; 68
      78:	fa e3       	ldi	r31, 0x3A	; 58
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a0 38       	cpi	r26, 0x80	; 128
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 51 03 	call	0x6a2	; 0x6a2 <main>
      9a:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 b0 02 	lds	r24, 0x02B0
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 b0 02 	sts	0x02B0, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 b0 02 	sts	0x02B0, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 b0 02 	sts	0x02B0, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     1f6:	8d e0       	ldi	r24, 0x0D	; 13
     1f8:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     202:	08 95       	ret

00000204 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     204:	90 93 89 00 	sts	0x0089, r25
     208:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     20c:	20 91 84 00 	lds	r18, 0x0084
     210:	30 91 85 00 	lds	r19, 0x0085
     214:	82 17       	cp	r24, r18
     216:	93 07       	cpc	r25, r19
     218:	28 f4       	brcc	.+10     	; 0x224 <update_clock_rate+0x20>
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	90 93 85 00 	sts	0x0085, r25
     220:	80 93 84 00 	sts	0x0084, r24
     224:	08 95       	ret

00000226 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     226:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     228:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     22a:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     22c:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     22e:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     230:	8c 91       	ld	r24, X
     232:	87 70       	andi	r24, 0x07	; 7
     234:	82 b9       	out	0x02, r24	; 2
     236:	66 e0       	ldi	r22, 0x06	; 6
     238:	6a 95       	dec	r22
     23a:	f1 f7       	brne	.-4      	; 0x238 <set_control_voltage+0x12>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     23e:	ea ed       	ldi	r30, 0xDA	; 218
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	40 81       	ld	r20, Z
     244:	8c 91       	ld	r24, X
     246:	86 95       	lsr	r24
     248:	86 95       	lsr	r24
     24a:	86 95       	lsr	r24
     24c:	87 70       	andi	r24, 0x07	; 7
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	b9 01       	movw	r22, r18
     254:	02 c0       	rjmp	.+4      	; 0x25a <set_control_voltage+0x34>
     256:	66 0f       	add	r22, r22
     258:	77 1f       	adc	r23, r23
     25a:	8a 95       	dec	r24
     25c:	e2 f7       	brpl	.-8      	; 0x256 <set_control_voltage+0x30>
     25e:	cb 01       	movw	r24, r22
     260:	84 2b       	or	r24, r20
     262:	80 83       	st	Z, r24
     264:	76 e0       	ldi	r23, 0x06	; 6
     266:	7a 95       	dec	r23
     268:	f1 f7       	brne	.-4      	; 0x266 <set_control_voltage+0x40>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     26c:	80 81       	ld	r24, Z
     26e:	9c 91       	ld	r25, X
     270:	96 95       	lsr	r25
     272:	96 95       	lsr	r25
     274:	96 95       	lsr	r25
     276:	97 70       	andi	r25, 0x07	; 7
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_control_voltage+0x58>
     27a:	22 0f       	add	r18, r18
     27c:	33 1f       	adc	r19, r19
     27e:	9a 95       	dec	r25
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_control_voltage+0x54>
     282:	20 95       	com	r18
     284:	28 23       	and	r18, r24
     286:	20 83       	st	Z, r18
	
}	
     288:	08 95       	ret

0000028a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     28a:	83 b3       	in	r24, 0x13	; 19
     28c:	83 60       	ori	r24, 0x03	; 3
     28e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     294:	97 b1       	in	r25, 0x07	; 7
     296:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     298:	e9 ed       	ldi	r30, 0xD9	; 217
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	8f 60       	ori	r24, 0x0F	; 15
     2a0:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     2a2:	ea ed       	ldi	r30, 0xDA	; 218
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     2ac:	84 b3       	in	r24, 0x14	; 20
     2ae:	83 60       	ori	r24, 0x03	; 3
     2b0:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     2b2:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     2b4:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     2b6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     2b8:	a0 9a       	sbi	0x14, 0	; 20
}
     2ba:	08 95       	ret

000002bc <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	2e 97       	sbiw	r28, 0x0e	; 14
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     2d4:	28 e0       	ldi	r18, 0x08	; 8
     2d6:	29 83       	std	Y+1, r18	; 0x01
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	2a 83       	std	Y+2, r18	; 0x02
     2dc:	22 e0       	ldi	r18, 0x02	; 2
     2de:	2b 83       	std	Y+3, r18	; 0x03
     2e0:	24 e0       	ldi	r18, 0x04	; 4
     2e2:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2e4:	de 01       	movw	r26, r28
     2e6:	15 96       	adiw	r26, 0x05	; 5
     2e8:	e7 ee       	ldi	r30, 0xE7	; 231
     2ea:	f1 e0       	ldi	r31, 0x01	; 1
     2ec:	2a e0       	ldi	r18, 0x0A	; 10
     2ee:	01 90       	ld	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2f6:	2f ef       	ldi	r18, 0xFF	; 255
     2f8:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2fa:	ea ed       	ldi	r30, 0xDA	; 218
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	20 81       	ld	r18, Z
     300:	20 61       	ori	r18, 0x10	; 16
     302:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     304:	20 81       	ld	r18, Z
     306:	2f 7e       	andi	r18, 0xEF	; 239
     308:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     30a:	06 2f       	mov	r16, r22
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	de 01       	movw	r26, r28
     310:	a0 0f       	add	r26, r16
     312:	b1 1f       	adc	r27, r17
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	2c 91       	ld	r18, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     31c:	20 81       	ld	r18, Z
     31e:	20 62       	ori	r18, 0x20	; 32
     320:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     322:	20 81       	ld	r18, Z
     324:	2f 7d       	andi	r18, 0xDF	; 223
     326:	20 83       	st	Z, r18
     328:	48 2f       	mov	r20, r24
     32a:	59 2f       	mov	r21, r25
     32c:	87 e2       	ldi	r24, 0x27	; 39
     32e:	40 31       	cpi	r20, 0x10	; 16
     330:	58 07       	cpc	r21, r24
     332:	10 f0       	brcs	.+4      	; 0x338 <display_dec+0x7c>
     334:	4f e0       	ldi	r20, 0x0F	; 15
     336:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     338:	ca 01       	movw	r24, r20
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	9a 01       	movw	r18, r20
     344:	36 95       	lsr	r19
     346:	27 95       	ror	r18
     348:	28 0f       	add	r18, r24
     34a:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     34c:	c9 01       	movw	r24, r18
     34e:	92 95       	swap	r25
     350:	82 95       	swap	r24
     352:	8f 70       	andi	r24, 0x0F	; 15
     354:	89 27       	eor	r24, r25
     356:	9f 70       	andi	r25, 0x0F	; 15
     358:	89 27       	eor	r24, r25
     35a:	82 0f       	add	r24, r18
     35c:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     35e:	29 2f       	mov	r18, r25
     360:	33 27       	eor	r19, r19
     362:	82 0f       	add	r24, r18
     364:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     366:	96 95       	lsr	r25
     368:	87 95       	ror	r24
     36a:	96 95       	lsr	r25
     36c:	87 95       	ror	r24
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
	r = number - q2 * 10;
     372:	28 2f       	mov	r18, r24
     374:	22 0f       	add	r18, r18
     376:	32 2f       	mov	r19, r18
     378:	33 0f       	add	r19, r19
     37a:	33 0f       	add	r19, r19
     37c:	23 0f       	add	r18, r19
     37e:	e4 2f       	mov	r30, r20
     380:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	ea 30       	cpi	r30, 0x0A	; 10
     388:	10 f4       	brcc	.+4      	; 0x38e <display_dec+0xd2>
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	68 0f       	add	r22, r24
     390:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     392:	9b 01       	movw	r18, r22
     394:	36 95       	lsr	r19
     396:	27 95       	ror	r18
     398:	36 95       	lsr	r19
     39a:	27 95       	ror	r18
     39c:	ab 01       	movw	r20, r22
     39e:	56 95       	lsr	r21
     3a0:	47 95       	ror	r20
     3a2:	24 0f       	add	r18, r20
     3a4:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     3a6:	c9 01       	movw	r24, r18
     3a8:	92 95       	swap	r25
     3aa:	82 95       	swap	r24
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	89 27       	eor	r24, r25
     3b0:	9f 70       	andi	r25, 0x0F	; 15
     3b2:	89 27       	eor	r24, r25
     3b4:	82 0f       	add	r24, r18
     3b6:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     3b8:	29 2f       	mov	r18, r25
     3ba:	33 27       	eor	r19, r19
     3bc:	82 0f       	add	r24, r18
     3be:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     3c0:	96 95       	lsr	r25
     3c2:	87 95       	ror	r24
     3c4:	96 95       	lsr	r25
     3c6:	87 95       	ror	r24
     3c8:	96 95       	lsr	r25
     3ca:	87 95       	ror	r24
	r = qa - q3 * 10;
     3cc:	98 2f       	mov	r25, r24
     3ce:	99 0f       	add	r25, r25
     3d0:	29 2f       	mov	r18, r25
     3d2:	22 0f       	add	r18, r18
     3d4:	22 0f       	add	r18, r18
     3d6:	92 0f       	add	r25, r18
     3d8:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	6a 30       	cpi	r22, 0x0A	; 10
     3de:	08 f4       	brcc	.+2      	; 0x3e2 <display_dec+0x126>
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3e4:	41 ef       	ldi	r20, 0xF1	; 241
     3e6:	51 e0       	ldi	r21, 0x01	; 1
     3e8:	da 01       	movw	r26, r20
     3ea:	a6 0f       	add	r26, r22
     3ec:	b1 1d       	adc	r27, r1
     3ee:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3f0:	28 2f       	mov	r18, r24
     3f2:	26 95       	lsr	r18
     3f4:	26 95       	lsr	r18
     3f6:	98 2f       	mov	r25, r24
     3f8:	96 95       	lsr	r25
     3fa:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3fc:	29 2f       	mov	r18, r25
     3fe:	22 95       	swap	r18
     400:	2f 70       	andi	r18, 0x0F	; 15
     402:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     404:	96 95       	lsr	r25
     406:	96 95       	lsr	r25
     408:	96 95       	lsr	r25
	r = qb - q4 * 10;
     40a:	29 2f       	mov	r18, r25
     40c:	22 0f       	add	r18, r18
     40e:	62 2f       	mov	r22, r18
     410:	66 0f       	add	r22, r22
     412:	66 0f       	add	r22, r22
     414:	26 0f       	add	r18, r22
     416:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     418:	da 01       	movw	r26, r20
     41a:	a8 0f       	add	r26, r24
     41c:	b1 1d       	adc	r27, r1
     41e:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     420:	4e 0f       	add	r20, r30
     422:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     424:	fa 01       	movw	r30, r20
     426:	40 81       	ld	r20, Z
     428:	40 93 b3 02 	sts	0x02B3, r20
	digit_index[1] = tens_place;
     42c:	30 93 b4 02 	sts	0x02B4, r19
	digit_index[2] = hunds_place;
     430:	20 93 b5 02 	sts	0x02B5, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	8a 30       	cpi	r24, 0x0A	; 10
     438:	08 f4       	brcc	.+2      	; 0x43c <display_dec+0x180>
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     43e:	90 93 b6 02 	sts	0x02B6, r25

	cathode_byte = dec[digit_index[place]];
     442:	f8 01       	movw	r30, r16
     444:	ed 54       	subi	r30, 0x4D	; 77
     446:	fd 4f       	sbci	r31, 0xFD	; 253
     448:	80 81       	ld	r24, Z
     44a:	fe 01       	movw	r30, r28
     44c:	e8 0f       	add	r30, r24
     44e:	f1 1d       	adc	r31, r1
     450:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     452:	90 91 07 03 	lds	r25, 0x0307
     456:	92 30       	cpi	r25, 0x02	; 2
     458:	11 f4       	brne	.+4      	; 0x45e <display_dec+0x1a2>
     45a:	80 62       	ori	r24, 0x20	; 32
     45c:	03 c0       	rjmp	.+6      	; 0x464 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     45e:	91 30       	cpi	r25, 0x01	; 1
     460:	09 f4       	brne	.+2      	; 0x464 <display_dec+0x1a8>
     462:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     464:	80 95       	com	r24
     466:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     468:	ea ed       	ldi	r30, 0xDA	; 218
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	80 61       	ori	r24, 0x10	; 16
     470:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     472:	80 81       	ld	r24, Z
     474:	8f 7e       	andi	r24, 0xEF	; 239
     476:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     478:	2e 96       	adiw	r28, 0x0e	; 14
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     48e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     490:	66 23       	and	r22, r22
     492:	69 f4       	brne	.+26     	; 0x4ae <update_display+0x20>

		
			
		display_dec(number, place);
     494:	c0 91 b7 02 	lds	r28, 0x02B7
     498:	6c 2f       	mov	r22, r28
     49a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     49e:	8c 2f       	mov	r24, r28
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	80 93 b7 02 	sts	0x02B7, r24
     4a6:	c3 30       	cpi	r28, 0x03	; 3
     4a8:	11 f4       	brne	.+4      	; 0x4ae <update_display+0x20>
		{
			place = 0;
     4aa:	10 92 b7 02 	sts	0x02B7, r1
		
		
	}
	
	
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <__vector_10>:
#include "hardware.h"
#include "tune.h"
#include "display.h"
#include "clock.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	8f 93       	push	r24
     4be:	9f 93       	push	r25
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     4c4:	80 91 7c 03 	lds	r24, 0x037C
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     4cc:	80 91 7d 03 	lds	r24, 0x037D
     4d0:	88 23       	and	r24, r24
     4d2:	a1 f4       	brne	.+40     	; 0x4fc <__vector_10+0x4a>
		count_finished = FALSE;
     4d4:	10 92 7a 03 	sts	0x037A, r1
		no_overflow = TRUE;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     4de:	80 93 7d 03 	sts	0x037D, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     4e2:	e1 e8       	ldi	r30, 0x81	; 129
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	90 91 7b 03 	lds	r25, 0x037B
     4ec:	89 2b       	or	r24, r25
     4ee:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4f0:	ef e6       	ldi	r30, 0x6F	; 111
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	81 60       	ori	r24, 0x01	; 1
     4f8:	80 83       	st	Z, r24
     4fa:	11 c0       	rjmp	.+34     	; 0x51e <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4fc:	e4 e8       	ldi	r30, 0x84	; 132
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	91 81       	ldd	r25, Z+1	; 0x01
     504:	90 93 79 03 	sts	0x0379, r25
     508:	80 93 78 03 	sts	0x0378, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     50c:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	80 93 7a 03 	sts	0x037A, r24
		period_counter = 0;
     516:	10 92 7d 03 	sts	0x037D, r1
		TCNT1 = 0; //reset timer/counter 1
     51a:	11 82       	std	Z+1, r1	; 0x01
     51c:	10 82       	st	Z, r1
	}
	
	
	
	
}
     51e:	ff 91       	pop	r31
     520:	ef 91       	pop	r30
     522:	9f 91       	pop	r25
     524:	8f 91       	pop	r24
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     530:	1f 92       	push	r1
     532:	0f 92       	push	r0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     53a:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     556:	80 91 87 03 	lds	r24, 0x0387
     55a:	86 95       	lsr	r24
     55c:	90 91 88 03 	lds	r25, 0x0388
     560:	98 17       	cp	r25, r24
     562:	09 f4       	brne	.+2      	; 0x566 <__vector_7+0x1e>
		
		
		PORTB &= ~ (1<<ARP_SYNC_LED);
     564:	2f 98       	cbi	0x05, 7	; 5
	}		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     566:	80 91 88 03 	lds	r24, 0x0388
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	80 93 88 03 	sts	0x0388, r24
     570:	90 91 87 03 	lds	r25, 0x0387
     574:	89 17       	cp	r24, r25
     576:	19 f4       	brne	.+6      	; 0x57e <__vector_7+0x36>
		//PORTB ^= (1<<ARP_SYNC_LED);
		system_clock.ppqn_counter = 0;
     578:	10 92 88 03 	sts	0x0388, r1
		PORTB |= (1<<ARP_SYNC_LED);
     57c:	2f 9a       	sbi	0x05, 7	; 5
		
	}
	
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     58c:	68 3f       	cpi	r22, 0xF8	; 248
     58e:	19 f0       	breq	.+6      	; 0x596 <real_time_event+0xa>
     590:	6a 3f       	cpi	r22, 0xFA	; 250
     592:	c1 f4       	brne	.+48     	; 0x5c4 <real_time_event+0x38>
     594:	15 c0       	rjmp	.+42     	; 0x5c0 <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     596:	80 91 8e 03 	lds	r24, 0x038E
     59a:	8f 5f       	subi	r24, 0xFF	; 255
     59c:	80 93 8e 03 	sts	0x038E, r24
     5a0:	90 91 8d 03 	lds	r25, 0x038D
     5a4:	89 17       	cp	r24, r25
     5a6:	71 f4       	brne	.+28     	; 0x5c4 <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     5a8:	2c 9a       	sbi	0x05, 4	; 5
     5aa:	86 e0       	ldi	r24, 0x06	; 6
     5ac:	8a 95       	dec	r24
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <real_time_event+0x20>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     5b2:	85 b1       	in	r24, 0x05	; 5
     5b4:	80 58       	subi	r24, 0x80	; 128
     5b6:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     5b8:	10 92 8e 03 	sts	0x038E, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     5bc:	2c 98       	cbi	0x05, 4	; 5
     5be:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     5c0:	10 92 8e 03 	sts	0x038E, r1
     5c4:	08 95       	ret

000005c6 <note_off_event>:
		PORTF |= (1<<GATE);
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     5c6:	84 2f       	mov	r24, r20
	remove_note(note);
     5c8:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     5cc:	80 91 b9 02 	lds	r24, 0x02B9
     5d0:	81 50       	subi	r24, 0x01	; 1
     5d2:	80 93 b9 02 	sts	0x02B9, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     5d6:	88 23       	and	r24, r24
     5d8:	09 f4       	brne	.+2      	; 0x5dc <note_off_event+0x16>
     5da:	89 98       	cbi	0x11, 1	; 17
     5dc:	08 95       	ret

000005de <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     5de:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     5e0:	90 91 ff 02 	lds	r25, 0x02FF
     5e4:	90 ff       	sbrs	r25, 0
     5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     5e8:	2c 9a       	sbi	0x05, 4	; 5
     5ea:	96 e0       	ldi	r25, 0x06	; 6
     5ec:	9a 95       	dec	r25
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <note_on_event+0xe>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     5f2:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	//value_to_display = note;
	midi_note_number = note;
     5f4:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) {
     5f8:	22 23       	and	r18, r18
     5fa:	59 f4       	brne	.+22     	; 0x612 <note_on_event+0x34>
		remove_note(note);
     5fc:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     600:	80 91 b9 02 	lds	r24, 0x02B9
     604:	81 50       	subi	r24, 0x01	; 1
     606:	80 93 b9 02 	sts	0x02B9, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     60a:	88 23       	and	r24, r24
     60c:	59 f4       	brne	.+22     	; 0x624 <note_on_event+0x46>
     60e:	89 98       	cbi	0x11, 1	; 17
     610:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     612:	62 2f       	mov	r22, r18
     614:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     618:	80 91 b9 02 	lds	r24, 0x02B9
     61c:	8f 5f       	subi	r24, 0xFF	; 255
     61e:	80 93 b9 02 	sts	0x02B9, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     622:	89 9a       	sbi	0x11, 1	; 17
     624:	08 95       	ret

00000626 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     626:	87 e2       	ldi	r24, 0x27	; 39
     628:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     62c:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     630:	88 e9       	ldi	r24, 0x98	; 152
     632:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     636:	08 95       	ret

00000638 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	4f 93       	push	r20
     648:	5f 93       	push	r21
     64a:	6f 93       	push	r22
     64c:	7f 93       	push	r23
     64e:	8f 93       	push	r24
     650:	9f 93       	push	r25
     652:	af 93       	push	r26
     654:	bf 93       	push	r27
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	0f 92       	push	r0
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     664:	80 91 c6 00 	lds	r24, 0x00C6
     668:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     66a:	83 e9       	ldi	r24, 0x93	; 147
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	ae 01       	movw	r20, r28
     672:	4f 5f       	subi	r20, 0xFF	; 255
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	0e 94 7e 18 	call	0x30fc	; 0x30fc <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	bf 91       	pop	r27
     686:	af 91       	pop	r26
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	7f 91       	pop	r23
     68e:	6f 91       	pop	r22
     690:	5f 91       	pop	r21
     692:	4f 91       	pop	r20
     694:	3f 91       	pop	r19
     696:	2f 91       	pop	r18
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     6a2:	c0 e8       	ldi	r28, 0x80	; 128
     6a4:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     6a6:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     6a8:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     6aa:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     6ac:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     6ae:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     6b0:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     6b2:	0e 94 a2 06 	call	0xd44	; 0xd44 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     6b6:	a9 ed       	ldi	r26, 0xD9	; 217
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	8c 91       	ld	r24, X
     6bc:	80 6c       	ori	r24, 0xC0	; 192
     6be:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     6c0:	ea ed       	ldi	r30, 0xDA	; 218
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	80 6c       	ori	r24, 0xC0	; 192
     6c8:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     6ca:	81 b1       	in	r24, 0x01	; 1
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     6d0:	92 b1       	in	r25, 0x02	; 2
     6d2:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     6d4:	8c 91       	ld	r24, X
     6d6:	80 63       	ori	r24, 0x30	; 48
     6d8:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     6da:	80 81       	ld	r24, Z
     6dc:	8f 7c       	andi	r24, 0xCF	; 207
     6de:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     6e0:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     6e2:	ec ed       	ldi	r30, 0xDC	; 220
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	80 62       	ori	r24, 0x20	; 32
     6ea:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     6ec:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     6ee:	ed ed       	ldi	r30, 0xDD	; 221
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	80 62       	ori	r24, 0x20	; 32
     6f6:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     6f8:	80 81       	ld	r24, Z
     6fa:	8f 7d       	andi	r24, 0xDF	; 223
     6fc:	80 83       	st	Z, r24
	DATA_BUS = 0;
     6fe:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     700:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     704:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     708:	0e 94 45 01 	call	0x28a	; 0x28a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     70c:	c3 e9       	ldi	r28, 0x93	; 147
     70e:	d3 e0       	ldi	r29, 0x03	; 3
     710:	ce 01       	movw	r24, r28
     712:	0e 94 4d 18 	call	0x309a	; 0x309a <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     716:	ce 01       	movw	r24, r28
     718:	6f ee       	ldi	r22, 0xEF	; 239
     71a:	72 e0       	ldi	r23, 0x02	; 2
     71c:	0e 94 15 18 	call	0x302a	; 0x302a <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     720:	ce 01       	movw	r24, r28
     722:	63 ee       	ldi	r22, 0xE3	; 227
     724:	72 e0       	ldi	r23, 0x02	; 2
     726:	0e 94 19 18 	call	0x3032	; 0x3032 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     72a:	ce 01       	movw	r24, r28
     72c:	66 ec       	ldi	r22, 0xC6	; 198
     72e:	72 e0       	ldi	r23, 0x02	; 2
     730:	0e 94 39 18 	call	0x3072	; 0x3072 <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     734:	0e 94 13 03 	call	0x626	; 0x626 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     738:	0e 94 c7 06 	call	0xd8e	; 0xd8e <update_spi>
	
	
	current_patch.number = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     742:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     744:	0e 94 7d 14 	call	0x28fa	; 0x28fa <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	0e 94 40 09 	call	0x1280	; 0x1280 <load_patch>
	
	setup_system_clock();
     74e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     752:	88 e1       	ldi	r24, 0x18	; 24
     754:	80 93 87 03 	sts	0x0387, r24

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     758:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     75a:	0f 2e       	mov	r0, r31
     75c:	f0 e8       	ldi	r31, 0x80	; 128
     75e:	ef 2e       	mov	r14, r31
     760:	f3 e0       	ldi	r31, 0x03	; 3
     762:	ff 2e       	mov	r15, r31
     764:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     766:	0f 2e       	mov	r0, r31
     768:	f7 e0       	ldi	r31, 0x07	; 7
     76a:	cf 2e       	mov	r12, r31
     76c:	f3 e0       	ldi	r31, 0x03	; 3
     76e:	df 2e       	mov	r13, r31
     770:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     772:	bb 24       	eor	r11, r11
     774:	68 94       	set
     776:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     778:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     780:	80 91 fd 01 	lds	r24, 0x01FD
     784:	90 91 fe 01 	lds	r25, 0x01FE
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     78e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <scan_pots>
		update_control_voltages();
     792:	0e 94 83 04 	call	0x906	; 0x906 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     796:	80 91 b8 02 	lds	r24, 0x02B8
     79a:	98 2f       	mov	r25, r24
     79c:	9f 5f       	subi	r25, 0xFF	; 255
     79e:	90 93 b8 02 	sts	0x02B8, r25
     7a2:	85 30       	cpi	r24, 0x05	; 5
     7a4:	51 f7       	brne	.-44     	; 0x77a <main+0xd8>
		{
			switch_timer = 0;
     7a6:	10 92 b8 02 	sts	0x02B8, r1
			switch_press = 0; //reset global switch press flag
     7aa:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     7ae:	f7 01       	movw	r30, r14
     7b0:	c0 81       	ld	r28, Z
     7b2:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <read_switch_port>
     7b6:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     7b8:	f6 01       	movw	r30, r12
     7ba:	90 81       	ld	r25, Z
     7bc:	91 30       	cpi	r25, 0x01	; 1
     7be:	11 f4       	brne	.+4      	; 0x7c4 <main+0x122>
     7c0:	cd 2f       	mov	r28, r29
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <main+0x124>
     7c4:	c0 e0       	ldi	r28, 0x00	; 0
     7c6:	c8 2b       	or	r28, r24
     7c8:	f7 01       	movw	r30, r14
     7ca:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     7cc:	0e 94 c7 06 	call	0xd8e	; 0xd8e <update_spi>
			if (switch_press) { 
     7d0:	80 91 c1 02 	lds	r24, 0x02C1
     7d4:	88 23       	and	r24, r24
     7d6:	39 f0       	breq	.+14     	; 0x7e6 <main+0x144>
				update_patch();
     7d8:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     7dc:	f6 01       	movw	r30, r12
     7de:	80 81       	ld	r24, Z
     7e0:	88 23       	and	r24, r24
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <main+0x144>
     7e4:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     7e6:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <update_patch_programmer>
     7ea:	c7 cf       	rjmp	.-114    	; 0x77a <main+0xd8>

000007ec <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	c0 e0       	ldi	r28, 0x00	; 0
     800:	d1 e0       	ldi	r29, 0x01	; 1
     802:	02 ec       	ldi	r16, 0xC2	; 194
     804:	12 e0       	ldi	r17, 0x02	; 2
     806:	0f 2e       	mov	r0, r31
     808:	fc e3       	ldi	r31, 0x3C	; 60
     80a:	cf 2e       	mov	r12, r31
     80c:	dd 24       	eor	r13, r13
     80e:	f0 2d       	mov	r31, r0
     810:	cc 0e       	add	r12, r28
     812:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     814:	0f 2e       	mov	r0, r31
     816:	f7 e0       	ldi	r31, 0x07	; 7
     818:	ef 2e       	mov	r14, r31
     81a:	f3 e0       	ldi	r31, 0x03	; 3
     81c:	ff 2e       	mov	r15, r31
     81e:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     820:	bb 24       	eor	r11, r11
     822:	68 94       	set
     824:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     826:	88 81       	ld	r24, Y
     828:	99 81       	ldd	r25, Y+1	; 0x01
     82a:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     82e:	90 93 bc 02 	sts	0x02BC, r25
     832:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     836:	e8 81       	ld	r30, Y
     838:	f9 81       	ldd	r31, Y+1	; 0x01
     83a:	40 81       	ld	r20, Z
     83c:	21 81       	ldd	r18, Z+1	; 0x01
     83e:	52 2f       	mov	r21, r18
     840:	53 70       	andi	r21, 0x03	; 3
     842:	84 1b       	sub	r24, r20
     844:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     846:	95 95       	asr	r25
     848:	87 95       	ror	r24
     84a:	95 95       	asr	r25
     84c:	87 95       	ror	r24
     84e:	84 0f       	add	r24, r20
     850:	95 1f       	adc	r25, r21
     852:	80 83       	st	Z, r24
     854:	89 2f       	mov	r24, r25
     856:	83 70       	andi	r24, 0x03	; 3
     858:	2c 7f       	andi	r18, 0xFC	; 252
     85a:	28 2b       	or	r18, r24
     85c:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     85e:	e9 91       	ld	r30, Y+
     860:	f9 91       	ld	r31, Y+
     862:	92 81       	ldd	r25, Z+2	; 0x02
     864:	20 81       	ld	r18, Z
     866:	81 81       	ldd	r24, Z+1	; 0x01
     868:	38 2f       	mov	r19, r24
     86a:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     86c:	d7 01       	movw	r26, r14
     86e:	8c 91       	ld	r24, X
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	19 f0       	breq	.+6      	; 0x87a <scan_pots+0x8e>
     874:	83 81       	ldd	r24, Z+3	; 0x03
     876:	88 23       	and	r24, r24
     878:	24 f0       	brlt	.+8      	; 0x882 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     87a:	f8 01       	movw	r30, r16
     87c:	31 83       	std	Z+1, r19	; 0x01
     87e:	20 83       	st	Z, r18
     880:	14 c0       	rjmp	.+40     	; 0x8aa <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     882:	49 2f       	mov	r20, r25
     884:	43 50       	subi	r20, 0x03	; 3
     886:	c9 01       	movw	r24, r18
     888:	95 95       	asr	r25
     88a:	87 95       	ror	r24
     88c:	95 95       	asr	r25
     88e:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     890:	94 2f       	mov	r25, r20
     892:	98 1b       	sub	r25, r24
     894:	9a 3f       	cpi	r25, 0xFA	; 250
     896:	48 f4       	brcc	.+18     	; 0x8aa <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     898:	d8 01       	movw	r26, r16
     89a:	11 96       	adiw	r26, 0x01	; 1
     89c:	3c 93       	st	X, r19
     89e:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     8a0:	83 81       	ldd	r24, Z+3	; 0x03
     8a2:	8f 77       	andi	r24, 0x7F	; 127
     8a4:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     8a6:	f7 01       	movw	r30, r14
     8a8:	b0 82       	st	Z, r11
     8aa:	0e 5f       	subi	r16, 0xFE	; 254
     8ac:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     8ae:	cc 15       	cp	r28, r12
     8b0:	dd 05       	cpc	r29, r13
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <scan_pots+0xca>
     8b4:	b8 cf       	rjmp	.-144    	; 0x826 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     8b6:	8c e7       	ldi	r24, 0x7C	; 124
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     8be:	90 93 bc 02 	sts	0x02BC, r25
     8c2:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     8c6:	20 91 7c 01 	lds	r18, 0x017C
     8ca:	40 91 7d 01 	lds	r20, 0x017D
     8ce:	34 2f       	mov	r19, r20
     8d0:	33 70       	andi	r19, 0x03	; 3
     8d2:	82 1b       	sub	r24, r18
     8d4:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     8d6:	95 95       	asr	r25
     8d8:	87 95       	ror	r24
     8da:	95 95       	asr	r25
     8dc:	87 95       	ror	r24
     8de:	28 0f       	add	r18, r24
     8e0:	39 1f       	adc	r19, r25
     8e2:	20 93 7c 01 	sts	0x017C, r18
     8e6:	83 2f       	mov	r24, r19
     8e8:	83 70       	andi	r24, 0x03	; 3
     8ea:	4c 7f       	andi	r20, 0xFC	; 252
     8ec:	48 2b       	or	r20, r24
     8ee:	40 93 7d 01 	sts	0x017D, r20
	
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	08 95       	ret

00000906 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     90a:	60 91 c2 02 	lds	r22, 0x02C2
     90e:	70 91 c3 02 	lds	r23, 0x02C3
     912:	62 95       	swap	r22
     914:	72 95       	swap	r23
     916:	70 7f       	andi	r23, 0xF0	; 240
     918:	76 27       	eor	r23, r22
     91a:	60 7f       	andi	r22, 0xF0	; 240
     91c:	76 27       	eor	r23, r22
     91e:	84 ee       	ldi	r24, 0xE4	; 228
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     926:	60 91 c4 02 	lds	r22, 0x02C4
     92a:	70 91 c5 02 	lds	r23, 0x02C5
     92e:	62 95       	swap	r22
     930:	72 95       	swap	r23
     932:	70 7f       	andi	r23, 0xF0	; 240
     934:	76 27       	eor	r23, r22
     936:	60 7f       	andi	r22, 0xF0	; 240
     938:	76 27       	eor	r23, r22
     93a:	83 ee       	ldi	r24, 0xE3	; 227
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     942:	60 91 c6 02 	lds	r22, 0x02C6
     946:	70 91 c7 02 	lds	r23, 0x02C7
     94a:	66 0f       	add	r22, r22
     94c:	77 1f       	adc	r23, r23
     94e:	66 0f       	add	r22, r22
     950:	77 1f       	adc	r23, r23
     952:	66 0f       	add	r22, r22
     954:	77 1f       	adc	r23, r23
     956:	82 ee       	ldi	r24, 0xE2	; 226
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     95e:	60 91 c8 02 	lds	r22, 0x02C8
     962:	70 91 c9 02 	lds	r23, 0x02C9
     966:	62 95       	swap	r22
     968:	72 95       	swap	r23
     96a:	70 7f       	andi	r23, 0xF0	; 240
     96c:	76 27       	eor	r23, r22
     96e:	60 7f       	andi	r22, 0xF0	; 240
     970:	76 27       	eor	r23, r22
     972:	82 eb       	ldi	r24, 0xB2	; 178
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     97a:	60 91 ca 02 	lds	r22, 0x02CA
     97e:	70 91 cb 02 	lds	r23, 0x02CB
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	66 0f       	add	r22, r22
     988:	77 1f       	adc	r23, r23
     98a:	66 0f       	add	r22, r22
     98c:	77 1f       	adc	r23, r23
     98e:	81 ee       	ldi	r24, 0xE1	; 225
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     996:	60 91 cc 02 	lds	r22, 0x02CC
     99a:	70 91 cd 02 	lds	r23, 0x02CD
     99e:	62 95       	swap	r22
     9a0:	72 95       	swap	r23
     9a2:	70 7f       	andi	r23, 0xF0	; 240
     9a4:	76 27       	eor	r23, r22
     9a6:	60 7f       	andi	r22, 0xF0	; 240
     9a8:	76 27       	eor	r23, r22
     9aa:	80 ee       	ldi	r24, 0xE0	; 224
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     9b2:	60 91 ce 02 	lds	r22, 0x02CE
     9b6:	70 91 cf 02 	lds	r23, 0x02CF
     9ba:	62 95       	swap	r22
     9bc:	72 95       	swap	r23
     9be:	70 7f       	andi	r23, 0xF0	; 240
     9c0:	76 27       	eor	r23, r22
     9c2:	60 7f       	andi	r22, 0xF0	; 240
     9c4:	76 27       	eor	r23, r22
     9c6:	8f ed       	ldi	r24, 0xDF	; 223
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     9ce:	60 91 d0 02 	lds	r22, 0x02D0
     9d2:	70 91 d1 02 	lds	r23, 0x02D1
     9d6:	62 95       	swap	r22
     9d8:	72 95       	swap	r23
     9da:	70 7f       	andi	r23, 0xF0	; 240
     9dc:	76 27       	eor	r23, r22
     9de:	60 7f       	andi	r22, 0xF0	; 240
     9e0:	76 27       	eor	r23, r22
     9e2:	8e ed       	ldi	r24, 0xDE	; 222
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     9ea:	80 91 d4 02 	lds	r24, 0x02D4
     9ee:	90 91 d5 02 	lds	r25, 0x02D5
     9f2:	c0 e0       	ldi	r28, 0x00	; 0
     9f4:	d2 e0       	ldi	r29, 0x02	; 2
     9f6:	c8 1b       	sub	r28, r24
     9f8:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     9fa:	60 91 73 03 	lds	r22, 0x0373
     9fe:	70 91 74 03 	lds	r23, 0x0374
     a02:	60 50       	subi	r22, 0x00	; 0
     a04:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     a06:	80 91 d2 02 	lds	r24, 0x02D2
     a0a:	90 91 d3 02 	lds	r25, 0x02D3
     a0e:	68 1b       	sub	r22, r24
     a10:	79 0b       	sbc	r23, r25
     a12:	6c 0f       	add	r22, r28
     a14:	7d 1f       	adc	r23, r29
     a16:	8d ed       	ldi	r24, 0xDD	; 221
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     a1e:	60 91 75 03 	lds	r22, 0x0375
     a22:	70 91 76 03 	lds	r23, 0x0376
     a26:	6c 0f       	add	r22, r28
     a28:	7d 1f       	adc	r23, r29
     a2a:	8c ed       	ldi	r24, 0xDC	; 220
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     a32:	60 91 d6 02 	lds	r22, 0x02D6
     a36:	70 91 d7 02 	lds	r23, 0x02D7
     a3a:	62 95       	swap	r22
     a3c:	72 95       	swap	r23
     a3e:	70 7f       	andi	r23, 0xF0	; 240
     a40:	76 27       	eor	r23, r22
     a42:	60 7f       	andi	r22, 0xF0	; 240
     a44:	76 27       	eor	r23, r22
     a46:	8b ed       	ldi	r24, 0xDB	; 219
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     a4e:	60 91 da 02 	lds	r22, 0x02DA
     a52:	70 91 db 02 	lds	r23, 0x02DB
     a56:	62 95       	swap	r22
     a58:	72 95       	swap	r23
     a5a:	70 7f       	andi	r23, 0xF0	; 240
     a5c:	76 27       	eor	r23, r22
     a5e:	60 7f       	andi	r22, 0xF0	; 240
     a60:	76 27       	eor	r23, r22
     a62:	8a ed       	ldi	r24, 0xDA	; 218
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     a6a:	60 91 dc 02 	lds	r22, 0x02DC
     a6e:	70 91 dd 02 	lds	r23, 0x02DD
     a72:	62 95       	swap	r22
     a74:	72 95       	swap	r23
     a76:	70 7f       	andi	r23, 0xF0	; 240
     a78:	76 27       	eor	r23, r22
     a7a:	60 7f       	andi	r22, 0xF0	; 240
     a7c:	76 27       	eor	r23, r22
     a7e:	89 ed       	ldi	r24, 0xD9	; 217
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     a86:	60 91 7c 01 	lds	r22, 0x017C
     a8a:	80 91 7d 01 	lds	r24, 0x017D
     a8e:	78 2f       	mov	r23, r24
     a90:	73 70       	andi	r23, 0x03	; 3
     a92:	62 95       	swap	r22
     a94:	72 95       	swap	r23
     a96:	70 7f       	andi	r23, 0xF0	; 240
     a98:	76 27       	eor	r23, r22
     a9a:	60 7f       	andi	r22, 0xF0	; 240
     a9c:	76 27       	eor	r23, r22
     a9e:	88 ed       	ldi	r24, 0xD8	; 216
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     aa6:	60 91 de 02 	lds	r22, 0x02DE
     aaa:	70 91 df 02 	lds	r23, 0x02DF
     aae:	62 95       	swap	r22
     ab0:	72 95       	swap	r23
     ab2:	70 7f       	andi	r23, 0xF0	; 240
     ab4:	76 27       	eor	r23, r22
     ab6:	60 7f       	andi	r22, 0xF0	; 240
     ab8:	76 27       	eor	r23, r22
     aba:	87 ed       	ldi	r24, 0xD7	; 215
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     ac2:	60 91 e0 02 	lds	r22, 0x02E0
     ac6:	70 91 e1 02 	lds	r23, 0x02E1
     aca:	62 95       	swap	r22
     acc:	72 95       	swap	r23
     ace:	70 7f       	andi	r23, 0xF0	; 240
     ad0:	76 27       	eor	r23, r22
     ad2:	60 7f       	andi	r22, 0xF0	; 240
     ad4:	76 27       	eor	r23, r22
     ad6:	86 ed       	ldi	r24, 0xD6	; 214
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     ade:	60 91 e2 02 	lds	r22, 0x02E2
     ae2:	70 91 e3 02 	lds	r23, 0x02E3
     ae6:	62 95       	swap	r22
     ae8:	72 95       	swap	r23
     aea:	70 7f       	andi	r23, 0xF0	; 240
     aec:	76 27       	eor	r23, r22
     aee:	60 7f       	andi	r22, 0xF0	; 240
     af0:	76 27       	eor	r23, r22
     af2:	85 ed       	ldi	r24, 0xD5	; 213
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     afa:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     afe:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     b00:	88 30       	cpi	r24, 0x08	; 8
     b02:	08 f4       	brcc	.+2      	; 0xb06 <update_control_voltages+0x200>
     b04:	c8 e0       	ldi	r28, 0x08	; 8
	value_to_display = current_patch.number + 100*midi_clock.divider; //100*note;
     b06:	60 91 03 03 	lds	r22, 0x0303
     b0a:	40 91 8d 03 	lds	r20, 0x038D
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	24 e6       	ldi	r18, 0x64	; 100
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	42 9f       	mul	r20, r18
     b16:	c0 01       	movw	r24, r0
     b18:	43 9f       	mul	r20, r19
     b1a:	90 0d       	add	r25, r0
     b1c:	52 9f       	mul	r21, r18
     b1e:	90 0d       	add	r25, r0
     b20:	11 24       	eor	r1, r1
     b22:	86 0f       	add	r24, r22
     b24:	91 1d       	adc	r25, r1
     b26:	90 93 fe 01 	sts	0x01FE, r25
     b2a:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     b2e:	8c 2f       	mov	r24, r28
     b30:	88 50       	subi	r24, 0x08	; 8
     b32:	6f e0       	ldi	r22, 0x0F	; 15
     b34:	73 e0       	ldi	r23, 0x03	; 3
     b36:	0e 94 a6 14 	call	0x294c	; 0x294c <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     b3a:	bc 01       	movw	r22, r24
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	20 91 e6 02 	lds	r18, 0x02E6
     b44:	30 91 e7 02 	lds	r19, 0x02E7
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	0e 94 82 1c 	call	0x3904	; 0x3904 <__mulsi3>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	07 2e       	mov	r0, r23
     b56:	7a e0       	ldi	r23, 0x0A	; 10
     b58:	b6 95       	lsr	r27
     b5a:	a7 95       	ror	r26
     b5c:	97 95       	ror	r25
     b5e:	87 95       	ror	r24
     b60:	7a 95       	dec	r23
     b62:	d1 f7       	brne	.-12     	; 0xb58 <update_control_voltages+0x252>
     b64:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     b66:	60 91 e4 02 	lds	r22, 0x02E4
     b6a:	70 91 e5 02 	lds	r23, 0x02E5
     b6e:	62 95       	swap	r22
     b70:	72 95       	swap	r23
     b72:	70 7f       	andi	r23, 0xF0	; 240
     b74:	76 27       	eor	r23, r22
     b76:	60 7f       	andi	r22, 0xF0	; 240
     b78:	76 27       	eor	r23, r22
     b7a:	86 0f       	add	r24, r22
     b7c:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     b7e:	bc 01       	movw	r22, r24
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	60 30       	cpi	r22, 0x00	; 0
     b84:	78 07       	cpc	r23, r24
     b86:	10 f0       	brcs	.+4      	; 0xb8c <update_control_voltages+0x286>
     b88:	6f ef       	ldi	r22, 0xFF	; 255
     b8a:	7f e3       	ldi	r23, 0x3F	; 63
     b8c:	84 ed       	ldi	r24, 0xD4	; 212
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     b94:	60 91 e8 02 	lds	r22, 0x02E8
     b98:	70 91 e9 02 	lds	r23, 0x02E9
     b9c:	62 95       	swap	r22
     b9e:	72 95       	swap	r23
     ba0:	70 7f       	andi	r23, 0xF0	; 240
     ba2:	76 27       	eor	r23, r22
     ba4:	60 7f       	andi	r22, 0xF0	; 240
     ba6:	76 27       	eor	r23, r22
     ba8:	82 ed       	ldi	r24, 0xD2	; 210
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     bb0:	60 91 ea 02 	lds	r22, 0x02EA
     bb4:	70 91 eb 02 	lds	r23, 0x02EB
     bb8:	62 95       	swap	r22
     bba:	72 95       	swap	r23
     bbc:	70 7f       	andi	r23, 0xF0	; 240
     bbe:	76 27       	eor	r23, r22
     bc0:	60 7f       	andi	r22, 0xF0	; 240
     bc2:	76 27       	eor	r23, r22
     bc4:	81 ed       	ldi	r24, 0xD1	; 209
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     bcc:	60 91 ec 02 	lds	r22, 0x02EC
     bd0:	70 91 ed 02 	lds	r23, 0x02ED
     bd4:	62 95       	swap	r22
     bd6:	72 95       	swap	r23
     bd8:	70 7f       	andi	r23, 0xF0	; 240
     bda:	76 27       	eor	r23, r22
     bdc:	60 7f       	andi	r22, 0xF0	; 240
     bde:	76 27       	eor	r23, r22
     be0:	80 ed       	ldi	r24, 0xD0	; 208
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     be8:	60 91 ee 02 	lds	r22, 0x02EE
     bec:	70 91 ef 02 	lds	r23, 0x02EF
     bf0:	62 95       	swap	r22
     bf2:	72 95       	swap	r23
     bf4:	70 7f       	andi	r23, 0xF0	; 240
     bf6:	76 27       	eor	r23, r22
     bf8:	60 7f       	andi	r22, 0xF0	; 240
     bfa:	76 27       	eor	r23, r22
     bfc:	8f ec       	ldi	r24, 0xCF	; 207
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     c04:	60 91 f0 02 	lds	r22, 0x02F0
     c08:	70 91 f1 02 	lds	r23, 0x02F1
     c0c:	62 95       	swap	r22
     c0e:	72 95       	swap	r23
     c10:	70 7f       	andi	r23, 0xF0	; 240
     c12:	76 27       	eor	r23, r22
     c14:	60 7f       	andi	r22, 0xF0	; 240
     c16:	76 27       	eor	r23, r22
     c18:	8e ec       	ldi	r24, 0xCE	; 206
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     c20:	60 91 f2 02 	lds	r22, 0x02F2
     c24:	70 91 f3 02 	lds	r23, 0x02F3
     c28:	62 95       	swap	r22
     c2a:	72 95       	swap	r23
     c2c:	70 7f       	andi	r23, 0xF0	; 240
     c2e:	76 27       	eor	r23, r22
     c30:	60 7f       	andi	r22, 0xF0	; 240
     c32:	76 27       	eor	r23, r22
     c34:	8d ec       	ldi	r24, 0xCD	; 205
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     c3c:	60 91 f4 02 	lds	r22, 0x02F4
     c40:	70 91 f5 02 	lds	r23, 0x02F5
     c44:	62 95       	swap	r22
     c46:	72 95       	swap	r23
     c48:	70 7f       	andi	r23, 0xF0	; 240
     c4a:	76 27       	eor	r23, r22
     c4c:	60 7f       	andi	r22, 0xF0	; 240
     c4e:	76 27       	eor	r23, r22
     c50:	8c ec       	ldi	r24, 0xCC	; 204
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     c58:	60 91 f8 02 	lds	r22, 0x02F8
     c5c:	70 91 f9 02 	lds	r23, 0x02F9
     c60:	62 95       	swap	r22
     c62:	72 95       	swap	r23
     c64:	70 7f       	andi	r23, 0xF0	; 240
     c66:	76 27       	eor	r23, r22
     c68:	60 7f       	andi	r22, 0xF0	; 240
     c6a:	76 27       	eor	r23, r22
     c6c:	8a ec       	ldi	r24, 0xCA	; 202
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     c74:	60 91 f6 02 	lds	r22, 0x02F6
     c78:	70 91 f7 02 	lds	r23, 0x02F7
     c7c:	62 95       	swap	r22
     c7e:	72 95       	swap	r23
     c80:	70 7f       	andi	r23, 0xF0	; 240
     c82:	76 27       	eor	r23, r22
     c84:	60 7f       	andi	r22, 0xF0	; 240
     c86:	76 27       	eor	r23, r22
     c88:	8b ec       	ldi	r24, 0xCB	; 203
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     c90:	60 91 fc 02 	lds	r22, 0x02FC
     c94:	70 91 fd 02 	lds	r23, 0x02FD
     c98:	62 95       	swap	r22
     c9a:	72 95       	swap	r23
     c9c:	70 7f       	andi	r23, 0xF0	; 240
     c9e:	76 27       	eor	r23, r22
     ca0:	60 7f       	andi	r22, 0xF0	; 240
     ca2:	76 27       	eor	r23, r22
     ca4:	88 ec       	ldi	r24, 0xC8	; 200
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     cac:	60 91 fa 02 	lds	r22, 0x02FA
     cb0:	70 91 fb 02 	lds	r23, 0x02FB
     cb4:	62 95       	swap	r22
     cb6:	72 95       	swap	r23
     cb8:	70 7f       	andi	r23, 0xF0	; 240
     cba:	76 27       	eor	r23, r22
     cbc:	60 7f       	andi	r22, 0xF0	; 240
     cbe:	76 27       	eor	r23, r22
     cc0:	89 ec       	ldi	r24, 0xC9	; 201
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     cc8:	8c 2f       	mov	r24, r28
     cca:	6f e0       	ldi	r22, 0x0F	; 15
     ccc:	0e 94 20 0c 	call	0x1840	; 0x1840 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     cd0:	61 e5       	ldi	r22, 0x51	; 81
     cd2:	73 e0       	ldi	r23, 0x03	; 3
     cd4:	0e 94 a6 14 	call	0x294c	; 0x294c <interpolate_pitch_cv>
     cd8:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     cda:	86 ee       	ldi	r24, 0xE6	; 230
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     ce2:	8c 2f       	mov	r24, r28
     ce4:	60 ef       	ldi	r22, 0xF0	; 240
     ce6:	0e 94 20 0c 	call	0x1840	; 0x1840 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     cea:	6f e2       	ldi	r22, 0x2F	; 47
     cec:	73 e0       	ldi	r23, 0x03	; 3
     cee:	0e 94 a6 14 	call	0x294c	; 0x294c <interpolate_pitch_cv>
     cf2:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     cf4:	85 ee       	ldi	r24, 0xE5	; 229
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     cfc:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     cfe:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     d00:	20 91 88 01 	lds	r18, 0x0188
     d04:	80 91 89 01 	lds	r24, 0x0189
     d08:	38 2f       	mov	r19, r24
     d0a:	33 70       	andi	r19, 0x03	; 3
     d0c:	83 ef       	ldi	r24, 0xF3	; 243
     d0e:	94 e0       	ldi	r25, 0x04	; 4
     d10:	82 1b       	sub	r24, r18
     d12:	93 0b       	sbc	r25, r19
     d14:	90 93 8a 03 	sts	0x038A, r25
     d18:	80 93 89 03 	sts	0x0389, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     d1c:	20 91 8b 03 	lds	r18, 0x038B
     d20:	30 91 8c 03 	lds	r19, 0x038C
     d24:	82 17       	cp	r24, r18
     d26:	93 07       	cpc	r25, r19
     d28:	11 f0       	breq	.+4      	; 0xd2e <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
     d2a:	0e 94 02 01 	call	0x204	; 0x204 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     d2e:	80 91 89 03 	lds	r24, 0x0389
     d32:	90 91 8a 03 	lds	r25, 0x038A
     d36:	90 93 8c 03 	sts	0x038C, r25
     d3a:	80 93 8b 03 	sts	0x038B, r24
	
}			
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     d44:	84 b1       	in	r24, 0x04	; 4
     d46:	87 62       	ori	r24, 0x27	; 39
     d48:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     d4a:	ec ed       	ldi	r30, 0xDC	; 220
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8c 65       	ori	r24, 0x5C	; 92
     d52:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     d54:	85 b1       	in	r24, 0x05	; 5
     d56:	89 7d       	andi	r24, 0xD9	; 217
     d58:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     d5a:	ed ed       	ldi	r30, 0xDD	; 221
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	83 7f       	andi	r24, 0xF3	; 243
     d62:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     d64:	80 e5       	ldi	r24, 0x50	; 80
     d66:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     d68:	80 81       	ld	r24, Z
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     d6e:	80 81       	ld	r24, Z
     d70:	87 7f       	andi	r24, 0xF7	; 247
     d72:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     d74:	80 81       	ld	r24, Z
     d76:	88 60       	ori	r24, 0x08	; 8
     d78:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     d7a:	80 81       	ld	r24, Z
     d7c:	8f 7e       	andi	r24, 0xEF	; 239
     d7e:	80 83       	st	Z, r24
	
}
     d80:	08 95       	ret

00000d82 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     d82:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     d84:	0d b4       	in	r0, 0x2d	; 45
     d86:	07 fe       	sbrs	r0, 7
     d88:	fd cf       	rjmp	.-6      	; 0xd84 <spi_shift_byte+0x2>
	return SPDR;
     d8a:	8e b5       	in	r24, 0x2e	; 46
	
}
     d8c:	08 95       	ret

00000d8e <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     d8e:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     d90:	80 91 02 03 	lds	r24, 0x0302
     d94:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     d98:	90 91 c1 02 	lds	r25, 0x02C1
     d9c:	98 2b       	or	r25, r24
     d9e:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     da2:	20 91 bf 02 	lds	r18, 0x02BF
     da6:	98 2f       	mov	r25, r24
     da8:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     daa:	89 2f       	mov	r24, r25
     dac:	82 27       	eor	r24, r18
     dae:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     db2:	89 23       	and	r24, r25
     db4:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     db8:	90 91 7e 03 	lds	r25, 0x037E
     dbc:	89 27       	eor	r24, r25
     dbe:	80 93 7e 03 	sts	0x037E, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     dc2:	80 91 01 03 	lds	r24, 0x0301
     dc6:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     dca:	90 91 c1 02 	lds	r25, 0x02C1
     dce:	98 2b       	or	r25, r24
     dd0:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     dd4:	20 91 bd 02 	lds	r18, 0x02BD
     dd8:	98 2f       	mov	r25, r24
     dda:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     ddc:	89 2f       	mov	r24, r25
     dde:	82 27       	eor	r24, r18
     de0:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     de4:	89 23       	and	r24, r25
     de6:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     dea:	90 91 7f 03 	lds	r25, 0x037F
     dee:	89 27       	eor	r24, r25
     df0:	80 93 7f 03 	sts	0x037F, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     df4:	80 91 00 03 	lds	r24, 0x0300
     df8:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     dfc:	80 91 ff 02 	lds	r24, 0x02FF
     e00:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     e04:	80 91 07 03 	lds	r24, 0x0307
     e08:	83 30       	cpi	r24, 0x03	; 3
     e0a:	11 f4       	brne	.+4      	; 0xe10 <update_spi+0x82>
     e0c:	20 e8       	ldi	r18, 0x80	; 128
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <update_spi+0x84>
     e10:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
     e12:	80 91 80 03 	lds	r24, 0x0380
     e16:	88 1f       	adc	r24, r24
     e18:	88 27       	eor	r24, r24
     e1a:	88 1f       	adc	r24, r24
     e1c:	82 95       	swap	r24
     e1e:	88 0f       	add	r24, r24
     e20:	88 0f       	add	r24, r24
     e22:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     e24:	90 91 fe 02 	lds	r25, 0x02FE
     e28:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     e2a:	82 2b       	or	r24, r18
     e2c:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     e30:	ed ed       	ldi	r30, 0xDD	; 221
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	87 7f       	andi	r24, 0xF7	; 247
     e38:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     e3a:	80 81       	ld	r24, Z
     e3c:	88 60       	ori	r24, 0x08	; 8
     e3e:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     e40:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     e42:	08 95       	ret

00000e44 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     e44:	a0 e0       	ldi	r26, 0x00	; 0
     e46:	b1 e0       	ldi	r27, 0x01	; 1
     e48:	9d 01       	movw	r18, r26
     e4a:	24 5c       	subi	r18, 0xC4	; 196
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     e4e:	ed 91       	ld	r30, X+
     e50:	fc 91       	ld	r31, X
     e52:	11 97       	sbiw	r26, 0x01	; 1
     e54:	80 81       	ld	r24, Z
     e56:	41 81       	ldd	r20, Z+1	; 0x01
     e58:	94 2f       	mov	r25, r20
     e5a:	93 70       	andi	r25, 0x03	; 3
     e5c:	95 95       	asr	r25
     e5e:	87 95       	ror	r24
     e60:	95 95       	asr	r25
     e62:	87 95       	ror	r24
     e64:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     e66:	ed 91       	ld	r30, X+
     e68:	fd 91       	ld	r31, X+
     e6a:	83 81       	ldd	r24, Z+3	; 0x03
     e6c:	80 68       	ori	r24, 0x80	; 128
     e6e:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
     e70:	a2 17       	cp	r26, r18
     e72:	b3 07       	cpc	r27, r19
     e74:	61 f7       	brne	.-40     	; 0xe4e <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     e76:	08 95       	ret

00000e78 <unlock_pots>:

void unlock_pots(void) {
     e78:	e0 e0       	ldi	r30, 0x00	; 0
     e7a:	f1 e0       	ldi	r31, 0x01	; 1
     e7c:	cf 01       	movw	r24, r30
     e7e:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
     e80:	a1 91       	ld	r26, Z+
     e82:	b1 91       	ld	r27, Z+
     e84:	13 96       	adiw	r26, 0x03	; 3
     e86:	2c 91       	ld	r18, X
     e88:	13 97       	sbiw	r26, 0x03	; 3
     e8a:	2f 77       	andi	r18, 0x7F	; 127
     e8c:	13 96       	adiw	r26, 0x03	; 3
     e8e:	2c 93       	st	X, r18
     e90:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
     e92:	e8 17       	cp	r30, r24
     e94:	f9 07       	cpc	r31, r25
     e96:	a1 f7       	brne	.-24     	; 0xe80 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
     e98:	08 95       	ret

00000e9a <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	ab 97       	sbiw	r28, 0x2b	; 43
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     eb2:	ee ed       	ldi	r30, 0xDE	; 222
     eb4:	f2 e0       	ldi	r31, 0x02	; 2
     eb6:	20 91 de 02 	lds	r18, 0x02DE
     eba:	82 2f       	mov	r24, r18
     ebc:	82 95       	swap	r24
     ebe:	80 7f       	andi	r24, 0xF0	; 240
     ec0:	22 95       	swap	r18
     ec2:	2f 70       	andi	r18, 0x0F	; 15
     ec4:	90 91 df 02 	lds	r25, 0x02DF
     ec8:	93 70       	andi	r25, 0x03	; 3
     eca:	92 95       	swap	r25
     ecc:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     ece:	df 01       	movw	r26, r30
     ed0:	5a 97       	sbiw	r26, 0x1a	; 26
     ed2:	3c 91       	ld	r19, X
     ed4:	53 2f       	mov	r21, r19
     ed6:	55 0f       	add	r21, r21
     ed8:	55 0f       	add	r21, r21
     eda:	4a 81       	ldd	r20, Y+2	; 0x02
     edc:	43 70       	andi	r20, 0x03	; 3
     ede:	45 2b       	or	r20, r21
     ee0:	4a 83       	std	Y+2, r20	; 0x02
     ee2:	63 2f       	mov	r22, r19
     ee4:	62 95       	swap	r22
     ee6:	66 95       	lsr	r22
     ee8:	66 95       	lsr	r22
     eea:	63 70       	andi	r22, 0x03	; 3
     eec:	11 96       	adiw	r26, 0x01	; 1
     eee:	4c 91       	ld	r20, X
     ef0:	43 70       	andi	r20, 0x03	; 3
     ef2:	44 0f       	add	r20, r20
     ef4:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     ef6:	df 01       	movw	r26, r30
     ef8:	58 97       	sbiw	r26, 0x18	; 24
     efa:	3c 91       	ld	r19, X
     efc:	53 2f       	mov	r21, r19
     efe:	52 95       	swap	r21
     f00:	50 7f       	andi	r21, 0xF0	; 240
     f02:	46 2b       	or	r20, r22
     f04:	45 2b       	or	r20, r21
     f06:	4b 83       	std	Y+3, r20	; 0x03
     f08:	63 2f       	mov	r22, r19
     f0a:	62 95       	swap	r22
     f0c:	6f 70       	andi	r22, 0x0F	; 15
     f0e:	11 96       	adiw	r26, 0x01	; 1
     f10:	4c 91       	ld	r20, X
     f12:	43 70       	andi	r20, 0x03	; 3
     f14:	42 95       	swap	r20
     f16:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     f18:	df 01       	movw	r26, r30
     f1a:	56 97       	sbiw	r26, 0x16	; 22
     f1c:	3c 91       	ld	r19, X
     f1e:	53 2f       	mov	r21, r19
     f20:	52 95       	swap	r21
     f22:	55 0f       	add	r21, r21
     f24:	55 0f       	add	r21, r21
     f26:	50 7c       	andi	r21, 0xC0	; 192
     f28:	46 2b       	or	r20, r22
     f2a:	45 2b       	or	r20, r21
     f2c:	4c 83       	std	Y+4, r20	; 0x04
     f2e:	11 96       	adiw	r26, 0x01	; 1
     f30:	4c 91       	ld	r20, X
     f32:	42 95       	swap	r20
     f34:	44 0f       	add	r20, r20
     f36:	44 0f       	add	r20, r20
     f38:	40 7c       	andi	r20, 0xC0	; 192
     f3a:	36 95       	lsr	r19
     f3c:	36 95       	lsr	r19
     f3e:	34 2b       	or	r19, r20
     f40:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     f42:	df 01       	movw	r26, r30
     f44:	54 97       	sbiw	r26, 0x14	; 20
     f46:	3c 91       	ld	r19, X
     f48:	3e 83       	std	Y+6, r19	; 0x06
     f4a:	11 96       	adiw	r26, 0x01	; 1
     f4c:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     f4e:	df 01       	movw	r26, r30
     f50:	52 97       	sbiw	r26, 0x12	; 18
     f52:	3c 91       	ld	r19, X
     f54:	53 2f       	mov	r21, r19
     f56:	55 0f       	add	r21, r21
     f58:	55 0f       	add	r21, r21
     f5a:	43 70       	andi	r20, 0x03	; 3
     f5c:	45 2b       	or	r20, r21
     f5e:	4f 83       	std	Y+7, r20	; 0x07
     f60:	63 2f       	mov	r22, r19
     f62:	62 95       	swap	r22
     f64:	66 95       	lsr	r22
     f66:	66 95       	lsr	r22
     f68:	63 70       	andi	r22, 0x03	; 3
     f6a:	11 96       	adiw	r26, 0x01	; 1
     f6c:	4c 91       	ld	r20, X
     f6e:	43 70       	andi	r20, 0x03	; 3
     f70:	44 0f       	add	r20, r20
     f72:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     f74:	df 01       	movw	r26, r30
     f76:	50 97       	sbiw	r26, 0x10	; 16
     f78:	3c 91       	ld	r19, X
     f7a:	53 2f       	mov	r21, r19
     f7c:	52 95       	swap	r21
     f7e:	50 7f       	andi	r21, 0xF0	; 240
     f80:	46 2b       	or	r20, r22
     f82:	45 2b       	or	r20, r21
     f84:	48 87       	std	Y+8, r20	; 0x08
     f86:	63 2f       	mov	r22, r19
     f88:	62 95       	swap	r22
     f8a:	6f 70       	andi	r22, 0x0F	; 15
     f8c:	11 96       	adiw	r26, 0x01	; 1
     f8e:	4c 91       	ld	r20, X
     f90:	43 70       	andi	r20, 0x03	; 3
     f92:	42 95       	swap	r20
     f94:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     f96:	df 01       	movw	r26, r30
     f98:	1e 97       	sbiw	r26, 0x0e	; 14
     f9a:	3c 91       	ld	r19, X
     f9c:	53 2f       	mov	r21, r19
     f9e:	52 95       	swap	r21
     fa0:	55 0f       	add	r21, r21
     fa2:	55 0f       	add	r21, r21
     fa4:	50 7c       	andi	r21, 0xC0	; 192
     fa6:	46 2b       	or	r20, r22
     fa8:	45 2b       	or	r20, r21
     faa:	49 87       	std	Y+9, r20	; 0x09
     fac:	11 96       	adiw	r26, 0x01	; 1
     fae:	4c 91       	ld	r20, X
     fb0:	42 95       	swap	r20
     fb2:	44 0f       	add	r20, r20
     fb4:	44 0f       	add	r20, r20
     fb6:	40 7c       	andi	r20, 0xC0	; 192
     fb8:	36 95       	lsr	r19
     fba:	36 95       	lsr	r19
     fbc:	34 2b       	or	r19, r20
     fbe:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     fc0:	df 01       	movw	r26, r30
     fc2:	1c 97       	sbiw	r26, 0x0c	; 12
     fc4:	3c 91       	ld	r19, X
     fc6:	3b 87       	std	Y+11, r19	; 0x0b
     fc8:	11 96       	adiw	r26, 0x01	; 1
     fca:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     fcc:	df 01       	movw	r26, r30
     fce:	1a 97       	sbiw	r26, 0x0a	; 10
     fd0:	3c 91       	ld	r19, X
     fd2:	53 2f       	mov	r21, r19
     fd4:	55 0f       	add	r21, r21
     fd6:	55 0f       	add	r21, r21
     fd8:	43 70       	andi	r20, 0x03	; 3
     fda:	45 2b       	or	r20, r21
     fdc:	4c 87       	std	Y+12, r20	; 0x0c
     fde:	63 2f       	mov	r22, r19
     fe0:	62 95       	swap	r22
     fe2:	66 95       	lsr	r22
     fe4:	66 95       	lsr	r22
     fe6:	63 70       	andi	r22, 0x03	; 3
     fe8:	11 96       	adiw	r26, 0x01	; 1
     fea:	4c 91       	ld	r20, X
     fec:	43 70       	andi	r20, 0x03	; 3
     fee:	44 0f       	add	r20, r20
     ff0:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
     ff2:	df 01       	movw	r26, r30
     ff4:	18 97       	sbiw	r26, 0x08	; 8
     ff6:	3c 91       	ld	r19, X
     ff8:	53 2f       	mov	r21, r19
     ffa:	52 95       	swap	r21
     ffc:	50 7f       	andi	r21, 0xF0	; 240
     ffe:	46 2b       	or	r20, r22
    1000:	45 2b       	or	r20, r21
    1002:	4d 87       	std	Y+13, r20	; 0x0d
    1004:	63 2f       	mov	r22, r19
    1006:	62 95       	swap	r22
    1008:	6f 70       	andi	r22, 0x0F	; 15
    100a:	11 96       	adiw	r26, 0x01	; 1
    100c:	4c 91       	ld	r20, X
    100e:	43 70       	andi	r20, 0x03	; 3
    1010:	42 95       	swap	r20
    1012:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    1014:	df 01       	movw	r26, r30
    1016:	16 97       	sbiw	r26, 0x06	; 6
    1018:	3c 91       	ld	r19, X
    101a:	53 2f       	mov	r21, r19
    101c:	52 95       	swap	r21
    101e:	55 0f       	add	r21, r21
    1020:	55 0f       	add	r21, r21
    1022:	50 7c       	andi	r21, 0xC0	; 192
    1024:	46 2b       	or	r20, r22
    1026:	45 2b       	or	r20, r21
    1028:	4e 87       	std	Y+14, r20	; 0x0e
    102a:	11 96       	adiw	r26, 0x01	; 1
    102c:	4c 91       	ld	r20, X
    102e:	42 95       	swap	r20
    1030:	44 0f       	add	r20, r20
    1032:	44 0f       	add	r20, r20
    1034:	40 7c       	andi	r20, 0xC0	; 192
    1036:	36 95       	lsr	r19
    1038:	36 95       	lsr	r19
    103a:	34 2b       	or	r19, r20
    103c:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    103e:	df 01       	movw	r26, r30
    1040:	14 97       	sbiw	r26, 0x04	; 4
    1042:	3c 91       	ld	r19, X
    1044:	38 8b       	std	Y+16, r19	; 0x10
    1046:	11 96       	adiw	r26, 0x01	; 1
    1048:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    104a:	df 01       	movw	r26, r30
    104c:	12 97       	sbiw	r26, 0x02	; 2
    104e:	3c 91       	ld	r19, X
    1050:	53 2f       	mov	r21, r19
    1052:	55 0f       	add	r21, r21
    1054:	55 0f       	add	r21, r21
    1056:	43 70       	andi	r20, 0x03	; 3
    1058:	45 2b       	or	r20, r21
    105a:	49 8b       	std	Y+17, r20	; 0x11
    105c:	32 95       	swap	r19
    105e:	36 95       	lsr	r19
    1060:	36 95       	lsr	r19
    1062:	33 70       	andi	r19, 0x03	; 3
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	4c 91       	ld	r20, X
    1068:	43 70       	andi	r20, 0x03	; 3
    106a:	44 0f       	add	r20, r20
    106c:	44 0f       	add	r20, r20
    106e:	83 2b       	or	r24, r19
    1070:	84 2b       	or	r24, r20
    1072:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    1074:	80 91 e0 02 	lds	r24, 0x02E0
    1078:	38 2f       	mov	r19, r24
    107a:	32 95       	swap	r19
    107c:	33 0f       	add	r19, r19
    107e:	33 0f       	add	r19, r19
    1080:	30 7c       	andi	r19, 0xC0	; 192
    1082:	92 2b       	or	r25, r18
    1084:	93 2b       	or	r25, r19
    1086:	9b 8b       	std	Y+19, r25	; 0x13
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	92 95       	swap	r25
    108c:	99 0f       	add	r25, r25
    108e:	99 0f       	add	r25, r25
    1090:	90 7c       	andi	r25, 0xC0	; 192
    1092:	86 95       	lsr	r24
    1094:	86 95       	lsr	r24
    1096:	89 2b       	or	r24, r25
    1098:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    109a:	80 91 e2 02 	lds	r24, 0x02E2
    109e:	8d 8b       	std	Y+21, r24	; 0x15
    10a0:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    10a2:	80 91 e4 02 	lds	r24, 0x02E4
    10a6:	28 2f       	mov	r18, r24
    10a8:	22 0f       	add	r18, r18
    10aa:	22 0f       	add	r18, r18
    10ac:	93 70       	andi	r25, 0x03	; 3
    10ae:	92 2b       	or	r25, r18
    10b0:	9e 8b       	std	Y+22, r25	; 0x16
    10b2:	38 2f       	mov	r19, r24
    10b4:	32 95       	swap	r19
    10b6:	36 95       	lsr	r19
    10b8:	36 95       	lsr	r19
    10ba:	33 70       	andi	r19, 0x03	; 3
    10bc:	97 81       	ldd	r25, Z+7	; 0x07
    10be:	93 70       	andi	r25, 0x03	; 3
    10c0:	99 0f       	add	r25, r25
    10c2:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    10c4:	80 91 e6 02 	lds	r24, 0x02E6
    10c8:	28 2f       	mov	r18, r24
    10ca:	22 95       	swap	r18
    10cc:	20 7f       	andi	r18, 0xF0	; 240
    10ce:	93 2b       	or	r25, r19
    10d0:	92 2b       	or	r25, r18
    10d2:	9f 8b       	std	Y+23, r25	; 0x17
    10d4:	38 2f       	mov	r19, r24
    10d6:	32 95       	swap	r19
    10d8:	3f 70       	andi	r19, 0x0F	; 15
    10da:	91 85       	ldd	r25, Z+9	; 0x09
    10dc:	93 70       	andi	r25, 0x03	; 3
    10de:	92 95       	swap	r25
    10e0:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    10e2:	80 91 e8 02 	lds	r24, 0x02E8
    10e6:	28 2f       	mov	r18, r24
    10e8:	22 95       	swap	r18
    10ea:	22 0f       	add	r18, r18
    10ec:	22 0f       	add	r18, r18
    10ee:	20 7c       	andi	r18, 0xC0	; 192
    10f0:	93 2b       	or	r25, r19
    10f2:	92 2b       	or	r25, r18
    10f4:	98 8f       	std	Y+24, r25	; 0x18
    10f6:	93 85       	ldd	r25, Z+11	; 0x0b
    10f8:	92 95       	swap	r25
    10fa:	99 0f       	add	r25, r25
    10fc:	99 0f       	add	r25, r25
    10fe:	90 7c       	andi	r25, 0xC0	; 192
    1100:	86 95       	lsr	r24
    1102:	86 95       	lsr	r24
    1104:	89 2b       	or	r24, r25
    1106:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    1108:	80 91 ea 02 	lds	r24, 0x02EA
    110c:	8a 8f       	std	Y+26, r24	; 0x1a
    110e:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    1110:	80 91 ec 02 	lds	r24, 0x02EC
    1114:	28 2f       	mov	r18, r24
    1116:	22 0f       	add	r18, r18
    1118:	22 0f       	add	r18, r18
    111a:	93 70       	andi	r25, 0x03	; 3
    111c:	92 2b       	or	r25, r18
    111e:	9b 8f       	std	Y+27, r25	; 0x1b
    1120:	38 2f       	mov	r19, r24
    1122:	32 95       	swap	r19
    1124:	36 95       	lsr	r19
    1126:	36 95       	lsr	r19
    1128:	33 70       	andi	r19, 0x03	; 3
    112a:	97 85       	ldd	r25, Z+15	; 0x0f
    112c:	93 70       	andi	r25, 0x03	; 3
    112e:	99 0f       	add	r25, r25
    1130:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    1132:	80 91 ee 02 	lds	r24, 0x02EE
    1136:	28 2f       	mov	r18, r24
    1138:	22 95       	swap	r18
    113a:	20 7f       	andi	r18, 0xF0	; 240
    113c:	93 2b       	or	r25, r19
    113e:	92 2b       	or	r25, r18
    1140:	9c 8f       	std	Y+28, r25	; 0x1c
    1142:	38 2f       	mov	r19, r24
    1144:	32 95       	swap	r19
    1146:	3f 70       	andi	r19, 0x0F	; 15
    1148:	91 89       	ldd	r25, Z+17	; 0x11
    114a:	93 70       	andi	r25, 0x03	; 3
    114c:	92 95       	swap	r25
    114e:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    1150:	80 91 f0 02 	lds	r24, 0x02F0
    1154:	28 2f       	mov	r18, r24
    1156:	22 95       	swap	r18
    1158:	22 0f       	add	r18, r18
    115a:	22 0f       	add	r18, r18
    115c:	20 7c       	andi	r18, 0xC0	; 192
    115e:	93 2b       	or	r25, r19
    1160:	92 2b       	or	r25, r18
    1162:	9d 8f       	std	Y+29, r25	; 0x1d
    1164:	93 89       	ldd	r25, Z+19	; 0x13
    1166:	92 95       	swap	r25
    1168:	99 0f       	add	r25, r25
    116a:	99 0f       	add	r25, r25
    116c:	90 7c       	andi	r25, 0xC0	; 192
    116e:	86 95       	lsr	r24
    1170:	86 95       	lsr	r24
    1172:	89 2b       	or	r24, r25
    1174:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    1176:	80 91 f2 02 	lds	r24, 0x02F2
    117a:	8f 8f       	std	Y+31, r24	; 0x1f
    117c:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    117e:	80 91 f4 02 	lds	r24, 0x02F4
    1182:	28 2f       	mov	r18, r24
    1184:	22 0f       	add	r18, r18
    1186:	22 0f       	add	r18, r18
    1188:	93 70       	andi	r25, 0x03	; 3
    118a:	92 2b       	or	r25, r18
    118c:	98 a3       	lds	r25, 0x58
    118e:	38 2f       	mov	r19, r24
    1190:	32 95       	swap	r19
    1192:	36 95       	lsr	r19
    1194:	36 95       	lsr	r19
    1196:	33 70       	andi	r19, 0x03	; 3
    1198:	97 89       	ldd	r25, Z+23	; 0x17
    119a:	93 70       	andi	r25, 0x03	; 3
    119c:	99 0f       	add	r25, r25
    119e:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    11a0:	80 91 f6 02 	lds	r24, 0x02F6
    11a4:	28 2f       	mov	r18, r24
    11a6:	22 95       	swap	r18
    11a8:	20 7f       	andi	r18, 0xF0	; 240
    11aa:	93 2b       	or	r25, r19
    11ac:	92 2b       	or	r25, r18
    11ae:	99 a3       	lds	r25, 0x59
    11b0:	38 2f       	mov	r19, r24
    11b2:	32 95       	swap	r19
    11b4:	3f 70       	andi	r19, 0x0F	; 15
    11b6:	91 8d       	ldd	r25, Z+25	; 0x19
    11b8:	93 70       	andi	r25, 0x03	; 3
    11ba:	92 95       	swap	r25
    11bc:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    11be:	80 91 f8 02 	lds	r24, 0x02F8
    11c2:	28 2f       	mov	r18, r24
    11c4:	22 95       	swap	r18
    11c6:	22 0f       	add	r18, r18
    11c8:	22 0f       	add	r18, r18
    11ca:	20 7c       	andi	r18, 0xC0	; 192
    11cc:	93 2b       	or	r25, r19
    11ce:	92 2b       	or	r25, r18
    11d0:	9a a3       	lds	r25, 0x5a
    11d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    11d4:	92 95       	swap	r25
    11d6:	99 0f       	add	r25, r25
    11d8:	99 0f       	add	r25, r25
    11da:	90 7c       	andi	r25, 0xC0	; 192
    11dc:	86 95       	lsr	r24
    11de:	86 95       	lsr	r24
    11e0:	89 2b       	or	r24, r25
    11e2:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    11e4:	80 91 fa 02 	lds	r24, 0x02FA
    11e8:	8c a3       	lds	r24, 0x5c
    11ea:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    11ec:	80 91 fc 02 	lds	r24, 0x02FC
    11f0:	28 2f       	mov	r18, r24
    11f2:	22 0f       	add	r18, r18
    11f4:	22 0f       	add	r18, r18
    11f6:	93 70       	andi	r25, 0x03	; 3
    11f8:	92 2b       	or	r25, r18
    11fa:	9d a3       	lds	r25, 0x5d
    11fc:	82 95       	swap	r24
    11fe:	86 95       	lsr	r24
    1200:	86 95       	lsr	r24
    1202:	83 70       	andi	r24, 0x03	; 3
    1204:	2e a1       	lds	r18, 0x4e
    1206:	20 7f       	andi	r18, 0xF0	; 240
    1208:	97 8d       	ldd	r25, Z+31	; 0x1f
    120a:	93 70       	andi	r25, 0x03	; 3
    120c:	99 0f       	add	r25, r25
    120e:	99 0f       	add	r25, r25
    1210:	82 2b       	or	r24, r18
    1212:	89 2b       	or	r24, r25
    1214:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    1216:	80 91 fe 02 	lds	r24, 0x02FE
    121a:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    121c:	80 91 ff 02 	lds	r24, 0x02FF
    1220:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    1222:	80 91 00 03 	lds	r24, 0x0300
    1226:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    1228:	80 91 01 03 	lds	r24, 0x0301
    122c:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    122e:	80 91 02 03 	lds	r24, 0x0302
    1232:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    1234:	0e 94 22 07 	call	0xe44	; 0xe44 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    1238:	80 91 80 03 	lds	r24, 0x0380
    123c:	8f 77       	andi	r24, 0x7F	; 127
    123e:	80 93 80 03 	sts	0x0380, r24
	current_patch.mode = MEMORY;
    1242:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    1246:	21 2f       	mov	r18, r17
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8b e2       	ldi	r24, 0x2B	; 43
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	28 9f       	mul	r18, r24
    1250:	b0 01       	movw	r22, r0
    1252:	29 9f       	mul	r18, r25
    1254:	70 0d       	add	r23, r0
    1256:	38 9f       	mul	r19, r24
    1258:	70 0d       	add	r23, r0
    125a:	11 24       	eor	r1, r1
    125c:	60 50       	subi	r22, 0x00	; 0
    125e:	70 40       	sbci	r23, 0x00	; 0
    1260:	ce 01       	movw	r24, r28
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	4b e2       	ldi	r20, 0x2B	; 43
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__eeupd_block_m6450a>
}	
    126c:	ab 96       	adiw	r28, 0x2b	; 43
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	08 95       	ret

00001280 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	c3 54       	subi	r28, 0x43	; 67
    128c:	d0 40       	sbci	r29, 0x00	; 0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	2b e2       	ldi	r18, 0x2B	; 43
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	82 9f       	mul	r24, r18
    12a0:	b0 01       	movw	r22, r0
    12a2:	83 9f       	mul	r24, r19
    12a4:	70 0d       	add	r23, r0
    12a6:	92 9f       	mul	r25, r18
    12a8:	70 0d       	add	r23, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	60 50       	subi	r22, 0x00	; 0
    12ae:	70 40       	sbci	r23, 0x00	; 0
    12b0:	ce 01       	movw	r24, r28
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	4b e2       	ldi	r20, 0x2B	; 43
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    12bc:	ee ed       	ldi	r30, 0xDE	; 222
    12be:	f2 e0       	ldi	r31, 0x02	; 2
    12c0:	8a 89       	ldd	r24, Y+18	; 0x12
    12c2:	28 2f       	mov	r18, r24
    12c4:	22 95       	swap	r18
    12c6:	2f 70       	andi	r18, 0x0F	; 15
    12c8:	9b 89       	ldd	r25, Y+19	; 0x13
    12ca:	39 2f       	mov	r19, r25
    12cc:	32 95       	swap	r19
    12ce:	30 7f       	andi	r19, 0xF0	; 240
    12d0:	32 2b       	or	r19, r18
    12d2:	29 2f       	mov	r18, r25
    12d4:	22 95       	swap	r18
    12d6:	2f 70       	andi	r18, 0x0F	; 15
    12d8:	23 70       	andi	r18, 0x03	; 3
    12da:	30 93 de 02 	sts	0x02DE, r19
    12de:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    12e2:	df 01       	movw	r26, r30
    12e4:	5a 97       	sbiw	r26, 0x1a	; 26
    12e6:	4a 81       	ldd	r20, Y+2	; 0x02
    12e8:	46 95       	lsr	r20
    12ea:	46 95       	lsr	r20
    12ec:	2b 81       	ldd	r18, Y+3	; 0x03
    12ee:	32 2f       	mov	r19, r18
    12f0:	32 95       	swap	r19
    12f2:	33 0f       	add	r19, r19
    12f4:	33 0f       	add	r19, r19
    12f6:	30 7c       	andi	r19, 0xC0	; 192
    12f8:	43 2b       	or	r20, r19
    12fa:	32 2f       	mov	r19, r18
    12fc:	36 95       	lsr	r19
    12fe:	36 95       	lsr	r19
    1300:	33 70       	andi	r19, 0x03	; 3
    1302:	4c 93       	st	X, r20
    1304:	11 96       	adiw	r26, 0x01	; 1
    1306:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    1308:	df 01       	movw	r26, r30
    130a:	58 97       	sbiw	r26, 0x18	; 24
    130c:	32 2f       	mov	r19, r18
    130e:	32 95       	swap	r19
    1310:	3f 70       	andi	r19, 0x0F	; 15
    1312:	2c 81       	ldd	r18, Y+4	; 0x04
    1314:	42 2f       	mov	r20, r18
    1316:	42 95       	swap	r20
    1318:	40 7f       	andi	r20, 0xF0	; 240
    131a:	43 2b       	or	r20, r19
    131c:	32 2f       	mov	r19, r18
    131e:	32 95       	swap	r19
    1320:	3f 70       	andi	r19, 0x0F	; 15
    1322:	33 70       	andi	r19, 0x03	; 3
    1324:	4c 93       	st	X, r20
    1326:	11 96       	adiw	r26, 0x01	; 1
    1328:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    132a:	df 01       	movw	r26, r30
    132c:	56 97       	sbiw	r26, 0x16	; 22
    132e:	22 95       	swap	r18
    1330:	26 95       	lsr	r18
    1332:	26 95       	lsr	r18
    1334:	23 70       	andi	r18, 0x03	; 3
    1336:	3d 81       	ldd	r19, Y+5	; 0x05
    1338:	43 2f       	mov	r20, r19
    133a:	44 0f       	add	r20, r20
    133c:	44 0f       	add	r20, r20
    133e:	24 2b       	or	r18, r20
    1340:	32 95       	swap	r19
    1342:	36 95       	lsr	r19
    1344:	36 95       	lsr	r19
    1346:	33 70       	andi	r19, 0x03	; 3
    1348:	2c 93       	st	X, r18
    134a:	11 96       	adiw	r26, 0x01	; 1
    134c:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    134e:	df 01       	movw	r26, r30
    1350:	54 97       	sbiw	r26, 0x14	; 20
    1352:	4e 81       	ldd	r20, Y+6	; 0x06
    1354:	2f 81       	ldd	r18, Y+7	; 0x07
    1356:	32 2f       	mov	r19, r18
    1358:	33 70       	andi	r19, 0x03	; 3
    135a:	4c 93       	st	X, r20
    135c:	11 96       	adiw	r26, 0x01	; 1
    135e:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1360:	df 01       	movw	r26, r30
    1362:	52 97       	sbiw	r26, 0x12	; 18
    1364:	32 2f       	mov	r19, r18
    1366:	36 95       	lsr	r19
    1368:	36 95       	lsr	r19
    136a:	28 85       	ldd	r18, Y+8	; 0x08
    136c:	42 2f       	mov	r20, r18
    136e:	42 95       	swap	r20
    1370:	44 0f       	add	r20, r20
    1372:	44 0f       	add	r20, r20
    1374:	40 7c       	andi	r20, 0xC0	; 192
    1376:	43 2b       	or	r20, r19
    1378:	32 2f       	mov	r19, r18
    137a:	36 95       	lsr	r19
    137c:	36 95       	lsr	r19
    137e:	33 70       	andi	r19, 0x03	; 3
    1380:	4c 93       	st	X, r20
    1382:	11 96       	adiw	r26, 0x01	; 1
    1384:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1386:	df 01       	movw	r26, r30
    1388:	50 97       	sbiw	r26, 0x10	; 16
    138a:	32 2f       	mov	r19, r18
    138c:	32 95       	swap	r19
    138e:	3f 70       	andi	r19, 0x0F	; 15
    1390:	29 85       	ldd	r18, Y+9	; 0x09
    1392:	42 2f       	mov	r20, r18
    1394:	42 95       	swap	r20
    1396:	40 7f       	andi	r20, 0xF0	; 240
    1398:	43 2b       	or	r20, r19
    139a:	32 2f       	mov	r19, r18
    139c:	32 95       	swap	r19
    139e:	3f 70       	andi	r19, 0x0F	; 15
    13a0:	33 70       	andi	r19, 0x03	; 3
    13a2:	4c 93       	st	X, r20
    13a4:	11 96       	adiw	r26, 0x01	; 1
    13a6:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    13a8:	df 01       	movw	r26, r30
    13aa:	1e 97       	sbiw	r26, 0x0e	; 14
    13ac:	22 95       	swap	r18
    13ae:	26 95       	lsr	r18
    13b0:	26 95       	lsr	r18
    13b2:	23 70       	andi	r18, 0x03	; 3
    13b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b6:	43 2f       	mov	r20, r19
    13b8:	44 0f       	add	r20, r20
    13ba:	44 0f       	add	r20, r20
    13bc:	24 2b       	or	r18, r20
    13be:	32 95       	swap	r19
    13c0:	36 95       	lsr	r19
    13c2:	36 95       	lsr	r19
    13c4:	33 70       	andi	r19, 0x03	; 3
    13c6:	2c 93       	st	X, r18
    13c8:	11 96       	adiw	r26, 0x01	; 1
    13ca:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    13cc:	df 01       	movw	r26, r30
    13ce:	1c 97       	sbiw	r26, 0x0c	; 12
    13d0:	4b 85       	ldd	r20, Y+11	; 0x0b
    13d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    13d4:	32 2f       	mov	r19, r18
    13d6:	33 70       	andi	r19, 0x03	; 3
    13d8:	4c 93       	st	X, r20
    13da:	11 96       	adiw	r26, 0x01	; 1
    13dc:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    13de:	df 01       	movw	r26, r30
    13e0:	1a 97       	sbiw	r26, 0x0a	; 10
    13e2:	32 2f       	mov	r19, r18
    13e4:	36 95       	lsr	r19
    13e6:	36 95       	lsr	r19
    13e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    13ea:	42 2f       	mov	r20, r18
    13ec:	42 95       	swap	r20
    13ee:	44 0f       	add	r20, r20
    13f0:	44 0f       	add	r20, r20
    13f2:	40 7c       	andi	r20, 0xC0	; 192
    13f4:	43 2b       	or	r20, r19
    13f6:	32 2f       	mov	r19, r18
    13f8:	36 95       	lsr	r19
    13fa:	36 95       	lsr	r19
    13fc:	33 70       	andi	r19, 0x03	; 3
    13fe:	4c 93       	st	X, r20
    1400:	11 96       	adiw	r26, 0x01	; 1
    1402:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    1404:	df 01       	movw	r26, r30
    1406:	18 97       	sbiw	r26, 0x08	; 8
    1408:	32 2f       	mov	r19, r18
    140a:	32 95       	swap	r19
    140c:	3f 70       	andi	r19, 0x0F	; 15
    140e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1410:	42 2f       	mov	r20, r18
    1412:	42 95       	swap	r20
    1414:	40 7f       	andi	r20, 0xF0	; 240
    1416:	43 2b       	or	r20, r19
    1418:	32 2f       	mov	r19, r18
    141a:	32 95       	swap	r19
    141c:	3f 70       	andi	r19, 0x0F	; 15
    141e:	33 70       	andi	r19, 0x03	; 3
    1420:	4c 93       	st	X, r20
    1422:	11 96       	adiw	r26, 0x01	; 1
    1424:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    1426:	df 01       	movw	r26, r30
    1428:	16 97       	sbiw	r26, 0x06	; 6
    142a:	22 95       	swap	r18
    142c:	26 95       	lsr	r18
    142e:	26 95       	lsr	r18
    1430:	23 70       	andi	r18, 0x03	; 3
    1432:	3f 85       	ldd	r19, Y+15	; 0x0f
    1434:	43 2f       	mov	r20, r19
    1436:	44 0f       	add	r20, r20
    1438:	44 0f       	add	r20, r20
    143a:	24 2b       	or	r18, r20
    143c:	32 95       	swap	r19
    143e:	36 95       	lsr	r19
    1440:	36 95       	lsr	r19
    1442:	33 70       	andi	r19, 0x03	; 3
    1444:	2c 93       	st	X, r18
    1446:	11 96       	adiw	r26, 0x01	; 1
    1448:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    144a:	df 01       	movw	r26, r30
    144c:	14 97       	sbiw	r26, 0x04	; 4
    144e:	48 89       	ldd	r20, Y+16	; 0x10
    1450:	29 89       	ldd	r18, Y+17	; 0x11
    1452:	32 2f       	mov	r19, r18
    1454:	33 70       	andi	r19, 0x03	; 3
    1456:	4c 93       	st	X, r20
    1458:	11 96       	adiw	r26, 0x01	; 1
    145a:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    145c:	df 01       	movw	r26, r30
    145e:	12 97       	sbiw	r26, 0x02	; 2
    1460:	26 95       	lsr	r18
    1462:	26 95       	lsr	r18
    1464:	38 2f       	mov	r19, r24
    1466:	32 95       	swap	r19
    1468:	33 0f       	add	r19, r19
    146a:	33 0f       	add	r19, r19
    146c:	30 7c       	andi	r19, 0xC0	; 192
    146e:	23 2b       	or	r18, r19
    1470:	86 95       	lsr	r24
    1472:	86 95       	lsr	r24
    1474:	83 70       	andi	r24, 0x03	; 3
    1476:	2c 93       	st	X, r18
    1478:	11 96       	adiw	r26, 0x01	; 1
    147a:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    147c:	92 95       	swap	r25
    147e:	96 95       	lsr	r25
    1480:	96 95       	lsr	r25
    1482:	93 70       	andi	r25, 0x03	; 3
    1484:	8c 89       	ldd	r24, Y+20	; 0x14
    1486:	28 2f       	mov	r18, r24
    1488:	22 0f       	add	r18, r18
    148a:	22 0f       	add	r18, r18
    148c:	92 2b       	or	r25, r18
    148e:	82 95       	swap	r24
    1490:	86 95       	lsr	r24
    1492:	86 95       	lsr	r24
    1494:	83 70       	andi	r24, 0x03	; 3
    1496:	90 93 e0 02 	sts	0x02E0, r25
    149a:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    149c:	2d 89       	ldd	r18, Y+21	; 0x15
    149e:	8e 89       	ldd	r24, Y+22	; 0x16
    14a0:	98 2f       	mov	r25, r24
    14a2:	93 70       	andi	r25, 0x03	; 3
    14a4:	20 93 e2 02 	sts	0x02E2, r18
    14a8:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    14aa:	98 2f       	mov	r25, r24
    14ac:	96 95       	lsr	r25
    14ae:	96 95       	lsr	r25
    14b0:	8f 89       	ldd	r24, Y+23	; 0x17
    14b2:	28 2f       	mov	r18, r24
    14b4:	22 95       	swap	r18
    14b6:	22 0f       	add	r18, r18
    14b8:	22 0f       	add	r18, r18
    14ba:	20 7c       	andi	r18, 0xC0	; 192
    14bc:	29 2b       	or	r18, r25
    14be:	98 2f       	mov	r25, r24
    14c0:	96 95       	lsr	r25
    14c2:	96 95       	lsr	r25
    14c4:	93 70       	andi	r25, 0x03	; 3
    14c6:	20 93 e4 02 	sts	0x02E4, r18
    14ca:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    14cc:	98 2f       	mov	r25, r24
    14ce:	92 95       	swap	r25
    14d0:	9f 70       	andi	r25, 0x0F	; 15
    14d2:	88 8d       	ldd	r24, Y+24	; 0x18
    14d4:	28 2f       	mov	r18, r24
    14d6:	22 95       	swap	r18
    14d8:	20 7f       	andi	r18, 0xF0	; 240
    14da:	29 2b       	or	r18, r25
    14dc:	98 2f       	mov	r25, r24
    14de:	92 95       	swap	r25
    14e0:	9f 70       	andi	r25, 0x0F	; 15
    14e2:	93 70       	andi	r25, 0x03	; 3
    14e4:	20 93 e6 02 	sts	0x02E6, r18
    14e8:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    14ea:	82 95       	swap	r24
    14ec:	86 95       	lsr	r24
    14ee:	86 95       	lsr	r24
    14f0:	83 70       	andi	r24, 0x03	; 3
    14f2:	99 8d       	ldd	r25, Y+25	; 0x19
    14f4:	29 2f       	mov	r18, r25
    14f6:	22 0f       	add	r18, r18
    14f8:	22 0f       	add	r18, r18
    14fa:	82 2b       	or	r24, r18
    14fc:	92 95       	swap	r25
    14fe:	96 95       	lsr	r25
    1500:	96 95       	lsr	r25
    1502:	93 70       	andi	r25, 0x03	; 3
    1504:	80 93 e8 02 	sts	0x02E8, r24
    1508:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    150a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    150c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    150e:	98 2f       	mov	r25, r24
    1510:	93 70       	andi	r25, 0x03	; 3
    1512:	20 93 ea 02 	sts	0x02EA, r18
    1516:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    1518:	98 2f       	mov	r25, r24
    151a:	96 95       	lsr	r25
    151c:	96 95       	lsr	r25
    151e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1520:	28 2f       	mov	r18, r24
    1522:	22 95       	swap	r18
    1524:	22 0f       	add	r18, r18
    1526:	22 0f       	add	r18, r18
    1528:	20 7c       	andi	r18, 0xC0	; 192
    152a:	29 2b       	or	r18, r25
    152c:	98 2f       	mov	r25, r24
    152e:	96 95       	lsr	r25
    1530:	96 95       	lsr	r25
    1532:	93 70       	andi	r25, 0x03	; 3
    1534:	20 93 ec 02 	sts	0x02EC, r18
    1538:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    153a:	98 2f       	mov	r25, r24
    153c:	92 95       	swap	r25
    153e:	9f 70       	andi	r25, 0x0F	; 15
    1540:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1542:	28 2f       	mov	r18, r24
    1544:	22 95       	swap	r18
    1546:	20 7f       	andi	r18, 0xF0	; 240
    1548:	29 2b       	or	r18, r25
    154a:	98 2f       	mov	r25, r24
    154c:	92 95       	swap	r25
    154e:	9f 70       	andi	r25, 0x0F	; 15
    1550:	93 70       	andi	r25, 0x03	; 3
    1552:	20 93 ee 02 	sts	0x02EE, r18
    1556:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    1558:	82 95       	swap	r24
    155a:	86 95       	lsr	r24
    155c:	86 95       	lsr	r24
    155e:	83 70       	andi	r24, 0x03	; 3
    1560:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1562:	29 2f       	mov	r18, r25
    1564:	22 0f       	add	r18, r18
    1566:	22 0f       	add	r18, r18
    1568:	82 2b       	or	r24, r18
    156a:	92 95       	swap	r25
    156c:	96 95       	lsr	r25
    156e:	96 95       	lsr	r25
    1570:	93 70       	andi	r25, 0x03	; 3
    1572:	80 93 f0 02 	sts	0x02F0, r24
    1576:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    1578:	2f 8d       	ldd	r18, Y+31	; 0x1f
    157a:	88 a1       	lds	r24, 0x48
    157c:	98 2f       	mov	r25, r24
    157e:	93 70       	andi	r25, 0x03	; 3
    1580:	20 93 f2 02 	sts	0x02F2, r18
    1584:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1586:	98 2f       	mov	r25, r24
    1588:	96 95       	lsr	r25
    158a:	96 95       	lsr	r25
    158c:	89 a1       	lds	r24, 0x49
    158e:	28 2f       	mov	r18, r24
    1590:	22 95       	swap	r18
    1592:	22 0f       	add	r18, r18
    1594:	22 0f       	add	r18, r18
    1596:	20 7c       	andi	r18, 0xC0	; 192
    1598:	29 2b       	or	r18, r25
    159a:	98 2f       	mov	r25, r24
    159c:	96 95       	lsr	r25
    159e:	96 95       	lsr	r25
    15a0:	93 70       	andi	r25, 0x03	; 3
    15a2:	20 93 f4 02 	sts	0x02F4, r18
    15a6:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    15a8:	98 2f       	mov	r25, r24
    15aa:	92 95       	swap	r25
    15ac:	9f 70       	andi	r25, 0x0F	; 15
    15ae:	8a a1       	lds	r24, 0x4a
    15b0:	28 2f       	mov	r18, r24
    15b2:	22 95       	swap	r18
    15b4:	20 7f       	andi	r18, 0xF0	; 240
    15b6:	29 2b       	or	r18, r25
    15b8:	98 2f       	mov	r25, r24
    15ba:	92 95       	swap	r25
    15bc:	9f 70       	andi	r25, 0x0F	; 15
    15be:	93 70       	andi	r25, 0x03	; 3
    15c0:	20 93 f6 02 	sts	0x02F6, r18
    15c4:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    15c6:	82 95       	swap	r24
    15c8:	86 95       	lsr	r24
    15ca:	86 95       	lsr	r24
    15cc:	83 70       	andi	r24, 0x03	; 3
    15ce:	9b a1       	lds	r25, 0x4b
    15d0:	29 2f       	mov	r18, r25
    15d2:	22 0f       	add	r18, r18
    15d4:	22 0f       	add	r18, r18
    15d6:	82 2b       	or	r24, r18
    15d8:	92 95       	swap	r25
    15da:	96 95       	lsr	r25
    15dc:	96 95       	lsr	r25
    15de:	93 70       	andi	r25, 0x03	; 3
    15e0:	80 93 f8 02 	sts	0x02F8, r24
    15e4:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    15e6:	2c a1       	lds	r18, 0x4c
    15e8:	8d a1       	lds	r24, 0x4d
    15ea:	98 2f       	mov	r25, r24
    15ec:	93 70       	andi	r25, 0x03	; 3
    15ee:	20 93 fa 02 	sts	0x02FA, r18
    15f2:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    15f4:	98 2f       	mov	r25, r24
    15f6:	96 95       	lsr	r25
    15f8:	96 95       	lsr	r25
    15fa:	8e a1       	lds	r24, 0x4e
    15fc:	28 2f       	mov	r18, r24
    15fe:	22 95       	swap	r18
    1600:	22 0f       	add	r18, r18
    1602:	22 0f       	add	r18, r18
    1604:	20 7c       	andi	r18, 0xC0	; 192
    1606:	29 2b       	or	r18, r25
    1608:	86 95       	lsr	r24
    160a:	86 95       	lsr	r24
    160c:	98 2f       	mov	r25, r24
    160e:	93 70       	andi	r25, 0x03	; 3
    1610:	20 93 fc 02 	sts	0x02FC, r18
    1614:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    1616:	7f a1       	lds	r23, 0x4f
    1618:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    161c:	68 a5       	lds	r22, 0x68
    161e:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    1622:	89 a5       	lds	r24, 0x69
    1624:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    1628:	9a a5       	lds	r25, 0x6a
    162a:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    162e:	1b a5       	lds	r17, 0x6b
    1630:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1634:	de 01       	movw	r26, r28
    1636:	9c 96       	adiw	r26, 0x2c	; 44
    1638:	ef ef       	ldi	r30, 0xFF	; 255
    163a:	f1 e0       	ldi	r31, 0x01	; 1
    163c:	28 e0       	ldi	r18, 0x08	; 8
    163e:	01 90       	ld	r0, Z+
    1640:	0d 92       	st	X+, r0
    1642:	21 50       	subi	r18, 0x01	; 1
    1644:	e1 f7       	brne	.-8      	; 0x163e <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    1646:	e9 2f       	mov	r30, r25
    1648:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	9f 01       	movw	r18, r30
    164e:	22 0f       	add	r18, r18
    1650:	33 1f       	adc	r19, r19
    1652:	22 0f       	add	r18, r18
    1654:	33 1f       	adc	r19, r19
    1656:	a9 01       	movw	r20, r18
    1658:	44 0f       	add	r20, r20
    165a:	55 1f       	adc	r21, r21
    165c:	44 0f       	add	r20, r20
    165e:	55 1f       	adc	r21, r21
    1660:	44 0f       	add	r20, r20
    1662:	55 1f       	adc	r21, r21
    1664:	42 1b       	sub	r20, r18
    1666:	53 0b       	sbc	r21, r19
    1668:	4e 0f       	add	r20, r30
    166a:	5f 1f       	adc	r21, r31
    166c:	55 95       	asr	r21
    166e:	47 95       	ror	r20
    1670:	55 95       	asr	r21
    1672:	47 95       	ror	r20
    1674:	55 95       	asr	r21
    1676:	47 95       	ror	r20
    1678:	55 95       	asr	r21
    167a:	47 95       	ror	r20
    167c:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    167e:	fe 01       	movw	r30, r28
    1680:	e4 0f       	add	r30, r20
    1682:	f1 1d       	adc	r31, r1
    1684:	24 a5       	lds	r18, 0x64
    1686:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    168a:	de 01       	movw	r26, r28
    168c:	d4 96       	adiw	r26, 0x34	; 52
    168e:	e7 e0       	ldi	r30, 0x07	; 7
    1690:	f2 e0       	ldi	r31, 0x02	; 2
    1692:	28 e0       	ldi	r18, 0x08	; 8
    1694:	01 90       	ld	r0, Z+
    1696:	0d 92       	st	X+, r0
    1698:	21 50       	subi	r18, 0x01	; 1
    169a:	e1 f7       	brne	.-8      	; 0x1694 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    169c:	29 2f       	mov	r18, r25
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	20 7e       	andi	r18, 0xE0	; 224
    16a2:	30 70       	andi	r19, 0x00	; 0
    16a4:	35 95       	asr	r19
    16a6:	27 95       	ror	r18
    16a8:	35 95       	asr	r19
    16aa:	27 95       	ror	r18
    16ac:	35 95       	asr	r19
    16ae:	27 95       	ror	r18
    16b0:	83 70       	andi	r24, 0x03	; 3
    16b2:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    16b4:	42 2f       	mov	r20, r18
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	ca 01       	movw	r24, r20
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	9c 01       	movw	r18, r24
    16c4:	22 0f       	add	r18, r18
    16c6:	33 1f       	adc	r19, r19
    16c8:	22 0f       	add	r18, r18
    16ca:	33 1f       	adc	r19, r19
    16cc:	22 0f       	add	r18, r18
    16ce:	33 1f       	adc	r19, r19
    16d0:	28 1b       	sub	r18, r24
    16d2:	39 0b       	sbc	r19, r25
    16d4:	42 0f       	add	r20, r18
    16d6:	53 1f       	adc	r21, r19
    16d8:	ca 01       	movw	r24, r20
    16da:	95 95       	asr	r25
    16dc:	87 95       	ror	r24
    16de:	95 95       	asr	r25
    16e0:	87 95       	ror	r24
    16e2:	95 95       	asr	r25
    16e4:	87 95       	ror	r24
    16e6:	95 95       	asr	r25
    16e8:	87 95       	ror	r24
    16ea:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    16ec:	fe 01       	movw	r30, r28
    16ee:	e8 0f       	add	r30, r24
    16f0:	f1 1d       	adc	r31, r1
    16f2:	84 a9       	sts	0x44, r24
    16f4:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    16f8:	de 01       	movw	r26, r28
    16fa:	dc 96       	adiw	r26, 0x3c	; 60
    16fc:	ef e0       	ldi	r30, 0x0F	; 15
    16fe:	f2 e0       	ldi	r31, 0x02	; 2
    1700:	88 e0       	ldi	r24, 0x08	; 8
    1702:	01 90       	ld	r0, Z+
    1704:	0d 92       	st	X+, r0
    1706:	81 50       	subi	r24, 0x01	; 1
    1708:	e1 f7       	brne	.-8      	; 0x1702 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    170a:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    170c:	46 2f       	mov	r20, r22
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	ca 01       	movw	r24, r20
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	9c 01       	movw	r18, r24
    171c:	22 0f       	add	r18, r18
    171e:	33 1f       	adc	r19, r19
    1720:	22 0f       	add	r18, r18
    1722:	33 1f       	adc	r19, r19
    1724:	22 0f       	add	r18, r18
    1726:	33 1f       	adc	r19, r19
    1728:	28 1b       	sub	r18, r24
    172a:	39 0b       	sbc	r19, r25
    172c:	42 0f       	add	r20, r18
    172e:	53 1f       	adc	r21, r19
    1730:	ca 01       	movw	r24, r20
    1732:	95 95       	asr	r25
    1734:	87 95       	ror	r24
    1736:	95 95       	asr	r25
    1738:	87 95       	ror	r24
    173a:	95 95       	asr	r25
    173c:	87 95       	ror	r24
    173e:	95 95       	asr	r25
    1740:	87 95       	ror	r24
    1742:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1744:	fe 01       	movw	r30, r28
    1746:	e8 0f       	add	r30, r24
    1748:	f1 1d       	adc	r31, r1
    174a:	84 ad       	sts	0x64, r24
    174c:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1750:	21 2f       	mov	r18, r17
    1752:	26 95       	lsr	r18
    1754:	27 95       	ror	r18
    1756:	22 27       	eor	r18, r18
    1758:	27 95       	ror	r18
    175a:	81 2f       	mov	r24, r17
    175c:	81 70       	andi	r24, 0x01	; 1
    175e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1760:	81 2f       	mov	r24, r17
    1762:	86 95       	lsr	r24
    1764:	86 95       	lsr	r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1774:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1776:	81 2f       	mov	r24, r17
    1778:	86 95       	lsr	r24
    177a:	86 95       	lsr	r24
    177c:	86 95       	lsr	r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	81 70       	andi	r24, 0x01	; 1
    1782:	90 70       	andi	r25, 0x00	; 0
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1788:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    178a:	81 2f       	mov	r24, r17
    178c:	82 95       	swap	r24
    178e:	8f 70       	andi	r24, 0x0F	; 15
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	81 70       	andi	r24, 0x01	; 1
    1794:	90 70       	andi	r25, 0x00	; 0
    1796:	82 95       	swap	r24
    1798:	92 95       	swap	r25
    179a:	90 7f       	andi	r25, 0xF0	; 240
    179c:	98 27       	eor	r25, r24
    179e:	80 7f       	andi	r24, 0xF0	; 240
    17a0:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17a2:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    17a4:	81 2f       	mov	r24, r17
    17a6:	82 95       	swap	r24
    17a8:	86 95       	lsr	r24
    17aa:	87 70       	andi	r24, 0x07	; 7
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	81 70       	andi	r24, 0x01	; 1
    17b0:	90 70       	andi	r25, 0x00	; 0
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	82 95       	swap	r24
    17b8:	92 95       	swap	r25
    17ba:	90 7f       	andi	r25, 0xF0	; 240
    17bc:	98 27       	eor	r25, r24
    17be:	80 7f       	andi	r24, 0xF0	; 240
    17c0:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17c2:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    17c4:	81 2f       	mov	r24, r17
    17c6:	82 95       	swap	r24
    17c8:	86 95       	lsr	r24
    17ca:	86 95       	lsr	r24
    17cc:	83 70       	andi	r24, 0x03	; 3
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	81 70       	andi	r24, 0x01	; 1
    17d2:	90 70       	andi	r25, 0x00	; 0
    17d4:	00 24       	eor	r0, r0
    17d6:	96 95       	lsr	r25
    17d8:	87 95       	ror	r24
    17da:	07 94       	ror	r0
    17dc:	96 95       	lsr	r25
    17de:	87 95       	ror	r24
    17e0:	07 94       	ror	r0
    17e2:	98 2f       	mov	r25, r24
    17e4:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17e6:	82 2b       	or	r24, r18
    17e8:	80 93 7e 03 	sts	0x037E, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    17ec:	87 2f       	mov	r24, r23
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	81 70       	andi	r24, 0x01	; 1
    17f2:	90 70       	andi	r25, 0x00	; 0
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1800:	90 91 80 03 	lds	r25, 0x0380
    1804:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1806:	89 2b       	or	r24, r25
    1808:	11 1f       	adc	r17, r17
    180a:	11 27       	eor	r17, r17
    180c:	11 1f       	adc	r17, r17
    180e:	11 0f       	add	r17, r17
    1810:	11 0f       	add	r17, r17
    1812:	81 2b       	or	r24, r17
    1814:	80 93 80 03 	sts	0x0380, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1818:	0e 94 22 07 	call	0xe44	; 0xe44 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    181c:	80 91 80 03 	lds	r24, 0x0380
    1820:	8f 77       	andi	r24, 0x7F	; 127
    1822:	80 93 80 03 	sts	0x0380, r24
	
	current_patch.mode = MEMORY;
    1826:	10 92 07 03 	sts	0x0307, r1
	
}
    182a:	cd 5b       	subi	r28, 0xBD	; 189
    182c:	df 4f       	sbci	r29, 0xFF	; 255
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	08 95       	ret

00001840 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1840:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    1844:	60 3f       	cpi	r22, 0xF0	; 240
    1846:	11 f4       	brne	.+4      	; 0x184c <transpose_note+0xc>
    1848:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    184c:	29 2f       	mov	r18, r25
    184e:	22 0f       	add	r18, r18
    1850:	92 0f       	add	r25, r18
    1852:	99 0f       	add	r25, r25
    1854:	99 0f       	add	r25, r25
    1856:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1858:	89 38       	cpi	r24, 0x89	; 137
    185a:	08 f0       	brcs	.+2      	; 0x185e <transpose_note+0x1e>
    185c:	88 e8       	ldi	r24, 0x88	; 136
	
}
    185e:	08 95       	ret

00001860 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1860:	80 91 7e 03 	lds	r24, 0x037E
    1864:	98 2f       	mov	r25, r24
    1866:	96 95       	lsr	r25
    1868:	96 95       	lsr	r25
    186a:	96 95       	lsr	r25
    186c:	90 ff       	sbrs	r25, 0
    186e:	0e c0       	rjmp	.+28     	; 0x188c <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1870:	90 91 08 03 	lds	r25, 0x0308
    1874:	9f 5f       	subi	r25, 0xFF	; 255
    1876:	90 93 08 03 	sts	0x0308, r25
    187a:	95 30       	cpi	r25, 0x05	; 5
    187c:	19 f4       	brne	.+6      	; 0x1884 <update_octave_range+0x24>
    187e:	94 e0       	ldi	r25, 0x04	; 4
    1880:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1884:	98 e0       	ldi	r25, 0x08	; 8
    1886:	89 27       	eor	r24, r25
    1888:	80 93 7e 03 	sts	0x037E, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    188c:	80 91 7f 03 	lds	r24, 0x037F
    1890:	98 2f       	mov	r25, r24
    1892:	96 95       	lsr	r25
    1894:	96 95       	lsr	r25
    1896:	96 95       	lsr	r25
    1898:	90 ff       	sbrs	r25, 0
    189a:	0b c0       	rjmp	.+22     	; 0x18b2 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    189c:	90 91 08 03 	lds	r25, 0x0308
    18a0:	99 23       	and	r25, r25
    18a2:	19 f0       	breq	.+6      	; 0x18aa <update_octave_range+0x4a>
    18a4:	91 50       	subi	r25, 0x01	; 1
    18a6:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    18aa:	98 e0       	ldi	r25, 0x08	; 8
    18ac:	89 27       	eor	r24, r25
    18ae:	80 93 7f 03 	sts	0x037F, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    18b2:	80 91 08 03 	lds	r24, 0x0308
    18b6:	e1 e2       	ldi	r30, 0x21	; 33
    18b8:	f2 e0       	ldi	r31, 0x02	; 2
    18ba:	e8 0f       	add	r30, r24
    18bc:	f1 1d       	adc	r31, r1
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	00 80       	ld	r0, Z
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <update_octave_range+0x6a>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <update_octave_range+0x66>
    18ce:	58 2f       	mov	r21, r24
    18d0:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    18d4:	90 91 7f 03 	lds	r25, 0x037F
    18d8:	29 2f       	mov	r18, r25
    18da:	26 95       	lsr	r18
    18dc:	26 95       	lsr	r18
    18de:	20 ff       	sbrs	r18, 0
    18e0:	0e c0       	rjmp	.+28     	; 0x18fe <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    18e2:	80 91 09 03 	lds	r24, 0x0309
    18e6:	8f 5f       	subi	r24, 0xFF	; 255
    18e8:	80 93 09 03 	sts	0x0309, r24
    18ec:	85 30       	cpi	r24, 0x05	; 5
    18ee:	19 f4       	brne	.+6      	; 0x18f6 <update_octave_range+0x96>
    18f0:	84 e0       	ldi	r24, 0x04	; 4
    18f2:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    18f6:	84 e0       	ldi	r24, 0x04	; 4
    18f8:	98 27       	eor	r25, r24
    18fa:	90 93 7f 03 	sts	0x037F, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    18fe:	90 91 7f 03 	lds	r25, 0x037F
    1902:	29 2f       	mov	r18, r25
    1904:	26 95       	lsr	r18
    1906:	20 ff       	sbrs	r18, 0
    1908:	0b c0       	rjmp	.+22     	; 0x1920 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    190a:	80 91 09 03 	lds	r24, 0x0309
    190e:	88 23       	and	r24, r24
    1910:	19 f0       	breq	.+6      	; 0x1918 <update_octave_range+0xb8>
    1912:	81 50       	subi	r24, 0x01	; 1
    1914:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	98 27       	eor	r25, r24
    191c:	90 93 7f 03 	sts	0x037F, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1920:	40 91 00 03 	lds	r20, 0x0300
    1924:	4c 7f       	andi	r20, 0xFC	; 252
    1926:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    192a:	90 91 09 03 	lds	r25, 0x0309
    192e:	93 30       	cpi	r25, 0x03	; 3
    1930:	88 f0       	brcs	.+34     	; 0x1954 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1932:	ec e1       	ldi	r30, 0x1C	; 28
    1934:	f2 e0       	ldi	r31, 0x02	; 2
    1936:	e9 0f       	add	r30, r25
    1938:	f1 1d       	adc	r31, r1
    193a:	21 e0       	ldi	r18, 0x01	; 1
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	c9 01       	movw	r24, r18
    1940:	00 80       	ld	r0, Z
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <update_octave_range+0xe8>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <update_octave_range+0xe4>
    194c:	84 2b       	or	r24, r20
    194e:	80 93 00 03 	sts	0x0300, r24
    1952:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1954:	ec e1       	ldi	r30, 0x1C	; 28
    1956:	f2 e0       	ldi	r31, 0x02	; 2
    1958:	e9 0f       	add	r30, r25
    195a:	f1 1d       	adc	r31, r1
    195c:	21 e0       	ldi	r18, 0x01	; 1
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	c9 01       	movw	r24, r18
    1962:	00 80       	ld	r0, Z
    1964:	02 c0       	rjmp	.+4      	; 0x196a <update_octave_range+0x10a>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	0a 94       	dec	r0
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <update_octave_range+0x106>
    196e:	85 2b       	or	r24, r21
    1970:	80 93 01 03 	sts	0x0301, r24
    1974:	08 95       	ret

00001976 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1976:	80 91 7f 03 	lds	r24, 0x037F
    197a:	88 23       	and	r24, r24
    197c:	64 f4       	brge	.+24     	; 0x1996 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    197e:	80 58       	subi	r24, 0x80	; 128
    1980:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1984:	80 91 0a 03 	lds	r24, 0x030A
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	80 93 0a 03 	sts	0x030A, r24
    198e:	85 30       	cpi	r24, 0x05	; 5
    1990:	11 f4       	brne	.+4      	; 0x1996 <update_lfo_shape+0x20>
    1992:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1996:	e0 91 0a 03 	lds	r30, 0x030A
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	ee 0f       	add	r30, r30
    199e:	ff 1f       	adc	r31, r31
    19a0:	ea 5d       	subi	r30, 0xDA	; 218
    19a2:	fd 4f       	sbci	r31, 0xFD	; 253
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	01 80       	ldd	r0, Z+1	; 0x01
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <update_lfo_shape+0x3a>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	0a 94       	dec	r0
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    19b4:	90 91 ff 02 	lds	r25, 0x02FF
    19b8:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    19ba:	89 2b       	or	r24, r25
    19bc:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    19c0:	80 81       	ld	r24, Z
    19c2:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    19c4:	ed ed       	ldi	r30, 0xDD	; 221
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	80 62       	ori	r24, 0x20	; 32
    19cc:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    19ce:	80 81       	ld	r24, Z
    19d0:	8f 7d       	andi	r24, 0xDF	; 223
    19d2:	80 83       	st	Z, r24
	
}		
    19d4:	08 95       	ret

000019d6 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    19d6:	80 91 7f 03 	lds	r24, 0x037F
    19da:	80 ff       	sbrs	r24, 0
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	89 27       	eor	r24, r25
    19e2:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    19e6:	80 91 0b 03 	lds	r24, 0x030B
    19ea:	8f 5f       	subi	r24, 0xFF	; 255
    19ec:	80 93 0b 03 	sts	0x030B, r24
    19f0:	85 30       	cpi	r24, 0x05	; 5
    19f2:	11 f4       	brne	.+4      	; 0x19f8 <update_lfo_sync+0x22>
    19f4:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    19f8:	10 92 8e 03 	sts	0x038E, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    19fc:	60 91 ff 02 	lds	r22, 0x02FF
    1a00:	60 7f       	andi	r22, 0xF0	; 240
    1a02:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1a06:	20 91 0b 03 	lds	r18, 0x030B
    1a0a:	22 23       	and	r18, r18
    1a0c:	71 f0       	breq	.+28     	; 0x1a2a <update_lfo_sync+0x54>
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	21 50       	subi	r18, 0x01	; 1
    1a12:	30 40       	sbci	r19, 0x00	; 0
    1a14:	41 e0       	ldi	r20, 0x01	; 1
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	ca 01       	movw	r24, r20
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <update_lfo_sync+0x4a>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	2a 95       	dec	r18
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <update_lfo_sync+0x46>
    1a24:	86 2b       	or	r24, r22
    1a26:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1a2a:	80 91 ff 02 	lds	r24, 0x02FF
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	8f 70       	andi	r24, 0x0F	; 15
    1a32:	90 70       	andi	r25, 0x00	; 0
    1a34:	82 30       	cpi	r24, 0x02	; 2
    1a36:	91 05       	cpc	r25, r1
    1a38:	89 f0       	breq	.+34     	; 0x1a5c <update_lfo_sync+0x86>
    1a3a:	83 30       	cpi	r24, 0x03	; 3
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	24 f4       	brge	.+8      	; 0x1a48 <update_lfo_sync+0x72>
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	91 05       	cpc	r25, r1
    1a44:	b9 f4       	brne	.+46     	; 0x1a74 <update_lfo_sync+0x9e>
    1a46:	07 c0       	rjmp	.+14     	; 0x1a56 <update_lfo_sync+0x80>
    1a48:	84 30       	cpi	r24, 0x04	; 4
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	59 f0       	breq	.+22     	; 0x1a64 <update_lfo_sync+0x8e>
    1a4e:	88 30       	cpi	r24, 0x08	; 8
    1a50:	91 05       	cpc	r25, r1
    1a52:	81 f4       	brne	.+32     	; 0x1a74 <update_lfo_sync+0x9e>
    1a54:	0b c0       	rjmp	.+22     	; 0x1a6c <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1a56:	10 92 8d 03 	sts	0x038D, r1
			
			break;
    1a5a:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			midi_clock.divider = 24; //1:4
    1a5c:	88 e1       	ldi	r24, 0x18	; 24
    1a5e:	80 93 8d 03 	sts	0x038D, r24
			break;
    1a62:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1a64:	8c e0       	ldi	r24, 0x0C	; 12
    1a66:	80 93 8d 03 	sts	0x038D, r24
			break;
    1a6a:	08 95       	ret
			
		case 0b1000:
			midi_clock.divider = 6; //1:16	 		
    1a6c:	86 e0       	ldi	r24, 0x06	; 6
    1a6e:	80 93 8d 03 	sts	0x038D, r24
			break;
    1a72:	08 95       	ret
		
		default:
			midi_clock.divider = 0; //need to turn midi sync off here. How?
    1a74:	10 92 8d 03 	sts	0x038D, r1
    1a78:	08 95       	ret

00001a7a <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1a7a:	80 91 7f 03 	lds	r24, 0x037F
    1a7e:	98 2f       	mov	r25, r24
    1a80:	92 95       	swap	r25
    1a82:	96 95       	lsr	r25
    1a84:	96 95       	lsr	r25
    1a86:	93 70       	andi	r25, 0x03	; 3
    1a88:	90 ff       	sbrs	r25, 0
    1a8a:	0f c0       	rjmp	.+30     	; 0x1aaa <update_arp_sync+0x30>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1a8c:	90 e4       	ldi	r25, 0x40	; 64
    1a8e:	89 27       	eor	r24, r25
    1a90:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1a94:	80 91 0c 03 	lds	r24, 0x030C
    1a98:	8f 5f       	subi	r24, 0xFF	; 255
    1a9a:	80 93 0c 03 	sts	0x030C, r24
    1a9e:	85 30       	cpi	r24, 0x05	; 5
    1aa0:	11 f4       	brne	.+4      	; 0x1aa6 <update_arp_sync+0x2c>
    1aa2:	10 92 0c 03 	sts	0x030C, r1
		system_clock.ppqn_counter = 0; //reset counter
    1aa6:	10 92 88 03 	sts	0x0388, r1
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1aaa:	60 91 00 03 	lds	r22, 0x0300
    1aae:	63 7c       	andi	r22, 0xC3	; 195
    1ab0:	60 93 00 03 	sts	0x0300, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1ab4:	20 91 0c 03 	lds	r18, 0x030C
    1ab8:	22 23       	and	r18, r18
    1aba:	71 f0       	breq	.+28     	; 0x1ad8 <update_arp_sync+0x5e>
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	2f 5f       	subi	r18, 0xFF	; 255
    1ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	ca 01       	movw	r24, r20
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <update_arp_sync+0x54>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	2a 95       	dec	r18
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <update_arp_sync+0x50>
    1ad2:	86 2b       	or	r24, r22
    1ad4:	80 93 00 03 	sts	0x0300, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1ad8:	80 91 00 03 	lds	r24, 0x0300
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	8c 73       	andi	r24, 0x3C	; 60
    1ae0:	90 70       	andi	r25, 0x00	; 0
    1ae2:	88 30       	cpi	r24, 0x08	; 8
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	91 f0       	breq	.+36     	; 0x1b0c <update_arp_sync+0x92>
    1ae8:	89 30       	cpi	r24, 0x09	; 9
    1aea:	91 05       	cpc	r25, r1
    1aec:	24 f4       	brge	.+8      	; 0x1af6 <update_arp_sync+0x7c>
    1aee:	84 30       	cpi	r24, 0x04	; 4
    1af0:	91 05       	cpc	r25, r1
    1af2:	c1 f4       	brne	.+48     	; 0x1b24 <update_arp_sync+0xaa>
    1af4:	07 c0       	rjmp	.+14     	; 0x1b04 <update_arp_sync+0x8a>
    1af6:	80 31       	cpi	r24, 0x10	; 16
    1af8:	91 05       	cpc	r25, r1
    1afa:	61 f0       	breq	.+24     	; 0x1b14 <update_arp_sync+0x9a>
    1afc:	80 32       	cpi	r24, 0x20	; 32
    1afe:	91 05       	cpc	r25, r1
    1b00:	89 f4       	brne	.+34     	; 0x1b24 <update_arp_sync+0xaa>
    1b02:	0c c0       	rjmp	.+24     	; 0x1b1c <update_arp_sync+0xa2>
			
		case 0b00000100:
			system_clock.divider = 48; //1:2
    1b04:	80 e3       	ldi	r24, 0x30	; 48
    1b06:	80 93 87 03 	sts	0x0387, r24
			break;
    1b0a:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = 24; //1:4
    1b0c:	88 e1       	ldi	r24, 0x18	; 24
    1b0e:	80 93 87 03 	sts	0x0387, r24
			break;
    1b12:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = 12; //1:8
    1b14:	8c e0       	ldi	r24, 0x0C	; 12
    1b16:	80 93 87 03 	sts	0x0387, r24
			break;
    1b1a:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = 6; //1:16	
    1b1c:	86 e0       	ldi	r24, 0x06	; 6
    1b1e:	80 93 87 03 	sts	0x0387, r24
			break;
    1b22:	08 95       	ret
			
		default:
			system_clock.divider = 2; //should be 1 but this never turns arp_sync_led off - need to fix this	
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	80 93 87 03 	sts	0x0387, r24
    1b2a:	08 95       	ret

00001b2c <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1b2c:	80 91 7f 03 	lds	r24, 0x037F
    1b30:	80 31       	cpi	r24, 0x10	; 16
    1b32:	59 f4       	brne	.+22     	; 0x1b4a <update_arp_range+0x1e>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1b34:	10 92 7f 03 	sts	0x037F, r1
		
		if (++arp_range == 4) arp_range = 0;
    1b38:	80 91 0d 03 	lds	r24, 0x030D
    1b3c:	8f 5f       	subi	r24, 0xFF	; 255
    1b3e:	80 93 0d 03 	sts	0x030D, r24
    1b42:	84 30       	cpi	r24, 0x04	; 4
    1b44:	11 f4       	brne	.+4      	; 0x1b4a <update_arp_range+0x1e>
    1b46:	10 92 0d 03 	sts	0x030D, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1b4a:	20 91 fe 02 	lds	r18, 0x02FE
    1b4e:	2d 7f       	andi	r18, 0xFD	; 253
    1b50:	20 93 fe 02 	sts	0x02FE, r18
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1b54:	90 91 00 03 	lds	r25, 0x0300
    1b58:	9f 73       	andi	r25, 0x3F	; 63
    1b5a:	90 93 00 03 	sts	0x0300, r25
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1b5e:	80 91 0d 03 	lds	r24, 0x030D
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	41 f0       	breq	.+16     	; 0x1b76 <update_arp_range+0x4a>
    1b66:	83 30       	cpi	r24, 0x03	; 3
    1b68:	51 f0       	breq	.+20     	; 0x1b7e <update_arp_range+0x52>
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	59 f4       	brne	.+22     	; 0x1b84 <update_arp_range+0x58>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1b6e:	22 60       	ori	r18, 0x02	; 2
    1b70:	20 93 fe 02 	sts	0x02FE, r18
			break;
    1b74:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1b76:	90 64       	ori	r25, 0x40	; 64
    1b78:	90 93 00 03 	sts	0x0300, r25
			break;
    1b7c:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1b7e:	90 68       	ori	r25, 0x80	; 128
    1b80:	90 93 00 03 	sts	0x0300, r25
    1b84:	08 95       	ret

00001b86 <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1b86:	80 91 7f 03 	lds	r24, 0x037F
    1b8a:	98 2f       	mov	r25, r24
    1b8c:	92 95       	swap	r25
    1b8e:	96 95       	lsr	r25
    1b90:	97 70       	andi	r25, 0x07	; 7
    1b92:	90 ff       	sbrs	r25, 0
    1b94:	0d c0       	rjmp	.+26     	; 0x1bb0 <update_arp_mode+0x2a>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1b96:	90 e2       	ldi	r25, 0x20	; 32
    1b98:	89 27       	eor	r24, r25
    1b9a:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_mode == 5) arp_mode = 0;
    1b9e:	80 91 0e 03 	lds	r24, 0x030E
    1ba2:	8f 5f       	subi	r24, 0xFF	; 255
    1ba4:	80 93 0e 03 	sts	0x030E, r24
    1ba8:	85 30       	cpi	r24, 0x05	; 5
    1baa:	11 f4       	brne	.+4      	; 0x1bb0 <update_arp_mode+0x2a>
    1bac:	10 92 0e 03 	sts	0x030E, r1
		
	}
	
	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1bb0:	90 91 fe 02 	lds	r25, 0x02FE
    1bb4:	93 7c       	andi	r25, 0xC3	; 195
    1bb6:	90 93 fe 02 	sts	0x02FE, r25
	
	switch(arp_mode) {
    1bba:	80 91 0e 03 	lds	r24, 0x030E
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	39 f0       	breq	.+14     	; 0x1bd0 <update_arp_mode+0x4a>
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	a0 f0       	brcs	.+40     	; 0x1bee <update_arp_mode+0x68>
    1bc6:	82 30       	cpi	r24, 0x02	; 2
    1bc8:	39 f0       	breq	.+14     	; 0x1bd8 <update_arp_mode+0x52>
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	69 f4       	brne	.+26     	; 0x1be8 <update_arp_mode+0x62>
    1bce:	08 c0       	rjmp	.+16     	; 0x1be0 <update_arp_mode+0x5a>
			//turn arp off
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1bd0:	94 62       	ori	r25, 0x24	; 36
    1bd2:	90 93 fe 02 	sts	0x02FE, r25
			break;	
    1bd6:	08 95       	ret
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1bd8:	94 61       	ori	r25, 0x14	; 20
    1bda:	90 93 fe 02 	sts	0x02FE, r25
			break;
    1bde:	08 95       	ret
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1be0:	94 63       	ori	r25, 0x34	; 52
    1be2:	90 93 fe 02 	sts	0x02FE, r25
			break;
    1be6:	08 95       	ret
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1be8:	9c 60       	ori	r25, 0x0C	; 12
    1bea:	90 93 fe 02 	sts	0x02FE, r25
    1bee:	08 95       	ret

00001bf0 <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1bf0:	90 91 7e 03 	lds	r25, 0x037E
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1bf4:	80 91 80 03 	lds	r24, 0x0380
    1bf8:	86 95       	lsr	r24
    1bfa:	86 95       	lsr	r24
    1bfc:	68 2f       	mov	r22, r24
    1bfe:	67 95       	ror	r22
    1c00:	66 27       	eor	r22, r22
    1c02:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1c04:	29 2f       	mov	r18, r25
    1c06:	21 70       	andi	r18, 0x01	; 1
    1c08:	26 2b       	or	r18, r22
    1c0a:	69 2f       	mov	r22, r25
    1c0c:	66 1f       	adc	r22, r22
    1c0e:	66 27       	eor	r22, r22
    1c10:	66 1f       	adc	r22, r22
    1c12:	66 0f       	add	r22, r22
    1c14:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1c16:	29 2f       	mov	r18, r25
    1c18:	26 95       	lsr	r18
    1c1a:	26 95       	lsr	r18
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	21 70       	andi	r18, 0x01	; 1
    1c20:	30 70       	andi	r19, 0x00	; 0
    1c22:	d9 01       	movw	r26, r18
    1c24:	aa 0f       	add	r26, r26
    1c26:	bb 1f       	adc	r27, r27
    1c28:	aa 0f       	add	r26, r26
    1c2a:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1c2c:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1c2e:	a9 2f       	mov	r26, r25
    1c30:	a6 95       	lsr	r26
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	a1 70       	andi	r26, 0x01	; 1
    1c36:	b0 70       	andi	r27, 0x00	; 0
    1c38:	fd 01       	movw	r30, r26
    1c3a:	ee 0f       	add	r30, r30
    1c3c:	ff 1f       	adc	r31, r31
    1c3e:	ee 0f       	add	r30, r30
    1c40:	ff 1f       	adc	r31, r31
    1c42:	ee 0f       	add	r30, r30
    1c44:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1c46:	a6 2f       	mov	r26, r22
    1c48:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1c4a:	e9 2f       	mov	r30, r25
    1c4c:	e2 95       	swap	r30
    1c4e:	ef 70       	andi	r30, 0x0F	; 15
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	e1 70       	andi	r30, 0x01	; 1
    1c54:	f0 70       	andi	r31, 0x00	; 0
    1c56:	bf 01       	movw	r22, r30
    1c58:	62 95       	swap	r22
    1c5a:	72 95       	swap	r23
    1c5c:	70 7f       	andi	r23, 0xF0	; 240
    1c5e:	76 27       	eor	r23, r22
    1c60:	60 7f       	andi	r22, 0xF0	; 240
    1c62:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1c64:	ea 2f       	mov	r30, r26
    1c66:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1c68:	69 2f       	mov	r22, r25
    1c6a:	62 95       	swap	r22
    1c6c:	66 95       	lsr	r22
    1c6e:	67 70       	andi	r22, 0x07	; 7
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	61 70       	andi	r22, 0x01	; 1
    1c74:	70 70       	andi	r23, 0x00	; 0
    1c76:	ab 01       	movw	r20, r22
    1c78:	44 0f       	add	r20, r20
    1c7a:	55 1f       	adc	r21, r21
    1c7c:	42 95       	swap	r20
    1c7e:	52 95       	swap	r21
    1c80:	50 7f       	andi	r21, 0xF0	; 240
    1c82:	54 27       	eor	r21, r20
    1c84:	40 7f       	andi	r20, 0xF0	; 240
    1c86:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1c88:	6e 2f       	mov	r22, r30
    1c8a:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1c8c:	49 2f       	mov	r20, r25
    1c8e:	42 95       	swap	r20
    1c90:	46 95       	lsr	r20
    1c92:	46 95       	lsr	r20
    1c94:	43 70       	andi	r20, 0x03	; 3
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	41 70       	andi	r20, 0x01	; 1
    1c9a:	50 70       	andi	r21, 0x00	; 0
    1c9c:	9a 01       	movw	r18, r20
    1c9e:	00 24       	eor	r0, r0
    1ca0:	36 95       	lsr	r19
    1ca2:	27 95       	ror	r18
    1ca4:	07 94       	ror	r0
    1ca6:	36 95       	lsr	r19
    1ca8:	27 95       	ror	r18
    1caa:	07 94       	ror	r0
    1cac:	32 2f       	mov	r19, r18
    1cae:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1cb0:	26 2b       	or	r18, r22
    1cb2:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1cb6:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1cb8:	81 95       	neg	r24
    1cba:	89 27       	eor	r24, r25
    1cbc:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1cbe:	89 27       	eor	r24, r25
    1cc0:	0e 94 5f 15 	call	0x2abe	; 0x2abe <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1cc4:	ed ed       	ldi	r30, 0xDD	; 221
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1cca:	90 91 80 03 	lds	r25, 0x0380
    1cce:	96 95       	lsr	r25
    1cd0:	96 95       	lsr	r25
    1cd2:	96 95       	lsr	r25
    1cd4:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1cd6:	91 95       	neg	r25
    1cd8:	80 81       	ld	r24, Z
    1cda:	89 27       	eor	r24, r25
    1cdc:	80 71       	andi	r24, 0x10	; 16
    1cde:	82 27       	eor	r24, r18
    1ce0:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1ce2:	ee ef       	ldi	r30, 0xFE	; 254
    1ce4:	f2 e0       	ldi	r31, 0x02	; 2
    1ce6:	80 81       	ld	r24, Z
    1ce8:	98 27       	eor	r25, r24
    1cea:	91 70       	andi	r25, 0x01	; 1
    1cec:	89 27       	eor	r24, r25
    1cee:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1cf0:	0e 94 30 0c 	call	0x1860	; 0x1860 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1cf4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1cf8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    1cfc:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <update_arp_sync>
	update_arp_range();
    1d00:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <update_arp_range>
	update_arp_mode();
    1d04:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    1d08:	08 95       	ret

00001d0a <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1d0e:	90 91 07 03 	lds	r25, 0x0307
    1d12:	95 30       	cpi	r25, 0x05	; 5
    1d14:	01 f5       	brne	.+64     	; 0x1d56 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1d16:	87 e0       	ldi	r24, 0x07	; 7
    1d18:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1d1a:	cd ed       	ldi	r28, 0xDD	; 221
    1d1c:	d0 e0       	ldi	r29, 0x00	; 0
    1d1e:	88 81       	ld	r24, Y
    1d20:	80 62       	ori	r24, 0x20	; 32
    1d22:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1d24:	88 81       	ld	r24, Y
    1d26:	8f 7d       	andi	r24, 0xDF	; 223
    1d28:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1d2a:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1d2c:	0e 94 04 15 	call	0x2a08	; 0x2a08 <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1d30:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1d32:	88 81       	ld	r24, Y
    1d34:	80 62       	ori	r24, 0x20	; 32
    1d36:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1d38:	88 81       	ld	r24, Y
    1d3a:	8f 7d       	andi	r24, 0xDF	; 223
    1d3c:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1d3e:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1d40:	80 91 ff 02 	lds	r24, 0x02FF
    1d44:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1d46:	80 68       	ori	r24, 0x80	; 128
    1d48:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1d4c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setup_system_clock>

		current_patch.mode = MEMORY;
    1d50:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1d54:	63 c0       	rjmp	.+198    	; 0x1e1c <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1d56:	80 91 80 03 	lds	r24, 0x0380
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	22 95       	swap	r18
    1d5e:	26 95       	lsr	r18
    1d60:	26 95       	lsr	r18
    1d62:	23 70       	andi	r18, 0x03	; 3
    1d64:	20 ff       	sbrs	r18, 0
    1d66:	15 c0       	rjmp	.+42     	; 0x1d92 <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1d68:	20 e4       	ldi	r18, 0x40	; 64
    1d6a:	82 27       	eor	r24, r18
    1d6c:	80 93 80 03 	sts	0x0380, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1d70:	80 91 03 03 	lds	r24, 0x0303
    1d74:	8f 5f       	subi	r24, 0xFF	; 255
    1d76:	80 93 03 03 	sts	0x0303, r24
    1d7a:	85 32       	cpi	r24, 0x25	; 37
    1d7c:	21 f4       	brne	.+8      	; 0x1d86 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1d7e:	84 e2       	ldi	r24, 0x24	; 36
    1d80:	80 93 03 03 	sts	0x0303, r24
    1d84:	06 c0       	rjmp	.+12     	; 0x1d92 <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1d86:	93 30       	cpi	r25, 0x03	; 3
    1d88:	21 f0       	breq	.+8      	; 0x1d92 <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1d8a:	0e 94 40 09 	call	0x1280	; 0x1280 <load_patch>
			update_patch();
    1d8e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1d92:	80 91 80 03 	lds	r24, 0x0380
    1d96:	98 2f       	mov	r25, r24
    1d98:	92 95       	swap	r25
    1d9a:	96 95       	lsr	r25
    1d9c:	97 70       	andi	r25, 0x07	; 7
    1d9e:	90 ff       	sbrs	r25, 0
    1da0:	15 c0       	rjmp	.+42     	; 0x1dcc <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1da2:	90 e2       	ldi	r25, 0x20	; 32
    1da4:	89 27       	eor	r24, r25
    1da6:	80 93 80 03 	sts	0x0380, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1daa:	80 91 03 03 	lds	r24, 0x0303
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	19 f0       	breq	.+6      	; 0x1db8 <update_patch_programmer+0xae>
    1db2:	81 50       	subi	r24, 0x01	; 1
    1db4:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1db8:	80 91 07 03 	lds	r24, 0x0307
    1dbc:	83 30       	cpi	r24, 0x03	; 3
    1dbe:	31 f0       	breq	.+12     	; 0x1dcc <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    1dc0:	80 91 03 03 	lds	r24, 0x0303
    1dc4:	0e 94 40 09 	call	0x1280	; 0x1280 <load_patch>
			update_patch();
    1dc8:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1dcc:	80 91 80 03 	lds	r24, 0x0380
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	92 95       	swap	r25
    1dd4:	9f 70       	andi	r25, 0x0F	; 15
    1dd6:	90 ff       	sbrs	r25, 0
    1dd8:	15 c0       	rjmp	.+42     	; 0x1e04 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1dda:	90 e1       	ldi	r25, 0x10	; 16
    1ddc:	89 27       	eor	r24, r25
    1dde:	80 93 80 03 	sts	0x0380, r24
		if (current_patch.mode != WRITE) {
    1de2:	90 91 07 03 	lds	r25, 0x0307
    1de6:	93 30       	cpi	r25, 0x03	; 3
    1de8:	49 f0       	breq	.+18     	; 0x1dfc <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1dea:	8f 77       	andi	r24, 0x7F	; 127
    1dec:	80 93 80 03 	sts	0x0380, r24
			current_patch.mode = WRITE;
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1df6:	0e 94 22 07 	call	0xe44	; 0xe44 <lock_pots>
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1dfc:	80 91 03 03 	lds	r24, 0x0303
    1e00:	0e 94 4d 07 	call	0xe9a	; 0xe9a <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1e04:	80 91 80 03 	lds	r24, 0x0380
    1e08:	88 23       	and	r24, r24
    1e0a:	44 f4       	brge	.+16     	; 0x1e1c <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1e0c:	80 68       	ori	r24, 0x80	; 128
    1e0e:	80 93 80 03 	sts	0x0380, r24
		current_patch.mode = MANUAL;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    1e18:	0e 94 3c 07 	call	0xe78	; 0xe78 <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	08 95       	ret

00001e22 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1e22:	88 ed       	ldi	r24, 0xD8	; 216
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	70 e0       	ldi	r23, 0x00	; 0
    1e2a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1e2e:	81 ee       	ldi	r24, 0xE1	; 225
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1e3a:	82 ee       	ldi	r24, 0xE2	; 226
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1e46:	82 eb       	ldi	r24, 0xB2	; 178
    1e48:	92 e0       	ldi	r25, 0x02	; 2
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1e52:	8a ed       	ldi	r24, 0xDA	; 218
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1e5e:	8f ed       	ldi	r24, 0xDF	; 223
    1e60:	91 e0       	ldi	r25, 0x01	; 1
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1e6a:	80 ee       	ldi	r24, 0xE0	; 224
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1e76:	81 ed       	ldi	r24, 0xD1	; 209
    1e78:	91 e0       	ldi	r25, 0x01	; 1
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1e82:	86 ed       	ldi	r24, 0xD6	; 214
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	70 e0       	ldi	r23, 0x00	; 0
    1e8a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1e8e:	82 ed       	ldi	r24, 0xD2	; 210
    1e90:	91 e0       	ldi	r25, 0x01	; 1
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1e9a:	83 ed       	ldi	r24, 0xD3	; 211
    1e9c:	91 e0       	ldi	r25, 0x01	; 1
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1ea6:	84 ed       	ldi	r24, 0xD4	; 212
    1ea8:	91 e0       	ldi	r25, 0x01	; 1
    1eaa:	6f ef       	ldi	r22, 0xFF	; 255
    1eac:	7f e3       	ldi	r23, 0x3F	; 63
    1eae:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1eb2:	85 ed       	ldi	r24, 0xD5	; 213
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1ebe:	89 ed       	ldi	r24, 0xD9	; 217
    1ec0:	91 e0       	ldi	r25, 0x01	; 1
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1eca:	8e ec       	ldi	r24, 0xCE	; 206
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1ed6:	8c ec       	ldi	r24, 0xCC	; 204
    1ed8:	91 e0       	ldi	r25, 0x01	; 1
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1ee2:	8a ec       	ldi	r24, 0xCA	; 202
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	6f ef       	ldi	r22, 0xFF	; 255
    1ee8:	7f e3       	ldi	r23, 0x3F	; 63
    1eea:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1eee:	88 ec       	ldi	r24, 0xC8	; 200
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	70 e0       	ldi	r23, 0x00	; 0
    1ef6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1efa:	80 ed       	ldi	r24, 0xD0	; 208
    1efc:	91 e0       	ldi	r25, 0x01	; 1
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	70 e0       	ldi	r23, 0x00	; 0
    1f02:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1f06:	83 ee       	ldi	r24, 0xE3	; 227
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	60 e0       	ldi	r22, 0x00	; 0
    1f0c:	70 e0       	ldi	r23, 0x00	; 0
    1f0e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1f12:	84 ee       	ldi	r24, 0xE4	; 228
    1f14:	91 e0       	ldi	r25, 0x01	; 1
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
}	
    1f1e:	08 95       	ret

00001f20 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1f20:	2f 92       	push	r2
    1f22:	3f 92       	push	r3
    1f24:	4f 92       	push	r4
    1f26:	5f 92       	push	r5
    1f28:	6f 92       	push	r6
    1f2a:	7f 92       	push	r7
    1f2c:	8f 92       	push	r8
    1f2e:	9f 92       	push	r9
    1f30:	af 92       	push	r10
    1f32:	bf 92       	push	r11
    1f34:	cf 92       	push	r12
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	2c 97       	sbiw	r28, 0x0c	; 12
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	08 2f       	mov	r16, r24
    1f56:	78 87       	std	Y+8, r23	; 0x08
    1f58:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1f5a:	80 91 7b 03 	lds	r24, 0x037B
    1f5e:	83 60       	ori	r24, 0x03	; 3
    1f60:	80 93 7b 03 	sts	0x037B, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1f64:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1f68:	10 92 7a 03 	sts	0x037A, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1f6c:	0f 30       	cpi	r16, 0x0F	; 15
    1f6e:	e1 f4       	brne	.+56     	; 0x1fa8 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1f70:	0f 2e       	mov	r0, r31
    1f72:	f6 ee       	ldi	r31, 0xE6	; 230
    1f74:	4f 2e       	mov	r4, r31
    1f76:	f1 e0       	ldi	r31, 0x01	; 1
    1f78:	5f 2e       	mov	r5, r31
    1f7a:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1f7c:	0f 2e       	mov	r0, r31
    1f7e:	fe ed       	ldi	r31, 0xDE	; 222
    1f80:	2f 2e       	mov	r2, r31
    1f82:	f1 e0       	ldi	r31, 0x01	; 1
    1f84:	3f 2e       	mov	r3, r31
    1f86:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1f88:	23 ee       	ldi	r18, 0xE3	; 227
    1f8a:	31 e0       	ldi	r19, 0x01	; 1
    1f8c:	3a 83       	std	Y+2, r19	; 0x02
    1f8e:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1f90:	0f 2e       	mov	r0, r31
    1f92:	fc ed       	ldi	r31, 0xDC	; 220
    1f94:	8f 2e       	mov	r8, r31
    1f96:	f1 e0       	ldi	r31, 0x01	; 1
    1f98:	9f 2e       	mov	r9, r31
    1f9a:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1f9c:	82 e7       	ldi	r24, 0x72	; 114
    1f9e:	96 e0       	ldi	r25, 0x06	; 6
    1fa0:	9a 87       	std	Y+10, r25	; 0x0a
    1fa2:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	1b c0       	rjmp	.+54     	; 0x1fde <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1fa8:	0f 2e       	mov	r0, r31
    1faa:	f5 ee       	ldi	r31, 0xE5	; 229
    1fac:	4f 2e       	mov	r4, r31
    1fae:	f1 e0       	ldi	r31, 0x01	; 1
    1fb0:	5f 2e       	mov	r5, r31
    1fb2:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1fb4:	0f 2e       	mov	r0, r31
    1fb6:	f7 ed       	ldi	r31, 0xD7	; 215
    1fb8:	2f 2e       	mov	r2, r31
    1fba:	f1 e0       	ldi	r31, 0x01	; 1
    1fbc:	3f 2e       	mov	r3, r31
    1fbe:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1fc0:	e4 ee       	ldi	r30, 0xE4	; 228
    1fc2:	f1 e0       	ldi	r31, 0x01	; 1
    1fc4:	fa 83       	std	Y+2, r31	; 0x02
    1fc6:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1fc8:	0f 2e       	mov	r0, r31
    1fca:	fd ed       	ldi	r31, 0xDD	; 221
    1fcc:	8f 2e       	mov	r8, r31
    1fce:	f1 e0       	ldi	r31, 0x01	; 1
    1fd0:	9f 2e       	mov	r9, r31
    1fd2:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1fd4:	20 e7       	ldi	r18, 0x70	; 112
    1fd6:	36 e0       	ldi	r19, 0x06	; 6
    1fd8:	3a 87       	std	Y+10, r19	; 0x0a
    1fda:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1fdc:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1fde:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1fe0:	ed ed       	ldi	r30, 0xDD	; 221
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 64       	ori	r24, 0x40	; 64
    1fe8:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1fea:	80 81       	ld	r24, Z
    1fec:	8f 7b       	andi	r24, 0xBF	; 191
    1fee:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1ff0:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1ff2:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1ff4:	84 b5       	in	r24, 0x24	; 36
    1ff6:	8f 60       	ori	r24, 0x0F	; 15
    1ff8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1ffe:	ee e6       	ldi	r30, 0x6E	; 110
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	90 81       	ld	r25, Z
    2004:	92 60       	ori	r25, 0x02	; 2
    2006:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    2008:	80 93 7c 03 	sts	0x037C, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    200c:	8d e0       	ldi	r24, 0x0D	; 13
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    2014:	80 2f       	mov	r24, r16
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	8c 01       	movw	r16, r24
    201a:	0f 5f       	subi	r16, 0xFF	; 255
    201c:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    201e:	0f 2e       	mov	r0, r31
    2020:	f8 ed       	ldi	r31, 0xD8	; 216
    2022:	ef 2e       	mov	r14, r31
    2024:	f1 e0       	ldi	r31, 0x01	; 1
    2026:	ff 2e       	mov	r15, r31
    2028:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    202a:	0f 2e       	mov	r0, r31
    202c:	f4 ed       	ldi	r31, 0xD4	; 212
    202e:	cf 2e       	mov	r12, r31
    2030:	f1 e0       	ldi	r31, 0x01	; 1
    2032:	df 2e       	mov	r13, r31
    2034:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    2036:	0f 2e       	mov	r0, r31
    2038:	fa ec       	ldi	r31, 0xCA	; 202
    203a:	af 2e       	mov	r10, r31
    203c:	f1 e0       	ldi	r31, 0x01	; 1
    203e:	bf 2e       	mov	r11, r31
    2040:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    2042:	0f 2e       	mov	r0, r31
    2044:	fb ec       	ldi	r31, 0xCB	; 203
    2046:	6f 2e       	mov	r6, r31
    2048:	f1 e0       	ldi	r31, 0x01	; 1
    204a:	7f 2e       	mov	r7, r31
    204c:	f0 2d       	mov	r31, r0
    204e:	e0 e0       	ldi	r30, 0x00	; 0
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	fc 87       	std	Y+12, r31	; 0x0c
    2054:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    2056:	21 e0       	ldi	r18, 0x01	; 1
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	0b 80       	ldd	r0, Y+3	; 0x03
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <set_vco_init_cv+0x142>
    205e:	22 0f       	add	r18, r18
    2060:	33 1f       	adc	r19, r19
    2062:	0a 94       	dec	r0
    2064:	e2 f7       	brpl	.-8      	; 0x205e <set_vco_init_cv+0x13e>
    2066:	3e 83       	std	Y+6, r19	; 0x06
    2068:	2d 83       	std	Y+5, r18	; 0x05
    206a:	8b 85       	ldd	r24, Y+11	; 0x0b
    206c:	9c 85       	ldd	r25, Y+12	; 0x0c
    206e:	82 2b       	or	r24, r18
    2070:	93 2b       	or	r25, r19
    2072:	9c 87       	std	Y+12, r25	; 0x0c
    2074:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    2076:	c4 01       	movw	r24, r8
    2078:	6b 85       	ldd	r22, Y+11	; 0x0b
    207a:	7c 85       	ldd	r23, Y+12	; 0x0c
    207c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
		
		count_finished = FALSE;
    2080:	10 92 7a 03 	sts	0x037A, r1
		period_counter = 0;
    2084:	10 92 7d 03 	sts	0x037D, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    2088:	8f e0       	ldi	r24, 0x0F	; 15
    208a:	e8 e1       	ldi	r30, 0x18	; 24
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	a8 95       	wdr
    2094:	e0 93 60 00 	sts	0x0060, r30
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    209e:	80 91 7a 03 	lds	r24, 0x037A
    20a2:	88 23       	and	r24, r24
    20a4:	89 f5       	brne	.+98     	; 0x2108 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    20a6:	c8 01       	movw	r24, r16
    20a8:	60 e0       	ldi	r22, 0x00	; 0
    20aa:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    20ae:	c4 01       	movw	r24, r8
    20b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    20b8:	c1 01       	movw	r24, r2
    20ba:	6f ef       	ldi	r22, 0xFF	; 255
    20bc:	7f e3       	ldi	r23, 0x3F	; 63
    20be:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    20c2:	c7 01       	movw	r24, r14
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    20cc:	c6 01       	movw	r24, r12
    20ce:	6f ef       	ldi	r22, 0xFF	; 255
    20d0:	7f e3       	ldi	r23, 0x3F	; 63
    20d2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    20d6:	c5 01       	movw	r24, r10
    20d8:	6f ef       	ldi	r22, 0xFF	; 255
    20da:	7f e3       	ldi	r23, 0x3F	; 63
    20dc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    20e0:	c3 01       	movw	r24, r6
    20e2:	6f ef       	ldi	r22, 0xFF	; 255
    20e4:	7f e3       	ldi	r23, 0x3F	; 63
    20e6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	6f ef       	ldi	r22, 0xFF	; 255
    20f0:	7f e3       	ldi	r23, 0x3F	; 63
    20f2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    20f6:	c2 01       	movw	r24, r4
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    2100:	80 91 7a 03 	lds	r24, 0x037A
    2104:	88 23       	and	r24, r24
    2106:	79 f2       	breq	.-98     	; 0x20a6 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    2108:	88 e1       	ldi	r24, 0x18	; 24
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	80 93 60 00 	sts	0x0060, r24
    2112:	10 92 60 00 	sts	0x0060, r1
    2116:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    2118:	80 91 78 03 	lds	r24, 0x0378
    211c:	90 91 79 03 	lds	r25, 0x0379
    2120:	ef 81       	ldd	r30, Y+7	; 0x07
    2122:	f8 85       	ldd	r31, Y+8	; 0x08
    2124:	e8 17       	cp	r30, r24
    2126:	f9 07       	cpc	r31, r25
    2128:	20 f0       	brcs	.+8      	; 0x2132 <set_vco_init_cv+0x212>
    212a:	80 91 af 02 	lds	r24, 0x02AF
    212e:	88 23       	and	r24, r24
    2130:	51 f4       	brne	.+20     	; 0x2146 <set_vco_init_cv+0x226>
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	80 95       	com	r24
    2138:	90 95       	com	r25
    213a:	2b 85       	ldd	r18, Y+11	; 0x0b
    213c:	3c 85       	ldd	r19, Y+12	; 0x0c
    213e:	28 23       	and	r18, r24
    2140:	39 23       	and	r19, r25
    2142:	3c 87       	std	Y+12, r19	; 0x0c
    2144:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
    2156:	ef ef       	ldi	r30, 0xFF	; 255
    2158:	8f 3f       	cpi	r24, 0xFF	; 255
    215a:	9e 07       	cpc	r25, r30
    215c:	09 f0       	breq	.+2      	; 0x2160 <set_vco_init_cv+0x240>
    215e:	7b cf       	rjmp	.-266    	; 0x2056 <set_vco_init_cv+0x136>
    2160:	2b 85       	ldd	r18, Y+11	; 0x0b
    2162:	3c 85       	ldd	r19, Y+12	; 0x0c
    2164:	3e 83       	std	Y+6, r19	; 0x06
    2166:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    2168:	88 ec       	ldi	r24, 0xC8	; 200
    216a:	91 e0       	ldi	r25, 0x01	; 1
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    2174:	89 ec       	ldi	r24, 0xC9	; 201
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    2180:	84 ed       	ldi	r24, 0xD4	; 212
    2182:	91 e0       	ldi	r25, 0x01	; 1
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    218c:	88 ed       	ldi	r24, 0xD8	; 216
    218e:	91 e0       	ldi	r25, 0x01	; 1
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	70 e0       	ldi	r23, 0x00	; 0
    2194:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    2198:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    219a:	ee e6       	ldi	r30, 0x6E	; 110
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	8d 7f       	andi	r24, 0xFD	; 253
    21a2:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    21a4:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	6d 81       	ldd	r22, Y+5	; 0x05
    21ac:	7e 81       	ldd	r23, Y+6	; 0x06
    21ae:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	2c 96       	adiw	r28, 0x0c	; 12
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	ff 90       	pop	r15
    21cc:	ef 90       	pop	r14
    21ce:	df 90       	pop	r13
    21d0:	cf 90       	pop	r12
    21d2:	bf 90       	pop	r11
    21d4:	af 90       	pop	r10
    21d6:	9f 90       	pop	r9
    21d8:	8f 90       	pop	r8
    21da:	7f 90       	pop	r7
    21dc:	6f 90       	pop	r6
    21de:	5f 90       	pop	r5
    21e0:	4f 90       	pop	r4
    21e2:	3f 90       	pop	r3
    21e4:	2f 90       	pop	r2
    21e6:	08 95       	ret

000021e8 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    21e8:	2f 92       	push	r2
    21ea:	3f 92       	push	r3
    21ec:	4f 92       	push	r4
    21ee:	5f 92       	push	r5
    21f0:	6f 92       	push	r6
    21f2:	7f 92       	push	r7
    21f4:	8f 92       	push	r8
    21f6:	9f 92       	push	r9
    21f8:	af 92       	push	r10
    21fa:	bf 92       	push	r11
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	c0 54       	subi	r28, 0x40	; 64
    2212:	d0 40       	sbci	r29, 0x00	; 0
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    2220:	de 01       	movw	r26, r28
    2222:	11 96       	adiw	r26, 0x01	; 1
    2224:	e0 e3       	ldi	r30, 0x30	; 48
    2226:	f2 e0       	ldi	r31, 0x02	; 2
    2228:	80 e3       	ldi	r24, 0x30	; 48
    222a:	01 90       	ld	r0, Z+
    222c:	0d 92       	st	X+, r0
    222e:	81 50       	subi	r24, 0x01	; 1
    2230:	e1 f7       	brne	.-8      	; 0x222a <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    2232:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    2236:	0f 30       	cpi	r16, 0x0F	; 15
    2238:	11 f5       	brne	.+68     	; 0x227e <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    223a:	40 90 75 03 	lds	r4, 0x0375
    223e:	50 90 76 03 	lds	r5, 0x0376
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2242:	0f 2e       	mov	r0, r31
    2244:	f6 ee       	ldi	r31, 0xE6	; 230
    2246:	8f 2e       	mov	r8, r31
    2248:	f1 e0       	ldi	r31, 0x01	; 1
    224a:	9f 2e       	mov	r9, r31
    224c:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    224e:	0f 2e       	mov	r0, r31
    2250:	fe ed       	ldi	r31, 0xDE	; 222
    2252:	2f 2e       	mov	r2, r31
    2254:	f1 e0       	ldi	r31, 0x01	; 1
    2256:	3f 2e       	mov	r3, r31
    2258:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    225a:	23 ee       	ldi	r18, 0xE3	; 227
    225c:	31 e0       	ldi	r19, 0x01	; 1
    225e:	3a ab       	sts	0x5a, r19
    2260:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2262:	0f 2e       	mov	r0, r31
    2264:	fc ed       	ldi	r31, 0xDC	; 220
    2266:	6f 2e       	mov	r6, r31
    2268:	f1 e0       	ldi	r31, 0x01	; 1
    226a:	7f 2e       	mov	r7, r31
    226c:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    226e:	01 e5       	ldi	r16, 0x51	; 81
    2270:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2272:	cc 24       	eor	r12, r12
    2274:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    2276:	ee 24       	eor	r14, r14
    2278:	68 94       	set
    227a:	e1 f8       	bld	r14, 1
    227c:	22 c0       	rjmp	.+68     	; 0x22c2 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    227e:	40 90 73 03 	lds	r4, 0x0373
    2282:	50 90 74 03 	lds	r5, 0x0374
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2286:	0f 2e       	mov	r0, r31
    2288:	f5 ee       	ldi	r31, 0xE5	; 229
    228a:	8f 2e       	mov	r8, r31
    228c:	f1 e0       	ldi	r31, 0x01	; 1
    228e:	9f 2e       	mov	r9, r31
    2290:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2292:	0f 2e       	mov	r0, r31
    2294:	f7 ed       	ldi	r31, 0xD7	; 215
    2296:	2f 2e       	mov	r2, r31
    2298:	f1 e0       	ldi	r31, 0x01	; 1
    229a:	3f 2e       	mov	r3, r31
    229c:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    229e:	44 ee       	ldi	r20, 0xE4	; 228
    22a0:	51 e0       	ldi	r21, 0x01	; 1
    22a2:	5a ab       	sts	0x5a, r21
    22a4:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    22a6:	0f 2e       	mov	r0, r31
    22a8:	fd ed       	ldi	r31, 0xDD	; 221
    22aa:	6f 2e       	mov	r6, r31
    22ac:	f1 e0       	ldi	r31, 0x01	; 1
    22ae:	7f 2e       	mov	r7, r31
    22b0:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    22b2:	0f e2       	ldi	r16, 0x2F	; 47
    22b4:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    22b6:	cc 24       	eor	r12, r12
    22b8:	68 94       	set
    22ba:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    22bc:	ee 24       	eor	r14, r14
    22be:	68 94       	set
    22c0:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    22c2:	c3 01       	movw	r24, r6
    22c4:	b2 01       	movw	r22, r4
    22c6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    22ca:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    22cc:	ed ed       	ldi	r30, 0xDD	; 221
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	80 64       	ori	r24, 0x40	; 64
    22d4:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    22d6:	80 81       	ld	r24, Z
    22d8:	8f 7b       	andi	r24, 0xBF	; 191
    22da:	80 83       	st	Z, r24
		DATA_BUS = 0;
    22dc:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    22de:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	80 93 7c 03 	sts	0x037C, r24
		
		compare_match_counter = 0;	
    22e6:	10 92 77 03 	sts	0x0377, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    22ea:	8c 2d       	mov	r24, r12
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	24 e6       	ldi	r18, 0x64	; 100
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	82 9f       	mul	r24, r18
    22f4:	d0 01       	movw	r26, r0
    22f6:	83 9f       	mul	r24, r19
    22f8:	b0 0d       	add	r27, r0
    22fa:	92 9f       	mul	r25, r18
    22fc:	b0 0d       	add	r27, r0
    22fe:	11 24       	eor	r1, r1
    2300:	bc ab       	sts	0x5c, r27
    2302:	ab ab       	sts	0x5b, r26
    2304:	fe 01       	movw	r30, r28
    2306:	31 96       	adiw	r30, 0x01	; 1
    2308:	fc af       	sts	0x7c, r31
    230a:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    230c:	98 01       	movw	r18, r16
    230e:	2e 5f       	subi	r18, 0xFE	; 254
    2310:	3f 4f       	sbci	r19, 0xFF	; 255
    2312:	21 96       	adiw	r28, 0x01	; 1
    2314:	3f af       	sts	0x7f, r19
    2316:	2e af       	sts	0x7e, r18
    2318:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    231a:	1e ae       	sts	0xbe, r17
    231c:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    231e:	0f 2e       	mov	r0, r31
    2320:	f8 ed       	ldi	r31, 0xD8	; 216
    2322:	ef 2e       	mov	r14, r31
    2324:	f1 e0       	ldi	r31, 0x01	; 1
    2326:	ff 2e       	mov	r15, r31
    2328:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    232a:	0f 2e       	mov	r0, r31
    232c:	f4 ed       	ldi	r31, 0xD4	; 212
    232e:	cf 2e       	mov	r12, r31
    2330:	f1 e0       	ldi	r31, 0x01	; 1
    2332:	df 2e       	mov	r13, r31
    2334:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2336:	0f 2e       	mov	r0, r31
    2338:	fa ec       	ldi	r31, 0xCA	; 202
    233a:	af 2e       	mov	r10, r31
    233c:	f1 e0       	ldi	r31, 0x01	; 1
    233e:	bf 2e       	mov	r11, r31
    2340:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    2342:	eb ad       	sts	0x6b, r30
    2344:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    2346:	80 81       	ld	r24, Z
    2348:	80 93 7c 03 	sts	0x037C, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    234c:	84 b5       	in	r24, 0x24	; 36
    234e:	8f 60       	ori	r24, 0x0F	; 15
    2350:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    2356:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    2358:	4d ad       	sts	0x6d, r20
    235a:	5e ad       	sts	0x6e, r21
    235c:	43 30       	cpi	r20, 0x03	; 3
    235e:	51 05       	cpc	r21, r1
    2360:	24 f4       	brge	.+8      	; 0x236a <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2362:	83 e0       	ldi	r24, 0x03	; 3
    2364:	80 93 7b 03 	sts	0x037B, r24
    2368:	03 c0       	rjmp	.+6      	; 0x2370 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	80 93 7b 03 	sts	0x037B, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    2370:	81 81       	ldd	r24, Z+1	; 0x01
    2372:	92 81       	ldd	r25, Z+2	; 0x02
    2374:	9a af       	sts	0x7a, r25
    2376:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2378:	ad e0       	ldi	r26, 0x0D	; 13
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	be ab       	sts	0x5e, r27
    237e:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    2380:	00 e0       	ldi	r16, 0x00	; 0
    2382:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2384:	e1 e0       	ldi	r30, 0x01	; 1
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	0d a8       	sts	0x8d, r16
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <tune_8ths+0x1a8>
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <tune_8ths+0x1a4>
    2394:	f8 af       	sts	0x78, r31
    2396:	ef ab       	sts	0x5f, r30
    2398:	0e 2b       	or	r16, r30
    239a:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    239c:	ae e6       	ldi	r26, 0x6E	; 110
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	8c 91       	ld	r24, X
    23a2:	8d 7f       	andi	r24, 0xFD	; 253
    23a4:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    23a6:	c4 01       	movw	r24, r8
    23a8:	b8 01       	movw	r22, r16
    23aa:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23ae:	e3 ef       	ldi	r30, 0xF3	; 243
    23b0:	f1 e0       	ldi	r31, 0x01	; 1
    23b2:	31 97       	sbiw	r30, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <tune_8ths+0x1ca>
    23b6:	00 c0       	rjmp	.+0      	; 0x23b8 <tune_8ths+0x1d0>
    23b8:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    23ba:	ae e6       	ldi	r26, 0x6E	; 110
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	8c 91       	ld	r24, X
    23c0:	82 60       	ori	r24, 0x02	; 2
    23c2:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    23c4:	10 92 7a 03 	sts	0x037A, r1
				period_counter = 0;
    23c8:	10 92 7d 03 	sts	0x037D, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    23cc:	e8 e1       	ldi	r30, 0x18	; 24
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	2f e0       	ldi	r18, 0x0F	; 15
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	a8 95       	wdr
    23d8:	e0 93 60 00 	sts	0x0060, r30
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    23e2:	80 91 7a 03 	lds	r24, 0x037A
    23e6:	88 23       	and	r24, r24
    23e8:	81 f5       	brne	.+96     	; 0x244a <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    23ea:	80 91 7c 03 	lds	r24, 0x037C
    23ee:	4b a9       	sts	0x4b, r20
    23f0:	5c a9       	sts	0x4c, r21
    23f2:	48 0f       	add	r20, r24
    23f4:	51 1d       	adc	r21, r1
    23f6:	ca 01       	movw	r24, r20
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    23fe:	c3 01       	movw	r24, r6
    2400:	b2 01       	movw	r22, r4
    2402:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2406:	c4 01       	movw	r24, r8
    2408:	b8 01       	movw	r22, r16
    240a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    240e:	c7 01       	movw	r24, r14
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	70 e0       	ldi	r23, 0x00	; 0
    2414:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    2418:	c6 01       	movw	r24, r12
    241a:	6f ef       	ldi	r22, 0xFF	; 255
    241c:	7f e3       	ldi	r23, 0x3F	; 63
    241e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2422:	c5 01       	movw	r24, r10
    2424:	6f ef       	ldi	r22, 0xFF	; 255
    2426:	7f e3       	ldi	r23, 0x3F	; 63
    2428:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    242c:	c1 01       	movw	r24, r2
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	70 e2       	ldi	r23, 0x20	; 32
    2432:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    2436:	89 a9       	sts	0x49, r24
    2438:	9a a9       	sts	0x4a, r25
    243a:	6f ef       	ldi	r22, 0xFF	; 255
    243c:	7f e3       	ldi	r23, 0x3F	; 63
    243e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2442:	80 91 7a 03 	lds	r24, 0x037A
    2446:	88 23       	and	r24, r24
    2448:	81 f2       	breq	.-96     	; 0x23ea <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    244a:	58 e1       	ldi	r21, 0x18	; 24
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	50 93 60 00 	sts	0x0060, r21
    2454:	10 92 60 00 	sts	0x0060, r1
    2458:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    245a:	80 91 78 03 	lds	r24, 0x0378
    245e:	90 91 79 03 	lds	r25, 0x0379
    2462:	a9 ad       	sts	0x69, r26
    2464:	ba ad       	sts	0x6a, r27
    2466:	a8 17       	cp	r26, r24
    2468:	b9 07       	cpc	r27, r25
    246a:	50 f0       	brcs	.+20     	; 0x2480 <tune_8ths+0x298>
    246c:	80 91 af 02 	lds	r24, 0x02AF
    2470:	81 30       	cpi	r24, 0x01	; 1
    2472:	31 f4       	brne	.+12     	; 0x2480 <tune_8ths+0x298>
    2474:	8f a9       	sts	0x4f, r24
    2476:	98 ad       	sts	0x68, r25
    2478:	80 95       	com	r24
    247a:	90 95       	com	r25
    247c:	08 23       	and	r16, r24
    247e:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2480:	80 91 78 03 	lds	r24, 0x0378
    2484:	90 91 79 03 	lds	r25, 0x0379
    2488:	e9 ad       	sts	0x69, r30
    248a:	fa ad       	sts	0x6a, r31
    248c:	8e 17       	cp	r24, r30
    248e:	9f 07       	cpc	r25, r31
    2490:	21 f4       	brne	.+8      	; 0x249a <tune_8ths+0x2b2>
    2492:	80 91 af 02 	lds	r24, 0x02AF
    2496:	81 30       	cpi	r24, 0x01	; 1
    2498:	71 f0       	breq	.+28     	; 0x24b6 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    249a:	f1 e0       	ldi	r31, 0x01	; 1
    249c:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    24a0:	2d a9       	sts	0x4d, r18
    24a2:	3e a9       	sts	0x4e, r19
    24a4:	21 50       	subi	r18, 0x01	; 1
    24a6:	30 40       	sbci	r19, 0x00	; 0
    24a8:	3e ab       	sts	0x5e, r19
    24aa:	2d ab       	sts	0x5d, r18
    24ac:	4f ef       	ldi	r20, 0xFF	; 255
    24ae:	2f 3f       	cpi	r18, 0xFF	; 255
    24b0:	34 07       	cpc	r19, r20
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <tune_8ths+0x2ce>
    24b4:	67 cf       	rjmp	.-306    	; 0x2384 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    24b6:	21 96       	adiw	r28, 0x01	; 1
    24b8:	ae ad       	sts	0x6e, r26
    24ba:	bf ad       	sts	0x6f, r27
    24bc:	21 97       	sbiw	r28, 0x01	; 1
    24be:	0d 93       	st	X+, r16
    24c0:	1d 93       	st	X+, r17
    24c2:	21 96       	adiw	r28, 0x01	; 1
    24c4:	bf af       	sts	0x7f, r27
    24c6:	ae af       	sts	0x7e, r26
    24c8:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    24ca:	ee e6       	ldi	r30, 0x6E	; 110
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8d 7f       	andi	r24, 0xFD	; 253
    24d2:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    24d4:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    24d6:	2d ad       	sts	0x6d, r18
    24d8:	3e ad       	sts	0x6e, r19
    24da:	2f 5f       	subi	r18, 0xFF	; 255
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	3e af       	sts	0x7e, r19
    24e0:	2d af       	sts	0x7d, r18
    24e2:	4b ad       	sts	0x6b, r20
    24e4:	5c ad       	sts	0x6c, r21
    24e6:	4d 5f       	subi	r20, 0xFD	; 253
    24e8:	5f 4f       	sbci	r21, 0xFF	; 255
    24ea:	5c af       	sts	0x7c, r21
    24ec:	4b af       	sts	0x7b, r20
    24ee:	20 31       	cpi	r18, 0x10	; 16
    24f0:	31 05       	cpc	r19, r1
    24f2:	09 f0       	breq	.+2      	; 0x24f6 <tune_8ths+0x30e>
    24f4:	26 cf       	rjmp	.-436    	; 0x2342 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    24f6:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    24f8:	c0 5c       	subi	r28, 0xC0	; 192
    24fa:	df 4f       	sbci	r29, 0xFF	; 255
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	ff 90       	pop	r15
    2510:	ef 90       	pop	r14
    2512:	df 90       	pop	r13
    2514:	cf 90       	pop	r12
    2516:	bf 90       	pop	r11
    2518:	af 90       	pop	r10
    251a:	9f 90       	pop	r9
    251c:	8f 90       	pop	r8
    251e:	7f 90       	pop	r7
    2520:	6f 90       	pop	r6
    2522:	5f 90       	pop	r5
    2524:	4f 90       	pop	r4
    2526:	3f 90       	pop	r3
    2528:	2f 90       	pop	r2
    252a:	08 95       	ret

0000252c <tune_filter>:
	
void tune_filter(void) {
    252c:	2f 92       	push	r2
    252e:	3f 92       	push	r3
    2530:	4f 92       	push	r4
    2532:	5f 92       	push	r5
    2534:	6f 92       	push	r6
    2536:	7f 92       	push	r7
    2538:	8f 92       	push	r8
    253a:	9f 92       	push	r9
    253c:	af 92       	push	r10
    253e:	bf 92       	push	r11
    2540:	cf 92       	push	r12
    2542:	df 92       	push	r13
    2544:	ef 92       	push	r14
    2546:	ff 92       	push	r15
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	e9 97       	sbiw	r28, 0x39	; 57
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    2560:	de 01       	movw	r26, r28
    2562:	11 96       	adiw	r26, 0x01	; 1
    2564:	e0 e6       	ldi	r30, 0x60	; 96
    2566:	f2 e0       	ldi	r31, 0x02	; 2
    2568:	8d e2       	ldi	r24, 0x2D	; 45
    256a:	01 90       	ld	r0, Z+
    256c:	0d 92       	st	X+, r0
    256e:	81 50       	subi	r24, 0x01	; 1
    2570:	e1 f7       	brne	.-8      	; 0x256a <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2572:	88 ed       	ldi	r24, 0xD8	; 216
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	60 e0       	ldi	r22, 0x00	; 0
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    257e:	81 ee       	ldi	r24, 0xE1	; 225
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	60 e0       	ldi	r22, 0x00	; 0
    2584:	70 e0       	ldi	r23, 0x00	; 0
    2586:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    258a:	82 ee       	ldi	r24, 0xE2	; 226
    258c:	91 e0       	ldi	r25, 0x01	; 1
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2596:	82 eb       	ldi	r24, 0xB2	; 178
    2598:	92 e0       	ldi	r25, 0x02	; 2
    259a:	60 e0       	ldi	r22, 0x00	; 0
    259c:	70 e0       	ldi	r23, 0x00	; 0
    259e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    25a2:	8a ed       	ldi	r24, 0xDA	; 218
    25a4:	91 e0       	ldi	r25, 0x01	; 1
    25a6:	60 e0       	ldi	r22, 0x00	; 0
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    25ae:	8f ed       	ldi	r24, 0xDF	; 223
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    25ba:	80 ee       	ldi	r24, 0xE0	; 224
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    25c6:	81 ed       	ldi	r24, 0xD1	; 209
    25c8:	91 e0       	ldi	r25, 0x01	; 1
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	70 e0       	ldi	r23, 0x00	; 0
    25ce:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    25d2:	86 ed       	ldi	r24, 0xD6	; 214
    25d4:	91 e0       	ldi	r25, 0x01	; 1
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    25de:	82 ed       	ldi	r24, 0xD2	; 210
    25e0:	91 e0       	ldi	r25, 0x01	; 1
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    25ea:	83 ed       	ldi	r24, 0xD3	; 211
    25ec:	91 e0       	ldi	r25, 0x01	; 1
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    25f6:	84 ed       	ldi	r24, 0xD4	; 212
    25f8:	91 e0       	ldi	r25, 0x01	; 1
    25fa:	6f ef       	ldi	r22, 0xFF	; 255
    25fc:	7f e3       	ldi	r23, 0x3F	; 63
    25fe:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    2602:	85 ed       	ldi	r24, 0xD5	; 213
    2604:	91 e0       	ldi	r25, 0x01	; 1
    2606:	6f ef       	ldi	r22, 0xFF	; 255
    2608:	7f e3       	ldi	r23, 0x3F	; 63
    260a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    260e:	89 ed       	ldi	r24, 0xD9	; 217
    2610:	91 e0       	ldi	r25, 0x01	; 1
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	70 e0       	ldi	r23, 0x00	; 0
    2616:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    261a:	8e ec       	ldi	r24, 0xCE	; 206
    261c:	91 e0       	ldi	r25, 0x01	; 1
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2626:	8c ec       	ldi	r24, 0xCC	; 204
    2628:	91 e0       	ldi	r25, 0x01	; 1
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	70 e0       	ldi	r23, 0x00	; 0
    262e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2632:	8a ec       	ldi	r24, 0xCA	; 202
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	6f ef       	ldi	r22, 0xFF	; 255
    2638:	7f e3       	ldi	r23, 0x3F	; 63
    263a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    263e:	88 ec       	ldi	r24, 0xC8	; 200
    2640:	91 e0       	ldi	r25, 0x01	; 1
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	70 e0       	ldi	r23, 0x00	; 0
    2646:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    264a:	80 ed       	ldi	r24, 0xD0	; 208
    264c:	91 e0       	ldi	r25, 0x01	; 1
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	70 e0       	ldi	r23, 0x00	; 0
    2652:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2656:	83 ee       	ldi	r24, 0xE3	; 227
    2658:	91 e0       	ldi	r25, 0x01	; 1
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	70 e0       	ldi	r23, 0x00	; 0
    265e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2662:	84 ee       	ldi	r24, 0xE4	; 228
    2664:	91 e0       	ldi	r25, 0x01	; 1
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	70 e0       	ldi	r23, 0x00	; 0
    266a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    266e:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2670:	ed ed       	ldi	r30, 0xDD	; 221
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	80 64       	ori	r24, 0x40	; 64
    2678:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    267a:	80 81       	ld	r24, Z
    267c:	8f 7b       	andi	r24, 0xBF	; 191
    267e:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	80 93 7c 03 	sts	0x037C, r24
	PORTF |= (1<<GATE); //turn gate on
    2686:	89 9a       	sbi	0x11, 1	; 17
    2688:	9e 01       	movw	r18, r28
    268a:	2f 5f       	subi	r18, 0xFF	; 255
    268c:	3f 4f       	sbci	r19, 0xFF	; 255
    268e:	3d ab       	sts	0x5d, r19
    2690:	2c ab       	sts	0x5c, r18
    2692:	81 e1       	ldi	r24, 0x11	; 17
    2694:	93 e0       	ldi	r25, 0x03	; 3
    2696:	99 af       	sts	0x79, r25
    2698:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    269a:	1f aa       	sts	0x9f, r17
    269c:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    269e:	0f 2e       	mov	r0, r31
    26a0:	f4 ed       	ldi	r31, 0xD4	; 212
    26a2:	af 2e       	mov	r10, r31
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	bf 2e       	mov	r11, r31
    26a8:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    26aa:	0f 2e       	mov	r0, r31
    26ac:	f8 ed       	ldi	r31, 0xD8	; 216
    26ae:	6f 2e       	mov	r6, r31
    26b0:	f1 e0       	ldi	r31, 0x01	; 1
    26b2:	7f 2e       	mov	r7, r31
    26b4:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    26b6:	0f 2e       	mov	r0, r31
    26b8:	f5 ed       	ldi	r31, 0xD5	; 213
    26ba:	4f 2e       	mov	r4, r31
    26bc:	f1 e0       	ldi	r31, 0x01	; 1
    26be:	5f 2e       	mov	r5, r31
    26c0:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    26c2:	0f 2e       	mov	r0, r31
    26c4:	fa ec       	ldi	r31, 0xCA	; 202
    26c6:	2f 2e       	mov	r2, r31
    26c8:	f1 e0       	ldi	r31, 0x01	; 1
    26ca:	3f 2e       	mov	r3, r31
    26cc:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    26ce:	ac a9       	sts	0x4c, r26
    26d0:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    26d2:	8c 91       	ld	r24, X
    26d4:	80 93 7c 03 	sts	0x037C, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    26d8:	84 b5       	in	r24, 0x24	; 36
    26da:	8f 60       	ori	r24, 0x0F	; 15
    26dc:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    26e2:	ee e6       	ldi	r30, 0x6E	; 110
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	82 60       	ori	r24, 0x02	; 2
    26ea:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    26ec:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    26ee:	ee a9       	sts	0x4e, r30
    26f0:	ff a9       	sts	0x4f, r31
    26f2:	e2 30       	cpi	r30, 0x02	; 2
    26f4:	f1 05       	cpc	r31, r1
    26f6:	24 f4       	brge	.+8      	; 0x2700 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    26f8:	83 e0       	ldi	r24, 0x03	; 3
    26fa:	80 93 7b 03 	sts	0x037B, r24
    26fe:	03 c0       	rjmp	.+6      	; 0x2706 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    2700:	82 e0       	ldi	r24, 0x02	; 2
    2702:	80 93 7b 03 	sts	0x037B, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    2706:	11 96       	adiw	r26, 0x01	; 1
    2708:	2d 91       	ld	r18, X+
    270a:	3c 91       	ld	r19, X
    270c:	12 97       	sbiw	r26, 0x02	; 2
    270e:	3b ab       	sts	0x5b, r19
    2710:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2712:	8d e0       	ldi	r24, 0x0D	; 13
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9f a7       	lds	r25, 0x7f
    2718:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    271a:	ee 24       	eor	r14, r14
    271c:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    271e:	0f 2e       	mov	r0, r31
    2720:	f1 ed       	ldi	r31, 0xD1	; 209
    2722:	cf 2e       	mov	r12, r31
    2724:	f1 e0       	ldi	r31, 0x01	; 1
    2726:	df 2e       	mov	r13, r31
    2728:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    272a:	0f 2e       	mov	r0, r31
    272c:	f6 ed       	ldi	r31, 0xD6	; 214
    272e:	8f 2e       	mov	r8, r31
    2730:	f1 e0       	ldi	r31, 0x01	; 1
    2732:	9f 2e       	mov	r9, r31
    2734:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	fc 01       	movw	r30, r24
    273c:	0e a4       	lds	r16, 0xae
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <tune_filter+0x218>
    2740:	ee 0f       	add	r30, r30
    2742:	ff 1f       	adc	r31, r31
    2744:	0a 94       	dec	r0
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <tune_filter+0x214>
    2748:	f9 ab       	sts	0x59, r31
    274a:	e8 ab       	sts	0x58, r30
    274c:	ee 2a       	or	r14, r30
    274e:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2750:	c5 01       	movw	r24, r10
    2752:	b7 01       	movw	r22, r14
    2754:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			count_finished = FALSE;
    2758:	10 92 7a 03 	sts	0x037A, r1
			period_counter = 0;
    275c:	10 92 7d 03 	sts	0x037D, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2760:	8f e0       	ldi	r24, 0x0F	; 15
    2762:	28 e1       	ldi	r18, 0x18	; 24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	a8 95       	wdr
    276c:	20 93 60 00 	sts	0x0060, r18
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2776:	80 91 7a 03 	lds	r24, 0x037A
    277a:	88 23       	and	r24, r24
    277c:	b1 f5       	brne	.+108    	; 0x27ea <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    277e:	02 ed       	ldi	r16, 0xD2	; 210
    2780:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2782:	80 91 7c 03 	lds	r24, 0x037C
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	84 5d       	subi	r24, 0xD4	; 212
    278a:	9e 4f       	sbci	r25, 0xFE	; 254
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2792:	c5 01       	movw	r24, r10
    2794:	b7 01       	movw	r22, r14
    2796:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    279a:	c3 01       	movw	r24, r6
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    27a4:	c2 01       	movw	r24, r4
    27a6:	6f ef       	ldi	r22, 0xFF	; 255
    27a8:	7f e3       	ldi	r23, 0x3F	; 63
    27aa:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    27ae:	c1 01       	movw	r24, r2
    27b0:	6f ef       	ldi	r22, 0xFF	; 255
    27b2:	7f e3       	ldi	r23, 0x3F	; 63
    27b4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    27b8:	8e ec       	ldi	r24, 0xCE	; 206
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	70 e0       	ldi	r23, 0x00	; 0
    27c0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    27c4:	c6 01       	movw	r24, r12
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	70 e0       	ldi	r23, 0x00	; 0
    27ca:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    27ce:	c4 01       	movw	r24, r8
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    27d8:	c8 01       	movw	r24, r16
    27da:	60 e0       	ldi	r22, 0x00	; 0
    27dc:	70 e0       	ldi	r23, 0x00	; 0
    27de:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    27e2:	80 91 7a 03 	lds	r24, 0x037A
    27e6:	88 23       	and	r24, r24
    27e8:	61 f2       	breq	.-104    	; 0x2782 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    27ea:	88 e1       	ldi	r24, 0x18	; 24
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	80 93 60 00 	sts	0x0060, r24
    27f4:	10 92 60 00 	sts	0x0060, r1
    27f8:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    27fa:	80 91 78 03 	lds	r24, 0x0378
    27fe:	90 91 79 03 	lds	r25, 0x0379
    2802:	2a a9       	sts	0x4a, r18
    2804:	3b a9       	sts	0x4b, r19
    2806:	28 17       	cp	r18, r24
    2808:	39 07       	cpc	r19, r25
    280a:	50 f0       	brcs	.+20     	; 0x2820 <tune_filter+0x2f4>
    280c:	80 91 af 02 	lds	r24, 0x02AF
    2810:	81 30       	cpi	r24, 0x01	; 1
    2812:	31 f4       	brne	.+12     	; 0x2820 <tune_filter+0x2f4>
    2814:	88 a9       	sts	0x48, r24
    2816:	99 a9       	sts	0x49, r25
    2818:	80 95       	com	r24
    281a:	90 95       	com	r25
    281c:	e8 22       	and	r14, r24
    281e:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2820:	80 91 78 03 	lds	r24, 0x0378
    2824:	90 91 79 03 	lds	r25, 0x0379
    2828:	ea a9       	sts	0x4a, r30
    282a:	fb a9       	sts	0x4b, r31
    282c:	8e 17       	cp	r24, r30
    282e:	9f 07       	cpc	r25, r31
    2830:	21 f4       	brne	.+8      	; 0x283a <tune_filter+0x30e>
    2832:	80 91 af 02 	lds	r24, 0x02AF
    2836:	81 30       	cpi	r24, 0x01	; 1
    2838:	71 f0       	breq	.+28     	; 0x2856 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2840:	2e a5       	lds	r18, 0x6e
    2842:	3f a5       	lds	r19, 0x6f
    2844:	21 50       	subi	r18, 0x01	; 1
    2846:	30 40       	sbci	r19, 0x00	; 0
    2848:	3f a7       	lds	r19, 0x7f
    284a:	2e a7       	lds	r18, 0x7e
    284c:	8f ef       	ldi	r24, 0xFF	; 255
    284e:	2f 3f       	cpi	r18, 0xFF	; 255
    2850:	38 07       	cpc	r19, r24
    2852:	09 f0       	breq	.+2      	; 0x2856 <tune_filter+0x32a>
    2854:	70 cf       	rjmp	.-288    	; 0x2736 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2856:	ee a9       	sts	0x4e, r30
    2858:	ff a9       	sts	0x4f, r31
    285a:	31 96       	adiw	r30, 0x01	; 1
    285c:	ff ab       	sts	0x5f, r31
    285e:	ee ab       	sts	0x5e, r30
    2860:	c7 01       	movw	r24, r14
    2862:	80 96       	adiw	r24, 0x20	; 32
    2864:	e8 ad       	sts	0x68, r30
    2866:	f9 ad       	sts	0x69, r31
    2868:	81 93       	st	Z+, r24
    286a:	91 93       	st	Z+, r25
    286c:	f9 af       	sts	0x79, r31
    286e:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2870:	ee e6       	ldi	r30, 0x6E	; 110
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	8d 7f       	andi	r24, 0xFD	; 253
    2878:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    287a:	14 bc       	out	0x24, r1	; 36
    287c:	2c a9       	sts	0x4c, r18
    287e:	3d a9       	sts	0x4d, r19
    2880:	2d 5f       	subi	r18, 0xFD	; 253
    2882:	3f 4f       	sbci	r19, 0xFF	; 255
    2884:	3d ab       	sts	0x5d, r19
    2886:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2888:	8e a9       	sts	0x4e, r24
    288a:	9f a9       	sts	0x4f, r25
    288c:	8f 30       	cpi	r24, 0x0F	; 15
    288e:	91 05       	cpc	r25, r1
    2890:	09 f0       	breq	.+2      	; 0x2894 <tune_filter+0x368>
    2892:	1d cf       	rjmp	.-454    	; 0x26ce <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2894:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2896:	e9 96       	adiw	r28, 0x39	; 57
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	ff 90       	pop	r15
    28ac:	ef 90       	pop	r14
    28ae:	df 90       	pop	r13
    28b0:	cf 90       	pop	r12
    28b2:	bf 90       	pop	r11
    28b4:	af 90       	pop	r10
    28b6:	9f 90       	pop	r9
    28b8:	8f 90       	pop	r8
    28ba:	7f 90       	pop	r7
    28bc:	6f 90       	pop	r6
    28be:	5f 90       	pop	r5
    28c0:	4f 90       	pop	r4
    28c2:	3f 90       	pop	r3
    28c4:	2f 90       	pop	r2
    28c6:	08 95       	ret

000028c8 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    28c8:	8f e0       	ldi	r24, 0x0F	; 15
    28ca:	93 e0       	ldi	r25, 0x03	; 3
    28cc:	6c e0       	ldi	r22, 0x0C	; 12
    28ce:	76 e0       	ldi	r23, 0x06	; 6
    28d0:	40 e2       	ldi	r20, 0x20	; 32
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    28d8:	81 e5       	ldi	r24, 0x51	; 81
    28da:	93 e0       	ldi	r25, 0x03	; 3
    28dc:	6e e4       	ldi	r22, 0x4E	; 78
    28de:	76 e0       	ldi	r23, 0x06	; 6
    28e0:	42 e2       	ldi	r20, 0x22	; 34
    28e2:	50 e0       	ldi	r21, 0x00	; 0
    28e4:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    28e8:	8f e2       	ldi	r24, 0x2F	; 47
    28ea:	93 e0       	ldi	r25, 0x03	; 3
    28ec:	6c e2       	ldi	r22, 0x2C	; 44
    28ee:	76 e0       	ldi	r23, 0x06	; 6
    28f0:	42 e2       	ldi	r20, 0x22	; 34
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__eeupd_block_m6450a>
	
	
}
    28f8:	08 95       	ret

000028fa <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    28fa:	82 e7       	ldi	r24, 0x72	; 114
    28fc:	96 e0       	ldi	r25, 0x06	; 6
    28fe:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__eerd_word_m6450a>
    2902:	90 93 76 03 	sts	0x0376, r25
    2906:	80 93 75 03 	sts	0x0375, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    290a:	80 e7       	ldi	r24, 0x70	; 112
    290c:	96 e0       	ldi	r25, 0x06	; 6
    290e:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__eerd_word_m6450a>
    2912:	90 93 74 03 	sts	0x0374, r25
    2916:	80 93 73 03 	sts	0x0373, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    291a:	81 e5       	ldi	r24, 0x51	; 81
    291c:	93 e0       	ldi	r25, 0x03	; 3
    291e:	6e e4       	ldi	r22, 0x4E	; 78
    2920:	76 e0       	ldi	r23, 0x06	; 6
    2922:	42 e2       	ldi	r20, 0x22	; 34
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    292a:	8f e2       	ldi	r24, 0x2F	; 47
    292c:	93 e0       	ldi	r25, 0x03	; 3
    292e:	6c e2       	ldi	r22, 0x2C	; 44
    2930:	76 e0       	ldi	r23, 0x06	; 6
    2932:	42 e2       	ldi	r20, 0x22	; 34
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    293a:	8f e0       	ldi	r24, 0x0F	; 15
    293c:	93 e0       	ldi	r25, 0x03	; 3
    293e:	6c e0       	ldi	r22, 0x0C	; 12
    2940:	76 e0       	ldi	r23, 0x06	; 6
    2942:	40 e2       	ldi	r20, 0x20	; 32
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    294a:	08 95       	ret

0000294c <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    294c:	98 2f       	mov	r25, r24
    294e:	96 95       	lsr	r25
    2950:	96 95       	lsr	r25
    2952:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2954:	29 2f       	mov	r18, r25
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	f9 01       	movw	r30, r18
    295a:	31 97       	sbiw	r30, 0x01	; 1
    295c:	ee 0f       	add	r30, r30
    295e:	ff 1f       	adc	r31, r31
    2960:	e6 0f       	add	r30, r22
    2962:	f7 1f       	adc	r31, r23
    2964:	01 90       	ld	r0, Z+
    2966:	f0 81       	ld	r31, Z
    2968:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    296a:	22 0f       	add	r18, r18
    296c:	33 1f       	adc	r19, r19
    296e:	26 0f       	add	r18, r22
    2970:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2972:	d9 01       	movw	r26, r18
    2974:	4d 91       	ld	r20, X+
    2976:	5c 91       	ld	r21, X
    2978:	11 97       	sbiw	r26, 0x01	; 1
    297a:	4e 1b       	sub	r20, r30
    297c:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    297e:	99 0f       	add	r25, r25
    2980:	99 0f       	add	r25, r25
    2982:	99 0f       	add	r25, r25
    2984:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	48 9f       	mul	r20, r24
    298a:	90 01       	movw	r18, r0
    298c:	49 9f       	mul	r20, r25
    298e:	30 0d       	add	r19, r0
    2990:	58 9f       	mul	r21, r24
    2992:	30 0d       	add	r19, r0
    2994:	11 24       	eor	r1, r1
    2996:	36 95       	lsr	r19
    2998:	27 95       	ror	r18
    299a:	36 95       	lsr	r19
    299c:	27 95       	ror	r18
    299e:	36 95       	lsr	r19
    29a0:	27 95       	ror	r18
    29a2:	e2 0f       	add	r30, r18
    29a4:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    29a6:	8e 2f       	mov	r24, r30
    29a8:	9f 2f       	mov	r25, r31
    29aa:	08 95       	ret

000029ac <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	a2 97       	sbiw	r28, 0x22	; 34
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    29c0:	de 01       	movw	r26, r28
    29c2:	11 96       	adiw	r26, 0x01	; 1
    29c4:	ed e8       	ldi	r30, 0x8D	; 141
    29c6:	f2 e0       	ldi	r31, 0x02	; 2
    29c8:	82 e2       	ldi	r24, 0x22	; 34
    29ca:	01 90       	ld	r0, Z+
    29cc:	0d 92       	st	X+, r0
    29ce:	81 50       	subi	r24, 0x01	; 1
    29d0:	e1 f7       	brne	.-8      	; 0x29ca <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    29d2:	a1 e5       	ldi	r26, 0x51	; 81
    29d4:	b3 e0       	ldi	r27, 0x03	; 3
    29d6:	fe 01       	movw	r30, r28
    29d8:	31 96       	adiw	r30, 0x01	; 1
    29da:	82 e2       	ldi	r24, 0x22	; 34
    29dc:	01 90       	ld	r0, Z+
    29de:	0d 92       	st	X+, r0
    29e0:	81 50       	subi	r24, 0x01	; 1
    29e2:	e1 f7       	brne	.-8      	; 0x29dc <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    29e4:	af e2       	ldi	r26, 0x2F	; 47
    29e6:	b3 e0       	ldi	r27, 0x03	; 3
    29e8:	fe 01       	movw	r30, r28
    29ea:	31 96       	adiw	r30, 0x01	; 1
    29ec:	82 e2       	ldi	r24, 0x22	; 34
    29ee:	01 90       	ld	r0, Z+
    29f0:	0d 92       	st	X+, r0
    29f2:	81 50       	subi	r24, 0x01	; 1
    29f4:	e1 f7       	brne	.-8      	; 0x29ee <set_one_volt_per_octave+0x42>
	
	
}
    29f6:	a2 96       	adiw	r28, 0x22	; 34
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	08 95       	ret

00002a08 <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2a08:	ef e6       	ldi	r30, 0x6F	; 111
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	82 70       	andi	r24, 0x02	; 2
    2a10:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2a12:	e1 e8       	ldi	r30, 0x81	; 129
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	87 7f       	andi	r24, 0xF7	; 247
    2a1a:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2a1c:	8f e0       	ldi	r24, 0x0F	; 15
    2a1e:	6f e0       	ldi	r22, 0x0F	; 15
    2a20:	7e e5       	ldi	r23, 0x5E	; 94
    2a22:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <set_vco_init_cv>
    2a26:	90 93 76 03 	sts	0x0376, r25
    2a2a:	80 93 75 03 	sts	0x0375, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2a2e:	80 ef       	ldi	r24, 0xF0	; 240
    2a30:	6f e0       	ldi	r22, 0x0F	; 15
    2a32:	7e e5       	ldi	r23, 0x5E	; 94
    2a34:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <set_vco_init_cv>
    2a38:	90 93 74 03 	sts	0x0374, r25
    2a3c:	80 93 73 03 	sts	0x0373, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2a40:	8f e0       	ldi	r24, 0x0F	; 15
    2a42:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <tune_8ths>
			tune_8ths(VCO2);
    2a46:	80 ef       	ldi	r24, 0xF0	; 240
    2a48:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <tune_8ths>
			tune_filter();
    2a4c:	0e 94 96 12 	call	0x252c	; 0x252c <tune_filter>
    2a50:	8f e4       	ldi	r24, 0x4F	; 79
    2a52:	93 ec       	ldi	r25, 0xC3	; 195
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <tune+0x4c>
    2a58:	00 c0       	rjmp	.+0      	; 0x2a5a <tune+0x52>
    2a5a:	00 00       	nop
			//save_tuning_tables();
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2a5c:	08 95       	ret

00002a5e <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2a5e:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2a60:	98 2f       	mov	r25, r24
    2a62:	9c 70       	andi	r25, 0x0C	; 12
    2a64:	20 91 c1 02 	lds	r18, 0x02C1
    2a68:	92 2b       	or	r25, r18
    2a6a:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2a6e:	98 2f       	mov	r25, r24
    2a70:	92 95       	swap	r25
    2a72:	96 95       	lsr	r25
    2a74:	97 70       	andi	r25, 0x07	; 7
    2a76:	90 ff       	sbrs	r25, 0
    2a78:	16 c0       	rjmp	.+44     	; 0x2aa6 <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2a7a:	20 91 81 03 	lds	r18, 0x0381
    2a7e:	30 91 82 03 	lds	r19, 0x0382
    2a82:	2f 5f       	subi	r18, 0xFF	; 255
    2a84:	3f 4f       	sbci	r19, 0xFF	; 255
    2a86:	30 93 82 03 	sts	0x0382, r19
    2a8a:	20 93 81 03 	sts	0x0381, r18
    2a8e:	92 e0       	ldi	r25, 0x02	; 2
    2a90:	28 35       	cpi	r18, 0x58	; 88
    2a92:	39 07       	cpc	r19, r25
    2a94:	61 f4       	brne	.+24     	; 0x2aae <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2a96:	10 92 82 03 	sts	0x0382, r1
    2a9a:	10 92 81 03 	sts	0x0381, r1
			current_patch.mode = CAL;
    2a9e:	95 e0       	ldi	r25, 0x05	; 5
    2aa0:	90 93 07 03 	sts	0x0307, r25
    2aa4:	04 c0       	rjmp	.+8      	; 0x2aae <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2aa6:	10 92 82 03 	sts	0x0382, r1
    2aaa:	10 92 81 03 	sts	0x0381, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2aae:	90 91 83 03 	lds	r25, 0x0383
    2ab2:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2ab4:	98 27       	eor	r25, r24
    2ab6:	90 93 83 03 	sts	0x0383, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2aba:	89 23       	and	r24, r25
    2abc:	08 95       	ret

00002abe <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2abe:	ed ed       	ldi	r30, 0xDD	; 221
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	90 81       	ld	r25, Z
    2ac4:	9f 7b       	andi	r25, 0xBF	; 191
    2ac6:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	21 70       	andi	r18, 0x01	; 1
    2ace:	30 70       	andi	r19, 0x00	; 0
    2ad0:	22 0f       	add	r18, r18
    2ad2:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2ad4:	68 2f       	mov	r22, r24
    2ad6:	62 95       	swap	r22
    2ad8:	66 95       	lsr	r22
    2ada:	67 70       	andi	r22, 0x07	; 7
    2adc:	67 95       	ror	r22
    2ade:	66 27       	eor	r22, r22
    2ae0:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2ae2:	26 2b       	or	r18, r22
    2ae4:	98 2f       	mov	r25, r24
    2ae6:	96 95       	lsr	r25
    2ae8:	96 95       	lsr	r25
    2aea:	91 70       	andi	r25, 0x01	; 1
    2aec:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2aee:	68 2f       	mov	r22, r24
    2af0:	66 1f       	adc	r22, r22
    2af2:	66 27       	eor	r22, r22
    2af4:	66 1f       	adc	r22, r22
    2af6:	66 0f       	add	r22, r22
    2af8:	66 0f       	add	r22, r22
    2afa:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2afc:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2afe:	a8 2f       	mov	r26, r24
    2b00:	a6 95       	lsr	r26
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	a1 70       	andi	r26, 0x01	; 1
    2b06:	b0 70       	andi	r27, 0x00	; 0
    2b08:	bd 01       	movw	r22, r26
    2b0a:	66 0f       	add	r22, r22
    2b0c:	77 1f       	adc	r23, r23
    2b0e:	66 0f       	add	r22, r22
    2b10:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2b12:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2b14:	68 2f       	mov	r22, r24
    2b16:	62 95       	swap	r22
    2b18:	6f 70       	andi	r22, 0x0F	; 15
    2b1a:	70 e0       	ldi	r23, 0x00	; 0
    2b1c:	61 70       	andi	r22, 0x01	; 1
    2b1e:	70 70       	andi	r23, 0x00	; 0
    2b20:	ab 01       	movw	r20, r22
    2b22:	00 24       	eor	r0, r0
    2b24:	56 95       	lsr	r21
    2b26:	47 95       	ror	r20
    2b28:	07 94       	ror	r0
    2b2a:	56 95       	lsr	r21
    2b2c:	47 95       	ror	r20
    2b2e:	07 94       	ror	r0
    2b30:	54 2f       	mov	r21, r20
    2b32:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2b34:	62 2f       	mov	r22, r18
    2b36:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2b38:	48 2f       	mov	r20, r24
    2b3a:	42 95       	swap	r20
    2b3c:	46 95       	lsr	r20
    2b3e:	46 95       	lsr	r20
    2b40:	43 70       	andi	r20, 0x03	; 3
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	41 70       	andi	r20, 0x01	; 1
    2b46:	50 70       	andi	r21, 0x00	; 0
    2b48:	9a 01       	movw	r18, r20
    2b4a:	22 0f       	add	r18, r18
    2b4c:	33 1f       	adc	r19, r19
    2b4e:	22 95       	swap	r18
    2b50:	32 95       	swap	r19
    2b52:	30 7f       	andi	r19, 0xF0	; 240
    2b54:	32 27       	eor	r19, r18
    2b56:	20 7f       	andi	r18, 0xF0	; 240
    2b58:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2b5a:	46 2f       	mov	r20, r22
    2b5c:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2b5e:	86 95       	lsr	r24
    2b60:	86 95       	lsr	r24
    2b62:	86 95       	lsr	r24
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	21 70       	andi	r18, 0x01	; 1
    2b6a:	30 70       	andi	r19, 0x00	; 0
    2b6c:	c9 01       	movw	r24, r18
    2b6e:	82 95       	swap	r24
    2b70:	92 95       	swap	r25
    2b72:	90 7f       	andi	r25, 0xF0	; 240
    2b74:	98 27       	eor	r25, r24
    2b76:	80 7f       	andi	r24, 0xF0	; 240
    2b78:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2b7a:	84 2b       	or	r24, r20
    2b7c:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2b7e:	80 81       	ld	r24, Z
    2b80:	80 64       	ori	r24, 0x40	; 64
    2b82:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2b84:	80 81       	ld	r24, Z
    2b86:	8f 7b       	andi	r24, 0xBF	; 191
    2b88:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2b8a:	12 b8       	out	0x02, r1	; 2
	
	
    2b8c:	08 95       	ret

00002b8e <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2b8e:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2b90:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2b92:	74 83       	std	Z+4, r23	; 0x04
    2b94:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2b96:	11 82       	std	Z+1, r1	; 0x01
    2b98:	10 82       	st	Z, r1
}
    2b9a:	08 95       	ret

00002b9c <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2b9c:	1f 93       	push	r17
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	ec 01       	movw	r28, r24
    2ba4:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2ba6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <store_and_clear_interrupt>
    2baa:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2bac:	39 81       	ldd	r19, Y+1	; 0x01
    2bae:	83 2f       	mov	r24, r19
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	01 96       	adiw	r24, 0x01	; 1
    2bb4:	6a 81       	ldd	r22, Y+2	; 0x02
    2bb6:	70 e0       	ldi	r23, 0x00	; 0
    2bb8:	0e 94 b5 1c 	call	0x396a	; 0x396a <__divmodhi4>
    2bbc:	48 81       	ld	r20, Y
    2bbe:	50 e0       	ldi	r21, 0x00	; 0
    2bc0:	84 17       	cp	r24, r20
    2bc2:	95 07       	cpc	r25, r21
    2bc4:	29 f4       	brne	.+10     	; 0x2bd0 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2bc6:	82 2f       	mov	r24, r18
    2bc8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <restore_interrupt_setting>
      return false;
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	11 c0       	rjmp	.+34     	; 0x2bf2 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2bd0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd4:	e3 0f       	add	r30, r19
    2bd6:	f1 1d       	adc	r31, r1
    2bd8:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	01 96       	adiw	r24, 0x01	; 1
    2be0:	6a 81       	ldd	r22, Y+2	; 0x02
    2be2:	70 e0       	ldi	r23, 0x00	; 0
    2be4:	0e 94 b5 1c 	call	0x396a	; 0x396a <__divmodhi4>
    2be8:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2bea:	82 2f       	mov	r24, r18
    2bec:	0e 94 40 16 	call	0x2c80	; 0x2c80 <restore_interrupt_setting>
      return true;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	1f 91       	pop	r17
    2bf8:	08 95       	ret

00002bfa <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2bfa:	cf 93       	push	r28
    2bfc:	df 93       	push	r29
    2bfe:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2c00:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2c04:	29 81       	ldd	r18, Y+1	; 0x01
    2c06:	98 81       	ld	r25, Y
    2c08:	29 17       	cp	r18, r25
    2c0a:	18 f0       	brcs	.+6      	; 0x2c12 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2c0c:	c2 2f       	mov	r28, r18
    2c0e:	c9 1b       	sub	r28, r25
    2c10:	03 c0       	rjmp	.+6      	; 0x2c18 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2c12:	ca 81       	ldd	r28, Y+2	; 0x02
    2c14:	c2 0f       	add	r28, r18
    2c16:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2c18:	0e 94 40 16 	call	0x2c80	; 0x2c80 <restore_interrupt_setting>
   return len;
}
    2c1c:	8c 2f       	mov	r24, r28
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	08 95       	ret

00002c24 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2c24:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2c26:	20 81       	ld	r18, Z
    2c28:	86 2f       	mov	r24, r22
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	82 0f       	add	r24, r18
    2c2e:	91 1d       	adc	r25, r1
    2c30:	62 81       	ldd	r22, Z+2	; 0x02
    2c32:	70 e0       	ldi	r23, 0x00	; 0
    2c34:	0e 94 b5 1c 	call	0x396a	; 0x396a <__divmodhi4>
    2c38:	03 80       	ldd	r0, Z+3	; 0x03
    2c3a:	f4 81       	ldd	r31, Z+4	; 0x04
    2c3c:	e0 2d       	mov	r30, r0
    2c3e:	e8 0f       	add	r30, r24
    2c40:	f9 1f       	adc	r31, r25
}
    2c42:	80 81       	ld	r24, Z
    2c44:	08 95       	ret

00002c46 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	ec 01       	movw	r28, r24
    2c4e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2c50:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <store_and_clear_interrupt>
    2c54:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2c56:	88 81       	ld	r24, Y
    2c58:	21 2f       	mov	r18, r17
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	28 0f       	add	r18, r24
    2c5e:	31 1d       	adc	r19, r1
    2c60:	6a 81       	ldd	r22, Y+2	; 0x02
    2c62:	c9 01       	movw	r24, r18
    2c64:	70 e0       	ldi	r23, 0x00	; 0
    2c66:	0e 94 b5 1c 	call	0x396a	; 0x396a <__divmodhi4>
    2c6a:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2c6c:	84 2f       	mov	r24, r20
    2c6e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <restore_interrupt_setting>
}
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	08 95       	ret

00002c7a <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2c7a:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2c7c:	f8 94       	cli
   return sreg;
}
    2c7e:	08 95       	ret

00002c80 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2c80:	8f bf       	out	0x3f, r24	; 63
}
    2c82:	08 95       	ret

00002c84 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2c84:	88 1f       	adc	r24, r24
    2c86:	88 27       	eor	r24, r24
    2c88:	88 1f       	adc	r24, r24
    2c8a:	08 95       	ret

00002c8c <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2c8c:	91 e0       	ldi	r25, 0x01	; 1
    2c8e:	88 3f       	cpi	r24, 0xF8	; 248
    2c90:	08 f4       	brcc	.+2      	; 0x2c94 <midi_is_realtime+0x8>
    2c92:	90 e0       	ldi	r25, 0x00	; 0
}
    2c94:	89 2f       	mov	r24, r25
    2c96:	08 95       	ret

00002c98 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	20 7f       	andi	r18, 0xF0	; 240
    2c9e:	30 70       	andi	r19, 0x00	; 0
    2ca0:	20 3c       	cpi	r18, 0xC0	; 192
    2ca2:	31 05       	cpc	r19, r1
    2ca4:	e9 f1       	breq	.+122    	; 0x2d20 <midi_packet_length+0x88>
    2ca6:	21 3c       	cpi	r18, 0xC1	; 193
    2ca8:	31 05       	cpc	r19, r1
    2caa:	8c f4       	brge	.+34     	; 0x2cce <midi_packet_length+0x36>
    2cac:	20 39       	cpi	r18, 0x90	; 144
    2cae:	31 05       	cpc	r19, r1
    2cb0:	e1 f0       	breq	.+56     	; 0x2cea <midi_packet_length+0x52>
    2cb2:	21 39       	cpi	r18, 0x91	; 145
    2cb4:	31 05       	cpc	r19, r1
    2cb6:	24 f4       	brge	.+8      	; 0x2cc0 <midi_packet_length+0x28>
    2cb8:	20 38       	cpi	r18, 0x80	; 128
    2cba:	31 05       	cpc	r19, r1
    2cbc:	79 f5       	brne	.+94     	; 0x2d1c <midi_packet_length+0x84>
    2cbe:	15 c0       	rjmp	.+42     	; 0x2cea <midi_packet_length+0x52>
    2cc0:	20 3a       	cpi	r18, 0xA0	; 160
    2cc2:	31 05       	cpc	r19, r1
    2cc4:	91 f0       	breq	.+36     	; 0x2cea <midi_packet_length+0x52>
    2cc6:	20 3b       	cpi	r18, 0xB0	; 176
    2cc8:	31 05       	cpc	r19, r1
    2cca:	41 f5       	brne	.+80     	; 0x2d1c <midi_packet_length+0x84>
    2ccc:	0e c0       	rjmp	.+28     	; 0x2cea <midi_packet_length+0x52>
    2cce:	20 3e       	cpi	r18, 0xE0	; 224
    2cd0:	31 05       	cpc	r19, r1
    2cd2:	59 f0       	breq	.+22     	; 0x2cea <midi_packet_length+0x52>
    2cd4:	21 3e       	cpi	r18, 0xE1	; 225
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	24 f4       	brge	.+8      	; 0x2ce2 <midi_packet_length+0x4a>
    2cda:	20 3d       	cpi	r18, 0xD0	; 208
    2cdc:	31 05       	cpc	r19, r1
    2cde:	f1 f4       	brne	.+60     	; 0x2d1c <midi_packet_length+0x84>
    2ce0:	1f c0       	rjmp	.+62     	; 0x2d20 <midi_packet_length+0x88>
    2ce2:	20 3f       	cpi	r18, 0xF0	; 240
    2ce4:	31 05       	cpc	r19, r1
    2ce6:	d1 f4       	brne	.+52     	; 0x2d1c <midi_packet_length+0x84>
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2cea:	83 e0       	ldi	r24, 0x03	; 3
    2cec:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2cee:	86 3f       	cpi	r24, 0xF6	; 246
    2cf0:	79 f0       	breq	.+30     	; 0x2d10 <midi_packet_length+0x78>
    2cf2:	87 3f       	cpi	r24, 0xF7	; 247
    2cf4:	38 f4       	brcc	.+14     	; 0x2d04 <midi_packet_length+0x6c>
    2cf6:	82 3f       	cpi	r24, 0xF2	; 242
    2cf8:	a9 f0       	breq	.+42     	; 0x2d24 <midi_packet_length+0x8c>
    2cfa:	83 3f       	cpi	r24, 0xF3	; 243
    2cfc:	59 f0       	breq	.+22     	; 0x2d14 <midi_packet_length+0x7c>
    2cfe:	81 3f       	cpi	r24, 0xF1	; 241
    2d00:	59 f4       	brne	.+22     	; 0x2d18 <midi_packet_length+0x80>
    2d02:	08 c0       	rjmp	.+16     	; 0x2d14 <midi_packet_length+0x7c>
    2d04:	88 3f       	cpi	r24, 0xF8	; 248
    2d06:	40 f0       	brcs	.+16     	; 0x2d18 <midi_packet_length+0x80>
    2d08:	8d 3f       	cpi	r24, 0xFD	; 253
    2d0a:	10 f0       	brcs	.+4      	; 0x2d10 <midi_packet_length+0x78>
    2d0c:	8e 3f       	cpi	r24, 0xFE	; 254
    2d0e:	20 f0       	brcs	.+8      	; 0x2d18 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2d14:	82 e0       	ldi	r24, 0x02	; 2
    2d16:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2d20:	82 e0       	ldi	r24, 0x02	; 2
    2d22:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2d24:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2d26:	08 95       	ret

00002d28 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2d28:	0f 93       	push	r16
    2d2a:	34 2f       	mov	r19, r20
    2d2c:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2d2e:	46 2f       	mov	r20, r22
    2d30:	4f 70       	andi	r20, 0x0F	; 15
    2d32:	40 6b       	ori	r20, 0xB0	; 176
    2d34:	23 2f       	mov	r18, r19
    2d36:	2f 77       	andi	r18, 0x7F	; 127
    2d38:	0f 77       	andi	r16, 0x7F	; 127
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	ed 91       	ld	r30, X+
    2d3e:	fc 91       	ld	r31, X
    2d40:	63 e0       	ldi	r22, 0x03	; 3
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2d46:	0f 91       	pop	r16
    2d48:	08 95       	ret

00002d4a <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2d4a:	0f 93       	push	r16
    2d4c:	34 2f       	mov	r19, r20
    2d4e:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2d50:	46 2f       	mov	r20, r22
    2d52:	4f 70       	andi	r20, 0x0F	; 15
    2d54:	40 69       	ori	r20, 0x90	; 144
    2d56:	23 2f       	mov	r18, r19
    2d58:	2f 77       	andi	r18, 0x7F	; 127
    2d5a:	0f 77       	andi	r16, 0x7F	; 127
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	ed 91       	ld	r30, X+
    2d60:	fc 91       	ld	r31, X
    2d62:	63 e0       	ldi	r22, 0x03	; 3
    2d64:	70 e0       	ldi	r23, 0x00	; 0
    2d66:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2d68:	0f 91       	pop	r16
    2d6a:	08 95       	ret

00002d6c <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2d6c:	0f 93       	push	r16
    2d6e:	34 2f       	mov	r19, r20
    2d70:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2d72:	46 2f       	mov	r20, r22
    2d74:	4f 70       	andi	r20, 0x0F	; 15
    2d76:	40 68       	ori	r20, 0x80	; 128
    2d78:	23 2f       	mov	r18, r19
    2d7a:	2f 77       	andi	r18, 0x7F	; 127
    2d7c:	0f 77       	andi	r16, 0x7F	; 127
    2d7e:	dc 01       	movw	r26, r24
    2d80:	ed 91       	ld	r30, X+
    2d82:	fc 91       	ld	r31, X
    2d84:	63 e0       	ldi	r22, 0x03	; 3
    2d86:	70 e0       	ldi	r23, 0x00	; 0
    2d88:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2d8a:	0f 91       	pop	r16
    2d8c:	08 95       	ret

00002d8e <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2d8e:	0f 93       	push	r16
    2d90:	34 2f       	mov	r19, r20
    2d92:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2d94:	46 2f       	mov	r20, r22
    2d96:	4f 70       	andi	r20, 0x0F	; 15
    2d98:	40 6a       	ori	r20, 0xA0	; 160
    2d9a:	23 2f       	mov	r18, r19
    2d9c:	2f 77       	andi	r18, 0x7F	; 127
    2d9e:	0f 77       	andi	r16, 0x7F	; 127
    2da0:	dc 01       	movw	r26, r24
    2da2:	ed 91       	ld	r30, X+
    2da4:	fc 91       	ld	r31, X
    2da6:	63 e0       	ldi	r22, 0x03	; 3
    2da8:	70 e0       	ldi	r23, 0x00	; 0
    2daa:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2dac:	0f 91       	pop	r16
    2dae:	08 95       	ret

00002db0 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2db0:	0f 93       	push	r16
    2db2:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2db4:	20 e2       	ldi	r18, 0x20	; 32
    2db6:	40 30       	cpi	r20, 0x00	; 0
    2db8:	52 07       	cpc	r21, r18
    2dba:	44 f4       	brge	.+16     	; 0x2dcc <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2dbc:	a0 ee       	ldi	r26, 0xE0	; 224
    2dbe:	40 30       	cpi	r20, 0x00	; 0
    2dc0:	5a 07       	cpc	r21, r26
    2dc2:	3c f0       	brlt	.+14     	; 0x2dd2 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2dc4:	8a 01       	movw	r16, r20
    2dc6:	00 50       	subi	r16, 0x00	; 0
    2dc8:	10 4e       	sbci	r17, 0xE0	; 224
    2dca:	05 c0       	rjmp	.+10     	; 0x2dd6 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2dcc:	0f ef       	ldi	r16, 0xFF	; 255
    2dce:	1f e3       	ldi	r17, 0x3F	; 63
    2dd0:	02 c0       	rjmp	.+4      	; 0x2dd6 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2dd2:	00 e0       	ldi	r16, 0x00	; 0
    2dd4:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2dd6:	46 2f       	mov	r20, r22
    2dd8:	4f 70       	andi	r20, 0x0F	; 15
    2dda:	40 6e       	ori	r20, 0xE0	; 224
    2ddc:	20 2f       	mov	r18, r16
    2dde:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2de0:	00 0f       	add	r16, r16
    2de2:	01 2f       	mov	r16, r17
    2de4:	00 1f       	adc	r16, r16
    2de6:	11 0b       	sbc	r17, r17
    2de8:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2dea:	0f 77       	andi	r16, 0x7F	; 127
    2dec:	dc 01       	movw	r26, r24
    2dee:	ed 91       	ld	r30, X+
    2df0:	fc 91       	ld	r31, X
    2df2:	63 e0       	ldi	r22, 0x03	; 3
    2df4:	70 e0       	ldi	r23, 0x00	; 0
    2df6:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	08 95       	ret

00002dfe <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2dfe:	0f 93       	push	r16
    2e00:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2e02:	46 2f       	mov	r20, r22
    2e04:	4f 70       	andi	r20, 0x0F	; 15
    2e06:	40 6c       	ori	r20, 0xC0	; 192
    2e08:	2f 77       	andi	r18, 0x7F	; 127
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	ed 91       	ld	r30, X+
    2e0e:	fc 91       	ld	r31, X
    2e10:	62 e0       	ldi	r22, 0x02	; 2
    2e12:	70 e0       	ldi	r23, 0x00	; 0
    2e14:	00 e0       	ldi	r16, 0x00	; 0
    2e16:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2e18:	0f 91       	pop	r16
    2e1a:	08 95       	ret

00002e1c <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2e1c:	0f 93       	push	r16
    2e1e:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2e20:	46 2f       	mov	r20, r22
    2e22:	4f 70       	andi	r20, 0x0F	; 15
    2e24:	40 6d       	ori	r20, 0xD0	; 208
    2e26:	2f 77       	andi	r18, 0x7F	; 127
    2e28:	dc 01       	movw	r26, r24
    2e2a:	ed 91       	ld	r30, X+
    2e2c:	fc 91       	ld	r31, X
    2e2e:	62 e0       	ldi	r22, 0x02	; 2
    2e30:	70 e0       	ldi	r23, 0x00	; 0
    2e32:	00 e0       	ldi	r16, 0x00	; 0
    2e34:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2e36:	0f 91       	pop	r16
    2e38:	08 95       	ret

00002e3a <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2e3a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	ed 91       	ld	r30, X+
    2e40:	fc 91       	ld	r31, X
    2e42:	61 e0       	ldi	r22, 0x01	; 1
    2e44:	70 e0       	ldi	r23, 0x00	; 0
    2e46:	48 ef       	ldi	r20, 0xF8	; 248
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	00 e0       	ldi	r16, 0x00	; 0
    2e4c:	09 95       	icall
}
    2e4e:	0f 91       	pop	r16
    2e50:	08 95       	ret

00002e52 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    2e52:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2e54:	dc 01       	movw	r26, r24
    2e56:	ed 91       	ld	r30, X+
    2e58:	fc 91       	ld	r31, X
    2e5a:	61 e0       	ldi	r22, 0x01	; 1
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	49 ef       	ldi	r20, 0xF9	; 249
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	00 e0       	ldi	r16, 0x00	; 0
    2e64:	09 95       	icall
}
    2e66:	0f 91       	pop	r16
    2e68:	08 95       	ret

00002e6a <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2e6a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	ed 91       	ld	r30, X+
    2e70:	fc 91       	ld	r31, X
    2e72:	61 e0       	ldi	r22, 0x01	; 1
    2e74:	70 e0       	ldi	r23, 0x00	; 0
    2e76:	4a ef       	ldi	r20, 0xFA	; 250
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	00 e0       	ldi	r16, 0x00	; 0
    2e7c:	09 95       	icall
}
    2e7e:	0f 91       	pop	r16
    2e80:	08 95       	ret

00002e82 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    2e82:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    2e84:	dc 01       	movw	r26, r24
    2e86:	ed 91       	ld	r30, X+
    2e88:	fc 91       	ld	r31, X
    2e8a:	61 e0       	ldi	r22, 0x01	; 1
    2e8c:	70 e0       	ldi	r23, 0x00	; 0
    2e8e:	4b ef       	ldi	r20, 0xFB	; 251
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	00 e0       	ldi	r16, 0x00	; 0
    2e94:	09 95       	icall
}
    2e96:	0f 91       	pop	r16
    2e98:	08 95       	ret

00002e9a <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    2e9a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	ed 91       	ld	r30, X+
    2ea0:	fc 91       	ld	r31, X
    2ea2:	61 e0       	ldi	r22, 0x01	; 1
    2ea4:	70 e0       	ldi	r23, 0x00	; 0
    2ea6:	4c ef       	ldi	r20, 0xFC	; 252
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	00 e0       	ldi	r16, 0x00	; 0
    2eac:	09 95       	icall
}
    2eae:	0f 91       	pop	r16
    2eb0:	08 95       	ret

00002eb2 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    2eb2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	ed 91       	ld	r30, X+
    2eb8:	fc 91       	ld	r31, X
    2eba:	61 e0       	ldi	r22, 0x01	; 1
    2ebc:	70 e0       	ldi	r23, 0x00	; 0
    2ebe:	4e ef       	ldi	r20, 0xFE	; 254
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	00 e0       	ldi	r16, 0x00	; 0
    2ec4:	09 95       	icall
}
    2ec6:	0f 91       	pop	r16
    2ec8:	08 95       	ret

00002eca <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2eca:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2ecc:	dc 01       	movw	r26, r24
    2ece:	ed 91       	ld	r30, X+
    2ed0:	fc 91       	ld	r31, X
    2ed2:	61 e0       	ldi	r22, 0x01	; 1
    2ed4:	70 e0       	ldi	r23, 0x00	; 0
    2ed6:	4f ef       	ldi	r20, 0xFF	; 255
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	00 e0       	ldi	r16, 0x00	; 0
    2edc:	09 95       	icall
}
    2ede:	0f 91       	pop	r16
    2ee0:	08 95       	ret

00002ee2 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    2ee2:	0f 93       	push	r16
   device->send_func(device, 2,
    2ee4:	26 2f       	mov	r18, r22
    2ee6:	2f 77       	andi	r18, 0x7F	; 127
    2ee8:	dc 01       	movw	r26, r24
    2eea:	ed 91       	ld	r30, X+
    2eec:	fc 91       	ld	r31, X
    2eee:	62 e0       	ldi	r22, 0x02	; 2
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	41 ef       	ldi	r20, 0xF1	; 241
    2ef4:	00 e0       	ldi	r16, 0x00	; 0
    2ef6:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2ef8:	0f 91       	pop	r16
    2efa:	08 95       	ret

00002efc <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2efc:	0f 93       	push	r16
    2efe:	1f 93       	push	r17
   device->send_func(device, 3,
    2f00:	26 2f       	mov	r18, r22
    2f02:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2f04:	8b 01       	movw	r16, r22
    2f06:	00 0f       	add	r16, r16
    2f08:	01 2f       	mov	r16, r17
    2f0a:	00 1f       	adc	r16, r16
    2f0c:	11 0b       	sbc	r17, r17
    2f0e:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2f10:	0f 77       	andi	r16, 0x7F	; 127
    2f12:	dc 01       	movw	r26, r24
    2f14:	ed 91       	ld	r30, X+
    2f16:	fc 91       	ld	r31, X
    2f18:	63 e0       	ldi	r22, 0x03	; 3
    2f1a:	70 e0       	ldi	r23, 0x00	; 0
    2f1c:	42 ef       	ldi	r20, 0xF2	; 242
    2f1e:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2f20:	1f 91       	pop	r17
    2f22:	0f 91       	pop	r16
    2f24:	08 95       	ret

00002f26 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2f26:	0f 93       	push	r16
   device->send_func(device, 2,
    2f28:	26 2f       	mov	r18, r22
    2f2a:	2f 77       	andi	r18, 0x7F	; 127
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	ed 91       	ld	r30, X+
    2f30:	fc 91       	ld	r31, X
    2f32:	62 e0       	ldi	r22, 0x02	; 2
    2f34:	70 e0       	ldi	r23, 0x00	; 0
    2f36:	43 ef       	ldi	r20, 0xF3	; 243
    2f38:	00 e0       	ldi	r16, 0x00	; 0
    2f3a:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2f3c:	0f 91       	pop	r16
    2f3e:	08 95       	ret

00002f40 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2f40:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    2f42:	dc 01       	movw	r26, r24
    2f44:	ed 91       	ld	r30, X+
    2f46:	fc 91       	ld	r31, X
    2f48:	61 e0       	ldi	r22, 0x01	; 1
    2f4a:	70 e0       	ldi	r23, 0x00	; 0
    2f4c:	46 ef       	ldi	r20, 0xF6	; 246
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	00 e0       	ldi	r16, 0x00	; 0
    2f52:	09 95       	icall
}
    2f54:	0f 91       	pop	r16
    2f56:	08 95       	ret

00002f58 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2f58:	0f 93       	push	r16
    2f5a:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	ed 91       	ld	r30, X+
    2f60:	fc 91       	ld	r31, X
    2f62:	61 e0       	ldi	r22, 0x01	; 1
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	00 e0       	ldi	r16, 0x00	; 0
    2f6a:	09 95       	icall
}
    2f6c:	0f 91       	pop	r16
    2f6e:	08 95       	ret

00002f70 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    2f70:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    2f72:	dc 01       	movw	r26, r24
    2f74:	ed 91       	ld	r30, X+
    2f76:	fc 91       	ld	r31, X
    2f78:	09 95       	icall
}
    2f7a:	0f 91       	pop	r16
    2f7c:	08 95       	ret

00002f7e <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2f7e:	6f 92       	push	r6
    2f80:	7f 92       	push	r7
    2f82:	8f 92       	push	r8
    2f84:	9f 92       	push	r9
    2f86:	af 92       	push	r10
    2f88:	bf 92       	push	r11
    2f8a:	cf 92       	push	r12
    2f8c:	df 92       	push	r13
    2f8e:	ef 92       	push	r14
    2f90:	ff 92       	push	r15
    2f92:	0f 93       	push	r16
    2f94:	1f 93       	push	r17
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <midi_send_array+0x1e>
    2f9c:	0f 92       	push	r0
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	4c 01       	movw	r8, r24
    2fa4:	6b 01       	movw	r12, r22
    2fa6:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2fa8:	61 15       	cp	r22, r1
    2faa:	71 05       	cpc	r23, r1
    2fac:	41 f1       	breq	.+80     	; 0x2ffe <midi_send_array+0x80>
    2fae:	ee 24       	eor	r14, r14
    2fb0:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2fb2:	0f 2e       	mov	r0, r31
    2fb4:	f3 e0       	ldi	r31, 0x03	; 3
    2fb6:	6f 2e       	mov	r6, r31
    2fb8:	77 24       	eor	r7, r7
    2fba:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2fbc:	19 82       	std	Y+1, r1	; 0x01
    2fbe:	1a 82       	std	Y+2, r1	; 0x02
    2fc0:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2fc2:	86 01       	movw	r16, r12
    2fc4:	0e 19       	sub	r16, r14
    2fc6:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2fc8:	04 30       	cpi	r16, 0x04	; 4
    2fca:	11 05       	cpc	r17, r1
    2fcc:	08 f0       	brcs	.+2      	; 0x2fd0 <midi_send_array+0x52>
    2fce:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2fd0:	b5 01       	movw	r22, r10
    2fd2:	6e 0d       	add	r22, r14
    2fd4:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	01 96       	adiw	r24, 0x01	; 1
    2fda:	40 2f       	mov	r20, r16
    2fdc:	51 2f       	mov	r21, r17
    2fde:	0e 94 c8 1c 	call	0x3990	; 0x3990 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2fe2:	c4 01       	movw	r24, r8
    2fe4:	b8 01       	movw	r22, r16
    2fe6:	49 81       	ldd	r20, Y+1	; 0x01
    2fe8:	2a 81       	ldd	r18, Y+2	; 0x02
    2fea:	0b 81       	ldd	r16, Y+3	; 0x03
    2fec:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2ff0:	83 e0       	ldi	r24, 0x03	; 3
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	e8 0e       	add	r14, r24
    2ff6:	f9 1e       	adc	r15, r25
    2ff8:	ec 14       	cp	r14, r12
    2ffa:	fd 04       	cpc	r15, r13
    2ffc:	f8 f2       	brcs	.-66     	; 0x2fbc <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	df 90       	pop	r13
    3012:	cf 90       	pop	r12
    3014:	bf 90       	pop	r11
    3016:	af 90       	pop	r10
    3018:	9f 90       	pop	r9
    301a:	8f 90       	pop	r8
    301c:	7f 90       	pop	r7
    301e:	6f 90       	pop	r6
    3020:	08 95       	ret

00003022 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    3022:	fc 01       	movw	r30, r24
    3024:	73 83       	std	Z+3, r23	; 0x03
    3026:	62 83       	std	Z+2, r22	; 0x02
}
    3028:	08 95       	ret

0000302a <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    302a:	fc 01       	movw	r30, r24
    302c:	75 83       	std	Z+5, r23	; 0x05
    302e:	64 83       	std	Z+4, r22	; 0x04
}
    3030:	08 95       	ret

00003032 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    3032:	fc 01       	movw	r30, r24
    3034:	77 83       	std	Z+7, r23	; 0x07
    3036:	66 83       	std	Z+6, r22	; 0x06
}
    3038:	08 95       	ret

0000303a <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    303a:	fc 01       	movw	r30, r24
    303c:	71 87       	std	Z+9, r23	; 0x09
    303e:	60 87       	std	Z+8, r22	; 0x08
}
    3040:	08 95       	ret

00003042 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    3042:	fc 01       	movw	r30, r24
    3044:	73 87       	std	Z+11, r23	; 0x0b
    3046:	62 87       	std	Z+10, r22	; 0x0a
}
    3048:	08 95       	ret

0000304a <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    304a:	fc 01       	movw	r30, r24
    304c:	75 87       	std	Z+13, r23	; 0x0d
    304e:	64 87       	std	Z+12, r22	; 0x0c
}
    3050:	08 95       	ret

00003052 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    3052:	fc 01       	movw	r30, r24
    3054:	77 87       	std	Z+15, r23	; 0x0f
    3056:	66 87       	std	Z+14, r22	; 0x0e
}
    3058:	08 95       	ret

0000305a <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    305a:	fc 01       	movw	r30, r24
    305c:	71 8b       	std	Z+17, r23	; 0x11
    305e:	60 8b       	std	Z+16, r22	; 0x10
}
    3060:	08 95       	ret

00003062 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    3062:	fc 01       	movw	r30, r24
    3064:	73 8b       	std	Z+19, r23	; 0x13
    3066:	62 8b       	std	Z+18, r22	; 0x12
}
    3068:	08 95       	ret

0000306a <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    306a:	fc 01       	movw	r30, r24
    306c:	75 8b       	std	Z+21, r23	; 0x15
    306e:	64 8b       	std	Z+20, r22	; 0x14
}
    3070:	08 95       	ret

00003072 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    3072:	fc 01       	movw	r30, r24
    3074:	77 8b       	std	Z+23, r23	; 0x17
    3076:	66 8b       	std	Z+22, r22	; 0x16
}
    3078:	08 95       	ret

0000307a <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    307a:	fc 01       	movw	r30, r24
    307c:	71 8f       	std	Z+25, r23	; 0x19
    307e:	60 8f       	std	Z+24, r22	; 0x18
}
    3080:	08 95       	ret

00003082 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    3082:	fc 01       	movw	r30, r24
    3084:	73 8f       	std	Z+27, r23	; 0x1b
    3086:	62 8f       	std	Z+26, r22	; 0x1a
}
    3088:	08 95       	ret

0000308a <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    308a:	fc 01       	movw	r30, r24
    308c:	75 8f       	std	Z+29, r23	; 0x1d
    308e:	64 8f       	std	Z+28, r22	; 0x1c
}
    3090:	08 95       	ret

00003092 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    3092:	fc 01       	movw	r30, r24
    3094:	77 8f       	std	Z+31, r23	; 0x1f
    3096:	66 8f       	std	Z+30, r22	; 0x1e
}
    3098:	08 95       	ret

0000309a <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    309a:	cf 93       	push	r28
    309c:	df 93       	push	r29
    309e:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    30a0:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    30a2:	1f a2       	lds	r17, 0x9f
    30a4:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    30a6:	bc 01       	movw	r22, r24
    30a8:	68 5d       	subi	r22, 0xD8	; 216
    30aa:	7f 4f       	sbci	r23, 0xFF	; 255
    30ac:	88 51       	subi	r24, 0x18	; 24
    30ae:	9f 4f       	sbci	r25, 0xFF	; 255
    30b0:	40 ec       	ldi	r20, 0xC0	; 192
    30b2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    30b6:	1b 82       	std	Y+3, r1	; 0x03
    30b8:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    30ba:	1d 82       	std	Y+5, r1	; 0x05
    30bc:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    30be:	1f 82       	std	Y+7, r1	; 0x07
    30c0:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    30c2:	19 86       	std	Y+9, r1	; 0x09
    30c4:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    30c6:	1b 86       	std	Y+11, r1	; 0x0b
    30c8:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    30ca:	1d 86       	std	Y+13, r1	; 0x0d
    30cc:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    30ce:	1f 86       	std	Y+15, r1	; 0x0f
    30d0:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    30d2:	19 8a       	std	Y+17, r1	; 0x11
    30d4:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    30d6:	1b 8a       	std	Y+19, r1	; 0x13
    30d8:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    30da:	1d 8a       	std	Y+21, r1	; 0x15
    30dc:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    30de:	1f 8a       	std	Y+23, r1	; 0x17
    30e0:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    30e2:	19 8e       	std	Y+25, r1	; 0x19
    30e4:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    30e6:	1b 8e       	std	Y+27, r1	; 0x1b
    30e8:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    30ea:	1d 8e       	std	Y+29, r1	; 0x1d
    30ec:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    30ee:	1f 8e       	std	Y+31, r1	; 0x1f
    30f0:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    30f2:	19 a2       	lds	r17, 0x99
    30f4:	18 a2       	lds	r17, 0x98
}
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	08 95       	ret

000030fc <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    30fc:	ef 92       	push	r14
    30fe:	ff 92       	push	r15
    3100:	0f 93       	push	r16
    3102:	1f 93       	push	r17
    3104:	cf 93       	push	r28
    3106:	df 93       	push	r29
    3108:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    310a:	66 23       	and	r22, r22
    310c:	99 f0       	breq	.+38     	; 0x3134 <midi_device_input+0x38>
    310e:	04 2f       	mov	r16, r20
    3110:	15 2f       	mov	r17, r21
    3112:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    3114:	0f 2e       	mov	r0, r31
    3116:	f8 ee       	ldi	r31, 0xE8	; 232
    3118:	ef 2e       	mov	r14, r31
    311a:	ff 24       	eor	r15, r15
    311c:	f0 2d       	mov	r31, r0
    311e:	e8 0e       	add	r14, r24
    3120:	f9 1e       	adc	r15, r25
    3122:	f8 01       	movw	r30, r16
    3124:	61 91       	ld	r22, Z+
    3126:	8f 01       	movw	r16, r30
    3128:	c7 01       	movw	r24, r14
    312a:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    312e:	cf 5f       	subi	r28, 0xFF	; 255
    3130:	cd 17       	cp	r28, r29
    3132:	b9 f7       	brne	.-18     	; 0x3122 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    3134:	df 91       	pop	r29
    3136:	cf 91       	pop	r28
    3138:	1f 91       	pop	r17
    313a:	0f 91       	pop	r16
    313c:	ff 90       	pop	r15
    313e:	ef 90       	pop	r14
    3140:	08 95       	ret

00003142 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    3142:	fc 01       	movw	r30, r24
    3144:	71 83       	std	Z+1, r23	; 0x01
    3146:	60 83       	st	Z, r22
}
    3148:	08 95       	ret

0000314a <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    314a:	fc 01       	movw	r30, r24
    314c:	71 a3       	lds	r23, 0x51
    314e:	60 a3       	lds	r22, 0x50
}
    3150:	08 95       	ret

00003152 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    3152:	af 92       	push	r10
    3154:	bf 92       	push	r11
    3156:	cf 92       	push	r12
    3158:	df 92       	push	r13
    315a:	ef 92       	push	r14
    315c:	ff 92       	push	r15
    315e:	0f 93       	push	r16
    3160:	1f 93       	push	r17
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	00 d0       	rcall	.+0      	; 0x3168 <midi_input_callbacks+0x16>
    3168:	0f 92       	push	r0
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	6c 01       	movw	r12, r24
    3170:	5b 01       	movw	r10, r22
    3172:	f4 2e       	mov	r15, r20
    3174:	e2 2e       	mov	r14, r18
    3176:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    3178:	dc 01       	movw	r26, r24
    317a:	95 96       	adiw	r26, 0x25	; 37
    317c:	8c 91       	ld	r24, X
    317e:	95 97       	sbiw	r26, 0x25	; 37
    3180:	84 30       	cpi	r24, 0x04	; 4
    3182:	e9 f4       	brne	.+58     	; 0x31be <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    3184:	5a 96       	adiw	r26, 0x1a	; 26
    3186:	ed 91       	ld	r30, X+
    3188:	fc 91       	ld	r31, X
    318a:	5b 97       	sbiw	r26, 0x1b	; 27
    318c:	30 97       	sbiw	r30, 0x00	; 0
    318e:	09 f4       	brne	.+2      	; 0x3192 <midi_input_callbacks+0x40>
    3190:	ee c0       	rjmp	.+476    	; 0x336e <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    3192:	cb 01       	movw	r24, r22
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	63 e0       	ldi	r22, 0x03	; 3
    3198:	70 e0       	ldi	r23, 0x00	; 0
    319a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodhi4>
    319e:	cb 01       	movw	r24, r22
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	68 0f       	add	r22, r24
    31a6:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    31a8:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    31aa:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    31ac:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    31ae:	4a 2d       	mov	r20, r10
    31b0:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    31b2:	c6 01       	movw	r24, r12
    31b4:	9e 01       	movw	r18, r28
    31b6:	2f 5f       	subi	r18, 0xFF	; 255
    31b8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ba:	09 95       	icall
    31bc:	c8 c0       	rjmp	.+400    	; 0x334e <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    31be:	62 30       	cpi	r22, 0x02	; 2
    31c0:	71 05       	cpc	r23, r1
    31c2:	09 f4       	brne	.+2      	; 0x31c6 <midi_input_callbacks+0x74>
    31c4:	5f c0       	rjmp	.+190    	; 0x3284 <midi_input_callbacks+0x132>
    31c6:	63 30       	cpi	r22, 0x03	; 3
    31c8:	71 05       	cpc	r23, r1
    31ca:	29 f0       	breq	.+10     	; 0x31d6 <midi_input_callbacks+0x84>
    31cc:	61 30       	cpi	r22, 0x01	; 1
    31ce:	71 05       	cpc	r23, r1
    31d0:	09 f0       	breq	.+2      	; 0x31d4 <midi_input_callbacks+0x82>
    31d2:	b3 c0       	rjmp	.+358    	; 0x333a <midi_input_callbacks+0x1e8>
    31d4:	99 c0       	rjmp	.+306    	; 0x3308 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    31d6:	84 2f       	mov	r24, r20
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	80 7f       	andi	r24, 0xF0	; 240
    31dc:	90 70       	andi	r25, 0x00	; 0
    31de:	80 3a       	cpi	r24, 0xA0	; 160
    31e0:	91 05       	cpc	r25, r1
    31e2:	29 f1       	breq	.+74     	; 0x322e <midi_input_callbacks+0xdc>
    31e4:	81 3a       	cpi	r24, 0xA1	; 161
    31e6:	91 05       	cpc	r25, r1
    31e8:	3c f4       	brge	.+14     	; 0x31f8 <midi_input_callbacks+0xa6>
    31ea:	80 38       	cpi	r24, 0x80	; 128
    31ec:	91 05       	cpc	r25, r1
    31ee:	c9 f0       	breq	.+50     	; 0x3222 <midi_input_callbacks+0xd0>
    31f0:	80 39       	cpi	r24, 0x90	; 144
    31f2:	91 05       	cpc	r25, r1
    31f4:	91 f5       	brne	.+100    	; 0x325a <midi_input_callbacks+0x108>
    31f6:	0f c0       	rjmp	.+30     	; 0x3216 <midi_input_callbacks+0xc4>
    31f8:	80 3e       	cpi	r24, 0xE0	; 224
    31fa:	91 05       	cpc	r25, r1
    31fc:	f1 f0       	breq	.+60     	; 0x323a <midi_input_callbacks+0xe8>
    31fe:	80 3f       	cpi	r24, 0xF0	; 240
    3200:	91 05       	cpc	r25, r1
    3202:	09 f1       	breq	.+66     	; 0x3246 <midi_input_callbacks+0xf4>
    3204:	80 3b       	cpi	r24, 0xB0	; 176
    3206:	91 05       	cpc	r25, r1
    3208:	41 f5       	brne	.+80     	; 0x325a <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    320a:	d6 01       	movw	r26, r12
    320c:	12 96       	adiw	r26, 0x02	; 2
    320e:	ed 91       	ld	r30, X+
    3210:	fc 91       	ld	r31, X
    3212:	13 97       	sbiw	r26, 0x03	; 3
              break;
    3214:	24 c0       	rjmp	.+72     	; 0x325e <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    3216:	d6 01       	movw	r26, r12
    3218:	14 96       	adiw	r26, 0x04	; 4
    321a:	ed 91       	ld	r30, X+
    321c:	fc 91       	ld	r31, X
    321e:	15 97       	sbiw	r26, 0x05	; 5
              break;
    3220:	1e c0       	rjmp	.+60     	; 0x325e <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    3222:	d6 01       	movw	r26, r12
    3224:	16 96       	adiw	r26, 0x06	; 6
    3226:	ed 91       	ld	r30, X+
    3228:	fc 91       	ld	r31, X
    322a:	17 97       	sbiw	r26, 0x07	; 7
              break;
    322c:	18 c0       	rjmp	.+48     	; 0x325e <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    322e:	d6 01       	movw	r26, r12
    3230:	18 96       	adiw	r26, 0x08	; 8
    3232:	ed 91       	ld	r30, X+
    3234:	fc 91       	ld	r31, X
    3236:	19 97       	sbiw	r26, 0x09	; 9
              break;
    3238:	12 c0       	rjmp	.+36     	; 0x325e <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    323a:	d6 01       	movw	r26, r12
    323c:	1a 96       	adiw	r26, 0x0a	; 10
    323e:	ed 91       	ld	r30, X+
    3240:	fc 91       	ld	r31, X
    3242:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    3244:	0c c0       	rjmp	.+24     	; 0x325e <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    3246:	b2 ef       	ldi	r27, 0xF2	; 242
    3248:	4b 17       	cp	r20, r27
    324a:	09 f0       	breq	.+2      	; 0x324e <midi_input_callbacks+0xfc>
    324c:	90 c0       	rjmp	.+288    	; 0x336e <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    324e:	d6 01       	movw	r26, r12
    3250:	1c 96       	adiw	r26, 0x0c	; 12
    3252:	ed 91       	ld	r30, X+
    3254:	fc 91       	ld	r31, X
    3256:	1d 97       	sbiw	r26, 0x0d	; 13
    3258:	02 c0       	rjmp	.+4      	; 0x325e <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    325a:	e0 e0       	ldi	r30, 0x00	; 0
    325c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    325e:	30 97       	sbiw	r30, 0x00	; 0
    3260:	09 f4       	brne	.+2      	; 0x3264 <midi_input_callbacks+0x112>
    3262:	85 c0       	rjmp	.+266    	; 0x336e <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    3264:	b2 ef       	ldi	r27, 0xF2	; 242
    3266:	fb 16       	cp	r15, r27
    3268:	31 f4       	brne	.+12     	; 0x3276 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    326a:	c6 01       	movw	r24, r12
    326c:	62 ef       	ldi	r22, 0xF2	; 242
    326e:	4e 2d       	mov	r20, r14
    3270:	21 2f       	mov	r18, r17
    3272:	09 95       	icall
    3274:	6c c0       	rjmp	.+216    	; 0x334e <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    3276:	6f 2d       	mov	r22, r15
    3278:	6f 70       	andi	r22, 0x0F	; 15
    327a:	c6 01       	movw	r24, r12
    327c:	4e 2d       	mov	r20, r14
    327e:	21 2f       	mov	r18, r17
    3280:	09 95       	icall
    3282:	65 c0       	rjmp	.+202    	; 0x334e <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3284:	84 2f       	mov	r24, r20
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	80 7f       	andi	r24, 0xF0	; 240
    328a:	90 70       	andi	r25, 0x00	; 0
    328c:	80 3d       	cpi	r24, 0xD0	; 208
    328e:	91 05       	cpc	r25, r1
    3290:	61 f0       	breq	.+24     	; 0x32aa <midi_input_callbacks+0x158>
    3292:	80 3f       	cpi	r24, 0xF0	; 240
    3294:	91 05       	cpc	r25, r1
    3296:	79 f0       	breq	.+30     	; 0x32b6 <midi_input_callbacks+0x164>
    3298:	80 3c       	cpi	r24, 0xC0	; 192
    329a:	91 05       	cpc	r25, r1
    329c:	f9 f4       	brne	.+62     	; 0x32dc <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    329e:	d6 01       	movw	r26, r12
    32a0:	1e 96       	adiw	r26, 0x0e	; 14
    32a2:	ed 91       	ld	r30, X+
    32a4:	fc 91       	ld	r31, X
    32a6:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    32a8:	1b c0       	rjmp	.+54     	; 0x32e0 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    32aa:	d6 01       	movw	r26, r12
    32ac:	50 96       	adiw	r26, 0x10	; 16
    32ae:	ed 91       	ld	r30, X+
    32b0:	fc 91       	ld	r31, X
    32b2:	51 97       	sbiw	r26, 0x11	; 17
              break;
    32b4:	15 c0       	rjmp	.+42     	; 0x32e0 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    32b6:	b3 ef       	ldi	r27, 0xF3	; 243
    32b8:	4b 17       	cp	r20, r27
    32ba:	31 f4       	brne	.+12     	; 0x32c8 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    32bc:	d6 01       	movw	r26, r12
    32be:	52 96       	adiw	r26, 0x12	; 18
    32c0:	ed 91       	ld	r30, X+
    32c2:	fc 91       	ld	r31, X
    32c4:	53 97       	sbiw	r26, 0x13	; 19
    32c6:	0c c0       	rjmp	.+24     	; 0x32e0 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    32c8:	b1 ef       	ldi	r27, 0xF1	; 241
    32ca:	4b 17       	cp	r20, r27
    32cc:	09 f0       	breq	.+2      	; 0x32d0 <midi_input_callbacks+0x17e>
    32ce:	4f c0       	rjmp	.+158    	; 0x336e <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    32d0:	d6 01       	movw	r26, r12
    32d2:	54 96       	adiw	r26, 0x14	; 20
    32d4:	ed 91       	ld	r30, X+
    32d6:	fc 91       	ld	r31, X
    32d8:	55 97       	sbiw	r26, 0x15	; 21
    32da:	02 c0       	rjmp	.+4      	; 0x32e0 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    32dc:	e0 e0       	ldi	r30, 0x00	; 0
    32de:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    32e0:	30 97       	sbiw	r30, 0x00	; 0
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <midi_input_callbacks+0x194>
    32e4:	44 c0       	rjmp	.+136    	; 0x336e <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    32e6:	b3 ef       	ldi	r27, 0xF3	; 243
    32e8:	fb 16       	cp	r15, r27
    32ea:	19 f0       	breq	.+6      	; 0x32f2 <midi_input_callbacks+0x1a0>
    32ec:	81 ef       	ldi	r24, 0xF1	; 241
    32ee:	f8 16       	cp	r15, r24
    32f0:	29 f4       	brne	.+10     	; 0x32fc <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    32f2:	c6 01       	movw	r24, r12
    32f4:	6f 2d       	mov	r22, r15
    32f6:	4e 2d       	mov	r20, r14
    32f8:	09 95       	icall
    32fa:	29 c0       	rjmp	.+82     	; 0x334e <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    32fc:	6f 2d       	mov	r22, r15
    32fe:	6f 70       	andi	r22, 0x0F	; 15
    3300:	c6 01       	movw	r24, r12
    3302:	4e 2d       	mov	r20, r14
    3304:	09 95       	icall
    3306:	23 c0       	rjmp	.+70     	; 0x334e <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    3308:	84 2f       	mov	r24, r20
    330a:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <midi_is_realtime>
    330e:	88 23       	and	r24, r24
    3310:	31 f0       	breq	.+12     	; 0x331e <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    3312:	d6 01       	movw	r26, r12
    3314:	56 96       	adiw	r26, 0x16	; 22
    3316:	ed 91       	ld	r30, X+
    3318:	fc 91       	ld	r31, X
    331a:	57 97       	sbiw	r26, 0x17	; 23
    331c:	08 c0       	rjmp	.+16     	; 0x332e <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    331e:	b6 ef       	ldi	r27, 0xF6	; 246
    3320:	fb 16       	cp	r15, r27
    3322:	29 f5       	brne	.+74     	; 0x336e <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    3324:	d6 01       	movw	r26, r12
    3326:	58 96       	adiw	r26, 0x18	; 24
    3328:	ed 91       	ld	r30, X+
    332a:	fc 91       	ld	r31, X
    332c:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    332e:	30 97       	sbiw	r30, 0x00	; 0
    3330:	f1 f0       	breq	.+60     	; 0x336e <midi_input_callbacks+0x21c>
            func(device, byte0);
    3332:	c6 01       	movw	r24, r12
    3334:	6f 2d       	mov	r22, r15
    3336:	09 95       	icall
    3338:	0a c0       	rjmp	.+20     	; 0x334e <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    333a:	64 30       	cpi	r22, 0x04	; 4
    333c:	71 05       	cpc	r23, r1
    333e:	a8 f4       	brcc	.+42     	; 0x336a <midi_input_callbacks+0x218>
    3340:	16 c0       	rjmp	.+44     	; 0x336e <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    3342:	c6 01       	movw	r24, r12
    3344:	b5 01       	movw	r22, r10
    3346:	4f 2d       	mov	r20, r15
    3348:	2e 2d       	mov	r18, r14
    334a:	01 2f       	mov	r16, r17
    334c:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    334e:	d6 01       	movw	r26, r12
    3350:	5e 96       	adiw	r26, 0x1e	; 30
    3352:	ed 91       	ld	r30, X+
    3354:	fc 91       	ld	r31, X
    3356:	5f 97       	sbiw	r26, 0x1f	; 31
    3358:	30 97       	sbiw	r30, 0x00	; 0
    335a:	89 f0       	breq	.+34     	; 0x337e <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    335c:	c6 01       	movw	r24, r12
    335e:	b5 01       	movw	r22, r10
    3360:	4f 2d       	mov	r20, r15
    3362:	2e 2d       	mov	r18, r14
    3364:	01 2f       	mov	r16, r17
    3366:	09 95       	icall
    3368:	0a c0       	rjmp	.+20     	; 0x337e <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    336a:	aa 24       	eor	r10, r10
    336c:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    336e:	d6 01       	movw	r26, r12
    3370:	5c 96       	adiw	r26, 0x1c	; 28
    3372:	ed 91       	ld	r30, X+
    3374:	fc 91       	ld	r31, X
    3376:	5d 97       	sbiw	r26, 0x1d	; 29
    3378:	30 97       	sbiw	r30, 0x00	; 0
    337a:	19 f7       	brne	.-58     	; 0x3342 <midi_input_callbacks+0x1f0>
    337c:	e8 cf       	rjmp	.-48     	; 0x334e <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	ff 90       	pop	r15
    338e:	ef 90       	pop	r14
    3390:	df 90       	pop	r13
    3392:	cf 90       	pop	r12
    3394:	bf 90       	pop	r11
    3396:	af 90       	pop	r10
    3398:	08 95       	ret

0000339a <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    339a:	ef 92       	push	r14
    339c:	ff 92       	push	r15
    339e:	0f 93       	push	r16
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	7c 01       	movw	r14, r24
    33a6:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    33a8:	86 2f       	mov	r24, r22
    33aa:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <midi_is_realtime>
    33ae:	88 23       	and	r24, r24
    33b0:	91 f0       	breq	.+36     	; 0x33d6 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    33b2:	d7 01       	movw	r26, r14
    33b4:	95 96       	adiw	r26, 0x25	; 37
    33b6:	dc 91       	ld	r29, X
    33b8:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	95 96       	adiw	r26, 0x25	; 37
    33be:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    33c0:	c7 01       	movw	r24, r14
    33c2:	61 e0       	ldi	r22, 0x01	; 1
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	4c 2f       	mov	r20, r28
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	00 e0       	ldi	r16, 0x00	; 0
    33cc:	0e 94 a9 18 	call	0x3152	; 0x3152 <midi_input_callbacks>
    device->input_state = state;
    33d0:	f7 01       	movw	r30, r14
    33d2:	d5 a3       	lds	r29, 0x55
    33d4:	b7 c0       	rjmp	.+366    	; 0x3544 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    33d6:	8c 2f       	mov	r24, r28
    33d8:	0e 94 42 16 	call	0x2c84	; 0x2c84 <midi_is_statusbyte>
    33dc:	88 23       	and	r24, r24
    33de:	09 f4       	brne	.+2      	; 0x33e2 <midi_process_byte+0x48>
    33e0:	73 c0       	rjmp	.+230    	; 0x34c8 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    33e2:	d7 01       	movw	r26, r14
    33e4:	95 96       	adiw	r26, 0x25	; 37
    33e6:	8c 91       	ld	r24, X
    33e8:	95 97       	sbiw	r26, 0x25	; 37
    33ea:	84 30       	cpi	r24, 0x04	; 4
    33ec:	49 f0       	breq	.+18     	; 0x3400 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    33ee:	92 96       	adiw	r26, 0x22	; 34
    33f0:	cc 93       	st	X, r28
    33f2:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	97 96       	adiw	r26, 0x27	; 39
    33fa:	9c 93       	st	X, r25
    33fc:	8e 93       	st	-X, r24
    33fe:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    3400:	8c 2f       	mov	r24, r28
    3402:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <midi_packet_length>
    3406:	81 30       	cpi	r24, 0x01	; 1
    3408:	41 f0       	breq	.+16     	; 0x341a <midi_process_byte+0x80>
    340a:	81 30       	cpi	r24, 0x01	; 1
    340c:	00 f1       	brcs	.+64     	; 0x344e <midi_process_byte+0xb4>
    340e:	82 30       	cpi	r24, 0x02	; 2
    3410:	a1 f0       	breq	.+40     	; 0x343a <midi_process_byte+0xa0>
    3412:	83 30       	cpi	r24, 0x03	; 3
    3414:	09 f0       	breq	.+2      	; 0x3418 <midi_process_byte+0x7e>
    3416:	4f c0       	rjmp	.+158    	; 0x34b6 <midi_process_byte+0x11c>
    3418:	14 c0       	rjmp	.+40     	; 0x3442 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	f7 01       	movw	r30, r14
    341e:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3420:	c7 01       	movw	r24, r14
    3422:	61 e0       	ldi	r22, 0x01	; 1
    3424:	70 e0       	ldi	r23, 0x00	; 0
    3426:	4c 2f       	mov	r20, r28
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	00 e0       	ldi	r16, 0x00	; 0
    342c:	0e 94 a9 18 	call	0x3152	; 0x3152 <midi_input_callbacks>
        device->input_state = IDLE;
    3430:	d7 01       	movw	r26, r14
    3432:	95 96       	adiw	r26, 0x25	; 37
    3434:	1c 92       	st	X, r1
    3436:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3438:	85 c0       	rjmp	.+266    	; 0x3544 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    343a:	82 e0       	ldi	r24, 0x02	; 2
    343c:	f7 01       	movw	r30, r14
    343e:	85 a3       	lds	r24, 0x55
        break;
    3440:	81 c0       	rjmp	.+258    	; 0x3544 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    3442:	83 e0       	ldi	r24, 0x03	; 3
    3444:	d7 01       	movw	r26, r14
    3446:	95 96       	adiw	r26, 0x25	; 37
    3448:	8c 93       	st	X, r24
    344a:	95 97       	sbiw	r26, 0x25	; 37
        break;
    344c:	7b c0       	rjmp	.+246    	; 0x3544 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    344e:	c0 3f       	cpi	r28, 0xF0	; 240
    3450:	19 f0       	breq	.+6      	; 0x3458 <midi_process_byte+0xbe>
    3452:	c7 3f       	cpi	r28, 0xF7	; 247
    3454:	59 f5       	brne	.+86     	; 0x34ac <midi_process_byte+0x112>
    3456:	0a c0       	rjmp	.+20     	; 0x346c <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    3458:	84 e0       	ldi	r24, 0x04	; 4
    345a:	f7 01       	movw	r30, r14
    345c:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    345e:	80 ef       	ldi	r24, 0xF0	; 240
    3460:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	97 a3       	lds	r25, 0x57
    3468:	86 a3       	lds	r24, 0x56
            break;
    346a:	6c c0       	rjmp	.+216    	; 0x3544 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    346c:	d7 01       	movw	r26, r14
    346e:	96 96       	adiw	r26, 0x26	; 38
    3470:	2d 91       	ld	r18, X+
    3472:	3c 91       	ld	r19, X
    3474:	97 97       	sbiw	r26, 0x27	; 39
    3476:	c9 01       	movw	r24, r18
    3478:	63 e0       	ldi	r22, 0x03	; 3
    347a:	70 e0       	ldi	r23, 0x00	; 0
    347c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodhi4>
    3480:	f7 01       	movw	r30, r14
    3482:	e8 0f       	add	r30, r24
    3484:	f9 1f       	adc	r31, r25
    3486:	87 ef       	ldi	r24, 0xF7	; 247
    3488:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    348a:	b9 01       	movw	r22, r18
    348c:	6f 5f       	subi	r22, 0xFF	; 255
    348e:	7f 4f       	sbci	r23, 0xFF	; 255
    3490:	f7 01       	movw	r30, r14
    3492:	77 a3       	lds	r23, 0x57
    3494:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3496:	c7 01       	movw	r24, r14
    3498:	42 a1       	lds	r20, 0x42
    349a:	23 a1       	lds	r18, 0x43
    349c:	04 a1       	lds	r16, 0x44
    349e:	0e 94 a9 18 	call	0x3152	; 0x3152 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    34a2:	d7 01       	movw	r26, r14
    34a4:	95 96       	adiw	r26, 0x25	; 37
    34a6:	1c 92       	st	X, r1
    34a8:	95 97       	sbiw	r26, 0x25	; 37
            break;
    34aa:	4c c0       	rjmp	.+152    	; 0x3544 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    34ac:	f7 01       	movw	r30, r14
    34ae:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    34b0:	17 a2       	lds	r17, 0x97
    34b2:	16 a2       	lds	r17, 0x96
    34b4:	47 c0       	rjmp	.+142    	; 0x3544 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    34b6:	d7 01       	movw	r26, r14
    34b8:	95 96       	adiw	r26, 0x25	; 37
    34ba:	1c 92       	st	X, r1
    34bc:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    34be:	97 96       	adiw	r26, 0x27	; 39
    34c0:	1c 92       	st	X, r1
    34c2:	1e 92       	st	-X, r1
    34c4:	96 97       	sbiw	r26, 0x26	; 38
        break;
    34c6:	3e c0       	rjmp	.+124    	; 0x3544 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    34c8:	f7 01       	movw	r30, r14
    34ca:	25 a1       	lds	r18, 0x45
    34cc:	22 23       	and	r18, r18
    34ce:	d1 f1       	breq	.+116    	; 0x3544 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    34d0:	06 a0       	lds	r16, 0x86
    34d2:	f7 a1       	lds	r31, 0x47
    34d4:	e0 2d       	mov	r30, r0
    34d6:	cf 01       	movw	r24, r30
    34d8:	63 e0       	ldi	r22, 0x03	; 3
    34da:	70 e0       	ldi	r23, 0x00	; 0
    34dc:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodhi4>
    34e0:	ac 01       	movw	r20, r24
    34e2:	8e 0d       	add	r24, r14
    34e4:	9f 1d       	adc	r25, r15
    34e6:	dc 01       	movw	r26, r24
    34e8:	92 96       	adiw	r26, 0x22	; 34
    34ea:	cc 93       	st	X, r28
    34ec:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    34ee:	bf 01       	movw	r22, r30
    34f0:	6f 5f       	subi	r22, 0xFF	; 255
    34f2:	7f 4f       	sbci	r23, 0xFF	; 255
    34f4:	f7 01       	movw	r30, r14
    34f6:	77 a3       	lds	r23, 0x57
    34f8:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    34fa:	41 30       	cpi	r20, 0x01	; 1
    34fc:	51 05       	cpc	r21, r1
    34fe:	91 f0       	breq	.+36     	; 0x3524 <midi_process_byte+0x18a>
    3500:	42 30       	cpi	r20, 0x02	; 2
    3502:	51 05       	cpc	r21, r1
    3504:	f9 f4       	brne	.+62     	; 0x3544 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    3506:	c7 01       	movw	r24, r14
    3508:	42 a1       	lds	r20, 0x42
    350a:	23 a1       	lds	r18, 0x43
    350c:	04 a1       	lds	r16, 0x44
    350e:	0e 94 a9 18 	call	0x3152	; 0x3152 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    3512:	f7 01       	movw	r30, r14
    3514:	85 a1       	lds	r24, 0x45
    3516:	84 30       	cpi	r24, 0x04	; 4
    3518:	a9 f0       	breq	.+42     	; 0x3544 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	97 a3       	lds	r25, 0x57
    3520:	86 a3       	lds	r24, 0x56
    3522:	10 c0       	rjmp	.+32     	; 0x3544 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3524:	22 30       	cpi	r18, 0x02	; 2
    3526:	71 f4       	brne	.+28     	; 0x3544 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3528:	c7 01       	movw	r24, r14
    352a:	42 a1       	lds	r20, 0x42
    352c:	23 a1       	lds	r18, 0x43
    352e:	00 e0       	ldi	r16, 0x00	; 0
    3530:	0e 94 a9 18 	call	0x3152	; 0x3152 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3534:	f7 01       	movw	r30, r14
    3536:	85 a1       	lds	r24, 0x45
    3538:	84 30       	cpi	r24, 0x04	; 4
    353a:	21 f0       	breq	.+8      	; 0x3544 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	97 a3       	lds	r25, 0x57
    3542:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	0f 91       	pop	r16
    354a:	ff 90       	pop	r15
    354c:	ef 90       	pop	r14
    354e:	08 95       	ret

00003550 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    3550:	cf 92       	push	r12
    3552:	df 92       	push	r13
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    3562:	dc 01       	movw	r26, r24
    3564:	90 96       	adiw	r26, 0x20	; 32
    3566:	ed 91       	ld	r30, X+
    3568:	fc 91       	ld	r31, X
    356a:	91 97       	sbiw	r26, 0x21	; 33
    356c:	30 97       	sbiw	r30, 0x00	; 0
    356e:	09 f0       	breq	.+2      	; 0x3572 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    3570:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    3572:	0f 2e       	mov	r0, r31
    3574:	f8 ee       	ldi	r31, 0xE8	; 232
    3576:	ef 2e       	mov	r14, r31
    3578:	ff 24       	eor	r15, r15
    357a:	f0 2d       	mov	r31, r0
    357c:	ec 0c       	add	r14, r12
    357e:	fd 1c       	adc	r15, r13
    3580:	c7 01       	movw	r24, r14
    3582:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3586:	c8 2f       	mov	r28, r24
    3588:	d0 e0       	ldi	r29, 0x00	; 0
    358a:	20 97       	sbiw	r28, 0x00	; 0
    358c:	99 f0       	breq	.+38     	; 0x35b4 <midi_device_process+0x64>
    358e:	00 e0       	ldi	r16, 0x00	; 0
    3590:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    3592:	c7 01       	movw	r24, r14
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	0e 94 12 16 	call	0x2c24	; 0x2c24 <bytequeue_get>
    359a:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    359c:	c6 01       	movw	r24, r12
    359e:	0e 94 cd 19 	call	0x339a	; 0x339a <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    35a2:	c7 01       	movw	r24, r14
    35a4:	61 e0       	ldi	r22, 0x01	; 1
    35a6:	0e 94 23 16 	call	0x2c46	; 0x2c46 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    35aa:	0f 5f       	subi	r16, 0xFF	; 255
    35ac:	1f 4f       	sbci	r17, 0xFF	; 255
    35ae:	0c 17       	cp	r16, r28
    35b0:	1d 07       	cpc	r17, r29
    35b2:	78 f3       	brcs	.-34     	; 0x3592 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	1f 91       	pop	r17
    35ba:	0f 91       	pop	r16
    35bc:	ff 90       	pop	r15
    35be:	ef 90       	pop	r14
    35c0:	df 90       	pop	r13
    35c2:	cf 90       	pop	r12
    35c4:	08 95       	ret

000035c6 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    35c6:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    35c8:	67 e0       	ldi	r22, 0x07	; 7
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodhi4>
    35d0:	48 2f       	mov	r20, r24
   if (remainder)
    35d2:	88 23       	and	r24, r24
    35d4:	81 f0       	breq	.+32     	; 0x35f6 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    35d6:	c9 01       	movw	r24, r18
    35d8:	67 e0       	ldi	r22, 0x07	; 7
    35da:	70 e0       	ldi	r23, 0x00	; 0
    35dc:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodhi4>
    35e0:	cb 01       	movw	r24, r22
    35e2:	88 0f       	add	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	88 0f       	add	r24, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	84 0f       	add	r24, r20
    35f2:	91 1d       	adc	r25, r1
    35f4:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    35f6:	c9 01       	movw	r24, r18
    35f8:	67 e0       	ldi	r22, 0x07	; 7
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodhi4>
    3600:	cb 01       	movw	r24, r22
    3602:	88 0f       	add	r24, r24
    3604:	99 1f       	adc	r25, r25
    3606:	88 0f       	add	r24, r24
    3608:	99 1f       	adc	r25, r25
    360a:	88 0f       	add	r24, r24
    360c:	99 1f       	adc	r25, r25
}
    360e:	08 95       	ret

00003610 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3610:	48 2f       	mov	r20, r24
    3612:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3614:	a1 f0       	breq	.+40     	; 0x363e <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3616:	9c 01       	movw	r18, r24
    3618:	36 95       	lsr	r19
    361a:	27 95       	ror	r18
    361c:	36 95       	lsr	r19
    361e:	27 95       	ror	r18
    3620:	36 95       	lsr	r19
    3622:	27 95       	ror	r18
    3624:	c9 01       	movw	r24, r18
    3626:	88 0f       	add	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	88 0f       	add	r24, r24
    362c:	99 1f       	adc	r25, r25
    362e:	88 0f       	add	r24, r24
    3630:	99 1f       	adc	r25, r25
    3632:	82 1b       	sub	r24, r18
    3634:	93 0b       	sbc	r25, r19
    3636:	01 97       	sbiw	r24, 0x01	; 1
    3638:	84 0f       	add	r24, r20
    363a:	91 1d       	adc	r25, r1
    363c:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    363e:	9c 01       	movw	r18, r24
    3640:	36 95       	lsr	r19
    3642:	27 95       	ror	r18
    3644:	36 95       	lsr	r19
    3646:	27 95       	ror	r18
    3648:	36 95       	lsr	r19
    364a:	27 95       	ror	r18
    364c:	c9 01       	movw	r24, r18
    364e:	88 0f       	add	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	88 0f       	add	r24, r24
    3654:	99 1f       	adc	r25, r25
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	82 1b       	sub	r24, r18
    365c:	93 0b       	sbc	r25, r19
}
    365e:	08 95       	ret

00003660 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3660:	2f 92       	push	r2
    3662:	3f 92       	push	r3
    3664:	4f 92       	push	r4
    3666:	5f 92       	push	r5
    3668:	6f 92       	push	r6
    366a:	7f 92       	push	r7
    366c:	8f 92       	push	r8
    366e:	9f 92       	push	r9
    3670:	af 92       	push	r10
    3672:	bf 92       	push	r11
    3674:	cf 92       	push	r12
    3676:	df 92       	push	r13
    3678:	ef 92       	push	r14
    367a:	ff 92       	push	r15
    367c:	0f 93       	push	r16
    367e:	1f 93       	push	r17
    3680:	cf 93       	push	r28
    3682:	df 93       	push	r29
    3684:	00 d0       	rcall	.+0      	; 0x3686 <sysex_encode+0x26>
    3686:	00 d0       	rcall	.+0      	; 0x3688 <sysex_encode+0x28>
    3688:	00 d0       	rcall	.+0      	; 0x368a <sysex_encode+0x2a>
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
    368e:	1c 01       	movw	r2, r24
    3690:	7a 83       	std	Y+2, r23	; 0x02
    3692:	69 83       	std	Y+1, r22	; 0x01
    3694:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3696:	ca 01       	movw	r24, r20
    3698:	67 e0       	ldi	r22, 0x07	; 7
    369a:	70 e0       	ldi	r23, 0x00	; 0
    369c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodhi4>
    36a0:	2b 01       	movw	r4, r22
    36a2:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    36a4:	61 15       	cp	r22, r1
    36a6:	71 05       	cpc	r23, r1
    36a8:	b1 f1       	breq	.+108    	; 0x3716 <sysex_encode+0xb6>
    36aa:	81 01       	movw	r16, r2
    36ac:	e9 80       	ldd	r14, Y+1	; 0x01
    36ae:	fa 80       	ldd	r15, Y+2	; 0x02
    36b0:	cc 24       	eor	r12, r12
    36b2:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    36b4:	88 24       	eor	r8, r8
    36b6:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    36b8:	1e 83       	std	Y+6, r17	; 0x06
    36ba:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    36bc:	f8 01       	movw	r30, r16
    36be:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    36c0:	fc 82       	std	Y+4, r15	; 0x04
    36c2:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    36c4:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    36c6:	ab 81       	ldd	r26, Y+3	; 0x03
    36c8:	bc 81       	ldd	r27, Y+4	; 0x04
    36ca:	2d 91       	ld	r18, X+
    36cc:	bc 83       	std	Y+4, r27	; 0x04
    36ce:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    36d0:	4f 5f       	subi	r20, 0xFF	; 255
    36d2:	5f 4f       	sbci	r21, 0xFF	; 255
    36d4:	82 2f       	mov	r24, r18
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	80 78       	andi	r24, 0x80	; 128
    36da:	90 70       	andi	r25, 0x00	; 0
    36dc:	bc 01       	movw	r22, r24
    36de:	04 2e       	mov	r0, r20
    36e0:	02 c0       	rjmp	.+4      	; 0x36e6 <sysex_encode+0x86>
    36e2:	75 95       	asr	r23
    36e4:	67 95       	ror	r22
    36e6:	0a 94       	dec	r0
    36e8:	e2 f7       	brpl	.-8      	; 0x36e2 <sysex_encode+0x82>
    36ea:	ad 81       	ldd	r26, Y+5	; 0x05
    36ec:	be 81       	ldd	r27, Y+6	; 0x06
    36ee:	8c 91       	ld	r24, X
    36f0:	86 2b       	or	r24, r22
    36f2:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    36f4:	2f 77       	andi	r18, 0x7F	; 127
    36f6:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    36f8:	47 30       	cpi	r20, 0x07	; 7
    36fa:	51 05       	cpc	r21, r1
    36fc:	21 f7       	brne	.-56     	; 0x36c6 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    36fe:	08 94       	sec
    3700:	c1 1c       	adc	r12, r1
    3702:	d1 1c       	adc	r13, r1
    3704:	08 5f       	subi	r16, 0xF8	; 248
    3706:	1f 4f       	sbci	r17, 0xFF	; 255
    3708:	e7 e0       	ldi	r30, 0x07	; 7
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	ee 0e       	add	r14, r30
    370e:	ff 1e       	adc	r15, r31
    3710:	ca 14       	cp	r12, r10
    3712:	db 04       	cpc	r13, r11
    3714:	89 f6       	brne	.-94     	; 0x36b8 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3716:	c3 01       	movw	r24, r6
    3718:	67 e0       	ldi	r22, 0x07	; 7
    371a:	70 e0       	ldi	r23, 0x00	; 0
    371c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodhi4>
   if (remainder) {
    3720:	88 23       	and	r24, r24
    3722:	d9 f1       	breq	.+118    	; 0x379a <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3724:	82 01       	movw	r16, r4
    3726:	00 0f       	add	r16, r16
    3728:	11 1f       	adc	r17, r17
    372a:	00 0f       	add	r16, r16
    372c:	11 1f       	adc	r17, r17
    372e:	00 0f       	add	r16, r16
    3730:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3732:	78 01       	movw	r14, r16
    3734:	e4 18       	sub	r14, r4
    3736:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3738:	d1 01       	movw	r26, r2
    373a:	a0 0f       	add	r26, r16
    373c:	b1 1f       	adc	r27, r17
    373e:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3740:	68 2f       	mov	r22, r24
    3742:	70 e0       	ldi	r23, 0x00	; 0
    3744:	61 15       	cp	r22, r1
    3746:	71 05       	cpc	r23, r1
    3748:	19 f1       	breq	.+70     	; 0x3790 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    374a:	e9 81       	ldd	r30, Y+1	; 0x01
    374c:	fa 81       	ldd	r31, Y+2	; 0x02
    374e:	ee 0e       	add	r14, r30
    3750:	ff 1e       	adc	r15, r31
    3752:	c8 01       	movw	r24, r16
    3754:	01 96       	adiw	r24, 0x01	; 1
    3756:	28 0e       	add	r2, r24
    3758:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    375e:	f7 01       	movw	r30, r14
    3760:	41 91       	ld	r20, Z+
    3762:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3764:	2f 5f       	subi	r18, 0xFF	; 255
    3766:	3f 4f       	sbci	r19, 0xFF	; 255
    3768:	84 2f       	mov	r24, r20
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	80 78       	andi	r24, 0x80	; 128
    376e:	90 70       	andi	r25, 0x00	; 0
    3770:	02 2e       	mov	r0, r18
    3772:	02 c0       	rjmp	.+4      	; 0x3778 <sysex_encode+0x118>
    3774:	95 95       	asr	r25
    3776:	87 95       	ror	r24
    3778:	0a 94       	dec	r0
    377a:	e2 f7       	brpl	.-8      	; 0x3774 <sysex_encode+0x114>
    377c:	9c 91       	ld	r25, X
    377e:	89 2b       	or	r24, r25
    3780:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3782:	4f 77       	andi	r20, 0x7F	; 127
    3784:	f1 01       	movw	r30, r2
    3786:	41 93       	st	Z+, r20
    3788:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    378a:	26 17       	cp	r18, r22
    378c:	37 07       	cpc	r19, r23
    378e:	38 f3       	brcs	.-50     	; 0x375e <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3790:	c8 01       	movw	r24, r16
    3792:	01 96       	adiw	r24, 0x01	; 1
    3794:	86 0f       	add	r24, r22
    3796:	97 1f       	adc	r25, r23
    3798:	07 c0       	rjmp	.+14     	; 0x37a8 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    379a:	c2 01       	movw	r24, r4
    379c:	88 0f       	add	r24, r24
    379e:	99 1f       	adc	r25, r25
    37a0:	88 0f       	add	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	88 0f       	add	r24, r24
    37a6:	99 1f       	adc	r25, r25
   }
}
    37a8:	26 96       	adiw	r28, 0x06	; 6
    37aa:	0f b6       	in	r0, 0x3f	; 63
    37ac:	f8 94       	cli
    37ae:	de bf       	out	0x3e, r29	; 62
    37b0:	0f be       	out	0x3f, r0	; 63
    37b2:	cd bf       	out	0x3d, r28	; 61
    37b4:	df 91       	pop	r29
    37b6:	cf 91       	pop	r28
    37b8:	1f 91       	pop	r17
    37ba:	0f 91       	pop	r16
    37bc:	ff 90       	pop	r15
    37be:	ef 90       	pop	r14
    37c0:	df 90       	pop	r13
    37c2:	cf 90       	pop	r12
    37c4:	bf 90       	pop	r11
    37c6:	af 90       	pop	r10
    37c8:	9f 90       	pop	r9
    37ca:	8f 90       	pop	r8
    37cc:	7f 90       	pop	r7
    37ce:	6f 90       	pop	r6
    37d0:	5f 90       	pop	r5
    37d2:	4f 90       	pop	r4
    37d4:	3f 90       	pop	r3
    37d6:	2f 90       	pop	r2
    37d8:	08 95       	ret

000037da <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    37da:	6f 92       	push	r6
    37dc:	7f 92       	push	r7
    37de:	8f 92       	push	r8
    37e0:	9f 92       	push	r9
    37e2:	af 92       	push	r10
    37e4:	bf 92       	push	r11
    37e6:	cf 92       	push	r12
    37e8:	df 92       	push	r13
    37ea:	ef 92       	push	r14
    37ec:	ff 92       	push	r15
    37ee:	0f 93       	push	r16
    37f0:	1f 93       	push	r17
    37f2:	cf 93       	push	r28
    37f4:	df 93       	push	r29
    37f6:	3c 01       	movw	r6, r24
    37f8:	4b 01       	movw	r8, r22
    37fa:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    37fc:	42 30       	cpi	r20, 0x02	; 2
    37fe:	51 05       	cpc	r21, r1
    3800:	08 f4       	brcc	.+2      	; 0x3804 <sysex_decode+0x2a>
    3802:	6f c0       	rjmp	.+222    	; 0x38e2 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3804:	7a 01       	movw	r14, r20
    3806:	f6 94       	lsr	r15
    3808:	e7 94       	ror	r14
    380a:	f6 94       	lsr	r15
    380c:	e7 94       	ror	r14
    380e:	f6 94       	lsr	r15
    3810:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3812:	e1 14       	cp	r14, r1
    3814:	f1 04       	cpc	r15, r1
    3816:	29 f1       	breq	.+74     	; 0x3862 <sysex_decode+0x88>
    3818:	eb 01       	movw	r28, r22
    381a:	b3 01       	movw	r22, r6
    381c:	00 e0       	ldi	r16, 0x00	; 0
    381e:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3820:	cc 24       	eor	r12, r12
    3822:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3824:	de 01       	movw	r26, r28
    3826:	11 96       	adiw	r26, 0x01	; 1
    3828:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    382a:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    382c:	2d 91       	ld	r18, X+
    382e:	2f 77       	andi	r18, 0x7F	; 127
    3830:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3832:	4f 5f       	subi	r20, 0xFF	; 255
    3834:	5f 4f       	sbci	r21, 0xFF	; 255
    3836:	88 81       	ld	r24, Y
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	04 2e       	mov	r0, r20
    383c:	02 c0       	rjmp	.+4      	; 0x3842 <sysex_decode+0x68>
    383e:	88 0f       	add	r24, r24
    3840:	99 1f       	adc	r25, r25
    3842:	0a 94       	dec	r0
    3844:	e2 f7       	brpl	.-8      	; 0x383e <sysex_decode+0x64>
    3846:	80 78       	andi	r24, 0x80	; 128
    3848:	28 2b       	or	r18, r24
    384a:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    384c:	47 30       	cpi	r20, 0x07	; 7
    384e:	51 05       	cpc	r21, r1
    3850:	69 f7       	brne	.-38     	; 0x382c <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3852:	0f 5f       	subi	r16, 0xFF	; 255
    3854:	1f 4f       	sbci	r17, 0xFF	; 255
    3856:	28 96       	adiw	r28, 0x08	; 8
    3858:	69 5f       	subi	r22, 0xF9	; 249
    385a:	7f 4f       	sbci	r23, 0xFF	; 255
    385c:	0e 15       	cp	r16, r14
    385e:	1f 05       	cpc	r17, r15
    3860:	09 f7       	brne	.-62     	; 0x3824 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3862:	5a 2d       	mov	r21, r10
    3864:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3866:	99 f1       	breq	.+102    	; 0x38ce <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3868:	e7 01       	movw	r28, r14
    386a:	cc 0f       	add	r28, r28
    386c:	dd 1f       	adc	r29, r29
    386e:	cc 0f       	add	r28, r28
    3870:	dd 1f       	adc	r29, r29
    3872:	cc 0f       	add	r28, r28
    3874:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3876:	8e 01       	movw	r16, r28
    3878:	0e 19       	sub	r16, r14
    387a:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    387c:	65 2f       	mov	r22, r21
    387e:	70 e0       	ldi	r23, 0x00	; 0
    3880:	61 50       	subi	r22, 0x01	; 1
    3882:	70 40       	sbci	r23, 0x00	; 0
    3884:	f9 f0       	breq	.+62     	; 0x38c4 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3886:	ce 01       	movw	r24, r28
    3888:	01 96       	adiw	r24, 0x01	; 1
    388a:	d4 01       	movw	r26, r8
    388c:	a8 0f       	add	r26, r24
    388e:	b9 1f       	adc	r27, r25
    3890:	f3 01       	movw	r30, r6
    3892:	e0 0f       	add	r30, r16
    3894:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    389a:	c8 0d       	add	r28, r8
    389c:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    389e:	4d 91       	ld	r20, X+
    38a0:	4f 77       	andi	r20, 0x7F	; 127
    38a2:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    38a4:	2f 5f       	subi	r18, 0xFF	; 255
    38a6:	3f 4f       	sbci	r19, 0xFF	; 255
    38a8:	88 81       	ld	r24, Y
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	02 2e       	mov	r0, r18
    38ae:	02 c0       	rjmp	.+4      	; 0x38b4 <sysex_decode+0xda>
    38b0:	88 0f       	add	r24, r24
    38b2:	99 1f       	adc	r25, r25
    38b4:	0a 94       	dec	r0
    38b6:	e2 f7       	brpl	.-8      	; 0x38b0 <sysex_decode+0xd6>
    38b8:	80 78       	andi	r24, 0x80	; 128
    38ba:	48 2b       	or	r20, r24
    38bc:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    38be:	26 17       	cp	r18, r22
    38c0:	37 07       	cpc	r19, r23
    38c2:	68 f3       	brcs	.-38     	; 0x389e <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    38c4:	c8 01       	movw	r24, r16
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	85 0f       	add	r24, r21
    38ca:	91 1d       	adc	r25, r1
    38cc:	0c c0       	rjmp	.+24     	; 0x38e6 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    38ce:	c7 01       	movw	r24, r14
    38d0:	88 0f       	add	r24, r24
    38d2:	99 1f       	adc	r25, r25
    38d4:	88 0f       	add	r24, r24
    38d6:	99 1f       	adc	r25, r25
    38d8:	88 0f       	add	r24, r24
    38da:	99 1f       	adc	r25, r25
    38dc:	8e 19       	sub	r24, r14
    38de:	9f 09       	sbc	r25, r15
    38e0:	02 c0       	rjmp	.+4      	; 0x38e6 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    38e6:	df 91       	pop	r29
    38e8:	cf 91       	pop	r28
    38ea:	1f 91       	pop	r17
    38ec:	0f 91       	pop	r16
    38ee:	ff 90       	pop	r15
    38f0:	ef 90       	pop	r14
    38f2:	df 90       	pop	r13
    38f4:	cf 90       	pop	r12
    38f6:	bf 90       	pop	r11
    38f8:	af 90       	pop	r10
    38fa:	9f 90       	pop	r9
    38fc:	8f 90       	pop	r8
    38fe:	7f 90       	pop	r7
    3900:	6f 90       	pop	r6
    3902:	08 95       	ret

00003904 <__mulsi3>:
    3904:	62 9f       	mul	r22, r18
    3906:	d0 01       	movw	r26, r0
    3908:	73 9f       	mul	r23, r19
    390a:	f0 01       	movw	r30, r0
    390c:	82 9f       	mul	r24, r18
    390e:	e0 0d       	add	r30, r0
    3910:	f1 1d       	adc	r31, r1
    3912:	64 9f       	mul	r22, r20
    3914:	e0 0d       	add	r30, r0
    3916:	f1 1d       	adc	r31, r1
    3918:	92 9f       	mul	r25, r18
    391a:	f0 0d       	add	r31, r0
    391c:	83 9f       	mul	r24, r19
    391e:	f0 0d       	add	r31, r0
    3920:	74 9f       	mul	r23, r20
    3922:	f0 0d       	add	r31, r0
    3924:	65 9f       	mul	r22, r21
    3926:	f0 0d       	add	r31, r0
    3928:	99 27       	eor	r25, r25
    392a:	72 9f       	mul	r23, r18
    392c:	b0 0d       	add	r27, r0
    392e:	e1 1d       	adc	r30, r1
    3930:	f9 1f       	adc	r31, r25
    3932:	63 9f       	mul	r22, r19
    3934:	b0 0d       	add	r27, r0
    3936:	e1 1d       	adc	r30, r1
    3938:	f9 1f       	adc	r31, r25
    393a:	bd 01       	movw	r22, r26
    393c:	cf 01       	movw	r24, r30
    393e:	11 24       	eor	r1, r1
    3940:	08 95       	ret

00003942 <__udivmodhi4>:
    3942:	aa 1b       	sub	r26, r26
    3944:	bb 1b       	sub	r27, r27
    3946:	51 e1       	ldi	r21, 0x11	; 17
    3948:	07 c0       	rjmp	.+14     	; 0x3958 <__udivmodhi4_ep>

0000394a <__udivmodhi4_loop>:
    394a:	aa 1f       	adc	r26, r26
    394c:	bb 1f       	adc	r27, r27
    394e:	a6 17       	cp	r26, r22
    3950:	b7 07       	cpc	r27, r23
    3952:	10 f0       	brcs	.+4      	; 0x3958 <__udivmodhi4_ep>
    3954:	a6 1b       	sub	r26, r22
    3956:	b7 0b       	sbc	r27, r23

00003958 <__udivmodhi4_ep>:
    3958:	88 1f       	adc	r24, r24
    395a:	99 1f       	adc	r25, r25
    395c:	5a 95       	dec	r21
    395e:	a9 f7       	brne	.-22     	; 0x394a <__udivmodhi4_loop>
    3960:	80 95       	com	r24
    3962:	90 95       	com	r25
    3964:	bc 01       	movw	r22, r24
    3966:	cd 01       	movw	r24, r26
    3968:	08 95       	ret

0000396a <__divmodhi4>:
    396a:	97 fb       	bst	r25, 7
    396c:	09 2e       	mov	r0, r25
    396e:	07 26       	eor	r0, r23
    3970:	0a d0       	rcall	.+20     	; 0x3986 <__divmodhi4_neg1>
    3972:	77 fd       	sbrc	r23, 7
    3974:	04 d0       	rcall	.+8      	; 0x397e <__divmodhi4_neg2>
    3976:	e5 df       	rcall	.-54     	; 0x3942 <__udivmodhi4>
    3978:	06 d0       	rcall	.+12     	; 0x3986 <__divmodhi4_neg1>
    397a:	00 20       	and	r0, r0
    397c:	1a f4       	brpl	.+6      	; 0x3984 <__divmodhi4_exit>

0000397e <__divmodhi4_neg2>:
    397e:	70 95       	com	r23
    3980:	61 95       	neg	r22
    3982:	7f 4f       	sbci	r23, 0xFF	; 255

00003984 <__divmodhi4_exit>:
    3984:	08 95       	ret

00003986 <__divmodhi4_neg1>:
    3986:	f6 f7       	brtc	.-4      	; 0x3984 <__divmodhi4_exit>
    3988:	90 95       	com	r25
    398a:	81 95       	neg	r24
    398c:	9f 4f       	sbci	r25, 0xFF	; 255
    398e:	08 95       	ret

00003990 <memcpy>:
    3990:	fb 01       	movw	r30, r22
    3992:	dc 01       	movw	r26, r24
    3994:	02 c0       	rjmp	.+4      	; 0x399a <memcpy+0xa>
    3996:	01 90       	ld	r0, Z+
    3998:	0d 92       	st	X+, r0
    399a:	41 50       	subi	r20, 0x01	; 1
    399c:	50 40       	sbci	r21, 0x00	; 0
    399e:	d8 f7       	brcc	.-10     	; 0x3996 <memcpy+0x6>
    39a0:	08 95       	ret

000039a2 <memmove>:
    39a2:	68 17       	cp	r22, r24
    39a4:	79 07       	cpc	r23, r25
    39a6:	68 f4       	brcc	.+26     	; 0x39c2 <memmove+0x20>
    39a8:	fb 01       	movw	r30, r22
    39aa:	dc 01       	movw	r26, r24
    39ac:	e4 0f       	add	r30, r20
    39ae:	f5 1f       	adc	r31, r21
    39b0:	a4 0f       	add	r26, r20
    39b2:	b5 1f       	adc	r27, r21
    39b4:	02 c0       	rjmp	.+4      	; 0x39ba <memmove+0x18>
    39b6:	02 90       	ld	r0, -Z
    39b8:	0e 92       	st	-X, r0
    39ba:	41 50       	subi	r20, 0x01	; 1
    39bc:	50 40       	sbci	r21, 0x00	; 0
    39be:	d8 f7       	brcc	.-10     	; 0x39b6 <memmove+0x14>
    39c0:	08 95       	ret
    39c2:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <memcpy>

000039c6 <__eerd_block_m6450a>:
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22

000039ca <__eerd_blraw_m6450a>:
    39ca:	fc 01       	movw	r30, r24
    39cc:	f9 99       	sbic	0x1f, 1	; 31
    39ce:	fe cf       	rjmp	.-4      	; 0x39cc <__eerd_blraw_m6450a+0x2>
    39d0:	06 c0       	rjmp	.+12     	; 0x39de <__eerd_blraw_m6450a+0x14>
    39d2:	f2 bd       	out	0x22, r31	; 34
    39d4:	e1 bd       	out	0x21, r30	; 33
    39d6:	f8 9a       	sbi	0x1f, 0	; 31
    39d8:	31 96       	adiw	r30, 0x01	; 1
    39da:	00 b4       	in	r0, 0x20	; 32
    39dc:	0d 92       	st	X+, r0
    39de:	41 50       	subi	r20, 0x01	; 1
    39e0:	50 40       	sbci	r21, 0x00	; 0
    39e2:	b8 f7       	brcc	.-18     	; 0x39d2 <__eerd_blraw_m6450a+0x8>
    39e4:	08 95       	ret

000039e6 <__eerd_word_m6450a>:
    39e6:	a8 e1       	ldi	r26, 0x18	; 24
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	42 e0       	ldi	r20, 0x02	; 2
    39ec:	50 e0       	ldi	r21, 0x00	; 0
    39ee:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__eerd_blraw_m6450a>

000039f2 <__eeupd_block_m6450a>:
    39f2:	dc 01       	movw	r26, r24
    39f4:	a4 0f       	add	r26, r20
    39f6:	b5 1f       	adc	r27, r21
    39f8:	41 50       	subi	r20, 0x01	; 1
    39fa:	50 40       	sbci	r21, 0x00	; 0
    39fc:	48 f0       	brcs	.+18     	; 0x3a10 <__eeupd_block_m6450a+0x1e>
    39fe:	cb 01       	movw	r24, r22
    3a00:	84 0f       	add	r24, r20
    3a02:	95 1f       	adc	r25, r21
    3a04:	2e 91       	ld	r18, -X
    3a06:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__eeupd_r18_m6450a>
    3a0a:	41 50       	subi	r20, 0x01	; 1
    3a0c:	50 40       	sbci	r21, 0x00	; 0
    3a0e:	d0 f7       	brcc	.-12     	; 0x3a04 <__eeupd_block_m6450a+0x12>
    3a10:	08 95       	ret

00003a12 <__eeupd_byte_m6450a>:
    3a12:	26 2f       	mov	r18, r22

00003a14 <__eeupd_r18_m6450a>:
    3a14:	f9 99       	sbic	0x1f, 1	; 31
    3a16:	fe cf       	rjmp	.-4      	; 0x3a14 <__eeupd_r18_m6450a>
    3a18:	92 bd       	out	0x22, r25	; 34
    3a1a:	81 bd       	out	0x21, r24	; 33
    3a1c:	f8 9a       	sbi	0x1f, 0	; 31
    3a1e:	01 97       	sbiw	r24, 0x01	; 1
    3a20:	00 b4       	in	r0, 0x20	; 32
    3a22:	02 16       	cp	r0, r18
    3a24:	31 f0       	breq	.+12     	; 0x3a32 <__eeupd_r18_m6450a+0x1e>
    3a26:	20 bd       	out	0x20, r18	; 32
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	f8 94       	cli
    3a2c:	fa 9a       	sbi	0x1f, 2	; 31
    3a2e:	f9 9a       	sbi	0x1f, 1	; 31
    3a30:	0f be       	out	0x3f, r0	; 63
    3a32:	08 95       	ret

00003a34 <__eeupd_word_m6450a>:
    3a34:	01 96       	adiw	r24, 0x01	; 1
    3a36:	27 2f       	mov	r18, r23
    3a38:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__eeupd_r18_m6450a>
    3a3c:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <__eeupd_byte_m6450a>

00003a40 <_exit>:
    3a40:	f8 94       	cli

00003a42 <__stop_program>:
    3a42:	ff cf       	rjmp	.-2      	; 0x3a42 <__stop_program>
