
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003ca4  00003d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ca4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000215  008002b0  008002b0  00003f08  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  0000457c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00005170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000300  00000000  00000000  000054b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a90  00000000  00000000  000057b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018b0  00000000  00000000  0000c240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002172  00000000  00000000  0000daf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d8c  00000000  00000000  0000fc64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000199a  00000000  00000000  000109f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002ee7  00000000  00000000  0001238a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00015271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_9>
      28:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e4 ea       	ldi	r30, 0xA4	; 164
      78:	fc e3       	ldi	r31, 0x3C	; 60
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a5 3c       	cpi	r26, 0xC5	; 197
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 54 04 	call	0x8a8	; 0x8a8 <main>
      9a:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:
struct arp arp;


//static struct midi_note arp_sequence[24] = {0,0};

void update_arp_sequence(void) {
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
		//arp.current_note = arp.sequence[arp.last_step].note; //temp note to store for release phase
		//arp.step_position = 0; //reset step position
		////return;
	//}

	arp.step_number = gate_buffer*(arp.range + 1);
     15e:	80 91 84 03 	lds	r24, 0x0384
     162:	8f 5f       	subi	r24, 0xFF	; 255
     164:	90 91 b0 02 	lds	r25, 0x02B0
     168:	89 9f       	mul	r24, r25
     16a:	80 2d       	mov	r24, r0
     16c:	11 24       	eor	r1, r1
     16e:	80 93 85 03 	sts	0x0385, r24
     172:	00 e0       	ldi	r16, 0x00	; 0
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     174:	aa 24       	eor	r10, r10
     176:	bb 24       	eor	r11, r11
	
	
	//if ((arp.mode == UP_DOWN) && (arp.range > 0)) arp.step_number = arp.step_number << 1;//twice as many steps
	
	//set arp sequence
	uint8_t step = 0;
     178:	10 e0       	ldi	r17, 0x00	; 0
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     17a:	88 24       	eor	r8, r8
     17c:	99 24       	eor	r9, r9
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     17e:	0f 2e       	mov	r0, r31
     180:	fb e8       	ldi	r31, 0x8B	; 139
     182:	ef 2e       	mov	r14, r31
     184:	f3 e0       	ldi	r31, 0x03	; 3
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
					
				case DOWN:
					
					//int temp_note = int (root_note - (range*12));
					//if (temp_note < 8)  temp_note = root_note; //handle min note out of range here
					arp.sequence[step++].note = root_note - (range*12);
     18a:	0f 2e       	mov	r0, r31
     18c:	f4 e8       	ldi	r31, 0x84	; 132
     18e:	cf 2e       	mov	r12, r31
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	df 2e       	mov	r13, r31
     194:	f0 2d       	mov	r31, r0
     196:	37 c0       	rjmp	.+110    	; 0x206 <update_arp_sequence+0xc0>
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     198:	e4 01       	movw	r28, r8
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
     19a:	81 50       	subi	r24, 0x01	; 1
     19c:	8c 1b       	sub	r24, r28
     19e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <get_indexed_note>
     1a2:	28 2f       	mov	r18, r24
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     1a4:	f7 01       	movw	r30, r14
     1a6:	80 81       	ld	r24, Z
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	81 f0       	breq	.+32     	; 0x1cc <update_arp_sequence+0x86>
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	10 f0       	brcs	.+4      	; 0x1b4 <update_arp_sequence+0x6e>
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	b9 f4       	brne	.+46     	; 0x1e2 <update_arp_sequence+0x9c>
				
				case UP:
				case UP_DOWN:
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1b4:	81 2f       	mov	r24, r17
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	04 96       	adiw	r24, 0x04	; 4
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	8c 0d       	add	r24, r12
     1c0:	9d 1d       	adc	r25, r13
     1c2:	20 0f       	add	r18, r16
     1c4:	fc 01       	movw	r30, r24
     1c6:	20 83       	st	Z, r18
     1c8:	1f 5f       	subi	r17, 0xFF	; 255
				
					break;
     1ca:	0b c0       	rjmp	.+22     	; 0x1e2 <update_arp_sequence+0x9c>
					
				case DOWN:
					
					//int temp_note = int (root_note - (range*12));
					//if (temp_note < 8)  temp_note = root_note; //handle min note out of range here
					arp.sequence[step++].note = root_note - (range*12);
     1cc:	81 2f       	mov	r24, r17
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	04 96       	adiw	r24, 0x04	; 4
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	8c 0d       	add	r24, r12
     1d8:	9d 1d       	adc	r25, r13
     1da:	20 1b       	sub	r18, r16
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
     1e0:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     1e2:	21 96       	adiw	r28, 0x01	; 1
     1e4:	80 91 b0 02 	lds	r24, 0x02B0
     1e8:	28 2f       	mov	r18, r24
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	c2 17       	cp	r28, r18
     1ee:	d3 07       	cpc	r29, r19
     1f0:	a4 f2       	brlt	.-88     	; 0x19a <update_arp_sequence+0x54>
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     1f2:	08 94       	sec
     1f4:	a1 1c       	adc	r10, r1
     1f6:	b1 1c       	adc	r11, r1
     1f8:	04 5f       	subi	r16, 0xF4	; 244
     1fa:	f6 01       	movw	r30, r12
     1fc:	80 81       	ld	r24, Z
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	8a 15       	cp	r24, r10
     202:	9b 05       	cpc	r25, r11
     204:	2c f0       	brlt	.+10     	; 0x210 <update_arp_sequence+0xca>
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     206:	80 91 b0 02 	lds	r24, 0x02B0
     20a:	88 23       	and	r24, r24
     20c:	29 f6       	brne	.-118    	; 0x198 <update_arp_sequence+0x52>
     20e:	f1 cf       	rjmp	.-30     	; 0x1f2 <update_arp_sequence+0xac>
	

		
	
	
}
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	ff 90       	pop	r15
     21a:	ef 90       	pop	r14
     21c:	df 90       	pop	r13
     21e:	cf 90       	pop	r12
     220:	bf 90       	pop	r11
     222:	af 90       	pop	r10
     224:	9f 90       	pop	r9
     226:	8f 90       	pop	r8
     228:	08 95       	ret

0000022a <step_arp_note>:

void step_arp_note(void) { //updates arp note according to step position in sequence
	
	arp.current_note = arp.sequence[arp.step_position].note;
     22a:	90 91 86 03 	lds	r25, 0x0386
     22e:	a9 2f       	mov	r26, r25
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	14 96       	adiw	r26, 0x04	; 4
     234:	e4 e8       	ldi	r30, 0x84	; 132
     236:	f3 e0       	ldi	r31, 0x03	; 3
     238:	aa 0f       	add	r26, r26
     23a:	bb 1f       	adc	r27, r27
     23c:	ae 0f       	add	r26, r30
     23e:	bf 1f       	adc	r27, r31
     240:	8c 91       	ld	r24, X
     242:	85 83       	std	Z+5, r24	; 0x05
	arp.previous_note = arp.current_note;
     244:	84 83       	std	Z+4, r24	; 0x04
	
	switch (arp.mode) {
     246:	87 81       	ldd	r24, Z+7	; 0x07
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	19 f0       	breq	.+6      	; 0x252 <step_arp_note+0x28>
     24c:	83 30       	cpi	r24, 0x03	; 3
     24e:	41 f5       	brne	.+80     	; 0x2a0 <step_arp_note+0x76>
     250:	08 95       	ret
		
		case UP_DOWN:
			
			if (arp.direction == UP) {
     252:	80 91 87 03 	lds	r24, 0x0387
     256:	88 23       	and	r24, r24
     258:	91 f4       	brne	.+36     	; 0x27e <step_arp_note+0x54>
				arp.step_position++;	
     25a:	9f 5f       	subi	r25, 0xFF	; 255
     25c:	90 93 86 03 	sts	0x0386, r25
				
				if (arp.step_position >= arp.step_number) {
     260:	80 91 85 03 	lds	r24, 0x0385
     264:	98 17       	cp	r25, r24
     266:	28 f1       	brcs	.+74     	; 0x2b2 <step_arp_note+0x88>
					arp.step_position = arp.step_number == 1 ? 0 : arp.step_number - 2; //Omar handles edge case here
     268:	81 30       	cpi	r24, 0x01	; 1
     26a:	11 f0       	breq	.+4      	; 0x270 <step_arp_note+0x46>
     26c:	82 50       	subi	r24, 0x02	; 2
     26e:	01 c0       	rjmp	.+2      	; 0x272 <step_arp_note+0x48>
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	80 93 86 03 	sts	0x0386, r24
					arp.direction = DOWN;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	80 93 87 03 	sts	0x0387, r24
     27c:	08 95       	ret
				}				
				
			} else {
				if (arp.step_position <= 0) {
     27e:	99 23       	and	r25, r25
     280:	59 f4       	brne	.+22     	; 0x298 <step_arp_note+0x6e>
					
					arp.step_position = arp.step_number == 1 ? 0 : 1; //Omar handles edge case here
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 91 85 03 	lds	r25, 0x0385
     288:	91 30       	cpi	r25, 0x01	; 1
     28a:	09 f4       	brne	.+2      	; 0x28e <step_arp_note+0x64>
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	80 93 86 03 	sts	0x0386, r24
					arp.direction = UP;
     292:	10 92 87 03 	sts	0x0387, r1
     296:	08 95       	ret
					
				} else {
					arp.step_position--;
     298:	91 50       	subi	r25, 0x01	; 1
     29a:	90 93 86 03 	sts	0x0386, r25
     29e:	08 95       	ret
		
			break;
			
		default:
		
			if (++arp.step_position >= arp.step_number) arp.step_position  = 0;//reset step position when at end of sequence 
     2a0:	9f 5f       	subi	r25, 0xFF	; 255
     2a2:	90 93 86 03 	sts	0x0386, r25
     2a6:	80 91 85 03 	lds	r24, 0x0385
     2aa:	98 17       	cp	r25, r24
     2ac:	10 f0       	brcs	.+4      	; 0x2b2 <step_arp_note+0x88>
     2ae:	10 92 86 03 	sts	0x0386, r1
     2b2:	08 95       	ret

000002b4 <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     2b4:	e8 2f       	mov	r30, r24
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	ee 0f       	add	r30, r30
     2ba:	ff 1f       	adc	r31, r31
     2bc:	e8 54       	subi	r30, 0x48	; 72
     2be:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     2c0:	80 81       	ld	r24, Z
     2c2:	08 95       	ret

000002c4 <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.clock_source == OFF) {
     2c4:	80 91 8a 03 	lds	r24, 0x038A
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	19 f4       	brne	.+6      	; 0x2d2 <get_current_note+0xe>
		
		note = current_note;
     2cc:	80 91 b1 02 	lds	r24, 0x02B1
     2d0:	08 95       	ret

		
	} else {
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     2d2:	80 91 89 03 	lds	r24, 0x0389
		//if (gate_buffer) note = arp.current_note;
		
	}
	return note;
	
}
     2d6:	08 95       	ret

000002d8 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	18 2f       	mov	r17, r24
     2e2:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     2e4:	8a eb       	ldi	r24, 0xBA	; 186
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	ec 01       	movw	r28, r24
     2ea:	22 97       	sbiw	r28, 0x02	; 2
     2ec:	be 01       	movw	r22, r28
     2ee:	4e e0       	ldi	r20, 0x0E	; 14
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     2f6:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     2f8:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     2fa:	10 93 b1 02 	sts	0x02B1, r17
	
} 
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <remove_note>:
void remove_note(uint8_t note){
     308:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     30a:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     30e:	c8 17       	cp	r28, r24
     310:	41 f0       	breq	.+16     	; 0x322 <remove_note+0x1a>
     312:	ea eb       	ldi	r30, 0xBA	; 186
     314:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     316:	41 e0       	ldi	r20, 0x01	; 1
     318:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     31a:	90 81       	ld	r25, Z
     31c:	98 17       	cp	r25, r24
     31e:	59 f4       	brne	.+22     	; 0x336 <remove_note+0x2e>
     320:	02 c0       	rjmp	.+4      	; 0x326 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     326:	fa 01       	movw	r30, r20
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	e8 54       	subi	r30, 0x48	; 72
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	8f ef       	ldi	r24, 0xFF	; 255
     332:	80 83       	st	Z, r24
			free_slot = i;
			break;
     334:	07 c0       	rjmp	.+14     	; 0x344 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     336:	4f 5f       	subi	r20, 0xFF	; 255
     338:	5f 4f       	sbci	r21, 0xFF	; 255
     33a:	32 96       	adiw	r30, 0x02	; 2
     33c:	48 30       	cpi	r20, 0x08	; 8
     33e:	51 05       	cpc	r21, r1
     340:	61 f7       	brne	.-40     	; 0x31a <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     342:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	ca 01       	movw	r24, r20
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	bc 01       	movw	r22, r24
     34e:	66 54       	subi	r22, 0x46	; 70
     350:	7e 4f       	sbci	r23, 0xFE	; 254
     352:	40 95       	com	r20
     354:	50 95       	com	r21
     356:	48 5f       	subi	r20, 0xF8	; 248
     358:	5f 4f       	sbci	r21, 0xFF	; 255
     35a:	44 0f       	add	r20, r20
     35c:	55 1f       	adc	r21, r21
     35e:	88 54       	subi	r24, 0x48	; 72
     360:	9e 4f       	sbci	r25, 0xFE	; 254
     362:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <memmove>
	note_pool[7].note = EMPTY;	
     366:	8f ef       	ldi	r24, 0xFF	; 255
     368:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     36c:	80 91 b8 01 	lds	r24, 0x01B8
     370:	8f 3f       	cpi	r24, 0xFF	; 255
     372:	19 f4       	brne	.+6      	; 0x37a <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     374:	c0 93 b1 02 	sts	0x02B1, r28
     378:	02 c0       	rjmp	.+4      	; 0x37e <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     37a:	80 93 b1 02 	sts	0x02B1, r24

	}	
	
}
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     382:	8d e0       	ldi	r24, 0x0D	; 13
     384:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     388:	82 e0       	ldi	r24, 0x02	; 2
     38a:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     38e:	08 95       	ret

00000390 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     390:	90 93 89 00 	sts	0x0089, r25
     394:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     398:	20 91 84 00 	lds	r18, 0x0084
     39c:	30 91 85 00 	lds	r19, 0x0085
     3a0:	82 17       	cp	r24, r18
     3a2:	93 07       	cpc	r25, r19
     3a4:	28 f4       	brcc	.+10     	; 0x3b0 <update_clock_rate+0x20>
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	90 93 85 00 	sts	0x0085, r25
     3ac:	80 93 84 00 	sts	0x0084, r24
     3b0:	08 95       	ret

000003b2 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     3b2:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     3b4:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     3b6:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     3b8:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     3ba:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     3bc:	8c 91       	ld	r24, X
     3be:	87 70       	andi	r24, 0x07	; 7
     3c0:	82 b9       	out	0x02, r24	; 2
     3c2:	66 e0       	ldi	r22, 0x06	; 6
     3c4:	6a 95       	dec	r22
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <set_control_voltage+0x12>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     3ca:	ea ed       	ldi	r30, 0xDA	; 218
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	40 81       	ld	r20, Z
     3d0:	8c 91       	ld	r24, X
     3d2:	86 95       	lsr	r24
     3d4:	86 95       	lsr	r24
     3d6:	86 95       	lsr	r24
     3d8:	87 70       	andi	r24, 0x07	; 7
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	b9 01       	movw	r22, r18
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <set_control_voltage+0x34>
     3e2:	66 0f       	add	r22, r22
     3e4:	77 1f       	adc	r23, r23
     3e6:	8a 95       	dec	r24
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <set_control_voltage+0x30>
     3ea:	cb 01       	movw	r24, r22
     3ec:	84 2b       	or	r24, r20
     3ee:	80 83       	st	Z, r24
     3f0:	76 e0       	ldi	r23, 0x06	; 6
     3f2:	7a 95       	dec	r23
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <set_control_voltage+0x40>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     3f8:	80 81       	ld	r24, Z
     3fa:	9c 91       	ld	r25, X
     3fc:	96 95       	lsr	r25
     3fe:	96 95       	lsr	r25
     400:	96 95       	lsr	r25
     402:	97 70       	andi	r25, 0x07	; 7
     404:	02 c0       	rjmp	.+4      	; 0x40a <set_control_voltage+0x58>
     406:	22 0f       	add	r18, r18
     408:	33 1f       	adc	r19, r19
     40a:	9a 95       	dec	r25
     40c:	e2 f7       	brpl	.-8      	; 0x406 <set_control_voltage+0x54>
     40e:	20 95       	com	r18
     410:	28 23       	and	r18, r24
     412:	20 83       	st	Z, r18
	
}	
     414:	08 95       	ret

00000416 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     416:	83 b3       	in	r24, 0x13	; 19
     418:	83 60       	ori	r24, 0x03	; 3
     41a:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     41c:	8f ef       	ldi	r24, 0xFF	; 255
     41e:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     420:	97 b1       	in	r25, 0x07	; 7
     422:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     424:	e9 ed       	ldi	r30, 0xD9	; 217
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	8f 60       	ori	r24, 0x0F	; 15
     42c:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     42e:	ea ed       	ldi	r30, 0xDA	; 218
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	80 81       	ld	r24, Z
     434:	80 7f       	andi	r24, 0xF0	; 240
     436:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     438:	84 b3       	in	r24, 0x14	; 20
     43a:	83 60       	ori	r24, 0x03	; 3
     43c:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     43e:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     440:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     442:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     444:	a0 9a       	sbi	0x14, 0	; 20
}
     446:	08 95       	ret

00000448 <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	2e 97       	sbiw	r28, 0x0e	; 14
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     460:	28 e0       	ldi	r18, 0x08	; 8
     462:	29 83       	std	Y+1, r18	; 0x01
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	2a 83       	std	Y+2, r18	; 0x02
     468:	22 e0       	ldi	r18, 0x02	; 2
     46a:	2b 83       	std	Y+3, r18	; 0x03
     46c:	24 e0       	ldi	r18, 0x04	; 4
     46e:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     470:	de 01       	movw	r26, r28
     472:	15 96       	adiw	r26, 0x05	; 5
     474:	e7 ee       	ldi	r30, 0xE7	; 231
     476:	f1 e0       	ldi	r31, 0x01	; 1
     478:	2a e0       	ldi	r18, 0x0A	; 10
     47a:	01 90       	ld	r0, Z+
     47c:	0d 92       	st	X+, r0
     47e:	21 50       	subi	r18, 0x01	; 1
     480:	e1 f7       	brne	.-8      	; 0x47a <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     482:	2f ef       	ldi	r18, 0xFF	; 255
     484:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     486:	ea ed       	ldi	r30, 0xDA	; 218
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	20 81       	ld	r18, Z
     48c:	20 61       	ori	r18, 0x10	; 16
     48e:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     490:	20 81       	ld	r18, Z
     492:	2f 7e       	andi	r18, 0xEF	; 239
     494:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     496:	06 2f       	mov	r16, r22
     498:	10 e0       	ldi	r17, 0x00	; 0
     49a:	de 01       	movw	r26, r28
     49c:	a0 0f       	add	r26, r16
     49e:	b1 1f       	adc	r27, r17
     4a0:	11 96       	adiw	r26, 0x01	; 1
     4a2:	2c 91       	ld	r18, X
     4a4:	11 97       	sbiw	r26, 0x01	; 1
     4a6:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     4a8:	20 81       	ld	r18, Z
     4aa:	20 62       	ori	r18, 0x20	; 32
     4ac:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     4ae:	20 81       	ld	r18, Z
     4b0:	2f 7d       	andi	r18, 0xDF	; 223
     4b2:	20 83       	st	Z, r18
     4b4:	48 2f       	mov	r20, r24
     4b6:	59 2f       	mov	r21, r25
     4b8:	87 e2       	ldi	r24, 0x27	; 39
     4ba:	40 31       	cpi	r20, 0x10	; 16
     4bc:	58 07       	cpc	r21, r24
     4be:	10 f0       	brcs	.+4      	; 0x4c4 <display_dec+0x7c>
     4c0:	4f e0       	ldi	r20, 0x0F	; 15
     4c2:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     4c4:	ca 01       	movw	r24, r20
     4c6:	96 95       	lsr	r25
     4c8:	87 95       	ror	r24
     4ca:	96 95       	lsr	r25
     4cc:	87 95       	ror	r24
     4ce:	9a 01       	movw	r18, r20
     4d0:	36 95       	lsr	r19
     4d2:	27 95       	ror	r18
     4d4:	28 0f       	add	r18, r24
     4d6:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     4d8:	c9 01       	movw	r24, r18
     4da:	92 95       	swap	r25
     4dc:	82 95       	swap	r24
     4de:	8f 70       	andi	r24, 0x0F	; 15
     4e0:	89 27       	eor	r24, r25
     4e2:	9f 70       	andi	r25, 0x0F	; 15
     4e4:	89 27       	eor	r24, r25
     4e6:	82 0f       	add	r24, r18
     4e8:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     4ea:	29 2f       	mov	r18, r25
     4ec:	33 27       	eor	r19, r19
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     4f2:	96 95       	lsr	r25
     4f4:	87 95       	ror	r24
     4f6:	96 95       	lsr	r25
     4f8:	87 95       	ror	r24
     4fa:	96 95       	lsr	r25
     4fc:	87 95       	ror	r24
	r = number - q2 * 10;
     4fe:	28 2f       	mov	r18, r24
     500:	22 0f       	add	r18, r18
     502:	32 2f       	mov	r19, r18
     504:	33 0f       	add	r19, r19
     506:	33 0f       	add	r19, r19
     508:	23 0f       	add	r18, r19
     50a:	e4 2f       	mov	r30, r20
     50c:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	ea 30       	cpi	r30, 0x0A	; 10
     514:	10 f4       	brcc	.+4      	; 0x51a <display_dec+0xd2>
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	68 0f       	add	r22, r24
     51c:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     51e:	9b 01       	movw	r18, r22
     520:	36 95       	lsr	r19
     522:	27 95       	ror	r18
     524:	36 95       	lsr	r19
     526:	27 95       	ror	r18
     528:	ab 01       	movw	r20, r22
     52a:	56 95       	lsr	r21
     52c:	47 95       	ror	r20
     52e:	24 0f       	add	r18, r20
     530:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     532:	c9 01       	movw	r24, r18
     534:	92 95       	swap	r25
     536:	82 95       	swap	r24
     538:	8f 70       	andi	r24, 0x0F	; 15
     53a:	89 27       	eor	r24, r25
     53c:	9f 70       	andi	r25, 0x0F	; 15
     53e:	89 27       	eor	r24, r25
     540:	82 0f       	add	r24, r18
     542:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     544:	29 2f       	mov	r18, r25
     546:	33 27       	eor	r19, r19
     548:	82 0f       	add	r24, r18
     54a:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     54c:	96 95       	lsr	r25
     54e:	87 95       	ror	r24
     550:	96 95       	lsr	r25
     552:	87 95       	ror	r24
     554:	96 95       	lsr	r25
     556:	87 95       	ror	r24
	r = qa - q3 * 10;
     558:	98 2f       	mov	r25, r24
     55a:	99 0f       	add	r25, r25
     55c:	29 2f       	mov	r18, r25
     55e:	22 0f       	add	r18, r18
     560:	22 0f       	add	r18, r18
     562:	92 0f       	add	r25, r18
     564:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	6a 30       	cpi	r22, 0x0A	; 10
     56a:	08 f4       	brcc	.+2      	; 0x56e <display_dec+0x126>
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	89 0f       	add	r24, r25
	tens_place = rem[r];
     570:	41 ef       	ldi	r20, 0xF1	; 241
     572:	51 e0       	ldi	r21, 0x01	; 1
     574:	da 01       	movw	r26, r20
     576:	a6 0f       	add	r26, r22
     578:	b1 1d       	adc	r27, r1
     57a:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     57c:	28 2f       	mov	r18, r24
     57e:	26 95       	lsr	r18
     580:	26 95       	lsr	r18
     582:	98 2f       	mov	r25, r24
     584:	96 95       	lsr	r25
     586:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     588:	29 2f       	mov	r18, r25
     58a:	22 95       	swap	r18
     58c:	2f 70       	andi	r18, 0x0F	; 15
     58e:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     590:	96 95       	lsr	r25
     592:	96 95       	lsr	r25
     594:	96 95       	lsr	r25
	r = qb - q4 * 10;
     596:	29 2f       	mov	r18, r25
     598:	22 0f       	add	r18, r18
     59a:	62 2f       	mov	r22, r18
     59c:	66 0f       	add	r22, r22
     59e:	66 0f       	add	r22, r22
     5a0:	26 0f       	add	r18, r22
     5a2:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     5a4:	da 01       	movw	r26, r20
     5a6:	a8 0f       	add	r26, r24
     5a8:	b1 1d       	adc	r27, r1
     5aa:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     5ac:	4e 0f       	add	r20, r30
     5ae:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     5b0:	fa 01       	movw	r30, r20
     5b2:	40 81       	ld	r20, Z
     5b4:	40 93 b4 02 	sts	0x02B4, r20
	digit_index[1] = tens_place;
     5b8:	30 93 b5 02 	sts	0x02B5, r19
	digit_index[2] = hunds_place;
     5bc:	20 93 b6 02 	sts	0x02B6, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	8a 30       	cpi	r24, 0x0A	; 10
     5c4:	08 f4       	brcc	.+2      	; 0x5c8 <display_dec+0x180>
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     5ca:	90 93 b7 02 	sts	0x02B7, r25

	cathode_byte = dec[digit_index[place]];
     5ce:	f8 01       	movw	r30, r16
     5d0:	ec 54       	subi	r30, 0x4C	; 76
     5d2:	fd 4f       	sbci	r31, 0xFD	; 253
     5d4:	80 81       	ld	r24, Z
     5d6:	fe 01       	movw	r30, r28
     5d8:	e8 0f       	add	r30, r24
     5da:	f1 1d       	adc	r31, r1
     5dc:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     5de:	90 91 07 03 	lds	r25, 0x0307
     5e2:	92 30       	cpi	r25, 0x02	; 2
     5e4:	11 f4       	brne	.+4      	; 0x5ea <display_dec+0x1a2>
     5e6:	80 62       	ori	r24, 0x20	; 32
     5e8:	03 c0       	rjmp	.+6      	; 0x5f0 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     5ea:	91 30       	cpi	r25, 0x01	; 1
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <display_dec+0x1a8>
     5ee:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     5f0:	80 95       	com	r24
     5f2:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     5f4:	ea ed       	ldi	r30, 0xDA	; 218
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	80 61       	ori	r24, 0x10	; 16
     5fc:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     5fe:	80 81       	ld	r24, Z
     600:	8f 7e       	andi	r24, 0xEF	; 239
     602:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     604:	2e 96       	adiw	r28, 0x0e	; 14
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	08 95       	ret

0000061a <update_display>:

void update_display(uint16_t number, uint8_t type) {
     61a:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     61c:	66 23       	and	r22, r22
     61e:	69 f4       	brne	.+26     	; 0x63a <update_display+0x20>

		
			
		display_dec(number, place);
     620:	c0 91 b8 02 	lds	r28, 0x02B8
     624:	6c 2f       	mov	r22, r28
     626:	0e 94 24 02 	call	0x448	; 0x448 <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     62a:	8c 2f       	mov	r24, r28
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	80 93 b8 02 	sts	0x02B8, r24
     632:	c3 30       	cpi	r28, 0x03	; 3
     634:	11 f4       	brne	.+4      	; 0x63a <update_display+0x20>
		{
			place = 0;
     636:	10 92 b8 02 	sts	0x02B8, r1
		
		
	}
	
	
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     63e:	1f 92       	push	r1
     640:	0f 92       	push	r0
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	8f 93       	push	r24
     64a:	9f 93       	push	r25
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     650:	80 91 7c 03 	lds	r24, 0x037C
     654:	81 50       	subi	r24, 0x01	; 1
     656:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     658:	80 91 7d 03 	lds	r24, 0x037D
     65c:	88 23       	and	r24, r24
     65e:	a1 f4       	brne	.+40     	; 0x688 <__vector_10+0x4a>
		count_finished = FALSE;
     660:	10 92 7a 03 	sts	0x037A, r1
		no_overflow = TRUE;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     66a:	80 93 7d 03 	sts	0x037D, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     66e:	e1 e8       	ldi	r30, 0x81	; 129
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	90 91 7b 03 	lds	r25, 0x037B
     678:	89 2b       	or	r24, r25
     67a:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     67c:	ef e6       	ldi	r30, 0x6F	; 111
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	81 60       	ori	r24, 0x01	; 1
     684:	80 83       	st	Z, r24
     686:	11 c0       	rjmp	.+34     	; 0x6aa <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     688:	e4 e8       	ldi	r30, 0x84	; 132
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	91 81       	ldd	r25, Z+1	; 0x01
     690:	90 93 79 03 	sts	0x0379, r25
     694:	80 93 78 03 	sts	0x0378, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     698:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 93 7a 03 	sts	0x037A, r24
		period_counter = 0;
     6a2:	10 92 7d 03 	sts	0x037D, r1
		TCNT1 = 0; //reset timer/counter 1
     6a6:	11 82       	std	Z+1, r1	; 0x01
     6a8:	10 82       	st	Z, r1
	}
	
	
	
	
}
     6aa:	ff 91       	pop	r31
     6ac:	ef 91       	pop	r30
     6ae:	9f 91       	pop	r25
     6b0:	8f 91       	pop	r24
     6b2:	0f 90       	pop	r0
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	0f 90       	pop	r0
     6b8:	1f 90       	pop	r1
     6ba:	18 95       	reti

000006bc <__vector_9>:



ISR (TIMER1_OVF_vect) {
     6bc:	1f 92       	push	r1
     6be:	0f 92       	push	r0
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	0f 92       	push	r0
     6c4:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     6c6:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	2f 93       	push	r18
     6e0:	3f 93       	push	r19
     6e2:	4f 93       	push	r20
     6e4:	5f 93       	push	r21
     6e6:	6f 93       	push	r22
     6e8:	7f 93       	push	r23
     6ea:	8f 93       	push	r24
     6ec:	9f 93       	push	r25
     6ee:	af 93       	push	r26
     6f0:	bf 93       	push	r27
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     6f6:	80 91 cc 03 	lds	r24, 0x03CC
     6fa:	86 95       	lsr	r24
     6fc:	90 91 cd 03 	lds	r25, 0x03CD
     700:	98 17       	cp	r25, r24
     702:	31 f4       	brne	.+12     	; 0x710 <__vector_7+0x3c>
				
		PORTB &= ~ (1<<ARP_SYNC_LED);
     704:	2f 98       	cbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     706:	80 91 8a 03 	lds	r24, 0x038A
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	09 f4       	brne	.+2      	; 0x710 <__vector_7+0x3c>
     70e:	89 98       	cbi	0x11, 1	; 17
	}	
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     710:	80 91 cd 03 	lds	r24, 0x03CD
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	80 93 cd 03 	sts	0x03CD, r24
     71a:	90 91 cc 03 	lds	r25, 0x03CC
     71e:	89 17       	cp	r24, r25
     720:	71 f4       	brne	.+28     	; 0x73e <__vector_7+0x6a>
		
		system_clock.ppqn_counter = 0;
     722:	10 92 cd 03 	sts	0x03CD, r1
		PORTB |= (1<<ARP_SYNC_LED);
     726:	2f 9a       	sbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) {
     728:	80 91 8a 03 	lds	r24, 0x038A
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	39 f4       	brne	.+14     	; 0x73e <__vector_7+0x6a>
			
			//step arp note here based on range and note sequence from assigner	

			
			if (gate_buffer) { //if there are still notes in gate buffer
     730:	80 91 b0 02 	lds	r24, 0x02B0
     734:	88 23       	and	r24, r24
     736:	19 f0       	breq	.+6      	; 0x73e <__vector_7+0x6a>
				step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
     738:	0e 94 15 01 	call	0x22a	; 0x22a <step_arp_note>
				PORTF |= (1<<GATE);
     73c:	89 9a       	sbi	0x11, 1	; 17
				
			//if (gate_buffer != 0) PORTF |= (1<<GATE); //if arp is running and there are notes to be played, turn gate ON
		}			
	}
	
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	bf 91       	pop	r27
     744:	af 91       	pop	r26
     746:	9f 91       	pop	r25
     748:	8f 91       	pop	r24
     74a:	7f 91       	pop	r23
     74c:	6f 91       	pop	r22
     74e:	5f 91       	pop	r21
     750:	4f 91       	pop	r20
     752:	3f 91       	pop	r19
     754:	2f 91       	pop	r18
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     760:	68 3f       	cpi	r22, 0xF8	; 248
     762:	19 f0       	breq	.+6      	; 0x76a <real_time_event+0xa>
     764:	6a 3f       	cpi	r22, 0xFA	; 250
     766:	c1 f4       	brne	.+48     	; 0x798 <real_time_event+0x38>
     768:	15 c0       	rjmp	.+42     	; 0x794 <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     76a:	80 91 d3 03 	lds	r24, 0x03D3
     76e:	8f 5f       	subi	r24, 0xFF	; 255
     770:	80 93 d3 03 	sts	0x03D3, r24
     774:	90 91 d2 03 	lds	r25, 0x03D2
     778:	89 17       	cp	r24, r25
     77a:	71 f4       	brne	.+28     	; 0x798 <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     77c:	2c 9a       	sbi	0x05, 4	; 5
     77e:	86 e0       	ldi	r24, 0x06	; 6
     780:	8a 95       	dec	r24
     782:	f1 f7       	brne	.-4      	; 0x780 <real_time_event+0x20>
     784:	00 c0       	rjmp	.+0      	; 0x786 <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     786:	85 b1       	in	r24, 0x05	; 5
     788:	80 58       	subi	r24, 0x80	; 128
     78a:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     78c:	10 92 d3 03 	sts	0x03D3, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     790:	2c 98       	cbi	0x05, 4	; 5
     792:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     794:	10 92 d3 03 	sts	0x03D3, r1
     798:	08 95       	ret

0000079a <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     79a:	84 2f       	mov	r24, r20
	
	remove_note(note);
     79c:	0e 94 84 01 	call	0x308	; 0x308 <remove_note>
	gate_buffer--;
     7a0:	80 91 b0 02 	lds	r24, 0x02B0
     7a4:	81 50       	subi	r24, 0x01	; 1
     7a6:	80 93 b0 02 	sts	0x02B0, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     7aa:	88 23       	and	r24, r24
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <note_off_event+0x16>
     7ae:	89 98       	cbi	0x11, 1	; 17
	if (arp.clock_source != OFF) {	//if arp on, update arp sequence
     7b0:	80 91 8a 03 	lds	r24, 0x038A
     7b4:	82 30       	cpi	r24, 0x02	; 2
     7b6:	71 f0       	breq	.+28     	; 0x7d4 <note_off_event+0x3a>
		//gate_buffer--;
		if (gate_buffer == 0) {
     7b8:	80 91 b0 02 	lds	r24, 0x02B0
     7bc:	88 23       	and	r24, r24
     7be:	41 f4       	brne	.+16     	; 0x7d0 <note_off_event+0x36>
			arp.current_note = arp.previous_note; //handle last note prevservation for release phase
     7c0:	80 91 88 03 	lds	r24, 0x0388
     7c4:	80 93 89 03 	sts	0x0389, r24
			arp.step_position = 0;
     7c8:	10 92 86 03 	sts	0x0386, r1
			arp.direction = UP;
     7cc:	10 92 87 03 	sts	0x0387, r1
		}			
		update_arp_sequence();
     7d0:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     7d4:	08 95       	ret

000007d6 <note_on_event>:





void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     7d6:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     7d8:	90 91 ff 02 	lds	r25, 0x02FF
     7dc:	90 ff       	sbrs	r25, 0
     7de:	06 c0       	rjmp	.+12     	; 0x7ec <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     7e0:	2c 9a       	sbi	0x05, 4	; 5
     7e2:	96 e0       	ldi	r25, 0x06	; 6
     7e4:	9a 95       	dec	r25
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <note_on_event+0xe>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     7ea:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     7ec:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     7f0:	22 23       	and	r18, r18
     7f2:	59 f4       	brne	.+22     	; 0x80a <note_on_event+0x34>
		remove_note(note);
     7f4:	0e 94 84 01 	call	0x308	; 0x308 <remove_note>
		gate_buffer--;
     7f8:	80 91 b0 02 	lds	r24, 0x02B0
     7fc:	81 50       	subi	r24, 0x01	; 1
     7fe:	80 93 b0 02 	sts	0x02B0, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     802:	88 23       	and	r24, r24
     804:	91 f4       	brne	.+36     	; 0x82a <note_on_event+0x54>
     806:	89 98       	cbi	0x11, 1	; 17
     808:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);
     80a:	62 2f       	mov	r22, r18
     80c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <new_note>
		
		gate_buffer++;
     810:	80 91 b0 02 	lds	r24, 0x02B0
     814:	8f 5f       	subi	r24, 0xFF	; 255
     816:	80 93 b0 02 	sts	0x02B0, r24
		if (arp.clock_source == OFF) { //if arp is off, handle gate
     81a:	80 91 8a 03 	lds	r24, 0x038A
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	11 f4       	brne	.+4      	; 0x826 <note_on_event+0x50>
			//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
			//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
			//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
			//could implement this with timers. MIDI Implant is 0.5 ms. Could maybe use Timer1 here to generate 0.3-0.5 ms gate retrigger
			
			PORTF |= (1<<GATE); //if arp is OFF then turn on gate. Otherwise arpeggiator handles GATE
     822:	89 9a       	sbi	0x11, 1	; 17
     824:	08 95       	ret
		} else {
			
			update_arp_sequence();
     826:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     82a:	08 95       	ret

0000082c <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     82c:	87 e2       	ldi	r24, 0x27	; 39
     82e:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     832:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     836:	88 e9       	ldi	r24, 0x98	; 152
     838:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     83c:	08 95       	ret

0000083e <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     83e:	1f 92       	push	r1
     840:	0f 92       	push	r0
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	0f 92       	push	r0
     846:	11 24       	eor	r1, r1
     848:	2f 93       	push	r18
     84a:	3f 93       	push	r19
     84c:	4f 93       	push	r20
     84e:	5f 93       	push	r21
     850:	6f 93       	push	r22
     852:	7f 93       	push	r23
     854:	8f 93       	push	r24
     856:	9f 93       	push	r25
     858:	af 93       	push	r26
     85a:	bf 93       	push	r27
     85c:	ef 93       	push	r30
     85e:	ff 93       	push	r31
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	0f 92       	push	r0
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     86a:	80 91 c6 00 	lds	r24, 0x00C6
     86e:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     870:	88 ed       	ldi	r24, 0xD8	; 216
     872:	93 e0       	ldi	r25, 0x03	; 3
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	ae 01       	movw	r20, r28
     878:	4f 5f       	subi	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e 94 ae 19 	call	0x335c	; 0x335c <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     880:	0f 90       	pop	r0
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     8a8:	c0 e8       	ldi	r28, 0x80	; 128
     8aa:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     8ac:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     8ae:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     8b0:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     8b2:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     8b4:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     8b6:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     8b8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     8bc:	a9 ed       	ldi	r26, 0xD9	; 217
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	8c 91       	ld	r24, X
     8c2:	80 6c       	ori	r24, 0xC0	; 192
     8c4:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     8c6:	ea ed       	ldi	r30, 0xDA	; 218
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	80 6c       	ori	r24, 0xC0	; 192
     8ce:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     8d0:	81 b1       	in	r24, 0x01	; 1
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     8d6:	92 b1       	in	r25, 0x02	; 2
     8d8:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     8da:	8c 91       	ld	r24, X
     8dc:	80 63       	ori	r24, 0x30	; 48
     8de:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     8e0:	80 81       	ld	r24, Z
     8e2:	8f 7c       	andi	r24, 0xCF	; 207
     8e4:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     8e6:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     8e8:	ec ed       	ldi	r30, 0xDC	; 220
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	80 62       	ori	r24, 0x20	; 32
     8f0:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     8f2:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     8f4:	ed ed       	ldi	r30, 0xDD	; 221
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	80 62       	ori	r24, 0x20	; 32
     8fc:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     8fe:	80 81       	ld	r24, Z
     900:	8f 7d       	andi	r24, 0xDF	; 223
     902:	80 83       	st	Z, r24
	DATA_BUS = 0;
     904:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     906:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     90a:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     90e:	0e 94 0b 02 	call	0x416	; 0x416 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     912:	c8 ed       	ldi	r28, 0xD8	; 216
     914:	d3 e0       	ldi	r29, 0x03	; 3
     916:	ce 01       	movw	r24, r28
     918:	0e 94 7d 19 	call	0x32fa	; 0x32fa <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     91c:	ce 01       	movw	r24, r28
     91e:	6b ee       	ldi	r22, 0xEB	; 235
     920:	73 e0       	ldi	r23, 0x03	; 3
     922:	0e 94 45 19 	call	0x328a	; 0x328a <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     926:	ce 01       	movw	r24, r28
     928:	6d ec       	ldi	r22, 0xCD	; 205
     92a:	73 e0       	ldi	r23, 0x03	; 3
     92c:	0e 94 49 19 	call	0x3292	; 0x3292 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     930:	ce 01       	movw	r24, r28
     932:	60 eb       	ldi	r22, 0xB0	; 176
     934:	73 e0       	ldi	r23, 0x03	; 3
     936:	0e 94 69 19 	call	0x32d2	; 0x32d2 <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     93a:	0e 94 16 04 	call	0x82c	; 0x82c <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     93e:	0e 94 cc 07 	call	0xf98	; 0xf98 <update_spi>
	
	
	current_patch.number = 1;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     948:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     94a:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	0e 94 45 0a 	call	0x148a	; 0x148a <load_patch>
	
	setup_system_clock();
     954:	0e 94 c1 01 	call	0x382	; 0x382 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     958:	88 e1       	ldi	r24, 0x18	; 24
     95a:	80 93 cc 03 	sts	0x03CC, r24
	arp.step_position = 0; //initialize step position
     95e:	10 92 86 03 	sts	0x0386, r1

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     962:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     964:	0f 2e       	mov	r0, r31
     966:	f0 e8       	ldi	r31, 0x80	; 128
     968:	ef 2e       	mov	r14, r31
     96a:	f3 e0       	ldi	r31, 0x03	; 3
     96c:	ff 2e       	mov	r15, r31
     96e:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     970:	0f 2e       	mov	r0, r31
     972:	f7 e0       	ldi	r31, 0x07	; 7
     974:	cf 2e       	mov	r12, r31
     976:	f3 e0       	ldi	r31, 0x03	; 3
     978:	df 2e       	mov	r13, r31
     97a:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     97c:	bb 24       	eor	r11, r11
     97e:	68 94       	set
     980:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     982:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     984:	c8 01       	movw	r24, r16
     986:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     98a:	80 91 fd 01 	lds	r24, 0x01FD
     98e:	90 91 fe 01 	lds	r25, 0x01FE
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	0e 94 0d 03 	call	0x61a	; 0x61a <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     998:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <scan_pots>
		update_control_voltages();
     99c:	0e 94 88 05 	call	0xb10	; 0xb10 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     9a0:	80 91 b9 02 	lds	r24, 0x02B9
     9a4:	98 2f       	mov	r25, r24
     9a6:	9f 5f       	subi	r25, 0xFF	; 255
     9a8:	90 93 b9 02 	sts	0x02B9, r25
     9ac:	85 30       	cpi	r24, 0x05	; 5
     9ae:	51 f7       	brne	.-44     	; 0x984 <main+0xdc>
		{
			switch_timer = 0;
     9b0:	10 92 b9 02 	sts	0x02B9, r1
			switch_press = 0; //reset global switch press flag
     9b4:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     9b8:	f7 01       	movw	r30, r14
     9ba:	c0 81       	ld	r28, Z
     9bc:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <read_switch_port>
     9c0:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     9c2:	f6 01       	movw	r30, r12
     9c4:	90 81       	ld	r25, Z
     9c6:	91 30       	cpi	r25, 0x01	; 1
     9c8:	11 f4       	brne	.+4      	; 0x9ce <main+0x126>
     9ca:	cd 2f       	mov	r28, r29
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <main+0x128>
     9ce:	c0 e0       	ldi	r28, 0x00	; 0
     9d0:	c8 2b       	or	r28, r24
     9d2:	f7 01       	movw	r30, r14
     9d4:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     9d6:	0e 94 cc 07 	call	0xf98	; 0xf98 <update_spi>
			if (switch_press) { 
     9da:	80 91 c1 02 	lds	r24, 0x02C1
     9de:	88 23       	and	r24, r24
     9e0:	39 f0       	breq	.+14     	; 0x9f0 <main+0x148>
				update_patch();
     9e2:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     9e6:	f6 01       	movw	r30, r12
     9e8:	80 81       	ld	r24, Z
     9ea:	88 23       	and	r24, r24
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <main+0x148>
     9ee:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     9f0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <update_patch_programmer>
     9f4:	c7 cf       	rjmp	.-114    	; 0x984 <main+0xdc>

000009f6 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     9f6:	bf 92       	push	r11
     9f8:	cf 92       	push	r12
     9fa:	df 92       	push	r13
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	c0 e0       	ldi	r28, 0x00	; 0
     a0a:	d1 e0       	ldi	r29, 0x01	; 1
     a0c:	02 ec       	ldi	r16, 0xC2	; 194
     a0e:	12 e0       	ldi	r17, 0x02	; 2
     a10:	0f 2e       	mov	r0, r31
     a12:	fc e3       	ldi	r31, 0x3C	; 60
     a14:	cf 2e       	mov	r12, r31
     a16:	dd 24       	eor	r13, r13
     a18:	f0 2d       	mov	r31, r0
     a1a:	cc 0e       	add	r12, r28
     a1c:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     a1e:	0f 2e       	mov	r0, r31
     a20:	f7 e0       	ldi	r31, 0x07	; 7
     a22:	ef 2e       	mov	r14, r31
     a24:	f3 e0       	ldi	r31, 0x03	; 3
     a26:	ff 2e       	mov	r15, r31
     a28:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     a2a:	bb 24       	eor	r11, r11
     a2c:	68 94       	set
     a2e:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     a30:	88 81       	ld	r24, Y
     a32:	99 81       	ldd	r25, Y+1	; 0x01
     a34:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     a38:	90 93 bc 02 	sts	0x02BC, r25
     a3c:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     a40:	e8 81       	ld	r30, Y
     a42:	f9 81       	ldd	r31, Y+1	; 0x01
     a44:	40 81       	ld	r20, Z
     a46:	21 81       	ldd	r18, Z+1	; 0x01
     a48:	52 2f       	mov	r21, r18
     a4a:	53 70       	andi	r21, 0x03	; 3
     a4c:	84 1b       	sub	r24, r20
     a4e:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     a50:	95 95       	asr	r25
     a52:	87 95       	ror	r24
     a54:	95 95       	asr	r25
     a56:	87 95       	ror	r24
     a58:	84 0f       	add	r24, r20
     a5a:	95 1f       	adc	r25, r21
     a5c:	80 83       	st	Z, r24
     a5e:	89 2f       	mov	r24, r25
     a60:	83 70       	andi	r24, 0x03	; 3
     a62:	2c 7f       	andi	r18, 0xFC	; 252
     a64:	28 2b       	or	r18, r24
     a66:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     a68:	e9 91       	ld	r30, Y+
     a6a:	f9 91       	ld	r31, Y+
     a6c:	92 81       	ldd	r25, Z+2	; 0x02
     a6e:	20 81       	ld	r18, Z
     a70:	81 81       	ldd	r24, Z+1	; 0x01
     a72:	38 2f       	mov	r19, r24
     a74:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     a76:	d7 01       	movw	r26, r14
     a78:	8c 91       	ld	r24, X
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	19 f0       	breq	.+6      	; 0xa84 <scan_pots+0x8e>
     a7e:	83 81       	ldd	r24, Z+3	; 0x03
     a80:	88 23       	and	r24, r24
     a82:	24 f0       	brlt	.+8      	; 0xa8c <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     a84:	f8 01       	movw	r30, r16
     a86:	31 83       	std	Z+1, r19	; 0x01
     a88:	20 83       	st	Z, r18
     a8a:	14 c0       	rjmp	.+40     	; 0xab4 <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     a8c:	49 2f       	mov	r20, r25
     a8e:	43 50       	subi	r20, 0x03	; 3
     a90:	c9 01       	movw	r24, r18
     a92:	95 95       	asr	r25
     a94:	87 95       	ror	r24
     a96:	95 95       	asr	r25
     a98:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     a9a:	94 2f       	mov	r25, r20
     a9c:	98 1b       	sub	r25, r24
     a9e:	9a 3f       	cpi	r25, 0xFA	; 250
     aa0:	48 f4       	brcc	.+18     	; 0xab4 <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     aa2:	d8 01       	movw	r26, r16
     aa4:	11 96       	adiw	r26, 0x01	; 1
     aa6:	3c 93       	st	X, r19
     aa8:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     aaa:	83 81       	ldd	r24, Z+3	; 0x03
     aac:	8f 77       	andi	r24, 0x7F	; 127
     aae:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     ab0:	f7 01       	movw	r30, r14
     ab2:	b0 82       	st	Z, r11
     ab4:	0e 5f       	subi	r16, 0xFE	; 254
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     ab8:	cc 15       	cp	r28, r12
     aba:	dd 05       	cpc	r29, r13
     abc:	09 f0       	breq	.+2      	; 0xac0 <scan_pots+0xca>
     abe:	b8 cf       	rjmp	.-144    	; 0xa30 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     ac0:	8c e7       	ldi	r24, 0x7C	; 124
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     ac8:	90 93 bc 02 	sts	0x02BC, r25
     acc:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     ad0:	20 91 7c 01 	lds	r18, 0x017C
     ad4:	40 91 7d 01 	lds	r20, 0x017D
     ad8:	34 2f       	mov	r19, r20
     ada:	33 70       	andi	r19, 0x03	; 3
     adc:	82 1b       	sub	r24, r18
     ade:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     ae0:	95 95       	asr	r25
     ae2:	87 95       	ror	r24
     ae4:	95 95       	asr	r25
     ae6:	87 95       	ror	r24
     ae8:	28 0f       	add	r18, r24
     aea:	39 1f       	adc	r19, r25
     aec:	20 93 7c 01 	sts	0x017C, r18
     af0:	83 2f       	mov	r24, r19
     af2:	83 70       	andi	r24, 0x03	; 3
     af4:	4c 7f       	andi	r20, 0xFC	; 252
     af6:	48 2b       	or	r20, r24
     af8:	40 93 7d 01 	sts	0x017D, r20
	
}
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	08 95       	ret

00000b10 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     b14:	60 91 c2 02 	lds	r22, 0x02C2
     b18:	70 91 c3 02 	lds	r23, 0x02C3
     b1c:	62 95       	swap	r22
     b1e:	72 95       	swap	r23
     b20:	70 7f       	andi	r23, 0xF0	; 240
     b22:	76 27       	eor	r23, r22
     b24:	60 7f       	andi	r22, 0xF0	; 240
     b26:	76 27       	eor	r23, r22
     b28:	84 ee       	ldi	r24, 0xE4	; 228
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     b30:	60 91 c4 02 	lds	r22, 0x02C4
     b34:	70 91 c5 02 	lds	r23, 0x02C5
     b38:	62 95       	swap	r22
     b3a:	72 95       	swap	r23
     b3c:	70 7f       	andi	r23, 0xF0	; 240
     b3e:	76 27       	eor	r23, r22
     b40:	60 7f       	andi	r22, 0xF0	; 240
     b42:	76 27       	eor	r23, r22
     b44:	83 ee       	ldi	r24, 0xE3	; 227
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     b4c:	60 91 c6 02 	lds	r22, 0x02C6
     b50:	70 91 c7 02 	lds	r23, 0x02C7
     b54:	66 0f       	add	r22, r22
     b56:	77 1f       	adc	r23, r23
     b58:	66 0f       	add	r22, r22
     b5a:	77 1f       	adc	r23, r23
     b5c:	66 0f       	add	r22, r22
     b5e:	77 1f       	adc	r23, r23
     b60:	82 ee       	ldi	r24, 0xE2	; 226
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     b68:	60 91 c8 02 	lds	r22, 0x02C8
     b6c:	70 91 c9 02 	lds	r23, 0x02C9
     b70:	62 95       	swap	r22
     b72:	72 95       	swap	r23
     b74:	70 7f       	andi	r23, 0xF0	; 240
     b76:	76 27       	eor	r23, r22
     b78:	60 7f       	andi	r22, 0xF0	; 240
     b7a:	76 27       	eor	r23, r22
     b7c:	83 eb       	ldi	r24, 0xB3	; 179
     b7e:	92 e0       	ldi	r25, 0x02	; 2
     b80:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     b84:	60 91 ca 02 	lds	r22, 0x02CA
     b88:	70 91 cb 02 	lds	r23, 0x02CB
     b8c:	66 0f       	add	r22, r22
     b8e:	77 1f       	adc	r23, r23
     b90:	66 0f       	add	r22, r22
     b92:	77 1f       	adc	r23, r23
     b94:	66 0f       	add	r22, r22
     b96:	77 1f       	adc	r23, r23
     b98:	81 ee       	ldi	r24, 0xE1	; 225
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     ba0:	60 91 cc 02 	lds	r22, 0x02CC
     ba4:	70 91 cd 02 	lds	r23, 0x02CD
     ba8:	62 95       	swap	r22
     baa:	72 95       	swap	r23
     bac:	70 7f       	andi	r23, 0xF0	; 240
     bae:	76 27       	eor	r23, r22
     bb0:	60 7f       	andi	r22, 0xF0	; 240
     bb2:	76 27       	eor	r23, r22
     bb4:	80 ee       	ldi	r24, 0xE0	; 224
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     bbc:	60 91 ce 02 	lds	r22, 0x02CE
     bc0:	70 91 cf 02 	lds	r23, 0x02CF
     bc4:	62 95       	swap	r22
     bc6:	72 95       	swap	r23
     bc8:	70 7f       	andi	r23, 0xF0	; 240
     bca:	76 27       	eor	r23, r22
     bcc:	60 7f       	andi	r22, 0xF0	; 240
     bce:	76 27       	eor	r23, r22
     bd0:	8f ed       	ldi	r24, 0xDF	; 223
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     bd8:	60 91 d0 02 	lds	r22, 0x02D0
     bdc:	70 91 d1 02 	lds	r23, 0x02D1
     be0:	62 95       	swap	r22
     be2:	72 95       	swap	r23
     be4:	70 7f       	andi	r23, 0xF0	; 240
     be6:	76 27       	eor	r23, r22
     be8:	60 7f       	andi	r22, 0xF0	; 240
     bea:	76 27       	eor	r23, r22
     bec:	8e ed       	ldi	r24, 0xDE	; 222
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     bf4:	80 91 d4 02 	lds	r24, 0x02D4
     bf8:	90 91 d5 02 	lds	r25, 0x02D5
     bfc:	c0 e0       	ldi	r28, 0x00	; 0
     bfe:	d2 e0       	ldi	r29, 0x02	; 2
     c00:	c8 1b       	sub	r28, r24
     c02:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     c04:	60 91 73 03 	lds	r22, 0x0373
     c08:	70 91 74 03 	lds	r23, 0x0374
     c0c:	60 50       	subi	r22, 0x00	; 0
     c0e:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     c10:	80 91 d2 02 	lds	r24, 0x02D2
     c14:	90 91 d3 02 	lds	r25, 0x02D3
     c18:	68 1b       	sub	r22, r24
     c1a:	79 0b       	sbc	r23, r25
     c1c:	6c 0f       	add	r22, r28
     c1e:	7d 1f       	adc	r23, r29
     c20:	8d ed       	ldi	r24, 0xDD	; 221
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     c28:	60 91 75 03 	lds	r22, 0x0375
     c2c:	70 91 76 03 	lds	r23, 0x0376
     c30:	6c 0f       	add	r22, r28
     c32:	7d 1f       	adc	r23, r29
     c34:	8c ed       	ldi	r24, 0xDC	; 220
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     c3c:	60 91 d6 02 	lds	r22, 0x02D6
     c40:	70 91 d7 02 	lds	r23, 0x02D7
     c44:	62 95       	swap	r22
     c46:	72 95       	swap	r23
     c48:	70 7f       	andi	r23, 0xF0	; 240
     c4a:	76 27       	eor	r23, r22
     c4c:	60 7f       	andi	r22, 0xF0	; 240
     c4e:	76 27       	eor	r23, r22
     c50:	8b ed       	ldi	r24, 0xDB	; 219
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     c58:	60 91 da 02 	lds	r22, 0x02DA
     c5c:	70 91 db 02 	lds	r23, 0x02DB
     c60:	62 95       	swap	r22
     c62:	72 95       	swap	r23
     c64:	70 7f       	andi	r23, 0xF0	; 240
     c66:	76 27       	eor	r23, r22
     c68:	60 7f       	andi	r22, 0xF0	; 240
     c6a:	76 27       	eor	r23, r22
     c6c:	8a ed       	ldi	r24, 0xDA	; 218
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     c74:	60 91 dc 02 	lds	r22, 0x02DC
     c78:	70 91 dd 02 	lds	r23, 0x02DD
     c7c:	62 95       	swap	r22
     c7e:	72 95       	swap	r23
     c80:	70 7f       	andi	r23, 0xF0	; 240
     c82:	76 27       	eor	r23, r22
     c84:	60 7f       	andi	r22, 0xF0	; 240
     c86:	76 27       	eor	r23, r22
     c88:	89 ed       	ldi	r24, 0xD9	; 217
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     c90:	60 91 7c 01 	lds	r22, 0x017C
     c94:	80 91 7d 01 	lds	r24, 0x017D
     c98:	78 2f       	mov	r23, r24
     c9a:	73 70       	andi	r23, 0x03	; 3
     c9c:	62 95       	swap	r22
     c9e:	72 95       	swap	r23
     ca0:	70 7f       	andi	r23, 0xF0	; 240
     ca2:	76 27       	eor	r23, r22
     ca4:	60 7f       	andi	r22, 0xF0	; 240
     ca6:	76 27       	eor	r23, r22
     ca8:	88 ed       	ldi	r24, 0xD8	; 216
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     cb0:	60 91 de 02 	lds	r22, 0x02DE
     cb4:	70 91 df 02 	lds	r23, 0x02DF
     cb8:	62 95       	swap	r22
     cba:	72 95       	swap	r23
     cbc:	70 7f       	andi	r23, 0xF0	; 240
     cbe:	76 27       	eor	r23, r22
     cc0:	60 7f       	andi	r22, 0xF0	; 240
     cc2:	76 27       	eor	r23, r22
     cc4:	87 ed       	ldi	r24, 0xD7	; 215
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     ccc:	60 91 e0 02 	lds	r22, 0x02E0
     cd0:	70 91 e1 02 	lds	r23, 0x02E1
     cd4:	62 95       	swap	r22
     cd6:	72 95       	swap	r23
     cd8:	70 7f       	andi	r23, 0xF0	; 240
     cda:	76 27       	eor	r23, r22
     cdc:	60 7f       	andi	r22, 0xF0	; 240
     cde:	76 27       	eor	r23, r22
     ce0:	86 ed       	ldi	r24, 0xD6	; 214
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     ce8:	60 91 e2 02 	lds	r22, 0x02E2
     cec:	70 91 e3 02 	lds	r23, 0x02E3
     cf0:	62 95       	swap	r22
     cf2:	72 95       	swap	r23
     cf4:	70 7f       	andi	r23, 0xF0	; 240
     cf6:	76 27       	eor	r23, r22
     cf8:	60 7f       	andi	r22, 0xF0	; 240
     cfa:	76 27       	eor	r23, r22
     cfc:	85 ed       	ldi	r24, 0xD5	; 213
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     d04:	0e 94 62 01 	call	0x2c4	; 0x2c4 <get_current_note>
     d08:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     d0a:	88 30       	cpi	r24, 0x08	; 8
     d0c:	08 f4       	brcc	.+2      	; 0xd10 <update_control_voltages+0x200>
     d0e:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = current_patch.number + 100*(arp.sequence[arp.step_position].note); //100*note;
	//value_to_display = arp.sequence[arp.step_position].note;
	//uint8_t arp_note = arp.sequence[arp.step_position].note;
	//if (arp_note == EMPTY) arp_note = 0;
	value_to_display = current_patch.number + 100*arp.step_position;
     d10:	60 91 03 03 	lds	r22, 0x0303
     d14:	40 91 86 03 	lds	r20, 0x0386
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	24 e6       	ldi	r18, 0x64	; 100
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	42 9f       	mul	r20, r18
     d20:	c0 01       	movw	r24, r0
     d22:	43 9f       	mul	r20, r19
     d24:	90 0d       	add	r25, r0
     d26:	52 9f       	mul	r21, r18
     d28:	90 0d       	add	r25, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	86 0f       	add	r24, r22
     d2e:	91 1d       	adc	r25, r1
     d30:	90 93 fe 01 	sts	0x01FE, r25
     d34:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     d38:	8c 2f       	mov	r24, r28
     d3a:	88 50       	subi	r24, 0x08	; 8
     d3c:	6f e0       	ldi	r22, 0x0F	; 15
     d3e:	73 e0       	ldi	r23, 0x03	; 3
     d40:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     d44:	bc 01       	movw	r22, r24
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	20 91 e6 02 	lds	r18, 0x02E6
     d4e:	30 91 e7 02 	lds	r19, 0x02E7
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__mulsi3>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	07 2e       	mov	r0, r23
     d60:	7a e0       	ldi	r23, 0x0A	; 10
     d62:	b6 95       	lsr	r27
     d64:	a7 95       	ror	r26
     d66:	97 95       	ror	r25
     d68:	87 95       	ror	r24
     d6a:	7a 95       	dec	r23
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <update_control_voltages+0x252>
     d6e:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     d70:	60 91 e4 02 	lds	r22, 0x02E4
     d74:	70 91 e5 02 	lds	r23, 0x02E5
     d78:	62 95       	swap	r22
     d7a:	72 95       	swap	r23
     d7c:	70 7f       	andi	r23, 0xF0	; 240
     d7e:	76 27       	eor	r23, r22
     d80:	60 7f       	andi	r22, 0xF0	; 240
     d82:	76 27       	eor	r23, r22
     d84:	86 0f       	add	r24, r22
     d86:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     d88:	bc 01       	movw	r22, r24
     d8a:	80 e4       	ldi	r24, 0x40	; 64
     d8c:	60 30       	cpi	r22, 0x00	; 0
     d8e:	78 07       	cpc	r23, r24
     d90:	10 f0       	brcs	.+4      	; 0xd96 <update_control_voltages+0x286>
     d92:	6f ef       	ldi	r22, 0xFF	; 255
     d94:	7f e3       	ldi	r23, 0x3F	; 63
     d96:	84 ed       	ldi	r24, 0xD4	; 212
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     d9e:	60 91 e8 02 	lds	r22, 0x02E8
     da2:	70 91 e9 02 	lds	r23, 0x02E9
     da6:	62 95       	swap	r22
     da8:	72 95       	swap	r23
     daa:	70 7f       	andi	r23, 0xF0	; 240
     dac:	76 27       	eor	r23, r22
     dae:	60 7f       	andi	r22, 0xF0	; 240
     db0:	76 27       	eor	r23, r22
     db2:	82 ed       	ldi	r24, 0xD2	; 210
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     dba:	60 91 ea 02 	lds	r22, 0x02EA
     dbe:	70 91 eb 02 	lds	r23, 0x02EB
     dc2:	62 95       	swap	r22
     dc4:	72 95       	swap	r23
     dc6:	70 7f       	andi	r23, 0xF0	; 240
     dc8:	76 27       	eor	r23, r22
     dca:	60 7f       	andi	r22, 0xF0	; 240
     dcc:	76 27       	eor	r23, r22
     dce:	81 ed       	ldi	r24, 0xD1	; 209
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     dd6:	60 91 ec 02 	lds	r22, 0x02EC
     dda:	70 91 ed 02 	lds	r23, 0x02ED
     dde:	62 95       	swap	r22
     de0:	72 95       	swap	r23
     de2:	70 7f       	andi	r23, 0xF0	; 240
     de4:	76 27       	eor	r23, r22
     de6:	60 7f       	andi	r22, 0xF0	; 240
     de8:	76 27       	eor	r23, r22
     dea:	80 ed       	ldi	r24, 0xD0	; 208
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     df2:	60 91 ee 02 	lds	r22, 0x02EE
     df6:	70 91 ef 02 	lds	r23, 0x02EF
     dfa:	62 95       	swap	r22
     dfc:	72 95       	swap	r23
     dfe:	70 7f       	andi	r23, 0xF0	; 240
     e00:	76 27       	eor	r23, r22
     e02:	60 7f       	andi	r22, 0xF0	; 240
     e04:	76 27       	eor	r23, r22
     e06:	8f ec       	ldi	r24, 0xCF	; 207
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     e0e:	60 91 f0 02 	lds	r22, 0x02F0
     e12:	70 91 f1 02 	lds	r23, 0x02F1
     e16:	62 95       	swap	r22
     e18:	72 95       	swap	r23
     e1a:	70 7f       	andi	r23, 0xF0	; 240
     e1c:	76 27       	eor	r23, r22
     e1e:	60 7f       	andi	r22, 0xF0	; 240
     e20:	76 27       	eor	r23, r22
     e22:	8e ec       	ldi	r24, 0xCE	; 206
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     e2a:	60 91 f2 02 	lds	r22, 0x02F2
     e2e:	70 91 f3 02 	lds	r23, 0x02F3
     e32:	62 95       	swap	r22
     e34:	72 95       	swap	r23
     e36:	70 7f       	andi	r23, 0xF0	; 240
     e38:	76 27       	eor	r23, r22
     e3a:	60 7f       	andi	r22, 0xF0	; 240
     e3c:	76 27       	eor	r23, r22
     e3e:	8d ec       	ldi	r24, 0xCD	; 205
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     e46:	60 91 f4 02 	lds	r22, 0x02F4
     e4a:	70 91 f5 02 	lds	r23, 0x02F5
     e4e:	62 95       	swap	r22
     e50:	72 95       	swap	r23
     e52:	70 7f       	andi	r23, 0xF0	; 240
     e54:	76 27       	eor	r23, r22
     e56:	60 7f       	andi	r22, 0xF0	; 240
     e58:	76 27       	eor	r23, r22
     e5a:	8c ec       	ldi	r24, 0xCC	; 204
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     e62:	60 91 f8 02 	lds	r22, 0x02F8
     e66:	70 91 f9 02 	lds	r23, 0x02F9
     e6a:	62 95       	swap	r22
     e6c:	72 95       	swap	r23
     e6e:	70 7f       	andi	r23, 0xF0	; 240
     e70:	76 27       	eor	r23, r22
     e72:	60 7f       	andi	r22, 0xF0	; 240
     e74:	76 27       	eor	r23, r22
     e76:	8a ec       	ldi	r24, 0xCA	; 202
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     e7e:	60 91 f6 02 	lds	r22, 0x02F6
     e82:	70 91 f7 02 	lds	r23, 0x02F7
     e86:	62 95       	swap	r22
     e88:	72 95       	swap	r23
     e8a:	70 7f       	andi	r23, 0xF0	; 240
     e8c:	76 27       	eor	r23, r22
     e8e:	60 7f       	andi	r22, 0xF0	; 240
     e90:	76 27       	eor	r23, r22
     e92:	8b ec       	ldi	r24, 0xCB	; 203
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     e9a:	60 91 fc 02 	lds	r22, 0x02FC
     e9e:	70 91 fd 02 	lds	r23, 0x02FD
     ea2:	62 95       	swap	r22
     ea4:	72 95       	swap	r23
     ea6:	70 7f       	andi	r23, 0xF0	; 240
     ea8:	76 27       	eor	r23, r22
     eaa:	60 7f       	andi	r22, 0xF0	; 240
     eac:	76 27       	eor	r23, r22
     eae:	88 ec       	ldi	r24, 0xC8	; 200
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     eb6:	60 91 fa 02 	lds	r22, 0x02FA
     eba:	70 91 fb 02 	lds	r23, 0x02FB
     ebe:	62 95       	swap	r22
     ec0:	72 95       	swap	r23
     ec2:	70 7f       	andi	r23, 0xF0	; 240
     ec4:	76 27       	eor	r23, r22
     ec6:	60 7f       	andi	r22, 0xF0	; 240
     ec8:	76 27       	eor	r23, r22
     eca:	89 ec       	ldi	r24, 0xC9	; 201
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     ed2:	8c 2f       	mov	r24, r28
     ed4:	6f e0       	ldi	r22, 0x0F	; 15
     ed6:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     eda:	61 e5       	ldi	r22, 0x51	; 81
     edc:	73 e0       	ldi	r23, 0x03	; 3
     ede:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <interpolate_pitch_cv>
     ee2:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     ee4:	86 ee       	ldi	r24, 0xE6	; 230
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     eec:	8c 2f       	mov	r24, r28
     eee:	60 ef       	ldi	r22, 0xF0	; 240
     ef0:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     ef4:	6f e2       	ldi	r22, 0x2F	; 47
     ef6:	73 e0       	ldi	r23, 0x03	; 3
     ef8:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <interpolate_pitch_cv>
     efc:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     efe:	85 ee       	ldi	r24, 0xE5	; 229
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     f06:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     f08:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     f0a:	20 91 88 01 	lds	r18, 0x0188
     f0e:	80 91 89 01 	lds	r24, 0x0189
     f12:	38 2f       	mov	r19, r24
     f14:	33 70       	andi	r19, 0x03	; 3
     f16:	83 ef       	ldi	r24, 0xF3	; 243
     f18:	94 e0       	ldi	r25, 0x04	; 4
     f1a:	82 1b       	sub	r24, r18
     f1c:	93 0b       	sbc	r25, r19
     f1e:	90 93 cf 03 	sts	0x03CF, r25
     f22:	80 93 ce 03 	sts	0x03CE, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     f26:	20 91 d0 03 	lds	r18, 0x03D0
     f2a:	30 91 d1 03 	lds	r19, 0x03D1
     f2e:	82 17       	cp	r24, r18
     f30:	93 07       	cpc	r25, r19
     f32:	11 f0       	breq	.+4      	; 0xf38 <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
     f34:	0e 94 c8 01 	call	0x390	; 0x390 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     f38:	80 91 ce 03 	lds	r24, 0x03CE
     f3c:	90 91 cf 03 	lds	r25, 0x03CF
     f40:	90 93 d1 03 	sts	0x03D1, r25
     f44:	80 93 d0 03 	sts	0x03D0, r24
	
}			
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     f4e:	84 b1       	in	r24, 0x04	; 4
     f50:	87 62       	ori	r24, 0x27	; 39
     f52:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     f54:	ec ed       	ldi	r30, 0xDC	; 220
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8c 65       	ori	r24, 0x5C	; 92
     f5c:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     f5e:	85 b1       	in	r24, 0x05	; 5
     f60:	89 7d       	andi	r24, 0xD9	; 217
     f62:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     f64:	ed ed       	ldi	r30, 0xDD	; 221
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	83 7f       	andi	r24, 0xF3	; 243
     f6c:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     f6e:	80 e5       	ldi	r24, 0x50	; 80
     f70:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     f72:	80 81       	ld	r24, Z
     f74:	87 7f       	andi	r24, 0xF7	; 247
     f76:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     f78:	80 81       	ld	r24, Z
     f7a:	87 7f       	andi	r24, 0xF7	; 247
     f7c:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     f7e:	80 81       	ld	r24, Z
     f80:	88 60       	ori	r24, 0x08	; 8
     f82:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     f84:	80 81       	ld	r24, Z
     f86:	8f 7e       	andi	r24, 0xEF	; 239
     f88:	80 83       	st	Z, r24
	
}
     f8a:	08 95       	ret

00000f8c <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     f8c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     f8e:	0d b4       	in	r0, 0x2d	; 45
     f90:	07 fe       	sbrs	r0, 7
     f92:	fd cf       	rjmp	.-6      	; 0xf8e <spi_shift_byte+0x2>
	return SPDR;
     f94:	8e b5       	in	r24, 0x2e	; 46
	
}
     f96:	08 95       	ret

00000f98 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     f98:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     f9a:	80 91 02 03 	lds	r24, 0x0302
     f9e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     fa2:	90 91 c1 02 	lds	r25, 0x02C1
     fa6:	98 2b       	or	r25, r24
     fa8:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     fac:	20 91 bf 02 	lds	r18, 0x02BF
     fb0:	98 2f       	mov	r25, r24
     fb2:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     fb4:	89 2f       	mov	r24, r25
     fb6:	82 27       	eor	r24, r18
     fb8:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     fbc:	89 23       	and	r24, r25
     fbe:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     fc2:	90 91 7e 03 	lds	r25, 0x037E
     fc6:	89 27       	eor	r24, r25
     fc8:	80 93 7e 03 	sts	0x037E, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     fcc:	80 91 01 03 	lds	r24, 0x0301
     fd0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     fd4:	90 91 c1 02 	lds	r25, 0x02C1
     fd8:	98 2b       	or	r25, r24
     fda:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     fde:	20 91 bd 02 	lds	r18, 0x02BD
     fe2:	98 2f       	mov	r25, r24
     fe4:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     fe6:	89 2f       	mov	r24, r25
     fe8:	82 27       	eor	r24, r18
     fea:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     fee:	89 23       	and	r24, r25
     ff0:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     ff4:	90 91 7f 03 	lds	r25, 0x037F
     ff8:	89 27       	eor	r24, r25
     ffa:	80 93 7f 03 	sts	0x037F, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     ffe:	80 91 00 03 	lds	r24, 0x0300
    1002:	0e 94 c6 07 	call	0xf8c	; 0xf8c <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
    1006:	80 91 ff 02 	lds	r24, 0x02FF
    100a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    100e:	80 91 07 03 	lds	r24, 0x0307
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	11 f4       	brne	.+4      	; 0x101a <update_spi+0x82>
    1016:	20 e8       	ldi	r18, 0x80	; 128
    1018:	01 c0       	rjmp	.+2      	; 0x101c <update_spi+0x84>
    101a:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
    101c:	80 91 80 03 	lds	r24, 0x0380
    1020:	88 1f       	adc	r24, r24
    1022:	88 27       	eor	r24, r24
    1024:	88 1f       	adc	r24, r24
    1026:	82 95       	swap	r24
    1028:	88 0f       	add	r24, r24
    102a:	88 0f       	add	r24, r24
    102c:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    102e:	90 91 fe 02 	lds	r25, 0x02FE
    1032:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
    1034:	82 2b       	or	r24, r18
    1036:	0e 94 c6 07 	call	0xf8c	; 0xf8c <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
    103a:	ed ed       	ldi	r30, 0xDD	; 221
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	87 7f       	andi	r24, 0xF7	; 247
    1042:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
    1044:	80 81       	ld	r24, Z
    1046:	88 60       	ori	r24, 0x08	; 8
    1048:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
    104a:	2d 98       	cbi	0x05, 5	; 5
			
			

	
    104c:	08 95       	ret

0000104e <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	b1 e0       	ldi	r27, 0x01	; 1
    1052:	9d 01       	movw	r18, r26
    1054:	24 5c       	subi	r18, 0xC4	; 196
    1056:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
    1058:	ed 91       	ld	r30, X+
    105a:	fc 91       	ld	r31, X
    105c:	11 97       	sbiw	r26, 0x01	; 1
    105e:	80 81       	ld	r24, Z
    1060:	41 81       	ldd	r20, Z+1	; 0x01
    1062:	94 2f       	mov	r25, r20
    1064:	93 70       	andi	r25, 0x03	; 3
    1066:	95 95       	asr	r25
    1068:	87 95       	ror	r24
    106a:	95 95       	asr	r25
    106c:	87 95       	ror	r24
    106e:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
    1070:	ed 91       	ld	r30, X+
    1072:	fd 91       	ld	r31, X+
    1074:	83 81       	ldd	r24, Z+3	; 0x03
    1076:	80 68       	ori	r24, 0x80	; 128
    1078:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
    107a:	a2 17       	cp	r26, r18
    107c:	b3 07       	cpc	r27, r19
    107e:	61 f7       	brne	.-40     	; 0x1058 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
    1080:	08 95       	ret

00001082 <unlock_pots>:

void unlock_pots(void) {
    1082:	e0 e0       	ldi	r30, 0x00	; 0
    1084:	f1 e0       	ldi	r31, 0x01	; 1
    1086:	cf 01       	movw	r24, r30
    1088:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
    108a:	a1 91       	ld	r26, Z+
    108c:	b1 91       	ld	r27, Z+
    108e:	13 96       	adiw	r26, 0x03	; 3
    1090:	2c 91       	ld	r18, X
    1092:	13 97       	sbiw	r26, 0x03	; 3
    1094:	2f 77       	andi	r18, 0x7F	; 127
    1096:	13 96       	adiw	r26, 0x03	; 3
    1098:	2c 93       	st	X, r18
    109a:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
    109c:	e8 17       	cp	r30, r24
    109e:	f9 07       	cpc	r31, r25
    10a0:	a1 f7       	brne	.-24     	; 0x108a <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
    10a2:	08 95       	ret

000010a4 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	ab 97       	sbiw	r28, 0x2b	; 43
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
    10bc:	ee ed       	ldi	r30, 0xDE	; 222
    10be:	f2 e0       	ldi	r31, 0x02	; 2
    10c0:	20 91 de 02 	lds	r18, 0x02DE
    10c4:	82 2f       	mov	r24, r18
    10c6:	82 95       	swap	r24
    10c8:	80 7f       	andi	r24, 0xF0	; 240
    10ca:	22 95       	swap	r18
    10cc:	2f 70       	andi	r18, 0x0F	; 15
    10ce:	90 91 df 02 	lds	r25, 0x02DF
    10d2:	93 70       	andi	r25, 0x03	; 3
    10d4:	92 95       	swap	r25
    10d6:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
    10d8:	df 01       	movw	r26, r30
    10da:	5a 97       	sbiw	r26, 0x1a	; 26
    10dc:	3c 91       	ld	r19, X
    10de:	53 2f       	mov	r21, r19
    10e0:	55 0f       	add	r21, r21
    10e2:	55 0f       	add	r21, r21
    10e4:	4a 81       	ldd	r20, Y+2	; 0x02
    10e6:	43 70       	andi	r20, 0x03	; 3
    10e8:	45 2b       	or	r20, r21
    10ea:	4a 83       	std	Y+2, r20	; 0x02
    10ec:	63 2f       	mov	r22, r19
    10ee:	62 95       	swap	r22
    10f0:	66 95       	lsr	r22
    10f2:	66 95       	lsr	r22
    10f4:	63 70       	andi	r22, 0x03	; 3
    10f6:	11 96       	adiw	r26, 0x01	; 1
    10f8:	4c 91       	ld	r20, X
    10fa:	43 70       	andi	r20, 0x03	; 3
    10fc:	44 0f       	add	r20, r20
    10fe:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    1100:	df 01       	movw	r26, r30
    1102:	58 97       	sbiw	r26, 0x18	; 24
    1104:	3c 91       	ld	r19, X
    1106:	53 2f       	mov	r21, r19
    1108:	52 95       	swap	r21
    110a:	50 7f       	andi	r21, 0xF0	; 240
    110c:	46 2b       	or	r20, r22
    110e:	45 2b       	or	r20, r21
    1110:	4b 83       	std	Y+3, r20	; 0x03
    1112:	63 2f       	mov	r22, r19
    1114:	62 95       	swap	r22
    1116:	6f 70       	andi	r22, 0x0F	; 15
    1118:	11 96       	adiw	r26, 0x01	; 1
    111a:	4c 91       	ld	r20, X
    111c:	43 70       	andi	r20, 0x03	; 3
    111e:	42 95       	swap	r20
    1120:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    1122:	df 01       	movw	r26, r30
    1124:	56 97       	sbiw	r26, 0x16	; 22
    1126:	3c 91       	ld	r19, X
    1128:	53 2f       	mov	r21, r19
    112a:	52 95       	swap	r21
    112c:	55 0f       	add	r21, r21
    112e:	55 0f       	add	r21, r21
    1130:	50 7c       	andi	r21, 0xC0	; 192
    1132:	46 2b       	or	r20, r22
    1134:	45 2b       	or	r20, r21
    1136:	4c 83       	std	Y+4, r20	; 0x04
    1138:	11 96       	adiw	r26, 0x01	; 1
    113a:	4c 91       	ld	r20, X
    113c:	42 95       	swap	r20
    113e:	44 0f       	add	r20, r20
    1140:	44 0f       	add	r20, r20
    1142:	40 7c       	andi	r20, 0xC0	; 192
    1144:	36 95       	lsr	r19
    1146:	36 95       	lsr	r19
    1148:	34 2b       	or	r19, r20
    114a:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    114c:	df 01       	movw	r26, r30
    114e:	54 97       	sbiw	r26, 0x14	; 20
    1150:	3c 91       	ld	r19, X
    1152:	3e 83       	std	Y+6, r19	; 0x06
    1154:	11 96       	adiw	r26, 0x01	; 1
    1156:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    1158:	df 01       	movw	r26, r30
    115a:	52 97       	sbiw	r26, 0x12	; 18
    115c:	3c 91       	ld	r19, X
    115e:	53 2f       	mov	r21, r19
    1160:	55 0f       	add	r21, r21
    1162:	55 0f       	add	r21, r21
    1164:	43 70       	andi	r20, 0x03	; 3
    1166:	45 2b       	or	r20, r21
    1168:	4f 83       	std	Y+7, r20	; 0x07
    116a:	63 2f       	mov	r22, r19
    116c:	62 95       	swap	r22
    116e:	66 95       	lsr	r22
    1170:	66 95       	lsr	r22
    1172:	63 70       	andi	r22, 0x03	; 3
    1174:	11 96       	adiw	r26, 0x01	; 1
    1176:	4c 91       	ld	r20, X
    1178:	43 70       	andi	r20, 0x03	; 3
    117a:	44 0f       	add	r20, r20
    117c:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    117e:	df 01       	movw	r26, r30
    1180:	50 97       	sbiw	r26, 0x10	; 16
    1182:	3c 91       	ld	r19, X
    1184:	53 2f       	mov	r21, r19
    1186:	52 95       	swap	r21
    1188:	50 7f       	andi	r21, 0xF0	; 240
    118a:	46 2b       	or	r20, r22
    118c:	45 2b       	or	r20, r21
    118e:	48 87       	std	Y+8, r20	; 0x08
    1190:	63 2f       	mov	r22, r19
    1192:	62 95       	swap	r22
    1194:	6f 70       	andi	r22, 0x0F	; 15
    1196:	11 96       	adiw	r26, 0x01	; 1
    1198:	4c 91       	ld	r20, X
    119a:	43 70       	andi	r20, 0x03	; 3
    119c:	42 95       	swap	r20
    119e:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    11a0:	df 01       	movw	r26, r30
    11a2:	1e 97       	sbiw	r26, 0x0e	; 14
    11a4:	3c 91       	ld	r19, X
    11a6:	53 2f       	mov	r21, r19
    11a8:	52 95       	swap	r21
    11aa:	55 0f       	add	r21, r21
    11ac:	55 0f       	add	r21, r21
    11ae:	50 7c       	andi	r21, 0xC0	; 192
    11b0:	46 2b       	or	r20, r22
    11b2:	45 2b       	or	r20, r21
    11b4:	49 87       	std	Y+9, r20	; 0x09
    11b6:	11 96       	adiw	r26, 0x01	; 1
    11b8:	4c 91       	ld	r20, X
    11ba:	42 95       	swap	r20
    11bc:	44 0f       	add	r20, r20
    11be:	44 0f       	add	r20, r20
    11c0:	40 7c       	andi	r20, 0xC0	; 192
    11c2:	36 95       	lsr	r19
    11c4:	36 95       	lsr	r19
    11c6:	34 2b       	or	r19, r20
    11c8:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    11ca:	df 01       	movw	r26, r30
    11cc:	1c 97       	sbiw	r26, 0x0c	; 12
    11ce:	3c 91       	ld	r19, X
    11d0:	3b 87       	std	Y+11, r19	; 0x0b
    11d2:	11 96       	adiw	r26, 0x01	; 1
    11d4:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    11d6:	df 01       	movw	r26, r30
    11d8:	1a 97       	sbiw	r26, 0x0a	; 10
    11da:	3c 91       	ld	r19, X
    11dc:	53 2f       	mov	r21, r19
    11de:	55 0f       	add	r21, r21
    11e0:	55 0f       	add	r21, r21
    11e2:	43 70       	andi	r20, 0x03	; 3
    11e4:	45 2b       	or	r20, r21
    11e6:	4c 87       	std	Y+12, r20	; 0x0c
    11e8:	63 2f       	mov	r22, r19
    11ea:	62 95       	swap	r22
    11ec:	66 95       	lsr	r22
    11ee:	66 95       	lsr	r22
    11f0:	63 70       	andi	r22, 0x03	; 3
    11f2:	11 96       	adiw	r26, 0x01	; 1
    11f4:	4c 91       	ld	r20, X
    11f6:	43 70       	andi	r20, 0x03	; 3
    11f8:	44 0f       	add	r20, r20
    11fa:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    11fc:	df 01       	movw	r26, r30
    11fe:	18 97       	sbiw	r26, 0x08	; 8
    1200:	3c 91       	ld	r19, X
    1202:	53 2f       	mov	r21, r19
    1204:	52 95       	swap	r21
    1206:	50 7f       	andi	r21, 0xF0	; 240
    1208:	46 2b       	or	r20, r22
    120a:	45 2b       	or	r20, r21
    120c:	4d 87       	std	Y+13, r20	; 0x0d
    120e:	63 2f       	mov	r22, r19
    1210:	62 95       	swap	r22
    1212:	6f 70       	andi	r22, 0x0F	; 15
    1214:	11 96       	adiw	r26, 0x01	; 1
    1216:	4c 91       	ld	r20, X
    1218:	43 70       	andi	r20, 0x03	; 3
    121a:	42 95       	swap	r20
    121c:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    121e:	df 01       	movw	r26, r30
    1220:	16 97       	sbiw	r26, 0x06	; 6
    1222:	3c 91       	ld	r19, X
    1224:	53 2f       	mov	r21, r19
    1226:	52 95       	swap	r21
    1228:	55 0f       	add	r21, r21
    122a:	55 0f       	add	r21, r21
    122c:	50 7c       	andi	r21, 0xC0	; 192
    122e:	46 2b       	or	r20, r22
    1230:	45 2b       	or	r20, r21
    1232:	4e 87       	std	Y+14, r20	; 0x0e
    1234:	11 96       	adiw	r26, 0x01	; 1
    1236:	4c 91       	ld	r20, X
    1238:	42 95       	swap	r20
    123a:	44 0f       	add	r20, r20
    123c:	44 0f       	add	r20, r20
    123e:	40 7c       	andi	r20, 0xC0	; 192
    1240:	36 95       	lsr	r19
    1242:	36 95       	lsr	r19
    1244:	34 2b       	or	r19, r20
    1246:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    1248:	df 01       	movw	r26, r30
    124a:	14 97       	sbiw	r26, 0x04	; 4
    124c:	3c 91       	ld	r19, X
    124e:	38 8b       	std	Y+16, r19	; 0x10
    1250:	11 96       	adiw	r26, 0x01	; 1
    1252:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    1254:	df 01       	movw	r26, r30
    1256:	12 97       	sbiw	r26, 0x02	; 2
    1258:	3c 91       	ld	r19, X
    125a:	53 2f       	mov	r21, r19
    125c:	55 0f       	add	r21, r21
    125e:	55 0f       	add	r21, r21
    1260:	43 70       	andi	r20, 0x03	; 3
    1262:	45 2b       	or	r20, r21
    1264:	49 8b       	std	Y+17, r20	; 0x11
    1266:	32 95       	swap	r19
    1268:	36 95       	lsr	r19
    126a:	36 95       	lsr	r19
    126c:	33 70       	andi	r19, 0x03	; 3
    126e:	11 96       	adiw	r26, 0x01	; 1
    1270:	4c 91       	ld	r20, X
    1272:	43 70       	andi	r20, 0x03	; 3
    1274:	44 0f       	add	r20, r20
    1276:	44 0f       	add	r20, r20
    1278:	83 2b       	or	r24, r19
    127a:	84 2b       	or	r24, r20
    127c:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    127e:	80 91 e0 02 	lds	r24, 0x02E0
    1282:	38 2f       	mov	r19, r24
    1284:	32 95       	swap	r19
    1286:	33 0f       	add	r19, r19
    1288:	33 0f       	add	r19, r19
    128a:	30 7c       	andi	r19, 0xC0	; 192
    128c:	92 2b       	or	r25, r18
    128e:	93 2b       	or	r25, r19
    1290:	9b 8b       	std	Y+19, r25	; 0x13
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	92 95       	swap	r25
    1296:	99 0f       	add	r25, r25
    1298:	99 0f       	add	r25, r25
    129a:	90 7c       	andi	r25, 0xC0	; 192
    129c:	86 95       	lsr	r24
    129e:	86 95       	lsr	r24
    12a0:	89 2b       	or	r24, r25
    12a2:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    12a4:	80 91 e2 02 	lds	r24, 0x02E2
    12a8:	8d 8b       	std	Y+21, r24	; 0x15
    12aa:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    12ac:	80 91 e4 02 	lds	r24, 0x02E4
    12b0:	28 2f       	mov	r18, r24
    12b2:	22 0f       	add	r18, r18
    12b4:	22 0f       	add	r18, r18
    12b6:	93 70       	andi	r25, 0x03	; 3
    12b8:	92 2b       	or	r25, r18
    12ba:	9e 8b       	std	Y+22, r25	; 0x16
    12bc:	38 2f       	mov	r19, r24
    12be:	32 95       	swap	r19
    12c0:	36 95       	lsr	r19
    12c2:	36 95       	lsr	r19
    12c4:	33 70       	andi	r19, 0x03	; 3
    12c6:	97 81       	ldd	r25, Z+7	; 0x07
    12c8:	93 70       	andi	r25, 0x03	; 3
    12ca:	99 0f       	add	r25, r25
    12cc:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    12ce:	80 91 e6 02 	lds	r24, 0x02E6
    12d2:	28 2f       	mov	r18, r24
    12d4:	22 95       	swap	r18
    12d6:	20 7f       	andi	r18, 0xF0	; 240
    12d8:	93 2b       	or	r25, r19
    12da:	92 2b       	or	r25, r18
    12dc:	9f 8b       	std	Y+23, r25	; 0x17
    12de:	38 2f       	mov	r19, r24
    12e0:	32 95       	swap	r19
    12e2:	3f 70       	andi	r19, 0x0F	; 15
    12e4:	91 85       	ldd	r25, Z+9	; 0x09
    12e6:	93 70       	andi	r25, 0x03	; 3
    12e8:	92 95       	swap	r25
    12ea:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    12ec:	80 91 e8 02 	lds	r24, 0x02E8
    12f0:	28 2f       	mov	r18, r24
    12f2:	22 95       	swap	r18
    12f4:	22 0f       	add	r18, r18
    12f6:	22 0f       	add	r18, r18
    12f8:	20 7c       	andi	r18, 0xC0	; 192
    12fa:	93 2b       	or	r25, r19
    12fc:	92 2b       	or	r25, r18
    12fe:	98 8f       	std	Y+24, r25	; 0x18
    1300:	93 85       	ldd	r25, Z+11	; 0x0b
    1302:	92 95       	swap	r25
    1304:	99 0f       	add	r25, r25
    1306:	99 0f       	add	r25, r25
    1308:	90 7c       	andi	r25, 0xC0	; 192
    130a:	86 95       	lsr	r24
    130c:	86 95       	lsr	r24
    130e:	89 2b       	or	r24, r25
    1310:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    1312:	80 91 ea 02 	lds	r24, 0x02EA
    1316:	8a 8f       	std	Y+26, r24	; 0x1a
    1318:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    131a:	80 91 ec 02 	lds	r24, 0x02EC
    131e:	28 2f       	mov	r18, r24
    1320:	22 0f       	add	r18, r18
    1322:	22 0f       	add	r18, r18
    1324:	93 70       	andi	r25, 0x03	; 3
    1326:	92 2b       	or	r25, r18
    1328:	9b 8f       	std	Y+27, r25	; 0x1b
    132a:	38 2f       	mov	r19, r24
    132c:	32 95       	swap	r19
    132e:	36 95       	lsr	r19
    1330:	36 95       	lsr	r19
    1332:	33 70       	andi	r19, 0x03	; 3
    1334:	97 85       	ldd	r25, Z+15	; 0x0f
    1336:	93 70       	andi	r25, 0x03	; 3
    1338:	99 0f       	add	r25, r25
    133a:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    133c:	80 91 ee 02 	lds	r24, 0x02EE
    1340:	28 2f       	mov	r18, r24
    1342:	22 95       	swap	r18
    1344:	20 7f       	andi	r18, 0xF0	; 240
    1346:	93 2b       	or	r25, r19
    1348:	92 2b       	or	r25, r18
    134a:	9c 8f       	std	Y+28, r25	; 0x1c
    134c:	38 2f       	mov	r19, r24
    134e:	32 95       	swap	r19
    1350:	3f 70       	andi	r19, 0x0F	; 15
    1352:	91 89       	ldd	r25, Z+17	; 0x11
    1354:	93 70       	andi	r25, 0x03	; 3
    1356:	92 95       	swap	r25
    1358:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    135a:	80 91 f0 02 	lds	r24, 0x02F0
    135e:	28 2f       	mov	r18, r24
    1360:	22 95       	swap	r18
    1362:	22 0f       	add	r18, r18
    1364:	22 0f       	add	r18, r18
    1366:	20 7c       	andi	r18, 0xC0	; 192
    1368:	93 2b       	or	r25, r19
    136a:	92 2b       	or	r25, r18
    136c:	9d 8f       	std	Y+29, r25	; 0x1d
    136e:	93 89       	ldd	r25, Z+19	; 0x13
    1370:	92 95       	swap	r25
    1372:	99 0f       	add	r25, r25
    1374:	99 0f       	add	r25, r25
    1376:	90 7c       	andi	r25, 0xC0	; 192
    1378:	86 95       	lsr	r24
    137a:	86 95       	lsr	r24
    137c:	89 2b       	or	r24, r25
    137e:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    1380:	80 91 f2 02 	lds	r24, 0x02F2
    1384:	8f 8f       	std	Y+31, r24	; 0x1f
    1386:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    1388:	80 91 f4 02 	lds	r24, 0x02F4
    138c:	28 2f       	mov	r18, r24
    138e:	22 0f       	add	r18, r18
    1390:	22 0f       	add	r18, r18
    1392:	93 70       	andi	r25, 0x03	; 3
    1394:	92 2b       	or	r25, r18
    1396:	98 a3       	lds	r25, 0x58
    1398:	38 2f       	mov	r19, r24
    139a:	32 95       	swap	r19
    139c:	36 95       	lsr	r19
    139e:	36 95       	lsr	r19
    13a0:	33 70       	andi	r19, 0x03	; 3
    13a2:	97 89       	ldd	r25, Z+23	; 0x17
    13a4:	93 70       	andi	r25, 0x03	; 3
    13a6:	99 0f       	add	r25, r25
    13a8:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    13aa:	80 91 f6 02 	lds	r24, 0x02F6
    13ae:	28 2f       	mov	r18, r24
    13b0:	22 95       	swap	r18
    13b2:	20 7f       	andi	r18, 0xF0	; 240
    13b4:	93 2b       	or	r25, r19
    13b6:	92 2b       	or	r25, r18
    13b8:	99 a3       	lds	r25, 0x59
    13ba:	38 2f       	mov	r19, r24
    13bc:	32 95       	swap	r19
    13be:	3f 70       	andi	r19, 0x0F	; 15
    13c0:	91 8d       	ldd	r25, Z+25	; 0x19
    13c2:	93 70       	andi	r25, 0x03	; 3
    13c4:	92 95       	swap	r25
    13c6:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    13c8:	80 91 f8 02 	lds	r24, 0x02F8
    13cc:	28 2f       	mov	r18, r24
    13ce:	22 95       	swap	r18
    13d0:	22 0f       	add	r18, r18
    13d2:	22 0f       	add	r18, r18
    13d4:	20 7c       	andi	r18, 0xC0	; 192
    13d6:	93 2b       	or	r25, r19
    13d8:	92 2b       	or	r25, r18
    13da:	9a a3       	lds	r25, 0x5a
    13dc:	93 8d       	ldd	r25, Z+27	; 0x1b
    13de:	92 95       	swap	r25
    13e0:	99 0f       	add	r25, r25
    13e2:	99 0f       	add	r25, r25
    13e4:	90 7c       	andi	r25, 0xC0	; 192
    13e6:	86 95       	lsr	r24
    13e8:	86 95       	lsr	r24
    13ea:	89 2b       	or	r24, r25
    13ec:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    13ee:	80 91 fa 02 	lds	r24, 0x02FA
    13f2:	8c a3       	lds	r24, 0x5c
    13f4:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    13f6:	80 91 fc 02 	lds	r24, 0x02FC
    13fa:	28 2f       	mov	r18, r24
    13fc:	22 0f       	add	r18, r18
    13fe:	22 0f       	add	r18, r18
    1400:	93 70       	andi	r25, 0x03	; 3
    1402:	92 2b       	or	r25, r18
    1404:	9d a3       	lds	r25, 0x5d
    1406:	82 95       	swap	r24
    1408:	86 95       	lsr	r24
    140a:	86 95       	lsr	r24
    140c:	83 70       	andi	r24, 0x03	; 3
    140e:	2e a1       	lds	r18, 0x4e
    1410:	20 7f       	andi	r18, 0xF0	; 240
    1412:	97 8d       	ldd	r25, Z+31	; 0x1f
    1414:	93 70       	andi	r25, 0x03	; 3
    1416:	99 0f       	add	r25, r25
    1418:	99 0f       	add	r25, r25
    141a:	82 2b       	or	r24, r18
    141c:	89 2b       	or	r24, r25
    141e:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    1420:	80 91 fe 02 	lds	r24, 0x02FE
    1424:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    1426:	80 91 ff 02 	lds	r24, 0x02FF
    142a:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    142c:	80 91 00 03 	lds	r24, 0x0300
    1430:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    1432:	80 91 01 03 	lds	r24, 0x0301
    1436:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    1438:	80 91 02 03 	lds	r24, 0x0302
    143c:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    143e:	0e 94 27 08 	call	0x104e	; 0x104e <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    1442:	80 91 80 03 	lds	r24, 0x0380
    1446:	8f 77       	andi	r24, 0x7F	; 127
    1448:	80 93 80 03 	sts	0x0380, r24
	current_patch.mode = MEMORY;
    144c:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    1450:	21 2f       	mov	r18, r17
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	8b e2       	ldi	r24, 0x2B	; 43
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	28 9f       	mul	r18, r24
    145a:	b0 01       	movw	r22, r0
    145c:	29 9f       	mul	r18, r25
    145e:	70 0d       	add	r23, r0
    1460:	38 9f       	mul	r19, r24
    1462:	70 0d       	add	r23, r0
    1464:	11 24       	eor	r1, r1
    1466:	60 50       	subi	r22, 0x00	; 0
    1468:	70 40       	sbci	r23, 0x00	; 0
    146a:	ce 01       	movw	r24, r28
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	4b e2       	ldi	r20, 0x2B	; 43
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__eeupd_block_m6450a>
}	
    1476:	ab 96       	adiw	r28, 0x2b	; 43
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	08 95       	ret

0000148a <load_patch>:
	
void load_patch(uint8_t patch_number) {
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	c3 54       	subi	r28, 0x43	; 67
    1496:	d0 40       	sbci	r29, 0x00	; 0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	2b e2       	ldi	r18, 0x2B	; 43
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	82 9f       	mul	r24, r18
    14aa:	b0 01       	movw	r22, r0
    14ac:	83 9f       	mul	r24, r19
    14ae:	70 0d       	add	r23, r0
    14b0:	92 9f       	mul	r25, r18
    14b2:	70 0d       	add	r23, r0
    14b4:	11 24       	eor	r1, r1
    14b6:	60 50       	subi	r22, 0x00	; 0
    14b8:	70 40       	sbci	r23, 0x00	; 0
    14ba:	ce 01       	movw	r24, r28
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	4b e2       	ldi	r20, 0x2B	; 43
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    14c6:	ee ed       	ldi	r30, 0xDE	; 222
    14c8:	f2 e0       	ldi	r31, 0x02	; 2
    14ca:	8a 89       	ldd	r24, Y+18	; 0x12
    14cc:	28 2f       	mov	r18, r24
    14ce:	22 95       	swap	r18
    14d0:	2f 70       	andi	r18, 0x0F	; 15
    14d2:	9b 89       	ldd	r25, Y+19	; 0x13
    14d4:	39 2f       	mov	r19, r25
    14d6:	32 95       	swap	r19
    14d8:	30 7f       	andi	r19, 0xF0	; 240
    14da:	32 2b       	or	r19, r18
    14dc:	29 2f       	mov	r18, r25
    14de:	22 95       	swap	r18
    14e0:	2f 70       	andi	r18, 0x0F	; 15
    14e2:	23 70       	andi	r18, 0x03	; 3
    14e4:	30 93 de 02 	sts	0x02DE, r19
    14e8:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    14ec:	df 01       	movw	r26, r30
    14ee:	5a 97       	sbiw	r26, 0x1a	; 26
    14f0:	4a 81       	ldd	r20, Y+2	; 0x02
    14f2:	46 95       	lsr	r20
    14f4:	46 95       	lsr	r20
    14f6:	2b 81       	ldd	r18, Y+3	; 0x03
    14f8:	32 2f       	mov	r19, r18
    14fa:	32 95       	swap	r19
    14fc:	33 0f       	add	r19, r19
    14fe:	33 0f       	add	r19, r19
    1500:	30 7c       	andi	r19, 0xC0	; 192
    1502:	43 2b       	or	r20, r19
    1504:	32 2f       	mov	r19, r18
    1506:	36 95       	lsr	r19
    1508:	36 95       	lsr	r19
    150a:	33 70       	andi	r19, 0x03	; 3
    150c:	4c 93       	st	X, r20
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    1512:	df 01       	movw	r26, r30
    1514:	58 97       	sbiw	r26, 0x18	; 24
    1516:	32 2f       	mov	r19, r18
    1518:	32 95       	swap	r19
    151a:	3f 70       	andi	r19, 0x0F	; 15
    151c:	2c 81       	ldd	r18, Y+4	; 0x04
    151e:	42 2f       	mov	r20, r18
    1520:	42 95       	swap	r20
    1522:	40 7f       	andi	r20, 0xF0	; 240
    1524:	43 2b       	or	r20, r19
    1526:	32 2f       	mov	r19, r18
    1528:	32 95       	swap	r19
    152a:	3f 70       	andi	r19, 0x0F	; 15
    152c:	33 70       	andi	r19, 0x03	; 3
    152e:	4c 93       	st	X, r20
    1530:	11 96       	adiw	r26, 0x01	; 1
    1532:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    1534:	df 01       	movw	r26, r30
    1536:	56 97       	sbiw	r26, 0x16	; 22
    1538:	22 95       	swap	r18
    153a:	26 95       	lsr	r18
    153c:	26 95       	lsr	r18
    153e:	23 70       	andi	r18, 0x03	; 3
    1540:	3d 81       	ldd	r19, Y+5	; 0x05
    1542:	43 2f       	mov	r20, r19
    1544:	44 0f       	add	r20, r20
    1546:	44 0f       	add	r20, r20
    1548:	24 2b       	or	r18, r20
    154a:	32 95       	swap	r19
    154c:	36 95       	lsr	r19
    154e:	36 95       	lsr	r19
    1550:	33 70       	andi	r19, 0x03	; 3
    1552:	2c 93       	st	X, r18
    1554:	11 96       	adiw	r26, 0x01	; 1
    1556:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    1558:	df 01       	movw	r26, r30
    155a:	54 97       	sbiw	r26, 0x14	; 20
    155c:	4e 81       	ldd	r20, Y+6	; 0x06
    155e:	2f 81       	ldd	r18, Y+7	; 0x07
    1560:	32 2f       	mov	r19, r18
    1562:	33 70       	andi	r19, 0x03	; 3
    1564:	4c 93       	st	X, r20
    1566:	11 96       	adiw	r26, 0x01	; 1
    1568:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    156a:	df 01       	movw	r26, r30
    156c:	52 97       	sbiw	r26, 0x12	; 18
    156e:	32 2f       	mov	r19, r18
    1570:	36 95       	lsr	r19
    1572:	36 95       	lsr	r19
    1574:	28 85       	ldd	r18, Y+8	; 0x08
    1576:	42 2f       	mov	r20, r18
    1578:	42 95       	swap	r20
    157a:	44 0f       	add	r20, r20
    157c:	44 0f       	add	r20, r20
    157e:	40 7c       	andi	r20, 0xC0	; 192
    1580:	43 2b       	or	r20, r19
    1582:	32 2f       	mov	r19, r18
    1584:	36 95       	lsr	r19
    1586:	36 95       	lsr	r19
    1588:	33 70       	andi	r19, 0x03	; 3
    158a:	4c 93       	st	X, r20
    158c:	11 96       	adiw	r26, 0x01	; 1
    158e:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1590:	df 01       	movw	r26, r30
    1592:	50 97       	sbiw	r26, 0x10	; 16
    1594:	32 2f       	mov	r19, r18
    1596:	32 95       	swap	r19
    1598:	3f 70       	andi	r19, 0x0F	; 15
    159a:	29 85       	ldd	r18, Y+9	; 0x09
    159c:	42 2f       	mov	r20, r18
    159e:	42 95       	swap	r20
    15a0:	40 7f       	andi	r20, 0xF0	; 240
    15a2:	43 2b       	or	r20, r19
    15a4:	32 2f       	mov	r19, r18
    15a6:	32 95       	swap	r19
    15a8:	3f 70       	andi	r19, 0x0F	; 15
    15aa:	33 70       	andi	r19, 0x03	; 3
    15ac:	4c 93       	st	X, r20
    15ae:	11 96       	adiw	r26, 0x01	; 1
    15b0:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    15b2:	df 01       	movw	r26, r30
    15b4:	1e 97       	sbiw	r26, 0x0e	; 14
    15b6:	22 95       	swap	r18
    15b8:	26 95       	lsr	r18
    15ba:	26 95       	lsr	r18
    15bc:	23 70       	andi	r18, 0x03	; 3
    15be:	3a 85       	ldd	r19, Y+10	; 0x0a
    15c0:	43 2f       	mov	r20, r19
    15c2:	44 0f       	add	r20, r20
    15c4:	44 0f       	add	r20, r20
    15c6:	24 2b       	or	r18, r20
    15c8:	32 95       	swap	r19
    15ca:	36 95       	lsr	r19
    15cc:	36 95       	lsr	r19
    15ce:	33 70       	andi	r19, 0x03	; 3
    15d0:	2c 93       	st	X, r18
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    15d6:	df 01       	movw	r26, r30
    15d8:	1c 97       	sbiw	r26, 0x0c	; 12
    15da:	4b 85       	ldd	r20, Y+11	; 0x0b
    15dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    15de:	32 2f       	mov	r19, r18
    15e0:	33 70       	andi	r19, 0x03	; 3
    15e2:	4c 93       	st	X, r20
    15e4:	11 96       	adiw	r26, 0x01	; 1
    15e6:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    15e8:	df 01       	movw	r26, r30
    15ea:	1a 97       	sbiw	r26, 0x0a	; 10
    15ec:	32 2f       	mov	r19, r18
    15ee:	36 95       	lsr	r19
    15f0:	36 95       	lsr	r19
    15f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    15f4:	42 2f       	mov	r20, r18
    15f6:	42 95       	swap	r20
    15f8:	44 0f       	add	r20, r20
    15fa:	44 0f       	add	r20, r20
    15fc:	40 7c       	andi	r20, 0xC0	; 192
    15fe:	43 2b       	or	r20, r19
    1600:	32 2f       	mov	r19, r18
    1602:	36 95       	lsr	r19
    1604:	36 95       	lsr	r19
    1606:	33 70       	andi	r19, 0x03	; 3
    1608:	4c 93       	st	X, r20
    160a:	11 96       	adiw	r26, 0x01	; 1
    160c:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    160e:	df 01       	movw	r26, r30
    1610:	18 97       	sbiw	r26, 0x08	; 8
    1612:	32 2f       	mov	r19, r18
    1614:	32 95       	swap	r19
    1616:	3f 70       	andi	r19, 0x0F	; 15
    1618:	2e 85       	ldd	r18, Y+14	; 0x0e
    161a:	42 2f       	mov	r20, r18
    161c:	42 95       	swap	r20
    161e:	40 7f       	andi	r20, 0xF0	; 240
    1620:	43 2b       	or	r20, r19
    1622:	32 2f       	mov	r19, r18
    1624:	32 95       	swap	r19
    1626:	3f 70       	andi	r19, 0x0F	; 15
    1628:	33 70       	andi	r19, 0x03	; 3
    162a:	4c 93       	st	X, r20
    162c:	11 96       	adiw	r26, 0x01	; 1
    162e:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    1630:	df 01       	movw	r26, r30
    1632:	16 97       	sbiw	r26, 0x06	; 6
    1634:	22 95       	swap	r18
    1636:	26 95       	lsr	r18
    1638:	26 95       	lsr	r18
    163a:	23 70       	andi	r18, 0x03	; 3
    163c:	3f 85       	ldd	r19, Y+15	; 0x0f
    163e:	43 2f       	mov	r20, r19
    1640:	44 0f       	add	r20, r20
    1642:	44 0f       	add	r20, r20
    1644:	24 2b       	or	r18, r20
    1646:	32 95       	swap	r19
    1648:	36 95       	lsr	r19
    164a:	36 95       	lsr	r19
    164c:	33 70       	andi	r19, 0x03	; 3
    164e:	2c 93       	st	X, r18
    1650:	11 96       	adiw	r26, 0x01	; 1
    1652:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    1654:	df 01       	movw	r26, r30
    1656:	14 97       	sbiw	r26, 0x04	; 4
    1658:	48 89       	ldd	r20, Y+16	; 0x10
    165a:	29 89       	ldd	r18, Y+17	; 0x11
    165c:	32 2f       	mov	r19, r18
    165e:	33 70       	andi	r19, 0x03	; 3
    1660:	4c 93       	st	X, r20
    1662:	11 96       	adiw	r26, 0x01	; 1
    1664:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    1666:	df 01       	movw	r26, r30
    1668:	12 97       	sbiw	r26, 0x02	; 2
    166a:	26 95       	lsr	r18
    166c:	26 95       	lsr	r18
    166e:	38 2f       	mov	r19, r24
    1670:	32 95       	swap	r19
    1672:	33 0f       	add	r19, r19
    1674:	33 0f       	add	r19, r19
    1676:	30 7c       	andi	r19, 0xC0	; 192
    1678:	23 2b       	or	r18, r19
    167a:	86 95       	lsr	r24
    167c:	86 95       	lsr	r24
    167e:	83 70       	andi	r24, 0x03	; 3
    1680:	2c 93       	st	X, r18
    1682:	11 96       	adiw	r26, 0x01	; 1
    1684:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    1686:	92 95       	swap	r25
    1688:	96 95       	lsr	r25
    168a:	96 95       	lsr	r25
    168c:	93 70       	andi	r25, 0x03	; 3
    168e:	8c 89       	ldd	r24, Y+20	; 0x14
    1690:	28 2f       	mov	r18, r24
    1692:	22 0f       	add	r18, r18
    1694:	22 0f       	add	r18, r18
    1696:	92 2b       	or	r25, r18
    1698:	82 95       	swap	r24
    169a:	86 95       	lsr	r24
    169c:	86 95       	lsr	r24
    169e:	83 70       	andi	r24, 0x03	; 3
    16a0:	90 93 e0 02 	sts	0x02E0, r25
    16a4:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    16a6:	2d 89       	ldd	r18, Y+21	; 0x15
    16a8:	8e 89       	ldd	r24, Y+22	; 0x16
    16aa:	98 2f       	mov	r25, r24
    16ac:	93 70       	andi	r25, 0x03	; 3
    16ae:	20 93 e2 02 	sts	0x02E2, r18
    16b2:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    16b4:	98 2f       	mov	r25, r24
    16b6:	96 95       	lsr	r25
    16b8:	96 95       	lsr	r25
    16ba:	8f 89       	ldd	r24, Y+23	; 0x17
    16bc:	28 2f       	mov	r18, r24
    16be:	22 95       	swap	r18
    16c0:	22 0f       	add	r18, r18
    16c2:	22 0f       	add	r18, r18
    16c4:	20 7c       	andi	r18, 0xC0	; 192
    16c6:	29 2b       	or	r18, r25
    16c8:	98 2f       	mov	r25, r24
    16ca:	96 95       	lsr	r25
    16cc:	96 95       	lsr	r25
    16ce:	93 70       	andi	r25, 0x03	; 3
    16d0:	20 93 e4 02 	sts	0x02E4, r18
    16d4:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    16d6:	98 2f       	mov	r25, r24
    16d8:	92 95       	swap	r25
    16da:	9f 70       	andi	r25, 0x0F	; 15
    16dc:	88 8d       	ldd	r24, Y+24	; 0x18
    16de:	28 2f       	mov	r18, r24
    16e0:	22 95       	swap	r18
    16e2:	20 7f       	andi	r18, 0xF0	; 240
    16e4:	29 2b       	or	r18, r25
    16e6:	98 2f       	mov	r25, r24
    16e8:	92 95       	swap	r25
    16ea:	9f 70       	andi	r25, 0x0F	; 15
    16ec:	93 70       	andi	r25, 0x03	; 3
    16ee:	20 93 e6 02 	sts	0x02E6, r18
    16f2:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    16f4:	82 95       	swap	r24
    16f6:	86 95       	lsr	r24
    16f8:	86 95       	lsr	r24
    16fa:	83 70       	andi	r24, 0x03	; 3
    16fc:	99 8d       	ldd	r25, Y+25	; 0x19
    16fe:	29 2f       	mov	r18, r25
    1700:	22 0f       	add	r18, r18
    1702:	22 0f       	add	r18, r18
    1704:	82 2b       	or	r24, r18
    1706:	92 95       	swap	r25
    1708:	96 95       	lsr	r25
    170a:	96 95       	lsr	r25
    170c:	93 70       	andi	r25, 0x03	; 3
    170e:	80 93 e8 02 	sts	0x02E8, r24
    1712:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    1714:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1716:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1718:	98 2f       	mov	r25, r24
    171a:	93 70       	andi	r25, 0x03	; 3
    171c:	20 93 ea 02 	sts	0x02EA, r18
    1720:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    1722:	98 2f       	mov	r25, r24
    1724:	96 95       	lsr	r25
    1726:	96 95       	lsr	r25
    1728:	8c 8d       	ldd	r24, Y+28	; 0x1c
    172a:	28 2f       	mov	r18, r24
    172c:	22 95       	swap	r18
    172e:	22 0f       	add	r18, r18
    1730:	22 0f       	add	r18, r18
    1732:	20 7c       	andi	r18, 0xC0	; 192
    1734:	29 2b       	or	r18, r25
    1736:	98 2f       	mov	r25, r24
    1738:	96 95       	lsr	r25
    173a:	96 95       	lsr	r25
    173c:	93 70       	andi	r25, 0x03	; 3
    173e:	20 93 ec 02 	sts	0x02EC, r18
    1742:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    1744:	98 2f       	mov	r25, r24
    1746:	92 95       	swap	r25
    1748:	9f 70       	andi	r25, 0x0F	; 15
    174a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    174c:	28 2f       	mov	r18, r24
    174e:	22 95       	swap	r18
    1750:	20 7f       	andi	r18, 0xF0	; 240
    1752:	29 2b       	or	r18, r25
    1754:	98 2f       	mov	r25, r24
    1756:	92 95       	swap	r25
    1758:	9f 70       	andi	r25, 0x0F	; 15
    175a:	93 70       	andi	r25, 0x03	; 3
    175c:	20 93 ee 02 	sts	0x02EE, r18
    1760:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    1762:	82 95       	swap	r24
    1764:	86 95       	lsr	r24
    1766:	86 95       	lsr	r24
    1768:	83 70       	andi	r24, 0x03	; 3
    176a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    176c:	29 2f       	mov	r18, r25
    176e:	22 0f       	add	r18, r18
    1770:	22 0f       	add	r18, r18
    1772:	82 2b       	or	r24, r18
    1774:	92 95       	swap	r25
    1776:	96 95       	lsr	r25
    1778:	96 95       	lsr	r25
    177a:	93 70       	andi	r25, 0x03	; 3
    177c:	80 93 f0 02 	sts	0x02F0, r24
    1780:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    1782:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1784:	88 a1       	lds	r24, 0x48
    1786:	98 2f       	mov	r25, r24
    1788:	93 70       	andi	r25, 0x03	; 3
    178a:	20 93 f2 02 	sts	0x02F2, r18
    178e:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1790:	98 2f       	mov	r25, r24
    1792:	96 95       	lsr	r25
    1794:	96 95       	lsr	r25
    1796:	89 a1       	lds	r24, 0x49
    1798:	28 2f       	mov	r18, r24
    179a:	22 95       	swap	r18
    179c:	22 0f       	add	r18, r18
    179e:	22 0f       	add	r18, r18
    17a0:	20 7c       	andi	r18, 0xC0	; 192
    17a2:	29 2b       	or	r18, r25
    17a4:	98 2f       	mov	r25, r24
    17a6:	96 95       	lsr	r25
    17a8:	96 95       	lsr	r25
    17aa:	93 70       	andi	r25, 0x03	; 3
    17ac:	20 93 f4 02 	sts	0x02F4, r18
    17b0:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    17b2:	98 2f       	mov	r25, r24
    17b4:	92 95       	swap	r25
    17b6:	9f 70       	andi	r25, 0x0F	; 15
    17b8:	8a a1       	lds	r24, 0x4a
    17ba:	28 2f       	mov	r18, r24
    17bc:	22 95       	swap	r18
    17be:	20 7f       	andi	r18, 0xF0	; 240
    17c0:	29 2b       	or	r18, r25
    17c2:	98 2f       	mov	r25, r24
    17c4:	92 95       	swap	r25
    17c6:	9f 70       	andi	r25, 0x0F	; 15
    17c8:	93 70       	andi	r25, 0x03	; 3
    17ca:	20 93 f6 02 	sts	0x02F6, r18
    17ce:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    17d0:	82 95       	swap	r24
    17d2:	86 95       	lsr	r24
    17d4:	86 95       	lsr	r24
    17d6:	83 70       	andi	r24, 0x03	; 3
    17d8:	9b a1       	lds	r25, 0x4b
    17da:	29 2f       	mov	r18, r25
    17dc:	22 0f       	add	r18, r18
    17de:	22 0f       	add	r18, r18
    17e0:	82 2b       	or	r24, r18
    17e2:	92 95       	swap	r25
    17e4:	96 95       	lsr	r25
    17e6:	96 95       	lsr	r25
    17e8:	93 70       	andi	r25, 0x03	; 3
    17ea:	80 93 f8 02 	sts	0x02F8, r24
    17ee:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    17f0:	2c a1       	lds	r18, 0x4c
    17f2:	8d a1       	lds	r24, 0x4d
    17f4:	98 2f       	mov	r25, r24
    17f6:	93 70       	andi	r25, 0x03	; 3
    17f8:	20 93 fa 02 	sts	0x02FA, r18
    17fc:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    17fe:	98 2f       	mov	r25, r24
    1800:	96 95       	lsr	r25
    1802:	96 95       	lsr	r25
    1804:	8e a1       	lds	r24, 0x4e
    1806:	28 2f       	mov	r18, r24
    1808:	22 95       	swap	r18
    180a:	22 0f       	add	r18, r18
    180c:	22 0f       	add	r18, r18
    180e:	20 7c       	andi	r18, 0xC0	; 192
    1810:	29 2b       	or	r18, r25
    1812:	86 95       	lsr	r24
    1814:	86 95       	lsr	r24
    1816:	98 2f       	mov	r25, r24
    1818:	93 70       	andi	r25, 0x03	; 3
    181a:	20 93 fc 02 	sts	0x02FC, r18
    181e:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    1820:	7f a1       	lds	r23, 0x4f
    1822:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    1826:	68 a5       	lds	r22, 0x68
    1828:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    182c:	89 a5       	lds	r24, 0x69
    182e:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    1832:	9a a5       	lds	r25, 0x6a
    1834:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    1838:	1b a5       	lds	r17, 0x6b
    183a:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    183e:	de 01       	movw	r26, r28
    1840:	9c 96       	adiw	r26, 0x2c	; 44
    1842:	ef ef       	ldi	r30, 0xFF	; 255
    1844:	f1 e0       	ldi	r31, 0x01	; 1
    1846:	28 e0       	ldi	r18, 0x08	; 8
    1848:	01 90       	ld	r0, Z+
    184a:	0d 92       	st	X+, r0
    184c:	21 50       	subi	r18, 0x01	; 1
    184e:	e1 f7       	brne	.-8      	; 0x1848 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    1850:	e9 2f       	mov	r30, r25
    1852:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	9f 01       	movw	r18, r30
    1858:	22 0f       	add	r18, r18
    185a:	33 1f       	adc	r19, r19
    185c:	22 0f       	add	r18, r18
    185e:	33 1f       	adc	r19, r19
    1860:	a9 01       	movw	r20, r18
    1862:	44 0f       	add	r20, r20
    1864:	55 1f       	adc	r21, r21
    1866:	44 0f       	add	r20, r20
    1868:	55 1f       	adc	r21, r21
    186a:	44 0f       	add	r20, r20
    186c:	55 1f       	adc	r21, r21
    186e:	42 1b       	sub	r20, r18
    1870:	53 0b       	sbc	r21, r19
    1872:	4e 0f       	add	r20, r30
    1874:	5f 1f       	adc	r21, r31
    1876:	55 95       	asr	r21
    1878:	47 95       	ror	r20
    187a:	55 95       	asr	r21
    187c:	47 95       	ror	r20
    187e:	55 95       	asr	r21
    1880:	47 95       	ror	r20
    1882:	55 95       	asr	r21
    1884:	47 95       	ror	r20
    1886:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1888:	fe 01       	movw	r30, r28
    188a:	e4 0f       	add	r30, r20
    188c:	f1 1d       	adc	r31, r1
    188e:	24 a5       	lds	r18, 0x64
    1890:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    1894:	de 01       	movw	r26, r28
    1896:	d4 96       	adiw	r26, 0x34	; 52
    1898:	e7 e0       	ldi	r30, 0x07	; 7
    189a:	f2 e0       	ldi	r31, 0x02	; 2
    189c:	28 e0       	ldi	r18, 0x08	; 8
    189e:	01 90       	ld	r0, Z+
    18a0:	0d 92       	st	X+, r0
    18a2:	21 50       	subi	r18, 0x01	; 1
    18a4:	e1 f7       	brne	.-8      	; 0x189e <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    18a6:	29 2f       	mov	r18, r25
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	20 7e       	andi	r18, 0xE0	; 224
    18ac:	30 70       	andi	r19, 0x00	; 0
    18ae:	35 95       	asr	r19
    18b0:	27 95       	ror	r18
    18b2:	35 95       	asr	r19
    18b4:	27 95       	ror	r18
    18b6:	35 95       	asr	r19
    18b8:	27 95       	ror	r18
    18ba:	83 70       	andi	r24, 0x03	; 3
    18bc:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    18be:	42 2f       	mov	r20, r18
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	ca 01       	movw	r24, r20
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	9c 01       	movw	r18, r24
    18ce:	22 0f       	add	r18, r18
    18d0:	33 1f       	adc	r19, r19
    18d2:	22 0f       	add	r18, r18
    18d4:	33 1f       	adc	r19, r19
    18d6:	22 0f       	add	r18, r18
    18d8:	33 1f       	adc	r19, r19
    18da:	28 1b       	sub	r18, r24
    18dc:	39 0b       	sbc	r19, r25
    18de:	42 0f       	add	r20, r18
    18e0:	53 1f       	adc	r21, r19
    18e2:	ca 01       	movw	r24, r20
    18e4:	95 95       	asr	r25
    18e6:	87 95       	ror	r24
    18e8:	95 95       	asr	r25
    18ea:	87 95       	ror	r24
    18ec:	95 95       	asr	r25
    18ee:	87 95       	ror	r24
    18f0:	95 95       	asr	r25
    18f2:	87 95       	ror	r24
    18f4:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    18f6:	fe 01       	movw	r30, r28
    18f8:	e8 0f       	add	r30, r24
    18fa:	f1 1d       	adc	r31, r1
    18fc:	84 a9       	sts	0x44, r24
    18fe:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    1902:	de 01       	movw	r26, r28
    1904:	dc 96       	adiw	r26, 0x3c	; 60
    1906:	ef e0       	ldi	r30, 0x0F	; 15
    1908:	f2 e0       	ldi	r31, 0x02	; 2
    190a:	88 e0       	ldi	r24, 0x08	; 8
    190c:	01 90       	ld	r0, Z+
    190e:	0d 92       	st	X+, r0
    1910:	81 50       	subi	r24, 0x01	; 1
    1912:	e1 f7       	brne	.-8      	; 0x190c <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    1914:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    1916:	46 2f       	mov	r20, r22
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	ca 01       	movw	r24, r20
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	9c 01       	movw	r18, r24
    1926:	22 0f       	add	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	22 0f       	add	r18, r18
    1930:	33 1f       	adc	r19, r19
    1932:	28 1b       	sub	r18, r24
    1934:	39 0b       	sbc	r19, r25
    1936:	42 0f       	add	r20, r18
    1938:	53 1f       	adc	r21, r19
    193a:	ca 01       	movw	r24, r20
    193c:	95 95       	asr	r25
    193e:	87 95       	ror	r24
    1940:	95 95       	asr	r25
    1942:	87 95       	ror	r24
    1944:	95 95       	asr	r25
    1946:	87 95       	ror	r24
    1948:	95 95       	asr	r25
    194a:	87 95       	ror	r24
    194c:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    194e:	fe 01       	movw	r30, r28
    1950:	e8 0f       	add	r30, r24
    1952:	f1 1d       	adc	r31, r1
    1954:	84 ad       	sts	0x64, r24
    1956:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    195a:	21 2f       	mov	r18, r17
    195c:	26 95       	lsr	r18
    195e:	27 95       	ror	r18
    1960:	22 27       	eor	r18, r18
    1962:	27 95       	ror	r18
    1964:	81 2f       	mov	r24, r17
    1966:	81 70       	andi	r24, 0x01	; 1
    1968:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    196a:	81 2f       	mov	r24, r17
    196c:	86 95       	lsr	r24
    196e:	86 95       	lsr	r24
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	81 70       	andi	r24, 0x01	; 1
    1974:	90 70       	andi	r25, 0x00	; 0
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    197e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1980:	81 2f       	mov	r24, r17
    1982:	86 95       	lsr	r24
    1984:	86 95       	lsr	r24
    1986:	86 95       	lsr	r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	81 70       	andi	r24, 0x01	; 1
    198c:	90 70       	andi	r25, 0x00	; 0
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1992:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1994:	81 2f       	mov	r24, r17
    1996:	82 95       	swap	r24
    1998:	8f 70       	andi	r24, 0x0F	; 15
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	81 70       	andi	r24, 0x01	; 1
    199e:	90 70       	andi	r25, 0x00	; 0
    19a0:	82 95       	swap	r24
    19a2:	92 95       	swap	r25
    19a4:	90 7f       	andi	r25, 0xF0	; 240
    19a6:	98 27       	eor	r25, r24
    19a8:	80 7f       	andi	r24, 0xF0	; 240
    19aa:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    19ac:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    19ae:	81 2f       	mov	r24, r17
    19b0:	82 95       	swap	r24
    19b2:	86 95       	lsr	r24
    19b4:	87 70       	andi	r24, 0x07	; 7
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	81 70       	andi	r24, 0x01	; 1
    19ba:	90 70       	andi	r25, 0x00	; 0
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	82 95       	swap	r24
    19c2:	92 95       	swap	r25
    19c4:	90 7f       	andi	r25, 0xF0	; 240
    19c6:	98 27       	eor	r25, r24
    19c8:	80 7f       	andi	r24, 0xF0	; 240
    19ca:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    19cc:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    19ce:	81 2f       	mov	r24, r17
    19d0:	82 95       	swap	r24
    19d2:	86 95       	lsr	r24
    19d4:	86 95       	lsr	r24
    19d6:	83 70       	andi	r24, 0x03	; 3
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	90 70       	andi	r25, 0x00	; 0
    19de:	00 24       	eor	r0, r0
    19e0:	96 95       	lsr	r25
    19e2:	87 95       	ror	r24
    19e4:	07 94       	ror	r0
    19e6:	96 95       	lsr	r25
    19e8:	87 95       	ror	r24
    19ea:	07 94       	ror	r0
    19ec:	98 2f       	mov	r25, r24
    19ee:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    19f0:	82 2b       	or	r24, r18
    19f2:	80 93 7e 03 	sts	0x037E, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    19f6:	87 2f       	mov	r24, r23
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	81 70       	andi	r24, 0x01	; 1
    19fc:	90 70       	andi	r25, 0x00	; 0
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1a0a:	90 91 80 03 	lds	r25, 0x0380
    1a0e:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1a10:	89 2b       	or	r24, r25
    1a12:	11 1f       	adc	r17, r17
    1a14:	11 27       	eor	r17, r17
    1a16:	11 1f       	adc	r17, r17
    1a18:	11 0f       	add	r17, r17
    1a1a:	11 0f       	add	r17, r17
    1a1c:	81 2b       	or	r24, r17
    1a1e:	80 93 80 03 	sts	0x0380, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1a22:	0e 94 27 08 	call	0x104e	; 0x104e <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    1a26:	80 91 80 03 	lds	r24, 0x0380
    1a2a:	8f 77       	andi	r24, 0x7F	; 127
    1a2c:	80 93 80 03 	sts	0x0380, r24
	
	current_patch.mode = MEMORY;
    1a30:	10 92 07 03 	sts	0x0307, r1
	
}
    1a34:	cd 5b       	subi	r28, 0xBD	; 189
    1a36:	df 4f       	sbci	r29, 0xFF	; 255
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	08 95       	ret

00001a4a <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1a4a:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    1a4e:	60 3f       	cpi	r22, 0xF0	; 240
    1a50:	11 f4       	brne	.+4      	; 0x1a56 <transpose_note+0xc>
    1a52:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    1a56:	29 2f       	mov	r18, r25
    1a58:	22 0f       	add	r18, r18
    1a5a:	92 0f       	add	r25, r18
    1a5c:	99 0f       	add	r25, r25
    1a5e:	99 0f       	add	r25, r25
    1a60:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1a62:	89 38       	cpi	r24, 0x89	; 137
    1a64:	08 f0       	brcs	.+2      	; 0x1a68 <transpose_note+0x1e>
    1a66:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1a68:	08 95       	ret

00001a6a <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1a6a:	80 91 7e 03 	lds	r24, 0x037E
    1a6e:	98 2f       	mov	r25, r24
    1a70:	96 95       	lsr	r25
    1a72:	96 95       	lsr	r25
    1a74:	96 95       	lsr	r25
    1a76:	90 ff       	sbrs	r25, 0
    1a78:	0e c0       	rjmp	.+28     	; 0x1a96 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1a7a:	90 91 08 03 	lds	r25, 0x0308
    1a7e:	9f 5f       	subi	r25, 0xFF	; 255
    1a80:	90 93 08 03 	sts	0x0308, r25
    1a84:	95 30       	cpi	r25, 0x05	; 5
    1a86:	19 f4       	brne	.+6      	; 0x1a8e <update_octave_range+0x24>
    1a88:	94 e0       	ldi	r25, 0x04	; 4
    1a8a:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1a8e:	98 e0       	ldi	r25, 0x08	; 8
    1a90:	89 27       	eor	r24, r25
    1a92:	80 93 7e 03 	sts	0x037E, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1a96:	80 91 7f 03 	lds	r24, 0x037F
    1a9a:	98 2f       	mov	r25, r24
    1a9c:	96 95       	lsr	r25
    1a9e:	96 95       	lsr	r25
    1aa0:	96 95       	lsr	r25
    1aa2:	90 ff       	sbrs	r25, 0
    1aa4:	0b c0       	rjmp	.+22     	; 0x1abc <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1aa6:	90 91 08 03 	lds	r25, 0x0308
    1aaa:	99 23       	and	r25, r25
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <update_octave_range+0x4a>
    1aae:	91 50       	subi	r25, 0x01	; 1
    1ab0:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1ab4:	98 e0       	ldi	r25, 0x08	; 8
    1ab6:	89 27       	eor	r24, r25
    1ab8:	80 93 7f 03 	sts	0x037F, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1abc:	80 91 08 03 	lds	r24, 0x0308
    1ac0:	e1 e2       	ldi	r30, 0x21	; 33
    1ac2:	f2 e0       	ldi	r31, 0x02	; 2
    1ac4:	e8 0f       	add	r30, r24
    1ac6:	f1 1d       	adc	r31, r1
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	00 80       	ld	r0, Z
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <update_octave_range+0x6a>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <update_octave_range+0x66>
    1ad8:	58 2f       	mov	r21, r24
    1ada:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1ade:	90 91 7f 03 	lds	r25, 0x037F
    1ae2:	29 2f       	mov	r18, r25
    1ae4:	26 95       	lsr	r18
    1ae6:	26 95       	lsr	r18
    1ae8:	20 ff       	sbrs	r18, 0
    1aea:	0e c0       	rjmp	.+28     	; 0x1b08 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1aec:	80 91 09 03 	lds	r24, 0x0309
    1af0:	8f 5f       	subi	r24, 0xFF	; 255
    1af2:	80 93 09 03 	sts	0x0309, r24
    1af6:	85 30       	cpi	r24, 0x05	; 5
    1af8:	19 f4       	brne	.+6      	; 0x1b00 <update_octave_range+0x96>
    1afa:	84 e0       	ldi	r24, 0x04	; 4
    1afc:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1b00:	84 e0       	ldi	r24, 0x04	; 4
    1b02:	98 27       	eor	r25, r24
    1b04:	90 93 7f 03 	sts	0x037F, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1b08:	90 91 7f 03 	lds	r25, 0x037F
    1b0c:	29 2f       	mov	r18, r25
    1b0e:	26 95       	lsr	r18
    1b10:	20 ff       	sbrs	r18, 0
    1b12:	0b c0       	rjmp	.+22     	; 0x1b2a <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1b14:	80 91 09 03 	lds	r24, 0x0309
    1b18:	88 23       	and	r24, r24
    1b1a:	19 f0       	breq	.+6      	; 0x1b22 <update_octave_range+0xb8>
    1b1c:	81 50       	subi	r24, 0x01	; 1
    1b1e:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	98 27       	eor	r25, r24
    1b26:	90 93 7f 03 	sts	0x037F, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1b2a:	40 91 00 03 	lds	r20, 0x0300
    1b2e:	4c 7f       	andi	r20, 0xFC	; 252
    1b30:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1b34:	90 91 09 03 	lds	r25, 0x0309
    1b38:	93 30       	cpi	r25, 0x03	; 3
    1b3a:	88 f0       	brcs	.+34     	; 0x1b5e <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1b3c:	ec e1       	ldi	r30, 0x1C	; 28
    1b3e:	f2 e0       	ldi	r31, 0x02	; 2
    1b40:	e9 0f       	add	r30, r25
    1b42:	f1 1d       	adc	r31, r1
    1b44:	21 e0       	ldi	r18, 0x01	; 1
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	c9 01       	movw	r24, r18
    1b4a:	00 80       	ld	r0, Z
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <update_octave_range+0xe8>
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	0a 94       	dec	r0
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <update_octave_range+0xe4>
    1b56:	84 2b       	or	r24, r20
    1b58:	80 93 00 03 	sts	0x0300, r24
    1b5c:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1b5e:	ec e1       	ldi	r30, 0x1C	; 28
    1b60:	f2 e0       	ldi	r31, 0x02	; 2
    1b62:	e9 0f       	add	r30, r25
    1b64:	f1 1d       	adc	r31, r1
    1b66:	21 e0       	ldi	r18, 0x01	; 1
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	c9 01       	movw	r24, r18
    1b6c:	00 80       	ld	r0, Z
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <update_octave_range+0x10a>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <update_octave_range+0x106>
    1b78:	85 2b       	or	r24, r21
    1b7a:	80 93 01 03 	sts	0x0301, r24
    1b7e:	08 95       	ret

00001b80 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1b80:	80 91 7f 03 	lds	r24, 0x037F
    1b84:	88 23       	and	r24, r24
    1b86:	64 f4       	brge	.+24     	; 0x1ba0 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1b88:	80 58       	subi	r24, 0x80	; 128
    1b8a:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1b8e:	80 91 0a 03 	lds	r24, 0x030A
    1b92:	8f 5f       	subi	r24, 0xFF	; 255
    1b94:	80 93 0a 03 	sts	0x030A, r24
    1b98:	85 30       	cpi	r24, 0x05	; 5
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <update_lfo_shape+0x20>
    1b9c:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1ba0:	e0 91 0a 03 	lds	r30, 0x030A
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	ee 0f       	add	r30, r30
    1ba8:	ff 1f       	adc	r31, r31
    1baa:	ea 5d       	subi	r30, 0xDA	; 218
    1bac:	fd 4f       	sbci	r31, 0xFD	; 253
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	01 80       	ldd	r0, Z+1	; 0x01
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <update_lfo_shape+0x3a>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1bbe:	90 91 ff 02 	lds	r25, 0x02FF
    1bc2:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1bc4:	89 2b       	or	r24, r25
    1bc6:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1bca:	80 81       	ld	r24, Z
    1bcc:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1bce:	ed ed       	ldi	r30, 0xDD	; 221
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 62       	ori	r24, 0x20	; 32
    1bd6:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1bd8:	80 81       	ld	r24, Z
    1bda:	8f 7d       	andi	r24, 0xDF	; 223
    1bdc:	80 83       	st	Z, r24
	
}		
    1bde:	08 95       	ret

00001be0 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1be0:	80 91 7f 03 	lds	r24, 0x037F
    1be4:	80 ff       	sbrs	r24, 0
    1be6:	0f c0       	rjmp	.+30     	; 0x1c06 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	89 27       	eor	r24, r25
    1bec:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1bf0:	80 91 0b 03 	lds	r24, 0x030B
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	80 93 0b 03 	sts	0x030B, r24
    1bfa:	85 30       	cpi	r24, 0x05	; 5
    1bfc:	11 f4       	brne	.+4      	; 0x1c02 <update_lfo_sync+0x22>
    1bfe:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1c02:	10 92 d3 03 	sts	0x03D3, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1c06:	60 91 ff 02 	lds	r22, 0x02FF
    1c0a:	60 7f       	andi	r22, 0xF0	; 240
    1c0c:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1c10:	20 91 0b 03 	lds	r18, 0x030B
    1c14:	22 23       	and	r18, r18
    1c16:	71 f0       	breq	.+28     	; 0x1c34 <update_lfo_sync+0x54>
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	21 50       	subi	r18, 0x01	; 1
    1c1c:	30 40       	sbci	r19, 0x00	; 0
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	ca 01       	movw	r24, r20
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <update_lfo_sync+0x4a>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	2a 95       	dec	r18
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <update_lfo_sync+0x46>
    1c2e:	86 2b       	or	r24, r22
    1c30:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1c34:	80 91 ff 02 	lds	r24, 0x02FF
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	8f 70       	andi	r24, 0x0F	; 15
    1c3c:	90 70       	andi	r25, 0x00	; 0
    1c3e:	82 30       	cpi	r24, 0x02	; 2
    1c40:	91 05       	cpc	r25, r1
    1c42:	89 f0       	breq	.+34     	; 0x1c66 <update_lfo_sync+0x86>
    1c44:	83 30       	cpi	r24, 0x03	; 3
    1c46:	91 05       	cpc	r25, r1
    1c48:	24 f4       	brge	.+8      	; 0x1c52 <update_lfo_sync+0x72>
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	b9 f4       	brne	.+46     	; 0x1c7e <update_lfo_sync+0x9e>
    1c50:	07 c0       	rjmp	.+14     	; 0x1c60 <update_lfo_sync+0x80>
    1c52:	84 30       	cpi	r24, 0x04	; 4
    1c54:	91 05       	cpc	r25, r1
    1c56:	59 f0       	breq	.+22     	; 0x1c6e <update_lfo_sync+0x8e>
    1c58:	88 30       	cpi	r24, 0x08	; 8
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	81 f4       	brne	.+32     	; 0x1c7e <update_lfo_sync+0x9e>
    1c5e:	0b c0       	rjmp	.+22     	; 0x1c76 <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1c60:	10 92 d2 03 	sts	0x03D2, r1
			
			break;
    1c64:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			midi_clock.divider = 24; //1:4
    1c66:	88 e1       	ldi	r24, 0x18	; 24
    1c68:	80 93 d2 03 	sts	0x03D2, r24
			break;
    1c6c:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1c6e:	8c e0       	ldi	r24, 0x0C	; 12
    1c70:	80 93 d2 03 	sts	0x03D2, r24
			break;
    1c74:	08 95       	ret
			
		case 0b1000:
			midi_clock.divider = 6; //1:16	 		
    1c76:	86 e0       	ldi	r24, 0x06	; 6
    1c78:	80 93 d2 03 	sts	0x03D2, r24
			break;
    1c7c:	08 95       	ret
		
		default:
			midi_clock.divider = 0; //need to turn midi sync off here. How?
    1c7e:	10 92 d2 03 	sts	0x03D2, r1
    1c82:	08 95       	ret

00001c84 <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1c84:	80 91 7f 03 	lds	r24, 0x037F
    1c88:	98 2f       	mov	r25, r24
    1c8a:	92 95       	swap	r25
    1c8c:	96 95       	lsr	r25
    1c8e:	96 95       	lsr	r25
    1c90:	93 70       	andi	r25, 0x03	; 3
    1c92:	90 ff       	sbrs	r25, 0
    1c94:	0f c0       	rjmp	.+30     	; 0x1cb4 <update_arp_sync+0x30>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1c96:	90 e4       	ldi	r25, 0x40	; 64
    1c98:	89 27       	eor	r24, r25
    1c9a:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1c9e:	80 91 0c 03 	lds	r24, 0x030C
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	80 93 0c 03 	sts	0x030C, r24
    1ca8:	85 30       	cpi	r24, 0x05	; 5
    1caa:	11 f4       	brne	.+4      	; 0x1cb0 <update_arp_sync+0x2c>
    1cac:	10 92 0c 03 	sts	0x030C, r1
		system_clock.ppqn_counter = 0; //reset counter
    1cb0:	10 92 cd 03 	sts	0x03CD, r1
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1cb4:	60 91 00 03 	lds	r22, 0x0300
    1cb8:	63 7c       	andi	r22, 0xC3	; 195
    1cba:	60 93 00 03 	sts	0x0300, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1cbe:	20 91 0c 03 	lds	r18, 0x030C
    1cc2:	22 23       	and	r18, r18
    1cc4:	71 f0       	breq	.+28     	; 0x1ce2 <update_arp_sync+0x5e>
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	2f 5f       	subi	r18, 0xFF	; 255
    1cca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	ca 01       	movw	r24, r20
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <update_arp_sync+0x54>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	2a 95       	dec	r18
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <update_arp_sync+0x50>
    1cdc:	86 2b       	or	r24, r22
    1cde:	80 93 00 03 	sts	0x0300, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1ce2:	80 91 00 03 	lds	r24, 0x0300
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	8c 73       	andi	r24, 0x3C	; 60
    1cea:	90 70       	andi	r25, 0x00	; 0
    1cec:	88 30       	cpi	r24, 0x08	; 8
    1cee:	91 05       	cpc	r25, r1
    1cf0:	91 f0       	breq	.+36     	; 0x1d16 <update_arp_sync+0x92>
    1cf2:	89 30       	cpi	r24, 0x09	; 9
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	24 f4       	brge	.+8      	; 0x1d00 <update_arp_sync+0x7c>
    1cf8:	84 30       	cpi	r24, 0x04	; 4
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	c1 f4       	brne	.+48     	; 0x1d2e <update_arp_sync+0xaa>
    1cfe:	07 c0       	rjmp	.+14     	; 0x1d0e <update_arp_sync+0x8a>
    1d00:	80 31       	cpi	r24, 0x10	; 16
    1d02:	91 05       	cpc	r25, r1
    1d04:	61 f0       	breq	.+24     	; 0x1d1e <update_arp_sync+0x9a>
    1d06:	80 32       	cpi	r24, 0x20	; 32
    1d08:	91 05       	cpc	r25, r1
    1d0a:	89 f4       	brne	.+34     	; 0x1d2e <update_arp_sync+0xaa>
    1d0c:	0c c0       	rjmp	.+24     	; 0x1d26 <update_arp_sync+0xa2>
			
		case 0b00000100:
			system_clock.divider = 48; //1:2
    1d0e:	80 e3       	ldi	r24, 0x30	; 48
    1d10:	80 93 cc 03 	sts	0x03CC, r24
			break;
    1d14:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = 24; //1:4
    1d16:	88 e1       	ldi	r24, 0x18	; 24
    1d18:	80 93 cc 03 	sts	0x03CC, r24
			break;
    1d1c:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = 12; //1:8
    1d1e:	8c e0       	ldi	r24, 0x0C	; 12
    1d20:	80 93 cc 03 	sts	0x03CC, r24
			break;
    1d24:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = 6; //1:16	
    1d26:	86 e0       	ldi	r24, 0x06	; 6
    1d28:	80 93 cc 03 	sts	0x03CC, r24
			break;
    1d2c:	08 95       	ret
			
		default:
			system_clock.divider = 2; //should be 1 but this never turns arp_sync_led off - need to fix this	
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	80 93 cc 03 	sts	0x03CC, r24
    1d34:	08 95       	ret

00001d36 <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1d36:	80 91 7f 03 	lds	r24, 0x037F
    1d3a:	80 31       	cpi	r24, 0x10	; 16
    1d3c:	69 f4       	brne	.+26     	; 0x1d58 <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1d3e:	10 92 7f 03 	sts	0x037F, r1
		
		if (++arp_range == 4) arp_range = 0;
    1d42:	80 91 0d 03 	lds	r24, 0x030D
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	80 93 0d 03 	sts	0x030D, r24
    1d4c:	84 30       	cpi	r24, 0x04	; 4
    1d4e:	11 f4       	brne	.+4      	; 0x1d54 <update_arp_range+0x1e>
    1d50:	10 92 0d 03 	sts	0x030D, r1
		arp.step_position = 0; //reset step position if range changes
    1d54:	10 92 86 03 	sts	0x0386, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1d58:	80 91 fe 02 	lds	r24, 0x02FE
    1d5c:	8d 7f       	andi	r24, 0xFD	; 253
    1d5e:	80 93 fe 02 	sts	0x02FE, r24
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1d62:	80 91 00 03 	lds	r24, 0x0300
    1d66:	8f 73       	andi	r24, 0x3F	; 63
    1d68:	80 93 00 03 	sts	0x0300, r24
	
	arp.range = arp_range;
    1d6c:	80 91 0d 03 	lds	r24, 0x030D
    1d70:	80 93 84 03 	sts	0x0384, r24
	
	update_arp_sequence(); //update sequence with new settings
    1d74:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1d78:	80 91 0d 03 	lds	r24, 0x030D
    1d7c:	82 30       	cpi	r24, 0x02	; 2
    1d7e:	51 f0       	breq	.+20     	; 0x1d94 <update_arp_range+0x5e>
    1d80:	83 30       	cpi	r24, 0x03	; 3
    1d82:	71 f0       	breq	.+28     	; 0x1da0 <update_arp_range+0x6a>
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	89 f4       	brne	.+34     	; 0x1daa <update_arp_range+0x74>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1d88:	80 91 fe 02 	lds	r24, 0x02FE
    1d8c:	82 60       	ori	r24, 0x02	; 2
    1d8e:	80 93 fe 02 	sts	0x02FE, r24
			break;
    1d92:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1d94:	80 91 00 03 	lds	r24, 0x0300
    1d98:	80 64       	ori	r24, 0x40	; 64
    1d9a:	80 93 00 03 	sts	0x0300, r24
			break;
    1d9e:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1da0:	80 91 00 03 	lds	r24, 0x0300
    1da4:	80 68       	ori	r24, 0x80	; 128
    1da6:	80 93 00 03 	sts	0x0300, r24
    1daa:	08 95       	ret

00001dac <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1dac:	80 91 7f 03 	lds	r24, 0x037F
    1db0:	98 2f       	mov	r25, r24
    1db2:	92 95       	swap	r25
    1db4:	96 95       	lsr	r25
    1db6:	97 70       	andi	r25, 0x07	; 7
    1db8:	90 ff       	sbrs	r25, 0
    1dba:	0f c0       	rjmp	.+30     	; 0x1dda <update_arp_mode+0x2e>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1dbc:	90 e2       	ldi	r25, 0x20	; 32
    1dbe:	89 27       	eor	r24, r25
    1dc0:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_mode == 5) arp_mode = 0;
    1dc4:	80 91 0e 03 	lds	r24, 0x030E
    1dc8:	8f 5f       	subi	r24, 0xFF	; 255
    1dca:	80 93 0e 03 	sts	0x030E, r24
    1dce:	85 30       	cpi	r24, 0x05	; 5
    1dd0:	11 f4       	brne	.+4      	; 0x1dd6 <update_arp_mode+0x2a>
    1dd2:	10 92 0e 03 	sts	0x030E, r1
		arp.step_position = 0; //reset step position if mode changes
    1dd6:	10 92 86 03 	sts	0x0386, r1
		
	}

	arp.clock_source = INTERNAL_CLOCK;	
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	80 93 8a 03 	sts	0x038A, r24

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1de0:	90 91 fe 02 	lds	r25, 0x02FE
    1de4:	93 7c       	andi	r25, 0xC3	; 195
    1de6:	90 93 fe 02 	sts	0x02FE, r25
	
	switch(arp_mode) {
    1dea:	80 91 0e 03 	lds	r24, 0x030E
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	81 f0       	breq	.+32     	; 0x1e12 <update_arp_mode+0x66>
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	28 f0       	brcs	.+10     	; 0x1e00 <update_arp_mode+0x54>
    1df6:	82 30       	cpi	r24, 0x02	; 2
    1df8:	91 f0       	breq	.+36     	; 0x1e1e <update_arp_mode+0x72>
    1dfa:	83 30       	cpi	r24, 0x03	; 3
    1dfc:	f1 f4       	brne	.+60     	; 0x1e3a <update_arp_mode+0x8e>
    1dfe:	16 c0       	rjmp	.+44     	; 0x1e2c <update_arp_mode+0x80>
		
		case 0:
		
			//turn arp off
			arp.clock_source = OFF;
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	80 93 8a 03 	sts	0x038A, r24
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    1e06:	80 91 b0 02 	lds	r24, 0x02B0
    1e0a:	88 23       	and	r24, r24
    1e0c:	e1 f4       	brne	.+56     	; 0x1e46 <update_arp_mode+0x9a>
    1e0e:	89 98       	cbi	0x11, 1	; 17
    1e10:	1a c0       	rjmp	.+52     	; 0x1e46 <update_arp_mode+0x9a>
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1e12:	94 62       	ori	r25, 0x24	; 36
    1e14:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP;
    1e18:	10 92 8b 03 	sts	0x038B, r1
			break;	
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <update_arp_mode+0x9a>
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1e1e:	94 61       	ori	r25, 0x14	; 20
    1e20:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = DOWN;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	80 93 8b 03 	sts	0x038B, r24
			break;
    1e2a:	0d c0       	rjmp	.+26     	; 0x1e46 <update_arp_mode+0x9a>
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1e2c:	94 63       	ori	r25, 0x34	; 52
    1e2e:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP_DOWN;
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	80 93 8b 03 	sts	0x038B, r24
			break;
    1e38:	06 c0       	rjmp	.+12     	; 0x1e46 <update_arp_mode+0x9a>
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1e3a:	9c 60       	ori	r25, 0x0C	; 12
    1e3c:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = RANDOM;
    1e40:	83 e0       	ldi	r24, 0x03	; 3
    1e42:	80 93 8b 03 	sts	0x038B, r24
			
					
		
	}
	
	update_arp_sequence(); //update arp sequence with new mode
    1e46:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	



}
    1e4a:	08 95       	ret

00001e4c <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e4c:	90 91 7e 03 	lds	r25, 0x037E
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1e50:	80 91 80 03 	lds	r24, 0x0380
    1e54:	86 95       	lsr	r24
    1e56:	86 95       	lsr	r24
    1e58:	68 2f       	mov	r22, r24
    1e5a:	67 95       	ror	r22
    1e5c:	66 27       	eor	r22, r22
    1e5e:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e60:	29 2f       	mov	r18, r25
    1e62:	21 70       	andi	r18, 0x01	; 1
    1e64:	26 2b       	or	r18, r22
    1e66:	69 2f       	mov	r22, r25
    1e68:	66 1f       	adc	r22, r22
    1e6a:	66 27       	eor	r22, r22
    1e6c:	66 1f       	adc	r22, r22
    1e6e:	66 0f       	add	r22, r22
    1e70:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1e72:	29 2f       	mov	r18, r25
    1e74:	26 95       	lsr	r18
    1e76:	26 95       	lsr	r18
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	21 70       	andi	r18, 0x01	; 1
    1e7c:	30 70       	andi	r19, 0x00	; 0
    1e7e:	d9 01       	movw	r26, r18
    1e80:	aa 0f       	add	r26, r26
    1e82:	bb 1f       	adc	r27, r27
    1e84:	aa 0f       	add	r26, r26
    1e86:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e88:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1e8a:	a9 2f       	mov	r26, r25
    1e8c:	a6 95       	lsr	r26
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	a1 70       	andi	r26, 0x01	; 1
    1e92:	b0 70       	andi	r27, 0x00	; 0
    1e94:	fd 01       	movw	r30, r26
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	ee 0f       	add	r30, r30
    1e9c:	ff 1f       	adc	r31, r31
    1e9e:	ee 0f       	add	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ea2:	a6 2f       	mov	r26, r22
    1ea4:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1ea6:	e9 2f       	mov	r30, r25
    1ea8:	e2 95       	swap	r30
    1eaa:	ef 70       	andi	r30, 0x0F	; 15
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	e1 70       	andi	r30, 0x01	; 1
    1eb0:	f0 70       	andi	r31, 0x00	; 0
    1eb2:	bf 01       	movw	r22, r30
    1eb4:	62 95       	swap	r22
    1eb6:	72 95       	swap	r23
    1eb8:	70 7f       	andi	r23, 0xF0	; 240
    1eba:	76 27       	eor	r23, r22
    1ebc:	60 7f       	andi	r22, 0xF0	; 240
    1ebe:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ec0:	ea 2f       	mov	r30, r26
    1ec2:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1ec4:	69 2f       	mov	r22, r25
    1ec6:	62 95       	swap	r22
    1ec8:	66 95       	lsr	r22
    1eca:	67 70       	andi	r22, 0x07	; 7
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	61 70       	andi	r22, 0x01	; 1
    1ed0:	70 70       	andi	r23, 0x00	; 0
    1ed2:	ab 01       	movw	r20, r22
    1ed4:	44 0f       	add	r20, r20
    1ed6:	55 1f       	adc	r21, r21
    1ed8:	42 95       	swap	r20
    1eda:	52 95       	swap	r21
    1edc:	50 7f       	andi	r21, 0xF0	; 240
    1ede:	54 27       	eor	r21, r20
    1ee0:	40 7f       	andi	r20, 0xF0	; 240
    1ee2:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ee4:	6e 2f       	mov	r22, r30
    1ee6:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1ee8:	49 2f       	mov	r20, r25
    1eea:	42 95       	swap	r20
    1eec:	46 95       	lsr	r20
    1eee:	46 95       	lsr	r20
    1ef0:	43 70       	andi	r20, 0x03	; 3
    1ef2:	50 e0       	ldi	r21, 0x00	; 0
    1ef4:	41 70       	andi	r20, 0x01	; 1
    1ef6:	50 70       	andi	r21, 0x00	; 0
    1ef8:	9a 01       	movw	r18, r20
    1efa:	00 24       	eor	r0, r0
    1efc:	36 95       	lsr	r19
    1efe:	27 95       	ror	r18
    1f00:	07 94       	ror	r0
    1f02:	36 95       	lsr	r19
    1f04:	27 95       	ror	r18
    1f06:	07 94       	ror	r0
    1f08:	32 2f       	mov	r19, r18
    1f0a:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1f0c:	26 2b       	or	r18, r22
    1f0e:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1f12:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1f14:	81 95       	neg	r24
    1f16:	89 27       	eor	r24, r25
    1f18:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1f1a:	89 27       	eor	r24, r25
    1f1c:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1f20:	ed ed       	ldi	r30, 0xDD	; 221
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1f26:	90 91 80 03 	lds	r25, 0x0380
    1f2a:	96 95       	lsr	r25
    1f2c:	96 95       	lsr	r25
    1f2e:	96 95       	lsr	r25
    1f30:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1f32:	91 95       	neg	r25
    1f34:	80 81       	ld	r24, Z
    1f36:	89 27       	eor	r24, r25
    1f38:	80 71       	andi	r24, 0x10	; 16
    1f3a:	82 27       	eor	r24, r18
    1f3c:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1f3e:	ee ef       	ldi	r30, 0xFE	; 254
    1f40:	f2 e0       	ldi	r31, 0x02	; 2
    1f42:	80 81       	ld	r24, Z
    1f44:	98 27       	eor	r25, r24
    1f46:	91 70       	andi	r25, 0x01	; 1
    1f48:	89 27       	eor	r24, r25
    1f4a:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1f4c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1f50:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1f54:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    1f58:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <update_arp_sync>
	update_arp_range();
    1f5c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <update_arp_range>
	update_arp_mode();
    1f60:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    1f64:	08 95       	ret

00001f66 <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1f6a:	90 91 07 03 	lds	r25, 0x0307
    1f6e:	95 30       	cpi	r25, 0x05	; 5
    1f70:	01 f5       	brne	.+64     	; 0x1fb2 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1f72:	87 e0       	ldi	r24, 0x07	; 7
    1f74:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f76:	cd ed       	ldi	r28, 0xDD	; 221
    1f78:	d0 e0       	ldi	r29, 0x00	; 0
    1f7a:	88 81       	ld	r24, Y
    1f7c:	80 62       	ori	r24, 0x20	; 32
    1f7e:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f80:	88 81       	ld	r24, Y
    1f82:	8f 7d       	andi	r24, 0xDF	; 223
    1f84:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f86:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1f88:	0e 94 32 16 	call	0x2c64	; 0x2c64 <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1f8c:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f8e:	88 81       	ld	r24, Y
    1f90:	80 62       	ori	r24, 0x20	; 32
    1f92:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f94:	88 81       	ld	r24, Y
    1f96:	8f 7d       	andi	r24, 0xDF	; 223
    1f98:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f9a:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1f9c:	80 91 ff 02 	lds	r24, 0x02FF
    1fa0:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1fa2:	80 68       	ori	r24, 0x80	; 128
    1fa4:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1fa8:	0e 94 c1 01 	call	0x382	; 0x382 <setup_system_clock>

		current_patch.mode = MEMORY;
    1fac:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1fb0:	63 c0       	rjmp	.+198    	; 0x2078 <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1fb2:	80 91 80 03 	lds	r24, 0x0380
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	22 95       	swap	r18
    1fba:	26 95       	lsr	r18
    1fbc:	26 95       	lsr	r18
    1fbe:	23 70       	andi	r18, 0x03	; 3
    1fc0:	20 ff       	sbrs	r18, 0
    1fc2:	15 c0       	rjmp	.+42     	; 0x1fee <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1fc4:	20 e4       	ldi	r18, 0x40	; 64
    1fc6:	82 27       	eor	r24, r18
    1fc8:	80 93 80 03 	sts	0x0380, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1fcc:	80 91 03 03 	lds	r24, 0x0303
    1fd0:	8f 5f       	subi	r24, 0xFF	; 255
    1fd2:	80 93 03 03 	sts	0x0303, r24
    1fd6:	85 32       	cpi	r24, 0x25	; 37
    1fd8:	21 f4       	brne	.+8      	; 0x1fe2 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1fda:	84 e2       	ldi	r24, 0x24	; 36
    1fdc:	80 93 03 03 	sts	0x0303, r24
    1fe0:	06 c0       	rjmp	.+12     	; 0x1fee <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1fe2:	93 30       	cpi	r25, 0x03	; 3
    1fe4:	21 f0       	breq	.+8      	; 0x1fee <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1fe6:	0e 94 45 0a 	call	0x148a	; 0x148a <load_patch>
			update_patch();
    1fea:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1fee:	80 91 80 03 	lds	r24, 0x0380
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	92 95       	swap	r25
    1ff6:	96 95       	lsr	r25
    1ff8:	97 70       	andi	r25, 0x07	; 7
    1ffa:	90 ff       	sbrs	r25, 0
    1ffc:	15 c0       	rjmp	.+42     	; 0x2028 <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1ffe:	90 e2       	ldi	r25, 0x20	; 32
    2000:	89 27       	eor	r24, r25
    2002:	80 93 80 03 	sts	0x0380, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    2006:	80 91 03 03 	lds	r24, 0x0303
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	19 f0       	breq	.+6      	; 0x2014 <update_patch_programmer+0xae>
    200e:	81 50       	subi	r24, 0x01	; 1
    2010:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    2014:	80 91 07 03 	lds	r24, 0x0307
    2018:	83 30       	cpi	r24, 0x03	; 3
    201a:	31 f0       	breq	.+12     	; 0x2028 <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    201c:	80 91 03 03 	lds	r24, 0x0303
    2020:	0e 94 45 0a 	call	0x148a	; 0x148a <load_patch>
			update_patch();
    2024:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    2028:	80 91 80 03 	lds	r24, 0x0380
    202c:	98 2f       	mov	r25, r24
    202e:	92 95       	swap	r25
    2030:	9f 70       	andi	r25, 0x0F	; 15
    2032:	90 ff       	sbrs	r25, 0
    2034:	15 c0       	rjmp	.+42     	; 0x2060 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    2036:	90 e1       	ldi	r25, 0x10	; 16
    2038:	89 27       	eor	r24, r25
    203a:	80 93 80 03 	sts	0x0380, r24
		if (current_patch.mode != WRITE) {
    203e:	90 91 07 03 	lds	r25, 0x0307
    2042:	93 30       	cpi	r25, 0x03	; 3
    2044:	49 f0       	breq	.+18     	; 0x2058 <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    2046:	8f 77       	andi	r24, 0x7F	; 127
    2048:	80 93 80 03 	sts	0x0380, r24
			current_patch.mode = WRITE;
    204c:	83 e0       	ldi	r24, 0x03	; 3
    204e:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    2052:	0e 94 27 08 	call	0x104e	; 0x104e <lock_pots>
    2056:	04 c0       	rjmp	.+8      	; 0x2060 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    2058:	80 91 03 03 	lds	r24, 0x0303
    205c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    2060:	80 91 80 03 	lds	r24, 0x0380
    2064:	88 23       	and	r24, r24
    2066:	44 f4       	brge	.+16     	; 0x2078 <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    2068:	80 68       	ori	r24, 0x80	; 128
    206a:	80 93 80 03 	sts	0x0380, r24
		current_patch.mode = MANUAL;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    2074:	0e 94 41 08 	call	0x1082	; 0x1082 <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	08 95       	ret

0000207e <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    207e:	88 ed       	ldi	r24, 0xD8	; 216
    2080:	91 e0       	ldi	r25, 0x01	; 1
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    208a:	81 ee       	ldi	r24, 0xE1	; 225
    208c:	91 e0       	ldi	r25, 0x01	; 1
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2096:	82 ee       	ldi	r24, 0xE2	; 226
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    20a2:	83 eb       	ldi	r24, 0xB3	; 179
    20a4:	92 e0       	ldi	r25, 0x02	; 2
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    20ae:	8a ed       	ldi	r24, 0xDA	; 218
    20b0:	91 e0       	ldi	r25, 0x01	; 1
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    20ba:	8f ed       	ldi	r24, 0xDF	; 223
    20bc:	91 e0       	ldi	r25, 0x01	; 1
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    20c6:	80 ee       	ldi	r24, 0xE0	; 224
    20c8:	91 e0       	ldi	r25, 0x01	; 1
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    20d2:	81 ed       	ldi	r24, 0xD1	; 209
    20d4:	91 e0       	ldi	r25, 0x01	; 1
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	70 e0       	ldi	r23, 0x00	; 0
    20da:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    20de:	86 ed       	ldi	r24, 0xD6	; 214
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    20ea:	82 ed       	ldi	r24, 0xD2	; 210
    20ec:	91 e0       	ldi	r25, 0x01	; 1
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    20f6:	83 ed       	ldi	r24, 0xD3	; 211
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    2102:	84 ed       	ldi	r24, 0xD4	; 212
    2104:	91 e0       	ldi	r25, 0x01	; 1
    2106:	6f ef       	ldi	r22, 0xFF	; 255
    2108:	7f e3       	ldi	r23, 0x3F	; 63
    210a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    210e:	85 ed       	ldi	r24, 0xD5	; 213
    2110:	91 e0       	ldi	r25, 0x01	; 1
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    211a:	89 ed       	ldi	r24, 0xD9	; 217
    211c:	91 e0       	ldi	r25, 0x01	; 1
    211e:	60 e0       	ldi	r22, 0x00	; 0
    2120:	70 e0       	ldi	r23, 0x00	; 0
    2122:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2126:	8e ec       	ldi	r24, 0xCE	; 206
    2128:	91 e0       	ldi	r25, 0x01	; 1
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	70 e0       	ldi	r23, 0x00	; 0
    212e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2132:	8c ec       	ldi	r24, 0xCC	; 204
    2134:	91 e0       	ldi	r25, 0x01	; 1
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    213e:	8a ec       	ldi	r24, 0xCA	; 202
    2140:	91 e0       	ldi	r25, 0x01	; 1
    2142:	6f ef       	ldi	r22, 0xFF	; 255
    2144:	7f e3       	ldi	r23, 0x3F	; 63
    2146:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    214a:	88 ec       	ldi	r24, 0xC8	; 200
    214c:	91 e0       	ldi	r25, 0x01	; 1
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    2156:	80 ed       	ldi	r24, 0xD0	; 208
    2158:	91 e0       	ldi	r25, 0x01	; 1
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2162:	83 ee       	ldi	r24, 0xE3	; 227
    2164:	91 e0       	ldi	r25, 0x01	; 1
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    216e:	84 ee       	ldi	r24, 0xE4	; 228
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	70 e0       	ldi	r23, 0x00	; 0
    2176:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
}	
    217a:	08 95       	ret

0000217c <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    217c:	2f 92       	push	r2
    217e:	3f 92       	push	r3
    2180:	4f 92       	push	r4
    2182:	5f 92       	push	r5
    2184:	6f 92       	push	r6
    2186:	7f 92       	push	r7
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	2c 97       	sbiw	r28, 0x0c	; 12
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	08 2f       	mov	r16, r24
    21b2:	78 87       	std	Y+8, r23	; 0x08
    21b4:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    21b6:	80 91 7b 03 	lds	r24, 0x037B
    21ba:	83 60       	ori	r24, 0x03	; 3
    21bc:	80 93 7b 03 	sts	0x037B, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    21c0:	0e 94 3f 10 	call	0x207e	; 0x207e <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    21c4:	10 92 7a 03 	sts	0x037A, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    21c8:	0f 30       	cpi	r16, 0x0F	; 15
    21ca:	e1 f4       	brne	.+56     	; 0x2204 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    21cc:	0f 2e       	mov	r0, r31
    21ce:	f6 ee       	ldi	r31, 0xE6	; 230
    21d0:	4f 2e       	mov	r4, r31
    21d2:	f1 e0       	ldi	r31, 0x01	; 1
    21d4:	5f 2e       	mov	r5, r31
    21d6:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    21d8:	0f 2e       	mov	r0, r31
    21da:	fe ed       	ldi	r31, 0xDE	; 222
    21dc:	2f 2e       	mov	r2, r31
    21de:	f1 e0       	ldi	r31, 0x01	; 1
    21e0:	3f 2e       	mov	r3, r31
    21e2:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    21e4:	23 ee       	ldi	r18, 0xE3	; 227
    21e6:	31 e0       	ldi	r19, 0x01	; 1
    21e8:	3a 83       	std	Y+2, r19	; 0x02
    21ea:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    21ec:	0f 2e       	mov	r0, r31
    21ee:	fc ed       	ldi	r31, 0xDC	; 220
    21f0:	8f 2e       	mov	r8, r31
    21f2:	f1 e0       	ldi	r31, 0x01	; 1
    21f4:	9f 2e       	mov	r9, r31
    21f6:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    21f8:	82 e7       	ldi	r24, 0x72	; 114
    21fa:	96 e0       	ldi	r25, 0x06	; 6
    21fc:	9a 87       	std	Y+10, r25	; 0x0a
    21fe:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	1b c0       	rjmp	.+54     	; 0x223a <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2204:	0f 2e       	mov	r0, r31
    2206:	f5 ee       	ldi	r31, 0xE5	; 229
    2208:	4f 2e       	mov	r4, r31
    220a:	f1 e0       	ldi	r31, 0x01	; 1
    220c:	5f 2e       	mov	r5, r31
    220e:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    2210:	0f 2e       	mov	r0, r31
    2212:	f7 ed       	ldi	r31, 0xD7	; 215
    2214:	2f 2e       	mov	r2, r31
    2216:	f1 e0       	ldi	r31, 0x01	; 1
    2218:	3f 2e       	mov	r3, r31
    221a:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    221c:	e4 ee       	ldi	r30, 0xE4	; 228
    221e:	f1 e0       	ldi	r31, 0x01	; 1
    2220:	fa 83       	std	Y+2, r31	; 0x02
    2222:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2224:	0f 2e       	mov	r0, r31
    2226:	fd ed       	ldi	r31, 0xDD	; 221
    2228:	8f 2e       	mov	r8, r31
    222a:	f1 e0       	ldi	r31, 0x01	; 1
    222c:	9f 2e       	mov	r9, r31
    222e:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    2230:	20 e7       	ldi	r18, 0x70	; 112
    2232:	36 e0       	ldi	r19, 0x06	; 6
    2234:	3a 87       	std	Y+10, r19	; 0x0a
    2236:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    2238:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    223a:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    223c:	ed ed       	ldi	r30, 0xDD	; 221
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	80 64       	ori	r24, 0x40	; 64
    2244:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2246:	80 81       	ld	r24, Z
    2248:	8f 7b       	andi	r24, 0xBF	; 191
    224a:	80 83       	st	Z, r24
	DATA_BUS = 0;
    224c:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    224e:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2250:	84 b5       	in	r24, 0x24	; 36
    2252:	8f 60       	ori	r24, 0x0F	; 15
    2254:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    225a:	ee e6       	ldi	r30, 0x6E	; 110
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	90 81       	ld	r25, Z
    2260:	92 60       	ori	r25, 0x02	; 2
    2262:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    2264:	80 93 7c 03 	sts	0x037C, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    2268:	8d e0       	ldi	r24, 0x0D	; 13
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9c 83       	std	Y+4, r25	; 0x04
    226e:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    2270:	80 2f       	mov	r24, r16
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	8c 01       	movw	r16, r24
    2276:	0f 5f       	subi	r16, 0xFF	; 255
    2278:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    227a:	0f 2e       	mov	r0, r31
    227c:	f8 ed       	ldi	r31, 0xD8	; 216
    227e:	ef 2e       	mov	r14, r31
    2280:	f1 e0       	ldi	r31, 0x01	; 1
    2282:	ff 2e       	mov	r15, r31
    2284:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    2286:	0f 2e       	mov	r0, r31
    2288:	f4 ed       	ldi	r31, 0xD4	; 212
    228a:	cf 2e       	mov	r12, r31
    228c:	f1 e0       	ldi	r31, 0x01	; 1
    228e:	df 2e       	mov	r13, r31
    2290:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    2292:	0f 2e       	mov	r0, r31
    2294:	fa ec       	ldi	r31, 0xCA	; 202
    2296:	af 2e       	mov	r10, r31
    2298:	f1 e0       	ldi	r31, 0x01	; 1
    229a:	bf 2e       	mov	r11, r31
    229c:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    229e:	0f 2e       	mov	r0, r31
    22a0:	fb ec       	ldi	r31, 0xCB	; 203
    22a2:	6f 2e       	mov	r6, r31
    22a4:	f1 e0       	ldi	r31, 0x01	; 1
    22a6:	7f 2e       	mov	r7, r31
    22a8:	f0 2d       	mov	r31, r0
    22aa:	e0 e0       	ldi	r30, 0x00	; 0
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	fc 87       	std	Y+12, r31	; 0x0c
    22b0:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    22b2:	21 e0       	ldi	r18, 0x01	; 1
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	0b 80       	ldd	r0, Y+3	; 0x03
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <set_vco_init_cv+0x142>
    22ba:	22 0f       	add	r18, r18
    22bc:	33 1f       	adc	r19, r19
    22be:	0a 94       	dec	r0
    22c0:	e2 f7       	brpl	.-8      	; 0x22ba <set_vco_init_cv+0x13e>
    22c2:	3e 83       	std	Y+6, r19	; 0x06
    22c4:	2d 83       	std	Y+5, r18	; 0x05
    22c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    22c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    22ca:	82 2b       	or	r24, r18
    22cc:	93 2b       	or	r25, r19
    22ce:	9c 87       	std	Y+12, r25	; 0x0c
    22d0:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    22d2:	c4 01       	movw	r24, r8
    22d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
		
		
		count_finished = FALSE;
    22dc:	10 92 7a 03 	sts	0x037A, r1
		period_counter = 0;
    22e0:	10 92 7d 03 	sts	0x037D, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    22e4:	8f e0       	ldi	r24, 0x0F	; 15
    22e6:	e8 e1       	ldi	r30, 0x18	; 24
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	a8 95       	wdr
    22f0:	e0 93 60 00 	sts	0x0060, r30
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    22fa:	80 91 7a 03 	lds	r24, 0x037A
    22fe:	88 23       	and	r24, r24
    2300:	89 f5       	brne	.+98     	; 0x2364 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    2302:	c8 01       	movw	r24, r16
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	0e 94 0d 03 	call	0x61a	; 0x61a <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    230a:	c4 01       	movw	r24, r8
    230c:	6b 85       	ldd	r22, Y+11	; 0x0b
    230e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2310:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    2314:	c1 01       	movw	r24, r2
    2316:	6f ef       	ldi	r22, 0xFF	; 255
    2318:	7f e3       	ldi	r23, 0x3F	; 63
    231a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    231e:	c7 01       	movw	r24, r14
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    2328:	c6 01       	movw	r24, r12
    232a:	6f ef       	ldi	r22, 0xFF	; 255
    232c:	7f e3       	ldi	r23, 0x3F	; 63
    232e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    2332:	c5 01       	movw	r24, r10
    2334:	6f ef       	ldi	r22, 0xFF	; 255
    2336:	7f e3       	ldi	r23, 0x3F	; 63
    2338:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    233c:	c3 01       	movw	r24, r6
    233e:	6f ef       	ldi	r22, 0xFF	; 255
    2340:	7f e3       	ldi	r23, 0x3F	; 63
    2342:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	6f ef       	ldi	r22, 0xFF	; 255
    234c:	7f e3       	ldi	r23, 0x3F	; 63
    234e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    2352:	c2 01       	movw	r24, r4
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    235c:	80 91 7a 03 	lds	r24, 0x037A
    2360:	88 23       	and	r24, r24
    2362:	79 f2       	breq	.-98     	; 0x2302 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    2364:	88 e1       	ldi	r24, 0x18	; 24
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	80 93 60 00 	sts	0x0060, r24
    236e:	10 92 60 00 	sts	0x0060, r1
    2372:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    2374:	80 91 78 03 	lds	r24, 0x0378
    2378:	90 91 79 03 	lds	r25, 0x0379
    237c:	ef 81       	ldd	r30, Y+7	; 0x07
    237e:	f8 85       	ldd	r31, Y+8	; 0x08
    2380:	e8 17       	cp	r30, r24
    2382:	f9 07       	cpc	r31, r25
    2384:	20 f0       	brcs	.+8      	; 0x238e <set_vco_init_cv+0x212>
    2386:	80 91 af 02 	lds	r24, 0x02AF
    238a:	88 23       	and	r24, r24
    238c:	51 f4       	brne	.+20     	; 0x23a2 <set_vco_init_cv+0x226>
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	80 95       	com	r24
    2394:	90 95       	com	r25
    2396:	2b 85       	ldd	r18, Y+11	; 0x0b
    2398:	3c 85       	ldd	r19, Y+12	; 0x0c
    239a:	28 23       	and	r18, r24
    239c:	39 23       	and	r19, r25
    239e:	3c 87       	std	Y+12, r19	; 0x0c
    23a0:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03
    23b2:	ef ef       	ldi	r30, 0xFF	; 255
    23b4:	8f 3f       	cpi	r24, 0xFF	; 255
    23b6:	9e 07       	cpc	r25, r30
    23b8:	09 f0       	breq	.+2      	; 0x23bc <set_vco_init_cv+0x240>
    23ba:	7b cf       	rjmp	.-266    	; 0x22b2 <set_vco_init_cv+0x136>
    23bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    23be:	3c 85       	ldd	r19, Y+12	; 0x0c
    23c0:	3e 83       	std	Y+6, r19	; 0x06
    23c2:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    23c4:	88 ec       	ldi	r24, 0xC8	; 200
    23c6:	91 e0       	ldi	r25, 0x01	; 1
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    23d0:	89 ec       	ldi	r24, 0xC9	; 201
    23d2:	91 e0       	ldi	r25, 0x01	; 1
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    23dc:	84 ed       	ldi	r24, 0xD4	; 212
    23de:	91 e0       	ldi	r25, 0x01	; 1
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    23e8:	88 ed       	ldi	r24, 0xD8	; 216
    23ea:	91 e0       	ldi	r25, 0x01	; 1
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    23f4:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    23f6:	ee e6       	ldi	r30, 0x6E	; 110
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	8d 7f       	andi	r24, 0xFD	; 253
    23fe:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2400:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    2402:	89 85       	ldd	r24, Y+9	; 0x09
    2404:	9a 85       	ldd	r25, Y+10	; 0x0a
    2406:	6d 81       	ldd	r22, Y+5	; 0x05
    2408:	7e 81       	ldd	r23, Y+6	; 0x06
    240a:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	2c 96       	adiw	r28, 0x0c	; 12
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	ff 90       	pop	r15
    2428:	ef 90       	pop	r14
    242a:	df 90       	pop	r13
    242c:	cf 90       	pop	r12
    242e:	bf 90       	pop	r11
    2430:	af 90       	pop	r10
    2432:	9f 90       	pop	r9
    2434:	8f 90       	pop	r8
    2436:	7f 90       	pop	r7
    2438:	6f 90       	pop	r6
    243a:	5f 90       	pop	r5
    243c:	4f 90       	pop	r4
    243e:	3f 90       	pop	r3
    2440:	2f 90       	pop	r2
    2442:	08 95       	ret

00002444 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    2444:	2f 92       	push	r2
    2446:	3f 92       	push	r3
    2448:	4f 92       	push	r4
    244a:	5f 92       	push	r5
    244c:	6f 92       	push	r6
    244e:	7f 92       	push	r7
    2450:	8f 92       	push	r8
    2452:	9f 92       	push	r9
    2454:	af 92       	push	r10
    2456:	bf 92       	push	r11
    2458:	cf 92       	push	r12
    245a:	df 92       	push	r13
    245c:	ef 92       	push	r14
    245e:	ff 92       	push	r15
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	c0 54       	subi	r28, 0x40	; 64
    246e:	d0 40       	sbci	r29, 0x00	; 0
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    247c:	de 01       	movw	r26, r28
    247e:	11 96       	adiw	r26, 0x01	; 1
    2480:	e0 e3       	ldi	r30, 0x30	; 48
    2482:	f2 e0       	ldi	r31, 0x02	; 2
    2484:	80 e3       	ldi	r24, 0x30	; 48
    2486:	01 90       	ld	r0, Z+
    2488:	0d 92       	st	X+, r0
    248a:	81 50       	subi	r24, 0x01	; 1
    248c:	e1 f7       	brne	.-8      	; 0x2486 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    248e:	0e 94 3f 10 	call	0x207e	; 0x207e <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    2492:	0f 30       	cpi	r16, 0x0F	; 15
    2494:	11 f5       	brne	.+68     	; 0x24da <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    2496:	40 90 75 03 	lds	r4, 0x0375
    249a:	50 90 76 03 	lds	r5, 0x0376
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    249e:	0f 2e       	mov	r0, r31
    24a0:	f6 ee       	ldi	r31, 0xE6	; 230
    24a2:	8f 2e       	mov	r8, r31
    24a4:	f1 e0       	ldi	r31, 0x01	; 1
    24a6:	9f 2e       	mov	r9, r31
    24a8:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    24aa:	0f 2e       	mov	r0, r31
    24ac:	fe ed       	ldi	r31, 0xDE	; 222
    24ae:	2f 2e       	mov	r2, r31
    24b0:	f1 e0       	ldi	r31, 0x01	; 1
    24b2:	3f 2e       	mov	r3, r31
    24b4:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    24b6:	23 ee       	ldi	r18, 0xE3	; 227
    24b8:	31 e0       	ldi	r19, 0x01	; 1
    24ba:	3a ab       	sts	0x5a, r19
    24bc:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    24be:	0f 2e       	mov	r0, r31
    24c0:	fc ed       	ldi	r31, 0xDC	; 220
    24c2:	6f 2e       	mov	r6, r31
    24c4:	f1 e0       	ldi	r31, 0x01	; 1
    24c6:	7f 2e       	mov	r7, r31
    24c8:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    24ca:	01 e5       	ldi	r16, 0x51	; 81
    24cc:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    24ce:	cc 24       	eor	r12, r12
    24d0:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    24d2:	ee 24       	eor	r14, r14
    24d4:	68 94       	set
    24d6:	e1 f8       	bld	r14, 1
    24d8:	22 c0       	rjmp	.+68     	; 0x251e <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    24da:	40 90 73 03 	lds	r4, 0x0373
    24de:	50 90 74 03 	lds	r5, 0x0374
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    24e2:	0f 2e       	mov	r0, r31
    24e4:	f5 ee       	ldi	r31, 0xE5	; 229
    24e6:	8f 2e       	mov	r8, r31
    24e8:	f1 e0       	ldi	r31, 0x01	; 1
    24ea:	9f 2e       	mov	r9, r31
    24ec:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    24ee:	0f 2e       	mov	r0, r31
    24f0:	f7 ed       	ldi	r31, 0xD7	; 215
    24f2:	2f 2e       	mov	r2, r31
    24f4:	f1 e0       	ldi	r31, 0x01	; 1
    24f6:	3f 2e       	mov	r3, r31
    24f8:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    24fa:	44 ee       	ldi	r20, 0xE4	; 228
    24fc:	51 e0       	ldi	r21, 0x01	; 1
    24fe:	5a ab       	sts	0x5a, r21
    2500:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2502:	0f 2e       	mov	r0, r31
    2504:	fd ed       	ldi	r31, 0xDD	; 221
    2506:	6f 2e       	mov	r6, r31
    2508:	f1 e0       	ldi	r31, 0x01	; 1
    250a:	7f 2e       	mov	r7, r31
    250c:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    250e:	0f e2       	ldi	r16, 0x2F	; 47
    2510:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    2512:	cc 24       	eor	r12, r12
    2514:	68 94       	set
    2516:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    2518:	ee 24       	eor	r14, r14
    251a:	68 94       	set
    251c:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    251e:	c3 01       	movw	r24, r6
    2520:	b2 01       	movw	r22, r4
    2522:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    2526:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2528:	ed ed       	ldi	r30, 0xDD	; 221
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	80 64       	ori	r24, 0x40	; 64
    2530:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2532:	80 81       	ld	r24, Z
    2534:	8f 7b       	andi	r24, 0xBF	; 191
    2536:	80 83       	st	Z, r24
		DATA_BUS = 0;
    2538:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    253a:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	80 93 7c 03 	sts	0x037C, r24
		
		compare_match_counter = 0;	
    2542:	10 92 77 03 	sts	0x0377, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    2546:	8c 2d       	mov	r24, r12
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	24 e6       	ldi	r18, 0x64	; 100
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	82 9f       	mul	r24, r18
    2550:	d0 01       	movw	r26, r0
    2552:	83 9f       	mul	r24, r19
    2554:	b0 0d       	add	r27, r0
    2556:	92 9f       	mul	r25, r18
    2558:	b0 0d       	add	r27, r0
    255a:	11 24       	eor	r1, r1
    255c:	bc ab       	sts	0x5c, r27
    255e:	ab ab       	sts	0x5b, r26
    2560:	fe 01       	movw	r30, r28
    2562:	31 96       	adiw	r30, 0x01	; 1
    2564:	fc af       	sts	0x7c, r31
    2566:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    2568:	98 01       	movw	r18, r16
    256a:	2e 5f       	subi	r18, 0xFE	; 254
    256c:	3f 4f       	sbci	r19, 0xFF	; 255
    256e:	21 96       	adiw	r28, 0x01	; 1
    2570:	3f af       	sts	0x7f, r19
    2572:	2e af       	sts	0x7e, r18
    2574:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2576:	1e ae       	sts	0xbe, r17
    2578:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    257a:	0f 2e       	mov	r0, r31
    257c:	f8 ed       	ldi	r31, 0xD8	; 216
    257e:	ef 2e       	mov	r14, r31
    2580:	f1 e0       	ldi	r31, 0x01	; 1
    2582:	ff 2e       	mov	r15, r31
    2584:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    2586:	0f 2e       	mov	r0, r31
    2588:	f4 ed       	ldi	r31, 0xD4	; 212
    258a:	cf 2e       	mov	r12, r31
    258c:	f1 e0       	ldi	r31, 0x01	; 1
    258e:	df 2e       	mov	r13, r31
    2590:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2592:	0f 2e       	mov	r0, r31
    2594:	fa ec       	ldi	r31, 0xCA	; 202
    2596:	af 2e       	mov	r10, r31
    2598:	f1 e0       	ldi	r31, 0x01	; 1
    259a:	bf 2e       	mov	r11, r31
    259c:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    259e:	eb ad       	sts	0x6b, r30
    25a0:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    25a2:	80 81       	ld	r24, Z
    25a4:	80 93 7c 03 	sts	0x037C, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    25a8:	84 b5       	in	r24, 0x24	; 36
    25aa:	8f 60       	ori	r24, 0x0F	; 15
    25ac:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    25b2:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    25b4:	4d ad       	sts	0x6d, r20
    25b6:	5e ad       	sts	0x6e, r21
    25b8:	43 30       	cpi	r20, 0x03	; 3
    25ba:	51 05       	cpc	r21, r1
    25bc:	24 f4       	brge	.+8      	; 0x25c6 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    25be:	83 e0       	ldi	r24, 0x03	; 3
    25c0:	80 93 7b 03 	sts	0x037B, r24
    25c4:	03 c0       	rjmp	.+6      	; 0x25cc <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    25c6:	82 e0       	ldi	r24, 0x02	; 2
    25c8:	80 93 7b 03 	sts	0x037B, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    25cc:	81 81       	ldd	r24, Z+1	; 0x01
    25ce:	92 81       	ldd	r25, Z+2	; 0x02
    25d0:	9a af       	sts	0x7a, r25
    25d2:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    25d4:	ad e0       	ldi	r26, 0x0D	; 13
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	be ab       	sts	0x5e, r27
    25da:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    25dc:	00 e0       	ldi	r16, 0x00	; 0
    25de:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    25e0:	e1 e0       	ldi	r30, 0x01	; 1
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	0d a8       	sts	0x8d, r16
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <tune_8ths+0x1a8>
    25e8:	ee 0f       	add	r30, r30
    25ea:	ff 1f       	adc	r31, r31
    25ec:	0a 94       	dec	r0
    25ee:	e2 f7       	brpl	.-8      	; 0x25e8 <tune_8ths+0x1a4>
    25f0:	f8 af       	sts	0x78, r31
    25f2:	ef ab       	sts	0x5f, r30
    25f4:	0e 2b       	or	r16, r30
    25f6:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    25f8:	ae e6       	ldi	r26, 0x6E	; 110
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	8c 91       	ld	r24, X
    25fe:	8d 7f       	andi	r24, 0xFD	; 253
    2600:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2602:	c4 01       	movw	r24, r8
    2604:	b8 01       	movw	r22, r16
    2606:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    260a:	e3 ef       	ldi	r30, 0xF3	; 243
    260c:	f1 e0       	ldi	r31, 0x01	; 1
    260e:	31 97       	sbiw	r30, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <tune_8ths+0x1ca>
    2612:	00 c0       	rjmp	.+0      	; 0x2614 <tune_8ths+0x1d0>
    2614:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2616:	ae e6       	ldi	r26, 0x6E	; 110
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	8c 91       	ld	r24, X
    261c:	82 60       	ori	r24, 0x02	; 2
    261e:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    2620:	10 92 7a 03 	sts	0x037A, r1
				period_counter = 0;
    2624:	10 92 7d 03 	sts	0x037D, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    2628:	e8 e1       	ldi	r30, 0x18	; 24
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	2f e0       	ldi	r18, 0x0F	; 15
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	a8 95       	wdr
    2634:	e0 93 60 00 	sts	0x0060, r30
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    263e:	80 91 7a 03 	lds	r24, 0x037A
    2642:	88 23       	and	r24, r24
    2644:	81 f5       	brne	.+96     	; 0x26a6 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    2646:	80 91 7c 03 	lds	r24, 0x037C
    264a:	4b a9       	sts	0x4b, r20
    264c:	5c a9       	sts	0x4c, r21
    264e:	48 0f       	add	r20, r24
    2650:	51 1d       	adc	r21, r1
    2652:	ca 01       	movw	r24, r20
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	0e 94 0d 03 	call	0x61a	; 0x61a <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    265a:	c3 01       	movw	r24, r6
    265c:	b2 01       	movw	r22, r4
    265e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2662:	c4 01       	movw	r24, r8
    2664:	b8 01       	movw	r22, r16
    2666:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    266a:	c7 01       	movw	r24, r14
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    2674:	c6 01       	movw	r24, r12
    2676:	6f ef       	ldi	r22, 0xFF	; 255
    2678:	7f e3       	ldi	r23, 0x3F	; 63
    267a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    267e:	c5 01       	movw	r24, r10
    2680:	6f ef       	ldi	r22, 0xFF	; 255
    2682:	7f e3       	ldi	r23, 0x3F	; 63
    2684:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    2688:	c1 01       	movw	r24, r2
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	70 e2       	ldi	r23, 0x20	; 32
    268e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    2692:	89 a9       	sts	0x49, r24
    2694:	9a a9       	sts	0x4a, r25
    2696:	6f ef       	ldi	r22, 0xFF	; 255
    2698:	7f e3       	ldi	r23, 0x3F	; 63
    269a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    269e:	80 91 7a 03 	lds	r24, 0x037A
    26a2:	88 23       	and	r24, r24
    26a4:	81 f2       	breq	.-96     	; 0x2646 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    26a6:	58 e1       	ldi	r21, 0x18	; 24
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	50 93 60 00 	sts	0x0060, r21
    26b0:	10 92 60 00 	sts	0x0060, r1
    26b4:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    26b6:	80 91 78 03 	lds	r24, 0x0378
    26ba:	90 91 79 03 	lds	r25, 0x0379
    26be:	a9 ad       	sts	0x69, r26
    26c0:	ba ad       	sts	0x6a, r27
    26c2:	a8 17       	cp	r26, r24
    26c4:	b9 07       	cpc	r27, r25
    26c6:	50 f0       	brcs	.+20     	; 0x26dc <tune_8ths+0x298>
    26c8:	80 91 af 02 	lds	r24, 0x02AF
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	31 f4       	brne	.+12     	; 0x26dc <tune_8ths+0x298>
    26d0:	8f a9       	sts	0x4f, r24
    26d2:	98 ad       	sts	0x68, r25
    26d4:	80 95       	com	r24
    26d6:	90 95       	com	r25
    26d8:	08 23       	and	r16, r24
    26da:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    26dc:	80 91 78 03 	lds	r24, 0x0378
    26e0:	90 91 79 03 	lds	r25, 0x0379
    26e4:	e9 ad       	sts	0x69, r30
    26e6:	fa ad       	sts	0x6a, r31
    26e8:	8e 17       	cp	r24, r30
    26ea:	9f 07       	cpc	r25, r31
    26ec:	21 f4       	brne	.+8      	; 0x26f6 <tune_8ths+0x2b2>
    26ee:	80 91 af 02 	lds	r24, 0x02AF
    26f2:	81 30       	cpi	r24, 0x01	; 1
    26f4:	71 f0       	breq	.+28     	; 0x2712 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    26f6:	f1 e0       	ldi	r31, 0x01	; 1
    26f8:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    26fc:	2d a9       	sts	0x4d, r18
    26fe:	3e a9       	sts	0x4e, r19
    2700:	21 50       	subi	r18, 0x01	; 1
    2702:	30 40       	sbci	r19, 0x00	; 0
    2704:	3e ab       	sts	0x5e, r19
    2706:	2d ab       	sts	0x5d, r18
    2708:	4f ef       	ldi	r20, 0xFF	; 255
    270a:	2f 3f       	cpi	r18, 0xFF	; 255
    270c:	34 07       	cpc	r19, r20
    270e:	09 f0       	breq	.+2      	; 0x2712 <tune_8ths+0x2ce>
    2710:	67 cf       	rjmp	.-306    	; 0x25e0 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    2712:	21 96       	adiw	r28, 0x01	; 1
    2714:	ae ad       	sts	0x6e, r26
    2716:	bf ad       	sts	0x6f, r27
    2718:	21 97       	sbiw	r28, 0x01	; 1
    271a:	0d 93       	st	X+, r16
    271c:	1d 93       	st	X+, r17
    271e:	21 96       	adiw	r28, 0x01	; 1
    2720:	bf af       	sts	0x7f, r27
    2722:	ae af       	sts	0x7e, r26
    2724:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2726:	ee e6       	ldi	r30, 0x6E	; 110
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	8d 7f       	andi	r24, 0xFD	; 253
    272e:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    2730:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2732:	2d ad       	sts	0x6d, r18
    2734:	3e ad       	sts	0x6e, r19
    2736:	2f 5f       	subi	r18, 0xFF	; 255
    2738:	3f 4f       	sbci	r19, 0xFF	; 255
    273a:	3e af       	sts	0x7e, r19
    273c:	2d af       	sts	0x7d, r18
    273e:	4b ad       	sts	0x6b, r20
    2740:	5c ad       	sts	0x6c, r21
    2742:	4d 5f       	subi	r20, 0xFD	; 253
    2744:	5f 4f       	sbci	r21, 0xFF	; 255
    2746:	5c af       	sts	0x7c, r21
    2748:	4b af       	sts	0x7b, r20
    274a:	20 31       	cpi	r18, 0x10	; 16
    274c:	31 05       	cpc	r19, r1
    274e:	09 f0       	breq	.+2      	; 0x2752 <tune_8ths+0x30e>
    2750:	26 cf       	rjmp	.-436    	; 0x259e <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    2752:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    2754:	c0 5c       	subi	r28, 0xC0	; 192
    2756:	df 4f       	sbci	r29, 0xFF	; 255
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	cd bf       	out	0x3d, r28	; 61
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	ff 90       	pop	r15
    276c:	ef 90       	pop	r14
    276e:	df 90       	pop	r13
    2770:	cf 90       	pop	r12
    2772:	bf 90       	pop	r11
    2774:	af 90       	pop	r10
    2776:	9f 90       	pop	r9
    2778:	8f 90       	pop	r8
    277a:	7f 90       	pop	r7
    277c:	6f 90       	pop	r6
    277e:	5f 90       	pop	r5
    2780:	4f 90       	pop	r4
    2782:	3f 90       	pop	r3
    2784:	2f 90       	pop	r2
    2786:	08 95       	ret

00002788 <tune_filter>:
	
void tune_filter(void) {
    2788:	2f 92       	push	r2
    278a:	3f 92       	push	r3
    278c:	4f 92       	push	r4
    278e:	5f 92       	push	r5
    2790:	6f 92       	push	r6
    2792:	7f 92       	push	r7
    2794:	8f 92       	push	r8
    2796:	9f 92       	push	r9
    2798:	af 92       	push	r10
    279a:	bf 92       	push	r11
    279c:	cf 92       	push	r12
    279e:	df 92       	push	r13
    27a0:	ef 92       	push	r14
    27a2:	ff 92       	push	r15
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	e9 97       	sbiw	r28, 0x39	; 57
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    27bc:	de 01       	movw	r26, r28
    27be:	11 96       	adiw	r26, 0x01	; 1
    27c0:	e0 e6       	ldi	r30, 0x60	; 96
    27c2:	f2 e0       	ldi	r31, 0x02	; 2
    27c4:	8d e2       	ldi	r24, 0x2D	; 45
    27c6:	01 90       	ld	r0, Z+
    27c8:	0d 92       	st	X+, r0
    27ca:	81 50       	subi	r24, 0x01	; 1
    27cc:	e1 f7       	brne	.-8      	; 0x27c6 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    27ce:	88 ed       	ldi	r24, 0xD8	; 216
    27d0:	91 e0       	ldi	r25, 0x01	; 1
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    27da:	81 ee       	ldi	r24, 0xE1	; 225
    27dc:	91 e0       	ldi	r25, 0x01	; 1
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    27e6:	82 ee       	ldi	r24, 0xE2	; 226
    27e8:	91 e0       	ldi	r25, 0x01	; 1
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    27f2:	83 eb       	ldi	r24, 0xB3	; 179
    27f4:	92 e0       	ldi	r25, 0x02	; 2
    27f6:	60 e0       	ldi	r22, 0x00	; 0
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    27fe:	8a ed       	ldi	r24, 0xDA	; 218
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    280a:	8f ed       	ldi	r24, 0xDF	; 223
    280c:	91 e0       	ldi	r25, 0x01	; 1
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2816:	80 ee       	ldi	r24, 0xE0	; 224
    2818:	91 e0       	ldi	r25, 0x01	; 1
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2822:	81 ed       	ldi	r24, 0xD1	; 209
    2824:	91 e0       	ldi	r25, 0x01	; 1
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    282e:	86 ed       	ldi	r24, 0xD6	; 214
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    283a:	82 ed       	ldi	r24, 0xD2	; 210
    283c:	91 e0       	ldi	r25, 0x01	; 1
    283e:	60 e0       	ldi	r22, 0x00	; 0
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2846:	83 ed       	ldi	r24, 0xD3	; 211
    2848:	91 e0       	ldi	r25, 0x01	; 1
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	70 e0       	ldi	r23, 0x00	; 0
    284e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    2852:	84 ed       	ldi	r24, 0xD4	; 212
    2854:	91 e0       	ldi	r25, 0x01	; 1
    2856:	6f ef       	ldi	r22, 0xFF	; 255
    2858:	7f e3       	ldi	r23, 0x3F	; 63
    285a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    285e:	85 ed       	ldi	r24, 0xD5	; 213
    2860:	91 e0       	ldi	r25, 0x01	; 1
    2862:	6f ef       	ldi	r22, 0xFF	; 255
    2864:	7f e3       	ldi	r23, 0x3F	; 63
    2866:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    286a:	89 ed       	ldi	r24, 0xD9	; 217
    286c:	91 e0       	ldi	r25, 0x01	; 1
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2876:	8e ec       	ldi	r24, 0xCE	; 206
    2878:	91 e0       	ldi	r25, 0x01	; 1
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	70 e0       	ldi	r23, 0x00	; 0
    287e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2882:	8c ec       	ldi	r24, 0xCC	; 204
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	60 e0       	ldi	r22, 0x00	; 0
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    288e:	8a ec       	ldi	r24, 0xCA	; 202
    2890:	91 e0       	ldi	r25, 0x01	; 1
    2892:	6f ef       	ldi	r22, 0xFF	; 255
    2894:	7f e3       	ldi	r23, 0x3F	; 63
    2896:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    289a:	88 ec       	ldi	r24, 0xC8	; 200
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	60 e0       	ldi	r22, 0x00	; 0
    28a0:	70 e0       	ldi	r23, 0x00	; 0
    28a2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    28a6:	80 ed       	ldi	r24, 0xD0	; 208
    28a8:	91 e0       	ldi	r25, 0x01	; 1
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	70 e0       	ldi	r23, 0x00	; 0
    28ae:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    28b2:	83 ee       	ldi	r24, 0xE3	; 227
    28b4:	91 e0       	ldi	r25, 0x01	; 1
    28b6:	60 e0       	ldi	r22, 0x00	; 0
    28b8:	70 e0       	ldi	r23, 0x00	; 0
    28ba:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    28be:	84 ee       	ldi	r24, 0xE4	; 228
    28c0:	91 e0       	ldi	r25, 0x01	; 1
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    28ca:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    28cc:	ed ed       	ldi	r30, 0xDD	; 221
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	80 64       	ori	r24, 0x40	; 64
    28d4:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    28d6:	80 81       	ld	r24, Z
    28d8:	8f 7b       	andi	r24, 0xBF	; 191
    28da:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	80 93 7c 03 	sts	0x037C, r24
	PORTF |= (1<<GATE); //turn gate on
    28e2:	89 9a       	sbi	0x11, 1	; 17
    28e4:	9e 01       	movw	r18, r28
    28e6:	2f 5f       	subi	r18, 0xFF	; 255
    28e8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ea:	3d ab       	sts	0x5d, r19
    28ec:	2c ab       	sts	0x5c, r18
    28ee:	81 e1       	ldi	r24, 0x11	; 17
    28f0:	93 e0       	ldi	r25, 0x03	; 3
    28f2:	99 af       	sts	0x79, r25
    28f4:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    28f6:	1f aa       	sts	0x9f, r17
    28f8:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    28fa:	0f 2e       	mov	r0, r31
    28fc:	f4 ed       	ldi	r31, 0xD4	; 212
    28fe:	af 2e       	mov	r10, r31
    2900:	f1 e0       	ldi	r31, 0x01	; 1
    2902:	bf 2e       	mov	r11, r31
    2904:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2906:	0f 2e       	mov	r0, r31
    2908:	f8 ed       	ldi	r31, 0xD8	; 216
    290a:	6f 2e       	mov	r6, r31
    290c:	f1 e0       	ldi	r31, 0x01	; 1
    290e:	7f 2e       	mov	r7, r31
    2910:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2912:	0f 2e       	mov	r0, r31
    2914:	f5 ed       	ldi	r31, 0xD5	; 213
    2916:	4f 2e       	mov	r4, r31
    2918:	f1 e0       	ldi	r31, 0x01	; 1
    291a:	5f 2e       	mov	r5, r31
    291c:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    291e:	0f 2e       	mov	r0, r31
    2920:	fa ec       	ldi	r31, 0xCA	; 202
    2922:	2f 2e       	mov	r2, r31
    2924:	f1 e0       	ldi	r31, 0x01	; 1
    2926:	3f 2e       	mov	r3, r31
    2928:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    292a:	ac a9       	sts	0x4c, r26
    292c:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    292e:	8c 91       	ld	r24, X
    2930:	80 93 7c 03 	sts	0x037C, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2934:	84 b5       	in	r24, 0x24	; 36
    2936:	8f 60       	ori	r24, 0x0F	; 15
    2938:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    293e:	ee e6       	ldi	r30, 0x6E	; 110
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	82 60       	ori	r24, 0x02	; 2
    2946:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    2948:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    294a:	ee a9       	sts	0x4e, r30
    294c:	ff a9       	sts	0x4f, r31
    294e:	e2 30       	cpi	r30, 0x02	; 2
    2950:	f1 05       	cpc	r31, r1
    2952:	24 f4       	brge	.+8      	; 0x295c <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	80 93 7b 03 	sts	0x037B, r24
    295a:	03 c0       	rjmp	.+6      	; 0x2962 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	80 93 7b 03 	sts	0x037B, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    2962:	11 96       	adiw	r26, 0x01	; 1
    2964:	2d 91       	ld	r18, X+
    2966:	3c 91       	ld	r19, X
    2968:	12 97       	sbiw	r26, 0x02	; 2
    296a:	3b ab       	sts	0x5b, r19
    296c:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    296e:	8d e0       	ldi	r24, 0x0D	; 13
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9f a7       	lds	r25, 0x7f
    2974:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2976:	ee 24       	eor	r14, r14
    2978:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    297a:	0f 2e       	mov	r0, r31
    297c:	f1 ed       	ldi	r31, 0xD1	; 209
    297e:	cf 2e       	mov	r12, r31
    2980:	f1 e0       	ldi	r31, 0x01	; 1
    2982:	df 2e       	mov	r13, r31
    2984:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2986:	0f 2e       	mov	r0, r31
    2988:	f6 ed       	ldi	r31, 0xD6	; 214
    298a:	8f 2e       	mov	r8, r31
    298c:	f1 e0       	ldi	r31, 0x01	; 1
    298e:	9f 2e       	mov	r9, r31
    2990:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	fc 01       	movw	r30, r24
    2998:	0e a4       	lds	r16, 0xae
    299a:	02 c0       	rjmp	.+4      	; 0x29a0 <tune_filter+0x218>
    299c:	ee 0f       	add	r30, r30
    299e:	ff 1f       	adc	r31, r31
    29a0:	0a 94       	dec	r0
    29a2:	e2 f7       	brpl	.-8      	; 0x299c <tune_filter+0x214>
    29a4:	f9 ab       	sts	0x59, r31
    29a6:	e8 ab       	sts	0x58, r30
    29a8:	ee 2a       	or	r14, r30
    29aa:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    29ac:	c5 01       	movw	r24, r10
    29ae:	b7 01       	movw	r22, r14
    29b0:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
			count_finished = FALSE;
    29b4:	10 92 7a 03 	sts	0x037A, r1
			period_counter = 0;
    29b8:	10 92 7d 03 	sts	0x037D, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    29bc:	8f e0       	ldi	r24, 0x0F	; 15
    29be:	28 e1       	ldi	r18, 0x18	; 24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	a8 95       	wdr
    29c8:	20 93 60 00 	sts	0x0060, r18
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    29d2:	80 91 7a 03 	lds	r24, 0x037A
    29d6:	88 23       	and	r24, r24
    29d8:	b1 f5       	brne	.+108    	; 0x2a46 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    29da:	02 ed       	ldi	r16, 0xD2	; 210
    29dc:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    29de:	80 91 7c 03 	lds	r24, 0x037C
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	84 5d       	subi	r24, 0xD4	; 212
    29e6:	9e 4f       	sbci	r25, 0xFE	; 254
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	0e 94 0d 03 	call	0x61a	; 0x61a <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    29ee:	c5 01       	movw	r24, r10
    29f0:	b7 01       	movw	r22, r14
    29f2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    29f6:	c3 01       	movw	r24, r6
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2a00:	c2 01       	movw	r24, r4
    2a02:	6f ef       	ldi	r22, 0xFF	; 255
    2a04:	7f e3       	ldi	r23, 0x3F	; 63
    2a06:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    2a0a:	c1 01       	movw	r24, r2
    2a0c:	6f ef       	ldi	r22, 0xFF	; 255
    2a0e:	7f e3       	ldi	r23, 0x3F	; 63
    2a10:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    2a14:	8e ec       	ldi	r24, 0xCE	; 206
    2a16:	91 e0       	ldi	r25, 0x01	; 1
    2a18:	60 e0       	ldi	r22, 0x00	; 0
    2a1a:	70 e0       	ldi	r23, 0x00	; 0
    2a1c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2a20:	c6 01       	movw	r24, r12
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    2a2a:	c4 01       	movw	r24, r8
    2a2c:	60 e0       	ldi	r22, 0x00	; 0
    2a2e:	70 e0       	ldi	r23, 0x00	; 0
    2a30:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    2a34:	c8 01       	movw	r24, r16
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    2a3e:	80 91 7a 03 	lds	r24, 0x037A
    2a42:	88 23       	and	r24, r24
    2a44:	61 f2       	breq	.-104    	; 0x29de <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    2a46:	88 e1       	ldi	r24, 0x18	; 24
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	80 93 60 00 	sts	0x0060, r24
    2a50:	10 92 60 00 	sts	0x0060, r1
    2a54:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    2a56:	80 91 78 03 	lds	r24, 0x0378
    2a5a:	90 91 79 03 	lds	r25, 0x0379
    2a5e:	2a a9       	sts	0x4a, r18
    2a60:	3b a9       	sts	0x4b, r19
    2a62:	28 17       	cp	r18, r24
    2a64:	39 07       	cpc	r19, r25
    2a66:	50 f0       	brcs	.+20     	; 0x2a7c <tune_filter+0x2f4>
    2a68:	80 91 af 02 	lds	r24, 0x02AF
    2a6c:	81 30       	cpi	r24, 0x01	; 1
    2a6e:	31 f4       	brne	.+12     	; 0x2a7c <tune_filter+0x2f4>
    2a70:	88 a9       	sts	0x48, r24
    2a72:	99 a9       	sts	0x49, r25
    2a74:	80 95       	com	r24
    2a76:	90 95       	com	r25
    2a78:	e8 22       	and	r14, r24
    2a7a:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2a7c:	80 91 78 03 	lds	r24, 0x0378
    2a80:	90 91 79 03 	lds	r25, 0x0379
    2a84:	ea a9       	sts	0x4a, r30
    2a86:	fb a9       	sts	0x4b, r31
    2a88:	8e 17       	cp	r24, r30
    2a8a:	9f 07       	cpc	r25, r31
    2a8c:	21 f4       	brne	.+8      	; 0x2a96 <tune_filter+0x30e>
    2a8e:	80 91 af 02 	lds	r24, 0x02AF
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	71 f0       	breq	.+28     	; 0x2ab2 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2a9c:	2e a5       	lds	r18, 0x6e
    2a9e:	3f a5       	lds	r19, 0x6f
    2aa0:	21 50       	subi	r18, 0x01	; 1
    2aa2:	30 40       	sbci	r19, 0x00	; 0
    2aa4:	3f a7       	lds	r19, 0x7f
    2aa6:	2e a7       	lds	r18, 0x7e
    2aa8:	8f ef       	ldi	r24, 0xFF	; 255
    2aaa:	2f 3f       	cpi	r18, 0xFF	; 255
    2aac:	38 07       	cpc	r19, r24
    2aae:	09 f0       	breq	.+2      	; 0x2ab2 <tune_filter+0x32a>
    2ab0:	70 cf       	rjmp	.-288    	; 0x2992 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2ab2:	ee a9       	sts	0x4e, r30
    2ab4:	ff a9       	sts	0x4f, r31
    2ab6:	31 96       	adiw	r30, 0x01	; 1
    2ab8:	ff ab       	sts	0x5f, r31
    2aba:	ee ab       	sts	0x5e, r30
    2abc:	c7 01       	movw	r24, r14
    2abe:	80 96       	adiw	r24, 0x20	; 32
    2ac0:	e8 ad       	sts	0x68, r30
    2ac2:	f9 ad       	sts	0x69, r31
    2ac4:	81 93       	st	Z+, r24
    2ac6:	91 93       	st	Z+, r25
    2ac8:	f9 af       	sts	0x79, r31
    2aca:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2acc:	ee e6       	ldi	r30, 0x6E	; 110
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	8d 7f       	andi	r24, 0xFD	; 253
    2ad4:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2ad6:	14 bc       	out	0x24, r1	; 36
    2ad8:	2c a9       	sts	0x4c, r18
    2ada:	3d a9       	sts	0x4d, r19
    2adc:	2d 5f       	subi	r18, 0xFD	; 253
    2ade:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae0:	3d ab       	sts	0x5d, r19
    2ae2:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2ae4:	8e a9       	sts	0x4e, r24
    2ae6:	9f a9       	sts	0x4f, r25
    2ae8:	8f 30       	cpi	r24, 0x0F	; 15
    2aea:	91 05       	cpc	r25, r1
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <tune_filter+0x368>
    2aee:	1d cf       	rjmp	.-454    	; 0x292a <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2af0:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2af2:	e9 96       	adiw	r28, 0x39	; 57
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	1f 91       	pop	r17
    2b04:	0f 91       	pop	r16
    2b06:	ff 90       	pop	r15
    2b08:	ef 90       	pop	r14
    2b0a:	df 90       	pop	r13
    2b0c:	cf 90       	pop	r12
    2b0e:	bf 90       	pop	r11
    2b10:	af 90       	pop	r10
    2b12:	9f 90       	pop	r9
    2b14:	8f 90       	pop	r8
    2b16:	7f 90       	pop	r7
    2b18:	6f 90       	pop	r6
    2b1a:	5f 90       	pop	r5
    2b1c:	4f 90       	pop	r4
    2b1e:	3f 90       	pop	r3
    2b20:	2f 90       	pop	r2
    2b22:	08 95       	ret

00002b24 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2b24:	8f e0       	ldi	r24, 0x0F	; 15
    2b26:	93 e0       	ldi	r25, 0x03	; 3
    2b28:	6c e0       	ldi	r22, 0x0C	; 12
    2b2a:	76 e0       	ldi	r23, 0x06	; 6
    2b2c:	40 e2       	ldi	r20, 0x20	; 32
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2b34:	81 e5       	ldi	r24, 0x51	; 81
    2b36:	93 e0       	ldi	r25, 0x03	; 3
    2b38:	6e e4       	ldi	r22, 0x4E	; 78
    2b3a:	76 e0       	ldi	r23, 0x06	; 6
    2b3c:	42 e2       	ldi	r20, 0x22	; 34
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2b44:	8f e2       	ldi	r24, 0x2F	; 47
    2b46:	93 e0       	ldi	r25, 0x03	; 3
    2b48:	6c e2       	ldi	r22, 0x2C	; 44
    2b4a:	76 e0       	ldi	r23, 0x06	; 6
    2b4c:	42 e2       	ldi	r20, 0x22	; 34
    2b4e:	50 e0       	ldi	r21, 0x00	; 0
    2b50:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__eeupd_block_m6450a>
	
	
}
    2b54:	08 95       	ret

00002b56 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2b56:	82 e7       	ldi	r24, 0x72	; 114
    2b58:	96 e0       	ldi	r25, 0x06	; 6
    2b5a:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__eerd_word_m6450a>
    2b5e:	90 93 76 03 	sts	0x0376, r25
    2b62:	80 93 75 03 	sts	0x0375, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2b66:	80 e7       	ldi	r24, 0x70	; 112
    2b68:	96 e0       	ldi	r25, 0x06	; 6
    2b6a:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__eerd_word_m6450a>
    2b6e:	90 93 74 03 	sts	0x0374, r25
    2b72:	80 93 73 03 	sts	0x0373, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2b76:	81 e5       	ldi	r24, 0x51	; 81
    2b78:	93 e0       	ldi	r25, 0x03	; 3
    2b7a:	6e e4       	ldi	r22, 0x4E	; 78
    2b7c:	76 e0       	ldi	r23, 0x06	; 6
    2b7e:	42 e2       	ldi	r20, 0x22	; 34
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2b86:	8f e2       	ldi	r24, 0x2F	; 47
    2b88:	93 e0       	ldi	r25, 0x03	; 3
    2b8a:	6c e2       	ldi	r22, 0x2C	; 44
    2b8c:	76 e0       	ldi	r23, 0x06	; 6
    2b8e:	42 e2       	ldi	r20, 0x22	; 34
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2b96:	8f e0       	ldi	r24, 0x0F	; 15
    2b98:	93 e0       	ldi	r25, 0x03	; 3
    2b9a:	6c e0       	ldi	r22, 0x0C	; 12
    2b9c:	76 e0       	ldi	r23, 0x06	; 6
    2b9e:	40 e2       	ldi	r20, 0x20	; 32
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2ba6:	08 95       	ret

00002ba8 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2ba8:	98 2f       	mov	r25, r24
    2baa:	96 95       	lsr	r25
    2bac:	96 95       	lsr	r25
    2bae:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2bb0:	29 2f       	mov	r18, r25
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	f9 01       	movw	r30, r18
    2bb6:	31 97       	sbiw	r30, 0x01	; 1
    2bb8:	ee 0f       	add	r30, r30
    2bba:	ff 1f       	adc	r31, r31
    2bbc:	e6 0f       	add	r30, r22
    2bbe:	f7 1f       	adc	r31, r23
    2bc0:	01 90       	ld	r0, Z+
    2bc2:	f0 81       	ld	r31, Z
    2bc4:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2bc6:	22 0f       	add	r18, r18
    2bc8:	33 1f       	adc	r19, r19
    2bca:	26 0f       	add	r18, r22
    2bcc:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2bce:	d9 01       	movw	r26, r18
    2bd0:	4d 91       	ld	r20, X+
    2bd2:	5c 91       	ld	r21, X
    2bd4:	11 97       	sbiw	r26, 0x01	; 1
    2bd6:	4e 1b       	sub	r20, r30
    2bd8:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2bda:	99 0f       	add	r25, r25
    2bdc:	99 0f       	add	r25, r25
    2bde:	99 0f       	add	r25, r25
    2be0:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	48 9f       	mul	r20, r24
    2be6:	90 01       	movw	r18, r0
    2be8:	49 9f       	mul	r20, r25
    2bea:	30 0d       	add	r19, r0
    2bec:	58 9f       	mul	r21, r24
    2bee:	30 0d       	add	r19, r0
    2bf0:	11 24       	eor	r1, r1
    2bf2:	36 95       	lsr	r19
    2bf4:	27 95       	ror	r18
    2bf6:	36 95       	lsr	r19
    2bf8:	27 95       	ror	r18
    2bfa:	36 95       	lsr	r19
    2bfc:	27 95       	ror	r18
    2bfe:	e2 0f       	add	r30, r18
    2c00:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2c02:	8e 2f       	mov	r24, r30
    2c04:	9f 2f       	mov	r25, r31
    2c06:	08 95       	ret

00002c08 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	a2 97       	sbiw	r28, 0x22	; 34
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2c1c:	de 01       	movw	r26, r28
    2c1e:	11 96       	adiw	r26, 0x01	; 1
    2c20:	ed e8       	ldi	r30, 0x8D	; 141
    2c22:	f2 e0       	ldi	r31, 0x02	; 2
    2c24:	82 e2       	ldi	r24, 0x22	; 34
    2c26:	01 90       	ld	r0, Z+
    2c28:	0d 92       	st	X+, r0
    2c2a:	81 50       	subi	r24, 0x01	; 1
    2c2c:	e1 f7       	brne	.-8      	; 0x2c26 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2c2e:	a1 e5       	ldi	r26, 0x51	; 81
    2c30:	b3 e0       	ldi	r27, 0x03	; 3
    2c32:	fe 01       	movw	r30, r28
    2c34:	31 96       	adiw	r30, 0x01	; 1
    2c36:	82 e2       	ldi	r24, 0x22	; 34
    2c38:	01 90       	ld	r0, Z+
    2c3a:	0d 92       	st	X+, r0
    2c3c:	81 50       	subi	r24, 0x01	; 1
    2c3e:	e1 f7       	brne	.-8      	; 0x2c38 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2c40:	af e2       	ldi	r26, 0x2F	; 47
    2c42:	b3 e0       	ldi	r27, 0x03	; 3
    2c44:	fe 01       	movw	r30, r28
    2c46:	31 96       	adiw	r30, 0x01	; 1
    2c48:	82 e2       	ldi	r24, 0x22	; 34
    2c4a:	01 90       	ld	r0, Z+
    2c4c:	0d 92       	st	X+, r0
    2c4e:	81 50       	subi	r24, 0x01	; 1
    2c50:	e1 f7       	brne	.-8      	; 0x2c4a <set_one_volt_per_octave+0x42>
	
	
}
    2c52:	a2 96       	adiw	r28, 0x22	; 34
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	08 95       	ret

00002c64 <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2c64:	ef e6       	ldi	r30, 0x6F	; 111
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	82 70       	andi	r24, 0x02	; 2
    2c6c:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2c6e:	e1 e8       	ldi	r30, 0x81	; 129
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	87 7f       	andi	r24, 0xF7	; 247
    2c76:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2c78:	8f e0       	ldi	r24, 0x0F	; 15
    2c7a:	6f e0       	ldi	r22, 0x0F	; 15
    2c7c:	7e e5       	ldi	r23, 0x5E	; 94
    2c7e:	0e 94 be 10 	call	0x217c	; 0x217c <set_vco_init_cv>
    2c82:	90 93 76 03 	sts	0x0376, r25
    2c86:	80 93 75 03 	sts	0x0375, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2c8a:	80 ef       	ldi	r24, 0xF0	; 240
    2c8c:	6f e0       	ldi	r22, 0x0F	; 15
    2c8e:	7e e5       	ldi	r23, 0x5E	; 94
    2c90:	0e 94 be 10 	call	0x217c	; 0x217c <set_vco_init_cv>
    2c94:	90 93 74 03 	sts	0x0374, r25
    2c98:	80 93 73 03 	sts	0x0373, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2c9c:	8f e0       	ldi	r24, 0x0F	; 15
    2c9e:	0e 94 22 12 	call	0x2444	; 0x2444 <tune_8ths>
			tune_8ths(VCO2);
    2ca2:	80 ef       	ldi	r24, 0xF0	; 240
    2ca4:	0e 94 22 12 	call	0x2444	; 0x2444 <tune_8ths>
			tune_filter();
    2ca8:	0e 94 c4 13 	call	0x2788	; 0x2788 <tune_filter>
			save_tuning_tables();
    2cac:	0e 94 92 15 	call	0x2b24	; 0x2b24 <save_tuning_tables>
    2cb0:	8f e4       	ldi	r24, 0x4F	; 79
    2cb2:	93 ec       	ldi	r25, 0xC3	; 195
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <tune+0x50>
    2cb8:	00 c0       	rjmp	.+0      	; 0x2cba <tune+0x56>
    2cba:	00 00       	nop
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2cbc:	08 95       	ret

00002cbe <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2cbe:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	9c 70       	andi	r25, 0x0C	; 12
    2cc4:	20 91 c1 02 	lds	r18, 0x02C1
    2cc8:	92 2b       	or	r25, r18
    2cca:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2cce:	98 2f       	mov	r25, r24
    2cd0:	92 95       	swap	r25
    2cd2:	96 95       	lsr	r25
    2cd4:	97 70       	andi	r25, 0x07	; 7
    2cd6:	90 ff       	sbrs	r25, 0
    2cd8:	16 c0       	rjmp	.+44     	; 0x2d06 <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2cda:	20 91 81 03 	lds	r18, 0x0381
    2cde:	30 91 82 03 	lds	r19, 0x0382
    2ce2:	2f 5f       	subi	r18, 0xFF	; 255
    2ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce6:	30 93 82 03 	sts	0x0382, r19
    2cea:	20 93 81 03 	sts	0x0381, r18
    2cee:	92 e0       	ldi	r25, 0x02	; 2
    2cf0:	28 35       	cpi	r18, 0x58	; 88
    2cf2:	39 07       	cpc	r19, r25
    2cf4:	61 f4       	brne	.+24     	; 0x2d0e <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2cf6:	10 92 82 03 	sts	0x0382, r1
    2cfa:	10 92 81 03 	sts	0x0381, r1
			current_patch.mode = CAL;
    2cfe:	95 e0       	ldi	r25, 0x05	; 5
    2d00:	90 93 07 03 	sts	0x0307, r25
    2d04:	04 c0       	rjmp	.+8      	; 0x2d0e <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2d06:	10 92 82 03 	sts	0x0382, r1
    2d0a:	10 92 81 03 	sts	0x0381, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2d0e:	90 91 83 03 	lds	r25, 0x0383
    2d12:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2d14:	98 27       	eor	r25, r24
    2d16:	90 93 83 03 	sts	0x0383, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2d1a:	89 23       	and	r24, r25
    2d1c:	08 95       	ret

00002d1e <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2d1e:	ed ed       	ldi	r30, 0xDD	; 221
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	90 81       	ld	r25, Z
    2d24:	9f 7b       	andi	r25, 0xBF	; 191
    2d26:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	21 70       	andi	r18, 0x01	; 1
    2d2e:	30 70       	andi	r19, 0x00	; 0
    2d30:	22 0f       	add	r18, r18
    2d32:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2d34:	68 2f       	mov	r22, r24
    2d36:	62 95       	swap	r22
    2d38:	66 95       	lsr	r22
    2d3a:	67 70       	andi	r22, 0x07	; 7
    2d3c:	67 95       	ror	r22
    2d3e:	66 27       	eor	r22, r22
    2d40:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d42:	26 2b       	or	r18, r22
    2d44:	98 2f       	mov	r25, r24
    2d46:	96 95       	lsr	r25
    2d48:	96 95       	lsr	r25
    2d4a:	91 70       	andi	r25, 0x01	; 1
    2d4c:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2d4e:	68 2f       	mov	r22, r24
    2d50:	66 1f       	adc	r22, r22
    2d52:	66 27       	eor	r22, r22
    2d54:	66 1f       	adc	r22, r22
    2d56:	66 0f       	add	r22, r22
    2d58:	66 0f       	add	r22, r22
    2d5a:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d5c:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2d5e:	a8 2f       	mov	r26, r24
    2d60:	a6 95       	lsr	r26
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	a1 70       	andi	r26, 0x01	; 1
    2d66:	b0 70       	andi	r27, 0x00	; 0
    2d68:	bd 01       	movw	r22, r26
    2d6a:	66 0f       	add	r22, r22
    2d6c:	77 1f       	adc	r23, r23
    2d6e:	66 0f       	add	r22, r22
    2d70:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d72:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2d74:	68 2f       	mov	r22, r24
    2d76:	62 95       	swap	r22
    2d78:	6f 70       	andi	r22, 0x0F	; 15
    2d7a:	70 e0       	ldi	r23, 0x00	; 0
    2d7c:	61 70       	andi	r22, 0x01	; 1
    2d7e:	70 70       	andi	r23, 0x00	; 0
    2d80:	ab 01       	movw	r20, r22
    2d82:	00 24       	eor	r0, r0
    2d84:	56 95       	lsr	r21
    2d86:	47 95       	ror	r20
    2d88:	07 94       	ror	r0
    2d8a:	56 95       	lsr	r21
    2d8c:	47 95       	ror	r20
    2d8e:	07 94       	ror	r0
    2d90:	54 2f       	mov	r21, r20
    2d92:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d94:	62 2f       	mov	r22, r18
    2d96:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2d98:	48 2f       	mov	r20, r24
    2d9a:	42 95       	swap	r20
    2d9c:	46 95       	lsr	r20
    2d9e:	46 95       	lsr	r20
    2da0:	43 70       	andi	r20, 0x03	; 3
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	41 70       	andi	r20, 0x01	; 1
    2da6:	50 70       	andi	r21, 0x00	; 0
    2da8:	9a 01       	movw	r18, r20
    2daa:	22 0f       	add	r18, r18
    2dac:	33 1f       	adc	r19, r19
    2dae:	22 95       	swap	r18
    2db0:	32 95       	swap	r19
    2db2:	30 7f       	andi	r19, 0xF0	; 240
    2db4:	32 27       	eor	r19, r18
    2db6:	20 7f       	andi	r18, 0xF0	; 240
    2db8:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2dba:	46 2f       	mov	r20, r22
    2dbc:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2dbe:	86 95       	lsr	r24
    2dc0:	86 95       	lsr	r24
    2dc2:	86 95       	lsr	r24
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	21 70       	andi	r18, 0x01	; 1
    2dca:	30 70       	andi	r19, 0x00	; 0
    2dcc:	c9 01       	movw	r24, r18
    2dce:	82 95       	swap	r24
    2dd0:	92 95       	swap	r25
    2dd2:	90 7f       	andi	r25, 0xF0	; 240
    2dd4:	98 27       	eor	r25, r24
    2dd6:	80 7f       	andi	r24, 0xF0	; 240
    2dd8:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2dda:	84 2b       	or	r24, r20
    2ddc:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2dde:	80 81       	ld	r24, Z
    2de0:	80 64       	ori	r24, 0x40	; 64
    2de2:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2de4:	80 81       	ld	r24, Z
    2de6:	8f 7b       	andi	r24, 0xBF	; 191
    2de8:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2dea:	12 b8       	out	0x02, r1	; 2
	
	
    2dec:	08 95       	ret

00002dee <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2dee:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2df0:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2df2:	74 83       	std	Z+4, r23	; 0x04
    2df4:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2df6:	11 82       	std	Z+1, r1	; 0x01
    2df8:	10 82       	st	Z, r1
}
    2dfa:	08 95       	ret

00002dfc <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2dfc:	1f 93       	push	r17
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	ec 01       	movw	r28, r24
    2e04:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2e06:	0e 94 6d 17 	call	0x2eda	; 0x2eda <store_and_clear_interrupt>
    2e0a:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2e0c:	39 81       	ldd	r19, Y+1	; 0x01
    2e0e:	83 2f       	mov	r24, r19
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	01 96       	adiw	r24, 0x01	; 1
    2e14:	6a 81       	ldd	r22, Y+2	; 0x02
    2e16:	70 e0       	ldi	r23, 0x00	; 0
    2e18:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__divmodhi4>
    2e1c:	48 81       	ld	r20, Y
    2e1e:	50 e0       	ldi	r21, 0x00	; 0
    2e20:	84 17       	cp	r24, r20
    2e22:	95 07       	cpc	r25, r21
    2e24:	29 f4       	brne	.+10     	; 0x2e30 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2e26:	82 2f       	mov	r24, r18
    2e28:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <restore_interrupt_setting>
      return false;
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	11 c0       	rjmp	.+34     	; 0x2e52 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2e30:	eb 81       	ldd	r30, Y+3	; 0x03
    2e32:	fc 81       	ldd	r31, Y+4	; 0x04
    2e34:	e3 0f       	add	r30, r19
    2e36:	f1 1d       	adc	r31, r1
    2e38:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	01 96       	adiw	r24, 0x01	; 1
    2e40:	6a 81       	ldd	r22, Y+2	; 0x02
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__divmodhi4>
    2e48:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2e4a:	82 2f       	mov	r24, r18
    2e4c:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <restore_interrupt_setting>
      return true;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	1f 91       	pop	r17
    2e58:	08 95       	ret

00002e5a <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2e60:	0e 94 6d 17 	call	0x2eda	; 0x2eda <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2e64:	29 81       	ldd	r18, Y+1	; 0x01
    2e66:	98 81       	ld	r25, Y
    2e68:	29 17       	cp	r18, r25
    2e6a:	18 f0       	brcs	.+6      	; 0x2e72 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2e6c:	c2 2f       	mov	r28, r18
    2e6e:	c9 1b       	sub	r28, r25
    2e70:	03 c0       	rjmp	.+6      	; 0x2e78 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2e72:	ca 81       	ldd	r28, Y+2	; 0x02
    2e74:	c2 0f       	add	r28, r18
    2e76:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2e78:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <restore_interrupt_setting>
   return len;
}
    2e7c:	8c 2f       	mov	r24, r28
    2e7e:	df 91       	pop	r29
    2e80:	cf 91       	pop	r28
    2e82:	08 95       	ret

00002e84 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2e84:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2e86:	20 81       	ld	r18, Z
    2e88:	86 2f       	mov	r24, r22
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	82 0f       	add	r24, r18
    2e8e:	91 1d       	adc	r25, r1
    2e90:	62 81       	ldd	r22, Z+2	; 0x02
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__divmodhi4>
    2e98:	03 80       	ldd	r0, Z+3	; 0x03
    2e9a:	f4 81       	ldd	r31, Z+4	; 0x04
    2e9c:	e0 2d       	mov	r30, r0
    2e9e:	e8 0f       	add	r30, r24
    2ea0:	f9 1f       	adc	r31, r25
}
    2ea2:	80 81       	ld	r24, Z
    2ea4:	08 95       	ret

00002ea6 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2ea6:	1f 93       	push	r17
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	ec 01       	movw	r28, r24
    2eae:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2eb0:	0e 94 6d 17 	call	0x2eda	; 0x2eda <store_and_clear_interrupt>
    2eb4:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2eb6:	88 81       	ld	r24, Y
    2eb8:	21 2f       	mov	r18, r17
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	28 0f       	add	r18, r24
    2ebe:	31 1d       	adc	r19, r1
    2ec0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ec2:	c9 01       	movw	r24, r18
    2ec4:	70 e0       	ldi	r23, 0x00	; 0
    2ec6:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__divmodhi4>
    2eca:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2ecc:	84 2f       	mov	r24, r20
    2ece:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <restore_interrupt_setting>
}
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	1f 91       	pop	r17
    2ed8:	08 95       	ret

00002eda <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2eda:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2edc:	f8 94       	cli
   return sreg;
}
    2ede:	08 95       	ret

00002ee0 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2ee0:	8f bf       	out	0x3f, r24	; 63
}
    2ee2:	08 95       	ret

00002ee4 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2ee4:	88 1f       	adc	r24, r24
    2ee6:	88 27       	eor	r24, r24
    2ee8:	88 1f       	adc	r24, r24
    2eea:	08 95       	ret

00002eec <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2eec:	91 e0       	ldi	r25, 0x01	; 1
    2eee:	88 3f       	cpi	r24, 0xF8	; 248
    2ef0:	08 f4       	brcc	.+2      	; 0x2ef4 <midi_is_realtime+0x8>
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
}
    2ef4:	89 2f       	mov	r24, r25
    2ef6:	08 95       	ret

00002ef8 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2ef8:	28 2f       	mov	r18, r24
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	20 7f       	andi	r18, 0xF0	; 240
    2efe:	30 70       	andi	r19, 0x00	; 0
    2f00:	20 3c       	cpi	r18, 0xC0	; 192
    2f02:	31 05       	cpc	r19, r1
    2f04:	e9 f1       	breq	.+122    	; 0x2f80 <midi_packet_length+0x88>
    2f06:	21 3c       	cpi	r18, 0xC1	; 193
    2f08:	31 05       	cpc	r19, r1
    2f0a:	8c f4       	brge	.+34     	; 0x2f2e <midi_packet_length+0x36>
    2f0c:	20 39       	cpi	r18, 0x90	; 144
    2f0e:	31 05       	cpc	r19, r1
    2f10:	e1 f0       	breq	.+56     	; 0x2f4a <midi_packet_length+0x52>
    2f12:	21 39       	cpi	r18, 0x91	; 145
    2f14:	31 05       	cpc	r19, r1
    2f16:	24 f4       	brge	.+8      	; 0x2f20 <midi_packet_length+0x28>
    2f18:	20 38       	cpi	r18, 0x80	; 128
    2f1a:	31 05       	cpc	r19, r1
    2f1c:	79 f5       	brne	.+94     	; 0x2f7c <midi_packet_length+0x84>
    2f1e:	15 c0       	rjmp	.+42     	; 0x2f4a <midi_packet_length+0x52>
    2f20:	20 3a       	cpi	r18, 0xA0	; 160
    2f22:	31 05       	cpc	r19, r1
    2f24:	91 f0       	breq	.+36     	; 0x2f4a <midi_packet_length+0x52>
    2f26:	20 3b       	cpi	r18, 0xB0	; 176
    2f28:	31 05       	cpc	r19, r1
    2f2a:	41 f5       	brne	.+80     	; 0x2f7c <midi_packet_length+0x84>
    2f2c:	0e c0       	rjmp	.+28     	; 0x2f4a <midi_packet_length+0x52>
    2f2e:	20 3e       	cpi	r18, 0xE0	; 224
    2f30:	31 05       	cpc	r19, r1
    2f32:	59 f0       	breq	.+22     	; 0x2f4a <midi_packet_length+0x52>
    2f34:	21 3e       	cpi	r18, 0xE1	; 225
    2f36:	31 05       	cpc	r19, r1
    2f38:	24 f4       	brge	.+8      	; 0x2f42 <midi_packet_length+0x4a>
    2f3a:	20 3d       	cpi	r18, 0xD0	; 208
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	f1 f4       	brne	.+60     	; 0x2f7c <midi_packet_length+0x84>
    2f40:	1f c0       	rjmp	.+62     	; 0x2f80 <midi_packet_length+0x88>
    2f42:	20 3f       	cpi	r18, 0xF0	; 240
    2f44:	31 05       	cpc	r19, r1
    2f46:	d1 f4       	brne	.+52     	; 0x2f7c <midi_packet_length+0x84>
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2f4a:	83 e0       	ldi	r24, 0x03	; 3
    2f4c:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2f4e:	86 3f       	cpi	r24, 0xF6	; 246
    2f50:	79 f0       	breq	.+30     	; 0x2f70 <midi_packet_length+0x78>
    2f52:	87 3f       	cpi	r24, 0xF7	; 247
    2f54:	38 f4       	brcc	.+14     	; 0x2f64 <midi_packet_length+0x6c>
    2f56:	82 3f       	cpi	r24, 0xF2	; 242
    2f58:	a9 f0       	breq	.+42     	; 0x2f84 <midi_packet_length+0x8c>
    2f5a:	83 3f       	cpi	r24, 0xF3	; 243
    2f5c:	59 f0       	breq	.+22     	; 0x2f74 <midi_packet_length+0x7c>
    2f5e:	81 3f       	cpi	r24, 0xF1	; 241
    2f60:	59 f4       	brne	.+22     	; 0x2f78 <midi_packet_length+0x80>
    2f62:	08 c0       	rjmp	.+16     	; 0x2f74 <midi_packet_length+0x7c>
    2f64:	88 3f       	cpi	r24, 0xF8	; 248
    2f66:	40 f0       	brcs	.+16     	; 0x2f78 <midi_packet_length+0x80>
    2f68:	8d 3f       	cpi	r24, 0xFD	; 253
    2f6a:	10 f0       	brcs	.+4      	; 0x2f70 <midi_packet_length+0x78>
    2f6c:	8e 3f       	cpi	r24, 0xFE	; 254
    2f6e:	20 f0       	brcs	.+8      	; 0x2f78 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2f74:	82 e0       	ldi	r24, 0x02	; 2
    2f76:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2f80:	82 e0       	ldi	r24, 0x02	; 2
    2f82:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2f84:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2f86:	08 95       	ret

00002f88 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2f88:	0f 93       	push	r16
    2f8a:	34 2f       	mov	r19, r20
    2f8c:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2f8e:	46 2f       	mov	r20, r22
    2f90:	4f 70       	andi	r20, 0x0F	; 15
    2f92:	40 6b       	ori	r20, 0xB0	; 176
    2f94:	23 2f       	mov	r18, r19
    2f96:	2f 77       	andi	r18, 0x7F	; 127
    2f98:	0f 77       	andi	r16, 0x7F	; 127
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	ed 91       	ld	r30, X+
    2f9e:	fc 91       	ld	r31, X
    2fa0:	63 e0       	ldi	r22, 0x03	; 3
    2fa2:	70 e0       	ldi	r23, 0x00	; 0
    2fa4:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2fa6:	0f 91       	pop	r16
    2fa8:	08 95       	ret

00002faa <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2faa:	0f 93       	push	r16
    2fac:	34 2f       	mov	r19, r20
    2fae:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2fb0:	46 2f       	mov	r20, r22
    2fb2:	4f 70       	andi	r20, 0x0F	; 15
    2fb4:	40 69       	ori	r20, 0x90	; 144
    2fb6:	23 2f       	mov	r18, r19
    2fb8:	2f 77       	andi	r18, 0x7F	; 127
    2fba:	0f 77       	andi	r16, 0x7F	; 127
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	ed 91       	ld	r30, X+
    2fc0:	fc 91       	ld	r31, X
    2fc2:	63 e0       	ldi	r22, 0x03	; 3
    2fc4:	70 e0       	ldi	r23, 0x00	; 0
    2fc6:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2fc8:	0f 91       	pop	r16
    2fca:	08 95       	ret

00002fcc <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2fcc:	0f 93       	push	r16
    2fce:	34 2f       	mov	r19, r20
    2fd0:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2fd2:	46 2f       	mov	r20, r22
    2fd4:	4f 70       	andi	r20, 0x0F	; 15
    2fd6:	40 68       	ori	r20, 0x80	; 128
    2fd8:	23 2f       	mov	r18, r19
    2fda:	2f 77       	andi	r18, 0x7F	; 127
    2fdc:	0f 77       	andi	r16, 0x7F	; 127
    2fde:	dc 01       	movw	r26, r24
    2fe0:	ed 91       	ld	r30, X+
    2fe2:	fc 91       	ld	r31, X
    2fe4:	63 e0       	ldi	r22, 0x03	; 3
    2fe6:	70 e0       	ldi	r23, 0x00	; 0
    2fe8:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2fea:	0f 91       	pop	r16
    2fec:	08 95       	ret

00002fee <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2fee:	0f 93       	push	r16
    2ff0:	34 2f       	mov	r19, r20
    2ff2:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2ff4:	46 2f       	mov	r20, r22
    2ff6:	4f 70       	andi	r20, 0x0F	; 15
    2ff8:	40 6a       	ori	r20, 0xA0	; 160
    2ffa:	23 2f       	mov	r18, r19
    2ffc:	2f 77       	andi	r18, 0x7F	; 127
    2ffe:	0f 77       	andi	r16, 0x7F	; 127
    3000:	dc 01       	movw	r26, r24
    3002:	ed 91       	ld	r30, X+
    3004:	fc 91       	ld	r31, X
    3006:	63 e0       	ldi	r22, 0x03	; 3
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    300c:	0f 91       	pop	r16
    300e:	08 95       	ret

00003010 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    3010:	0f 93       	push	r16
    3012:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    3014:	20 e2       	ldi	r18, 0x20	; 32
    3016:	40 30       	cpi	r20, 0x00	; 0
    3018:	52 07       	cpc	r21, r18
    301a:	44 f4       	brge	.+16     	; 0x302c <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    301c:	a0 ee       	ldi	r26, 0xE0	; 224
    301e:	40 30       	cpi	r20, 0x00	; 0
    3020:	5a 07       	cpc	r21, r26
    3022:	3c f0       	brlt	.+14     	; 0x3032 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    3024:	8a 01       	movw	r16, r20
    3026:	00 50       	subi	r16, 0x00	; 0
    3028:	10 4e       	sbci	r17, 0xE0	; 224
    302a:	05 c0       	rjmp	.+10     	; 0x3036 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    302c:	0f ef       	ldi	r16, 0xFF	; 255
    302e:	1f e3       	ldi	r17, 0x3F	; 63
    3030:	02 c0       	rjmp	.+4      	; 0x3036 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    3032:	00 e0       	ldi	r16, 0x00	; 0
    3034:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    3036:	46 2f       	mov	r20, r22
    3038:	4f 70       	andi	r20, 0x0F	; 15
    303a:	40 6e       	ori	r20, 0xE0	; 224
    303c:	20 2f       	mov	r18, r16
    303e:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    3040:	00 0f       	add	r16, r16
    3042:	01 2f       	mov	r16, r17
    3044:	00 1f       	adc	r16, r16
    3046:	11 0b       	sbc	r17, r17
    3048:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    304a:	0f 77       	andi	r16, 0x7F	; 127
    304c:	dc 01       	movw	r26, r24
    304e:	ed 91       	ld	r30, X+
    3050:	fc 91       	ld	r31, X
    3052:	63 e0       	ldi	r22, 0x03	; 3
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    3058:	1f 91       	pop	r17
    305a:	0f 91       	pop	r16
    305c:	08 95       	ret

0000305e <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    305e:	0f 93       	push	r16
    3060:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    3062:	46 2f       	mov	r20, r22
    3064:	4f 70       	andi	r20, 0x0F	; 15
    3066:	40 6c       	ori	r20, 0xC0	; 192
    3068:	2f 77       	andi	r18, 0x7F	; 127
    306a:	dc 01       	movw	r26, r24
    306c:	ed 91       	ld	r30, X+
    306e:	fc 91       	ld	r31, X
    3070:	62 e0       	ldi	r22, 0x02	; 2
    3072:	70 e0       	ldi	r23, 0x00	; 0
    3074:	00 e0       	ldi	r16, 0x00	; 0
    3076:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    3078:	0f 91       	pop	r16
    307a:	08 95       	ret

0000307c <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    307c:	0f 93       	push	r16
    307e:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    3080:	46 2f       	mov	r20, r22
    3082:	4f 70       	andi	r20, 0x0F	; 15
    3084:	40 6d       	ori	r20, 0xD0	; 208
    3086:	2f 77       	andi	r18, 0x7F	; 127
    3088:	dc 01       	movw	r26, r24
    308a:	ed 91       	ld	r30, X+
    308c:	fc 91       	ld	r31, X
    308e:	62 e0       	ldi	r22, 0x02	; 2
    3090:	70 e0       	ldi	r23, 0x00	; 0
    3092:	00 e0       	ldi	r16, 0x00	; 0
    3094:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    3096:	0f 91       	pop	r16
    3098:	08 95       	ret

0000309a <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    309a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    309c:	dc 01       	movw	r26, r24
    309e:	ed 91       	ld	r30, X+
    30a0:	fc 91       	ld	r31, X
    30a2:	61 e0       	ldi	r22, 0x01	; 1
    30a4:	70 e0       	ldi	r23, 0x00	; 0
    30a6:	48 ef       	ldi	r20, 0xF8	; 248
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	00 e0       	ldi	r16, 0x00	; 0
    30ac:	09 95       	icall
}
    30ae:	0f 91       	pop	r16
    30b0:	08 95       	ret

000030b2 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    30b2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    30b4:	dc 01       	movw	r26, r24
    30b6:	ed 91       	ld	r30, X+
    30b8:	fc 91       	ld	r31, X
    30ba:	61 e0       	ldi	r22, 0x01	; 1
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	49 ef       	ldi	r20, 0xF9	; 249
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	00 e0       	ldi	r16, 0x00	; 0
    30c4:	09 95       	icall
}
    30c6:	0f 91       	pop	r16
    30c8:	08 95       	ret

000030ca <midi_send_start>:

void midi_send_start(MidiDevice * device){
    30ca:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    30cc:	dc 01       	movw	r26, r24
    30ce:	ed 91       	ld	r30, X+
    30d0:	fc 91       	ld	r31, X
    30d2:	61 e0       	ldi	r22, 0x01	; 1
    30d4:	70 e0       	ldi	r23, 0x00	; 0
    30d6:	4a ef       	ldi	r20, 0xFA	; 250
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	00 e0       	ldi	r16, 0x00	; 0
    30dc:	09 95       	icall
}
    30de:	0f 91       	pop	r16
    30e0:	08 95       	ret

000030e2 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    30e2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    30e4:	dc 01       	movw	r26, r24
    30e6:	ed 91       	ld	r30, X+
    30e8:	fc 91       	ld	r31, X
    30ea:	61 e0       	ldi	r22, 0x01	; 1
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	4b ef       	ldi	r20, 0xFB	; 251
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	00 e0       	ldi	r16, 0x00	; 0
    30f4:	09 95       	icall
}
    30f6:	0f 91       	pop	r16
    30f8:	08 95       	ret

000030fa <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    30fa:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    30fc:	dc 01       	movw	r26, r24
    30fe:	ed 91       	ld	r30, X+
    3100:	fc 91       	ld	r31, X
    3102:	61 e0       	ldi	r22, 0x01	; 1
    3104:	70 e0       	ldi	r23, 0x00	; 0
    3106:	4c ef       	ldi	r20, 0xFC	; 252
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	00 e0       	ldi	r16, 0x00	; 0
    310c:	09 95       	icall
}
    310e:	0f 91       	pop	r16
    3110:	08 95       	ret

00003112 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    3112:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    3114:	dc 01       	movw	r26, r24
    3116:	ed 91       	ld	r30, X+
    3118:	fc 91       	ld	r31, X
    311a:	61 e0       	ldi	r22, 0x01	; 1
    311c:	70 e0       	ldi	r23, 0x00	; 0
    311e:	4e ef       	ldi	r20, 0xFE	; 254
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	00 e0       	ldi	r16, 0x00	; 0
    3124:	09 95       	icall
}
    3126:	0f 91       	pop	r16
    3128:	08 95       	ret

0000312a <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    312a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    312c:	dc 01       	movw	r26, r24
    312e:	ed 91       	ld	r30, X+
    3130:	fc 91       	ld	r31, X
    3132:	61 e0       	ldi	r22, 0x01	; 1
    3134:	70 e0       	ldi	r23, 0x00	; 0
    3136:	4f ef       	ldi	r20, 0xFF	; 255
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	00 e0       	ldi	r16, 0x00	; 0
    313c:	09 95       	icall
}
    313e:	0f 91       	pop	r16
    3140:	08 95       	ret

00003142 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    3142:	0f 93       	push	r16
   device->send_func(device, 2,
    3144:	26 2f       	mov	r18, r22
    3146:	2f 77       	andi	r18, 0x7F	; 127
    3148:	dc 01       	movw	r26, r24
    314a:	ed 91       	ld	r30, X+
    314c:	fc 91       	ld	r31, X
    314e:	62 e0       	ldi	r22, 0x02	; 2
    3150:	70 e0       	ldi	r23, 0x00	; 0
    3152:	41 ef       	ldi	r20, 0xF1	; 241
    3154:	00 e0       	ldi	r16, 0x00	; 0
    3156:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    3158:	0f 91       	pop	r16
    315a:	08 95       	ret

0000315c <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    315c:	0f 93       	push	r16
    315e:	1f 93       	push	r17
   device->send_func(device, 3,
    3160:	26 2f       	mov	r18, r22
    3162:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    3164:	8b 01       	movw	r16, r22
    3166:	00 0f       	add	r16, r16
    3168:	01 2f       	mov	r16, r17
    316a:	00 1f       	adc	r16, r16
    316c:	11 0b       	sbc	r17, r17
    316e:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    3170:	0f 77       	andi	r16, 0x7F	; 127
    3172:	dc 01       	movw	r26, r24
    3174:	ed 91       	ld	r30, X+
    3176:	fc 91       	ld	r31, X
    3178:	63 e0       	ldi	r22, 0x03	; 3
    317a:	70 e0       	ldi	r23, 0x00	; 0
    317c:	42 ef       	ldi	r20, 0xF2	; 242
    317e:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    3180:	1f 91       	pop	r17
    3182:	0f 91       	pop	r16
    3184:	08 95       	ret

00003186 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    3186:	0f 93       	push	r16
   device->send_func(device, 2,
    3188:	26 2f       	mov	r18, r22
    318a:	2f 77       	andi	r18, 0x7F	; 127
    318c:	dc 01       	movw	r26, r24
    318e:	ed 91       	ld	r30, X+
    3190:	fc 91       	ld	r31, X
    3192:	62 e0       	ldi	r22, 0x02	; 2
    3194:	70 e0       	ldi	r23, 0x00	; 0
    3196:	43 ef       	ldi	r20, 0xF3	; 243
    3198:	00 e0       	ldi	r16, 0x00	; 0
    319a:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    319c:	0f 91       	pop	r16
    319e:	08 95       	ret

000031a0 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    31a0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    31a2:	dc 01       	movw	r26, r24
    31a4:	ed 91       	ld	r30, X+
    31a6:	fc 91       	ld	r31, X
    31a8:	61 e0       	ldi	r22, 0x01	; 1
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	46 ef       	ldi	r20, 0xF6	; 246
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	00 e0       	ldi	r16, 0x00	; 0
    31b2:	09 95       	icall
}
    31b4:	0f 91       	pop	r16
    31b6:	08 95       	ret

000031b8 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    31b8:	0f 93       	push	r16
    31ba:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    31bc:	dc 01       	movw	r26, r24
    31be:	ed 91       	ld	r30, X+
    31c0:	fc 91       	ld	r31, X
    31c2:	61 e0       	ldi	r22, 0x01	; 1
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	00 e0       	ldi	r16, 0x00	; 0
    31ca:	09 95       	icall
}
    31cc:	0f 91       	pop	r16
    31ce:	08 95       	ret

000031d0 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    31d0:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    31d2:	dc 01       	movw	r26, r24
    31d4:	ed 91       	ld	r30, X+
    31d6:	fc 91       	ld	r31, X
    31d8:	09 95       	icall
}
    31da:	0f 91       	pop	r16
    31dc:	08 95       	ret

000031de <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    31de:	6f 92       	push	r6
    31e0:	7f 92       	push	r7
    31e2:	8f 92       	push	r8
    31e4:	9f 92       	push	r9
    31e6:	af 92       	push	r10
    31e8:	bf 92       	push	r11
    31ea:	cf 92       	push	r12
    31ec:	df 92       	push	r13
    31ee:	ef 92       	push	r14
    31f0:	ff 92       	push	r15
    31f2:	0f 93       	push	r16
    31f4:	1f 93       	push	r17
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	00 d0       	rcall	.+0      	; 0x31fc <midi_send_array+0x1e>
    31fc:	0f 92       	push	r0
    31fe:	cd b7       	in	r28, 0x3d	; 61
    3200:	de b7       	in	r29, 0x3e	; 62
    3202:	4c 01       	movw	r8, r24
    3204:	6b 01       	movw	r12, r22
    3206:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    3208:	61 15       	cp	r22, r1
    320a:	71 05       	cpc	r23, r1
    320c:	41 f1       	breq	.+80     	; 0x325e <midi_send_array+0x80>
    320e:	ee 24       	eor	r14, r14
    3210:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    3212:	0f 2e       	mov	r0, r31
    3214:	f3 e0       	ldi	r31, 0x03	; 3
    3216:	6f 2e       	mov	r6, r31
    3218:	77 24       	eor	r7, r7
    321a:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    321c:	19 82       	std	Y+1, r1	; 0x01
    321e:	1a 82       	std	Y+2, r1	; 0x02
    3220:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    3222:	86 01       	movw	r16, r12
    3224:	0e 19       	sub	r16, r14
    3226:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    3228:	04 30       	cpi	r16, 0x04	; 4
    322a:	11 05       	cpc	r17, r1
    322c:	08 f0       	brcs	.+2      	; 0x3230 <midi_send_array+0x52>
    322e:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    3230:	b5 01       	movw	r22, r10
    3232:	6e 0d       	add	r22, r14
    3234:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    3236:	ce 01       	movw	r24, r28
    3238:	01 96       	adiw	r24, 0x01	; 1
    323a:	40 2f       	mov	r20, r16
    323c:	51 2f       	mov	r21, r17
    323e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    3242:	c4 01       	movw	r24, r8
    3244:	b8 01       	movw	r22, r16
    3246:	49 81       	ldd	r20, Y+1	; 0x01
    3248:	2a 81       	ldd	r18, Y+2	; 0x02
    324a:	0b 81       	ldd	r16, Y+3	; 0x03
    324c:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    3250:	83 e0       	ldi	r24, 0x03	; 3
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	e8 0e       	add	r14, r24
    3256:	f9 1e       	adc	r15, r25
    3258:	ec 14       	cp	r14, r12
    325a:	fd 04       	cpc	r15, r13
    325c:	f8 f2       	brcs	.-66     	; 0x321c <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	1f 91       	pop	r17
    326a:	0f 91       	pop	r16
    326c:	ff 90       	pop	r15
    326e:	ef 90       	pop	r14
    3270:	df 90       	pop	r13
    3272:	cf 90       	pop	r12
    3274:	bf 90       	pop	r11
    3276:	af 90       	pop	r10
    3278:	9f 90       	pop	r9
    327a:	8f 90       	pop	r8
    327c:	7f 90       	pop	r7
    327e:	6f 90       	pop	r6
    3280:	08 95       	ret

00003282 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    3282:	fc 01       	movw	r30, r24
    3284:	73 83       	std	Z+3, r23	; 0x03
    3286:	62 83       	std	Z+2, r22	; 0x02
}
    3288:	08 95       	ret

0000328a <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    328a:	fc 01       	movw	r30, r24
    328c:	75 83       	std	Z+5, r23	; 0x05
    328e:	64 83       	std	Z+4, r22	; 0x04
}
    3290:	08 95       	ret

00003292 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    3292:	fc 01       	movw	r30, r24
    3294:	77 83       	std	Z+7, r23	; 0x07
    3296:	66 83       	std	Z+6, r22	; 0x06
}
    3298:	08 95       	ret

0000329a <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    329a:	fc 01       	movw	r30, r24
    329c:	71 87       	std	Z+9, r23	; 0x09
    329e:	60 87       	std	Z+8, r22	; 0x08
}
    32a0:	08 95       	ret

000032a2 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    32a2:	fc 01       	movw	r30, r24
    32a4:	73 87       	std	Z+11, r23	; 0x0b
    32a6:	62 87       	std	Z+10, r22	; 0x0a
}
    32a8:	08 95       	ret

000032aa <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    32aa:	fc 01       	movw	r30, r24
    32ac:	75 87       	std	Z+13, r23	; 0x0d
    32ae:	64 87       	std	Z+12, r22	; 0x0c
}
    32b0:	08 95       	ret

000032b2 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    32b2:	fc 01       	movw	r30, r24
    32b4:	77 87       	std	Z+15, r23	; 0x0f
    32b6:	66 87       	std	Z+14, r22	; 0x0e
}
    32b8:	08 95       	ret

000032ba <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    32ba:	fc 01       	movw	r30, r24
    32bc:	71 8b       	std	Z+17, r23	; 0x11
    32be:	60 8b       	std	Z+16, r22	; 0x10
}
    32c0:	08 95       	ret

000032c2 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    32c2:	fc 01       	movw	r30, r24
    32c4:	73 8b       	std	Z+19, r23	; 0x13
    32c6:	62 8b       	std	Z+18, r22	; 0x12
}
    32c8:	08 95       	ret

000032ca <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    32ca:	fc 01       	movw	r30, r24
    32cc:	75 8b       	std	Z+21, r23	; 0x15
    32ce:	64 8b       	std	Z+20, r22	; 0x14
}
    32d0:	08 95       	ret

000032d2 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    32d2:	fc 01       	movw	r30, r24
    32d4:	77 8b       	std	Z+23, r23	; 0x17
    32d6:	66 8b       	std	Z+22, r22	; 0x16
}
    32d8:	08 95       	ret

000032da <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    32da:	fc 01       	movw	r30, r24
    32dc:	71 8f       	std	Z+25, r23	; 0x19
    32de:	60 8f       	std	Z+24, r22	; 0x18
}
    32e0:	08 95       	ret

000032e2 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    32e2:	fc 01       	movw	r30, r24
    32e4:	73 8f       	std	Z+27, r23	; 0x1b
    32e6:	62 8f       	std	Z+26, r22	; 0x1a
}
    32e8:	08 95       	ret

000032ea <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    32ea:	fc 01       	movw	r30, r24
    32ec:	75 8f       	std	Z+29, r23	; 0x1d
    32ee:	64 8f       	std	Z+28, r22	; 0x1c
}
    32f0:	08 95       	ret

000032f2 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    32f2:	fc 01       	movw	r30, r24
    32f4:	77 8f       	std	Z+31, r23	; 0x1f
    32f6:	66 8f       	std	Z+30, r22	; 0x1e
}
    32f8:	08 95       	ret

000032fa <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    3300:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    3302:	1f a2       	lds	r17, 0x9f
    3304:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    3306:	bc 01       	movw	r22, r24
    3308:	68 5d       	subi	r22, 0xD8	; 216
    330a:	7f 4f       	sbci	r23, 0xFF	; 255
    330c:	88 51       	subi	r24, 0x18	; 24
    330e:	9f 4f       	sbci	r25, 0xFF	; 255
    3310:	40 ec       	ldi	r20, 0xC0	; 192
    3312:	0e 94 f7 16 	call	0x2dee	; 0x2dee <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    3316:	1b 82       	std	Y+3, r1	; 0x03
    3318:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    331a:	1d 82       	std	Y+5, r1	; 0x05
    331c:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    331e:	1f 82       	std	Y+7, r1	; 0x07
    3320:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    3322:	19 86       	std	Y+9, r1	; 0x09
    3324:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    3326:	1b 86       	std	Y+11, r1	; 0x0b
    3328:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    332a:	1d 86       	std	Y+13, r1	; 0x0d
    332c:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    332e:	1f 86       	std	Y+15, r1	; 0x0f
    3330:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    3332:	19 8a       	std	Y+17, r1	; 0x11
    3334:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    3336:	1b 8a       	std	Y+19, r1	; 0x13
    3338:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    333a:	1d 8a       	std	Y+21, r1	; 0x15
    333c:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    333e:	1f 8a       	std	Y+23, r1	; 0x17
    3340:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    3342:	19 8e       	std	Y+25, r1	; 0x19
    3344:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    3346:	1b 8e       	std	Y+27, r1	; 0x1b
    3348:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    334a:	1d 8e       	std	Y+29, r1	; 0x1d
    334c:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    334e:	1f 8e       	std	Y+31, r1	; 0x1f
    3350:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    3352:	19 a2       	lds	r17, 0x99
    3354:	18 a2       	lds	r17, 0x98
}
    3356:	df 91       	pop	r29
    3358:	cf 91       	pop	r28
    335a:	08 95       	ret

0000335c <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    335c:	ef 92       	push	r14
    335e:	ff 92       	push	r15
    3360:	0f 93       	push	r16
    3362:	1f 93       	push	r17
    3364:	cf 93       	push	r28
    3366:	df 93       	push	r29
    3368:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    336a:	66 23       	and	r22, r22
    336c:	99 f0       	breq	.+38     	; 0x3394 <midi_device_input+0x38>
    336e:	04 2f       	mov	r16, r20
    3370:	15 2f       	mov	r17, r21
    3372:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    3374:	0f 2e       	mov	r0, r31
    3376:	f8 ee       	ldi	r31, 0xE8	; 232
    3378:	ef 2e       	mov	r14, r31
    337a:	ff 24       	eor	r15, r15
    337c:	f0 2d       	mov	r31, r0
    337e:	e8 0e       	add	r14, r24
    3380:	f9 1e       	adc	r15, r25
    3382:	f8 01       	movw	r30, r16
    3384:	61 91       	ld	r22, Z+
    3386:	8f 01       	movw	r16, r30
    3388:	c7 01       	movw	r24, r14
    338a:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    338e:	cf 5f       	subi	r28, 0xFF	; 255
    3390:	cd 17       	cp	r28, r29
    3392:	b9 f7       	brne	.-18     	; 0x3382 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	1f 91       	pop	r17
    339a:	0f 91       	pop	r16
    339c:	ff 90       	pop	r15
    339e:	ef 90       	pop	r14
    33a0:	08 95       	ret

000033a2 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    33a2:	fc 01       	movw	r30, r24
    33a4:	71 83       	std	Z+1, r23	; 0x01
    33a6:	60 83       	st	Z, r22
}
    33a8:	08 95       	ret

000033aa <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    33aa:	fc 01       	movw	r30, r24
    33ac:	71 a3       	lds	r23, 0x51
    33ae:	60 a3       	lds	r22, 0x50
}
    33b0:	08 95       	ret

000033b2 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    33b2:	af 92       	push	r10
    33b4:	bf 92       	push	r11
    33b6:	cf 92       	push	r12
    33b8:	df 92       	push	r13
    33ba:	ef 92       	push	r14
    33bc:	ff 92       	push	r15
    33be:	0f 93       	push	r16
    33c0:	1f 93       	push	r17
    33c2:	cf 93       	push	r28
    33c4:	df 93       	push	r29
    33c6:	00 d0       	rcall	.+0      	; 0x33c8 <midi_input_callbacks+0x16>
    33c8:	0f 92       	push	r0
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	6c 01       	movw	r12, r24
    33d0:	5b 01       	movw	r10, r22
    33d2:	f4 2e       	mov	r15, r20
    33d4:	e2 2e       	mov	r14, r18
    33d6:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    33d8:	dc 01       	movw	r26, r24
    33da:	95 96       	adiw	r26, 0x25	; 37
    33dc:	8c 91       	ld	r24, X
    33de:	95 97       	sbiw	r26, 0x25	; 37
    33e0:	84 30       	cpi	r24, 0x04	; 4
    33e2:	e9 f4       	brne	.+58     	; 0x341e <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    33e4:	5a 96       	adiw	r26, 0x1a	; 26
    33e6:	ed 91       	ld	r30, X+
    33e8:	fc 91       	ld	r31, X
    33ea:	5b 97       	sbiw	r26, 0x1b	; 27
    33ec:	30 97       	sbiw	r30, 0x00	; 0
    33ee:	09 f4       	brne	.+2      	; 0x33f2 <midi_input_callbacks+0x40>
    33f0:	ee c0       	rjmp	.+476    	; 0x35ce <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    33f2:	cb 01       	movw	r24, r22
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	63 e0       	ldi	r22, 0x03	; 3
    33f8:	70 e0       	ldi	r23, 0x00	; 0
    33fa:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__udivmodhi4>
    33fe:	cb 01       	movw	r24, r22
    3400:	88 0f       	add	r24, r24
    3402:	99 1f       	adc	r25, r25
    3404:	68 0f       	add	r22, r24
    3406:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    3408:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    340a:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    340c:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    340e:	4a 2d       	mov	r20, r10
    3410:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    3412:	c6 01       	movw	r24, r12
    3414:	9e 01       	movw	r18, r28
    3416:	2f 5f       	subi	r18, 0xFF	; 255
    3418:	3f 4f       	sbci	r19, 0xFF	; 255
    341a:	09 95       	icall
    341c:	c8 c0       	rjmp	.+400    	; 0x35ae <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    341e:	62 30       	cpi	r22, 0x02	; 2
    3420:	71 05       	cpc	r23, r1
    3422:	09 f4       	brne	.+2      	; 0x3426 <midi_input_callbacks+0x74>
    3424:	5f c0       	rjmp	.+190    	; 0x34e4 <midi_input_callbacks+0x132>
    3426:	63 30       	cpi	r22, 0x03	; 3
    3428:	71 05       	cpc	r23, r1
    342a:	29 f0       	breq	.+10     	; 0x3436 <midi_input_callbacks+0x84>
    342c:	61 30       	cpi	r22, 0x01	; 1
    342e:	71 05       	cpc	r23, r1
    3430:	09 f0       	breq	.+2      	; 0x3434 <midi_input_callbacks+0x82>
    3432:	b3 c0       	rjmp	.+358    	; 0x359a <midi_input_callbacks+0x1e8>
    3434:	99 c0       	rjmp	.+306    	; 0x3568 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3436:	84 2f       	mov	r24, r20
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	80 7f       	andi	r24, 0xF0	; 240
    343c:	90 70       	andi	r25, 0x00	; 0
    343e:	80 3a       	cpi	r24, 0xA0	; 160
    3440:	91 05       	cpc	r25, r1
    3442:	29 f1       	breq	.+74     	; 0x348e <midi_input_callbacks+0xdc>
    3444:	81 3a       	cpi	r24, 0xA1	; 161
    3446:	91 05       	cpc	r25, r1
    3448:	3c f4       	brge	.+14     	; 0x3458 <midi_input_callbacks+0xa6>
    344a:	80 38       	cpi	r24, 0x80	; 128
    344c:	91 05       	cpc	r25, r1
    344e:	c9 f0       	breq	.+50     	; 0x3482 <midi_input_callbacks+0xd0>
    3450:	80 39       	cpi	r24, 0x90	; 144
    3452:	91 05       	cpc	r25, r1
    3454:	91 f5       	brne	.+100    	; 0x34ba <midi_input_callbacks+0x108>
    3456:	0f c0       	rjmp	.+30     	; 0x3476 <midi_input_callbacks+0xc4>
    3458:	80 3e       	cpi	r24, 0xE0	; 224
    345a:	91 05       	cpc	r25, r1
    345c:	f1 f0       	breq	.+60     	; 0x349a <midi_input_callbacks+0xe8>
    345e:	80 3f       	cpi	r24, 0xF0	; 240
    3460:	91 05       	cpc	r25, r1
    3462:	09 f1       	breq	.+66     	; 0x34a6 <midi_input_callbacks+0xf4>
    3464:	80 3b       	cpi	r24, 0xB0	; 176
    3466:	91 05       	cpc	r25, r1
    3468:	41 f5       	brne	.+80     	; 0x34ba <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    346a:	d6 01       	movw	r26, r12
    346c:	12 96       	adiw	r26, 0x02	; 2
    346e:	ed 91       	ld	r30, X+
    3470:	fc 91       	ld	r31, X
    3472:	13 97       	sbiw	r26, 0x03	; 3
              break;
    3474:	24 c0       	rjmp	.+72     	; 0x34be <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    3476:	d6 01       	movw	r26, r12
    3478:	14 96       	adiw	r26, 0x04	; 4
    347a:	ed 91       	ld	r30, X+
    347c:	fc 91       	ld	r31, X
    347e:	15 97       	sbiw	r26, 0x05	; 5
              break;
    3480:	1e c0       	rjmp	.+60     	; 0x34be <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    3482:	d6 01       	movw	r26, r12
    3484:	16 96       	adiw	r26, 0x06	; 6
    3486:	ed 91       	ld	r30, X+
    3488:	fc 91       	ld	r31, X
    348a:	17 97       	sbiw	r26, 0x07	; 7
              break;
    348c:	18 c0       	rjmp	.+48     	; 0x34be <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    348e:	d6 01       	movw	r26, r12
    3490:	18 96       	adiw	r26, 0x08	; 8
    3492:	ed 91       	ld	r30, X+
    3494:	fc 91       	ld	r31, X
    3496:	19 97       	sbiw	r26, 0x09	; 9
              break;
    3498:	12 c0       	rjmp	.+36     	; 0x34be <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    349a:	d6 01       	movw	r26, r12
    349c:	1a 96       	adiw	r26, 0x0a	; 10
    349e:	ed 91       	ld	r30, X+
    34a0:	fc 91       	ld	r31, X
    34a2:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    34a4:	0c c0       	rjmp	.+24     	; 0x34be <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    34a6:	b2 ef       	ldi	r27, 0xF2	; 242
    34a8:	4b 17       	cp	r20, r27
    34aa:	09 f0       	breq	.+2      	; 0x34ae <midi_input_callbacks+0xfc>
    34ac:	90 c0       	rjmp	.+288    	; 0x35ce <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    34ae:	d6 01       	movw	r26, r12
    34b0:	1c 96       	adiw	r26, 0x0c	; 12
    34b2:	ed 91       	ld	r30, X+
    34b4:	fc 91       	ld	r31, X
    34b6:	1d 97       	sbiw	r26, 0x0d	; 13
    34b8:	02 c0       	rjmp	.+4      	; 0x34be <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    34ba:	e0 e0       	ldi	r30, 0x00	; 0
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    34be:	30 97       	sbiw	r30, 0x00	; 0
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <midi_input_callbacks+0x112>
    34c2:	85 c0       	rjmp	.+266    	; 0x35ce <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    34c4:	b2 ef       	ldi	r27, 0xF2	; 242
    34c6:	fb 16       	cp	r15, r27
    34c8:	31 f4       	brne	.+12     	; 0x34d6 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    34ca:	c6 01       	movw	r24, r12
    34cc:	62 ef       	ldi	r22, 0xF2	; 242
    34ce:	4e 2d       	mov	r20, r14
    34d0:	21 2f       	mov	r18, r17
    34d2:	09 95       	icall
    34d4:	6c c0       	rjmp	.+216    	; 0x35ae <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    34d6:	6f 2d       	mov	r22, r15
    34d8:	6f 70       	andi	r22, 0x0F	; 15
    34da:	c6 01       	movw	r24, r12
    34dc:	4e 2d       	mov	r20, r14
    34de:	21 2f       	mov	r18, r17
    34e0:	09 95       	icall
    34e2:	65 c0       	rjmp	.+202    	; 0x35ae <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    34e4:	84 2f       	mov	r24, r20
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	80 7f       	andi	r24, 0xF0	; 240
    34ea:	90 70       	andi	r25, 0x00	; 0
    34ec:	80 3d       	cpi	r24, 0xD0	; 208
    34ee:	91 05       	cpc	r25, r1
    34f0:	61 f0       	breq	.+24     	; 0x350a <midi_input_callbacks+0x158>
    34f2:	80 3f       	cpi	r24, 0xF0	; 240
    34f4:	91 05       	cpc	r25, r1
    34f6:	79 f0       	breq	.+30     	; 0x3516 <midi_input_callbacks+0x164>
    34f8:	80 3c       	cpi	r24, 0xC0	; 192
    34fa:	91 05       	cpc	r25, r1
    34fc:	f9 f4       	brne	.+62     	; 0x353c <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    34fe:	d6 01       	movw	r26, r12
    3500:	1e 96       	adiw	r26, 0x0e	; 14
    3502:	ed 91       	ld	r30, X+
    3504:	fc 91       	ld	r31, X
    3506:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    3508:	1b c0       	rjmp	.+54     	; 0x3540 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    350a:	d6 01       	movw	r26, r12
    350c:	50 96       	adiw	r26, 0x10	; 16
    350e:	ed 91       	ld	r30, X+
    3510:	fc 91       	ld	r31, X
    3512:	51 97       	sbiw	r26, 0x11	; 17
              break;
    3514:	15 c0       	rjmp	.+42     	; 0x3540 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    3516:	b3 ef       	ldi	r27, 0xF3	; 243
    3518:	4b 17       	cp	r20, r27
    351a:	31 f4       	brne	.+12     	; 0x3528 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    351c:	d6 01       	movw	r26, r12
    351e:	52 96       	adiw	r26, 0x12	; 18
    3520:	ed 91       	ld	r30, X+
    3522:	fc 91       	ld	r31, X
    3524:	53 97       	sbiw	r26, 0x13	; 19
    3526:	0c c0       	rjmp	.+24     	; 0x3540 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    3528:	b1 ef       	ldi	r27, 0xF1	; 241
    352a:	4b 17       	cp	r20, r27
    352c:	09 f0       	breq	.+2      	; 0x3530 <midi_input_callbacks+0x17e>
    352e:	4f c0       	rjmp	.+158    	; 0x35ce <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    3530:	d6 01       	movw	r26, r12
    3532:	54 96       	adiw	r26, 0x14	; 20
    3534:	ed 91       	ld	r30, X+
    3536:	fc 91       	ld	r31, X
    3538:	55 97       	sbiw	r26, 0x15	; 21
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    353c:	e0 e0       	ldi	r30, 0x00	; 0
    353e:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    3540:	30 97       	sbiw	r30, 0x00	; 0
    3542:	09 f4       	brne	.+2      	; 0x3546 <midi_input_callbacks+0x194>
    3544:	44 c0       	rjmp	.+136    	; 0x35ce <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    3546:	b3 ef       	ldi	r27, 0xF3	; 243
    3548:	fb 16       	cp	r15, r27
    354a:	19 f0       	breq	.+6      	; 0x3552 <midi_input_callbacks+0x1a0>
    354c:	81 ef       	ldi	r24, 0xF1	; 241
    354e:	f8 16       	cp	r15, r24
    3550:	29 f4       	brne	.+10     	; 0x355c <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    3552:	c6 01       	movw	r24, r12
    3554:	6f 2d       	mov	r22, r15
    3556:	4e 2d       	mov	r20, r14
    3558:	09 95       	icall
    355a:	29 c0       	rjmp	.+82     	; 0x35ae <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    355c:	6f 2d       	mov	r22, r15
    355e:	6f 70       	andi	r22, 0x0F	; 15
    3560:	c6 01       	movw	r24, r12
    3562:	4e 2d       	mov	r20, r14
    3564:	09 95       	icall
    3566:	23 c0       	rjmp	.+70     	; 0x35ae <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    3568:	84 2f       	mov	r24, r20
    356a:	0e 94 76 17 	call	0x2eec	; 0x2eec <midi_is_realtime>
    356e:	88 23       	and	r24, r24
    3570:	31 f0       	breq	.+12     	; 0x357e <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    3572:	d6 01       	movw	r26, r12
    3574:	56 96       	adiw	r26, 0x16	; 22
    3576:	ed 91       	ld	r30, X+
    3578:	fc 91       	ld	r31, X
    357a:	57 97       	sbiw	r26, 0x17	; 23
    357c:	08 c0       	rjmp	.+16     	; 0x358e <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    357e:	b6 ef       	ldi	r27, 0xF6	; 246
    3580:	fb 16       	cp	r15, r27
    3582:	29 f5       	brne	.+74     	; 0x35ce <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    3584:	d6 01       	movw	r26, r12
    3586:	58 96       	adiw	r26, 0x18	; 24
    3588:	ed 91       	ld	r30, X+
    358a:	fc 91       	ld	r31, X
    358c:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    358e:	30 97       	sbiw	r30, 0x00	; 0
    3590:	f1 f0       	breq	.+60     	; 0x35ce <midi_input_callbacks+0x21c>
            func(device, byte0);
    3592:	c6 01       	movw	r24, r12
    3594:	6f 2d       	mov	r22, r15
    3596:	09 95       	icall
    3598:	0a c0       	rjmp	.+20     	; 0x35ae <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    359a:	64 30       	cpi	r22, 0x04	; 4
    359c:	71 05       	cpc	r23, r1
    359e:	a8 f4       	brcc	.+42     	; 0x35ca <midi_input_callbacks+0x218>
    35a0:	16 c0       	rjmp	.+44     	; 0x35ce <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    35a2:	c6 01       	movw	r24, r12
    35a4:	b5 01       	movw	r22, r10
    35a6:	4f 2d       	mov	r20, r15
    35a8:	2e 2d       	mov	r18, r14
    35aa:	01 2f       	mov	r16, r17
    35ac:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    35ae:	d6 01       	movw	r26, r12
    35b0:	5e 96       	adiw	r26, 0x1e	; 30
    35b2:	ed 91       	ld	r30, X+
    35b4:	fc 91       	ld	r31, X
    35b6:	5f 97       	sbiw	r26, 0x1f	; 31
    35b8:	30 97       	sbiw	r30, 0x00	; 0
    35ba:	89 f0       	breq	.+34     	; 0x35de <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    35bc:	c6 01       	movw	r24, r12
    35be:	b5 01       	movw	r22, r10
    35c0:	4f 2d       	mov	r20, r15
    35c2:	2e 2d       	mov	r18, r14
    35c4:	01 2f       	mov	r16, r17
    35c6:	09 95       	icall
    35c8:	0a c0       	rjmp	.+20     	; 0x35de <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    35ca:	aa 24       	eor	r10, r10
    35cc:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    35ce:	d6 01       	movw	r26, r12
    35d0:	5c 96       	adiw	r26, 0x1c	; 28
    35d2:	ed 91       	ld	r30, X+
    35d4:	fc 91       	ld	r31, X
    35d6:	5d 97       	sbiw	r26, 0x1d	; 29
    35d8:	30 97       	sbiw	r30, 0x00	; 0
    35da:	19 f7       	brne	.-58     	; 0x35a2 <midi_input_callbacks+0x1f0>
    35dc:	e8 cf       	rjmp	.-48     	; 0x35ae <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	1f 91       	pop	r17
    35ea:	0f 91       	pop	r16
    35ec:	ff 90       	pop	r15
    35ee:	ef 90       	pop	r14
    35f0:	df 90       	pop	r13
    35f2:	cf 90       	pop	r12
    35f4:	bf 90       	pop	r11
    35f6:	af 90       	pop	r10
    35f8:	08 95       	ret

000035fa <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    35fa:	ef 92       	push	r14
    35fc:	ff 92       	push	r15
    35fe:	0f 93       	push	r16
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	7c 01       	movw	r14, r24
    3606:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    3608:	86 2f       	mov	r24, r22
    360a:	0e 94 76 17 	call	0x2eec	; 0x2eec <midi_is_realtime>
    360e:	88 23       	and	r24, r24
    3610:	91 f0       	breq	.+36     	; 0x3636 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    3612:	d7 01       	movw	r26, r14
    3614:	95 96       	adiw	r26, 0x25	; 37
    3616:	dc 91       	ld	r29, X
    3618:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	95 96       	adiw	r26, 0x25	; 37
    361e:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    3620:	c7 01       	movw	r24, r14
    3622:	61 e0       	ldi	r22, 0x01	; 1
    3624:	70 e0       	ldi	r23, 0x00	; 0
    3626:	4c 2f       	mov	r20, r28
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	00 e0       	ldi	r16, 0x00	; 0
    362c:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <midi_input_callbacks>
    device->input_state = state;
    3630:	f7 01       	movw	r30, r14
    3632:	d5 a3       	lds	r29, 0x55
    3634:	b7 c0       	rjmp	.+366    	; 0x37a4 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    3636:	8c 2f       	mov	r24, r28
    3638:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <midi_is_statusbyte>
    363c:	88 23       	and	r24, r24
    363e:	09 f4       	brne	.+2      	; 0x3642 <midi_process_byte+0x48>
    3640:	73 c0       	rjmp	.+230    	; 0x3728 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    3642:	d7 01       	movw	r26, r14
    3644:	95 96       	adiw	r26, 0x25	; 37
    3646:	8c 91       	ld	r24, X
    3648:	95 97       	sbiw	r26, 0x25	; 37
    364a:	84 30       	cpi	r24, 0x04	; 4
    364c:	49 f0       	breq	.+18     	; 0x3660 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    364e:	92 96       	adiw	r26, 0x22	; 34
    3650:	cc 93       	st	X, r28
    3652:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	97 96       	adiw	r26, 0x27	; 39
    365a:	9c 93       	st	X, r25
    365c:	8e 93       	st	-X, r24
    365e:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    3660:	8c 2f       	mov	r24, r28
    3662:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <midi_packet_length>
    3666:	81 30       	cpi	r24, 0x01	; 1
    3668:	41 f0       	breq	.+16     	; 0x367a <midi_process_byte+0x80>
    366a:	81 30       	cpi	r24, 0x01	; 1
    366c:	00 f1       	brcs	.+64     	; 0x36ae <midi_process_byte+0xb4>
    366e:	82 30       	cpi	r24, 0x02	; 2
    3670:	a1 f0       	breq	.+40     	; 0x369a <midi_process_byte+0xa0>
    3672:	83 30       	cpi	r24, 0x03	; 3
    3674:	09 f0       	breq	.+2      	; 0x3678 <midi_process_byte+0x7e>
    3676:	4f c0       	rjmp	.+158    	; 0x3716 <midi_process_byte+0x11c>
    3678:	14 c0       	rjmp	.+40     	; 0x36a2 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	f7 01       	movw	r30, r14
    367e:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3680:	c7 01       	movw	r24, r14
    3682:	61 e0       	ldi	r22, 0x01	; 1
    3684:	70 e0       	ldi	r23, 0x00	; 0
    3686:	4c 2f       	mov	r20, r28
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	00 e0       	ldi	r16, 0x00	; 0
    368c:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <midi_input_callbacks>
        device->input_state = IDLE;
    3690:	d7 01       	movw	r26, r14
    3692:	95 96       	adiw	r26, 0x25	; 37
    3694:	1c 92       	st	X, r1
    3696:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3698:	85 c0       	rjmp	.+266    	; 0x37a4 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    369a:	82 e0       	ldi	r24, 0x02	; 2
    369c:	f7 01       	movw	r30, r14
    369e:	85 a3       	lds	r24, 0x55
        break;
    36a0:	81 c0       	rjmp	.+258    	; 0x37a4 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    36a2:	83 e0       	ldi	r24, 0x03	; 3
    36a4:	d7 01       	movw	r26, r14
    36a6:	95 96       	adiw	r26, 0x25	; 37
    36a8:	8c 93       	st	X, r24
    36aa:	95 97       	sbiw	r26, 0x25	; 37
        break;
    36ac:	7b c0       	rjmp	.+246    	; 0x37a4 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    36ae:	c0 3f       	cpi	r28, 0xF0	; 240
    36b0:	19 f0       	breq	.+6      	; 0x36b8 <midi_process_byte+0xbe>
    36b2:	c7 3f       	cpi	r28, 0xF7	; 247
    36b4:	59 f5       	brne	.+86     	; 0x370c <midi_process_byte+0x112>
    36b6:	0a c0       	rjmp	.+20     	; 0x36cc <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    36b8:	84 e0       	ldi	r24, 0x04	; 4
    36ba:	f7 01       	movw	r30, r14
    36bc:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    36be:	80 ef       	ldi	r24, 0xF0	; 240
    36c0:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	97 a3       	lds	r25, 0x57
    36c8:	86 a3       	lds	r24, 0x56
            break;
    36ca:	6c c0       	rjmp	.+216    	; 0x37a4 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    36cc:	d7 01       	movw	r26, r14
    36ce:	96 96       	adiw	r26, 0x26	; 38
    36d0:	2d 91       	ld	r18, X+
    36d2:	3c 91       	ld	r19, X
    36d4:	97 97       	sbiw	r26, 0x27	; 39
    36d6:	c9 01       	movw	r24, r18
    36d8:	63 e0       	ldi	r22, 0x03	; 3
    36da:	70 e0       	ldi	r23, 0x00	; 0
    36dc:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__udivmodhi4>
    36e0:	f7 01       	movw	r30, r14
    36e2:	e8 0f       	add	r30, r24
    36e4:	f9 1f       	adc	r31, r25
    36e6:	87 ef       	ldi	r24, 0xF7	; 247
    36e8:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    36ea:	b9 01       	movw	r22, r18
    36ec:	6f 5f       	subi	r22, 0xFF	; 255
    36ee:	7f 4f       	sbci	r23, 0xFF	; 255
    36f0:	f7 01       	movw	r30, r14
    36f2:	77 a3       	lds	r23, 0x57
    36f4:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    36f6:	c7 01       	movw	r24, r14
    36f8:	42 a1       	lds	r20, 0x42
    36fa:	23 a1       	lds	r18, 0x43
    36fc:	04 a1       	lds	r16, 0x44
    36fe:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3702:	d7 01       	movw	r26, r14
    3704:	95 96       	adiw	r26, 0x25	; 37
    3706:	1c 92       	st	X, r1
    3708:	95 97       	sbiw	r26, 0x25	; 37
            break;
    370a:	4c c0       	rjmp	.+152    	; 0x37a4 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    370c:	f7 01       	movw	r30, r14
    370e:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    3710:	17 a2       	lds	r17, 0x97
    3712:	16 a2       	lds	r17, 0x96
    3714:	47 c0       	rjmp	.+142    	; 0x37a4 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    3716:	d7 01       	movw	r26, r14
    3718:	95 96       	adiw	r26, 0x25	; 37
    371a:	1c 92       	st	X, r1
    371c:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    371e:	97 96       	adiw	r26, 0x27	; 39
    3720:	1c 92       	st	X, r1
    3722:	1e 92       	st	-X, r1
    3724:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3726:	3e c0       	rjmp	.+124    	; 0x37a4 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    3728:	f7 01       	movw	r30, r14
    372a:	25 a1       	lds	r18, 0x45
    372c:	22 23       	and	r18, r18
    372e:	d1 f1       	breq	.+116    	; 0x37a4 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    3730:	06 a0       	lds	r16, 0x86
    3732:	f7 a1       	lds	r31, 0x47
    3734:	e0 2d       	mov	r30, r0
    3736:	cf 01       	movw	r24, r30
    3738:	63 e0       	ldi	r22, 0x03	; 3
    373a:	70 e0       	ldi	r23, 0x00	; 0
    373c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__udivmodhi4>
    3740:	ac 01       	movw	r20, r24
    3742:	8e 0d       	add	r24, r14
    3744:	9f 1d       	adc	r25, r15
    3746:	dc 01       	movw	r26, r24
    3748:	92 96       	adiw	r26, 0x22	; 34
    374a:	cc 93       	st	X, r28
    374c:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    374e:	bf 01       	movw	r22, r30
    3750:	6f 5f       	subi	r22, 0xFF	; 255
    3752:	7f 4f       	sbci	r23, 0xFF	; 255
    3754:	f7 01       	movw	r30, r14
    3756:	77 a3       	lds	r23, 0x57
    3758:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    375a:	41 30       	cpi	r20, 0x01	; 1
    375c:	51 05       	cpc	r21, r1
    375e:	91 f0       	breq	.+36     	; 0x3784 <midi_process_byte+0x18a>
    3760:	42 30       	cpi	r20, 0x02	; 2
    3762:	51 05       	cpc	r21, r1
    3764:	f9 f4       	brne	.+62     	; 0x37a4 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    3766:	c7 01       	movw	r24, r14
    3768:	42 a1       	lds	r20, 0x42
    376a:	23 a1       	lds	r18, 0x43
    376c:	04 a1       	lds	r16, 0x44
    376e:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    3772:	f7 01       	movw	r30, r14
    3774:	85 a1       	lds	r24, 0x45
    3776:	84 30       	cpi	r24, 0x04	; 4
    3778:	a9 f0       	breq	.+42     	; 0x37a4 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	97 a3       	lds	r25, 0x57
    3780:	86 a3       	lds	r24, 0x56
    3782:	10 c0       	rjmp	.+32     	; 0x37a4 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3784:	22 30       	cpi	r18, 0x02	; 2
    3786:	71 f4       	brne	.+28     	; 0x37a4 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3788:	c7 01       	movw	r24, r14
    378a:	42 a1       	lds	r20, 0x42
    378c:	23 a1       	lds	r18, 0x43
    378e:	00 e0       	ldi	r16, 0x00	; 0
    3790:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3794:	f7 01       	movw	r30, r14
    3796:	85 a1       	lds	r24, 0x45
    3798:	84 30       	cpi	r24, 0x04	; 4
    379a:	21 f0       	breq	.+8      	; 0x37a4 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	97 a3       	lds	r25, 0x57
    37a2:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    37a4:	df 91       	pop	r29
    37a6:	cf 91       	pop	r28
    37a8:	0f 91       	pop	r16
    37aa:	ff 90       	pop	r15
    37ac:	ef 90       	pop	r14
    37ae:	08 95       	ret

000037b0 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    37b0:	cf 92       	push	r12
    37b2:	df 92       	push	r13
    37b4:	ef 92       	push	r14
    37b6:	ff 92       	push	r15
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    37c2:	dc 01       	movw	r26, r24
    37c4:	90 96       	adiw	r26, 0x20	; 32
    37c6:	ed 91       	ld	r30, X+
    37c8:	fc 91       	ld	r31, X
    37ca:	91 97       	sbiw	r26, 0x21	; 33
    37cc:	30 97       	sbiw	r30, 0x00	; 0
    37ce:	09 f0       	breq	.+2      	; 0x37d2 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    37d0:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    37d2:	0f 2e       	mov	r0, r31
    37d4:	f8 ee       	ldi	r31, 0xE8	; 232
    37d6:	ef 2e       	mov	r14, r31
    37d8:	ff 24       	eor	r15, r15
    37da:	f0 2d       	mov	r31, r0
    37dc:	ec 0c       	add	r14, r12
    37de:	fd 1c       	adc	r15, r13
    37e0:	c7 01       	movw	r24, r14
    37e2:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    37e6:	c8 2f       	mov	r28, r24
    37e8:	d0 e0       	ldi	r29, 0x00	; 0
    37ea:	20 97       	sbiw	r28, 0x00	; 0
    37ec:	99 f0       	breq	.+38     	; 0x3814 <midi_device_process+0x64>
    37ee:	00 e0       	ldi	r16, 0x00	; 0
    37f0:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    37f2:	c7 01       	movw	r24, r14
    37f4:	60 e0       	ldi	r22, 0x00	; 0
    37f6:	0e 94 42 17 	call	0x2e84	; 0x2e84 <bytequeue_get>
    37fa:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    37fc:	c6 01       	movw	r24, r12
    37fe:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3802:	c7 01       	movw	r24, r14
    3804:	61 e0       	ldi	r22, 0x01	; 1
    3806:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    380a:	0f 5f       	subi	r16, 0xFF	; 255
    380c:	1f 4f       	sbci	r17, 0xFF	; 255
    380e:	0c 17       	cp	r16, r28
    3810:	1d 07       	cpc	r17, r29
    3812:	78 f3       	brcs	.-34     	; 0x37f2 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    3814:	df 91       	pop	r29
    3816:	cf 91       	pop	r28
    3818:	1f 91       	pop	r17
    381a:	0f 91       	pop	r16
    381c:	ff 90       	pop	r15
    381e:	ef 90       	pop	r14
    3820:	df 90       	pop	r13
    3822:	cf 90       	pop	r12
    3824:	08 95       	ret

00003826 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3826:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    3828:	67 e0       	ldi	r22, 0x07	; 7
    382a:	70 e0       	ldi	r23, 0x00	; 0
    382c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__udivmodhi4>
    3830:	48 2f       	mov	r20, r24
   if (remainder)
    3832:	88 23       	and	r24, r24
    3834:	81 f0       	breq	.+32     	; 0x3856 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    3836:	c9 01       	movw	r24, r18
    3838:	67 e0       	ldi	r22, 0x07	; 7
    383a:	70 e0       	ldi	r23, 0x00	; 0
    383c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__udivmodhi4>
    3840:	cb 01       	movw	r24, r22
    3842:	88 0f       	add	r24, r24
    3844:	99 1f       	adc	r25, r25
    3846:	88 0f       	add	r24, r24
    3848:	99 1f       	adc	r25, r25
    384a:	88 0f       	add	r24, r24
    384c:	99 1f       	adc	r25, r25
    384e:	01 96       	adiw	r24, 0x01	; 1
    3850:	84 0f       	add	r24, r20
    3852:	91 1d       	adc	r25, r1
    3854:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3856:	c9 01       	movw	r24, r18
    3858:	67 e0       	ldi	r22, 0x07	; 7
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__udivmodhi4>
    3860:	cb 01       	movw	r24, r22
    3862:	88 0f       	add	r24, r24
    3864:	99 1f       	adc	r25, r25
    3866:	88 0f       	add	r24, r24
    3868:	99 1f       	adc	r25, r25
    386a:	88 0f       	add	r24, r24
    386c:	99 1f       	adc	r25, r25
}
    386e:	08 95       	ret

00003870 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3870:	48 2f       	mov	r20, r24
    3872:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3874:	a1 f0       	breq	.+40     	; 0x389e <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3876:	9c 01       	movw	r18, r24
    3878:	36 95       	lsr	r19
    387a:	27 95       	ror	r18
    387c:	36 95       	lsr	r19
    387e:	27 95       	ror	r18
    3880:	36 95       	lsr	r19
    3882:	27 95       	ror	r18
    3884:	c9 01       	movw	r24, r18
    3886:	88 0f       	add	r24, r24
    3888:	99 1f       	adc	r25, r25
    388a:	88 0f       	add	r24, r24
    388c:	99 1f       	adc	r25, r25
    388e:	88 0f       	add	r24, r24
    3890:	99 1f       	adc	r25, r25
    3892:	82 1b       	sub	r24, r18
    3894:	93 0b       	sbc	r25, r19
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	84 0f       	add	r24, r20
    389a:	91 1d       	adc	r25, r1
    389c:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    389e:	9c 01       	movw	r18, r24
    38a0:	36 95       	lsr	r19
    38a2:	27 95       	ror	r18
    38a4:	36 95       	lsr	r19
    38a6:	27 95       	ror	r18
    38a8:	36 95       	lsr	r19
    38aa:	27 95       	ror	r18
    38ac:	c9 01       	movw	r24, r18
    38ae:	88 0f       	add	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	82 1b       	sub	r24, r18
    38bc:	93 0b       	sbc	r25, r19
}
    38be:	08 95       	ret

000038c0 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    38c0:	2f 92       	push	r2
    38c2:	3f 92       	push	r3
    38c4:	4f 92       	push	r4
    38c6:	5f 92       	push	r5
    38c8:	6f 92       	push	r6
    38ca:	7f 92       	push	r7
    38cc:	8f 92       	push	r8
    38ce:	9f 92       	push	r9
    38d0:	af 92       	push	r10
    38d2:	bf 92       	push	r11
    38d4:	cf 92       	push	r12
    38d6:	df 92       	push	r13
    38d8:	ef 92       	push	r14
    38da:	ff 92       	push	r15
    38dc:	0f 93       	push	r16
    38de:	1f 93       	push	r17
    38e0:	cf 93       	push	r28
    38e2:	df 93       	push	r29
    38e4:	00 d0       	rcall	.+0      	; 0x38e6 <sysex_encode+0x26>
    38e6:	00 d0       	rcall	.+0      	; 0x38e8 <sysex_encode+0x28>
    38e8:	00 d0       	rcall	.+0      	; 0x38ea <sysex_encode+0x2a>
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	1c 01       	movw	r2, r24
    38f0:	7a 83       	std	Y+2, r23	; 0x02
    38f2:	69 83       	std	Y+1, r22	; 0x01
    38f4:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    38f6:	ca 01       	movw	r24, r20
    38f8:	67 e0       	ldi	r22, 0x07	; 7
    38fa:	70 e0       	ldi	r23, 0x00	; 0
    38fc:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__udivmodhi4>
    3900:	2b 01       	movw	r4, r22
    3902:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3904:	61 15       	cp	r22, r1
    3906:	71 05       	cpc	r23, r1
    3908:	b1 f1       	breq	.+108    	; 0x3976 <sysex_encode+0xb6>
    390a:	81 01       	movw	r16, r2
    390c:	e9 80       	ldd	r14, Y+1	; 0x01
    390e:	fa 80       	ldd	r15, Y+2	; 0x02
    3910:	cc 24       	eor	r12, r12
    3912:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3914:	88 24       	eor	r8, r8
    3916:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3918:	1e 83       	std	Y+6, r17	; 0x06
    391a:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    391c:	f8 01       	movw	r30, r16
    391e:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3920:	fc 82       	std	Y+4, r15	; 0x04
    3922:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3924:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3926:	ab 81       	ldd	r26, Y+3	; 0x03
    3928:	bc 81       	ldd	r27, Y+4	; 0x04
    392a:	2d 91       	ld	r18, X+
    392c:	bc 83       	std	Y+4, r27	; 0x04
    392e:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3930:	4f 5f       	subi	r20, 0xFF	; 255
    3932:	5f 4f       	sbci	r21, 0xFF	; 255
    3934:	82 2f       	mov	r24, r18
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	80 78       	andi	r24, 0x80	; 128
    393a:	90 70       	andi	r25, 0x00	; 0
    393c:	bc 01       	movw	r22, r24
    393e:	04 2e       	mov	r0, r20
    3940:	02 c0       	rjmp	.+4      	; 0x3946 <sysex_encode+0x86>
    3942:	75 95       	asr	r23
    3944:	67 95       	ror	r22
    3946:	0a 94       	dec	r0
    3948:	e2 f7       	brpl	.-8      	; 0x3942 <sysex_encode+0x82>
    394a:	ad 81       	ldd	r26, Y+5	; 0x05
    394c:	be 81       	ldd	r27, Y+6	; 0x06
    394e:	8c 91       	ld	r24, X
    3950:	86 2b       	or	r24, r22
    3952:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3954:	2f 77       	andi	r18, 0x7F	; 127
    3956:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3958:	47 30       	cpi	r20, 0x07	; 7
    395a:	51 05       	cpc	r21, r1
    395c:	21 f7       	brne	.-56     	; 0x3926 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    395e:	08 94       	sec
    3960:	c1 1c       	adc	r12, r1
    3962:	d1 1c       	adc	r13, r1
    3964:	08 5f       	subi	r16, 0xF8	; 248
    3966:	1f 4f       	sbci	r17, 0xFF	; 255
    3968:	e7 e0       	ldi	r30, 0x07	; 7
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	ee 0e       	add	r14, r30
    396e:	ff 1e       	adc	r15, r31
    3970:	ca 14       	cp	r12, r10
    3972:	db 04       	cpc	r13, r11
    3974:	89 f6       	brne	.-94     	; 0x3918 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3976:	c3 01       	movw	r24, r6
    3978:	67 e0       	ldi	r22, 0x07	; 7
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__udivmodhi4>
   if (remainder) {
    3980:	88 23       	and	r24, r24
    3982:	d9 f1       	breq	.+118    	; 0x39fa <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3984:	82 01       	movw	r16, r4
    3986:	00 0f       	add	r16, r16
    3988:	11 1f       	adc	r17, r17
    398a:	00 0f       	add	r16, r16
    398c:	11 1f       	adc	r17, r17
    398e:	00 0f       	add	r16, r16
    3990:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3992:	78 01       	movw	r14, r16
    3994:	e4 18       	sub	r14, r4
    3996:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3998:	d1 01       	movw	r26, r2
    399a:	a0 0f       	add	r26, r16
    399c:	b1 1f       	adc	r27, r17
    399e:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    39a0:	68 2f       	mov	r22, r24
    39a2:	70 e0       	ldi	r23, 0x00	; 0
    39a4:	61 15       	cp	r22, r1
    39a6:	71 05       	cpc	r23, r1
    39a8:	19 f1       	breq	.+70     	; 0x39f0 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    39aa:	e9 81       	ldd	r30, Y+1	; 0x01
    39ac:	fa 81       	ldd	r31, Y+2	; 0x02
    39ae:	ee 0e       	add	r14, r30
    39b0:	ff 1e       	adc	r15, r31
    39b2:	c8 01       	movw	r24, r16
    39b4:	01 96       	adiw	r24, 0x01	; 1
    39b6:	28 0e       	add	r2, r24
    39b8:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    39be:	f7 01       	movw	r30, r14
    39c0:	41 91       	ld	r20, Z+
    39c2:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    39c4:	2f 5f       	subi	r18, 0xFF	; 255
    39c6:	3f 4f       	sbci	r19, 0xFF	; 255
    39c8:	84 2f       	mov	r24, r20
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	80 78       	andi	r24, 0x80	; 128
    39ce:	90 70       	andi	r25, 0x00	; 0
    39d0:	02 2e       	mov	r0, r18
    39d2:	02 c0       	rjmp	.+4      	; 0x39d8 <sysex_encode+0x118>
    39d4:	95 95       	asr	r25
    39d6:	87 95       	ror	r24
    39d8:	0a 94       	dec	r0
    39da:	e2 f7       	brpl	.-8      	; 0x39d4 <sysex_encode+0x114>
    39dc:	9c 91       	ld	r25, X
    39de:	89 2b       	or	r24, r25
    39e0:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    39e2:	4f 77       	andi	r20, 0x7F	; 127
    39e4:	f1 01       	movw	r30, r2
    39e6:	41 93       	st	Z+, r20
    39e8:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    39ea:	26 17       	cp	r18, r22
    39ec:	37 07       	cpc	r19, r23
    39ee:	38 f3       	brcs	.-50     	; 0x39be <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    39f0:	c8 01       	movw	r24, r16
    39f2:	01 96       	adiw	r24, 0x01	; 1
    39f4:	86 0f       	add	r24, r22
    39f6:	97 1f       	adc	r25, r23
    39f8:	07 c0       	rjmp	.+14     	; 0x3a08 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    39fa:	c2 01       	movw	r24, r4
    39fc:	88 0f       	add	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	88 0f       	add	r24, r24
    3a02:	99 1f       	adc	r25, r25
    3a04:	88 0f       	add	r24, r24
    3a06:	99 1f       	adc	r25, r25
   }
}
    3a08:	26 96       	adiw	r28, 0x06	; 6
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	df 91       	pop	r29
    3a16:	cf 91       	pop	r28
    3a18:	1f 91       	pop	r17
    3a1a:	0f 91       	pop	r16
    3a1c:	ff 90       	pop	r15
    3a1e:	ef 90       	pop	r14
    3a20:	df 90       	pop	r13
    3a22:	cf 90       	pop	r12
    3a24:	bf 90       	pop	r11
    3a26:	af 90       	pop	r10
    3a28:	9f 90       	pop	r9
    3a2a:	8f 90       	pop	r8
    3a2c:	7f 90       	pop	r7
    3a2e:	6f 90       	pop	r6
    3a30:	5f 90       	pop	r5
    3a32:	4f 90       	pop	r4
    3a34:	3f 90       	pop	r3
    3a36:	2f 90       	pop	r2
    3a38:	08 95       	ret

00003a3a <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a3a:	6f 92       	push	r6
    3a3c:	7f 92       	push	r7
    3a3e:	8f 92       	push	r8
    3a40:	9f 92       	push	r9
    3a42:	af 92       	push	r10
    3a44:	bf 92       	push	r11
    3a46:	cf 92       	push	r12
    3a48:	df 92       	push	r13
    3a4a:	ef 92       	push	r14
    3a4c:	ff 92       	push	r15
    3a4e:	0f 93       	push	r16
    3a50:	1f 93       	push	r17
    3a52:	cf 93       	push	r28
    3a54:	df 93       	push	r29
    3a56:	3c 01       	movw	r6, r24
    3a58:	4b 01       	movw	r8, r22
    3a5a:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3a5c:	42 30       	cpi	r20, 0x02	; 2
    3a5e:	51 05       	cpc	r21, r1
    3a60:	08 f4       	brcc	.+2      	; 0x3a64 <sysex_decode+0x2a>
    3a62:	6f c0       	rjmp	.+222    	; 0x3b42 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3a64:	7a 01       	movw	r14, r20
    3a66:	f6 94       	lsr	r15
    3a68:	e7 94       	ror	r14
    3a6a:	f6 94       	lsr	r15
    3a6c:	e7 94       	ror	r14
    3a6e:	f6 94       	lsr	r15
    3a70:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3a72:	e1 14       	cp	r14, r1
    3a74:	f1 04       	cpc	r15, r1
    3a76:	29 f1       	breq	.+74     	; 0x3ac2 <sysex_decode+0x88>
    3a78:	eb 01       	movw	r28, r22
    3a7a:	b3 01       	movw	r22, r6
    3a7c:	00 e0       	ldi	r16, 0x00	; 0
    3a7e:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a80:	cc 24       	eor	r12, r12
    3a82:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a84:	de 01       	movw	r26, r28
    3a86:	11 96       	adiw	r26, 0x01	; 1
    3a88:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a8a:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3a8c:	2d 91       	ld	r18, X+
    3a8e:	2f 77       	andi	r18, 0x7F	; 127
    3a90:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a92:	4f 5f       	subi	r20, 0xFF	; 255
    3a94:	5f 4f       	sbci	r21, 0xFF	; 255
    3a96:	88 81       	ld	r24, Y
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	04 2e       	mov	r0, r20
    3a9c:	02 c0       	rjmp	.+4      	; 0x3aa2 <sysex_decode+0x68>
    3a9e:	88 0f       	add	r24, r24
    3aa0:	99 1f       	adc	r25, r25
    3aa2:	0a 94       	dec	r0
    3aa4:	e2 f7       	brpl	.-8      	; 0x3a9e <sysex_decode+0x64>
    3aa6:	80 78       	andi	r24, 0x80	; 128
    3aa8:	28 2b       	or	r18, r24
    3aaa:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3aac:	47 30       	cpi	r20, 0x07	; 7
    3aae:	51 05       	cpc	r21, r1
    3ab0:	69 f7       	brne	.-38     	; 0x3a8c <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3ab2:	0f 5f       	subi	r16, 0xFF	; 255
    3ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab6:	28 96       	adiw	r28, 0x08	; 8
    3ab8:	69 5f       	subi	r22, 0xF9	; 249
    3aba:	7f 4f       	sbci	r23, 0xFF	; 255
    3abc:	0e 15       	cp	r16, r14
    3abe:	1f 05       	cpc	r17, r15
    3ac0:	09 f7       	brne	.-62     	; 0x3a84 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3ac2:	5a 2d       	mov	r21, r10
    3ac4:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3ac6:	99 f1       	breq	.+102    	; 0x3b2e <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3ac8:	e7 01       	movw	r28, r14
    3aca:	cc 0f       	add	r28, r28
    3acc:	dd 1f       	adc	r29, r29
    3ace:	cc 0f       	add	r28, r28
    3ad0:	dd 1f       	adc	r29, r29
    3ad2:	cc 0f       	add	r28, r28
    3ad4:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3ad6:	8e 01       	movw	r16, r28
    3ad8:	0e 19       	sub	r16, r14
    3ada:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3adc:	65 2f       	mov	r22, r21
    3ade:	70 e0       	ldi	r23, 0x00	; 0
    3ae0:	61 50       	subi	r22, 0x01	; 1
    3ae2:	70 40       	sbci	r23, 0x00	; 0
    3ae4:	f9 f0       	breq	.+62     	; 0x3b24 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3ae6:	ce 01       	movw	r24, r28
    3ae8:	01 96       	adiw	r24, 0x01	; 1
    3aea:	d4 01       	movw	r26, r8
    3aec:	a8 0f       	add	r26, r24
    3aee:	b9 1f       	adc	r27, r25
    3af0:	f3 01       	movw	r30, r6
    3af2:	e0 0f       	add	r30, r16
    3af4:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3afa:	c8 0d       	add	r28, r8
    3afc:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3afe:	4d 91       	ld	r20, X+
    3b00:	4f 77       	andi	r20, 0x7F	; 127
    3b02:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3b04:	2f 5f       	subi	r18, 0xFF	; 255
    3b06:	3f 4f       	sbci	r19, 0xFF	; 255
    3b08:	88 81       	ld	r24, Y
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	02 2e       	mov	r0, r18
    3b0e:	02 c0       	rjmp	.+4      	; 0x3b14 <sysex_decode+0xda>
    3b10:	88 0f       	add	r24, r24
    3b12:	99 1f       	adc	r25, r25
    3b14:	0a 94       	dec	r0
    3b16:	e2 f7       	brpl	.-8      	; 0x3b10 <sysex_decode+0xd6>
    3b18:	80 78       	andi	r24, 0x80	; 128
    3b1a:	48 2b       	or	r20, r24
    3b1c:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3b1e:	26 17       	cp	r18, r22
    3b20:	37 07       	cpc	r19, r23
    3b22:	68 f3       	brcs	.-38     	; 0x3afe <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3b24:	c8 01       	movw	r24, r16
    3b26:	01 97       	sbiw	r24, 0x01	; 1
    3b28:	85 0f       	add	r24, r21
    3b2a:	91 1d       	adc	r25, r1
    3b2c:	0c c0       	rjmp	.+24     	; 0x3b46 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3b2e:	c7 01       	movw	r24, r14
    3b30:	88 0f       	add	r24, r24
    3b32:	99 1f       	adc	r25, r25
    3b34:	88 0f       	add	r24, r24
    3b36:	99 1f       	adc	r25, r25
    3b38:	88 0f       	add	r24, r24
    3b3a:	99 1f       	adc	r25, r25
    3b3c:	8e 19       	sub	r24, r14
    3b3e:	9f 09       	sbc	r25, r15
    3b40:	02 c0       	rjmp	.+4      	; 0x3b46 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3b46:	df 91       	pop	r29
    3b48:	cf 91       	pop	r28
    3b4a:	1f 91       	pop	r17
    3b4c:	0f 91       	pop	r16
    3b4e:	ff 90       	pop	r15
    3b50:	ef 90       	pop	r14
    3b52:	df 90       	pop	r13
    3b54:	cf 90       	pop	r12
    3b56:	bf 90       	pop	r11
    3b58:	af 90       	pop	r10
    3b5a:	9f 90       	pop	r9
    3b5c:	8f 90       	pop	r8
    3b5e:	7f 90       	pop	r7
    3b60:	6f 90       	pop	r6
    3b62:	08 95       	ret

00003b64 <__mulsi3>:
    3b64:	62 9f       	mul	r22, r18
    3b66:	d0 01       	movw	r26, r0
    3b68:	73 9f       	mul	r23, r19
    3b6a:	f0 01       	movw	r30, r0
    3b6c:	82 9f       	mul	r24, r18
    3b6e:	e0 0d       	add	r30, r0
    3b70:	f1 1d       	adc	r31, r1
    3b72:	64 9f       	mul	r22, r20
    3b74:	e0 0d       	add	r30, r0
    3b76:	f1 1d       	adc	r31, r1
    3b78:	92 9f       	mul	r25, r18
    3b7a:	f0 0d       	add	r31, r0
    3b7c:	83 9f       	mul	r24, r19
    3b7e:	f0 0d       	add	r31, r0
    3b80:	74 9f       	mul	r23, r20
    3b82:	f0 0d       	add	r31, r0
    3b84:	65 9f       	mul	r22, r21
    3b86:	f0 0d       	add	r31, r0
    3b88:	99 27       	eor	r25, r25
    3b8a:	72 9f       	mul	r23, r18
    3b8c:	b0 0d       	add	r27, r0
    3b8e:	e1 1d       	adc	r30, r1
    3b90:	f9 1f       	adc	r31, r25
    3b92:	63 9f       	mul	r22, r19
    3b94:	b0 0d       	add	r27, r0
    3b96:	e1 1d       	adc	r30, r1
    3b98:	f9 1f       	adc	r31, r25
    3b9a:	bd 01       	movw	r22, r26
    3b9c:	cf 01       	movw	r24, r30
    3b9e:	11 24       	eor	r1, r1
    3ba0:	08 95       	ret

00003ba2 <__udivmodhi4>:
    3ba2:	aa 1b       	sub	r26, r26
    3ba4:	bb 1b       	sub	r27, r27
    3ba6:	51 e1       	ldi	r21, 0x11	; 17
    3ba8:	07 c0       	rjmp	.+14     	; 0x3bb8 <__udivmodhi4_ep>

00003baa <__udivmodhi4_loop>:
    3baa:	aa 1f       	adc	r26, r26
    3bac:	bb 1f       	adc	r27, r27
    3bae:	a6 17       	cp	r26, r22
    3bb0:	b7 07       	cpc	r27, r23
    3bb2:	10 f0       	brcs	.+4      	; 0x3bb8 <__udivmodhi4_ep>
    3bb4:	a6 1b       	sub	r26, r22
    3bb6:	b7 0b       	sbc	r27, r23

00003bb8 <__udivmodhi4_ep>:
    3bb8:	88 1f       	adc	r24, r24
    3bba:	99 1f       	adc	r25, r25
    3bbc:	5a 95       	dec	r21
    3bbe:	a9 f7       	brne	.-22     	; 0x3baa <__udivmodhi4_loop>
    3bc0:	80 95       	com	r24
    3bc2:	90 95       	com	r25
    3bc4:	bc 01       	movw	r22, r24
    3bc6:	cd 01       	movw	r24, r26
    3bc8:	08 95       	ret

00003bca <__divmodhi4>:
    3bca:	97 fb       	bst	r25, 7
    3bcc:	09 2e       	mov	r0, r25
    3bce:	07 26       	eor	r0, r23
    3bd0:	0a d0       	rcall	.+20     	; 0x3be6 <__divmodhi4_neg1>
    3bd2:	77 fd       	sbrc	r23, 7
    3bd4:	04 d0       	rcall	.+8      	; 0x3bde <__divmodhi4_neg2>
    3bd6:	e5 df       	rcall	.-54     	; 0x3ba2 <__udivmodhi4>
    3bd8:	06 d0       	rcall	.+12     	; 0x3be6 <__divmodhi4_neg1>
    3bda:	00 20       	and	r0, r0
    3bdc:	1a f4       	brpl	.+6      	; 0x3be4 <__divmodhi4_exit>

00003bde <__divmodhi4_neg2>:
    3bde:	70 95       	com	r23
    3be0:	61 95       	neg	r22
    3be2:	7f 4f       	sbci	r23, 0xFF	; 255

00003be4 <__divmodhi4_exit>:
    3be4:	08 95       	ret

00003be6 <__divmodhi4_neg1>:
    3be6:	f6 f7       	brtc	.-4      	; 0x3be4 <__divmodhi4_exit>
    3be8:	90 95       	com	r25
    3bea:	81 95       	neg	r24
    3bec:	9f 4f       	sbci	r25, 0xFF	; 255
    3bee:	08 95       	ret

00003bf0 <memcpy>:
    3bf0:	fb 01       	movw	r30, r22
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	02 c0       	rjmp	.+4      	; 0x3bfa <memcpy+0xa>
    3bf6:	01 90       	ld	r0, Z+
    3bf8:	0d 92       	st	X+, r0
    3bfa:	41 50       	subi	r20, 0x01	; 1
    3bfc:	50 40       	sbci	r21, 0x00	; 0
    3bfe:	d8 f7       	brcc	.-10     	; 0x3bf6 <memcpy+0x6>
    3c00:	08 95       	ret

00003c02 <memmove>:
    3c02:	68 17       	cp	r22, r24
    3c04:	79 07       	cpc	r23, r25
    3c06:	68 f4       	brcc	.+26     	; 0x3c22 <memmove+0x20>
    3c08:	fb 01       	movw	r30, r22
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	e4 0f       	add	r30, r20
    3c0e:	f5 1f       	adc	r31, r21
    3c10:	a4 0f       	add	r26, r20
    3c12:	b5 1f       	adc	r27, r21
    3c14:	02 c0       	rjmp	.+4      	; 0x3c1a <memmove+0x18>
    3c16:	02 90       	ld	r0, -Z
    3c18:	0e 92       	st	-X, r0
    3c1a:	41 50       	subi	r20, 0x01	; 1
    3c1c:	50 40       	sbci	r21, 0x00	; 0
    3c1e:	d8 f7       	brcc	.-10     	; 0x3c16 <memmove+0x14>
    3c20:	08 95       	ret
    3c22:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <memcpy>

00003c26 <__eerd_block_m6450a>:
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22

00003c2a <__eerd_blraw_m6450a>:
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	f9 99       	sbic	0x1f, 1	; 31
    3c2e:	fe cf       	rjmp	.-4      	; 0x3c2c <__eerd_blraw_m6450a+0x2>
    3c30:	06 c0       	rjmp	.+12     	; 0x3c3e <__eerd_blraw_m6450a+0x14>
    3c32:	f2 bd       	out	0x22, r31	; 34
    3c34:	e1 bd       	out	0x21, r30	; 33
    3c36:	f8 9a       	sbi	0x1f, 0	; 31
    3c38:	31 96       	adiw	r30, 0x01	; 1
    3c3a:	00 b4       	in	r0, 0x20	; 32
    3c3c:	0d 92       	st	X+, r0
    3c3e:	41 50       	subi	r20, 0x01	; 1
    3c40:	50 40       	sbci	r21, 0x00	; 0
    3c42:	b8 f7       	brcc	.-18     	; 0x3c32 <__eerd_blraw_m6450a+0x8>
    3c44:	08 95       	ret

00003c46 <__eerd_word_m6450a>:
    3c46:	a8 e1       	ldi	r26, 0x18	; 24
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
    3c4a:	42 e0       	ldi	r20, 0x02	; 2
    3c4c:	50 e0       	ldi	r21, 0x00	; 0
    3c4e:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__eerd_blraw_m6450a>

00003c52 <__eeupd_block_m6450a>:
    3c52:	dc 01       	movw	r26, r24
    3c54:	a4 0f       	add	r26, r20
    3c56:	b5 1f       	adc	r27, r21
    3c58:	41 50       	subi	r20, 0x01	; 1
    3c5a:	50 40       	sbci	r21, 0x00	; 0
    3c5c:	48 f0       	brcs	.+18     	; 0x3c70 <__eeupd_block_m6450a+0x1e>
    3c5e:	cb 01       	movw	r24, r22
    3c60:	84 0f       	add	r24, r20
    3c62:	95 1f       	adc	r25, r21
    3c64:	2e 91       	ld	r18, -X
    3c66:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__eeupd_r18_m6450a>
    3c6a:	41 50       	subi	r20, 0x01	; 1
    3c6c:	50 40       	sbci	r21, 0x00	; 0
    3c6e:	d0 f7       	brcc	.-12     	; 0x3c64 <__eeupd_block_m6450a+0x12>
    3c70:	08 95       	ret

00003c72 <__eeupd_byte_m6450a>:
    3c72:	26 2f       	mov	r18, r22

00003c74 <__eeupd_r18_m6450a>:
    3c74:	f9 99       	sbic	0x1f, 1	; 31
    3c76:	fe cf       	rjmp	.-4      	; 0x3c74 <__eeupd_r18_m6450a>
    3c78:	92 bd       	out	0x22, r25	; 34
    3c7a:	81 bd       	out	0x21, r24	; 33
    3c7c:	f8 9a       	sbi	0x1f, 0	; 31
    3c7e:	01 97       	sbiw	r24, 0x01	; 1
    3c80:	00 b4       	in	r0, 0x20	; 32
    3c82:	02 16       	cp	r0, r18
    3c84:	31 f0       	breq	.+12     	; 0x3c92 <__eeupd_r18_m6450a+0x1e>
    3c86:	20 bd       	out	0x20, r18	; 32
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	f8 94       	cli
    3c8c:	fa 9a       	sbi	0x1f, 2	; 31
    3c8e:	f9 9a       	sbi	0x1f, 1	; 31
    3c90:	0f be       	out	0x3f, r0	; 63
    3c92:	08 95       	ret

00003c94 <__eeupd_word_m6450a>:
    3c94:	01 96       	adiw	r24, 0x01	; 1
    3c96:	27 2f       	mov	r18, r23
    3c98:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__eeupd_r18_m6450a>
    3c9c:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <__eeupd_byte_m6450a>

00003ca0 <_exit>:
    3ca0:	f8 94       	cli

00003ca2 <__stop_program>:
    3ca2:	ff cf       	rjmp	.-2      	; 0x3ca2 <__stop_program>
