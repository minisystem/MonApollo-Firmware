
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  000020e4  00002178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  008001ca  008001ca  00002242  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00002244  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014a  00000000  00000000  00002a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00002bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e95  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001025  00000000  00000000  00006cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001813  00000000  00000000  00007d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a9c  00000000  00000000  00009518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000125c  00000000  00000000  00009fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002690  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_9>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e4 ee       	ldi	r30, 0xE4	; 228
      78:	f0 e2       	ldi	r31, 0x20	; 32
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	13 e0       	ldi	r17, 0x03	; 3
      88:	aa ec       	ldi	r26, 0xCA	; 202
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a2 36       	cpi	r26, 0x62	; 98
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 a7 02 	call	0x54e	; 0x54e <main>
      9a:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     120:	80 91 ca 01 	lds	r24, 0x01CA
     124:	08 95       	ret

00000126 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	18 2f       	mov	r17, r24
     130:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	ec 01       	movw	r28, r24
     138:	22 97       	sbiw	r28, 0x02	; 2
     13a:	be 01       	movw	r22, r28
     13c:	4e e0       	ldi	r20, 0x0E	; 14
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	0e 94 5e 10 	call	0x20bc	; 0x20bc <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     144:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     146:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     148:	10 93 ca 01 	sts	0x01CA, r17
	
} 
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	08 95       	ret

00000156 <remove_note>:
void remove_note(uint8_t note){
     156:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     158:	c0 91 00 01 	lds	r28, 0x0100
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     15c:	c8 17       	cp	r28, r24
     15e:	41 f0       	breq	.+16     	; 0x170 <remove_note+0x1a>
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     168:	90 81       	ld	r25, Z
     16a:	98 17       	cp	r25, r24
     16c:	59 f4       	brne	.+22     	; 0x184 <remove_note+0x2e>
     16e:	02 c0       	rjmp	.+4      	; 0x174 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     174:	fa 01       	movw	r30, r20
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	e0 50       	subi	r30, 0x00	; 0
     17c:	ff 4f       	sbci	r31, 0xFF	; 255
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	80 83       	st	Z, r24
			free_slot = i;
			break;
     182:	07 c0       	rjmp	.+14     	; 0x192 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     184:	4f 5f       	subi	r20, 0xFF	; 255
     186:	5f 4f       	sbci	r21, 0xFF	; 255
     188:	32 96       	adiw	r30, 0x02	; 2
     18a:	48 30       	cpi	r20, 0x08	; 8
     18c:	51 05       	cpc	r21, r1
     18e:	61 f7       	brne	.-40     	; 0x168 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     190:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	ca 01       	movw	r24, r20
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	bc 01       	movw	r22, r24
     19c:	6e 5f       	subi	r22, 0xFE	; 254
     19e:	7e 4f       	sbci	r23, 0xFE	; 254
     1a0:	40 95       	com	r20
     1a2:	50 95       	com	r21
     1a4:	48 5f       	subi	r20, 0xF8	; 248
     1a6:	5f 4f       	sbci	r21, 0xFF	; 255
     1a8:	44 0f       	add	r20, r20
     1aa:	55 1f       	adc	r21, r21
     1ac:	80 50       	subi	r24, 0x00	; 0
     1ae:	9f 4f       	sbci	r25, 0xFF	; 255
     1b0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <memmove>
	note_pool[7].note = EMPTY;	
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	80 93 0e 01 	sts	0x010E, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1ba:	80 91 00 01 	lds	r24, 0x0100
     1be:	8f 3f       	cpi	r24, 0xFF	; 255
     1c0:	19 f4       	brne	.+6      	; 0x1c8 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1c2:	c0 93 ca 01 	sts	0x01CA, r28
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1c8:	80 93 ca 01 	sts	0x01CA, r24

	}	
	
}
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1d0:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1d2:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1d4:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1d6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1d8:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     1da:	8c 91       	ld	r24, X
     1dc:	82 b9       	out	0x02, r24	; 2
     1de:	8d e0       	ldi	r24, 0x0D	; 13
     1e0:	8a 95       	dec	r24
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <set_control_voltage+0x10>
     1e4:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     1e6:	ea ed       	ldi	r30, 0xDA	; 218
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	40 81       	ld	r20, Z
     1ec:	21 e0       	ldi	r18, 0x01	; 1
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	c9 01       	movw	r24, r18
     1f2:	11 96       	adiw	r26, 0x01	; 1
     1f4:	0c 90       	ld	r0, X
     1f6:	11 97       	sbiw	r26, 0x01	; 1
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_control_voltage+0x2e>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <set_control_voltage+0x2a>
     202:	84 2b       	or	r24, r20
     204:	80 83       	st	Z, r24
     206:	82 e4       	ldi	r24, 0x42	; 66
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x38>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x3e>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     20e:	80 81       	ld	r24, Z
     210:	11 96       	adiw	r26, 0x01	; 1
     212:	0c 90       	ld	r0, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	02 c0       	rjmp	.+4      	; 0x21c <set_control_voltage+0x4c>
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <set_control_voltage+0x48>
     220:	20 95       	com	r18
     222:	28 23       	and	r18, r24
     224:	20 83       	st	Z, r18
	
}	
     226:	08 95       	ret

00000228 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     228:	83 b3       	in	r24, 0x13	; 19
     22a:	83 60       	ori	r24, 0x03	; 3
     22c:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     232:	97 b1       	in	r25, 0x07	; 7
     234:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     236:	e9 ed       	ldi	r30, 0xD9	; 217
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8f 60       	ori	r24, 0x0F	; 15
     23e:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     240:	ea ed       	ldi	r30, 0xDA	; 218
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     24a:	84 b3       	in	r24, 0x14	; 20
     24c:	83 60       	ori	r24, 0x03	; 3
     24e:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     250:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     252:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     254:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     256:	a0 9a       	sbi	0x14, 0	; 20
}
     258:	08 95       	ret

0000025a <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     25a:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     25c:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     25e:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     260:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     262:	62 b9       	out	0x02, r22	; 2
     264:	2d e0       	ldi	r18, 0x0D	; 13
     266:	2a 95       	dec	r18
     268:	f1 f7       	brne	.-4      	; 0x266 <set_dac+0xc>
     26a:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     26c:	ea ed       	ldi	r30, 0xDA	; 218
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	40 81       	ld	r20, Z
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	b9 01       	movw	r22, r18
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_dac+0x24>
     27a:	66 0f       	add	r22, r22
     27c:	77 1f       	adc	r23, r23
     27e:	8a 95       	dec	r24
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_dac+0x20>
     282:	cb 01       	movw	r24, r22
     284:	94 2f       	mov	r25, r20
     286:	98 2b       	or	r25, r24
     288:	90 83       	st	Z, r25
     28a:	72 e4       	ldi	r23, 0x42	; 66
     28c:	7a 95       	dec	r23
     28e:	f1 f7       	brne	.-4      	; 0x28c <set_dac+0x32>
     290:	00 c0       	rjmp	.+0      	; 0x292 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     292:	90 81       	ld	r25, Z
     294:	80 95       	com	r24
     296:	89 23       	and	r24, r25
     298:	80 83       	st	Z, r24
	
}
     29a:	08 95       	ret

0000029c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t digit)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	2a 97       	sbiw	r28, 0x0a	; 10
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     2b0:	de 01       	movw	r26, r28
     2b2:	11 96       	adiw	r26, 0x01	; 1
     2b4:	ee e4       	ldi	r30, 0x4E	; 78
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	3a e0       	ldi	r19, 0x0A	; 10
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	31 50       	subi	r19, 0x01	; 1
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2c6:	ea ed       	ldi	r30, 0xDA	; 218
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	30 81       	ld	r19, Z
     2cc:	30 61       	ori	r19, 0x10	; 16
     2ce:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d0:	30 81       	ld	r19, Z
     2d2:	3f 7e       	andi	r19, 0xEF	; 239
     2d4:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     2d6:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2d8:	30 81       	ld	r19, Z
     2da:	30 62       	ori	r19, 0x20	; 32
     2dc:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2de:	30 81       	ld	r19, Z
     2e0:	3f 7d       	andi	r19, 0xDF	; 223
     2e2:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
     2e4:	62 30       	cpi	r22, 0x02	; 2
     2e6:	f9 f0       	breq	.+62     	; 0x326 <display_dec+0x8a>
     2e8:	63 30       	cpi	r22, 0x03	; 3
     2ea:	18 f4       	brcc	.+6      	; 0x2f2 <display_dec+0x56>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	a1 f5       	brne	.+104    	; 0x358 <display_dec+0xbc>
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <display_dec+0x70>
     2f2:	64 30       	cpi	r22, 0x04	; 4
     2f4:	29 f1       	breq	.+74     	; 0x340 <display_dec+0xa4>
     2f6:	68 30       	cpi	r22, 0x08	; 8
     2f8:	79 f5       	brne	.+94     	; 0x358 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     2fa:	6a e0       	ldi	r22, 0x0A	; 10
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
     302:	fe 01       	movw	r30, r28
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     30a:	26 c0       	rjmp	.+76     	; 0x358 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     30c:	64 e6       	ldi	r22, 0x64	; 100
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
     314:	6a e0       	ldi	r22, 0x0A	; 10
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
     31c:	fe 01       	movw	r30, r28
     31e:	e6 0f       	add	r30, r22
     320:	f7 1f       	adc	r31, r23
     322:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     324:	19 c0       	rjmp	.+50     	; 0x358 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     326:	68 ee       	ldi	r22, 0xE8	; 232
     328:	73 e0       	ldi	r23, 0x03	; 3
     32a:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
     32e:	64 e6       	ldi	r22, 0x64	; 100
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
     336:	fe 01       	movw	r30, r28
     338:	e6 0f       	add	r30, r22
     33a:	f7 1f       	adc	r31, r23
     33c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     33e:	0c c0       	rjmp	.+24     	; 0x358 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     340:	60 e1       	ldi	r22, 0x10	; 16
     342:	77 e2       	ldi	r23, 0x27	; 39
     344:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
     348:	68 ee       	ldi	r22, 0xE8	; 232
     34a:	73 e0       	ldi	r23, 0x03	; 3
     34c:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
     350:	fe 01       	movw	r30, r28
     352:	e6 0f       	add	r30, r22
     354:	f7 1f       	adc	r31, r23
     356:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     358:	20 95       	com	r18
     35a:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     35c:	ea ed       	ldi	r30, 0xDA	; 218
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     366:	80 81       	ld	r24, Z
     368:	8f 7e       	andi	r24, 0xEF	; 239
     36a:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     36c:	2a 96       	adiw	r28, 0x0a	; 10
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <update_display+0x8>
     386:	00 d0       	rcall	.+0      	; 0x388 <update_display+0xa>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t place = 0;
	
	uint8_t digit[] = {
     38c:	28 e0       	ldi	r18, 0x08	; 8
     38e:	29 83       	std	Y+1, r18	; 0x01
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	2a 83       	std	Y+2, r18	; 0x02
     394:	22 e0       	ldi	r18, 0x02	; 2
     396:	2b 83       	std	Y+3, r18	; 0x03
     398:	24 e0       	ldi	r18, 0x04	; 4
     39a:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	if (type == DEC) {
     39c:	66 23       	and	r22, r22
     39e:	81 f4       	brne	.+32     	; 0x3c0 <update_display+0x42>

		
			
		display_dec(number, digit[place]);
     3a0:	10 91 cf 01 	lds	r17, 0x01CF
     3a4:	fe 01       	movw	r30, r28
     3a6:	e1 0f       	add	r30, r17
     3a8:	f1 1d       	adc	r31, r1
     3aa:	61 81       	ldd	r22, Z+1	; 0x01
     3ac:	0e 94 4e 01 	call	0x29c	; 0x29c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     3b0:	81 2f       	mov	r24, r17
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	80 93 cf 01 	sts	0x01CF, r24
     3b8:	13 30       	cpi	r17, 0x03	; 3
     3ba:	11 f4       	brne	.+4      	; 0x3c0 <update_display+0x42>
		{
			place = 0;
     3bc:	10 92 cf 01 	sts	0x01CF, r1
		
		
	}
	
	
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     3e2:	80 91 6f 02 	lds	r24, 0x026F
     3e6:	81 50       	subi	r24, 0x01	; 1
     3e8:	87 bd       	out	0x27, r24	; 39
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
     3ea:	85 b1       	in	r24, 0x05	; 5
     3ec:	80 58       	subi	r24, 0x80	; 128
     3ee:	85 b9       	out	0x05, r24	; 5
	if (period_counter == 0) {
     3f0:	80 91 70 02 	lds	r24, 0x0270
     3f4:	88 23       	and	r24, r24
     3f6:	a1 f4       	brne	.+40     	; 0x420 <__vector_10+0x50>
		count_finished = FALSE;
     3f8:	10 92 6d 02 	sts	0x026D, r1
		no_overflow = TRUE;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 c8 01 	sts	0x01C8, r24
		period_counter = 1; //set period counter to 1
     402:	80 93 70 02 	sts	0x0270, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     406:	e1 e8       	ldi	r30, 0x81	; 129
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	90 91 6e 02 	lds	r25, 0x026E
     410:	89 2b       	or	r24, r25
     412:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     414:	ef e6       	ldi	r30, 0x6F	; 111
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	81 60       	ori	r24, 0x01	; 1
     41c:	80 83       	st	Z, r24
     41e:	11 c0       	rjmp	.+34     	; 0x442 <__vector_10+0x72>
		
	} else {
		
		osc_count = TCNT1;		
     420:	e4 e8       	ldi	r30, 0x84	; 132
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	90 93 6c 02 	sts	0x026C, r25
     42c:	80 93 6b 02 	sts	0x026B, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     430:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 6d 02 	sts	0x026D, r24
		period_counter = 0;
     43a:	10 92 70 02 	sts	0x0270, r1
		TCNT1 = 0; //reset timer/counter 1
     43e:	11 82       	std	Z+1, r1	; 0x01
     440:	10 82       	st	Z, r1
	}
	
	
	
	
}
     442:	ff 91       	pop	r31
     444:	ef 91       	pop	r30
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     45e:	10 92 c8 01 	sts	0x01C8, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     46c:	84 2f       	mov	r24, r20
	remove_note(note);
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
	gate_buffer--;
     474:	80 91 d1 01 	lds	r24, 0x01D1
     478:	81 50       	subi	r24, 0x01	; 1
     47a:	80 93 d1 01 	sts	0x01D1, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     47e:	88 23       	and	r24, r24
     480:	09 f4       	brne	.+2      	; 0x484 <note_off_event+0x18>
     482:	89 98       	cbi	0x11, 1	; 17
     484:	08 95       	ret

00000486 <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     486:	84 2f       	mov	r24, r20
	
	value_to_display = note;
     488:	e4 2f       	mov	r30, r20
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	f0 93 97 01 	sts	0x0197, r31
     490:	e0 93 96 01 	sts	0x0196, r30
	midi_note_number = note;
     494:	40 93 10 02 	sts	0x0210, r20
	if (velocity == 0) {
     498:	22 23       	and	r18, r18
     49a:	61 f4       	brne	.+24     	; 0x4b4 <note_on_event+0x2e>
		remove_note(note);
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
		gate_buffer--;
     4a2:	80 91 d1 01 	lds	r24, 0x01D1
     4a6:	81 50       	subi	r24, 0x01	; 1
     4a8:	80 93 d1 01 	sts	0x01D1, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     4ac:	88 23       	and	r24, r24
     4ae:	69 f4       	brne	.+26     	; 0x4ca <note_on_event+0x44>
     4b0:	89 98       	cbi	0x11, 1	; 17
     4b2:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	62 2f       	mov	r22, r18
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	0e 94 93 00 	call	0x126	; 0x126 <new_note>
		gate_buffer++; //increment gate_buffer
     4be:	80 91 d1 01 	lds	r24, 0x01D1
     4c2:	8f 5f       	subi	r24, 0xFF	; 255
     4c4:	80 93 d1 01 	sts	0x01D1, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     4c8:	89 9a       	sbi	0x11, 1	; 17
     4ca:	08 95       	ret

000004cc <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     4cc:	87 e2       	ldi	r24, 0x27	; 39
     4ce:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     4d2:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     4d6:	88 e9       	ldi	r24, 0x98	; 152
     4d8:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     4dc:	08 95       	ret

000004de <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     4de:	1f 92       	push	r1
     4e0:	0f 92       	push	r0
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	0f 92       	push	r0
     4e6:	11 24       	eor	r1, r1
     4e8:	2f 93       	push	r18
     4ea:	3f 93       	push	r19
     4ec:	4f 93       	push	r20
     4ee:	5f 93       	push	r21
     4f0:	6f 93       	push	r22
     4f2:	7f 93       	push	r23
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
     4f8:	af 93       	push	r26
     4fa:	bf 93       	push	r27
     4fc:	ef 93       	push	r30
     4fe:	ff 93       	push	r31
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	0f 92       	push	r0
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
     50a:	85 b1       	in	r24, 0x05	; 5
     50c:	80 58       	subi	r24, 0x80	; 128
     50e:	85 b9       	out	0x05, r24	; 5
	uint8_t inByte = UDR0;
     510:	80 91 c6 00 	lds	r24, 0x00C6
     514:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     516:	85 e7       	ldi	r24, 0x75	; 117
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	ae 01       	movw	r20, r28
     51e:	4f 5f       	subi	r20, 0xFF	; 255
     520:	5f 4f       	sbci	r21, 0xFF	; 255
     522:	0e 94 2a 0c 	call	0x1854	; 0x1854 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     526:	0f 90       	pop	r0
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	ff 91       	pop	r31
     52e:	ef 91       	pop	r30
     530:	bf 91       	pop	r27
     532:	af 91       	pop	r26
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	7f 91       	pop	r23
     53a:	6f 91       	pop	r22
     53c:	5f 91       	pop	r21
     53e:	4f 91       	pop	r20
     540:	3f 91       	pop	r19
     542:	2f 91       	pop	r18
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     54e:	80 e8       	ldi	r24, 0x80	; 128
     550:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     552:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     554:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     556:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     558:	9a 9a       	sbi	0x13, 2	; 19
	//PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
	PORTG |= (1<<TUNE_SELECT);
     55a:	a2 9a       	sbi	0x14, 2	; 20
	
	setup_spi(); 
     55c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     560:	a9 ed       	ldi	r26, 0xD9	; 217
     562:	b0 e0       	ldi	r27, 0x00	; 0
     564:	8c 91       	ld	r24, X
     566:	80 6c       	ori	r24, 0xC0	; 192
     568:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     56a:	ea ed       	ldi	r30, 0xDA	; 218
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 81       	ld	r24, Z
     570:	80 6c       	ori	r24, 0xC0	; 192
     572:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     574:	81 b1       	in	r24, 0x01	; 1
     576:	8f ef       	ldi	r24, 0xFF	; 255
     578:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     57a:	92 b1       	in	r25, 0x02	; 2
     57c:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     57e:	8c 91       	ld	r24, X
     580:	80 63       	ori	r24, 0x30	; 48
     582:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     584:	80 81       	ld	r24, Z
     586:	8f 7c       	andi	r24, 0xCF	; 207
     588:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     58a:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     58c:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     590:	0e 94 14 01 	call	0x228	; 0x228 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     594:	c5 e7       	ldi	r28, 0x75	; 117
     596:	d2 e0       	ldi	r29, 0x02	; 2
     598:	ce 01       	movw	r24, r28
     59a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     59e:	ce 01       	movw	r24, r28
     5a0:	63 e4       	ldi	r22, 0x43	; 67
     5a2:	72 e0       	ldi	r23, 0x02	; 2
     5a4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     5a8:	ce 01       	movw	r24, r28
     5aa:	66 e3       	ldi	r22, 0x36	; 54
     5ac:	72 e0       	ldi	r23, 0x02	; 2
     5ae:	0e 94 c5 0b 	call	0x178a	; 0x178a <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     5b2:	0e 94 66 02 	call	0x4cc	; 0x4cc <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     5b6:	0e 94 77 04 	call	0x8ee	; 0x8ee <update_spi>
	//TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
	//TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms
	

		
	sei(); //enable global interrupts
     5ba:	78 94       	sei
	
	////set initial pitch offset CVs
	vco1_init_cv = set_vco_init_cv(VCO1, 24079);
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	6f e0       	ldi	r22, 0x0F	; 15
     5c0:	7e e5       	ldi	r23, 0x5E	; 94
     5c2:	0e 94 5e 05 	call	0xabc	; 0xabc <set_vco_init_cv>
     5c6:	90 93 69 02 	sts	0x0269, r25
     5ca:	80 93 68 02 	sts	0x0268, r24
	vco2_init_cv = set_vco_init_cv(VCO2, 24079);
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	6f e0       	ldi	r22, 0x0F	; 15
     5d2:	7e e5       	ldi	r23, 0x5E	; 94
     5d4:	0e 94 5e 05 	call	0xabc	; 0xabc <set_vco_init_cv>
     5d8:	90 93 67 02 	sts	0x0267, r25
     5dc:	80 93 66 02 	sts	0x0266, r24
	
	

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     5e0:	ce 01       	movw	r24, r28
     5e2:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <midi_device_process>
	
		update_display(value_to_display, DEC);
     5e6:	80 91 96 01 	lds	r24, 0x0196
     5ea:	90 91 97 01 	lds	r25, 0x0197
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
			
		scan_pots_and_update_control_voltages();
     5f4:	0e 94 09 03 	call	0x612	; 0x612 <scan_pots_and_update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     5f8:	80 91 d0 01 	lds	r24, 0x01D0
     5fc:	98 2f       	mov	r25, r24
     5fe:	9f 5f       	subi	r25, 0xFF	; 255
     600:	90 93 d0 01 	sts	0x01D0, r25
     604:	85 30       	cpi	r24, 0x05	; 5
     606:	61 f7       	brne	.-40     	; 0x5e0 <main+0x92>
		{
			switch_timer = 0;
     608:	10 92 d0 01 	sts	0x01D0, r1
			update_spi();
     60c:	0e 94 77 04 	call	0x8ee	; 0x8ee <update_spi>
     610:	e7 cf       	rjmp	.-50     	; 0x5e0 <main+0x92>

00000612 <scan_pots_and_update_control_voltages>:
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     612:	4f 92       	push	r4
     614:	5f 92       	push	r5
     616:	6f 92       	push	r6
     618:	7f 92       	push	r7
     61a:	8f 92       	push	r8
     61c:	9f 92       	push	r9
     61e:	af 92       	push	r10
     620:	bf 92       	push	r11
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     632:	00 ef       	ldi	r16, 0xF0	; 240
     634:	11 e0       	ldi	r17, 0x01	; 1
     636:	0f 2e       	mov	r0, r31
     638:	f6 e7       	ldi	r31, 0x76	; 118
     63a:	cf 2e       	mov	r12, r31
     63c:	f1 e0       	ldi	r31, 0x01	; 1
     63e:	df 2e       	mov	r13, r31
     640:	f0 2d       	mov	r31, r0
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     642:	ee 24       	eor	r14, r14
     644:	ff 24       	eor	r15, r15
     646:	e3 94       	inc	r14
     648:	c0 e0       	ldi	r28, 0x00	; 0
     64a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     64c:	0f 2e       	mov	r0, r31
     64e:	fa e3       	ldi	r31, 0x3A	; 58
     650:	8f 2e       	mov	r8, r31
     652:	f1 e0       	ldi	r31, 0x01	; 1
     654:	9f 2e       	mov	r9, r31
     656:	f0 2d       	mov	r31, r0
				
				break;
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     658:	aa 24       	eor	r10, r10
     65a:	bb 24       	eor	r11, r11
     65c:	68 94       	set
     65e:	b1 f8       	bld	r11, 1
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     660:	0f 2e       	mov	r0, r31
     662:	f8 e3       	ldi	r31, 0x38	; 56
     664:	6f 2e       	mov	r6, r31
     666:	f1 e0       	ldi	r31, 0x01	; 1
     668:	7f 2e       	mov	r7, r31
     66a:	f0 2d       	mov	r31, r0
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     66c:	0f 2e       	mov	r0, r31
     66e:	f2 e4       	ldi	r31, 0x42	; 66
     670:	4f 2e       	mov	r4, r31
     672:	f1 e0       	ldi	r31, 0x01	; 1
     674:	5f 2e       	mov	r5, r31
     676:	f0 2d       	mov	r31, r0
     678:	08 c0       	rjmp	.+16     	; 0x68a <scan_pots_and_update_control_voltages+0x78>
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     67a:	21 96       	adiw	r28, 0x01	; 1
     67c:	08 94       	sec
     67e:	e1 1c       	adc	r14, r1
     680:	f1 1c       	adc	r15, r1
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	c8 0e       	add	r12, r24
     688:	d9 1e       	adc	r13, r25

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{

		adc_value = read_pot(POTMUX_EN0, i);
     68a:	86 e0       	ldi	r24, 0x06	; 6
     68c:	6c 2f       	mov	r22, r28
     68e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     692:	90 93 16 02 	sts	0x0216, r25
     696:	80 93 15 02 	sts	0x0215, r24
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
     69a:	80 91 15 02 	lds	r24, 0x0215
     69e:	90 91 16 02 	lds	r25, 0x0216
     6a2:	d8 01       	movw	r26, r16
     6a4:	6d 91       	ld	r22, X+
     6a6:	7c 91       	ld	r23, X
     6a8:	11 97       	sbiw	r26, 0x01	; 1
     6aa:	86 1b       	sub	r24, r22
     6ac:	97 0b       	sbc	r25, r23
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
     6ae:	95 95       	asr	r25
     6b0:	87 95       	ror	r24
     6b2:	95 95       	asr	r25
     6b4:	87 95       	ror	r24
     6b6:	9c 01       	movw	r18, r24
     6b8:	26 0f       	add	r18, r22
     6ba:	37 1f       	adc	r19, r23
     6bc:	f8 01       	movw	r30, r16
     6be:	21 93       	st	Z+, r18
     6c0:	31 93       	st	Z+, r19
     6c2:	8f 01       	movw	r16, r30
		int fine_offset = 0;
		
		switch (i)
     6c4:	c8 30       	cpi	r28, 0x08	; 8
     6c6:	d1 05       	cpc	r29, r1
     6c8:	71 f0       	breq	.+28     	; 0x6e6 <scan_pots_and_update_control_voltages+0xd4>
     6ca:	c9 30       	cpi	r28, 0x09	; 9
     6cc:	d1 05       	cpc	r29, r1
     6ce:	24 f4       	brge	.+8      	; 0x6d8 <scan_pots_and_update_control_voltages+0xc6>
     6d0:	c4 30       	cpi	r28, 0x04	; 4
     6d2:	d1 05       	cpc	r29, r1
     6d4:	b1 f5       	brne	.+108    	; 0x742 <scan_pots_and_update_control_voltages+0x130>
     6d6:	2a c0       	rjmp	.+84     	; 0x72c <scan_pots_and_update_control_voltages+0x11a>
     6d8:	c9 30       	cpi	r28, 0x09	; 9
     6da:	d1 05       	cpc	r29, r1
     6dc:	b1 f0       	breq	.+44     	; 0x70a <scan_pots_and_update_control_voltages+0xf8>
     6de:	cb 30       	cpi	r28, 0x0B	; 11
     6e0:	d1 05       	cpc	r29, r1
     6e2:	79 f5       	brne	.+94     	; 0x742 <scan_pots_and_update_control_voltages+0x130>
     6e4:	3a c0       	rjmp	.+116    	; 0x75a <scan_pots_and_update_control_voltages+0x148>
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     6e6:	60 91 66 02 	lds	r22, 0x0266
     6ea:	70 91 67 02 	lds	r23, 0x0267
		switch (i)
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
     6ee:	60 50       	subi	r22, 0x00	; 0
     6f0:	7e 4f       	sbci	r23, 0xFE	; 254
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     6f2:	80 91 11 02 	lds	r24, 0x0211
     6f6:	90 91 12 02 	lds	r25, 0x0212
     6fa:	68 0f       	add	r22, r24
     6fc:	79 1f       	adc	r23, r25
     6fe:	62 1b       	sub	r22, r18
     700:	73 0b       	sbc	r23, r19
     702:	c4 01       	movw	r24, r8
     704:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				
				break;
     708:	b8 cf       	rjmp	.-144    	; 0x67a <scan_pots_and_update_control_voltages+0x68>
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     70a:	b5 01       	movw	r22, r10
     70c:	62 1b       	sub	r22, r18
     70e:	73 0b       	sbc	r23, r19
     710:	70 93 12 02 	sts	0x0212, r23
     714:	60 93 11 02 	sts	0x0211, r22
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     718:	80 91 68 02 	lds	r24, 0x0268
     71c:	90 91 69 02 	lds	r25, 0x0269
     720:	68 0f       	add	r22, r24
     722:	79 1f       	adc	r23, r25
     724:	c3 01       	movw	r24, r6
     726:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     72a:	a7 cf       	rjmp	.-178    	; 0x67a <scan_pots_and_update_control_voltages+0x68>
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     72c:	b9 01       	movw	r22, r18
     72e:	66 0f       	add	r22, r22
     730:	77 1f       	adc	r23, r23
     732:	66 0f       	add	r22, r22
     734:	77 1f       	adc	r23, r23
     736:	66 0f       	add	r22, r22
     738:	77 1f       	adc	r23, r23
     73a:	c2 01       	movw	r24, r4
     73c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     740:	9c cf       	rjmp	.-200    	; 0x67a <scan_pots_and_update_control_voltages+0x68>
			
			default: //set control voltage full-scale
				set_control_voltage(pot_decoder_0[i], pot_group_0[i] << 4);
     742:	b9 01       	movw	r22, r18
     744:	62 95       	swap	r22
     746:	72 95       	swap	r23
     748:	70 7f       	andi	r23, 0xF0	; 240
     74a:	76 27       	eor	r23, r22
     74c:	60 7f       	andi	r22, 0xF0	; 240
     74e:	76 27       	eor	r23, r22
     750:	d6 01       	movw	r26, r12
     752:	8d 91       	ld	r24, X+
     754:	9c 91       	ld	r25, X
     756:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	}; 
	
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     75a:	b0 e1       	ldi	r27, 0x10	; 16
     75c:	eb 16       	cp	r14, r27
     75e:	f1 04       	cpc	r15, r1
     760:	0c f4       	brge	.+2      	; 0x764 <scan_pots_and_update_control_voltages+0x152>
     762:	8b cf       	rjmp	.-234    	; 0x67a <scan_pots_and_update_control_voltages+0x68>
     764:	02 ed       	ldi	r16, 0xD2	; 210
     766:	11 e0       	ldi	r17, 0x01	; 1
     768:	0f 2e       	mov	r0, r31
     76a:	f8 e5       	ldi	r31, 0x58	; 88
     76c:	ef 2e       	mov	r14, r31
     76e:	f1 e0       	ldi	r31, 0x01	; 1
     770:	ff 2e       	mov	r15, r31
     772:	f0 2d       	mov	r31, r0
     774:	c1 e0       	ldi	r28, 0x01	; 1
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     776:	87 e0       	ldi	r24, 0x07	; 7
     778:	6c 2f       	mov	r22, r28
     77a:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     77e:	90 93 16 02 	sts	0x0216, r25
     782:	80 93 15 02 	sts	0x0215, r24
		int adc_change = adc_value - pot_group_1[i];
     786:	60 91 15 02 	lds	r22, 0x0215
     78a:	70 91 16 02 	lds	r23, 0x0216
     78e:	f8 01       	movw	r30, r16
     790:	80 81       	ld	r24, Z
     792:	91 81       	ldd	r25, Z+1	; 0x01
     794:	68 1b       	sub	r22, r24
     796:	79 0b       	sbc	r23, r25
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);		
     798:	75 95       	asr	r23
     79a:	67 95       	ror	r22
     79c:	75 95       	asr	r23
     79e:	67 95       	ror	r22
     7a0:	68 0f       	add	r22, r24
     7a2:	79 1f       	adc	r23, r25
     7a4:	d8 01       	movw	r26, r16
     7a6:	6d 93       	st	X+, r22
     7a8:	7d 93       	st	X+, r23
     7aa:	8d 01       	movw	r16, r26
		
		set_control_voltage(pot_decoder_1[i], pot_group_1[i] <<4);
     7ac:	62 95       	swap	r22
     7ae:	72 95       	swap	r23
     7b0:	70 7f       	andi	r23, 0xF0	; 240
     7b2:	76 27       	eor	r23, r22
     7b4:	60 7f       	andi	r22, 0xF0	; 240
     7b6:	76 27       	eor	r23, r22
     7b8:	f7 01       	movw	r30, r14
     7ba:	81 91       	ld	r24, Z+
     7bc:	91 91       	ld	r25, Z+
     7be:	7f 01       	movw	r14, r30
     7c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
     7c4:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
	}
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     7c6:	c0 31       	cpi	r28, 0x10	; 16
     7c8:	b1 f6       	brne	.-84     	; 0x776 <scan_pots_and_update_control_voltages+0x164>
	}
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
     7ca:	0e 94 90 00 	call	0x120	; 0x120 <get_current_note>
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     7ce:	88 30       	cpi	r24, 0x08	; 8
     7d0:	08 f4       	brcc	.+2      	; 0x7d4 <scan_pots_and_update_control_voltages+0x1c2>
     7d2:	88 e0       	ldi	r24, 0x08	; 8
	//value_to_display = note;
	uint8_t pitch_index = note>>3;
     7d4:	98 2f       	mov	r25, r24
     7d6:	96 95       	lsr	r25
     7d8:	96 95       	lsr	r25
     7da:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
     7dc:	29 2f       	mov	r18, r25
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	e9 01       	movw	r28, r18
     7e2:	21 97       	sbiw	r28, 0x01	; 1
     7e4:	44 e4       	ldi	r20, 0x44	; 68
     7e6:	52 e0       	ldi	r21, 0x02	; 2
     7e8:	cc 0f       	add	r28, r28
     7ea:	dd 1f       	adc	r29, r29
     7ec:	fa 01       	movw	r30, r20
     7ee:	ec 0f       	add	r30, r28
     7f0:	fd 1f       	adc	r31, r29
     7f2:	01 90       	ld	r0, Z+
     7f4:	f0 81       	ld	r31, Z
     7f6:	e0 2d       	mov	r30, r0
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	//value_to_display = note;
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
     7f8:	99 0f       	add	r25, r25
     7fa:	99 0f       	add	r25, r25
     7fc:	99 0f       	add	r25, r25
     7fe:	89 1b       	sub	r24, r25
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
	uint16_t y1 = vco1_pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>
     800:	e8 2e       	mov	r14, r24
     802:	ff 24       	eor	r15, r15
	//value_to_display = note;
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
	uint16_t y1 = vco1_pitch_table[pitch_index];
     804:	89 01       	movw	r16, r18
     806:	00 0f       	add	r16, r16
     808:	11 1f       	adc	r17, r17
     80a:	40 0f       	add	r20, r16
     80c:	51 1f       	adc	r21, r17
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>
     80e:	da 01       	movw	r26, r20
     810:	8d 91       	ld	r24, X+
     812:	9c 91       	ld	r25, X
     814:	8e 1b       	sub	r24, r30
     816:	9f 0b       	sbc	r25, r31
     818:	8e 9d       	mul	r24, r14
     81a:	b0 01       	movw	r22, r0
     81c:	8f 9d       	mul	r24, r15
     81e:	70 0d       	add	r23, r0
     820:	9e 9d       	mul	r25, r14
     822:	70 0d       	add	r23, r0
     824:	11 24       	eor	r1, r1
     826:	76 95       	lsr	r23
     828:	67 95       	ror	r22
     82a:	76 95       	lsr	r23
     82c:	67 95       	ror	r22
     82e:	76 95       	lsr	r23
     830:	67 95       	ror	r22
     832:	6e 0f       	add	r22, r30
     834:	7f 1f       	adc	r23, r31
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     836:	8c e4       	ldi	r24, 0x4C	; 76
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	y0 = vco2_pitch_table[pitch_index - 1];
     83e:	82 e2       	ldi	r24, 0x22	; 34
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	c8 0f       	add	r28, r24
     844:	d9 1f       	adc	r29, r25
     846:	48 81       	ld	r20, Y
     848:	59 81       	ldd	r21, Y+1	; 0x01
	y1 = vco2_pitch_table[pitch_index];
     84a:	80 0f       	add	r24, r16
     84c:	91 1f       	adc	r25, r17
	
	interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3);
     84e:	fc 01       	movw	r30, r24
     850:	80 81       	ld	r24, Z
     852:	91 81       	ldd	r25, Z+1	; 0x01
     854:	84 1b       	sub	r24, r20
     856:	95 0b       	sbc	r25, r21
     858:	8e 9d       	mul	r24, r14
     85a:	b0 01       	movw	r22, r0
     85c:	8f 9d       	mul	r24, r15
     85e:	70 0d       	add	r23, r0
     860:	9e 9d       	mul	r25, r14
     862:	70 0d       	add	r23, r0
     864:	11 24       	eor	r1, r1
     866:	76 95       	lsr	r23
     868:	67 95       	ror	r22
     86a:	76 95       	lsr	r23
     86c:	67 95       	ror	r22
     86e:	76 95       	lsr	r23
     870:	67 95       	ror	r22
     872:	64 0f       	add	r22, r20
     874:	75 1f       	adc	r23, r21
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv); 
     876:	8a e4       	ldi	r24, 0x4A	; 74
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     87e:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     880:	a1 9a       	sbi	0x14, 1	; 20
	
	
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	bf 90       	pop	r11
     894:	af 90       	pop	r10
     896:	9f 90       	pop	r9
     898:	8f 90       	pop	r8
     89a:	7f 90       	pop	r7
     89c:	6f 90       	pop	r6
     89e:	5f 90       	pop	r5
     8a0:	4f 90       	pop	r4
     8a2:	08 95       	ret

000008a4 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     8a4:	84 b1       	in	r24, 0x04	; 4
     8a6:	87 62       	ori	r24, 0x27	; 39
     8a8:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     8aa:	ec ed       	ldi	r30, 0xDC	; 220
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	8c 65       	ori	r24, 0x5C	; 92
     8b2:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     8b4:	85 b1       	in	r24, 0x05	; 5
     8b6:	89 7d       	andi	r24, 0xD9	; 217
     8b8:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     8ba:	ed ed       	ldi	r30, 0xDD	; 221
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	83 7f       	andi	r24, 0xF3	; 243
     8c2:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     8c4:	80 e5       	ldi	r24, 0x50	; 80
     8c6:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     8c8:	80 81       	ld	r24, Z
     8ca:	87 7f       	andi	r24, 0xF7	; 247
     8cc:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     8ce:	80 81       	ld	r24, Z
     8d0:	87 7f       	andi	r24, 0xF7	; 247
     8d2:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     8d4:	80 81       	ld	r24, Z
     8d6:	88 60       	ori	r24, 0x08	; 8
     8d8:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     8da:	80 81       	ld	r24, Z
     8dc:	8f 7e       	andi	r24, 0xEF	; 239
     8de:	80 83       	st	Z, r24
	
}
     8e0:	08 95       	ret

000008e2 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     8e2:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     8e4:	0d b4       	in	r0, 0x2d	; 45
     8e6:	07 fe       	sbrs	r0, 7
     8e8:	fd cf       	rjmp	.-6      	; 0x8e4 <spi_shift_byte+0x2>
	return SPDR;
     8ea:	8e b5       	in	r24, 0x2e	; 46
	
}
     8ec:	08 95       	ret

000008ee <update_spi>:

void update_spi(void) {
     8ee:	cf 93       	push	r28
	
			SPI_PORT |= SPI_SW_LATCH;
     8f0:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
			((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
     8f2:	20 91 71 02 	lds	r18, 0x0271
			((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
			((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
			((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
			BMOD_SW_ON << BMOD;
     8f6:	90 91 19 02 	lds	r25, 0x0219
     8fa:	97 95       	ror	r25
     8fc:	99 27       	eor	r25, r25
     8fe:	97 95       	ror	r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     900:	32 2f       	mov	r19, r18
     902:	31 70       	andi	r19, 0x01	; 1
     904:	93 2b       	or	r25, r19
			((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
     906:	82 2f       	mov	r24, r18
     908:	88 1f       	adc	r24, r24
     90a:	88 27       	eor	r24, r24
     90c:	88 1f       	adc	r24, r24
     90e:	88 0f       	add	r24, r24
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     910:	89 2b       	or	r24, r25
			((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
     912:	a2 2f       	mov	r26, r18
     914:	a6 95       	lsr	r26
     916:	a6 95       	lsr	r26
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	a1 70       	andi	r26, 0x01	; 1
     91c:	b0 70       	andi	r27, 0x00	; 0
     91e:	fd 01       	movw	r30, r26
     920:	ee 0f       	add	r30, r30
     922:	ff 1f       	adc	r31, r31
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     928:	8e 2b       	or	r24, r30
			((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
     92a:	e2 2f       	mov	r30, r18
     92c:	e6 95       	lsr	r30
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	e1 70       	andi	r30, 0x01	; 1
     932:	f0 70       	andi	r31, 0x00	; 0
     934:	bf 01       	movw	r22, r30
     936:	66 0f       	add	r22, r22
     938:	77 1f       	adc	r23, r23
     93a:	66 0f       	add	r22, r22
     93c:	77 1f       	adc	r23, r23
     93e:	66 0f       	add	r22, r22
     940:	77 1f       	adc	r23, r23
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     942:	e8 2f       	mov	r30, r24
     944:	e6 2b       	or	r30, r22
			((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
     946:	62 2f       	mov	r22, r18
     948:	62 95       	swap	r22
     94a:	6f 70       	andi	r22, 0x0F	; 15
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	61 70       	andi	r22, 0x01	; 1
     950:	70 70       	andi	r23, 0x00	; 0
     952:	ab 01       	movw	r20, r22
     954:	42 95       	swap	r20
     956:	52 95       	swap	r21
     958:	50 7f       	andi	r21, 0xF0	; 240
     95a:	54 27       	eor	r21, r20
     95c:	40 7f       	andi	r20, 0xF0	; 240
     95e:	54 27       	eor	r21, r20
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     960:	6e 2f       	mov	r22, r30
     962:	64 2b       	or	r22, r20
			((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
			((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
     964:	42 2f       	mov	r20, r18
     966:	42 95       	swap	r20
     968:	46 95       	lsr	r20
     96a:	47 70       	andi	r20, 0x07	; 7
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	41 70       	andi	r20, 0x01	; 1
     970:	50 70       	andi	r21, 0x00	; 0
     972:	ca 01       	movw	r24, r20
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	82 95       	swap	r24
     97a:	92 95       	swap	r25
     97c:	90 7f       	andi	r25, 0xF0	; 240
     97e:	98 27       	eor	r25, r24
     980:	80 7f       	andi	r24, 0xF0	; 240
     982:	98 27       	eor	r25, r24
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     984:	86 2b       	or	r24, r22
			((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
			((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
			((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
     986:	22 95       	swap	r18
     988:	26 95       	lsr	r18
     98a:	26 95       	lsr	r18
     98c:	23 70       	andi	r18, 0x03	; 3
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	21 70       	andi	r18, 0x01	; 1
     992:	30 70       	andi	r19, 0x00	; 0
     994:	00 24       	eor	r0, r0
     996:	36 95       	lsr	r19
     998:	27 95       	ror	r18
     99a:	07 94       	ror	r0
     99c:	36 95       	lsr	r19
     99e:	27 95       	ror	r18
     9a0:	07 94       	ror	r0
     9a2:	32 2f       	mov	r19, r18
     9a4:	20 2d       	mov	r18, r0
			BMOD_SW_ON << BMOD;
			
					
			//Now read SPDR for switch data shifted in from 74XX165 U14
			spi_sw_byte0_current_state = spi_shift_byte(spi_data);
     9a6:	82 2b       	or	r24, r18
     9a8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     9ac:	90 91 1b 02 	lds	r25, 0x021B
     9b0:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     9b2:	98 27       	eor	r25, r24
     9b4:	90 93 1b 02 	sts	0x021B, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     9b8:	98 23       	and	r25, r24
     9ba:	90 93 1a 02 	sts	0x021A, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     9be:	80 91 71 02 	lds	r24, 0x0271
     9c2:	98 27       	eor	r25, r24
     9c4:	90 93 71 02 	sts	0x0271, r25
			//SHIFT 4th BYTE
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			//switch_state_byte1 = spi_shift_byte(spi_data);
			
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     9c8:	82 e2       	ldi	r24, 0x22	; 34
     9ca:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     9ce:	90 91 1d 02 	lds	r25, 0x021D
     9d2:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     9d4:	98 27       	eor	r25, r24
     9d6:	90 93 1d 02 	sts	0x021D, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     9da:	98 23       	and	r25, r24
     9dc:	90 93 1c 02 	sts	0x021C, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     9e0:	80 91 72 02 	lds	r24, 0x0272
     9e4:	98 27       	eor	r25, r24
     9e6:	90 93 72 02 	sts	0x0272, r25
			
			
			//check if ARP_MODE_SW bit is set
			ARP_MODE_SW_ON = (switch_states.byte1 >> ARP_MODE_SW) & 1;
     9ea:	c9 2f       	mov	r28, r25
     9ec:	c2 95       	swap	r28
     9ee:	c6 95       	lsr	r28
     9f0:	c7 70       	andi	r28, 0x07	; 7
     9f2:	c1 70       	andi	r28, 0x01	; 1
     9f4:	c0 93 1e 02 	sts	0x021E, r28
			//check if ARP_SYNC_SW bit is set
			ARP_SYNC_SW_ON = (switch_states.byte1 >> ARP_SYNC_SW) & 1; //not currently used
     9f8:	92 95       	swap	r25
     9fa:	96 95       	lsr	r25
     9fc:	96 95       	lsr	r25
     9fe:	93 70       	andi	r25, 0x03	; 3
     a00:	91 70       	andi	r25, 0x01	; 1
     a02:	90 93 1f 02 	sts	0x021F, r25

			
			//SHIFT 3th BYTE
			spi_shift_byte(0);
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(0);
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_shift_byte>
			
			//SHIFT 1st BYTE			
			spi_data = (ARP_MODE_SW_ON << ARP_MODE) | (PROG_WRITE_ON << PROG_WRITE) | (EG2_INV_ON << EG2_INV); 
     a12:	80 91 20 02 	lds	r24, 0x0220
     a16:	87 95       	ror	r24
     a18:	88 27       	eor	r24, r24
     a1a:	87 95       	ror	r24
     a1c:	90 91 21 02 	lds	r25, 0x0221
     a20:	89 2b       	or	r24, r25
     a22:	cc 0f       	add	r28, r28
     a24:	cc 0f       	add	r28, r28
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     a26:	8c 2b       	or	r24, r28
     a28:	0e 94 71 04 	call	0x8e2	; 0x8e2 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     a2c:	ed ed       	ldi	r30, 0xDD	; 221
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	87 7f       	andi	r24, 0xF7	; 247
     a34:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     a36:	80 81       	ld	r24, Z
     a38:	88 60       	ori	r24, 0x08	; 8
     a3a:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     a3c:	2d 98       	cbi	0x05, 5	; 5
			
			//EVERYTHING BELOW NEEDS TO BE MOVED OUT OF SPI FUNCTION//
			
			//now read switches directly connected to MCU
			uint8_t current_sw_state = read_switch_port();
     a3e:	0e 94 02 09 	call	0x1204	; 0x1204 <read_switch_port>
			
			if (current_sw_state & (1<<BMOD_SW))
     a42:	82 ff       	sbrs	r24, 2
     a44:	06 c0       	rjmp	.+12     	; 0xa52 <update_spi+0x164>
			{
				BMOD_SW_ON ^= 1 << 0; //toggle switch state
     a46:	30 91 19 02 	lds	r19, 0x0219
     a4a:	21 e0       	ldi	r18, 0x01	; 1
     a4c:	23 27       	eor	r18, r19
     a4e:	20 93 19 02 	sts	0x0219, r18
			}
			
			if (current_sw_state & (1<<PROG_WRITE_SW)) {
     a52:	84 ff       	sbrs	r24, 4
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <update_spi+0x174>
				
				PROG_WRITE_ON ^= 1 << 0; //toggle switch state
     a56:	30 91 20 02 	lds	r19, 0x0220
     a5a:	21 e0       	ldi	r18, 0x01	; 1
     a5c:	23 27       	eor	r18, r19
     a5e:	20 93 20 02 	sts	0x0220, r18
			}
			
			if (current_sw_state & (1<<EG2_INV_SW)) {
     a62:	83 ff       	sbrs	r24, 3
     a64:	06 c0       	rjmp	.+12     	; 0xa72 <update_spi+0x184>
				
				EG2_INV_ON ^= 1 << 0; //toggle switch state
     a66:	90 91 21 02 	lds	r25, 0x0221
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	89 27       	eor	r24, r25
     a6e:	80 93 21 02 	sts	0x0221, r24
			
			//update analog switch latch:
			//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
			//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
			uint8_t switch_state_byte = switch_states.byte0;
			switch_state_byte ^= (-BMOD_SW_ON ^ switch_state_byte) & (1<<3);//set third bit dependent on 
     a72:	90 91 71 02 	lds	r25, 0x0271
     a76:	80 91 19 02 	lds	r24, 0x0219
     a7a:	81 95       	neg	r24
     a7c:	89 27       	eor	r24, r25
     a7e:	88 70       	andi	r24, 0x08	; 8
			update_analog_switch_latch(switch_state_byte);
     a80:	89 27       	eor	r24, r25
     a82:	0e 94 0b 09 	call	0x1216	; 0x1216 <update_analog_switch_latch>

			
			//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
			//need to make sure this doesn't interfere with anything else on this port
			EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     a86:	ed ed       	ldi	r30, 0xDD	; 221
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	90 81       	ld	r25, Z
     a8c:	20 81       	ld	r18, Z
     a8e:	80 91 21 02 	lds	r24, 0x0221
     a92:	81 95       	neg	r24
     a94:	82 27       	eor	r24, r18
     a96:	80 71       	andi	r24, 0x10	; 16
     a98:	89 27       	eor	r24, r25
     a9a:	80 83       	st	Z, r24
			
			if (PROG_WRITE_ON) { //temporary tune button hack
     a9c:	80 91 20 02 	lds	r24, 0x0220
     aa0:	88 23       	and	r24, r24
     aa2:	51 f0       	breq	.+20     	; 0xab8 <update_spi+0x1ca>
				
				PROG_WRITE_ON ^= 1<<0; //toggle switch state
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	89 27       	eor	r24, r25
     aa8:	80 93 20 02 	sts	0x0220, r24
				current_sw_state ^= (1<<PROG_WRITE_SW); //toggle read switch state
				//vco1_init_cv = set_vco_init_cv(VCO1, 24079);
				//vco2_init_cv = set_vco_init_cv(VCO2, 24079);
				tune_8ths(VCO1); 
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 10 07 	call	0xe20	; 0xe20 <tune_8ths>
				tune_8ths(VCO2);
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	0e 94 10 07 	call	0xe20	; 0xe20 <tune_8ths>
				
				
			}
	
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <set_vco_init_cv>:
volatile uint16_t vco2_init_cv = 0;

uint16_t vco1_pitch_table[17] = {0};
uint16_t vco2_pitch_table[17] = {0};
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { //should add extra argument here to set reference count for base frequency
     abc:	2f 92       	push	r2
     abe:	3f 92       	push	r3
     ac0:	4f 92       	push	r4
     ac2:	5f 92       	push	r5
     ac4:	6f 92       	push	r6
     ac6:	7f 92       	push	r7
     ac8:	8f 92       	push	r8
     aca:	9f 92       	push	r9
     acc:	af 92       	push	r10
     ace:	bf 92       	push	r11
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	2a 97       	sbiw	r28, 0x0a	; 10
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	08 2f       	mov	r16, r24
     af2:	78 87       	std	Y+8, r23	; 0x08
     af4:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	 timer1_clock |= (1<<CS11) | (1<<CS10);
     af6:	80 91 6e 02 	lds	r24, 0x026E
     afa:	83 60       	ori	r24, 0x03	; 3
     afc:	80 93 6e 02 	sts	0x026E, r24
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     b00:	80 e3       	ldi	r24, 0x30	; 48
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     b0c:	82 e4       	ldi	r24, 0x42	; 66
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     b18:	84 e4       	ldi	r24, 0x44	; 68
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     b24:	8d ec       	ldi	r24, 0xCD	; 205
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     b30:	84 e3       	ldi	r24, 0x34	; 52
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     b3c:	8e e3       	ldi	r24, 0x3E	; 62
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     b48:	80 e4       	ldi	r24, 0x40	; 64
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     b54:	82 e2       	ldi	r24, 0x22	; 34
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     b60:	8c e2       	ldi	r24, 0x2C	; 44
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     b6c:	84 e2       	ldi	r24, 0x24	; 36
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     b78:	86 e2       	ldi	r24, 0x26	; 38
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     b84:	88 e2       	ldi	r24, 0x28	; 40
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	6f ef       	ldi	r22, 0xFF	; 255
     b8a:	7f e3       	ldi	r23, 0x3F	; 63
     b8c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     b90:	8a e2       	ldi	r24, 0x2A	; 42
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     b9c:	82 e3       	ldi	r24, 0x32	; 50
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     ba8:	8c e1       	ldi	r24, 0x1C	; 28
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     bb4:	88 e1       	ldi	r24, 0x18	; 24
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     bc0:	84 e1       	ldi	r24, 0x14	; 20
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	6f ef       	ldi	r22, 0xFF	; 255
     bc6:	7f e3       	ldi	r23, 0x3F	; 63
     bc8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     bcc:	80 e1       	ldi	r24, 0x10	; 16
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     bd8:	80 e2       	ldi	r24, 0x20	; 32
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
     be4:	10 92 6d 02 	sts	0x026D, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
     be8:	00 23       	and	r16, r16
     bea:	c1 f4       	brne	.+48     	; 0xc1c <set_vco_init_cv+0x160>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     bec:	0f 2e       	mov	r0, r31
     bee:	fc e4       	ldi	r31, 0x4C	; 76
     bf0:	4f 2e       	mov	r4, r31
     bf2:	f1 e0       	ldi	r31, 0x01	; 1
     bf4:	5f 2e       	mov	r5, r31
     bf6:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     bf8:	0f 2e       	mov	r0, r31
     bfa:	fc e3       	ldi	r31, 0x3C	; 60
     bfc:	2f 2e       	mov	r2, r31
     bfe:	f1 e0       	ldi	r31, 0x01	; 1
     c00:	3f 2e       	mov	r3, r31
     c02:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     c04:	26 e4       	ldi	r18, 0x46	; 70
     c06:	31 e0       	ldi	r19, 0x01	; 1
     c08:	3a 83       	std	Y+2, r19	; 0x02
     c0a:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     c0c:	0f 2e       	mov	r0, r31
     c0e:	f8 e3       	ldi	r31, 0x38	; 56
     c10:	8f 2e       	mov	r8, r31
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	9f 2e       	mov	r9, r31
     c16:	f0 2d       	mov	r31, r0

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	17 c0       	rjmp	.+46     	; 0xc4a <set_vco_init_cv+0x18e>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     c1c:	0f 2e       	mov	r0, r31
     c1e:	fa e4       	ldi	r31, 0x4A	; 74
     c20:	4f 2e       	mov	r4, r31
     c22:	f1 e0       	ldi	r31, 0x01	; 1
     c24:	5f 2e       	mov	r5, r31
     c26:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     c28:	0f 2e       	mov	r0, r31
     c2a:	fe e2       	ldi	r31, 0x2E	; 46
     c2c:	2f 2e       	mov	r2, r31
     c2e:	f1 e0       	ldi	r31, 0x01	; 1
     c30:	3f 2e       	mov	r3, r31
     c32:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     c34:	88 e4       	ldi	r24, 0x48	; 72
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     c3c:	0f 2e       	mov	r0, r31
     c3e:	fa e3       	ldi	r31, 0x3A	; 58
     c40:	8f 2e       	mov	r8, r31
     c42:	f1 e0       	ldi	r31, 0x01	; 1
     c44:	9f 2e       	mov	r9, r31
     c46:	f0 2d       	mov	r31, r0
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
     c48:	80 e4       	ldi	r24, 0x40	; 64
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
     c4a:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     c4c:	ed ed       	ldi	r30, 0xDD	; 221
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 64       	ori	r24, 0x40	; 64
     c54:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     c56:	80 81       	ld	r24, Z
     c58:	8f 7b       	andi	r24, 0xBF	; 191
     c5a:	80 83       	st	Z, r24
	DATA_BUS = 0;
     c5c:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
     c5e:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
     c60:	84 b5       	in	r24, 0x24	; 36
     c62:	8f 60       	ori	r24, 0x0F	; 15
     c64:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
     c6a:	ee e6       	ldi	r30, 0x6E	; 110
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	90 81       	ld	r25, Z
     c70:	92 60       	ori	r25, 0x02	; 2
     c72:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
     c74:	80 93 6f 02 	sts	0x026F, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     c78:	ed e0       	ldi	r30, 0x0D	; 13
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	fc 83       	std	Y+4, r31	; 0x04
     c7e:	eb 83       	std	Y+3, r30	; 0x03
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
     c80:	80 2f       	mov	r24, r16
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	8c 01       	movw	r16, r24
     c86:	0f 5f       	subi	r16, 0xFF	; 255
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
     c8a:	0f 2e       	mov	r0, r31
     c8c:	f0 e3       	ldi	r31, 0x30	; 48
     c8e:	ef 2e       	mov	r14, r31
     c90:	f1 e0       	ldi	r31, 0x01	; 1
     c92:	ff 2e       	mov	r15, r31
     c94:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
     c96:	0f 2e       	mov	r0, r31
     c98:	f8 e2       	ldi	r31, 0x28	; 40
     c9a:	cf 2e       	mov	r12, r31
     c9c:	f1 e0       	ldi	r31, 0x01	; 1
     c9e:	df 2e       	mov	r13, r31
     ca0:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
     ca2:	0f 2e       	mov	r0, r31
     ca4:	f4 e1       	ldi	r31, 0x14	; 20
     ca6:	af 2e       	mov	r10, r31
     ca8:	f1 e0       	ldi	r31, 0x01	; 1
     caa:	bf 2e       	mov	r11, r31
     cac:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     cae:	0f 2e       	mov	r0, r31
     cb0:	f6 e1       	ldi	r31, 0x16	; 22
     cb2:	6f 2e       	mov	r6, r31
     cb4:	f1 e0       	ldi	r31, 0x01	; 1
     cb6:	7f 2e       	mov	r7, r31
     cb8:	f0 2d       	mov	r31, r0
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	3a 87       	std	Y+10, r19	; 0x0a
     cc0:	29 87       	std	Y+9, r18	; 0x09
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0b 80       	ldd	r0, Y+3	; 0x03
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <set_vco_init_cv+0x212>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	0a 94       	dec	r0
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <set_vco_init_cv+0x20e>
     cd2:	9e 83       	std	Y+6, r25	; 0x06
     cd4:	8d 83       	std	Y+5, r24	; 0x05
     cd6:	e9 85       	ldd	r30, Y+9	; 0x09
     cd8:	fa 85       	ldd	r31, Y+10	; 0x0a
     cda:	e8 2b       	or	r30, r24
     cdc:	f9 2b       	or	r31, r25
     cde:	fa 87       	std	Y+10, r31	; 0x0a
     ce0:	e9 87       	std	Y+9, r30	; 0x09
		
		set_control_voltage(vco_init_cv, init_cv);
     ce2:	c4 01       	movw	r24, r8
     ce4:	bf 01       	movw	r22, r30
     ce6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		
		count_finished = FALSE;
     cea:	10 92 6d 02 	sts	0x026D, r1
		period_counter = 0;
     cee:	10 92 70 02 	sts	0x0270, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     cf2:	80 91 6d 02 	lds	r24, 0x026D
     cf6:	88 23       	and	r24, r24
     cf8:	89 f5       	brne	.+98     	; 0xd5c <set_vco_init_cv+0x2a0>
			
			update_display(vco + 1, DEC);
     cfa:	c8 01       	movw	r24, r16
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
     d02:	c4 01       	movw	r24, r8
     d04:	69 85       	ldd	r22, Y+9	; 0x09
     d06:	7a 85       	ldd	r23, Y+10	; 0x0a
     d08:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
     d0c:	c1 01       	movw	r24, r2
     d0e:	6f ef       	ldi	r22, 0xFF	; 255
     d10:	7f e3       	ldi	r23, 0x3F	; 63
     d12:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
     d16:	c7 01       	movw	r24, r14
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
     d20:	c6 01       	movw	r24, r12
     d22:	6f ef       	ldi	r22, 0xFF	; 255
     d24:	7f e3       	ldi	r23, 0x3F	; 63
     d26:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
     d2a:	c5 01       	movw	r24, r10
     d2c:	6f ef       	ldi	r22, 0xFF	; 255
     d2e:	7f e3       	ldi	r23, 0x3F	; 63
     d30:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     d34:	c3 01       	movw	r24, r6
     d36:	6f ef       	ldi	r22, 0xFF	; 255
     d38:	7f e3       	ldi	r23, 0x3F	; 63
     d3a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	6f ef       	ldi	r22, 0xFF	; 255
     d44:	7f e3       	ldi	r23, 0x3F	; 63
     d46:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
     d4a:	c2 01       	movw	r24, r4
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		count_finished = FALSE;
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     d54:	80 91 6d 02 	lds	r24, 0x026D
     d58:	88 23       	and	r24, r24
     d5a:	79 f2       	breq	.-98     	; 0xcfa <set_vco_init_cv+0x23e>
			set_control_voltage(vco_pitch_cv, 0);	
			
		}
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE not AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
     d5c:	80 91 6b 02 	lds	r24, 0x026B
     d60:	90 91 6c 02 	lds	r25, 0x026C
     d64:	ef 81       	ldd	r30, Y+7	; 0x07
     d66:	f8 85       	ldd	r31, Y+8	; 0x08
     d68:	e8 17       	cp	r30, r24
     d6a:	f9 07       	cpc	r31, r25
     d6c:	20 f0       	brcs	.+8      	; 0xd76 <set_vco_init_cv+0x2ba>
     d6e:	80 91 c8 01 	lds	r24, 0x01C8
     d72:	88 23       	and	r24, r24
     d74:	51 f4       	brne	.+20     	; 0xd8a <set_vco_init_cv+0x2ce>
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	9e 81       	ldd	r25, Y+6	; 0x06
     d7a:	80 95       	com	r24
     d7c:	90 95       	com	r25
     d7e:	29 85       	ldd	r18, Y+9	; 0x09
     d80:	3a 85       	ldd	r19, Y+10	; 0x0a
     d82:	28 23       	and	r18, r24
     d84:	39 23       	and	r19, r25
     d86:	3a 87       	std	Y+10, r19	; 0x0a
     d88:	29 87       	std	Y+9, r18	; 0x09
		no_overflow = TRUE;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	80 93 c8 01 	sts	0x01C8, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	9c 83       	std	Y+4, r25	; 0x04
     d98:	8b 83       	std	Y+3, r24	; 0x03
     d9a:	ef ef       	ldi	r30, 0xFF	; 255
     d9c:	8f 3f       	cpi	r24, 0xFF	; 255
     d9e:	9e 07       	cpc	r25, r30
     da0:	09 f0       	breq	.+2      	; 0xda4 <set_vco_init_cv+0x2e8>
     da2:	8f cf       	rjmp	.-226    	; 0xcc2 <set_vco_init_cv+0x206>
     da4:	29 85       	ldd	r18, Y+9	; 0x09
     da6:	3a 85       	ldd	r19, Y+10	; 0x0a
     da8:	3e 83       	std	Y+6, r19	; 0x06
     daa:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
     dac:	80 e1       	ldi	r24, 0x10	; 16
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
     db8:	82 e1       	ldi	r24, 0x12	; 18
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
     dc4:	88 e2       	ldi	r24, 0x28	; 40
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
     dd0:	80 e3       	ldi	r24, 0x30	; 48
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
     ddc:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
     dde:	ee e6       	ldi	r30, 0x6E	; 110
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8d 7f       	andi	r24, 0xFD	; 253
     de6:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
     de8:	14 bc       	out	0x24, r1	; 36
	
	return init_cv;
	
}
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	9e 81       	ldd	r25, Y+6	; 0x06
     dee:	2a 96       	adiw	r28, 0x0a	; 10
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	bf 90       	pop	r11
     e0c:	af 90       	pop	r10
     e0e:	9f 90       	pop	r9
     e10:	8f 90       	pop	r8
     e12:	7f 90       	pop	r7
     e14:	6f 90       	pop	r6
     e16:	5f 90       	pop	r5
     e18:	4f 90       	pop	r4
     e1a:	3f 90       	pop	r3
     e1c:	2f 90       	pop	r2
     e1e:	08 95       	ret

00000e20 <tune_8ths>:



void tune_8ths(uint8_t vco) {
     e20:	2f 92       	push	r2
     e22:	3f 92       	push	r3
     e24:	4f 92       	push	r4
     e26:	5f 92       	push	r5
     e28:	6f 92       	push	r6
     e2a:	7f 92       	push	r7
     e2c:	8f 92       	push	r8
     e2e:	9f 92       	push	r9
     e30:	af 92       	push	r10
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	c0 54       	subi	r28, 0x40	; 64
     e4a:	d0 40       	sbci	r29, 0x00	; 0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
     e58:	de 01       	movw	r26, r28
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	e8 e9       	ldi	r30, 0x98	; 152
     e5e:	f1 e0       	ldi	r31, 0x01	; 1
     e60:	80 e3       	ldi	r24, 0x30	; 48
     e62:	01 90       	ld	r0, Z+
     e64:	0d 92       	st	X+, r0
     e66:	81 50       	subi	r24, 0x01	; 1
     e68:	e1 f7       	brne	.-8      	; 0xe62 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     e6a:	80 e3       	ldi	r24, 0x30	; 48
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all pitch modulation
		set_control_voltage(&pitch_lfo_cv, MIN);
     e76:	82 e4       	ldi	r24, 0x42	; 66
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pitch_eg2_cv, MIN);
     e82:	84 e4       	ldi	r24, 0x44	; 68
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pitch_vco2_cv, MIN);
     e8e:	8d ec       	ldi	r24, 0xCD	; 205
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off glide
		set_control_voltage(&glide_cv, MIN);
     e9a:	84 e3       	ldi	r24, 0x34	; 52
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all pulse width modulation
		set_control_voltage(&pwm_eg2_cv, MIN);
     ea6:	8e e3       	ldi	r24, 0x3E	; 62
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pwm_lfo_cv, MIN);
     eb2:	80 e4       	ldi	r24, 0x40	; 64
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all filter modulation
		set_control_voltage(&fil_lfo_cv, MIN);
     ebe:	82 e2       	ldi	r24, 0x22	; 34
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&fil_eg2_cv, MIN);
     eca:	8c e2       	ldi	r24, 0x2C	; 44
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&fil_vco2_cv, MIN);
     ed6:	84 e2       	ldi	r24, 0x24	; 36
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&key_track_cv, MIN);
     ee2:	86 e2       	ldi	r24, 0x26	; 38
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//open filter with no resonance
		set_control_voltage(&cutoff_cv, MAX);
     eee:	88 e2       	ldi	r24, 0x28	; 40
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	6f ef       	ldi	r22, 0xFF	; 255
     ef4:	7f e3       	ldi	r23, 0x3F	; 63
     ef6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&res_cv, MIN);
     efa:	8a e2       	ldi	r24, 0x2A	; 42
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off VCA LFO modulation
		set_control_voltage(&amp_lfo_cv, MIN);
     f06:	82 e3       	ldi	r24, 0x32	; 50
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//initialize VCA envelope
		set_control_voltage(&attack_1_cv, MIN);
     f12:	8c e1       	ldi	r24, 0x1C	; 28
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&decay_1_cv, MIN);
     f1e:	88 e1       	ldi	r24, 0x18	; 24
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&sustain_1_cv, MAX);
     f2a:	84 e1       	ldi	r24, 0x14	; 20
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	6f ef       	ldi	r22, 0xFF	; 255
     f30:	7f e3       	ldi	r23, 0x3F	; 63
     f32:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&release_1_cv, MIN);
     f36:	80 e1       	ldi	r24, 0x10	; 16
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off noise
		set_control_voltage(&noise_mix_cv, MIN);
     f42:	80 e2       	ldi	r24, 0x20	; 32
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
     f4e:	00 23       	and	r16, r16
     f50:	e9 f4       	brne	.+58     	; 0xf8c <tune_8ths+0x16c>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
     f52:	20 90 68 02 	lds	r2, 0x0268
     f56:	30 90 69 02 	lds	r3, 0x0269
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     f5a:	0f 2e       	mov	r0, r31
     f5c:	fc e4       	ldi	r31, 0x4C	; 76
     f5e:	af 2e       	mov	r10, r31
     f60:	f1 e0       	ldi	r31, 0x01	; 1
     f62:	bf 2e       	mov	r11, r31
     f64:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
     f66:	26 e4       	ldi	r18, 0x46	; 70
     f68:	31 e0       	ldi	r19, 0x01	; 1
     f6a:	3a ab       	sts	0x5a, r19
     f6c:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     f6e:	0f 2e       	mov	r0, r31
     f70:	f8 e3       	ldi	r31, 0x38	; 56
     f72:	4f 2e       	mov	r4, r31
     f74:	f1 e0       	ldi	r31, 0x01	; 1
     f76:	5f 2e       	mov	r5, r31
     f78:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
     f7a:	04 e4       	ldi	r16, 0x44	; 68
     f7c:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
     f7e:	0f 2e       	mov	r0, r31
     f80:	fa e0       	ldi	r31, 0x0A	; 10
     f82:	cf 2e       	mov	r12, r31
     f84:	f0 2d       	mov	r31, r0
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
     f86:	ee 24       	eor	r14, r14
     f88:	e3 94       	inc	r14
     f8a:	1d c0       	rjmp	.+58     	; 0xfc6 <tune_8ths+0x1a6>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
     f8c:	20 90 66 02 	lds	r2, 0x0266
     f90:	30 90 67 02 	lds	r3, 0x0267
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     f94:	0f 2e       	mov	r0, r31
     f96:	fa e4       	ldi	r31, 0x4A	; 74
     f98:	af 2e       	mov	r10, r31
     f9a:	f1 e0       	ldi	r31, 0x01	; 1
     f9c:	bf 2e       	mov	r11, r31
     f9e:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
     fa0:	48 e4       	ldi	r20, 0x48	; 72
     fa2:	51 e0       	ldi	r21, 0x01	; 1
     fa4:	5a ab       	sts	0x5a, r21
     fa6:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     fa8:	0f 2e       	mov	r0, r31
     faa:	fa e3       	ldi	r31, 0x3A	; 58
     fac:	4f 2e       	mov	r4, r31
     fae:	f1 e0       	ldi	r31, 0x01	; 1
     fb0:	5f 2e       	mov	r5, r31
     fb2:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
     fb4:	02 e2       	ldi	r16, 0x22	; 34
     fb6:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
     fb8:	0f 2e       	mov	r0, r31
     fba:	f4 e1       	ldi	r31, 0x14	; 20
     fbc:	cf 2e       	mov	r12, r31
     fbe:	f0 2d       	mov	r31, r0
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
     fc0:	ee 24       	eor	r14, r14
     fc2:	68 94       	set
     fc4:	e6 f8       	bld	r14, 6
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
     fc6:	c2 01       	movw	r24, r4
     fc8:	b1 01       	movw	r22, r2
     fca:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//set_control_voltage(vco_pitch_cv, 8192);
	
		//latch switch data
		DATA_BUS = switch_byte;
     fce:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     fd0:	ed ed       	ldi	r30, 0xDD	; 221
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	80 64       	ori	r24, 0x40	; 64
     fd8:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     fda:	80 81       	ld	r24, Z
     fdc:	8f 7b       	andi	r24, 0xBF	; 191
     fde:	80 83       	st	Z, r24
		DATA_BUS = 0;
     fe0:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
     fe2:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	80 93 6f 02 	sts	0x026F, r24
		
		compare_match_counter = 0;	
     fea:	10 92 6a 02 	sts	0x026A, r1
				period_counter = 0;
			
				
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
     fee:	8c 2d       	mov	r24, r12
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	24 e6       	ldi	r18, 0x64	; 100
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	82 9f       	mul	r24, r18
     ff8:	f0 01       	movw	r30, r0
     ffa:	83 9f       	mul	r24, r19
     ffc:	f0 0d       	add	r31, r0
     ffe:	92 9f       	mul	r25, r18
    1000:	f0 0d       	add	r31, r0
    1002:	11 24       	eor	r1, r1
    1004:	fc ab       	sts	0x5c, r31
    1006:	eb ab       	sts	0x5b, r30
    1008:	9e 01       	movw	r18, r28
    100a:	2f 5f       	subi	r18, 0xFF	; 255
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	3c af       	sts	0x7c, r19
    1010:	2b af       	sts	0x7b, r18
	
}



void tune_8ths(uint8_t vco) {
    1012:	a8 01       	movw	r20, r16
    1014:	4e 5f       	subi	r20, 0xFE	; 254
    1016:	5f 4f       	sbci	r21, 0xFF	; 255
    1018:	21 96       	adiw	r28, 0x01	; 1
    101a:	5f af       	sts	0x7f, r21
    101c:	4e af       	sts	0x7e, r20
    101e:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1020:	1e ae       	sts	0xbe, r17
    1022:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1024:	0f 2e       	mov	r0, r31
    1026:	f0 e3       	ldi	r31, 0x30	; 48
    1028:	ef 2e       	mov	r14, r31
    102a:	f1 e0       	ldi	r31, 0x01	; 1
    102c:	ff 2e       	mov	r15, r31
    102e:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    1030:	0f 2e       	mov	r0, r31
    1032:	f8 e2       	ldi	r31, 0x28	; 40
    1034:	cf 2e       	mov	r12, r31
    1036:	f1 e0       	ldi	r31, 0x01	; 1
    1038:	df 2e       	mov	r13, r31
    103a:	f0 2d       	mov	r31, r0
					set_control_voltage(&sustain_1_cv, MAX);
    103c:	0f 2e       	mov	r0, r31
    103e:	f4 e1       	ldi	r31, 0x14	; 20
    1040:	8f 2e       	mov	r8, r31
    1042:	f1 e0       	ldi	r31, 0x01	; 1
    1044:	9f 2e       	mov	r9, r31
    1046:	f0 2d       	mov	r31, r0
					set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    1048:	0f 2e       	mov	r0, r31
    104a:	fc e1       	ldi	r31, 0x1C	; 28
    104c:	6f 2e       	mov	r6, r31
    104e:	f1 e0       	ldi	r31, 0x01	; 1
    1050:	7f 2e       	mov	r7, r31
    1052:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    1054:	ab ad       	sts	0x6b, r26
    1056:	bc ad       	sts	0x6c, r27
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    1058:	8c 91       	ld	r24, X
    105a:	80 93 6f 02 	sts	0x026F, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    105e:	84 b5       	in	r24, 0x24	; 36
    1060:	8f 60       	ori	r24, 0x0F	; 15
    1062:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW***
    1064:	51 e0       	ldi	r21, 0x01	; 1
    1066:	57 bd       	out	0x27, r21	; 39
			TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1068:	ee e6       	ldi	r30, 0x6E	; 110
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	82 60       	ori	r24, 0x02	; 2
    1070:	80 83       	st	Z, r24
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    1072:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    1074:	8d ad       	sts	0x6d, r24
    1076:	9e ad       	sts	0x6e, r25
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	91 05       	cpc	r25, r1
    107c:	24 f4       	brge	.+8      	; 0x1086 <tune_8ths+0x266>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	80 93 6e 02 	sts	0x026E, r24
    1084:	03 c0       	rjmp	.+6      	; 0x108c <tune_8ths+0x26c>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	80 93 6e 02 	sts	0x026E, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    108c:	11 96       	adiw	r26, 0x01	; 1
    108e:	ed 91       	ld	r30, X+
    1090:	fc 91       	ld	r31, X
    1092:	12 97       	sbiw	r26, 0x02	; 2
    1094:	fa af       	sts	0x7a, r31
    1096:	e9 af       	sts	0x79, r30
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1098:	2d e0       	ldi	r18, 0x0D	; 13
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3e ab       	sts	0x5e, r19
    109e:	2d ab       	sts	0x5d, r18
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    10a0:	00 e0       	ldi	r16, 0x00	; 0
    10a2:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    10a4:	41 e0       	ldi	r20, 0x01	; 1
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	0d a8       	sts	0x8d, r16
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <tune_8ths+0x290>
    10ac:	44 0f       	add	r20, r20
    10ae:	55 1f       	adc	r21, r21
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <tune_8ths+0x28c>
    10b4:	58 af       	sts	0x78, r21
    10b6:	4f ab       	sts	0x5f, r20
    10b8:	04 2b       	or	r16, r20
    10ba:	15 2b       	or	r17, r21

				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    10bc:	c5 01       	movw	r24, r10
    10be:	b8 01       	movw	r22, r16
    10c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				count_finished = FALSE;
    10c4:	10 92 6d 02 	sts	0x026D, r1
				period_counter = 0;
    10c8:	10 92 70 02 	sts	0x0270, r1
			
				
				while (count_finished == FALSE) {
    10cc:	80 91 6d 02 	lds	r24, 0x026D
    10d0:	88 23       	and	r24, r24
    10d2:	81 f5       	brne	.+96     	; 0x1134 <__stack+0x35>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    10d4:	80 91 6f 02 	lds	r24, 0x026F
    10d8:	eb a9       	sts	0x4b, r30
    10da:	fc a9       	sts	0x4c, r31
    10dc:	e8 0f       	add	r30, r24
    10de:	f1 1d       	adc	r31, r1
    10e0:	cf 01       	movw	r24, r30
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
					//value_to_display = TCNT0;
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    10e8:	c2 01       	movw	r24, r4
    10ea:	b1 01       	movw	r22, r2
    10ec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    10f0:	c5 01       	movw	r24, r10
    10f2:	b8 01       	movw	r22, r16
    10f4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    10f8:	c7 01       	movw	r24, r14
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    1102:	c6 01       	movw	r24, r12
    1104:	6f ef       	ldi	r22, 0xFF	; 255
    1106:	7f e3       	ldi	r23, 0x3F	; 63
    1108:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&sustain_1_cv, MAX);
    110c:	c4 01       	movw	r24, r8
    110e:	6f ef       	ldi	r22, 0xFF	; 255
    1110:	7f e3       	ldi	r23, 0x3F	; 63
    1112:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    1116:	c3 01       	movw	r24, r6
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					//set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
					set_control_voltage(vco_mix_cv, MAX);
    1120:	89 a9       	sts	0x49, r24
    1122:	9a a9       	sts	0x4a, r25
    1124:	6f ef       	ldi	r22, 0xFF	; 255
    1126:	7f e3       	ldi	r23, 0x3F	; 63
    1128:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
				count_finished = FALSE;
				period_counter = 0;
			
				
				while (count_finished == FALSE) {
    112c:	80 91 6d 02 	lds	r24, 0x026D
    1130:	88 23       	and	r24, r24
    1132:	81 f2       	breq	.-96     	; 0x10d4 <tune_8ths+0x2b4>
			
			
				}							
				
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    1134:	80 91 6b 02 	lds	r24, 0x026B
    1138:	90 91 6c 02 	lds	r25, 0x026C
    113c:	29 ad       	sts	0x69, r18
    113e:	3a ad       	sts	0x6a, r19
    1140:	28 17       	cp	r18, r24
    1142:	39 07       	cpc	r19, r25
    1144:	50 f0       	brcs	.+20     	; 0x115a <__stack+0x5b>
    1146:	80 91 c8 01 	lds	r24, 0x01C8
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	31 f4       	brne	.+12     	; 0x115a <__stack+0x5b>
    114e:	8f a9       	sts	0x4f, r24
    1150:	98 ad       	sts	0x68, r25
    1152:	80 95       	com	r24
    1154:	90 95       	com	r25
    1156:	08 23       	and	r16, r24
    1158:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    115a:	80 91 6b 02 	lds	r24, 0x026B
    115e:	90 91 6c 02 	lds	r25, 0x026C
    1162:	49 ad       	sts	0x69, r20
    1164:	5a ad       	sts	0x6a, r21
    1166:	84 17       	cp	r24, r20
    1168:	95 07       	cpc	r25, r21
    116a:	21 f4       	brne	.+8      	; 0x1174 <__stack+0x75>
    116c:	80 91 c8 01 	lds	r24, 0x01C8
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	69 f0       	breq	.+26     	; 0x118e <__stack+0x8f>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    1174:	51 e0       	ldi	r21, 0x01	; 1
    1176:	50 93 c8 01 	sts	0x01C8, r21
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    117a:	8d a9       	sts	0x4d, r24
    117c:	9e a9       	sts	0x4e, r25
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	9e ab       	sts	0x5e, r25
    1182:	8d ab       	sts	0x5d, r24
    1184:	ef ef       	ldi	r30, 0xFF	; 255
    1186:	8f 3f       	cpi	r24, 0xFF	; 255
    1188:	9e 07       	cpc	r25, r30
    118a:	09 f0       	breq	.+2      	; 0x118e <__stack+0x8f>
    118c:	8b cf       	rjmp	.-234    	; 0x10a4 <tune_8ths+0x284>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    118e:	21 96       	adiw	r28, 0x01	; 1
    1190:	ee ad       	sts	0x6e, r30
    1192:	ff ad       	sts	0x6f, r31
    1194:	21 97       	sbiw	r28, 0x01	; 1
    1196:	01 93       	st	Z+, r16
    1198:	11 93       	st	Z+, r17
    119a:	21 96       	adiw	r28, 0x01	; 1
    119c:	ff af       	sts	0x7f, r31
    119e:	ee af       	sts	0x7e, r30
    11a0:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    11a2:	ee e6       	ldi	r30, 0x6E	; 110
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8d 7f       	andi	r24, 0xFD	; 253
    11aa:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    11ac:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    11ae:	2d ad       	sts	0x6d, r18
    11b0:	3e ad       	sts	0x6e, r19
    11b2:	2f 5f       	subi	r18, 0xFF	; 255
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	3e af       	sts	0x7e, r19
    11b8:	2d af       	sts	0x7d, r18
    11ba:	4b ad       	sts	0x6b, r20
    11bc:	5c ad       	sts	0x6c, r21
    11be:	4d 5f       	subi	r20, 0xFD	; 253
    11c0:	5f 4f       	sbci	r21, 0xFF	; 255
    11c2:	5c af       	sts	0x7c, r21
    11c4:	4b af       	sts	0x7b, r20
    11c6:	20 31       	cpi	r18, 0x10	; 16
    11c8:	31 05       	cpc	r19, r1
    11ca:	09 f0       	breq	.+2      	; 0x11ce <__stack+0xcf>
    11cc:	43 cf       	rjmp	.-378    	; 0x1054 <tune_8ths+0x234>
			TCCR0A = 0; //turn off timer0
		}
	

	
		PORTF &= ~(1<<GATE); //turn gate off
    11ce:	89 98       	cbi	0x11, 1	; 17
		
		//TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
	
	
	}	
    11d0:	c0 5c       	subi	r28, 0xC0	; 192
    11d2:	df 4f       	sbci	r29, 0xFF	; 255
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	bf 90       	pop	r11
    11f0:	af 90       	pop	r10
    11f2:	9f 90       	pop	r9
    11f4:	8f 90       	pop	r8
    11f6:	7f 90       	pop	r7
    11f8:	6f 90       	pop	r6
    11fa:	5f 90       	pop	r5
    11fc:	4f 90       	pop	r4
    11fe:	3f 90       	pop	r3
    1200:	2f 90       	pop	r2
    1202:	08 95       	ret

00001204 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    1204:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    1206:	80 91 74 02 	lds	r24, 0x0274
    120a:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    120c:	89 27       	eor	r24, r25
    120e:	80 93 74 02 	sts	0x0274, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    1212:	89 23       	and	r24, r25
    1214:	08 95       	ret

00001216 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1216:	ed ed       	ldi	r30, 0xDD	; 221
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	90 81       	ld	r25, Z
    121c:	9f 7b       	andi	r25, 0xBF	; 191
    121e:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	21 70       	andi	r18, 0x01	; 1
    1226:	30 70       	andi	r19, 0x00	; 0
    1228:	22 0f       	add	r18, r18
    122a:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    122c:	68 2f       	mov	r22, r24
    122e:	62 95       	swap	r22
    1230:	66 95       	lsr	r22
    1232:	67 70       	andi	r22, 0x07	; 7
    1234:	67 95       	ror	r22
    1236:	66 27       	eor	r22, r22
    1238:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    123a:	26 2b       	or	r18, r22
    123c:	98 2f       	mov	r25, r24
    123e:	96 95       	lsr	r25
    1240:	96 95       	lsr	r25
    1242:	91 70       	andi	r25, 0x01	; 1
    1244:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    1246:	68 2f       	mov	r22, r24
    1248:	66 1f       	adc	r22, r22
    124a:	66 27       	eor	r22, r22
    124c:	66 1f       	adc	r22, r22
    124e:	66 0f       	add	r22, r22
    1250:	66 0f       	add	r22, r22
    1252:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1254:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    1256:	a8 2f       	mov	r26, r24
    1258:	a6 95       	lsr	r26
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	a1 70       	andi	r26, 0x01	; 1
    125e:	b0 70       	andi	r27, 0x00	; 0
    1260:	bd 01       	movw	r22, r26
    1262:	66 0f       	add	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	66 0f       	add	r22, r22
    1268:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    126a:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    126c:	68 2f       	mov	r22, r24
    126e:	62 95       	swap	r22
    1270:	6f 70       	andi	r22, 0x0F	; 15
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	61 70       	andi	r22, 0x01	; 1
    1276:	70 70       	andi	r23, 0x00	; 0
    1278:	ab 01       	movw	r20, r22
    127a:	00 24       	eor	r0, r0
    127c:	56 95       	lsr	r21
    127e:	47 95       	ror	r20
    1280:	07 94       	ror	r0
    1282:	56 95       	lsr	r21
    1284:	47 95       	ror	r20
    1286:	07 94       	ror	r0
    1288:	54 2f       	mov	r21, r20
    128a:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    128c:	62 2f       	mov	r22, r18
    128e:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    1290:	48 2f       	mov	r20, r24
    1292:	42 95       	swap	r20
    1294:	46 95       	lsr	r20
    1296:	46 95       	lsr	r20
    1298:	43 70       	andi	r20, 0x03	; 3
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	41 70       	andi	r20, 0x01	; 1
    129e:	50 70       	andi	r21, 0x00	; 0
    12a0:	9a 01       	movw	r18, r20
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	22 95       	swap	r18
    12a8:	32 95       	swap	r19
    12aa:	30 7f       	andi	r19, 0xF0	; 240
    12ac:	32 27       	eor	r19, r18
    12ae:	20 7f       	andi	r18, 0xF0	; 240
    12b0:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    12b2:	46 2f       	mov	r20, r22
    12b4:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    12b6:	86 95       	lsr	r24
    12b8:	86 95       	lsr	r24
    12ba:	86 95       	lsr	r24
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	21 70       	andi	r18, 0x01	; 1
    12c2:	30 70       	andi	r19, 0x00	; 0
    12c4:	c9 01       	movw	r24, r18
    12c6:	82 95       	swap	r24
    12c8:	92 95       	swap	r25
    12ca:	90 7f       	andi	r25, 0xF0	; 240
    12cc:	98 27       	eor	r25, r24
    12ce:	80 7f       	andi	r24, 0xF0	; 240
    12d0:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    12d2:	84 2b       	or	r24, r20
    12d4:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    12d6:	80 81       	ld	r24, Z
    12d8:	80 64       	ori	r24, 0x40	; 64
    12da:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    12dc:	80 81       	ld	r24, Z
    12de:	8f 7b       	andi	r24, 0xBF	; 191
    12e0:	80 83       	st	Z, r24
	DATA_BUS = 0;
    12e2:	12 b8       	out	0x02, r1	; 2
	
	
    12e4:	08 95       	ret

000012e6 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    12e6:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    12e8:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    12ea:	74 83       	std	Z+4, r23	; 0x04
    12ec:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    12ee:	11 82       	std	Z+1, r1	; 0x01
    12f0:	10 82       	st	Z, r1
}
    12f2:	08 95       	ret

000012f4 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	ec 01       	movw	r28, r24
    12fc:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    12fe:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <store_and_clear_interrupt>
    1302:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1304:	39 81       	ldd	r19, Y+1	; 0x01
    1306:	83 2f       	mov	r24, r19
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	6a 81       	ldd	r22, Y+2	; 0x02
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	0e 94 42 10 	call	0x2084	; 0x2084 <__divmodhi4>
    1314:	48 81       	ld	r20, Y
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	84 17       	cp	r24, r20
    131a:	95 07       	cpc	r25, r21
    131c:	29 f4       	brne	.+10     	; 0x1328 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    131e:	82 2f       	mov	r24, r18
    1320:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <restore_interrupt_setting>
      return false;
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	11 c0       	rjmp	.+34     	; 0x134a <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    1328:	eb 81       	ldd	r30, Y+3	; 0x03
    132a:	fc 81       	ldd	r31, Y+4	; 0x04
    132c:	e3 0f       	add	r30, r19
    132e:	f1 1d       	adc	r31, r1
    1330:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	6a 81       	ldd	r22, Y+2	; 0x02
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	0e 94 42 10 	call	0x2084	; 0x2084 <__divmodhi4>
    1340:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1342:	82 2f       	mov	r24, r18
    1344:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <restore_interrupt_setting>
      return true;
    1348:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	08 95       	ret

00001352 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1358:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    135c:	29 81       	ldd	r18, Y+1	; 0x01
    135e:	98 81       	ld	r25, Y
    1360:	29 17       	cp	r18, r25
    1362:	18 f0       	brcs	.+6      	; 0x136a <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1364:	c2 2f       	mov	r28, r18
    1366:	c9 1b       	sub	r28, r25
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    136a:	ca 81       	ldd	r28, Y+2	; 0x02
    136c:	c2 0f       	add	r28, r18
    136e:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    1370:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <restore_interrupt_setting>
   return len;
}
    1374:	8c 2f       	mov	r24, r28
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	08 95       	ret

0000137c <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    137c:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    137e:	20 81       	ld	r18, Z
    1380:	86 2f       	mov	r24, r22
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	82 0f       	add	r24, r18
    1386:	91 1d       	adc	r25, r1
    1388:	62 81       	ldd	r22, Z+2	; 0x02
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	0e 94 42 10 	call	0x2084	; 0x2084 <__divmodhi4>
    1390:	03 80       	ldd	r0, Z+3	; 0x03
    1392:	f4 81       	ldd	r31, Z+4	; 0x04
    1394:	e0 2d       	mov	r30, r0
    1396:	e8 0f       	add	r30, r24
    1398:	f9 1f       	adc	r31, r25
}
    139a:	80 81       	ld	r24, Z
    139c:	08 95       	ret

0000139e <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	ec 01       	movw	r28, r24
    13a6:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    13a8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <store_and_clear_interrupt>
    13ac:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    13ae:	88 81       	ld	r24, Y
    13b0:	21 2f       	mov	r18, r17
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	28 0f       	add	r18, r24
    13b6:	31 1d       	adc	r19, r1
    13b8:	6a 81       	ldd	r22, Y+2	; 0x02
    13ba:	c9 01       	movw	r24, r18
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	0e 94 42 10 	call	0x2084	; 0x2084 <__divmodhi4>
    13c2:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    13c4:	84 2f       	mov	r24, r20
    13c6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <restore_interrupt_setting>
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	08 95       	ret

000013d2 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    13d2:	8f b7       	in	r24, 0x3f	; 63
   cli();
    13d4:	f8 94       	cli
   return sreg;
}
    13d6:	08 95       	ret

000013d8 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    13d8:	8f bf       	out	0x3f, r24	; 63
}
    13da:	08 95       	ret

000013dc <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    13dc:	88 1f       	adc	r24, r24
    13de:	88 27       	eor	r24, r24
    13e0:	88 1f       	adc	r24, r24
    13e2:	08 95       	ret

000013e4 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	88 3f       	cpi	r24, 0xF8	; 248
    13e8:	08 f4       	brcc	.+2      	; 0x13ec <midi_is_realtime+0x8>
    13ea:	90 e0       	ldi	r25, 0x00	; 0
}
    13ec:	89 2f       	mov	r24, r25
    13ee:	08 95       	ret

000013f0 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	20 7f       	andi	r18, 0xF0	; 240
    13f6:	30 70       	andi	r19, 0x00	; 0
    13f8:	20 3c       	cpi	r18, 0xC0	; 192
    13fa:	31 05       	cpc	r19, r1
    13fc:	e9 f1       	breq	.+122    	; 0x1478 <midi_packet_length+0x88>
    13fe:	21 3c       	cpi	r18, 0xC1	; 193
    1400:	31 05       	cpc	r19, r1
    1402:	8c f4       	brge	.+34     	; 0x1426 <midi_packet_length+0x36>
    1404:	20 39       	cpi	r18, 0x90	; 144
    1406:	31 05       	cpc	r19, r1
    1408:	e1 f0       	breq	.+56     	; 0x1442 <midi_packet_length+0x52>
    140a:	21 39       	cpi	r18, 0x91	; 145
    140c:	31 05       	cpc	r19, r1
    140e:	24 f4       	brge	.+8      	; 0x1418 <midi_packet_length+0x28>
    1410:	20 38       	cpi	r18, 0x80	; 128
    1412:	31 05       	cpc	r19, r1
    1414:	79 f5       	brne	.+94     	; 0x1474 <midi_packet_length+0x84>
    1416:	15 c0       	rjmp	.+42     	; 0x1442 <midi_packet_length+0x52>
    1418:	20 3a       	cpi	r18, 0xA0	; 160
    141a:	31 05       	cpc	r19, r1
    141c:	91 f0       	breq	.+36     	; 0x1442 <midi_packet_length+0x52>
    141e:	20 3b       	cpi	r18, 0xB0	; 176
    1420:	31 05       	cpc	r19, r1
    1422:	41 f5       	brne	.+80     	; 0x1474 <midi_packet_length+0x84>
    1424:	0e c0       	rjmp	.+28     	; 0x1442 <midi_packet_length+0x52>
    1426:	20 3e       	cpi	r18, 0xE0	; 224
    1428:	31 05       	cpc	r19, r1
    142a:	59 f0       	breq	.+22     	; 0x1442 <midi_packet_length+0x52>
    142c:	21 3e       	cpi	r18, 0xE1	; 225
    142e:	31 05       	cpc	r19, r1
    1430:	24 f4       	brge	.+8      	; 0x143a <midi_packet_length+0x4a>
    1432:	20 3d       	cpi	r18, 0xD0	; 208
    1434:	31 05       	cpc	r19, r1
    1436:	f1 f4       	brne	.+60     	; 0x1474 <midi_packet_length+0x84>
    1438:	1f c0       	rjmp	.+62     	; 0x1478 <midi_packet_length+0x88>
    143a:	20 3f       	cpi	r18, 0xF0	; 240
    143c:	31 05       	cpc	r19, r1
    143e:	d1 f4       	brne	.+52     	; 0x1474 <midi_packet_length+0x84>
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1442:	83 e0       	ldi	r24, 0x03	; 3
    1444:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    1446:	86 3f       	cpi	r24, 0xF6	; 246
    1448:	79 f0       	breq	.+30     	; 0x1468 <midi_packet_length+0x78>
    144a:	87 3f       	cpi	r24, 0xF7	; 247
    144c:	38 f4       	brcc	.+14     	; 0x145c <midi_packet_length+0x6c>
    144e:	82 3f       	cpi	r24, 0xF2	; 242
    1450:	a9 f0       	breq	.+42     	; 0x147c <midi_packet_length+0x8c>
    1452:	83 3f       	cpi	r24, 0xF3	; 243
    1454:	59 f0       	breq	.+22     	; 0x146c <midi_packet_length+0x7c>
    1456:	81 3f       	cpi	r24, 0xF1	; 241
    1458:	59 f4       	brne	.+22     	; 0x1470 <midi_packet_length+0x80>
    145a:	08 c0       	rjmp	.+16     	; 0x146c <midi_packet_length+0x7c>
    145c:	88 3f       	cpi	r24, 0xF8	; 248
    145e:	40 f0       	brcs	.+16     	; 0x1470 <midi_packet_length+0x80>
    1460:	8d 3f       	cpi	r24, 0xFD	; 253
    1462:	10 f0       	brcs	.+4      	; 0x1468 <midi_packet_length+0x78>
    1464:	8e 3f       	cpi	r24, 0xFE	; 254
    1466:	20 f0       	brcs	.+8      	; 0x1470 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    147c:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    147e:	08 95       	ret

00001480 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1480:	0f 93       	push	r16
    1482:	34 2f       	mov	r19, r20
    1484:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1486:	46 2f       	mov	r20, r22
    1488:	4f 70       	andi	r20, 0x0F	; 15
    148a:	40 6b       	ori	r20, 0xB0	; 176
    148c:	23 2f       	mov	r18, r19
    148e:	2f 77       	andi	r18, 0x7F	; 127
    1490:	0f 77       	andi	r16, 0x7F	; 127
    1492:	dc 01       	movw	r26, r24
    1494:	ed 91       	ld	r30, X+
    1496:	fc 91       	ld	r31, X
    1498:	63 e0       	ldi	r22, 0x03	; 3
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    149e:	0f 91       	pop	r16
    14a0:	08 95       	ret

000014a2 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    14a2:	0f 93       	push	r16
    14a4:	34 2f       	mov	r19, r20
    14a6:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    14a8:	46 2f       	mov	r20, r22
    14aa:	4f 70       	andi	r20, 0x0F	; 15
    14ac:	40 69       	ori	r20, 0x90	; 144
    14ae:	23 2f       	mov	r18, r19
    14b0:	2f 77       	andi	r18, 0x7F	; 127
    14b2:	0f 77       	andi	r16, 0x7F	; 127
    14b4:	dc 01       	movw	r26, r24
    14b6:	ed 91       	ld	r30, X+
    14b8:	fc 91       	ld	r31, X
    14ba:	63 e0       	ldi	r22, 0x03	; 3
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    14c0:	0f 91       	pop	r16
    14c2:	08 95       	ret

000014c4 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    14c4:	0f 93       	push	r16
    14c6:	34 2f       	mov	r19, r20
    14c8:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    14ca:	46 2f       	mov	r20, r22
    14cc:	4f 70       	andi	r20, 0x0F	; 15
    14ce:	40 68       	ori	r20, 0x80	; 128
    14d0:	23 2f       	mov	r18, r19
    14d2:	2f 77       	andi	r18, 0x7F	; 127
    14d4:	0f 77       	andi	r16, 0x7F	; 127
    14d6:	dc 01       	movw	r26, r24
    14d8:	ed 91       	ld	r30, X+
    14da:	fc 91       	ld	r31, X
    14dc:	63 e0       	ldi	r22, 0x03	; 3
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    14e2:	0f 91       	pop	r16
    14e4:	08 95       	ret

000014e6 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    14e6:	0f 93       	push	r16
    14e8:	34 2f       	mov	r19, r20
    14ea:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    14ec:	46 2f       	mov	r20, r22
    14ee:	4f 70       	andi	r20, 0x0F	; 15
    14f0:	40 6a       	ori	r20, 0xA0	; 160
    14f2:	23 2f       	mov	r18, r19
    14f4:	2f 77       	andi	r18, 0x7F	; 127
    14f6:	0f 77       	andi	r16, 0x7F	; 127
    14f8:	dc 01       	movw	r26, r24
    14fa:	ed 91       	ld	r30, X+
    14fc:	fc 91       	ld	r31, X
    14fe:	63 e0       	ldi	r22, 0x03	; 3
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    1504:	0f 91       	pop	r16
    1506:	08 95       	ret

00001508 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    150c:	20 e2       	ldi	r18, 0x20	; 32
    150e:	40 30       	cpi	r20, 0x00	; 0
    1510:	52 07       	cpc	r21, r18
    1512:	44 f4       	brge	.+16     	; 0x1524 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    1514:	a0 ee       	ldi	r26, 0xE0	; 224
    1516:	40 30       	cpi	r20, 0x00	; 0
    1518:	5a 07       	cpc	r21, r26
    151a:	3c f0       	brlt	.+14     	; 0x152a <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    151c:	8a 01       	movw	r16, r20
    151e:	00 50       	subi	r16, 0x00	; 0
    1520:	10 4e       	sbci	r17, 0xE0	; 224
    1522:	05 c0       	rjmp	.+10     	; 0x152e <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1524:	0f ef       	ldi	r16, 0xFF	; 255
    1526:	1f e3       	ldi	r17, 0x3F	; 63
    1528:	02 c0       	rjmp	.+4      	; 0x152e <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    152a:	00 e0       	ldi	r16, 0x00	; 0
    152c:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    152e:	46 2f       	mov	r20, r22
    1530:	4f 70       	andi	r20, 0x0F	; 15
    1532:	40 6e       	ori	r20, 0xE0	; 224
    1534:	20 2f       	mov	r18, r16
    1536:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1538:	00 0f       	add	r16, r16
    153a:	01 2f       	mov	r16, r17
    153c:	00 1f       	adc	r16, r16
    153e:	11 0b       	sbc	r17, r17
    1540:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1542:	0f 77       	andi	r16, 0x7F	; 127
    1544:	dc 01       	movw	r26, r24
    1546:	ed 91       	ld	r30, X+
    1548:	fc 91       	ld	r31, X
    154a:	63 e0       	ldi	r22, 0x03	; 3
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	08 95       	ret

00001556 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1556:	0f 93       	push	r16
    1558:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    155a:	46 2f       	mov	r20, r22
    155c:	4f 70       	andi	r20, 0x0F	; 15
    155e:	40 6c       	ori	r20, 0xC0	; 192
    1560:	2f 77       	andi	r18, 0x7F	; 127
    1562:	dc 01       	movw	r26, r24
    1564:	ed 91       	ld	r30, X+
    1566:	fc 91       	ld	r31, X
    1568:	62 e0       	ldi	r22, 0x02	; 2
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	00 e0       	ldi	r16, 0x00	; 0
    156e:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1570:	0f 91       	pop	r16
    1572:	08 95       	ret

00001574 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1574:	0f 93       	push	r16
    1576:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1578:	46 2f       	mov	r20, r22
    157a:	4f 70       	andi	r20, 0x0F	; 15
    157c:	40 6d       	ori	r20, 0xD0	; 208
    157e:	2f 77       	andi	r18, 0x7F	; 127
    1580:	dc 01       	movw	r26, r24
    1582:	ed 91       	ld	r30, X+
    1584:	fc 91       	ld	r31, X
    1586:	62 e0       	ldi	r22, 0x02	; 2
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	00 e0       	ldi	r16, 0x00	; 0
    158c:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    158e:	0f 91       	pop	r16
    1590:	08 95       	ret

00001592 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1592:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1594:	dc 01       	movw	r26, r24
    1596:	ed 91       	ld	r30, X+
    1598:	fc 91       	ld	r31, X
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	48 ef       	ldi	r20, 0xF8	; 248
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	00 e0       	ldi	r16, 0x00	; 0
    15a4:	09 95       	icall
}
    15a6:	0f 91       	pop	r16
    15a8:	08 95       	ret

000015aa <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    15aa:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    15ac:	dc 01       	movw	r26, r24
    15ae:	ed 91       	ld	r30, X+
    15b0:	fc 91       	ld	r31, X
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	49 ef       	ldi	r20, 0xF9	; 249
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	00 e0       	ldi	r16, 0x00	; 0
    15bc:	09 95       	icall
}
    15be:	0f 91       	pop	r16
    15c0:	08 95       	ret

000015c2 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    15c2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    15c4:	dc 01       	movw	r26, r24
    15c6:	ed 91       	ld	r30, X+
    15c8:	fc 91       	ld	r31, X
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	4a ef       	ldi	r20, 0xFA	; 250
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	00 e0       	ldi	r16, 0x00	; 0
    15d4:	09 95       	icall
}
    15d6:	0f 91       	pop	r16
    15d8:	08 95       	ret

000015da <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    15da:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    15dc:	dc 01       	movw	r26, r24
    15de:	ed 91       	ld	r30, X+
    15e0:	fc 91       	ld	r31, X
    15e2:	61 e0       	ldi	r22, 0x01	; 1
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	4b ef       	ldi	r20, 0xFB	; 251
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	00 e0       	ldi	r16, 0x00	; 0
    15ec:	09 95       	icall
}
    15ee:	0f 91       	pop	r16
    15f0:	08 95       	ret

000015f2 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    15f2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    15f4:	dc 01       	movw	r26, r24
    15f6:	ed 91       	ld	r30, X+
    15f8:	fc 91       	ld	r31, X
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	4c ef       	ldi	r20, 0xFC	; 252
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	00 e0       	ldi	r16, 0x00	; 0
    1604:	09 95       	icall
}
    1606:	0f 91       	pop	r16
    1608:	08 95       	ret

0000160a <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    160a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    160c:	dc 01       	movw	r26, r24
    160e:	ed 91       	ld	r30, X+
    1610:	fc 91       	ld	r31, X
    1612:	61 e0       	ldi	r22, 0x01	; 1
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	4e ef       	ldi	r20, 0xFE	; 254
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	00 e0       	ldi	r16, 0x00	; 0
    161c:	09 95       	icall
}
    161e:	0f 91       	pop	r16
    1620:	08 95       	ret

00001622 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1622:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1624:	dc 01       	movw	r26, r24
    1626:	ed 91       	ld	r30, X+
    1628:	fc 91       	ld	r31, X
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	4f ef       	ldi	r20, 0xFF	; 255
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	00 e0       	ldi	r16, 0x00	; 0
    1634:	09 95       	icall
}
    1636:	0f 91       	pop	r16
    1638:	08 95       	ret

0000163a <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    163a:	0f 93       	push	r16
   device->send_func(device, 2,
    163c:	26 2f       	mov	r18, r22
    163e:	2f 77       	andi	r18, 0x7F	; 127
    1640:	dc 01       	movw	r26, r24
    1642:	ed 91       	ld	r30, X+
    1644:	fc 91       	ld	r31, X
    1646:	62 e0       	ldi	r22, 0x02	; 2
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	41 ef       	ldi	r20, 0xF1	; 241
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1650:	0f 91       	pop	r16
    1652:	08 95       	ret

00001654 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
   device->send_func(device, 3,
    1658:	26 2f       	mov	r18, r22
    165a:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    165c:	8b 01       	movw	r16, r22
    165e:	00 0f       	add	r16, r16
    1660:	01 2f       	mov	r16, r17
    1662:	00 1f       	adc	r16, r16
    1664:	11 0b       	sbc	r17, r17
    1666:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1668:	0f 77       	andi	r16, 0x7F	; 127
    166a:	dc 01       	movw	r26, r24
    166c:	ed 91       	ld	r30, X+
    166e:	fc 91       	ld	r31, X
    1670:	63 e0       	ldi	r22, 0x03	; 3
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	42 ef       	ldi	r20, 0xF2	; 242
    1676:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    167e:	0f 93       	push	r16
   device->send_func(device, 2,
    1680:	26 2f       	mov	r18, r22
    1682:	2f 77       	andi	r18, 0x7F	; 127
    1684:	dc 01       	movw	r26, r24
    1686:	ed 91       	ld	r30, X+
    1688:	fc 91       	ld	r31, X
    168a:	62 e0       	ldi	r22, 0x02	; 2
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	43 ef       	ldi	r20, 0xF3	; 243
    1690:	00 e0       	ldi	r16, 0x00	; 0
    1692:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1694:	0f 91       	pop	r16
    1696:	08 95       	ret

00001698 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1698:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    169a:	dc 01       	movw	r26, r24
    169c:	ed 91       	ld	r30, X+
    169e:	fc 91       	ld	r31, X
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	46 ef       	ldi	r20, 0xF6	; 246
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	00 e0       	ldi	r16, 0x00	; 0
    16aa:	09 95       	icall
}
    16ac:	0f 91       	pop	r16
    16ae:	08 95       	ret

000016b0 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    16b0:	0f 93       	push	r16
    16b2:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    16b4:	dc 01       	movw	r26, r24
    16b6:	ed 91       	ld	r30, X+
    16b8:	fc 91       	ld	r31, X
    16ba:	61 e0       	ldi	r22, 0x01	; 1
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	00 e0       	ldi	r16, 0x00	; 0
    16c2:	09 95       	icall
}
    16c4:	0f 91       	pop	r16
    16c6:	08 95       	ret

000016c8 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    16c8:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    16ca:	dc 01       	movw	r26, r24
    16cc:	ed 91       	ld	r30, X+
    16ce:	fc 91       	ld	r31, X
    16d0:	09 95       	icall
}
    16d2:	0f 91       	pop	r16
    16d4:	08 95       	ret

000016d6 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    16d6:	6f 92       	push	r6
    16d8:	7f 92       	push	r7
    16da:	8f 92       	push	r8
    16dc:	9f 92       	push	r9
    16de:	af 92       	push	r10
    16e0:	bf 92       	push	r11
    16e2:	cf 92       	push	r12
    16e4:	df 92       	push	r13
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <midi_send_array+0x1e>
    16f4:	0f 92       	push	r0
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	4c 01       	movw	r8, r24
    16fc:	6b 01       	movw	r12, r22
    16fe:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1700:	61 15       	cp	r22, r1
    1702:	71 05       	cpc	r23, r1
    1704:	41 f1       	breq	.+80     	; 0x1756 <midi_send_array+0x80>
    1706:	ee 24       	eor	r14, r14
    1708:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    170a:	0f 2e       	mov	r0, r31
    170c:	f3 e0       	ldi	r31, 0x03	; 3
    170e:	6f 2e       	mov	r6, r31
    1710:	77 24       	eor	r7, r7
    1712:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    1714:	19 82       	std	Y+1, r1	; 0x01
    1716:	1a 82       	std	Y+2, r1	; 0x02
    1718:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    171a:	86 01       	movw	r16, r12
    171c:	0e 19       	sub	r16, r14
    171e:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    1720:	04 30       	cpi	r16, 0x04	; 4
    1722:	11 05       	cpc	r17, r1
    1724:	08 f0       	brcs	.+2      	; 0x1728 <midi_send_array+0x52>
    1726:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1728:	b5 01       	movw	r22, r10
    172a:	6e 0d       	add	r22, r14
    172c:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    172e:	ce 01       	movw	r24, r28
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	40 2f       	mov	r20, r16
    1734:	51 2f       	mov	r21, r17
    1736:	0e 94 55 10 	call	0x20aa	; 0x20aa <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    173a:	c4 01       	movw	r24, r8
    173c:	b8 01       	movw	r22, r16
    173e:	49 81       	ldd	r20, Y+1	; 0x01
    1740:	2a 81       	ldd	r18, Y+2	; 0x02
    1742:	0b 81       	ldd	r16, Y+3	; 0x03
    1744:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	e8 0e       	add	r14, r24
    174e:	f9 1e       	adc	r15, r25
    1750:	ec 14       	cp	r14, r12
    1752:	fd 04       	cpc	r15, r13
    1754:	f8 f2       	brcs	.-66     	; 0x1714 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	cf 90       	pop	r12
    176c:	bf 90       	pop	r11
    176e:	af 90       	pop	r10
    1770:	9f 90       	pop	r9
    1772:	8f 90       	pop	r8
    1774:	7f 90       	pop	r7
    1776:	6f 90       	pop	r6
    1778:	08 95       	ret

0000177a <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    177a:	fc 01       	movw	r30, r24
    177c:	73 83       	std	Z+3, r23	; 0x03
    177e:	62 83       	std	Z+2, r22	; 0x02
}
    1780:	08 95       	ret

00001782 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1782:	fc 01       	movw	r30, r24
    1784:	75 83       	std	Z+5, r23	; 0x05
    1786:	64 83       	std	Z+4, r22	; 0x04
}
    1788:	08 95       	ret

0000178a <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    178a:	fc 01       	movw	r30, r24
    178c:	77 83       	std	Z+7, r23	; 0x07
    178e:	66 83       	std	Z+6, r22	; 0x06
}
    1790:	08 95       	ret

00001792 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1792:	fc 01       	movw	r30, r24
    1794:	71 87       	std	Z+9, r23	; 0x09
    1796:	60 87       	std	Z+8, r22	; 0x08
}
    1798:	08 95       	ret

0000179a <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    179a:	fc 01       	movw	r30, r24
    179c:	73 87       	std	Z+11, r23	; 0x0b
    179e:	62 87       	std	Z+10, r22	; 0x0a
}
    17a0:	08 95       	ret

000017a2 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    17a2:	fc 01       	movw	r30, r24
    17a4:	75 87       	std	Z+13, r23	; 0x0d
    17a6:	64 87       	std	Z+12, r22	; 0x0c
}
    17a8:	08 95       	ret

000017aa <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    17aa:	fc 01       	movw	r30, r24
    17ac:	77 87       	std	Z+15, r23	; 0x0f
    17ae:	66 87       	std	Z+14, r22	; 0x0e
}
    17b0:	08 95       	ret

000017b2 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    17b2:	fc 01       	movw	r30, r24
    17b4:	71 8b       	std	Z+17, r23	; 0x11
    17b6:	60 8b       	std	Z+16, r22	; 0x10
}
    17b8:	08 95       	ret

000017ba <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    17ba:	fc 01       	movw	r30, r24
    17bc:	73 8b       	std	Z+19, r23	; 0x13
    17be:	62 8b       	std	Z+18, r22	; 0x12
}
    17c0:	08 95       	ret

000017c2 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    17c2:	fc 01       	movw	r30, r24
    17c4:	75 8b       	std	Z+21, r23	; 0x15
    17c6:	64 8b       	std	Z+20, r22	; 0x14
}
    17c8:	08 95       	ret

000017ca <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    17ca:	fc 01       	movw	r30, r24
    17cc:	77 8b       	std	Z+23, r23	; 0x17
    17ce:	66 8b       	std	Z+22, r22	; 0x16
}
    17d0:	08 95       	ret

000017d2 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    17d2:	fc 01       	movw	r30, r24
    17d4:	71 8f       	std	Z+25, r23	; 0x19
    17d6:	60 8f       	std	Z+24, r22	; 0x18
}
    17d8:	08 95       	ret

000017da <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    17da:	fc 01       	movw	r30, r24
    17dc:	73 8f       	std	Z+27, r23	; 0x1b
    17de:	62 8f       	std	Z+26, r22	; 0x1a
}
    17e0:	08 95       	ret

000017e2 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    17e2:	fc 01       	movw	r30, r24
    17e4:	75 8f       	std	Z+29, r23	; 0x1d
    17e6:	64 8f       	std	Z+28, r22	; 0x1c
}
    17e8:	08 95       	ret

000017ea <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    17ea:	fc 01       	movw	r30, r24
    17ec:	77 8f       	std	Z+31, r23	; 0x1f
    17ee:	66 8f       	std	Z+30, r22	; 0x1e
}
    17f0:	08 95       	ret

000017f2 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    17f8:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    17fa:	1f a2       	lds	r17, 0x9f
    17fc:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    17fe:	bc 01       	movw	r22, r24
    1800:	68 5d       	subi	r22, 0xD8	; 216
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	88 51       	subi	r24, 0x18	; 24
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	40 ec       	ldi	r20, 0xC0	; 192
    180a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    180e:	1b 82       	std	Y+3, r1	; 0x03
    1810:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1812:	1d 82       	std	Y+5, r1	; 0x05
    1814:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1816:	1f 82       	std	Y+7, r1	; 0x07
    1818:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    181a:	19 86       	std	Y+9, r1	; 0x09
    181c:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    181e:	1b 86       	std	Y+11, r1	; 0x0b
    1820:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1822:	1d 86       	std	Y+13, r1	; 0x0d
    1824:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1826:	1f 86       	std	Y+15, r1	; 0x0f
    1828:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    182a:	19 8a       	std	Y+17, r1	; 0x11
    182c:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    182e:	1b 8a       	std	Y+19, r1	; 0x13
    1830:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1832:	1d 8a       	std	Y+21, r1	; 0x15
    1834:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1836:	1f 8a       	std	Y+23, r1	; 0x17
    1838:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    183a:	19 8e       	std	Y+25, r1	; 0x19
    183c:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    183e:	1b 8e       	std	Y+27, r1	; 0x1b
    1840:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1842:	1d 8e       	std	Y+29, r1	; 0x1d
    1844:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1846:	1f 8e       	std	Y+31, r1	; 0x1f
    1848:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    184a:	19 a2       	lds	r17, 0x99
    184c:	18 a2       	lds	r17, 0x98
}
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	08 95       	ret

00001854 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1862:	66 23       	and	r22, r22
    1864:	99 f0       	breq	.+38     	; 0x188c <midi_device_input+0x38>
    1866:	04 2f       	mov	r16, r20
    1868:	15 2f       	mov	r17, r21
    186a:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    186c:	0f 2e       	mov	r0, r31
    186e:	f8 ee       	ldi	r31, 0xE8	; 232
    1870:	ef 2e       	mov	r14, r31
    1872:	ff 24       	eor	r15, r15
    1874:	f0 2d       	mov	r31, r0
    1876:	e8 0e       	add	r14, r24
    1878:	f9 1e       	adc	r15, r25
    187a:	f8 01       	movw	r30, r16
    187c:	61 91       	ld	r22, Z+
    187e:	8f 01       	movw	r16, r30
    1880:	c7 01       	movw	r24, r14
    1882:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1886:	cf 5f       	subi	r28, 0xFF	; 255
    1888:	cd 17       	cp	r28, r29
    188a:	b9 f7       	brne	.-18     	; 0x187a <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	ff 90       	pop	r15
    1896:	ef 90       	pop	r14
    1898:	08 95       	ret

0000189a <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    189a:	fc 01       	movw	r30, r24
    189c:	71 83       	std	Z+1, r23	; 0x01
    189e:	60 83       	st	Z, r22
}
    18a0:	08 95       	ret

000018a2 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    18a2:	fc 01       	movw	r30, r24
    18a4:	71 a3       	lds	r23, 0x51
    18a6:	60 a3       	lds	r22, 0x50
}
    18a8:	08 95       	ret

000018aa <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    18aa:	af 92       	push	r10
    18ac:	bf 92       	push	r11
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <midi_input_callbacks+0x16>
    18c0:	0f 92       	push	r0
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	6c 01       	movw	r12, r24
    18c8:	5b 01       	movw	r10, r22
    18ca:	f4 2e       	mov	r15, r20
    18cc:	e2 2e       	mov	r14, r18
    18ce:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    18d0:	dc 01       	movw	r26, r24
    18d2:	95 96       	adiw	r26, 0x25	; 37
    18d4:	8c 91       	ld	r24, X
    18d6:	95 97       	sbiw	r26, 0x25	; 37
    18d8:	84 30       	cpi	r24, 0x04	; 4
    18da:	e9 f4       	brne	.+58     	; 0x1916 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    18dc:	5a 96       	adiw	r26, 0x1a	; 26
    18de:	ed 91       	ld	r30, X+
    18e0:	fc 91       	ld	r31, X
    18e2:	5b 97       	sbiw	r26, 0x1b	; 27
    18e4:	30 97       	sbiw	r30, 0x00	; 0
    18e6:	09 f4       	brne	.+2      	; 0x18ea <midi_input_callbacks+0x40>
    18e8:	ee c0       	rjmp	.+476    	; 0x1ac6 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    18ea:	cb 01       	movw	r24, r22
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	63 e0       	ldi	r22, 0x03	; 3
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
    18f6:	cb 01       	movw	r24, r22
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	68 0f       	add	r22, r24
    18fe:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1900:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1902:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    1904:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1906:	4a 2d       	mov	r20, r10
    1908:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    190a:	c6 01       	movw	r24, r12
    190c:	9e 01       	movw	r18, r28
    190e:	2f 5f       	subi	r18, 0xFF	; 255
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	09 95       	icall
    1914:	c8 c0       	rjmp	.+400    	; 0x1aa6 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    1916:	62 30       	cpi	r22, 0x02	; 2
    1918:	71 05       	cpc	r23, r1
    191a:	09 f4       	brne	.+2      	; 0x191e <midi_input_callbacks+0x74>
    191c:	5f c0       	rjmp	.+190    	; 0x19dc <midi_input_callbacks+0x132>
    191e:	63 30       	cpi	r22, 0x03	; 3
    1920:	71 05       	cpc	r23, r1
    1922:	29 f0       	breq	.+10     	; 0x192e <midi_input_callbacks+0x84>
    1924:	61 30       	cpi	r22, 0x01	; 1
    1926:	71 05       	cpc	r23, r1
    1928:	09 f0       	breq	.+2      	; 0x192c <midi_input_callbacks+0x82>
    192a:	b3 c0       	rjmp	.+358    	; 0x1a92 <midi_input_callbacks+0x1e8>
    192c:	99 c0       	rjmp	.+306    	; 0x1a60 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    192e:	84 2f       	mov	r24, r20
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	80 7f       	andi	r24, 0xF0	; 240
    1934:	90 70       	andi	r25, 0x00	; 0
    1936:	80 3a       	cpi	r24, 0xA0	; 160
    1938:	91 05       	cpc	r25, r1
    193a:	29 f1       	breq	.+74     	; 0x1986 <midi_input_callbacks+0xdc>
    193c:	81 3a       	cpi	r24, 0xA1	; 161
    193e:	91 05       	cpc	r25, r1
    1940:	3c f4       	brge	.+14     	; 0x1950 <midi_input_callbacks+0xa6>
    1942:	80 38       	cpi	r24, 0x80	; 128
    1944:	91 05       	cpc	r25, r1
    1946:	c9 f0       	breq	.+50     	; 0x197a <midi_input_callbacks+0xd0>
    1948:	80 39       	cpi	r24, 0x90	; 144
    194a:	91 05       	cpc	r25, r1
    194c:	91 f5       	brne	.+100    	; 0x19b2 <midi_input_callbacks+0x108>
    194e:	0f c0       	rjmp	.+30     	; 0x196e <midi_input_callbacks+0xc4>
    1950:	80 3e       	cpi	r24, 0xE0	; 224
    1952:	91 05       	cpc	r25, r1
    1954:	f1 f0       	breq	.+60     	; 0x1992 <midi_input_callbacks+0xe8>
    1956:	80 3f       	cpi	r24, 0xF0	; 240
    1958:	91 05       	cpc	r25, r1
    195a:	09 f1       	breq	.+66     	; 0x199e <midi_input_callbacks+0xf4>
    195c:	80 3b       	cpi	r24, 0xB0	; 176
    195e:	91 05       	cpc	r25, r1
    1960:	41 f5       	brne	.+80     	; 0x19b2 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    1962:	d6 01       	movw	r26, r12
    1964:	12 96       	adiw	r26, 0x02	; 2
    1966:	ed 91       	ld	r30, X+
    1968:	fc 91       	ld	r31, X
    196a:	13 97       	sbiw	r26, 0x03	; 3
              break;
    196c:	24 c0       	rjmp	.+72     	; 0x19b6 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    196e:	d6 01       	movw	r26, r12
    1970:	14 96       	adiw	r26, 0x04	; 4
    1972:	ed 91       	ld	r30, X+
    1974:	fc 91       	ld	r31, X
    1976:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1978:	1e c0       	rjmp	.+60     	; 0x19b6 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    197a:	d6 01       	movw	r26, r12
    197c:	16 96       	adiw	r26, 0x06	; 6
    197e:	ed 91       	ld	r30, X+
    1980:	fc 91       	ld	r31, X
    1982:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1984:	18 c0       	rjmp	.+48     	; 0x19b6 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1986:	d6 01       	movw	r26, r12
    1988:	18 96       	adiw	r26, 0x08	; 8
    198a:	ed 91       	ld	r30, X+
    198c:	fc 91       	ld	r31, X
    198e:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1990:	12 c0       	rjmp	.+36     	; 0x19b6 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1992:	d6 01       	movw	r26, r12
    1994:	1a 96       	adiw	r26, 0x0a	; 10
    1996:	ed 91       	ld	r30, X+
    1998:	fc 91       	ld	r31, X
    199a:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    199c:	0c c0       	rjmp	.+24     	; 0x19b6 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    199e:	b2 ef       	ldi	r27, 0xF2	; 242
    19a0:	4b 17       	cp	r20, r27
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <midi_input_callbacks+0xfc>
    19a4:	90 c0       	rjmp	.+288    	; 0x1ac6 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    19a6:	d6 01       	movw	r26, r12
    19a8:	1c 96       	adiw	r26, 0x0c	; 12
    19aa:	ed 91       	ld	r30, X+
    19ac:	fc 91       	ld	r31, X
    19ae:	1d 97       	sbiw	r26, 0x0d	; 13
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    19b2:	e0 e0       	ldi	r30, 0x00	; 0
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    19b6:	30 97       	sbiw	r30, 0x00	; 0
    19b8:	09 f4       	brne	.+2      	; 0x19bc <midi_input_callbacks+0x112>
    19ba:	85 c0       	rjmp	.+266    	; 0x1ac6 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    19bc:	b2 ef       	ldi	r27, 0xF2	; 242
    19be:	fb 16       	cp	r15, r27
    19c0:	31 f4       	brne	.+12     	; 0x19ce <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    19c2:	c6 01       	movw	r24, r12
    19c4:	62 ef       	ldi	r22, 0xF2	; 242
    19c6:	4e 2d       	mov	r20, r14
    19c8:	21 2f       	mov	r18, r17
    19ca:	09 95       	icall
    19cc:	6c c0       	rjmp	.+216    	; 0x1aa6 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    19ce:	6f 2d       	mov	r22, r15
    19d0:	6f 70       	andi	r22, 0x0F	; 15
    19d2:	c6 01       	movw	r24, r12
    19d4:	4e 2d       	mov	r20, r14
    19d6:	21 2f       	mov	r18, r17
    19d8:	09 95       	icall
    19da:	65 c0       	rjmp	.+202    	; 0x1aa6 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    19dc:	84 2f       	mov	r24, r20
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	80 7f       	andi	r24, 0xF0	; 240
    19e2:	90 70       	andi	r25, 0x00	; 0
    19e4:	80 3d       	cpi	r24, 0xD0	; 208
    19e6:	91 05       	cpc	r25, r1
    19e8:	61 f0       	breq	.+24     	; 0x1a02 <midi_input_callbacks+0x158>
    19ea:	80 3f       	cpi	r24, 0xF0	; 240
    19ec:	91 05       	cpc	r25, r1
    19ee:	79 f0       	breq	.+30     	; 0x1a0e <midi_input_callbacks+0x164>
    19f0:	80 3c       	cpi	r24, 0xC0	; 192
    19f2:	91 05       	cpc	r25, r1
    19f4:	f9 f4       	brne	.+62     	; 0x1a34 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    19f6:	d6 01       	movw	r26, r12
    19f8:	1e 96       	adiw	r26, 0x0e	; 14
    19fa:	ed 91       	ld	r30, X+
    19fc:	fc 91       	ld	r31, X
    19fe:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1a00:	1b c0       	rjmp	.+54     	; 0x1a38 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1a02:	d6 01       	movw	r26, r12
    1a04:	50 96       	adiw	r26, 0x10	; 16
    1a06:	ed 91       	ld	r30, X+
    1a08:	fc 91       	ld	r31, X
    1a0a:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1a0c:	15 c0       	rjmp	.+42     	; 0x1a38 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1a0e:	b3 ef       	ldi	r27, 0xF3	; 243
    1a10:	4b 17       	cp	r20, r27
    1a12:	31 f4       	brne	.+12     	; 0x1a20 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    1a14:	d6 01       	movw	r26, r12
    1a16:	52 96       	adiw	r26, 0x12	; 18
    1a18:	ed 91       	ld	r30, X+
    1a1a:	fc 91       	ld	r31, X
    1a1c:	53 97       	sbiw	r26, 0x13	; 19
    1a1e:	0c c0       	rjmp	.+24     	; 0x1a38 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1a20:	b1 ef       	ldi	r27, 0xF1	; 241
    1a22:	4b 17       	cp	r20, r27
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <midi_input_callbacks+0x17e>
    1a26:	4f c0       	rjmp	.+158    	; 0x1ac6 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    1a28:	d6 01       	movw	r26, r12
    1a2a:	54 96       	adiw	r26, 0x14	; 20
    1a2c:	ed 91       	ld	r30, X+
    1a2e:	fc 91       	ld	r31, X
    1a30:	55 97       	sbiw	r26, 0x15	; 21
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1a34:	e0 e0       	ldi	r30, 0x00	; 0
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1a38:	30 97       	sbiw	r30, 0x00	; 0
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <midi_input_callbacks+0x194>
    1a3c:	44 c0       	rjmp	.+136    	; 0x1ac6 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1a3e:	b3 ef       	ldi	r27, 0xF3	; 243
    1a40:	fb 16       	cp	r15, r27
    1a42:	19 f0       	breq	.+6      	; 0x1a4a <midi_input_callbacks+0x1a0>
    1a44:	81 ef       	ldi	r24, 0xF1	; 241
    1a46:	f8 16       	cp	r15, r24
    1a48:	29 f4       	brne	.+10     	; 0x1a54 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1a4a:	c6 01       	movw	r24, r12
    1a4c:	6f 2d       	mov	r22, r15
    1a4e:	4e 2d       	mov	r20, r14
    1a50:	09 95       	icall
    1a52:	29 c0       	rjmp	.+82     	; 0x1aa6 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    1a54:	6f 2d       	mov	r22, r15
    1a56:	6f 70       	andi	r22, 0x0F	; 15
    1a58:	c6 01       	movw	r24, r12
    1a5a:	4e 2d       	mov	r20, r14
    1a5c:	09 95       	icall
    1a5e:	23 c0       	rjmp	.+70     	; 0x1aa6 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1a60:	84 2f       	mov	r24, r20
    1a62:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <midi_is_realtime>
    1a66:	88 23       	and	r24, r24
    1a68:	31 f0       	breq	.+12     	; 0x1a76 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    1a6a:	d6 01       	movw	r26, r12
    1a6c:	56 96       	adiw	r26, 0x16	; 22
    1a6e:	ed 91       	ld	r30, X+
    1a70:	fc 91       	ld	r31, X
    1a72:	57 97       	sbiw	r26, 0x17	; 23
    1a74:	08 c0       	rjmp	.+16     	; 0x1a86 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    1a76:	b6 ef       	ldi	r27, 0xF6	; 246
    1a78:	fb 16       	cp	r15, r27
    1a7a:	29 f5       	brne	.+74     	; 0x1ac6 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    1a7c:	d6 01       	movw	r26, r12
    1a7e:	58 96       	adiw	r26, 0x18	; 24
    1a80:	ed 91       	ld	r30, X+
    1a82:	fc 91       	ld	r31, X
    1a84:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1a86:	30 97       	sbiw	r30, 0x00	; 0
    1a88:	f1 f0       	breq	.+60     	; 0x1ac6 <midi_input_callbacks+0x21c>
            func(device, byte0);
    1a8a:	c6 01       	movw	r24, r12
    1a8c:	6f 2d       	mov	r22, r15
    1a8e:	09 95       	icall
    1a90:	0a c0       	rjmp	.+20     	; 0x1aa6 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1a92:	64 30       	cpi	r22, 0x04	; 4
    1a94:	71 05       	cpc	r23, r1
    1a96:	a8 f4       	brcc	.+42     	; 0x1ac2 <midi_input_callbacks+0x218>
    1a98:	16 c0       	rjmp	.+44     	; 0x1ac6 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1a9a:	c6 01       	movw	r24, r12
    1a9c:	b5 01       	movw	r22, r10
    1a9e:	4f 2d       	mov	r20, r15
    1aa0:	2e 2d       	mov	r18, r14
    1aa2:	01 2f       	mov	r16, r17
    1aa4:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1aa6:	d6 01       	movw	r26, r12
    1aa8:	5e 96       	adiw	r26, 0x1e	; 30
    1aaa:	ed 91       	ld	r30, X+
    1aac:	fc 91       	ld	r31, X
    1aae:	5f 97       	sbiw	r26, 0x1f	; 31
    1ab0:	30 97       	sbiw	r30, 0x00	; 0
    1ab2:	89 f0       	breq	.+34     	; 0x1ad6 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1ab4:	c6 01       	movw	r24, r12
    1ab6:	b5 01       	movw	r22, r10
    1ab8:	4f 2d       	mov	r20, r15
    1aba:	2e 2d       	mov	r18, r14
    1abc:	01 2f       	mov	r16, r17
    1abe:	09 95       	icall
    1ac0:	0a c0       	rjmp	.+20     	; 0x1ad6 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    1ac2:	aa 24       	eor	r10, r10
    1ac4:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1ac6:	d6 01       	movw	r26, r12
    1ac8:	5c 96       	adiw	r26, 0x1c	; 28
    1aca:	ed 91       	ld	r30, X+
    1acc:	fc 91       	ld	r31, X
    1ace:	5d 97       	sbiw	r26, 0x1d	; 29
    1ad0:	30 97       	sbiw	r30, 0x00	; 0
    1ad2:	19 f7       	brne	.-58     	; 0x1a9a <midi_input_callbacks+0x1f0>
    1ad4:	e8 cf       	rjmp	.-48     	; 0x1aa6 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	ef 90       	pop	r14
    1ae8:	df 90       	pop	r13
    1aea:	cf 90       	pop	r12
    1aec:	bf 90       	pop	r11
    1aee:	af 90       	pop	r10
    1af0:	08 95       	ret

00001af2 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	7c 01       	movw	r14, r24
    1afe:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    1b00:	86 2f       	mov	r24, r22
    1b02:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <midi_is_realtime>
    1b06:	88 23       	and	r24, r24
    1b08:	91 f0       	breq	.+36     	; 0x1b2e <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1b0a:	d7 01       	movw	r26, r14
    1b0c:	95 96       	adiw	r26, 0x25	; 37
    1b0e:	dc 91       	ld	r29, X
    1b10:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	95 96       	adiw	r26, 0x25	; 37
    1b16:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    1b18:	c7 01       	movw	r24, r14
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	4c 2f       	mov	r20, r28
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	00 e0       	ldi	r16, 0x00	; 0
    1b24:	0e 94 55 0c 	call	0x18aa	; 0x18aa <midi_input_callbacks>
    device->input_state = state;
    1b28:	f7 01       	movw	r30, r14
    1b2a:	d5 a3       	lds	r29, 0x55
    1b2c:	b7 c0       	rjmp	.+366    	; 0x1c9c <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    1b2e:	8c 2f       	mov	r24, r28
    1b30:	0e 94 ee 09 	call	0x13dc	; 0x13dc <midi_is_statusbyte>
    1b34:	88 23       	and	r24, r24
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <midi_process_byte+0x48>
    1b38:	73 c0       	rjmp	.+230    	; 0x1c20 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1b3a:	d7 01       	movw	r26, r14
    1b3c:	95 96       	adiw	r26, 0x25	; 37
    1b3e:	8c 91       	ld	r24, X
    1b40:	95 97       	sbiw	r26, 0x25	; 37
    1b42:	84 30       	cpi	r24, 0x04	; 4
    1b44:	49 f0       	breq	.+18     	; 0x1b58 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    1b46:	92 96       	adiw	r26, 0x22	; 34
    1b48:	cc 93       	st	X, r28
    1b4a:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	97 96       	adiw	r26, 0x27	; 39
    1b52:	9c 93       	st	X, r25
    1b54:	8e 93       	st	-X, r24
    1b56:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    1b58:	8c 2f       	mov	r24, r28
    1b5a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <midi_packet_length>
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	41 f0       	breq	.+16     	; 0x1b72 <midi_process_byte+0x80>
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	00 f1       	brcs	.+64     	; 0x1ba6 <midi_process_byte+0xb4>
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	a1 f0       	breq	.+40     	; 0x1b92 <midi_process_byte+0xa0>
    1b6a:	83 30       	cpi	r24, 0x03	; 3
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <midi_process_byte+0x7e>
    1b6e:	4f c0       	rjmp	.+158    	; 0x1c0e <midi_process_byte+0x11c>
    1b70:	14 c0       	rjmp	.+40     	; 0x1b9a <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	f7 01       	movw	r30, r14
    1b76:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    1b78:	c7 01       	movw	r24, r14
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	4c 2f       	mov	r20, r28
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	00 e0       	ldi	r16, 0x00	; 0
    1b84:	0e 94 55 0c 	call	0x18aa	; 0x18aa <midi_input_callbacks>
        device->input_state = IDLE;
    1b88:	d7 01       	movw	r26, r14
    1b8a:	95 96       	adiw	r26, 0x25	; 37
    1b8c:	1c 92       	st	X, r1
    1b8e:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1b90:	85 c0       	rjmp	.+266    	; 0x1c9c <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	f7 01       	movw	r30, r14
    1b96:	85 a3       	lds	r24, 0x55
        break;
    1b98:	81 c0       	rjmp	.+258    	; 0x1c9c <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1b9a:	83 e0       	ldi	r24, 0x03	; 3
    1b9c:	d7 01       	movw	r26, r14
    1b9e:	95 96       	adiw	r26, 0x25	; 37
    1ba0:	8c 93       	st	X, r24
    1ba2:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1ba4:	7b c0       	rjmp	.+246    	; 0x1c9c <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    1ba6:	c0 3f       	cpi	r28, 0xF0	; 240
    1ba8:	19 f0       	breq	.+6      	; 0x1bb0 <midi_process_byte+0xbe>
    1baa:	c7 3f       	cpi	r28, 0xF7	; 247
    1bac:	59 f5       	brne	.+86     	; 0x1c04 <midi_process_byte+0x112>
    1bae:	0a c0       	rjmp	.+20     	; 0x1bc4 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1bb0:	84 e0       	ldi	r24, 0x04	; 4
    1bb2:	f7 01       	movw	r30, r14
    1bb4:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    1bb6:	80 ef       	ldi	r24, 0xF0	; 240
    1bb8:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	97 a3       	lds	r25, 0x57
    1bc0:	86 a3       	lds	r24, 0x56
            break;
    1bc2:	6c c0       	rjmp	.+216    	; 0x1c9c <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1bc4:	d7 01       	movw	r26, r14
    1bc6:	96 96       	adiw	r26, 0x26	; 38
    1bc8:	2d 91       	ld	r18, X+
    1bca:	3c 91       	ld	r19, X
    1bcc:	97 97       	sbiw	r26, 0x27	; 39
    1bce:	c9 01       	movw	r24, r18
    1bd0:	63 e0       	ldi	r22, 0x03	; 3
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
    1bd8:	f7 01       	movw	r30, r14
    1bda:	e8 0f       	add	r30, r24
    1bdc:	f9 1f       	adc	r31, r25
    1bde:	87 ef       	ldi	r24, 0xF7	; 247
    1be0:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    1be2:	b9 01       	movw	r22, r18
    1be4:	6f 5f       	subi	r22, 0xFF	; 255
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	f7 01       	movw	r30, r14
    1bea:	77 a3       	lds	r23, 0x57
    1bec:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1bee:	c7 01       	movw	r24, r14
    1bf0:	42 a1       	lds	r20, 0x42
    1bf2:	23 a1       	lds	r18, 0x43
    1bf4:	04 a1       	lds	r16, 0x44
    1bf6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1bfa:	d7 01       	movw	r26, r14
    1bfc:	95 96       	adiw	r26, 0x25	; 37
    1bfe:	1c 92       	st	X, r1
    1c00:	95 97       	sbiw	r26, 0x25	; 37
            break;
    1c02:	4c c0       	rjmp	.+152    	; 0x1c9c <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    1c04:	f7 01       	movw	r30, r14
    1c06:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    1c08:	17 a2       	lds	r17, 0x97
    1c0a:	16 a2       	lds	r17, 0x96
    1c0c:	47 c0       	rjmp	.+142    	; 0x1c9c <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    1c0e:	d7 01       	movw	r26, r14
    1c10:	95 96       	adiw	r26, 0x25	; 37
    1c12:	1c 92       	st	X, r1
    1c14:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    1c16:	97 96       	adiw	r26, 0x27	; 39
    1c18:	1c 92       	st	X, r1
    1c1a:	1e 92       	st	-X, r1
    1c1c:	96 97       	sbiw	r26, 0x26	; 38
        break;
    1c1e:	3e c0       	rjmp	.+124    	; 0x1c9c <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    1c20:	f7 01       	movw	r30, r14
    1c22:	25 a1       	lds	r18, 0x45
    1c24:	22 23       	and	r18, r18
    1c26:	d1 f1       	breq	.+116    	; 0x1c9c <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1c28:	06 a0       	lds	r16, 0x86
    1c2a:	f7 a1       	lds	r31, 0x47
    1c2c:	e0 2d       	mov	r30, r0
    1c2e:	cf 01       	movw	r24, r30
    1c30:	63 e0       	ldi	r22, 0x03	; 3
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
    1c38:	ac 01       	movw	r20, r24
    1c3a:	8e 0d       	add	r24, r14
    1c3c:	9f 1d       	adc	r25, r15
    1c3e:	dc 01       	movw	r26, r24
    1c40:	92 96       	adiw	r26, 0x22	; 34
    1c42:	cc 93       	st	X, r28
    1c44:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1c46:	bf 01       	movw	r22, r30
    1c48:	6f 5f       	subi	r22, 0xFF	; 255
    1c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4c:	f7 01       	movw	r30, r14
    1c4e:	77 a3       	lds	r23, 0x57
    1c50:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    1c52:	41 30       	cpi	r20, 0x01	; 1
    1c54:	51 05       	cpc	r21, r1
    1c56:	91 f0       	breq	.+36     	; 0x1c7c <midi_process_byte+0x18a>
    1c58:	42 30       	cpi	r20, 0x02	; 2
    1c5a:	51 05       	cpc	r21, r1
    1c5c:	f9 f4       	brne	.+62     	; 0x1c9c <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1c5e:	c7 01       	movw	r24, r14
    1c60:	42 a1       	lds	r20, 0x42
    1c62:	23 a1       	lds	r18, 0x43
    1c64:	04 a1       	lds	r16, 0x44
    1c66:	0e 94 55 0c 	call	0x18aa	; 0x18aa <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1c6a:	f7 01       	movw	r30, r14
    1c6c:	85 a1       	lds	r24, 0x45
    1c6e:	84 30       	cpi	r24, 0x04	; 4
    1c70:	a9 f0       	breq	.+42     	; 0x1c9c <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	97 a3       	lds	r25, 0x57
    1c78:	86 a3       	lds	r24, 0x56
    1c7a:	10 c0       	rjmp	.+32     	; 0x1c9c <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1c7c:	22 30       	cpi	r18, 0x02	; 2
    1c7e:	71 f4       	brne	.+28     	; 0x1c9c <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1c80:	c7 01       	movw	r24, r14
    1c82:	42 a1       	lds	r20, 0x42
    1c84:	23 a1       	lds	r18, 0x43
    1c86:	00 e0       	ldi	r16, 0x00	; 0
    1c88:	0e 94 55 0c 	call	0x18aa	; 0x18aa <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1c8c:	f7 01       	movw	r30, r14
    1c8e:	85 a1       	lds	r24, 0x45
    1c90:	84 30       	cpi	r24, 0x04	; 4
    1c92:	21 f0       	breq	.+8      	; 0x1c9c <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	97 a3       	lds	r25, 0x57
    1c9a:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	08 95       	ret

00001ca8 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1ca8:	cf 92       	push	r12
    1caa:	df 92       	push	r13
    1cac:	ef 92       	push	r14
    1cae:	ff 92       	push	r15
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1cba:	dc 01       	movw	r26, r24
    1cbc:	90 96       	adiw	r26, 0x20	; 32
    1cbe:	ed 91       	ld	r30, X+
    1cc0:	fc 91       	ld	r31, X
    1cc2:	91 97       	sbiw	r26, 0x21	; 33
    1cc4:	30 97       	sbiw	r30, 0x00	; 0
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1cc8:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1cca:	0f 2e       	mov	r0, r31
    1ccc:	f8 ee       	ldi	r31, 0xE8	; 232
    1cce:	ef 2e       	mov	r14, r31
    1cd0:	ff 24       	eor	r15, r15
    1cd2:	f0 2d       	mov	r31, r0
    1cd4:	ec 0c       	add	r14, r12
    1cd6:	fd 1c       	adc	r15, r13
    1cd8:	c7 01       	movw	r24, r14
    1cda:	0e 94 a9 09 	call	0x1352	; 0x1352 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1cde:	c8 2f       	mov	r28, r24
    1ce0:	d0 e0       	ldi	r29, 0x00	; 0
    1ce2:	20 97       	sbiw	r28, 0x00	; 0
    1ce4:	99 f0       	breq	.+38     	; 0x1d0c <midi_device_process+0x64>
    1ce6:	00 e0       	ldi	r16, 0x00	; 0
    1ce8:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1cea:	c7 01       	movw	r24, r14
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	0e 94 be 09 	call	0x137c	; 0x137c <bytequeue_get>
    1cf2:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1cf4:	c6 01       	movw	r24, r12
    1cf6:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1cfa:	c7 01       	movw	r24, r14
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	0e 94 cf 09 	call	0x139e	; 0x139e <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1d02:	0f 5f       	subi	r16, 0xFF	; 255
    1d04:	1f 4f       	sbci	r17, 0xFF	; 255
    1d06:	0c 17       	cp	r16, r28
    1d08:	1d 07       	cpc	r17, r29
    1d0a:	78 f3       	brcs	.-34     	; 0x1cea <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	df 90       	pop	r13
    1d1a:	cf 90       	pop	r12
    1d1c:	08 95       	ret

00001d1e <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    1d1e:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    1d20:	67 e0       	ldi	r22, 0x07	; 7
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
    1d28:	48 2f       	mov	r20, r24
   if (remainder)
    1d2a:	88 23       	and	r24, r24
    1d2c:	81 f0       	breq	.+32     	; 0x1d4e <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    1d2e:	c9 01       	movw	r24, r18
    1d30:	67 e0       	ldi	r22, 0x07	; 7
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
    1d38:	cb 01       	movw	r24, r22
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	01 96       	adiw	r24, 0x01	; 1
    1d48:	84 0f       	add	r24, r20
    1d4a:	91 1d       	adc	r25, r1
    1d4c:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    1d4e:	c9 01       	movw	r24, r18
    1d50:	67 e0       	ldi	r22, 0x07	; 7
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
    1d58:	cb 01       	movw	r24, r22
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
}
    1d66:	08 95       	ret

00001d68 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    1d68:	48 2f       	mov	r20, r24
    1d6a:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    1d6c:	a1 f0       	breq	.+40     	; 0x1d96 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    1d6e:	9c 01       	movw	r18, r24
    1d70:	36 95       	lsr	r19
    1d72:	27 95       	ror	r18
    1d74:	36 95       	lsr	r19
    1d76:	27 95       	ror	r18
    1d78:	36 95       	lsr	r19
    1d7a:	27 95       	ror	r18
    1d7c:	c9 01       	movw	r24, r18
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	82 1b       	sub	r24, r18
    1d8c:	93 0b       	sbc	r25, r19
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	84 0f       	add	r24, r20
    1d92:	91 1d       	adc	r25, r1
    1d94:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    1d96:	9c 01       	movw	r18, r24
    1d98:	36 95       	lsr	r19
    1d9a:	27 95       	ror	r18
    1d9c:	36 95       	lsr	r19
    1d9e:	27 95       	ror	r18
    1da0:	36 95       	lsr	r19
    1da2:	27 95       	ror	r18
    1da4:	c9 01       	movw	r24, r18
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	82 1b       	sub	r24, r18
    1db4:	93 0b       	sbc	r25, r19
}
    1db6:	08 95       	ret

00001db8 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1db8:	2f 92       	push	r2
    1dba:	3f 92       	push	r3
    1dbc:	4f 92       	push	r4
    1dbe:	5f 92       	push	r5
    1dc0:	6f 92       	push	r6
    1dc2:	7f 92       	push	r7
    1dc4:	8f 92       	push	r8
    1dc6:	9f 92       	push	r9
    1dc8:	af 92       	push	r10
    1dca:	bf 92       	push	r11
    1dcc:	cf 92       	push	r12
    1dce:	df 92       	push	r13
    1dd0:	ef 92       	push	r14
    1dd2:	ff 92       	push	r15
    1dd4:	0f 93       	push	r16
    1dd6:	1f 93       	push	r17
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <sysex_encode+0x26>
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <sysex_encode+0x28>
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <sysex_encode+0x2a>
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	1c 01       	movw	r2, r24
    1de8:	7a 83       	std	Y+2, r23	; 0x02
    1dea:	69 83       	std	Y+1, r22	; 0x01
    1dec:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    1dee:	ca 01       	movw	r24, r20
    1df0:	67 e0       	ldi	r22, 0x07	; 7
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
    1df8:	2b 01       	movw	r4, r22
    1dfa:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    1dfc:	61 15       	cp	r22, r1
    1dfe:	71 05       	cpc	r23, r1
    1e00:	b1 f1       	breq	.+108    	; 0x1e6e <sysex_encode+0xb6>
    1e02:	81 01       	movw	r16, r2
    1e04:	e9 80       	ldd	r14, Y+1	; 0x01
    1e06:	fa 80       	ldd	r15, Y+2	; 0x02
    1e08:	cc 24       	eor	r12, r12
    1e0a:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1e0c:	88 24       	eor	r8, r8
    1e0e:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1e10:	1e 83       	std	Y+6, r17	; 0x06
    1e12:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    1e14:	f8 01       	movw	r30, r16
    1e16:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1e18:	fc 82       	std	Y+4, r15	; 0x04
    1e1a:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1e1c:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    1e1e:	ab 81       	ldd	r26, Y+3	; 0x03
    1e20:	bc 81       	ldd	r27, Y+4	; 0x04
    1e22:	2d 91       	ld	r18, X+
    1e24:	bc 83       	std	Y+4, r27	; 0x04
    1e26:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    1e28:	4f 5f       	subi	r20, 0xFF	; 255
    1e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2c:	82 2f       	mov	r24, r18
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	80 78       	andi	r24, 0x80	; 128
    1e32:	90 70       	andi	r25, 0x00	; 0
    1e34:	bc 01       	movw	r22, r24
    1e36:	04 2e       	mov	r0, r20
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <sysex_encode+0x86>
    1e3a:	75 95       	asr	r23
    1e3c:	67 95       	ror	r22
    1e3e:	0a 94       	dec	r0
    1e40:	e2 f7       	brpl	.-8      	; 0x1e3a <sysex_encode+0x82>
    1e42:	ad 81       	ldd	r26, Y+5	; 0x05
    1e44:	be 81       	ldd	r27, Y+6	; 0x06
    1e46:	8c 91       	ld	r24, X
    1e48:	86 2b       	or	r24, r22
    1e4a:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1e4c:	2f 77       	andi	r18, 0x7F	; 127
    1e4e:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1e50:	47 30       	cpi	r20, 0x07	; 7
    1e52:	51 05       	cpc	r21, r1
    1e54:	21 f7       	brne	.-56     	; 0x1e1e <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    1e56:	08 94       	sec
    1e58:	c1 1c       	adc	r12, r1
    1e5a:	d1 1c       	adc	r13, r1
    1e5c:	08 5f       	subi	r16, 0xF8	; 248
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	e7 e0       	ldi	r30, 0x07	; 7
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	ee 0e       	add	r14, r30
    1e66:	ff 1e       	adc	r15, r31
    1e68:	ca 14       	cp	r12, r10
    1e6a:	db 04       	cpc	r13, r11
    1e6c:	89 f6       	brne	.-94     	; 0x1e10 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    1e6e:	c3 01       	movw	r24, r6
    1e70:	67 e0       	ldi	r22, 0x07	; 7
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	0e 94 2e 10 	call	0x205c	; 0x205c <__udivmodhi4>
   if (remainder) {
    1e78:	88 23       	and	r24, r24
    1e7a:	d9 f1       	breq	.+118    	; 0x1ef2 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    1e7c:	82 01       	movw	r16, r4
    1e7e:	00 0f       	add	r16, r16
    1e80:	11 1f       	adc	r17, r17
    1e82:	00 0f       	add	r16, r16
    1e84:	11 1f       	adc	r17, r17
    1e86:	00 0f       	add	r16, r16
    1e88:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    1e8a:	78 01       	movw	r14, r16
    1e8c:	e4 18       	sub	r14, r4
    1e8e:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    1e90:	d1 01       	movw	r26, r2
    1e92:	a0 0f       	add	r26, r16
    1e94:	b1 1f       	adc	r27, r17
    1e96:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    1e98:	68 2f       	mov	r22, r24
    1e9a:	70 e0       	ldi	r23, 0x00	; 0
    1e9c:	61 15       	cp	r22, r1
    1e9e:	71 05       	cpc	r23, r1
    1ea0:	19 f1       	breq	.+70     	; 0x1ee8 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	ee 0e       	add	r14, r30
    1ea8:	ff 1e       	adc	r15, r31
    1eaa:	c8 01       	movw	r24, r16
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	28 0e       	add	r2, r24
    1eb0:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    1eb6:	f7 01       	movw	r30, r14
    1eb8:	41 91       	ld	r20, Z+
    1eba:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    1ebc:	2f 5f       	subi	r18, 0xFF	; 255
    1ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec0:	84 2f       	mov	r24, r20
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	80 78       	andi	r24, 0x80	; 128
    1ec6:	90 70       	andi	r25, 0x00	; 0
    1ec8:	02 2e       	mov	r0, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <sysex_encode+0x118>
    1ecc:	95 95       	asr	r25
    1ece:	87 95       	ror	r24
    1ed0:	0a 94       	dec	r0
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <sysex_encode+0x114>
    1ed4:	9c 91       	ld	r25, X
    1ed6:	89 2b       	or	r24, r25
    1ed8:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1eda:	4f 77       	andi	r20, 0x7F	; 127
    1edc:	f1 01       	movw	r30, r2
    1ede:	41 93       	st	Z+, r20
    1ee0:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    1ee2:	26 17       	cp	r18, r22
    1ee4:	37 07       	cpc	r19, r23
    1ee6:	38 f3       	brcs	.-50     	; 0x1eb6 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    1ee8:	c8 01       	movw	r24, r16
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	86 0f       	add	r24, r22
    1eee:	97 1f       	adc	r25, r23
    1ef0:	07 c0       	rjmp	.+14     	; 0x1f00 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    1ef2:	c2 01       	movw	r24, r4
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
   }
}
    1f00:	26 96       	adiw	r28, 0x06	; 6
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	bf 90       	pop	r11
    1f1e:	af 90       	pop	r10
    1f20:	9f 90       	pop	r9
    1f22:	8f 90       	pop	r8
    1f24:	7f 90       	pop	r7
    1f26:	6f 90       	pop	r6
    1f28:	5f 90       	pop	r5
    1f2a:	4f 90       	pop	r4
    1f2c:	3f 90       	pop	r3
    1f2e:	2f 90       	pop	r2
    1f30:	08 95       	ret

00001f32 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1f32:	6f 92       	push	r6
    1f34:	7f 92       	push	r7
    1f36:	8f 92       	push	r8
    1f38:	9f 92       	push	r9
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	3c 01       	movw	r6, r24
    1f50:	4b 01       	movw	r8, r22
    1f52:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    1f54:	42 30       	cpi	r20, 0x02	; 2
    1f56:	51 05       	cpc	r21, r1
    1f58:	08 f4       	brcc	.+2      	; 0x1f5c <sysex_decode+0x2a>
    1f5a:	6f c0       	rjmp	.+222    	; 0x203a <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    1f5c:	7a 01       	movw	r14, r20
    1f5e:	f6 94       	lsr	r15
    1f60:	e7 94       	ror	r14
    1f62:	f6 94       	lsr	r15
    1f64:	e7 94       	ror	r14
    1f66:	f6 94       	lsr	r15
    1f68:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    1f6a:	e1 14       	cp	r14, r1
    1f6c:	f1 04       	cpc	r15, r1
    1f6e:	29 f1       	breq	.+74     	; 0x1fba <sysex_decode+0x88>
    1f70:	eb 01       	movw	r28, r22
    1f72:	b3 01       	movw	r22, r6
    1f74:	00 e0       	ldi	r16, 0x00	; 0
    1f76:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    1f78:	cc 24       	eor	r12, r12
    1f7a:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1f7c:	de 01       	movw	r26, r28
    1f7e:	11 96       	adiw	r26, 0x01	; 1
    1f80:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    1f82:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    1f84:	2d 91       	ld	r18, X+
    1f86:	2f 77       	andi	r18, 0x7F	; 127
    1f88:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    1f8a:	4f 5f       	subi	r20, 0xFF	; 255
    1f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8e:	88 81       	ld	r24, Y
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	04 2e       	mov	r0, r20
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <sysex_decode+0x68>
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	0a 94       	dec	r0
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <sysex_decode+0x64>
    1f9e:	80 78       	andi	r24, 0x80	; 128
    1fa0:	28 2b       	or	r18, r24
    1fa2:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    1fa4:	47 30       	cpi	r20, 0x07	; 7
    1fa6:	51 05       	cpc	r21, r1
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    1faa:	0f 5f       	subi	r16, 0xFF	; 255
    1fac:	1f 4f       	sbci	r17, 0xFF	; 255
    1fae:	28 96       	adiw	r28, 0x08	; 8
    1fb0:	69 5f       	subi	r22, 0xF9	; 249
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	0e 15       	cp	r16, r14
    1fb6:	1f 05       	cpc	r17, r15
    1fb8:	09 f7       	brne	.-62     	; 0x1f7c <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    1fba:	5a 2d       	mov	r21, r10
    1fbc:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    1fbe:	99 f1       	breq	.+102    	; 0x2026 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    1fc0:	e7 01       	movw	r28, r14
    1fc2:	cc 0f       	add	r28, r28
    1fc4:	dd 1f       	adc	r29, r29
    1fc6:	cc 0f       	add	r28, r28
    1fc8:	dd 1f       	adc	r29, r29
    1fca:	cc 0f       	add	r28, r28
    1fcc:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    1fce:	8e 01       	movw	r16, r28
    1fd0:	0e 19       	sub	r16, r14
    1fd2:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    1fd4:	65 2f       	mov	r22, r21
    1fd6:	70 e0       	ldi	r23, 0x00	; 0
    1fd8:	61 50       	subi	r22, 0x01	; 1
    1fda:	70 40       	sbci	r23, 0x00	; 0
    1fdc:	f9 f0       	breq	.+62     	; 0x201c <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1fde:	ce 01       	movw	r24, r28
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	d4 01       	movw	r26, r8
    1fe4:	a8 0f       	add	r26, r24
    1fe6:	b9 1f       	adc	r27, r25
    1fe8:	f3 01       	movw	r30, r6
    1fea:	e0 0f       	add	r30, r16
    1fec:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    1ff2:	c8 0d       	add	r28, r8
    1ff4:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    1ff6:	4d 91       	ld	r20, X+
    1ff8:	4f 77       	andi	r20, 0x7F	; 127
    1ffa:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    1ffc:	2f 5f       	subi	r18, 0xFF	; 255
    1ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    2000:	88 81       	ld	r24, Y
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	02 2e       	mov	r0, r18
    2006:	02 c0       	rjmp	.+4      	; 0x200c <sysex_decode+0xda>
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	0a 94       	dec	r0
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <sysex_decode+0xd6>
    2010:	80 78       	andi	r24, 0x80	; 128
    2012:	48 2b       	or	r20, r24
    2014:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2016:	26 17       	cp	r18, r22
    2018:	37 07       	cpc	r19, r23
    201a:	68 f3       	brcs	.-38     	; 0x1ff6 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    201c:	c8 01       	movw	r24, r16
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	85 0f       	add	r24, r21
    2022:	91 1d       	adc	r25, r1
    2024:	0c c0       	rjmp	.+24     	; 0x203e <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    2026:	c7 01       	movw	r24, r14
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	8e 19       	sub	r24, r14
    2036:	9f 09       	sbc	r25, r15
    2038:	02 c0       	rjmp	.+4      	; 0x203e <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	ef 90       	pop	r14
    204a:	df 90       	pop	r13
    204c:	cf 90       	pop	r12
    204e:	bf 90       	pop	r11
    2050:	af 90       	pop	r10
    2052:	9f 90       	pop	r9
    2054:	8f 90       	pop	r8
    2056:	7f 90       	pop	r7
    2058:	6f 90       	pop	r6
    205a:	08 95       	ret

0000205c <__udivmodhi4>:
    205c:	aa 1b       	sub	r26, r26
    205e:	bb 1b       	sub	r27, r27
    2060:	51 e1       	ldi	r21, 0x11	; 17
    2062:	07 c0       	rjmp	.+14     	; 0x2072 <__udivmodhi4_ep>

00002064 <__udivmodhi4_loop>:
    2064:	aa 1f       	adc	r26, r26
    2066:	bb 1f       	adc	r27, r27
    2068:	a6 17       	cp	r26, r22
    206a:	b7 07       	cpc	r27, r23
    206c:	10 f0       	brcs	.+4      	; 0x2072 <__udivmodhi4_ep>
    206e:	a6 1b       	sub	r26, r22
    2070:	b7 0b       	sbc	r27, r23

00002072 <__udivmodhi4_ep>:
    2072:	88 1f       	adc	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	5a 95       	dec	r21
    2078:	a9 f7       	brne	.-22     	; 0x2064 <__udivmodhi4_loop>
    207a:	80 95       	com	r24
    207c:	90 95       	com	r25
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	08 95       	ret

00002084 <__divmodhi4>:
    2084:	97 fb       	bst	r25, 7
    2086:	09 2e       	mov	r0, r25
    2088:	07 26       	eor	r0, r23
    208a:	0a d0       	rcall	.+20     	; 0x20a0 <__divmodhi4_neg1>
    208c:	77 fd       	sbrc	r23, 7
    208e:	04 d0       	rcall	.+8      	; 0x2098 <__divmodhi4_neg2>
    2090:	e5 df       	rcall	.-54     	; 0x205c <__udivmodhi4>
    2092:	06 d0       	rcall	.+12     	; 0x20a0 <__divmodhi4_neg1>
    2094:	00 20       	and	r0, r0
    2096:	1a f4       	brpl	.+6      	; 0x209e <__divmodhi4_exit>

00002098 <__divmodhi4_neg2>:
    2098:	70 95       	com	r23
    209a:	61 95       	neg	r22
    209c:	7f 4f       	sbci	r23, 0xFF	; 255

0000209e <__divmodhi4_exit>:
    209e:	08 95       	ret

000020a0 <__divmodhi4_neg1>:
    20a0:	f6 f7       	brtc	.-4      	; 0x209e <__divmodhi4_exit>
    20a2:	90 95       	com	r25
    20a4:	81 95       	neg	r24
    20a6:	9f 4f       	sbci	r25, 0xFF	; 255
    20a8:	08 95       	ret

000020aa <memcpy>:
    20aa:	fb 01       	movw	r30, r22
    20ac:	dc 01       	movw	r26, r24
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <memcpy+0xa>
    20b0:	01 90       	ld	r0, Z+
    20b2:	0d 92       	st	X+, r0
    20b4:	41 50       	subi	r20, 0x01	; 1
    20b6:	50 40       	sbci	r21, 0x00	; 0
    20b8:	d8 f7       	brcc	.-10     	; 0x20b0 <memcpy+0x6>
    20ba:	08 95       	ret

000020bc <memmove>:
    20bc:	68 17       	cp	r22, r24
    20be:	79 07       	cpc	r23, r25
    20c0:	68 f4       	brcc	.+26     	; 0x20dc <memmove+0x20>
    20c2:	fb 01       	movw	r30, r22
    20c4:	dc 01       	movw	r26, r24
    20c6:	e4 0f       	add	r30, r20
    20c8:	f5 1f       	adc	r31, r21
    20ca:	a4 0f       	add	r26, r20
    20cc:	b5 1f       	adc	r27, r21
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <memmove+0x18>
    20d0:	02 90       	ld	r0, -Z
    20d2:	0e 92       	st	-X, r0
    20d4:	41 50       	subi	r20, 0x01	; 1
    20d6:	50 40       	sbci	r21, 0x00	; 0
    20d8:	d8 f7       	brcc	.-10     	; 0x20d0 <memmove+0x14>
    20da:	08 95       	ret
    20dc:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <memcpy>

000020e0 <_exit>:
    20e0:	f8 94       	cli

000020e2 <__stop_program>:
    20e2:	ff cf       	rjmp	.-2      	; 0x20e2 <__stop_program>
