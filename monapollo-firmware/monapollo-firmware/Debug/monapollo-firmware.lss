
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003caa  00003d5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003caa  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000215  008002b0  008002b0  00003f0e  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00004584  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00005178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000300  00000000  00000000  000054b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a90  00000000  00000000  000057b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018b0  00000000  00000000  0000c248  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002161  00000000  00000000  0000daf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d8c  00000000  00000000  0000fc5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000199a  00000000  00000000  000109e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002ef2  00000000  00000000  00012382  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00015274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_9>
      28:	0c 94 22 03 	jmp	0x644	; 0x644 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 22 04 	jmp	0x844	; 0x844 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ea ea       	ldi	r30, 0xAA	; 170
      78:	fc e3       	ldi	r31, 0x3C	; 60
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a5 3c       	cpi	r26, 0xC5	; 197
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 57 04 	call	0x8ae	; 0x8ae <main>
      9a:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:
struct arp arp;


//static struct midi_note arp_sequence[24] = {0,0};

void update_arp_sequence(void) {
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
		//arp.current_note = arp.sequence[arp.last_step].note; //temp note to store for release phase
		//arp.step_position = 0; //reset step position
		////return;
	//}

	arp.step_number = gate_buffer*(arp.range + 1);
     15e:	80 91 84 03 	lds	r24, 0x0384
     162:	8f 5f       	subi	r24, 0xFF	; 255
     164:	90 91 b0 02 	lds	r25, 0x02B0
     168:	89 9f       	mul	r24, r25
     16a:	80 2d       	mov	r24, r0
     16c:	11 24       	eor	r1, r1
     16e:	80 93 85 03 	sts	0x0385, r24
     172:	00 e0       	ldi	r16, 0x00	; 0
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     174:	aa 24       	eor	r10, r10
     176:	bb 24       	eor	r11, r11
	
	
	//if ((arp.mode == UP_DOWN) && (arp.range > 0)) arp.step_number = arp.step_number << 1;//twice as many steps
	
	//set arp sequence
	uint8_t step = 0;
     178:	10 e0       	ldi	r17, 0x00	; 0
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     17a:	88 24       	eor	r8, r8
     17c:	99 24       	eor	r9, r9
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     17e:	0f 2e       	mov	r0, r31
     180:	fb e8       	ldi	r31, 0x8B	; 139
     182:	ef 2e       	mov	r14, r31
     184:	f3 e0       	ldi	r31, 0x03	; 3
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
					
				case DOWN:
					
					//int temp_note = int (root_note - (range*12));
					//if (temp_note < 8)  temp_note = root_note; //handle min note out of range here
					arp.sequence[step++].note = root_note - (range*12);
     18a:	0f 2e       	mov	r0, r31
     18c:	f4 e8       	ldi	r31, 0x84	; 132
     18e:	cf 2e       	mov	r12, r31
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	df 2e       	mov	r13, r31
     194:	f0 2d       	mov	r31, r0
     196:	44 c0       	rjmp	.+136    	; 0x220 <update_arp_sequence+0xda>
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     198:	e4 01       	movw	r28, r8
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
     19a:	81 50       	subi	r24, 0x01	; 1
     19c:	8c 1b       	sub	r24, r28
     19e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <get_indexed_note>
     1a2:	28 2f       	mov	r18, r24
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     1a4:	f7 01       	movw	r30, r14
     1a6:	80 81       	ld	r24, Z
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	89 f0       	breq	.+34     	; 0x1ce <update_arp_sequence+0x88>
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	18 f0       	brcs	.+6      	; 0x1b6 <update_arp_sequence+0x70>
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	21 f5       	brne	.+72     	; 0x1fc <update_arp_sequence+0xb6>
     1b4:	18 c0       	rjmp	.+48     	; 0x1e6 <update_arp_sequence+0xa0>
				
				case UP:
				
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1b6:	81 2f       	mov	r24, r17
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	04 96       	adiw	r24, 0x04	; 4
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	8c 0d       	add	r24, r12
     1c2:	9d 1d       	adc	r25, r13
     1c4:	20 0f       	add	r18, r16
     1c6:	fc 01       	movw	r30, r24
     1c8:	20 83       	st	Z, r18
     1ca:	1f 5f       	subi	r17, 0xFF	; 255
				
					break;
     1cc:	17 c0       	rjmp	.+46     	; 0x1fc <update_arp_sequence+0xb6>
					
				case DOWN:
					
					//int temp_note = int (root_note - (range*12));
					//if (temp_note < 8)  temp_note = root_note; //handle min note out of range here
					arp.sequence[step++].note = root_note - (range*12);
     1ce:	81 2f       	mov	r24, r17
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	04 96       	adiw	r24, 0x04	; 4
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	8c 0d       	add	r24, r12
     1da:	9d 1d       	adc	r25, r13
     1dc:	20 1b       	sub	r18, r16
     1de:	fc 01       	movw	r30, r24
     1e0:	20 83       	st	Z, r18
     1e2:	1f 5f       	subi	r17, 0xFF	; 255
					
				
					break;	
     1e4:	0b c0       	rjmp	.+22     	; 0x1fc <update_arp_sequence+0xb6>
					
				case UP_DOWN: //maybe handle this in step_arp_note()
				
					arp.sequence[step++].note = root_note + (range*12);
     1e6:	81 2f       	mov	r24, r17
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	04 96       	adiw	r24, 0x04	; 4
     1ec:	88 0f       	add	r24, r24
     1ee:	99 1f       	adc	r25, r25
     1f0:	8c 0d       	add	r24, r12
     1f2:	9d 1d       	adc	r25, r13
     1f4:	20 0f       	add	r18, r16
     1f6:	fc 01       	movw	r30, r24
     1f8:	20 83       	st	Z, r18
     1fa:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     1fc:	21 96       	adiw	r28, 0x01	; 1
     1fe:	80 91 b0 02 	lds	r24, 0x02B0
     202:	28 2f       	mov	r18, r24
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	c2 17       	cp	r28, r18
     208:	d3 07       	cpc	r29, r19
     20a:	3c f2       	brlt	.-114    	; 0x19a <update_arp_sequence+0x54>
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     20c:	08 94       	sec
     20e:	a1 1c       	adc	r10, r1
     210:	b1 1c       	adc	r11, r1
     212:	04 5f       	subi	r16, 0xF4	; 244
     214:	f6 01       	movw	r30, r12
     216:	80 81       	ld	r24, Z
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	8a 15       	cp	r24, r10
     21c:	9b 05       	cpc	r25, r11
     21e:	34 f0       	brlt	.+12     	; 0x22c <update_arp_sequence+0xe6>
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     220:	80 91 b0 02 	lds	r24, 0x02B0
     224:	88 23       	and	r24, r24
     226:	09 f0       	breq	.+2      	; 0x22a <update_arp_sequence+0xe4>
     228:	b7 cf       	rjmp	.-146    	; 0x198 <update_arp_sequence+0x52>
     22a:	f0 cf       	rjmp	.-32     	; 0x20c <update_arp_sequence+0xc6>
	

		
	
	
}
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	1f 91       	pop	r17
     232:	0f 91       	pop	r16
     234:	ff 90       	pop	r15
     236:	ef 90       	pop	r14
     238:	df 90       	pop	r13
     23a:	cf 90       	pop	r12
     23c:	bf 90       	pop	r11
     23e:	af 90       	pop	r10
     240:	9f 90       	pop	r9
     242:	8f 90       	pop	r8
     244:	08 95       	ret

00000246 <step_arp_note>:

void step_arp_note(void) { //updates arp note according to step position in sequence
	
	arp.current_note = arp.sequence[arp.step_position].note;
     246:	90 91 86 03 	lds	r25, 0x0386
     24a:	a9 2f       	mov	r26, r25
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	14 96       	adiw	r26, 0x04	; 4
     250:	e4 e8       	ldi	r30, 0x84	; 132
     252:	f3 e0       	ldi	r31, 0x03	; 3
     254:	aa 0f       	add	r26, r26
     256:	bb 1f       	adc	r27, r27
     258:	ae 0f       	add	r26, r30
     25a:	bf 1f       	adc	r27, r31
     25c:	8c 91       	ld	r24, X
     25e:	85 83       	std	Z+5, r24	; 0x05
	arp.previous_note = arp.current_note;
     260:	84 83       	std	Z+4, r24	; 0x04
	
	switch (arp.mode) {
     262:	87 81       	ldd	r24, Z+7	; 0x07
     264:	82 30       	cpi	r24, 0x02	; 2
     266:	19 f0       	breq	.+6      	; 0x26e <step_arp_note+0x28>
     268:	83 30       	cpi	r24, 0x03	; 3
     26a:	e9 f4       	brne	.+58     	; 0x2a6 <step_arp_note+0x60>
     26c:	08 95       	ret
		
		case UP_DOWN:
		
			if (arp.direction == UP) {
     26e:	80 91 87 03 	lds	r24, 0x0387
     272:	88 23       	and	r24, r24
     274:	71 f4       	brne	.+28     	; 0x292 <step_arp_note+0x4c>
				
				if (++arp.step_position >= arp.step_number) {
     276:	9f 5f       	subi	r25, 0xFF	; 255
     278:	90 93 86 03 	sts	0x0386, r25
     27c:	80 91 85 03 	lds	r24, 0x0385
     280:	98 17       	cp	r25, r24
     282:	d0 f0       	brcs	.+52     	; 0x2b8 <step_arp_note+0x72>
				
				arp.step_position = arp.step_number - 1;
     284:	81 50       	subi	r24, 0x01	; 1
     286:	80 93 86 03 	sts	0x0386, r24
				arp.direction = DOWN;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	80 93 87 03 	sts	0x0387, r24
     290:	08 95       	ret
				}				
				
			} else {
				
				if (--arp.step_position <= 0) {
     292:	91 50       	subi	r25, 0x01	; 1
     294:	90 93 86 03 	sts	0x0386, r25
     298:	99 23       	and	r25, r25
     29a:	71 f4       	brne	.+28     	; 0x2b8 <step_arp_note+0x72>
					
					arp.step_position = 0;
     29c:	10 92 86 03 	sts	0x0386, r1
					arp.direction = UP;
     2a0:	10 92 87 03 	sts	0x0387, r1
     2a4:	08 95       	ret
		
			break;
			
		default:
		
			if (++arp.step_position >= arp.step_number) arp.step_position  = 0;//reset step position when at end of sequence 
     2a6:	9f 5f       	subi	r25, 0xFF	; 255
     2a8:	90 93 86 03 	sts	0x0386, r25
     2ac:	80 91 85 03 	lds	r24, 0x0385
     2b0:	98 17       	cp	r25, r24
     2b2:	10 f0       	brcs	.+4      	; 0x2b8 <step_arp_note+0x72>
     2b4:	10 92 86 03 	sts	0x0386, r1
     2b8:	08 95       	ret

000002ba <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     2ba:	e8 2f       	mov	r30, r24
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	e8 54       	subi	r30, 0x48	; 72
     2c4:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     2c6:	80 81       	ld	r24, Z
     2c8:	08 95       	ret

000002ca <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.clock_source == OFF) {
     2ca:	80 91 8a 03 	lds	r24, 0x038A
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	19 f4       	brne	.+6      	; 0x2d8 <get_current_note+0xe>
		
		note = current_note;
     2d2:	80 91 b1 02 	lds	r24, 0x02B1
     2d6:	08 95       	ret

		
	} else {
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     2d8:	80 91 89 03 	lds	r24, 0x0389
		//if (gate_buffer) note = arp.current_note;
		
	}
	return note;
	
}
     2dc:	08 95       	ret

000002de <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	18 2f       	mov	r17, r24
     2e8:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     2ea:	8a eb       	ldi	r24, 0xBA	; 186
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	ec 01       	movw	r28, r24
     2f0:	22 97       	sbiw	r28, 0x02	; 2
     2f2:	be 01       	movw	r22, r28
     2f4:	4e e0       	ldi	r20, 0x0E	; 14
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     2fc:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     2fe:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     300:	10 93 b1 02 	sts	0x02B1, r17
	
} 
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	08 95       	ret

0000030e <remove_note>:
void remove_note(uint8_t note){
     30e:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     310:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     314:	c8 17       	cp	r28, r24
     316:	41 f0       	breq	.+16     	; 0x328 <remove_note+0x1a>
     318:	ea eb       	ldi	r30, 0xBA	; 186
     31a:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     31c:	41 e0       	ldi	r20, 0x01	; 1
     31e:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     320:	90 81       	ld	r25, Z
     322:	98 17       	cp	r25, r24
     324:	59 f4       	brne	.+22     	; 0x33c <remove_note+0x2e>
     326:	02 c0       	rjmp	.+4      	; 0x32c <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     32c:	fa 01       	movw	r30, r20
     32e:	ee 0f       	add	r30, r30
     330:	ff 1f       	adc	r31, r31
     332:	e8 54       	subi	r30, 0x48	; 72
     334:	fe 4f       	sbci	r31, 0xFE	; 254
     336:	8f ef       	ldi	r24, 0xFF	; 255
     338:	80 83       	st	Z, r24
			free_slot = i;
			break;
     33a:	07 c0       	rjmp	.+14     	; 0x34a <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     33c:	4f 5f       	subi	r20, 0xFF	; 255
     33e:	5f 4f       	sbci	r21, 0xFF	; 255
     340:	32 96       	adiw	r30, 0x02	; 2
     342:	48 30       	cpi	r20, 0x08	; 8
     344:	51 05       	cpc	r21, r1
     346:	61 f7       	brne	.-40     	; 0x320 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     348:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	ca 01       	movw	r24, r20
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	bc 01       	movw	r22, r24
     354:	66 54       	subi	r22, 0x46	; 70
     356:	7e 4f       	sbci	r23, 0xFE	; 254
     358:	40 95       	com	r20
     35a:	50 95       	com	r21
     35c:	48 5f       	subi	r20, 0xF8	; 248
     35e:	5f 4f       	sbci	r21, 0xFF	; 255
     360:	44 0f       	add	r20, r20
     362:	55 1f       	adc	r21, r21
     364:	88 54       	subi	r24, 0x48	; 72
     366:	9e 4f       	sbci	r25, 0xFE	; 254
     368:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <memmove>
	note_pool[7].note = EMPTY;	
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     372:	80 91 b8 01 	lds	r24, 0x01B8
     376:	8f 3f       	cpi	r24, 0xFF	; 255
     378:	19 f4       	brne	.+6      	; 0x380 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     37a:	c0 93 b1 02 	sts	0x02B1, r28
     37e:	02 c0       	rjmp	.+4      	; 0x384 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     380:	80 93 b1 02 	sts	0x02B1, r24

	}	
	
}
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     388:	8d e0       	ldi	r24, 0x0D	; 13
     38a:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     38e:	82 e0       	ldi	r24, 0x02	; 2
     390:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     394:	08 95       	ret

00000396 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     396:	90 93 89 00 	sts	0x0089, r25
     39a:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     39e:	20 91 84 00 	lds	r18, 0x0084
     3a2:	30 91 85 00 	lds	r19, 0x0085
     3a6:	82 17       	cp	r24, r18
     3a8:	93 07       	cpc	r25, r19
     3aa:	28 f4       	brcc	.+10     	; 0x3b6 <update_clock_rate+0x20>
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	90 93 85 00 	sts	0x0085, r25
     3b2:	80 93 84 00 	sts	0x0084, r24
     3b6:	08 95       	ret

000003b8 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     3b8:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     3ba:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     3bc:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     3be:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     3c0:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     3c2:	8c 91       	ld	r24, X
     3c4:	87 70       	andi	r24, 0x07	; 7
     3c6:	82 b9       	out	0x02, r24	; 2
     3c8:	66 e0       	ldi	r22, 0x06	; 6
     3ca:	6a 95       	dec	r22
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <set_control_voltage+0x12>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     3d0:	ea ed       	ldi	r30, 0xDA	; 218
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	40 81       	ld	r20, Z
     3d6:	8c 91       	ld	r24, X
     3d8:	86 95       	lsr	r24
     3da:	86 95       	lsr	r24
     3dc:	86 95       	lsr	r24
     3de:	87 70       	andi	r24, 0x07	; 7
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	b9 01       	movw	r22, r18
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <set_control_voltage+0x34>
     3e8:	66 0f       	add	r22, r22
     3ea:	77 1f       	adc	r23, r23
     3ec:	8a 95       	dec	r24
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <set_control_voltage+0x30>
     3f0:	cb 01       	movw	r24, r22
     3f2:	84 2b       	or	r24, r20
     3f4:	80 83       	st	Z, r24
     3f6:	76 e0       	ldi	r23, 0x06	; 6
     3f8:	7a 95       	dec	r23
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <set_control_voltage+0x40>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     3fe:	80 81       	ld	r24, Z
     400:	9c 91       	ld	r25, X
     402:	96 95       	lsr	r25
     404:	96 95       	lsr	r25
     406:	96 95       	lsr	r25
     408:	97 70       	andi	r25, 0x07	; 7
     40a:	02 c0       	rjmp	.+4      	; 0x410 <set_control_voltage+0x58>
     40c:	22 0f       	add	r18, r18
     40e:	33 1f       	adc	r19, r19
     410:	9a 95       	dec	r25
     412:	e2 f7       	brpl	.-8      	; 0x40c <set_control_voltage+0x54>
     414:	20 95       	com	r18
     416:	28 23       	and	r18, r24
     418:	20 83       	st	Z, r18
	
}	
     41a:	08 95       	ret

0000041c <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     41c:	83 b3       	in	r24, 0x13	; 19
     41e:	83 60       	ori	r24, 0x03	; 3
     420:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     426:	97 b1       	in	r25, 0x07	; 7
     428:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     42a:	e9 ed       	ldi	r30, 0xD9	; 217
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	8f 60       	ori	r24, 0x0F	; 15
     432:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     434:	ea ed       	ldi	r30, 0xDA	; 218
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	80 7f       	andi	r24, 0xF0	; 240
     43c:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     43e:	84 b3       	in	r24, 0x14	; 20
     440:	83 60       	ori	r24, 0x03	; 3
     442:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     444:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     446:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     448:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     44a:	a0 9a       	sbi	0x14, 0	; 20
}
     44c:	08 95       	ret

0000044e <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	2e 97       	sbiw	r28, 0x0e	; 14
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     466:	28 e0       	ldi	r18, 0x08	; 8
     468:	29 83       	std	Y+1, r18	; 0x01
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	2a 83       	std	Y+2, r18	; 0x02
     46e:	22 e0       	ldi	r18, 0x02	; 2
     470:	2b 83       	std	Y+3, r18	; 0x03
     472:	24 e0       	ldi	r18, 0x04	; 4
     474:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     476:	de 01       	movw	r26, r28
     478:	15 96       	adiw	r26, 0x05	; 5
     47a:	e7 ee       	ldi	r30, 0xE7	; 231
     47c:	f1 e0       	ldi	r31, 0x01	; 1
     47e:	2a e0       	ldi	r18, 0x0A	; 10
     480:	01 90       	ld	r0, Z+
     482:	0d 92       	st	X+, r0
     484:	21 50       	subi	r18, 0x01	; 1
     486:	e1 f7       	brne	.-8      	; 0x480 <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     488:	2f ef       	ldi	r18, 0xFF	; 255
     48a:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     48c:	ea ed       	ldi	r30, 0xDA	; 218
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	20 81       	ld	r18, Z
     492:	20 61       	ori	r18, 0x10	; 16
     494:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     496:	20 81       	ld	r18, Z
     498:	2f 7e       	andi	r18, 0xEF	; 239
     49a:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     49c:	06 2f       	mov	r16, r22
     49e:	10 e0       	ldi	r17, 0x00	; 0
     4a0:	de 01       	movw	r26, r28
     4a2:	a0 0f       	add	r26, r16
     4a4:	b1 1f       	adc	r27, r17
     4a6:	11 96       	adiw	r26, 0x01	; 1
     4a8:	2c 91       	ld	r18, X
     4aa:	11 97       	sbiw	r26, 0x01	; 1
     4ac:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     4ae:	20 81       	ld	r18, Z
     4b0:	20 62       	ori	r18, 0x20	; 32
     4b2:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     4b4:	20 81       	ld	r18, Z
     4b6:	2f 7d       	andi	r18, 0xDF	; 223
     4b8:	20 83       	st	Z, r18
     4ba:	48 2f       	mov	r20, r24
     4bc:	59 2f       	mov	r21, r25
     4be:	87 e2       	ldi	r24, 0x27	; 39
     4c0:	40 31       	cpi	r20, 0x10	; 16
     4c2:	58 07       	cpc	r21, r24
     4c4:	10 f0       	brcs	.+4      	; 0x4ca <display_dec+0x7c>
     4c6:	4f e0       	ldi	r20, 0x0F	; 15
     4c8:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     4ca:	ca 01       	movw	r24, r20
     4cc:	96 95       	lsr	r25
     4ce:	87 95       	ror	r24
     4d0:	96 95       	lsr	r25
     4d2:	87 95       	ror	r24
     4d4:	9a 01       	movw	r18, r20
     4d6:	36 95       	lsr	r19
     4d8:	27 95       	ror	r18
     4da:	28 0f       	add	r18, r24
     4dc:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     4de:	c9 01       	movw	r24, r18
     4e0:	92 95       	swap	r25
     4e2:	82 95       	swap	r24
     4e4:	8f 70       	andi	r24, 0x0F	; 15
     4e6:	89 27       	eor	r24, r25
     4e8:	9f 70       	andi	r25, 0x0F	; 15
     4ea:	89 27       	eor	r24, r25
     4ec:	82 0f       	add	r24, r18
     4ee:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     4f0:	29 2f       	mov	r18, r25
     4f2:	33 27       	eor	r19, r19
     4f4:	82 0f       	add	r24, r18
     4f6:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     4f8:	96 95       	lsr	r25
     4fa:	87 95       	ror	r24
     4fc:	96 95       	lsr	r25
     4fe:	87 95       	ror	r24
     500:	96 95       	lsr	r25
     502:	87 95       	ror	r24
	r = number - q2 * 10;
     504:	28 2f       	mov	r18, r24
     506:	22 0f       	add	r18, r18
     508:	32 2f       	mov	r19, r18
     50a:	33 0f       	add	r19, r19
     50c:	33 0f       	add	r19, r19
     50e:	23 0f       	add	r18, r19
     510:	e4 2f       	mov	r30, r20
     512:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 30       	cpi	r30, 0x0A	; 10
     51a:	10 f4       	brcc	.+4      	; 0x520 <display_dec+0xd2>
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	68 0f       	add	r22, r24
     522:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     524:	9b 01       	movw	r18, r22
     526:	36 95       	lsr	r19
     528:	27 95       	ror	r18
     52a:	36 95       	lsr	r19
     52c:	27 95       	ror	r18
     52e:	ab 01       	movw	r20, r22
     530:	56 95       	lsr	r21
     532:	47 95       	ror	r20
     534:	24 0f       	add	r18, r20
     536:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     538:	c9 01       	movw	r24, r18
     53a:	92 95       	swap	r25
     53c:	82 95       	swap	r24
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	89 27       	eor	r24, r25
     542:	9f 70       	andi	r25, 0x0F	; 15
     544:	89 27       	eor	r24, r25
     546:	82 0f       	add	r24, r18
     548:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     54a:	29 2f       	mov	r18, r25
     54c:	33 27       	eor	r19, r19
     54e:	82 0f       	add	r24, r18
     550:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     552:	96 95       	lsr	r25
     554:	87 95       	ror	r24
     556:	96 95       	lsr	r25
     558:	87 95       	ror	r24
     55a:	96 95       	lsr	r25
     55c:	87 95       	ror	r24
	r = qa - q3 * 10;
     55e:	98 2f       	mov	r25, r24
     560:	99 0f       	add	r25, r25
     562:	29 2f       	mov	r18, r25
     564:	22 0f       	add	r18, r18
     566:	22 0f       	add	r18, r18
     568:	92 0f       	add	r25, r18
     56a:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	6a 30       	cpi	r22, 0x0A	; 10
     570:	08 f4       	brcc	.+2      	; 0x574 <display_dec+0x126>
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	89 0f       	add	r24, r25
	tens_place = rem[r];
     576:	41 ef       	ldi	r20, 0xF1	; 241
     578:	51 e0       	ldi	r21, 0x01	; 1
     57a:	da 01       	movw	r26, r20
     57c:	a6 0f       	add	r26, r22
     57e:	b1 1d       	adc	r27, r1
     580:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     582:	28 2f       	mov	r18, r24
     584:	26 95       	lsr	r18
     586:	26 95       	lsr	r18
     588:	98 2f       	mov	r25, r24
     58a:	96 95       	lsr	r25
     58c:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     58e:	29 2f       	mov	r18, r25
     590:	22 95       	swap	r18
     592:	2f 70       	andi	r18, 0x0F	; 15
     594:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     596:	96 95       	lsr	r25
     598:	96 95       	lsr	r25
     59a:	96 95       	lsr	r25
	r = qb - q4 * 10;
     59c:	29 2f       	mov	r18, r25
     59e:	22 0f       	add	r18, r18
     5a0:	62 2f       	mov	r22, r18
     5a2:	66 0f       	add	r22, r22
     5a4:	66 0f       	add	r22, r22
     5a6:	26 0f       	add	r18, r22
     5a8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     5aa:	da 01       	movw	r26, r20
     5ac:	a8 0f       	add	r26, r24
     5ae:	b1 1d       	adc	r27, r1
     5b0:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     5b2:	4e 0f       	add	r20, r30
     5b4:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     5b6:	fa 01       	movw	r30, r20
     5b8:	40 81       	ld	r20, Z
     5ba:	40 93 b4 02 	sts	0x02B4, r20
	digit_index[1] = tens_place;
     5be:	30 93 b5 02 	sts	0x02B5, r19
	digit_index[2] = hunds_place;
     5c2:	20 93 b6 02 	sts	0x02B6, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     5c6:	21 e0       	ldi	r18, 0x01	; 1
     5c8:	8a 30       	cpi	r24, 0x0A	; 10
     5ca:	08 f4       	brcc	.+2      	; 0x5ce <display_dec+0x180>
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     5d0:	90 93 b7 02 	sts	0x02B7, r25

	cathode_byte = dec[digit_index[place]];
     5d4:	f8 01       	movw	r30, r16
     5d6:	ec 54       	subi	r30, 0x4C	; 76
     5d8:	fd 4f       	sbci	r31, 0xFD	; 253
     5da:	80 81       	ld	r24, Z
     5dc:	fe 01       	movw	r30, r28
     5de:	e8 0f       	add	r30, r24
     5e0:	f1 1d       	adc	r31, r1
     5e2:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     5e4:	90 91 07 03 	lds	r25, 0x0307
     5e8:	92 30       	cpi	r25, 0x02	; 2
     5ea:	11 f4       	brne	.+4      	; 0x5f0 <display_dec+0x1a2>
     5ec:	80 62       	ori	r24, 0x20	; 32
     5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     5f0:	91 30       	cpi	r25, 0x01	; 1
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <display_dec+0x1a8>
     5f4:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     5f6:	80 95       	com	r24
     5f8:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     5fa:	ea ed       	ldi	r30, 0xDA	; 218
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	80 61       	ori	r24, 0x10	; 16
     602:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     604:	80 81       	ld	r24, Z
     606:	8f 7e       	andi	r24, 0xEF	; 239
     608:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     60a:	2e 96       	adiw	r28, 0x0e	; 14
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	08 95       	ret

00000620 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     620:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     622:	66 23       	and	r22, r22
     624:	69 f4       	brne	.+26     	; 0x640 <update_display+0x20>

		
			
		display_dec(number, place);
     626:	c0 91 b8 02 	lds	r28, 0x02B8
     62a:	6c 2f       	mov	r22, r28
     62c:	0e 94 27 02 	call	0x44e	; 0x44e <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     630:	8c 2f       	mov	r24, r28
     632:	8f 5f       	subi	r24, 0xFF	; 255
     634:	80 93 b8 02 	sts	0x02B8, r24
     638:	c3 30       	cpi	r28, 0x03	; 3
     63a:	11 f4       	brne	.+4      	; 0x640 <update_display+0x20>
		{
			place = 0;
     63c:	10 92 b8 02 	sts	0x02B8, r1
		
		
	}
	
	
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     644:	1f 92       	push	r1
     646:	0f 92       	push	r0
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	0f 92       	push	r0
     64c:	11 24       	eor	r1, r1
     64e:	8f 93       	push	r24
     650:	9f 93       	push	r25
     652:	ef 93       	push	r30
     654:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     656:	80 91 7c 03 	lds	r24, 0x037C
     65a:	81 50       	subi	r24, 0x01	; 1
     65c:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     65e:	80 91 7d 03 	lds	r24, 0x037D
     662:	88 23       	and	r24, r24
     664:	a1 f4       	brne	.+40     	; 0x68e <__vector_10+0x4a>
		count_finished = FALSE;
     666:	10 92 7a 03 	sts	0x037A, r1
		no_overflow = TRUE;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     670:	80 93 7d 03 	sts	0x037D, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     674:	e1 e8       	ldi	r30, 0x81	; 129
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	90 91 7b 03 	lds	r25, 0x037B
     67e:	89 2b       	or	r24, r25
     680:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     682:	ef e6       	ldi	r30, 0x6F	; 111
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	81 60       	ori	r24, 0x01	; 1
     68a:	80 83       	st	Z, r24
     68c:	11 c0       	rjmp	.+34     	; 0x6b0 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     68e:	e4 e8       	ldi	r30, 0x84	; 132
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	90 93 79 03 	sts	0x0379, r25
     69a:	80 93 78 03 	sts	0x0378, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     69e:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 7a 03 	sts	0x037A, r24
		period_counter = 0;
     6a8:	10 92 7d 03 	sts	0x037D, r1
		TCNT1 = 0; //reset timer/counter 1
     6ac:	11 82       	std	Z+1, r1	; 0x01
     6ae:	10 82       	st	Z, r1
	}
	
	
	
	
}
     6b0:	ff 91       	pop	r31
     6b2:	ef 91       	pop	r30
     6b4:	9f 91       	pop	r25
     6b6:	8f 91       	pop	r24
     6b8:	0f 90       	pop	r0
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	0f 90       	pop	r0
     6be:	1f 90       	pop	r1
     6c0:	18 95       	reti

000006c2 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     6c2:	1f 92       	push	r1
     6c4:	0f 92       	push	r0
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	0f 92       	push	r0
     6ca:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     6cc:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     6d0:	0f 90       	pop	r0
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	0f 90       	pop	r0
     6d6:	1f 90       	pop	r1
     6d8:	18 95       	reti

000006da <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	2f 93       	push	r18
     6e6:	3f 93       	push	r19
     6e8:	4f 93       	push	r20
     6ea:	5f 93       	push	r21
     6ec:	6f 93       	push	r22
     6ee:	7f 93       	push	r23
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	af 93       	push	r26
     6f6:	bf 93       	push	r27
     6f8:	ef 93       	push	r30
     6fa:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     6fc:	80 91 cc 03 	lds	r24, 0x03CC
     700:	86 95       	lsr	r24
     702:	90 91 cd 03 	lds	r25, 0x03CD
     706:	98 17       	cp	r25, r24
     708:	31 f4       	brne	.+12     	; 0x716 <__vector_7+0x3c>
				
		PORTB &= ~ (1<<ARP_SYNC_LED);
     70a:	2f 98       	cbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     70c:	80 91 8a 03 	lds	r24, 0x038A
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	09 f4       	brne	.+2      	; 0x716 <__vector_7+0x3c>
     714:	89 98       	cbi	0x11, 1	; 17
	}	
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     716:	80 91 cd 03 	lds	r24, 0x03CD
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	80 93 cd 03 	sts	0x03CD, r24
     720:	90 91 cc 03 	lds	r25, 0x03CC
     724:	89 17       	cp	r24, r25
     726:	71 f4       	brne	.+28     	; 0x744 <__vector_7+0x6a>
		
		system_clock.ppqn_counter = 0;
     728:	10 92 cd 03 	sts	0x03CD, r1
		PORTB |= (1<<ARP_SYNC_LED);
     72c:	2f 9a       	sbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) {
     72e:	80 91 8a 03 	lds	r24, 0x038A
     732:	81 30       	cpi	r24, 0x01	; 1
     734:	39 f4       	brne	.+14     	; 0x744 <__vector_7+0x6a>
			
			//step arp note here based on range and note sequence from assigner	

			
			if (gate_buffer) { //if there are still notes in gate buffer
     736:	80 91 b0 02 	lds	r24, 0x02B0
     73a:	88 23       	and	r24, r24
     73c:	19 f0       	breq	.+6      	; 0x744 <__vector_7+0x6a>
				step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
     73e:	0e 94 23 01 	call	0x246	; 0x246 <step_arp_note>
				PORTF |= (1<<GATE);
     742:	89 9a       	sbi	0x11, 1	; 17
				
			//if (gate_buffer != 0) PORTF |= (1<<GATE); //if arp is running and there are notes to be played, turn gate ON
		}			
	}
	
     744:	ff 91       	pop	r31
     746:	ef 91       	pop	r30
     748:	bf 91       	pop	r27
     74a:	af 91       	pop	r26
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
     750:	7f 91       	pop	r23
     752:	6f 91       	pop	r22
     754:	5f 91       	pop	r21
     756:	4f 91       	pop	r20
     758:	3f 91       	pop	r19
     75a:	2f 91       	pop	r18
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     766:	68 3f       	cpi	r22, 0xF8	; 248
     768:	19 f0       	breq	.+6      	; 0x770 <real_time_event+0xa>
     76a:	6a 3f       	cpi	r22, 0xFA	; 250
     76c:	c1 f4       	brne	.+48     	; 0x79e <real_time_event+0x38>
     76e:	15 c0       	rjmp	.+42     	; 0x79a <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     770:	80 91 d3 03 	lds	r24, 0x03D3
     774:	8f 5f       	subi	r24, 0xFF	; 255
     776:	80 93 d3 03 	sts	0x03D3, r24
     77a:	90 91 d2 03 	lds	r25, 0x03D2
     77e:	89 17       	cp	r24, r25
     780:	71 f4       	brne	.+28     	; 0x79e <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     782:	2c 9a       	sbi	0x05, 4	; 5
     784:	86 e0       	ldi	r24, 0x06	; 6
     786:	8a 95       	dec	r24
     788:	f1 f7       	brne	.-4      	; 0x786 <real_time_event+0x20>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     78c:	85 b1       	in	r24, 0x05	; 5
     78e:	80 58       	subi	r24, 0x80	; 128
     790:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     792:	10 92 d3 03 	sts	0x03D3, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     796:	2c 98       	cbi	0x05, 4	; 5
     798:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     79a:	10 92 d3 03 	sts	0x03D3, r1
     79e:	08 95       	ret

000007a0 <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     7a0:	84 2f       	mov	r24, r20
	
	remove_note(note);
     7a2:	0e 94 87 01 	call	0x30e	; 0x30e <remove_note>
	gate_buffer--;
     7a6:	80 91 b0 02 	lds	r24, 0x02B0
     7aa:	81 50       	subi	r24, 0x01	; 1
     7ac:	80 93 b0 02 	sts	0x02B0, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     7b0:	88 23       	and	r24, r24
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <note_off_event+0x16>
     7b4:	89 98       	cbi	0x11, 1	; 17
	if (arp.clock_source != OFF) {	//if arp on, update arp sequence
     7b6:	80 91 8a 03 	lds	r24, 0x038A
     7ba:	82 30       	cpi	r24, 0x02	; 2
     7bc:	71 f0       	breq	.+28     	; 0x7da <note_off_event+0x3a>
		//gate_buffer--;
		if (gate_buffer == 0) {
     7be:	80 91 b0 02 	lds	r24, 0x02B0
     7c2:	88 23       	and	r24, r24
     7c4:	41 f4       	brne	.+16     	; 0x7d6 <note_off_event+0x36>
			arp.current_note = arp.previous_note; //handle last note prevservation for release phase
     7c6:	80 91 88 03 	lds	r24, 0x0388
     7ca:	80 93 89 03 	sts	0x0389, r24
			arp.step_position = 0;
     7ce:	10 92 86 03 	sts	0x0386, r1
			arp.direction = UP;
     7d2:	10 92 87 03 	sts	0x0387, r1
		}			
		update_arp_sequence();
     7d6:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     7da:	08 95       	ret

000007dc <note_on_event>:





void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     7dc:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     7de:	90 91 ff 02 	lds	r25, 0x02FF
     7e2:	90 ff       	sbrs	r25, 0
     7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     7e6:	2c 9a       	sbi	0x05, 4	; 5
     7e8:	96 e0       	ldi	r25, 0x06	; 6
     7ea:	9a 95       	dec	r25
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <note_on_event+0xe>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     7f0:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     7f2:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     7f6:	22 23       	and	r18, r18
     7f8:	59 f4       	brne	.+22     	; 0x810 <note_on_event+0x34>
		remove_note(note);
     7fa:	0e 94 87 01 	call	0x30e	; 0x30e <remove_note>
		gate_buffer--;
     7fe:	80 91 b0 02 	lds	r24, 0x02B0
     802:	81 50       	subi	r24, 0x01	; 1
     804:	80 93 b0 02 	sts	0x02B0, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     808:	88 23       	and	r24, r24
     80a:	91 f4       	brne	.+36     	; 0x830 <note_on_event+0x54>
     80c:	89 98       	cbi	0x11, 1	; 17
     80e:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);
     810:	62 2f       	mov	r22, r18
     812:	0e 94 6f 01 	call	0x2de	; 0x2de <new_note>
		
		gate_buffer++;
     816:	80 91 b0 02 	lds	r24, 0x02B0
     81a:	8f 5f       	subi	r24, 0xFF	; 255
     81c:	80 93 b0 02 	sts	0x02B0, r24
		if (arp.clock_source == OFF) { //if arp is off, handle gate
     820:	80 91 8a 03 	lds	r24, 0x038A
     824:	82 30       	cpi	r24, 0x02	; 2
     826:	11 f4       	brne	.+4      	; 0x82c <note_on_event+0x50>
			//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
			//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
			//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
			//could implement this with timers. MIDI Implant is 0.5 ms. Could maybe use Timer1 here to generate 0.3-0.5 ms gate retrigger
			
			PORTF |= (1<<GATE); //if arp is OFF then turn on gate. Otherwise arpeggiator handles GATE
     828:	89 9a       	sbi	0x11, 1	; 17
     82a:	08 95       	ret
		} else {
			
			update_arp_sequence();
     82c:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     830:	08 95       	ret

00000832 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     832:	87 e2       	ldi	r24, 0x27	; 39
     834:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     838:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     83c:	88 e9       	ldi	r24, 0x98	; 152
     83e:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     842:	08 95       	ret

00000844 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     844:	1f 92       	push	r1
     846:	0f 92       	push	r0
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	0f 92       	push	r0
     84c:	11 24       	eor	r1, r1
     84e:	2f 93       	push	r18
     850:	3f 93       	push	r19
     852:	4f 93       	push	r20
     854:	5f 93       	push	r21
     856:	6f 93       	push	r22
     858:	7f 93       	push	r23
     85a:	8f 93       	push	r24
     85c:	9f 93       	push	r25
     85e:	af 93       	push	r26
     860:	bf 93       	push	r27
     862:	ef 93       	push	r30
     864:	ff 93       	push	r31
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	0f 92       	push	r0
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     870:	80 91 c6 00 	lds	r24, 0x00C6
     874:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     876:	88 ed       	ldi	r24, 0xD8	; 216
     878:	93 e0       	ldi	r25, 0x03	; 3
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	ae 01       	movw	r20, r28
     87e:	4f 5f       	subi	r20, 0xFF	; 255
     880:	5f 4f       	sbci	r21, 0xFF	; 255
     882:	0e 94 b1 19 	call	0x3362	; 0x3362 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     886:	0f 90       	pop	r0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	ff 91       	pop	r31
     88e:	ef 91       	pop	r30
     890:	bf 91       	pop	r27
     892:	af 91       	pop	r26
     894:	9f 91       	pop	r25
     896:	8f 91       	pop	r24
     898:	7f 91       	pop	r23
     89a:	6f 91       	pop	r22
     89c:	5f 91       	pop	r21
     89e:	4f 91       	pop	r20
     8a0:	3f 91       	pop	r19
     8a2:	2f 91       	pop	r18
     8a4:	0f 90       	pop	r0
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	0f 90       	pop	r0
     8aa:	1f 90       	pop	r1
     8ac:	18 95       	reti

000008ae <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     8ae:	c0 e8       	ldi	r28, 0x80	; 128
     8b0:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     8b2:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     8b4:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     8b6:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     8b8:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     8ba:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     8bc:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     8be:	0e 94 aa 07 	call	0xf54	; 0xf54 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     8c2:	a9 ed       	ldi	r26, 0xD9	; 217
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	8c 91       	ld	r24, X
     8c8:	80 6c       	ori	r24, 0xC0	; 192
     8ca:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     8cc:	ea ed       	ldi	r30, 0xDA	; 218
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	80 6c       	ori	r24, 0xC0	; 192
     8d4:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     8d6:	81 b1       	in	r24, 0x01	; 1
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     8dc:	92 b1       	in	r25, 0x02	; 2
     8de:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     8e0:	8c 91       	ld	r24, X
     8e2:	80 63       	ori	r24, 0x30	; 48
     8e4:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     8e6:	80 81       	ld	r24, Z
     8e8:	8f 7c       	andi	r24, 0xCF	; 207
     8ea:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     8ec:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     8ee:	ec ed       	ldi	r30, 0xDC	; 220
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	80 62       	ori	r24, 0x20	; 32
     8f6:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     8f8:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     8fa:	ed ed       	ldi	r30, 0xDD	; 221
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	80 62       	ori	r24, 0x20	; 32
     902:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     904:	80 81       	ld	r24, Z
     906:	8f 7d       	andi	r24, 0xDF	; 223
     908:	80 83       	st	Z, r24
	DATA_BUS = 0;
     90a:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     90c:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     910:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     914:	0e 94 0e 02 	call	0x41c	; 0x41c <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     918:	c8 ed       	ldi	r28, 0xD8	; 216
     91a:	d3 e0       	ldi	r29, 0x03	; 3
     91c:	ce 01       	movw	r24, r28
     91e:	0e 94 80 19 	call	0x3300	; 0x3300 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     922:	ce 01       	movw	r24, r28
     924:	6e ee       	ldi	r22, 0xEE	; 238
     926:	73 e0       	ldi	r23, 0x03	; 3
     928:	0e 94 48 19 	call	0x3290	; 0x3290 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     92c:	ce 01       	movw	r24, r28
     92e:	60 ed       	ldi	r22, 0xD0	; 208
     930:	73 e0       	ldi	r23, 0x03	; 3
     932:	0e 94 4c 19 	call	0x3298	; 0x3298 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     936:	ce 01       	movw	r24, r28
     938:	63 eb       	ldi	r22, 0xB3	; 179
     93a:	73 e0       	ldi	r23, 0x03	; 3
     93c:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     940:	0e 94 19 04 	call	0x832	; 0x832 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     944:	0e 94 cf 07 	call	0xf9e	; 0xf9e <update_spi>
	
	
	current_patch.number = 1;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     94e:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     950:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	0e 94 48 0a 	call	0x1490	; 0x1490 <load_patch>
	
	setup_system_clock();
     95a:	0e 94 c4 01 	call	0x388	; 0x388 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     95e:	88 e1       	ldi	r24, 0x18	; 24
     960:	80 93 cc 03 	sts	0x03CC, r24
	arp.step_position = 0; //initialize step position
     964:	10 92 86 03 	sts	0x0386, r1

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     968:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     96a:	0f 2e       	mov	r0, r31
     96c:	f0 e8       	ldi	r31, 0x80	; 128
     96e:	ef 2e       	mov	r14, r31
     970:	f3 e0       	ldi	r31, 0x03	; 3
     972:	ff 2e       	mov	r15, r31
     974:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     976:	0f 2e       	mov	r0, r31
     978:	f7 e0       	ldi	r31, 0x07	; 7
     97a:	cf 2e       	mov	r12, r31
     97c:	f3 e0       	ldi	r31, 0x03	; 3
     97e:	df 2e       	mov	r13, r31
     980:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     982:	bb 24       	eor	r11, r11
     984:	68 94       	set
     986:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     988:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     98a:	c8 01       	movw	r24, r16
     98c:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     990:	80 91 fd 01 	lds	r24, 0x01FD
     994:	90 91 fe 01 	lds	r25, 0x01FE
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	0e 94 10 03 	call	0x620	; 0x620 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     99e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <scan_pots>
		update_control_voltages();
     9a2:	0e 94 8b 05 	call	0xb16	; 0xb16 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     9a6:	80 91 b9 02 	lds	r24, 0x02B9
     9aa:	98 2f       	mov	r25, r24
     9ac:	9f 5f       	subi	r25, 0xFF	; 255
     9ae:	90 93 b9 02 	sts	0x02B9, r25
     9b2:	85 30       	cpi	r24, 0x05	; 5
     9b4:	51 f7       	brne	.-44     	; 0x98a <main+0xdc>
		{
			switch_timer = 0;
     9b6:	10 92 b9 02 	sts	0x02B9, r1
			switch_press = 0; //reset global switch press flag
     9ba:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     9be:	f7 01       	movw	r30, r14
     9c0:	c0 81       	ld	r28, Z
     9c2:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <read_switch_port>
     9c6:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     9c8:	f6 01       	movw	r30, r12
     9ca:	90 81       	ld	r25, Z
     9cc:	91 30       	cpi	r25, 0x01	; 1
     9ce:	11 f4       	brne	.+4      	; 0x9d4 <main+0x126>
     9d0:	cd 2f       	mov	r28, r29
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <main+0x128>
     9d4:	c0 e0       	ldi	r28, 0x00	; 0
     9d6:	c8 2b       	or	r28, r24
     9d8:	f7 01       	movw	r30, r14
     9da:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     9dc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <update_spi>
			if (switch_press) { 
     9e0:	80 91 c1 02 	lds	r24, 0x02C1
     9e4:	88 23       	and	r24, r24
     9e6:	39 f0       	breq	.+14     	; 0x9f6 <main+0x148>
				update_patch();
     9e8:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     9ec:	f6 01       	movw	r30, r12
     9ee:	80 81       	ld	r24, Z
     9f0:	88 23       	and	r24, r24
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <main+0x148>
     9f4:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     9f6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <update_patch_programmer>
     9fa:	c7 cf       	rjmp	.-114    	; 0x98a <main+0xdc>

000009fc <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     9fc:	bf 92       	push	r11
     9fe:	cf 92       	push	r12
     a00:	df 92       	push	r13
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	c0 e0       	ldi	r28, 0x00	; 0
     a10:	d1 e0       	ldi	r29, 0x01	; 1
     a12:	02 ec       	ldi	r16, 0xC2	; 194
     a14:	12 e0       	ldi	r17, 0x02	; 2
     a16:	0f 2e       	mov	r0, r31
     a18:	fc e3       	ldi	r31, 0x3C	; 60
     a1a:	cf 2e       	mov	r12, r31
     a1c:	dd 24       	eor	r13, r13
     a1e:	f0 2d       	mov	r31, r0
     a20:	cc 0e       	add	r12, r28
     a22:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     a24:	0f 2e       	mov	r0, r31
     a26:	f7 e0       	ldi	r31, 0x07	; 7
     a28:	ef 2e       	mov	r14, r31
     a2a:	f3 e0       	ldi	r31, 0x03	; 3
     a2c:	ff 2e       	mov	r15, r31
     a2e:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     a30:	bb 24       	eor	r11, r11
     a32:	68 94       	set
     a34:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     a36:	88 81       	ld	r24, Y
     a38:	99 81       	ldd	r25, Y+1	; 0x01
     a3a:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     a3e:	90 93 bc 02 	sts	0x02BC, r25
     a42:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     a46:	e8 81       	ld	r30, Y
     a48:	f9 81       	ldd	r31, Y+1	; 0x01
     a4a:	40 81       	ld	r20, Z
     a4c:	21 81       	ldd	r18, Z+1	; 0x01
     a4e:	52 2f       	mov	r21, r18
     a50:	53 70       	andi	r21, 0x03	; 3
     a52:	84 1b       	sub	r24, r20
     a54:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     a56:	95 95       	asr	r25
     a58:	87 95       	ror	r24
     a5a:	95 95       	asr	r25
     a5c:	87 95       	ror	r24
     a5e:	84 0f       	add	r24, r20
     a60:	95 1f       	adc	r25, r21
     a62:	80 83       	st	Z, r24
     a64:	89 2f       	mov	r24, r25
     a66:	83 70       	andi	r24, 0x03	; 3
     a68:	2c 7f       	andi	r18, 0xFC	; 252
     a6a:	28 2b       	or	r18, r24
     a6c:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     a6e:	e9 91       	ld	r30, Y+
     a70:	f9 91       	ld	r31, Y+
     a72:	92 81       	ldd	r25, Z+2	; 0x02
     a74:	20 81       	ld	r18, Z
     a76:	81 81       	ldd	r24, Z+1	; 0x01
     a78:	38 2f       	mov	r19, r24
     a7a:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     a7c:	d7 01       	movw	r26, r14
     a7e:	8c 91       	ld	r24, X
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	19 f0       	breq	.+6      	; 0xa8a <scan_pots+0x8e>
     a84:	83 81       	ldd	r24, Z+3	; 0x03
     a86:	88 23       	and	r24, r24
     a88:	24 f0       	brlt	.+8      	; 0xa92 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     a8a:	f8 01       	movw	r30, r16
     a8c:	31 83       	std	Z+1, r19	; 0x01
     a8e:	20 83       	st	Z, r18
     a90:	14 c0       	rjmp	.+40     	; 0xaba <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     a92:	49 2f       	mov	r20, r25
     a94:	43 50       	subi	r20, 0x03	; 3
     a96:	c9 01       	movw	r24, r18
     a98:	95 95       	asr	r25
     a9a:	87 95       	ror	r24
     a9c:	95 95       	asr	r25
     a9e:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     aa0:	94 2f       	mov	r25, r20
     aa2:	98 1b       	sub	r25, r24
     aa4:	9a 3f       	cpi	r25, 0xFA	; 250
     aa6:	48 f4       	brcc	.+18     	; 0xaba <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     aa8:	d8 01       	movw	r26, r16
     aaa:	11 96       	adiw	r26, 0x01	; 1
     aac:	3c 93       	st	X, r19
     aae:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     ab0:	83 81       	ldd	r24, Z+3	; 0x03
     ab2:	8f 77       	andi	r24, 0x7F	; 127
     ab4:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     ab6:	f7 01       	movw	r30, r14
     ab8:	b0 82       	st	Z, r11
     aba:	0e 5f       	subi	r16, 0xFE	; 254
     abc:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     abe:	cc 15       	cp	r28, r12
     ac0:	dd 05       	cpc	r29, r13
     ac2:	09 f0       	breq	.+2      	; 0xac6 <scan_pots+0xca>
     ac4:	b8 cf       	rjmp	.-144    	; 0xa36 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     ac6:	8c e7       	ldi	r24, 0x7C	; 124
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     ace:	90 93 bc 02 	sts	0x02BC, r25
     ad2:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     ad6:	20 91 7c 01 	lds	r18, 0x017C
     ada:	40 91 7d 01 	lds	r20, 0x017D
     ade:	34 2f       	mov	r19, r20
     ae0:	33 70       	andi	r19, 0x03	; 3
     ae2:	82 1b       	sub	r24, r18
     ae4:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     ae6:	95 95       	asr	r25
     ae8:	87 95       	ror	r24
     aea:	95 95       	asr	r25
     aec:	87 95       	ror	r24
     aee:	28 0f       	add	r18, r24
     af0:	39 1f       	adc	r19, r25
     af2:	20 93 7c 01 	sts	0x017C, r18
     af6:	83 2f       	mov	r24, r19
     af8:	83 70       	andi	r24, 0x03	; 3
     afa:	4c 7f       	andi	r20, 0xFC	; 252
     afc:	48 2b       	or	r20, r24
     afe:	40 93 7d 01 	sts	0x017D, r20
	
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	bf 90       	pop	r11
     b14:	08 95       	ret

00000b16 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     b1a:	60 91 c2 02 	lds	r22, 0x02C2
     b1e:	70 91 c3 02 	lds	r23, 0x02C3
     b22:	62 95       	swap	r22
     b24:	72 95       	swap	r23
     b26:	70 7f       	andi	r23, 0xF0	; 240
     b28:	76 27       	eor	r23, r22
     b2a:	60 7f       	andi	r22, 0xF0	; 240
     b2c:	76 27       	eor	r23, r22
     b2e:	84 ee       	ldi	r24, 0xE4	; 228
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     b36:	60 91 c4 02 	lds	r22, 0x02C4
     b3a:	70 91 c5 02 	lds	r23, 0x02C5
     b3e:	62 95       	swap	r22
     b40:	72 95       	swap	r23
     b42:	70 7f       	andi	r23, 0xF0	; 240
     b44:	76 27       	eor	r23, r22
     b46:	60 7f       	andi	r22, 0xF0	; 240
     b48:	76 27       	eor	r23, r22
     b4a:	83 ee       	ldi	r24, 0xE3	; 227
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     b52:	60 91 c6 02 	lds	r22, 0x02C6
     b56:	70 91 c7 02 	lds	r23, 0x02C7
     b5a:	66 0f       	add	r22, r22
     b5c:	77 1f       	adc	r23, r23
     b5e:	66 0f       	add	r22, r22
     b60:	77 1f       	adc	r23, r23
     b62:	66 0f       	add	r22, r22
     b64:	77 1f       	adc	r23, r23
     b66:	82 ee       	ldi	r24, 0xE2	; 226
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     b6e:	60 91 c8 02 	lds	r22, 0x02C8
     b72:	70 91 c9 02 	lds	r23, 0x02C9
     b76:	62 95       	swap	r22
     b78:	72 95       	swap	r23
     b7a:	70 7f       	andi	r23, 0xF0	; 240
     b7c:	76 27       	eor	r23, r22
     b7e:	60 7f       	andi	r22, 0xF0	; 240
     b80:	76 27       	eor	r23, r22
     b82:	83 eb       	ldi	r24, 0xB3	; 179
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     b8a:	60 91 ca 02 	lds	r22, 0x02CA
     b8e:	70 91 cb 02 	lds	r23, 0x02CB
     b92:	66 0f       	add	r22, r22
     b94:	77 1f       	adc	r23, r23
     b96:	66 0f       	add	r22, r22
     b98:	77 1f       	adc	r23, r23
     b9a:	66 0f       	add	r22, r22
     b9c:	77 1f       	adc	r23, r23
     b9e:	81 ee       	ldi	r24, 0xE1	; 225
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     ba6:	60 91 cc 02 	lds	r22, 0x02CC
     baa:	70 91 cd 02 	lds	r23, 0x02CD
     bae:	62 95       	swap	r22
     bb0:	72 95       	swap	r23
     bb2:	70 7f       	andi	r23, 0xF0	; 240
     bb4:	76 27       	eor	r23, r22
     bb6:	60 7f       	andi	r22, 0xF0	; 240
     bb8:	76 27       	eor	r23, r22
     bba:	80 ee       	ldi	r24, 0xE0	; 224
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     bc2:	60 91 ce 02 	lds	r22, 0x02CE
     bc6:	70 91 cf 02 	lds	r23, 0x02CF
     bca:	62 95       	swap	r22
     bcc:	72 95       	swap	r23
     bce:	70 7f       	andi	r23, 0xF0	; 240
     bd0:	76 27       	eor	r23, r22
     bd2:	60 7f       	andi	r22, 0xF0	; 240
     bd4:	76 27       	eor	r23, r22
     bd6:	8f ed       	ldi	r24, 0xDF	; 223
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     bde:	60 91 d0 02 	lds	r22, 0x02D0
     be2:	70 91 d1 02 	lds	r23, 0x02D1
     be6:	62 95       	swap	r22
     be8:	72 95       	swap	r23
     bea:	70 7f       	andi	r23, 0xF0	; 240
     bec:	76 27       	eor	r23, r22
     bee:	60 7f       	andi	r22, 0xF0	; 240
     bf0:	76 27       	eor	r23, r22
     bf2:	8e ed       	ldi	r24, 0xDE	; 222
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     bfa:	80 91 d4 02 	lds	r24, 0x02D4
     bfe:	90 91 d5 02 	lds	r25, 0x02D5
     c02:	c0 e0       	ldi	r28, 0x00	; 0
     c04:	d2 e0       	ldi	r29, 0x02	; 2
     c06:	c8 1b       	sub	r28, r24
     c08:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     c0a:	60 91 73 03 	lds	r22, 0x0373
     c0e:	70 91 74 03 	lds	r23, 0x0374
     c12:	60 50       	subi	r22, 0x00	; 0
     c14:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     c16:	80 91 d2 02 	lds	r24, 0x02D2
     c1a:	90 91 d3 02 	lds	r25, 0x02D3
     c1e:	68 1b       	sub	r22, r24
     c20:	79 0b       	sbc	r23, r25
     c22:	6c 0f       	add	r22, r28
     c24:	7d 1f       	adc	r23, r29
     c26:	8d ed       	ldi	r24, 0xDD	; 221
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     c2e:	60 91 75 03 	lds	r22, 0x0375
     c32:	70 91 76 03 	lds	r23, 0x0376
     c36:	6c 0f       	add	r22, r28
     c38:	7d 1f       	adc	r23, r29
     c3a:	8c ed       	ldi	r24, 0xDC	; 220
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     c42:	60 91 d6 02 	lds	r22, 0x02D6
     c46:	70 91 d7 02 	lds	r23, 0x02D7
     c4a:	62 95       	swap	r22
     c4c:	72 95       	swap	r23
     c4e:	70 7f       	andi	r23, 0xF0	; 240
     c50:	76 27       	eor	r23, r22
     c52:	60 7f       	andi	r22, 0xF0	; 240
     c54:	76 27       	eor	r23, r22
     c56:	8b ed       	ldi	r24, 0xDB	; 219
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     c5e:	60 91 da 02 	lds	r22, 0x02DA
     c62:	70 91 db 02 	lds	r23, 0x02DB
     c66:	62 95       	swap	r22
     c68:	72 95       	swap	r23
     c6a:	70 7f       	andi	r23, 0xF0	; 240
     c6c:	76 27       	eor	r23, r22
     c6e:	60 7f       	andi	r22, 0xF0	; 240
     c70:	76 27       	eor	r23, r22
     c72:	8a ed       	ldi	r24, 0xDA	; 218
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     c7a:	60 91 dc 02 	lds	r22, 0x02DC
     c7e:	70 91 dd 02 	lds	r23, 0x02DD
     c82:	62 95       	swap	r22
     c84:	72 95       	swap	r23
     c86:	70 7f       	andi	r23, 0xF0	; 240
     c88:	76 27       	eor	r23, r22
     c8a:	60 7f       	andi	r22, 0xF0	; 240
     c8c:	76 27       	eor	r23, r22
     c8e:	89 ed       	ldi	r24, 0xD9	; 217
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     c96:	60 91 7c 01 	lds	r22, 0x017C
     c9a:	80 91 7d 01 	lds	r24, 0x017D
     c9e:	78 2f       	mov	r23, r24
     ca0:	73 70       	andi	r23, 0x03	; 3
     ca2:	62 95       	swap	r22
     ca4:	72 95       	swap	r23
     ca6:	70 7f       	andi	r23, 0xF0	; 240
     ca8:	76 27       	eor	r23, r22
     caa:	60 7f       	andi	r22, 0xF0	; 240
     cac:	76 27       	eor	r23, r22
     cae:	88 ed       	ldi	r24, 0xD8	; 216
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     cb6:	60 91 de 02 	lds	r22, 0x02DE
     cba:	70 91 df 02 	lds	r23, 0x02DF
     cbe:	62 95       	swap	r22
     cc0:	72 95       	swap	r23
     cc2:	70 7f       	andi	r23, 0xF0	; 240
     cc4:	76 27       	eor	r23, r22
     cc6:	60 7f       	andi	r22, 0xF0	; 240
     cc8:	76 27       	eor	r23, r22
     cca:	87 ed       	ldi	r24, 0xD7	; 215
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     cd2:	60 91 e0 02 	lds	r22, 0x02E0
     cd6:	70 91 e1 02 	lds	r23, 0x02E1
     cda:	62 95       	swap	r22
     cdc:	72 95       	swap	r23
     cde:	70 7f       	andi	r23, 0xF0	; 240
     ce0:	76 27       	eor	r23, r22
     ce2:	60 7f       	andi	r22, 0xF0	; 240
     ce4:	76 27       	eor	r23, r22
     ce6:	86 ed       	ldi	r24, 0xD6	; 214
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     cee:	60 91 e2 02 	lds	r22, 0x02E2
     cf2:	70 91 e3 02 	lds	r23, 0x02E3
     cf6:	62 95       	swap	r22
     cf8:	72 95       	swap	r23
     cfa:	70 7f       	andi	r23, 0xF0	; 240
     cfc:	76 27       	eor	r23, r22
     cfe:	60 7f       	andi	r22, 0xF0	; 240
     d00:	76 27       	eor	r23, r22
     d02:	85 ed       	ldi	r24, 0xD5	; 213
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     d0a:	0e 94 65 01 	call	0x2ca	; 0x2ca <get_current_note>
     d0e:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     d10:	88 30       	cpi	r24, 0x08	; 8
     d12:	08 f4       	brcc	.+2      	; 0xd16 <update_control_voltages+0x200>
     d14:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = current_patch.number + 100*(arp.sequence[arp.step_position].note); //100*note;
	//value_to_display = arp.sequence[arp.step_position].note;
	//uint8_t arp_note = arp.sequence[arp.step_position].note;
	//if (arp_note == EMPTY) arp_note = 0;
	value_to_display = current_patch.number + 100*arp.step_position;
     d16:	60 91 03 03 	lds	r22, 0x0303
     d1a:	40 91 86 03 	lds	r20, 0x0386
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	24 e6       	ldi	r18, 0x64	; 100
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	42 9f       	mul	r20, r18
     d26:	c0 01       	movw	r24, r0
     d28:	43 9f       	mul	r20, r19
     d2a:	90 0d       	add	r25, r0
     d2c:	52 9f       	mul	r21, r18
     d2e:	90 0d       	add	r25, r0
     d30:	11 24       	eor	r1, r1
     d32:	86 0f       	add	r24, r22
     d34:	91 1d       	adc	r25, r1
     d36:	90 93 fe 01 	sts	0x01FE, r25
     d3a:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     d3e:	8c 2f       	mov	r24, r28
     d40:	88 50       	subi	r24, 0x08	; 8
     d42:	6f e0       	ldi	r22, 0x0F	; 15
     d44:	73 e0       	ldi	r23, 0x03	; 3
     d46:	0e 94 d7 15 	call	0x2bae	; 0x2bae <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     d4a:	bc 01       	movw	r22, r24
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	20 91 e6 02 	lds	r18, 0x02E6
     d54:	30 91 e7 02 	lds	r19, 0x02E7
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <__mulsi3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	07 2e       	mov	r0, r23
     d66:	7a e0       	ldi	r23, 0x0A	; 10
     d68:	b6 95       	lsr	r27
     d6a:	a7 95       	ror	r26
     d6c:	97 95       	ror	r25
     d6e:	87 95       	ror	r24
     d70:	7a 95       	dec	r23
     d72:	d1 f7       	brne	.-12     	; 0xd68 <update_control_voltages+0x252>
     d74:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     d76:	60 91 e4 02 	lds	r22, 0x02E4
     d7a:	70 91 e5 02 	lds	r23, 0x02E5
     d7e:	62 95       	swap	r22
     d80:	72 95       	swap	r23
     d82:	70 7f       	andi	r23, 0xF0	; 240
     d84:	76 27       	eor	r23, r22
     d86:	60 7f       	andi	r22, 0xF0	; 240
     d88:	76 27       	eor	r23, r22
     d8a:	86 0f       	add	r24, r22
     d8c:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     d8e:	bc 01       	movw	r22, r24
     d90:	80 e4       	ldi	r24, 0x40	; 64
     d92:	60 30       	cpi	r22, 0x00	; 0
     d94:	78 07       	cpc	r23, r24
     d96:	10 f0       	brcs	.+4      	; 0xd9c <update_control_voltages+0x286>
     d98:	6f ef       	ldi	r22, 0xFF	; 255
     d9a:	7f e3       	ldi	r23, 0x3F	; 63
     d9c:	84 ed       	ldi	r24, 0xD4	; 212
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     da4:	60 91 e8 02 	lds	r22, 0x02E8
     da8:	70 91 e9 02 	lds	r23, 0x02E9
     dac:	62 95       	swap	r22
     dae:	72 95       	swap	r23
     db0:	70 7f       	andi	r23, 0xF0	; 240
     db2:	76 27       	eor	r23, r22
     db4:	60 7f       	andi	r22, 0xF0	; 240
     db6:	76 27       	eor	r23, r22
     db8:	82 ed       	ldi	r24, 0xD2	; 210
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     dc0:	60 91 ea 02 	lds	r22, 0x02EA
     dc4:	70 91 eb 02 	lds	r23, 0x02EB
     dc8:	62 95       	swap	r22
     dca:	72 95       	swap	r23
     dcc:	70 7f       	andi	r23, 0xF0	; 240
     dce:	76 27       	eor	r23, r22
     dd0:	60 7f       	andi	r22, 0xF0	; 240
     dd2:	76 27       	eor	r23, r22
     dd4:	81 ed       	ldi	r24, 0xD1	; 209
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     ddc:	60 91 ec 02 	lds	r22, 0x02EC
     de0:	70 91 ed 02 	lds	r23, 0x02ED
     de4:	62 95       	swap	r22
     de6:	72 95       	swap	r23
     de8:	70 7f       	andi	r23, 0xF0	; 240
     dea:	76 27       	eor	r23, r22
     dec:	60 7f       	andi	r22, 0xF0	; 240
     dee:	76 27       	eor	r23, r22
     df0:	80 ed       	ldi	r24, 0xD0	; 208
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     df8:	60 91 ee 02 	lds	r22, 0x02EE
     dfc:	70 91 ef 02 	lds	r23, 0x02EF
     e00:	62 95       	swap	r22
     e02:	72 95       	swap	r23
     e04:	70 7f       	andi	r23, 0xF0	; 240
     e06:	76 27       	eor	r23, r22
     e08:	60 7f       	andi	r22, 0xF0	; 240
     e0a:	76 27       	eor	r23, r22
     e0c:	8f ec       	ldi	r24, 0xCF	; 207
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     e14:	60 91 f0 02 	lds	r22, 0x02F0
     e18:	70 91 f1 02 	lds	r23, 0x02F1
     e1c:	62 95       	swap	r22
     e1e:	72 95       	swap	r23
     e20:	70 7f       	andi	r23, 0xF0	; 240
     e22:	76 27       	eor	r23, r22
     e24:	60 7f       	andi	r22, 0xF0	; 240
     e26:	76 27       	eor	r23, r22
     e28:	8e ec       	ldi	r24, 0xCE	; 206
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     e30:	60 91 f2 02 	lds	r22, 0x02F2
     e34:	70 91 f3 02 	lds	r23, 0x02F3
     e38:	62 95       	swap	r22
     e3a:	72 95       	swap	r23
     e3c:	70 7f       	andi	r23, 0xF0	; 240
     e3e:	76 27       	eor	r23, r22
     e40:	60 7f       	andi	r22, 0xF0	; 240
     e42:	76 27       	eor	r23, r22
     e44:	8d ec       	ldi	r24, 0xCD	; 205
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     e4c:	60 91 f4 02 	lds	r22, 0x02F4
     e50:	70 91 f5 02 	lds	r23, 0x02F5
     e54:	62 95       	swap	r22
     e56:	72 95       	swap	r23
     e58:	70 7f       	andi	r23, 0xF0	; 240
     e5a:	76 27       	eor	r23, r22
     e5c:	60 7f       	andi	r22, 0xF0	; 240
     e5e:	76 27       	eor	r23, r22
     e60:	8c ec       	ldi	r24, 0xCC	; 204
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     e68:	60 91 f8 02 	lds	r22, 0x02F8
     e6c:	70 91 f9 02 	lds	r23, 0x02F9
     e70:	62 95       	swap	r22
     e72:	72 95       	swap	r23
     e74:	70 7f       	andi	r23, 0xF0	; 240
     e76:	76 27       	eor	r23, r22
     e78:	60 7f       	andi	r22, 0xF0	; 240
     e7a:	76 27       	eor	r23, r22
     e7c:	8a ec       	ldi	r24, 0xCA	; 202
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     e84:	60 91 f6 02 	lds	r22, 0x02F6
     e88:	70 91 f7 02 	lds	r23, 0x02F7
     e8c:	62 95       	swap	r22
     e8e:	72 95       	swap	r23
     e90:	70 7f       	andi	r23, 0xF0	; 240
     e92:	76 27       	eor	r23, r22
     e94:	60 7f       	andi	r22, 0xF0	; 240
     e96:	76 27       	eor	r23, r22
     e98:	8b ec       	ldi	r24, 0xCB	; 203
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     ea0:	60 91 fc 02 	lds	r22, 0x02FC
     ea4:	70 91 fd 02 	lds	r23, 0x02FD
     ea8:	62 95       	swap	r22
     eaa:	72 95       	swap	r23
     eac:	70 7f       	andi	r23, 0xF0	; 240
     eae:	76 27       	eor	r23, r22
     eb0:	60 7f       	andi	r22, 0xF0	; 240
     eb2:	76 27       	eor	r23, r22
     eb4:	88 ec       	ldi	r24, 0xC8	; 200
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     ebc:	60 91 fa 02 	lds	r22, 0x02FA
     ec0:	70 91 fb 02 	lds	r23, 0x02FB
     ec4:	62 95       	swap	r22
     ec6:	72 95       	swap	r23
     ec8:	70 7f       	andi	r23, 0xF0	; 240
     eca:	76 27       	eor	r23, r22
     ecc:	60 7f       	andi	r22, 0xF0	; 240
     ece:	76 27       	eor	r23, r22
     ed0:	89 ec       	ldi	r24, 0xC9	; 201
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     ed8:	8c 2f       	mov	r24, r28
     eda:	6f e0       	ldi	r22, 0x0F	; 15
     edc:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     ee0:	61 e5       	ldi	r22, 0x51	; 81
     ee2:	73 e0       	ldi	r23, 0x03	; 3
     ee4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <interpolate_pitch_cv>
     ee8:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     eea:	86 ee       	ldi	r24, 0xE6	; 230
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     ef2:	8c 2f       	mov	r24, r28
     ef4:	60 ef       	ldi	r22, 0xF0	; 240
     ef6:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     efa:	6f e2       	ldi	r22, 0x2F	; 47
     efc:	73 e0       	ldi	r23, 0x03	; 3
     efe:	0e 94 d7 15 	call	0x2bae	; 0x2bae <interpolate_pitch_cv>
     f02:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     f04:	85 ee       	ldi	r24, 0xE5	; 229
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     f0c:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     f0e:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     f10:	20 91 88 01 	lds	r18, 0x0188
     f14:	80 91 89 01 	lds	r24, 0x0189
     f18:	38 2f       	mov	r19, r24
     f1a:	33 70       	andi	r19, 0x03	; 3
     f1c:	83 ef       	ldi	r24, 0xF3	; 243
     f1e:	94 e0       	ldi	r25, 0x04	; 4
     f20:	82 1b       	sub	r24, r18
     f22:	93 0b       	sbc	r25, r19
     f24:	90 93 cf 03 	sts	0x03CF, r25
     f28:	80 93 ce 03 	sts	0x03CE, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     f2c:	20 91 d0 03 	lds	r18, 0x03D0
     f30:	30 91 d1 03 	lds	r19, 0x03D1
     f34:	82 17       	cp	r24, r18
     f36:	93 07       	cpc	r25, r19
     f38:	11 f0       	breq	.+4      	; 0xf3e <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
     f3a:	0e 94 cb 01 	call	0x396	; 0x396 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     f3e:	80 91 ce 03 	lds	r24, 0x03CE
     f42:	90 91 cf 03 	lds	r25, 0x03CF
     f46:	90 93 d1 03 	sts	0x03D1, r25
     f4a:	80 93 d0 03 	sts	0x03D0, r24
	
}			
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	08 95       	ret

00000f54 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     f54:	84 b1       	in	r24, 0x04	; 4
     f56:	87 62       	ori	r24, 0x27	; 39
     f58:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     f5a:	ec ed       	ldi	r30, 0xDC	; 220
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8c 65       	ori	r24, 0x5C	; 92
     f62:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     f64:	85 b1       	in	r24, 0x05	; 5
     f66:	89 7d       	andi	r24, 0xD9	; 217
     f68:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     f6a:	ed ed       	ldi	r30, 0xDD	; 221
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	83 7f       	andi	r24, 0xF3	; 243
     f72:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     f74:	80 e5       	ldi	r24, 0x50	; 80
     f76:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     f78:	80 81       	ld	r24, Z
     f7a:	87 7f       	andi	r24, 0xF7	; 247
     f7c:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     f7e:	80 81       	ld	r24, Z
     f80:	87 7f       	andi	r24, 0xF7	; 247
     f82:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     f84:	80 81       	ld	r24, Z
     f86:	88 60       	ori	r24, 0x08	; 8
     f88:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 7e       	andi	r24, 0xEF	; 239
     f8e:	80 83       	st	Z, r24
	
}
     f90:	08 95       	ret

00000f92 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     f92:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     f94:	0d b4       	in	r0, 0x2d	; 45
     f96:	07 fe       	sbrs	r0, 7
     f98:	fd cf       	rjmp	.-6      	; 0xf94 <spi_shift_byte+0x2>
	return SPDR;
     f9a:	8e b5       	in	r24, 0x2e	; 46
	
}
     f9c:	08 95       	ret

00000f9e <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     f9e:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     fa0:	80 91 02 03 	lds	r24, 0x0302
     fa4:	0e 94 c9 07 	call	0xf92	; 0xf92 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     fa8:	90 91 c1 02 	lds	r25, 0x02C1
     fac:	98 2b       	or	r25, r24
     fae:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     fb2:	20 91 bf 02 	lds	r18, 0x02BF
     fb6:	98 2f       	mov	r25, r24
     fb8:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     fba:	89 2f       	mov	r24, r25
     fbc:	82 27       	eor	r24, r18
     fbe:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     fc2:	89 23       	and	r24, r25
     fc4:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     fc8:	90 91 7e 03 	lds	r25, 0x037E
     fcc:	89 27       	eor	r24, r25
     fce:	80 93 7e 03 	sts	0x037E, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     fd2:	80 91 01 03 	lds	r24, 0x0301
     fd6:	0e 94 c9 07 	call	0xf92	; 0xf92 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     fda:	90 91 c1 02 	lds	r25, 0x02C1
     fde:	98 2b       	or	r25, r24
     fe0:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     fe4:	20 91 bd 02 	lds	r18, 0x02BD
     fe8:	98 2f       	mov	r25, r24
     fea:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     fec:	89 2f       	mov	r24, r25
     fee:	82 27       	eor	r24, r18
     ff0:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     ff4:	89 23       	and	r24, r25
     ff6:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     ffa:	90 91 7f 03 	lds	r25, 0x037F
     ffe:	89 27       	eor	r24, r25
    1000:	80 93 7f 03 	sts	0x037F, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
    1004:	80 91 00 03 	lds	r24, 0x0300
    1008:	0e 94 c9 07 	call	0xf92	; 0xf92 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
    100c:	80 91 ff 02 	lds	r24, 0x02FF
    1010:	0e 94 c9 07 	call	0xf92	; 0xf92 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    1014:	80 91 07 03 	lds	r24, 0x0307
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	11 f4       	brne	.+4      	; 0x1020 <update_spi+0x82>
    101c:	20 e8       	ldi	r18, 0x80	; 128
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <update_spi+0x84>
    1020:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
    1022:	80 91 80 03 	lds	r24, 0x0380
    1026:	88 1f       	adc	r24, r24
    1028:	88 27       	eor	r24, r24
    102a:	88 1f       	adc	r24, r24
    102c:	82 95       	swap	r24
    102e:	88 0f       	add	r24, r24
    1030:	88 0f       	add	r24, r24
    1032:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    1034:	90 91 fe 02 	lds	r25, 0x02FE
    1038:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
    103a:	82 2b       	or	r24, r18
    103c:	0e 94 c9 07 	call	0xf92	; 0xf92 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
    1040:	ed ed       	ldi	r30, 0xDD	; 221
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	87 7f       	andi	r24, 0xF7	; 247
    1048:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
    104a:	80 81       	ld	r24, Z
    104c:	88 60       	ori	r24, 0x08	; 8
    104e:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
    1050:	2d 98       	cbi	0x05, 5	; 5
			
			

	
    1052:	08 95       	ret

00001054 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b1 e0       	ldi	r27, 0x01	; 1
    1058:	9d 01       	movw	r18, r26
    105a:	24 5c       	subi	r18, 0xC4	; 196
    105c:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
    105e:	ed 91       	ld	r30, X+
    1060:	fc 91       	ld	r31, X
    1062:	11 97       	sbiw	r26, 0x01	; 1
    1064:	80 81       	ld	r24, Z
    1066:	41 81       	ldd	r20, Z+1	; 0x01
    1068:	94 2f       	mov	r25, r20
    106a:	93 70       	andi	r25, 0x03	; 3
    106c:	95 95       	asr	r25
    106e:	87 95       	ror	r24
    1070:	95 95       	asr	r25
    1072:	87 95       	ror	r24
    1074:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
    1076:	ed 91       	ld	r30, X+
    1078:	fd 91       	ld	r31, X+
    107a:	83 81       	ldd	r24, Z+3	; 0x03
    107c:	80 68       	ori	r24, 0x80	; 128
    107e:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
    1080:	a2 17       	cp	r26, r18
    1082:	b3 07       	cpc	r27, r19
    1084:	61 f7       	brne	.-40     	; 0x105e <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
    1086:	08 95       	ret

00001088 <unlock_pots>:

void unlock_pots(void) {
    1088:	e0 e0       	ldi	r30, 0x00	; 0
    108a:	f1 e0       	ldi	r31, 0x01	; 1
    108c:	cf 01       	movw	r24, r30
    108e:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
    1090:	a1 91       	ld	r26, Z+
    1092:	b1 91       	ld	r27, Z+
    1094:	13 96       	adiw	r26, 0x03	; 3
    1096:	2c 91       	ld	r18, X
    1098:	13 97       	sbiw	r26, 0x03	; 3
    109a:	2f 77       	andi	r18, 0x7F	; 127
    109c:	13 96       	adiw	r26, 0x03	; 3
    109e:	2c 93       	st	X, r18
    10a0:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
    10a2:	e8 17       	cp	r30, r24
    10a4:	f9 07       	cpc	r31, r25
    10a6:	a1 f7       	brne	.-24     	; 0x1090 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
    10a8:	08 95       	ret

000010aa <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	ab 97       	sbiw	r28, 0x2b	; 43
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
    10c2:	ee ed       	ldi	r30, 0xDE	; 222
    10c4:	f2 e0       	ldi	r31, 0x02	; 2
    10c6:	20 91 de 02 	lds	r18, 0x02DE
    10ca:	82 2f       	mov	r24, r18
    10cc:	82 95       	swap	r24
    10ce:	80 7f       	andi	r24, 0xF0	; 240
    10d0:	22 95       	swap	r18
    10d2:	2f 70       	andi	r18, 0x0F	; 15
    10d4:	90 91 df 02 	lds	r25, 0x02DF
    10d8:	93 70       	andi	r25, 0x03	; 3
    10da:	92 95       	swap	r25
    10dc:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
    10de:	df 01       	movw	r26, r30
    10e0:	5a 97       	sbiw	r26, 0x1a	; 26
    10e2:	3c 91       	ld	r19, X
    10e4:	53 2f       	mov	r21, r19
    10e6:	55 0f       	add	r21, r21
    10e8:	55 0f       	add	r21, r21
    10ea:	4a 81       	ldd	r20, Y+2	; 0x02
    10ec:	43 70       	andi	r20, 0x03	; 3
    10ee:	45 2b       	or	r20, r21
    10f0:	4a 83       	std	Y+2, r20	; 0x02
    10f2:	63 2f       	mov	r22, r19
    10f4:	62 95       	swap	r22
    10f6:	66 95       	lsr	r22
    10f8:	66 95       	lsr	r22
    10fa:	63 70       	andi	r22, 0x03	; 3
    10fc:	11 96       	adiw	r26, 0x01	; 1
    10fe:	4c 91       	ld	r20, X
    1100:	43 70       	andi	r20, 0x03	; 3
    1102:	44 0f       	add	r20, r20
    1104:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    1106:	df 01       	movw	r26, r30
    1108:	58 97       	sbiw	r26, 0x18	; 24
    110a:	3c 91       	ld	r19, X
    110c:	53 2f       	mov	r21, r19
    110e:	52 95       	swap	r21
    1110:	50 7f       	andi	r21, 0xF0	; 240
    1112:	46 2b       	or	r20, r22
    1114:	45 2b       	or	r20, r21
    1116:	4b 83       	std	Y+3, r20	; 0x03
    1118:	63 2f       	mov	r22, r19
    111a:	62 95       	swap	r22
    111c:	6f 70       	andi	r22, 0x0F	; 15
    111e:	11 96       	adiw	r26, 0x01	; 1
    1120:	4c 91       	ld	r20, X
    1122:	43 70       	andi	r20, 0x03	; 3
    1124:	42 95       	swap	r20
    1126:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    1128:	df 01       	movw	r26, r30
    112a:	56 97       	sbiw	r26, 0x16	; 22
    112c:	3c 91       	ld	r19, X
    112e:	53 2f       	mov	r21, r19
    1130:	52 95       	swap	r21
    1132:	55 0f       	add	r21, r21
    1134:	55 0f       	add	r21, r21
    1136:	50 7c       	andi	r21, 0xC0	; 192
    1138:	46 2b       	or	r20, r22
    113a:	45 2b       	or	r20, r21
    113c:	4c 83       	std	Y+4, r20	; 0x04
    113e:	11 96       	adiw	r26, 0x01	; 1
    1140:	4c 91       	ld	r20, X
    1142:	42 95       	swap	r20
    1144:	44 0f       	add	r20, r20
    1146:	44 0f       	add	r20, r20
    1148:	40 7c       	andi	r20, 0xC0	; 192
    114a:	36 95       	lsr	r19
    114c:	36 95       	lsr	r19
    114e:	34 2b       	or	r19, r20
    1150:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    1152:	df 01       	movw	r26, r30
    1154:	54 97       	sbiw	r26, 0x14	; 20
    1156:	3c 91       	ld	r19, X
    1158:	3e 83       	std	Y+6, r19	; 0x06
    115a:	11 96       	adiw	r26, 0x01	; 1
    115c:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    115e:	df 01       	movw	r26, r30
    1160:	52 97       	sbiw	r26, 0x12	; 18
    1162:	3c 91       	ld	r19, X
    1164:	53 2f       	mov	r21, r19
    1166:	55 0f       	add	r21, r21
    1168:	55 0f       	add	r21, r21
    116a:	43 70       	andi	r20, 0x03	; 3
    116c:	45 2b       	or	r20, r21
    116e:	4f 83       	std	Y+7, r20	; 0x07
    1170:	63 2f       	mov	r22, r19
    1172:	62 95       	swap	r22
    1174:	66 95       	lsr	r22
    1176:	66 95       	lsr	r22
    1178:	63 70       	andi	r22, 0x03	; 3
    117a:	11 96       	adiw	r26, 0x01	; 1
    117c:	4c 91       	ld	r20, X
    117e:	43 70       	andi	r20, 0x03	; 3
    1180:	44 0f       	add	r20, r20
    1182:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    1184:	df 01       	movw	r26, r30
    1186:	50 97       	sbiw	r26, 0x10	; 16
    1188:	3c 91       	ld	r19, X
    118a:	53 2f       	mov	r21, r19
    118c:	52 95       	swap	r21
    118e:	50 7f       	andi	r21, 0xF0	; 240
    1190:	46 2b       	or	r20, r22
    1192:	45 2b       	or	r20, r21
    1194:	48 87       	std	Y+8, r20	; 0x08
    1196:	63 2f       	mov	r22, r19
    1198:	62 95       	swap	r22
    119a:	6f 70       	andi	r22, 0x0F	; 15
    119c:	11 96       	adiw	r26, 0x01	; 1
    119e:	4c 91       	ld	r20, X
    11a0:	43 70       	andi	r20, 0x03	; 3
    11a2:	42 95       	swap	r20
    11a4:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    11a6:	df 01       	movw	r26, r30
    11a8:	1e 97       	sbiw	r26, 0x0e	; 14
    11aa:	3c 91       	ld	r19, X
    11ac:	53 2f       	mov	r21, r19
    11ae:	52 95       	swap	r21
    11b0:	55 0f       	add	r21, r21
    11b2:	55 0f       	add	r21, r21
    11b4:	50 7c       	andi	r21, 0xC0	; 192
    11b6:	46 2b       	or	r20, r22
    11b8:	45 2b       	or	r20, r21
    11ba:	49 87       	std	Y+9, r20	; 0x09
    11bc:	11 96       	adiw	r26, 0x01	; 1
    11be:	4c 91       	ld	r20, X
    11c0:	42 95       	swap	r20
    11c2:	44 0f       	add	r20, r20
    11c4:	44 0f       	add	r20, r20
    11c6:	40 7c       	andi	r20, 0xC0	; 192
    11c8:	36 95       	lsr	r19
    11ca:	36 95       	lsr	r19
    11cc:	34 2b       	or	r19, r20
    11ce:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    11d0:	df 01       	movw	r26, r30
    11d2:	1c 97       	sbiw	r26, 0x0c	; 12
    11d4:	3c 91       	ld	r19, X
    11d6:	3b 87       	std	Y+11, r19	; 0x0b
    11d8:	11 96       	adiw	r26, 0x01	; 1
    11da:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    11dc:	df 01       	movw	r26, r30
    11de:	1a 97       	sbiw	r26, 0x0a	; 10
    11e0:	3c 91       	ld	r19, X
    11e2:	53 2f       	mov	r21, r19
    11e4:	55 0f       	add	r21, r21
    11e6:	55 0f       	add	r21, r21
    11e8:	43 70       	andi	r20, 0x03	; 3
    11ea:	45 2b       	or	r20, r21
    11ec:	4c 87       	std	Y+12, r20	; 0x0c
    11ee:	63 2f       	mov	r22, r19
    11f0:	62 95       	swap	r22
    11f2:	66 95       	lsr	r22
    11f4:	66 95       	lsr	r22
    11f6:	63 70       	andi	r22, 0x03	; 3
    11f8:	11 96       	adiw	r26, 0x01	; 1
    11fa:	4c 91       	ld	r20, X
    11fc:	43 70       	andi	r20, 0x03	; 3
    11fe:	44 0f       	add	r20, r20
    1200:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    1202:	df 01       	movw	r26, r30
    1204:	18 97       	sbiw	r26, 0x08	; 8
    1206:	3c 91       	ld	r19, X
    1208:	53 2f       	mov	r21, r19
    120a:	52 95       	swap	r21
    120c:	50 7f       	andi	r21, 0xF0	; 240
    120e:	46 2b       	or	r20, r22
    1210:	45 2b       	or	r20, r21
    1212:	4d 87       	std	Y+13, r20	; 0x0d
    1214:	63 2f       	mov	r22, r19
    1216:	62 95       	swap	r22
    1218:	6f 70       	andi	r22, 0x0F	; 15
    121a:	11 96       	adiw	r26, 0x01	; 1
    121c:	4c 91       	ld	r20, X
    121e:	43 70       	andi	r20, 0x03	; 3
    1220:	42 95       	swap	r20
    1222:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    1224:	df 01       	movw	r26, r30
    1226:	16 97       	sbiw	r26, 0x06	; 6
    1228:	3c 91       	ld	r19, X
    122a:	53 2f       	mov	r21, r19
    122c:	52 95       	swap	r21
    122e:	55 0f       	add	r21, r21
    1230:	55 0f       	add	r21, r21
    1232:	50 7c       	andi	r21, 0xC0	; 192
    1234:	46 2b       	or	r20, r22
    1236:	45 2b       	or	r20, r21
    1238:	4e 87       	std	Y+14, r20	; 0x0e
    123a:	11 96       	adiw	r26, 0x01	; 1
    123c:	4c 91       	ld	r20, X
    123e:	42 95       	swap	r20
    1240:	44 0f       	add	r20, r20
    1242:	44 0f       	add	r20, r20
    1244:	40 7c       	andi	r20, 0xC0	; 192
    1246:	36 95       	lsr	r19
    1248:	36 95       	lsr	r19
    124a:	34 2b       	or	r19, r20
    124c:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    124e:	df 01       	movw	r26, r30
    1250:	14 97       	sbiw	r26, 0x04	; 4
    1252:	3c 91       	ld	r19, X
    1254:	38 8b       	std	Y+16, r19	; 0x10
    1256:	11 96       	adiw	r26, 0x01	; 1
    1258:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    125a:	df 01       	movw	r26, r30
    125c:	12 97       	sbiw	r26, 0x02	; 2
    125e:	3c 91       	ld	r19, X
    1260:	53 2f       	mov	r21, r19
    1262:	55 0f       	add	r21, r21
    1264:	55 0f       	add	r21, r21
    1266:	43 70       	andi	r20, 0x03	; 3
    1268:	45 2b       	or	r20, r21
    126a:	49 8b       	std	Y+17, r20	; 0x11
    126c:	32 95       	swap	r19
    126e:	36 95       	lsr	r19
    1270:	36 95       	lsr	r19
    1272:	33 70       	andi	r19, 0x03	; 3
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	4c 91       	ld	r20, X
    1278:	43 70       	andi	r20, 0x03	; 3
    127a:	44 0f       	add	r20, r20
    127c:	44 0f       	add	r20, r20
    127e:	83 2b       	or	r24, r19
    1280:	84 2b       	or	r24, r20
    1282:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    1284:	80 91 e0 02 	lds	r24, 0x02E0
    1288:	38 2f       	mov	r19, r24
    128a:	32 95       	swap	r19
    128c:	33 0f       	add	r19, r19
    128e:	33 0f       	add	r19, r19
    1290:	30 7c       	andi	r19, 0xC0	; 192
    1292:	92 2b       	or	r25, r18
    1294:	93 2b       	or	r25, r19
    1296:	9b 8b       	std	Y+19, r25	; 0x13
    1298:	93 81       	ldd	r25, Z+3	; 0x03
    129a:	92 95       	swap	r25
    129c:	99 0f       	add	r25, r25
    129e:	99 0f       	add	r25, r25
    12a0:	90 7c       	andi	r25, 0xC0	; 192
    12a2:	86 95       	lsr	r24
    12a4:	86 95       	lsr	r24
    12a6:	89 2b       	or	r24, r25
    12a8:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    12aa:	80 91 e2 02 	lds	r24, 0x02E2
    12ae:	8d 8b       	std	Y+21, r24	; 0x15
    12b0:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    12b2:	80 91 e4 02 	lds	r24, 0x02E4
    12b6:	28 2f       	mov	r18, r24
    12b8:	22 0f       	add	r18, r18
    12ba:	22 0f       	add	r18, r18
    12bc:	93 70       	andi	r25, 0x03	; 3
    12be:	92 2b       	or	r25, r18
    12c0:	9e 8b       	std	Y+22, r25	; 0x16
    12c2:	38 2f       	mov	r19, r24
    12c4:	32 95       	swap	r19
    12c6:	36 95       	lsr	r19
    12c8:	36 95       	lsr	r19
    12ca:	33 70       	andi	r19, 0x03	; 3
    12cc:	97 81       	ldd	r25, Z+7	; 0x07
    12ce:	93 70       	andi	r25, 0x03	; 3
    12d0:	99 0f       	add	r25, r25
    12d2:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    12d4:	80 91 e6 02 	lds	r24, 0x02E6
    12d8:	28 2f       	mov	r18, r24
    12da:	22 95       	swap	r18
    12dc:	20 7f       	andi	r18, 0xF0	; 240
    12de:	93 2b       	or	r25, r19
    12e0:	92 2b       	or	r25, r18
    12e2:	9f 8b       	std	Y+23, r25	; 0x17
    12e4:	38 2f       	mov	r19, r24
    12e6:	32 95       	swap	r19
    12e8:	3f 70       	andi	r19, 0x0F	; 15
    12ea:	91 85       	ldd	r25, Z+9	; 0x09
    12ec:	93 70       	andi	r25, 0x03	; 3
    12ee:	92 95       	swap	r25
    12f0:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    12f2:	80 91 e8 02 	lds	r24, 0x02E8
    12f6:	28 2f       	mov	r18, r24
    12f8:	22 95       	swap	r18
    12fa:	22 0f       	add	r18, r18
    12fc:	22 0f       	add	r18, r18
    12fe:	20 7c       	andi	r18, 0xC0	; 192
    1300:	93 2b       	or	r25, r19
    1302:	92 2b       	or	r25, r18
    1304:	98 8f       	std	Y+24, r25	; 0x18
    1306:	93 85       	ldd	r25, Z+11	; 0x0b
    1308:	92 95       	swap	r25
    130a:	99 0f       	add	r25, r25
    130c:	99 0f       	add	r25, r25
    130e:	90 7c       	andi	r25, 0xC0	; 192
    1310:	86 95       	lsr	r24
    1312:	86 95       	lsr	r24
    1314:	89 2b       	or	r24, r25
    1316:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    1318:	80 91 ea 02 	lds	r24, 0x02EA
    131c:	8a 8f       	std	Y+26, r24	; 0x1a
    131e:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    1320:	80 91 ec 02 	lds	r24, 0x02EC
    1324:	28 2f       	mov	r18, r24
    1326:	22 0f       	add	r18, r18
    1328:	22 0f       	add	r18, r18
    132a:	93 70       	andi	r25, 0x03	; 3
    132c:	92 2b       	or	r25, r18
    132e:	9b 8f       	std	Y+27, r25	; 0x1b
    1330:	38 2f       	mov	r19, r24
    1332:	32 95       	swap	r19
    1334:	36 95       	lsr	r19
    1336:	36 95       	lsr	r19
    1338:	33 70       	andi	r19, 0x03	; 3
    133a:	97 85       	ldd	r25, Z+15	; 0x0f
    133c:	93 70       	andi	r25, 0x03	; 3
    133e:	99 0f       	add	r25, r25
    1340:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    1342:	80 91 ee 02 	lds	r24, 0x02EE
    1346:	28 2f       	mov	r18, r24
    1348:	22 95       	swap	r18
    134a:	20 7f       	andi	r18, 0xF0	; 240
    134c:	93 2b       	or	r25, r19
    134e:	92 2b       	or	r25, r18
    1350:	9c 8f       	std	Y+28, r25	; 0x1c
    1352:	38 2f       	mov	r19, r24
    1354:	32 95       	swap	r19
    1356:	3f 70       	andi	r19, 0x0F	; 15
    1358:	91 89       	ldd	r25, Z+17	; 0x11
    135a:	93 70       	andi	r25, 0x03	; 3
    135c:	92 95       	swap	r25
    135e:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    1360:	80 91 f0 02 	lds	r24, 0x02F0
    1364:	28 2f       	mov	r18, r24
    1366:	22 95       	swap	r18
    1368:	22 0f       	add	r18, r18
    136a:	22 0f       	add	r18, r18
    136c:	20 7c       	andi	r18, 0xC0	; 192
    136e:	93 2b       	or	r25, r19
    1370:	92 2b       	or	r25, r18
    1372:	9d 8f       	std	Y+29, r25	; 0x1d
    1374:	93 89       	ldd	r25, Z+19	; 0x13
    1376:	92 95       	swap	r25
    1378:	99 0f       	add	r25, r25
    137a:	99 0f       	add	r25, r25
    137c:	90 7c       	andi	r25, 0xC0	; 192
    137e:	86 95       	lsr	r24
    1380:	86 95       	lsr	r24
    1382:	89 2b       	or	r24, r25
    1384:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    1386:	80 91 f2 02 	lds	r24, 0x02F2
    138a:	8f 8f       	std	Y+31, r24	; 0x1f
    138c:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    138e:	80 91 f4 02 	lds	r24, 0x02F4
    1392:	28 2f       	mov	r18, r24
    1394:	22 0f       	add	r18, r18
    1396:	22 0f       	add	r18, r18
    1398:	93 70       	andi	r25, 0x03	; 3
    139a:	92 2b       	or	r25, r18
    139c:	98 a3       	lds	r25, 0x58
    139e:	38 2f       	mov	r19, r24
    13a0:	32 95       	swap	r19
    13a2:	36 95       	lsr	r19
    13a4:	36 95       	lsr	r19
    13a6:	33 70       	andi	r19, 0x03	; 3
    13a8:	97 89       	ldd	r25, Z+23	; 0x17
    13aa:	93 70       	andi	r25, 0x03	; 3
    13ac:	99 0f       	add	r25, r25
    13ae:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    13b0:	80 91 f6 02 	lds	r24, 0x02F6
    13b4:	28 2f       	mov	r18, r24
    13b6:	22 95       	swap	r18
    13b8:	20 7f       	andi	r18, 0xF0	; 240
    13ba:	93 2b       	or	r25, r19
    13bc:	92 2b       	or	r25, r18
    13be:	99 a3       	lds	r25, 0x59
    13c0:	38 2f       	mov	r19, r24
    13c2:	32 95       	swap	r19
    13c4:	3f 70       	andi	r19, 0x0F	; 15
    13c6:	91 8d       	ldd	r25, Z+25	; 0x19
    13c8:	93 70       	andi	r25, 0x03	; 3
    13ca:	92 95       	swap	r25
    13cc:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    13ce:	80 91 f8 02 	lds	r24, 0x02F8
    13d2:	28 2f       	mov	r18, r24
    13d4:	22 95       	swap	r18
    13d6:	22 0f       	add	r18, r18
    13d8:	22 0f       	add	r18, r18
    13da:	20 7c       	andi	r18, 0xC0	; 192
    13dc:	93 2b       	or	r25, r19
    13de:	92 2b       	or	r25, r18
    13e0:	9a a3       	lds	r25, 0x5a
    13e2:	93 8d       	ldd	r25, Z+27	; 0x1b
    13e4:	92 95       	swap	r25
    13e6:	99 0f       	add	r25, r25
    13e8:	99 0f       	add	r25, r25
    13ea:	90 7c       	andi	r25, 0xC0	; 192
    13ec:	86 95       	lsr	r24
    13ee:	86 95       	lsr	r24
    13f0:	89 2b       	or	r24, r25
    13f2:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    13f4:	80 91 fa 02 	lds	r24, 0x02FA
    13f8:	8c a3       	lds	r24, 0x5c
    13fa:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    13fc:	80 91 fc 02 	lds	r24, 0x02FC
    1400:	28 2f       	mov	r18, r24
    1402:	22 0f       	add	r18, r18
    1404:	22 0f       	add	r18, r18
    1406:	93 70       	andi	r25, 0x03	; 3
    1408:	92 2b       	or	r25, r18
    140a:	9d a3       	lds	r25, 0x5d
    140c:	82 95       	swap	r24
    140e:	86 95       	lsr	r24
    1410:	86 95       	lsr	r24
    1412:	83 70       	andi	r24, 0x03	; 3
    1414:	2e a1       	lds	r18, 0x4e
    1416:	20 7f       	andi	r18, 0xF0	; 240
    1418:	97 8d       	ldd	r25, Z+31	; 0x1f
    141a:	93 70       	andi	r25, 0x03	; 3
    141c:	99 0f       	add	r25, r25
    141e:	99 0f       	add	r25, r25
    1420:	82 2b       	or	r24, r18
    1422:	89 2b       	or	r24, r25
    1424:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    1426:	80 91 fe 02 	lds	r24, 0x02FE
    142a:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    142c:	80 91 ff 02 	lds	r24, 0x02FF
    1430:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    1432:	80 91 00 03 	lds	r24, 0x0300
    1436:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    1438:	80 91 01 03 	lds	r24, 0x0301
    143c:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    143e:	80 91 02 03 	lds	r24, 0x0302
    1442:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    1444:	0e 94 2a 08 	call	0x1054	; 0x1054 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    1448:	80 91 80 03 	lds	r24, 0x0380
    144c:	8f 77       	andi	r24, 0x7F	; 127
    144e:	80 93 80 03 	sts	0x0380, r24
	current_patch.mode = MEMORY;
    1452:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    1456:	21 2f       	mov	r18, r17
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	8b e2       	ldi	r24, 0x2B	; 43
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	28 9f       	mul	r18, r24
    1460:	b0 01       	movw	r22, r0
    1462:	29 9f       	mul	r18, r25
    1464:	70 0d       	add	r23, r0
    1466:	38 9f       	mul	r19, r24
    1468:	70 0d       	add	r23, r0
    146a:	11 24       	eor	r1, r1
    146c:	60 50       	subi	r22, 0x00	; 0
    146e:	70 40       	sbci	r23, 0x00	; 0
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	4b e2       	ldi	r20, 0x2B	; 43
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <__eeupd_block_m6450a>
}	
    147c:	ab 96       	adiw	r28, 0x2b	; 43
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	08 95       	ret

00001490 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	c3 54       	subi	r28, 0x43	; 67
    149c:	d0 40       	sbci	r29, 0x00	; 0
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	2b e2       	ldi	r18, 0x2B	; 43
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	82 9f       	mul	r24, r18
    14b0:	b0 01       	movw	r22, r0
    14b2:	83 9f       	mul	r24, r19
    14b4:	70 0d       	add	r23, r0
    14b6:	92 9f       	mul	r25, r18
    14b8:	70 0d       	add	r23, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	60 50       	subi	r22, 0x00	; 0
    14be:	70 40       	sbci	r23, 0x00	; 0
    14c0:	ce 01       	movw	r24, r28
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	4b e2       	ldi	r20, 0x2B	; 43
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    14cc:	ee ed       	ldi	r30, 0xDE	; 222
    14ce:	f2 e0       	ldi	r31, 0x02	; 2
    14d0:	8a 89       	ldd	r24, Y+18	; 0x12
    14d2:	28 2f       	mov	r18, r24
    14d4:	22 95       	swap	r18
    14d6:	2f 70       	andi	r18, 0x0F	; 15
    14d8:	9b 89       	ldd	r25, Y+19	; 0x13
    14da:	39 2f       	mov	r19, r25
    14dc:	32 95       	swap	r19
    14de:	30 7f       	andi	r19, 0xF0	; 240
    14e0:	32 2b       	or	r19, r18
    14e2:	29 2f       	mov	r18, r25
    14e4:	22 95       	swap	r18
    14e6:	2f 70       	andi	r18, 0x0F	; 15
    14e8:	23 70       	andi	r18, 0x03	; 3
    14ea:	30 93 de 02 	sts	0x02DE, r19
    14ee:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    14f2:	df 01       	movw	r26, r30
    14f4:	5a 97       	sbiw	r26, 0x1a	; 26
    14f6:	4a 81       	ldd	r20, Y+2	; 0x02
    14f8:	46 95       	lsr	r20
    14fa:	46 95       	lsr	r20
    14fc:	2b 81       	ldd	r18, Y+3	; 0x03
    14fe:	32 2f       	mov	r19, r18
    1500:	32 95       	swap	r19
    1502:	33 0f       	add	r19, r19
    1504:	33 0f       	add	r19, r19
    1506:	30 7c       	andi	r19, 0xC0	; 192
    1508:	43 2b       	or	r20, r19
    150a:	32 2f       	mov	r19, r18
    150c:	36 95       	lsr	r19
    150e:	36 95       	lsr	r19
    1510:	33 70       	andi	r19, 0x03	; 3
    1512:	4c 93       	st	X, r20
    1514:	11 96       	adiw	r26, 0x01	; 1
    1516:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    1518:	df 01       	movw	r26, r30
    151a:	58 97       	sbiw	r26, 0x18	; 24
    151c:	32 2f       	mov	r19, r18
    151e:	32 95       	swap	r19
    1520:	3f 70       	andi	r19, 0x0F	; 15
    1522:	2c 81       	ldd	r18, Y+4	; 0x04
    1524:	42 2f       	mov	r20, r18
    1526:	42 95       	swap	r20
    1528:	40 7f       	andi	r20, 0xF0	; 240
    152a:	43 2b       	or	r20, r19
    152c:	32 2f       	mov	r19, r18
    152e:	32 95       	swap	r19
    1530:	3f 70       	andi	r19, 0x0F	; 15
    1532:	33 70       	andi	r19, 0x03	; 3
    1534:	4c 93       	st	X, r20
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    153a:	df 01       	movw	r26, r30
    153c:	56 97       	sbiw	r26, 0x16	; 22
    153e:	22 95       	swap	r18
    1540:	26 95       	lsr	r18
    1542:	26 95       	lsr	r18
    1544:	23 70       	andi	r18, 0x03	; 3
    1546:	3d 81       	ldd	r19, Y+5	; 0x05
    1548:	43 2f       	mov	r20, r19
    154a:	44 0f       	add	r20, r20
    154c:	44 0f       	add	r20, r20
    154e:	24 2b       	or	r18, r20
    1550:	32 95       	swap	r19
    1552:	36 95       	lsr	r19
    1554:	36 95       	lsr	r19
    1556:	33 70       	andi	r19, 0x03	; 3
    1558:	2c 93       	st	X, r18
    155a:	11 96       	adiw	r26, 0x01	; 1
    155c:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    155e:	df 01       	movw	r26, r30
    1560:	54 97       	sbiw	r26, 0x14	; 20
    1562:	4e 81       	ldd	r20, Y+6	; 0x06
    1564:	2f 81       	ldd	r18, Y+7	; 0x07
    1566:	32 2f       	mov	r19, r18
    1568:	33 70       	andi	r19, 0x03	; 3
    156a:	4c 93       	st	X, r20
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1570:	df 01       	movw	r26, r30
    1572:	52 97       	sbiw	r26, 0x12	; 18
    1574:	32 2f       	mov	r19, r18
    1576:	36 95       	lsr	r19
    1578:	36 95       	lsr	r19
    157a:	28 85       	ldd	r18, Y+8	; 0x08
    157c:	42 2f       	mov	r20, r18
    157e:	42 95       	swap	r20
    1580:	44 0f       	add	r20, r20
    1582:	44 0f       	add	r20, r20
    1584:	40 7c       	andi	r20, 0xC0	; 192
    1586:	43 2b       	or	r20, r19
    1588:	32 2f       	mov	r19, r18
    158a:	36 95       	lsr	r19
    158c:	36 95       	lsr	r19
    158e:	33 70       	andi	r19, 0x03	; 3
    1590:	4c 93       	st	X, r20
    1592:	11 96       	adiw	r26, 0x01	; 1
    1594:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1596:	df 01       	movw	r26, r30
    1598:	50 97       	sbiw	r26, 0x10	; 16
    159a:	32 2f       	mov	r19, r18
    159c:	32 95       	swap	r19
    159e:	3f 70       	andi	r19, 0x0F	; 15
    15a0:	29 85       	ldd	r18, Y+9	; 0x09
    15a2:	42 2f       	mov	r20, r18
    15a4:	42 95       	swap	r20
    15a6:	40 7f       	andi	r20, 0xF0	; 240
    15a8:	43 2b       	or	r20, r19
    15aa:	32 2f       	mov	r19, r18
    15ac:	32 95       	swap	r19
    15ae:	3f 70       	andi	r19, 0x0F	; 15
    15b0:	33 70       	andi	r19, 0x03	; 3
    15b2:	4c 93       	st	X, r20
    15b4:	11 96       	adiw	r26, 0x01	; 1
    15b6:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    15b8:	df 01       	movw	r26, r30
    15ba:	1e 97       	sbiw	r26, 0x0e	; 14
    15bc:	22 95       	swap	r18
    15be:	26 95       	lsr	r18
    15c0:	26 95       	lsr	r18
    15c2:	23 70       	andi	r18, 0x03	; 3
    15c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    15c6:	43 2f       	mov	r20, r19
    15c8:	44 0f       	add	r20, r20
    15ca:	44 0f       	add	r20, r20
    15cc:	24 2b       	or	r18, r20
    15ce:	32 95       	swap	r19
    15d0:	36 95       	lsr	r19
    15d2:	36 95       	lsr	r19
    15d4:	33 70       	andi	r19, 0x03	; 3
    15d6:	2c 93       	st	X, r18
    15d8:	11 96       	adiw	r26, 0x01	; 1
    15da:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    15dc:	df 01       	movw	r26, r30
    15de:	1c 97       	sbiw	r26, 0x0c	; 12
    15e0:	4b 85       	ldd	r20, Y+11	; 0x0b
    15e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15e4:	32 2f       	mov	r19, r18
    15e6:	33 70       	andi	r19, 0x03	; 3
    15e8:	4c 93       	st	X, r20
    15ea:	11 96       	adiw	r26, 0x01	; 1
    15ec:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    15ee:	df 01       	movw	r26, r30
    15f0:	1a 97       	sbiw	r26, 0x0a	; 10
    15f2:	32 2f       	mov	r19, r18
    15f4:	36 95       	lsr	r19
    15f6:	36 95       	lsr	r19
    15f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    15fa:	42 2f       	mov	r20, r18
    15fc:	42 95       	swap	r20
    15fe:	44 0f       	add	r20, r20
    1600:	44 0f       	add	r20, r20
    1602:	40 7c       	andi	r20, 0xC0	; 192
    1604:	43 2b       	or	r20, r19
    1606:	32 2f       	mov	r19, r18
    1608:	36 95       	lsr	r19
    160a:	36 95       	lsr	r19
    160c:	33 70       	andi	r19, 0x03	; 3
    160e:	4c 93       	st	X, r20
    1610:	11 96       	adiw	r26, 0x01	; 1
    1612:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    1614:	df 01       	movw	r26, r30
    1616:	18 97       	sbiw	r26, 0x08	; 8
    1618:	32 2f       	mov	r19, r18
    161a:	32 95       	swap	r19
    161c:	3f 70       	andi	r19, 0x0F	; 15
    161e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1620:	42 2f       	mov	r20, r18
    1622:	42 95       	swap	r20
    1624:	40 7f       	andi	r20, 0xF0	; 240
    1626:	43 2b       	or	r20, r19
    1628:	32 2f       	mov	r19, r18
    162a:	32 95       	swap	r19
    162c:	3f 70       	andi	r19, 0x0F	; 15
    162e:	33 70       	andi	r19, 0x03	; 3
    1630:	4c 93       	st	X, r20
    1632:	11 96       	adiw	r26, 0x01	; 1
    1634:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    1636:	df 01       	movw	r26, r30
    1638:	16 97       	sbiw	r26, 0x06	; 6
    163a:	22 95       	swap	r18
    163c:	26 95       	lsr	r18
    163e:	26 95       	lsr	r18
    1640:	23 70       	andi	r18, 0x03	; 3
    1642:	3f 85       	ldd	r19, Y+15	; 0x0f
    1644:	43 2f       	mov	r20, r19
    1646:	44 0f       	add	r20, r20
    1648:	44 0f       	add	r20, r20
    164a:	24 2b       	or	r18, r20
    164c:	32 95       	swap	r19
    164e:	36 95       	lsr	r19
    1650:	36 95       	lsr	r19
    1652:	33 70       	andi	r19, 0x03	; 3
    1654:	2c 93       	st	X, r18
    1656:	11 96       	adiw	r26, 0x01	; 1
    1658:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    165a:	df 01       	movw	r26, r30
    165c:	14 97       	sbiw	r26, 0x04	; 4
    165e:	48 89       	ldd	r20, Y+16	; 0x10
    1660:	29 89       	ldd	r18, Y+17	; 0x11
    1662:	32 2f       	mov	r19, r18
    1664:	33 70       	andi	r19, 0x03	; 3
    1666:	4c 93       	st	X, r20
    1668:	11 96       	adiw	r26, 0x01	; 1
    166a:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    166c:	df 01       	movw	r26, r30
    166e:	12 97       	sbiw	r26, 0x02	; 2
    1670:	26 95       	lsr	r18
    1672:	26 95       	lsr	r18
    1674:	38 2f       	mov	r19, r24
    1676:	32 95       	swap	r19
    1678:	33 0f       	add	r19, r19
    167a:	33 0f       	add	r19, r19
    167c:	30 7c       	andi	r19, 0xC0	; 192
    167e:	23 2b       	or	r18, r19
    1680:	86 95       	lsr	r24
    1682:	86 95       	lsr	r24
    1684:	83 70       	andi	r24, 0x03	; 3
    1686:	2c 93       	st	X, r18
    1688:	11 96       	adiw	r26, 0x01	; 1
    168a:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    168c:	92 95       	swap	r25
    168e:	96 95       	lsr	r25
    1690:	96 95       	lsr	r25
    1692:	93 70       	andi	r25, 0x03	; 3
    1694:	8c 89       	ldd	r24, Y+20	; 0x14
    1696:	28 2f       	mov	r18, r24
    1698:	22 0f       	add	r18, r18
    169a:	22 0f       	add	r18, r18
    169c:	92 2b       	or	r25, r18
    169e:	82 95       	swap	r24
    16a0:	86 95       	lsr	r24
    16a2:	86 95       	lsr	r24
    16a4:	83 70       	andi	r24, 0x03	; 3
    16a6:	90 93 e0 02 	sts	0x02E0, r25
    16aa:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    16ac:	2d 89       	ldd	r18, Y+21	; 0x15
    16ae:	8e 89       	ldd	r24, Y+22	; 0x16
    16b0:	98 2f       	mov	r25, r24
    16b2:	93 70       	andi	r25, 0x03	; 3
    16b4:	20 93 e2 02 	sts	0x02E2, r18
    16b8:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    16ba:	98 2f       	mov	r25, r24
    16bc:	96 95       	lsr	r25
    16be:	96 95       	lsr	r25
    16c0:	8f 89       	ldd	r24, Y+23	; 0x17
    16c2:	28 2f       	mov	r18, r24
    16c4:	22 95       	swap	r18
    16c6:	22 0f       	add	r18, r18
    16c8:	22 0f       	add	r18, r18
    16ca:	20 7c       	andi	r18, 0xC0	; 192
    16cc:	29 2b       	or	r18, r25
    16ce:	98 2f       	mov	r25, r24
    16d0:	96 95       	lsr	r25
    16d2:	96 95       	lsr	r25
    16d4:	93 70       	andi	r25, 0x03	; 3
    16d6:	20 93 e4 02 	sts	0x02E4, r18
    16da:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    16dc:	98 2f       	mov	r25, r24
    16de:	92 95       	swap	r25
    16e0:	9f 70       	andi	r25, 0x0F	; 15
    16e2:	88 8d       	ldd	r24, Y+24	; 0x18
    16e4:	28 2f       	mov	r18, r24
    16e6:	22 95       	swap	r18
    16e8:	20 7f       	andi	r18, 0xF0	; 240
    16ea:	29 2b       	or	r18, r25
    16ec:	98 2f       	mov	r25, r24
    16ee:	92 95       	swap	r25
    16f0:	9f 70       	andi	r25, 0x0F	; 15
    16f2:	93 70       	andi	r25, 0x03	; 3
    16f4:	20 93 e6 02 	sts	0x02E6, r18
    16f8:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    16fa:	82 95       	swap	r24
    16fc:	86 95       	lsr	r24
    16fe:	86 95       	lsr	r24
    1700:	83 70       	andi	r24, 0x03	; 3
    1702:	99 8d       	ldd	r25, Y+25	; 0x19
    1704:	29 2f       	mov	r18, r25
    1706:	22 0f       	add	r18, r18
    1708:	22 0f       	add	r18, r18
    170a:	82 2b       	or	r24, r18
    170c:	92 95       	swap	r25
    170e:	96 95       	lsr	r25
    1710:	96 95       	lsr	r25
    1712:	93 70       	andi	r25, 0x03	; 3
    1714:	80 93 e8 02 	sts	0x02E8, r24
    1718:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    171a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    171c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    171e:	98 2f       	mov	r25, r24
    1720:	93 70       	andi	r25, 0x03	; 3
    1722:	20 93 ea 02 	sts	0x02EA, r18
    1726:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    1728:	98 2f       	mov	r25, r24
    172a:	96 95       	lsr	r25
    172c:	96 95       	lsr	r25
    172e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1730:	28 2f       	mov	r18, r24
    1732:	22 95       	swap	r18
    1734:	22 0f       	add	r18, r18
    1736:	22 0f       	add	r18, r18
    1738:	20 7c       	andi	r18, 0xC0	; 192
    173a:	29 2b       	or	r18, r25
    173c:	98 2f       	mov	r25, r24
    173e:	96 95       	lsr	r25
    1740:	96 95       	lsr	r25
    1742:	93 70       	andi	r25, 0x03	; 3
    1744:	20 93 ec 02 	sts	0x02EC, r18
    1748:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    174a:	98 2f       	mov	r25, r24
    174c:	92 95       	swap	r25
    174e:	9f 70       	andi	r25, 0x0F	; 15
    1750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1752:	28 2f       	mov	r18, r24
    1754:	22 95       	swap	r18
    1756:	20 7f       	andi	r18, 0xF0	; 240
    1758:	29 2b       	or	r18, r25
    175a:	98 2f       	mov	r25, r24
    175c:	92 95       	swap	r25
    175e:	9f 70       	andi	r25, 0x0F	; 15
    1760:	93 70       	andi	r25, 0x03	; 3
    1762:	20 93 ee 02 	sts	0x02EE, r18
    1766:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    1768:	82 95       	swap	r24
    176a:	86 95       	lsr	r24
    176c:	86 95       	lsr	r24
    176e:	83 70       	andi	r24, 0x03	; 3
    1770:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1772:	29 2f       	mov	r18, r25
    1774:	22 0f       	add	r18, r18
    1776:	22 0f       	add	r18, r18
    1778:	82 2b       	or	r24, r18
    177a:	92 95       	swap	r25
    177c:	96 95       	lsr	r25
    177e:	96 95       	lsr	r25
    1780:	93 70       	andi	r25, 0x03	; 3
    1782:	80 93 f0 02 	sts	0x02F0, r24
    1786:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    1788:	2f 8d       	ldd	r18, Y+31	; 0x1f
    178a:	88 a1       	lds	r24, 0x48
    178c:	98 2f       	mov	r25, r24
    178e:	93 70       	andi	r25, 0x03	; 3
    1790:	20 93 f2 02 	sts	0x02F2, r18
    1794:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1796:	98 2f       	mov	r25, r24
    1798:	96 95       	lsr	r25
    179a:	96 95       	lsr	r25
    179c:	89 a1       	lds	r24, 0x49
    179e:	28 2f       	mov	r18, r24
    17a0:	22 95       	swap	r18
    17a2:	22 0f       	add	r18, r18
    17a4:	22 0f       	add	r18, r18
    17a6:	20 7c       	andi	r18, 0xC0	; 192
    17a8:	29 2b       	or	r18, r25
    17aa:	98 2f       	mov	r25, r24
    17ac:	96 95       	lsr	r25
    17ae:	96 95       	lsr	r25
    17b0:	93 70       	andi	r25, 0x03	; 3
    17b2:	20 93 f4 02 	sts	0x02F4, r18
    17b6:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    17b8:	98 2f       	mov	r25, r24
    17ba:	92 95       	swap	r25
    17bc:	9f 70       	andi	r25, 0x0F	; 15
    17be:	8a a1       	lds	r24, 0x4a
    17c0:	28 2f       	mov	r18, r24
    17c2:	22 95       	swap	r18
    17c4:	20 7f       	andi	r18, 0xF0	; 240
    17c6:	29 2b       	or	r18, r25
    17c8:	98 2f       	mov	r25, r24
    17ca:	92 95       	swap	r25
    17cc:	9f 70       	andi	r25, 0x0F	; 15
    17ce:	93 70       	andi	r25, 0x03	; 3
    17d0:	20 93 f6 02 	sts	0x02F6, r18
    17d4:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    17d6:	82 95       	swap	r24
    17d8:	86 95       	lsr	r24
    17da:	86 95       	lsr	r24
    17dc:	83 70       	andi	r24, 0x03	; 3
    17de:	9b a1       	lds	r25, 0x4b
    17e0:	29 2f       	mov	r18, r25
    17e2:	22 0f       	add	r18, r18
    17e4:	22 0f       	add	r18, r18
    17e6:	82 2b       	or	r24, r18
    17e8:	92 95       	swap	r25
    17ea:	96 95       	lsr	r25
    17ec:	96 95       	lsr	r25
    17ee:	93 70       	andi	r25, 0x03	; 3
    17f0:	80 93 f8 02 	sts	0x02F8, r24
    17f4:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    17f6:	2c a1       	lds	r18, 0x4c
    17f8:	8d a1       	lds	r24, 0x4d
    17fa:	98 2f       	mov	r25, r24
    17fc:	93 70       	andi	r25, 0x03	; 3
    17fe:	20 93 fa 02 	sts	0x02FA, r18
    1802:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1804:	98 2f       	mov	r25, r24
    1806:	96 95       	lsr	r25
    1808:	96 95       	lsr	r25
    180a:	8e a1       	lds	r24, 0x4e
    180c:	28 2f       	mov	r18, r24
    180e:	22 95       	swap	r18
    1810:	22 0f       	add	r18, r18
    1812:	22 0f       	add	r18, r18
    1814:	20 7c       	andi	r18, 0xC0	; 192
    1816:	29 2b       	or	r18, r25
    1818:	86 95       	lsr	r24
    181a:	86 95       	lsr	r24
    181c:	98 2f       	mov	r25, r24
    181e:	93 70       	andi	r25, 0x03	; 3
    1820:	20 93 fc 02 	sts	0x02FC, r18
    1824:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    1826:	7f a1       	lds	r23, 0x4f
    1828:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    182c:	68 a5       	lds	r22, 0x68
    182e:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    1832:	89 a5       	lds	r24, 0x69
    1834:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    1838:	9a a5       	lds	r25, 0x6a
    183a:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    183e:	1b a5       	lds	r17, 0x6b
    1840:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1844:	de 01       	movw	r26, r28
    1846:	9c 96       	adiw	r26, 0x2c	; 44
    1848:	ef ef       	ldi	r30, 0xFF	; 255
    184a:	f1 e0       	ldi	r31, 0x01	; 1
    184c:	28 e0       	ldi	r18, 0x08	; 8
    184e:	01 90       	ld	r0, Z+
    1850:	0d 92       	st	X+, r0
    1852:	21 50       	subi	r18, 0x01	; 1
    1854:	e1 f7       	brne	.-8      	; 0x184e <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    1856:	e9 2f       	mov	r30, r25
    1858:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	9f 01       	movw	r18, r30
    185e:	22 0f       	add	r18, r18
    1860:	33 1f       	adc	r19, r19
    1862:	22 0f       	add	r18, r18
    1864:	33 1f       	adc	r19, r19
    1866:	a9 01       	movw	r20, r18
    1868:	44 0f       	add	r20, r20
    186a:	55 1f       	adc	r21, r21
    186c:	44 0f       	add	r20, r20
    186e:	55 1f       	adc	r21, r21
    1870:	44 0f       	add	r20, r20
    1872:	55 1f       	adc	r21, r21
    1874:	42 1b       	sub	r20, r18
    1876:	53 0b       	sbc	r21, r19
    1878:	4e 0f       	add	r20, r30
    187a:	5f 1f       	adc	r21, r31
    187c:	55 95       	asr	r21
    187e:	47 95       	ror	r20
    1880:	55 95       	asr	r21
    1882:	47 95       	ror	r20
    1884:	55 95       	asr	r21
    1886:	47 95       	ror	r20
    1888:	55 95       	asr	r21
    188a:	47 95       	ror	r20
    188c:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    188e:	fe 01       	movw	r30, r28
    1890:	e4 0f       	add	r30, r20
    1892:	f1 1d       	adc	r31, r1
    1894:	24 a5       	lds	r18, 0x64
    1896:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    189a:	de 01       	movw	r26, r28
    189c:	d4 96       	adiw	r26, 0x34	; 52
    189e:	e7 e0       	ldi	r30, 0x07	; 7
    18a0:	f2 e0       	ldi	r31, 0x02	; 2
    18a2:	28 e0       	ldi	r18, 0x08	; 8
    18a4:	01 90       	ld	r0, Z+
    18a6:	0d 92       	st	X+, r0
    18a8:	21 50       	subi	r18, 0x01	; 1
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    18ac:	29 2f       	mov	r18, r25
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	20 7e       	andi	r18, 0xE0	; 224
    18b2:	30 70       	andi	r19, 0x00	; 0
    18b4:	35 95       	asr	r19
    18b6:	27 95       	ror	r18
    18b8:	35 95       	asr	r19
    18ba:	27 95       	ror	r18
    18bc:	35 95       	asr	r19
    18be:	27 95       	ror	r18
    18c0:	83 70       	andi	r24, 0x03	; 3
    18c2:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    18c4:	42 2f       	mov	r20, r18
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	ca 01       	movw	r24, r20
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	9c 01       	movw	r18, r24
    18d4:	22 0f       	add	r18, r18
    18d6:	33 1f       	adc	r19, r19
    18d8:	22 0f       	add	r18, r18
    18da:	33 1f       	adc	r19, r19
    18dc:	22 0f       	add	r18, r18
    18de:	33 1f       	adc	r19, r19
    18e0:	28 1b       	sub	r18, r24
    18e2:	39 0b       	sbc	r19, r25
    18e4:	42 0f       	add	r20, r18
    18e6:	53 1f       	adc	r21, r19
    18e8:	ca 01       	movw	r24, r20
    18ea:	95 95       	asr	r25
    18ec:	87 95       	ror	r24
    18ee:	95 95       	asr	r25
    18f0:	87 95       	ror	r24
    18f2:	95 95       	asr	r25
    18f4:	87 95       	ror	r24
    18f6:	95 95       	asr	r25
    18f8:	87 95       	ror	r24
    18fa:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    18fc:	fe 01       	movw	r30, r28
    18fe:	e8 0f       	add	r30, r24
    1900:	f1 1d       	adc	r31, r1
    1902:	84 a9       	sts	0x44, r24
    1904:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    1908:	de 01       	movw	r26, r28
    190a:	dc 96       	adiw	r26, 0x3c	; 60
    190c:	ef e0       	ldi	r30, 0x0F	; 15
    190e:	f2 e0       	ldi	r31, 0x02	; 2
    1910:	88 e0       	ldi	r24, 0x08	; 8
    1912:	01 90       	ld	r0, Z+
    1914:	0d 92       	st	X+, r0
    1916:	81 50       	subi	r24, 0x01	; 1
    1918:	e1 f7       	brne	.-8      	; 0x1912 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    191a:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    191c:	46 2f       	mov	r20, r22
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	ca 01       	movw	r24, r20
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	9c 01       	movw	r18, r24
    192c:	22 0f       	add	r18, r18
    192e:	33 1f       	adc	r19, r19
    1930:	22 0f       	add	r18, r18
    1932:	33 1f       	adc	r19, r19
    1934:	22 0f       	add	r18, r18
    1936:	33 1f       	adc	r19, r19
    1938:	28 1b       	sub	r18, r24
    193a:	39 0b       	sbc	r19, r25
    193c:	42 0f       	add	r20, r18
    193e:	53 1f       	adc	r21, r19
    1940:	ca 01       	movw	r24, r20
    1942:	95 95       	asr	r25
    1944:	87 95       	ror	r24
    1946:	95 95       	asr	r25
    1948:	87 95       	ror	r24
    194a:	95 95       	asr	r25
    194c:	87 95       	ror	r24
    194e:	95 95       	asr	r25
    1950:	87 95       	ror	r24
    1952:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1954:	fe 01       	movw	r30, r28
    1956:	e8 0f       	add	r30, r24
    1958:	f1 1d       	adc	r31, r1
    195a:	84 ad       	sts	0x64, r24
    195c:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1960:	21 2f       	mov	r18, r17
    1962:	26 95       	lsr	r18
    1964:	27 95       	ror	r18
    1966:	22 27       	eor	r18, r18
    1968:	27 95       	ror	r18
    196a:	81 2f       	mov	r24, r17
    196c:	81 70       	andi	r24, 0x01	; 1
    196e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1970:	81 2f       	mov	r24, r17
    1972:	86 95       	lsr	r24
    1974:	86 95       	lsr	r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	81 70       	andi	r24, 0x01	; 1
    197a:	90 70       	andi	r25, 0x00	; 0
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1984:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1986:	81 2f       	mov	r24, r17
    1988:	86 95       	lsr	r24
    198a:	86 95       	lsr	r24
    198c:	86 95       	lsr	r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	81 70       	andi	r24, 0x01	; 1
    1992:	90 70       	andi	r25, 0x00	; 0
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1998:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    199a:	81 2f       	mov	r24, r17
    199c:	82 95       	swap	r24
    199e:	8f 70       	andi	r24, 0x0F	; 15
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	81 70       	andi	r24, 0x01	; 1
    19a4:	90 70       	andi	r25, 0x00	; 0
    19a6:	82 95       	swap	r24
    19a8:	92 95       	swap	r25
    19aa:	90 7f       	andi	r25, 0xF0	; 240
    19ac:	98 27       	eor	r25, r24
    19ae:	80 7f       	andi	r24, 0xF0	; 240
    19b0:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    19b2:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    19b4:	81 2f       	mov	r24, r17
    19b6:	82 95       	swap	r24
    19b8:	86 95       	lsr	r24
    19ba:	87 70       	andi	r24, 0x07	; 7
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	81 70       	andi	r24, 0x01	; 1
    19c0:	90 70       	andi	r25, 0x00	; 0
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	82 95       	swap	r24
    19c8:	92 95       	swap	r25
    19ca:	90 7f       	andi	r25, 0xF0	; 240
    19cc:	98 27       	eor	r25, r24
    19ce:	80 7f       	andi	r24, 0xF0	; 240
    19d0:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    19d2:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    19d4:	81 2f       	mov	r24, r17
    19d6:	82 95       	swap	r24
    19d8:	86 95       	lsr	r24
    19da:	86 95       	lsr	r24
    19dc:	83 70       	andi	r24, 0x03	; 3
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	81 70       	andi	r24, 0x01	; 1
    19e2:	90 70       	andi	r25, 0x00	; 0
    19e4:	00 24       	eor	r0, r0
    19e6:	96 95       	lsr	r25
    19e8:	87 95       	ror	r24
    19ea:	07 94       	ror	r0
    19ec:	96 95       	lsr	r25
    19ee:	87 95       	ror	r24
    19f0:	07 94       	ror	r0
    19f2:	98 2f       	mov	r25, r24
    19f4:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    19f6:	82 2b       	or	r24, r18
    19f8:	80 93 7e 03 	sts	0x037E, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    19fc:	87 2f       	mov	r24, r23
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	81 70       	andi	r24, 0x01	; 1
    1a02:	90 70       	andi	r25, 0x00	; 0
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1a10:	90 91 80 03 	lds	r25, 0x0380
    1a14:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1a16:	89 2b       	or	r24, r25
    1a18:	11 1f       	adc	r17, r17
    1a1a:	11 27       	eor	r17, r17
    1a1c:	11 1f       	adc	r17, r17
    1a1e:	11 0f       	add	r17, r17
    1a20:	11 0f       	add	r17, r17
    1a22:	81 2b       	or	r24, r17
    1a24:	80 93 80 03 	sts	0x0380, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1a28:	0e 94 2a 08 	call	0x1054	; 0x1054 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    1a2c:	80 91 80 03 	lds	r24, 0x0380
    1a30:	8f 77       	andi	r24, 0x7F	; 127
    1a32:	80 93 80 03 	sts	0x0380, r24
	
	current_patch.mode = MEMORY;
    1a36:	10 92 07 03 	sts	0x0307, r1
	
}
    1a3a:	cd 5b       	subi	r28, 0xBD	; 189
    1a3c:	df 4f       	sbci	r29, 0xFF	; 255
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	08 95       	ret

00001a50 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1a50:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    1a54:	60 3f       	cpi	r22, 0xF0	; 240
    1a56:	11 f4       	brne	.+4      	; 0x1a5c <transpose_note+0xc>
    1a58:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    1a5c:	29 2f       	mov	r18, r25
    1a5e:	22 0f       	add	r18, r18
    1a60:	92 0f       	add	r25, r18
    1a62:	99 0f       	add	r25, r25
    1a64:	99 0f       	add	r25, r25
    1a66:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1a68:	89 38       	cpi	r24, 0x89	; 137
    1a6a:	08 f0       	brcs	.+2      	; 0x1a6e <transpose_note+0x1e>
    1a6c:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1a6e:	08 95       	ret

00001a70 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1a70:	80 91 7e 03 	lds	r24, 0x037E
    1a74:	98 2f       	mov	r25, r24
    1a76:	96 95       	lsr	r25
    1a78:	96 95       	lsr	r25
    1a7a:	96 95       	lsr	r25
    1a7c:	90 ff       	sbrs	r25, 0
    1a7e:	0e c0       	rjmp	.+28     	; 0x1a9c <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1a80:	90 91 08 03 	lds	r25, 0x0308
    1a84:	9f 5f       	subi	r25, 0xFF	; 255
    1a86:	90 93 08 03 	sts	0x0308, r25
    1a8a:	95 30       	cpi	r25, 0x05	; 5
    1a8c:	19 f4       	brne	.+6      	; 0x1a94 <update_octave_range+0x24>
    1a8e:	94 e0       	ldi	r25, 0x04	; 4
    1a90:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1a94:	98 e0       	ldi	r25, 0x08	; 8
    1a96:	89 27       	eor	r24, r25
    1a98:	80 93 7e 03 	sts	0x037E, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1a9c:	80 91 7f 03 	lds	r24, 0x037F
    1aa0:	98 2f       	mov	r25, r24
    1aa2:	96 95       	lsr	r25
    1aa4:	96 95       	lsr	r25
    1aa6:	96 95       	lsr	r25
    1aa8:	90 ff       	sbrs	r25, 0
    1aaa:	0b c0       	rjmp	.+22     	; 0x1ac2 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1aac:	90 91 08 03 	lds	r25, 0x0308
    1ab0:	99 23       	and	r25, r25
    1ab2:	19 f0       	breq	.+6      	; 0x1aba <update_octave_range+0x4a>
    1ab4:	91 50       	subi	r25, 0x01	; 1
    1ab6:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1aba:	98 e0       	ldi	r25, 0x08	; 8
    1abc:	89 27       	eor	r24, r25
    1abe:	80 93 7f 03 	sts	0x037F, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1ac2:	80 91 08 03 	lds	r24, 0x0308
    1ac6:	e1 e2       	ldi	r30, 0x21	; 33
    1ac8:	f2 e0       	ldi	r31, 0x02	; 2
    1aca:	e8 0f       	add	r30, r24
    1acc:	f1 1d       	adc	r31, r1
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	00 80       	ld	r0, Z
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <update_octave_range+0x6a>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	0a 94       	dec	r0
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <update_octave_range+0x66>
    1ade:	58 2f       	mov	r21, r24
    1ae0:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1ae4:	90 91 7f 03 	lds	r25, 0x037F
    1ae8:	29 2f       	mov	r18, r25
    1aea:	26 95       	lsr	r18
    1aec:	26 95       	lsr	r18
    1aee:	20 ff       	sbrs	r18, 0
    1af0:	0e c0       	rjmp	.+28     	; 0x1b0e <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1af2:	80 91 09 03 	lds	r24, 0x0309
    1af6:	8f 5f       	subi	r24, 0xFF	; 255
    1af8:	80 93 09 03 	sts	0x0309, r24
    1afc:	85 30       	cpi	r24, 0x05	; 5
    1afe:	19 f4       	brne	.+6      	; 0x1b06 <update_octave_range+0x96>
    1b00:	84 e0       	ldi	r24, 0x04	; 4
    1b02:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1b06:	84 e0       	ldi	r24, 0x04	; 4
    1b08:	98 27       	eor	r25, r24
    1b0a:	90 93 7f 03 	sts	0x037F, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1b0e:	90 91 7f 03 	lds	r25, 0x037F
    1b12:	29 2f       	mov	r18, r25
    1b14:	26 95       	lsr	r18
    1b16:	20 ff       	sbrs	r18, 0
    1b18:	0b c0       	rjmp	.+22     	; 0x1b30 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1b1a:	80 91 09 03 	lds	r24, 0x0309
    1b1e:	88 23       	and	r24, r24
    1b20:	19 f0       	breq	.+6      	; 0x1b28 <update_octave_range+0xb8>
    1b22:	81 50       	subi	r24, 0x01	; 1
    1b24:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	98 27       	eor	r25, r24
    1b2c:	90 93 7f 03 	sts	0x037F, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1b30:	40 91 00 03 	lds	r20, 0x0300
    1b34:	4c 7f       	andi	r20, 0xFC	; 252
    1b36:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1b3a:	90 91 09 03 	lds	r25, 0x0309
    1b3e:	93 30       	cpi	r25, 0x03	; 3
    1b40:	88 f0       	brcs	.+34     	; 0x1b64 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1b42:	ec e1       	ldi	r30, 0x1C	; 28
    1b44:	f2 e0       	ldi	r31, 0x02	; 2
    1b46:	e9 0f       	add	r30, r25
    1b48:	f1 1d       	adc	r31, r1
    1b4a:	21 e0       	ldi	r18, 0x01	; 1
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	c9 01       	movw	r24, r18
    1b50:	00 80       	ld	r0, Z
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <update_octave_range+0xe8>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <update_octave_range+0xe4>
    1b5c:	84 2b       	or	r24, r20
    1b5e:	80 93 00 03 	sts	0x0300, r24
    1b62:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1b64:	ec e1       	ldi	r30, 0x1C	; 28
    1b66:	f2 e0       	ldi	r31, 0x02	; 2
    1b68:	e9 0f       	add	r30, r25
    1b6a:	f1 1d       	adc	r31, r1
    1b6c:	21 e0       	ldi	r18, 0x01	; 1
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	c9 01       	movw	r24, r18
    1b72:	00 80       	ld	r0, Z
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <update_octave_range+0x10a>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	0a 94       	dec	r0
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <update_octave_range+0x106>
    1b7e:	85 2b       	or	r24, r21
    1b80:	80 93 01 03 	sts	0x0301, r24
    1b84:	08 95       	ret

00001b86 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1b86:	80 91 7f 03 	lds	r24, 0x037F
    1b8a:	88 23       	and	r24, r24
    1b8c:	64 f4       	brge	.+24     	; 0x1ba6 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1b8e:	80 58       	subi	r24, 0x80	; 128
    1b90:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1b94:	80 91 0a 03 	lds	r24, 0x030A
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	80 93 0a 03 	sts	0x030A, r24
    1b9e:	85 30       	cpi	r24, 0x05	; 5
    1ba0:	11 f4       	brne	.+4      	; 0x1ba6 <update_lfo_shape+0x20>
    1ba2:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1ba6:	e0 91 0a 03 	lds	r30, 0x030A
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	ee 0f       	add	r30, r30
    1bae:	ff 1f       	adc	r31, r31
    1bb0:	ea 5d       	subi	r30, 0xDA	; 218
    1bb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	01 80       	ldd	r0, Z+1	; 0x01
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <update_lfo_shape+0x3a>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1bc4:	90 91 ff 02 	lds	r25, 0x02FF
    1bc8:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1bca:	89 2b       	or	r24, r25
    1bcc:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1bd0:	80 81       	ld	r24, Z
    1bd2:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1bd4:	ed ed       	ldi	r30, 0xDD	; 221
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	80 62       	ori	r24, 0x20	; 32
    1bdc:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1bde:	80 81       	ld	r24, Z
    1be0:	8f 7d       	andi	r24, 0xDF	; 223
    1be2:	80 83       	st	Z, r24
	
}		
    1be4:	08 95       	ret

00001be6 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1be6:	80 91 7f 03 	lds	r24, 0x037F
    1bea:	80 ff       	sbrs	r24, 0
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	89 27       	eor	r24, r25
    1bf2:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1bf6:	80 91 0b 03 	lds	r24, 0x030B
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	80 93 0b 03 	sts	0x030B, r24
    1c00:	85 30       	cpi	r24, 0x05	; 5
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <update_lfo_sync+0x22>
    1c04:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1c08:	10 92 d3 03 	sts	0x03D3, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1c0c:	60 91 ff 02 	lds	r22, 0x02FF
    1c10:	60 7f       	andi	r22, 0xF0	; 240
    1c12:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1c16:	20 91 0b 03 	lds	r18, 0x030B
    1c1a:	22 23       	and	r18, r18
    1c1c:	71 f0       	breq	.+28     	; 0x1c3a <update_lfo_sync+0x54>
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	21 50       	subi	r18, 0x01	; 1
    1c22:	30 40       	sbci	r19, 0x00	; 0
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	ca 01       	movw	r24, r20
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <update_lfo_sync+0x4a>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	2a 95       	dec	r18
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <update_lfo_sync+0x46>
    1c34:	86 2b       	or	r24, r22
    1c36:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1c3a:	80 91 ff 02 	lds	r24, 0x02FF
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	8f 70       	andi	r24, 0x0F	; 15
    1c42:	90 70       	andi	r25, 0x00	; 0
    1c44:	82 30       	cpi	r24, 0x02	; 2
    1c46:	91 05       	cpc	r25, r1
    1c48:	89 f0       	breq	.+34     	; 0x1c6c <update_lfo_sync+0x86>
    1c4a:	83 30       	cpi	r24, 0x03	; 3
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	24 f4       	brge	.+8      	; 0x1c58 <update_lfo_sync+0x72>
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	91 05       	cpc	r25, r1
    1c54:	b9 f4       	brne	.+46     	; 0x1c84 <update_lfo_sync+0x9e>
    1c56:	07 c0       	rjmp	.+14     	; 0x1c66 <update_lfo_sync+0x80>
    1c58:	84 30       	cpi	r24, 0x04	; 4
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	59 f0       	breq	.+22     	; 0x1c74 <update_lfo_sync+0x8e>
    1c5e:	88 30       	cpi	r24, 0x08	; 8
    1c60:	91 05       	cpc	r25, r1
    1c62:	81 f4       	brne	.+32     	; 0x1c84 <update_lfo_sync+0x9e>
    1c64:	0b c0       	rjmp	.+22     	; 0x1c7c <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1c66:	10 92 d2 03 	sts	0x03D2, r1
			
			break;
    1c6a:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			midi_clock.divider = 24; //1:4
    1c6c:	88 e1       	ldi	r24, 0x18	; 24
    1c6e:	80 93 d2 03 	sts	0x03D2, r24
			break;
    1c72:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1c74:	8c e0       	ldi	r24, 0x0C	; 12
    1c76:	80 93 d2 03 	sts	0x03D2, r24
			break;
    1c7a:	08 95       	ret
			
		case 0b1000:
			midi_clock.divider = 6; //1:16	 		
    1c7c:	86 e0       	ldi	r24, 0x06	; 6
    1c7e:	80 93 d2 03 	sts	0x03D2, r24
			break;
    1c82:	08 95       	ret
		
		default:
			midi_clock.divider = 0; //need to turn midi sync off here. How?
    1c84:	10 92 d2 03 	sts	0x03D2, r1
    1c88:	08 95       	ret

00001c8a <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1c8a:	80 91 7f 03 	lds	r24, 0x037F
    1c8e:	98 2f       	mov	r25, r24
    1c90:	92 95       	swap	r25
    1c92:	96 95       	lsr	r25
    1c94:	96 95       	lsr	r25
    1c96:	93 70       	andi	r25, 0x03	; 3
    1c98:	90 ff       	sbrs	r25, 0
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <update_arp_sync+0x30>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1c9c:	90 e4       	ldi	r25, 0x40	; 64
    1c9e:	89 27       	eor	r24, r25
    1ca0:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1ca4:	80 91 0c 03 	lds	r24, 0x030C
    1ca8:	8f 5f       	subi	r24, 0xFF	; 255
    1caa:	80 93 0c 03 	sts	0x030C, r24
    1cae:	85 30       	cpi	r24, 0x05	; 5
    1cb0:	11 f4       	brne	.+4      	; 0x1cb6 <update_arp_sync+0x2c>
    1cb2:	10 92 0c 03 	sts	0x030C, r1
		system_clock.ppqn_counter = 0; //reset counter
    1cb6:	10 92 cd 03 	sts	0x03CD, r1
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1cba:	60 91 00 03 	lds	r22, 0x0300
    1cbe:	63 7c       	andi	r22, 0xC3	; 195
    1cc0:	60 93 00 03 	sts	0x0300, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1cc4:	20 91 0c 03 	lds	r18, 0x030C
    1cc8:	22 23       	and	r18, r18
    1cca:	71 f0       	breq	.+28     	; 0x1ce8 <update_arp_sync+0x5e>
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	2f 5f       	subi	r18, 0xFF	; 255
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	ca 01       	movw	r24, r20
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <update_arp_sync+0x54>
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	2a 95       	dec	r18
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <update_arp_sync+0x50>
    1ce2:	86 2b       	or	r24, r22
    1ce4:	80 93 00 03 	sts	0x0300, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1ce8:	80 91 00 03 	lds	r24, 0x0300
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	8c 73       	andi	r24, 0x3C	; 60
    1cf0:	90 70       	andi	r25, 0x00	; 0
    1cf2:	88 30       	cpi	r24, 0x08	; 8
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	91 f0       	breq	.+36     	; 0x1d1c <update_arp_sync+0x92>
    1cf8:	89 30       	cpi	r24, 0x09	; 9
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	24 f4       	brge	.+8      	; 0x1d06 <update_arp_sync+0x7c>
    1cfe:	84 30       	cpi	r24, 0x04	; 4
    1d00:	91 05       	cpc	r25, r1
    1d02:	c1 f4       	brne	.+48     	; 0x1d34 <update_arp_sync+0xaa>
    1d04:	07 c0       	rjmp	.+14     	; 0x1d14 <update_arp_sync+0x8a>
    1d06:	80 31       	cpi	r24, 0x10	; 16
    1d08:	91 05       	cpc	r25, r1
    1d0a:	61 f0       	breq	.+24     	; 0x1d24 <update_arp_sync+0x9a>
    1d0c:	80 32       	cpi	r24, 0x20	; 32
    1d0e:	91 05       	cpc	r25, r1
    1d10:	89 f4       	brne	.+34     	; 0x1d34 <update_arp_sync+0xaa>
    1d12:	0c c0       	rjmp	.+24     	; 0x1d2c <update_arp_sync+0xa2>
			
		case 0b00000100:
			system_clock.divider = 48; //1:2
    1d14:	80 e3       	ldi	r24, 0x30	; 48
    1d16:	80 93 cc 03 	sts	0x03CC, r24
			break;
    1d1a:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = 24; //1:4
    1d1c:	88 e1       	ldi	r24, 0x18	; 24
    1d1e:	80 93 cc 03 	sts	0x03CC, r24
			break;
    1d22:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = 12; //1:8
    1d24:	8c e0       	ldi	r24, 0x0C	; 12
    1d26:	80 93 cc 03 	sts	0x03CC, r24
			break;
    1d2a:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = 6; //1:16	
    1d2c:	86 e0       	ldi	r24, 0x06	; 6
    1d2e:	80 93 cc 03 	sts	0x03CC, r24
			break;
    1d32:	08 95       	ret
			
		default:
			system_clock.divider = 2; //should be 1 but this never turns arp_sync_led off - need to fix this	
    1d34:	82 e0       	ldi	r24, 0x02	; 2
    1d36:	80 93 cc 03 	sts	0x03CC, r24
    1d3a:	08 95       	ret

00001d3c <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1d3c:	80 91 7f 03 	lds	r24, 0x037F
    1d40:	80 31       	cpi	r24, 0x10	; 16
    1d42:	69 f4       	brne	.+26     	; 0x1d5e <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1d44:	10 92 7f 03 	sts	0x037F, r1
		
		if (++arp_range == 4) arp_range = 0;
    1d48:	80 91 0d 03 	lds	r24, 0x030D
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	80 93 0d 03 	sts	0x030D, r24
    1d52:	84 30       	cpi	r24, 0x04	; 4
    1d54:	11 f4       	brne	.+4      	; 0x1d5a <update_arp_range+0x1e>
    1d56:	10 92 0d 03 	sts	0x030D, r1
		arp.step_position = 0; //reset step position if range changes
    1d5a:	10 92 86 03 	sts	0x0386, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1d5e:	80 91 fe 02 	lds	r24, 0x02FE
    1d62:	8d 7f       	andi	r24, 0xFD	; 253
    1d64:	80 93 fe 02 	sts	0x02FE, r24
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1d68:	80 91 00 03 	lds	r24, 0x0300
    1d6c:	8f 73       	andi	r24, 0x3F	; 63
    1d6e:	80 93 00 03 	sts	0x0300, r24
	
	arp.range = arp_range;
    1d72:	80 91 0d 03 	lds	r24, 0x030D
    1d76:	80 93 84 03 	sts	0x0384, r24
	
	update_arp_sequence(); //update sequence with new settings
    1d7a:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1d7e:	80 91 0d 03 	lds	r24, 0x030D
    1d82:	82 30       	cpi	r24, 0x02	; 2
    1d84:	51 f0       	breq	.+20     	; 0x1d9a <update_arp_range+0x5e>
    1d86:	83 30       	cpi	r24, 0x03	; 3
    1d88:	71 f0       	breq	.+28     	; 0x1da6 <update_arp_range+0x6a>
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	89 f4       	brne	.+34     	; 0x1db0 <update_arp_range+0x74>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1d8e:	80 91 fe 02 	lds	r24, 0x02FE
    1d92:	82 60       	ori	r24, 0x02	; 2
    1d94:	80 93 fe 02 	sts	0x02FE, r24
			break;
    1d98:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1d9a:	80 91 00 03 	lds	r24, 0x0300
    1d9e:	80 64       	ori	r24, 0x40	; 64
    1da0:	80 93 00 03 	sts	0x0300, r24
			break;
    1da4:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1da6:	80 91 00 03 	lds	r24, 0x0300
    1daa:	80 68       	ori	r24, 0x80	; 128
    1dac:	80 93 00 03 	sts	0x0300, r24
    1db0:	08 95       	ret

00001db2 <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1db2:	80 91 7f 03 	lds	r24, 0x037F
    1db6:	98 2f       	mov	r25, r24
    1db8:	92 95       	swap	r25
    1dba:	96 95       	lsr	r25
    1dbc:	97 70       	andi	r25, 0x07	; 7
    1dbe:	90 ff       	sbrs	r25, 0
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <update_arp_mode+0x2e>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1dc2:	90 e2       	ldi	r25, 0x20	; 32
    1dc4:	89 27       	eor	r24, r25
    1dc6:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_mode == 5) arp_mode = 0;
    1dca:	80 91 0e 03 	lds	r24, 0x030E
    1dce:	8f 5f       	subi	r24, 0xFF	; 255
    1dd0:	80 93 0e 03 	sts	0x030E, r24
    1dd4:	85 30       	cpi	r24, 0x05	; 5
    1dd6:	11 f4       	brne	.+4      	; 0x1ddc <update_arp_mode+0x2a>
    1dd8:	10 92 0e 03 	sts	0x030E, r1
		arp.step_position = 0; //reset step position if mode changes
    1ddc:	10 92 86 03 	sts	0x0386, r1
		
	}

	arp.clock_source = INTERNAL_CLOCK;	
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	80 93 8a 03 	sts	0x038A, r24

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1de6:	90 91 fe 02 	lds	r25, 0x02FE
    1dea:	93 7c       	andi	r25, 0xC3	; 195
    1dec:	90 93 fe 02 	sts	0x02FE, r25
	
	switch(arp_mode) {
    1df0:	80 91 0e 03 	lds	r24, 0x030E
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	81 f0       	breq	.+32     	; 0x1e18 <update_arp_mode+0x66>
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	28 f0       	brcs	.+10     	; 0x1e06 <update_arp_mode+0x54>
    1dfc:	82 30       	cpi	r24, 0x02	; 2
    1dfe:	91 f0       	breq	.+36     	; 0x1e24 <update_arp_mode+0x72>
    1e00:	83 30       	cpi	r24, 0x03	; 3
    1e02:	f1 f4       	brne	.+60     	; 0x1e40 <update_arp_mode+0x8e>
    1e04:	16 c0       	rjmp	.+44     	; 0x1e32 <update_arp_mode+0x80>
		
		case 0:
		
			//turn arp off
			arp.clock_source = OFF;
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	80 93 8a 03 	sts	0x038A, r24
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    1e0c:	80 91 b0 02 	lds	r24, 0x02B0
    1e10:	88 23       	and	r24, r24
    1e12:	e1 f4       	brne	.+56     	; 0x1e4c <update_arp_mode+0x9a>
    1e14:	89 98       	cbi	0x11, 1	; 17
    1e16:	1a c0       	rjmp	.+52     	; 0x1e4c <update_arp_mode+0x9a>
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1e18:	94 62       	ori	r25, 0x24	; 36
    1e1a:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP;
    1e1e:	10 92 8b 03 	sts	0x038B, r1
			break;	
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <update_arp_mode+0x9a>
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1e24:	94 61       	ori	r25, 0x14	; 20
    1e26:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = DOWN;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	80 93 8b 03 	sts	0x038B, r24
			break;
    1e30:	0d c0       	rjmp	.+26     	; 0x1e4c <update_arp_mode+0x9a>
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1e32:	94 63       	ori	r25, 0x34	; 52
    1e34:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP_DOWN;
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	80 93 8b 03 	sts	0x038B, r24
			break;
    1e3e:	06 c0       	rjmp	.+12     	; 0x1e4c <update_arp_mode+0x9a>
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1e40:	9c 60       	ori	r25, 0x0C	; 12
    1e42:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = RANDOM;
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	80 93 8b 03 	sts	0x038B, r24
			
					
		
	}
	
	update_arp_sequence(); //update arp sequence with new mode
    1e4c:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	



}
    1e50:	08 95       	ret

00001e52 <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e52:	90 91 7e 03 	lds	r25, 0x037E
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1e56:	80 91 80 03 	lds	r24, 0x0380
    1e5a:	86 95       	lsr	r24
    1e5c:	86 95       	lsr	r24
    1e5e:	68 2f       	mov	r22, r24
    1e60:	67 95       	ror	r22
    1e62:	66 27       	eor	r22, r22
    1e64:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e66:	29 2f       	mov	r18, r25
    1e68:	21 70       	andi	r18, 0x01	; 1
    1e6a:	26 2b       	or	r18, r22
    1e6c:	69 2f       	mov	r22, r25
    1e6e:	66 1f       	adc	r22, r22
    1e70:	66 27       	eor	r22, r22
    1e72:	66 1f       	adc	r22, r22
    1e74:	66 0f       	add	r22, r22
    1e76:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1e78:	29 2f       	mov	r18, r25
    1e7a:	26 95       	lsr	r18
    1e7c:	26 95       	lsr	r18
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	21 70       	andi	r18, 0x01	; 1
    1e82:	30 70       	andi	r19, 0x00	; 0
    1e84:	d9 01       	movw	r26, r18
    1e86:	aa 0f       	add	r26, r26
    1e88:	bb 1f       	adc	r27, r27
    1e8a:	aa 0f       	add	r26, r26
    1e8c:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e8e:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1e90:	a9 2f       	mov	r26, r25
    1e92:	a6 95       	lsr	r26
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	a1 70       	andi	r26, 0x01	; 1
    1e98:	b0 70       	andi	r27, 0x00	; 0
    1e9a:	fd 01       	movw	r30, r26
    1e9c:	ee 0f       	add	r30, r30
    1e9e:	ff 1f       	adc	r31, r31
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	ee 0f       	add	r30, r30
    1ea6:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ea8:	a6 2f       	mov	r26, r22
    1eaa:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1eac:	e9 2f       	mov	r30, r25
    1eae:	e2 95       	swap	r30
    1eb0:	ef 70       	andi	r30, 0x0F	; 15
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	e1 70       	andi	r30, 0x01	; 1
    1eb6:	f0 70       	andi	r31, 0x00	; 0
    1eb8:	bf 01       	movw	r22, r30
    1eba:	62 95       	swap	r22
    1ebc:	72 95       	swap	r23
    1ebe:	70 7f       	andi	r23, 0xF0	; 240
    1ec0:	76 27       	eor	r23, r22
    1ec2:	60 7f       	andi	r22, 0xF0	; 240
    1ec4:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ec6:	ea 2f       	mov	r30, r26
    1ec8:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1eca:	69 2f       	mov	r22, r25
    1ecc:	62 95       	swap	r22
    1ece:	66 95       	lsr	r22
    1ed0:	67 70       	andi	r22, 0x07	; 7
    1ed2:	70 e0       	ldi	r23, 0x00	; 0
    1ed4:	61 70       	andi	r22, 0x01	; 1
    1ed6:	70 70       	andi	r23, 0x00	; 0
    1ed8:	ab 01       	movw	r20, r22
    1eda:	44 0f       	add	r20, r20
    1edc:	55 1f       	adc	r21, r21
    1ede:	42 95       	swap	r20
    1ee0:	52 95       	swap	r21
    1ee2:	50 7f       	andi	r21, 0xF0	; 240
    1ee4:	54 27       	eor	r21, r20
    1ee6:	40 7f       	andi	r20, 0xF0	; 240
    1ee8:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1eea:	6e 2f       	mov	r22, r30
    1eec:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1eee:	49 2f       	mov	r20, r25
    1ef0:	42 95       	swap	r20
    1ef2:	46 95       	lsr	r20
    1ef4:	46 95       	lsr	r20
    1ef6:	43 70       	andi	r20, 0x03	; 3
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	41 70       	andi	r20, 0x01	; 1
    1efc:	50 70       	andi	r21, 0x00	; 0
    1efe:	9a 01       	movw	r18, r20
    1f00:	00 24       	eor	r0, r0
    1f02:	36 95       	lsr	r19
    1f04:	27 95       	ror	r18
    1f06:	07 94       	ror	r0
    1f08:	36 95       	lsr	r19
    1f0a:	27 95       	ror	r18
    1f0c:	07 94       	ror	r0
    1f0e:	32 2f       	mov	r19, r18
    1f10:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1f12:	26 2b       	or	r18, r22
    1f14:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1f18:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1f1a:	81 95       	neg	r24
    1f1c:	89 27       	eor	r24, r25
    1f1e:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1f20:	89 27       	eor	r24, r25
    1f22:	0e 94 92 16 	call	0x2d24	; 0x2d24 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1f26:	ed ed       	ldi	r30, 0xDD	; 221
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1f2c:	90 91 80 03 	lds	r25, 0x0380
    1f30:	96 95       	lsr	r25
    1f32:	96 95       	lsr	r25
    1f34:	96 95       	lsr	r25
    1f36:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1f38:	91 95       	neg	r25
    1f3a:	80 81       	ld	r24, Z
    1f3c:	89 27       	eor	r24, r25
    1f3e:	80 71       	andi	r24, 0x10	; 16
    1f40:	82 27       	eor	r24, r18
    1f42:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1f44:	ee ef       	ldi	r30, 0xFE	; 254
    1f46:	f2 e0       	ldi	r31, 0x02	; 2
    1f48:	80 81       	ld	r24, Z
    1f4a:	98 27       	eor	r25, r24
    1f4c:	91 70       	andi	r25, 0x01	; 1
    1f4e:	89 27       	eor	r24, r25
    1f50:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1f52:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1f56:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1f5a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    1f5e:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <update_arp_sync>
	update_arp_range();
    1f62:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <update_arp_range>
	update_arp_mode();
    1f66:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    1f6a:	08 95       	ret

00001f6c <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1f70:	90 91 07 03 	lds	r25, 0x0307
    1f74:	95 30       	cpi	r25, 0x05	; 5
    1f76:	01 f5       	brne	.+64     	; 0x1fb8 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1f78:	87 e0       	ldi	r24, 0x07	; 7
    1f7a:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f7c:	cd ed       	ldi	r28, 0xDD	; 221
    1f7e:	d0 e0       	ldi	r29, 0x00	; 0
    1f80:	88 81       	ld	r24, Y
    1f82:	80 62       	ori	r24, 0x20	; 32
    1f84:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f86:	88 81       	ld	r24, Y
    1f88:	8f 7d       	andi	r24, 0xDF	; 223
    1f8a:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f8c:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1f8e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1f92:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f94:	88 81       	ld	r24, Y
    1f96:	80 62       	ori	r24, 0x20	; 32
    1f98:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f9a:	88 81       	ld	r24, Y
    1f9c:	8f 7d       	andi	r24, 0xDF	; 223
    1f9e:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1fa0:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1fa2:	80 91 ff 02 	lds	r24, 0x02FF
    1fa6:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1fa8:	80 68       	ori	r24, 0x80	; 128
    1faa:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1fae:	0e 94 c4 01 	call	0x388	; 0x388 <setup_system_clock>

		current_patch.mode = MEMORY;
    1fb2:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1fb6:	63 c0       	rjmp	.+198    	; 0x207e <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1fb8:	80 91 80 03 	lds	r24, 0x0380
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	22 95       	swap	r18
    1fc0:	26 95       	lsr	r18
    1fc2:	26 95       	lsr	r18
    1fc4:	23 70       	andi	r18, 0x03	; 3
    1fc6:	20 ff       	sbrs	r18, 0
    1fc8:	15 c0       	rjmp	.+42     	; 0x1ff4 <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1fca:	20 e4       	ldi	r18, 0x40	; 64
    1fcc:	82 27       	eor	r24, r18
    1fce:	80 93 80 03 	sts	0x0380, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1fd2:	80 91 03 03 	lds	r24, 0x0303
    1fd6:	8f 5f       	subi	r24, 0xFF	; 255
    1fd8:	80 93 03 03 	sts	0x0303, r24
    1fdc:	85 32       	cpi	r24, 0x25	; 37
    1fde:	21 f4       	brne	.+8      	; 0x1fe8 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1fe0:	84 e2       	ldi	r24, 0x24	; 36
    1fe2:	80 93 03 03 	sts	0x0303, r24
    1fe6:	06 c0       	rjmp	.+12     	; 0x1ff4 <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1fe8:	93 30       	cpi	r25, 0x03	; 3
    1fea:	21 f0       	breq	.+8      	; 0x1ff4 <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1fec:	0e 94 48 0a 	call	0x1490	; 0x1490 <load_patch>
			update_patch();
    1ff0:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1ff4:	80 91 80 03 	lds	r24, 0x0380
    1ff8:	98 2f       	mov	r25, r24
    1ffa:	92 95       	swap	r25
    1ffc:	96 95       	lsr	r25
    1ffe:	97 70       	andi	r25, 0x07	; 7
    2000:	90 ff       	sbrs	r25, 0
    2002:	15 c0       	rjmp	.+42     	; 0x202e <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    2004:	90 e2       	ldi	r25, 0x20	; 32
    2006:	89 27       	eor	r24, r25
    2008:	80 93 80 03 	sts	0x0380, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    200c:	80 91 03 03 	lds	r24, 0x0303
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	19 f0       	breq	.+6      	; 0x201a <update_patch_programmer+0xae>
    2014:	81 50       	subi	r24, 0x01	; 1
    2016:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    201a:	80 91 07 03 	lds	r24, 0x0307
    201e:	83 30       	cpi	r24, 0x03	; 3
    2020:	31 f0       	breq	.+12     	; 0x202e <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    2022:	80 91 03 03 	lds	r24, 0x0303
    2026:	0e 94 48 0a 	call	0x1490	; 0x1490 <load_patch>
			update_patch();
    202a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    202e:	80 91 80 03 	lds	r24, 0x0380
    2032:	98 2f       	mov	r25, r24
    2034:	92 95       	swap	r25
    2036:	9f 70       	andi	r25, 0x0F	; 15
    2038:	90 ff       	sbrs	r25, 0
    203a:	15 c0       	rjmp	.+42     	; 0x2066 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    203c:	90 e1       	ldi	r25, 0x10	; 16
    203e:	89 27       	eor	r24, r25
    2040:	80 93 80 03 	sts	0x0380, r24
		if (current_patch.mode != WRITE) {
    2044:	90 91 07 03 	lds	r25, 0x0307
    2048:	93 30       	cpi	r25, 0x03	; 3
    204a:	49 f0       	breq	.+18     	; 0x205e <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    204c:	8f 77       	andi	r24, 0x7F	; 127
    204e:	80 93 80 03 	sts	0x0380, r24
			current_patch.mode = WRITE;
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    2058:	0e 94 2a 08 	call	0x1054	; 0x1054 <lock_pots>
    205c:	04 c0       	rjmp	.+8      	; 0x2066 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    205e:	80 91 03 03 	lds	r24, 0x0303
    2062:	0e 94 55 08 	call	0x10aa	; 0x10aa <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    2066:	80 91 80 03 	lds	r24, 0x0380
    206a:	88 23       	and	r24, r24
    206c:	44 f4       	brge	.+16     	; 0x207e <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    206e:	80 68       	ori	r24, 0x80	; 128
    2070:	80 93 80 03 	sts	0x0380, r24
		current_patch.mode = MANUAL;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    207a:	0e 94 44 08 	call	0x1088	; 0x1088 <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	08 95       	ret

00002084 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2084:	88 ed       	ldi	r24, 0xD8	; 216
    2086:	91 e0       	ldi	r25, 0x01	; 1
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2090:	81 ee       	ldi	r24, 0xE1	; 225
    2092:	91 e0       	ldi	r25, 0x01	; 1
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    209c:	82 ee       	ldi	r24, 0xE2	; 226
    209e:	91 e0       	ldi	r25, 0x01	; 1
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    20a8:	83 eb       	ldi	r24, 0xB3	; 179
    20aa:	92 e0       	ldi	r25, 0x02	; 2
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    20b4:	8a ed       	ldi	r24, 0xDA	; 218
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    20c0:	8f ed       	ldi	r24, 0xDF	; 223
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    20cc:	80 ee       	ldi	r24, 0xE0	; 224
    20ce:	91 e0       	ldi	r25, 0x01	; 1
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    20d8:	81 ed       	ldi	r24, 0xD1	; 209
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    20e4:	86 ed       	ldi	r24, 0xD6	; 214
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    20f0:	82 ed       	ldi	r24, 0xD2	; 210
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    20fc:	83 ed       	ldi	r24, 0xD3	; 211
    20fe:	91 e0       	ldi	r25, 0x01	; 1
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    2108:	84 ed       	ldi	r24, 0xD4	; 212
    210a:	91 e0       	ldi	r25, 0x01	; 1
    210c:	6f ef       	ldi	r22, 0xFF	; 255
    210e:	7f e3       	ldi	r23, 0x3F	; 63
    2110:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    2114:	85 ed       	ldi	r24, 0xD5	; 213
    2116:	91 e0       	ldi	r25, 0x01	; 1
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	70 e0       	ldi	r23, 0x00	; 0
    211c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    2120:	89 ed       	ldi	r24, 0xD9	; 217
    2122:	91 e0       	ldi	r25, 0x01	; 1
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    212c:	8e ec       	ldi	r24, 0xCE	; 206
    212e:	91 e0       	ldi	r25, 0x01	; 1
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2138:	8c ec       	ldi	r24, 0xCC	; 204
    213a:	91 e0       	ldi	r25, 0x01	; 1
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	70 e0       	ldi	r23, 0x00	; 0
    2140:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2144:	8a ec       	ldi	r24, 0xCA	; 202
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	6f ef       	ldi	r22, 0xFF	; 255
    214a:	7f e3       	ldi	r23, 0x3F	; 63
    214c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    2150:	88 ec       	ldi	r24, 0xC8	; 200
    2152:	91 e0       	ldi	r25, 0x01	; 1
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    215c:	80 ed       	ldi	r24, 0xD0	; 208
    215e:	91 e0       	ldi	r25, 0x01	; 1
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2168:	83 ee       	ldi	r24, 0xE3	; 227
    216a:	91 e0       	ldi	r25, 0x01	; 1
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2174:	84 ee       	ldi	r24, 0xE4	; 228
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
}	
    2180:	08 95       	ret

00002182 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    2182:	2f 92       	push	r2
    2184:	3f 92       	push	r3
    2186:	4f 92       	push	r4
    2188:	5f 92       	push	r5
    218a:	6f 92       	push	r6
    218c:	7f 92       	push	r7
    218e:	8f 92       	push	r8
    2190:	9f 92       	push	r9
    2192:	af 92       	push	r10
    2194:	bf 92       	push	r11
    2196:	cf 92       	push	r12
    2198:	df 92       	push	r13
    219a:	ef 92       	push	r14
    219c:	ff 92       	push	r15
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	2c 97       	sbiw	r28, 0x0c	; 12
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	08 2f       	mov	r16, r24
    21b8:	78 87       	std	Y+8, r23	; 0x08
    21ba:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    21bc:	80 91 7b 03 	lds	r24, 0x037B
    21c0:	83 60       	ori	r24, 0x03	; 3
    21c2:	80 93 7b 03 	sts	0x037B, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    21c6:	0e 94 42 10 	call	0x2084	; 0x2084 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    21ca:	10 92 7a 03 	sts	0x037A, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    21ce:	0f 30       	cpi	r16, 0x0F	; 15
    21d0:	e1 f4       	brne	.+56     	; 0x220a <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    21d2:	0f 2e       	mov	r0, r31
    21d4:	f6 ee       	ldi	r31, 0xE6	; 230
    21d6:	4f 2e       	mov	r4, r31
    21d8:	f1 e0       	ldi	r31, 0x01	; 1
    21da:	5f 2e       	mov	r5, r31
    21dc:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    21de:	0f 2e       	mov	r0, r31
    21e0:	fe ed       	ldi	r31, 0xDE	; 222
    21e2:	2f 2e       	mov	r2, r31
    21e4:	f1 e0       	ldi	r31, 0x01	; 1
    21e6:	3f 2e       	mov	r3, r31
    21e8:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    21ea:	23 ee       	ldi	r18, 0xE3	; 227
    21ec:	31 e0       	ldi	r19, 0x01	; 1
    21ee:	3a 83       	std	Y+2, r19	; 0x02
    21f0:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    21f2:	0f 2e       	mov	r0, r31
    21f4:	fc ed       	ldi	r31, 0xDC	; 220
    21f6:	8f 2e       	mov	r8, r31
    21f8:	f1 e0       	ldi	r31, 0x01	; 1
    21fa:	9f 2e       	mov	r9, r31
    21fc:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    21fe:	82 e7       	ldi	r24, 0x72	; 114
    2200:	96 e0       	ldi	r25, 0x06	; 6
    2202:	9a 87       	std	Y+10, r25	; 0x0a
    2204:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	1b c0       	rjmp	.+54     	; 0x2240 <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    220a:	0f 2e       	mov	r0, r31
    220c:	f5 ee       	ldi	r31, 0xE5	; 229
    220e:	4f 2e       	mov	r4, r31
    2210:	f1 e0       	ldi	r31, 0x01	; 1
    2212:	5f 2e       	mov	r5, r31
    2214:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    2216:	0f 2e       	mov	r0, r31
    2218:	f7 ed       	ldi	r31, 0xD7	; 215
    221a:	2f 2e       	mov	r2, r31
    221c:	f1 e0       	ldi	r31, 0x01	; 1
    221e:	3f 2e       	mov	r3, r31
    2220:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    2222:	e4 ee       	ldi	r30, 0xE4	; 228
    2224:	f1 e0       	ldi	r31, 0x01	; 1
    2226:	fa 83       	std	Y+2, r31	; 0x02
    2228:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    222a:	0f 2e       	mov	r0, r31
    222c:	fd ed       	ldi	r31, 0xDD	; 221
    222e:	8f 2e       	mov	r8, r31
    2230:	f1 e0       	ldi	r31, 0x01	; 1
    2232:	9f 2e       	mov	r9, r31
    2234:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    2236:	20 e7       	ldi	r18, 0x70	; 112
    2238:	36 e0       	ldi	r19, 0x06	; 6
    223a:	3a 87       	std	Y+10, r19	; 0x0a
    223c:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    223e:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    2240:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2242:	ed ed       	ldi	r30, 0xDD	; 221
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	80 64       	ori	r24, 0x40	; 64
    224a:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    224c:	80 81       	ld	r24, Z
    224e:	8f 7b       	andi	r24, 0xBF	; 191
    2250:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2252:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    2254:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2256:	84 b5       	in	r24, 0x24	; 36
    2258:	8f 60       	ori	r24, 0x0F	; 15
    225a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    2260:	ee e6       	ldi	r30, 0x6E	; 110
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	90 81       	ld	r25, Z
    2266:	92 60       	ori	r25, 0x02	; 2
    2268:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    226a:	80 93 7c 03 	sts	0x037C, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    226e:	8d e0       	ldi	r24, 0x0D	; 13
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    2276:	80 2f       	mov	r24, r16
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	8c 01       	movw	r16, r24
    227c:	0f 5f       	subi	r16, 0xFF	; 255
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    2280:	0f 2e       	mov	r0, r31
    2282:	f8 ed       	ldi	r31, 0xD8	; 216
    2284:	ef 2e       	mov	r14, r31
    2286:	f1 e0       	ldi	r31, 0x01	; 1
    2288:	ff 2e       	mov	r15, r31
    228a:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    228c:	0f 2e       	mov	r0, r31
    228e:	f4 ed       	ldi	r31, 0xD4	; 212
    2290:	cf 2e       	mov	r12, r31
    2292:	f1 e0       	ldi	r31, 0x01	; 1
    2294:	df 2e       	mov	r13, r31
    2296:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    2298:	0f 2e       	mov	r0, r31
    229a:	fa ec       	ldi	r31, 0xCA	; 202
    229c:	af 2e       	mov	r10, r31
    229e:	f1 e0       	ldi	r31, 0x01	; 1
    22a0:	bf 2e       	mov	r11, r31
    22a2:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    22a4:	0f 2e       	mov	r0, r31
    22a6:	fb ec       	ldi	r31, 0xCB	; 203
    22a8:	6f 2e       	mov	r6, r31
    22aa:	f1 e0       	ldi	r31, 0x01	; 1
    22ac:	7f 2e       	mov	r7, r31
    22ae:	f0 2d       	mov	r31, r0
    22b0:	e0 e0       	ldi	r30, 0x00	; 0
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	fc 87       	std	Y+12, r31	; 0x0c
    22b6:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    22b8:	21 e0       	ldi	r18, 0x01	; 1
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	0b 80       	ldd	r0, Y+3	; 0x03
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <set_vco_init_cv+0x142>
    22c0:	22 0f       	add	r18, r18
    22c2:	33 1f       	adc	r19, r19
    22c4:	0a 94       	dec	r0
    22c6:	e2 f7       	brpl	.-8      	; 0x22c0 <set_vco_init_cv+0x13e>
    22c8:	3e 83       	std	Y+6, r19	; 0x06
    22ca:	2d 83       	std	Y+5, r18	; 0x05
    22cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    22ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    22d0:	82 2b       	or	r24, r18
    22d2:	93 2b       	or	r25, r19
    22d4:	9c 87       	std	Y+12, r25	; 0x0c
    22d6:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    22d8:	c4 01       	movw	r24, r8
    22da:	6b 85       	ldd	r22, Y+11	; 0x0b
    22dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22de:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
		
		
		count_finished = FALSE;
    22e2:	10 92 7a 03 	sts	0x037A, r1
		period_counter = 0;
    22e6:	10 92 7d 03 	sts	0x037D, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    22ea:	8f e0       	ldi	r24, 0x0F	; 15
    22ec:	e8 e1       	ldi	r30, 0x18	; 24
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	a8 95       	wdr
    22f6:	e0 93 60 00 	sts	0x0060, r30
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    2300:	80 91 7a 03 	lds	r24, 0x037A
    2304:	88 23       	and	r24, r24
    2306:	89 f5       	brne	.+98     	; 0x236a <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    2308:	c8 01       	movw	r24, r16
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	0e 94 10 03 	call	0x620	; 0x620 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    2310:	c4 01       	movw	r24, r8
    2312:	6b 85       	ldd	r22, Y+11	; 0x0b
    2314:	7c 85       	ldd	r23, Y+12	; 0x0c
    2316:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    231a:	c1 01       	movw	r24, r2
    231c:	6f ef       	ldi	r22, 0xFF	; 255
    231e:	7f e3       	ldi	r23, 0x3F	; 63
    2320:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    2324:	c7 01       	movw	r24, r14
    2326:	60 e0       	ldi	r22, 0x00	; 0
    2328:	70 e0       	ldi	r23, 0x00	; 0
    232a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    232e:	c6 01       	movw	r24, r12
    2330:	6f ef       	ldi	r22, 0xFF	; 255
    2332:	7f e3       	ldi	r23, 0x3F	; 63
    2334:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    2338:	c5 01       	movw	r24, r10
    233a:	6f ef       	ldi	r22, 0xFF	; 255
    233c:	7f e3       	ldi	r23, 0x3F	; 63
    233e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    2342:	c3 01       	movw	r24, r6
    2344:	6f ef       	ldi	r22, 0xFF	; 255
    2346:	7f e3       	ldi	r23, 0x3F	; 63
    2348:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	6f ef       	ldi	r22, 0xFF	; 255
    2352:	7f e3       	ldi	r23, 0x3F	; 63
    2354:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    2358:	c2 01       	movw	r24, r4
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    2362:	80 91 7a 03 	lds	r24, 0x037A
    2366:	88 23       	and	r24, r24
    2368:	79 f2       	breq	.-98     	; 0x2308 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    236a:	88 e1       	ldi	r24, 0x18	; 24
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	80 93 60 00 	sts	0x0060, r24
    2374:	10 92 60 00 	sts	0x0060, r1
    2378:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    237a:	80 91 78 03 	lds	r24, 0x0378
    237e:	90 91 79 03 	lds	r25, 0x0379
    2382:	ef 81       	ldd	r30, Y+7	; 0x07
    2384:	f8 85       	ldd	r31, Y+8	; 0x08
    2386:	e8 17       	cp	r30, r24
    2388:	f9 07       	cpc	r31, r25
    238a:	20 f0       	brcs	.+8      	; 0x2394 <set_vco_init_cv+0x212>
    238c:	80 91 af 02 	lds	r24, 0x02AF
    2390:	88 23       	and	r24, r24
    2392:	51 f4       	brne	.+20     	; 0x23a8 <set_vco_init_cv+0x226>
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	80 95       	com	r24
    239a:	90 95       	com	r25
    239c:	2b 85       	ldd	r18, Y+11	; 0x0b
    239e:	3c 85       	ldd	r19, Y+12	; 0x0c
    23a0:	28 23       	and	r18, r24
    23a2:	39 23       	and	r19, r25
    23a4:	3c 87       	std	Y+12, r19	; 0x0c
    23a6:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	8b 83       	std	Y+3, r24	; 0x03
    23b8:	ef ef       	ldi	r30, 0xFF	; 255
    23ba:	8f 3f       	cpi	r24, 0xFF	; 255
    23bc:	9e 07       	cpc	r25, r30
    23be:	09 f0       	breq	.+2      	; 0x23c2 <set_vco_init_cv+0x240>
    23c0:	7b cf       	rjmp	.-266    	; 0x22b8 <set_vco_init_cv+0x136>
    23c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    23c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    23c6:	3e 83       	std	Y+6, r19	; 0x06
    23c8:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    23ca:	88 ec       	ldi	r24, 0xC8	; 200
    23cc:	91 e0       	ldi	r25, 0x01	; 1
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	70 e0       	ldi	r23, 0x00	; 0
    23d2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    23d6:	89 ec       	ldi	r24, 0xC9	; 201
    23d8:	91 e0       	ldi	r25, 0x01	; 1
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	70 e0       	ldi	r23, 0x00	; 0
    23de:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    23e2:	84 ed       	ldi	r24, 0xD4	; 212
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    23ee:	88 ed       	ldi	r24, 0xD8	; 216
    23f0:	91 e0       	ldi	r25, 0x01	; 1
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	70 e0       	ldi	r23, 0x00	; 0
    23f6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    23fa:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    23fc:	ee e6       	ldi	r30, 0x6E	; 110
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8d 7f       	andi	r24, 0xFD	; 253
    2404:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2406:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    2408:	89 85       	ldd	r24, Y+9	; 0x09
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	6d 81       	ldd	r22, Y+5	; 0x05
    240e:	7e 81       	ldd	r23, Y+6	; 0x06
    2410:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	2c 96       	adiw	r28, 0x0c	; 12
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ff 90       	pop	r15
    242e:	ef 90       	pop	r14
    2430:	df 90       	pop	r13
    2432:	cf 90       	pop	r12
    2434:	bf 90       	pop	r11
    2436:	af 90       	pop	r10
    2438:	9f 90       	pop	r9
    243a:	8f 90       	pop	r8
    243c:	7f 90       	pop	r7
    243e:	6f 90       	pop	r6
    2440:	5f 90       	pop	r5
    2442:	4f 90       	pop	r4
    2444:	3f 90       	pop	r3
    2446:	2f 90       	pop	r2
    2448:	08 95       	ret

0000244a <tune_8ths>:



void tune_8ths(uint8_t vco) {
    244a:	2f 92       	push	r2
    244c:	3f 92       	push	r3
    244e:	4f 92       	push	r4
    2450:	5f 92       	push	r5
    2452:	6f 92       	push	r6
    2454:	7f 92       	push	r7
    2456:	8f 92       	push	r8
    2458:	9f 92       	push	r9
    245a:	af 92       	push	r10
    245c:	bf 92       	push	r11
    245e:	cf 92       	push	r12
    2460:	df 92       	push	r13
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	c0 54       	subi	r28, 0x40	; 64
    2474:	d0 40       	sbci	r29, 0x00	; 0
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    2482:	de 01       	movw	r26, r28
    2484:	11 96       	adiw	r26, 0x01	; 1
    2486:	e0 e3       	ldi	r30, 0x30	; 48
    2488:	f2 e0       	ldi	r31, 0x02	; 2
    248a:	80 e3       	ldi	r24, 0x30	; 48
    248c:	01 90       	ld	r0, Z+
    248e:	0d 92       	st	X+, r0
    2490:	81 50       	subi	r24, 0x01	; 1
    2492:	e1 f7       	brne	.-8      	; 0x248c <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    2494:	0e 94 42 10 	call	0x2084	; 0x2084 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    2498:	0f 30       	cpi	r16, 0x0F	; 15
    249a:	11 f5       	brne	.+68     	; 0x24e0 <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    249c:	40 90 75 03 	lds	r4, 0x0375
    24a0:	50 90 76 03 	lds	r5, 0x0376
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    24a4:	0f 2e       	mov	r0, r31
    24a6:	f6 ee       	ldi	r31, 0xE6	; 230
    24a8:	8f 2e       	mov	r8, r31
    24aa:	f1 e0       	ldi	r31, 0x01	; 1
    24ac:	9f 2e       	mov	r9, r31
    24ae:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    24b0:	0f 2e       	mov	r0, r31
    24b2:	fe ed       	ldi	r31, 0xDE	; 222
    24b4:	2f 2e       	mov	r2, r31
    24b6:	f1 e0       	ldi	r31, 0x01	; 1
    24b8:	3f 2e       	mov	r3, r31
    24ba:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    24bc:	23 ee       	ldi	r18, 0xE3	; 227
    24be:	31 e0       	ldi	r19, 0x01	; 1
    24c0:	3a ab       	sts	0x5a, r19
    24c2:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    24c4:	0f 2e       	mov	r0, r31
    24c6:	fc ed       	ldi	r31, 0xDC	; 220
    24c8:	6f 2e       	mov	r6, r31
    24ca:	f1 e0       	ldi	r31, 0x01	; 1
    24cc:	7f 2e       	mov	r7, r31
    24ce:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    24d0:	01 e5       	ldi	r16, 0x51	; 81
    24d2:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    24d4:	cc 24       	eor	r12, r12
    24d6:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    24d8:	ee 24       	eor	r14, r14
    24da:	68 94       	set
    24dc:	e1 f8       	bld	r14, 1
    24de:	22 c0       	rjmp	.+68     	; 0x2524 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    24e0:	40 90 73 03 	lds	r4, 0x0373
    24e4:	50 90 74 03 	lds	r5, 0x0374
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    24e8:	0f 2e       	mov	r0, r31
    24ea:	f5 ee       	ldi	r31, 0xE5	; 229
    24ec:	8f 2e       	mov	r8, r31
    24ee:	f1 e0       	ldi	r31, 0x01	; 1
    24f0:	9f 2e       	mov	r9, r31
    24f2:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    24f4:	0f 2e       	mov	r0, r31
    24f6:	f7 ed       	ldi	r31, 0xD7	; 215
    24f8:	2f 2e       	mov	r2, r31
    24fa:	f1 e0       	ldi	r31, 0x01	; 1
    24fc:	3f 2e       	mov	r3, r31
    24fe:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    2500:	44 ee       	ldi	r20, 0xE4	; 228
    2502:	51 e0       	ldi	r21, 0x01	; 1
    2504:	5a ab       	sts	0x5a, r21
    2506:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2508:	0f 2e       	mov	r0, r31
    250a:	fd ed       	ldi	r31, 0xDD	; 221
    250c:	6f 2e       	mov	r6, r31
    250e:	f1 e0       	ldi	r31, 0x01	; 1
    2510:	7f 2e       	mov	r7, r31
    2512:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    2514:	0f e2       	ldi	r16, 0x2F	; 47
    2516:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    2518:	cc 24       	eor	r12, r12
    251a:	68 94       	set
    251c:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    251e:	ee 24       	eor	r14, r14
    2520:	68 94       	set
    2522:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    2524:	c3 01       	movw	r24, r6
    2526:	b2 01       	movw	r22, r4
    2528:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    252c:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    252e:	ed ed       	ldi	r30, 0xDD	; 221
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	80 64       	ori	r24, 0x40	; 64
    2536:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2538:	80 81       	ld	r24, Z
    253a:	8f 7b       	andi	r24, 0xBF	; 191
    253c:	80 83       	st	Z, r24
		DATA_BUS = 0;
    253e:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    2540:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	80 93 7c 03 	sts	0x037C, r24
		
		compare_match_counter = 0;	
    2548:	10 92 77 03 	sts	0x0377, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    254c:	8c 2d       	mov	r24, r12
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	24 e6       	ldi	r18, 0x64	; 100
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	82 9f       	mul	r24, r18
    2556:	d0 01       	movw	r26, r0
    2558:	83 9f       	mul	r24, r19
    255a:	b0 0d       	add	r27, r0
    255c:	92 9f       	mul	r25, r18
    255e:	b0 0d       	add	r27, r0
    2560:	11 24       	eor	r1, r1
    2562:	bc ab       	sts	0x5c, r27
    2564:	ab ab       	sts	0x5b, r26
    2566:	fe 01       	movw	r30, r28
    2568:	31 96       	adiw	r30, 0x01	; 1
    256a:	fc af       	sts	0x7c, r31
    256c:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    256e:	98 01       	movw	r18, r16
    2570:	2e 5f       	subi	r18, 0xFE	; 254
    2572:	3f 4f       	sbci	r19, 0xFF	; 255
    2574:	21 96       	adiw	r28, 0x01	; 1
    2576:	3f af       	sts	0x7f, r19
    2578:	2e af       	sts	0x7e, r18
    257a:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    257c:	1e ae       	sts	0xbe, r17
    257e:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2580:	0f 2e       	mov	r0, r31
    2582:	f8 ed       	ldi	r31, 0xD8	; 216
    2584:	ef 2e       	mov	r14, r31
    2586:	f1 e0       	ldi	r31, 0x01	; 1
    2588:	ff 2e       	mov	r15, r31
    258a:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    258c:	0f 2e       	mov	r0, r31
    258e:	f4 ed       	ldi	r31, 0xD4	; 212
    2590:	cf 2e       	mov	r12, r31
    2592:	f1 e0       	ldi	r31, 0x01	; 1
    2594:	df 2e       	mov	r13, r31
    2596:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2598:	0f 2e       	mov	r0, r31
    259a:	fa ec       	ldi	r31, 0xCA	; 202
    259c:	af 2e       	mov	r10, r31
    259e:	f1 e0       	ldi	r31, 0x01	; 1
    25a0:	bf 2e       	mov	r11, r31
    25a2:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    25a4:	eb ad       	sts	0x6b, r30
    25a6:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    25a8:	80 81       	ld	r24, Z
    25aa:	80 93 7c 03 	sts	0x037C, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    25ae:	84 b5       	in	r24, 0x24	; 36
    25b0:	8f 60       	ori	r24, 0x0F	; 15
    25b2:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    25b8:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    25ba:	4d ad       	sts	0x6d, r20
    25bc:	5e ad       	sts	0x6e, r21
    25be:	43 30       	cpi	r20, 0x03	; 3
    25c0:	51 05       	cpc	r21, r1
    25c2:	24 f4       	brge	.+8      	; 0x25cc <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    25c4:	83 e0       	ldi	r24, 0x03	; 3
    25c6:	80 93 7b 03 	sts	0x037B, r24
    25ca:	03 c0       	rjmp	.+6      	; 0x25d2 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    25cc:	82 e0       	ldi	r24, 0x02	; 2
    25ce:	80 93 7b 03 	sts	0x037B, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    25d2:	81 81       	ldd	r24, Z+1	; 0x01
    25d4:	92 81       	ldd	r25, Z+2	; 0x02
    25d6:	9a af       	sts	0x7a, r25
    25d8:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    25da:	ad e0       	ldi	r26, 0x0D	; 13
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	be ab       	sts	0x5e, r27
    25e0:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    25e2:	00 e0       	ldi	r16, 0x00	; 0
    25e4:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    25e6:	e1 e0       	ldi	r30, 0x01	; 1
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	0d a8       	sts	0x8d, r16
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <tune_8ths+0x1a8>
    25ee:	ee 0f       	add	r30, r30
    25f0:	ff 1f       	adc	r31, r31
    25f2:	0a 94       	dec	r0
    25f4:	e2 f7       	brpl	.-8      	; 0x25ee <tune_8ths+0x1a4>
    25f6:	f8 af       	sts	0x78, r31
    25f8:	ef ab       	sts	0x5f, r30
    25fa:	0e 2b       	or	r16, r30
    25fc:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    25fe:	ae e6       	ldi	r26, 0x6E	; 110
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	8c 91       	ld	r24, X
    2604:	8d 7f       	andi	r24, 0xFD	; 253
    2606:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2608:	c4 01       	movw	r24, r8
    260a:	b8 01       	movw	r22, r16
    260c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2610:	e3 ef       	ldi	r30, 0xF3	; 243
    2612:	f1 e0       	ldi	r31, 0x01	; 1
    2614:	31 97       	sbiw	r30, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <tune_8ths+0x1ca>
    2618:	00 c0       	rjmp	.+0      	; 0x261a <tune_8ths+0x1d0>
    261a:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    261c:	ae e6       	ldi	r26, 0x6E	; 110
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	8c 91       	ld	r24, X
    2622:	82 60       	ori	r24, 0x02	; 2
    2624:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    2626:	10 92 7a 03 	sts	0x037A, r1
				period_counter = 0;
    262a:	10 92 7d 03 	sts	0x037D, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    262e:	e8 e1       	ldi	r30, 0x18	; 24
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	2f e0       	ldi	r18, 0x0F	; 15
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	a8 95       	wdr
    263a:	e0 93 60 00 	sts	0x0060, r30
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    2644:	80 91 7a 03 	lds	r24, 0x037A
    2648:	88 23       	and	r24, r24
    264a:	81 f5       	brne	.+96     	; 0x26ac <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    264c:	80 91 7c 03 	lds	r24, 0x037C
    2650:	4b a9       	sts	0x4b, r20
    2652:	5c a9       	sts	0x4c, r21
    2654:	48 0f       	add	r20, r24
    2656:	51 1d       	adc	r21, r1
    2658:	ca 01       	movw	r24, r20
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	0e 94 10 03 	call	0x620	; 0x620 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    2660:	c3 01       	movw	r24, r6
    2662:	b2 01       	movw	r22, r4
    2664:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2668:	c4 01       	movw	r24, r8
    266a:	b8 01       	movw	r22, r16
    266c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2670:	c7 01       	movw	r24, r14
    2672:	60 e0       	ldi	r22, 0x00	; 0
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    267a:	c6 01       	movw	r24, r12
    267c:	6f ef       	ldi	r22, 0xFF	; 255
    267e:	7f e3       	ldi	r23, 0x3F	; 63
    2680:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2684:	c5 01       	movw	r24, r10
    2686:	6f ef       	ldi	r22, 0xFF	; 255
    2688:	7f e3       	ldi	r23, 0x3F	; 63
    268a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    268e:	c1 01       	movw	r24, r2
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	70 e2       	ldi	r23, 0x20	; 32
    2694:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    2698:	89 a9       	sts	0x49, r24
    269a:	9a a9       	sts	0x4a, r25
    269c:	6f ef       	ldi	r22, 0xFF	; 255
    269e:	7f e3       	ldi	r23, 0x3F	; 63
    26a0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    26a4:	80 91 7a 03 	lds	r24, 0x037A
    26a8:	88 23       	and	r24, r24
    26aa:	81 f2       	breq	.-96     	; 0x264c <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    26ac:	58 e1       	ldi	r21, 0x18	; 24
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	50 93 60 00 	sts	0x0060, r21
    26b6:	10 92 60 00 	sts	0x0060, r1
    26ba:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    26bc:	80 91 78 03 	lds	r24, 0x0378
    26c0:	90 91 79 03 	lds	r25, 0x0379
    26c4:	a9 ad       	sts	0x69, r26
    26c6:	ba ad       	sts	0x6a, r27
    26c8:	a8 17       	cp	r26, r24
    26ca:	b9 07       	cpc	r27, r25
    26cc:	50 f0       	brcs	.+20     	; 0x26e2 <tune_8ths+0x298>
    26ce:	80 91 af 02 	lds	r24, 0x02AF
    26d2:	81 30       	cpi	r24, 0x01	; 1
    26d4:	31 f4       	brne	.+12     	; 0x26e2 <tune_8ths+0x298>
    26d6:	8f a9       	sts	0x4f, r24
    26d8:	98 ad       	sts	0x68, r25
    26da:	80 95       	com	r24
    26dc:	90 95       	com	r25
    26de:	08 23       	and	r16, r24
    26e0:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    26e2:	80 91 78 03 	lds	r24, 0x0378
    26e6:	90 91 79 03 	lds	r25, 0x0379
    26ea:	e9 ad       	sts	0x69, r30
    26ec:	fa ad       	sts	0x6a, r31
    26ee:	8e 17       	cp	r24, r30
    26f0:	9f 07       	cpc	r25, r31
    26f2:	21 f4       	brne	.+8      	; 0x26fc <tune_8ths+0x2b2>
    26f4:	80 91 af 02 	lds	r24, 0x02AF
    26f8:	81 30       	cpi	r24, 0x01	; 1
    26fa:	71 f0       	breq	.+28     	; 0x2718 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    26fc:	f1 e0       	ldi	r31, 0x01	; 1
    26fe:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2702:	2d a9       	sts	0x4d, r18
    2704:	3e a9       	sts	0x4e, r19
    2706:	21 50       	subi	r18, 0x01	; 1
    2708:	30 40       	sbci	r19, 0x00	; 0
    270a:	3e ab       	sts	0x5e, r19
    270c:	2d ab       	sts	0x5d, r18
    270e:	4f ef       	ldi	r20, 0xFF	; 255
    2710:	2f 3f       	cpi	r18, 0xFF	; 255
    2712:	34 07       	cpc	r19, r20
    2714:	09 f0       	breq	.+2      	; 0x2718 <tune_8ths+0x2ce>
    2716:	67 cf       	rjmp	.-306    	; 0x25e6 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    2718:	21 96       	adiw	r28, 0x01	; 1
    271a:	ae ad       	sts	0x6e, r26
    271c:	bf ad       	sts	0x6f, r27
    271e:	21 97       	sbiw	r28, 0x01	; 1
    2720:	0d 93       	st	X+, r16
    2722:	1d 93       	st	X+, r17
    2724:	21 96       	adiw	r28, 0x01	; 1
    2726:	bf af       	sts	0x7f, r27
    2728:	ae af       	sts	0x7e, r26
    272a:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    272c:	ee e6       	ldi	r30, 0x6E	; 110
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	8d 7f       	andi	r24, 0xFD	; 253
    2734:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    2736:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2738:	2d ad       	sts	0x6d, r18
    273a:	3e ad       	sts	0x6e, r19
    273c:	2f 5f       	subi	r18, 0xFF	; 255
    273e:	3f 4f       	sbci	r19, 0xFF	; 255
    2740:	3e af       	sts	0x7e, r19
    2742:	2d af       	sts	0x7d, r18
    2744:	4b ad       	sts	0x6b, r20
    2746:	5c ad       	sts	0x6c, r21
    2748:	4d 5f       	subi	r20, 0xFD	; 253
    274a:	5f 4f       	sbci	r21, 0xFF	; 255
    274c:	5c af       	sts	0x7c, r21
    274e:	4b af       	sts	0x7b, r20
    2750:	20 31       	cpi	r18, 0x10	; 16
    2752:	31 05       	cpc	r19, r1
    2754:	09 f0       	breq	.+2      	; 0x2758 <tune_8ths+0x30e>
    2756:	26 cf       	rjmp	.-436    	; 0x25a4 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    2758:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    275a:	c0 5c       	subi	r28, 0xC0	; 192
    275c:	df 4f       	sbci	r29, 0xFF	; 255
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	df 90       	pop	r13
    2776:	cf 90       	pop	r12
    2778:	bf 90       	pop	r11
    277a:	af 90       	pop	r10
    277c:	9f 90       	pop	r9
    277e:	8f 90       	pop	r8
    2780:	7f 90       	pop	r7
    2782:	6f 90       	pop	r6
    2784:	5f 90       	pop	r5
    2786:	4f 90       	pop	r4
    2788:	3f 90       	pop	r3
    278a:	2f 90       	pop	r2
    278c:	08 95       	ret

0000278e <tune_filter>:
	
void tune_filter(void) {
    278e:	2f 92       	push	r2
    2790:	3f 92       	push	r3
    2792:	4f 92       	push	r4
    2794:	5f 92       	push	r5
    2796:	6f 92       	push	r6
    2798:	7f 92       	push	r7
    279a:	8f 92       	push	r8
    279c:	9f 92       	push	r9
    279e:	af 92       	push	r10
    27a0:	bf 92       	push	r11
    27a2:	cf 92       	push	r12
    27a4:	df 92       	push	r13
    27a6:	ef 92       	push	r14
    27a8:	ff 92       	push	r15
    27aa:	0f 93       	push	r16
    27ac:	1f 93       	push	r17
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	e9 97       	sbiw	r28, 0x39	; 57
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    27c2:	de 01       	movw	r26, r28
    27c4:	11 96       	adiw	r26, 0x01	; 1
    27c6:	e0 e6       	ldi	r30, 0x60	; 96
    27c8:	f2 e0       	ldi	r31, 0x02	; 2
    27ca:	8d e2       	ldi	r24, 0x2D	; 45
    27cc:	01 90       	ld	r0, Z+
    27ce:	0d 92       	st	X+, r0
    27d0:	81 50       	subi	r24, 0x01	; 1
    27d2:	e1 f7       	brne	.-8      	; 0x27cc <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    27d4:	88 ed       	ldi	r24, 0xD8	; 216
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	60 e0       	ldi	r22, 0x00	; 0
    27da:	70 e0       	ldi	r23, 0x00	; 0
    27dc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    27e0:	81 ee       	ldi	r24, 0xE1	; 225
    27e2:	91 e0       	ldi	r25, 0x01	; 1
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    27ec:	82 ee       	ldi	r24, 0xE2	; 226
    27ee:	91 e0       	ldi	r25, 0x01	; 1
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	70 e0       	ldi	r23, 0x00	; 0
    27f4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    27f8:	83 eb       	ldi	r24, 0xB3	; 179
    27fa:	92 e0       	ldi	r25, 0x02	; 2
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2804:	8a ed       	ldi	r24, 0xDA	; 218
    2806:	91 e0       	ldi	r25, 0x01	; 1
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	70 e0       	ldi	r23, 0x00	; 0
    280c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    2810:	8f ed       	ldi	r24, 0xDF	; 223
    2812:	91 e0       	ldi	r25, 0x01	; 1
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    281c:	80 ee       	ldi	r24, 0xE0	; 224
    281e:	91 e0       	ldi	r25, 0x01	; 1
    2820:	60 e0       	ldi	r22, 0x00	; 0
    2822:	70 e0       	ldi	r23, 0x00	; 0
    2824:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2828:	81 ed       	ldi	r24, 0xD1	; 209
    282a:	91 e0       	ldi	r25, 0x01	; 1
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	70 e0       	ldi	r23, 0x00	; 0
    2830:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2834:	86 ed       	ldi	r24, 0xD6	; 214
    2836:	91 e0       	ldi	r25, 0x01	; 1
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	70 e0       	ldi	r23, 0x00	; 0
    283c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    2840:	82 ed       	ldi	r24, 0xD2	; 210
    2842:	91 e0       	ldi	r25, 0x01	; 1
    2844:	60 e0       	ldi	r22, 0x00	; 0
    2846:	70 e0       	ldi	r23, 0x00	; 0
    2848:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    284c:	83 ed       	ldi	r24, 0xD3	; 211
    284e:	91 e0       	ldi	r25, 0x01	; 1
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	70 e0       	ldi	r23, 0x00	; 0
    2854:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    2858:	84 ed       	ldi	r24, 0xD4	; 212
    285a:	91 e0       	ldi	r25, 0x01	; 1
    285c:	6f ef       	ldi	r22, 0xFF	; 255
    285e:	7f e3       	ldi	r23, 0x3F	; 63
    2860:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    2864:	85 ed       	ldi	r24, 0xD5	; 213
    2866:	91 e0       	ldi	r25, 0x01	; 1
    2868:	6f ef       	ldi	r22, 0xFF	; 255
    286a:	7f e3       	ldi	r23, 0x3F	; 63
    286c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    2870:	89 ed       	ldi	r24, 0xD9	; 217
    2872:	91 e0       	ldi	r25, 0x01	; 1
    2874:	60 e0       	ldi	r22, 0x00	; 0
    2876:	70 e0       	ldi	r23, 0x00	; 0
    2878:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    287c:	8e ec       	ldi	r24, 0xCE	; 206
    287e:	91 e0       	ldi	r25, 0x01	; 1
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2888:	8c ec       	ldi	r24, 0xCC	; 204
    288a:	91 e0       	ldi	r25, 0x01	; 1
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2894:	8a ec       	ldi	r24, 0xCA	; 202
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	6f ef       	ldi	r22, 0xFF	; 255
    289a:	7f e3       	ldi	r23, 0x3F	; 63
    289c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    28a0:	88 ec       	ldi	r24, 0xC8	; 200
    28a2:	91 e0       	ldi	r25, 0x01	; 1
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	70 e0       	ldi	r23, 0x00	; 0
    28a8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    28ac:	80 ed       	ldi	r24, 0xD0	; 208
    28ae:	91 e0       	ldi	r25, 0x01	; 1
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	70 e0       	ldi	r23, 0x00	; 0
    28b4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    28b8:	83 ee       	ldi	r24, 0xE3	; 227
    28ba:	91 e0       	ldi	r25, 0x01	; 1
    28bc:	60 e0       	ldi	r22, 0x00	; 0
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    28c4:	84 ee       	ldi	r24, 0xE4	; 228
    28c6:	91 e0       	ldi	r25, 0x01	; 1
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	70 e0       	ldi	r23, 0x00	; 0
    28cc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    28d0:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    28d2:	ed ed       	ldi	r30, 0xDD	; 221
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	80 64       	ori	r24, 0x40	; 64
    28da:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    28dc:	80 81       	ld	r24, Z
    28de:	8f 7b       	andi	r24, 0xBF	; 191
    28e0:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	80 93 7c 03 	sts	0x037C, r24
	PORTF |= (1<<GATE); //turn gate on
    28e8:	89 9a       	sbi	0x11, 1	; 17
    28ea:	9e 01       	movw	r18, r28
    28ec:	2f 5f       	subi	r18, 0xFF	; 255
    28ee:	3f 4f       	sbci	r19, 0xFF	; 255
    28f0:	3d ab       	sts	0x5d, r19
    28f2:	2c ab       	sts	0x5c, r18
    28f4:	81 e1       	ldi	r24, 0x11	; 17
    28f6:	93 e0       	ldi	r25, 0x03	; 3
    28f8:	99 af       	sts	0x79, r25
    28fa:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    28fc:	1f aa       	sts	0x9f, r17
    28fe:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    2900:	0f 2e       	mov	r0, r31
    2902:	f4 ed       	ldi	r31, 0xD4	; 212
    2904:	af 2e       	mov	r10, r31
    2906:	f1 e0       	ldi	r31, 0x01	; 1
    2908:	bf 2e       	mov	r11, r31
    290a:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    290c:	0f 2e       	mov	r0, r31
    290e:	f8 ed       	ldi	r31, 0xD8	; 216
    2910:	6f 2e       	mov	r6, r31
    2912:	f1 e0       	ldi	r31, 0x01	; 1
    2914:	7f 2e       	mov	r7, r31
    2916:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2918:	0f 2e       	mov	r0, r31
    291a:	f5 ed       	ldi	r31, 0xD5	; 213
    291c:	4f 2e       	mov	r4, r31
    291e:	f1 e0       	ldi	r31, 0x01	; 1
    2920:	5f 2e       	mov	r5, r31
    2922:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    2924:	0f 2e       	mov	r0, r31
    2926:	fa ec       	ldi	r31, 0xCA	; 202
    2928:	2f 2e       	mov	r2, r31
    292a:	f1 e0       	ldi	r31, 0x01	; 1
    292c:	3f 2e       	mov	r3, r31
    292e:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    2930:	ac a9       	sts	0x4c, r26
    2932:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    2934:	8c 91       	ld	r24, X
    2936:	80 93 7c 03 	sts	0x037C, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    293a:	84 b5       	in	r24, 0x24	; 36
    293c:	8f 60       	ori	r24, 0x0F	; 15
    293e:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2944:	ee e6       	ldi	r30, 0x6E	; 110
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	82 60       	ori	r24, 0x02	; 2
    294c:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    294e:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    2950:	ee a9       	sts	0x4e, r30
    2952:	ff a9       	sts	0x4f, r31
    2954:	e2 30       	cpi	r30, 0x02	; 2
    2956:	f1 05       	cpc	r31, r1
    2958:	24 f4       	brge	.+8      	; 0x2962 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    295a:	83 e0       	ldi	r24, 0x03	; 3
    295c:	80 93 7b 03 	sts	0x037B, r24
    2960:	03 c0       	rjmp	.+6      	; 0x2968 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    2962:	82 e0       	ldi	r24, 0x02	; 2
    2964:	80 93 7b 03 	sts	0x037B, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    2968:	11 96       	adiw	r26, 0x01	; 1
    296a:	2d 91       	ld	r18, X+
    296c:	3c 91       	ld	r19, X
    296e:	12 97       	sbiw	r26, 0x02	; 2
    2970:	3b ab       	sts	0x5b, r19
    2972:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2974:	8d e0       	ldi	r24, 0x0D	; 13
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9f a7       	lds	r25, 0x7f
    297a:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    297c:	ee 24       	eor	r14, r14
    297e:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2980:	0f 2e       	mov	r0, r31
    2982:	f1 ed       	ldi	r31, 0xD1	; 209
    2984:	cf 2e       	mov	r12, r31
    2986:	f1 e0       	ldi	r31, 0x01	; 1
    2988:	df 2e       	mov	r13, r31
    298a:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    298c:	0f 2e       	mov	r0, r31
    298e:	f6 ed       	ldi	r31, 0xD6	; 214
    2990:	8f 2e       	mov	r8, r31
    2992:	f1 e0       	ldi	r31, 0x01	; 1
    2994:	9f 2e       	mov	r9, r31
    2996:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	fc 01       	movw	r30, r24
    299e:	0e a4       	lds	r16, 0xae
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <tune_filter+0x218>
    29a2:	ee 0f       	add	r30, r30
    29a4:	ff 1f       	adc	r31, r31
    29a6:	0a 94       	dec	r0
    29a8:	e2 f7       	brpl	.-8      	; 0x29a2 <tune_filter+0x214>
    29aa:	f9 ab       	sts	0x59, r31
    29ac:	e8 ab       	sts	0x58, r30
    29ae:	ee 2a       	or	r14, r30
    29b0:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    29b2:	c5 01       	movw	r24, r10
    29b4:	b7 01       	movw	r22, r14
    29b6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
			count_finished = FALSE;
    29ba:	10 92 7a 03 	sts	0x037A, r1
			period_counter = 0;
    29be:	10 92 7d 03 	sts	0x037D, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    29c2:	8f e0       	ldi	r24, 0x0F	; 15
    29c4:	28 e1       	ldi	r18, 0x18	; 24
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	a8 95       	wdr
    29ce:	20 93 60 00 	sts	0x0060, r18
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    29d8:	80 91 7a 03 	lds	r24, 0x037A
    29dc:	88 23       	and	r24, r24
    29de:	b1 f5       	brne	.+108    	; 0x2a4c <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    29e0:	02 ed       	ldi	r16, 0xD2	; 210
    29e2:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    29e4:	80 91 7c 03 	lds	r24, 0x037C
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	84 5d       	subi	r24, 0xD4	; 212
    29ec:	9e 4f       	sbci	r25, 0xFE	; 254
    29ee:	60 e0       	ldi	r22, 0x00	; 0
    29f0:	0e 94 10 03 	call	0x620	; 0x620 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    29f4:	c5 01       	movw	r24, r10
    29f6:	b7 01       	movw	r22, r14
    29f8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    29fc:	c3 01       	movw	r24, r6
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2a06:	c2 01       	movw	r24, r4
    2a08:	6f ef       	ldi	r22, 0xFF	; 255
    2a0a:	7f e3       	ldi	r23, 0x3F	; 63
    2a0c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    2a10:	c1 01       	movw	r24, r2
    2a12:	6f ef       	ldi	r22, 0xFF	; 255
    2a14:	7f e3       	ldi	r23, 0x3F	; 63
    2a16:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    2a1a:	8e ec       	ldi	r24, 0xCE	; 206
    2a1c:	91 e0       	ldi	r25, 0x01	; 1
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	70 e0       	ldi	r23, 0x00	; 0
    2a22:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2a26:	c6 01       	movw	r24, r12
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    2a30:	c4 01       	movw	r24, r8
    2a32:	60 e0       	ldi	r22, 0x00	; 0
    2a34:	70 e0       	ldi	r23, 0x00	; 0
    2a36:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    2a44:	80 91 7a 03 	lds	r24, 0x037A
    2a48:	88 23       	and	r24, r24
    2a4a:	61 f2       	breq	.-104    	; 0x29e4 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    2a4c:	88 e1       	ldi	r24, 0x18	; 24
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	80 93 60 00 	sts	0x0060, r24
    2a56:	10 92 60 00 	sts	0x0060, r1
    2a5a:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    2a5c:	80 91 78 03 	lds	r24, 0x0378
    2a60:	90 91 79 03 	lds	r25, 0x0379
    2a64:	2a a9       	sts	0x4a, r18
    2a66:	3b a9       	sts	0x4b, r19
    2a68:	28 17       	cp	r18, r24
    2a6a:	39 07       	cpc	r19, r25
    2a6c:	50 f0       	brcs	.+20     	; 0x2a82 <tune_filter+0x2f4>
    2a6e:	80 91 af 02 	lds	r24, 0x02AF
    2a72:	81 30       	cpi	r24, 0x01	; 1
    2a74:	31 f4       	brne	.+12     	; 0x2a82 <tune_filter+0x2f4>
    2a76:	88 a9       	sts	0x48, r24
    2a78:	99 a9       	sts	0x49, r25
    2a7a:	80 95       	com	r24
    2a7c:	90 95       	com	r25
    2a7e:	e8 22       	and	r14, r24
    2a80:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2a82:	80 91 78 03 	lds	r24, 0x0378
    2a86:	90 91 79 03 	lds	r25, 0x0379
    2a8a:	ea a9       	sts	0x4a, r30
    2a8c:	fb a9       	sts	0x4b, r31
    2a8e:	8e 17       	cp	r24, r30
    2a90:	9f 07       	cpc	r25, r31
    2a92:	21 f4       	brne	.+8      	; 0x2a9c <tune_filter+0x30e>
    2a94:	80 91 af 02 	lds	r24, 0x02AF
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	71 f0       	breq	.+28     	; 0x2ab8 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2aa2:	2e a5       	lds	r18, 0x6e
    2aa4:	3f a5       	lds	r19, 0x6f
    2aa6:	21 50       	subi	r18, 0x01	; 1
    2aa8:	30 40       	sbci	r19, 0x00	; 0
    2aaa:	3f a7       	lds	r19, 0x7f
    2aac:	2e a7       	lds	r18, 0x7e
    2aae:	8f ef       	ldi	r24, 0xFF	; 255
    2ab0:	2f 3f       	cpi	r18, 0xFF	; 255
    2ab2:	38 07       	cpc	r19, r24
    2ab4:	09 f0       	breq	.+2      	; 0x2ab8 <tune_filter+0x32a>
    2ab6:	70 cf       	rjmp	.-288    	; 0x2998 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2ab8:	ee a9       	sts	0x4e, r30
    2aba:	ff a9       	sts	0x4f, r31
    2abc:	31 96       	adiw	r30, 0x01	; 1
    2abe:	ff ab       	sts	0x5f, r31
    2ac0:	ee ab       	sts	0x5e, r30
    2ac2:	c7 01       	movw	r24, r14
    2ac4:	80 96       	adiw	r24, 0x20	; 32
    2ac6:	e8 ad       	sts	0x68, r30
    2ac8:	f9 ad       	sts	0x69, r31
    2aca:	81 93       	st	Z+, r24
    2acc:	91 93       	st	Z+, r25
    2ace:	f9 af       	sts	0x79, r31
    2ad0:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2ad2:	ee e6       	ldi	r30, 0x6E	; 110
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	8d 7f       	andi	r24, 0xFD	; 253
    2ada:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2adc:	14 bc       	out	0x24, r1	; 36
    2ade:	2c a9       	sts	0x4c, r18
    2ae0:	3d a9       	sts	0x4d, r19
    2ae2:	2d 5f       	subi	r18, 0xFD	; 253
    2ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae6:	3d ab       	sts	0x5d, r19
    2ae8:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2aea:	8e a9       	sts	0x4e, r24
    2aec:	9f a9       	sts	0x4f, r25
    2aee:	8f 30       	cpi	r24, 0x0F	; 15
    2af0:	91 05       	cpc	r25, r1
    2af2:	09 f0       	breq	.+2      	; 0x2af6 <tune_filter+0x368>
    2af4:	1d cf       	rjmp	.-454    	; 0x2930 <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2af6:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2af8:	e9 96       	adiw	r28, 0x39	; 57
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	1f 91       	pop	r17
    2b0a:	0f 91       	pop	r16
    2b0c:	ff 90       	pop	r15
    2b0e:	ef 90       	pop	r14
    2b10:	df 90       	pop	r13
    2b12:	cf 90       	pop	r12
    2b14:	bf 90       	pop	r11
    2b16:	af 90       	pop	r10
    2b18:	9f 90       	pop	r9
    2b1a:	8f 90       	pop	r8
    2b1c:	7f 90       	pop	r7
    2b1e:	6f 90       	pop	r6
    2b20:	5f 90       	pop	r5
    2b22:	4f 90       	pop	r4
    2b24:	3f 90       	pop	r3
    2b26:	2f 90       	pop	r2
    2b28:	08 95       	ret

00002b2a <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2b2a:	8f e0       	ldi	r24, 0x0F	; 15
    2b2c:	93 e0       	ldi	r25, 0x03	; 3
    2b2e:	6c e0       	ldi	r22, 0x0C	; 12
    2b30:	76 e0       	ldi	r23, 0x06	; 6
    2b32:	40 e2       	ldi	r20, 0x20	; 32
    2b34:	50 e0       	ldi	r21, 0x00	; 0
    2b36:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2b3a:	81 e5       	ldi	r24, 0x51	; 81
    2b3c:	93 e0       	ldi	r25, 0x03	; 3
    2b3e:	6e e4       	ldi	r22, 0x4E	; 78
    2b40:	76 e0       	ldi	r23, 0x06	; 6
    2b42:	42 e2       	ldi	r20, 0x22	; 34
    2b44:	50 e0       	ldi	r21, 0x00	; 0
    2b46:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2b4a:	8f e2       	ldi	r24, 0x2F	; 47
    2b4c:	93 e0       	ldi	r25, 0x03	; 3
    2b4e:	6c e2       	ldi	r22, 0x2C	; 44
    2b50:	76 e0       	ldi	r23, 0x06	; 6
    2b52:	42 e2       	ldi	r20, 0x22	; 34
    2b54:	50 e0       	ldi	r21, 0x00	; 0
    2b56:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <__eeupd_block_m6450a>
	
	
}
    2b5a:	08 95       	ret

00002b5c <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2b5c:	82 e7       	ldi	r24, 0x72	; 114
    2b5e:	96 e0       	ldi	r25, 0x06	; 6
    2b60:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__eerd_word_m6450a>
    2b64:	90 93 76 03 	sts	0x0376, r25
    2b68:	80 93 75 03 	sts	0x0375, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2b6c:	80 e7       	ldi	r24, 0x70	; 112
    2b6e:	96 e0       	ldi	r25, 0x06	; 6
    2b70:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__eerd_word_m6450a>
    2b74:	90 93 74 03 	sts	0x0374, r25
    2b78:	80 93 73 03 	sts	0x0373, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2b7c:	81 e5       	ldi	r24, 0x51	; 81
    2b7e:	93 e0       	ldi	r25, 0x03	; 3
    2b80:	6e e4       	ldi	r22, 0x4E	; 78
    2b82:	76 e0       	ldi	r23, 0x06	; 6
    2b84:	42 e2       	ldi	r20, 0x22	; 34
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2b8c:	8f e2       	ldi	r24, 0x2F	; 47
    2b8e:	93 e0       	ldi	r25, 0x03	; 3
    2b90:	6c e2       	ldi	r22, 0x2C	; 44
    2b92:	76 e0       	ldi	r23, 0x06	; 6
    2b94:	42 e2       	ldi	r20, 0x22	; 34
    2b96:	50 e0       	ldi	r21, 0x00	; 0
    2b98:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2b9c:	8f e0       	ldi	r24, 0x0F	; 15
    2b9e:	93 e0       	ldi	r25, 0x03	; 3
    2ba0:	6c e0       	ldi	r22, 0x0C	; 12
    2ba2:	76 e0       	ldi	r23, 0x06	; 6
    2ba4:	40 e2       	ldi	r20, 0x20	; 32
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2bac:	08 95       	ret

00002bae <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2bae:	98 2f       	mov	r25, r24
    2bb0:	96 95       	lsr	r25
    2bb2:	96 95       	lsr	r25
    2bb4:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2bb6:	29 2f       	mov	r18, r25
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	f9 01       	movw	r30, r18
    2bbc:	31 97       	sbiw	r30, 0x01	; 1
    2bbe:	ee 0f       	add	r30, r30
    2bc0:	ff 1f       	adc	r31, r31
    2bc2:	e6 0f       	add	r30, r22
    2bc4:	f7 1f       	adc	r31, r23
    2bc6:	01 90       	ld	r0, Z+
    2bc8:	f0 81       	ld	r31, Z
    2bca:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2bcc:	22 0f       	add	r18, r18
    2bce:	33 1f       	adc	r19, r19
    2bd0:	26 0f       	add	r18, r22
    2bd2:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2bd4:	d9 01       	movw	r26, r18
    2bd6:	4d 91       	ld	r20, X+
    2bd8:	5c 91       	ld	r21, X
    2bda:	11 97       	sbiw	r26, 0x01	; 1
    2bdc:	4e 1b       	sub	r20, r30
    2bde:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2be0:	99 0f       	add	r25, r25
    2be2:	99 0f       	add	r25, r25
    2be4:	99 0f       	add	r25, r25
    2be6:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	48 9f       	mul	r20, r24
    2bec:	90 01       	movw	r18, r0
    2bee:	49 9f       	mul	r20, r25
    2bf0:	30 0d       	add	r19, r0
    2bf2:	58 9f       	mul	r21, r24
    2bf4:	30 0d       	add	r19, r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	36 95       	lsr	r19
    2bfa:	27 95       	ror	r18
    2bfc:	36 95       	lsr	r19
    2bfe:	27 95       	ror	r18
    2c00:	36 95       	lsr	r19
    2c02:	27 95       	ror	r18
    2c04:	e2 0f       	add	r30, r18
    2c06:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2c08:	8e 2f       	mov	r24, r30
    2c0a:	9f 2f       	mov	r25, r31
    2c0c:	08 95       	ret

00002c0e <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	a2 97       	sbiw	r28, 0x22	; 34
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2c22:	de 01       	movw	r26, r28
    2c24:	11 96       	adiw	r26, 0x01	; 1
    2c26:	ed e8       	ldi	r30, 0x8D	; 141
    2c28:	f2 e0       	ldi	r31, 0x02	; 2
    2c2a:	82 e2       	ldi	r24, 0x22	; 34
    2c2c:	01 90       	ld	r0, Z+
    2c2e:	0d 92       	st	X+, r0
    2c30:	81 50       	subi	r24, 0x01	; 1
    2c32:	e1 f7       	brne	.-8      	; 0x2c2c <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2c34:	a1 e5       	ldi	r26, 0x51	; 81
    2c36:	b3 e0       	ldi	r27, 0x03	; 3
    2c38:	fe 01       	movw	r30, r28
    2c3a:	31 96       	adiw	r30, 0x01	; 1
    2c3c:	82 e2       	ldi	r24, 0x22	; 34
    2c3e:	01 90       	ld	r0, Z+
    2c40:	0d 92       	st	X+, r0
    2c42:	81 50       	subi	r24, 0x01	; 1
    2c44:	e1 f7       	brne	.-8      	; 0x2c3e <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2c46:	af e2       	ldi	r26, 0x2F	; 47
    2c48:	b3 e0       	ldi	r27, 0x03	; 3
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	31 96       	adiw	r30, 0x01	; 1
    2c4e:	82 e2       	ldi	r24, 0x22	; 34
    2c50:	01 90       	ld	r0, Z+
    2c52:	0d 92       	st	X+, r0
    2c54:	81 50       	subi	r24, 0x01	; 1
    2c56:	e1 f7       	brne	.-8      	; 0x2c50 <set_one_volt_per_octave+0x42>
	
	
}
    2c58:	a2 96       	adiw	r28, 0x22	; 34
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	08 95       	ret

00002c6a <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2c6a:	ef e6       	ldi	r30, 0x6F	; 111
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	82 70       	andi	r24, 0x02	; 2
    2c72:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2c74:	e1 e8       	ldi	r30, 0x81	; 129
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	87 7f       	andi	r24, 0xF7	; 247
    2c7c:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2c7e:	8f e0       	ldi	r24, 0x0F	; 15
    2c80:	6f e0       	ldi	r22, 0x0F	; 15
    2c82:	7e e5       	ldi	r23, 0x5E	; 94
    2c84:	0e 94 c1 10 	call	0x2182	; 0x2182 <set_vco_init_cv>
    2c88:	90 93 76 03 	sts	0x0376, r25
    2c8c:	80 93 75 03 	sts	0x0375, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2c90:	80 ef       	ldi	r24, 0xF0	; 240
    2c92:	6f e0       	ldi	r22, 0x0F	; 15
    2c94:	7e e5       	ldi	r23, 0x5E	; 94
    2c96:	0e 94 c1 10 	call	0x2182	; 0x2182 <set_vco_init_cv>
    2c9a:	90 93 74 03 	sts	0x0374, r25
    2c9e:	80 93 73 03 	sts	0x0373, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2ca2:	8f e0       	ldi	r24, 0x0F	; 15
    2ca4:	0e 94 25 12 	call	0x244a	; 0x244a <tune_8ths>
			tune_8ths(VCO2);
    2ca8:	80 ef       	ldi	r24, 0xF0	; 240
    2caa:	0e 94 25 12 	call	0x244a	; 0x244a <tune_8ths>
			tune_filter();
    2cae:	0e 94 c7 13 	call	0x278e	; 0x278e <tune_filter>
			save_tuning_tables();
    2cb2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <save_tuning_tables>
    2cb6:	8f e4       	ldi	r24, 0x4F	; 79
    2cb8:	93 ec       	ldi	r25, 0xC3	; 195
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <tune+0x50>
    2cbe:	00 c0       	rjmp	.+0      	; 0x2cc0 <tune+0x56>
    2cc0:	00 00       	nop
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2cc2:	08 95       	ret

00002cc4 <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2cc4:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2cc6:	98 2f       	mov	r25, r24
    2cc8:	9c 70       	andi	r25, 0x0C	; 12
    2cca:	20 91 c1 02 	lds	r18, 0x02C1
    2cce:	92 2b       	or	r25, r18
    2cd0:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2cd4:	98 2f       	mov	r25, r24
    2cd6:	92 95       	swap	r25
    2cd8:	96 95       	lsr	r25
    2cda:	97 70       	andi	r25, 0x07	; 7
    2cdc:	90 ff       	sbrs	r25, 0
    2cde:	16 c0       	rjmp	.+44     	; 0x2d0c <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2ce0:	20 91 81 03 	lds	r18, 0x0381
    2ce4:	30 91 82 03 	lds	r19, 0x0382
    2ce8:	2f 5f       	subi	r18, 0xFF	; 255
    2cea:	3f 4f       	sbci	r19, 0xFF	; 255
    2cec:	30 93 82 03 	sts	0x0382, r19
    2cf0:	20 93 81 03 	sts	0x0381, r18
    2cf4:	92 e0       	ldi	r25, 0x02	; 2
    2cf6:	28 35       	cpi	r18, 0x58	; 88
    2cf8:	39 07       	cpc	r19, r25
    2cfa:	61 f4       	brne	.+24     	; 0x2d14 <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2cfc:	10 92 82 03 	sts	0x0382, r1
    2d00:	10 92 81 03 	sts	0x0381, r1
			current_patch.mode = CAL;
    2d04:	95 e0       	ldi	r25, 0x05	; 5
    2d06:	90 93 07 03 	sts	0x0307, r25
    2d0a:	04 c0       	rjmp	.+8      	; 0x2d14 <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2d0c:	10 92 82 03 	sts	0x0382, r1
    2d10:	10 92 81 03 	sts	0x0381, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2d14:	90 91 83 03 	lds	r25, 0x0383
    2d18:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2d1a:	98 27       	eor	r25, r24
    2d1c:	90 93 83 03 	sts	0x0383, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2d20:	89 23       	and	r24, r25
    2d22:	08 95       	ret

00002d24 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2d24:	ed ed       	ldi	r30, 0xDD	; 221
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	90 81       	ld	r25, Z
    2d2a:	9f 7b       	andi	r25, 0xBF	; 191
    2d2c:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	21 70       	andi	r18, 0x01	; 1
    2d34:	30 70       	andi	r19, 0x00	; 0
    2d36:	22 0f       	add	r18, r18
    2d38:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2d3a:	68 2f       	mov	r22, r24
    2d3c:	62 95       	swap	r22
    2d3e:	66 95       	lsr	r22
    2d40:	67 70       	andi	r22, 0x07	; 7
    2d42:	67 95       	ror	r22
    2d44:	66 27       	eor	r22, r22
    2d46:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d48:	26 2b       	or	r18, r22
    2d4a:	98 2f       	mov	r25, r24
    2d4c:	96 95       	lsr	r25
    2d4e:	96 95       	lsr	r25
    2d50:	91 70       	andi	r25, 0x01	; 1
    2d52:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2d54:	68 2f       	mov	r22, r24
    2d56:	66 1f       	adc	r22, r22
    2d58:	66 27       	eor	r22, r22
    2d5a:	66 1f       	adc	r22, r22
    2d5c:	66 0f       	add	r22, r22
    2d5e:	66 0f       	add	r22, r22
    2d60:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d62:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2d64:	a8 2f       	mov	r26, r24
    2d66:	a6 95       	lsr	r26
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	a1 70       	andi	r26, 0x01	; 1
    2d6c:	b0 70       	andi	r27, 0x00	; 0
    2d6e:	bd 01       	movw	r22, r26
    2d70:	66 0f       	add	r22, r22
    2d72:	77 1f       	adc	r23, r23
    2d74:	66 0f       	add	r22, r22
    2d76:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d78:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2d7a:	68 2f       	mov	r22, r24
    2d7c:	62 95       	swap	r22
    2d7e:	6f 70       	andi	r22, 0x0F	; 15
    2d80:	70 e0       	ldi	r23, 0x00	; 0
    2d82:	61 70       	andi	r22, 0x01	; 1
    2d84:	70 70       	andi	r23, 0x00	; 0
    2d86:	ab 01       	movw	r20, r22
    2d88:	00 24       	eor	r0, r0
    2d8a:	56 95       	lsr	r21
    2d8c:	47 95       	ror	r20
    2d8e:	07 94       	ror	r0
    2d90:	56 95       	lsr	r21
    2d92:	47 95       	ror	r20
    2d94:	07 94       	ror	r0
    2d96:	54 2f       	mov	r21, r20
    2d98:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d9a:	62 2f       	mov	r22, r18
    2d9c:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2d9e:	48 2f       	mov	r20, r24
    2da0:	42 95       	swap	r20
    2da2:	46 95       	lsr	r20
    2da4:	46 95       	lsr	r20
    2da6:	43 70       	andi	r20, 0x03	; 3
    2da8:	50 e0       	ldi	r21, 0x00	; 0
    2daa:	41 70       	andi	r20, 0x01	; 1
    2dac:	50 70       	andi	r21, 0x00	; 0
    2dae:	9a 01       	movw	r18, r20
    2db0:	22 0f       	add	r18, r18
    2db2:	33 1f       	adc	r19, r19
    2db4:	22 95       	swap	r18
    2db6:	32 95       	swap	r19
    2db8:	30 7f       	andi	r19, 0xF0	; 240
    2dba:	32 27       	eor	r19, r18
    2dbc:	20 7f       	andi	r18, 0xF0	; 240
    2dbe:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2dc0:	46 2f       	mov	r20, r22
    2dc2:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2dc4:	86 95       	lsr	r24
    2dc6:	86 95       	lsr	r24
    2dc8:	86 95       	lsr	r24
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	21 70       	andi	r18, 0x01	; 1
    2dd0:	30 70       	andi	r19, 0x00	; 0
    2dd2:	c9 01       	movw	r24, r18
    2dd4:	82 95       	swap	r24
    2dd6:	92 95       	swap	r25
    2dd8:	90 7f       	andi	r25, 0xF0	; 240
    2dda:	98 27       	eor	r25, r24
    2ddc:	80 7f       	andi	r24, 0xF0	; 240
    2dde:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2de0:	84 2b       	or	r24, r20
    2de2:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2de4:	80 81       	ld	r24, Z
    2de6:	80 64       	ori	r24, 0x40	; 64
    2de8:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2dea:	80 81       	ld	r24, Z
    2dec:	8f 7b       	andi	r24, 0xBF	; 191
    2dee:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2df0:	12 b8       	out	0x02, r1	; 2
	
	
    2df2:	08 95       	ret

00002df4 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2df4:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2df6:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2df8:	74 83       	std	Z+4, r23	; 0x04
    2dfa:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2dfc:	11 82       	std	Z+1, r1	; 0x01
    2dfe:	10 82       	st	Z, r1
}
    2e00:	08 95       	ret

00002e02 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2e02:	1f 93       	push	r17
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	ec 01       	movw	r28, r24
    2e0a:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2e0c:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <store_and_clear_interrupt>
    2e10:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2e12:	39 81       	ldd	r19, Y+1	; 0x01
    2e14:	83 2f       	mov	r24, r19
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e1c:	70 e0       	ldi	r23, 0x00	; 0
    2e1e:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__divmodhi4>
    2e22:	48 81       	ld	r20, Y
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	84 17       	cp	r24, r20
    2e28:	95 07       	cpc	r25, r21
    2e2a:	29 f4       	brne	.+10     	; 0x2e36 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2e2c:	82 2f       	mov	r24, r18
    2e2e:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <restore_interrupt_setting>
      return false;
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	11 c0       	rjmp	.+34     	; 0x2e58 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2e36:	eb 81       	ldd	r30, Y+3	; 0x03
    2e38:	fc 81       	ldd	r31, Y+4	; 0x04
    2e3a:	e3 0f       	add	r30, r19
    2e3c:	f1 1d       	adc	r31, r1
    2e3e:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	01 96       	adiw	r24, 0x01	; 1
    2e46:	6a 81       	ldd	r22, Y+2	; 0x02
    2e48:	70 e0       	ldi	r23, 0x00	; 0
    2e4a:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__divmodhi4>
    2e4e:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2e50:	82 2f       	mov	r24, r18
    2e52:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <restore_interrupt_setting>
      return true;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	1f 91       	pop	r17
    2e5e:	08 95       	ret

00002e60 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29
    2e64:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2e66:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2e6a:	29 81       	ldd	r18, Y+1	; 0x01
    2e6c:	98 81       	ld	r25, Y
    2e6e:	29 17       	cp	r18, r25
    2e70:	18 f0       	brcs	.+6      	; 0x2e78 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2e72:	c2 2f       	mov	r28, r18
    2e74:	c9 1b       	sub	r28, r25
    2e76:	03 c0       	rjmp	.+6      	; 0x2e7e <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2e78:	ca 81       	ldd	r28, Y+2	; 0x02
    2e7a:	c2 0f       	add	r28, r18
    2e7c:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2e7e:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <restore_interrupt_setting>
   return len;
}
    2e82:	8c 2f       	mov	r24, r28
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

00002e8a <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2e8a:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2e8c:	20 81       	ld	r18, Z
    2e8e:	86 2f       	mov	r24, r22
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	82 0f       	add	r24, r18
    2e94:	91 1d       	adc	r25, r1
    2e96:	62 81       	ldd	r22, Z+2	; 0x02
    2e98:	70 e0       	ldi	r23, 0x00	; 0
    2e9a:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__divmodhi4>
    2e9e:	03 80       	ldd	r0, Z+3	; 0x03
    2ea0:	f4 81       	ldd	r31, Z+4	; 0x04
    2ea2:	e0 2d       	mov	r30, r0
    2ea4:	e8 0f       	add	r30, r24
    2ea6:	f9 1f       	adc	r31, r25
}
    2ea8:	80 81       	ld	r24, Z
    2eaa:	08 95       	ret

00002eac <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2eac:	1f 93       	push	r17
    2eae:	cf 93       	push	r28
    2eb0:	df 93       	push	r29
    2eb2:	ec 01       	movw	r28, r24
    2eb4:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2eb6:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <store_and_clear_interrupt>
    2eba:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2ebc:	88 81       	ld	r24, Y
    2ebe:	21 2f       	mov	r18, r17
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	28 0f       	add	r18, r24
    2ec4:	31 1d       	adc	r19, r1
    2ec6:	6a 81       	ldd	r22, Y+2	; 0x02
    2ec8:	c9 01       	movw	r24, r18
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__divmodhi4>
    2ed0:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2ed2:	84 2f       	mov	r24, r20
    2ed4:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <restore_interrupt_setting>
}
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	1f 91       	pop	r17
    2ede:	08 95       	ret

00002ee0 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2ee0:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2ee2:	f8 94       	cli
   return sreg;
}
    2ee4:	08 95       	ret

00002ee6 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2ee6:	8f bf       	out	0x3f, r24	; 63
}
    2ee8:	08 95       	ret

00002eea <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2eea:	88 1f       	adc	r24, r24
    2eec:	88 27       	eor	r24, r24
    2eee:	88 1f       	adc	r24, r24
    2ef0:	08 95       	ret

00002ef2 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2ef2:	91 e0       	ldi	r25, 0x01	; 1
    2ef4:	88 3f       	cpi	r24, 0xF8	; 248
    2ef6:	08 f4       	brcc	.+2      	; 0x2efa <midi_is_realtime+0x8>
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
}
    2efa:	89 2f       	mov	r24, r25
    2efc:	08 95       	ret

00002efe <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2efe:	28 2f       	mov	r18, r24
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	20 7f       	andi	r18, 0xF0	; 240
    2f04:	30 70       	andi	r19, 0x00	; 0
    2f06:	20 3c       	cpi	r18, 0xC0	; 192
    2f08:	31 05       	cpc	r19, r1
    2f0a:	e9 f1       	breq	.+122    	; 0x2f86 <midi_packet_length+0x88>
    2f0c:	21 3c       	cpi	r18, 0xC1	; 193
    2f0e:	31 05       	cpc	r19, r1
    2f10:	8c f4       	brge	.+34     	; 0x2f34 <midi_packet_length+0x36>
    2f12:	20 39       	cpi	r18, 0x90	; 144
    2f14:	31 05       	cpc	r19, r1
    2f16:	e1 f0       	breq	.+56     	; 0x2f50 <midi_packet_length+0x52>
    2f18:	21 39       	cpi	r18, 0x91	; 145
    2f1a:	31 05       	cpc	r19, r1
    2f1c:	24 f4       	brge	.+8      	; 0x2f26 <midi_packet_length+0x28>
    2f1e:	20 38       	cpi	r18, 0x80	; 128
    2f20:	31 05       	cpc	r19, r1
    2f22:	79 f5       	brne	.+94     	; 0x2f82 <midi_packet_length+0x84>
    2f24:	15 c0       	rjmp	.+42     	; 0x2f50 <midi_packet_length+0x52>
    2f26:	20 3a       	cpi	r18, 0xA0	; 160
    2f28:	31 05       	cpc	r19, r1
    2f2a:	91 f0       	breq	.+36     	; 0x2f50 <midi_packet_length+0x52>
    2f2c:	20 3b       	cpi	r18, 0xB0	; 176
    2f2e:	31 05       	cpc	r19, r1
    2f30:	41 f5       	brne	.+80     	; 0x2f82 <midi_packet_length+0x84>
    2f32:	0e c0       	rjmp	.+28     	; 0x2f50 <midi_packet_length+0x52>
    2f34:	20 3e       	cpi	r18, 0xE0	; 224
    2f36:	31 05       	cpc	r19, r1
    2f38:	59 f0       	breq	.+22     	; 0x2f50 <midi_packet_length+0x52>
    2f3a:	21 3e       	cpi	r18, 0xE1	; 225
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	24 f4       	brge	.+8      	; 0x2f48 <midi_packet_length+0x4a>
    2f40:	20 3d       	cpi	r18, 0xD0	; 208
    2f42:	31 05       	cpc	r19, r1
    2f44:	f1 f4       	brne	.+60     	; 0x2f82 <midi_packet_length+0x84>
    2f46:	1f c0       	rjmp	.+62     	; 0x2f86 <midi_packet_length+0x88>
    2f48:	20 3f       	cpi	r18, 0xF0	; 240
    2f4a:	31 05       	cpc	r19, r1
    2f4c:	d1 f4       	brne	.+52     	; 0x2f82 <midi_packet_length+0x84>
    2f4e:	02 c0       	rjmp	.+4      	; 0x2f54 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2f50:	83 e0       	ldi	r24, 0x03	; 3
    2f52:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2f54:	86 3f       	cpi	r24, 0xF6	; 246
    2f56:	79 f0       	breq	.+30     	; 0x2f76 <midi_packet_length+0x78>
    2f58:	87 3f       	cpi	r24, 0xF7	; 247
    2f5a:	38 f4       	brcc	.+14     	; 0x2f6a <midi_packet_length+0x6c>
    2f5c:	82 3f       	cpi	r24, 0xF2	; 242
    2f5e:	a9 f0       	breq	.+42     	; 0x2f8a <midi_packet_length+0x8c>
    2f60:	83 3f       	cpi	r24, 0xF3	; 243
    2f62:	59 f0       	breq	.+22     	; 0x2f7a <midi_packet_length+0x7c>
    2f64:	81 3f       	cpi	r24, 0xF1	; 241
    2f66:	59 f4       	brne	.+22     	; 0x2f7e <midi_packet_length+0x80>
    2f68:	08 c0       	rjmp	.+16     	; 0x2f7a <midi_packet_length+0x7c>
    2f6a:	88 3f       	cpi	r24, 0xF8	; 248
    2f6c:	40 f0       	brcs	.+16     	; 0x2f7e <midi_packet_length+0x80>
    2f6e:	8d 3f       	cpi	r24, 0xFD	; 253
    2f70:	10 f0       	brcs	.+4      	; 0x2f76 <midi_packet_length+0x78>
    2f72:	8e 3f       	cpi	r24, 0xFE	; 254
    2f74:	20 f0       	brcs	.+8      	; 0x2f7e <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
    2f7c:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2f86:	82 e0       	ldi	r24, 0x02	; 2
    2f88:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2f8a:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2f8c:	08 95       	ret

00002f8e <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2f8e:	0f 93       	push	r16
    2f90:	34 2f       	mov	r19, r20
    2f92:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2f94:	46 2f       	mov	r20, r22
    2f96:	4f 70       	andi	r20, 0x0F	; 15
    2f98:	40 6b       	ori	r20, 0xB0	; 176
    2f9a:	23 2f       	mov	r18, r19
    2f9c:	2f 77       	andi	r18, 0x7F	; 127
    2f9e:	0f 77       	andi	r16, 0x7F	; 127
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	ed 91       	ld	r30, X+
    2fa4:	fc 91       	ld	r31, X
    2fa6:	63 e0       	ldi	r22, 0x03	; 3
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2fac:	0f 91       	pop	r16
    2fae:	08 95       	ret

00002fb0 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2fb0:	0f 93       	push	r16
    2fb2:	34 2f       	mov	r19, r20
    2fb4:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2fb6:	46 2f       	mov	r20, r22
    2fb8:	4f 70       	andi	r20, 0x0F	; 15
    2fba:	40 69       	ori	r20, 0x90	; 144
    2fbc:	23 2f       	mov	r18, r19
    2fbe:	2f 77       	andi	r18, 0x7F	; 127
    2fc0:	0f 77       	andi	r16, 0x7F	; 127
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	ed 91       	ld	r30, X+
    2fc6:	fc 91       	ld	r31, X
    2fc8:	63 e0       	ldi	r22, 0x03	; 3
    2fca:	70 e0       	ldi	r23, 0x00	; 0
    2fcc:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2fce:	0f 91       	pop	r16
    2fd0:	08 95       	ret

00002fd2 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2fd2:	0f 93       	push	r16
    2fd4:	34 2f       	mov	r19, r20
    2fd6:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2fd8:	46 2f       	mov	r20, r22
    2fda:	4f 70       	andi	r20, 0x0F	; 15
    2fdc:	40 68       	ori	r20, 0x80	; 128
    2fde:	23 2f       	mov	r18, r19
    2fe0:	2f 77       	andi	r18, 0x7F	; 127
    2fe2:	0f 77       	andi	r16, 0x7F	; 127
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	ed 91       	ld	r30, X+
    2fe8:	fc 91       	ld	r31, X
    2fea:	63 e0       	ldi	r22, 0x03	; 3
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2ff0:	0f 91       	pop	r16
    2ff2:	08 95       	ret

00002ff4 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2ff4:	0f 93       	push	r16
    2ff6:	34 2f       	mov	r19, r20
    2ff8:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2ffa:	46 2f       	mov	r20, r22
    2ffc:	4f 70       	andi	r20, 0x0F	; 15
    2ffe:	40 6a       	ori	r20, 0xA0	; 160
    3000:	23 2f       	mov	r18, r19
    3002:	2f 77       	andi	r18, 0x7F	; 127
    3004:	0f 77       	andi	r16, 0x7F	; 127
    3006:	dc 01       	movw	r26, r24
    3008:	ed 91       	ld	r30, X+
    300a:	fc 91       	ld	r31, X
    300c:	63 e0       	ldi	r22, 0x03	; 3
    300e:	70 e0       	ldi	r23, 0x00	; 0
    3010:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    3012:	0f 91       	pop	r16
    3014:	08 95       	ret

00003016 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    3016:	0f 93       	push	r16
    3018:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    301a:	20 e2       	ldi	r18, 0x20	; 32
    301c:	40 30       	cpi	r20, 0x00	; 0
    301e:	52 07       	cpc	r21, r18
    3020:	44 f4       	brge	.+16     	; 0x3032 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    3022:	a0 ee       	ldi	r26, 0xE0	; 224
    3024:	40 30       	cpi	r20, 0x00	; 0
    3026:	5a 07       	cpc	r21, r26
    3028:	3c f0       	brlt	.+14     	; 0x3038 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    302a:	8a 01       	movw	r16, r20
    302c:	00 50       	subi	r16, 0x00	; 0
    302e:	10 4e       	sbci	r17, 0xE0	; 224
    3030:	05 c0       	rjmp	.+10     	; 0x303c <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    3032:	0f ef       	ldi	r16, 0xFF	; 255
    3034:	1f e3       	ldi	r17, 0x3F	; 63
    3036:	02 c0       	rjmp	.+4      	; 0x303c <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    3038:	00 e0       	ldi	r16, 0x00	; 0
    303a:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    303c:	46 2f       	mov	r20, r22
    303e:	4f 70       	andi	r20, 0x0F	; 15
    3040:	40 6e       	ori	r20, 0xE0	; 224
    3042:	20 2f       	mov	r18, r16
    3044:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    3046:	00 0f       	add	r16, r16
    3048:	01 2f       	mov	r16, r17
    304a:	00 1f       	adc	r16, r16
    304c:	11 0b       	sbc	r17, r17
    304e:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    3050:	0f 77       	andi	r16, 0x7F	; 127
    3052:	dc 01       	movw	r26, r24
    3054:	ed 91       	ld	r30, X+
    3056:	fc 91       	ld	r31, X
    3058:	63 e0       	ldi	r22, 0x03	; 3
    305a:	70 e0       	ldi	r23, 0x00	; 0
    305c:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    305e:	1f 91       	pop	r17
    3060:	0f 91       	pop	r16
    3062:	08 95       	ret

00003064 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    3064:	0f 93       	push	r16
    3066:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    3068:	46 2f       	mov	r20, r22
    306a:	4f 70       	andi	r20, 0x0F	; 15
    306c:	40 6c       	ori	r20, 0xC0	; 192
    306e:	2f 77       	andi	r18, 0x7F	; 127
    3070:	dc 01       	movw	r26, r24
    3072:	ed 91       	ld	r30, X+
    3074:	fc 91       	ld	r31, X
    3076:	62 e0       	ldi	r22, 0x02	; 2
    3078:	70 e0       	ldi	r23, 0x00	; 0
    307a:	00 e0       	ldi	r16, 0x00	; 0
    307c:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    307e:	0f 91       	pop	r16
    3080:	08 95       	ret

00003082 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    3082:	0f 93       	push	r16
    3084:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    3086:	46 2f       	mov	r20, r22
    3088:	4f 70       	andi	r20, 0x0F	; 15
    308a:	40 6d       	ori	r20, 0xD0	; 208
    308c:	2f 77       	andi	r18, 0x7F	; 127
    308e:	dc 01       	movw	r26, r24
    3090:	ed 91       	ld	r30, X+
    3092:	fc 91       	ld	r31, X
    3094:	62 e0       	ldi	r22, 0x02	; 2
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	00 e0       	ldi	r16, 0x00	; 0
    309a:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    309c:	0f 91       	pop	r16
    309e:	08 95       	ret

000030a0 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    30a0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    30a2:	dc 01       	movw	r26, r24
    30a4:	ed 91       	ld	r30, X+
    30a6:	fc 91       	ld	r31, X
    30a8:	61 e0       	ldi	r22, 0x01	; 1
    30aa:	70 e0       	ldi	r23, 0x00	; 0
    30ac:	48 ef       	ldi	r20, 0xF8	; 248
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	00 e0       	ldi	r16, 0x00	; 0
    30b2:	09 95       	icall
}
    30b4:	0f 91       	pop	r16
    30b6:	08 95       	ret

000030b8 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    30b8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    30ba:	dc 01       	movw	r26, r24
    30bc:	ed 91       	ld	r30, X+
    30be:	fc 91       	ld	r31, X
    30c0:	61 e0       	ldi	r22, 0x01	; 1
    30c2:	70 e0       	ldi	r23, 0x00	; 0
    30c4:	49 ef       	ldi	r20, 0xF9	; 249
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	00 e0       	ldi	r16, 0x00	; 0
    30ca:	09 95       	icall
}
    30cc:	0f 91       	pop	r16
    30ce:	08 95       	ret

000030d0 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    30d0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    30d2:	dc 01       	movw	r26, r24
    30d4:	ed 91       	ld	r30, X+
    30d6:	fc 91       	ld	r31, X
    30d8:	61 e0       	ldi	r22, 0x01	; 1
    30da:	70 e0       	ldi	r23, 0x00	; 0
    30dc:	4a ef       	ldi	r20, 0xFA	; 250
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	00 e0       	ldi	r16, 0x00	; 0
    30e2:	09 95       	icall
}
    30e4:	0f 91       	pop	r16
    30e6:	08 95       	ret

000030e8 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    30e8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    30ea:	dc 01       	movw	r26, r24
    30ec:	ed 91       	ld	r30, X+
    30ee:	fc 91       	ld	r31, X
    30f0:	61 e0       	ldi	r22, 0x01	; 1
    30f2:	70 e0       	ldi	r23, 0x00	; 0
    30f4:	4b ef       	ldi	r20, 0xFB	; 251
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	00 e0       	ldi	r16, 0x00	; 0
    30fa:	09 95       	icall
}
    30fc:	0f 91       	pop	r16
    30fe:	08 95       	ret

00003100 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    3100:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    3102:	dc 01       	movw	r26, r24
    3104:	ed 91       	ld	r30, X+
    3106:	fc 91       	ld	r31, X
    3108:	61 e0       	ldi	r22, 0x01	; 1
    310a:	70 e0       	ldi	r23, 0x00	; 0
    310c:	4c ef       	ldi	r20, 0xFC	; 252
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	00 e0       	ldi	r16, 0x00	; 0
    3112:	09 95       	icall
}
    3114:	0f 91       	pop	r16
    3116:	08 95       	ret

00003118 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    3118:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    311a:	dc 01       	movw	r26, r24
    311c:	ed 91       	ld	r30, X+
    311e:	fc 91       	ld	r31, X
    3120:	61 e0       	ldi	r22, 0x01	; 1
    3122:	70 e0       	ldi	r23, 0x00	; 0
    3124:	4e ef       	ldi	r20, 0xFE	; 254
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	00 e0       	ldi	r16, 0x00	; 0
    312a:	09 95       	icall
}
    312c:	0f 91       	pop	r16
    312e:	08 95       	ret

00003130 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    3130:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    3132:	dc 01       	movw	r26, r24
    3134:	ed 91       	ld	r30, X+
    3136:	fc 91       	ld	r31, X
    3138:	61 e0       	ldi	r22, 0x01	; 1
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	4f ef       	ldi	r20, 0xFF	; 255
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	00 e0       	ldi	r16, 0x00	; 0
    3142:	09 95       	icall
}
    3144:	0f 91       	pop	r16
    3146:	08 95       	ret

00003148 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    3148:	0f 93       	push	r16
   device->send_func(device, 2,
    314a:	26 2f       	mov	r18, r22
    314c:	2f 77       	andi	r18, 0x7F	; 127
    314e:	dc 01       	movw	r26, r24
    3150:	ed 91       	ld	r30, X+
    3152:	fc 91       	ld	r31, X
    3154:	62 e0       	ldi	r22, 0x02	; 2
    3156:	70 e0       	ldi	r23, 0x00	; 0
    3158:	41 ef       	ldi	r20, 0xF1	; 241
    315a:	00 e0       	ldi	r16, 0x00	; 0
    315c:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    315e:	0f 91       	pop	r16
    3160:	08 95       	ret

00003162 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    3162:	0f 93       	push	r16
    3164:	1f 93       	push	r17
   device->send_func(device, 3,
    3166:	26 2f       	mov	r18, r22
    3168:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    316a:	8b 01       	movw	r16, r22
    316c:	00 0f       	add	r16, r16
    316e:	01 2f       	mov	r16, r17
    3170:	00 1f       	adc	r16, r16
    3172:	11 0b       	sbc	r17, r17
    3174:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    3176:	0f 77       	andi	r16, 0x7F	; 127
    3178:	dc 01       	movw	r26, r24
    317a:	ed 91       	ld	r30, X+
    317c:	fc 91       	ld	r31, X
    317e:	63 e0       	ldi	r22, 0x03	; 3
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	42 ef       	ldi	r20, 0xF2	; 242
    3184:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    3186:	1f 91       	pop	r17
    3188:	0f 91       	pop	r16
    318a:	08 95       	ret

0000318c <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    318c:	0f 93       	push	r16
   device->send_func(device, 2,
    318e:	26 2f       	mov	r18, r22
    3190:	2f 77       	andi	r18, 0x7F	; 127
    3192:	dc 01       	movw	r26, r24
    3194:	ed 91       	ld	r30, X+
    3196:	fc 91       	ld	r31, X
    3198:	62 e0       	ldi	r22, 0x02	; 2
    319a:	70 e0       	ldi	r23, 0x00	; 0
    319c:	43 ef       	ldi	r20, 0xF3	; 243
    319e:	00 e0       	ldi	r16, 0x00	; 0
    31a0:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    31a2:	0f 91       	pop	r16
    31a4:	08 95       	ret

000031a6 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    31a6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    31a8:	dc 01       	movw	r26, r24
    31aa:	ed 91       	ld	r30, X+
    31ac:	fc 91       	ld	r31, X
    31ae:	61 e0       	ldi	r22, 0x01	; 1
    31b0:	70 e0       	ldi	r23, 0x00	; 0
    31b2:	46 ef       	ldi	r20, 0xF6	; 246
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	00 e0       	ldi	r16, 0x00	; 0
    31b8:	09 95       	icall
}
    31ba:	0f 91       	pop	r16
    31bc:	08 95       	ret

000031be <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    31be:	0f 93       	push	r16
    31c0:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    31c2:	dc 01       	movw	r26, r24
    31c4:	ed 91       	ld	r30, X+
    31c6:	fc 91       	ld	r31, X
    31c8:	61 e0       	ldi	r22, 0x01	; 1
    31ca:	70 e0       	ldi	r23, 0x00	; 0
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	00 e0       	ldi	r16, 0x00	; 0
    31d0:	09 95       	icall
}
    31d2:	0f 91       	pop	r16
    31d4:	08 95       	ret

000031d6 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    31d6:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    31d8:	dc 01       	movw	r26, r24
    31da:	ed 91       	ld	r30, X+
    31dc:	fc 91       	ld	r31, X
    31de:	09 95       	icall
}
    31e0:	0f 91       	pop	r16
    31e2:	08 95       	ret

000031e4 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    31e4:	6f 92       	push	r6
    31e6:	7f 92       	push	r7
    31e8:	8f 92       	push	r8
    31ea:	9f 92       	push	r9
    31ec:	af 92       	push	r10
    31ee:	bf 92       	push	r11
    31f0:	cf 92       	push	r12
    31f2:	df 92       	push	r13
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	00 d0       	rcall	.+0      	; 0x3202 <midi_send_array+0x1e>
    3202:	0f 92       	push	r0
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
    3208:	4c 01       	movw	r8, r24
    320a:	6b 01       	movw	r12, r22
    320c:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    320e:	61 15       	cp	r22, r1
    3210:	71 05       	cpc	r23, r1
    3212:	41 f1       	breq	.+80     	; 0x3264 <midi_send_array+0x80>
    3214:	ee 24       	eor	r14, r14
    3216:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    3218:	0f 2e       	mov	r0, r31
    321a:	f3 e0       	ldi	r31, 0x03	; 3
    321c:	6f 2e       	mov	r6, r31
    321e:	77 24       	eor	r7, r7
    3220:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    3222:	19 82       	std	Y+1, r1	; 0x01
    3224:	1a 82       	std	Y+2, r1	; 0x02
    3226:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    3228:	86 01       	movw	r16, r12
    322a:	0e 19       	sub	r16, r14
    322c:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    322e:	04 30       	cpi	r16, 0x04	; 4
    3230:	11 05       	cpc	r17, r1
    3232:	08 f0       	brcs	.+2      	; 0x3236 <midi_send_array+0x52>
    3234:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    3236:	b5 01       	movw	r22, r10
    3238:	6e 0d       	add	r22, r14
    323a:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    323c:	ce 01       	movw	r24, r28
    323e:	01 96       	adiw	r24, 0x01	; 1
    3240:	40 2f       	mov	r20, r16
    3242:	51 2f       	mov	r21, r17
    3244:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    3248:	c4 01       	movw	r24, r8
    324a:	b8 01       	movw	r22, r16
    324c:	49 81       	ldd	r20, Y+1	; 0x01
    324e:	2a 81       	ldd	r18, Y+2	; 0x02
    3250:	0b 81       	ldd	r16, Y+3	; 0x03
    3252:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    3256:	83 e0       	ldi	r24, 0x03	; 3
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	e8 0e       	add	r14, r24
    325c:	f9 1e       	adc	r15, r25
    325e:	ec 14       	cp	r14, r12
    3260:	fd 04       	cpc	r15, r13
    3262:	f8 f2       	brcs	.-66     	; 0x3222 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	ff 90       	pop	r15
    3274:	ef 90       	pop	r14
    3276:	df 90       	pop	r13
    3278:	cf 90       	pop	r12
    327a:	bf 90       	pop	r11
    327c:	af 90       	pop	r10
    327e:	9f 90       	pop	r9
    3280:	8f 90       	pop	r8
    3282:	7f 90       	pop	r7
    3284:	6f 90       	pop	r6
    3286:	08 95       	ret

00003288 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    3288:	fc 01       	movw	r30, r24
    328a:	73 83       	std	Z+3, r23	; 0x03
    328c:	62 83       	std	Z+2, r22	; 0x02
}
    328e:	08 95       	ret

00003290 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    3290:	fc 01       	movw	r30, r24
    3292:	75 83       	std	Z+5, r23	; 0x05
    3294:	64 83       	std	Z+4, r22	; 0x04
}
    3296:	08 95       	ret

00003298 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    3298:	fc 01       	movw	r30, r24
    329a:	77 83       	std	Z+7, r23	; 0x07
    329c:	66 83       	std	Z+6, r22	; 0x06
}
    329e:	08 95       	ret

000032a0 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    32a0:	fc 01       	movw	r30, r24
    32a2:	71 87       	std	Z+9, r23	; 0x09
    32a4:	60 87       	std	Z+8, r22	; 0x08
}
    32a6:	08 95       	ret

000032a8 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    32a8:	fc 01       	movw	r30, r24
    32aa:	73 87       	std	Z+11, r23	; 0x0b
    32ac:	62 87       	std	Z+10, r22	; 0x0a
}
    32ae:	08 95       	ret

000032b0 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    32b0:	fc 01       	movw	r30, r24
    32b2:	75 87       	std	Z+13, r23	; 0x0d
    32b4:	64 87       	std	Z+12, r22	; 0x0c
}
    32b6:	08 95       	ret

000032b8 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    32b8:	fc 01       	movw	r30, r24
    32ba:	77 87       	std	Z+15, r23	; 0x0f
    32bc:	66 87       	std	Z+14, r22	; 0x0e
}
    32be:	08 95       	ret

000032c0 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    32c0:	fc 01       	movw	r30, r24
    32c2:	71 8b       	std	Z+17, r23	; 0x11
    32c4:	60 8b       	std	Z+16, r22	; 0x10
}
    32c6:	08 95       	ret

000032c8 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    32c8:	fc 01       	movw	r30, r24
    32ca:	73 8b       	std	Z+19, r23	; 0x13
    32cc:	62 8b       	std	Z+18, r22	; 0x12
}
    32ce:	08 95       	ret

000032d0 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    32d0:	fc 01       	movw	r30, r24
    32d2:	75 8b       	std	Z+21, r23	; 0x15
    32d4:	64 8b       	std	Z+20, r22	; 0x14
}
    32d6:	08 95       	ret

000032d8 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    32d8:	fc 01       	movw	r30, r24
    32da:	77 8b       	std	Z+23, r23	; 0x17
    32dc:	66 8b       	std	Z+22, r22	; 0x16
}
    32de:	08 95       	ret

000032e0 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    32e0:	fc 01       	movw	r30, r24
    32e2:	71 8f       	std	Z+25, r23	; 0x19
    32e4:	60 8f       	std	Z+24, r22	; 0x18
}
    32e6:	08 95       	ret

000032e8 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    32e8:	fc 01       	movw	r30, r24
    32ea:	73 8f       	std	Z+27, r23	; 0x1b
    32ec:	62 8f       	std	Z+26, r22	; 0x1a
}
    32ee:	08 95       	ret

000032f0 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    32f0:	fc 01       	movw	r30, r24
    32f2:	75 8f       	std	Z+29, r23	; 0x1d
    32f4:	64 8f       	std	Z+28, r22	; 0x1c
}
    32f6:	08 95       	ret

000032f8 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    32f8:	fc 01       	movw	r30, r24
    32fa:	77 8f       	std	Z+31, r23	; 0x1f
    32fc:	66 8f       	std	Z+30, r22	; 0x1e
}
    32fe:	08 95       	ret

00003300 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    3300:	cf 93       	push	r28
    3302:	df 93       	push	r29
    3304:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    3306:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    3308:	1f a2       	lds	r17, 0x9f
    330a:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    330c:	bc 01       	movw	r22, r24
    330e:	68 5d       	subi	r22, 0xD8	; 216
    3310:	7f 4f       	sbci	r23, 0xFF	; 255
    3312:	88 51       	subi	r24, 0x18	; 24
    3314:	9f 4f       	sbci	r25, 0xFF	; 255
    3316:	40 ec       	ldi	r20, 0xC0	; 192
    3318:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    331c:	1b 82       	std	Y+3, r1	; 0x03
    331e:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    3320:	1d 82       	std	Y+5, r1	; 0x05
    3322:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    3324:	1f 82       	std	Y+7, r1	; 0x07
    3326:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    3328:	19 86       	std	Y+9, r1	; 0x09
    332a:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    332c:	1b 86       	std	Y+11, r1	; 0x0b
    332e:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    3330:	1d 86       	std	Y+13, r1	; 0x0d
    3332:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    3334:	1f 86       	std	Y+15, r1	; 0x0f
    3336:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    3338:	19 8a       	std	Y+17, r1	; 0x11
    333a:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    333c:	1b 8a       	std	Y+19, r1	; 0x13
    333e:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    3340:	1d 8a       	std	Y+21, r1	; 0x15
    3342:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    3344:	1f 8a       	std	Y+23, r1	; 0x17
    3346:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    3348:	19 8e       	std	Y+25, r1	; 0x19
    334a:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    334c:	1b 8e       	std	Y+27, r1	; 0x1b
    334e:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    3350:	1d 8e       	std	Y+29, r1	; 0x1d
    3352:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    3354:	1f 8e       	std	Y+31, r1	; 0x1f
    3356:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    3358:	19 a2       	lds	r17, 0x99
    335a:	18 a2       	lds	r17, 0x98
}
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	08 95       	ret

00003362 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    3362:	ef 92       	push	r14
    3364:	ff 92       	push	r15
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3370:	66 23       	and	r22, r22
    3372:	99 f0       	breq	.+38     	; 0x339a <midi_device_input+0x38>
    3374:	04 2f       	mov	r16, r20
    3376:	15 2f       	mov	r17, r21
    3378:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    337a:	0f 2e       	mov	r0, r31
    337c:	f8 ee       	ldi	r31, 0xE8	; 232
    337e:	ef 2e       	mov	r14, r31
    3380:	ff 24       	eor	r15, r15
    3382:	f0 2d       	mov	r31, r0
    3384:	e8 0e       	add	r14, r24
    3386:	f9 1e       	adc	r15, r25
    3388:	f8 01       	movw	r30, r16
    338a:	61 91       	ld	r22, Z+
    338c:	8f 01       	movw	r16, r30
    338e:	c7 01       	movw	r24, r14
    3390:	0e 94 01 17 	call	0x2e02	; 0x2e02 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3394:	cf 5f       	subi	r28, 0xFF	; 255
    3396:	cd 17       	cp	r28, r29
    3398:	b9 f7       	brne	.-18     	; 0x3388 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    339a:	df 91       	pop	r29
    339c:	cf 91       	pop	r28
    339e:	1f 91       	pop	r17
    33a0:	0f 91       	pop	r16
    33a2:	ff 90       	pop	r15
    33a4:	ef 90       	pop	r14
    33a6:	08 95       	ret

000033a8 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    33a8:	fc 01       	movw	r30, r24
    33aa:	71 83       	std	Z+1, r23	; 0x01
    33ac:	60 83       	st	Z, r22
}
    33ae:	08 95       	ret

000033b0 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    33b0:	fc 01       	movw	r30, r24
    33b2:	71 a3       	lds	r23, 0x51
    33b4:	60 a3       	lds	r22, 0x50
}
    33b6:	08 95       	ret

000033b8 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    33b8:	af 92       	push	r10
    33ba:	bf 92       	push	r11
    33bc:	cf 92       	push	r12
    33be:	df 92       	push	r13
    33c0:	ef 92       	push	r14
    33c2:	ff 92       	push	r15
    33c4:	0f 93       	push	r16
    33c6:	1f 93       	push	r17
    33c8:	cf 93       	push	r28
    33ca:	df 93       	push	r29
    33cc:	00 d0       	rcall	.+0      	; 0x33ce <midi_input_callbacks+0x16>
    33ce:	0f 92       	push	r0
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	6c 01       	movw	r12, r24
    33d6:	5b 01       	movw	r10, r22
    33d8:	f4 2e       	mov	r15, r20
    33da:	e2 2e       	mov	r14, r18
    33dc:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    33de:	dc 01       	movw	r26, r24
    33e0:	95 96       	adiw	r26, 0x25	; 37
    33e2:	8c 91       	ld	r24, X
    33e4:	95 97       	sbiw	r26, 0x25	; 37
    33e6:	84 30       	cpi	r24, 0x04	; 4
    33e8:	e9 f4       	brne	.+58     	; 0x3424 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    33ea:	5a 96       	adiw	r26, 0x1a	; 26
    33ec:	ed 91       	ld	r30, X+
    33ee:	fc 91       	ld	r31, X
    33f0:	5b 97       	sbiw	r26, 0x1b	; 27
    33f2:	30 97       	sbiw	r30, 0x00	; 0
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <midi_input_callbacks+0x40>
    33f6:	ee c0       	rjmp	.+476    	; 0x35d4 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    33f8:	cb 01       	movw	r24, r22
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	63 e0       	ldi	r22, 0x03	; 3
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__udivmodhi4>
    3404:	cb 01       	movw	r24, r22
    3406:	88 0f       	add	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	68 0f       	add	r22, r24
    340c:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    340e:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    3410:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    3412:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    3414:	4a 2d       	mov	r20, r10
    3416:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    3418:	c6 01       	movw	r24, r12
    341a:	9e 01       	movw	r18, r28
    341c:	2f 5f       	subi	r18, 0xFF	; 255
    341e:	3f 4f       	sbci	r19, 0xFF	; 255
    3420:	09 95       	icall
    3422:	c8 c0       	rjmp	.+400    	; 0x35b4 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    3424:	62 30       	cpi	r22, 0x02	; 2
    3426:	71 05       	cpc	r23, r1
    3428:	09 f4       	brne	.+2      	; 0x342c <midi_input_callbacks+0x74>
    342a:	5f c0       	rjmp	.+190    	; 0x34ea <midi_input_callbacks+0x132>
    342c:	63 30       	cpi	r22, 0x03	; 3
    342e:	71 05       	cpc	r23, r1
    3430:	29 f0       	breq	.+10     	; 0x343c <midi_input_callbacks+0x84>
    3432:	61 30       	cpi	r22, 0x01	; 1
    3434:	71 05       	cpc	r23, r1
    3436:	09 f0       	breq	.+2      	; 0x343a <midi_input_callbacks+0x82>
    3438:	b3 c0       	rjmp	.+358    	; 0x35a0 <midi_input_callbacks+0x1e8>
    343a:	99 c0       	rjmp	.+306    	; 0x356e <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    343c:	84 2f       	mov	r24, r20
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	80 7f       	andi	r24, 0xF0	; 240
    3442:	90 70       	andi	r25, 0x00	; 0
    3444:	80 3a       	cpi	r24, 0xA0	; 160
    3446:	91 05       	cpc	r25, r1
    3448:	29 f1       	breq	.+74     	; 0x3494 <midi_input_callbacks+0xdc>
    344a:	81 3a       	cpi	r24, 0xA1	; 161
    344c:	91 05       	cpc	r25, r1
    344e:	3c f4       	brge	.+14     	; 0x345e <midi_input_callbacks+0xa6>
    3450:	80 38       	cpi	r24, 0x80	; 128
    3452:	91 05       	cpc	r25, r1
    3454:	c9 f0       	breq	.+50     	; 0x3488 <midi_input_callbacks+0xd0>
    3456:	80 39       	cpi	r24, 0x90	; 144
    3458:	91 05       	cpc	r25, r1
    345a:	91 f5       	brne	.+100    	; 0x34c0 <midi_input_callbacks+0x108>
    345c:	0f c0       	rjmp	.+30     	; 0x347c <midi_input_callbacks+0xc4>
    345e:	80 3e       	cpi	r24, 0xE0	; 224
    3460:	91 05       	cpc	r25, r1
    3462:	f1 f0       	breq	.+60     	; 0x34a0 <midi_input_callbacks+0xe8>
    3464:	80 3f       	cpi	r24, 0xF0	; 240
    3466:	91 05       	cpc	r25, r1
    3468:	09 f1       	breq	.+66     	; 0x34ac <midi_input_callbacks+0xf4>
    346a:	80 3b       	cpi	r24, 0xB0	; 176
    346c:	91 05       	cpc	r25, r1
    346e:	41 f5       	brne	.+80     	; 0x34c0 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    3470:	d6 01       	movw	r26, r12
    3472:	12 96       	adiw	r26, 0x02	; 2
    3474:	ed 91       	ld	r30, X+
    3476:	fc 91       	ld	r31, X
    3478:	13 97       	sbiw	r26, 0x03	; 3
              break;
    347a:	24 c0       	rjmp	.+72     	; 0x34c4 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    347c:	d6 01       	movw	r26, r12
    347e:	14 96       	adiw	r26, 0x04	; 4
    3480:	ed 91       	ld	r30, X+
    3482:	fc 91       	ld	r31, X
    3484:	15 97       	sbiw	r26, 0x05	; 5
              break;
    3486:	1e c0       	rjmp	.+60     	; 0x34c4 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    3488:	d6 01       	movw	r26, r12
    348a:	16 96       	adiw	r26, 0x06	; 6
    348c:	ed 91       	ld	r30, X+
    348e:	fc 91       	ld	r31, X
    3490:	17 97       	sbiw	r26, 0x07	; 7
              break;
    3492:	18 c0       	rjmp	.+48     	; 0x34c4 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    3494:	d6 01       	movw	r26, r12
    3496:	18 96       	adiw	r26, 0x08	; 8
    3498:	ed 91       	ld	r30, X+
    349a:	fc 91       	ld	r31, X
    349c:	19 97       	sbiw	r26, 0x09	; 9
              break;
    349e:	12 c0       	rjmp	.+36     	; 0x34c4 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    34a0:	d6 01       	movw	r26, r12
    34a2:	1a 96       	adiw	r26, 0x0a	; 10
    34a4:	ed 91       	ld	r30, X+
    34a6:	fc 91       	ld	r31, X
    34a8:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    34aa:	0c c0       	rjmp	.+24     	; 0x34c4 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    34ac:	b2 ef       	ldi	r27, 0xF2	; 242
    34ae:	4b 17       	cp	r20, r27
    34b0:	09 f0       	breq	.+2      	; 0x34b4 <midi_input_callbacks+0xfc>
    34b2:	90 c0       	rjmp	.+288    	; 0x35d4 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    34b4:	d6 01       	movw	r26, r12
    34b6:	1c 96       	adiw	r26, 0x0c	; 12
    34b8:	ed 91       	ld	r30, X+
    34ba:	fc 91       	ld	r31, X
    34bc:	1d 97       	sbiw	r26, 0x0d	; 13
    34be:	02 c0       	rjmp	.+4      	; 0x34c4 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    34c0:	e0 e0       	ldi	r30, 0x00	; 0
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    34c4:	30 97       	sbiw	r30, 0x00	; 0
    34c6:	09 f4       	brne	.+2      	; 0x34ca <midi_input_callbacks+0x112>
    34c8:	85 c0       	rjmp	.+266    	; 0x35d4 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    34ca:	b2 ef       	ldi	r27, 0xF2	; 242
    34cc:	fb 16       	cp	r15, r27
    34ce:	31 f4       	brne	.+12     	; 0x34dc <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    34d0:	c6 01       	movw	r24, r12
    34d2:	62 ef       	ldi	r22, 0xF2	; 242
    34d4:	4e 2d       	mov	r20, r14
    34d6:	21 2f       	mov	r18, r17
    34d8:	09 95       	icall
    34da:	6c c0       	rjmp	.+216    	; 0x35b4 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    34dc:	6f 2d       	mov	r22, r15
    34de:	6f 70       	andi	r22, 0x0F	; 15
    34e0:	c6 01       	movw	r24, r12
    34e2:	4e 2d       	mov	r20, r14
    34e4:	21 2f       	mov	r18, r17
    34e6:	09 95       	icall
    34e8:	65 c0       	rjmp	.+202    	; 0x35b4 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    34ea:	84 2f       	mov	r24, r20
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	80 7f       	andi	r24, 0xF0	; 240
    34f0:	90 70       	andi	r25, 0x00	; 0
    34f2:	80 3d       	cpi	r24, 0xD0	; 208
    34f4:	91 05       	cpc	r25, r1
    34f6:	61 f0       	breq	.+24     	; 0x3510 <midi_input_callbacks+0x158>
    34f8:	80 3f       	cpi	r24, 0xF0	; 240
    34fa:	91 05       	cpc	r25, r1
    34fc:	79 f0       	breq	.+30     	; 0x351c <midi_input_callbacks+0x164>
    34fe:	80 3c       	cpi	r24, 0xC0	; 192
    3500:	91 05       	cpc	r25, r1
    3502:	f9 f4       	brne	.+62     	; 0x3542 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    3504:	d6 01       	movw	r26, r12
    3506:	1e 96       	adiw	r26, 0x0e	; 14
    3508:	ed 91       	ld	r30, X+
    350a:	fc 91       	ld	r31, X
    350c:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    350e:	1b c0       	rjmp	.+54     	; 0x3546 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    3510:	d6 01       	movw	r26, r12
    3512:	50 96       	adiw	r26, 0x10	; 16
    3514:	ed 91       	ld	r30, X+
    3516:	fc 91       	ld	r31, X
    3518:	51 97       	sbiw	r26, 0x11	; 17
              break;
    351a:	15 c0       	rjmp	.+42     	; 0x3546 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    351c:	b3 ef       	ldi	r27, 0xF3	; 243
    351e:	4b 17       	cp	r20, r27
    3520:	31 f4       	brne	.+12     	; 0x352e <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    3522:	d6 01       	movw	r26, r12
    3524:	52 96       	adiw	r26, 0x12	; 18
    3526:	ed 91       	ld	r30, X+
    3528:	fc 91       	ld	r31, X
    352a:	53 97       	sbiw	r26, 0x13	; 19
    352c:	0c c0       	rjmp	.+24     	; 0x3546 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    352e:	b1 ef       	ldi	r27, 0xF1	; 241
    3530:	4b 17       	cp	r20, r27
    3532:	09 f0       	breq	.+2      	; 0x3536 <midi_input_callbacks+0x17e>
    3534:	4f c0       	rjmp	.+158    	; 0x35d4 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    3536:	d6 01       	movw	r26, r12
    3538:	54 96       	adiw	r26, 0x14	; 20
    353a:	ed 91       	ld	r30, X+
    353c:	fc 91       	ld	r31, X
    353e:	55 97       	sbiw	r26, 0x15	; 21
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    3542:	e0 e0       	ldi	r30, 0x00	; 0
    3544:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    3546:	30 97       	sbiw	r30, 0x00	; 0
    3548:	09 f4       	brne	.+2      	; 0x354c <midi_input_callbacks+0x194>
    354a:	44 c0       	rjmp	.+136    	; 0x35d4 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    354c:	b3 ef       	ldi	r27, 0xF3	; 243
    354e:	fb 16       	cp	r15, r27
    3550:	19 f0       	breq	.+6      	; 0x3558 <midi_input_callbacks+0x1a0>
    3552:	81 ef       	ldi	r24, 0xF1	; 241
    3554:	f8 16       	cp	r15, r24
    3556:	29 f4       	brne	.+10     	; 0x3562 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    3558:	c6 01       	movw	r24, r12
    355a:	6f 2d       	mov	r22, r15
    355c:	4e 2d       	mov	r20, r14
    355e:	09 95       	icall
    3560:	29 c0       	rjmp	.+82     	; 0x35b4 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    3562:	6f 2d       	mov	r22, r15
    3564:	6f 70       	andi	r22, 0x0F	; 15
    3566:	c6 01       	movw	r24, r12
    3568:	4e 2d       	mov	r20, r14
    356a:	09 95       	icall
    356c:	23 c0       	rjmp	.+70     	; 0x35b4 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    356e:	84 2f       	mov	r24, r20
    3570:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <midi_is_realtime>
    3574:	88 23       	and	r24, r24
    3576:	31 f0       	breq	.+12     	; 0x3584 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    3578:	d6 01       	movw	r26, r12
    357a:	56 96       	adiw	r26, 0x16	; 22
    357c:	ed 91       	ld	r30, X+
    357e:	fc 91       	ld	r31, X
    3580:	57 97       	sbiw	r26, 0x17	; 23
    3582:	08 c0       	rjmp	.+16     	; 0x3594 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    3584:	b6 ef       	ldi	r27, 0xF6	; 246
    3586:	fb 16       	cp	r15, r27
    3588:	29 f5       	brne	.+74     	; 0x35d4 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    358a:	d6 01       	movw	r26, r12
    358c:	58 96       	adiw	r26, 0x18	; 24
    358e:	ed 91       	ld	r30, X+
    3590:	fc 91       	ld	r31, X
    3592:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    3594:	30 97       	sbiw	r30, 0x00	; 0
    3596:	f1 f0       	breq	.+60     	; 0x35d4 <midi_input_callbacks+0x21c>
            func(device, byte0);
    3598:	c6 01       	movw	r24, r12
    359a:	6f 2d       	mov	r22, r15
    359c:	09 95       	icall
    359e:	0a c0       	rjmp	.+20     	; 0x35b4 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    35a0:	64 30       	cpi	r22, 0x04	; 4
    35a2:	71 05       	cpc	r23, r1
    35a4:	a8 f4       	brcc	.+42     	; 0x35d0 <midi_input_callbacks+0x218>
    35a6:	16 c0       	rjmp	.+44     	; 0x35d4 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    35a8:	c6 01       	movw	r24, r12
    35aa:	b5 01       	movw	r22, r10
    35ac:	4f 2d       	mov	r20, r15
    35ae:	2e 2d       	mov	r18, r14
    35b0:	01 2f       	mov	r16, r17
    35b2:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    35b4:	d6 01       	movw	r26, r12
    35b6:	5e 96       	adiw	r26, 0x1e	; 30
    35b8:	ed 91       	ld	r30, X+
    35ba:	fc 91       	ld	r31, X
    35bc:	5f 97       	sbiw	r26, 0x1f	; 31
    35be:	30 97       	sbiw	r30, 0x00	; 0
    35c0:	89 f0       	breq	.+34     	; 0x35e4 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    35c2:	c6 01       	movw	r24, r12
    35c4:	b5 01       	movw	r22, r10
    35c6:	4f 2d       	mov	r20, r15
    35c8:	2e 2d       	mov	r18, r14
    35ca:	01 2f       	mov	r16, r17
    35cc:	09 95       	icall
    35ce:	0a c0       	rjmp	.+20     	; 0x35e4 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    35d0:	aa 24       	eor	r10, r10
    35d2:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    35d4:	d6 01       	movw	r26, r12
    35d6:	5c 96       	adiw	r26, 0x1c	; 28
    35d8:	ed 91       	ld	r30, X+
    35da:	fc 91       	ld	r31, X
    35dc:	5d 97       	sbiw	r26, 0x1d	; 29
    35de:	30 97       	sbiw	r30, 0x00	; 0
    35e0:	19 f7       	brne	.-58     	; 0x35a8 <midi_input_callbacks+0x1f0>
    35e2:	e8 cf       	rjmp	.-48     	; 0x35b4 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	df 91       	pop	r29
    35ec:	cf 91       	pop	r28
    35ee:	1f 91       	pop	r17
    35f0:	0f 91       	pop	r16
    35f2:	ff 90       	pop	r15
    35f4:	ef 90       	pop	r14
    35f6:	df 90       	pop	r13
    35f8:	cf 90       	pop	r12
    35fa:	bf 90       	pop	r11
    35fc:	af 90       	pop	r10
    35fe:	08 95       	ret

00003600 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    3600:	ef 92       	push	r14
    3602:	ff 92       	push	r15
    3604:	0f 93       	push	r16
    3606:	cf 93       	push	r28
    3608:	df 93       	push	r29
    360a:	7c 01       	movw	r14, r24
    360c:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    360e:	86 2f       	mov	r24, r22
    3610:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <midi_is_realtime>
    3614:	88 23       	and	r24, r24
    3616:	91 f0       	breq	.+36     	; 0x363c <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    3618:	d7 01       	movw	r26, r14
    361a:	95 96       	adiw	r26, 0x25	; 37
    361c:	dc 91       	ld	r29, X
    361e:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	95 96       	adiw	r26, 0x25	; 37
    3624:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    3626:	c7 01       	movw	r24, r14
    3628:	61 e0       	ldi	r22, 0x01	; 1
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	4c 2f       	mov	r20, r28
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	00 e0       	ldi	r16, 0x00	; 0
    3632:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <midi_input_callbacks>
    device->input_state = state;
    3636:	f7 01       	movw	r30, r14
    3638:	d5 a3       	lds	r29, 0x55
    363a:	b7 c0       	rjmp	.+366    	; 0x37aa <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    363c:	8c 2f       	mov	r24, r28
    363e:	0e 94 75 17 	call	0x2eea	; 0x2eea <midi_is_statusbyte>
    3642:	88 23       	and	r24, r24
    3644:	09 f4       	brne	.+2      	; 0x3648 <midi_process_byte+0x48>
    3646:	73 c0       	rjmp	.+230    	; 0x372e <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    3648:	d7 01       	movw	r26, r14
    364a:	95 96       	adiw	r26, 0x25	; 37
    364c:	8c 91       	ld	r24, X
    364e:	95 97       	sbiw	r26, 0x25	; 37
    3650:	84 30       	cpi	r24, 0x04	; 4
    3652:	49 f0       	breq	.+18     	; 0x3666 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    3654:	92 96       	adiw	r26, 0x22	; 34
    3656:	cc 93       	st	X, r28
    3658:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	97 96       	adiw	r26, 0x27	; 39
    3660:	9c 93       	st	X, r25
    3662:	8e 93       	st	-X, r24
    3664:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    3666:	8c 2f       	mov	r24, r28
    3668:	0e 94 7f 17 	call	0x2efe	; 0x2efe <midi_packet_length>
    366c:	81 30       	cpi	r24, 0x01	; 1
    366e:	41 f0       	breq	.+16     	; 0x3680 <midi_process_byte+0x80>
    3670:	81 30       	cpi	r24, 0x01	; 1
    3672:	00 f1       	brcs	.+64     	; 0x36b4 <midi_process_byte+0xb4>
    3674:	82 30       	cpi	r24, 0x02	; 2
    3676:	a1 f0       	breq	.+40     	; 0x36a0 <midi_process_byte+0xa0>
    3678:	83 30       	cpi	r24, 0x03	; 3
    367a:	09 f0       	breq	.+2      	; 0x367e <midi_process_byte+0x7e>
    367c:	4f c0       	rjmp	.+158    	; 0x371c <midi_process_byte+0x11c>
    367e:	14 c0       	rjmp	.+40     	; 0x36a8 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	f7 01       	movw	r30, r14
    3684:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3686:	c7 01       	movw	r24, r14
    3688:	61 e0       	ldi	r22, 0x01	; 1
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	4c 2f       	mov	r20, r28
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	00 e0       	ldi	r16, 0x00	; 0
    3692:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <midi_input_callbacks>
        device->input_state = IDLE;
    3696:	d7 01       	movw	r26, r14
    3698:	95 96       	adiw	r26, 0x25	; 37
    369a:	1c 92       	st	X, r1
    369c:	95 97       	sbiw	r26, 0x25	; 37
        break;
    369e:	85 c0       	rjmp	.+266    	; 0x37aa <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    36a0:	82 e0       	ldi	r24, 0x02	; 2
    36a2:	f7 01       	movw	r30, r14
    36a4:	85 a3       	lds	r24, 0x55
        break;
    36a6:	81 c0       	rjmp	.+258    	; 0x37aa <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    36a8:	83 e0       	ldi	r24, 0x03	; 3
    36aa:	d7 01       	movw	r26, r14
    36ac:	95 96       	adiw	r26, 0x25	; 37
    36ae:	8c 93       	st	X, r24
    36b0:	95 97       	sbiw	r26, 0x25	; 37
        break;
    36b2:	7b c0       	rjmp	.+246    	; 0x37aa <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    36b4:	c0 3f       	cpi	r28, 0xF0	; 240
    36b6:	19 f0       	breq	.+6      	; 0x36be <midi_process_byte+0xbe>
    36b8:	c7 3f       	cpi	r28, 0xF7	; 247
    36ba:	59 f5       	brne	.+86     	; 0x3712 <midi_process_byte+0x112>
    36bc:	0a c0       	rjmp	.+20     	; 0x36d2 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    36be:	84 e0       	ldi	r24, 0x04	; 4
    36c0:	f7 01       	movw	r30, r14
    36c2:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    36c4:	80 ef       	ldi	r24, 0xF0	; 240
    36c6:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	97 a3       	lds	r25, 0x57
    36ce:	86 a3       	lds	r24, 0x56
            break;
    36d0:	6c c0       	rjmp	.+216    	; 0x37aa <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    36d2:	d7 01       	movw	r26, r14
    36d4:	96 96       	adiw	r26, 0x26	; 38
    36d6:	2d 91       	ld	r18, X+
    36d8:	3c 91       	ld	r19, X
    36da:	97 97       	sbiw	r26, 0x27	; 39
    36dc:	c9 01       	movw	r24, r18
    36de:	63 e0       	ldi	r22, 0x03	; 3
    36e0:	70 e0       	ldi	r23, 0x00	; 0
    36e2:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__udivmodhi4>
    36e6:	f7 01       	movw	r30, r14
    36e8:	e8 0f       	add	r30, r24
    36ea:	f9 1f       	adc	r31, r25
    36ec:	87 ef       	ldi	r24, 0xF7	; 247
    36ee:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    36f0:	b9 01       	movw	r22, r18
    36f2:	6f 5f       	subi	r22, 0xFF	; 255
    36f4:	7f 4f       	sbci	r23, 0xFF	; 255
    36f6:	f7 01       	movw	r30, r14
    36f8:	77 a3       	lds	r23, 0x57
    36fa:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    36fc:	c7 01       	movw	r24, r14
    36fe:	42 a1       	lds	r20, 0x42
    3700:	23 a1       	lds	r18, 0x43
    3702:	04 a1       	lds	r16, 0x44
    3704:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3708:	d7 01       	movw	r26, r14
    370a:	95 96       	adiw	r26, 0x25	; 37
    370c:	1c 92       	st	X, r1
    370e:	95 97       	sbiw	r26, 0x25	; 37
            break;
    3710:	4c c0       	rjmp	.+152    	; 0x37aa <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    3712:	f7 01       	movw	r30, r14
    3714:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    3716:	17 a2       	lds	r17, 0x97
    3718:	16 a2       	lds	r17, 0x96
    371a:	47 c0       	rjmp	.+142    	; 0x37aa <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    371c:	d7 01       	movw	r26, r14
    371e:	95 96       	adiw	r26, 0x25	; 37
    3720:	1c 92       	st	X, r1
    3722:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    3724:	97 96       	adiw	r26, 0x27	; 39
    3726:	1c 92       	st	X, r1
    3728:	1e 92       	st	-X, r1
    372a:	96 97       	sbiw	r26, 0x26	; 38
        break;
    372c:	3e c0       	rjmp	.+124    	; 0x37aa <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    372e:	f7 01       	movw	r30, r14
    3730:	25 a1       	lds	r18, 0x45
    3732:	22 23       	and	r18, r18
    3734:	d1 f1       	breq	.+116    	; 0x37aa <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    3736:	06 a0       	lds	r16, 0x86
    3738:	f7 a1       	lds	r31, 0x47
    373a:	e0 2d       	mov	r30, r0
    373c:	cf 01       	movw	r24, r30
    373e:	63 e0       	ldi	r22, 0x03	; 3
    3740:	70 e0       	ldi	r23, 0x00	; 0
    3742:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__udivmodhi4>
    3746:	ac 01       	movw	r20, r24
    3748:	8e 0d       	add	r24, r14
    374a:	9f 1d       	adc	r25, r15
    374c:	dc 01       	movw	r26, r24
    374e:	92 96       	adiw	r26, 0x22	; 34
    3750:	cc 93       	st	X, r28
    3752:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    3754:	bf 01       	movw	r22, r30
    3756:	6f 5f       	subi	r22, 0xFF	; 255
    3758:	7f 4f       	sbci	r23, 0xFF	; 255
    375a:	f7 01       	movw	r30, r14
    375c:	77 a3       	lds	r23, 0x57
    375e:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    3760:	41 30       	cpi	r20, 0x01	; 1
    3762:	51 05       	cpc	r21, r1
    3764:	91 f0       	breq	.+36     	; 0x378a <midi_process_byte+0x18a>
    3766:	42 30       	cpi	r20, 0x02	; 2
    3768:	51 05       	cpc	r21, r1
    376a:	f9 f4       	brne	.+62     	; 0x37aa <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    376c:	c7 01       	movw	r24, r14
    376e:	42 a1       	lds	r20, 0x42
    3770:	23 a1       	lds	r18, 0x43
    3772:	04 a1       	lds	r16, 0x44
    3774:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    3778:	f7 01       	movw	r30, r14
    377a:	85 a1       	lds	r24, 0x45
    377c:	84 30       	cpi	r24, 0x04	; 4
    377e:	a9 f0       	breq	.+42     	; 0x37aa <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	97 a3       	lds	r25, 0x57
    3786:	86 a3       	lds	r24, 0x56
    3788:	10 c0       	rjmp	.+32     	; 0x37aa <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    378a:	22 30       	cpi	r18, 0x02	; 2
    378c:	71 f4       	brne	.+28     	; 0x37aa <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    378e:	c7 01       	movw	r24, r14
    3790:	42 a1       	lds	r20, 0x42
    3792:	23 a1       	lds	r18, 0x43
    3794:	00 e0       	ldi	r16, 0x00	; 0
    3796:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    379a:	f7 01       	movw	r30, r14
    379c:	85 a1       	lds	r24, 0x45
    379e:	84 30       	cpi	r24, 0x04	; 4
    37a0:	21 f0       	breq	.+8      	; 0x37aa <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	97 a3       	lds	r25, 0x57
    37a8:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    37aa:	df 91       	pop	r29
    37ac:	cf 91       	pop	r28
    37ae:	0f 91       	pop	r16
    37b0:	ff 90       	pop	r15
    37b2:	ef 90       	pop	r14
    37b4:	08 95       	ret

000037b6 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    37b6:	cf 92       	push	r12
    37b8:	df 92       	push	r13
    37ba:	ef 92       	push	r14
    37bc:	ff 92       	push	r15
    37be:	0f 93       	push	r16
    37c0:	1f 93       	push	r17
    37c2:	cf 93       	push	r28
    37c4:	df 93       	push	r29
    37c6:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    37c8:	dc 01       	movw	r26, r24
    37ca:	90 96       	adiw	r26, 0x20	; 32
    37cc:	ed 91       	ld	r30, X+
    37ce:	fc 91       	ld	r31, X
    37d0:	91 97       	sbiw	r26, 0x21	; 33
    37d2:	30 97       	sbiw	r30, 0x00	; 0
    37d4:	09 f0       	breq	.+2      	; 0x37d8 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    37d6:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    37d8:	0f 2e       	mov	r0, r31
    37da:	f8 ee       	ldi	r31, 0xE8	; 232
    37dc:	ef 2e       	mov	r14, r31
    37de:	ff 24       	eor	r15, r15
    37e0:	f0 2d       	mov	r31, r0
    37e2:	ec 0c       	add	r14, r12
    37e4:	fd 1c       	adc	r15, r13
    37e6:	c7 01       	movw	r24, r14
    37e8:	0e 94 30 17 	call	0x2e60	; 0x2e60 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    37ec:	c8 2f       	mov	r28, r24
    37ee:	d0 e0       	ldi	r29, 0x00	; 0
    37f0:	20 97       	sbiw	r28, 0x00	; 0
    37f2:	99 f0       	breq	.+38     	; 0x381a <midi_device_process+0x64>
    37f4:	00 e0       	ldi	r16, 0x00	; 0
    37f6:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    37f8:	c7 01       	movw	r24, r14
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <bytequeue_get>
    3800:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    3802:	c6 01       	movw	r24, r12
    3804:	0e 94 00 1b 	call	0x3600	; 0x3600 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3808:	c7 01       	movw	r24, r14
    380a:	61 e0       	ldi	r22, 0x01	; 1
    380c:	0e 94 56 17 	call	0x2eac	; 0x2eac <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3810:	0f 5f       	subi	r16, 0xFF	; 255
    3812:	1f 4f       	sbci	r17, 0xFF	; 255
    3814:	0c 17       	cp	r16, r28
    3816:	1d 07       	cpc	r17, r29
    3818:	78 f3       	brcs	.-34     	; 0x37f8 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    381a:	df 91       	pop	r29
    381c:	cf 91       	pop	r28
    381e:	1f 91       	pop	r17
    3820:	0f 91       	pop	r16
    3822:	ff 90       	pop	r15
    3824:	ef 90       	pop	r14
    3826:	df 90       	pop	r13
    3828:	cf 90       	pop	r12
    382a:	08 95       	ret

0000382c <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    382c:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    382e:	67 e0       	ldi	r22, 0x07	; 7
    3830:	70 e0       	ldi	r23, 0x00	; 0
    3832:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__udivmodhi4>
    3836:	48 2f       	mov	r20, r24
   if (remainder)
    3838:	88 23       	and	r24, r24
    383a:	81 f0       	breq	.+32     	; 0x385c <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    383c:	c9 01       	movw	r24, r18
    383e:	67 e0       	ldi	r22, 0x07	; 7
    3840:	70 e0       	ldi	r23, 0x00	; 0
    3842:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__udivmodhi4>
    3846:	cb 01       	movw	r24, r22
    3848:	88 0f       	add	r24, r24
    384a:	99 1f       	adc	r25, r25
    384c:	88 0f       	add	r24, r24
    384e:	99 1f       	adc	r25, r25
    3850:	88 0f       	add	r24, r24
    3852:	99 1f       	adc	r25, r25
    3854:	01 96       	adiw	r24, 0x01	; 1
    3856:	84 0f       	add	r24, r20
    3858:	91 1d       	adc	r25, r1
    385a:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    385c:	c9 01       	movw	r24, r18
    385e:	67 e0       	ldi	r22, 0x07	; 7
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__udivmodhi4>
    3866:	cb 01       	movw	r24, r22
    3868:	88 0f       	add	r24, r24
    386a:	99 1f       	adc	r25, r25
    386c:	88 0f       	add	r24, r24
    386e:	99 1f       	adc	r25, r25
    3870:	88 0f       	add	r24, r24
    3872:	99 1f       	adc	r25, r25
}
    3874:	08 95       	ret

00003876 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3876:	48 2f       	mov	r20, r24
    3878:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    387a:	a1 f0       	breq	.+40     	; 0x38a4 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    387c:	9c 01       	movw	r18, r24
    387e:	36 95       	lsr	r19
    3880:	27 95       	ror	r18
    3882:	36 95       	lsr	r19
    3884:	27 95       	ror	r18
    3886:	36 95       	lsr	r19
    3888:	27 95       	ror	r18
    388a:	c9 01       	movw	r24, r18
    388c:	88 0f       	add	r24, r24
    388e:	99 1f       	adc	r25, r25
    3890:	88 0f       	add	r24, r24
    3892:	99 1f       	adc	r25, r25
    3894:	88 0f       	add	r24, r24
    3896:	99 1f       	adc	r25, r25
    3898:	82 1b       	sub	r24, r18
    389a:	93 0b       	sbc	r25, r19
    389c:	01 97       	sbiw	r24, 0x01	; 1
    389e:	84 0f       	add	r24, r20
    38a0:	91 1d       	adc	r25, r1
    38a2:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    38a4:	9c 01       	movw	r18, r24
    38a6:	36 95       	lsr	r19
    38a8:	27 95       	ror	r18
    38aa:	36 95       	lsr	r19
    38ac:	27 95       	ror	r18
    38ae:	36 95       	lsr	r19
    38b0:	27 95       	ror	r18
    38b2:	c9 01       	movw	r24, r18
    38b4:	88 0f       	add	r24, r24
    38b6:	99 1f       	adc	r25, r25
    38b8:	88 0f       	add	r24, r24
    38ba:	99 1f       	adc	r25, r25
    38bc:	88 0f       	add	r24, r24
    38be:	99 1f       	adc	r25, r25
    38c0:	82 1b       	sub	r24, r18
    38c2:	93 0b       	sbc	r25, r19
}
    38c4:	08 95       	ret

000038c6 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    38c6:	2f 92       	push	r2
    38c8:	3f 92       	push	r3
    38ca:	4f 92       	push	r4
    38cc:	5f 92       	push	r5
    38ce:	6f 92       	push	r6
    38d0:	7f 92       	push	r7
    38d2:	8f 92       	push	r8
    38d4:	9f 92       	push	r9
    38d6:	af 92       	push	r10
    38d8:	bf 92       	push	r11
    38da:	cf 92       	push	r12
    38dc:	df 92       	push	r13
    38de:	ef 92       	push	r14
    38e0:	ff 92       	push	r15
    38e2:	0f 93       	push	r16
    38e4:	1f 93       	push	r17
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	00 d0       	rcall	.+0      	; 0x38ec <sysex_encode+0x26>
    38ec:	00 d0       	rcall	.+0      	; 0x38ee <sysex_encode+0x28>
    38ee:	00 d0       	rcall	.+0      	; 0x38f0 <sysex_encode+0x2a>
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	1c 01       	movw	r2, r24
    38f6:	7a 83       	std	Y+2, r23	; 0x02
    38f8:	69 83       	std	Y+1, r22	; 0x01
    38fa:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    38fc:	ca 01       	movw	r24, r20
    38fe:	67 e0       	ldi	r22, 0x07	; 7
    3900:	70 e0       	ldi	r23, 0x00	; 0
    3902:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__udivmodhi4>
    3906:	2b 01       	movw	r4, r22
    3908:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    390a:	61 15       	cp	r22, r1
    390c:	71 05       	cpc	r23, r1
    390e:	b1 f1       	breq	.+108    	; 0x397c <sysex_encode+0xb6>
    3910:	81 01       	movw	r16, r2
    3912:	e9 80       	ldd	r14, Y+1	; 0x01
    3914:	fa 80       	ldd	r15, Y+2	; 0x02
    3916:	cc 24       	eor	r12, r12
    3918:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    391a:	88 24       	eor	r8, r8
    391c:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    391e:	1e 83       	std	Y+6, r17	; 0x06
    3920:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    3922:	f8 01       	movw	r30, r16
    3924:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3926:	fc 82       	std	Y+4, r15	; 0x04
    3928:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    392a:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    392c:	ab 81       	ldd	r26, Y+3	; 0x03
    392e:	bc 81       	ldd	r27, Y+4	; 0x04
    3930:	2d 91       	ld	r18, X+
    3932:	bc 83       	std	Y+4, r27	; 0x04
    3934:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3936:	4f 5f       	subi	r20, 0xFF	; 255
    3938:	5f 4f       	sbci	r21, 0xFF	; 255
    393a:	82 2f       	mov	r24, r18
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	80 78       	andi	r24, 0x80	; 128
    3940:	90 70       	andi	r25, 0x00	; 0
    3942:	bc 01       	movw	r22, r24
    3944:	04 2e       	mov	r0, r20
    3946:	02 c0       	rjmp	.+4      	; 0x394c <sysex_encode+0x86>
    3948:	75 95       	asr	r23
    394a:	67 95       	ror	r22
    394c:	0a 94       	dec	r0
    394e:	e2 f7       	brpl	.-8      	; 0x3948 <sysex_encode+0x82>
    3950:	ad 81       	ldd	r26, Y+5	; 0x05
    3952:	be 81       	ldd	r27, Y+6	; 0x06
    3954:	8c 91       	ld	r24, X
    3956:	86 2b       	or	r24, r22
    3958:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    395a:	2f 77       	andi	r18, 0x7F	; 127
    395c:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    395e:	47 30       	cpi	r20, 0x07	; 7
    3960:	51 05       	cpc	r21, r1
    3962:	21 f7       	brne	.-56     	; 0x392c <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3964:	08 94       	sec
    3966:	c1 1c       	adc	r12, r1
    3968:	d1 1c       	adc	r13, r1
    396a:	08 5f       	subi	r16, 0xF8	; 248
    396c:	1f 4f       	sbci	r17, 0xFF	; 255
    396e:	e7 e0       	ldi	r30, 0x07	; 7
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	ee 0e       	add	r14, r30
    3974:	ff 1e       	adc	r15, r31
    3976:	ca 14       	cp	r12, r10
    3978:	db 04       	cpc	r13, r11
    397a:	89 f6       	brne	.-94     	; 0x391e <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    397c:	c3 01       	movw	r24, r6
    397e:	67 e0       	ldi	r22, 0x07	; 7
    3980:	70 e0       	ldi	r23, 0x00	; 0
    3982:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__udivmodhi4>
   if (remainder) {
    3986:	88 23       	and	r24, r24
    3988:	d9 f1       	breq	.+118    	; 0x3a00 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    398a:	82 01       	movw	r16, r4
    398c:	00 0f       	add	r16, r16
    398e:	11 1f       	adc	r17, r17
    3990:	00 0f       	add	r16, r16
    3992:	11 1f       	adc	r17, r17
    3994:	00 0f       	add	r16, r16
    3996:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3998:	78 01       	movw	r14, r16
    399a:	e4 18       	sub	r14, r4
    399c:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    399e:	d1 01       	movw	r26, r2
    39a0:	a0 0f       	add	r26, r16
    39a2:	b1 1f       	adc	r27, r17
    39a4:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    39a6:	68 2f       	mov	r22, r24
    39a8:	70 e0       	ldi	r23, 0x00	; 0
    39aa:	61 15       	cp	r22, r1
    39ac:	71 05       	cpc	r23, r1
    39ae:	19 f1       	breq	.+70     	; 0x39f6 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    39b0:	e9 81       	ldd	r30, Y+1	; 0x01
    39b2:	fa 81       	ldd	r31, Y+2	; 0x02
    39b4:	ee 0e       	add	r14, r30
    39b6:	ff 1e       	adc	r15, r31
    39b8:	c8 01       	movw	r24, r16
    39ba:	01 96       	adiw	r24, 0x01	; 1
    39bc:	28 0e       	add	r2, r24
    39be:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    39c4:	f7 01       	movw	r30, r14
    39c6:	41 91       	ld	r20, Z+
    39c8:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    39ca:	2f 5f       	subi	r18, 0xFF	; 255
    39cc:	3f 4f       	sbci	r19, 0xFF	; 255
    39ce:	84 2f       	mov	r24, r20
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	80 78       	andi	r24, 0x80	; 128
    39d4:	90 70       	andi	r25, 0x00	; 0
    39d6:	02 2e       	mov	r0, r18
    39d8:	02 c0       	rjmp	.+4      	; 0x39de <sysex_encode+0x118>
    39da:	95 95       	asr	r25
    39dc:	87 95       	ror	r24
    39de:	0a 94       	dec	r0
    39e0:	e2 f7       	brpl	.-8      	; 0x39da <sysex_encode+0x114>
    39e2:	9c 91       	ld	r25, X
    39e4:	89 2b       	or	r24, r25
    39e6:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    39e8:	4f 77       	andi	r20, 0x7F	; 127
    39ea:	f1 01       	movw	r30, r2
    39ec:	41 93       	st	Z+, r20
    39ee:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    39f0:	26 17       	cp	r18, r22
    39f2:	37 07       	cpc	r19, r23
    39f4:	38 f3       	brcs	.-50     	; 0x39c4 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    39f6:	c8 01       	movw	r24, r16
    39f8:	01 96       	adiw	r24, 0x01	; 1
    39fa:	86 0f       	add	r24, r22
    39fc:	97 1f       	adc	r25, r23
    39fe:	07 c0       	rjmp	.+14     	; 0x3a0e <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    3a00:	c2 01       	movw	r24, r4
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	88 0f       	add	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	88 0f       	add	r24, r24
    3a0c:	99 1f       	adc	r25, r25
   }
}
    3a0e:	26 96       	adiw	r28, 0x06	; 6
    3a10:	0f b6       	in	r0, 0x3f	; 63
    3a12:	f8 94       	cli
    3a14:	de bf       	out	0x3e, r29	; 62
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	cd bf       	out	0x3d, r28	; 61
    3a1a:	df 91       	pop	r29
    3a1c:	cf 91       	pop	r28
    3a1e:	1f 91       	pop	r17
    3a20:	0f 91       	pop	r16
    3a22:	ff 90       	pop	r15
    3a24:	ef 90       	pop	r14
    3a26:	df 90       	pop	r13
    3a28:	cf 90       	pop	r12
    3a2a:	bf 90       	pop	r11
    3a2c:	af 90       	pop	r10
    3a2e:	9f 90       	pop	r9
    3a30:	8f 90       	pop	r8
    3a32:	7f 90       	pop	r7
    3a34:	6f 90       	pop	r6
    3a36:	5f 90       	pop	r5
    3a38:	4f 90       	pop	r4
    3a3a:	3f 90       	pop	r3
    3a3c:	2f 90       	pop	r2
    3a3e:	08 95       	ret

00003a40 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a40:	6f 92       	push	r6
    3a42:	7f 92       	push	r7
    3a44:	8f 92       	push	r8
    3a46:	9f 92       	push	r9
    3a48:	af 92       	push	r10
    3a4a:	bf 92       	push	r11
    3a4c:	cf 92       	push	r12
    3a4e:	df 92       	push	r13
    3a50:	ef 92       	push	r14
    3a52:	ff 92       	push	r15
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	3c 01       	movw	r6, r24
    3a5e:	4b 01       	movw	r8, r22
    3a60:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3a62:	42 30       	cpi	r20, 0x02	; 2
    3a64:	51 05       	cpc	r21, r1
    3a66:	08 f4       	brcc	.+2      	; 0x3a6a <sysex_decode+0x2a>
    3a68:	6f c0       	rjmp	.+222    	; 0x3b48 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3a6a:	7a 01       	movw	r14, r20
    3a6c:	f6 94       	lsr	r15
    3a6e:	e7 94       	ror	r14
    3a70:	f6 94       	lsr	r15
    3a72:	e7 94       	ror	r14
    3a74:	f6 94       	lsr	r15
    3a76:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3a78:	e1 14       	cp	r14, r1
    3a7a:	f1 04       	cpc	r15, r1
    3a7c:	29 f1       	breq	.+74     	; 0x3ac8 <sysex_decode+0x88>
    3a7e:	eb 01       	movw	r28, r22
    3a80:	b3 01       	movw	r22, r6
    3a82:	00 e0       	ldi	r16, 0x00	; 0
    3a84:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a86:	cc 24       	eor	r12, r12
    3a88:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a8a:	de 01       	movw	r26, r28
    3a8c:	11 96       	adiw	r26, 0x01	; 1
    3a8e:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a90:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3a92:	2d 91       	ld	r18, X+
    3a94:	2f 77       	andi	r18, 0x7F	; 127
    3a96:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a98:	4f 5f       	subi	r20, 0xFF	; 255
    3a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a9c:	88 81       	ld	r24, Y
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	04 2e       	mov	r0, r20
    3aa2:	02 c0       	rjmp	.+4      	; 0x3aa8 <sysex_decode+0x68>
    3aa4:	88 0f       	add	r24, r24
    3aa6:	99 1f       	adc	r25, r25
    3aa8:	0a 94       	dec	r0
    3aaa:	e2 f7       	brpl	.-8      	; 0x3aa4 <sysex_decode+0x64>
    3aac:	80 78       	andi	r24, 0x80	; 128
    3aae:	28 2b       	or	r18, r24
    3ab0:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3ab2:	47 30       	cpi	r20, 0x07	; 7
    3ab4:	51 05       	cpc	r21, r1
    3ab6:	69 f7       	brne	.-38     	; 0x3a92 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3ab8:	0f 5f       	subi	r16, 0xFF	; 255
    3aba:	1f 4f       	sbci	r17, 0xFF	; 255
    3abc:	28 96       	adiw	r28, 0x08	; 8
    3abe:	69 5f       	subi	r22, 0xF9	; 249
    3ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac2:	0e 15       	cp	r16, r14
    3ac4:	1f 05       	cpc	r17, r15
    3ac6:	09 f7       	brne	.-62     	; 0x3a8a <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3ac8:	5a 2d       	mov	r21, r10
    3aca:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3acc:	99 f1       	breq	.+102    	; 0x3b34 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3ace:	e7 01       	movw	r28, r14
    3ad0:	cc 0f       	add	r28, r28
    3ad2:	dd 1f       	adc	r29, r29
    3ad4:	cc 0f       	add	r28, r28
    3ad6:	dd 1f       	adc	r29, r29
    3ad8:	cc 0f       	add	r28, r28
    3ada:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3adc:	8e 01       	movw	r16, r28
    3ade:	0e 19       	sub	r16, r14
    3ae0:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3ae2:	65 2f       	mov	r22, r21
    3ae4:	70 e0       	ldi	r23, 0x00	; 0
    3ae6:	61 50       	subi	r22, 0x01	; 1
    3ae8:	70 40       	sbci	r23, 0x00	; 0
    3aea:	f9 f0       	breq	.+62     	; 0x3b2a <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3aec:	ce 01       	movw	r24, r28
    3aee:	01 96       	adiw	r24, 0x01	; 1
    3af0:	d4 01       	movw	r26, r8
    3af2:	a8 0f       	add	r26, r24
    3af4:	b9 1f       	adc	r27, r25
    3af6:	f3 01       	movw	r30, r6
    3af8:	e0 0f       	add	r30, r16
    3afa:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3b00:	c8 0d       	add	r28, r8
    3b02:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3b04:	4d 91       	ld	r20, X+
    3b06:	4f 77       	andi	r20, 0x7F	; 127
    3b08:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3b0a:	2f 5f       	subi	r18, 0xFF	; 255
    3b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0e:	88 81       	ld	r24, Y
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	02 2e       	mov	r0, r18
    3b14:	02 c0       	rjmp	.+4      	; 0x3b1a <sysex_decode+0xda>
    3b16:	88 0f       	add	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	0a 94       	dec	r0
    3b1c:	e2 f7       	brpl	.-8      	; 0x3b16 <sysex_decode+0xd6>
    3b1e:	80 78       	andi	r24, 0x80	; 128
    3b20:	48 2b       	or	r20, r24
    3b22:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3b24:	26 17       	cp	r18, r22
    3b26:	37 07       	cpc	r19, r23
    3b28:	68 f3       	brcs	.-38     	; 0x3b04 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3b2a:	c8 01       	movw	r24, r16
    3b2c:	01 97       	sbiw	r24, 0x01	; 1
    3b2e:	85 0f       	add	r24, r21
    3b30:	91 1d       	adc	r25, r1
    3b32:	0c c0       	rjmp	.+24     	; 0x3b4c <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3b34:	c7 01       	movw	r24, r14
    3b36:	88 0f       	add	r24, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	88 0f       	add	r24, r24
    3b3c:	99 1f       	adc	r25, r25
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	8e 19       	sub	r24, r14
    3b44:	9f 09       	sbc	r25, r15
    3b46:	02 c0       	rjmp	.+4      	; 0x3b4c <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3b4c:	df 91       	pop	r29
    3b4e:	cf 91       	pop	r28
    3b50:	1f 91       	pop	r17
    3b52:	0f 91       	pop	r16
    3b54:	ff 90       	pop	r15
    3b56:	ef 90       	pop	r14
    3b58:	df 90       	pop	r13
    3b5a:	cf 90       	pop	r12
    3b5c:	bf 90       	pop	r11
    3b5e:	af 90       	pop	r10
    3b60:	9f 90       	pop	r9
    3b62:	8f 90       	pop	r8
    3b64:	7f 90       	pop	r7
    3b66:	6f 90       	pop	r6
    3b68:	08 95       	ret

00003b6a <__mulsi3>:
    3b6a:	62 9f       	mul	r22, r18
    3b6c:	d0 01       	movw	r26, r0
    3b6e:	73 9f       	mul	r23, r19
    3b70:	f0 01       	movw	r30, r0
    3b72:	82 9f       	mul	r24, r18
    3b74:	e0 0d       	add	r30, r0
    3b76:	f1 1d       	adc	r31, r1
    3b78:	64 9f       	mul	r22, r20
    3b7a:	e0 0d       	add	r30, r0
    3b7c:	f1 1d       	adc	r31, r1
    3b7e:	92 9f       	mul	r25, r18
    3b80:	f0 0d       	add	r31, r0
    3b82:	83 9f       	mul	r24, r19
    3b84:	f0 0d       	add	r31, r0
    3b86:	74 9f       	mul	r23, r20
    3b88:	f0 0d       	add	r31, r0
    3b8a:	65 9f       	mul	r22, r21
    3b8c:	f0 0d       	add	r31, r0
    3b8e:	99 27       	eor	r25, r25
    3b90:	72 9f       	mul	r23, r18
    3b92:	b0 0d       	add	r27, r0
    3b94:	e1 1d       	adc	r30, r1
    3b96:	f9 1f       	adc	r31, r25
    3b98:	63 9f       	mul	r22, r19
    3b9a:	b0 0d       	add	r27, r0
    3b9c:	e1 1d       	adc	r30, r1
    3b9e:	f9 1f       	adc	r31, r25
    3ba0:	bd 01       	movw	r22, r26
    3ba2:	cf 01       	movw	r24, r30
    3ba4:	11 24       	eor	r1, r1
    3ba6:	08 95       	ret

00003ba8 <__udivmodhi4>:
    3ba8:	aa 1b       	sub	r26, r26
    3baa:	bb 1b       	sub	r27, r27
    3bac:	51 e1       	ldi	r21, 0x11	; 17
    3bae:	07 c0       	rjmp	.+14     	; 0x3bbe <__udivmodhi4_ep>

00003bb0 <__udivmodhi4_loop>:
    3bb0:	aa 1f       	adc	r26, r26
    3bb2:	bb 1f       	adc	r27, r27
    3bb4:	a6 17       	cp	r26, r22
    3bb6:	b7 07       	cpc	r27, r23
    3bb8:	10 f0       	brcs	.+4      	; 0x3bbe <__udivmodhi4_ep>
    3bba:	a6 1b       	sub	r26, r22
    3bbc:	b7 0b       	sbc	r27, r23

00003bbe <__udivmodhi4_ep>:
    3bbe:	88 1f       	adc	r24, r24
    3bc0:	99 1f       	adc	r25, r25
    3bc2:	5a 95       	dec	r21
    3bc4:	a9 f7       	brne	.-22     	; 0x3bb0 <__udivmodhi4_loop>
    3bc6:	80 95       	com	r24
    3bc8:	90 95       	com	r25
    3bca:	bc 01       	movw	r22, r24
    3bcc:	cd 01       	movw	r24, r26
    3bce:	08 95       	ret

00003bd0 <__divmodhi4>:
    3bd0:	97 fb       	bst	r25, 7
    3bd2:	09 2e       	mov	r0, r25
    3bd4:	07 26       	eor	r0, r23
    3bd6:	0a d0       	rcall	.+20     	; 0x3bec <__divmodhi4_neg1>
    3bd8:	77 fd       	sbrc	r23, 7
    3bda:	04 d0       	rcall	.+8      	; 0x3be4 <__divmodhi4_neg2>
    3bdc:	e5 df       	rcall	.-54     	; 0x3ba8 <__udivmodhi4>
    3bde:	06 d0       	rcall	.+12     	; 0x3bec <__divmodhi4_neg1>
    3be0:	00 20       	and	r0, r0
    3be2:	1a f4       	brpl	.+6      	; 0x3bea <__divmodhi4_exit>

00003be4 <__divmodhi4_neg2>:
    3be4:	70 95       	com	r23
    3be6:	61 95       	neg	r22
    3be8:	7f 4f       	sbci	r23, 0xFF	; 255

00003bea <__divmodhi4_exit>:
    3bea:	08 95       	ret

00003bec <__divmodhi4_neg1>:
    3bec:	f6 f7       	brtc	.-4      	; 0x3bea <__divmodhi4_exit>
    3bee:	90 95       	com	r25
    3bf0:	81 95       	neg	r24
    3bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf4:	08 95       	ret

00003bf6 <memcpy>:
    3bf6:	fb 01       	movw	r30, r22
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	02 c0       	rjmp	.+4      	; 0x3c00 <memcpy+0xa>
    3bfc:	01 90       	ld	r0, Z+
    3bfe:	0d 92       	st	X+, r0
    3c00:	41 50       	subi	r20, 0x01	; 1
    3c02:	50 40       	sbci	r21, 0x00	; 0
    3c04:	d8 f7       	brcc	.-10     	; 0x3bfc <memcpy+0x6>
    3c06:	08 95       	ret

00003c08 <memmove>:
    3c08:	68 17       	cp	r22, r24
    3c0a:	79 07       	cpc	r23, r25
    3c0c:	68 f4       	brcc	.+26     	; 0x3c28 <memmove+0x20>
    3c0e:	fb 01       	movw	r30, r22
    3c10:	dc 01       	movw	r26, r24
    3c12:	e4 0f       	add	r30, r20
    3c14:	f5 1f       	adc	r31, r21
    3c16:	a4 0f       	add	r26, r20
    3c18:	b5 1f       	adc	r27, r21
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <memmove+0x18>
    3c1c:	02 90       	ld	r0, -Z
    3c1e:	0e 92       	st	-X, r0
    3c20:	41 50       	subi	r20, 0x01	; 1
    3c22:	50 40       	sbci	r21, 0x00	; 0
    3c24:	d8 f7       	brcc	.-10     	; 0x3c1c <memmove+0x14>
    3c26:	08 95       	ret
    3c28:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <memcpy>

00003c2c <__eerd_block_m6450a>:
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22

00003c30 <__eerd_blraw_m6450a>:
    3c30:	fc 01       	movw	r30, r24
    3c32:	f9 99       	sbic	0x1f, 1	; 31
    3c34:	fe cf       	rjmp	.-4      	; 0x3c32 <__eerd_blraw_m6450a+0x2>
    3c36:	06 c0       	rjmp	.+12     	; 0x3c44 <__eerd_blraw_m6450a+0x14>
    3c38:	f2 bd       	out	0x22, r31	; 34
    3c3a:	e1 bd       	out	0x21, r30	; 33
    3c3c:	f8 9a       	sbi	0x1f, 0	; 31
    3c3e:	31 96       	adiw	r30, 0x01	; 1
    3c40:	00 b4       	in	r0, 0x20	; 32
    3c42:	0d 92       	st	X+, r0
    3c44:	41 50       	subi	r20, 0x01	; 1
    3c46:	50 40       	sbci	r21, 0x00	; 0
    3c48:	b8 f7       	brcc	.-18     	; 0x3c38 <__eerd_blraw_m6450a+0x8>
    3c4a:	08 95       	ret

00003c4c <__eerd_word_m6450a>:
    3c4c:	a8 e1       	ldi	r26, 0x18	; 24
    3c4e:	b0 e0       	ldi	r27, 0x00	; 0
    3c50:	42 e0       	ldi	r20, 0x02	; 2
    3c52:	50 e0       	ldi	r21, 0x00	; 0
    3c54:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__eerd_blraw_m6450a>

00003c58 <__eeupd_block_m6450a>:
    3c58:	dc 01       	movw	r26, r24
    3c5a:	a4 0f       	add	r26, r20
    3c5c:	b5 1f       	adc	r27, r21
    3c5e:	41 50       	subi	r20, 0x01	; 1
    3c60:	50 40       	sbci	r21, 0x00	; 0
    3c62:	48 f0       	brcs	.+18     	; 0x3c76 <__eeupd_block_m6450a+0x1e>
    3c64:	cb 01       	movw	r24, r22
    3c66:	84 0f       	add	r24, r20
    3c68:	95 1f       	adc	r25, r21
    3c6a:	2e 91       	ld	r18, -X
    3c6c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__eeupd_r18_m6450a>
    3c70:	41 50       	subi	r20, 0x01	; 1
    3c72:	50 40       	sbci	r21, 0x00	; 0
    3c74:	d0 f7       	brcc	.-12     	; 0x3c6a <__eeupd_block_m6450a+0x12>
    3c76:	08 95       	ret

00003c78 <__eeupd_byte_m6450a>:
    3c78:	26 2f       	mov	r18, r22

00003c7a <__eeupd_r18_m6450a>:
    3c7a:	f9 99       	sbic	0x1f, 1	; 31
    3c7c:	fe cf       	rjmp	.-4      	; 0x3c7a <__eeupd_r18_m6450a>
    3c7e:	92 bd       	out	0x22, r25	; 34
    3c80:	81 bd       	out	0x21, r24	; 33
    3c82:	f8 9a       	sbi	0x1f, 0	; 31
    3c84:	01 97       	sbiw	r24, 0x01	; 1
    3c86:	00 b4       	in	r0, 0x20	; 32
    3c88:	02 16       	cp	r0, r18
    3c8a:	31 f0       	breq	.+12     	; 0x3c98 <__eeupd_r18_m6450a+0x1e>
    3c8c:	20 bd       	out	0x20, r18	; 32
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	fa 9a       	sbi	0x1f, 2	; 31
    3c94:	f9 9a       	sbi	0x1f, 1	; 31
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	08 95       	ret

00003c9a <__eeupd_word_m6450a>:
    3c9a:	01 96       	adiw	r24, 0x01	; 1
    3c9c:	27 2f       	mov	r18, r23
    3c9e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__eeupd_r18_m6450a>
    3ca2:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__eeupd_byte_m6450a>

00003ca6 <_exit>:
    3ca6:	f8 94       	cli

00003ca8 <__stop_program>:
    3ca8:	ff cf       	rjmp	.-2      	; 0x3ca8 <__stop_program>
