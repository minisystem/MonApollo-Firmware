
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b4  00800100  00004050  00004104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004050  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000224  008002b4  008002b4  000042b8  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  000042b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  0000492c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00005520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000003b8  00000000  00000000  00005860  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000071d4  00000000  00000000  00005c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019e5  00000000  00000000  0000cdec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024e0  00000000  00000000  0000e7d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e3c  00000000  00000000  00010cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a71  00000000  00000000  00011af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003051  00000000  00000000  00013561  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  000165b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_4>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__vector_9>
      28:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e0 e5       	ldi	r30, 0x50	; 80
      78:	f0 e4       	ldi	r31, 0x40	; 64
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a4 eb       	ldi	r26, 0xB4	; 180
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a8 3d       	cpi	r26, 0xD8	; 216
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 12 05 	call	0xa24	; 0xa24 <main>
      9a:	0c 94 26 20 	jmp	0x404c	; 0x404c <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:
//#include "display.h"

struct arp arp;


void update_arp_sequence(void) {
     146:	4f 92       	push	r4
     148:	5f 92       	push	r5
     14a:	6f 92       	push	r6
     14c:	7f 92       	push	r7
     14e:	8f 92       	push	r8
     150:	9f 92       	push	r9
     152:	af 92       	push	r10
     154:	bf 92       	push	r11
     156:	cf 92       	push	r12
     158:	df 92       	push	r13
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
	


	arp.step_number = gate_buffer*(arp.range + 1);
     166:	90 91 89 03 	lds	r25, 0x0389
     16a:	9f 5f       	subi	r25, 0xFF	; 255
     16c:	80 91 b4 02 	lds	r24, 0x02B4
     170:	98 9f       	mul	r25, r24
     172:	80 2d       	mov	r24, r0
     174:	11 24       	eor	r1, r1
     176:	80 93 8a 03 	sts	0x038A, r24
     17a:	88 24       	eor	r8, r8
     17c:	99 24       	eor	r9, r9
	//arp.step_position = 0; //would use this if note retrigger feature was added
	
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
     17e:	66 24       	eor	r6, r6
     180:	77 24       	eor	r7, r7


	arp.step_number = gate_buffer*(arp.range + 1);
	//arp.step_position = 0; //would use this if note retrigger feature was added
	
	uint8_t step = 0;
     182:	ff 24       	eor	r15, r15
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     184:	44 24       	eor	r4, r4
     186:	55 24       	eor	r5, r5
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     188:	0f 2e       	mov	r0, r31
     18a:	f8 e9       	ldi	r31, 0x98	; 152
     18c:	cf 2e       	mov	r12, r31
     18e:	f3 e0       	ldi	r31, 0x03	; 3
     190:	df 2e       	mov	r13, r31
     192:	f0 2d       	mov	r31, r0
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
						
						root_note += 12;
						
					}
					arp.sequence[step++].note = root_note - (range*12);
     194:	0f 2e       	mov	r0, r31
     196:	f9 e8       	ldi	r31, 0x89	; 137
     198:	af 2e       	mov	r10, r31
     19a:	f3 e0       	ldi	r31, 0x03	; 3
     19c:	bf 2e       	mov	r11, r31
     19e:	f0 2d       	mov	r31, r0
     1a0:	4c c0       	rjmp	.+152    	; 0x23a <update_arp_sequence+0xf4>
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
     1a2:	81 50       	subi	r24, 0x01	; 1
     1a4:	80 1b       	sub	r24, r16
     1a6:	0e 94 8a 01 	call	0x314	; 0x314 <get_indexed_note>
     1aa:	28 2f       	mov	r18, r24
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     1ac:	f6 01       	movw	r30, r12
     1ae:	80 81       	ld	r24, Z
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	41 f0       	breq	.+16     	; 0x1c4 <update_arp_sequence+0x7e>
     1b4:	83 30       	cpi	r24, 0x03	; 3
     1b6:	18 f4       	brcc	.+6      	; 0x1be <update_arp_sequence+0x78>
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	49 f5       	brne	.+82     	; 0x20e <update_arp_sequence+0xc8>
     1bc:	0a c0       	rjmp	.+20     	; 0x1d2 <update_arp_sequence+0x8c>
     1be:	85 30       	cpi	r24, 0x05	; 5
     1c0:	30 f5       	brcc	.+76     	; 0x20e <update_arp_sequence+0xc8>
     1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <update_arp_sequence+0x8c>
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     1c4:	ce 01       	movw	r24, r28
     1c6:	82 0f       	add	r24, r18
     1c8:	91 1d       	adc	r25, r1
     1ca:	88 30       	cpi	r24, 0x08	; 8
     1cc:	91 05       	cpc	r25, r1
     1ce:	6c f0       	brlt	.+26     	; 0x1ea <update_arp_sequence+0xa4>
     1d0:	13 c0       	rjmp	.+38     	; 0x1f8 <update_arp_sequence+0xb2>
			switch(arp.mode) {
				
				case UP:
				case UP_DOWN:
				case RANDOM:
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1d2:	8f 2d       	mov	r24, r15
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	08 96       	adiw	r24, 0x08	; 8
     1d8:	88 0f       	add	r24, r24
     1da:	99 1f       	adc	r25, r25
     1dc:	8a 0d       	add	r24, r10
     1de:	9b 1d       	adc	r25, r11
     1e0:	2e 19       	sub	r18, r14
     1e2:	fc 01       	movw	r30, r24
     1e4:	20 83       	st	Z, r18
     1e6:	f3 94       	inc	r15
				
					break;
     1e8:	12 c0       	rjmp	.+36     	; 0x20e <update_arp_sequence+0xc8>
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
						
						root_note += 12;
     1ea:	24 5f       	subi	r18, 0xF4	; 244
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     1ec:	ce 01       	movw	r24, r28
     1ee:	82 0f       	add	r24, r18
     1f0:	91 1d       	adc	r25, r1
     1f2:	88 30       	cpi	r24, 0x08	; 8
     1f4:	91 05       	cpc	r25, r1
     1f6:	cc f3       	brlt	.-14     	; 0x1ea <update_arp_sequence+0xa4>
						
						root_note += 12;
						
					}
					arp.sequence[step++].note = root_note - (range*12);
     1f8:	8f 2d       	mov	r24, r15
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	08 96       	adiw	r24, 0x08	; 8
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	8a 0d       	add	r24, r10
     204:	9b 1d       	adc	r25, r11
     206:	2e 0d       	add	r18, r14
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18
     20c:	f3 94       	inc	r15
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     20e:	0f 5f       	subi	r16, 0xFF	; 255
     210:	1f 4f       	sbci	r17, 0xFF	; 255
     212:	80 91 b4 02 	lds	r24, 0x02B4
     216:	28 2f       	mov	r18, r24
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	02 17       	cp	r16, r18
     21c:	13 07       	cpc	r17, r19
     21e:	0c f2       	brlt	.-126    	; 0x1a2 <update_arp_sequence+0x5c>
	//arp.step_position = 0; //would use this if note retrigger feature was added
	
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
     220:	08 94       	sec
     222:	61 1c       	adc	r6, r1
     224:	71 1c       	adc	r7, r1
     226:	84 ef       	ldi	r24, 0xF4	; 244
     228:	9f ef       	ldi	r25, 0xFF	; 255
     22a:	88 0e       	add	r8, r24
     22c:	99 1e       	adc	r9, r25
     22e:	f5 01       	movw	r30, r10
     230:	80 81       	ld	r24, Z
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	86 15       	cp	r24, r6
     236:	97 05       	cpc	r25, r7
     238:	44 f0       	brlt	.+16     	; 0x24a <update_arp_sequence+0x104>
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     23a:	80 91 b4 02 	lds	r24, 0x02B4
     23e:	88 23       	and	r24, r24
     240:	79 f3       	breq	.-34     	; 0x220 <update_arp_sequence+0xda>
//#include "display.h"

struct arp arp;


void update_arp_sequence(void) {
     242:	e8 2c       	mov	r14, r8
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     244:	e4 01       	movw	r28, r8
     246:	82 01       	movw	r16, r4
     248:	ac cf       	rjmp	.-168    	; 0x1a2 <update_arp_sequence+0x5c>
		//value_to_display = step;

	}
	
	
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	df 90       	pop	r13
     258:	cf 90       	pop	r12
     25a:	bf 90       	pop	r11
     25c:	af 90       	pop	r10
     25e:	9f 90       	pop	r9
     260:	8f 90       	pop	r8
     262:	7f 90       	pop	r7
     264:	6f 90       	pop	r6
     266:	5f 90       	pop	r5
     268:	4f 90       	pop	r4
     26a:	08 95       	ret

0000026c <step_arp_note>:

void step_arp_note(void) { //updates arp note according to step position in sequence
	
	arp.current_note = arp.sequence[arp.step_position].note;
     26c:	90 91 8b 03 	lds	r25, 0x038B
     270:	a9 2f       	mov	r26, r25
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	18 96       	adiw	r26, 0x08	; 8
     276:	e9 e8       	ldi	r30, 0x89	; 137
     278:	f3 e0       	ldi	r31, 0x03	; 3
     27a:	aa 0f       	add	r26, r26
     27c:	bb 1f       	adc	r27, r27
     27e:	ae 0f       	add	r26, r30
     280:	bf 1f       	adc	r27, r31
     282:	8c 91       	ld	r24, X
     284:	85 83       	std	Z+5, r24	; 0x05
	arp.previous_note = arp.current_note;
     286:	84 83       	std	Z+4, r24	; 0x04
	
	switch (arp.mode) {
     288:	87 85       	ldd	r24, Z+15	; 0x0f
     28a:	83 30       	cpi	r24, 0x03	; 3
     28c:	19 f0       	breq	.+6      	; 0x294 <step_arp_note+0x28>
     28e:	84 30       	cpi	r24, 0x04	; 4
     290:	99 f5       	brne	.+102    	; 0x2f8 <step_arp_note+0x8c>
     292:	28 c0       	rjmp	.+80     	; 0x2e4 <step_arp_note+0x78>
		
		case UP_DOWN:
			
			if (arp.direction == UP) {
     294:	80 91 8c 03 	lds	r24, 0x038C
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	91 f4       	brne	.+36     	; 0x2c0 <step_arp_note+0x54>
				arp.step_position++;	
     29c:	9f 5f       	subi	r25, 0xFF	; 255
     29e:	90 93 8b 03 	sts	0x038B, r25
				
				if (arp.step_position >= arp.step_number) {
     2a2:	80 91 8a 03 	lds	r24, 0x038A
     2a6:	98 17       	cp	r25, r24
     2a8:	80 f1       	brcs	.+96     	; 0x30a <step_arp_note+0x9e>
					arp.step_position = arp.step_number == 1 ? 0 : arp.step_number - 2; //Omar handles edge case here
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <step_arp_note+0x46>
     2ae:	82 50       	subi	r24, 0x02	; 2
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <step_arp_note+0x48>
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	80 93 8b 03 	sts	0x038B, r24
					arp.direction = DOWN;
     2b8:	82 e0       	ldi	r24, 0x02	; 2
     2ba:	80 93 8c 03 	sts	0x038C, r24
     2be:	25 c0       	rjmp	.+74     	; 0x30a <step_arp_note+0x9e>
				}				
				
			} else {
				if (arp.step_position <= 0) {
     2c0:	99 23       	and	r25, r25
     2c2:	61 f4       	brne	.+24     	; 0x2dc <step_arp_note+0x70>
					
					arp.step_position = arp.step_number == 1 ? 0 : 1; //Omar handles edge case here
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 91 8a 03 	lds	r25, 0x038A
     2ca:	91 30       	cpi	r25, 0x01	; 1
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <step_arp_note+0x64>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	80 93 8b 03 	sts	0x038B, r24
					arp.direction = UP;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	80 93 8c 03 	sts	0x038C, r24
     2da:	17 c0       	rjmp	.+46     	; 0x30a <step_arp_note+0x9e>
					
				} else {
					arp.step_position--;
     2dc:	91 50       	subi	r25, 0x01	; 1
     2de:	90 93 8b 03 	sts	0x038B, r25
     2e2:	13 c0       	rjmp	.+38     	; 0x30a <step_arp_note+0x9e>
			
			break;
			
		case RANDOM:
		
			arp.step_position = random() % arp.step_number; //maybe >> random() result to generate 8 bit value before modulo?
     2e4:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <random>
     2e8:	60 91 8a 03 	lds	r22, 0x038A
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <__divmodhi4>
     2f2:	80 93 8b 03 	sts	0x038B, r24
		
			break;
     2f6:	09 c0       	rjmp	.+18     	; 0x30a <step_arp_note+0x9e>
			
		default:
		
			if (++arp.step_position >= arp.step_number) arp.step_position  = 0;//reset step position when at end of sequence 
     2f8:	9f 5f       	subi	r25, 0xFF	; 255
     2fa:	90 93 8b 03 	sts	0x038B, r25
     2fe:	80 91 8a 03 	lds	r24, 0x038A
     302:	98 17       	cp	r25, r24
     304:	10 f0       	brcs	.+4      	; 0x30a <step_arp_note+0x9e>
     306:	10 92 8b 03 	sts	0x038B, r1
			break;			
		
		
	}
	 
	arp.display = arp.step_position;
     30a:	80 91 8b 03 	lds	r24, 0x038B
     30e:	80 93 96 03 	sts	0x0396, r24
	//arp.current_note = arp.sequence[arp.step_position].note;

     312:	08 95       	ret

00000314 <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     314:	e8 2f       	mov	r30, r24
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	ee 0f       	add	r30, r30
     31a:	ff 1f       	adc	r31, r31
     31c:	e8 54       	subi	r30, 0x48	; 72
     31e:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     320:	80 81       	ld	r24, Z
     322:	08 95       	ret

00000324 <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.mode) {
     324:	80 91 98 03 	lds	r24, 0x0398
     328:	88 23       	and	r24, r24
     32a:	19 f0       	breq	.+6      	; 0x332 <get_current_note+0xe>
		
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     32c:	80 91 8e 03 	lds	r24, 0x038E
     330:	08 95       	ret
		

		
	} else {
		
		note = current_note;
     332:	80 91 b5 02 	lds	r24, 0x02B5
				
	}
	return note;
	
}
     336:	08 95       	ret

00000338 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	18 2f       	mov	r17, r24
     342:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     344:	8a eb       	ldi	r24, 0xBA	; 186
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	ec 01       	movw	r28, r24
     34a:	22 97       	sbiw	r28, 0x02	; 2
     34c:	be 01       	movw	r22, r28
     34e:	4e e0       	ldi	r20, 0x0E	; 14
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     356:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     358:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     35a:	10 93 b5 02 	sts	0x02B5, r17
	
} 
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	08 95       	ret

00000368 <remove_note>:
void remove_note(uint8_t note){
     368:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     36a:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     36e:	c8 17       	cp	r28, r24
     370:	41 f0       	breq	.+16     	; 0x382 <remove_note+0x1a>
     372:	ea eb       	ldi	r30, 0xBA	; 186
     374:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     376:	41 e0       	ldi	r20, 0x01	; 1
     378:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     37a:	90 81       	ld	r25, Z
     37c:	98 17       	cp	r25, r24
     37e:	59 f4       	brne	.+22     	; 0x396 <remove_note+0x2e>
     380:	02 c0       	rjmp	.+4      	; 0x386 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     386:	fa 01       	movw	r30, r20
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	e8 54       	subi	r30, 0x48	; 72
     38e:	fe 4f       	sbci	r31, 0xFE	; 254
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	80 83       	st	Z, r24
			free_slot = i;
			break;
     394:	07 c0       	rjmp	.+14     	; 0x3a4 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     396:	4f 5f       	subi	r20, 0xFF	; 255
     398:	5f 4f       	sbci	r21, 0xFF	; 255
     39a:	32 96       	adiw	r30, 0x02	; 2
     39c:	48 30       	cpi	r20, 0x08	; 8
     39e:	51 05       	cpc	r21, r1
     3a0:	61 f7       	brne	.-40     	; 0x37a <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     3a2:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	ca 01       	movw	r24, r20
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	bc 01       	movw	r22, r24
     3ae:	66 54       	subi	r22, 0x46	; 70
     3b0:	7e 4f       	sbci	r23, 0xFE	; 254
     3b2:	40 95       	com	r20
     3b4:	50 95       	com	r21
     3b6:	48 5f       	subi	r20, 0xF8	; 248
     3b8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ba:	44 0f       	add	r20, r20
     3bc:	55 1f       	adc	r21, r21
     3be:	88 54       	subi	r24, 0x48	; 72
     3c0:	9e 4f       	sbci	r25, 0xFE	; 254
     3c2:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <memmove>
	note_pool[7].note = EMPTY;	
     3c6:	8f ef       	ldi	r24, 0xFF	; 255
     3c8:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     3cc:	80 91 b8 01 	lds	r24, 0x01B8
     3d0:	8f 3f       	cpi	r24, 0xFF	; 255
     3d2:	19 f4       	brne	.+6      	; 0x3da <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     3d4:	c0 93 b5 02 	sts	0x02B5, r28
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     3da:	80 93 b5 02 	sts	0x02B5, r24

	}	
	
}
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <setup_system_clock>:
struct clock lfo_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     3e2:	8d e0       	ldi	r24, 0x0D	; 13
     3e4:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     3ee:	08 95       	ret

000003f0 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     3f0:	90 93 89 00 	sts	0x0089, r25
     3f4:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     3f8:	20 91 84 00 	lds	r18, 0x0084
     3fc:	30 91 85 00 	lds	r19, 0x0085
     400:	82 17       	cp	r24, r18
     402:	93 07       	cpc	r25, r19
     404:	28 f4       	brcc	.+10     	; 0x410 <update_clock_rate+0x20>
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	90 93 85 00 	sts	0x0085, r25
     40c:	80 93 84 00 	sts	0x0084, r24
     410:	08 95       	ret

00000412 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     412:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     414:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     416:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     418:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     41a:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     41c:	8c 91       	ld	r24, X
     41e:	87 70       	andi	r24, 0x07	; 7
     420:	82 b9       	out	0x02, r24	; 2
     422:	66 e0       	ldi	r22, 0x06	; 6
     424:	6a 95       	dec	r22
     426:	f1 f7       	brne	.-4      	; 0x424 <set_control_voltage+0x12>
     428:	00 c0       	rjmp	.+0      	; 0x42a <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     42a:	ea ed       	ldi	r30, 0xDA	; 218
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	40 81       	ld	r20, Z
     430:	8c 91       	ld	r24, X
     432:	86 95       	lsr	r24
     434:	86 95       	lsr	r24
     436:	86 95       	lsr	r24
     438:	87 70       	andi	r24, 0x07	; 7
     43a:	21 e0       	ldi	r18, 0x01	; 1
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	b9 01       	movw	r22, r18
     440:	02 c0       	rjmp	.+4      	; 0x446 <set_control_voltage+0x34>
     442:	66 0f       	add	r22, r22
     444:	77 1f       	adc	r23, r23
     446:	8a 95       	dec	r24
     448:	e2 f7       	brpl	.-8      	; 0x442 <set_control_voltage+0x30>
     44a:	cb 01       	movw	r24, r22
     44c:	84 2b       	or	r24, r20
     44e:	80 83       	st	Z, r24
     450:	76 e0       	ldi	r23, 0x06	; 6
     452:	7a 95       	dec	r23
     454:	f1 f7       	brne	.-4      	; 0x452 <set_control_voltage+0x40>
     456:	00 c0       	rjmp	.+0      	; 0x458 <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     458:	80 81       	ld	r24, Z
     45a:	9c 91       	ld	r25, X
     45c:	96 95       	lsr	r25
     45e:	96 95       	lsr	r25
     460:	96 95       	lsr	r25
     462:	97 70       	andi	r25, 0x07	; 7
     464:	02 c0       	rjmp	.+4      	; 0x46a <set_control_voltage+0x58>
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	9a 95       	dec	r25
     46c:	e2 f7       	brpl	.-8      	; 0x466 <set_control_voltage+0x54>
     46e:	20 95       	com	r18
     470:	28 23       	and	r18, r24
     472:	20 83       	st	Z, r18
	
}	
     474:	08 95       	ret

00000476 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     476:	83 b3       	in	r24, 0x13	; 19
     478:	83 60       	ori	r24, 0x03	; 3
     47a:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     480:	97 b1       	in	r25, 0x07	; 7
     482:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     484:	e9 ed       	ldi	r30, 0xD9	; 217
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	8f 60       	ori	r24, 0x0F	; 15
     48c:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     48e:	ea ed       	ldi	r30, 0xDA	; 218
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	80 7f       	andi	r24, 0xF0	; 240
     496:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     498:	84 b3       	in	r24, 0x14	; 20
     49a:	83 60       	ori	r24, 0x03	; 3
     49c:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     49e:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     4a0:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     4a2:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     4a4:	a0 9a       	sbi	0x14, 0	; 20
}
     4a6:	08 95       	ret

000004a8 <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	2e 97       	sbiw	r28, 0x0e	; 14
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     4c0:	28 e0       	ldi	r18, 0x08	; 8
     4c2:	29 83       	std	Y+1, r18	; 0x01
     4c4:	21 e0       	ldi	r18, 0x01	; 1
     4c6:	2a 83       	std	Y+2, r18	; 0x02
     4c8:	22 e0       	ldi	r18, 0x02	; 2
     4ca:	2b 83       	std	Y+3, r18	; 0x03
     4cc:	24 e0       	ldi	r18, 0x04	; 4
     4ce:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     4d0:	de 01       	movw	r26, r28
     4d2:	15 96       	adiw	r26, 0x05	; 5
     4d4:	e7 ee       	ldi	r30, 0xE7	; 231
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	2a e0       	ldi	r18, 0x0A	; 10
     4da:	01 90       	ld	r0, Z+
     4dc:	0d 92       	st	X+, r0
     4de:	21 50       	subi	r18, 0x01	; 1
     4e0:	e1 f7       	brne	.-8      	; 0x4da <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     4e2:	2f ef       	ldi	r18, 0xFF	; 255
     4e4:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     4e6:	ea ed       	ldi	r30, 0xDA	; 218
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	20 81       	ld	r18, Z
     4ec:	20 61       	ori	r18, 0x10	; 16
     4ee:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     4f0:	20 81       	ld	r18, Z
     4f2:	2f 7e       	andi	r18, 0xEF	; 239
     4f4:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     4f6:	06 2f       	mov	r16, r22
     4f8:	10 e0       	ldi	r17, 0x00	; 0
     4fa:	de 01       	movw	r26, r28
     4fc:	a0 0f       	add	r26, r16
     4fe:	b1 1f       	adc	r27, r17
     500:	11 96       	adiw	r26, 0x01	; 1
     502:	2c 91       	ld	r18, X
     504:	11 97       	sbiw	r26, 0x01	; 1
     506:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     508:	20 81       	ld	r18, Z
     50a:	20 62       	ori	r18, 0x20	; 32
     50c:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     50e:	20 81       	ld	r18, Z
     510:	2f 7d       	andi	r18, 0xDF	; 223
     512:	20 83       	st	Z, r18
     514:	48 2f       	mov	r20, r24
     516:	59 2f       	mov	r21, r25
     518:	87 e2       	ldi	r24, 0x27	; 39
     51a:	40 31       	cpi	r20, 0x10	; 16
     51c:	58 07       	cpc	r21, r24
     51e:	10 f0       	brcs	.+4      	; 0x524 <display_dec+0x7c>
     520:	4f e0       	ldi	r20, 0x0F	; 15
     522:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     524:	ca 01       	movw	r24, r20
     526:	96 95       	lsr	r25
     528:	87 95       	ror	r24
     52a:	96 95       	lsr	r25
     52c:	87 95       	ror	r24
     52e:	9a 01       	movw	r18, r20
     530:	36 95       	lsr	r19
     532:	27 95       	ror	r18
     534:	28 0f       	add	r18, r24
     536:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     538:	c9 01       	movw	r24, r18
     53a:	92 95       	swap	r25
     53c:	82 95       	swap	r24
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	89 27       	eor	r24, r25
     542:	9f 70       	andi	r25, 0x0F	; 15
     544:	89 27       	eor	r24, r25
     546:	82 0f       	add	r24, r18
     548:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     54a:	29 2f       	mov	r18, r25
     54c:	33 27       	eor	r19, r19
     54e:	82 0f       	add	r24, r18
     550:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     552:	96 95       	lsr	r25
     554:	87 95       	ror	r24
     556:	96 95       	lsr	r25
     558:	87 95       	ror	r24
     55a:	96 95       	lsr	r25
     55c:	87 95       	ror	r24
	r = number - q2 * 10;
     55e:	28 2f       	mov	r18, r24
     560:	22 0f       	add	r18, r18
     562:	32 2f       	mov	r19, r18
     564:	33 0f       	add	r19, r19
     566:	33 0f       	add	r19, r19
     568:	23 0f       	add	r18, r19
     56a:	e4 2f       	mov	r30, r20
     56c:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	ea 30       	cpi	r30, 0x0A	; 10
     574:	10 f4       	brcc	.+4      	; 0x57a <display_dec+0xd2>
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	68 0f       	add	r22, r24
     57c:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     57e:	9b 01       	movw	r18, r22
     580:	36 95       	lsr	r19
     582:	27 95       	ror	r18
     584:	36 95       	lsr	r19
     586:	27 95       	ror	r18
     588:	ab 01       	movw	r20, r22
     58a:	56 95       	lsr	r21
     58c:	47 95       	ror	r20
     58e:	24 0f       	add	r18, r20
     590:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     592:	c9 01       	movw	r24, r18
     594:	92 95       	swap	r25
     596:	82 95       	swap	r24
     598:	8f 70       	andi	r24, 0x0F	; 15
     59a:	89 27       	eor	r24, r25
     59c:	9f 70       	andi	r25, 0x0F	; 15
     59e:	89 27       	eor	r24, r25
     5a0:	82 0f       	add	r24, r18
     5a2:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     5a4:	29 2f       	mov	r18, r25
     5a6:	33 27       	eor	r19, r19
     5a8:	82 0f       	add	r24, r18
     5aa:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     5ac:	96 95       	lsr	r25
     5ae:	87 95       	ror	r24
     5b0:	96 95       	lsr	r25
     5b2:	87 95       	ror	r24
     5b4:	96 95       	lsr	r25
     5b6:	87 95       	ror	r24
	r = qa - q3 * 10;
     5b8:	98 2f       	mov	r25, r24
     5ba:	99 0f       	add	r25, r25
     5bc:	29 2f       	mov	r18, r25
     5be:	22 0f       	add	r18, r18
     5c0:	22 0f       	add	r18, r18
     5c2:	92 0f       	add	r25, r18
     5c4:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	6a 30       	cpi	r22, 0x0A	; 10
     5ca:	08 f4       	brcc	.+2      	; 0x5ce <display_dec+0x126>
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	89 0f       	add	r24, r25
	tens_place = rem[r];
     5d0:	41 ef       	ldi	r20, 0xF1	; 241
     5d2:	51 e0       	ldi	r21, 0x01	; 1
     5d4:	da 01       	movw	r26, r20
     5d6:	a6 0f       	add	r26, r22
     5d8:	b1 1d       	adc	r27, r1
     5da:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     5dc:	28 2f       	mov	r18, r24
     5de:	26 95       	lsr	r18
     5e0:	26 95       	lsr	r18
     5e2:	98 2f       	mov	r25, r24
     5e4:	96 95       	lsr	r25
     5e6:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     5e8:	29 2f       	mov	r18, r25
     5ea:	22 95       	swap	r18
     5ec:	2f 70       	andi	r18, 0x0F	; 15
     5ee:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     5f0:	96 95       	lsr	r25
     5f2:	96 95       	lsr	r25
     5f4:	96 95       	lsr	r25
	r = qb - q4 * 10;
     5f6:	29 2f       	mov	r18, r25
     5f8:	22 0f       	add	r18, r18
     5fa:	62 2f       	mov	r22, r18
     5fc:	66 0f       	add	r22, r22
     5fe:	66 0f       	add	r22, r22
     600:	26 0f       	add	r18, r22
     602:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     604:	da 01       	movw	r26, r20
     606:	a8 0f       	add	r26, r24
     608:	b1 1d       	adc	r27, r1
     60a:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     60c:	4e 0f       	add	r20, r30
     60e:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     610:	fa 01       	movw	r30, r20
     612:	40 81       	ld	r20, Z
     614:	40 93 b8 02 	sts	0x02B8, r20
	digit_index[1] = tens_place;
     618:	30 93 b9 02 	sts	0x02B9, r19
	digit_index[2] = hunds_place;
     61c:	20 93 ba 02 	sts	0x02BA, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	8a 30       	cpi	r24, 0x0A	; 10
     624:	08 f4       	brcc	.+2      	; 0x628 <display_dec+0x180>
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     62a:	90 93 bb 02 	sts	0x02BB, r25

	cathode_byte = dec[digit_index[place]];
     62e:	f8 01       	movw	r30, r16
     630:	e8 54       	subi	r30, 0x48	; 72
     632:	fd 4f       	sbci	r31, 0xFD	; 253
     634:	80 81       	ld	r24, Z
     636:	fe 01       	movw	r30, r28
     638:	e8 0f       	add	r30, r24
     63a:	f1 1d       	adc	r31, r1
     63c:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     63e:	90 91 0c 03 	lds	r25, 0x030C
     642:	92 30       	cpi	r25, 0x02	; 2
     644:	11 f4       	brne	.+4      	; 0x64a <display_dec+0x1a2>
     646:	80 62       	ori	r24, 0x20	; 32
     648:	03 c0       	rjmp	.+6      	; 0x650 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     64a:	91 30       	cpi	r25, 0x01	; 1
     64c:	09 f4       	brne	.+2      	; 0x650 <display_dec+0x1a8>
     64e:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     650:	80 95       	com	r24
     652:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     654:	ea ed       	ldi	r30, 0xDA	; 218
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	80 61       	ori	r24, 0x10	; 16
     65c:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     65e:	80 81       	ld	r24, Z
     660:	8f 7e       	andi	r24, 0xEF	; 239
     662:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     664:	2e 96       	adiw	r28, 0x0e	; 14
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	08 95       	ret

0000067a <update_display>:

void update_display(uint16_t number, uint8_t type) {
     67a:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     67c:	66 23       	and	r22, r22
     67e:	69 f4       	brne	.+26     	; 0x69a <update_display+0x20>

		
			
		display_dec(number, place);
     680:	c0 91 bc 02 	lds	r28, 0x02BC
     684:	6c 2f       	mov	r22, r28
     686:	0e 94 54 02 	call	0x4a8	; 0x4a8 <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     68a:	8c 2f       	mov	r24, r28
     68c:	8f 5f       	subi	r24, 0xFF	; 255
     68e:	80 93 bc 02 	sts	0x02BC, r24
     692:	c3 30       	cpi	r28, 0x03	; 3
     694:	11 f4       	brne	.+4      	; 0x69a <update_display+0x20>
		{
			place = 0;
     696:	10 92 bc 02 	sts	0x02BC, r1
		
		
	}
	
	
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     69e:	1f 92       	push	r1
     6a0:	0f 92       	push	r0
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	0f 92       	push	r0
     6a6:	11 24       	eor	r1, r1
     6a8:	8f 93       	push	r24
     6aa:	9f 93       	push	r25
     6ac:	ef 93       	push	r30
     6ae:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     6b0:	80 91 81 03 	lds	r24, 0x0381
     6b4:	81 50       	subi	r24, 0x01	; 1
     6b6:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     6b8:	80 91 82 03 	lds	r24, 0x0382
     6bc:	88 23       	and	r24, r24
     6be:	a1 f4       	brne	.+40     	; 0x6e8 <__vector_10+0x4a>
		count_finished = FALSE;
     6c0:	10 92 7f 03 	sts	0x037F, r1
		no_overflow = TRUE;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     6ca:	80 93 82 03 	sts	0x0382, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     6ce:	e1 e8       	ldi	r30, 0x81	; 129
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	90 91 80 03 	lds	r25, 0x0380
     6d8:	89 2b       	or	r24, r25
     6da:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     6dc:	ef e6       	ldi	r30, 0x6F	; 111
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	81 60       	ori	r24, 0x01	; 1
     6e4:	80 83       	st	Z, r24
     6e6:	11 c0       	rjmp	.+34     	; 0x70a <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     6e8:	e4 e8       	ldi	r30, 0x84	; 132
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	90 93 7e 03 	sts	0x037E, r25
     6f4:	80 93 7d 03 	sts	0x037D, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     6f8:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	80 93 7f 03 	sts	0x037F, r24
		period_counter = 0;
     702:	10 92 82 03 	sts	0x0382, r1
		TCNT1 = 0; //reset timer/counter 1
     706:	11 82       	std	Z+1, r1	; 0x01
     708:	10 82       	st	Z, r1
	}
	
	
	
	
}
     70a:	ff 91       	pop	r31
     70c:	ef 91       	pop	r30
     70e:	9f 91       	pop	r25
     710:	8f 91       	pop	r24
     712:	0f 90       	pop	r0
     714:	0f be       	out	0x3f, r0	; 63
     716:	0f 90       	pop	r0
     718:	1f 90       	pop	r1
     71a:	18 95       	reti

0000071c <__vector_9>:



ISR (TIMER1_OVF_vect) {
     71c:	1f 92       	push	r1
     71e:	0f 92       	push	r0
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	0f 92       	push	r0
     724:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     726:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     72a:	0f 90       	pop	r0
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	0f 90       	pop	r0
     730:	1f 90       	pop	r1
     732:	18 95       	reti

00000734 <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     734:	1f 92       	push	r1
     736:	0f 92       	push	r0
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	0f 92       	push	r0
     73c:	11 24       	eor	r1, r1
     73e:	2f 93       	push	r18
     740:	3f 93       	push	r19
     742:	4f 93       	push	r20
     744:	5f 93       	push	r21
     746:	6f 93       	push	r22
     748:	7f 93       	push	r23
     74a:	8f 93       	push	r24
     74c:	9f 93       	push	r25
     74e:	af 93       	push	r26
     750:	bf 93       	push	r27
     752:	ef 93       	push	r30
     754:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     756:	80 91 d9 03 	lds	r24, 0x03D9
     75a:	86 95       	lsr	r24
     75c:	90 91 da 03 	lds	r25, 0x03DA
     760:	98 17       	cp	r25, r24
     762:	51 f4       	brne	.+20     	; 0x778 <__vector_7+0x44>
				
		
		if ((arp.clock_source == INTERNAL_CLOCK) && (arp.mode)) {
     764:	80 91 97 03 	lds	r24, 0x0397
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	31 f4       	brne	.+12     	; 0x778 <__vector_7+0x44>
     76c:	80 91 98 03 	lds	r24, 0x0398
     770:	88 23       	and	r24, r24
     772:	11 f0       	breq	.+4      	; 0x778 <__vector_7+0x44>
			
			PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     774:	89 98       	cbi	0x11, 1	; 17
			PORTB &= ~ (1<<ARP_SYNC_LED); //turn off arp sync LED
     776:	2f 98       	cbi	0x05, 7	; 5
			
		}
	}			
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     778:	80 91 da 03 	lds	r24, 0x03DA
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	80 93 da 03 	sts	0x03DA, r24
     782:	90 91 d9 03 	lds	r25, 0x03D9
     786:	89 17       	cp	r24, r25
     788:	91 f4       	brne	.+36     	; 0x7ae <__vector_7+0x7a>
		
		system_clock.ppqn_counter = 0;
     78a:	10 92 da 03 	sts	0x03DA, r1
		
		if ((arp.clock_source == INTERNAL_CLOCK) && (arp.mode)) {
     78e:	80 91 97 03 	lds	r24, 0x0397
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	61 f4       	brne	.+24     	; 0x7ae <__vector_7+0x7a>
     796:	80 91 98 03 	lds	r24, 0x0398
     79a:	88 23       	and	r24, r24
     79c:	41 f0       	breq	.+16     	; 0x7ae <__vector_7+0x7a>
			
			//step arp note here based on range and note sequence from assigner	
			
			if (gate_buffer) { //if there are still notes in gate buffer
     79e:	80 91 b4 02 	lds	r24, 0x02B4
     7a2:	88 23       	and	r24, r24
     7a4:	21 f0       	breq	.+8      	; 0x7ae <__vector_7+0x7a>
				step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
     7a6:	0e 94 36 01 	call	0x26c	; 0x26c <step_arp_note>
				PORTF |= (1<<GATE);
     7aa:	89 9a       	sbi	0x11, 1	; 17
				PORTB |= (1<<ARP_SYNC_LED);
     7ac:	2f 9a       	sbi	0x05, 7	; 5
			} 
		}			
	}
	
}
     7ae:	ff 91       	pop	r31
     7b0:	ef 91       	pop	r30
     7b2:	bf 91       	pop	r27
     7b4:	af 91       	pop	r26
     7b6:	9f 91       	pop	r25
     7b8:	8f 91       	pop	r24
     7ba:	7f 91       	pop	r23
     7bc:	6f 91       	pop	r22
     7be:	5f 91       	pop	r21
     7c0:	4f 91       	pop	r20
     7c2:	3f 91       	pop	r19
     7c4:	2f 91       	pop	r18
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	0f 90       	pop	r0
     7cc:	1f 90       	pop	r1
     7ce:	18 95       	reti

000007d0 <__vector_4>:


ISR (TIMER2_COMP_vect) { //multi-trigger timer interrupt
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
	
	PORTF |= (1<<GATE); //turn gate on
     7da:	89 9a       	sbi	0x11, 1	; 17
	TCCR2A = 0; //stop timer
     7dc:	10 92 b0 00 	sts	0x00B0, r1
	TIMSK2 = 0; //turn off output compare interrupt
     7e0:	10 92 70 00 	sts	0x0070, r1
	
	
     7e4:	0f 90       	pop	r0
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	0f 90       	pop	r0
     7ea:	1f 90       	pop	r1
     7ec:	18 95       	reti

000007ee <song_position_event>:
uint8_t switch_timer = 0;


void song_position_event(MidiDevice * device, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
	
	arp.display = 42;
     7ee:	8a e2       	ldi	r24, 0x2A	; 42
     7f0:	80 93 96 03 	sts	0x0396, r24
	
}
     7f4:	08 95       	ret

000007f6 <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     7f6:	6a 3f       	cpi	r22, 0xFA	; 250
     7f8:	09 f4       	brne	.+2      	; 0x7fc <real_time_event+0x6>
     7fa:	5b c0       	rjmp	.+182    	; 0x8b2 <real_time_event+0xbc>
     7fc:	6c 3f       	cpi	r22, 0xFC	; 252
     7fe:	09 f4       	brne	.+2      	; 0x802 <real_time_event+0xc>
     800:	71 c0       	rjmp	.+226    	; 0x8e4 <real_time_event+0xee>
     802:	68 3f       	cpi	r22, 0xF8	; 248
     804:	09 f0       	breq	.+2      	; 0x808 <real_time_event+0x12>
     806:	71 c0       	rjmp	.+226    	; 0x8ea <real_time_event+0xf4>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) { //can be used for analog LFO reset and eventually for software LFO
     808:	80 91 e6 03 	lds	r24, 0x03E6
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	80 93 e6 03 	sts	0x03E6, r24
     812:	90 91 e5 03 	lds	r25, 0x03E5
     816:	89 17       	cp	r24, r25
     818:	11 f4       	brne	.+4      	; 0x81e <real_time_event+0x28>
				
				//++arp.song_position;
				midi_clock.ppqn_counter = 0;
     81a:	10 92 e6 03 	sts	0x03E6, r1
				//arp.display = arp.song_position;
			}						
			++arp.song_position;
     81e:	80 91 92 03 	lds	r24, 0x0392
     822:	90 91 93 03 	lds	r25, 0x0393
     826:	a0 91 94 03 	lds	r26, 0x0394
     82a:	b0 91 95 03 	lds	r27, 0x0395
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	a1 1d       	adc	r26, r1
     832:	b1 1d       	adc	r27, r1
     834:	80 93 92 03 	sts	0x0392, r24
     838:	90 93 93 03 	sts	0x0393, r25
     83c:	a0 93 94 03 	sts	0x0394, r26
     840:	b0 93 95 03 	sts	0x0395, r27
			if (++lfo_clock.ppqn_counter == lfo_clock.divider) {
     844:	80 91 e0 03 	lds	r24, 0x03E0
     848:	8f 5f       	subi	r24, 0xFF	; 255
     84a:	80 93 e0 03 	sts	0x03E0, r24
     84e:	90 91 df 03 	lds	r25, 0x03DF
     852:	89 17       	cp	r24, r25
     854:	21 f4       	brne	.+8      	; 0x85e <real_time_event+0x68>
				PORTB |= (1<< LFO_RESET);
     856:	2c 9a       	sbi	0x05, 4	; 5
				//_delay_us(1); //what is minimum pulse width required for LFO reset? Will need to implement this with some other kind of delay OR OR OR - maybe a RC network to provide minimum pulse width for LFO reset????
				
				//PORTB ^= (1<<ARP_SYNC_LED);
				//register clock event - this will do something  - reset LFO or initiate LFO
				lfo_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     858:	10 92 e0 03 	sts	0x03E0, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     85c:	2c 98       	cbi	0x05, 4	; 5
			}
			
			if (arp.mode) { //if arp is running
     85e:	80 91 98 03 	lds	r24, 0x0398
     862:	88 23       	and	r24, r24
     864:	09 f4       	brne	.+2      	; 0x868 <real_time_event+0x72>
     866:	41 c0       	rjmp	.+130    	; 0x8ea <real_time_event+0xf4>
				
				//arp.ppqn_counter++;
			
				if (arp.ppqn_counter == arp.divider) {
     868:	90 91 8f 03 	lds	r25, 0x038F
     86c:	80 91 90 03 	lds	r24, 0x0390
     870:	98 17       	cp	r25, r24
     872:	51 f4       	brne	.+20     	; 0x888 <real_time_event+0x92>
				
				
					arp.ppqn_counter = 0;
     874:	10 92 8f 03 	sts	0x038F, r1
					if (gate_buffer) { //if there are still notes in gate buffer
     878:	80 91 b4 02 	lds	r24, 0x02B4
     87c:	88 23       	and	r24, r24
     87e:	21 f0       	breq	.+8      	; 0x888 <real_time_event+0x92>
						
						step_arp_note(); //should force inline this function.
     880:	0e 94 36 01 	call	0x26c	; 0x26c <step_arp_note>
						PORTF |= (1<<GATE);  
     884:	89 9a       	sbi	0x11, 1	; 17
						PORTB |= (1<<ARP_SYNC_LED);
     886:	2f 9a       	sbi	0x05, 7	; 5
					}	
				
				}
				
				if (arp.ppqn_counter == arp.divider - (arp.divider >> 1)) { //50% gate width
     888:	40 91 90 03 	lds	r20, 0x0390
     88c:	20 91 8f 03 	lds	r18, 0x038F
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	84 2f       	mov	r24, r20
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	46 95       	lsr	r20
     898:	84 1b       	sub	r24, r20
     89a:	91 09       	sbc	r25, r1
     89c:	28 17       	cp	r18, r24
     89e:	39 07       	cpc	r19, r25
     8a0:	11 f4       	brne	.+4      	; 0x8a6 <real_time_event+0xb0>
								
					PORTF &= ~(1<<GATE);
     8a2:	89 98       	cbi	0x11, 1	; 17
					PORTB &= ~ (1<<ARP_SYNC_LED); //turn off arp sync LED
     8a4:	2f 98       	cbi	0x05, 7	; 5
								
				}
				arp.ppqn_counter++; //post increment means ppqn_counter is never 0, lowest is 1. Does this make sense for counting from 1 to arp.divide? Yes it does.
     8a6:	80 91 8f 03 	lds	r24, 0x038F
     8aa:	8f 5f       	subi	r24, 0xFF	; 255
     8ac:	80 93 8f 03 	sts	0x038F, r24
     8b0:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			lfo_clock.ppqn_counter = 0;
     8b2:	10 92 e0 03 	sts	0x03E0, r1
			midi_clock.ppqn_counter = 0;
     8b6:	10 92 e6 03 	sts	0x03E6, r1
			arp.ppqn_counter = arp.divider - arp.ppqn_shift; //trigger arp step on next MIDI clock tick. This ppqn_shift of -1 here is key to getting note on events that occur simultaneously with divided clock events
     8ba:	80 91 90 03 	lds	r24, 0x0390
     8be:	90 91 91 03 	lds	r25, 0x0391
     8c2:	89 1b       	sub	r24, r25
     8c4:	80 93 8f 03 	sts	0x038F, r24
			arp.clock_source = MIDI_CLOCK;
     8c8:	88 ef       	ldi	r24, 0xF8	; 248
     8ca:	80 93 97 03 	sts	0x0397, r24
			arp.step_position = 0; 
     8ce:	10 92 8b 03 	sts	0x038B, r1
			arp.song_position = 0; //reset master song position counter
     8d2:	10 92 92 03 	sts	0x0392, r1
     8d6:	10 92 93 03 	sts	0x0393, r1
     8da:	10 92 94 03 	sts	0x0394, r1
     8de:	10 92 95 03 	sts	0x0395, r1
			break;
     8e2:	08 95       	ret
			
		case MIDI_STOP:
		
			arp.clock_source = INTERNAL_CLOCK; //revert to internal clock when MIDI STOP message received
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 93 97 03 	sts	0x0397, r24
     8ea:	08 95       	ret

000008ec <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     8ec:	84 2f       	mov	r24, r20
	
	remove_note(note);
     8ee:	0e 94 b4 01 	call	0x368	; 0x368 <remove_note>
	gate_buffer--;
     8f2:	80 91 b4 02 	lds	r24, 0x02B4
     8f6:	81 50       	subi	r24, 0x01	; 1
     8f8:	80 93 b4 02 	sts	0x02B4, r24
	//
	if (arp.mode) {	//if arp on, update arp sequence
     8fc:	90 91 98 03 	lds	r25, 0x0398
     900:	99 23       	and	r25, r25
     902:	71 f0       	breq	.+28     	; 0x920 <note_off_event+0x34>
		//gate_buffer--;
		if (gate_buffer == 0) {
     904:	88 23       	and	r24, r24
     906:	49 f4       	brne	.+18     	; 0x91a <note_off_event+0x2e>
			arp.current_note = arp.previous_note; //handle last note prevservation for release phase
     908:	80 91 8d 03 	lds	r24, 0x038D
     90c:	80 93 8e 03 	sts	0x038E, r24
			//if (arp.clock_source == INTERNAL_CLOCK) arp.step_position = 0; //if arp is synced to MIDI clock, then step position is reset when MIDI START message received
			arp.step_position = 0;
     910:	10 92 8b 03 	sts	0x038B, r1
			arp.direction = UP; //this is to initialize UP/DOWN mode
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 8c 03 	sts	0x038C, r24
		}			
		update_arp_sequence();
     91a:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     91e:	08 95       	ret
	} else {
		
		//update_arp_sequence();
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     920:	88 23       	and	r24, r24
     922:	09 f4       	brne	.+2      	; 0x926 <note_off_event+0x3a>
     924:	89 98       	cbi	0x11, 1	; 17
     926:	08 95       	ret

00000928 <note_on_event>:
	
}



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     928:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     92a:	90 91 03 03 	lds	r25, 0x0303
     92e:	90 ff       	sbrs	r25, 0
     930:	06 c0       	rjmp	.+12     	; 0x93e <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     932:	2c 9a       	sbi	0x05, 4	; 5
     934:	96 e0       	ldi	r25, 0x06	; 6
     936:	9a 95       	dec	r25
     938:	f1 f7       	brne	.-4      	; 0x936 <note_on_event+0xe>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO  reset?
		PORTB &= ~(1<< LFO_RESET);
     93c:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     93e:	80 93 be 02 	sts	0x02BE, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     942:	22 23       	and	r18, r18
     944:	59 f4       	brne	.+22     	; 0x95c <note_on_event+0x34>
		remove_note(note);
     946:	0e 94 b4 01 	call	0x368	; 0x368 <remove_note>
		gate_buffer--;
     94a:	80 91 b4 02 	lds	r24, 0x02B4
     94e:	81 50       	subi	r24, 0x01	; 1
     950:	80 93 b4 02 	sts	0x02B4, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     954:	88 23       	and	r24, r24
     956:	39 f5       	brne	.+78     	; 0x9a6 <note_on_event+0x7e>
     958:	89 98       	cbi	0x11, 1	; 17
     95a:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);  
     95c:	62 2f       	mov	r22, r18
     95e:	0e 94 9c 01 	call	0x338	; 0x338 <new_note>
		
		gate_buffer++;
     962:	80 91 b4 02 	lds	r24, 0x02B4
     966:	8f 5f       	subi	r24, 0xFF	; 255
     968:	80 93 b4 02 	sts	0x02B4, r24
		if (arp.mode) { //if arp is off, handle gate
     96c:	90 91 98 03 	lds	r25, 0x0398
     970:	99 23       	and	r25, r25
     972:	19 f0       	breq	.+6      	; 0x97a <note_on_event+0x52>
			//new_note(note, velocity);
			//gate_buffer++; //increment gate_buffer
			//arp.display = arp.ppqn_counter;
			update_arp_sequence();
     974:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     978:	08 95       	ret
				//ok, if note on comes on an arp divider beat, then it needs to be triggered, but if it isn't on a divider beat, then it shouldn't be triggered, right?	
				//arp.step_position = 0; //reset step position when new note arrives? Have a look here to get into nitty gritty details of arp sync behaviour: http://lauterzeit.com/arp_lfo_seq_sync/
			//}			
		} else {
			
			if ((current_patch.multi_trigger) && (gate_buffer > 1)) {
     97a:	90 91 0b 03 	lds	r25, 0x030B
     97e:	99 23       	and	r25, r25
     980:	89 f0       	breq	.+34     	; 0x9a4 <note_on_event+0x7c>
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	78 f0       	brcs	.+30     	; 0x9a4 <note_on_event+0x7c>
				
				PORTF &= ~(1<<GATE); //turn gate OFF, turn back on in 0.5 ms
     986:	89 98       	cbi	0x11, 1	; 17
				TCCR2A |= (1<<CS22) | (1<<CS21) | (1<<CS20) | (1<<WGM21); // /1024 prescaler, clear timer2 on compare match
     988:	e0 eb       	ldi	r30, 0xB0	; 176
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	8f 60       	ori	r24, 0x0F	; 15
     990:	80 83       	st	Z, r24
				OCR2A = 97; //with /1024 prescaler this should generate an interrupt 0.5 ms from now. Should probably move this to set up
     992:	81 e6       	ldi	r24, 0x61	; 97
     994:	80 93 b3 00 	sts	0x00B3, r24
				TIMSK2 |= (1<<OCIE2A); //enable output compare interrupt
     998:	e0 e7       	ldi	r30, 0x70	; 112
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	82 60       	ori	r24, 0x02	; 2
     9a0:	80 83       	st	Z, r24
     9a2:	08 95       	ret
				
			} else {
				
				PORTF |= (1<<GATE);
     9a4:	89 9a       	sbi	0x11, 1	; 17
     9a6:	08 95       	ret

000009a8 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     9a8:	87 e2       	ldi	r24, 0x27	; 39
     9aa:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     9ae:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     9b2:	88 e9       	ldi	r24, 0x98	; 152
     9b4:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     9b8:	08 95       	ret

000009ba <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     9ba:	1f 92       	push	r1
     9bc:	0f 92       	push	r0
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	0f 92       	push	r0
     9c2:	11 24       	eor	r1, r1
     9c4:	2f 93       	push	r18
     9c6:	3f 93       	push	r19
     9c8:	4f 93       	push	r20
     9ca:	5f 93       	push	r21
     9cc:	6f 93       	push	r22
     9ce:	7f 93       	push	r23
     9d0:	8f 93       	push	r24
     9d2:	9f 93       	push	r25
     9d4:	af 93       	push	r26
     9d6:	bf 93       	push	r27
     9d8:	ef 93       	push	r30
     9da:	ff 93       	push	r31
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	0f 92       	push	r0
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     9e6:	80 91 c6 00 	lds	r24, 0x00C6
     9ea:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     9ec:	8b ee       	ldi	r24, 0xEB	; 235
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	ae 01       	movw	r20, r28
     9f4:	4f 5f       	subi	r20, 0xFF	; 255
     9f6:	5f 4f       	sbci	r21, 0xFF	; 255
     9f8:	0e 94 b2 1a 	call	0x3564	; 0x3564 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     9fc:	0f 90       	pop	r0
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	ff 91       	pop	r31
     a04:	ef 91       	pop	r30
     a06:	bf 91       	pop	r27
     a08:	af 91       	pop	r26
     a0a:	9f 91       	pop	r25
     a0c:	8f 91       	pop	r24
     a0e:	7f 91       	pop	r23
     a10:	6f 91       	pop	r22
     a12:	5f 91       	pop	r21
     a14:	4f 91       	pop	r20
     a16:	3f 91       	pop	r19
     a18:	2f 91       	pop	r18
     a1a:	0f 90       	pop	r0
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	0f 90       	pop	r0
     a20:	1f 90       	pop	r1
     a22:	18 95       	reti

00000a24 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     a24:	c0 e8       	ldi	r28, 0x80	; 128
     a26:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     a28:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     a2a:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     a2c:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     a2e:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     a30:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     a32:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     a34:	0e 94 78 08 	call	0x10f0	; 0x10f0 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     a38:	a9 ed       	ldi	r26, 0xD9	; 217
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	8c 91       	ld	r24, X
     a3e:	80 6c       	ori	r24, 0xC0	; 192
     a40:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     a42:	ea ed       	ldi	r30, 0xDA	; 218
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	80 81       	ld	r24, Z
     a48:	80 6c       	ori	r24, 0xC0	; 192
     a4a:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     a4c:	81 b1       	in	r24, 0x01	; 1
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
     a50:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     a52:	92 b1       	in	r25, 0x02	; 2
     a54:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     a56:	8c 91       	ld	r24, X
     a58:	80 63       	ori	r24, 0x30	; 48
     a5a:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     a5c:	80 81       	ld	r24, Z
     a5e:	8f 7c       	andi	r24, 0xCF	; 207
     a60:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     a62:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     a64:	ec ed       	ldi	r30, 0xDC	; 220
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	80 62       	ori	r24, 0x20	; 32
     a6c:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     a6e:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     a70:	ed ed       	ldi	r30, 0xDD	; 221
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 81       	ld	r24, Z
     a76:	80 62       	ori	r24, 0x20	; 32
     a78:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     a7a:	80 81       	ld	r24, Z
     a7c:	8f 7d       	andi	r24, 0xDF	; 223
     a7e:	80 83       	st	Z, r24
	DATA_BUS = 0;
     a80:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     a82:	c0 93 03 03 	sts	0x0303, r28
	
	//setup ADC
    setup_adc();		
     a86:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     a8a:	0e 94 3b 02 	call	0x476	; 0x476 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     a8e:	cb ee       	ldi	r28, 0xEB	; 235
     a90:	d3 e0       	ldi	r29, 0x03	; 3
     a92:	ce 01       	movw	r24, r28
     a94:	0e 94 81 1a 	call	0x3502	; 0x3502 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     a98:	ce 01       	movw	r24, r28
     a9a:	64 e9       	ldi	r22, 0x94	; 148
     a9c:	74 e0       	ldi	r23, 0x04	; 4
     a9e:	0e 94 49 1a 	call	0x3492	; 0x3492 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     aa2:	ce 01       	movw	r24, r28
     aa4:	66 e7       	ldi	r22, 0x76	; 118
     aa6:	74 e0       	ldi	r23, 0x04	; 4
     aa8:	0e 94 4d 1a 	call	0x349a	; 0x349a <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     aac:	ce 01       	movw	r24, r28
     aae:	6b ef       	ldi	r22, 0xFB	; 251
     ab0:	73 e0       	ldi	r23, 0x03	; 3
     ab2:	0e 94 6d 1a 	call	0x34da	; 0x34da <midi_register_realtime_callback>
	midi_register_songposition_callback(&midi_device, song_position_event);
     ab6:	ce 01       	movw	r24, r28
     ab8:	67 ef       	ldi	r22, 0xF7	; 247
     aba:	73 e0       	ldi	r23, 0x03	; 3
     abc:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <midi_register_songposition_callback>
	//setup MIDI USART
	setup_midi_usart();
     ac0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     ac4:	0e 94 9d 08 	call	0x113a	; 0x113a <update_spi>
	
	
	current_patch.number = 1;
     ac8:	c1 e0       	ldi	r28, 0x01	; 1
     aca:	c0 93 07 03 	sts	0x0307, r28
	current_patch.multi_trigger = 1; //turn multi-trigger on
     ace:	c0 93 0b 03 	sts	0x030B, r28
		
	sei(); //enable global interrupts
     ad2:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     ad4:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	0e 94 16 0b 	call	0x162c	; 0x162c <load_patch>
	
	setup_system_clock();
     ade:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     ae2:	88 e1       	ldi	r24, 0x18	; 24
     ae4:	80 93 d9 03 	sts	0x03D9, r24
	midi_clock.divider = 6;//this is for MIDI beat clock which is /6 MIDI ppqn clock or 16th notes
     ae8:	86 e0       	ldi	r24, 0x06	; 6
     aea:	80 93 e5 03 	sts	0x03E5, r24
	arp.step_position = 0; //initialize step position
     aee:	10 92 8b 03 	sts	0x038B, r1
	arp.clock_source = INTERNAL_CLOCK;
     af2:	c0 93 97 03 	sts	0x0397, r28
	arp.mode = OFF;
     af6:	10 92 98 03 	sts	0x0398, r1
	arp.ppqn_counter = 1;
     afa:	c0 93 8f 03 	sts	0x038F, r28
	arp.ppqn_shift = 1;
     afe:	c0 93 91 03 	sts	0x0391, r28

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     b02:	0b ee       	ldi	r16, 0xEB	; 235
     b04:	13 e0       	ldi	r17, 0x03	; 3
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     b06:	0f 2e       	mov	r0, r31
     b08:	f5 e8       	ldi	r31, 0x85	; 133
     b0a:	ef 2e       	mov	r14, r31
     b0c:	f3 e0       	ldi	r31, 0x03	; 3
     b0e:	ff 2e       	mov	r15, r31
     b10:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     b12:	0f 2e       	mov	r0, r31
     b14:	fc e0       	ldi	r31, 0x0C	; 12
     b16:	cf 2e       	mov	r12, r31
     b18:	f3 e0       	ldi	r31, 0x03	; 3
     b1a:	df 2e       	mov	r13, r31
     b1c:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     b1e:	bb 24       	eor	r11, r11
     b20:	68 94       	set
     b22:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     b24:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     b26:	c8 01       	movw	r24, r16
     b28:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     b2c:	80 91 fd 01 	lds	r24, 0x01FD
     b30:	90 91 fe 01 	lds	r25, 0x01FE
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	0e 94 3d 03 	call	0x67a	; 0x67a <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     b3a:	0e 94 cc 05 	call	0xb98	; 0xb98 <scan_pots>
		update_control_voltages();
     b3e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     b42:	80 91 bd 02 	lds	r24, 0x02BD
     b46:	98 2f       	mov	r25, r24
     b48:	9f 5f       	subi	r25, 0xFF	; 255
     b4a:	90 93 bd 02 	sts	0x02BD, r25
     b4e:	85 30       	cpi	r24, 0x05	; 5
     b50:	51 f7       	brne	.-44     	; 0xb26 <main+0x102>
		{
			switch_timer = 0;
     b52:	10 92 bd 02 	sts	0x02BD, r1
			switch_press = 0; //reset global switch press flag
     b56:	10 92 c5 02 	sts	0x02C5, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     b5a:	f7 01       	movw	r30, r14
     b5c:	c0 81       	ld	r28, Z
     b5e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <read_switch_port>
     b62:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     b64:	f6 01       	movw	r30, r12
     b66:	90 81       	ld	r25, Z
     b68:	91 30       	cpi	r25, 0x01	; 1
     b6a:	11 f4       	brne	.+4      	; 0xb70 <main+0x14c>
     b6c:	cd 2f       	mov	r28, r29
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <main+0x14e>
     b70:	c0 e0       	ldi	r28, 0x00	; 0
     b72:	c8 2b       	or	r28, r24
     b74:	f7 01       	movw	r30, r14
     b76:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     b78:	0e 94 9d 08 	call	0x113a	; 0x113a <update_spi>
			if (switch_press) { 
     b7c:	80 91 c5 02 	lds	r24, 0x02C5
     b80:	88 23       	and	r24, r24
     b82:	39 f0       	breq	.+14     	; 0xb92 <main+0x16e>
				update_patch();
     b84:	0e 94 2c 10 	call	0x2058	; 0x2058 <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     b88:	f6 01       	movw	r30, r12
     b8a:	80 81       	ld	r24, Z
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <main+0x16e>
     b90:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     b92:	0e 94 b9 10 	call	0x2172	; 0x2172 <update_patch_programmer>
     b96:	c7 cf       	rjmp	.-114    	; 0xb26 <main+0x102>

00000b98 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     b98:	bf 92       	push	r11
     b9a:	cf 92       	push	r12
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	c0 e0       	ldi	r28, 0x00	; 0
     bac:	d1 e0       	ldi	r29, 0x01	; 1
     bae:	06 ec       	ldi	r16, 0xC6	; 198
     bb0:	12 e0       	ldi	r17, 0x02	; 2
     bb2:	0f 2e       	mov	r0, r31
     bb4:	fc e3       	ldi	r31, 0x3C	; 60
     bb6:	cf 2e       	mov	r12, r31
     bb8:	dd 24       	eor	r13, r13
     bba:	f0 2d       	mov	r31, r0
     bbc:	cc 0e       	add	r12, r28
     bbe:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     bc0:	0f 2e       	mov	r0, r31
     bc2:	fc e0       	ldi	r31, 0x0C	; 12
     bc4:	ef 2e       	mov	r14, r31
     bc6:	f3 e0       	ldi	r31, 0x03	; 3
     bc8:	ff 2e       	mov	r15, r31
     bca:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     bcc:	bb 24       	eor	r11, r11
     bce:	68 94       	set
     bd0:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     bd2:	88 81       	ld	r24, Y
     bd4:	99 81       	ldd	r25, Y+1	; 0x01
     bd6:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     bda:	90 93 c0 02 	sts	0x02C0, r25
     bde:	80 93 bf 02 	sts	0x02BF, r24
		adc_change = adc_value - pot_id[i]->value;
     be2:	e8 81       	ld	r30, Y
     be4:	f9 81       	ldd	r31, Y+1	; 0x01
     be6:	40 81       	ld	r20, Z
     be8:	21 81       	ldd	r18, Z+1	; 0x01
     bea:	52 2f       	mov	r21, r18
     bec:	53 70       	andi	r21, 0x03	; 3
     bee:	84 1b       	sub	r24, r20
     bf0:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     bf2:	95 95       	asr	r25
     bf4:	87 95       	ror	r24
     bf6:	95 95       	asr	r25
     bf8:	87 95       	ror	r24
     bfa:	84 0f       	add	r24, r20
     bfc:	95 1f       	adc	r25, r21
     bfe:	80 83       	st	Z, r24
     c00:	89 2f       	mov	r24, r25
     c02:	83 70       	andi	r24, 0x03	; 3
     c04:	2c 7f       	andi	r18, 0xFC	; 252
     c06:	28 2b       	or	r18, r24
     c08:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     c0a:	e9 91       	ld	r30, Y+
     c0c:	f9 91       	ld	r31, Y+
     c0e:	92 81       	ldd	r25, Z+2	; 0x02
     c10:	20 81       	ld	r18, Z
     c12:	81 81       	ldd	r24, Z+1	; 0x01
     c14:	38 2f       	mov	r19, r24
     c16:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     c18:	d7 01       	movw	r26, r14
     c1a:	8c 91       	ld	r24, X
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	19 f0       	breq	.+6      	; 0xc26 <scan_pots+0x8e>
     c20:	83 81       	ldd	r24, Z+3	; 0x03
     c22:	88 23       	and	r24, r24
     c24:	24 f0       	brlt	.+8      	; 0xc2e <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     c26:	f8 01       	movw	r30, r16
     c28:	31 83       	std	Z+1, r19	; 0x01
     c2a:	20 83       	st	Z, r18
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     c2e:	49 2f       	mov	r20, r25
     c30:	43 50       	subi	r20, 0x03	; 3
     c32:	c9 01       	movw	r24, r18
     c34:	95 95       	asr	r25
     c36:	87 95       	ror	r24
     c38:	95 95       	asr	r25
     c3a:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     c3c:	94 2f       	mov	r25, r20
     c3e:	98 1b       	sub	r25, r24
     c40:	9a 3f       	cpi	r25, 0xFA	; 250
     c42:	48 f4       	brcc	.+18     	; 0xc56 <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     c44:	d8 01       	movw	r26, r16
     c46:	11 96       	adiw	r26, 0x01	; 1
     c48:	3c 93       	st	X, r19
     c4a:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     c4c:	83 81       	ldd	r24, Z+3	; 0x03
     c4e:	8f 77       	andi	r24, 0x7F	; 127
     c50:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     c52:	f7 01       	movw	r30, r14
     c54:	b0 82       	st	Z, r11
     c56:	0e 5f       	subi	r16, 0xFE	; 254
     c58:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     c5a:	cc 15       	cp	r28, r12
     c5c:	dd 05       	cpc	r29, r13
     c5e:	09 f0       	breq	.+2      	; 0xc62 <scan_pots+0xca>
     c60:	b8 cf       	rjmp	.-144    	; 0xbd2 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     c62:	8c e7       	ldi	r24, 0x7C	; 124
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     c6a:	90 93 c0 02 	sts	0x02C0, r25
     c6e:	80 93 bf 02 	sts	0x02BF, r24
	adc_change = adc_value - volume_pot.value;
     c72:	20 91 7c 01 	lds	r18, 0x017C
     c76:	40 91 7d 01 	lds	r20, 0x017D
     c7a:	34 2f       	mov	r19, r20
     c7c:	33 70       	andi	r19, 0x03	; 3
     c7e:	82 1b       	sub	r24, r18
     c80:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     c82:	95 95       	asr	r25
     c84:	87 95       	ror	r24
     c86:	95 95       	asr	r25
     c88:	87 95       	ror	r24
     c8a:	28 0f       	add	r18, r24
     c8c:	39 1f       	adc	r19, r25
     c8e:	20 93 7c 01 	sts	0x017C, r18
     c92:	83 2f       	mov	r24, r19
     c94:	83 70       	andi	r24, 0x03	; 3
     c96:	4c 7f       	andi	r20, 0xFC	; 252
     c98:	48 2b       	or	r20, r24
     c9a:	40 93 7d 01 	sts	0x017D, r20
	
}
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	cf 90       	pop	r12
     cae:	bf 90       	pop	r11
     cb0:	08 95       	ret

00000cb2 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     cb6:	60 91 c6 02 	lds	r22, 0x02C6
     cba:	70 91 c7 02 	lds	r23, 0x02C7
     cbe:	62 95       	swap	r22
     cc0:	72 95       	swap	r23
     cc2:	70 7f       	andi	r23, 0xF0	; 240
     cc4:	76 27       	eor	r23, r22
     cc6:	60 7f       	andi	r22, 0xF0	; 240
     cc8:	76 27       	eor	r23, r22
     cca:	84 ee       	ldi	r24, 0xE4	; 228
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     cd2:	60 91 c8 02 	lds	r22, 0x02C8
     cd6:	70 91 c9 02 	lds	r23, 0x02C9
     cda:	62 95       	swap	r22
     cdc:	72 95       	swap	r23
     cde:	70 7f       	andi	r23, 0xF0	; 240
     ce0:	76 27       	eor	r23, r22
     ce2:	60 7f       	andi	r22, 0xF0	; 240
     ce4:	76 27       	eor	r23, r22
     ce6:	83 ee       	ldi	r24, 0xE3	; 227
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     cee:	60 91 ca 02 	lds	r22, 0x02CA
     cf2:	70 91 cb 02 	lds	r23, 0x02CB
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	66 0f       	add	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	66 0f       	add	r22, r22
     d00:	77 1f       	adc	r23, r23
     d02:	82 ee       	ldi	r24, 0xE2	; 226
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     d0a:	60 91 cc 02 	lds	r22, 0x02CC
     d0e:	70 91 cd 02 	lds	r23, 0x02CD
     d12:	62 95       	swap	r22
     d14:	72 95       	swap	r23
     d16:	70 7f       	andi	r23, 0xF0	; 240
     d18:	76 27       	eor	r23, r22
     d1a:	60 7f       	andi	r22, 0xF0	; 240
     d1c:	76 27       	eor	r23, r22
     d1e:	87 eb       	ldi	r24, 0xB7	; 183
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     d26:	60 91 ce 02 	lds	r22, 0x02CE
     d2a:	70 91 cf 02 	lds	r23, 0x02CF
     d2e:	66 0f       	add	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	66 0f       	add	r22, r22
     d34:	77 1f       	adc	r23, r23
     d36:	66 0f       	add	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	81 ee       	ldi	r24, 0xE1	; 225
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     d42:	60 91 d0 02 	lds	r22, 0x02D0
     d46:	70 91 d1 02 	lds	r23, 0x02D1
     d4a:	62 95       	swap	r22
     d4c:	72 95       	swap	r23
     d4e:	70 7f       	andi	r23, 0xF0	; 240
     d50:	76 27       	eor	r23, r22
     d52:	60 7f       	andi	r22, 0xF0	; 240
     d54:	76 27       	eor	r23, r22
     d56:	80 ee       	ldi	r24, 0xE0	; 224
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     d5e:	60 91 d2 02 	lds	r22, 0x02D2
     d62:	70 91 d3 02 	lds	r23, 0x02D3
     d66:	62 95       	swap	r22
     d68:	72 95       	swap	r23
     d6a:	70 7f       	andi	r23, 0xF0	; 240
     d6c:	76 27       	eor	r23, r22
     d6e:	60 7f       	andi	r22, 0xF0	; 240
     d70:	76 27       	eor	r23, r22
     d72:	8f ed       	ldi	r24, 0xDF	; 223
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     d7a:	60 91 d4 02 	lds	r22, 0x02D4
     d7e:	70 91 d5 02 	lds	r23, 0x02D5
     d82:	62 95       	swap	r22
     d84:	72 95       	swap	r23
     d86:	70 7f       	andi	r23, 0xF0	; 240
     d88:	76 27       	eor	r23, r22
     d8a:	60 7f       	andi	r22, 0xF0	; 240
     d8c:	76 27       	eor	r23, r22
     d8e:	8e ed       	ldi	r24, 0xDE	; 222
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     d96:	80 91 d8 02 	lds	r24, 0x02D8
     d9a:	90 91 d9 02 	lds	r25, 0x02D9
     d9e:	c0 e0       	ldi	r28, 0x00	; 0
     da0:	d2 e0       	ldi	r29, 0x02	; 2
     da2:	c8 1b       	sub	r28, r24
     da4:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     da6:	60 91 78 03 	lds	r22, 0x0378
     daa:	70 91 79 03 	lds	r23, 0x0379
     dae:	60 50       	subi	r22, 0x00	; 0
     db0:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     db2:	80 91 d6 02 	lds	r24, 0x02D6
     db6:	90 91 d7 02 	lds	r25, 0x02D7
     dba:	68 1b       	sub	r22, r24
     dbc:	79 0b       	sbc	r23, r25
     dbe:	6c 0f       	add	r22, r28
     dc0:	7d 1f       	adc	r23, r29
     dc2:	8d ed       	ldi	r24, 0xDD	; 221
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     dca:	60 91 7a 03 	lds	r22, 0x037A
     dce:	70 91 7b 03 	lds	r23, 0x037B
     dd2:	6c 0f       	add	r22, r28
     dd4:	7d 1f       	adc	r23, r29
     dd6:	8c ed       	ldi	r24, 0xDC	; 220
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     dde:	60 91 da 02 	lds	r22, 0x02DA
     de2:	70 91 db 02 	lds	r23, 0x02DB
     de6:	62 95       	swap	r22
     de8:	72 95       	swap	r23
     dea:	70 7f       	andi	r23, 0xF0	; 240
     dec:	76 27       	eor	r23, r22
     dee:	60 7f       	andi	r22, 0xF0	; 240
     df0:	76 27       	eor	r23, r22
     df2:	8b ed       	ldi	r24, 0xDB	; 219
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     dfa:	60 91 de 02 	lds	r22, 0x02DE
     dfe:	70 91 df 02 	lds	r23, 0x02DF
     e02:	62 95       	swap	r22
     e04:	72 95       	swap	r23
     e06:	70 7f       	andi	r23, 0xF0	; 240
     e08:	76 27       	eor	r23, r22
     e0a:	60 7f       	andi	r22, 0xF0	; 240
     e0c:	76 27       	eor	r23, r22
     e0e:	8a ed       	ldi	r24, 0xDA	; 218
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     e16:	60 91 e0 02 	lds	r22, 0x02E0
     e1a:	70 91 e1 02 	lds	r23, 0x02E1
     e1e:	62 95       	swap	r22
     e20:	72 95       	swap	r23
     e22:	70 7f       	andi	r23, 0xF0	; 240
     e24:	76 27       	eor	r23, r22
     e26:	60 7f       	andi	r22, 0xF0	; 240
     e28:	76 27       	eor	r23, r22
     e2a:	89 ed       	ldi	r24, 0xD9	; 217
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     e32:	60 91 7c 01 	lds	r22, 0x017C
     e36:	80 91 7d 01 	lds	r24, 0x017D
     e3a:	78 2f       	mov	r23, r24
     e3c:	73 70       	andi	r23, 0x03	; 3
     e3e:	62 95       	swap	r22
     e40:	72 95       	swap	r23
     e42:	70 7f       	andi	r23, 0xF0	; 240
     e44:	76 27       	eor	r23, r22
     e46:	60 7f       	andi	r22, 0xF0	; 240
     e48:	76 27       	eor	r23, r22
     e4a:	88 ed       	ldi	r24, 0xD8	; 216
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     e52:	60 91 e2 02 	lds	r22, 0x02E2
     e56:	70 91 e3 02 	lds	r23, 0x02E3
     e5a:	62 95       	swap	r22
     e5c:	72 95       	swap	r23
     e5e:	70 7f       	andi	r23, 0xF0	; 240
     e60:	76 27       	eor	r23, r22
     e62:	60 7f       	andi	r22, 0xF0	; 240
     e64:	76 27       	eor	r23, r22
     e66:	87 ed       	ldi	r24, 0xD7	; 215
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     e6e:	60 91 e4 02 	lds	r22, 0x02E4
     e72:	70 91 e5 02 	lds	r23, 0x02E5
     e76:	62 95       	swap	r22
     e78:	72 95       	swap	r23
     e7a:	70 7f       	andi	r23, 0xF0	; 240
     e7c:	76 27       	eor	r23, r22
     e7e:	60 7f       	andi	r22, 0xF0	; 240
     e80:	76 27       	eor	r23, r22
     e82:	86 ed       	ldi	r24, 0xD6	; 214
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     e8a:	60 91 e6 02 	lds	r22, 0x02E6
     e8e:	70 91 e7 02 	lds	r23, 0x02E7
     e92:	62 95       	swap	r22
     e94:	72 95       	swap	r23
     e96:	70 7f       	andi	r23, 0xF0	; 240
     e98:	76 27       	eor	r23, r22
     e9a:	60 7f       	andi	r22, 0xF0	; 240
     e9c:	76 27       	eor	r23, r22
     e9e:	85 ed       	ldi	r24, 0xD5	; 213
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     ea6:	0e 94 92 01 	call	0x324	; 0x324 <get_current_note>
     eaa:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     eac:	88 30       	cpi	r24, 0x08	; 8
     eae:	08 f4       	brcc	.+2      	; 0xeb2 <update_control_voltages+0x200>
     eb0:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = current_patch.number + 100*(arp.sequence[arp.step_position].note); //100*note;
	//value_to_display = arp.sequence[arp.step_position].note;
	//uint8_t arp_note = arp.sequence[arp.step_position].note;
	//if (arp_note == EMPTY) arp_note = 0;
	value_to_display = current_patch.number + 100*arp.display;
     eb2:	60 91 07 03 	lds	r22, 0x0307
     eb6:	40 91 96 03 	lds	r20, 0x0396
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	24 e6       	ldi	r18, 0x64	; 100
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	42 9f       	mul	r20, r18
     ec2:	c0 01       	movw	r24, r0
     ec4:	43 9f       	mul	r20, r19
     ec6:	90 0d       	add	r25, r0
     ec8:	52 9f       	mul	r21, r18
     eca:	90 0d       	add	r25, r0
     ecc:	11 24       	eor	r1, r1
     ece:	86 0f       	add	r24, r22
     ed0:	91 1d       	adc	r25, r1
     ed2:	90 93 fe 01 	sts	0x01FE, r25
     ed6:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     eda:	8c 2f       	mov	r24, r28
     edc:	88 50       	subi	r24, 0x08	; 8
     ede:	64 e1       	ldi	r22, 0x14	; 20
     ee0:	73 e0       	ldi	r23, 0x03	; 3
     ee2:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     ee6:	bc 01       	movw	r22, r24
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	20 91 ea 02 	lds	r18, 0x02EA
     ef0:	30 91 eb 02 	lds	r19, 0x02EB
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__mulsi3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	07 2e       	mov	r0, r23
     f02:	7a e0       	ldi	r23, 0x0A	; 10
     f04:	b6 95       	lsr	r27
     f06:	a7 95       	ror	r26
     f08:	97 95       	ror	r25
     f0a:	87 95       	ror	r24
     f0c:	7a 95       	dec	r23
     f0e:	d1 f7       	brne	.-12     	; 0xf04 <update_control_voltages+0x252>
     f10:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     f12:	60 91 e8 02 	lds	r22, 0x02E8
     f16:	70 91 e9 02 	lds	r23, 0x02E9
     f1a:	62 95       	swap	r22
     f1c:	72 95       	swap	r23
     f1e:	70 7f       	andi	r23, 0xF0	; 240
     f20:	76 27       	eor	r23, r22
     f22:	60 7f       	andi	r22, 0xF0	; 240
     f24:	76 27       	eor	r23, r22
     f26:	86 0f       	add	r24, r22
     f28:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     f2a:	bc 01       	movw	r22, r24
     f2c:	80 e4       	ldi	r24, 0x40	; 64
     f2e:	60 30       	cpi	r22, 0x00	; 0
     f30:	78 07       	cpc	r23, r24
     f32:	10 f0       	brcs	.+4      	; 0xf38 <update_control_voltages+0x286>
     f34:	6f ef       	ldi	r22, 0xFF	; 255
     f36:	7f e3       	ldi	r23, 0x3F	; 63
     f38:	84 ed       	ldi	r24, 0xD4	; 212
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     f40:	60 91 ec 02 	lds	r22, 0x02EC
     f44:	70 91 ed 02 	lds	r23, 0x02ED
     f48:	62 95       	swap	r22
     f4a:	72 95       	swap	r23
     f4c:	70 7f       	andi	r23, 0xF0	; 240
     f4e:	76 27       	eor	r23, r22
     f50:	60 7f       	andi	r22, 0xF0	; 240
     f52:	76 27       	eor	r23, r22
     f54:	82 ed       	ldi	r24, 0xD2	; 210
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     f5c:	60 91 ee 02 	lds	r22, 0x02EE
     f60:	70 91 ef 02 	lds	r23, 0x02EF
     f64:	62 95       	swap	r22
     f66:	72 95       	swap	r23
     f68:	70 7f       	andi	r23, 0xF0	; 240
     f6a:	76 27       	eor	r23, r22
     f6c:	60 7f       	andi	r22, 0xF0	; 240
     f6e:	76 27       	eor	r23, r22
     f70:	81 ed       	ldi	r24, 0xD1	; 209
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     f78:	60 91 f0 02 	lds	r22, 0x02F0
     f7c:	70 91 f1 02 	lds	r23, 0x02F1
     f80:	62 95       	swap	r22
     f82:	72 95       	swap	r23
     f84:	70 7f       	andi	r23, 0xF0	; 240
     f86:	76 27       	eor	r23, r22
     f88:	60 7f       	andi	r22, 0xF0	; 240
     f8a:	76 27       	eor	r23, r22
     f8c:	80 ed       	ldi	r24, 0xD0	; 208
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     f94:	60 91 f2 02 	lds	r22, 0x02F2
     f98:	70 91 f3 02 	lds	r23, 0x02F3
     f9c:	62 95       	swap	r22
     f9e:	72 95       	swap	r23
     fa0:	70 7f       	andi	r23, 0xF0	; 240
     fa2:	76 27       	eor	r23, r22
     fa4:	60 7f       	andi	r22, 0xF0	; 240
     fa6:	76 27       	eor	r23, r22
     fa8:	8f ec       	ldi	r24, 0xCF	; 207
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     fb0:	60 91 f4 02 	lds	r22, 0x02F4
     fb4:	70 91 f5 02 	lds	r23, 0x02F5
     fb8:	62 95       	swap	r22
     fba:	72 95       	swap	r23
     fbc:	70 7f       	andi	r23, 0xF0	; 240
     fbe:	76 27       	eor	r23, r22
     fc0:	60 7f       	andi	r22, 0xF0	; 240
     fc2:	76 27       	eor	r23, r22
     fc4:	8e ec       	ldi	r24, 0xCE	; 206
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     fcc:	60 91 f6 02 	lds	r22, 0x02F6
     fd0:	70 91 f7 02 	lds	r23, 0x02F7
     fd4:	62 95       	swap	r22
     fd6:	72 95       	swap	r23
     fd8:	70 7f       	andi	r23, 0xF0	; 240
     fda:	76 27       	eor	r23, r22
     fdc:	60 7f       	andi	r22, 0xF0	; 240
     fde:	76 27       	eor	r23, r22
     fe0:	8d ec       	ldi	r24, 0xCD	; 205
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     fe8:	60 91 f8 02 	lds	r22, 0x02F8
     fec:	70 91 f9 02 	lds	r23, 0x02F9
     ff0:	62 95       	swap	r22
     ff2:	72 95       	swap	r23
     ff4:	70 7f       	andi	r23, 0xF0	; 240
     ff6:	76 27       	eor	r23, r22
     ff8:	60 7f       	andi	r22, 0xF0	; 240
     ffa:	76 27       	eor	r23, r22
     ffc:	8c ec       	ldi	r24, 0xCC	; 204
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
    1004:	60 91 fc 02 	lds	r22, 0x02FC
    1008:	70 91 fd 02 	lds	r23, 0x02FD
    100c:	62 95       	swap	r22
    100e:	72 95       	swap	r23
    1010:	70 7f       	andi	r23, 0xF0	; 240
    1012:	76 27       	eor	r23, r22
    1014:	60 7f       	andi	r22, 0xF0	; 240
    1016:	76 27       	eor	r23, r22
    1018:	8a ec       	ldi	r24, 0xCA	; 202
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
    1020:	60 91 fa 02 	lds	r22, 0x02FA
    1024:	70 91 fb 02 	lds	r23, 0x02FB
    1028:	62 95       	swap	r22
    102a:	72 95       	swap	r23
    102c:	70 7f       	andi	r23, 0xF0	; 240
    102e:	76 27       	eor	r23, r22
    1030:	60 7f       	andi	r22, 0xF0	; 240
    1032:	76 27       	eor	r23, r22
    1034:	8b ec       	ldi	r24, 0xCB	; 203
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
    103c:	60 91 00 03 	lds	r22, 0x0300
    1040:	70 91 01 03 	lds	r23, 0x0301
    1044:	62 95       	swap	r22
    1046:	72 95       	swap	r23
    1048:	70 7f       	andi	r23, 0xF0	; 240
    104a:	76 27       	eor	r23, r22
    104c:	60 7f       	andi	r22, 0xF0	; 240
    104e:	76 27       	eor	r23, r22
    1050:	88 ec       	ldi	r24, 0xC8	; 200
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
    1058:	60 91 fe 02 	lds	r22, 0x02FE
    105c:	70 91 ff 02 	lds	r23, 0x02FF
    1060:	62 95       	swap	r22
    1062:	72 95       	swap	r23
    1064:	70 7f       	andi	r23, 0xF0	; 240
    1066:	76 27       	eor	r23, r22
    1068:	60 7f       	andi	r22, 0xF0	; 240
    106a:	76 27       	eor	r23, r22
    106c:	89 ec       	ldi	r24, 0xC9	; 201
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
    1074:	8c 2f       	mov	r24, r28
    1076:	6f e0       	ldi	r22, 0x0F	; 15
    1078:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
    107c:	66 e5       	ldi	r22, 0x56	; 86
    107e:	73 e0       	ldi	r23, 0x03	; 3
    1080:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <interpolate_pitch_cv>
    1084:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
    1086:	86 ee       	ldi	r24, 0xE6	; 230
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
    108e:	8c 2f       	mov	r24, r28
    1090:	60 ef       	ldi	r22, 0xF0	; 240
    1092:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
    1096:	64 e3       	ldi	r22, 0x34	; 52
    1098:	73 e0       	ldi	r23, 0x03	; 3
    109a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <interpolate_pitch_cv>
    109e:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
    10a0:	85 ee       	ldi	r24, 0xE5	; 229
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
    10a8:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
    10aa:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
    10ac:	20 91 88 01 	lds	r18, 0x0188
    10b0:	80 91 89 01 	lds	r24, 0x0189
    10b4:	38 2f       	mov	r19, r24
    10b6:	33 70       	andi	r19, 0x03	; 3
    10b8:	83 ef       	ldi	r24, 0xF3	; 243
    10ba:	94 e0       	ldi	r25, 0x04	; 4
    10bc:	82 1b       	sub	r24, r18
    10be:	93 0b       	sbc	r25, r19
    10c0:	90 93 dc 03 	sts	0x03DC, r25
    10c4:	80 93 db 03 	sts	0x03DB, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
    10c8:	20 91 dd 03 	lds	r18, 0x03DD
    10cc:	30 91 de 03 	lds	r19, 0x03DE
    10d0:	82 17       	cp	r24, r18
    10d2:	93 07       	cpc	r25, r19
    10d4:	11 f0       	breq	.+4      	; 0x10da <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
    10d6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
    10da:	80 91 db 03 	lds	r24, 0x03DB
    10de:	90 91 dc 03 	lds	r25, 0x03DC
    10e2:	90 93 de 03 	sts	0x03DE, r25
    10e6:	80 93 dd 03 	sts	0x03DD, r24
	
}			
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
    10f0:	84 b1       	in	r24, 0x04	; 4
    10f2:	87 62       	ori	r24, 0x27	; 39
    10f4:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
    10f6:	ec ed       	ldi	r30, 0xDC	; 220
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8c 65       	ori	r24, 0x5C	; 92
    10fe:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
    1100:	85 b1       	in	r24, 0x05	; 5
    1102:	89 7d       	andi	r24, 0xD9	; 217
    1104:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
    1106:	ed ed       	ldi	r30, 0xDD	; 221
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	83 7f       	andi	r24, 0xF3	; 243
    110e:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
    1110:	80 e5       	ldi	r24, 0x50	; 80
    1112:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
    1114:	80 81       	ld	r24, Z
    1116:	87 7f       	andi	r24, 0xF7	; 247
    1118:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
    111a:	80 81       	ld	r24, Z
    111c:	87 7f       	andi	r24, 0xF7	; 247
    111e:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
    1120:	80 81       	ld	r24, Z
    1122:	88 60       	ori	r24, 0x08	; 8
    1124:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
    1126:	80 81       	ld	r24, Z
    1128:	8f 7e       	andi	r24, 0xEF	; 239
    112a:	80 83       	st	Z, r24
	
}
    112c:	08 95       	ret

0000112e <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
    112e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    1130:	0d b4       	in	r0, 0x2d	; 45
    1132:	07 fe       	sbrs	r0, 7
    1134:	fd cf       	rjmp	.-6      	; 0x1130 <spi_shift_byte+0x2>
	return SPDR;
    1136:	8e b5       	in	r24, 0x2e	; 46
	
}
    1138:	08 95       	ret

0000113a <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
    113a:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
    113c:	80 91 06 03 	lds	r24, 0x0306
    1140:	0e 94 97 08 	call	0x112e	; 0x112e <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
    1144:	90 91 c5 02 	lds	r25, 0x02C5
    1148:	98 2b       	or	r25, r24
    114a:	90 93 c5 02 	sts	0x02C5, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
    114e:	20 91 c3 02 	lds	r18, 0x02C3
    1152:	98 2f       	mov	r25, r24
    1154:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
    1156:	89 2f       	mov	r24, r25
    1158:	82 27       	eor	r24, r18
    115a:	80 93 c3 02 	sts	0x02C3, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
    115e:	89 23       	and	r24, r25
    1160:	80 93 c4 02 	sts	0x02C4, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
    1164:	90 91 83 03 	lds	r25, 0x0383
    1168:	89 27       	eor	r24, r25
    116a:	80 93 83 03 	sts	0x0383, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
    116e:	80 91 05 03 	lds	r24, 0x0305
    1172:	0e 94 97 08 	call	0x112e	; 0x112e <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
    1176:	90 91 c5 02 	lds	r25, 0x02C5
    117a:	98 2b       	or	r25, r24
    117c:	90 93 c5 02 	sts	0x02C5, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
    1180:	20 91 c1 02 	lds	r18, 0x02C1
    1184:	98 2f       	mov	r25, r24
    1186:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
    1188:	89 2f       	mov	r24, r25
    118a:	82 27       	eor	r24, r18
    118c:	80 93 c1 02 	sts	0x02C1, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
    1190:	89 23       	and	r24, r25
    1192:	80 93 c2 02 	sts	0x02C2, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
    1196:	90 91 84 03 	lds	r25, 0x0384
    119a:	89 27       	eor	r24, r25
    119c:	80 93 84 03 	sts	0x0384, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
    11a0:	80 91 04 03 	lds	r24, 0x0304
    11a4:	0e 94 97 08 	call	0x112e	; 0x112e <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
    11a8:	80 91 03 03 	lds	r24, 0x0303
    11ac:	0e 94 97 08 	call	0x112e	; 0x112e <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    11b0:	80 91 0c 03 	lds	r24, 0x030C
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	11 f4       	brne	.+4      	; 0x11bc <update_spi+0x82>
    11b8:	20 e8       	ldi	r18, 0x80	; 128
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <update_spi+0x84>
    11bc:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
    11be:	80 91 85 03 	lds	r24, 0x0385
    11c2:	88 1f       	adc	r24, r24
    11c4:	88 27       	eor	r24, r24
    11c6:	88 1f       	adc	r24, r24
    11c8:	82 95       	swap	r24
    11ca:	88 0f       	add	r24, r24
    11cc:	88 0f       	add	r24, r24
    11ce:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    11d0:	90 91 02 03 	lds	r25, 0x0302
    11d4:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
    11d6:	82 2b       	or	r24, r18
    11d8:	0e 94 97 08 	call	0x112e	; 0x112e <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
    11dc:	ed ed       	ldi	r30, 0xDD	; 221
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	87 7f       	andi	r24, 0xF7	; 247
    11e4:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
    11e6:	80 81       	ld	r24, Z
    11e8:	88 60       	ori	r24, 0x08	; 8
    11ea:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
    11ec:	2d 98       	cbi	0x05, 5	; 5
			
			

	
    11ee:	08 95       	ret

000011f0 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
    11f0:	a0 e0       	ldi	r26, 0x00	; 0
    11f2:	b1 e0       	ldi	r27, 0x01	; 1
    11f4:	9d 01       	movw	r18, r26
    11f6:	24 5c       	subi	r18, 0xC4	; 196
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
    11fa:	ed 91       	ld	r30, X+
    11fc:	fc 91       	ld	r31, X
    11fe:	11 97       	sbiw	r26, 0x01	; 1
    1200:	80 81       	ld	r24, Z
    1202:	41 81       	ldd	r20, Z+1	; 0x01
    1204:	94 2f       	mov	r25, r20
    1206:	93 70       	andi	r25, 0x03	; 3
    1208:	95 95       	asr	r25
    120a:	87 95       	ror	r24
    120c:	95 95       	asr	r25
    120e:	87 95       	ror	r24
    1210:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
    1212:	ed 91       	ld	r30, X+
    1214:	fd 91       	ld	r31, X+
    1216:	83 81       	ldd	r24, Z+3	; 0x03
    1218:	80 68       	ori	r24, 0x80	; 128
    121a:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
    121c:	a2 17       	cp	r26, r18
    121e:	b3 07       	cpc	r27, r19
    1220:	61 f7       	brne	.-40     	; 0x11fa <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
    1222:	08 95       	ret

00001224 <unlock_pots>:

void unlock_pots(void) {
    1224:	e0 e0       	ldi	r30, 0x00	; 0
    1226:	f1 e0       	ldi	r31, 0x01	; 1
    1228:	cf 01       	movw	r24, r30
    122a:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
    122c:	a1 91       	ld	r26, Z+
    122e:	b1 91       	ld	r27, Z+
    1230:	13 96       	adiw	r26, 0x03	; 3
    1232:	2c 91       	ld	r18, X
    1234:	13 97       	sbiw	r26, 0x03	; 3
    1236:	2f 77       	andi	r18, 0x7F	; 127
    1238:	13 96       	adiw	r26, 0x03	; 3
    123a:	2c 93       	st	X, r18
    123c:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
    123e:	e8 17       	cp	r30, r24
    1240:	f9 07       	cpc	r31, r25
    1242:	a1 f7       	brne	.-24     	; 0x122c <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
    1244:	08 95       	ret

00001246 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	ab 97       	sbiw	r28, 0x2b	; 43
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
    125e:	e2 ee       	ldi	r30, 0xE2	; 226
    1260:	f2 e0       	ldi	r31, 0x02	; 2
    1262:	20 91 e2 02 	lds	r18, 0x02E2
    1266:	82 2f       	mov	r24, r18
    1268:	82 95       	swap	r24
    126a:	80 7f       	andi	r24, 0xF0	; 240
    126c:	22 95       	swap	r18
    126e:	2f 70       	andi	r18, 0x0F	; 15
    1270:	90 91 e3 02 	lds	r25, 0x02E3
    1274:	93 70       	andi	r25, 0x03	; 3
    1276:	92 95       	swap	r25
    1278:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix; //YOU'RE MISSING VCO2_MIX HERE YOU NITWIT
    127a:	df 01       	movw	r26, r30
    127c:	5a 97       	sbiw	r26, 0x1a	; 26
    127e:	3c 91       	ld	r19, X
    1280:	53 2f       	mov	r21, r19
    1282:	55 0f       	add	r21, r21
    1284:	55 0f       	add	r21, r21
    1286:	4a 81       	ldd	r20, Y+2	; 0x02
    1288:	43 70       	andi	r20, 0x03	; 3
    128a:	45 2b       	or	r20, r21
    128c:	4a 83       	std	Y+2, r20	; 0x02
    128e:	63 2f       	mov	r22, r19
    1290:	62 95       	swap	r22
    1292:	66 95       	lsr	r22
    1294:	66 95       	lsr	r22
    1296:	63 70       	andi	r22, 0x03	; 3
    1298:	11 96       	adiw	r26, 0x01	; 1
    129a:	4c 91       	ld	r20, X
    129c:	43 70       	andi	r20, 0x03	; 3
    129e:	44 0f       	add	r20, r20
    12a0:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    12a2:	df 01       	movw	r26, r30
    12a4:	58 97       	sbiw	r26, 0x18	; 24
    12a6:	3c 91       	ld	r19, X
    12a8:	53 2f       	mov	r21, r19
    12aa:	52 95       	swap	r21
    12ac:	50 7f       	andi	r21, 0xF0	; 240
    12ae:	46 2b       	or	r20, r22
    12b0:	45 2b       	or	r20, r21
    12b2:	4b 83       	std	Y+3, r20	; 0x03
    12b4:	63 2f       	mov	r22, r19
    12b6:	62 95       	swap	r22
    12b8:	6f 70       	andi	r22, 0x0F	; 15
    12ba:	11 96       	adiw	r26, 0x01	; 1
    12bc:	4c 91       	ld	r20, X
    12be:	43 70       	andi	r20, 0x03	; 3
    12c0:	42 95       	swap	r20
    12c2:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    12c4:	df 01       	movw	r26, r30
    12c6:	56 97       	sbiw	r26, 0x16	; 22
    12c8:	3c 91       	ld	r19, X
    12ca:	53 2f       	mov	r21, r19
    12cc:	52 95       	swap	r21
    12ce:	55 0f       	add	r21, r21
    12d0:	55 0f       	add	r21, r21
    12d2:	50 7c       	andi	r21, 0xC0	; 192
    12d4:	46 2b       	or	r20, r22
    12d6:	45 2b       	or	r20, r21
    12d8:	4c 83       	std	Y+4, r20	; 0x04
    12da:	11 96       	adiw	r26, 0x01	; 1
    12dc:	4c 91       	ld	r20, X
    12de:	42 95       	swap	r20
    12e0:	44 0f       	add	r20, r20
    12e2:	44 0f       	add	r20, r20
    12e4:	40 7c       	andi	r20, 0xC0	; 192
    12e6:	36 95       	lsr	r19
    12e8:	36 95       	lsr	r19
    12ea:	34 2b       	or	r19, r20
    12ec:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    12ee:	df 01       	movw	r26, r30
    12f0:	54 97       	sbiw	r26, 0x14	; 20
    12f2:	3c 91       	ld	r19, X
    12f4:	3e 83       	std	Y+6, r19	; 0x06
    12f6:	11 96       	adiw	r26, 0x01	; 1
    12f8:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    12fa:	df 01       	movw	r26, r30
    12fc:	52 97       	sbiw	r26, 0x12	; 18
    12fe:	3c 91       	ld	r19, X
    1300:	53 2f       	mov	r21, r19
    1302:	55 0f       	add	r21, r21
    1304:	55 0f       	add	r21, r21
    1306:	43 70       	andi	r20, 0x03	; 3
    1308:	45 2b       	or	r20, r21
    130a:	4f 83       	std	Y+7, r20	; 0x07
    130c:	63 2f       	mov	r22, r19
    130e:	62 95       	swap	r22
    1310:	66 95       	lsr	r22
    1312:	66 95       	lsr	r22
    1314:	63 70       	andi	r22, 0x03	; 3
    1316:	11 96       	adiw	r26, 0x01	; 1
    1318:	4c 91       	ld	r20, X
    131a:	43 70       	andi	r20, 0x03	; 3
    131c:	44 0f       	add	r20, r20
    131e:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    1320:	df 01       	movw	r26, r30
    1322:	50 97       	sbiw	r26, 0x10	; 16
    1324:	3c 91       	ld	r19, X
    1326:	53 2f       	mov	r21, r19
    1328:	52 95       	swap	r21
    132a:	50 7f       	andi	r21, 0xF0	; 240
    132c:	46 2b       	or	r20, r22
    132e:	45 2b       	or	r20, r21
    1330:	48 87       	std	Y+8, r20	; 0x08
    1332:	63 2f       	mov	r22, r19
    1334:	62 95       	swap	r22
    1336:	6f 70       	andi	r22, 0x0F	; 15
    1338:	11 96       	adiw	r26, 0x01	; 1
    133a:	4c 91       	ld	r20, X
    133c:	43 70       	andi	r20, 0x03	; 3
    133e:	42 95       	swap	r20
    1340:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    1342:	df 01       	movw	r26, r30
    1344:	1e 97       	sbiw	r26, 0x0e	; 14
    1346:	3c 91       	ld	r19, X
    1348:	53 2f       	mov	r21, r19
    134a:	52 95       	swap	r21
    134c:	55 0f       	add	r21, r21
    134e:	55 0f       	add	r21, r21
    1350:	50 7c       	andi	r21, 0xC0	; 192
    1352:	46 2b       	or	r20, r22
    1354:	45 2b       	or	r20, r21
    1356:	49 87       	std	Y+9, r20	; 0x09
    1358:	11 96       	adiw	r26, 0x01	; 1
    135a:	4c 91       	ld	r20, X
    135c:	42 95       	swap	r20
    135e:	44 0f       	add	r20, r20
    1360:	44 0f       	add	r20, r20
    1362:	40 7c       	andi	r20, 0xC0	; 192
    1364:	36 95       	lsr	r19
    1366:	36 95       	lsr	r19
    1368:	34 2b       	or	r19, r20
    136a:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    136c:	df 01       	movw	r26, r30
    136e:	1c 97       	sbiw	r26, 0x0c	; 12
    1370:	3c 91       	ld	r19, X
    1372:	3b 87       	std	Y+11, r19	; 0x0b
    1374:	11 96       	adiw	r26, 0x01	; 1
    1376:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1378:	df 01       	movw	r26, r30
    137a:	1a 97       	sbiw	r26, 0x0a	; 10
    137c:	3c 91       	ld	r19, X
    137e:	53 2f       	mov	r21, r19
    1380:	55 0f       	add	r21, r21
    1382:	55 0f       	add	r21, r21
    1384:	43 70       	andi	r20, 0x03	; 3
    1386:	45 2b       	or	r20, r21
    1388:	4c 87       	std	Y+12, r20	; 0x0c
    138a:	63 2f       	mov	r22, r19
    138c:	62 95       	swap	r22
    138e:	66 95       	lsr	r22
    1390:	66 95       	lsr	r22
    1392:	63 70       	andi	r22, 0x03	; 3
    1394:	11 96       	adiw	r26, 0x01	; 1
    1396:	4c 91       	ld	r20, X
    1398:	43 70       	andi	r20, 0x03	; 3
    139a:	44 0f       	add	r20, r20
    139c:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    139e:	df 01       	movw	r26, r30
    13a0:	18 97       	sbiw	r26, 0x08	; 8
    13a2:	3c 91       	ld	r19, X
    13a4:	53 2f       	mov	r21, r19
    13a6:	52 95       	swap	r21
    13a8:	50 7f       	andi	r21, 0xF0	; 240
    13aa:	46 2b       	or	r20, r22
    13ac:	45 2b       	or	r20, r21
    13ae:	4d 87       	std	Y+13, r20	; 0x0d
    13b0:	63 2f       	mov	r22, r19
    13b2:	62 95       	swap	r22
    13b4:	6f 70       	andi	r22, 0x0F	; 15
    13b6:	11 96       	adiw	r26, 0x01	; 1
    13b8:	4c 91       	ld	r20, X
    13ba:	43 70       	andi	r20, 0x03	; 3
    13bc:	42 95       	swap	r20
    13be:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    13c0:	df 01       	movw	r26, r30
    13c2:	16 97       	sbiw	r26, 0x06	; 6
    13c4:	3c 91       	ld	r19, X
    13c6:	53 2f       	mov	r21, r19
    13c8:	52 95       	swap	r21
    13ca:	55 0f       	add	r21, r21
    13cc:	55 0f       	add	r21, r21
    13ce:	50 7c       	andi	r21, 0xC0	; 192
    13d0:	46 2b       	or	r20, r22
    13d2:	45 2b       	or	r20, r21
    13d4:	4e 87       	std	Y+14, r20	; 0x0e
    13d6:	11 96       	adiw	r26, 0x01	; 1
    13d8:	4c 91       	ld	r20, X
    13da:	42 95       	swap	r20
    13dc:	44 0f       	add	r20, r20
    13de:	44 0f       	add	r20, r20
    13e0:	40 7c       	andi	r20, 0xC0	; 192
    13e2:	36 95       	lsr	r19
    13e4:	36 95       	lsr	r19
    13e6:	34 2b       	or	r19, r20
    13e8:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    13ea:	df 01       	movw	r26, r30
    13ec:	14 97       	sbiw	r26, 0x04	; 4
    13ee:	3c 91       	ld	r19, X
    13f0:	38 8b       	std	Y+16, r19	; 0x10
    13f2:	11 96       	adiw	r26, 0x01	; 1
    13f4:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    13f6:	df 01       	movw	r26, r30
    13f8:	12 97       	sbiw	r26, 0x02	; 2
    13fa:	3c 91       	ld	r19, X
    13fc:	53 2f       	mov	r21, r19
    13fe:	55 0f       	add	r21, r21
    1400:	55 0f       	add	r21, r21
    1402:	43 70       	andi	r20, 0x03	; 3
    1404:	45 2b       	or	r20, r21
    1406:	49 8b       	std	Y+17, r20	; 0x11
    1408:	32 95       	swap	r19
    140a:	36 95       	lsr	r19
    140c:	36 95       	lsr	r19
    140e:	33 70       	andi	r19, 0x03	; 3
    1410:	11 96       	adiw	r26, 0x01	; 1
    1412:	4c 91       	ld	r20, X
    1414:	43 70       	andi	r20, 0x03	; 3
    1416:	44 0f       	add	r20, r20
    1418:	44 0f       	add	r20, r20
    141a:	83 2b       	or	r24, r19
    141c:	84 2b       	or	r24, r20
    141e:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    1420:	80 91 e4 02 	lds	r24, 0x02E4
    1424:	38 2f       	mov	r19, r24
    1426:	32 95       	swap	r19
    1428:	33 0f       	add	r19, r19
    142a:	33 0f       	add	r19, r19
    142c:	30 7c       	andi	r19, 0xC0	; 192
    142e:	92 2b       	or	r25, r18
    1430:	93 2b       	or	r25, r19
    1432:	9b 8b       	std	Y+19, r25	; 0x13
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	92 95       	swap	r25
    1438:	99 0f       	add	r25, r25
    143a:	99 0f       	add	r25, r25
    143c:	90 7c       	andi	r25, 0xC0	; 192
    143e:	86 95       	lsr	r24
    1440:	86 95       	lsr	r24
    1442:	89 2b       	or	r24, r25
    1444:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    1446:	80 91 e6 02 	lds	r24, 0x02E6
    144a:	8d 8b       	std	Y+21, r24	; 0x15
    144c:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    144e:	80 91 e8 02 	lds	r24, 0x02E8
    1452:	28 2f       	mov	r18, r24
    1454:	22 0f       	add	r18, r18
    1456:	22 0f       	add	r18, r18
    1458:	93 70       	andi	r25, 0x03	; 3
    145a:	92 2b       	or	r25, r18
    145c:	9e 8b       	std	Y+22, r25	; 0x16
    145e:	38 2f       	mov	r19, r24
    1460:	32 95       	swap	r19
    1462:	36 95       	lsr	r19
    1464:	36 95       	lsr	r19
    1466:	33 70       	andi	r19, 0x03	; 3
    1468:	97 81       	ldd	r25, Z+7	; 0x07
    146a:	93 70       	andi	r25, 0x03	; 3
    146c:	99 0f       	add	r25, r25
    146e:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    1470:	80 91 ea 02 	lds	r24, 0x02EA
    1474:	28 2f       	mov	r18, r24
    1476:	22 95       	swap	r18
    1478:	20 7f       	andi	r18, 0xF0	; 240
    147a:	93 2b       	or	r25, r19
    147c:	92 2b       	or	r25, r18
    147e:	9f 8b       	std	Y+23, r25	; 0x17
    1480:	38 2f       	mov	r19, r24
    1482:	32 95       	swap	r19
    1484:	3f 70       	andi	r19, 0x0F	; 15
    1486:	91 85       	ldd	r25, Z+9	; 0x09
    1488:	93 70       	andi	r25, 0x03	; 3
    148a:	92 95       	swap	r25
    148c:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    148e:	80 91 ec 02 	lds	r24, 0x02EC
    1492:	28 2f       	mov	r18, r24
    1494:	22 95       	swap	r18
    1496:	22 0f       	add	r18, r18
    1498:	22 0f       	add	r18, r18
    149a:	20 7c       	andi	r18, 0xC0	; 192
    149c:	93 2b       	or	r25, r19
    149e:	92 2b       	or	r25, r18
    14a0:	98 8f       	std	Y+24, r25	; 0x18
    14a2:	93 85       	ldd	r25, Z+11	; 0x0b
    14a4:	92 95       	swap	r25
    14a6:	99 0f       	add	r25, r25
    14a8:	99 0f       	add	r25, r25
    14aa:	90 7c       	andi	r25, 0xC0	; 192
    14ac:	86 95       	lsr	r24
    14ae:	86 95       	lsr	r24
    14b0:	89 2b       	or	r24, r25
    14b2:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    14b4:	80 91 ee 02 	lds	r24, 0x02EE
    14b8:	8a 8f       	std	Y+26, r24	; 0x1a
    14ba:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    14bc:	80 91 f0 02 	lds	r24, 0x02F0
    14c0:	28 2f       	mov	r18, r24
    14c2:	22 0f       	add	r18, r18
    14c4:	22 0f       	add	r18, r18
    14c6:	93 70       	andi	r25, 0x03	; 3
    14c8:	92 2b       	or	r25, r18
    14ca:	9b 8f       	std	Y+27, r25	; 0x1b
    14cc:	38 2f       	mov	r19, r24
    14ce:	32 95       	swap	r19
    14d0:	36 95       	lsr	r19
    14d2:	36 95       	lsr	r19
    14d4:	33 70       	andi	r19, 0x03	; 3
    14d6:	97 85       	ldd	r25, Z+15	; 0x0f
    14d8:	93 70       	andi	r25, 0x03	; 3
    14da:	99 0f       	add	r25, r25
    14dc:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    14de:	80 91 f2 02 	lds	r24, 0x02F2
    14e2:	28 2f       	mov	r18, r24
    14e4:	22 95       	swap	r18
    14e6:	20 7f       	andi	r18, 0xF0	; 240
    14e8:	93 2b       	or	r25, r19
    14ea:	92 2b       	or	r25, r18
    14ec:	9c 8f       	std	Y+28, r25	; 0x1c
    14ee:	38 2f       	mov	r19, r24
    14f0:	32 95       	swap	r19
    14f2:	3f 70       	andi	r19, 0x0F	; 15
    14f4:	91 89       	ldd	r25, Z+17	; 0x11
    14f6:	93 70       	andi	r25, 0x03	; 3
    14f8:	92 95       	swap	r25
    14fa:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    14fc:	80 91 f4 02 	lds	r24, 0x02F4
    1500:	28 2f       	mov	r18, r24
    1502:	22 95       	swap	r18
    1504:	22 0f       	add	r18, r18
    1506:	22 0f       	add	r18, r18
    1508:	20 7c       	andi	r18, 0xC0	; 192
    150a:	93 2b       	or	r25, r19
    150c:	92 2b       	or	r25, r18
    150e:	9d 8f       	std	Y+29, r25	; 0x1d
    1510:	93 89       	ldd	r25, Z+19	; 0x13
    1512:	92 95       	swap	r25
    1514:	99 0f       	add	r25, r25
    1516:	99 0f       	add	r25, r25
    1518:	90 7c       	andi	r25, 0xC0	; 192
    151a:	86 95       	lsr	r24
    151c:	86 95       	lsr	r24
    151e:	89 2b       	or	r24, r25
    1520:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    1522:	80 91 f6 02 	lds	r24, 0x02F6
    1526:	8f 8f       	std	Y+31, r24	; 0x1f
    1528:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    152a:	80 91 f8 02 	lds	r24, 0x02F8
    152e:	28 2f       	mov	r18, r24
    1530:	22 0f       	add	r18, r18
    1532:	22 0f       	add	r18, r18
    1534:	93 70       	andi	r25, 0x03	; 3
    1536:	92 2b       	or	r25, r18
    1538:	98 a3       	lds	r25, 0x58
    153a:	38 2f       	mov	r19, r24
    153c:	32 95       	swap	r19
    153e:	36 95       	lsr	r19
    1540:	36 95       	lsr	r19
    1542:	33 70       	andi	r19, 0x03	; 3
    1544:	97 89       	ldd	r25, Z+23	; 0x17
    1546:	93 70       	andi	r25, 0x03	; 3
    1548:	99 0f       	add	r25, r25
    154a:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    154c:	80 91 fa 02 	lds	r24, 0x02FA
    1550:	28 2f       	mov	r18, r24
    1552:	22 95       	swap	r18
    1554:	20 7f       	andi	r18, 0xF0	; 240
    1556:	93 2b       	or	r25, r19
    1558:	92 2b       	or	r25, r18
    155a:	99 a3       	lds	r25, 0x59
    155c:	38 2f       	mov	r19, r24
    155e:	32 95       	swap	r19
    1560:	3f 70       	andi	r19, 0x0F	; 15
    1562:	91 8d       	ldd	r25, Z+25	; 0x19
    1564:	93 70       	andi	r25, 0x03	; 3
    1566:	92 95       	swap	r25
    1568:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    156a:	80 91 fc 02 	lds	r24, 0x02FC
    156e:	28 2f       	mov	r18, r24
    1570:	22 95       	swap	r18
    1572:	22 0f       	add	r18, r18
    1574:	22 0f       	add	r18, r18
    1576:	20 7c       	andi	r18, 0xC0	; 192
    1578:	93 2b       	or	r25, r19
    157a:	92 2b       	or	r25, r18
    157c:	9a a3       	lds	r25, 0x5a
    157e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1580:	92 95       	swap	r25
    1582:	99 0f       	add	r25, r25
    1584:	99 0f       	add	r25, r25
    1586:	90 7c       	andi	r25, 0xC0	; 192
    1588:	86 95       	lsr	r24
    158a:	86 95       	lsr	r24
    158c:	89 2b       	or	r24, r25
    158e:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    1590:	80 91 fe 02 	lds	r24, 0x02FE
    1594:	8c a3       	lds	r24, 0x5c
    1596:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    1598:	80 91 00 03 	lds	r24, 0x0300
    159c:	28 2f       	mov	r18, r24
    159e:	22 0f       	add	r18, r18
    15a0:	22 0f       	add	r18, r18
    15a2:	93 70       	andi	r25, 0x03	; 3
    15a4:	92 2b       	or	r25, r18
    15a6:	9d a3       	lds	r25, 0x5d
    15a8:	82 95       	swap	r24
    15aa:	86 95       	lsr	r24
    15ac:	86 95       	lsr	r24
    15ae:	83 70       	andi	r24, 0x03	; 3
    15b0:	2e a1       	lds	r18, 0x4e
    15b2:	20 7f       	andi	r18, 0xF0	; 240
    15b4:	97 8d       	ldd	r25, Z+31	; 0x1f
    15b6:	93 70       	andi	r25, 0x03	; 3
    15b8:	99 0f       	add	r25, r25
    15ba:	99 0f       	add	r25, r25
    15bc:	82 2b       	or	r24, r18
    15be:	89 2b       	or	r24, r25
    15c0:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    15c2:	80 91 02 03 	lds	r24, 0x0302
    15c6:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    15c8:	80 91 03 03 	lds	r24, 0x0303
    15cc:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    15ce:	80 91 04 03 	lds	r24, 0x0304
    15d2:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    15d4:	80 91 05 03 	lds	r24, 0x0305
    15d8:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    15da:	80 91 06 03 	lds	r24, 0x0306
    15de:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    15e0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    15e4:	80 91 85 03 	lds	r24, 0x0385
    15e8:	8f 77       	andi	r24, 0x7F	; 127
    15ea:	80 93 85 03 	sts	0x0385, r24
	current_patch.mode = MEMORY;
    15ee:	10 92 0c 03 	sts	0x030C, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    15f2:	21 2f       	mov	r18, r17
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	8b e2       	ldi	r24, 0x2B	; 43
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	28 9f       	mul	r18, r24
    15fc:	b0 01       	movw	r22, r0
    15fe:	29 9f       	mul	r18, r25
    1600:	70 0d       	add	r23, r0
    1602:	38 9f       	mul	r19, r24
    1604:	70 0d       	add	r23, r0
    1606:	11 24       	eor	r1, r1
    1608:	60 50       	subi	r22, 0x00	; 0
    160a:	70 40       	sbci	r23, 0x00	; 0
    160c:	ce 01       	movw	r24, r28
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	4b e2       	ldi	r20, 0x2B	; 43
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__eeupd_block_m6450a>
}	
    1618:	ab 96       	adiw	r28, 0x2b	; 43
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	08 95       	ret

0000162c <load_patch>:
	
void load_patch(uint8_t patch_number) {
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	c3 54       	subi	r28, 0x43	; 67
    1638:	d0 40       	sbci	r29, 0x00	; 0
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	2b e2       	ldi	r18, 0x2B	; 43
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	82 9f       	mul	r24, r18
    164c:	b0 01       	movw	r22, r0
    164e:	83 9f       	mul	r24, r19
    1650:	70 0d       	add	r23, r0
    1652:	92 9f       	mul	r25, r18
    1654:	70 0d       	add	r23, r0
    1656:	11 24       	eor	r1, r1
    1658:	60 50       	subi	r22, 0x00	; 0
    165a:	70 40       	sbci	r23, 0x00	; 0
    165c:	ce 01       	movw	r24, r28
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	4b e2       	ldi	r20, 0x2B	; 43
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    1668:	e2 ee       	ldi	r30, 0xE2	; 226
    166a:	f2 e0       	ldi	r31, 0x02	; 2
    166c:	8a 89       	ldd	r24, Y+18	; 0x12
    166e:	28 2f       	mov	r18, r24
    1670:	22 95       	swap	r18
    1672:	2f 70       	andi	r18, 0x0F	; 15
    1674:	9b 89       	ldd	r25, Y+19	; 0x13
    1676:	39 2f       	mov	r19, r25
    1678:	32 95       	swap	r19
    167a:	30 7f       	andi	r19, 0xF0	; 240
    167c:	32 2b       	or	r19, r18
    167e:	29 2f       	mov	r18, r25
    1680:	22 95       	swap	r18
    1682:	2f 70       	andi	r18, 0x0F	; 15
    1684:	23 70       	andi	r18, 0x03	; 3
    1686:	30 93 e2 02 	sts	0x02E2, r19
    168a:	20 93 e3 02 	sts	0x02E3, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix; //YOU'RE MISSING VCO2_MIX HERE YOU NITWIT
    168e:	df 01       	movw	r26, r30
    1690:	5a 97       	sbiw	r26, 0x1a	; 26
    1692:	4a 81       	ldd	r20, Y+2	; 0x02
    1694:	46 95       	lsr	r20
    1696:	46 95       	lsr	r20
    1698:	2b 81       	ldd	r18, Y+3	; 0x03
    169a:	32 2f       	mov	r19, r18
    169c:	32 95       	swap	r19
    169e:	33 0f       	add	r19, r19
    16a0:	33 0f       	add	r19, r19
    16a2:	30 7c       	andi	r19, 0xC0	; 192
    16a4:	43 2b       	or	r20, r19
    16a6:	32 2f       	mov	r19, r18
    16a8:	36 95       	lsr	r19
    16aa:	36 95       	lsr	r19
    16ac:	33 70       	andi	r19, 0x03	; 3
    16ae:	4c 93       	st	X, r20
    16b0:	11 96       	adiw	r26, 0x01	; 1
    16b2:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    16b4:	df 01       	movw	r26, r30
    16b6:	58 97       	sbiw	r26, 0x18	; 24
    16b8:	32 2f       	mov	r19, r18
    16ba:	32 95       	swap	r19
    16bc:	3f 70       	andi	r19, 0x0F	; 15
    16be:	2c 81       	ldd	r18, Y+4	; 0x04
    16c0:	42 2f       	mov	r20, r18
    16c2:	42 95       	swap	r20
    16c4:	40 7f       	andi	r20, 0xF0	; 240
    16c6:	43 2b       	or	r20, r19
    16c8:	32 2f       	mov	r19, r18
    16ca:	32 95       	swap	r19
    16cc:	3f 70       	andi	r19, 0x0F	; 15
    16ce:	33 70       	andi	r19, 0x03	; 3
    16d0:	4c 93       	st	X, r20
    16d2:	11 96       	adiw	r26, 0x01	; 1
    16d4:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    16d6:	df 01       	movw	r26, r30
    16d8:	56 97       	sbiw	r26, 0x16	; 22
    16da:	22 95       	swap	r18
    16dc:	26 95       	lsr	r18
    16de:	26 95       	lsr	r18
    16e0:	23 70       	andi	r18, 0x03	; 3
    16e2:	3d 81       	ldd	r19, Y+5	; 0x05
    16e4:	43 2f       	mov	r20, r19
    16e6:	44 0f       	add	r20, r20
    16e8:	44 0f       	add	r20, r20
    16ea:	24 2b       	or	r18, r20
    16ec:	32 95       	swap	r19
    16ee:	36 95       	lsr	r19
    16f0:	36 95       	lsr	r19
    16f2:	33 70       	andi	r19, 0x03	; 3
    16f4:	2c 93       	st	X, r18
    16f6:	11 96       	adiw	r26, 0x01	; 1
    16f8:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    16fa:	df 01       	movw	r26, r30
    16fc:	54 97       	sbiw	r26, 0x14	; 20
    16fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1700:	2f 81       	ldd	r18, Y+7	; 0x07
    1702:	32 2f       	mov	r19, r18
    1704:	33 70       	andi	r19, 0x03	; 3
    1706:	4c 93       	st	X, r20
    1708:	11 96       	adiw	r26, 0x01	; 1
    170a:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    170c:	df 01       	movw	r26, r30
    170e:	52 97       	sbiw	r26, 0x12	; 18
    1710:	32 2f       	mov	r19, r18
    1712:	36 95       	lsr	r19
    1714:	36 95       	lsr	r19
    1716:	28 85       	ldd	r18, Y+8	; 0x08
    1718:	42 2f       	mov	r20, r18
    171a:	42 95       	swap	r20
    171c:	44 0f       	add	r20, r20
    171e:	44 0f       	add	r20, r20
    1720:	40 7c       	andi	r20, 0xC0	; 192
    1722:	43 2b       	or	r20, r19
    1724:	32 2f       	mov	r19, r18
    1726:	36 95       	lsr	r19
    1728:	36 95       	lsr	r19
    172a:	33 70       	andi	r19, 0x03	; 3
    172c:	4c 93       	st	X, r20
    172e:	11 96       	adiw	r26, 0x01	; 1
    1730:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1732:	df 01       	movw	r26, r30
    1734:	50 97       	sbiw	r26, 0x10	; 16
    1736:	32 2f       	mov	r19, r18
    1738:	32 95       	swap	r19
    173a:	3f 70       	andi	r19, 0x0F	; 15
    173c:	29 85       	ldd	r18, Y+9	; 0x09
    173e:	42 2f       	mov	r20, r18
    1740:	42 95       	swap	r20
    1742:	40 7f       	andi	r20, 0xF0	; 240
    1744:	43 2b       	or	r20, r19
    1746:	32 2f       	mov	r19, r18
    1748:	32 95       	swap	r19
    174a:	3f 70       	andi	r19, 0x0F	; 15
    174c:	33 70       	andi	r19, 0x03	; 3
    174e:	4c 93       	st	X, r20
    1750:	11 96       	adiw	r26, 0x01	; 1
    1752:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    1754:	df 01       	movw	r26, r30
    1756:	1e 97       	sbiw	r26, 0x0e	; 14
    1758:	22 95       	swap	r18
    175a:	26 95       	lsr	r18
    175c:	26 95       	lsr	r18
    175e:	23 70       	andi	r18, 0x03	; 3
    1760:	3a 85       	ldd	r19, Y+10	; 0x0a
    1762:	43 2f       	mov	r20, r19
    1764:	44 0f       	add	r20, r20
    1766:	44 0f       	add	r20, r20
    1768:	24 2b       	or	r18, r20
    176a:	32 95       	swap	r19
    176c:	36 95       	lsr	r19
    176e:	36 95       	lsr	r19
    1770:	33 70       	andi	r19, 0x03	; 3
    1772:	2c 93       	st	X, r18
    1774:	11 96       	adiw	r26, 0x01	; 1
    1776:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    1778:	df 01       	movw	r26, r30
    177a:	1c 97       	sbiw	r26, 0x0c	; 12
    177c:	4b 85       	ldd	r20, Y+11	; 0x0b
    177e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1780:	32 2f       	mov	r19, r18
    1782:	33 70       	andi	r19, 0x03	; 3
    1784:	4c 93       	st	X, r20
    1786:	11 96       	adiw	r26, 0x01	; 1
    1788:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    178a:	df 01       	movw	r26, r30
    178c:	1a 97       	sbiw	r26, 0x0a	; 10
    178e:	32 2f       	mov	r19, r18
    1790:	36 95       	lsr	r19
    1792:	36 95       	lsr	r19
    1794:	2d 85       	ldd	r18, Y+13	; 0x0d
    1796:	42 2f       	mov	r20, r18
    1798:	42 95       	swap	r20
    179a:	44 0f       	add	r20, r20
    179c:	44 0f       	add	r20, r20
    179e:	40 7c       	andi	r20, 0xC0	; 192
    17a0:	43 2b       	or	r20, r19
    17a2:	32 2f       	mov	r19, r18
    17a4:	36 95       	lsr	r19
    17a6:	36 95       	lsr	r19
    17a8:	33 70       	andi	r19, 0x03	; 3
    17aa:	4c 93       	st	X, r20
    17ac:	11 96       	adiw	r26, 0x01	; 1
    17ae:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    17b0:	df 01       	movw	r26, r30
    17b2:	18 97       	sbiw	r26, 0x08	; 8
    17b4:	32 2f       	mov	r19, r18
    17b6:	32 95       	swap	r19
    17b8:	3f 70       	andi	r19, 0x0F	; 15
    17ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    17bc:	42 2f       	mov	r20, r18
    17be:	42 95       	swap	r20
    17c0:	40 7f       	andi	r20, 0xF0	; 240
    17c2:	43 2b       	or	r20, r19
    17c4:	32 2f       	mov	r19, r18
    17c6:	32 95       	swap	r19
    17c8:	3f 70       	andi	r19, 0x0F	; 15
    17ca:	33 70       	andi	r19, 0x03	; 3
    17cc:	4c 93       	st	X, r20
    17ce:	11 96       	adiw	r26, 0x01	; 1
    17d0:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    17d2:	df 01       	movw	r26, r30
    17d4:	16 97       	sbiw	r26, 0x06	; 6
    17d6:	22 95       	swap	r18
    17d8:	26 95       	lsr	r18
    17da:	26 95       	lsr	r18
    17dc:	23 70       	andi	r18, 0x03	; 3
    17de:	3f 85       	ldd	r19, Y+15	; 0x0f
    17e0:	43 2f       	mov	r20, r19
    17e2:	44 0f       	add	r20, r20
    17e4:	44 0f       	add	r20, r20
    17e6:	24 2b       	or	r18, r20
    17e8:	32 95       	swap	r19
    17ea:	36 95       	lsr	r19
    17ec:	36 95       	lsr	r19
    17ee:	33 70       	andi	r19, 0x03	; 3
    17f0:	2c 93       	st	X, r18
    17f2:	11 96       	adiw	r26, 0x01	; 1
    17f4:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    17f6:	df 01       	movw	r26, r30
    17f8:	14 97       	sbiw	r26, 0x04	; 4
    17fa:	48 89       	ldd	r20, Y+16	; 0x10
    17fc:	29 89       	ldd	r18, Y+17	; 0x11
    17fe:	32 2f       	mov	r19, r18
    1800:	33 70       	andi	r19, 0x03	; 3
    1802:	4c 93       	st	X, r20
    1804:	11 96       	adiw	r26, 0x01	; 1
    1806:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    1808:	df 01       	movw	r26, r30
    180a:	12 97       	sbiw	r26, 0x02	; 2
    180c:	26 95       	lsr	r18
    180e:	26 95       	lsr	r18
    1810:	38 2f       	mov	r19, r24
    1812:	32 95       	swap	r19
    1814:	33 0f       	add	r19, r19
    1816:	33 0f       	add	r19, r19
    1818:	30 7c       	andi	r19, 0xC0	; 192
    181a:	23 2b       	or	r18, r19
    181c:	86 95       	lsr	r24
    181e:	86 95       	lsr	r24
    1820:	83 70       	andi	r24, 0x03	; 3
    1822:	2c 93       	st	X, r18
    1824:	11 96       	adiw	r26, 0x01	; 1
    1826:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    1828:	92 95       	swap	r25
    182a:	96 95       	lsr	r25
    182c:	96 95       	lsr	r25
    182e:	93 70       	andi	r25, 0x03	; 3
    1830:	8c 89       	ldd	r24, Y+20	; 0x14
    1832:	28 2f       	mov	r18, r24
    1834:	22 0f       	add	r18, r18
    1836:	22 0f       	add	r18, r18
    1838:	92 2b       	or	r25, r18
    183a:	82 95       	swap	r24
    183c:	86 95       	lsr	r24
    183e:	86 95       	lsr	r24
    1840:	83 70       	andi	r24, 0x03	; 3
    1842:	90 93 e4 02 	sts	0x02E4, r25
    1846:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    1848:	2d 89       	ldd	r18, Y+21	; 0x15
    184a:	8e 89       	ldd	r24, Y+22	; 0x16
    184c:	98 2f       	mov	r25, r24
    184e:	93 70       	andi	r25, 0x03	; 3
    1850:	20 93 e6 02 	sts	0x02E6, r18
    1854:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    1856:	98 2f       	mov	r25, r24
    1858:	96 95       	lsr	r25
    185a:	96 95       	lsr	r25
    185c:	8f 89       	ldd	r24, Y+23	; 0x17
    185e:	28 2f       	mov	r18, r24
    1860:	22 95       	swap	r18
    1862:	22 0f       	add	r18, r18
    1864:	22 0f       	add	r18, r18
    1866:	20 7c       	andi	r18, 0xC0	; 192
    1868:	29 2b       	or	r18, r25
    186a:	98 2f       	mov	r25, r24
    186c:	96 95       	lsr	r25
    186e:	96 95       	lsr	r25
    1870:	93 70       	andi	r25, 0x03	; 3
    1872:	20 93 e8 02 	sts	0x02E8, r18
    1876:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    1878:	98 2f       	mov	r25, r24
    187a:	92 95       	swap	r25
    187c:	9f 70       	andi	r25, 0x0F	; 15
    187e:	88 8d       	ldd	r24, Y+24	; 0x18
    1880:	28 2f       	mov	r18, r24
    1882:	22 95       	swap	r18
    1884:	20 7f       	andi	r18, 0xF0	; 240
    1886:	29 2b       	or	r18, r25
    1888:	98 2f       	mov	r25, r24
    188a:	92 95       	swap	r25
    188c:	9f 70       	andi	r25, 0x0F	; 15
    188e:	93 70       	andi	r25, 0x03	; 3
    1890:	20 93 ea 02 	sts	0x02EA, r18
    1894:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    1896:	82 95       	swap	r24
    1898:	86 95       	lsr	r24
    189a:	86 95       	lsr	r24
    189c:	83 70       	andi	r24, 0x03	; 3
    189e:	99 8d       	ldd	r25, Y+25	; 0x19
    18a0:	29 2f       	mov	r18, r25
    18a2:	22 0f       	add	r18, r18
    18a4:	22 0f       	add	r18, r18
    18a6:	82 2b       	or	r24, r18
    18a8:	92 95       	swap	r25
    18aa:	96 95       	lsr	r25
    18ac:	96 95       	lsr	r25
    18ae:	93 70       	andi	r25, 0x03	; 3
    18b0:	80 93 ec 02 	sts	0x02EC, r24
    18b4:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    18b6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    18b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ba:	98 2f       	mov	r25, r24
    18bc:	93 70       	andi	r25, 0x03	; 3
    18be:	20 93 ee 02 	sts	0x02EE, r18
    18c2:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    18c4:	98 2f       	mov	r25, r24
    18c6:	96 95       	lsr	r25
    18c8:	96 95       	lsr	r25
    18ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18cc:	28 2f       	mov	r18, r24
    18ce:	22 95       	swap	r18
    18d0:	22 0f       	add	r18, r18
    18d2:	22 0f       	add	r18, r18
    18d4:	20 7c       	andi	r18, 0xC0	; 192
    18d6:	29 2b       	or	r18, r25
    18d8:	98 2f       	mov	r25, r24
    18da:	96 95       	lsr	r25
    18dc:	96 95       	lsr	r25
    18de:	93 70       	andi	r25, 0x03	; 3
    18e0:	20 93 f0 02 	sts	0x02F0, r18
    18e4:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    18e6:	98 2f       	mov	r25, r24
    18e8:	92 95       	swap	r25
    18ea:	9f 70       	andi	r25, 0x0F	; 15
    18ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ee:	28 2f       	mov	r18, r24
    18f0:	22 95       	swap	r18
    18f2:	20 7f       	andi	r18, 0xF0	; 240
    18f4:	29 2b       	or	r18, r25
    18f6:	98 2f       	mov	r25, r24
    18f8:	92 95       	swap	r25
    18fa:	9f 70       	andi	r25, 0x0F	; 15
    18fc:	93 70       	andi	r25, 0x03	; 3
    18fe:	20 93 f2 02 	sts	0x02F2, r18
    1902:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    1904:	82 95       	swap	r24
    1906:	86 95       	lsr	r24
    1908:	86 95       	lsr	r24
    190a:	83 70       	andi	r24, 0x03	; 3
    190c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    190e:	29 2f       	mov	r18, r25
    1910:	22 0f       	add	r18, r18
    1912:	22 0f       	add	r18, r18
    1914:	82 2b       	or	r24, r18
    1916:	92 95       	swap	r25
    1918:	96 95       	lsr	r25
    191a:	96 95       	lsr	r25
    191c:	93 70       	andi	r25, 0x03	; 3
    191e:	80 93 f4 02 	sts	0x02F4, r24
    1922:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    1924:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1926:	88 a1       	lds	r24, 0x48
    1928:	98 2f       	mov	r25, r24
    192a:	93 70       	andi	r25, 0x03	; 3
    192c:	20 93 f6 02 	sts	0x02F6, r18
    1930:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1932:	98 2f       	mov	r25, r24
    1934:	96 95       	lsr	r25
    1936:	96 95       	lsr	r25
    1938:	89 a1       	lds	r24, 0x49
    193a:	28 2f       	mov	r18, r24
    193c:	22 95       	swap	r18
    193e:	22 0f       	add	r18, r18
    1940:	22 0f       	add	r18, r18
    1942:	20 7c       	andi	r18, 0xC0	; 192
    1944:	29 2b       	or	r18, r25
    1946:	98 2f       	mov	r25, r24
    1948:	96 95       	lsr	r25
    194a:	96 95       	lsr	r25
    194c:	93 70       	andi	r25, 0x03	; 3
    194e:	20 93 f8 02 	sts	0x02F8, r18
    1952:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    1954:	98 2f       	mov	r25, r24
    1956:	92 95       	swap	r25
    1958:	9f 70       	andi	r25, 0x0F	; 15
    195a:	8a a1       	lds	r24, 0x4a
    195c:	28 2f       	mov	r18, r24
    195e:	22 95       	swap	r18
    1960:	20 7f       	andi	r18, 0xF0	; 240
    1962:	29 2b       	or	r18, r25
    1964:	98 2f       	mov	r25, r24
    1966:	92 95       	swap	r25
    1968:	9f 70       	andi	r25, 0x0F	; 15
    196a:	93 70       	andi	r25, 0x03	; 3
    196c:	20 93 fa 02 	sts	0x02FA, r18
    1970:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1972:	82 95       	swap	r24
    1974:	86 95       	lsr	r24
    1976:	86 95       	lsr	r24
    1978:	83 70       	andi	r24, 0x03	; 3
    197a:	9b a1       	lds	r25, 0x4b
    197c:	29 2f       	mov	r18, r25
    197e:	22 0f       	add	r18, r18
    1980:	22 0f       	add	r18, r18
    1982:	82 2b       	or	r24, r18
    1984:	92 95       	swap	r25
    1986:	96 95       	lsr	r25
    1988:	96 95       	lsr	r25
    198a:	93 70       	andi	r25, 0x03	; 3
    198c:	80 93 fc 02 	sts	0x02FC, r24
    1990:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1992:	2c a1       	lds	r18, 0x4c
    1994:	8d a1       	lds	r24, 0x4d
    1996:	98 2f       	mov	r25, r24
    1998:	93 70       	andi	r25, 0x03	; 3
    199a:	20 93 fe 02 	sts	0x02FE, r18
    199e:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    19a0:	98 2f       	mov	r25, r24
    19a2:	96 95       	lsr	r25
    19a4:	96 95       	lsr	r25
    19a6:	8e a1       	lds	r24, 0x4e
    19a8:	28 2f       	mov	r18, r24
    19aa:	22 95       	swap	r18
    19ac:	22 0f       	add	r18, r18
    19ae:	22 0f       	add	r18, r18
    19b0:	20 7c       	andi	r18, 0xC0	; 192
    19b2:	29 2b       	or	r18, r25
    19b4:	86 95       	lsr	r24
    19b6:	86 95       	lsr	r24
    19b8:	98 2f       	mov	r25, r24
    19ba:	93 70       	andi	r25, 0x03	; 3
    19bc:	20 93 00 03 	sts	0x0300, r18
    19c0:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    19c2:	7f a1       	lds	r23, 0x4f
    19c4:	70 93 02 03 	sts	0x0302, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    19c8:	68 a5       	lds	r22, 0x68
    19ca:	60 93 03 03 	sts	0x0303, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    19ce:	89 a5       	lds	r24, 0x69
    19d0:	80 93 04 03 	sts	0x0304, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    19d4:	9a a5       	lds	r25, 0x6a
    19d6:	90 93 05 03 	sts	0x0305, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    19da:	1b a5       	lds	r17, 0x6b
    19dc:	10 93 06 03 	sts	0x0306, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    19e0:	de 01       	movw	r26, r28
    19e2:	9c 96       	adiw	r26, 0x2c	; 44
    19e4:	ef ef       	ldi	r30, 0xFF	; 255
    19e6:	f1 e0       	ldi	r31, 0x01	; 1
    19e8:	28 e0       	ldi	r18, 0x08	; 8
    19ea:	01 90       	ld	r0, Z+
    19ec:	0d 92       	st	X+, r0
    19ee:	21 50       	subi	r18, 0x01	; 1
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    19f2:	e9 2f       	mov	r30, r25
    19f4:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	9f 01       	movw	r18, r30
    19fa:	22 0f       	add	r18, r18
    19fc:	33 1f       	adc	r19, r19
    19fe:	22 0f       	add	r18, r18
    1a00:	33 1f       	adc	r19, r19
    1a02:	a9 01       	movw	r20, r18
    1a04:	44 0f       	add	r20, r20
    1a06:	55 1f       	adc	r21, r21
    1a08:	44 0f       	add	r20, r20
    1a0a:	55 1f       	adc	r21, r21
    1a0c:	44 0f       	add	r20, r20
    1a0e:	55 1f       	adc	r21, r21
    1a10:	42 1b       	sub	r20, r18
    1a12:	53 0b       	sbc	r21, r19
    1a14:	4e 0f       	add	r20, r30
    1a16:	5f 1f       	adc	r21, r31
    1a18:	55 95       	asr	r21
    1a1a:	47 95       	ror	r20
    1a1c:	55 95       	asr	r21
    1a1e:	47 95       	ror	r20
    1a20:	55 95       	asr	r21
    1a22:	47 95       	ror	r20
    1a24:	55 95       	asr	r21
    1a26:	47 95       	ror	r20
    1a28:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e4 0f       	add	r30, r20
    1a2e:	f1 1d       	adc	r31, r1
    1a30:	24 a5       	lds	r18, 0x64
    1a32:	20 93 0d 03 	sts	0x030D, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    1a36:	de 01       	movw	r26, r28
    1a38:	d4 96       	adiw	r26, 0x34	; 52
    1a3a:	e7 e0       	ldi	r30, 0x07	; 7
    1a3c:	f2 e0       	ldi	r31, 0x02	; 2
    1a3e:	28 e0       	ldi	r18, 0x08	; 8
    1a40:	01 90       	ld	r0, Z+
    1a42:	0d 92       	st	X+, r0
    1a44:	21 50       	subi	r18, 0x01	; 1
    1a46:	e1 f7       	brne	.-8      	; 0x1a40 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    1a48:	29 2f       	mov	r18, r25
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	20 7e       	andi	r18, 0xE0	; 224
    1a4e:	30 70       	andi	r19, 0x00	; 0
    1a50:	35 95       	asr	r19
    1a52:	27 95       	ror	r18
    1a54:	35 95       	asr	r19
    1a56:	27 95       	ror	r18
    1a58:	35 95       	asr	r19
    1a5a:	27 95       	ror	r18
    1a5c:	83 70       	andi	r24, 0x03	; 3
    1a5e:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    1a60:	42 2f       	mov	r20, r18
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	ca 01       	movw	r24, r20
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	9c 01       	movw	r18, r24
    1a70:	22 0f       	add	r18, r18
    1a72:	33 1f       	adc	r19, r19
    1a74:	22 0f       	add	r18, r18
    1a76:	33 1f       	adc	r19, r19
    1a78:	22 0f       	add	r18, r18
    1a7a:	33 1f       	adc	r19, r19
    1a7c:	28 1b       	sub	r18, r24
    1a7e:	39 0b       	sbc	r19, r25
    1a80:	42 0f       	add	r20, r18
    1a82:	53 1f       	adc	r21, r19
    1a84:	ca 01       	movw	r24, r20
    1a86:	95 95       	asr	r25
    1a88:	87 95       	ror	r24
    1a8a:	95 95       	asr	r25
    1a8c:	87 95       	ror	r24
    1a8e:	95 95       	asr	r25
    1a90:	87 95       	ror	r24
    1a92:	95 95       	asr	r25
    1a94:	87 95       	ror	r24
    1a96:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e8 0f       	add	r30, r24
    1a9c:	f1 1d       	adc	r31, r1
    1a9e:	84 a9       	sts	0x44, r24
    1aa0:	80 93 0e 03 	sts	0x030E, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    1aa4:	de 01       	movw	r26, r28
    1aa6:	dc 96       	adiw	r26, 0x3c	; 60
    1aa8:	ef e0       	ldi	r30, 0x0F	; 15
    1aaa:	f2 e0       	ldi	r31, 0x02	; 2
    1aac:	88 e0       	ldi	r24, 0x08	; 8
    1aae:	01 90       	ld	r0, Z+
    1ab0:	0d 92       	st	X+, r0
    1ab2:	81 50       	subi	r24, 0x01	; 1
    1ab4:	e1 f7       	brne	.-8      	; 0x1aae <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    1ab6:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    1ab8:	46 2f       	mov	r20, r22
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	ca 01       	movw	r24, r20
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	9c 01       	movw	r18, r24
    1ac8:	22 0f       	add	r18, r18
    1aca:	33 1f       	adc	r19, r19
    1acc:	22 0f       	add	r18, r18
    1ace:	33 1f       	adc	r19, r19
    1ad0:	22 0f       	add	r18, r18
    1ad2:	33 1f       	adc	r19, r19
    1ad4:	28 1b       	sub	r18, r24
    1ad6:	39 0b       	sbc	r19, r25
    1ad8:	42 0f       	add	r20, r18
    1ada:	53 1f       	adc	r21, r19
    1adc:	ca 01       	movw	r24, r20
    1ade:	95 95       	asr	r25
    1ae0:	87 95       	ror	r24
    1ae2:	95 95       	asr	r25
    1ae4:	87 95       	ror	r24
    1ae6:	95 95       	asr	r25
    1ae8:	87 95       	ror	r24
    1aea:	95 95       	asr	r25
    1aec:	87 95       	ror	r24
    1aee:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1af0:	fe 01       	movw	r30, r28
    1af2:	e8 0f       	add	r30, r24
    1af4:	f1 1d       	adc	r31, r1
    1af6:	84 ad       	sts	0x64, r24
    1af8:	80 93 0f 03 	sts	0x030F, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1afc:	21 2f       	mov	r18, r17
    1afe:	26 95       	lsr	r18
    1b00:	27 95       	ror	r18
    1b02:	22 27       	eor	r18, r18
    1b04:	27 95       	ror	r18
    1b06:	81 2f       	mov	r24, r17
    1b08:	81 70       	andi	r24, 0x01	; 1
    1b0a:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1b0c:	81 2f       	mov	r24, r17
    1b0e:	86 95       	lsr	r24
    1b10:	86 95       	lsr	r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	81 70       	andi	r24, 0x01	; 1
    1b16:	90 70       	andi	r25, 0x00	; 0
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1b20:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1b22:	81 2f       	mov	r24, r17
    1b24:	86 95       	lsr	r24
    1b26:	86 95       	lsr	r24
    1b28:	86 95       	lsr	r24
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	81 70       	andi	r24, 0x01	; 1
    1b2e:	90 70       	andi	r25, 0x00	; 0
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1b34:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1b36:	81 2f       	mov	r24, r17
    1b38:	82 95       	swap	r24
    1b3a:	8f 70       	andi	r24, 0x0F	; 15
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	81 70       	andi	r24, 0x01	; 1
    1b40:	90 70       	andi	r25, 0x00	; 0
    1b42:	82 95       	swap	r24
    1b44:	92 95       	swap	r25
    1b46:	90 7f       	andi	r25, 0xF0	; 240
    1b48:	98 27       	eor	r25, r24
    1b4a:	80 7f       	andi	r24, 0xF0	; 240
    1b4c:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1b4e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    1b50:	81 2f       	mov	r24, r17
    1b52:	82 95       	swap	r24
    1b54:	86 95       	lsr	r24
    1b56:	87 70       	andi	r24, 0x07	; 7
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	81 70       	andi	r24, 0x01	; 1
    1b5c:	90 70       	andi	r25, 0x00	; 0
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	82 95       	swap	r24
    1b64:	92 95       	swap	r25
    1b66:	90 7f       	andi	r25, 0xF0	; 240
    1b68:	98 27       	eor	r25, r24
    1b6a:	80 7f       	andi	r24, 0xF0	; 240
    1b6c:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1b6e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1b70:	81 2f       	mov	r24, r17
    1b72:	82 95       	swap	r24
    1b74:	86 95       	lsr	r24
    1b76:	86 95       	lsr	r24
    1b78:	83 70       	andi	r24, 0x03	; 3
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	81 70       	andi	r24, 0x01	; 1
    1b7e:	90 70       	andi	r25, 0x00	; 0
    1b80:	00 24       	eor	r0, r0
    1b82:	96 95       	lsr	r25
    1b84:	87 95       	ror	r24
    1b86:	07 94       	ror	r0
    1b88:	96 95       	lsr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	07 94       	ror	r0
    1b8e:	98 2f       	mov	r25, r24
    1b90:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1b92:	82 2b       	or	r24, r18
    1b94:	80 93 83 03 	sts	0x0383, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    1b98:	87 2f       	mov	r24, r23
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	81 70       	andi	r24, 0x01	; 1
    1b9e:	90 70       	andi	r25, 0x00	; 0
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1bac:	90 91 85 03 	lds	r25, 0x0385
    1bb0:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1bb2:	89 2b       	or	r24, r25
    1bb4:	11 1f       	adc	r17, r17
    1bb6:	11 27       	eor	r17, r17
    1bb8:	11 1f       	adc	r17, r17
    1bba:	11 0f       	add	r17, r17
    1bbc:	11 0f       	add	r17, r17
    1bbe:	81 2b       	or	r24, r17
    1bc0:	80 93 85 03 	sts	0x0385, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1bc4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    1bc8:	80 91 85 03 	lds	r24, 0x0385
    1bcc:	8f 77       	andi	r24, 0x7F	; 127
    1bce:	80 93 85 03 	sts	0x0385, r24
	
	current_patch.mode = MEMORY;
    1bd2:	10 92 0c 03 	sts	0x030C, r1
	
}
    1bd6:	cd 5b       	subi	r28, 0xBD	; 189
    1bd8:	df 4f       	sbci	r29, 0xFF	; 255
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	08 95       	ret

00001bec <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1bec:	90 91 0d 03 	lds	r25, 0x030D
	if (vco == VCO2) n = octave_index.vco2;
    1bf0:	60 3f       	cpi	r22, 0xF0	; 240
    1bf2:	11 f4       	brne	.+4      	; 0x1bf8 <transpose_note+0xc>
    1bf4:	90 91 0e 03 	lds	r25, 0x030E

	note = (n*12) + note; //calculate MIDI note after octave addition
    1bf8:	29 2f       	mov	r18, r25
    1bfa:	22 0f       	add	r18, r18
    1bfc:	92 0f       	add	r25, r18
    1bfe:	99 0f       	add	r25, r25
    1c00:	99 0f       	add	r25, r25
    1c02:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1c04:	89 38       	cpi	r24, 0x89	; 137
    1c06:	08 f0       	brcs	.+2      	; 0x1c0a <transpose_note+0x1e>
    1c08:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1c0a:	08 95       	ret

00001c0c <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1c0c:	80 91 83 03 	lds	r24, 0x0383
    1c10:	98 2f       	mov	r25, r24
    1c12:	96 95       	lsr	r25
    1c14:	96 95       	lsr	r25
    1c16:	96 95       	lsr	r25
    1c18:	90 ff       	sbrs	r25, 0
    1c1a:	0e c0       	rjmp	.+28     	; 0x1c38 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1c1c:	90 91 0d 03 	lds	r25, 0x030D
    1c20:	9f 5f       	subi	r25, 0xFF	; 255
    1c22:	90 93 0d 03 	sts	0x030D, r25
    1c26:	95 30       	cpi	r25, 0x05	; 5
    1c28:	19 f4       	brne	.+6      	; 0x1c30 <update_octave_range+0x24>
    1c2a:	94 e0       	ldi	r25, 0x04	; 4
    1c2c:	90 93 0d 03 	sts	0x030D, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1c30:	98 e0       	ldi	r25, 0x08	; 8
    1c32:	89 27       	eor	r24, r25
    1c34:	80 93 83 03 	sts	0x0383, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1c38:	80 91 84 03 	lds	r24, 0x0384
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	96 95       	lsr	r25
    1c40:	96 95       	lsr	r25
    1c42:	96 95       	lsr	r25
    1c44:	90 ff       	sbrs	r25, 0
    1c46:	0b c0       	rjmp	.+22     	; 0x1c5e <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1c48:	90 91 0d 03 	lds	r25, 0x030D
    1c4c:	99 23       	and	r25, r25
    1c4e:	19 f0       	breq	.+6      	; 0x1c56 <update_octave_range+0x4a>
    1c50:	91 50       	subi	r25, 0x01	; 1
    1c52:	90 93 0d 03 	sts	0x030D, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1c56:	98 e0       	ldi	r25, 0x08	; 8
    1c58:	89 27       	eor	r24, r25
    1c5a:	80 93 84 03 	sts	0x0384, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1c5e:	80 91 0d 03 	lds	r24, 0x030D
    1c62:	e1 e2       	ldi	r30, 0x21	; 33
    1c64:	f2 e0       	ldi	r31, 0x02	; 2
    1c66:	e8 0f       	add	r30, r24
    1c68:	f1 1d       	adc	r31, r1
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	00 80       	ld	r0, Z
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <update_octave_range+0x6a>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <update_octave_range+0x66>
    1c7a:	58 2f       	mov	r21, r24
    1c7c:	80 93 05 03 	sts	0x0305, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1c80:	90 91 84 03 	lds	r25, 0x0384
    1c84:	29 2f       	mov	r18, r25
    1c86:	26 95       	lsr	r18
    1c88:	26 95       	lsr	r18
    1c8a:	20 ff       	sbrs	r18, 0
    1c8c:	0e c0       	rjmp	.+28     	; 0x1caa <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1c8e:	80 91 0e 03 	lds	r24, 0x030E
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	80 93 0e 03 	sts	0x030E, r24
    1c98:	85 30       	cpi	r24, 0x05	; 5
    1c9a:	19 f4       	brne	.+6      	; 0x1ca2 <update_octave_range+0x96>
    1c9c:	84 e0       	ldi	r24, 0x04	; 4
    1c9e:	80 93 0e 03 	sts	0x030E, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1ca2:	84 e0       	ldi	r24, 0x04	; 4
    1ca4:	98 27       	eor	r25, r24
    1ca6:	90 93 84 03 	sts	0x0384, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1caa:	90 91 84 03 	lds	r25, 0x0384
    1cae:	29 2f       	mov	r18, r25
    1cb0:	26 95       	lsr	r18
    1cb2:	20 ff       	sbrs	r18, 0
    1cb4:	0b c0       	rjmp	.+22     	; 0x1ccc <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1cb6:	80 91 0e 03 	lds	r24, 0x030E
    1cba:	88 23       	and	r24, r24
    1cbc:	19 f0       	breq	.+6      	; 0x1cc4 <update_octave_range+0xb8>
    1cbe:	81 50       	subi	r24, 0x01	; 1
    1cc0:	80 93 0e 03 	sts	0x030E, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	98 27       	eor	r25, r24
    1cc8:	90 93 84 03 	sts	0x0384, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1ccc:	40 91 04 03 	lds	r20, 0x0304
    1cd0:	4c 7f       	andi	r20, 0xFC	; 252
    1cd2:	40 93 04 03 	sts	0x0304, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1cd6:	90 91 0e 03 	lds	r25, 0x030E
    1cda:	93 30       	cpi	r25, 0x03	; 3
    1cdc:	88 f0       	brcs	.+34     	; 0x1d00 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1cde:	ec e1       	ldi	r30, 0x1C	; 28
    1ce0:	f2 e0       	ldi	r31, 0x02	; 2
    1ce2:	e9 0f       	add	r30, r25
    1ce4:	f1 1d       	adc	r31, r1
    1ce6:	21 e0       	ldi	r18, 0x01	; 1
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	c9 01       	movw	r24, r18
    1cec:	00 80       	ld	r0, Z
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <update_octave_range+0xe8>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	0a 94       	dec	r0
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <update_octave_range+0xe4>
    1cf8:	84 2b       	or	r24, r20
    1cfa:	80 93 04 03 	sts	0x0304, r24
    1cfe:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1d00:	ec e1       	ldi	r30, 0x1C	; 28
    1d02:	f2 e0       	ldi	r31, 0x02	; 2
    1d04:	e9 0f       	add	r30, r25
    1d06:	f1 1d       	adc	r31, r1
    1d08:	21 e0       	ldi	r18, 0x01	; 1
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	c9 01       	movw	r24, r18
    1d0e:	00 80       	ld	r0, Z
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <update_octave_range+0x10a>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <update_octave_range+0x106>
    1d1a:	85 2b       	or	r24, r21
    1d1c:	80 93 05 03 	sts	0x0305, r24
    1d20:	08 95       	ret

00001d22 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1d22:	80 91 84 03 	lds	r24, 0x0384
    1d26:	88 23       	and	r24, r24
    1d28:	64 f4       	brge	.+24     	; 0x1d42 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1d2a:	80 58       	subi	r24, 0x80	; 128
    1d2c:	80 93 84 03 	sts	0x0384, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1d30:	80 91 0f 03 	lds	r24, 0x030F
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	80 93 0f 03 	sts	0x030F, r24
    1d3a:	85 30       	cpi	r24, 0x05	; 5
    1d3c:	11 f4       	brne	.+4      	; 0x1d42 <update_lfo_shape+0x20>
    1d3e:	10 92 0f 03 	sts	0x030F, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1d42:	e0 91 0f 03 	lds	r30, 0x030F
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	ee 0f       	add	r30, r30
    1d4a:	ff 1f       	adc	r31, r31
    1d4c:	ea 5d       	subi	r30, 0xDA	; 218
    1d4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	01 80       	ldd	r0, Z+1	; 0x01
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <update_lfo_shape+0x3a>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1d60:	90 91 03 03 	lds	r25, 0x0303
    1d64:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1d66:	89 2b       	or	r24, r25
    1d68:	80 93 03 03 	sts	0x0303, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1d6c:	80 81       	ld	r24, Z
    1d6e:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1d70:	ed ed       	ldi	r30, 0xDD	; 221
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	80 62       	ori	r24, 0x20	; 32
    1d78:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8f 7d       	andi	r24, 0xDF	; 223
    1d7e:	80 83       	st	Z, r24
	
}		
    1d80:	08 95       	ret

00001d82 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1d82:	80 91 84 03 	lds	r24, 0x0384
    1d86:	80 ff       	sbrs	r24, 0
    1d88:	0f c0       	rjmp	.+30     	; 0x1da8 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1d8a:	91 e0       	ldi	r25, 0x01	; 1
    1d8c:	89 27       	eor	r24, r25
    1d8e:	80 93 84 03 	sts	0x0384, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1d92:	80 91 10 03 	lds	r24, 0x0310
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	80 93 10 03 	sts	0x0310, r24
    1d9c:	85 30       	cpi	r24, 0x05	; 5
    1d9e:	11 f4       	brne	.+4      	; 0x1da4 <update_lfo_sync+0x22>
    1da0:	10 92 10 03 	sts	0x0310, r1
		lfo_clock.ppqn_counter = 0; //reset counter
    1da4:	10 92 e0 03 	sts	0x03E0, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1da8:	60 91 03 03 	lds	r22, 0x0303
    1dac:	60 7f       	andi	r22, 0xF0	; 240
    1dae:	60 93 03 03 	sts	0x0303, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1db2:	20 91 10 03 	lds	r18, 0x0310
    1db6:	22 23       	and	r18, r18
    1db8:	71 f0       	breq	.+28     	; 0x1dd6 <update_lfo_sync+0x54>
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	21 50       	subi	r18, 0x01	; 1
    1dbe:	30 40       	sbci	r19, 0x00	; 0
    1dc0:	41 e0       	ldi	r20, 0x01	; 1
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	ca 01       	movw	r24, r20
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <update_lfo_sync+0x4a>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	2a 95       	dec	r18
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <update_lfo_sync+0x46>
    1dd0:	86 2b       	or	r24, r22
    1dd2:	80 93 03 03 	sts	0x0303, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1dd6:	80 91 03 03 	lds	r24, 0x0303
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	8f 70       	andi	r24, 0x0F	; 15
    1dde:	90 70       	andi	r25, 0x00	; 0
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	91 05       	cpc	r25, r1
    1de4:	89 f0       	breq	.+34     	; 0x1e08 <update_lfo_sync+0x86>
    1de6:	83 30       	cpi	r24, 0x03	; 3
    1de8:	91 05       	cpc	r25, r1
    1dea:	24 f4       	brge	.+8      	; 0x1df4 <update_lfo_sync+0x72>
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	91 05       	cpc	r25, r1
    1df0:	b9 f4       	brne	.+46     	; 0x1e20 <update_lfo_sync+0x9e>
    1df2:	07 c0       	rjmp	.+14     	; 0x1e02 <update_lfo_sync+0x80>
    1df4:	84 30       	cpi	r24, 0x04	; 4
    1df6:	91 05       	cpc	r25, r1
    1df8:	59 f0       	breq	.+22     	; 0x1e10 <update_lfo_sync+0x8e>
    1dfa:	88 30       	cpi	r24, 0x08	; 8
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	81 f4       	brne	.+32     	; 0x1e20 <update_lfo_sync+0x9e>
    1e00:	0b c0       	rjmp	.+22     	; 0x1e18 <update_lfo_sync+0x96>
		
		case 0b0001:
			lfo_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1e02:	10 92 df 03 	sts	0x03DF, r1
			
			break;
    1e06:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			lfo_clock.divider = 24; //1:4
    1e08:	88 e1       	ldi	r24, 0x18	; 24
    1e0a:	80 93 df 03 	sts	0x03DF, r24
			break;
    1e0e:	08 95       	ret
			
		case 0b0100:
			lfo_clock.divider = 12; //1:8
    1e10:	8c e0       	ldi	r24, 0x0C	; 12
    1e12:	80 93 df 03 	sts	0x03DF, r24
			break;
    1e16:	08 95       	ret
			
		case 0b1000:
			lfo_clock.divider = 6; //1:16	 		
    1e18:	86 e0       	ldi	r24, 0x06	; 6
    1e1a:	80 93 df 03 	sts	0x03DF, r24
			break;
    1e1e:	08 95       	ret
		
		default:
			lfo_clock.divider = 0; //need to turn midi sync off here. How?
    1e20:	10 92 df 03 	sts	0x03DF, r1
    1e24:	08 95       	ret

00001e26 <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1e26:	80 91 84 03 	lds	r24, 0x0384
    1e2a:	98 2f       	mov	r25, r24
    1e2c:	92 95       	swap	r25
    1e2e:	96 95       	lsr	r25
    1e30:	96 95       	lsr	r25
    1e32:	93 70       	andi	r25, 0x03	; 3
    1e34:	90 ff       	sbrs	r25, 0
    1e36:	6d c0       	rjmp	.+218    	; 0x1f12 <update_arp_sync+0xec>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1e38:	90 e4       	ldi	r25, 0x40	; 64
    1e3a:	89 27       	eor	r24, r25
    1e3c:	80 93 84 03 	sts	0x0384, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1e40:	80 91 11 03 	lds	r24, 0x0311
    1e44:	8f 5f       	subi	r24, 0xFF	; 255
    1e46:	80 93 11 03 	sts	0x0311, r24
    1e4a:	85 30       	cpi	r24, 0x05	; 5
    1e4c:	11 f4       	brne	.+4      	; 0x1e52 <update_arp_sync+0x2c>
    1e4e:	10 92 11 03 	sts	0x0311, r1
		//if (arp.clock_source == MIDI_CLOCK) arp.ppqn_counter = 0;//arp.ppqn_counter >> 1; //need to take into account current ppqn count and and new divider value.
		//arp.ppqn_counter = arp.ppqn_counter >> 1;//0; //try this at least to get rid of weird ppqn counter overflow that occurs when changing sync modes.
		current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1e52:	60 91 04 03 	lds	r22, 0x0304
    1e56:	63 7c       	andi	r22, 0xC3	; 195
    1e58:	60 93 04 03 	sts	0x0304, r22
		if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1e5c:	20 91 11 03 	lds	r18, 0x0311
    1e60:	22 23       	and	r18, r18
    1e62:	71 f0       	breq	.+28     	; 0x1e80 <update_arp_sync+0x5a>
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	2f 5f       	subi	r18, 0xFF	; 255
    1e68:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	50 e0       	ldi	r21, 0x00	; 0
    1e6e:	ca 01       	movw	r24, r20
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <update_arp_sync+0x50>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	2a 95       	dec	r18
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <update_arp_sync+0x4c>
    1e7a:	86 2b       	or	r24, r22
    1e7c:	80 93 04 03 	sts	0x0304, r24
			
		switch (current_patch.byte_3 & 0b00111100) {
    1e80:	80 91 04 03 	lds	r24, 0x0304
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	8c 73       	andi	r24, 0x3C	; 60
    1e88:	90 70       	andi	r25, 0x00	; 0
    1e8a:	88 30       	cpi	r24, 0x08	; 8
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	a1 f0       	breq	.+40     	; 0x1eb8 <update_arp_sync+0x92>
    1e90:	89 30       	cpi	r24, 0x09	; 9
    1e92:	91 05       	cpc	r25, r1
    1e94:	24 f4       	brge	.+8      	; 0x1e9e <update_arp_sync+0x78>
    1e96:	84 30       	cpi	r24, 0x04	; 4
    1e98:	91 05       	cpc	r25, r1
    1e9a:	01 f5       	brne	.+64     	; 0x1edc <update_arp_sync+0xb6>
    1e9c:	07 c0       	rjmp	.+14     	; 0x1eac <update_arp_sync+0x86>
    1e9e:	80 31       	cpi	r24, 0x10	; 16
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	81 f0       	breq	.+32     	; 0x1ec4 <update_arp_sync+0x9e>
    1ea4:	80 32       	cpi	r24, 0x20	; 32
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	c9 f4       	brne	.+50     	; 0x1edc <update_arp_sync+0xb6>
    1eaa:	12 c0       	rjmp	.+36     	; 0x1ed0 <update_arp_sync+0xaa>
				
			case 0b00000100:
			system_clock.divider = arp.divider = 48; //1:2
    1eac:	80 e3       	ldi	r24, 0x30	; 48
    1eae:	80 93 90 03 	sts	0x0390, r24
    1eb2:	80 93 d9 03 	sts	0x03D9, r24
			break;
    1eb6:	17 c0       	rjmp	.+46     	; 0x1ee6 <update_arp_sync+0xc0>
				
			case 0b00001000:
			system_clock.divider = arp.divider = 24; //1:4
    1eb8:	88 e1       	ldi	r24, 0x18	; 24
    1eba:	80 93 90 03 	sts	0x0390, r24
    1ebe:	80 93 d9 03 	sts	0x03D9, r24
				
			break;
    1ec2:	11 c0       	rjmp	.+34     	; 0x1ee6 <update_arp_sync+0xc0>
				
			case 0b00010000:
			system_clock.divider = arp.divider = 12; //1:8
    1ec4:	8c e0       	ldi	r24, 0x0C	; 12
    1ec6:	80 93 90 03 	sts	0x0390, r24
    1eca:	80 93 d9 03 	sts	0x03D9, r24
			break;
    1ece:	0b c0       	rjmp	.+22     	; 0x1ee6 <update_arp_sync+0xc0>
				
			case 0b00100000:
			system_clock.divider = arp.divider = 6; //1:16
    1ed0:	86 e0       	ldi	r24, 0x06	; 6
    1ed2:	80 93 90 03 	sts	0x0390, r24
    1ed6:	80 93 d9 03 	sts	0x03D9, r24
			break;
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <update_arp_sync+0xc0>
				
			default:
			system_clock.divider = arp.divider = 3; //1:32 - this is a hack - no LEDs lighted
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	80 93 90 03 	sts	0x0390, r24
    1ee2:	80 93 d9 03 	sts	0x03D9, r24
				
		}
		
		//uint32_t total_ppqn = (uint32_t)arp.song_position*6;
		arp.ppqn_counter = (arp.song_position % arp.divider) - arp.ppqn_shift;// + 1;
    1ee6:	20 91 90 03 	lds	r18, 0x0390
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	60 91 92 03 	lds	r22, 0x0392
    1ef4:	70 91 93 03 	lds	r23, 0x0393
    1ef8:	80 91 94 03 	lds	r24, 0x0394
    1efc:	90 91 95 03 	lds	r25, 0x0395
    1f00:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    1f04:	80 91 91 03 	lds	r24, 0x0391
    1f08:	68 1b       	sub	r22, r24
    1f0a:	60 93 8f 03 	sts	0x038F, r22
		//arp.display = arp.ppqn_counter;
			
		//OK, now need to modify this to maintain phase with beat clock
		system_clock.ppqn_counter = 0;	//same applies to system clock ppqn counter
    1f0e:	10 92 da 03 	sts	0x03DA, r1
    1f12:	08 95       	ret

00001f14 <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1f14:	80 91 84 03 	lds	r24, 0x0384
    1f18:	80 31       	cpi	r24, 0x10	; 16
    1f1a:	69 f4       	brne	.+26     	; 0x1f36 <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1f1c:	10 92 84 03 	sts	0x0384, r1
		
		if (++arp_range == 4) arp_range = 0;
    1f20:	80 91 12 03 	lds	r24, 0x0312
    1f24:	8f 5f       	subi	r24, 0xFF	; 255
    1f26:	80 93 12 03 	sts	0x0312, r24
    1f2a:	84 30       	cpi	r24, 0x04	; 4
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <update_arp_range+0x1e>
    1f2e:	10 92 12 03 	sts	0x0312, r1
		arp.step_position = 0; //reset step position if range changes
    1f32:	10 92 8b 03 	sts	0x038B, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1f36:	80 91 02 03 	lds	r24, 0x0302
    1f3a:	8d 7f       	andi	r24, 0xFD	; 253
    1f3c:	80 93 02 03 	sts	0x0302, r24
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1f40:	80 91 04 03 	lds	r24, 0x0304
    1f44:	8f 73       	andi	r24, 0x3F	; 63
    1f46:	80 93 04 03 	sts	0x0304, r24
	
	arp.range = arp_range;
    1f4a:	80 91 12 03 	lds	r24, 0x0312
    1f4e:	80 93 89 03 	sts	0x0389, r24
	
	update_arp_sequence(); //update sequence with new settings
    1f52:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1f56:	80 91 12 03 	lds	r24, 0x0312
    1f5a:	82 30       	cpi	r24, 0x02	; 2
    1f5c:	51 f0       	breq	.+20     	; 0x1f72 <update_arp_range+0x5e>
    1f5e:	83 30       	cpi	r24, 0x03	; 3
    1f60:	71 f0       	breq	.+28     	; 0x1f7e <update_arp_range+0x6a>
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	89 f4       	brne	.+34     	; 0x1f88 <update_arp_range+0x74>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1f66:	80 91 02 03 	lds	r24, 0x0302
    1f6a:	82 60       	ori	r24, 0x02	; 2
    1f6c:	80 93 02 03 	sts	0x0302, r24
			break;
    1f70:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1f72:	80 91 04 03 	lds	r24, 0x0304
    1f76:	80 64       	ori	r24, 0x40	; 64
    1f78:	80 93 04 03 	sts	0x0304, r24
			break;
    1f7c:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1f7e:	80 91 04 03 	lds	r24, 0x0304
    1f82:	80 68       	ori	r24, 0x80	; 128
    1f84:	80 93 04 03 	sts	0x0304, r24
    1f88:	08 95       	ret

00001f8a <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1f8a:	80 91 84 03 	lds	r24, 0x0384
    1f8e:	98 2f       	mov	r25, r24
    1f90:	92 95       	swap	r25
    1f92:	96 95       	lsr	r25
    1f94:	97 70       	andi	r25, 0x07	; 7
    1f96:	90 ff       	sbrs	r25, 0
    1f98:	29 c0       	rjmp	.+82     	; 0x1fec <update_arp_mode+0x62>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1f9a:	90 e2       	ldi	r25, 0x20	; 32
    1f9c:	89 27       	eor	r24, r25
    1f9e:	80 93 84 03 	sts	0x0384, r24
		if (arp_mode == 0) {
    1fa2:	80 91 13 03 	lds	r24, 0x0313
    1fa6:	88 23       	and	r24, r24
    1fa8:	c1 f4       	brne	.+48     	; 0x1fda <update_arp_mode+0x50>
			
			update_arp_sequence(); //if arp mode is OFF it's about to be turned on, so update arp_sequence
    1faa:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
			//arp.ppqn_counter = ((arp.song_position*6) % arp.divider);// +1; //not sure about the +1 here - may
			arp.ppqn_counter = (arp.song_position % arp.divider) - arp.ppqn_shift;// + 1;
    1fae:	20 91 90 03 	lds	r18, 0x0390
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	60 91 92 03 	lds	r22, 0x0392
    1fbc:	70 91 93 03 	lds	r23, 0x0393
    1fc0:	80 91 94 03 	lds	r24, 0x0394
    1fc4:	90 91 95 03 	lds	r25, 0x0395
    1fc8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    1fcc:	80 91 91 03 	lds	r24, 0x0391
    1fd0:	68 1b       	sub	r22, r24
    1fd2:	60 93 8f 03 	sts	0x038F, r22
			//arp.display = arp.ppqn_counter;
			arp.step_position = 0;
    1fd6:	10 92 8b 03 	sts	0x038B, r1
			//now need to set arp.ppqn_counter and arp.step_position based on arp.song_position
			//arp.step_position = //do something to calculate arp step position based on calculated ppqn_counter. Is there enough information to calculate this???
		
		}			
		if (++arp_mode == 5) arp_mode = 0;
    1fda:	80 91 13 03 	lds	r24, 0x0313
    1fde:	8f 5f       	subi	r24, 0xFF	; 255
    1fe0:	80 93 13 03 	sts	0x0313, r24
    1fe4:	85 30       	cpi	r24, 0x05	; 5
    1fe6:	11 f4       	brne	.+4      	; 0x1fec <update_arp_mode+0x62>
    1fe8:	10 92 13 03 	sts	0x0313, r1
		
	}

	//if (arp.clock_source != MIDI_CLOCK) arp.clock_source = INTERNAL_CLOCK;	

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1fec:	90 91 02 03 	lds	r25, 0x0302
    1ff0:	93 7c       	andi	r25, 0xC3	; 195
    1ff2:	90 93 02 03 	sts	0x0302, r25
	
	switch(arp_mode) {
    1ff6:	80 91 13 03 	lds	r24, 0x0313
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	79 f0       	breq	.+30     	; 0x201c <update_arp_mode+0x92>
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	28 f0       	brcs	.+10     	; 0x200c <update_arp_mode+0x82>
    2002:	82 30       	cpi	r24, 0x02	; 2
    2004:	91 f0       	breq	.+36     	; 0x202a <update_arp_mode+0xa0>
    2006:	83 30       	cpi	r24, 0x03	; 3
    2008:	f1 f4       	brne	.+60     	; 0x2046 <update_arp_mode+0xbc>
    200a:	16 c0       	rjmp	.+44     	; 0x2038 <update_arp_mode+0xae>
		
		case 0:
		
			//turn arp off
			arp.mode = OFF;
    200c:	10 92 98 03 	sts	0x0398, r1
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    2010:	80 91 b4 02 	lds	r24, 0x02B4
    2014:	88 23       	and	r24, r24
    2016:	e9 f4       	brne	.+58     	; 0x2052 <update_arp_mode+0xc8>
    2018:	89 98       	cbi	0x11, 1	; 17
    201a:	1b c0       	rjmp	.+54     	; 0x2052 <update_arp_mode+0xc8>
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    201c:	94 62       	ori	r25, 0x24	; 36
    201e:	90 93 02 03 	sts	0x0302, r25
			arp.mode = UP;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	80 93 98 03 	sts	0x0398, r24
			break;	
    2028:	14 c0       	rjmp	.+40     	; 0x2052 <update_arp_mode+0xc8>
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    202a:	94 61       	ori	r25, 0x14	; 20
    202c:	90 93 02 03 	sts	0x0302, r25
			arp.mode = DOWN;
    2030:	82 e0       	ldi	r24, 0x02	; 2
    2032:	80 93 98 03 	sts	0x0398, r24
			break;
    2036:	0d c0       	rjmp	.+26     	; 0x2052 <update_arp_mode+0xc8>
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    2038:	94 63       	ori	r25, 0x34	; 52
    203a:	90 93 02 03 	sts	0x0302, r25
			arp.mode = UP_DOWN;
    203e:	83 e0       	ldi	r24, 0x03	; 3
    2040:	80 93 98 03 	sts	0x0398, r24
			break;
    2044:	06 c0       	rjmp	.+12     	; 0x2052 <update_arp_mode+0xc8>
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    2046:	9c 60       	ori	r25, 0x0C	; 12
    2048:	90 93 02 03 	sts	0x0302, r25
			arp.mode = RANDOM;
    204c:	84 e0       	ldi	r24, 0x04	; 4
    204e:	80 93 98 03 	sts	0x0398, r24
			
					
		
	}
	
	update_arp_sequence(); //update arp sequence with new mode
    2052:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	



}
    2056:	08 95       	ret

00002058 <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    2058:	90 91 83 03 	lds	r25, 0x0383
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    205c:	80 91 85 03 	lds	r24, 0x0385
    2060:	86 95       	lsr	r24
    2062:	86 95       	lsr	r24
    2064:	68 2f       	mov	r22, r24
    2066:	67 95       	ror	r22
    2068:	66 27       	eor	r22, r22
    206a:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    206c:	29 2f       	mov	r18, r25
    206e:	21 70       	andi	r18, 0x01	; 1
    2070:	26 2b       	or	r18, r22
    2072:	69 2f       	mov	r22, r25
    2074:	66 1f       	adc	r22, r22
    2076:	66 27       	eor	r22, r22
    2078:	66 1f       	adc	r22, r22
    207a:	66 0f       	add	r22, r22
    207c:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    207e:	29 2f       	mov	r18, r25
    2080:	26 95       	lsr	r18
    2082:	26 95       	lsr	r18
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	21 70       	andi	r18, 0x01	; 1
    2088:	30 70       	andi	r19, 0x00	; 0
    208a:	d9 01       	movw	r26, r18
    208c:	aa 0f       	add	r26, r26
    208e:	bb 1f       	adc	r27, r27
    2090:	aa 0f       	add	r26, r26
    2092:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    2094:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    2096:	a9 2f       	mov	r26, r25
    2098:	a6 95       	lsr	r26
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	a1 70       	andi	r26, 0x01	; 1
    209e:	b0 70       	andi	r27, 0x00	; 0
    20a0:	fd 01       	movw	r30, r26
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    20ae:	a6 2f       	mov	r26, r22
    20b0:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    20b2:	e9 2f       	mov	r30, r25
    20b4:	e2 95       	swap	r30
    20b6:	ef 70       	andi	r30, 0x0F	; 15
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	e1 70       	andi	r30, 0x01	; 1
    20bc:	f0 70       	andi	r31, 0x00	; 0
    20be:	bf 01       	movw	r22, r30
    20c0:	62 95       	swap	r22
    20c2:	72 95       	swap	r23
    20c4:	70 7f       	andi	r23, 0xF0	; 240
    20c6:	76 27       	eor	r23, r22
    20c8:	60 7f       	andi	r22, 0xF0	; 240
    20ca:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    20cc:	ea 2f       	mov	r30, r26
    20ce:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    20d0:	69 2f       	mov	r22, r25
    20d2:	62 95       	swap	r22
    20d4:	66 95       	lsr	r22
    20d6:	67 70       	andi	r22, 0x07	; 7
    20d8:	70 e0       	ldi	r23, 0x00	; 0
    20da:	61 70       	andi	r22, 0x01	; 1
    20dc:	70 70       	andi	r23, 0x00	; 0
    20de:	ab 01       	movw	r20, r22
    20e0:	44 0f       	add	r20, r20
    20e2:	55 1f       	adc	r21, r21
    20e4:	42 95       	swap	r20
    20e6:	52 95       	swap	r21
    20e8:	50 7f       	andi	r21, 0xF0	; 240
    20ea:	54 27       	eor	r21, r20
    20ec:	40 7f       	andi	r20, 0xF0	; 240
    20ee:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    20f0:	6e 2f       	mov	r22, r30
    20f2:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    20f4:	49 2f       	mov	r20, r25
    20f6:	42 95       	swap	r20
    20f8:	46 95       	lsr	r20
    20fa:	46 95       	lsr	r20
    20fc:	43 70       	andi	r20, 0x03	; 3
    20fe:	50 e0       	ldi	r21, 0x00	; 0
    2100:	41 70       	andi	r20, 0x01	; 1
    2102:	50 70       	andi	r21, 0x00	; 0
    2104:	9a 01       	movw	r18, r20
    2106:	00 24       	eor	r0, r0
    2108:	36 95       	lsr	r19
    210a:	27 95       	ror	r18
    210c:	07 94       	ror	r0
    210e:	36 95       	lsr	r19
    2110:	27 95       	ror	r18
    2112:	07 94       	ror	r0
    2114:	32 2f       	mov	r19, r18
    2116:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    2118:	26 2b       	or	r18, r22
    211a:	20 93 06 03 	sts	0x0306, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    211e:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    2120:	81 95       	neg	r24
    2122:	89 27       	eor	r24, r25
    2124:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    2126:	89 27       	eor	r24, r25
    2128:	0e 94 93 17 	call	0x2f26	; 0x2f26 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    212c:	ed ed       	ldi	r30, 0xDD	; 221
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    2132:	90 91 85 03 	lds	r25, 0x0385
    2136:	96 95       	lsr	r25
    2138:	96 95       	lsr	r25
    213a:	96 95       	lsr	r25
    213c:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    213e:	91 95       	neg	r25
    2140:	80 81       	ld	r24, Z
    2142:	89 27       	eor	r24, r25
    2144:	80 71       	andi	r24, 0x10	; 16
    2146:	82 27       	eor	r24, r18
    2148:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    214a:	e2 e0       	ldi	r30, 0x02	; 2
    214c:	f3 e0       	ldi	r31, 0x03	; 3
    214e:	80 81       	ld	r24, Z
    2150:	98 27       	eor	r25, r24
    2152:	91 70       	andi	r25, 0x01	; 1
    2154:	89 27       	eor	r24, r25
    2156:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    2158:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    215c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    2160:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    2164:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <update_arp_sync>
	update_arp_range();
    2168:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <update_arp_range>
	update_arp_mode();
    216c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    2170:	08 95       	ret

00002172 <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    2176:	90 91 0c 03 	lds	r25, 0x030C
    217a:	95 30       	cpi	r25, 0x05	; 5
    217c:	01 f5       	brne	.+64     	; 0x21be <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    217e:	87 e0       	ldi	r24, 0x07	; 7
    2180:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    2182:	cd ed       	ldi	r28, 0xDD	; 221
    2184:	d0 e0       	ldi	r29, 0x00	; 0
    2186:	88 81       	ld	r24, Y
    2188:	80 62       	ori	r24, 0x20	; 32
    218a:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    218c:	88 81       	ld	r24, Y
    218e:	8f 7d       	andi	r24, 0xDF	; 223
    2190:	88 83       	st	Y, r24
		DATA_BUS = 0;
    2192:	12 b8       	out	0x02, r1	; 2
		
		tune();
    2194:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    2198:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    219a:	88 81       	ld	r24, Y
    219c:	80 62       	ori	r24, 0x20	; 32
    219e:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    21a0:	88 81       	ld	r24, Y
    21a2:	8f 7d       	andi	r24, 0xDF	; 223
    21a4:	88 83       	st	Y, r24
		DATA_BUS = 0;
    21a6:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    21a8:	80 91 03 03 	lds	r24, 0x0303
    21ac:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    21ae:	80 68       	ori	r24, 0x80	; 128
    21b0:	80 93 03 03 	sts	0x0303, r24
		
		setup_system_clock(); //restore system clock settings
    21b4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <setup_system_clock>

		current_patch.mode = MEMORY;
    21b8:	10 92 0c 03 	sts	0x030C, r1
		
		return;
    21bc:	63 c0       	rjmp	.+198    	; 0x2284 <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    21be:	80 91 85 03 	lds	r24, 0x0385
    21c2:	28 2f       	mov	r18, r24
    21c4:	22 95       	swap	r18
    21c6:	26 95       	lsr	r18
    21c8:	26 95       	lsr	r18
    21ca:	23 70       	andi	r18, 0x03	; 3
    21cc:	20 ff       	sbrs	r18, 0
    21ce:	15 c0       	rjmp	.+42     	; 0x21fa <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    21d0:	20 e4       	ldi	r18, 0x40	; 64
    21d2:	82 27       	eor	r24, r18
    21d4:	80 93 85 03 	sts	0x0385, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    21d8:	80 91 07 03 	lds	r24, 0x0307
    21dc:	8f 5f       	subi	r24, 0xFF	; 255
    21de:	80 93 07 03 	sts	0x0307, r24
    21e2:	85 32       	cpi	r24, 0x25	; 37
    21e4:	21 f4       	brne	.+8      	; 0x21ee <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    21e6:	84 e2       	ldi	r24, 0x24	; 36
    21e8:	80 93 07 03 	sts	0x0307, r24
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    21ee:	93 30       	cpi	r25, 0x03	; 3
    21f0:	21 f0       	breq	.+8      	; 0x21fa <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    21f2:	0e 94 16 0b 	call	0x162c	; 0x162c <load_patch>
			update_patch();
    21f6:	0e 94 2c 10 	call	0x2058	; 0x2058 <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    21fa:	80 91 85 03 	lds	r24, 0x0385
    21fe:	98 2f       	mov	r25, r24
    2200:	92 95       	swap	r25
    2202:	96 95       	lsr	r25
    2204:	97 70       	andi	r25, 0x07	; 7
    2206:	90 ff       	sbrs	r25, 0
    2208:	15 c0       	rjmp	.+42     	; 0x2234 <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    220a:	90 e2       	ldi	r25, 0x20	; 32
    220c:	89 27       	eor	r24, r25
    220e:	80 93 85 03 	sts	0x0385, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    2212:	80 91 07 03 	lds	r24, 0x0307
    2216:	81 30       	cpi	r24, 0x01	; 1
    2218:	19 f0       	breq	.+6      	; 0x2220 <update_patch_programmer+0xae>
    221a:	81 50       	subi	r24, 0x01	; 1
    221c:	80 93 07 03 	sts	0x0307, r24
		
		if (current_patch.mode != WRITE) {
    2220:	80 91 0c 03 	lds	r24, 0x030C
    2224:	83 30       	cpi	r24, 0x03	; 3
    2226:	31 f0       	breq	.+12     	; 0x2234 <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    2228:	80 91 07 03 	lds	r24, 0x0307
    222c:	0e 94 16 0b 	call	0x162c	; 0x162c <load_patch>
			update_patch();
    2230:	0e 94 2c 10 	call	0x2058	; 0x2058 <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    2234:	80 91 85 03 	lds	r24, 0x0385
    2238:	98 2f       	mov	r25, r24
    223a:	92 95       	swap	r25
    223c:	9f 70       	andi	r25, 0x0F	; 15
    223e:	90 ff       	sbrs	r25, 0
    2240:	15 c0       	rjmp	.+42     	; 0x226c <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    2242:	90 e1       	ldi	r25, 0x10	; 16
    2244:	89 27       	eor	r24, r25
    2246:	80 93 85 03 	sts	0x0385, r24
		if (current_patch.mode != WRITE) {
    224a:	90 91 0c 03 	lds	r25, 0x030C
    224e:	93 30       	cpi	r25, 0x03	; 3
    2250:	49 f0       	breq	.+18     	; 0x2264 <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    2252:	8f 77       	andi	r24, 0x7F	; 127
    2254:	80 93 85 03 	sts	0x0385, r24
			current_patch.mode = WRITE;
    2258:	83 e0       	ldi	r24, 0x03	; 3
    225a:	80 93 0c 03 	sts	0x030C, r24
			lock_pots();
    225e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <lock_pots>
    2262:	04 c0       	rjmp	.+8      	; 0x226c <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    2264:	80 91 07 03 	lds	r24, 0x0307
    2268:	0e 94 23 09 	call	0x1246	; 0x1246 <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    226c:	80 91 85 03 	lds	r24, 0x0385
    2270:	88 23       	and	r24, r24
    2272:	44 f4       	brge	.+16     	; 0x2284 <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    2274:	80 68       	ori	r24, 0x80	; 128
    2276:	80 93 85 03 	sts	0x0385, r24
		current_patch.mode = MANUAL;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	80 93 0c 03 	sts	0x030C, r24
		unlock_pots();
    2280:	0e 94 12 09 	call	0x1224	; 0x1224 <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	08 95       	ret

0000228a <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    228a:	88 ed       	ldi	r24, 0xD8	; 216
    228c:	91 e0       	ldi	r25, 0x01	; 1
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2296:	81 ee       	ldi	r24, 0xE1	; 225
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    22a2:	82 ee       	ldi	r24, 0xE2	; 226
    22a4:	91 e0       	ldi	r25, 0x01	; 1
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    22ae:	87 eb       	ldi	r24, 0xB7	; 183
    22b0:	92 e0       	ldi	r25, 0x02	; 2
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    22ba:	8a ed       	ldi	r24, 0xDA	; 218
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    22c6:	8f ed       	ldi	r24, 0xDF	; 223
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	70 e0       	ldi	r23, 0x00	; 0
    22ce:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    22d2:	80 ee       	ldi	r24, 0xE0	; 224
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	70 e0       	ldi	r23, 0x00	; 0
    22da:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    22de:	81 ed       	ldi	r24, 0xD1	; 209
    22e0:	91 e0       	ldi	r25, 0x01	; 1
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    22ea:	86 ed       	ldi	r24, 0xD6	; 214
    22ec:	91 e0       	ldi	r25, 0x01	; 1
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    22f6:	82 ed       	ldi	r24, 0xD2	; 210
    22f8:	91 e0       	ldi	r25, 0x01	; 1
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2302:	83 ed       	ldi	r24, 0xD3	; 211
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	70 e0       	ldi	r23, 0x00	; 0
    230a:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    230e:	84 ed       	ldi	r24, 0xD4	; 212
    2310:	91 e0       	ldi	r25, 0x01	; 1
    2312:	6f ef       	ldi	r22, 0xFF	; 255
    2314:	7f e3       	ldi	r23, 0x3F	; 63
    2316:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    231a:	85 ed       	ldi	r24, 0xD5	; 213
    231c:	91 e0       	ldi	r25, 0x01	; 1
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    2326:	89 ed       	ldi	r24, 0xD9	; 217
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	60 e0       	ldi	r22, 0x00	; 0
    232c:	70 e0       	ldi	r23, 0x00	; 0
    232e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2332:	8e ec       	ldi	r24, 0xCE	; 206
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	60 e0       	ldi	r22, 0x00	; 0
    2338:	70 e0       	ldi	r23, 0x00	; 0
    233a:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    233e:	8c ec       	ldi	r24, 0xCC	; 204
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    234a:	8a ec       	ldi	r24, 0xCA	; 202
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	6f ef       	ldi	r22, 0xFF	; 255
    2350:	7f e3       	ldi	r23, 0x3F	; 63
    2352:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    2356:	88 ec       	ldi	r24, 0xC8	; 200
    2358:	91 e0       	ldi	r25, 0x01	; 1
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    2362:	80 ed       	ldi	r24, 0xD0	; 208
    2364:	91 e0       	ldi	r25, 0x01	; 1
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    236e:	83 ee       	ldi	r24, 0xE3	; 227
    2370:	91 e0       	ldi	r25, 0x01	; 1
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	70 e0       	ldi	r23, 0x00	; 0
    2376:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    237a:	84 ee       	ldi	r24, 0xE4	; 228
    237c:	91 e0       	ldi	r25, 0x01	; 1
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	70 e0       	ldi	r23, 0x00	; 0
    2382:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
}	
    2386:	08 95       	ret

00002388 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    2388:	2f 92       	push	r2
    238a:	3f 92       	push	r3
    238c:	4f 92       	push	r4
    238e:	5f 92       	push	r5
    2390:	6f 92       	push	r6
    2392:	7f 92       	push	r7
    2394:	8f 92       	push	r8
    2396:	9f 92       	push	r9
    2398:	af 92       	push	r10
    239a:	bf 92       	push	r11
    239c:	cf 92       	push	r12
    239e:	df 92       	push	r13
    23a0:	ef 92       	push	r14
    23a2:	ff 92       	push	r15
    23a4:	0f 93       	push	r16
    23a6:	1f 93       	push	r17
    23a8:	cf 93       	push	r28
    23aa:	df 93       	push	r29
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	2c 97       	sbiw	r28, 0x0c	; 12
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	18 2f       	mov	r17, r24
    23be:	78 87       	std	Y+8, r23	; 0x08
    23c0:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    23c2:	80 91 80 03 	lds	r24, 0x0380
    23c6:	83 60       	ori	r24, 0x03	; 3
    23c8:	80 93 80 03 	sts	0x0380, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    23cc:	0e 94 45 11 	call	0x228a	; 0x228a <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    23d0:	10 92 7f 03 	sts	0x037F, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    23d4:	1f 30       	cpi	r17, 0x0F	; 15
    23d6:	e9 f4       	brne	.+58     	; 0x2412 <set_vco_init_cv+0x8a>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    23d8:	0f 2e       	mov	r0, r31
    23da:	f6 ee       	ldi	r31, 0xE6	; 230
    23dc:	4f 2e       	mov	r4, r31
    23de:	f1 e0       	ldi	r31, 0x01	; 1
    23e0:	5f 2e       	mov	r5, r31
    23e2:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    23e4:	0f 2e       	mov	r0, r31
    23e6:	fe ed       	ldi	r31, 0xDE	; 222
    23e8:	2f 2e       	mov	r2, r31
    23ea:	f1 e0       	ldi	r31, 0x01	; 1
    23ec:	3f 2e       	mov	r3, r31
    23ee:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    23f0:	23 ee       	ldi	r18, 0xE3	; 227
    23f2:	31 e0       	ldi	r19, 0x01	; 1
    23f4:	3a 83       	std	Y+2, r19	; 0x02
    23f6:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    23f8:	0f 2e       	mov	r0, r31
    23fa:	fc ed       	ldi	r31, 0xDC	; 220
    23fc:	ef 2e       	mov	r14, r31
    23fe:	f1 e0       	ldi	r31, 0x01	; 1
    2400:	ff 2e       	mov	r15, r31
    2402:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		vco_display_num = 1;
		eeprom_addr = &vco1_init_cv_eeprom;
    2404:	82 e7       	ldi	r24, 0x72	; 114
    2406:	96 e0       	ldi	r25, 0x06	; 6
    2408:	9a 87       	std	Y+10, r25	; 0x0a
    240a:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    240c:	81 e0       	ldi	r24, 0x01	; 1
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		vco_display_num = 1;
    240e:	11 e0       	ldi	r17, 0x01	; 1
    2410:	1c c0       	rjmp	.+56     	; 0x244a <set_vco_init_cv+0xc2>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2412:	0f 2e       	mov	r0, r31
    2414:	f5 ee       	ldi	r31, 0xE5	; 229
    2416:	4f 2e       	mov	r4, r31
    2418:	f1 e0       	ldi	r31, 0x01	; 1
    241a:	5f 2e       	mov	r5, r31
    241c:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    241e:	0f 2e       	mov	r0, r31
    2420:	f7 ed       	ldi	r31, 0xD7	; 215
    2422:	2f 2e       	mov	r2, r31
    2424:	f1 e0       	ldi	r31, 0x01	; 1
    2426:	3f 2e       	mov	r3, r31
    2428:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    242a:	e4 ee       	ldi	r30, 0xE4	; 228
    242c:	f1 e0       	ldi	r31, 0x01	; 1
    242e:	fa 83       	std	Y+2, r31	; 0x02
    2430:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2432:	0f 2e       	mov	r0, r31
    2434:	fd ed       	ldi	r31, 0xDD	; 221
    2436:	ef 2e       	mov	r14, r31
    2438:	f1 e0       	ldi	r31, 0x01	; 1
    243a:	ff 2e       	mov	r15, r31
    243c:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		vco_display_num = 2;
		eeprom_addr = &vco2_init_cv_eeprom;
    243e:	20 e7       	ldi	r18, 0x70	; 112
    2440:	36 e0       	ldi	r19, 0x06	; 6
    2442:	3a 87       	std	Y+10, r19	; 0x0a
    2444:	29 87       	std	Y+9, r18	; 0x09
		vco_display_num = 1;
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    2446:	80 e4       	ldi	r24, 0x40	; 64
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		vco_display_num = 2;
    2448:	12 e0       	ldi	r17, 0x02	; 2
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    244a:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    244c:	ed ed       	ldi	r30, 0xDD	; 221
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	80 64       	ori	r24, 0x40	; 64
    2454:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2456:	80 81       	ld	r24, Z
    2458:	8f 7b       	andi	r24, 0xBF	; 191
    245a:	80 83       	st	Z, r24
	DATA_BUS = 0;
    245c:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    245e:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2460:	84 b5       	in	r24, 0x24	; 36
    2462:	8f 60       	ori	r24, 0x0F	; 15
    2464:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    246a:	ee e6       	ldi	r30, 0x6E	; 110
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	90 81       	ld	r25, Z
    2470:	92 60       	ori	r25, 0x02	; 2
    2472:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    2474:	80 93 81 03 	sts	0x0381, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    2478:	8d e0       	ldi	r24, 0x0D	; 13
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9c 83       	std	Y+4, r25	; 0x04
    247e:	8b 83       	std	Y+3, r24	; 0x03
		count_finished = FALSE;
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    2480:	0f e0       	ldi	r16, 0x0F	; 15
			
			update_display(vco_display_num, DEC);
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    2482:	0f 2e       	mov	r0, r31
    2484:	f8 ed       	ldi	r31, 0xD8	; 216
    2486:	cf 2e       	mov	r12, r31
    2488:	f1 e0       	ldi	r31, 0x01	; 1
    248a:	df 2e       	mov	r13, r31
    248c:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    248e:	0f 2e       	mov	r0, r31
    2490:	f4 ed       	ldi	r31, 0xD4	; 212
    2492:	af 2e       	mov	r10, r31
    2494:	f1 e0       	ldi	r31, 0x01	; 1
    2496:	bf 2e       	mov	r11, r31
    2498:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    249a:	0f 2e       	mov	r0, r31
    249c:	fa ec       	ldi	r31, 0xCA	; 202
    249e:	8f 2e       	mov	r8, r31
    24a0:	f1 e0       	ldi	r31, 0x01	; 1
    24a2:	9f 2e       	mov	r9, r31
    24a4:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    24a6:	0f 2e       	mov	r0, r31
    24a8:	fb ec       	ldi	r31, 0xCB	; 203
    24aa:	6f 2e       	mov	r6, r31
    24ac:	f1 e0       	ldi	r31, 0x01	; 1
    24ae:	7f 2e       	mov	r7, r31
    24b0:	f0 2d       	mov	r31, r0
		//WDTCR = 0x00;
		wdt_disable();
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
		no_overflow = TRUE;
    24b2:	e0 e0       	ldi	r30, 0x00	; 0
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	fc 87       	std	Y+12, r31	; 0x0c
    24b8:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    24ba:	21 e0       	ldi	r18, 0x01	; 1
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	0b 80       	ldd	r0, Y+3	; 0x03
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <set_vco_init_cv+0x13e>
    24c2:	22 0f       	add	r18, r18
    24c4:	33 1f       	adc	r19, r19
    24c6:	0a 94       	dec	r0
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <set_vco_init_cv+0x13a>
    24ca:	3e 83       	std	Y+6, r19	; 0x06
    24cc:	2d 83       	std	Y+5, r18	; 0x05
    24ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    24d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    24d2:	82 2b       	or	r24, r18
    24d4:	93 2b       	or	r25, r19
    24d6:	9c 87       	std	Y+12, r25	; 0x0c
    24d8:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    24da:	c7 01       	movw	r24, r14
    24dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24de:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e0:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
		
		
		count_finished = FALSE;
    24e4:	10 92 7f 03 	sts	0x037F, r1
		period_counter = 0;
    24e8:	10 92 82 03 	sts	0x0382, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    24ec:	e8 e1       	ldi	r30, 0x18	; 24
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	a8 95       	wdr
    24f6:	e0 93 60 00 	sts	0x0060, r30
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	00 93 60 00 	sts	0x0060, r16
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    2500:	80 91 7f 03 	lds	r24, 0x037F
    2504:	88 23       	and	r24, r24
    2506:	91 f5       	brne	.+100    	; 0x256c <set_vco_init_cv+0x1e4>
			
			update_display(vco_display_num, DEC);
    2508:	81 2f       	mov	r24, r17
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	0e 94 3d 03 	call	0x67a	; 0x67a <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    2512:	c7 01       	movw	r24, r14
    2514:	6b 85       	ldd	r22, Y+11	; 0x0b
    2516:	7c 85       	ldd	r23, Y+12	; 0x0c
    2518:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    251c:	c1 01       	movw	r24, r2
    251e:	6f ef       	ldi	r22, 0xFF	; 255
    2520:	7f e3       	ldi	r23, 0x3F	; 63
    2522:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    2526:	c6 01       	movw	r24, r12
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    2530:	c5 01       	movw	r24, r10
    2532:	6f ef       	ldi	r22, 0xFF	; 255
    2534:	7f e3       	ldi	r23, 0x3F	; 63
    2536:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    253a:	c4 01       	movw	r24, r8
    253c:	6f ef       	ldi	r22, 0xFF	; 255
    253e:	7f e3       	ldi	r23, 0x3F	; 63
    2540:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    2544:	c3 01       	movw	r24, r6
    2546:	6f ef       	ldi	r22, 0xFF	; 255
    2548:	7f e3       	ldi	r23, 0x3F	; 63
    254a:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	9a 81       	ldd	r25, Y+2	; 0x02
    2552:	6f ef       	ldi	r22, 0xFF	; 255
    2554:	7f e3       	ldi	r23, 0x3F	; 63
    2556:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    255a:	c2 01       	movw	r24, r4
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    2564:	80 91 7f 03 	lds	r24, 0x037F
    2568:	88 23       	and	r24, r24
    256a:	71 f2       	breq	.-100    	; 0x2508 <set_vco_init_cv+0x180>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    256c:	98 e1       	ldi	r25, 0x18	; 24
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	90 93 60 00 	sts	0x0060, r25
    2576:	10 92 60 00 	sts	0x0060, r1
    257a:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    257c:	80 91 7d 03 	lds	r24, 0x037D
    2580:	90 91 7e 03 	lds	r25, 0x037E
    2584:	ef 81       	ldd	r30, Y+7	; 0x07
    2586:	f8 85       	ldd	r31, Y+8	; 0x08
    2588:	e8 17       	cp	r30, r24
    258a:	f9 07       	cpc	r31, r25
    258c:	20 f0       	brcs	.+8      	; 0x2596 <set_vco_init_cv+0x20e>
    258e:	80 91 af 02 	lds	r24, 0x02AF
    2592:	88 23       	and	r24, r24
    2594:	51 f4       	brne	.+20     	; 0x25aa <set_vco_init_cv+0x222>
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	9e 81       	ldd	r25, Y+6	; 0x06
    259a:	80 95       	com	r24
    259c:	90 95       	com	r25
    259e:	2b 85       	ldd	r18, Y+11	; 0x0b
    25a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    25a2:	28 23       	and	r18, r24
    25a4:	39 23       	and	r19, r25
    25a6:	3c 87       	std	Y+12, r19	; 0x0c
    25a8:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    25aa:	31 e0       	ldi	r19, 0x01	; 1
    25ac:	30 93 af 02 	sts	0x02AF, r19
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	9c 81       	ldd	r25, Y+4	; 0x04
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
    25ba:	ef ef       	ldi	r30, 0xFF	; 255
    25bc:	8f 3f       	cpi	r24, 0xFF	; 255
    25be:	9e 07       	cpc	r25, r30
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <set_vco_init_cv+0x23c>
    25c2:	7b cf       	rjmp	.-266    	; 0x24ba <set_vco_init_cv+0x132>
    25c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    25c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    25c8:	3e 83       	std	Y+6, r19	; 0x06
    25ca:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    25cc:	88 ec       	ldi	r24, 0xC8	; 200
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    25d8:	89 ec       	ldi	r24, 0xC9	; 201
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    25e4:	84 ed       	ldi	r24, 0xD4	; 212
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    25f0:	88 ed       	ldi	r24, 0xD8	; 216
    25f2:	91 e0       	ldi	r25, 0x01	; 1
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    25fc:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    25fe:	ee e6       	ldi	r30, 0x6E	; 110
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	8d 7f       	andi	r24, 0xFD	; 253
    2606:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2608:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    260a:	89 85       	ldd	r24, Y+9	; 0x09
    260c:	9a 85       	ldd	r25, Y+10	; 0x0a
    260e:	6d 81       	ldd	r22, Y+5	; 0x05
    2610:	7e 81       	ldd	r23, Y+6	; 0x06
    2612:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    2616:	8d 81       	ldd	r24, Y+5	; 0x05
    2618:	9e 81       	ldd	r25, Y+6	; 0x06
    261a:	2c 96       	adiw	r28, 0x0c	; 12
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	df 90       	pop	r13
    2634:	cf 90       	pop	r12
    2636:	bf 90       	pop	r11
    2638:	af 90       	pop	r10
    263a:	9f 90       	pop	r9
    263c:	8f 90       	pop	r8
    263e:	7f 90       	pop	r7
    2640:	6f 90       	pop	r6
    2642:	5f 90       	pop	r5
    2644:	4f 90       	pop	r4
    2646:	3f 90       	pop	r3
    2648:	2f 90       	pop	r2
    264a:	08 95       	ret

0000264c <tune_8ths>:



void tune_8ths(uint8_t vco) {
    264c:	2f 92       	push	r2
    264e:	3f 92       	push	r3
    2650:	4f 92       	push	r4
    2652:	5f 92       	push	r5
    2654:	6f 92       	push	r6
    2656:	7f 92       	push	r7
    2658:	8f 92       	push	r8
    265a:	9f 92       	push	r9
    265c:	af 92       	push	r10
    265e:	bf 92       	push	r11
    2660:	cf 92       	push	r12
    2662:	df 92       	push	r13
    2664:	ef 92       	push	r14
    2666:	ff 92       	push	r15
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	c0 54       	subi	r28, 0x40	; 64
    2676:	d0 40       	sbci	r29, 0x00	; 0
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    2684:	de 01       	movw	r26, r28
    2686:	11 96       	adiw	r26, 0x01	; 1
    2688:	e0 e3       	ldi	r30, 0x30	; 48
    268a:	f2 e0       	ldi	r31, 0x02	; 2
    268c:	80 e3       	ldi	r24, 0x30	; 48
    268e:	01 90       	ld	r0, Z+
    2690:	0d 92       	st	X+, r0
    2692:	81 50       	subi	r24, 0x01	; 1
    2694:	e1 f7       	brne	.-8      	; 0x268e <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    2696:	0e 94 45 11 	call	0x228a	; 0x228a <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    269a:	0f 30       	cpi	r16, 0x0F	; 15
    269c:	11 f5       	brne	.+68     	; 0x26e2 <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    269e:	40 90 7a 03 	lds	r4, 0x037A
    26a2:	50 90 7b 03 	lds	r5, 0x037B
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    26a6:	0f 2e       	mov	r0, r31
    26a8:	f6 ee       	ldi	r31, 0xE6	; 230
    26aa:	8f 2e       	mov	r8, r31
    26ac:	f1 e0       	ldi	r31, 0x01	; 1
    26ae:	9f 2e       	mov	r9, r31
    26b0:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    26b2:	0f 2e       	mov	r0, r31
    26b4:	fe ed       	ldi	r31, 0xDE	; 222
    26b6:	2f 2e       	mov	r2, r31
    26b8:	f1 e0       	ldi	r31, 0x01	; 1
    26ba:	3f 2e       	mov	r3, r31
    26bc:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    26be:	23 ee       	ldi	r18, 0xE3	; 227
    26c0:	31 e0       	ldi	r19, 0x01	; 1
    26c2:	3a ab       	sts	0x5a, r19
    26c4:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    26c6:	0f 2e       	mov	r0, r31
    26c8:	fc ed       	ldi	r31, 0xDC	; 220
    26ca:	6f 2e       	mov	r6, r31
    26cc:	f1 e0       	ldi	r31, 0x01	; 1
    26ce:	7f 2e       	mov	r7, r31
    26d0:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    26d2:	06 e5       	ldi	r16, 0x56	; 86
    26d4:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    26d6:	cc 24       	eor	r12, r12
    26d8:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    26da:	ee 24       	eor	r14, r14
    26dc:	68 94       	set
    26de:	e1 f8       	bld	r14, 1
    26e0:	22 c0       	rjmp	.+68     	; 0x2726 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    26e2:	40 90 78 03 	lds	r4, 0x0378
    26e6:	50 90 79 03 	lds	r5, 0x0379
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    26ea:	0f 2e       	mov	r0, r31
    26ec:	f5 ee       	ldi	r31, 0xE5	; 229
    26ee:	8f 2e       	mov	r8, r31
    26f0:	f1 e0       	ldi	r31, 0x01	; 1
    26f2:	9f 2e       	mov	r9, r31
    26f4:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    26f6:	0f 2e       	mov	r0, r31
    26f8:	f7 ed       	ldi	r31, 0xD7	; 215
    26fa:	2f 2e       	mov	r2, r31
    26fc:	f1 e0       	ldi	r31, 0x01	; 1
    26fe:	3f 2e       	mov	r3, r31
    2700:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    2702:	44 ee       	ldi	r20, 0xE4	; 228
    2704:	51 e0       	ldi	r21, 0x01	; 1
    2706:	5a ab       	sts	0x5a, r21
    2708:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    270a:	0f 2e       	mov	r0, r31
    270c:	fd ed       	ldi	r31, 0xDD	; 221
    270e:	6f 2e       	mov	r6, r31
    2710:	f1 e0       	ldi	r31, 0x01	; 1
    2712:	7f 2e       	mov	r7, r31
    2714:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    2716:	04 e3       	ldi	r16, 0x34	; 52
    2718:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    271a:	cc 24       	eor	r12, r12
    271c:	68 94       	set
    271e:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    2720:	ee 24       	eor	r14, r14
    2722:	68 94       	set
    2724:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    2726:	c3 01       	movw	r24, r6
    2728:	b2 01       	movw	r22, r4
    272a:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    272e:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2730:	ed ed       	ldi	r30, 0xDD	; 221
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	80 64       	ori	r24, 0x40	; 64
    2738:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    273a:	80 81       	ld	r24, Z
    273c:	8f 7b       	andi	r24, 0xBF	; 191
    273e:	80 83       	st	Z, r24
		DATA_BUS = 0;
    2740:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    2742:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	80 93 81 03 	sts	0x0381, r24
		
		compare_match_counter = 0;	
    274a:	10 92 7c 03 	sts	0x037C, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    274e:	8c 2d       	mov	r24, r12
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	24 e6       	ldi	r18, 0x64	; 100
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	82 9f       	mul	r24, r18
    2758:	d0 01       	movw	r26, r0
    275a:	83 9f       	mul	r24, r19
    275c:	b0 0d       	add	r27, r0
    275e:	92 9f       	mul	r25, r18
    2760:	b0 0d       	add	r27, r0
    2762:	11 24       	eor	r1, r1
    2764:	bc ab       	sts	0x5c, r27
    2766:	ab ab       	sts	0x5b, r26
    2768:	fe 01       	movw	r30, r28
    276a:	31 96       	adiw	r30, 0x01	; 1
    276c:	fc af       	sts	0x7c, r31
    276e:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    2770:	98 01       	movw	r18, r16
    2772:	2e 5f       	subi	r18, 0xFE	; 254
    2774:	3f 4f       	sbci	r19, 0xFF	; 255
    2776:	21 96       	adiw	r28, 0x01	; 1
    2778:	3f af       	sts	0x7f, r19
    277a:	2e af       	sts	0x7e, r18
    277c:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    277e:	1e ae       	sts	0xbe, r17
    2780:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2782:	0f 2e       	mov	r0, r31
    2784:	f8 ed       	ldi	r31, 0xD8	; 216
    2786:	ef 2e       	mov	r14, r31
    2788:	f1 e0       	ldi	r31, 0x01	; 1
    278a:	ff 2e       	mov	r15, r31
    278c:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    278e:	0f 2e       	mov	r0, r31
    2790:	f4 ed       	ldi	r31, 0xD4	; 212
    2792:	cf 2e       	mov	r12, r31
    2794:	f1 e0       	ldi	r31, 0x01	; 1
    2796:	df 2e       	mov	r13, r31
    2798:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    279a:	0f 2e       	mov	r0, r31
    279c:	fa ec       	ldi	r31, 0xCA	; 202
    279e:	af 2e       	mov	r10, r31
    27a0:	f1 e0       	ldi	r31, 0x01	; 1
    27a2:	bf 2e       	mov	r11, r31
    27a4:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    27a6:	eb ad       	sts	0x6b, r30
    27a8:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    27aa:	80 81       	ld	r24, Z
    27ac:	80 93 81 03 	sts	0x0381, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    27b0:	84 b5       	in	r24, 0x24	; 36
    27b2:	8f 60       	ori	r24, 0x0F	; 15
    27b4:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    27ba:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    27bc:	4d ad       	sts	0x6d, r20
    27be:	5e ad       	sts	0x6e, r21
    27c0:	43 30       	cpi	r20, 0x03	; 3
    27c2:	51 05       	cpc	r21, r1
    27c4:	24 f4       	brge	.+8      	; 0x27ce <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    27c6:	83 e0       	ldi	r24, 0x03	; 3
    27c8:	80 93 80 03 	sts	0x0380, r24
    27cc:	03 c0       	rjmp	.+6      	; 0x27d4 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    27ce:	82 e0       	ldi	r24, 0x02	; 2
    27d0:	80 93 80 03 	sts	0x0380, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    27d4:	81 81       	ldd	r24, Z+1	; 0x01
    27d6:	92 81       	ldd	r25, Z+2	; 0x02
    27d8:	9a af       	sts	0x7a, r25
    27da:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    27dc:	ad e0       	ldi	r26, 0x0D	; 13
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	be ab       	sts	0x5e, r27
    27e2:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    27e4:	00 e0       	ldi	r16, 0x00	; 0
    27e6:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    27e8:	e1 e0       	ldi	r30, 0x01	; 1
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	0d a8       	sts	0x8d, r16
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <tune_8ths+0x1a8>
    27f0:	ee 0f       	add	r30, r30
    27f2:	ff 1f       	adc	r31, r31
    27f4:	0a 94       	dec	r0
    27f6:	e2 f7       	brpl	.-8      	; 0x27f0 <tune_8ths+0x1a4>
    27f8:	f8 af       	sts	0x78, r31
    27fa:	ef ab       	sts	0x5f, r30
    27fc:	0e 2b       	or	r16, r30
    27fe:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    2800:	ae e6       	ldi	r26, 0x6E	; 110
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	8c 91       	ld	r24, X
    2806:	8d 7f       	andi	r24, 0xFD	; 253
    2808:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    280a:	c4 01       	movw	r24, r8
    280c:	b8 01       	movw	r22, r16
    280e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2812:	e3 ef       	ldi	r30, 0xF3	; 243
    2814:	f1 e0       	ldi	r31, 0x01	; 1
    2816:	31 97       	sbiw	r30, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <tune_8ths+0x1ca>
    281a:	00 c0       	rjmp	.+0      	; 0x281c <tune_8ths+0x1d0>
    281c:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    281e:	ae e6       	ldi	r26, 0x6E	; 110
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	8c 91       	ld	r24, X
    2824:	82 60       	ori	r24, 0x02	; 2
    2826:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    2828:	10 92 7f 03 	sts	0x037F, r1
				period_counter = 0;
    282c:	10 92 82 03 	sts	0x0382, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    2830:	e8 e1       	ldi	r30, 0x18	; 24
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	2f e0       	ldi	r18, 0x0F	; 15
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	a8 95       	wdr
    283c:	e0 93 60 00 	sts	0x0060, r30
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    2846:	80 91 7f 03 	lds	r24, 0x037F
    284a:	88 23       	and	r24, r24
    284c:	81 f5       	brne	.+96     	; 0x28ae <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    284e:	80 91 81 03 	lds	r24, 0x0381
    2852:	4b a9       	sts	0x4b, r20
    2854:	5c a9       	sts	0x4c, r21
    2856:	48 0f       	add	r20, r24
    2858:	51 1d       	adc	r21, r1
    285a:	ca 01       	movw	r24, r20
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	0e 94 3d 03 	call	0x67a	; 0x67a <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    2862:	c3 01       	movw	r24, r6
    2864:	b2 01       	movw	r22, r4
    2866:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    286a:	c4 01       	movw	r24, r8
    286c:	b8 01       	movw	r22, r16
    286e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2872:	c7 01       	movw	r24, r14
    2874:	60 e0       	ldi	r22, 0x00	; 0
    2876:	70 e0       	ldi	r23, 0x00	; 0
    2878:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    287c:	c6 01       	movw	r24, r12
    287e:	6f ef       	ldi	r22, 0xFF	; 255
    2880:	7f e3       	ldi	r23, 0x3F	; 63
    2882:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2886:	c5 01       	movw	r24, r10
    2888:	6f ef       	ldi	r22, 0xFF	; 255
    288a:	7f e3       	ldi	r23, 0x3F	; 63
    288c:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    2890:	c1 01       	movw	r24, r2
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	70 e2       	ldi	r23, 0x20	; 32
    2896:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    289a:	89 a9       	sts	0x49, r24
    289c:	9a a9       	sts	0x4a, r25
    289e:	6f ef       	ldi	r22, 0xFF	; 255
    28a0:	7f e3       	ldi	r23, 0x3F	; 63
    28a2:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    28a6:	80 91 7f 03 	lds	r24, 0x037F
    28aa:	88 23       	and	r24, r24
    28ac:	81 f2       	breq	.-96     	; 0x284e <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    28ae:	58 e1       	ldi	r21, 0x18	; 24
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	50 93 60 00 	sts	0x0060, r21
    28b8:	10 92 60 00 	sts	0x0060, r1
    28bc:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    28be:	80 91 7d 03 	lds	r24, 0x037D
    28c2:	90 91 7e 03 	lds	r25, 0x037E
    28c6:	a9 ad       	sts	0x69, r26
    28c8:	ba ad       	sts	0x6a, r27
    28ca:	a8 17       	cp	r26, r24
    28cc:	b9 07       	cpc	r27, r25
    28ce:	50 f0       	brcs	.+20     	; 0x28e4 <tune_8ths+0x298>
    28d0:	80 91 af 02 	lds	r24, 0x02AF
    28d4:	81 30       	cpi	r24, 0x01	; 1
    28d6:	31 f4       	brne	.+12     	; 0x28e4 <tune_8ths+0x298>
    28d8:	8f a9       	sts	0x4f, r24
    28da:	98 ad       	sts	0x68, r25
    28dc:	80 95       	com	r24
    28de:	90 95       	com	r25
    28e0:	08 23       	and	r16, r24
    28e2:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    28e4:	80 91 7d 03 	lds	r24, 0x037D
    28e8:	90 91 7e 03 	lds	r25, 0x037E
    28ec:	e9 ad       	sts	0x69, r30
    28ee:	fa ad       	sts	0x6a, r31
    28f0:	8e 17       	cp	r24, r30
    28f2:	9f 07       	cpc	r25, r31
    28f4:	21 f4       	brne	.+8      	; 0x28fe <tune_8ths+0x2b2>
    28f6:	80 91 af 02 	lds	r24, 0x02AF
    28fa:	81 30       	cpi	r24, 0x01	; 1
    28fc:	71 f0       	breq	.+28     	; 0x291a <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    28fe:	f1 e0       	ldi	r31, 0x01	; 1
    2900:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2904:	2d a9       	sts	0x4d, r18
    2906:	3e a9       	sts	0x4e, r19
    2908:	21 50       	subi	r18, 0x01	; 1
    290a:	30 40       	sbci	r19, 0x00	; 0
    290c:	3e ab       	sts	0x5e, r19
    290e:	2d ab       	sts	0x5d, r18
    2910:	4f ef       	ldi	r20, 0xFF	; 255
    2912:	2f 3f       	cpi	r18, 0xFF	; 255
    2914:	34 07       	cpc	r19, r20
    2916:	09 f0       	breq	.+2      	; 0x291a <tune_8ths+0x2ce>
    2918:	67 cf       	rjmp	.-306    	; 0x27e8 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    291a:	21 96       	adiw	r28, 0x01	; 1
    291c:	ae ad       	sts	0x6e, r26
    291e:	bf ad       	sts	0x6f, r27
    2920:	21 97       	sbiw	r28, 0x01	; 1
    2922:	0d 93       	st	X+, r16
    2924:	1d 93       	st	X+, r17
    2926:	21 96       	adiw	r28, 0x01	; 1
    2928:	bf af       	sts	0x7f, r27
    292a:	ae af       	sts	0x7e, r26
    292c:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    292e:	ee e6       	ldi	r30, 0x6E	; 110
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	8d 7f       	andi	r24, 0xFD	; 253
    2936:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    2938:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    293a:	2d ad       	sts	0x6d, r18
    293c:	3e ad       	sts	0x6e, r19
    293e:	2f 5f       	subi	r18, 0xFF	; 255
    2940:	3f 4f       	sbci	r19, 0xFF	; 255
    2942:	3e af       	sts	0x7e, r19
    2944:	2d af       	sts	0x7d, r18
    2946:	4b ad       	sts	0x6b, r20
    2948:	5c ad       	sts	0x6c, r21
    294a:	4d 5f       	subi	r20, 0xFD	; 253
    294c:	5f 4f       	sbci	r21, 0xFF	; 255
    294e:	5c af       	sts	0x7c, r21
    2950:	4b af       	sts	0x7b, r20
    2952:	20 31       	cpi	r18, 0x10	; 16
    2954:	31 05       	cpc	r19, r1
    2956:	09 f0       	breq	.+2      	; 0x295a <tune_8ths+0x30e>
    2958:	26 cf       	rjmp	.-436    	; 0x27a6 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    295a:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    295c:	c0 5c       	subi	r28, 0xC0	; 192
    295e:	df 4f       	sbci	r29, 0xFF	; 255
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	1f 91       	pop	r17
    2970:	0f 91       	pop	r16
    2972:	ff 90       	pop	r15
    2974:	ef 90       	pop	r14
    2976:	df 90       	pop	r13
    2978:	cf 90       	pop	r12
    297a:	bf 90       	pop	r11
    297c:	af 90       	pop	r10
    297e:	9f 90       	pop	r9
    2980:	8f 90       	pop	r8
    2982:	7f 90       	pop	r7
    2984:	6f 90       	pop	r6
    2986:	5f 90       	pop	r5
    2988:	4f 90       	pop	r4
    298a:	3f 90       	pop	r3
    298c:	2f 90       	pop	r2
    298e:	08 95       	ret

00002990 <tune_filter>:
	
void tune_filter(void) {
    2990:	2f 92       	push	r2
    2992:	3f 92       	push	r3
    2994:	4f 92       	push	r4
    2996:	5f 92       	push	r5
    2998:	6f 92       	push	r6
    299a:	7f 92       	push	r7
    299c:	8f 92       	push	r8
    299e:	9f 92       	push	r9
    29a0:	af 92       	push	r10
    29a2:	bf 92       	push	r11
    29a4:	cf 92       	push	r12
    29a6:	df 92       	push	r13
    29a8:	ef 92       	push	r14
    29aa:	ff 92       	push	r15
    29ac:	0f 93       	push	r16
    29ae:	1f 93       	push	r17
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	e9 97       	sbiw	r28, 0x39	; 57
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    29c4:	de 01       	movw	r26, r28
    29c6:	11 96       	adiw	r26, 0x01	; 1
    29c8:	e0 e6       	ldi	r30, 0x60	; 96
    29ca:	f2 e0       	ldi	r31, 0x02	; 2
    29cc:	8d e2       	ldi	r24, 0x2D	; 45
    29ce:	01 90       	ld	r0, Z+
    29d0:	0d 92       	st	X+, r0
    29d2:	81 50       	subi	r24, 0x01	; 1
    29d4:	e1 f7       	brne	.-8      	; 0x29ce <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    29d6:	88 ed       	ldi	r24, 0xD8	; 216
    29d8:	91 e0       	ldi	r25, 0x01	; 1
    29da:	60 e0       	ldi	r22, 0x00	; 0
    29dc:	70 e0       	ldi	r23, 0x00	; 0
    29de:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    29e2:	81 ee       	ldi	r24, 0xE1	; 225
    29e4:	91 e0       	ldi	r25, 0x01	; 1
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    29ee:	82 ee       	ldi	r24, 0xE2	; 226
    29f0:	91 e0       	ldi	r25, 0x01	; 1
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    29fa:	87 eb       	ldi	r24, 0xB7	; 183
    29fc:	92 e0       	ldi	r25, 0x02	; 2
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2a06:	8a ed       	ldi	r24, 0xDA	; 218
    2a08:	91 e0       	ldi	r25, 0x01	; 1
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    2a12:	8f ed       	ldi	r24, 0xDF	; 223
    2a14:	91 e0       	ldi	r25, 0x01	; 1
    2a16:	60 e0       	ldi	r22, 0x00	; 0
    2a18:	70 e0       	ldi	r23, 0x00	; 0
    2a1a:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2a1e:	80 ee       	ldi	r24, 0xE0	; 224
    2a20:	91 e0       	ldi	r25, 0x01	; 1
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2a2a:	81 ed       	ldi	r24, 0xD1	; 209
    2a2c:	91 e0       	ldi	r25, 0x01	; 1
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2a36:	86 ed       	ldi	r24, 0xD6	; 214
    2a38:	91 e0       	ldi	r25, 0x01	; 1
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    2a42:	82 ed       	ldi	r24, 0xD2	; 210
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	60 e0       	ldi	r22, 0x00	; 0
    2a48:	70 e0       	ldi	r23, 0x00	; 0
    2a4a:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2a4e:	83 ed       	ldi	r24, 0xD3	; 211
    2a50:	91 e0       	ldi	r25, 0x01	; 1
    2a52:	60 e0       	ldi	r22, 0x00	; 0
    2a54:	70 e0       	ldi	r23, 0x00	; 0
    2a56:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    2a5a:	84 ed       	ldi	r24, 0xD4	; 212
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	6f ef       	ldi	r22, 0xFF	; 255
    2a60:	7f e3       	ldi	r23, 0x3F	; 63
    2a62:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    2a66:	85 ed       	ldi	r24, 0xD5	; 213
    2a68:	91 e0       	ldi	r25, 0x01	; 1
    2a6a:	6f ef       	ldi	r22, 0xFF	; 255
    2a6c:	7f e3       	ldi	r23, 0x3F	; 63
    2a6e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    2a72:	89 ed       	ldi	r24, 0xD9	; 217
    2a74:	91 e0       	ldi	r25, 0x01	; 1
    2a76:	60 e0       	ldi	r22, 0x00	; 0
    2a78:	70 e0       	ldi	r23, 0x00	; 0
    2a7a:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2a7e:	8e ec       	ldi	r24, 0xCE	; 206
    2a80:	91 e0       	ldi	r25, 0x01	; 1
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2a8a:	8c ec       	ldi	r24, 0xCC	; 204
    2a8c:	91 e0       	ldi	r25, 0x01	; 1
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	70 e0       	ldi	r23, 0x00	; 0
    2a92:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2a96:	8a ec       	ldi	r24, 0xCA	; 202
    2a98:	91 e0       	ldi	r25, 0x01	; 1
    2a9a:	6f ef       	ldi	r22, 0xFF	; 255
    2a9c:	7f e3       	ldi	r23, 0x3F	; 63
    2a9e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    2aa2:	88 ec       	ldi	r24, 0xC8	; 200
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    2aae:	80 ed       	ldi	r24, 0xD0	; 208
    2ab0:	91 e0       	ldi	r25, 0x01	; 1
    2ab2:	60 e0       	ldi	r22, 0x00	; 0
    2ab4:	70 e0       	ldi	r23, 0x00	; 0
    2ab6:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2aba:	83 ee       	ldi	r24, 0xE3	; 227
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2ac6:	84 ee       	ldi	r24, 0xE4	; 228
    2ac8:	91 e0       	ldi	r25, 0x01	; 1
    2aca:	60 e0       	ldi	r22, 0x00	; 0
    2acc:	70 e0       	ldi	r23, 0x00	; 0
    2ace:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    2ad2:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2ad4:	ed ed       	ldi	r30, 0xDD	; 221
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	80 64       	ori	r24, 0x40	; 64
    2adc:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2ade:	80 81       	ld	r24, Z
    2ae0:	8f 7b       	andi	r24, 0xBF	; 191
    2ae2:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	80 93 81 03 	sts	0x0381, r24
	PORTF |= (1<<GATE); //turn gate on
    2aea:	89 9a       	sbi	0x11, 1	; 17
    2aec:	9e 01       	movw	r18, r28
    2aee:	2f 5f       	subi	r18, 0xFF	; 255
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	3d ab       	sts	0x5d, r19
    2af4:	2c ab       	sts	0x5c, r18
    2af6:	86 e1       	ldi	r24, 0x16	; 22
    2af8:	93 e0       	ldi	r25, 0x03	; 3
    2afa:	99 af       	sts	0x79, r25
    2afc:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2afe:	1f aa       	sts	0x9f, r17
    2b00:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    2b02:	0f 2e       	mov	r0, r31
    2b04:	f4 ed       	ldi	r31, 0xD4	; 212
    2b06:	af 2e       	mov	r10, r31
    2b08:	f1 e0       	ldi	r31, 0x01	; 1
    2b0a:	bf 2e       	mov	r11, r31
    2b0c:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2b0e:	0f 2e       	mov	r0, r31
    2b10:	f8 ed       	ldi	r31, 0xD8	; 216
    2b12:	6f 2e       	mov	r6, r31
    2b14:	f1 e0       	ldi	r31, 0x01	; 1
    2b16:	7f 2e       	mov	r7, r31
    2b18:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2b1a:	0f 2e       	mov	r0, r31
    2b1c:	f5 ed       	ldi	r31, 0xD5	; 213
    2b1e:	4f 2e       	mov	r4, r31
    2b20:	f1 e0       	ldi	r31, 0x01	; 1
    2b22:	5f 2e       	mov	r5, r31
    2b24:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    2b26:	0f 2e       	mov	r0, r31
    2b28:	fa ec       	ldi	r31, 0xCA	; 202
    2b2a:	2f 2e       	mov	r2, r31
    2b2c:	f1 e0       	ldi	r31, 0x01	; 1
    2b2e:	3f 2e       	mov	r3, r31
    2b30:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    2b32:	ac a9       	sts	0x4c, r26
    2b34:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    2b36:	8c 91       	ld	r24, X
    2b38:	80 93 81 03 	sts	0x0381, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2b3c:	84 b5       	in	r24, 0x24	; 36
    2b3e:	8f 60       	ori	r24, 0x0F	; 15
    2b40:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2b46:	ee e6       	ldi	r30, 0x6E	; 110
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	82 60       	ori	r24, 0x02	; 2
    2b4e:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    2b50:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    2b52:	ee a9       	sts	0x4e, r30
    2b54:	ff a9       	sts	0x4f, r31
    2b56:	e2 30       	cpi	r30, 0x02	; 2
    2b58:	f1 05       	cpc	r31, r1
    2b5a:	24 f4       	brge	.+8      	; 0x2b64 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    2b5c:	83 e0       	ldi	r24, 0x03	; 3
    2b5e:	80 93 80 03 	sts	0x0380, r24
    2b62:	03 c0       	rjmp	.+6      	; 0x2b6a <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    2b64:	82 e0       	ldi	r24, 0x02	; 2
    2b66:	80 93 80 03 	sts	0x0380, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    2b6a:	11 96       	adiw	r26, 0x01	; 1
    2b6c:	2d 91       	ld	r18, X+
    2b6e:	3c 91       	ld	r19, X
    2b70:	12 97       	sbiw	r26, 0x02	; 2
    2b72:	3b ab       	sts	0x5b, r19
    2b74:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2b76:	8d e0       	ldi	r24, 0x0D	; 13
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9f a7       	lds	r25, 0x7f
    2b7c:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2b7e:	ee 24       	eor	r14, r14
    2b80:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2b82:	0f 2e       	mov	r0, r31
    2b84:	f1 ed       	ldi	r31, 0xD1	; 209
    2b86:	cf 2e       	mov	r12, r31
    2b88:	f1 e0       	ldi	r31, 0x01	; 1
    2b8a:	df 2e       	mov	r13, r31
    2b8c:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2b8e:	0f 2e       	mov	r0, r31
    2b90:	f6 ed       	ldi	r31, 0xD6	; 214
    2b92:	8f 2e       	mov	r8, r31
    2b94:	f1 e0       	ldi	r31, 0x01	; 1
    2b96:	9f 2e       	mov	r9, r31
    2b98:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	0e a4       	lds	r16, 0xae
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <tune_filter+0x218>
    2ba4:	ee 0f       	add	r30, r30
    2ba6:	ff 1f       	adc	r31, r31
    2ba8:	0a 94       	dec	r0
    2baa:	e2 f7       	brpl	.-8      	; 0x2ba4 <tune_filter+0x214>
    2bac:	f9 ab       	sts	0x59, r31
    2bae:	e8 ab       	sts	0x58, r30
    2bb0:	ee 2a       	or	r14, r30
    2bb2:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2bb4:	c5 01       	movw	r24, r10
    2bb6:	b7 01       	movw	r22, r14
    2bb8:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
			count_finished = FALSE;
    2bbc:	10 92 7f 03 	sts	0x037F, r1
			period_counter = 0;
    2bc0:	10 92 82 03 	sts	0x0382, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2bc4:	8f e0       	ldi	r24, 0x0F	; 15
    2bc6:	28 e1       	ldi	r18, 0x18	; 24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	a8 95       	wdr
    2bd0:	20 93 60 00 	sts	0x0060, r18
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2bda:	80 91 7f 03 	lds	r24, 0x037F
    2bde:	88 23       	and	r24, r24
    2be0:	b1 f5       	brne	.+108    	; 0x2c4e <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    2be2:	02 ed       	ldi	r16, 0xD2	; 210
    2be4:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2be6:	80 91 81 03 	lds	r24, 0x0381
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	84 5d       	subi	r24, 0xD4	; 212
    2bee:	9e 4f       	sbci	r25, 0xFE	; 254
    2bf0:	60 e0       	ldi	r22, 0x00	; 0
    2bf2:	0e 94 3d 03 	call	0x67a	; 0x67a <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2bf6:	c5 01       	movw	r24, r10
    2bf8:	b7 01       	movw	r22, r14
    2bfa:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2bfe:	c3 01       	movw	r24, r6
    2c00:	60 e0       	ldi	r22, 0x00	; 0
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2c08:	c2 01       	movw	r24, r4
    2c0a:	6f ef       	ldi	r22, 0xFF	; 255
    2c0c:	7f e3       	ldi	r23, 0x3F	; 63
    2c0e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    2c12:	c1 01       	movw	r24, r2
    2c14:	6f ef       	ldi	r22, 0xFF	; 255
    2c16:	7f e3       	ldi	r23, 0x3F	; 63
    2c18:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    2c1c:	8e ec       	ldi	r24, 0xCE	; 206
    2c1e:	91 e0       	ldi	r25, 0x01	; 1
    2c20:	60 e0       	ldi	r22, 0x00	; 0
    2c22:	70 e0       	ldi	r23, 0x00	; 0
    2c24:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2c28:	c6 01       	movw	r24, r12
    2c2a:	60 e0       	ldi	r22, 0x00	; 0
    2c2c:	70 e0       	ldi	r23, 0x00	; 0
    2c2e:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    2c32:	c4 01       	movw	r24, r8
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    2c3c:	c8 01       	movw	r24, r16
    2c3e:	60 e0       	ldi	r22, 0x00	; 0
    2c40:	70 e0       	ldi	r23, 0x00	; 0
    2c42:	0e 94 09 02 	call	0x412	; 0x412 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    2c46:	80 91 7f 03 	lds	r24, 0x037F
    2c4a:	88 23       	and	r24, r24
    2c4c:	61 f2       	breq	.-104    	; 0x2be6 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    2c4e:	88 e1       	ldi	r24, 0x18	; 24
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	80 93 60 00 	sts	0x0060, r24
    2c58:	10 92 60 00 	sts	0x0060, r1
    2c5c:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    2c5e:	80 91 7d 03 	lds	r24, 0x037D
    2c62:	90 91 7e 03 	lds	r25, 0x037E
    2c66:	2a a9       	sts	0x4a, r18
    2c68:	3b a9       	sts	0x4b, r19
    2c6a:	28 17       	cp	r18, r24
    2c6c:	39 07       	cpc	r19, r25
    2c6e:	50 f0       	brcs	.+20     	; 0x2c84 <tune_filter+0x2f4>
    2c70:	80 91 af 02 	lds	r24, 0x02AF
    2c74:	81 30       	cpi	r24, 0x01	; 1
    2c76:	31 f4       	brne	.+12     	; 0x2c84 <tune_filter+0x2f4>
    2c78:	88 a9       	sts	0x48, r24
    2c7a:	99 a9       	sts	0x49, r25
    2c7c:	80 95       	com	r24
    2c7e:	90 95       	com	r25
    2c80:	e8 22       	and	r14, r24
    2c82:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2c84:	80 91 7d 03 	lds	r24, 0x037D
    2c88:	90 91 7e 03 	lds	r25, 0x037E
    2c8c:	ea a9       	sts	0x4a, r30
    2c8e:	fb a9       	sts	0x4b, r31
    2c90:	8e 17       	cp	r24, r30
    2c92:	9f 07       	cpc	r25, r31
    2c94:	21 f4       	brne	.+8      	; 0x2c9e <tune_filter+0x30e>
    2c96:	80 91 af 02 	lds	r24, 0x02AF
    2c9a:	81 30       	cpi	r24, 0x01	; 1
    2c9c:	71 f0       	breq	.+28     	; 0x2cba <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2ca4:	2e a5       	lds	r18, 0x6e
    2ca6:	3f a5       	lds	r19, 0x6f
    2ca8:	21 50       	subi	r18, 0x01	; 1
    2caa:	30 40       	sbci	r19, 0x00	; 0
    2cac:	3f a7       	lds	r19, 0x7f
    2cae:	2e a7       	lds	r18, 0x7e
    2cb0:	8f ef       	ldi	r24, 0xFF	; 255
    2cb2:	2f 3f       	cpi	r18, 0xFF	; 255
    2cb4:	38 07       	cpc	r19, r24
    2cb6:	09 f0       	breq	.+2      	; 0x2cba <tune_filter+0x32a>
    2cb8:	70 cf       	rjmp	.-288    	; 0x2b9a <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2cba:	ee a9       	sts	0x4e, r30
    2cbc:	ff a9       	sts	0x4f, r31
    2cbe:	31 96       	adiw	r30, 0x01	; 1
    2cc0:	ff ab       	sts	0x5f, r31
    2cc2:	ee ab       	sts	0x5e, r30
    2cc4:	c7 01       	movw	r24, r14
    2cc6:	80 96       	adiw	r24, 0x20	; 32
    2cc8:	e8 ad       	sts	0x68, r30
    2cca:	f9 ad       	sts	0x69, r31
    2ccc:	81 93       	st	Z+, r24
    2cce:	91 93       	st	Z+, r25
    2cd0:	f9 af       	sts	0x79, r31
    2cd2:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2cd4:	ee e6       	ldi	r30, 0x6E	; 110
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	8d 7f       	andi	r24, 0xFD	; 253
    2cdc:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2cde:	14 bc       	out	0x24, r1	; 36
    2ce0:	2c a9       	sts	0x4c, r18
    2ce2:	3d a9       	sts	0x4d, r19
    2ce4:	2d 5f       	subi	r18, 0xFD	; 253
    2ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce8:	3d ab       	sts	0x5d, r19
    2cea:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2cec:	8e a9       	sts	0x4e, r24
    2cee:	9f a9       	sts	0x4f, r25
    2cf0:	8f 30       	cpi	r24, 0x0F	; 15
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	09 f0       	breq	.+2      	; 0x2cf8 <tune_filter+0x368>
    2cf6:	1d cf       	rjmp	.-454    	; 0x2b32 <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2cf8:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2cfa:	e9 96       	adiw	r28, 0x39	; 57
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	1f 91       	pop	r17
    2d0c:	0f 91       	pop	r16
    2d0e:	ff 90       	pop	r15
    2d10:	ef 90       	pop	r14
    2d12:	df 90       	pop	r13
    2d14:	cf 90       	pop	r12
    2d16:	bf 90       	pop	r11
    2d18:	af 90       	pop	r10
    2d1a:	9f 90       	pop	r9
    2d1c:	8f 90       	pop	r8
    2d1e:	7f 90       	pop	r7
    2d20:	6f 90       	pop	r6
    2d22:	5f 90       	pop	r5
    2d24:	4f 90       	pop	r4
    2d26:	3f 90       	pop	r3
    2d28:	2f 90       	pop	r2
    2d2a:	08 95       	ret

00002d2c <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2d2c:	84 e1       	ldi	r24, 0x14	; 20
    2d2e:	93 e0       	ldi	r25, 0x03	; 3
    2d30:	6c e0       	ldi	r22, 0x0C	; 12
    2d32:	76 e0       	ldi	r23, 0x06	; 6
    2d34:	40 e2       	ldi	r20, 0x20	; 32
    2d36:	50 e0       	ldi	r21, 0x00	; 0
    2d38:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2d3c:	86 e5       	ldi	r24, 0x56	; 86
    2d3e:	93 e0       	ldi	r25, 0x03	; 3
    2d40:	6e e4       	ldi	r22, 0x4E	; 78
    2d42:	76 e0       	ldi	r23, 0x06	; 6
    2d44:	42 e2       	ldi	r20, 0x22	; 34
    2d46:	50 e0       	ldi	r21, 0x00	; 0
    2d48:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2d4c:	84 e3       	ldi	r24, 0x34	; 52
    2d4e:	93 e0       	ldi	r25, 0x03	; 3
    2d50:	6c e2       	ldi	r22, 0x2C	; 44
    2d52:	76 e0       	ldi	r23, 0x06	; 6
    2d54:	42 e2       	ldi	r20, 0x22	; 34
    2d56:	50 e0       	ldi	r21, 0x00	; 0
    2d58:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__eeupd_block_m6450a>
	
	
}
    2d5c:	08 95       	ret

00002d5e <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2d5e:	82 e7       	ldi	r24, 0x72	; 114
    2d60:	96 e0       	ldi	r25, 0x06	; 6
    2d62:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__eerd_word_m6450a>
    2d66:	90 93 7b 03 	sts	0x037B, r25
    2d6a:	80 93 7a 03 	sts	0x037A, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2d6e:	80 e7       	ldi	r24, 0x70	; 112
    2d70:	96 e0       	ldi	r25, 0x06	; 6
    2d72:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__eerd_word_m6450a>
    2d76:	90 93 79 03 	sts	0x0379, r25
    2d7a:	80 93 78 03 	sts	0x0378, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2d7e:	86 e5       	ldi	r24, 0x56	; 86
    2d80:	93 e0       	ldi	r25, 0x03	; 3
    2d82:	6e e4       	ldi	r22, 0x4E	; 78
    2d84:	76 e0       	ldi	r23, 0x06	; 6
    2d86:	42 e2       	ldi	r20, 0x22	; 34
    2d88:	50 e0       	ldi	r21, 0x00	; 0
    2d8a:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2d8e:	84 e3       	ldi	r24, 0x34	; 52
    2d90:	93 e0       	ldi	r25, 0x03	; 3
    2d92:	6c e2       	ldi	r22, 0x2C	; 44
    2d94:	76 e0       	ldi	r23, 0x06	; 6
    2d96:	42 e2       	ldi	r20, 0x22	; 34
    2d98:	50 e0       	ldi	r21, 0x00	; 0
    2d9a:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2d9e:	84 e1       	ldi	r24, 0x14	; 20
    2da0:	93 e0       	ldi	r25, 0x03	; 3
    2da2:	6c e0       	ldi	r22, 0x0C	; 12
    2da4:	76 e0       	ldi	r23, 0x06	; 6
    2da6:	40 e2       	ldi	r20, 0x20	; 32
    2da8:	50 e0       	ldi	r21, 0x00	; 0
    2daa:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2dae:	08 95       	ret

00002db0 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2db0:	98 2f       	mov	r25, r24
    2db2:	96 95       	lsr	r25
    2db4:	96 95       	lsr	r25
    2db6:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2db8:	29 2f       	mov	r18, r25
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	f9 01       	movw	r30, r18
    2dbe:	31 97       	sbiw	r30, 0x01	; 1
    2dc0:	ee 0f       	add	r30, r30
    2dc2:	ff 1f       	adc	r31, r31
    2dc4:	e6 0f       	add	r30, r22
    2dc6:	f7 1f       	adc	r31, r23
    2dc8:	01 90       	ld	r0, Z+
    2dca:	f0 81       	ld	r31, Z
    2dcc:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2dce:	22 0f       	add	r18, r18
    2dd0:	33 1f       	adc	r19, r19
    2dd2:	26 0f       	add	r18, r22
    2dd4:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2dd6:	d9 01       	movw	r26, r18
    2dd8:	4d 91       	ld	r20, X+
    2dda:	5c 91       	ld	r21, X
    2ddc:	11 97       	sbiw	r26, 0x01	; 1
    2dde:	4e 1b       	sub	r20, r30
    2de0:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2de2:	99 0f       	add	r25, r25
    2de4:	99 0f       	add	r25, r25
    2de6:	99 0f       	add	r25, r25
    2de8:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	48 9f       	mul	r20, r24
    2dee:	90 01       	movw	r18, r0
    2df0:	49 9f       	mul	r20, r25
    2df2:	30 0d       	add	r19, r0
    2df4:	58 9f       	mul	r21, r24
    2df6:	30 0d       	add	r19, r0
    2df8:	11 24       	eor	r1, r1
    2dfa:	36 95       	lsr	r19
    2dfc:	27 95       	ror	r18
    2dfe:	36 95       	lsr	r19
    2e00:	27 95       	ror	r18
    2e02:	36 95       	lsr	r19
    2e04:	27 95       	ror	r18
    2e06:	e2 0f       	add	r30, r18
    2e08:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2e0a:	8e 2f       	mov	r24, r30
    2e0c:	9f 2f       	mov	r25, r31
    2e0e:	08 95       	ret

00002e10 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	a2 97       	sbiw	r28, 0x22	; 34
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2e24:	de 01       	movw	r26, r28
    2e26:	11 96       	adiw	r26, 0x01	; 1
    2e28:	ed e8       	ldi	r30, 0x8D	; 141
    2e2a:	f2 e0       	ldi	r31, 0x02	; 2
    2e2c:	82 e2       	ldi	r24, 0x22	; 34
    2e2e:	01 90       	ld	r0, Z+
    2e30:	0d 92       	st	X+, r0
    2e32:	81 50       	subi	r24, 0x01	; 1
    2e34:	e1 f7       	brne	.-8      	; 0x2e2e <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2e36:	a6 e5       	ldi	r26, 0x56	; 86
    2e38:	b3 e0       	ldi	r27, 0x03	; 3
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	31 96       	adiw	r30, 0x01	; 1
    2e3e:	82 e2       	ldi	r24, 0x22	; 34
    2e40:	01 90       	ld	r0, Z+
    2e42:	0d 92       	st	X+, r0
    2e44:	81 50       	subi	r24, 0x01	; 1
    2e46:	e1 f7       	brne	.-8      	; 0x2e40 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2e48:	a4 e3       	ldi	r26, 0x34	; 52
    2e4a:	b3 e0       	ldi	r27, 0x03	; 3
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	31 96       	adiw	r30, 0x01	; 1
    2e50:	82 e2       	ldi	r24, 0x22	; 34
    2e52:	01 90       	ld	r0, Z+
    2e54:	0d 92       	st	X+, r0
    2e56:	81 50       	subi	r24, 0x01	; 1
    2e58:	e1 f7       	brne	.-8      	; 0x2e52 <set_one_volt_per_octave+0x42>
	
	
}
    2e5a:	a2 96       	adiw	r28, 0x22	; 34
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	08 95       	ret

00002e6c <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2e6c:	ef e6       	ldi	r30, 0x6F	; 111
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	82 70       	andi	r24, 0x02	; 2
    2e74:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2e76:	e1 e8       	ldi	r30, 0x81	; 129
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	87 7f       	andi	r24, 0xF7	; 247
    2e7e:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2e80:	8f e0       	ldi	r24, 0x0F	; 15
    2e82:	6f e0       	ldi	r22, 0x0F	; 15
    2e84:	7e e5       	ldi	r23, 0x5E	; 94
    2e86:	0e 94 c4 11 	call	0x2388	; 0x2388 <set_vco_init_cv>
    2e8a:	90 93 7b 03 	sts	0x037B, r25
    2e8e:	80 93 7a 03 	sts	0x037A, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2e92:	80 ef       	ldi	r24, 0xF0	; 240
    2e94:	6f e0       	ldi	r22, 0x0F	; 15
    2e96:	7e e5       	ldi	r23, 0x5E	; 94
    2e98:	0e 94 c4 11 	call	0x2388	; 0x2388 <set_vco_init_cv>
    2e9c:	90 93 79 03 	sts	0x0379, r25
    2ea0:	80 93 78 03 	sts	0x0378, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2ea4:	8f e0       	ldi	r24, 0x0F	; 15
    2ea6:	0e 94 26 13 	call	0x264c	; 0x264c <tune_8ths>
			tune_8ths(VCO2);
    2eaa:	80 ef       	ldi	r24, 0xF0	; 240
    2eac:	0e 94 26 13 	call	0x264c	; 0x264c <tune_8ths>
			tune_filter();
    2eb0:	0e 94 c8 14 	call	0x2990	; 0x2990 <tune_filter>
			save_tuning_tables();
    2eb4:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <save_tuning_tables>
    2eb8:	8f e4       	ldi	r24, 0x4F	; 79
    2eba:	93 ec       	ldi	r25, 0xC3	; 195
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <tune+0x50>
    2ec0:	00 c0       	rjmp	.+0      	; 0x2ec2 <tune+0x56>
    2ec2:	00 00       	nop
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2ec4:	08 95       	ret

00002ec6 <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2ec6:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2ec8:	98 2f       	mov	r25, r24
    2eca:	9c 70       	andi	r25, 0x0C	; 12
    2ecc:	20 91 c5 02 	lds	r18, 0x02C5
    2ed0:	92 2b       	or	r25, r18
    2ed2:	90 93 c5 02 	sts	0x02C5, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2ed6:	98 2f       	mov	r25, r24
    2ed8:	92 95       	swap	r25
    2eda:	96 95       	lsr	r25
    2edc:	97 70       	andi	r25, 0x07	; 7
    2ede:	90 ff       	sbrs	r25, 0
    2ee0:	16 c0       	rjmp	.+44     	; 0x2f0e <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2ee2:	20 91 86 03 	lds	r18, 0x0386
    2ee6:	30 91 87 03 	lds	r19, 0x0387
    2eea:	2f 5f       	subi	r18, 0xFF	; 255
    2eec:	3f 4f       	sbci	r19, 0xFF	; 255
    2eee:	30 93 87 03 	sts	0x0387, r19
    2ef2:	20 93 86 03 	sts	0x0386, r18
    2ef6:	92 e0       	ldi	r25, 0x02	; 2
    2ef8:	28 35       	cpi	r18, 0x58	; 88
    2efa:	39 07       	cpc	r19, r25
    2efc:	61 f4       	brne	.+24     	; 0x2f16 <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2efe:	10 92 87 03 	sts	0x0387, r1
    2f02:	10 92 86 03 	sts	0x0386, r1
			current_patch.mode = CAL;
    2f06:	95 e0       	ldi	r25, 0x05	; 5
    2f08:	90 93 0c 03 	sts	0x030C, r25
    2f0c:	04 c0       	rjmp	.+8      	; 0x2f16 <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2f0e:	10 92 87 03 	sts	0x0387, r1
    2f12:	10 92 86 03 	sts	0x0386, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2f16:	90 91 88 03 	lds	r25, 0x0388
    2f1a:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2f1c:	98 27       	eor	r25, r24
    2f1e:	90 93 88 03 	sts	0x0388, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2f22:	89 23       	and	r24, r25
    2f24:	08 95       	ret

00002f26 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2f26:	ed ed       	ldi	r30, 0xDD	; 221
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	90 81       	ld	r25, Z
    2f2c:	9f 7b       	andi	r25, 0xBF	; 191
    2f2e:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2f30:	28 2f       	mov	r18, r24
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	21 70       	andi	r18, 0x01	; 1
    2f36:	30 70       	andi	r19, 0x00	; 0
    2f38:	22 0f       	add	r18, r18
    2f3a:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2f3c:	68 2f       	mov	r22, r24
    2f3e:	62 95       	swap	r22
    2f40:	66 95       	lsr	r22
    2f42:	67 70       	andi	r22, 0x07	; 7
    2f44:	67 95       	ror	r22
    2f46:	66 27       	eor	r22, r22
    2f48:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2f4a:	26 2b       	or	r18, r22
    2f4c:	98 2f       	mov	r25, r24
    2f4e:	96 95       	lsr	r25
    2f50:	96 95       	lsr	r25
    2f52:	91 70       	andi	r25, 0x01	; 1
    2f54:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2f56:	68 2f       	mov	r22, r24
    2f58:	66 1f       	adc	r22, r22
    2f5a:	66 27       	eor	r22, r22
    2f5c:	66 1f       	adc	r22, r22
    2f5e:	66 0f       	add	r22, r22
    2f60:	66 0f       	add	r22, r22
    2f62:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2f64:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2f66:	a8 2f       	mov	r26, r24
    2f68:	a6 95       	lsr	r26
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	a1 70       	andi	r26, 0x01	; 1
    2f6e:	b0 70       	andi	r27, 0x00	; 0
    2f70:	bd 01       	movw	r22, r26
    2f72:	66 0f       	add	r22, r22
    2f74:	77 1f       	adc	r23, r23
    2f76:	66 0f       	add	r22, r22
    2f78:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2f7a:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2f7c:	68 2f       	mov	r22, r24
    2f7e:	62 95       	swap	r22
    2f80:	6f 70       	andi	r22, 0x0F	; 15
    2f82:	70 e0       	ldi	r23, 0x00	; 0
    2f84:	61 70       	andi	r22, 0x01	; 1
    2f86:	70 70       	andi	r23, 0x00	; 0
    2f88:	ab 01       	movw	r20, r22
    2f8a:	00 24       	eor	r0, r0
    2f8c:	56 95       	lsr	r21
    2f8e:	47 95       	ror	r20
    2f90:	07 94       	ror	r0
    2f92:	56 95       	lsr	r21
    2f94:	47 95       	ror	r20
    2f96:	07 94       	ror	r0
    2f98:	54 2f       	mov	r21, r20
    2f9a:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2f9c:	62 2f       	mov	r22, r18
    2f9e:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2fa0:	48 2f       	mov	r20, r24
    2fa2:	42 95       	swap	r20
    2fa4:	46 95       	lsr	r20
    2fa6:	46 95       	lsr	r20
    2fa8:	43 70       	andi	r20, 0x03	; 3
    2faa:	50 e0       	ldi	r21, 0x00	; 0
    2fac:	41 70       	andi	r20, 0x01	; 1
    2fae:	50 70       	andi	r21, 0x00	; 0
    2fb0:	9a 01       	movw	r18, r20
    2fb2:	22 0f       	add	r18, r18
    2fb4:	33 1f       	adc	r19, r19
    2fb6:	22 95       	swap	r18
    2fb8:	32 95       	swap	r19
    2fba:	30 7f       	andi	r19, 0xF0	; 240
    2fbc:	32 27       	eor	r19, r18
    2fbe:	20 7f       	andi	r18, 0xF0	; 240
    2fc0:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2fc2:	46 2f       	mov	r20, r22
    2fc4:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2fc6:	86 95       	lsr	r24
    2fc8:	86 95       	lsr	r24
    2fca:	86 95       	lsr	r24
    2fcc:	28 2f       	mov	r18, r24
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	21 70       	andi	r18, 0x01	; 1
    2fd2:	30 70       	andi	r19, 0x00	; 0
    2fd4:	c9 01       	movw	r24, r18
    2fd6:	82 95       	swap	r24
    2fd8:	92 95       	swap	r25
    2fda:	90 7f       	andi	r25, 0xF0	; 240
    2fdc:	98 27       	eor	r25, r24
    2fde:	80 7f       	andi	r24, 0xF0	; 240
    2fe0:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2fe2:	84 2b       	or	r24, r20
    2fe4:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2fe6:	80 81       	ld	r24, Z
    2fe8:	80 64       	ori	r24, 0x40	; 64
    2fea:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2fec:	80 81       	ld	r24, Z
    2fee:	8f 7b       	andi	r24, 0xBF	; 191
    2ff0:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2ff2:	12 b8       	out	0x02, r1	; 2
	
	
    2ff4:	08 95       	ret

00002ff6 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2ff6:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2ff8:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2ffa:	74 83       	std	Z+4, r23	; 0x04
    2ffc:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2ffe:	11 82       	std	Z+1, r1	; 0x01
    3000:	10 82       	st	Z, r1
}
    3002:	08 95       	ret

00003004 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    3004:	1f 93       	push	r17
    3006:	cf 93       	push	r28
    3008:	df 93       	push	r29
    300a:	ec 01       	movw	r28, r24
    300c:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    300e:	0e 94 71 18 	call	0x30e2	; 0x30e2 <store_and_clear_interrupt>
    3012:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    3014:	39 81       	ldd	r19, Y+1	; 0x01
    3016:	83 2f       	mov	r24, r19
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	01 96       	adiw	r24, 0x01	; 1
    301c:	6a 81       	ldd	r22, Y+2	; 0x02
    301e:	70 e0       	ldi	r23, 0x00	; 0
    3020:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <__divmodhi4>
    3024:	48 81       	ld	r20, Y
    3026:	50 e0       	ldi	r21, 0x00	; 0
    3028:	84 17       	cp	r24, r20
    302a:	95 07       	cpc	r25, r21
    302c:	29 f4       	brne	.+10     	; 0x3038 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    302e:	82 2f       	mov	r24, r18
    3030:	0e 94 74 18 	call	0x30e8	; 0x30e8 <restore_interrupt_setting>
      return false;
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	11 c0       	rjmp	.+34     	; 0x305a <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    3038:	eb 81       	ldd	r30, Y+3	; 0x03
    303a:	fc 81       	ldd	r31, Y+4	; 0x04
    303c:	e3 0f       	add	r30, r19
    303e:	f1 1d       	adc	r31, r1
    3040:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	01 96       	adiw	r24, 0x01	; 1
    3048:	6a 81       	ldd	r22, Y+2	; 0x02
    304a:	70 e0       	ldi	r23, 0x00	; 0
    304c:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <__divmodhi4>
    3050:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    3052:	82 2f       	mov	r24, r18
    3054:	0e 94 74 18 	call	0x30e8	; 0x30e8 <restore_interrupt_setting>
      return true;
    3058:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    305a:	df 91       	pop	r29
    305c:	cf 91       	pop	r28
    305e:	1f 91       	pop	r17
    3060:	08 95       	ret

00003062 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    3062:	cf 93       	push	r28
    3064:	df 93       	push	r29
    3066:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    3068:	0e 94 71 18 	call	0x30e2	; 0x30e2 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    306c:	29 81       	ldd	r18, Y+1	; 0x01
    306e:	98 81       	ld	r25, Y
    3070:	29 17       	cp	r18, r25
    3072:	18 f0       	brcs	.+6      	; 0x307a <bytequeue_length+0x18>
      len = queue->end - queue->start;
    3074:	c2 2f       	mov	r28, r18
    3076:	c9 1b       	sub	r28, r25
    3078:	03 c0       	rjmp	.+6      	; 0x3080 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    307a:	ca 81       	ldd	r28, Y+2	; 0x02
    307c:	c2 0f       	add	r28, r18
    307e:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    3080:	0e 94 74 18 	call	0x30e8	; 0x30e8 <restore_interrupt_setting>
   return len;
}
    3084:	8c 2f       	mov	r24, r28
    3086:	df 91       	pop	r29
    3088:	cf 91       	pop	r28
    308a:	08 95       	ret

0000308c <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    308c:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    308e:	20 81       	ld	r18, Z
    3090:	86 2f       	mov	r24, r22
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	82 0f       	add	r24, r18
    3096:	91 1d       	adc	r25, r1
    3098:	62 81       	ldd	r22, Z+2	; 0x02
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <__divmodhi4>
    30a0:	03 80       	ldd	r0, Z+3	; 0x03
    30a2:	f4 81       	ldd	r31, Z+4	; 0x04
    30a4:	e0 2d       	mov	r30, r0
    30a6:	e8 0f       	add	r30, r24
    30a8:	f9 1f       	adc	r31, r25
}
    30aa:	80 81       	ld	r24, Z
    30ac:	08 95       	ret

000030ae <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    30ae:	1f 93       	push	r17
    30b0:	cf 93       	push	r28
    30b2:	df 93       	push	r29
    30b4:	ec 01       	movw	r28, r24
    30b6:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    30b8:	0e 94 71 18 	call	0x30e2	; 0x30e2 <store_and_clear_interrupt>
    30bc:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    30be:	88 81       	ld	r24, Y
    30c0:	21 2f       	mov	r18, r17
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	28 0f       	add	r18, r24
    30c6:	31 1d       	adc	r19, r1
    30c8:	6a 81       	ldd	r22, Y+2	; 0x02
    30ca:	c9 01       	movw	r24, r18
    30cc:	70 e0       	ldi	r23, 0x00	; 0
    30ce:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <__divmodhi4>
    30d2:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    30d4:	84 2f       	mov	r24, r20
    30d6:	0e 94 74 18 	call	0x30e8	; 0x30e8 <restore_interrupt_setting>
}
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	1f 91       	pop	r17
    30e0:	08 95       	ret

000030e2 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    30e2:	8f b7       	in	r24, 0x3f	; 63
   cli();
    30e4:	f8 94       	cli
   return sreg;
}
    30e6:	08 95       	ret

000030e8 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    30e8:	8f bf       	out	0x3f, r24	; 63
}
    30ea:	08 95       	ret

000030ec <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    30ec:	88 1f       	adc	r24, r24
    30ee:	88 27       	eor	r24, r24
    30f0:	88 1f       	adc	r24, r24
    30f2:	08 95       	ret

000030f4 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    30f4:	91 e0       	ldi	r25, 0x01	; 1
    30f6:	88 3f       	cpi	r24, 0xF8	; 248
    30f8:	08 f4       	brcc	.+2      	; 0x30fc <midi_is_realtime+0x8>
    30fa:	90 e0       	ldi	r25, 0x00	; 0
}
    30fc:	89 2f       	mov	r24, r25
    30fe:	08 95       	ret

00003100 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    3100:	28 2f       	mov	r18, r24
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	20 7f       	andi	r18, 0xF0	; 240
    3106:	30 70       	andi	r19, 0x00	; 0
    3108:	20 3c       	cpi	r18, 0xC0	; 192
    310a:	31 05       	cpc	r19, r1
    310c:	e9 f1       	breq	.+122    	; 0x3188 <midi_packet_length+0x88>
    310e:	21 3c       	cpi	r18, 0xC1	; 193
    3110:	31 05       	cpc	r19, r1
    3112:	8c f4       	brge	.+34     	; 0x3136 <midi_packet_length+0x36>
    3114:	20 39       	cpi	r18, 0x90	; 144
    3116:	31 05       	cpc	r19, r1
    3118:	e1 f0       	breq	.+56     	; 0x3152 <midi_packet_length+0x52>
    311a:	21 39       	cpi	r18, 0x91	; 145
    311c:	31 05       	cpc	r19, r1
    311e:	24 f4       	brge	.+8      	; 0x3128 <midi_packet_length+0x28>
    3120:	20 38       	cpi	r18, 0x80	; 128
    3122:	31 05       	cpc	r19, r1
    3124:	79 f5       	brne	.+94     	; 0x3184 <midi_packet_length+0x84>
    3126:	15 c0       	rjmp	.+42     	; 0x3152 <midi_packet_length+0x52>
    3128:	20 3a       	cpi	r18, 0xA0	; 160
    312a:	31 05       	cpc	r19, r1
    312c:	91 f0       	breq	.+36     	; 0x3152 <midi_packet_length+0x52>
    312e:	20 3b       	cpi	r18, 0xB0	; 176
    3130:	31 05       	cpc	r19, r1
    3132:	41 f5       	brne	.+80     	; 0x3184 <midi_packet_length+0x84>
    3134:	0e c0       	rjmp	.+28     	; 0x3152 <midi_packet_length+0x52>
    3136:	20 3e       	cpi	r18, 0xE0	; 224
    3138:	31 05       	cpc	r19, r1
    313a:	59 f0       	breq	.+22     	; 0x3152 <midi_packet_length+0x52>
    313c:	21 3e       	cpi	r18, 0xE1	; 225
    313e:	31 05       	cpc	r19, r1
    3140:	24 f4       	brge	.+8      	; 0x314a <midi_packet_length+0x4a>
    3142:	20 3d       	cpi	r18, 0xD0	; 208
    3144:	31 05       	cpc	r19, r1
    3146:	f1 f4       	brne	.+60     	; 0x3184 <midi_packet_length+0x84>
    3148:	1f c0       	rjmp	.+62     	; 0x3188 <midi_packet_length+0x88>
    314a:	20 3f       	cpi	r18, 0xF0	; 240
    314c:	31 05       	cpc	r19, r1
    314e:	d1 f4       	brne	.+52     	; 0x3184 <midi_packet_length+0x84>
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    3152:	83 e0       	ldi	r24, 0x03	; 3
    3154:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    3156:	86 3f       	cpi	r24, 0xF6	; 246
    3158:	79 f0       	breq	.+30     	; 0x3178 <midi_packet_length+0x78>
    315a:	87 3f       	cpi	r24, 0xF7	; 247
    315c:	38 f4       	brcc	.+14     	; 0x316c <midi_packet_length+0x6c>
    315e:	82 3f       	cpi	r24, 0xF2	; 242
    3160:	a9 f0       	breq	.+42     	; 0x318c <midi_packet_length+0x8c>
    3162:	83 3f       	cpi	r24, 0xF3	; 243
    3164:	59 f0       	breq	.+22     	; 0x317c <midi_packet_length+0x7c>
    3166:	81 3f       	cpi	r24, 0xF1	; 241
    3168:	59 f4       	brne	.+22     	; 0x3180 <midi_packet_length+0x80>
    316a:	08 c0       	rjmp	.+16     	; 0x317c <midi_packet_length+0x7c>
    316c:	88 3f       	cpi	r24, 0xF8	; 248
    316e:	40 f0       	brcs	.+16     	; 0x3180 <midi_packet_length+0x80>
    3170:	8d 3f       	cpi	r24, 0xFD	; 253
    3172:	10 f0       	brcs	.+4      	; 0x3178 <midi_packet_length+0x78>
    3174:	8e 3f       	cpi	r24, 0xFE	; 254
    3176:	20 f0       	brcs	.+8      	; 0x3180 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    317c:	82 e0       	ldi	r24, 0x02	; 2
    317e:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	08 95       	ret
         }
      default:
         return UNDEFINED;
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    3188:	82 e0       	ldi	r24, 0x02	; 2
    318a:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    318c:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    318e:	08 95       	ret

00003190 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    3190:	0f 93       	push	r16
    3192:	34 2f       	mov	r19, r20
    3194:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    3196:	46 2f       	mov	r20, r22
    3198:	4f 70       	andi	r20, 0x0F	; 15
    319a:	40 6b       	ori	r20, 0xB0	; 176
    319c:	23 2f       	mov	r18, r19
    319e:	2f 77       	andi	r18, 0x7F	; 127
    31a0:	0f 77       	andi	r16, 0x7F	; 127
    31a2:	dc 01       	movw	r26, r24
    31a4:	ed 91       	ld	r30, X+
    31a6:	fc 91       	ld	r31, X
    31a8:	63 e0       	ldi	r22, 0x03	; 3
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    31ae:	0f 91       	pop	r16
    31b0:	08 95       	ret

000031b2 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    31b2:	0f 93       	push	r16
    31b4:	34 2f       	mov	r19, r20
    31b6:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    31b8:	46 2f       	mov	r20, r22
    31ba:	4f 70       	andi	r20, 0x0F	; 15
    31bc:	40 69       	ori	r20, 0x90	; 144
    31be:	23 2f       	mov	r18, r19
    31c0:	2f 77       	andi	r18, 0x7F	; 127
    31c2:	0f 77       	andi	r16, 0x7F	; 127
    31c4:	dc 01       	movw	r26, r24
    31c6:	ed 91       	ld	r30, X+
    31c8:	fc 91       	ld	r31, X
    31ca:	63 e0       	ldi	r22, 0x03	; 3
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    31d0:	0f 91       	pop	r16
    31d2:	08 95       	ret

000031d4 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    31d4:	0f 93       	push	r16
    31d6:	34 2f       	mov	r19, r20
    31d8:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    31da:	46 2f       	mov	r20, r22
    31dc:	4f 70       	andi	r20, 0x0F	; 15
    31de:	40 68       	ori	r20, 0x80	; 128
    31e0:	23 2f       	mov	r18, r19
    31e2:	2f 77       	andi	r18, 0x7F	; 127
    31e4:	0f 77       	andi	r16, 0x7F	; 127
    31e6:	dc 01       	movw	r26, r24
    31e8:	ed 91       	ld	r30, X+
    31ea:	fc 91       	ld	r31, X
    31ec:	63 e0       	ldi	r22, 0x03	; 3
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    31f2:	0f 91       	pop	r16
    31f4:	08 95       	ret

000031f6 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    31f6:	0f 93       	push	r16
    31f8:	34 2f       	mov	r19, r20
    31fa:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    31fc:	46 2f       	mov	r20, r22
    31fe:	4f 70       	andi	r20, 0x0F	; 15
    3200:	40 6a       	ori	r20, 0xA0	; 160
    3202:	23 2f       	mov	r18, r19
    3204:	2f 77       	andi	r18, 0x7F	; 127
    3206:	0f 77       	andi	r16, 0x7F	; 127
    3208:	dc 01       	movw	r26, r24
    320a:	ed 91       	ld	r30, X+
    320c:	fc 91       	ld	r31, X
    320e:	63 e0       	ldi	r22, 0x03	; 3
    3210:	70 e0       	ldi	r23, 0x00	; 0
    3212:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    3214:	0f 91       	pop	r16
    3216:	08 95       	ret

00003218 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    321c:	20 e2       	ldi	r18, 0x20	; 32
    321e:	40 30       	cpi	r20, 0x00	; 0
    3220:	52 07       	cpc	r21, r18
    3222:	44 f4       	brge	.+16     	; 0x3234 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    3224:	a0 ee       	ldi	r26, 0xE0	; 224
    3226:	40 30       	cpi	r20, 0x00	; 0
    3228:	5a 07       	cpc	r21, r26
    322a:	3c f0       	brlt	.+14     	; 0x323a <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    322c:	8a 01       	movw	r16, r20
    322e:	00 50       	subi	r16, 0x00	; 0
    3230:	10 4e       	sbci	r17, 0xE0	; 224
    3232:	05 c0       	rjmp	.+10     	; 0x323e <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    3234:	0f ef       	ldi	r16, 0xFF	; 255
    3236:	1f e3       	ldi	r17, 0x3F	; 63
    3238:	02 c0       	rjmp	.+4      	; 0x323e <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    323a:	00 e0       	ldi	r16, 0x00	; 0
    323c:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    323e:	46 2f       	mov	r20, r22
    3240:	4f 70       	andi	r20, 0x0F	; 15
    3242:	40 6e       	ori	r20, 0xE0	; 224
    3244:	20 2f       	mov	r18, r16
    3246:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    3248:	00 0f       	add	r16, r16
    324a:	01 2f       	mov	r16, r17
    324c:	00 1f       	adc	r16, r16
    324e:	11 0b       	sbc	r17, r17
    3250:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    3252:	0f 77       	andi	r16, 0x7F	; 127
    3254:	dc 01       	movw	r26, r24
    3256:	ed 91       	ld	r30, X+
    3258:	fc 91       	ld	r31, X
    325a:	63 e0       	ldi	r22, 0x03	; 3
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    3260:	1f 91       	pop	r17
    3262:	0f 91       	pop	r16
    3264:	08 95       	ret

00003266 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    3266:	0f 93       	push	r16
    3268:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    326a:	46 2f       	mov	r20, r22
    326c:	4f 70       	andi	r20, 0x0F	; 15
    326e:	40 6c       	ori	r20, 0xC0	; 192
    3270:	2f 77       	andi	r18, 0x7F	; 127
    3272:	dc 01       	movw	r26, r24
    3274:	ed 91       	ld	r30, X+
    3276:	fc 91       	ld	r31, X
    3278:	62 e0       	ldi	r22, 0x02	; 2
    327a:	70 e0       	ldi	r23, 0x00	; 0
    327c:	00 e0       	ldi	r16, 0x00	; 0
    327e:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    3280:	0f 91       	pop	r16
    3282:	08 95       	ret

00003284 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    3284:	0f 93       	push	r16
    3286:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    3288:	46 2f       	mov	r20, r22
    328a:	4f 70       	andi	r20, 0x0F	; 15
    328c:	40 6d       	ori	r20, 0xD0	; 208
    328e:	2f 77       	andi	r18, 0x7F	; 127
    3290:	dc 01       	movw	r26, r24
    3292:	ed 91       	ld	r30, X+
    3294:	fc 91       	ld	r31, X
    3296:	62 e0       	ldi	r22, 0x02	; 2
    3298:	70 e0       	ldi	r23, 0x00	; 0
    329a:	00 e0       	ldi	r16, 0x00	; 0
    329c:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    329e:	0f 91       	pop	r16
    32a0:	08 95       	ret

000032a2 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    32a2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    32a4:	dc 01       	movw	r26, r24
    32a6:	ed 91       	ld	r30, X+
    32a8:	fc 91       	ld	r31, X
    32aa:	61 e0       	ldi	r22, 0x01	; 1
    32ac:	70 e0       	ldi	r23, 0x00	; 0
    32ae:	48 ef       	ldi	r20, 0xF8	; 248
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	00 e0       	ldi	r16, 0x00	; 0
    32b4:	09 95       	icall
}
    32b6:	0f 91       	pop	r16
    32b8:	08 95       	ret

000032ba <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    32ba:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    32bc:	dc 01       	movw	r26, r24
    32be:	ed 91       	ld	r30, X+
    32c0:	fc 91       	ld	r31, X
    32c2:	61 e0       	ldi	r22, 0x01	; 1
    32c4:	70 e0       	ldi	r23, 0x00	; 0
    32c6:	49 ef       	ldi	r20, 0xF9	; 249
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	00 e0       	ldi	r16, 0x00	; 0
    32cc:	09 95       	icall
}
    32ce:	0f 91       	pop	r16
    32d0:	08 95       	ret

000032d2 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    32d2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    32d4:	dc 01       	movw	r26, r24
    32d6:	ed 91       	ld	r30, X+
    32d8:	fc 91       	ld	r31, X
    32da:	61 e0       	ldi	r22, 0x01	; 1
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	4a ef       	ldi	r20, 0xFA	; 250
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	00 e0       	ldi	r16, 0x00	; 0
    32e4:	09 95       	icall
}
    32e6:	0f 91       	pop	r16
    32e8:	08 95       	ret

000032ea <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    32ea:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    32ec:	dc 01       	movw	r26, r24
    32ee:	ed 91       	ld	r30, X+
    32f0:	fc 91       	ld	r31, X
    32f2:	61 e0       	ldi	r22, 0x01	; 1
    32f4:	70 e0       	ldi	r23, 0x00	; 0
    32f6:	4b ef       	ldi	r20, 0xFB	; 251
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	00 e0       	ldi	r16, 0x00	; 0
    32fc:	09 95       	icall
}
    32fe:	0f 91       	pop	r16
    3300:	08 95       	ret

00003302 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    3302:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    3304:	dc 01       	movw	r26, r24
    3306:	ed 91       	ld	r30, X+
    3308:	fc 91       	ld	r31, X
    330a:	61 e0       	ldi	r22, 0x01	; 1
    330c:	70 e0       	ldi	r23, 0x00	; 0
    330e:	4c ef       	ldi	r20, 0xFC	; 252
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	00 e0       	ldi	r16, 0x00	; 0
    3314:	09 95       	icall
}
    3316:	0f 91       	pop	r16
    3318:	08 95       	ret

0000331a <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    331a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    331c:	dc 01       	movw	r26, r24
    331e:	ed 91       	ld	r30, X+
    3320:	fc 91       	ld	r31, X
    3322:	61 e0       	ldi	r22, 0x01	; 1
    3324:	70 e0       	ldi	r23, 0x00	; 0
    3326:	4e ef       	ldi	r20, 0xFE	; 254
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	00 e0       	ldi	r16, 0x00	; 0
    332c:	09 95       	icall
}
    332e:	0f 91       	pop	r16
    3330:	08 95       	ret

00003332 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    3332:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    3334:	dc 01       	movw	r26, r24
    3336:	ed 91       	ld	r30, X+
    3338:	fc 91       	ld	r31, X
    333a:	61 e0       	ldi	r22, 0x01	; 1
    333c:	70 e0       	ldi	r23, 0x00	; 0
    333e:	4f ef       	ldi	r20, 0xFF	; 255
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	00 e0       	ldi	r16, 0x00	; 0
    3344:	09 95       	icall
}
    3346:	0f 91       	pop	r16
    3348:	08 95       	ret

0000334a <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    334a:	0f 93       	push	r16
   device->send_func(device, 2,
    334c:	26 2f       	mov	r18, r22
    334e:	2f 77       	andi	r18, 0x7F	; 127
    3350:	dc 01       	movw	r26, r24
    3352:	ed 91       	ld	r30, X+
    3354:	fc 91       	ld	r31, X
    3356:	62 e0       	ldi	r22, 0x02	; 2
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	41 ef       	ldi	r20, 0xF1	; 241
    335c:	00 e0       	ldi	r16, 0x00	; 0
    335e:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    3360:	0f 91       	pop	r16
    3362:	08 95       	ret

00003364 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
   device->send_func(device, 3,
    3368:	26 2f       	mov	r18, r22
    336a:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    336c:	8b 01       	movw	r16, r22
    336e:	00 0f       	add	r16, r16
    3370:	01 2f       	mov	r16, r17
    3372:	00 1f       	adc	r16, r16
    3374:	11 0b       	sbc	r17, r17
    3376:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    3378:	0f 77       	andi	r16, 0x7F	; 127
    337a:	dc 01       	movw	r26, r24
    337c:	ed 91       	ld	r30, X+
    337e:	fc 91       	ld	r31, X
    3380:	63 e0       	ldi	r22, 0x03	; 3
    3382:	70 e0       	ldi	r23, 0x00	; 0
    3384:	42 ef       	ldi	r20, 0xF2	; 242
    3386:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	08 95       	ret

0000338e <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    338e:	0f 93       	push	r16
   device->send_func(device, 2,
    3390:	26 2f       	mov	r18, r22
    3392:	2f 77       	andi	r18, 0x7F	; 127
    3394:	dc 01       	movw	r26, r24
    3396:	ed 91       	ld	r30, X+
    3398:	fc 91       	ld	r31, X
    339a:	62 e0       	ldi	r22, 0x02	; 2
    339c:	70 e0       	ldi	r23, 0x00	; 0
    339e:	43 ef       	ldi	r20, 0xF3	; 243
    33a0:	00 e0       	ldi	r16, 0x00	; 0
    33a2:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    33a4:	0f 91       	pop	r16
    33a6:	08 95       	ret

000033a8 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    33a8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    33aa:	dc 01       	movw	r26, r24
    33ac:	ed 91       	ld	r30, X+
    33ae:	fc 91       	ld	r31, X
    33b0:	61 e0       	ldi	r22, 0x01	; 1
    33b2:	70 e0       	ldi	r23, 0x00	; 0
    33b4:	46 ef       	ldi	r20, 0xF6	; 246
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	00 e0       	ldi	r16, 0x00	; 0
    33ba:	09 95       	icall
}
    33bc:	0f 91       	pop	r16
    33be:	08 95       	ret

000033c0 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    33c0:	0f 93       	push	r16
    33c2:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    33c4:	dc 01       	movw	r26, r24
    33c6:	ed 91       	ld	r30, X+
    33c8:	fc 91       	ld	r31, X
    33ca:	61 e0       	ldi	r22, 0x01	; 1
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	00 e0       	ldi	r16, 0x00	; 0
    33d2:	09 95       	icall
}
    33d4:	0f 91       	pop	r16
    33d6:	08 95       	ret

000033d8 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    33d8:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    33da:	dc 01       	movw	r26, r24
    33dc:	ed 91       	ld	r30, X+
    33de:	fc 91       	ld	r31, X
    33e0:	09 95       	icall
}
    33e2:	0f 91       	pop	r16
    33e4:	08 95       	ret

000033e6 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    33e6:	6f 92       	push	r6
    33e8:	7f 92       	push	r7
    33ea:	8f 92       	push	r8
    33ec:	9f 92       	push	r9
    33ee:	af 92       	push	r10
    33f0:	bf 92       	push	r11
    33f2:	cf 92       	push	r12
    33f4:	df 92       	push	r13
    33f6:	ef 92       	push	r14
    33f8:	ff 92       	push	r15
    33fa:	0f 93       	push	r16
    33fc:	1f 93       	push	r17
    33fe:	cf 93       	push	r28
    3400:	df 93       	push	r29
    3402:	00 d0       	rcall	.+0      	; 0x3404 <midi_send_array+0x1e>
    3404:	0f 92       	push	r0
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	4c 01       	movw	r8, r24
    340c:	6b 01       	movw	r12, r22
    340e:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    3410:	61 15       	cp	r22, r1
    3412:	71 05       	cpc	r23, r1
    3414:	41 f1       	breq	.+80     	; 0x3466 <midi_send_array+0x80>
    3416:	ee 24       	eor	r14, r14
    3418:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    341a:	0f 2e       	mov	r0, r31
    341c:	f3 e0       	ldi	r31, 0x03	; 3
    341e:	6f 2e       	mov	r6, r31
    3420:	77 24       	eor	r7, r7
    3422:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    3424:	19 82       	std	Y+1, r1	; 0x01
    3426:	1a 82       	std	Y+2, r1	; 0x02
    3428:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    342a:	86 01       	movw	r16, r12
    342c:	0e 19       	sub	r16, r14
    342e:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    3430:	04 30       	cpi	r16, 0x04	; 4
    3432:	11 05       	cpc	r17, r1
    3434:	08 f0       	brcs	.+2      	; 0x3438 <midi_send_array+0x52>
    3436:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    3438:	b5 01       	movw	r22, r10
    343a:	6e 0d       	add	r22, r14
    343c:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    343e:	ce 01       	movw	r24, r28
    3440:	01 96       	adiw	r24, 0x01	; 1
    3442:	40 2f       	mov	r20, r16
    3444:	51 2f       	mov	r21, r17
    3446:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    344a:	c4 01       	movw	r24, r8
    344c:	b8 01       	movw	r22, r16
    344e:	49 81       	ldd	r20, Y+1	; 0x01
    3450:	2a 81       	ldd	r18, Y+2	; 0x02
    3452:	0b 81       	ldd	r16, Y+3	; 0x03
    3454:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    3458:	83 e0       	ldi	r24, 0x03	; 3
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	e8 0e       	add	r14, r24
    345e:	f9 1e       	adc	r15, r25
    3460:	ec 14       	cp	r14, r12
    3462:	fd 04       	cpc	r15, r13
    3464:	f8 f2       	brcs	.-66     	; 0x3424 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	1f 91       	pop	r17
    3472:	0f 91       	pop	r16
    3474:	ff 90       	pop	r15
    3476:	ef 90       	pop	r14
    3478:	df 90       	pop	r13
    347a:	cf 90       	pop	r12
    347c:	bf 90       	pop	r11
    347e:	af 90       	pop	r10
    3480:	9f 90       	pop	r9
    3482:	8f 90       	pop	r8
    3484:	7f 90       	pop	r7
    3486:	6f 90       	pop	r6
    3488:	08 95       	ret

0000348a <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    348a:	fc 01       	movw	r30, r24
    348c:	73 83       	std	Z+3, r23	; 0x03
    348e:	62 83       	std	Z+2, r22	; 0x02
}
    3490:	08 95       	ret

00003492 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    3492:	fc 01       	movw	r30, r24
    3494:	75 83       	std	Z+5, r23	; 0x05
    3496:	64 83       	std	Z+4, r22	; 0x04
}
    3498:	08 95       	ret

0000349a <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    349a:	fc 01       	movw	r30, r24
    349c:	77 83       	std	Z+7, r23	; 0x07
    349e:	66 83       	std	Z+6, r22	; 0x06
}
    34a0:	08 95       	ret

000034a2 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    34a2:	fc 01       	movw	r30, r24
    34a4:	71 87       	std	Z+9, r23	; 0x09
    34a6:	60 87       	std	Z+8, r22	; 0x08
}
    34a8:	08 95       	ret

000034aa <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    34aa:	fc 01       	movw	r30, r24
    34ac:	73 87       	std	Z+11, r23	; 0x0b
    34ae:	62 87       	std	Z+10, r22	; 0x0a
}
    34b0:	08 95       	ret

000034b2 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    34b2:	fc 01       	movw	r30, r24
    34b4:	75 87       	std	Z+13, r23	; 0x0d
    34b6:	64 87       	std	Z+12, r22	; 0x0c
}
    34b8:	08 95       	ret

000034ba <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    34ba:	fc 01       	movw	r30, r24
    34bc:	77 87       	std	Z+15, r23	; 0x0f
    34be:	66 87       	std	Z+14, r22	; 0x0e
}
    34c0:	08 95       	ret

000034c2 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    34c2:	fc 01       	movw	r30, r24
    34c4:	71 8b       	std	Z+17, r23	; 0x11
    34c6:	60 8b       	std	Z+16, r22	; 0x10
}
    34c8:	08 95       	ret

000034ca <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    34ca:	fc 01       	movw	r30, r24
    34cc:	73 8b       	std	Z+19, r23	; 0x13
    34ce:	62 8b       	std	Z+18, r22	; 0x12
}
    34d0:	08 95       	ret

000034d2 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    34d2:	fc 01       	movw	r30, r24
    34d4:	75 8b       	std	Z+21, r23	; 0x15
    34d6:	64 8b       	std	Z+20, r22	; 0x14
}
    34d8:	08 95       	ret

000034da <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    34da:	fc 01       	movw	r30, r24
    34dc:	77 8b       	std	Z+23, r23	; 0x17
    34de:	66 8b       	std	Z+22, r22	; 0x16
}
    34e0:	08 95       	ret

000034e2 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    34e2:	fc 01       	movw	r30, r24
    34e4:	71 8f       	std	Z+25, r23	; 0x19
    34e6:	60 8f       	std	Z+24, r22	; 0x18
}
    34e8:	08 95       	ret

000034ea <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    34ea:	fc 01       	movw	r30, r24
    34ec:	73 8f       	std	Z+27, r23	; 0x1b
    34ee:	62 8f       	std	Z+26, r22	; 0x1a
}
    34f0:	08 95       	ret

000034f2 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    34f2:	fc 01       	movw	r30, r24
    34f4:	75 8f       	std	Z+29, r23	; 0x1d
    34f6:	64 8f       	std	Z+28, r22	; 0x1c
}
    34f8:	08 95       	ret

000034fa <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    34fa:	fc 01       	movw	r30, r24
    34fc:	77 8f       	std	Z+31, r23	; 0x1f
    34fe:	66 8f       	std	Z+30, r22	; 0x1e
}
    3500:	08 95       	ret

00003502 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    3508:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    350a:	1f a2       	lds	r17, 0x9f
    350c:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    350e:	bc 01       	movw	r22, r24
    3510:	68 5d       	subi	r22, 0xD8	; 216
    3512:	7f 4f       	sbci	r23, 0xFF	; 255
    3514:	88 51       	subi	r24, 0x18	; 24
    3516:	9f 4f       	sbci	r25, 0xFF	; 255
    3518:	40 ec       	ldi	r20, 0xC0	; 192
    351a:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    351e:	1b 82       	std	Y+3, r1	; 0x03
    3520:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    3522:	1d 82       	std	Y+5, r1	; 0x05
    3524:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    3526:	1f 82       	std	Y+7, r1	; 0x07
    3528:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    352a:	19 86       	std	Y+9, r1	; 0x09
    352c:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    352e:	1b 86       	std	Y+11, r1	; 0x0b
    3530:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    3532:	1d 86       	std	Y+13, r1	; 0x0d
    3534:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    3536:	1f 86       	std	Y+15, r1	; 0x0f
    3538:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    353a:	19 8a       	std	Y+17, r1	; 0x11
    353c:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    353e:	1b 8a       	std	Y+19, r1	; 0x13
    3540:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    3542:	1d 8a       	std	Y+21, r1	; 0x15
    3544:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    3546:	1f 8a       	std	Y+23, r1	; 0x17
    3548:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    354a:	19 8e       	std	Y+25, r1	; 0x19
    354c:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    354e:	1b 8e       	std	Y+27, r1	; 0x1b
    3550:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    3552:	1d 8e       	std	Y+29, r1	; 0x1d
    3554:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    3556:	1f 8e       	std	Y+31, r1	; 0x1f
    3558:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    355a:	19 a2       	lds	r17, 0x99
    355c:	18 a2       	lds	r17, 0x98
}
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	08 95       	ret

00003564 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    3564:	ef 92       	push	r14
    3566:	ff 92       	push	r15
    3568:	0f 93       	push	r16
    356a:	1f 93       	push	r17
    356c:	cf 93       	push	r28
    356e:	df 93       	push	r29
    3570:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3572:	66 23       	and	r22, r22
    3574:	99 f0       	breq	.+38     	; 0x359c <midi_device_input+0x38>
    3576:	04 2f       	mov	r16, r20
    3578:	15 2f       	mov	r17, r21
    357a:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    357c:	0f 2e       	mov	r0, r31
    357e:	f8 ee       	ldi	r31, 0xE8	; 232
    3580:	ef 2e       	mov	r14, r31
    3582:	ff 24       	eor	r15, r15
    3584:	f0 2d       	mov	r31, r0
    3586:	e8 0e       	add	r14, r24
    3588:	f9 1e       	adc	r15, r25
    358a:	f8 01       	movw	r30, r16
    358c:	61 91       	ld	r22, Z+
    358e:	8f 01       	movw	r16, r30
    3590:	c7 01       	movw	r24, r14
    3592:	0e 94 02 18 	call	0x3004	; 0x3004 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3596:	cf 5f       	subi	r28, 0xFF	; 255
    3598:	cd 17       	cp	r28, r29
    359a:	b9 f7       	brne	.-18     	; 0x358a <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    359c:	df 91       	pop	r29
    359e:	cf 91       	pop	r28
    35a0:	1f 91       	pop	r17
    35a2:	0f 91       	pop	r16
    35a4:	ff 90       	pop	r15
    35a6:	ef 90       	pop	r14
    35a8:	08 95       	ret

000035aa <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    35aa:	fc 01       	movw	r30, r24
    35ac:	71 83       	std	Z+1, r23	; 0x01
    35ae:	60 83       	st	Z, r22
}
    35b0:	08 95       	ret

000035b2 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    35b2:	fc 01       	movw	r30, r24
    35b4:	71 a3       	lds	r23, 0x51
    35b6:	60 a3       	lds	r22, 0x50
}
    35b8:	08 95       	ret

000035ba <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    35ba:	af 92       	push	r10
    35bc:	bf 92       	push	r11
    35be:	cf 92       	push	r12
    35c0:	df 92       	push	r13
    35c2:	ef 92       	push	r14
    35c4:	ff 92       	push	r15
    35c6:	0f 93       	push	r16
    35c8:	1f 93       	push	r17
    35ca:	cf 93       	push	r28
    35cc:	df 93       	push	r29
    35ce:	00 d0       	rcall	.+0      	; 0x35d0 <midi_input_callbacks+0x16>
    35d0:	0f 92       	push	r0
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	6c 01       	movw	r12, r24
    35d8:	5b 01       	movw	r10, r22
    35da:	f4 2e       	mov	r15, r20
    35dc:	e2 2e       	mov	r14, r18
    35de:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    35e0:	dc 01       	movw	r26, r24
    35e2:	95 96       	adiw	r26, 0x25	; 37
    35e4:	8c 91       	ld	r24, X
    35e6:	95 97       	sbiw	r26, 0x25	; 37
    35e8:	84 30       	cpi	r24, 0x04	; 4
    35ea:	e9 f4       	brne	.+58     	; 0x3626 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    35ec:	5a 96       	adiw	r26, 0x1a	; 26
    35ee:	ed 91       	ld	r30, X+
    35f0:	fc 91       	ld	r31, X
    35f2:	5b 97       	sbiw	r26, 0x1b	; 27
    35f4:	30 97       	sbiw	r30, 0x00	; 0
    35f6:	09 f4       	brne	.+2      	; 0x35fa <midi_input_callbacks+0x40>
    35f8:	ee c0       	rjmp	.+476    	; 0x37d6 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    35fa:	cb 01       	movw	r24, r22
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	63 e0       	ldi	r22, 0x03	; 3
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__udivmodhi4>
    3606:	cb 01       	movw	r24, r22
    3608:	88 0f       	add	r24, r24
    360a:	99 1f       	adc	r25, r25
    360c:	68 0f       	add	r22, r24
    360e:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    3610:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    3612:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    3614:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    3616:	4a 2d       	mov	r20, r10
    3618:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    361a:	c6 01       	movw	r24, r12
    361c:	9e 01       	movw	r18, r28
    361e:	2f 5f       	subi	r18, 0xFF	; 255
    3620:	3f 4f       	sbci	r19, 0xFF	; 255
    3622:	09 95       	icall
    3624:	c8 c0       	rjmp	.+400    	; 0x37b6 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    3626:	62 30       	cpi	r22, 0x02	; 2
    3628:	71 05       	cpc	r23, r1
    362a:	09 f4       	brne	.+2      	; 0x362e <midi_input_callbacks+0x74>
    362c:	5f c0       	rjmp	.+190    	; 0x36ec <midi_input_callbacks+0x132>
    362e:	63 30       	cpi	r22, 0x03	; 3
    3630:	71 05       	cpc	r23, r1
    3632:	29 f0       	breq	.+10     	; 0x363e <midi_input_callbacks+0x84>
    3634:	61 30       	cpi	r22, 0x01	; 1
    3636:	71 05       	cpc	r23, r1
    3638:	09 f0       	breq	.+2      	; 0x363c <midi_input_callbacks+0x82>
    363a:	b3 c0       	rjmp	.+358    	; 0x37a2 <midi_input_callbacks+0x1e8>
    363c:	99 c0       	rjmp	.+306    	; 0x3770 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    363e:	84 2f       	mov	r24, r20
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	80 7f       	andi	r24, 0xF0	; 240
    3644:	90 70       	andi	r25, 0x00	; 0
    3646:	80 3a       	cpi	r24, 0xA0	; 160
    3648:	91 05       	cpc	r25, r1
    364a:	29 f1       	breq	.+74     	; 0x3696 <midi_input_callbacks+0xdc>
    364c:	81 3a       	cpi	r24, 0xA1	; 161
    364e:	91 05       	cpc	r25, r1
    3650:	3c f4       	brge	.+14     	; 0x3660 <midi_input_callbacks+0xa6>
    3652:	80 38       	cpi	r24, 0x80	; 128
    3654:	91 05       	cpc	r25, r1
    3656:	c9 f0       	breq	.+50     	; 0x368a <midi_input_callbacks+0xd0>
    3658:	80 39       	cpi	r24, 0x90	; 144
    365a:	91 05       	cpc	r25, r1
    365c:	91 f5       	brne	.+100    	; 0x36c2 <midi_input_callbacks+0x108>
    365e:	0f c0       	rjmp	.+30     	; 0x367e <midi_input_callbacks+0xc4>
    3660:	80 3e       	cpi	r24, 0xE0	; 224
    3662:	91 05       	cpc	r25, r1
    3664:	f1 f0       	breq	.+60     	; 0x36a2 <midi_input_callbacks+0xe8>
    3666:	80 3f       	cpi	r24, 0xF0	; 240
    3668:	91 05       	cpc	r25, r1
    366a:	09 f1       	breq	.+66     	; 0x36ae <midi_input_callbacks+0xf4>
    366c:	80 3b       	cpi	r24, 0xB0	; 176
    366e:	91 05       	cpc	r25, r1
    3670:	41 f5       	brne	.+80     	; 0x36c2 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    3672:	d6 01       	movw	r26, r12
    3674:	12 96       	adiw	r26, 0x02	; 2
    3676:	ed 91       	ld	r30, X+
    3678:	fc 91       	ld	r31, X
    367a:	13 97       	sbiw	r26, 0x03	; 3
              break;
    367c:	24 c0       	rjmp	.+72     	; 0x36c6 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    367e:	d6 01       	movw	r26, r12
    3680:	14 96       	adiw	r26, 0x04	; 4
    3682:	ed 91       	ld	r30, X+
    3684:	fc 91       	ld	r31, X
    3686:	15 97       	sbiw	r26, 0x05	; 5
              break;
    3688:	1e c0       	rjmp	.+60     	; 0x36c6 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    368a:	d6 01       	movw	r26, r12
    368c:	16 96       	adiw	r26, 0x06	; 6
    368e:	ed 91       	ld	r30, X+
    3690:	fc 91       	ld	r31, X
    3692:	17 97       	sbiw	r26, 0x07	; 7
              break;
    3694:	18 c0       	rjmp	.+48     	; 0x36c6 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    3696:	d6 01       	movw	r26, r12
    3698:	18 96       	adiw	r26, 0x08	; 8
    369a:	ed 91       	ld	r30, X+
    369c:	fc 91       	ld	r31, X
    369e:	19 97       	sbiw	r26, 0x09	; 9
              break;
    36a0:	12 c0       	rjmp	.+36     	; 0x36c6 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    36a2:	d6 01       	movw	r26, r12
    36a4:	1a 96       	adiw	r26, 0x0a	; 10
    36a6:	ed 91       	ld	r30, X+
    36a8:	fc 91       	ld	r31, X
    36aa:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    36ac:	0c c0       	rjmp	.+24     	; 0x36c6 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    36ae:	b2 ef       	ldi	r27, 0xF2	; 242
    36b0:	4b 17       	cp	r20, r27
    36b2:	09 f0       	breq	.+2      	; 0x36b6 <midi_input_callbacks+0xfc>
    36b4:	90 c0       	rjmp	.+288    	; 0x37d6 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    36b6:	d6 01       	movw	r26, r12
    36b8:	1c 96       	adiw	r26, 0x0c	; 12
    36ba:	ed 91       	ld	r30, X+
    36bc:	fc 91       	ld	r31, X
    36be:	1d 97       	sbiw	r26, 0x0d	; 13
    36c0:	02 c0       	rjmp	.+4      	; 0x36c6 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    36c2:	e0 e0       	ldi	r30, 0x00	; 0
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    36c6:	30 97       	sbiw	r30, 0x00	; 0
    36c8:	09 f4       	brne	.+2      	; 0x36cc <midi_input_callbacks+0x112>
    36ca:	85 c0       	rjmp	.+266    	; 0x37d6 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    36cc:	b2 ef       	ldi	r27, 0xF2	; 242
    36ce:	fb 16       	cp	r15, r27
    36d0:	31 f4       	brne	.+12     	; 0x36de <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    36d2:	c6 01       	movw	r24, r12
    36d4:	62 ef       	ldi	r22, 0xF2	; 242
    36d6:	4e 2d       	mov	r20, r14
    36d8:	21 2f       	mov	r18, r17
    36da:	09 95       	icall
    36dc:	6c c0       	rjmp	.+216    	; 0x37b6 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    36de:	6f 2d       	mov	r22, r15
    36e0:	6f 70       	andi	r22, 0x0F	; 15
    36e2:	c6 01       	movw	r24, r12
    36e4:	4e 2d       	mov	r20, r14
    36e6:	21 2f       	mov	r18, r17
    36e8:	09 95       	icall
    36ea:	65 c0       	rjmp	.+202    	; 0x37b6 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    36ec:	84 2f       	mov	r24, r20
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	80 7f       	andi	r24, 0xF0	; 240
    36f2:	90 70       	andi	r25, 0x00	; 0
    36f4:	80 3d       	cpi	r24, 0xD0	; 208
    36f6:	91 05       	cpc	r25, r1
    36f8:	61 f0       	breq	.+24     	; 0x3712 <midi_input_callbacks+0x158>
    36fa:	80 3f       	cpi	r24, 0xF0	; 240
    36fc:	91 05       	cpc	r25, r1
    36fe:	79 f0       	breq	.+30     	; 0x371e <midi_input_callbacks+0x164>
    3700:	80 3c       	cpi	r24, 0xC0	; 192
    3702:	91 05       	cpc	r25, r1
    3704:	f9 f4       	brne	.+62     	; 0x3744 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    3706:	d6 01       	movw	r26, r12
    3708:	1e 96       	adiw	r26, 0x0e	; 14
    370a:	ed 91       	ld	r30, X+
    370c:	fc 91       	ld	r31, X
    370e:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    3710:	1b c0       	rjmp	.+54     	; 0x3748 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    3712:	d6 01       	movw	r26, r12
    3714:	50 96       	adiw	r26, 0x10	; 16
    3716:	ed 91       	ld	r30, X+
    3718:	fc 91       	ld	r31, X
    371a:	51 97       	sbiw	r26, 0x11	; 17
              break;
    371c:	15 c0       	rjmp	.+42     	; 0x3748 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    371e:	b3 ef       	ldi	r27, 0xF3	; 243
    3720:	4b 17       	cp	r20, r27
    3722:	31 f4       	brne	.+12     	; 0x3730 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    3724:	d6 01       	movw	r26, r12
    3726:	52 96       	adiw	r26, 0x12	; 18
    3728:	ed 91       	ld	r30, X+
    372a:	fc 91       	ld	r31, X
    372c:	53 97       	sbiw	r26, 0x13	; 19
    372e:	0c c0       	rjmp	.+24     	; 0x3748 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    3730:	b1 ef       	ldi	r27, 0xF1	; 241
    3732:	4b 17       	cp	r20, r27
    3734:	09 f0       	breq	.+2      	; 0x3738 <midi_input_callbacks+0x17e>
    3736:	4f c0       	rjmp	.+158    	; 0x37d6 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    3738:	d6 01       	movw	r26, r12
    373a:	54 96       	adiw	r26, 0x14	; 20
    373c:	ed 91       	ld	r30, X+
    373e:	fc 91       	ld	r31, X
    3740:	55 97       	sbiw	r26, 0x15	; 21
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    3744:	e0 e0       	ldi	r30, 0x00	; 0
    3746:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    3748:	30 97       	sbiw	r30, 0x00	; 0
    374a:	09 f4       	brne	.+2      	; 0x374e <midi_input_callbacks+0x194>
    374c:	44 c0       	rjmp	.+136    	; 0x37d6 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    374e:	b3 ef       	ldi	r27, 0xF3	; 243
    3750:	fb 16       	cp	r15, r27
    3752:	19 f0       	breq	.+6      	; 0x375a <midi_input_callbacks+0x1a0>
    3754:	81 ef       	ldi	r24, 0xF1	; 241
    3756:	f8 16       	cp	r15, r24
    3758:	29 f4       	brne	.+10     	; 0x3764 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    375a:	c6 01       	movw	r24, r12
    375c:	6f 2d       	mov	r22, r15
    375e:	4e 2d       	mov	r20, r14
    3760:	09 95       	icall
    3762:	29 c0       	rjmp	.+82     	; 0x37b6 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    3764:	6f 2d       	mov	r22, r15
    3766:	6f 70       	andi	r22, 0x0F	; 15
    3768:	c6 01       	movw	r24, r12
    376a:	4e 2d       	mov	r20, r14
    376c:	09 95       	icall
    376e:	23 c0       	rjmp	.+70     	; 0x37b6 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    3770:	84 2f       	mov	r24, r20
    3772:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <midi_is_realtime>
    3776:	88 23       	and	r24, r24
    3778:	31 f0       	breq	.+12     	; 0x3786 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    377a:	d6 01       	movw	r26, r12
    377c:	56 96       	adiw	r26, 0x16	; 22
    377e:	ed 91       	ld	r30, X+
    3780:	fc 91       	ld	r31, X
    3782:	57 97       	sbiw	r26, 0x17	; 23
    3784:	08 c0       	rjmp	.+16     	; 0x3796 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    3786:	b6 ef       	ldi	r27, 0xF6	; 246
    3788:	fb 16       	cp	r15, r27
    378a:	29 f5       	brne	.+74     	; 0x37d6 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    378c:	d6 01       	movw	r26, r12
    378e:	58 96       	adiw	r26, 0x18	; 24
    3790:	ed 91       	ld	r30, X+
    3792:	fc 91       	ld	r31, X
    3794:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    3796:	30 97       	sbiw	r30, 0x00	; 0
    3798:	f1 f0       	breq	.+60     	; 0x37d6 <midi_input_callbacks+0x21c>
            func(device, byte0);
    379a:	c6 01       	movw	r24, r12
    379c:	6f 2d       	mov	r22, r15
    379e:	09 95       	icall
    37a0:	0a c0       	rjmp	.+20     	; 0x37b6 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    37a2:	64 30       	cpi	r22, 0x04	; 4
    37a4:	71 05       	cpc	r23, r1
    37a6:	a8 f4       	brcc	.+42     	; 0x37d2 <midi_input_callbacks+0x218>
    37a8:	16 c0       	rjmp	.+44     	; 0x37d6 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    37aa:	c6 01       	movw	r24, r12
    37ac:	b5 01       	movw	r22, r10
    37ae:	4f 2d       	mov	r20, r15
    37b0:	2e 2d       	mov	r18, r14
    37b2:	01 2f       	mov	r16, r17
    37b4:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    37b6:	d6 01       	movw	r26, r12
    37b8:	5e 96       	adiw	r26, 0x1e	; 30
    37ba:	ed 91       	ld	r30, X+
    37bc:	fc 91       	ld	r31, X
    37be:	5f 97       	sbiw	r26, 0x1f	; 31
    37c0:	30 97       	sbiw	r30, 0x00	; 0
    37c2:	89 f0       	breq	.+34     	; 0x37e6 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    37c4:	c6 01       	movw	r24, r12
    37c6:	b5 01       	movw	r22, r10
    37c8:	4f 2d       	mov	r20, r15
    37ca:	2e 2d       	mov	r18, r14
    37cc:	01 2f       	mov	r16, r17
    37ce:	09 95       	icall
    37d0:	0a c0       	rjmp	.+20     	; 0x37e6 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    37d2:	aa 24       	eor	r10, r10
    37d4:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    37d6:	d6 01       	movw	r26, r12
    37d8:	5c 96       	adiw	r26, 0x1c	; 28
    37da:	ed 91       	ld	r30, X+
    37dc:	fc 91       	ld	r31, X
    37de:	5d 97       	sbiw	r26, 0x1d	; 29
    37e0:	30 97       	sbiw	r30, 0x00	; 0
    37e2:	19 f7       	brne	.-58     	; 0x37aa <midi_input_callbacks+0x1f0>
    37e4:	e8 cf       	rjmp	.-48     	; 0x37b6 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	df 91       	pop	r29
    37ee:	cf 91       	pop	r28
    37f0:	1f 91       	pop	r17
    37f2:	0f 91       	pop	r16
    37f4:	ff 90       	pop	r15
    37f6:	ef 90       	pop	r14
    37f8:	df 90       	pop	r13
    37fa:	cf 90       	pop	r12
    37fc:	bf 90       	pop	r11
    37fe:	af 90       	pop	r10
    3800:	08 95       	ret

00003802 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    3802:	ef 92       	push	r14
    3804:	ff 92       	push	r15
    3806:	0f 93       	push	r16
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	7c 01       	movw	r14, r24
    380e:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    3810:	86 2f       	mov	r24, r22
    3812:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <midi_is_realtime>
    3816:	88 23       	and	r24, r24
    3818:	91 f0       	breq	.+36     	; 0x383e <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    381a:	d7 01       	movw	r26, r14
    381c:	95 96       	adiw	r26, 0x25	; 37
    381e:	dc 91       	ld	r29, X
    3820:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	95 96       	adiw	r26, 0x25	; 37
    3826:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    3828:	c7 01       	movw	r24, r14
    382a:	61 e0       	ldi	r22, 0x01	; 1
    382c:	70 e0       	ldi	r23, 0x00	; 0
    382e:	4c 2f       	mov	r20, r28
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	00 e0       	ldi	r16, 0x00	; 0
    3834:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <midi_input_callbacks>
    device->input_state = state;
    3838:	f7 01       	movw	r30, r14
    383a:	d5 a3       	lds	r29, 0x55
    383c:	b7 c0       	rjmp	.+366    	; 0x39ac <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    383e:	8c 2f       	mov	r24, r28
    3840:	0e 94 76 18 	call	0x30ec	; 0x30ec <midi_is_statusbyte>
    3844:	88 23       	and	r24, r24
    3846:	09 f4       	brne	.+2      	; 0x384a <midi_process_byte+0x48>
    3848:	73 c0       	rjmp	.+230    	; 0x3930 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    384a:	d7 01       	movw	r26, r14
    384c:	95 96       	adiw	r26, 0x25	; 37
    384e:	8c 91       	ld	r24, X
    3850:	95 97       	sbiw	r26, 0x25	; 37
    3852:	84 30       	cpi	r24, 0x04	; 4
    3854:	49 f0       	breq	.+18     	; 0x3868 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    3856:	92 96       	adiw	r26, 0x22	; 34
    3858:	cc 93       	st	X, r28
    385a:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	97 96       	adiw	r26, 0x27	; 39
    3862:	9c 93       	st	X, r25
    3864:	8e 93       	st	-X, r24
    3866:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    3868:	8c 2f       	mov	r24, r28
    386a:	0e 94 80 18 	call	0x3100	; 0x3100 <midi_packet_length>
    386e:	81 30       	cpi	r24, 0x01	; 1
    3870:	41 f0       	breq	.+16     	; 0x3882 <midi_process_byte+0x80>
    3872:	81 30       	cpi	r24, 0x01	; 1
    3874:	00 f1       	brcs	.+64     	; 0x38b6 <midi_process_byte+0xb4>
    3876:	82 30       	cpi	r24, 0x02	; 2
    3878:	a1 f0       	breq	.+40     	; 0x38a2 <midi_process_byte+0xa0>
    387a:	83 30       	cpi	r24, 0x03	; 3
    387c:	09 f0       	breq	.+2      	; 0x3880 <midi_process_byte+0x7e>
    387e:	4f c0       	rjmp	.+158    	; 0x391e <midi_process_byte+0x11c>
    3880:	14 c0       	rjmp	.+40     	; 0x38aa <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	f7 01       	movw	r30, r14
    3886:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3888:	c7 01       	movw	r24, r14
    388a:	61 e0       	ldi	r22, 0x01	; 1
    388c:	70 e0       	ldi	r23, 0x00	; 0
    388e:	4c 2f       	mov	r20, r28
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	00 e0       	ldi	r16, 0x00	; 0
    3894:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <midi_input_callbacks>
        device->input_state = IDLE;
    3898:	d7 01       	movw	r26, r14
    389a:	95 96       	adiw	r26, 0x25	; 37
    389c:	1c 92       	st	X, r1
    389e:	95 97       	sbiw	r26, 0x25	; 37
        break;
    38a0:	85 c0       	rjmp	.+266    	; 0x39ac <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    38a2:	82 e0       	ldi	r24, 0x02	; 2
    38a4:	f7 01       	movw	r30, r14
    38a6:	85 a3       	lds	r24, 0x55
        break;
    38a8:	81 c0       	rjmp	.+258    	; 0x39ac <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    38aa:	83 e0       	ldi	r24, 0x03	; 3
    38ac:	d7 01       	movw	r26, r14
    38ae:	95 96       	adiw	r26, 0x25	; 37
    38b0:	8c 93       	st	X, r24
    38b2:	95 97       	sbiw	r26, 0x25	; 37
        break;
    38b4:	7b c0       	rjmp	.+246    	; 0x39ac <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    38b6:	c0 3f       	cpi	r28, 0xF0	; 240
    38b8:	19 f0       	breq	.+6      	; 0x38c0 <midi_process_byte+0xbe>
    38ba:	c7 3f       	cpi	r28, 0xF7	; 247
    38bc:	59 f5       	brne	.+86     	; 0x3914 <midi_process_byte+0x112>
    38be:	0a c0       	rjmp	.+20     	; 0x38d4 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    38c0:	84 e0       	ldi	r24, 0x04	; 4
    38c2:	f7 01       	movw	r30, r14
    38c4:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    38c6:	80 ef       	ldi	r24, 0xF0	; 240
    38c8:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	97 a3       	lds	r25, 0x57
    38d0:	86 a3       	lds	r24, 0x56
            break;
    38d2:	6c c0       	rjmp	.+216    	; 0x39ac <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    38d4:	d7 01       	movw	r26, r14
    38d6:	96 96       	adiw	r26, 0x26	; 38
    38d8:	2d 91       	ld	r18, X+
    38da:	3c 91       	ld	r19, X
    38dc:	97 97       	sbiw	r26, 0x27	; 39
    38de:	c9 01       	movw	r24, r18
    38e0:	63 e0       	ldi	r22, 0x03	; 3
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__udivmodhi4>
    38e8:	f7 01       	movw	r30, r14
    38ea:	e8 0f       	add	r30, r24
    38ec:	f9 1f       	adc	r31, r25
    38ee:	87 ef       	ldi	r24, 0xF7	; 247
    38f0:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    38f2:	b9 01       	movw	r22, r18
    38f4:	6f 5f       	subi	r22, 0xFF	; 255
    38f6:	7f 4f       	sbci	r23, 0xFF	; 255
    38f8:	f7 01       	movw	r30, r14
    38fa:	77 a3       	lds	r23, 0x57
    38fc:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    38fe:	c7 01       	movw	r24, r14
    3900:	42 a1       	lds	r20, 0x42
    3902:	23 a1       	lds	r18, 0x43
    3904:	04 a1       	lds	r16, 0x44
    3906:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    390a:	d7 01       	movw	r26, r14
    390c:	95 96       	adiw	r26, 0x25	; 37
    390e:	1c 92       	st	X, r1
    3910:	95 97       	sbiw	r26, 0x25	; 37
            break;
    3912:	4c c0       	rjmp	.+152    	; 0x39ac <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    3914:	f7 01       	movw	r30, r14
    3916:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    3918:	17 a2       	lds	r17, 0x97
    391a:	16 a2       	lds	r17, 0x96
    391c:	47 c0       	rjmp	.+142    	; 0x39ac <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    391e:	d7 01       	movw	r26, r14
    3920:	95 96       	adiw	r26, 0x25	; 37
    3922:	1c 92       	st	X, r1
    3924:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    3926:	97 96       	adiw	r26, 0x27	; 39
    3928:	1c 92       	st	X, r1
    392a:	1e 92       	st	-X, r1
    392c:	96 97       	sbiw	r26, 0x26	; 38
        break;
    392e:	3e c0       	rjmp	.+124    	; 0x39ac <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    3930:	f7 01       	movw	r30, r14
    3932:	25 a1       	lds	r18, 0x45
    3934:	22 23       	and	r18, r18
    3936:	d1 f1       	breq	.+116    	; 0x39ac <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    3938:	06 a0       	lds	r16, 0x86
    393a:	f7 a1       	lds	r31, 0x47
    393c:	e0 2d       	mov	r30, r0
    393e:	cf 01       	movw	r24, r30
    3940:	63 e0       	ldi	r22, 0x03	; 3
    3942:	70 e0       	ldi	r23, 0x00	; 0
    3944:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__udivmodhi4>
    3948:	ac 01       	movw	r20, r24
    394a:	8e 0d       	add	r24, r14
    394c:	9f 1d       	adc	r25, r15
    394e:	dc 01       	movw	r26, r24
    3950:	92 96       	adiw	r26, 0x22	; 34
    3952:	cc 93       	st	X, r28
    3954:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    3956:	bf 01       	movw	r22, r30
    3958:	6f 5f       	subi	r22, 0xFF	; 255
    395a:	7f 4f       	sbci	r23, 0xFF	; 255
    395c:	f7 01       	movw	r30, r14
    395e:	77 a3       	lds	r23, 0x57
    3960:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    3962:	41 30       	cpi	r20, 0x01	; 1
    3964:	51 05       	cpc	r21, r1
    3966:	91 f0       	breq	.+36     	; 0x398c <midi_process_byte+0x18a>
    3968:	42 30       	cpi	r20, 0x02	; 2
    396a:	51 05       	cpc	r21, r1
    396c:	f9 f4       	brne	.+62     	; 0x39ac <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    396e:	c7 01       	movw	r24, r14
    3970:	42 a1       	lds	r20, 0x42
    3972:	23 a1       	lds	r18, 0x43
    3974:	04 a1       	lds	r16, 0x44
    3976:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    397a:	f7 01       	movw	r30, r14
    397c:	85 a1       	lds	r24, 0x45
    397e:	84 30       	cpi	r24, 0x04	; 4
    3980:	a9 f0       	breq	.+42     	; 0x39ac <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	97 a3       	lds	r25, 0x57
    3988:	86 a3       	lds	r24, 0x56
    398a:	10 c0       	rjmp	.+32     	; 0x39ac <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    398c:	22 30       	cpi	r18, 0x02	; 2
    398e:	71 f4       	brne	.+28     	; 0x39ac <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3990:	c7 01       	movw	r24, r14
    3992:	42 a1       	lds	r20, 0x42
    3994:	23 a1       	lds	r18, 0x43
    3996:	00 e0       	ldi	r16, 0x00	; 0
    3998:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    399c:	f7 01       	movw	r30, r14
    399e:	85 a1       	lds	r24, 0x45
    39a0:	84 30       	cpi	r24, 0x04	; 4
    39a2:	21 f0       	breq	.+8      	; 0x39ac <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	97 a3       	lds	r25, 0x57
    39aa:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	0f 91       	pop	r16
    39b2:	ff 90       	pop	r15
    39b4:	ef 90       	pop	r14
    39b6:	08 95       	ret

000039b8 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    39b8:	cf 92       	push	r12
    39ba:	df 92       	push	r13
    39bc:	ef 92       	push	r14
    39be:	ff 92       	push	r15
    39c0:	0f 93       	push	r16
    39c2:	1f 93       	push	r17
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
    39c8:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    39ca:	dc 01       	movw	r26, r24
    39cc:	90 96       	adiw	r26, 0x20	; 32
    39ce:	ed 91       	ld	r30, X+
    39d0:	fc 91       	ld	r31, X
    39d2:	91 97       	sbiw	r26, 0x21	; 33
    39d4:	30 97       	sbiw	r30, 0x00	; 0
    39d6:	09 f0       	breq	.+2      	; 0x39da <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    39d8:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    39da:	0f 2e       	mov	r0, r31
    39dc:	f8 ee       	ldi	r31, 0xE8	; 232
    39de:	ef 2e       	mov	r14, r31
    39e0:	ff 24       	eor	r15, r15
    39e2:	f0 2d       	mov	r31, r0
    39e4:	ec 0c       	add	r14, r12
    39e6:	fd 1c       	adc	r15, r13
    39e8:	c7 01       	movw	r24, r14
    39ea:	0e 94 31 18 	call	0x3062	; 0x3062 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    39ee:	c8 2f       	mov	r28, r24
    39f0:	d0 e0       	ldi	r29, 0x00	; 0
    39f2:	20 97       	sbiw	r28, 0x00	; 0
    39f4:	99 f0       	breq	.+38     	; 0x3a1c <midi_device_process+0x64>
    39f6:	00 e0       	ldi	r16, 0x00	; 0
    39f8:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    39fa:	c7 01       	movw	r24, r14
    39fc:	60 e0       	ldi	r22, 0x00	; 0
    39fe:	0e 94 46 18 	call	0x308c	; 0x308c <bytequeue_get>
    3a02:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    3a04:	c6 01       	movw	r24, r12
    3a06:	0e 94 01 1c 	call	0x3802	; 0x3802 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3a0a:	c7 01       	movw	r24, r14
    3a0c:	61 e0       	ldi	r22, 0x01	; 1
    3a0e:	0e 94 57 18 	call	0x30ae	; 0x30ae <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3a12:	0f 5f       	subi	r16, 0xFF	; 255
    3a14:	1f 4f       	sbci	r17, 0xFF	; 255
    3a16:	0c 17       	cp	r16, r28
    3a18:	1d 07       	cpc	r17, r29
    3a1a:	78 f3       	brcs	.-34     	; 0x39fa <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	1f 91       	pop	r17
    3a22:	0f 91       	pop	r16
    3a24:	ff 90       	pop	r15
    3a26:	ef 90       	pop	r14
    3a28:	df 90       	pop	r13
    3a2a:	cf 90       	pop	r12
    3a2c:	08 95       	ret

00003a2e <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3a2e:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    3a30:	67 e0       	ldi	r22, 0x07	; 7
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__udivmodhi4>
    3a38:	48 2f       	mov	r20, r24
   if (remainder)
    3a3a:	88 23       	and	r24, r24
    3a3c:	81 f0       	breq	.+32     	; 0x3a5e <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    3a3e:	c9 01       	movw	r24, r18
    3a40:	67 e0       	ldi	r22, 0x07	; 7
    3a42:	70 e0       	ldi	r23, 0x00	; 0
    3a44:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__udivmodhi4>
    3a48:	cb 01       	movw	r24, r22
    3a4a:	88 0f       	add	r24, r24
    3a4c:	99 1f       	adc	r25, r25
    3a4e:	88 0f       	add	r24, r24
    3a50:	99 1f       	adc	r25, r25
    3a52:	88 0f       	add	r24, r24
    3a54:	99 1f       	adc	r25, r25
    3a56:	01 96       	adiw	r24, 0x01	; 1
    3a58:	84 0f       	add	r24, r20
    3a5a:	91 1d       	adc	r25, r1
    3a5c:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3a5e:	c9 01       	movw	r24, r18
    3a60:	67 e0       	ldi	r22, 0x07	; 7
    3a62:	70 e0       	ldi	r23, 0x00	; 0
    3a64:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__udivmodhi4>
    3a68:	cb 01       	movw	r24, r22
    3a6a:	88 0f       	add	r24, r24
    3a6c:	99 1f       	adc	r25, r25
    3a6e:	88 0f       	add	r24, r24
    3a70:	99 1f       	adc	r25, r25
    3a72:	88 0f       	add	r24, r24
    3a74:	99 1f       	adc	r25, r25
}
    3a76:	08 95       	ret

00003a78 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3a78:	48 2f       	mov	r20, r24
    3a7a:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3a7c:	a1 f0       	breq	.+40     	; 0x3aa6 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3a7e:	9c 01       	movw	r18, r24
    3a80:	36 95       	lsr	r19
    3a82:	27 95       	ror	r18
    3a84:	36 95       	lsr	r19
    3a86:	27 95       	ror	r18
    3a88:	36 95       	lsr	r19
    3a8a:	27 95       	ror	r18
    3a8c:	c9 01       	movw	r24, r18
    3a8e:	88 0f       	add	r24, r24
    3a90:	99 1f       	adc	r25, r25
    3a92:	88 0f       	add	r24, r24
    3a94:	99 1f       	adc	r25, r25
    3a96:	88 0f       	add	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	82 1b       	sub	r24, r18
    3a9c:	93 0b       	sbc	r25, r19
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	84 0f       	add	r24, r20
    3aa2:	91 1d       	adc	r25, r1
    3aa4:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    3aa6:	9c 01       	movw	r18, r24
    3aa8:	36 95       	lsr	r19
    3aaa:	27 95       	ror	r18
    3aac:	36 95       	lsr	r19
    3aae:	27 95       	ror	r18
    3ab0:	36 95       	lsr	r19
    3ab2:	27 95       	ror	r18
    3ab4:	c9 01       	movw	r24, r18
    3ab6:	88 0f       	add	r24, r24
    3ab8:	99 1f       	adc	r25, r25
    3aba:	88 0f       	add	r24, r24
    3abc:	99 1f       	adc	r25, r25
    3abe:	88 0f       	add	r24, r24
    3ac0:	99 1f       	adc	r25, r25
    3ac2:	82 1b       	sub	r24, r18
    3ac4:	93 0b       	sbc	r25, r19
}
    3ac6:	08 95       	ret

00003ac8 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3ac8:	2f 92       	push	r2
    3aca:	3f 92       	push	r3
    3acc:	4f 92       	push	r4
    3ace:	5f 92       	push	r5
    3ad0:	6f 92       	push	r6
    3ad2:	7f 92       	push	r7
    3ad4:	8f 92       	push	r8
    3ad6:	9f 92       	push	r9
    3ad8:	af 92       	push	r10
    3ada:	bf 92       	push	r11
    3adc:	cf 92       	push	r12
    3ade:	df 92       	push	r13
    3ae0:	ef 92       	push	r14
    3ae2:	ff 92       	push	r15
    3ae4:	0f 93       	push	r16
    3ae6:	1f 93       	push	r17
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
    3aec:	00 d0       	rcall	.+0      	; 0x3aee <sysex_encode+0x26>
    3aee:	00 d0       	rcall	.+0      	; 0x3af0 <sysex_encode+0x28>
    3af0:	00 d0       	rcall	.+0      	; 0x3af2 <sysex_encode+0x2a>
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
    3af6:	1c 01       	movw	r2, r24
    3af8:	7a 83       	std	Y+2, r23	; 0x02
    3afa:	69 83       	std	Y+1, r22	; 0x01
    3afc:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3afe:	ca 01       	movw	r24, r20
    3b00:	67 e0       	ldi	r22, 0x07	; 7
    3b02:	70 e0       	ldi	r23, 0x00	; 0
    3b04:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__udivmodhi4>
    3b08:	2b 01       	movw	r4, r22
    3b0a:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3b0c:	61 15       	cp	r22, r1
    3b0e:	71 05       	cpc	r23, r1
    3b10:	b1 f1       	breq	.+108    	; 0x3b7e <sysex_encode+0xb6>
    3b12:	81 01       	movw	r16, r2
    3b14:	e9 80       	ldd	r14, Y+1	; 0x01
    3b16:	fa 80       	ldd	r15, Y+2	; 0x02
    3b18:	cc 24       	eor	r12, r12
    3b1a:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3b1c:	88 24       	eor	r8, r8
    3b1e:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3b20:	1e 83       	std	Y+6, r17	; 0x06
    3b22:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    3b24:	f8 01       	movw	r30, r16
    3b26:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3b28:	fc 82       	std	Y+4, r15	; 0x04
    3b2a:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3b2c:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3b2e:	ab 81       	ldd	r26, Y+3	; 0x03
    3b30:	bc 81       	ldd	r27, Y+4	; 0x04
    3b32:	2d 91       	ld	r18, X+
    3b34:	bc 83       	std	Y+4, r27	; 0x04
    3b36:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3b38:	4f 5f       	subi	r20, 0xFF	; 255
    3b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b3c:	82 2f       	mov	r24, r18
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	80 78       	andi	r24, 0x80	; 128
    3b42:	90 70       	andi	r25, 0x00	; 0
    3b44:	bc 01       	movw	r22, r24
    3b46:	04 2e       	mov	r0, r20
    3b48:	02 c0       	rjmp	.+4      	; 0x3b4e <sysex_encode+0x86>
    3b4a:	75 95       	asr	r23
    3b4c:	67 95       	ror	r22
    3b4e:	0a 94       	dec	r0
    3b50:	e2 f7       	brpl	.-8      	; 0x3b4a <sysex_encode+0x82>
    3b52:	ad 81       	ldd	r26, Y+5	; 0x05
    3b54:	be 81       	ldd	r27, Y+6	; 0x06
    3b56:	8c 91       	ld	r24, X
    3b58:	86 2b       	or	r24, r22
    3b5a:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3b5c:	2f 77       	andi	r18, 0x7F	; 127
    3b5e:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3b60:	47 30       	cpi	r20, 0x07	; 7
    3b62:	51 05       	cpc	r21, r1
    3b64:	21 f7       	brne	.-56     	; 0x3b2e <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3b66:	08 94       	sec
    3b68:	c1 1c       	adc	r12, r1
    3b6a:	d1 1c       	adc	r13, r1
    3b6c:	08 5f       	subi	r16, 0xF8	; 248
    3b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b70:	e7 e0       	ldi	r30, 0x07	; 7
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	ee 0e       	add	r14, r30
    3b76:	ff 1e       	adc	r15, r31
    3b78:	ca 14       	cp	r12, r10
    3b7a:	db 04       	cpc	r13, r11
    3b7c:	89 f6       	brne	.-94     	; 0x3b20 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3b7e:	c3 01       	movw	r24, r6
    3b80:	67 e0       	ldi	r22, 0x07	; 7
    3b82:	70 e0       	ldi	r23, 0x00	; 0
    3b84:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__udivmodhi4>
   if (remainder) {
    3b88:	88 23       	and	r24, r24
    3b8a:	d9 f1       	breq	.+118    	; 0x3c02 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3b8c:	82 01       	movw	r16, r4
    3b8e:	00 0f       	add	r16, r16
    3b90:	11 1f       	adc	r17, r17
    3b92:	00 0f       	add	r16, r16
    3b94:	11 1f       	adc	r17, r17
    3b96:	00 0f       	add	r16, r16
    3b98:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3b9a:	78 01       	movw	r14, r16
    3b9c:	e4 18       	sub	r14, r4
    3b9e:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3ba0:	d1 01       	movw	r26, r2
    3ba2:	a0 0f       	add	r26, r16
    3ba4:	b1 1f       	adc	r27, r17
    3ba6:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3ba8:	68 2f       	mov	r22, r24
    3baa:	70 e0       	ldi	r23, 0x00	; 0
    3bac:	61 15       	cp	r22, r1
    3bae:	71 05       	cpc	r23, r1
    3bb0:	19 f1       	breq	.+70     	; 0x3bf8 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3bb2:	e9 81       	ldd	r30, Y+1	; 0x01
    3bb4:	fa 81       	ldd	r31, Y+2	; 0x02
    3bb6:	ee 0e       	add	r14, r30
    3bb8:	ff 1e       	adc	r15, r31
    3bba:	c8 01       	movw	r24, r16
    3bbc:	01 96       	adiw	r24, 0x01	; 1
    3bbe:	28 0e       	add	r2, r24
    3bc0:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    3bc6:	f7 01       	movw	r30, r14
    3bc8:	41 91       	ld	r20, Z+
    3bca:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3bcc:	2f 5f       	subi	r18, 0xFF	; 255
    3bce:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd0:	84 2f       	mov	r24, r20
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	80 78       	andi	r24, 0x80	; 128
    3bd6:	90 70       	andi	r25, 0x00	; 0
    3bd8:	02 2e       	mov	r0, r18
    3bda:	02 c0       	rjmp	.+4      	; 0x3be0 <sysex_encode+0x118>
    3bdc:	95 95       	asr	r25
    3bde:	87 95       	ror	r24
    3be0:	0a 94       	dec	r0
    3be2:	e2 f7       	brpl	.-8      	; 0x3bdc <sysex_encode+0x114>
    3be4:	9c 91       	ld	r25, X
    3be6:	89 2b       	or	r24, r25
    3be8:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3bea:	4f 77       	andi	r20, 0x7F	; 127
    3bec:	f1 01       	movw	r30, r2
    3bee:	41 93       	st	Z+, r20
    3bf0:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3bf2:	26 17       	cp	r18, r22
    3bf4:	37 07       	cpc	r19, r23
    3bf6:	38 f3       	brcs	.-50     	; 0x3bc6 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3bf8:	c8 01       	movw	r24, r16
    3bfa:	01 96       	adiw	r24, 0x01	; 1
    3bfc:	86 0f       	add	r24, r22
    3bfe:	97 1f       	adc	r25, r23
    3c00:	07 c0       	rjmp	.+14     	; 0x3c10 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    3c02:	c2 01       	movw	r24, r4
    3c04:	88 0f       	add	r24, r24
    3c06:	99 1f       	adc	r25, r25
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 1f       	adc	r25, r25
    3c0c:	88 0f       	add	r24, r24
    3c0e:	99 1f       	adc	r25, r25
   }
}
    3c10:	26 96       	adiw	r28, 0x06	; 6
    3c12:	0f b6       	in	r0, 0x3f	; 63
    3c14:	f8 94       	cli
    3c16:	de bf       	out	0x3e, r29	; 62
    3c18:	0f be       	out	0x3f, r0	; 63
    3c1a:	cd bf       	out	0x3d, r28	; 61
    3c1c:	df 91       	pop	r29
    3c1e:	cf 91       	pop	r28
    3c20:	1f 91       	pop	r17
    3c22:	0f 91       	pop	r16
    3c24:	ff 90       	pop	r15
    3c26:	ef 90       	pop	r14
    3c28:	df 90       	pop	r13
    3c2a:	cf 90       	pop	r12
    3c2c:	bf 90       	pop	r11
    3c2e:	af 90       	pop	r10
    3c30:	9f 90       	pop	r9
    3c32:	8f 90       	pop	r8
    3c34:	7f 90       	pop	r7
    3c36:	6f 90       	pop	r6
    3c38:	5f 90       	pop	r5
    3c3a:	4f 90       	pop	r4
    3c3c:	3f 90       	pop	r3
    3c3e:	2f 90       	pop	r2
    3c40:	08 95       	ret

00003c42 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3c42:	6f 92       	push	r6
    3c44:	7f 92       	push	r7
    3c46:	8f 92       	push	r8
    3c48:	9f 92       	push	r9
    3c4a:	af 92       	push	r10
    3c4c:	bf 92       	push	r11
    3c4e:	cf 92       	push	r12
    3c50:	df 92       	push	r13
    3c52:	ef 92       	push	r14
    3c54:	ff 92       	push	r15
    3c56:	0f 93       	push	r16
    3c58:	1f 93       	push	r17
    3c5a:	cf 93       	push	r28
    3c5c:	df 93       	push	r29
    3c5e:	3c 01       	movw	r6, r24
    3c60:	4b 01       	movw	r8, r22
    3c62:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3c64:	42 30       	cpi	r20, 0x02	; 2
    3c66:	51 05       	cpc	r21, r1
    3c68:	08 f4       	brcc	.+2      	; 0x3c6c <sysex_decode+0x2a>
    3c6a:	6f c0       	rjmp	.+222    	; 0x3d4a <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3c6c:	7a 01       	movw	r14, r20
    3c6e:	f6 94       	lsr	r15
    3c70:	e7 94       	ror	r14
    3c72:	f6 94       	lsr	r15
    3c74:	e7 94       	ror	r14
    3c76:	f6 94       	lsr	r15
    3c78:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3c7a:	e1 14       	cp	r14, r1
    3c7c:	f1 04       	cpc	r15, r1
    3c7e:	29 f1       	breq	.+74     	; 0x3cca <sysex_decode+0x88>
    3c80:	eb 01       	movw	r28, r22
    3c82:	b3 01       	movw	r22, r6
    3c84:	00 e0       	ldi	r16, 0x00	; 0
    3c86:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3c88:	cc 24       	eor	r12, r12
    3c8a:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3c8c:	de 01       	movw	r26, r28
    3c8e:	11 96       	adiw	r26, 0x01	; 1
    3c90:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3c92:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3c94:	2d 91       	ld	r18, X+
    3c96:	2f 77       	andi	r18, 0x7F	; 127
    3c98:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3c9a:	4f 5f       	subi	r20, 0xFF	; 255
    3c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c9e:	88 81       	ld	r24, Y
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	04 2e       	mov	r0, r20
    3ca4:	02 c0       	rjmp	.+4      	; 0x3caa <sysex_decode+0x68>
    3ca6:	88 0f       	add	r24, r24
    3ca8:	99 1f       	adc	r25, r25
    3caa:	0a 94       	dec	r0
    3cac:	e2 f7       	brpl	.-8      	; 0x3ca6 <sysex_decode+0x64>
    3cae:	80 78       	andi	r24, 0x80	; 128
    3cb0:	28 2b       	or	r18, r24
    3cb2:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3cb4:	47 30       	cpi	r20, 0x07	; 7
    3cb6:	51 05       	cpc	r21, r1
    3cb8:	69 f7       	brne	.-38     	; 0x3c94 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3cba:	0f 5f       	subi	r16, 0xFF	; 255
    3cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cbe:	28 96       	adiw	r28, 0x08	; 8
    3cc0:	69 5f       	subi	r22, 0xF9	; 249
    3cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc4:	0e 15       	cp	r16, r14
    3cc6:	1f 05       	cpc	r17, r15
    3cc8:	09 f7       	brne	.-62     	; 0x3c8c <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3cca:	5a 2d       	mov	r21, r10
    3ccc:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3cce:	99 f1       	breq	.+102    	; 0x3d36 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3cd0:	e7 01       	movw	r28, r14
    3cd2:	cc 0f       	add	r28, r28
    3cd4:	dd 1f       	adc	r29, r29
    3cd6:	cc 0f       	add	r28, r28
    3cd8:	dd 1f       	adc	r29, r29
    3cda:	cc 0f       	add	r28, r28
    3cdc:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3cde:	8e 01       	movw	r16, r28
    3ce0:	0e 19       	sub	r16, r14
    3ce2:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3ce4:	65 2f       	mov	r22, r21
    3ce6:	70 e0       	ldi	r23, 0x00	; 0
    3ce8:	61 50       	subi	r22, 0x01	; 1
    3cea:	70 40       	sbci	r23, 0x00	; 0
    3cec:	f9 f0       	breq	.+62     	; 0x3d2c <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3cee:	ce 01       	movw	r24, r28
    3cf0:	01 96       	adiw	r24, 0x01	; 1
    3cf2:	d4 01       	movw	r26, r8
    3cf4:	a8 0f       	add	r26, r24
    3cf6:	b9 1f       	adc	r27, r25
    3cf8:	f3 01       	movw	r30, r6
    3cfa:	e0 0f       	add	r30, r16
    3cfc:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3d02:	c8 0d       	add	r28, r8
    3d04:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3d06:	4d 91       	ld	r20, X+
    3d08:	4f 77       	andi	r20, 0x7F	; 127
    3d0a:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3d0c:	2f 5f       	subi	r18, 0xFF	; 255
    3d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d10:	88 81       	ld	r24, Y
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	02 2e       	mov	r0, r18
    3d16:	02 c0       	rjmp	.+4      	; 0x3d1c <sysex_decode+0xda>
    3d18:	88 0f       	add	r24, r24
    3d1a:	99 1f       	adc	r25, r25
    3d1c:	0a 94       	dec	r0
    3d1e:	e2 f7       	brpl	.-8      	; 0x3d18 <sysex_decode+0xd6>
    3d20:	80 78       	andi	r24, 0x80	; 128
    3d22:	48 2b       	or	r20, r24
    3d24:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3d26:	26 17       	cp	r18, r22
    3d28:	37 07       	cpc	r19, r23
    3d2a:	68 f3       	brcs	.-38     	; 0x3d06 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3d2c:	c8 01       	movw	r24, r16
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
    3d30:	85 0f       	add	r24, r21
    3d32:	91 1d       	adc	r25, r1
    3d34:	0c c0       	rjmp	.+24     	; 0x3d4e <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3d36:	c7 01       	movw	r24, r14
    3d38:	88 0f       	add	r24, r24
    3d3a:	99 1f       	adc	r25, r25
    3d3c:	88 0f       	add	r24, r24
    3d3e:	99 1f       	adc	r25, r25
    3d40:	88 0f       	add	r24, r24
    3d42:	99 1f       	adc	r25, r25
    3d44:	8e 19       	sub	r24, r14
    3d46:	9f 09       	sbc	r25, r15
    3d48:	02 c0       	rjmp	.+4      	; 0x3d4e <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3d4e:	df 91       	pop	r29
    3d50:	cf 91       	pop	r28
    3d52:	1f 91       	pop	r17
    3d54:	0f 91       	pop	r16
    3d56:	ff 90       	pop	r15
    3d58:	ef 90       	pop	r14
    3d5a:	df 90       	pop	r13
    3d5c:	cf 90       	pop	r12
    3d5e:	bf 90       	pop	r11
    3d60:	af 90       	pop	r10
    3d62:	9f 90       	pop	r9
    3d64:	8f 90       	pop	r8
    3d66:	7f 90       	pop	r7
    3d68:	6f 90       	pop	r6
    3d6a:	08 95       	ret

00003d6c <__mulsi3>:
    3d6c:	62 9f       	mul	r22, r18
    3d6e:	d0 01       	movw	r26, r0
    3d70:	73 9f       	mul	r23, r19
    3d72:	f0 01       	movw	r30, r0
    3d74:	82 9f       	mul	r24, r18
    3d76:	e0 0d       	add	r30, r0
    3d78:	f1 1d       	adc	r31, r1
    3d7a:	64 9f       	mul	r22, r20
    3d7c:	e0 0d       	add	r30, r0
    3d7e:	f1 1d       	adc	r31, r1
    3d80:	92 9f       	mul	r25, r18
    3d82:	f0 0d       	add	r31, r0
    3d84:	83 9f       	mul	r24, r19
    3d86:	f0 0d       	add	r31, r0
    3d88:	74 9f       	mul	r23, r20
    3d8a:	f0 0d       	add	r31, r0
    3d8c:	65 9f       	mul	r22, r21
    3d8e:	f0 0d       	add	r31, r0
    3d90:	99 27       	eor	r25, r25
    3d92:	72 9f       	mul	r23, r18
    3d94:	b0 0d       	add	r27, r0
    3d96:	e1 1d       	adc	r30, r1
    3d98:	f9 1f       	adc	r31, r25
    3d9a:	63 9f       	mul	r22, r19
    3d9c:	b0 0d       	add	r27, r0
    3d9e:	e1 1d       	adc	r30, r1
    3da0:	f9 1f       	adc	r31, r25
    3da2:	bd 01       	movw	r22, r26
    3da4:	cf 01       	movw	r24, r30
    3da6:	11 24       	eor	r1, r1
    3da8:	08 95       	ret

00003daa <__udivmodhi4>:
    3daa:	aa 1b       	sub	r26, r26
    3dac:	bb 1b       	sub	r27, r27
    3dae:	51 e1       	ldi	r21, 0x11	; 17
    3db0:	07 c0       	rjmp	.+14     	; 0x3dc0 <__udivmodhi4_ep>

00003db2 <__udivmodhi4_loop>:
    3db2:	aa 1f       	adc	r26, r26
    3db4:	bb 1f       	adc	r27, r27
    3db6:	a6 17       	cp	r26, r22
    3db8:	b7 07       	cpc	r27, r23
    3dba:	10 f0       	brcs	.+4      	; 0x3dc0 <__udivmodhi4_ep>
    3dbc:	a6 1b       	sub	r26, r22
    3dbe:	b7 0b       	sbc	r27, r23

00003dc0 <__udivmodhi4_ep>:
    3dc0:	88 1f       	adc	r24, r24
    3dc2:	99 1f       	adc	r25, r25
    3dc4:	5a 95       	dec	r21
    3dc6:	a9 f7       	brne	.-22     	; 0x3db2 <__udivmodhi4_loop>
    3dc8:	80 95       	com	r24
    3dca:	90 95       	com	r25
    3dcc:	bc 01       	movw	r22, r24
    3dce:	cd 01       	movw	r24, r26
    3dd0:	08 95       	ret

00003dd2 <__divmodhi4>:
    3dd2:	97 fb       	bst	r25, 7
    3dd4:	09 2e       	mov	r0, r25
    3dd6:	07 26       	eor	r0, r23
    3dd8:	0a d0       	rcall	.+20     	; 0x3dee <__divmodhi4_neg1>
    3dda:	77 fd       	sbrc	r23, 7
    3ddc:	04 d0       	rcall	.+8      	; 0x3de6 <__divmodhi4_neg2>
    3dde:	e5 df       	rcall	.-54     	; 0x3daa <__udivmodhi4>
    3de0:	06 d0       	rcall	.+12     	; 0x3dee <__divmodhi4_neg1>
    3de2:	00 20       	and	r0, r0
    3de4:	1a f4       	brpl	.+6      	; 0x3dec <__divmodhi4_exit>

00003de6 <__divmodhi4_neg2>:
    3de6:	70 95       	com	r23
    3de8:	61 95       	neg	r22
    3dea:	7f 4f       	sbci	r23, 0xFF	; 255

00003dec <__divmodhi4_exit>:
    3dec:	08 95       	ret

00003dee <__divmodhi4_neg1>:
    3dee:	f6 f7       	brtc	.-4      	; 0x3dec <__divmodhi4_exit>
    3df0:	90 95       	com	r25
    3df2:	81 95       	neg	r24
    3df4:	9f 4f       	sbci	r25, 0xFF	; 255
    3df6:	08 95       	ret

00003df8 <__udivmodsi4>:
    3df8:	a1 e2       	ldi	r26, 0x21	; 33
    3dfa:	1a 2e       	mov	r1, r26
    3dfc:	aa 1b       	sub	r26, r26
    3dfe:	bb 1b       	sub	r27, r27
    3e00:	fd 01       	movw	r30, r26
    3e02:	0d c0       	rjmp	.+26     	; 0x3e1e <__udivmodsi4_ep>

00003e04 <__udivmodsi4_loop>:
    3e04:	aa 1f       	adc	r26, r26
    3e06:	bb 1f       	adc	r27, r27
    3e08:	ee 1f       	adc	r30, r30
    3e0a:	ff 1f       	adc	r31, r31
    3e0c:	a2 17       	cp	r26, r18
    3e0e:	b3 07       	cpc	r27, r19
    3e10:	e4 07       	cpc	r30, r20
    3e12:	f5 07       	cpc	r31, r21
    3e14:	20 f0       	brcs	.+8      	; 0x3e1e <__udivmodsi4_ep>
    3e16:	a2 1b       	sub	r26, r18
    3e18:	b3 0b       	sbc	r27, r19
    3e1a:	e4 0b       	sbc	r30, r20
    3e1c:	f5 0b       	sbc	r31, r21

00003e1e <__udivmodsi4_ep>:
    3e1e:	66 1f       	adc	r22, r22
    3e20:	77 1f       	adc	r23, r23
    3e22:	88 1f       	adc	r24, r24
    3e24:	99 1f       	adc	r25, r25
    3e26:	1a 94       	dec	r1
    3e28:	69 f7       	brne	.-38     	; 0x3e04 <__udivmodsi4_loop>
    3e2a:	60 95       	com	r22
    3e2c:	70 95       	com	r23
    3e2e:	80 95       	com	r24
    3e30:	90 95       	com	r25
    3e32:	9b 01       	movw	r18, r22
    3e34:	ac 01       	movw	r20, r24
    3e36:	bd 01       	movw	r22, r26
    3e38:	cf 01       	movw	r24, r30
    3e3a:	08 95       	ret

00003e3c <do_random>:
    3e3c:	a0 e0       	ldi	r26, 0x00	; 0
    3e3e:	b0 e0       	ldi	r27, 0x00	; 0
    3e40:	e4 e2       	ldi	r30, 0x24	; 36
    3e42:	ff e1       	ldi	r31, 0x1F	; 31
    3e44:	0c 94 f5 1f 	jmp	0x3fea	; 0x3fea <__prologue_saves__+0xc>
    3e48:	ec 01       	movw	r28, r24
    3e4a:	88 81       	ld	r24, Y
    3e4c:	99 81       	ldd	r25, Y+1	; 0x01
    3e4e:	aa 81       	ldd	r26, Y+2	; 0x02
    3e50:	bb 81       	ldd	r27, Y+3	; 0x03
    3e52:	00 97       	sbiw	r24, 0x00	; 0
    3e54:	a1 05       	cpc	r26, r1
    3e56:	b1 05       	cpc	r27, r1
    3e58:	21 f4       	brne	.+8      	; 0x3e62 <do_random+0x26>
    3e5a:	84 e2       	ldi	r24, 0x24	; 36
    3e5c:	99 ed       	ldi	r25, 0xD9	; 217
    3e5e:	ab e5       	ldi	r26, 0x5B	; 91
    3e60:	b7 e0       	ldi	r27, 0x07	; 7
    3e62:	bc 01       	movw	r22, r24
    3e64:	cd 01       	movw	r24, r26
    3e66:	2d e1       	ldi	r18, 0x1D	; 29
    3e68:	33 ef       	ldi	r19, 0xF3	; 243
    3e6a:	41 e0       	ldi	r20, 0x01	; 1
    3e6c:	50 e0       	ldi	r21, 0x00	; 0
    3e6e:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__divmodsi4>
    3e72:	49 01       	movw	r8, r18
    3e74:	5a 01       	movw	r10, r20
    3e76:	27 ea       	ldi	r18, 0xA7	; 167
    3e78:	31 e4       	ldi	r19, 0x41	; 65
    3e7a:	40 e0       	ldi	r20, 0x00	; 0
    3e7c:	50 e0       	ldi	r21, 0x00	; 0
    3e7e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__mulsi3>
    3e82:	6b 01       	movw	r12, r22
    3e84:	7c 01       	movw	r14, r24
    3e86:	c5 01       	movw	r24, r10
    3e88:	b4 01       	movw	r22, r8
    3e8a:	2c ee       	ldi	r18, 0xEC	; 236
    3e8c:	34 ef       	ldi	r19, 0xF4	; 244
    3e8e:	4f ef       	ldi	r20, 0xFF	; 255
    3e90:	5f ef       	ldi	r21, 0xFF	; 255
    3e92:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__mulsi3>
    3e96:	dc 01       	movw	r26, r24
    3e98:	cb 01       	movw	r24, r22
    3e9a:	c8 0e       	add	r12, r24
    3e9c:	d9 1e       	adc	r13, r25
    3e9e:	ea 1e       	adc	r14, r26
    3ea0:	fb 1e       	adc	r15, r27
    3ea2:	f7 fe       	sbrs	r15, 7
    3ea4:	08 c0       	rjmp	.+16     	; 0x3eb6 <do_random+0x7a>
    3ea6:	8f ef       	ldi	r24, 0xFF	; 255
    3ea8:	9f ef       	ldi	r25, 0xFF	; 255
    3eaa:	af ef       	ldi	r26, 0xFF	; 255
    3eac:	bf e7       	ldi	r27, 0x7F	; 127
    3eae:	c8 0e       	add	r12, r24
    3eb0:	d9 1e       	adc	r13, r25
    3eb2:	ea 1e       	adc	r14, r26
    3eb4:	fb 1e       	adc	r15, r27
    3eb6:	c8 82       	st	Y, r12
    3eb8:	d9 82       	std	Y+1, r13	; 0x01
    3eba:	ea 82       	std	Y+2, r14	; 0x02
    3ebc:	fb 82       	std	Y+3, r15	; 0x03
    3ebe:	97 01       	movw	r18, r14
    3ec0:	86 01       	movw	r16, r12
    3ec2:	3f 77       	andi	r19, 0x7F	; 127
    3ec4:	b8 01       	movw	r22, r16
    3ec6:	c9 01       	movw	r24, r18
    3ec8:	cd b7       	in	r28, 0x3d	; 61
    3eca:	de b7       	in	r29, 0x3e	; 62
    3ecc:	ec e0       	ldi	r30, 0x0C	; 12
    3ece:	0c 94 11 20 	jmp	0x4022	; 0x4022 <__epilogue_restores__+0xc>

00003ed2 <random_r>:
    3ed2:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <do_random>
    3ed6:	08 95       	ret

00003ed8 <random>:
    3ed8:	80 eb       	ldi	r24, 0xB0	; 176
    3eda:	92 e0       	ldi	r25, 0x02	; 2
    3edc:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <do_random>
    3ee0:	08 95       	ret

00003ee2 <srandom>:
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	80 93 b0 02 	sts	0x02B0, r24
    3eea:	90 93 b1 02 	sts	0x02B1, r25
    3eee:	a0 93 b2 02 	sts	0x02B2, r26
    3ef2:	b0 93 b3 02 	sts	0x02B3, r27
    3ef6:	08 95       	ret

00003ef8 <memcpy>:
    3ef8:	fb 01       	movw	r30, r22
    3efa:	dc 01       	movw	r26, r24
    3efc:	02 c0       	rjmp	.+4      	; 0x3f02 <memcpy+0xa>
    3efe:	01 90       	ld	r0, Z+
    3f00:	0d 92       	st	X+, r0
    3f02:	41 50       	subi	r20, 0x01	; 1
    3f04:	50 40       	sbci	r21, 0x00	; 0
    3f06:	d8 f7       	brcc	.-10     	; 0x3efe <memcpy+0x6>
    3f08:	08 95       	ret

00003f0a <memmove>:
    3f0a:	68 17       	cp	r22, r24
    3f0c:	79 07       	cpc	r23, r25
    3f0e:	68 f4       	brcc	.+26     	; 0x3f2a <memmove+0x20>
    3f10:	fb 01       	movw	r30, r22
    3f12:	dc 01       	movw	r26, r24
    3f14:	e4 0f       	add	r30, r20
    3f16:	f5 1f       	adc	r31, r21
    3f18:	a4 0f       	add	r26, r20
    3f1a:	b5 1f       	adc	r27, r21
    3f1c:	02 c0       	rjmp	.+4      	; 0x3f22 <memmove+0x18>
    3f1e:	02 90       	ld	r0, -Z
    3f20:	0e 92       	st	-X, r0
    3f22:	41 50       	subi	r20, 0x01	; 1
    3f24:	50 40       	sbci	r21, 0x00	; 0
    3f26:	d8 f7       	brcc	.-10     	; 0x3f1e <memmove+0x14>
    3f28:	08 95       	ret
    3f2a:	0c 94 7c 1f 	jmp	0x3ef8	; 0x3ef8 <memcpy>

00003f2e <__eerd_block_m6450a>:
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22

00003f32 <__eerd_blraw_m6450a>:
    3f32:	fc 01       	movw	r30, r24
    3f34:	f9 99       	sbic	0x1f, 1	; 31
    3f36:	fe cf       	rjmp	.-4      	; 0x3f34 <__eerd_blraw_m6450a+0x2>
    3f38:	06 c0       	rjmp	.+12     	; 0x3f46 <__eerd_blraw_m6450a+0x14>
    3f3a:	f2 bd       	out	0x22, r31	; 34
    3f3c:	e1 bd       	out	0x21, r30	; 33
    3f3e:	f8 9a       	sbi	0x1f, 0	; 31
    3f40:	31 96       	adiw	r30, 0x01	; 1
    3f42:	00 b4       	in	r0, 0x20	; 32
    3f44:	0d 92       	st	X+, r0
    3f46:	41 50       	subi	r20, 0x01	; 1
    3f48:	50 40       	sbci	r21, 0x00	; 0
    3f4a:	b8 f7       	brcc	.-18     	; 0x3f3a <__eerd_blraw_m6450a+0x8>
    3f4c:	08 95       	ret

00003f4e <__eerd_word_m6450a>:
    3f4e:	a8 e1       	ldi	r26, 0x18	; 24
    3f50:	b0 e0       	ldi	r27, 0x00	; 0
    3f52:	42 e0       	ldi	r20, 0x02	; 2
    3f54:	50 e0       	ldi	r21, 0x00	; 0
    3f56:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__eerd_blraw_m6450a>

00003f5a <__eeupd_block_m6450a>:
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	a4 0f       	add	r26, r20
    3f5e:	b5 1f       	adc	r27, r21
    3f60:	41 50       	subi	r20, 0x01	; 1
    3f62:	50 40       	sbci	r21, 0x00	; 0
    3f64:	48 f0       	brcs	.+18     	; 0x3f78 <__eeupd_block_m6450a+0x1e>
    3f66:	cb 01       	movw	r24, r22
    3f68:	84 0f       	add	r24, r20
    3f6a:	95 1f       	adc	r25, r21
    3f6c:	2e 91       	ld	r18, -X
    3f6e:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eeupd_r18_m6450a>
    3f72:	41 50       	subi	r20, 0x01	; 1
    3f74:	50 40       	sbci	r21, 0x00	; 0
    3f76:	d0 f7       	brcc	.-12     	; 0x3f6c <__eeupd_block_m6450a+0x12>
    3f78:	08 95       	ret

00003f7a <__eeupd_byte_m6450a>:
    3f7a:	26 2f       	mov	r18, r22

00003f7c <__eeupd_r18_m6450a>:
    3f7c:	f9 99       	sbic	0x1f, 1	; 31
    3f7e:	fe cf       	rjmp	.-4      	; 0x3f7c <__eeupd_r18_m6450a>
    3f80:	92 bd       	out	0x22, r25	; 34
    3f82:	81 bd       	out	0x21, r24	; 33
    3f84:	f8 9a       	sbi	0x1f, 0	; 31
    3f86:	01 97       	sbiw	r24, 0x01	; 1
    3f88:	00 b4       	in	r0, 0x20	; 32
    3f8a:	02 16       	cp	r0, r18
    3f8c:	31 f0       	breq	.+12     	; 0x3f9a <__eeupd_r18_m6450a+0x1e>
    3f8e:	20 bd       	out	0x20, r18	; 32
    3f90:	0f b6       	in	r0, 0x3f	; 63
    3f92:	f8 94       	cli
    3f94:	fa 9a       	sbi	0x1f, 2	; 31
    3f96:	f9 9a       	sbi	0x1f, 1	; 31
    3f98:	0f be       	out	0x3f, r0	; 63
    3f9a:	08 95       	ret

00003f9c <__eeupd_word_m6450a>:
    3f9c:	01 96       	adiw	r24, 0x01	; 1
    3f9e:	27 2f       	mov	r18, r23
    3fa0:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eeupd_r18_m6450a>
    3fa4:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__eeupd_byte_m6450a>

00003fa8 <__divmodsi4>:
    3fa8:	97 fb       	bst	r25, 7
    3faa:	09 2e       	mov	r0, r25
    3fac:	05 26       	eor	r0, r21
    3fae:	0e d0       	rcall	.+28     	; 0x3fcc <__divmodsi4_neg1>
    3fb0:	57 fd       	sbrc	r21, 7
    3fb2:	04 d0       	rcall	.+8      	; 0x3fbc <__divmodsi4_neg2>
    3fb4:	21 df       	rcall	.-446    	; 0x3df8 <__udivmodsi4>
    3fb6:	0a d0       	rcall	.+20     	; 0x3fcc <__divmodsi4_neg1>
    3fb8:	00 1c       	adc	r0, r0
    3fba:	38 f4       	brcc	.+14     	; 0x3fca <__divmodsi4_exit>

00003fbc <__divmodsi4_neg2>:
    3fbc:	50 95       	com	r21
    3fbe:	40 95       	com	r20
    3fc0:	30 95       	com	r19
    3fc2:	21 95       	neg	r18
    3fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc6:	4f 4f       	sbci	r20, 0xFF	; 255
    3fc8:	5f 4f       	sbci	r21, 0xFF	; 255

00003fca <__divmodsi4_exit>:
    3fca:	08 95       	ret

00003fcc <__divmodsi4_neg1>:
    3fcc:	f6 f7       	brtc	.-4      	; 0x3fca <__divmodsi4_exit>
    3fce:	90 95       	com	r25
    3fd0:	80 95       	com	r24
    3fd2:	70 95       	com	r23
    3fd4:	61 95       	neg	r22
    3fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    3fda:	9f 4f       	sbci	r25, 0xFF	; 255
    3fdc:	08 95       	ret

00003fde <__prologue_saves__>:
    3fde:	2f 92       	push	r2
    3fe0:	3f 92       	push	r3
    3fe2:	4f 92       	push	r4
    3fe4:	5f 92       	push	r5
    3fe6:	6f 92       	push	r6
    3fe8:	7f 92       	push	r7
    3fea:	8f 92       	push	r8
    3fec:	9f 92       	push	r9
    3fee:	af 92       	push	r10
    3ff0:	bf 92       	push	r11
    3ff2:	cf 92       	push	r12
    3ff4:	df 92       	push	r13
    3ff6:	ef 92       	push	r14
    3ff8:	ff 92       	push	r15
    3ffa:	0f 93       	push	r16
    3ffc:	1f 93       	push	r17
    3ffe:	cf 93       	push	r28
    4000:	df 93       	push	r29
    4002:	cd b7       	in	r28, 0x3d	; 61
    4004:	de b7       	in	r29, 0x3e	; 62
    4006:	ca 1b       	sub	r28, r26
    4008:	db 0b       	sbc	r29, r27
    400a:	0f b6       	in	r0, 0x3f	; 63
    400c:	f8 94       	cli
    400e:	de bf       	out	0x3e, r29	; 62
    4010:	0f be       	out	0x3f, r0	; 63
    4012:	cd bf       	out	0x3d, r28	; 61
    4014:	09 94       	ijmp

00004016 <__epilogue_restores__>:
    4016:	2a 88       	ldd	r2, Y+18	; 0x12
    4018:	39 88       	ldd	r3, Y+17	; 0x11
    401a:	48 88       	ldd	r4, Y+16	; 0x10
    401c:	5f 84       	ldd	r5, Y+15	; 0x0f
    401e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4020:	7d 84       	ldd	r7, Y+13	; 0x0d
    4022:	8c 84       	ldd	r8, Y+12	; 0x0c
    4024:	9b 84       	ldd	r9, Y+11	; 0x0b
    4026:	aa 84       	ldd	r10, Y+10	; 0x0a
    4028:	b9 84       	ldd	r11, Y+9	; 0x09
    402a:	c8 84       	ldd	r12, Y+8	; 0x08
    402c:	df 80       	ldd	r13, Y+7	; 0x07
    402e:	ee 80       	ldd	r14, Y+6	; 0x06
    4030:	fd 80       	ldd	r15, Y+5	; 0x05
    4032:	0c 81       	ldd	r16, Y+4	; 0x04
    4034:	1b 81       	ldd	r17, Y+3	; 0x03
    4036:	aa 81       	ldd	r26, Y+2	; 0x02
    4038:	b9 81       	ldd	r27, Y+1	; 0x01
    403a:	ce 0f       	add	r28, r30
    403c:	d1 1d       	adc	r29, r1
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	de bf       	out	0x3e, r29	; 62
    4044:	0f be       	out	0x3f, r0	; 63
    4046:	cd bf       	out	0x3d, r28	; 61
    4048:	ed 01       	movw	r28, r26
    404a:	08 95       	ret

0000404c <_exit>:
    404c:	f8 94       	cli

0000404e <__stop_program>:
    404e:	ff cf       	rjmp	.-2      	; 0x404e <__stop_program>
