
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  0000170c  000017a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000170c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  0080014e  0080014e  000017ee  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00002028  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b16  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb8  00000000  00000000  00004d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000136f  00000000  00000000  000058f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008cc  00000000  00000000  00006c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000db9  00000000  00000000  00007534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d06  00000000  00000000  000082ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00009ff3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ec e0       	ldi	r30, 0x0C	; 12
      78:	f7 e1       	ldi	r31, 0x17	; 23
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ae 34       	cpi	r26, 0x4E	; 78
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	12 e0       	ldi	r17, 0x02	; 2
      88:	ae e4       	ldi	r26, 0x4E	; 78
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a2 35       	cpi	r26, 0x52	; 82
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 a1 01 	call	0x342	; 0x342 <main>
      9a:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <setup_dac>:
#include "port_map.h"
#include "dac.h"

void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
      c8:	83 b3       	in	r24, 0x13	; 19
      ca:	83 60       	ori	r24, 0x03	; 3
      cc:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
      ce:	8f ef       	ldi	r24, 0xFF	; 255
      d0:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
      d2:	97 b1       	in	r25, 0x07	; 7
      d4:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
      d6:	e9 ed       	ldi	r30, 0xD9	; 217
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	8f 60       	ori	r24, 0x0F	; 15
      de:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
      e0:	ea ed       	ldi	r30, 0xDA	; 218
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 7f       	andi	r24, 0xF0	; 240
      e8:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
      ea:	84 b3       	in	r24, 0x14	; 20
      ec:	83 60       	ori	r24, 0x03	; 3
      ee:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
      f0:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
      f2:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
      f4:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
      f6:	a0 9a       	sbi	0x14, 0	; 20
}
      f8:	08 95       	ret

000000fa <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
      fa:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
      fc:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
      fe:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     100:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     102:	62 b9       	out	0x02, r22	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     104:	2d e0       	ldi	r18, 0x0D	; 13
     106:	2a 95       	dec	r18
     108:	f1 f7       	brne	.-4      	; 0x106 <set_dac+0xc>
     10a:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     10c:	ea ed       	ldi	r30, 0xDA	; 218
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	40 81       	ld	r20, Z
     112:	21 e0       	ldi	r18, 0x01	; 1
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	b9 01       	movw	r22, r18
     118:	02 c0       	rjmp	.+4      	; 0x11e <set_dac+0x24>
     11a:	66 0f       	add	r22, r22
     11c:	77 1f       	adc	r23, r23
     11e:	8a 95       	dec	r24
     120:	e2 f7       	brpl	.-8      	; 0x11a <set_dac+0x20>
     122:	cb 01       	movw	r24, r22
     124:	94 2f       	mov	r25, r20
     126:	98 2b       	or	r25, r24
     128:	90 83       	st	Z, r25
     12a:	72 e4       	ldi	r23, 0x42	; 66
     12c:	7a 95       	dec	r23
     12e:	f1 f7       	brne	.-4      	; 0x12c <set_dac+0x32>
     130:	00 c0       	rjmp	.+0      	; 0x132 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     132:	90 81       	ld	r25, Z
     134:	80 95       	com	r24
     136:	89 23       	and	r24, r25
     138:	80 83       	st	Z, r24
	
}
     13a:	08 95       	ret

0000013c <display_dec>:
#include "display.h"
#include "port_map.h"
#include "display_map.h"

void display_dec(uint16_t number, uint8_t digit)
{
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	2a 97       	sbiw	r28, 0x0a	; 10
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	f8 94       	cli
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     150:	de 01       	movw	r26, r28
     152:	11 96       	adiw	r26, 0x01	; 1
     154:	e0 e0       	ldi	r30, 0x00	; 0
     156:	f1 e0       	ldi	r31, 0x01	; 1
     158:	3a e0       	ldi	r19, 0x0A	; 10
     15a:	01 90       	ld	r0, Z+
     15c:	0d 92       	st	X+, r0
     15e:	31 50       	subi	r19, 0x01	; 1
     160:	e1 f7       	brne	.-8      	; 0x15a <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     162:	3f ef       	ldi	r19, 0xFF	; 255
     164:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     166:	ea ed       	ldi	r30, 0xDA	; 218
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	30 81       	ld	r19, Z
     16c:	30 61       	ori	r19, 0x10	; 16
     16e:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     170:	30 81       	ld	r19, Z
     172:	3f 7e       	andi	r19, 0xEF	; 239
     174:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     176:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     178:	30 81       	ld	r19, Z
     17a:	30 62       	ori	r19, 0x20	; 32
     17c:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     17e:	30 81       	ld	r19, Z
     180:	3f 7d       	andi	r19, 0xDF	; 223
     182:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
     184:	62 30       	cpi	r22, 0x02	; 2
     186:	f9 f0       	breq	.+62     	; 0x1c6 <display_dec+0x8a>
     188:	63 30       	cpi	r22, 0x03	; 3
     18a:	18 f4       	brcc	.+6      	; 0x192 <display_dec+0x56>
     18c:	61 30       	cpi	r22, 0x01	; 1
     18e:	a1 f5       	brne	.+104    	; 0x1f8 <display_dec+0xbc>
     190:	0d c0       	rjmp	.+26     	; 0x1ac <display_dec+0x70>
     192:	64 30       	cpi	r22, 0x04	; 4
     194:	29 f1       	breq	.+74     	; 0x1e0 <display_dec+0xa4>
     196:	68 30       	cpi	r22, 0x08	; 8
     198:	79 f5       	brne	.+94     	; 0x1f8 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     19a:	6a e0       	ldi	r22, 0x0A	; 10
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     1a2:	fe 01       	movw	r30, r28
     1a4:	e8 0f       	add	r30, r24
     1a6:	f9 1f       	adc	r31, r25
     1a8:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     1aa:	26 c0       	rjmp	.+76     	; 0x1f8 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     1ac:	64 e6       	ldi	r22, 0x64	; 100
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     1b4:	6a e0       	ldi	r22, 0x0A	; 10
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     1bc:	fe 01       	movw	r30, r28
     1be:	e6 0f       	add	r30, r22
     1c0:	f7 1f       	adc	r31, r23
     1c2:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     1c4:	19 c0       	rjmp	.+50     	; 0x1f8 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     1c6:	68 ee       	ldi	r22, 0xE8	; 232
     1c8:	73 e0       	ldi	r23, 0x03	; 3
     1ca:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     1ce:	64 e6       	ldi	r22, 0x64	; 100
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     1d6:	fe 01       	movw	r30, r28
     1d8:	e6 0f       	add	r30, r22
     1da:	f7 1f       	adc	r31, r23
     1dc:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     1de:	0c c0       	rjmp	.+24     	; 0x1f8 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     1e0:	60 e1       	ldi	r22, 0x10	; 16
     1e2:	77 e2       	ldi	r23, 0x27	; 39
     1e4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     1e8:	68 ee       	ldi	r22, 0xE8	; 232
     1ea:	73 e0       	ldi	r23, 0x03	; 3
     1ec:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     1f0:	fe 01       	movw	r30, r28
     1f2:	e6 0f       	add	r30, r22
     1f4:	f7 1f       	adc	r31, r23
     1f6:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     1f8:	20 95       	com	r18
     1fa:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     1fc:	ea ed       	ldi	r30, 0xDA	; 218
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	80 61       	ori	r24, 0x10	; 16
     204:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     206:	80 81       	ld	r24, Z
     208:	8f 7e       	andi	r24, 0xEF	; 239
     20a:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
     20c:	2a 96       	adiw	r28, 0x0a	; 10
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	de bf       	out	0x3e, r29	; 62
     214:	0f be       	out	0x3f, r0	; 63
     216:	cd bf       	out	0x3d, r28	; 61
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <note_on_event>:

volatile uint8_t place = 0; //digit place for LED display

void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	value_to_display = note;
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	50 93 0f 01 	sts	0x010F, r21
     224:	40 93 0e 01 	sts	0x010E, r20
	
	if (velocity == 0) {
     228:	22 23       	and	r18, r18
     22a:	11 f4       	brne	.+4      	; 0x230 <note_on_event+0x12>
		
		PORTF &= ~(1<<GATE);
     22c:	89 98       	cbi	0x11, 1	; 17
     22e:	08 95       	ret
	} else {
		PORTF |= (1<<GATE);
     230:	89 9a       	sbi	0x11, 1	; 17
     232:	08 95       	ret

00000234 <note_off_event>:
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	PORTF &= ~(1<<GATE);
     234:	89 98       	cbi	0x11, 1	; 17
}
     236:	08 95       	ret

00000238 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     238:	87 e2       	ldi	r24, 0x27	; 39
     23a:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     23e:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     242:	88 e9       	ldi	r24, 0x98	; 152
     244:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     248:	08 95       	ret

0000024a <__vector_13>:
	THOUS,
};



ISR (USART_RX_vect) { // USART receive interrupt
     24a:	1f 92       	push	r1
     24c:	0f 92       	push	r0
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	0f 92       	push	r0
     252:	11 24       	eor	r1, r1
     254:	2f 93       	push	r18
     256:	3f 93       	push	r19
     258:	4f 93       	push	r20
     25a:	5f 93       	push	r21
     25c:	6f 93       	push	r22
     25e:	7f 93       	push	r23
     260:	8f 93       	push	r24
     262:	9f 93       	push	r25
     264:	af 93       	push	r26
     266:	bf 93       	push	r27
     268:	ef 93       	push	r30
     26a:	ff 93       	push	r31
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	0f 92       	push	r0
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
	 
	uint8_t inByte = UDR0;
     276:	80 91 c6 00 	lds	r24, 0x00C6
     27a:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);	
     27c:	85 e6       	ldi	r24, 0x65	; 101
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	61 e0       	ldi	r22, 0x01	; 1
     282:	ae 01       	movw	r20, r28
     284:	4f 5f       	subi	r20, 0xFF	; 255
     286:	5f 4f       	sbci	r21, 0xFF	; 255
     288:	0e 94 50 07 	call	0xea0	; 0xea0 <midi_device_input>
		 //if ((status_byte >> 0) & 1) {PORTF |= (1<<GATE);} else {PORTF &= ~(1<<GATE);}
		////PORTF ^= (1<<GATE);	 
     //}	else if (value_to_display == 0) {PORTF &= ~(1<<GATE);}
	  
	
}
     28c:	0f 90       	pop	r0
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	ff 91       	pop	r31
     294:	ef 91       	pop	r30
     296:	bf 91       	pop	r27
     298:	af 91       	pop	r26
     29a:	9f 91       	pop	r25
     29c:	8f 91       	pop	r24
     29e:	7f 91       	pop	r23
     2a0:	6f 91       	pop	r22
     2a2:	5f 91       	pop	r21
     2a4:	4f 91       	pop	r20
     2a6:	3f 91       	pop	r19
     2a8:	2f 91       	pop	r18
     2aa:	0f 90       	pop	r0
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	0f 90       	pop	r0
     2b0:	1f 90       	pop	r1
     2b2:	18 95       	reti

000002b4 <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
     2b4:	1f 92       	push	r1
     2b6:	0f 92       	push	r0
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	0f 92       	push	r0
     2bc:	11 24       	eor	r1, r1
     2be:	2f 93       	push	r18
     2c0:	3f 93       	push	r19
     2c2:	4f 93       	push	r20
     2c4:	5f 93       	push	r21
     2c6:	6f 93       	push	r22
     2c8:	7f 93       	push	r23
     2ca:	8f 93       	push	r24
     2cc:	9f 93       	push	r25
     2ce:	af 93       	push	r26
     2d0:	bf 93       	push	r27
     2d2:	ef 93       	push	r30
     2d4:	ff 93       	push	r31
	
	display_dec(value_to_display, digit[place]);
     2d6:	80 91 0e 01 	lds	r24, 0x010E
     2da:	90 91 0f 01 	lds	r25, 0x010F
     2de:	20 91 4e 01 	lds	r18, 0x014E
     2e2:	ea e0       	ldi	r30, 0x0A	; 10
     2e4:	f1 e0       	ldi	r31, 0x01	; 1
     2e6:	e2 0f       	add	r30, r18
     2e8:	f1 1d       	adc	r31, r1
     2ea:	60 81       	ld	r22, Z
     2ec:	0e 94 9e 00 	call	0x13c	; 0x13c <display_dec>
	
	scan_pots_and_update_control_voltages();		
     2f0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <scan_pots_and_update_control_voltages>

		
	//do SPI read/write every 5 interrupts (16.5 ms)
	if (switch_timer++ == 5)
     2f4:	80 91 4f 01 	lds	r24, 0x014F
     2f8:	98 2f       	mov	r25, r24
     2fa:	9f 5f       	subi	r25, 0xFF	; 255
     2fc:	90 93 4f 01 	sts	0x014F, r25
     300:	85 30       	cpi	r24, 0x05	; 5
     302:	21 f4       	brne	.+8      	; 0x30c <__vector_5+0x58>
	{
		switch_timer = 0;
     304:	10 92 4f 01 	sts	0x014F, r1
		update_spi();	
     308:	0e 94 36 03 	call	0x66c	; 0x66c <update_spi>
			  	
	}
		
	//increment digit display place
	if (place++ == 3) //post increment
     30c:	80 91 4e 01 	lds	r24, 0x014E
     310:	98 2f       	mov	r25, r24
     312:	9f 5f       	subi	r25, 0xFF	; 255
     314:	90 93 4e 01 	sts	0x014E, r25
     318:	83 30       	cpi	r24, 0x03	; 3
     31a:	11 f4       	brne	.+4      	; 0x320 <__vector_5+0x6c>
	{
		place = 0;
     31c:	10 92 4e 01 	sts	0x014E, r1
	}
	

	
}	
     320:	ff 91       	pop	r31
     322:	ef 91       	pop	r30
     324:	bf 91       	pop	r27
     326:	af 91       	pop	r26
     328:	9f 91       	pop	r25
     32a:	8f 91       	pop	r24
     32c:	7f 91       	pop	r23
     32e:	6f 91       	pop	r22
     330:	5f 91       	pop	r21
     332:	4f 91       	pop	r20
     334:	3f 91       	pop	r19
     336:	2f 91       	pop	r18
     338:	0f 90       	pop	r0
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	0f 90       	pop	r0
     33e:	1f 90       	pop	r1
     340:	18 95       	reti

00000342 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     342:	80 e8       	ldi	r24, 0x80	; 128
     344:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     346:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     348:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     34a:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     34c:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     34e:	a2 98       	cbi	0x14, 2	; 20
	
	setup_spi(); 
     350:	0e 94 17 03 	call	0x62e	; 0x62e <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     354:	a9 ed       	ldi	r26, 0xD9	; 217
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	8c 91       	ld	r24, X
     35a:	80 6c       	ori	r24, 0xC0	; 192
     35c:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     35e:	ea ed       	ldi	r30, 0xDA	; 218
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	80 6c       	ori	r24, 0xC0	; 192
     366:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     368:	81 b1       	in	r24, 0x01	; 1
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     36e:	92 b1       	in	r25, 0x02	; 2
     370:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     372:	8c 91       	ld	r24, X
     374:	80 63       	ori	r24, 0x30	; 48
     376:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     378:	80 81       	ld	r24, Z
     37a:	8f 7c       	andi	r24, 0xCF	; 207
     37c:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<ISW8_SW); //set ISW8_SW pin as input
     37e:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     380:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     384:	0e 94 64 00 	call	0xc8	; 0xc8 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     388:	c5 e6       	ldi	r28, 0x65	; 101
     38a:	d1 e0       	ldi	r29, 0x01	; 1
     38c:	ce 01       	movw	r24, r28
     38e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     392:	ce 01       	movw	r24, r28
     394:	6f e0       	ldi	r22, 0x0F	; 15
     396:	71 e0       	ldi	r23, 0x01	; 1
     398:	0e 94 e7 06 	call	0xdce	; 0xdce <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     39c:	ce 01       	movw	r24, r28
     39e:	6a e1       	ldi	r22, 0x1A	; 26
     3a0:	71 e0       	ldi	r23, 0x01	; 1
     3a2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     3a6:	0e 94 1c 01 	call	0x238	; 0x238 <setup_midi_usart>
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
     3aa:	e0 eb       	ldi	r30, 0xB0	; 176
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	86 60       	ori	r24, 0x06	; 6
     3b2:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
     3b4:	e0 e7       	ldi	r30, 0x70	; 112
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	81 60       	ori	r24, 0x01	; 1
     3bc:	80 83       	st	Z, r24
	sei(); //enable global interrupts
     3be:	78 94       	sei

	while(1)
	{	
		midi_device_process(&midi_device);
     3c0:	ce 01       	movw	r24, r28
     3c2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <midi_device_process>
     3c6:	fc cf       	rjmp	.-8      	; 0x3c0 <main+0x7e>

000003c8 <scan_pots_and_update_control_voltages>:
	{SUSTAIN_1,		DAC_MUX_EN3},
	{RELEASE_2,		DAC_MUX_EN3},
	{RELEASE_1,		DAC_MUX_EN3}							
};

void scan_pots_and_update_control_voltages(void) {
     3c8:	2f 92       	push	r2
     3ca:	3f 92       	push	r3
     3cc:	4f 92       	push	r4
     3ce:	5f 92       	push	r5
     3d0:	6f 92       	push	r6
     3d2:	7f 92       	push	r7
     3d4:	8f 92       	push	r8
     3d6:	9f 92       	push	r9
     3d8:	af 92       	push	r10
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cc 24       	eor	r12, r12
     3ee:	dd 24       	eor	r13, r13
     3f0:	c3 94       	inc	r12
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{
		DATA_BUS = i;
		POT_MUX &= ~(1<<POTMUX_EN0);
     3f6:	0f 2e       	mov	r0, r31
     3f8:	fa ed       	ldi	r31, 0xDA	; 218
     3fa:	ef 2e       	mov	r14, r31
     3fc:	ff 24       	eor	r15, r15
     3fe:	f0 2d       	mov	r31, r0
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     400:	ca e7       	ldi	r28, 0x7A	; 122
     402:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
		POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
		//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
		
		//adc_previous = adc_value;
		adc_value = ADCL;
     404:	0f 2e       	mov	r0, r31
     406:	f8 e7       	ldi	r31, 0x78	; 120
     408:	8f 2e       	mov	r8, r31
     40a:	99 24       	eor	r9, r9
     40c:	f0 2d       	mov	r31, r0
		adc_value = adc_value | (ADCH <<8);
     40e:	0f 2e       	mov	r0, r31
     410:	f9 e7       	ldi	r31, 0x79	; 121
     412:	4f 2e       	mov	r4, r31
     414:	55 24       	eor	r5, r5
     416:	f0 2d       	mov	r31, r0
		} else if (i == 11) //exception to handle ARP_RATE pot
		{
			//store ARP pot value, but don't set DAC
			
		} else {
			set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
     418:	0f 2e       	mov	r0, r31
     41a:	fe e2       	ldi	r31, 0x2E	; 46
     41c:	2f 2e       	mov	r2, r31
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	3f 2e       	mov	r3, r31
     422:	f0 2d       	mov	r31, r0
     424:	05 c0       	rjmp	.+10     	; 0x430 <scan_pots_and_update_control_voltages+0x68>
};

void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     426:	0f 5f       	subi	r16, 0xFF	; 255
     428:	1f 4f       	sbci	r17, 0xFF	; 255
     42a:	08 94       	sec
     42c:	c1 1c       	adc	r12, r1
     42e:	d1 1c       	adc	r13, r1
     430:	f8 01       	movw	r30, r16
	{
		DATA_BUS = i;
     432:	02 b9       	out	0x02, r16	; 2
		POT_MUX &= ~(1<<POTMUX_EN0);
     434:	d7 01       	movw	r26, r14
     436:	8c 91       	ld	r24, X
     438:	8f 7b       	andi	r24, 0xBF	; 191
     43a:	8c 93       	st	X, r24
     43c:	bd e0       	ldi	r27, 0x0D	; 13
     43e:	ba 95       	dec	r27
     440:	f1 f7       	brne	.-4      	; 0x43e <scan_pots_and_update_control_voltages+0x76>
     442:	00 00       	nop
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     444:	88 81       	ld	r24, Y
     446:	80 64       	ori	r24, 0x40	; 64
     448:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     44a:	88 81       	ld	r24, Y
     44c:	86 fd       	sbrc	r24, 6
     44e:	fd cf       	rjmp	.-6      	; 0x44a <scan_pots_and_update_control_voltages+0x82>
		POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
     450:	d7 01       	movw	r26, r14
     452:	8c 91       	ld	r24, X
     454:	80 64       	ori	r24, 0x40	; 64
     456:	8c 93       	st	X, r24
		//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
		
		//adc_previous = adc_value;
		adc_value = ADCL;
     458:	d4 01       	movw	r26, r8
     45a:	8c 91       	ld	r24, X
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 53 01 	sts	0x0153, r25
     462:	80 93 52 01 	sts	0x0152, r24
		adc_value = adc_value | (ADCH <<8);
     466:	d2 01       	movw	r26, r4
     468:	2c 91       	ld	r18, X
     46a:	80 91 52 01 	lds	r24, 0x0152
     46e:	90 91 53 01 	lds	r25, 0x0153
     472:	b2 2e       	mov	r11, r18
     474:	aa 24       	eor	r10, r10
     476:	8a 29       	or	r24, r10
     478:	9b 29       	or	r25, r11
     47a:	90 93 53 01 	sts	0x0153, r25
     47e:	80 93 52 01 	sts	0x0152, r24
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
     482:	c8 01       	movw	r24, r16
     484:	08 97       	sbiw	r24, 0x08	; 8
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	91 05       	cpc	r25, r1
     48a:	08 f0       	brcs	.+2      	; 0x48e <scan_pots_and_update_control_voltages+0xc6>
     48c:	44 c0       	rjmp	.+136    	; 0x516 <scan_pots_and_update_control_voltages+0x14e>
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     48e:	e9 30       	cpi	r30, 0x09	; 9
     490:	f1 05       	cpc	r31, r1
     492:	19 f0       	breq	.+6      	; 0x49a <scan_pots_and_update_control_voltages+0xd2>
		adc_value = ADCL;
		adc_value = adc_value | (ADCH <<8);
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
     494:	2f e9       	ldi	r18, 0x9F	; 159
     496:	38 e1       	ldi	r19, 0x18	; 24
     498:	02 c0       	rjmp	.+4      	; 0x49e <scan_pots_and_update_control_voltages+0xd6>
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     49a:	25 e0       	ldi	r18, 0x05	; 5
     49c:	3f e1       	ldi	r19, 0x1F	; 31
			if (adc_value >= 512) {
     49e:	80 91 52 01 	lds	r24, 0x0152
     4a2:	90 91 53 01 	lds	r25, 0x0153
     4a6:	b2 e0       	ldi	r27, 0x02	; 2
     4a8:	80 30       	cpi	r24, 0x00	; 0
     4aa:	9b 07       	cpc	r25, r27
     4ac:	d8 f0       	brcs	.+54     	; 0x4e4 <scan_pots_and_update_control_voltages+0x11c>
				set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value + (adc_value - 512)));
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	e2 0d       	add	r30, r2
     4b4:	f3 1d       	adc	r31, r3
     4b6:	81 81       	ldd	r24, Z+1	; 0x01
     4b8:	60 81       	ld	r22, Z
     4ba:	40 91 52 01 	lds	r20, 0x0152
     4be:	50 91 53 01 	lds	r21, 0x0153
     4c2:	40 50       	subi	r20, 0x00	; 0
     4c4:	52 40       	sbci	r21, 0x02	; 2
     4c6:	42 0f       	add	r20, r18
     4c8:	53 1f       	adc	r21, r19
     4ca:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
				tune_offset = adc_value - 512;
     4ce:	80 91 52 01 	lds	r24, 0x0152
     4d2:	90 91 53 01 	lds	r25, 0x0153
     4d6:	80 50       	subi	r24, 0x00	; 0
     4d8:	92 40       	sbci	r25, 0x02	; 2
     4da:	90 93 51 01 	sts	0x0151, r25
     4de:	80 93 50 01 	sts	0x0150, r24
     4e2:	2f c0       	rjmp	.+94     	; 0x542 <scan_pots_and_update_control_voltages+0x17a>
			} else {
				set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value - (512- adc_value)));
     4e4:	ee 0f       	add	r30, r30
     4e6:	ff 1f       	adc	r31, r31
     4e8:	e2 0d       	add	r30, r2
     4ea:	f3 1d       	adc	r31, r3
     4ec:	81 81       	ldd	r24, Z+1	; 0x01
     4ee:	60 81       	ld	r22, Z
     4f0:	40 91 52 01 	lds	r20, 0x0152
     4f4:	50 91 53 01 	lds	r21, 0x0153
     4f8:	40 50       	subi	r20, 0x00	; 0
     4fa:	52 40       	sbci	r21, 0x02	; 2
     4fc:	42 0f       	add	r20, r18
     4fe:	53 1f       	adc	r21, r19
     500:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
				tune_offset = adc_value;
     504:	80 91 52 01 	lds	r24, 0x0152
     508:	90 91 53 01 	lds	r25, 0x0153
     50c:	90 93 51 01 	sts	0x0151, r25
     510:	80 93 50 01 	sts	0x0150, r24
     514:	16 c0       	rjmp	.+44     	; 0x542 <scan_pots_and_update_control_voltages+0x17a>
			}

		} else if (i == 11) //exception to handle ARP_RATE pot
     516:	eb 30       	cpi	r30, 0x0B	; 11
     518:	f1 05       	cpc	r31, r1
     51a:	09 f4       	brne	.+2      	; 0x51e <scan_pots_and_update_control_voltages+0x156>
     51c:	84 cf       	rjmp	.-248    	; 0x426 <scan_pots_and_update_control_voltages+0x5e>
		{
			//store ARP pot value, but don't set DAC
			
		} else {
			set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
     51e:	ee 0f       	add	r30, r30
     520:	ff 1f       	adc	r31, r31
     522:	e2 0d       	add	r30, r2
     524:	f3 1d       	adc	r31, r3
     526:	81 81       	ldd	r24, Z+1	; 0x01
     528:	60 81       	ld	r22, Z
     52a:	40 91 52 01 	lds	r20, 0x0152
     52e:	50 91 53 01 	lds	r21, 0x0153
     532:	42 95       	swap	r20
     534:	52 95       	swap	r21
     536:	50 7f       	andi	r21, 0xF0	; 240
     538:	54 27       	eor	r21, r20
     53a:	40 7f       	andi	r20, 0xF0	; 240
     53c:	54 27       	eor	r21, r20
     53e:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
};

void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     542:	e0 e1       	ldi	r30, 0x10	; 16
     544:	ce 16       	cp	r12, r30
     546:	d1 04       	cpc	r13, r1
     548:	0c f4       	brge	.+2      	; 0x54c <scan_pots_and_update_control_voltages+0x184>
     54a:	6d cf       	rjmp	.-294    	; 0x426 <scan_pots_and_update_control_voltages+0x5e>
     54c:	00 e0       	ldi	r16, 0x00	; 0
     54e:	10 e0       	ldi	r17, 0x00	; 0
	//now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		DATA_BUS = i+1; //U4 input 0 is not used (grounded)
		POT_MUX &= ~(1<<POTMUX_EN1);
     550:	0f 2e       	mov	r0, r31
     552:	fa ed       	ldi	r31, 0xDA	; 218
     554:	ef 2e       	mov	r14, r31
     556:	ff 24       	eor	r15, r15
     558:	f0 2d       	mov	r31, r0
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     55a:	ca e7       	ldi	r28, 0x7A	; 122
     55c:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
		POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2
		//adc_previous = adc_value;
		adc_value = ADCL;
     55e:	0f 2e       	mov	r0, r31
     560:	f8 e7       	ldi	r31, 0x78	; 120
     562:	cf 2e       	mov	r12, r31
     564:	dd 24       	eor	r13, r13
     566:	f0 2d       	mov	r31, r0
		adc_value = adc_value | (ADCH <<8);
     568:	0f 2e       	mov	r0, r31
     56a:	f9 e7       	ldi	r31, 0x79	; 121
     56c:	af 2e       	mov	r10, r31
     56e:	bb 24       	eor	r11, r11
     570:	f0 2d       	mov	r31, r0

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
     572:	0f 2e       	mov	r0, r31
     574:	f0 e1       	ldi	r31, 0x10	; 16
     576:	8f 2e       	mov	r8, r31
     578:	f1 e0       	ldi	r31, 0x01	; 1
     57a:	9f 2e       	mov	r9, r31
     57c:	f0 2d       	mov	r31, r0
	{SUSTAIN_1,		DAC_MUX_EN3},
	{RELEASE_2,		DAC_MUX_EN3},
	{RELEASE_1,		DAC_MUX_EN3}							
};

void scan_pots_and_update_control_voltages(void) {
     57e:	80 2f       	mov	r24, r16
     580:	8f 5f       	subi	r24, 0xFF	; 255
	
	//now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		DATA_BUS = i+1; //U4 input 0 is not used (grounded)
     582:	82 b9       	out	0x02, r24	; 2
		POT_MUX &= ~(1<<POTMUX_EN1);
     584:	d7 01       	movw	r26, r14
     586:	8c 91       	ld	r24, X
     588:	8f 77       	andi	r24, 0x7F	; 127
     58a:	8c 93       	st	X, r24
     58c:	bd e0       	ldi	r27, 0x0D	; 13
     58e:	ba 95       	dec	r27
     590:	f1 f7       	brne	.-4      	; 0x58e <scan_pots_and_update_control_voltages+0x1c6>
     592:	00 00       	nop
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     594:	88 81       	ld	r24, Y
     596:	80 64       	ori	r24, 0x40	; 64
     598:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
     59a:	88 81       	ld	r24, Y
     59c:	86 fd       	sbrc	r24, 6
     59e:	fd cf       	rjmp	.-6      	; 0x59a <scan_pots_and_update_control_voltages+0x1d2>
		POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2
     5a0:	f7 01       	movw	r30, r14
     5a2:	80 81       	ld	r24, Z
     5a4:	80 68       	ori	r24, 0x80	; 128
     5a6:	80 83       	st	Z, r24
		//adc_previous = adc_value;
		adc_value = ADCL;
     5a8:	d6 01       	movw	r26, r12
     5aa:	8c 91       	ld	r24, X
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	90 93 53 01 	sts	0x0153, r25
     5b2:	80 93 52 01 	sts	0x0152, r24
		adc_value = adc_value | (ADCH <<8);
     5b6:	f5 01       	movw	r30, r10
     5b8:	20 81       	ld	r18, Z
     5ba:	80 91 52 01 	lds	r24, 0x0152
     5be:	90 91 53 01 	lds	r25, 0x0153
     5c2:	72 2e       	mov	r7, r18
     5c4:	66 24       	eor	r6, r6
     5c6:	86 29       	or	r24, r6
     5c8:	97 29       	or	r25, r7
     5ca:	90 93 53 01 	sts	0x0153, r25
     5ce:	80 93 52 01 	sts	0x0152, r24

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
     5d2:	f8 01       	movw	r30, r16
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	e8 0d       	add	r30, r8
     5da:	f9 1d       	adc	r31, r9
     5dc:	81 81       	ldd	r24, Z+1	; 0x01
     5de:	60 81       	ld	r22, Z
     5e0:	40 91 52 01 	lds	r20, 0x0152
     5e4:	50 91 53 01 	lds	r21, 0x0153
     5e8:	42 95       	swap	r20
     5ea:	52 95       	swap	r21
     5ec:	50 7f       	andi	r21, 0xF0	; 240
     5ee:	54 27       	eor	r21, r20
     5f0:	40 7f       	andi	r20, 0xF0	; 240
     5f2:	54 27       	eor	r21, r20
     5f4:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
		}
		
	}
	
	//now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     5f8:	0f 5f       	subi	r16, 0xFF	; 255
     5fa:	1f 4f       	sbci	r17, 0xFF	; 255
     5fc:	0f 30       	cpi	r16, 0x0F	; 15
     5fe:	11 05       	cpc	r17, r1
     600:	09 f0       	breq	.+2      	; 0x604 <scan_pots_and_update_control_voltages+0x23c>
     602:	bd cf       	rjmp	.-134    	; 0x57e <scan_pots_and_update_control_voltages+0x1b6>

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);

	}

	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     604:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     606:	a1 9a       	sbi	0x14, 1	; 20
	
	
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	bf 90       	pop	r11
     61a:	af 90       	pop	r10
     61c:	9f 90       	pop	r9
     61e:	8f 90       	pop	r8
     620:	7f 90       	pop	r7
     622:	6f 90       	pop	r6
     624:	5f 90       	pop	r5
     626:	4f 90       	pop	r4
     628:	3f 90       	pop	r3
     62a:	2f 90       	pop	r2
     62c:	08 95       	ret

0000062e <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     62e:	84 b1       	in	r24, 0x04	; 4
     630:	87 62       	ori	r24, 0x27	; 39
     632:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     634:	ec ed       	ldi	r30, 0xDC	; 220
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	8c 65       	ori	r24, 0x5C	; 92
     63c:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     63e:	85 b1       	in	r24, 0x05	; 5
     640:	89 7d       	andi	r24, 0xD9	; 217
     642:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     644:	ed ed       	ldi	r30, 0xDD	; 221
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	83 7f       	andi	r24, 0xF3	; 243
     64c:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     64e:	80 e5       	ldi	r24, 0x50	; 80
     650:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     652:	80 81       	ld	r24, Z
     654:	87 7f       	andi	r24, 0xF7	; 247
     656:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     658:	80 81       	ld	r24, Z
     65a:	87 7f       	andi	r24, 0xF7	; 247
     65c:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     65e:	80 81       	ld	r24, Z
     660:	88 60       	ori	r24, 0x08	; 8
     662:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     664:	80 81       	ld	r24, Z
     666:	8f 7e       	andi	r24, 0xEF	; 239
     668:	80 83       	st	Z, r24
	
}
     66a:	08 95       	ret

0000066c <update_spi>:

void update_spi(void) {
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
	
			SPI_PORT |= SPI_SW_LATCH;
     674:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE
			SPDR =
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     676:	c0 91 5a 01 	lds	r28, 0x015A
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     67a:	40 91 5a 01 	lds	r20, 0x015A
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     67e:	00 91 5a 01 	lds	r16, 0x015A
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     682:	80 91 5a 01 	lds	r24, 0x015A
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     686:	a0 91 5a 01 	lds	r26, 0x015A
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     68a:	60 91 5a 01 	lds	r22, 0x015A
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     68e:	20 91 5a 01 	lds	r18, 0x015A
			ISW8_SW_ON << ISW8_LED;
     692:	90 91 5f 01 	lds	r25, 0x015F
     696:	97 95       	ror	r25
     698:	99 27       	eor	r25, r25
     69a:	97 95       	ror	r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     69c:	81 70       	andi	r24, 0x01	; 1
     69e:	98 2b       	or	r25, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     6a0:	cc 1f       	adc	r28, r28
     6a2:	cc 27       	eor	r28, r28
     6a4:	cc 1f       	adc	r28, r28
     6a6:	cc 0f       	add	r28, r28
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6a8:	c9 2b       	or	r28, r25
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     6aa:	46 95       	lsr	r20
     6ac:	46 95       	lsr	r20
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	41 70       	andi	r20, 0x01	; 1
     6b2:	50 70       	andi	r21, 0x00	; 0
     6b4:	ca 01       	movw	r24, r20
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6be:	8c 2b       	or	r24, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     6c0:	06 95       	lsr	r16
     6c2:	10 e0       	ldi	r17, 0x00	; 0
     6c4:	01 70       	andi	r16, 0x01	; 1
     6c6:	10 70       	andi	r17, 0x00	; 0
     6c8:	e8 01       	movw	r28, r16
     6ca:	cc 0f       	add	r28, r28
     6cc:	dd 1f       	adc	r29, r29
     6ce:	cc 0f       	add	r28, r28
     6d0:	dd 1f       	adc	r29, r29
     6d2:	cc 0f       	add	r28, r28
     6d4:	dd 1f       	adc	r29, r29
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6d6:	c8 2b       	or	r28, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     6d8:	a2 95       	swap	r26
     6da:	af 70       	andi	r26, 0x0F	; 15
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	a1 70       	andi	r26, 0x01	; 1
     6e0:	b0 70       	andi	r27, 0x00	; 0
     6e2:	fd 01       	movw	r30, r26
     6e4:	e2 95       	swap	r30
     6e6:	f2 95       	swap	r31
     6e8:	f0 7f       	andi	r31, 0xF0	; 240
     6ea:	fe 27       	eor	r31, r30
     6ec:	e0 7f       	andi	r30, 0xF0	; 240
     6ee:	fe 27       	eor	r31, r30
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6f0:	ec 2b       	or	r30, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     6f2:	62 95       	swap	r22
     6f4:	66 95       	lsr	r22
     6f6:	67 70       	andi	r22, 0x07	; 7
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	61 70       	andi	r22, 0x01	; 1
     6fc:	70 70       	andi	r23, 0x00	; 0
     6fe:	ab 01       	movw	r20, r22
     700:	44 0f       	add	r20, r20
     702:	55 1f       	adc	r21, r21
     704:	42 95       	swap	r20
     706:	52 95       	swap	r21
     708:	50 7f       	andi	r21, 0xF0	; 240
     70a:	54 27       	eor	r21, r20
     70c:	40 7f       	andi	r20, 0xF0	; 240
     70e:	54 27       	eor	r21, r20
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     710:	4e 2b       	or	r20, r30
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     712:	22 95       	swap	r18
     714:	26 95       	lsr	r18
     716:	26 95       	lsr	r18
     718:	23 70       	andi	r18, 0x03	; 3
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	21 70       	andi	r18, 0x01	; 1
     71e:	30 70       	andi	r19, 0x00	; 0
     720:	c9 01       	movw	r24, r18
     722:	00 24       	eor	r0, r0
     724:	96 95       	lsr	r25
     726:	87 95       	ror	r24
     728:	07 94       	ror	r0
     72a:	96 95       	lsr	r25
     72c:	87 95       	ror	r24
     72e:	07 94       	ror	r0
     730:	98 2f       	mov	r25, r24
     732:	80 2d       	mov	r24, r0
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     734:	84 2b       	or	r24, r20
     736:	8e bd       	out	0x2e, r24	; 46
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
			ISW8_SW_ON << ISW8_LED;
			
			while (!(SPSR & (1<<SPIF)));
     738:	0d b4       	in	r0, 0x2d	; 45
     73a:	07 fe       	sbrs	r0, 7
     73c:	fd cf       	rjmp	.-6      	; 0x738 <update_spi+0xcc>
			
			//Now read SPDR for switch data shifted in from 74XX165 U14
			spi_sw_current_state = SPDR;
     73e:	8e b5       	in	r24, 0x2e	; 46
     740:	80 93 5c 01 	sts	0x015C, r24
			
			spi_sw_current_state ^= spi_sw_previous_state;
     744:	80 91 5c 01 	lds	r24, 0x015C
     748:	90 91 5b 01 	lds	r25, 0x015B
     74c:	89 27       	eor	r24, r25
     74e:	80 93 5c 01 	sts	0x015C, r24
			spi_sw_previous_state ^= spi_sw_current_state;
     752:	80 91 5b 01 	lds	r24, 0x015B
     756:	90 91 5c 01 	lds	r25, 0x015C
     75a:	89 27       	eor	r24, r25
     75c:	80 93 5b 01 	sts	0x015B, r24
			spi_sw_current_state &= spi_sw_previous_state;
     760:	80 91 5c 01 	lds	r24, 0x015C
     764:	90 91 5b 01 	lds	r25, 0x015B
     768:	89 23       	and	r24, r25
     76a:	80 93 5c 01 	sts	0x015C, r24
			//if (spi_sw_current_state & (1<<ISW4_SW)) sw_latch_five ^= (1 << ISW4_SW);
			//if (spi_sw_current_state & (1<<ISW5_SW)) sw_latch_five ^= (1 << ISW5_SW);
			//if (spi_sw_current_state & (1<<ISW6_SW)) sw_latch_five ^= (1 << ISW6_SW);
			//if (spi_sw_current_state & (1<<ISW7_SW)) sw_latch_five ^= (1 << ISW7_SW);
			
			sw_latch_five ^= spi_sw_current_state; //Omar's solution. Replaces above 7 lines of if/then statements. Duh!
     76e:	80 91 5a 01 	lds	r24, 0x015A
     772:	90 91 5c 01 	lds	r25, 0x015C
     776:	89 27       	eor	r24, r25
     778:	80 93 5a 01 	sts	0x015A, r24
			
			//SHIFT 4th BYTE
			SPDR = 0; //no LEDs connected in current test set up
     77c:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     77e:	0d b4       	in	r0, 0x2d	; 45
     780:	07 fe       	sbrs	r0, 7
     782:	fd cf       	rjmp	.-6      	; 0x77e <update_spi+0x112>
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//check if ISW12_SW bit is set
			if (SPDR >> 5 & 1)
     784:	8e b5       	in	r24, 0x2e	; 46
     786:	82 95       	swap	r24
     788:	86 95       	lsr	r24
     78a:	87 70       	andi	r24, 0x07	; 7
     78c:	80 ff       	sbrs	r24, 0
     78e:	04 c0       	rjmp	.+8      	; 0x798 <update_spi+0x12c>
			{
				ISW12_SW_ON = 1;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	80 93 62 01 	sts	0x0162, r24
     796:	02 c0       	rjmp	.+4      	; 0x79c <update_spi+0x130>
			}
			else
			{
				ISW12_SW_ON = 0;
     798:	10 92 62 01 	sts	0x0162, r1
			}
			//check if ISW13_SW bit is set
			if (SPDR >> 6 & 1)
     79c:	8e b5       	in	r24, 0x2e	; 46
     79e:	82 95       	swap	r24
     7a0:	86 95       	lsr	r24
     7a2:	86 95       	lsr	r24
     7a4:	83 70       	andi	r24, 0x03	; 3
     7a6:	80 ff       	sbrs	r24, 0
     7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <update_spi+0x146>
			{
				ISW13_SW_ON = 1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	80 93 61 01 	sts	0x0161, r24
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <update_spi+0x14a>
			}
			else
			{
				ISW13_SW_ON = 0;
     7b2:	10 92 61 01 	sts	0x0161, r1
			}
			
			//SHIFT 3th BYTE
			SPDR = 0;
     7b6:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     7b8:	0d b4       	in	r0, 0x2d	; 45
     7ba:	07 fe       	sbrs	r0, 7
     7bc:	fd cf       	rjmp	.-6      	; 0x7b8 <update_spi+0x14c>

			//SHIFT 2th BYTE
			SPDR = 0;
     7be:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     7c0:	0d b4       	in	r0, 0x2d	; 45
     7c2:	07 fe       	sbrs	r0, 7
     7c4:	fd cf       	rjmp	.-6      	; 0x7c0 <update_spi+0x154>
			
			//SHIFT 1st BYTE
			//SPDR = (ISW12_SW_ON << 2) | ISW11_LED; //TURN ON ISW12 (if ISW12_SW is ON) and ISW11 LEDs, both on 74XX595 U8, first shift register in chain
			SPDR = (ISW12_SW_ON <<2) | (ISW13_SW_ON << 7); //turn on ISW12 if ISW12_SW is ON, turn ISW11 (MSB of first shift register chain) if ISW13_SW is ON
     7c6:	80 91 62 01 	lds	r24, 0x0162
     7ca:	90 91 61 01 	lds	r25, 0x0161
     7ce:	97 95       	ror	r25
     7d0:	99 27       	eor	r25, r25
     7d2:	97 95       	ror	r25
     7d4:	88 0f       	add	r24, r24
     7d6:	88 0f       	add	r24, r24
     7d8:	89 2b       	or	r24, r25
     7da:	8e bd       	out	0x2e, r24	; 46
			//Wait for SPI shift to complete
			while (!(SPSR & (1<<SPIF)));
     7dc:	0d b4       	in	r0, 0x2d	; 45
     7de:	07 fe       	sbrs	r0, 7
     7e0:	fd cf       	rjmp	.-6      	; 0x7dc <update_spi+0x170>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     7e2:	ed ed       	ldi	r30, 0xDD	; 221
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	87 7f       	andi	r24, 0xF7	; 247
     7ea:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     7ec:	80 81       	ld	r24, Z
     7ee:	88 60       	ori	r24, 0x08	; 8
     7f0:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     7f2:	2d 98       	cbi	0x05, 5	; 5
			//this toggle code works, but I haven't figured out how it works
			//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
			current_sw_state = SWITCH_PORT;
     7f4:	8f b1       	in	r24, 0x0f	; 15
     7f6:	80 93 5d 01 	sts	0x015D, r24
			current_sw_state ^= previous_sw_state;
     7fa:	80 91 5d 01 	lds	r24, 0x015D
     7fe:	90 91 5e 01 	lds	r25, 0x015E
     802:	89 27       	eor	r24, r25
     804:	80 93 5d 01 	sts	0x015D, r24
			previous_sw_state ^= current_sw_state;
     808:	80 91 5e 01 	lds	r24, 0x015E
     80c:	90 91 5d 01 	lds	r25, 0x015D
     810:	89 27       	eor	r24, r25
     812:	80 93 5e 01 	sts	0x015E, r24
			current_sw_state &= previous_sw_state;
     816:	80 91 5d 01 	lds	r24, 0x015D
     81a:	90 91 5e 01 	lds	r25, 0x015E
     81e:	89 23       	and	r24, r25
     820:	80 93 5d 01 	sts	0x015D, r24
			
			if (current_sw_state & (1<<ISW8_SW))
     824:	80 91 5d 01 	lds	r24, 0x015D
     828:	82 ff       	sbrs	r24, 2
     82a:	06 c0       	rjmp	.+12     	; 0x838 <update_spi+0x1cc>
			{
				ISW8_SW_ON ^= 1 << 0; //toggle switch state
     82c:	90 91 5f 01 	lds	r25, 0x015F
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	89 27       	eor	r24, r25
     834:	80 93 5f 01 	sts	0x015F, r24
			}
			
			if (current_sw_state & (1<<ISW11_SW)) {
     838:	80 91 5d 01 	lds	r24, 0x015D
     83c:	84 ff       	sbrs	r24, 4
     83e:	06 c0       	rjmp	.+12     	; 0x84c <update_spi+0x1e0>
				
				ISW11_SW_ON ^= 1 << 0; //toggle switch state
     840:	90 91 63 01 	lds	r25, 0x0163
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	89 27       	eor	r24, r25
     848:	80 93 63 01 	sts	0x0163, r24
			}
			
			if (current_sw_state & (1<<ISW9_SW)) {
     84c:	80 91 5d 01 	lds	r24, 0x015D
     850:	83 ff       	sbrs	r24, 3
     852:	06 c0       	rjmp	.+12     	; 0x860 <update_spi+0x1f4>
				
				ISW9_SW_ON ^= 1 << 0; //toggle switch state
     854:	90 91 64 01 	lds	r25, 0x0164
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	89 27       	eor	r24, r25
     85c:	80 93 64 01 	sts	0x0164, r24
			}
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     860:	ed ed       	ldi	r30, 0xDD	; 221
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	8f 7b       	andi	r24, 0xBF	; 191
     868:	80 83       	st	Z, r24
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
     86a:	40 91 5a 01 	lds	r20, 0x015A
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     86e:	30 91 5a 01 	lds	r19, 0x015A
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
     872:	c0 91 5a 01 	lds	r28, 0x015A
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
     876:	00 91 5a 01 	lds	r16, 0x015A
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
     87a:	60 91 5a 01 	lds	r22, 0x015A
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
     87e:	a0 91 5a 01 	lds	r26, 0x015A
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
     882:	20 91 5a 01 	lds	r18, 0x015A
			ISW8_SW_ON << 4;
     886:	80 91 5f 01 	lds	r24, 0x015F
     88a:	82 95       	swap	r24
     88c:	80 7f       	andi	r24, 0xF0	; 240
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     88e:	36 95       	lsr	r19
     890:	36 95       	lsr	r19
     892:	31 70       	andi	r19, 0x01	; 1
     894:	38 2b       	or	r19, r24
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	01 70       	andi	r16, 0x01	; 1
     89a:	10 70       	andi	r17, 0x00	; 0
     89c:	c8 01       	movw	r24, r16
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8a2:	83 2b       	or	r24, r19
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
     8a4:	a2 95       	swap	r26
     8a6:	a6 95       	lsr	r26
     8a8:	a7 70       	andi	r26, 0x07	; 7
     8aa:	a7 95       	ror	r26
     8ac:	aa 27       	eor	r26, r26
     8ae:	a7 95       	ror	r26
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8b0:	8a 2b       	or	r24, r26
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
     8b2:	44 1f       	adc	r20, r20
     8b4:	44 27       	eor	r20, r20
     8b6:	44 1f       	adc	r20, r20
     8b8:	44 0f       	add	r20, r20
     8ba:	44 0f       	add	r20, r20
     8bc:	44 0f       	add	r20, r20
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8be:	48 2b       	or	r20, r24
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
     8c0:	c6 95       	lsr	r28
     8c2:	d0 e0       	ldi	r29, 0x00	; 0
     8c4:	c1 70       	andi	r28, 0x01	; 1
     8c6:	d0 70       	andi	r29, 0x00	; 0
     8c8:	de 01       	movw	r26, r28
     8ca:	aa 0f       	add	r26, r26
     8cc:	bb 1f       	adc	r27, r27
     8ce:	aa 0f       	add	r26, r26
     8d0:	bb 1f       	adc	r27, r27
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8d2:	a4 2b       	or	r26, r20
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
     8d4:	62 95       	swap	r22
     8d6:	6f 70       	andi	r22, 0x0F	; 15
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	61 70       	andi	r22, 0x01	; 1
     8dc:	70 70       	andi	r23, 0x00	; 0
     8de:	ab 01       	movw	r20, r22
     8e0:	00 24       	eor	r0, r0
     8e2:	56 95       	lsr	r21
     8e4:	47 95       	ror	r20
     8e6:	07 94       	ror	r0
     8e8:	56 95       	lsr	r21
     8ea:	47 95       	ror	r20
     8ec:	07 94       	ror	r0
     8ee:	54 2f       	mov	r21, r20
     8f0:	40 2d       	mov	r20, r0
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8f2:	4a 2b       	or	r20, r26
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
     8f4:	22 95       	swap	r18
     8f6:	26 95       	lsr	r18
     8f8:	26 95       	lsr	r18
     8fa:	23 70       	andi	r18, 0x03	; 3
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	21 70       	andi	r18, 0x01	; 1
     900:	30 70       	andi	r19, 0x00	; 0
     902:	c9 01       	movw	r24, r18
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	82 95       	swap	r24
     90a:	92 95       	swap	r25
     90c:	90 7f       	andi	r25, 0xF0	; 240
     90e:	98 27       	eor	r25, r24
     910:	80 7f       	andi	r24, 0xF0	; 240
     912:	98 27       	eor	r25, r24
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     914:	84 2b       	or	r24, r20
     916:	82 b9       	out	0x02, r24	; 2
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
			ISW8_SW_ON << 4;
			VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     918:	80 81       	ld	r24, Z
     91a:	80 64       	ori	r24, 0x40	; 64
     91c:	80 83       	st	Z, r24
     91e:	00 00       	nop
			_delay_us(1);
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     920:	80 81       	ld	r24, Z
     922:	8f 7b       	andi	r24, 0xBF	; 191
     924:	80 83       	st	Z, r24
			DATA_BUS = 0;
     926:	12 b8       	out	0x02, r1	; 2
	
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	08 95       	ret

00000932 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     932:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     934:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     936:	74 83       	std	Z+4, r23	; 0x04
     938:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
     93a:	11 82       	std	Z+1, r1	; 0x01
     93c:	10 82       	st	Z, r1
}
     93e:	08 95       	ret

00000940 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	ec 01       	movw	r28, r24
     948:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     94a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <store_and_clear_interrupt>
     94e:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     950:	39 81       	ldd	r19, Y+1	; 0x01
     952:	83 2f       	mov	r24, r19
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	6a 81       	ldd	r22, Y+2	; 0x02
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__divmodhi4>
     960:	48 81       	ld	r20, Y
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	84 17       	cp	r24, r20
     966:	95 07       	cpc	r25, r21
     968:	29 f4       	brne	.+10     	; 0x974 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
     96a:	82 2f       	mov	r24, r18
     96c:	0e 94 12 05 	call	0xa24	; 0xa24 <restore_interrupt_setting>
      return false;
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	11 c0       	rjmp	.+34     	; 0x996 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
     974:	eb 81       	ldd	r30, Y+3	; 0x03
     976:	fc 81       	ldd	r31, Y+4	; 0x04
     978:	e3 0f       	add	r30, r19
     97a:	f1 1d       	adc	r31, r1
     97c:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	6a 81       	ldd	r22, Y+2	; 0x02
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__divmodhi4>
     98c:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     98e:	82 2f       	mov	r24, r18
     990:	0e 94 12 05 	call	0xa24	; 0xa24 <restore_interrupt_setting>
      return true;
     994:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	08 95       	ret

0000099e <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     9a4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     9a8:	29 81       	ldd	r18, Y+1	; 0x01
     9aa:	98 81       	ld	r25, Y
     9ac:	29 17       	cp	r18, r25
     9ae:	18 f0       	brcs	.+6      	; 0x9b6 <bytequeue_length+0x18>
      len = queue->end - queue->start;
     9b0:	c2 2f       	mov	r28, r18
     9b2:	c9 1b       	sub	r28, r25
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
     9b6:	ca 81       	ldd	r28, Y+2	; 0x02
     9b8:	c2 0f       	add	r28, r18
     9ba:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
     9bc:	0e 94 12 05 	call	0xa24	; 0xa24 <restore_interrupt_setting>
   return len;
}
     9c0:	8c 2f       	mov	r24, r28
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     9c8:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     9ca:	20 81       	ld	r18, Z
     9cc:	86 2f       	mov	r24, r22
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	82 0f       	add	r24, r18
     9d2:	91 1d       	adc	r25, r1
     9d4:	62 81       	ldd	r22, Z+2	; 0x02
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__divmodhi4>
     9dc:	03 80       	ldd	r0, Z+3	; 0x03
     9de:	f4 81       	ldd	r31, Z+4	; 0x04
     9e0:	e0 2d       	mov	r30, r0
     9e2:	e8 0f       	add	r30, r24
     9e4:	f9 1f       	adc	r31, r25
}
     9e6:	80 81       	ld	r24, Z
     9e8:	08 95       	ret

000009ea <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
     9f2:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     9f4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <store_and_clear_interrupt>
     9f8:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     9fa:	88 81       	ld	r24, Y
     9fc:	21 2f       	mov	r18, r17
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	28 0f       	add	r18, r24
     a02:	31 1d       	adc	r19, r1
     a04:	6a 81       	ldd	r22, Y+2	; 0x02
     a06:	c9 01       	movw	r24, r18
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__divmodhi4>
     a0e:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
     a10:	84 2f       	mov	r24, r20
     a12:	0e 94 12 05 	call	0xa24	; 0xa24 <restore_interrupt_setting>
}
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	08 95       	ret

00000a1e <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
     a1e:	8f b7       	in	r24, 0x3f	; 63
   cli();
     a20:	f8 94       	cli
   return sreg;
}
     a22:	08 95       	ret

00000a24 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
     a24:	8f bf       	out	0x3f, r24	; 63
}
     a26:	08 95       	ret

00000a28 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     a28:	88 1f       	adc	r24, r24
     a2a:	88 27       	eor	r24, r24
     a2c:	88 1f       	adc	r24, r24
     a2e:	08 95       	ret

00000a30 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	88 3f       	cpi	r24, 0xF8	; 248
     a34:	08 f4       	brcc	.+2      	; 0xa38 <midi_is_realtime+0x8>
     a36:	90 e0       	ldi	r25, 0x00	; 0
}
     a38:	89 2f       	mov	r24, r25
     a3a:	08 95       	ret

00000a3c <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     a3c:	28 2f       	mov	r18, r24
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	20 7f       	andi	r18, 0xF0	; 240
     a42:	30 70       	andi	r19, 0x00	; 0
     a44:	20 3c       	cpi	r18, 0xC0	; 192
     a46:	31 05       	cpc	r19, r1
     a48:	e9 f1       	breq	.+122    	; 0xac4 <midi_packet_length+0x88>
     a4a:	21 3c       	cpi	r18, 0xC1	; 193
     a4c:	31 05       	cpc	r19, r1
     a4e:	8c f4       	brge	.+34     	; 0xa72 <midi_packet_length+0x36>
     a50:	20 39       	cpi	r18, 0x90	; 144
     a52:	31 05       	cpc	r19, r1
     a54:	e1 f0       	breq	.+56     	; 0xa8e <midi_packet_length+0x52>
     a56:	21 39       	cpi	r18, 0x91	; 145
     a58:	31 05       	cpc	r19, r1
     a5a:	24 f4       	brge	.+8      	; 0xa64 <midi_packet_length+0x28>
     a5c:	20 38       	cpi	r18, 0x80	; 128
     a5e:	31 05       	cpc	r19, r1
     a60:	79 f5       	brne	.+94     	; 0xac0 <midi_packet_length+0x84>
     a62:	15 c0       	rjmp	.+42     	; 0xa8e <midi_packet_length+0x52>
     a64:	20 3a       	cpi	r18, 0xA0	; 160
     a66:	31 05       	cpc	r19, r1
     a68:	91 f0       	breq	.+36     	; 0xa8e <midi_packet_length+0x52>
     a6a:	20 3b       	cpi	r18, 0xB0	; 176
     a6c:	31 05       	cpc	r19, r1
     a6e:	41 f5       	brne	.+80     	; 0xac0 <midi_packet_length+0x84>
     a70:	0e c0       	rjmp	.+28     	; 0xa8e <midi_packet_length+0x52>
     a72:	20 3e       	cpi	r18, 0xE0	; 224
     a74:	31 05       	cpc	r19, r1
     a76:	59 f0       	breq	.+22     	; 0xa8e <midi_packet_length+0x52>
     a78:	21 3e       	cpi	r18, 0xE1	; 225
     a7a:	31 05       	cpc	r19, r1
     a7c:	24 f4       	brge	.+8      	; 0xa86 <midi_packet_length+0x4a>
     a7e:	20 3d       	cpi	r18, 0xD0	; 208
     a80:	31 05       	cpc	r19, r1
     a82:	f1 f4       	brne	.+60     	; 0xac0 <midi_packet_length+0x84>
     a84:	1f c0       	rjmp	.+62     	; 0xac4 <midi_packet_length+0x88>
     a86:	20 3f       	cpi	r18, 0xF0	; 240
     a88:	31 05       	cpc	r19, r1
     a8a:	d1 f4       	brne	.+52     	; 0xac0 <midi_packet_length+0x84>
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
     a92:	86 3f       	cpi	r24, 0xF6	; 246
     a94:	79 f0       	breq	.+30     	; 0xab4 <midi_packet_length+0x78>
     a96:	87 3f       	cpi	r24, 0xF7	; 247
     a98:	38 f4       	brcc	.+14     	; 0xaa8 <midi_packet_length+0x6c>
     a9a:	82 3f       	cpi	r24, 0xF2	; 242
     a9c:	a9 f0       	breq	.+42     	; 0xac8 <midi_packet_length+0x8c>
     a9e:	83 3f       	cpi	r24, 0xF3	; 243
     aa0:	59 f0       	breq	.+22     	; 0xab8 <midi_packet_length+0x7c>
     aa2:	81 3f       	cpi	r24, 0xF1	; 241
     aa4:	59 f4       	brne	.+22     	; 0xabc <midi_packet_length+0x80>
     aa6:	08 c0       	rjmp	.+16     	; 0xab8 <midi_packet_length+0x7c>
     aa8:	88 3f       	cpi	r24, 0xF8	; 248
     aaa:	40 f0       	brcs	.+16     	; 0xabc <midi_packet_length+0x80>
     aac:	8d 3f       	cpi	r24, 0xFD	; 253
     aae:	10 f0       	brcs	.+4      	; 0xab4 <midi_packet_length+0x78>
     ab0:	8e 3f       	cpi	r24, 0xFE	; 254
     ab2:	20 f0       	brcs	.+8      	; 0xabc <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	08 95       	ret
         }
      default:
         return UNDEFINED;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
     ac8:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
     aca:	08 95       	ret

00000acc <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
     acc:	0f 93       	push	r16
     ace:	34 2f       	mov	r19, r20
     ad0:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
     ad2:	46 2f       	mov	r20, r22
     ad4:	4f 70       	andi	r20, 0x0F	; 15
     ad6:	40 6b       	ori	r20, 0xB0	; 176
     ad8:	23 2f       	mov	r18, r19
     ada:	2f 77       	andi	r18, 0x7F	; 127
     adc:	0f 77       	andi	r16, 0x7F	; 127
     ade:	dc 01       	movw	r26, r24
     ae0:	ed 91       	ld	r30, X+
     ae2:	fc 91       	ld	r31, X
     ae4:	63 e0       	ldi	r22, 0x03	; 3
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
     aea:	0f 91       	pop	r16
     aec:	08 95       	ret

00000aee <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     aee:	0f 93       	push	r16
     af0:	34 2f       	mov	r19, r20
     af2:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     af4:	46 2f       	mov	r20, r22
     af6:	4f 70       	andi	r20, 0x0F	; 15
     af8:	40 69       	ori	r20, 0x90	; 144
     afa:	23 2f       	mov	r18, r19
     afc:	2f 77       	andi	r18, 0x7F	; 127
     afe:	0f 77       	andi	r16, 0x7F	; 127
     b00:	dc 01       	movw	r26, r24
     b02:	ed 91       	ld	r30, X+
     b04:	fc 91       	ld	r31, X
     b06:	63 e0       	ldi	r22, 0x03	; 3
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     b0c:	0f 91       	pop	r16
     b0e:	08 95       	ret

00000b10 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     b10:	0f 93       	push	r16
     b12:	34 2f       	mov	r19, r20
     b14:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     b16:	46 2f       	mov	r20, r22
     b18:	4f 70       	andi	r20, 0x0F	; 15
     b1a:	40 68       	ori	r20, 0x80	; 128
     b1c:	23 2f       	mov	r18, r19
     b1e:	2f 77       	andi	r18, 0x7F	; 127
     b20:	0f 77       	andi	r16, 0x7F	; 127
     b22:	dc 01       	movw	r26, r24
     b24:	ed 91       	ld	r30, X+
     b26:	fc 91       	ld	r31, X
     b28:	63 e0       	ldi	r22, 0x03	; 3
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     b2e:	0f 91       	pop	r16
     b30:	08 95       	ret

00000b32 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
     b32:	0f 93       	push	r16
     b34:	34 2f       	mov	r19, r20
     b36:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
     b38:	46 2f       	mov	r20, r22
     b3a:	4f 70       	andi	r20, 0x0F	; 15
     b3c:	40 6a       	ori	r20, 0xA0	; 160
     b3e:	23 2f       	mov	r18, r19
     b40:	2f 77       	andi	r18, 0x7F	; 127
     b42:	0f 77       	andi	r16, 0x7F	; 127
     b44:	dc 01       	movw	r26, r24
     b46:	ed 91       	ld	r30, X+
     b48:	fc 91       	ld	r31, X
     b4a:	63 e0       	ldi	r22, 0x03	; 3
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
     b58:	20 e2       	ldi	r18, 0x20	; 32
     b5a:	40 30       	cpi	r20, 0x00	; 0
     b5c:	52 07       	cpc	r21, r18
     b5e:	44 f4       	brge	.+16     	; 0xb70 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
     b60:	a0 ee       	ldi	r26, 0xE0	; 224
     b62:	40 30       	cpi	r20, 0x00	; 0
     b64:	5a 07       	cpc	r21, r26
     b66:	3c f0       	brlt	.+14     	; 0xb76 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
     b68:	8a 01       	movw	r16, r20
     b6a:	00 50       	subi	r16, 0x00	; 0
     b6c:	10 4e       	sbci	r17, 0xE0	; 224
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
     b70:	0f ef       	ldi	r16, 0xFF	; 255
     b72:	1f e3       	ldi	r17, 0x3F	; 63
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
     b76:	00 e0       	ldi	r16, 0x00	; 0
     b78:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     b7a:	46 2f       	mov	r20, r22
     b7c:	4f 70       	andi	r20, 0x0F	; 15
     b7e:	40 6e       	ori	r20, 0xE0	; 224
     b80:	20 2f       	mov	r18, r16
     b82:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
     b84:	00 0f       	add	r16, r16
     b86:	01 2f       	mov	r16, r17
     b88:	00 1f       	adc	r16, r16
     b8a:	11 0b       	sbc	r17, r17
     b8c:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     b8e:	0f 77       	andi	r16, 0x7F	; 127
     b90:	dc 01       	movw	r26, r24
     b92:	ed 91       	ld	r30, X+
     b94:	fc 91       	ld	r31, X
     b96:	63 e0       	ldi	r22, 0x03	; 3
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
     ba2:	0f 93       	push	r16
     ba4:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     ba6:	46 2f       	mov	r20, r22
     ba8:	4f 70       	andi	r20, 0x0F	; 15
     baa:	40 6c       	ori	r20, 0xC0	; 192
     bac:	2f 77       	andi	r18, 0x7F	; 127
     bae:	dc 01       	movw	r26, r24
     bb0:	ed 91       	ld	r30, X+
     bb2:	fc 91       	ld	r31, X
     bb4:	62 e0       	ldi	r22, 0x02	; 2
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	00 e0       	ldi	r16, 0x00	; 0
     bba:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
     bc0:	0f 93       	push	r16
     bc2:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     bc4:	46 2f       	mov	r20, r22
     bc6:	4f 70       	andi	r20, 0x0F	; 15
     bc8:	40 6d       	ori	r20, 0xD0	; 208
     bca:	2f 77       	andi	r18, 0x7F	; 127
     bcc:	dc 01       	movw	r26, r24
     bce:	ed 91       	ld	r30, X+
     bd0:	fc 91       	ld	r31, X
     bd2:	62 e0       	ldi	r22, 0x02	; 2
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	00 e0       	ldi	r16, 0x00	; 0
     bd8:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
     bda:	0f 91       	pop	r16
     bdc:	08 95       	ret

00000bde <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
     bde:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
     be0:	dc 01       	movw	r26, r24
     be2:	ed 91       	ld	r30, X+
     be4:	fc 91       	ld	r31, X
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	48 ef       	ldi	r20, 0xF8	; 248
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	00 e0       	ldi	r16, 0x00	; 0
     bf0:	09 95       	icall
}
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret

00000bf6 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
     bf6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
     bf8:	dc 01       	movw	r26, r24
     bfa:	ed 91       	ld	r30, X+
     bfc:	fc 91       	ld	r31, X
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	49 ef       	ldi	r20, 0xF9	; 249
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	00 e0       	ldi	r16, 0x00	; 0
     c08:	09 95       	icall
}
     c0a:	0f 91       	pop	r16
     c0c:	08 95       	ret

00000c0e <midi_send_start>:

void midi_send_start(MidiDevice * device){
     c0e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
     c10:	dc 01       	movw	r26, r24
     c12:	ed 91       	ld	r30, X+
     c14:	fc 91       	ld	r31, X
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	4a ef       	ldi	r20, 0xFA	; 250
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	00 e0       	ldi	r16, 0x00	; 0
     c20:	09 95       	icall
}
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
     c26:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
     c28:	dc 01       	movw	r26, r24
     c2a:	ed 91       	ld	r30, X+
     c2c:	fc 91       	ld	r31, X
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	4b ef       	ldi	r20, 0xFB	; 251
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	00 e0       	ldi	r16, 0x00	; 0
     c38:	09 95       	icall
}
     c3a:	0f 91       	pop	r16
     c3c:	08 95       	ret

00000c3e <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
     c3e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
     c40:	dc 01       	movw	r26, r24
     c42:	ed 91       	ld	r30, X+
     c44:	fc 91       	ld	r31, X
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	4c ef       	ldi	r20, 0xFC	; 252
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	00 e0       	ldi	r16, 0x00	; 0
     c50:	09 95       	icall
}
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
     c56:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
     c58:	dc 01       	movw	r26, r24
     c5a:	ed 91       	ld	r30, X+
     c5c:	fc 91       	ld	r31, X
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	4e ef       	ldi	r20, 0xFE	; 254
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	00 e0       	ldi	r16, 0x00	; 0
     c68:	09 95       	icall
}
     c6a:	0f 91       	pop	r16
     c6c:	08 95       	ret

00000c6e <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
     c6e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
     c70:	dc 01       	movw	r26, r24
     c72:	ed 91       	ld	r30, X+
     c74:	fc 91       	ld	r31, X
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	4f ef       	ldi	r20, 0xFF	; 255
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	00 e0       	ldi	r16, 0x00	; 0
     c80:	09 95       	icall
}
     c82:	0f 91       	pop	r16
     c84:	08 95       	ret

00000c86 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
     c86:	0f 93       	push	r16
   device->send_func(device, 2,
     c88:	26 2f       	mov	r18, r22
     c8a:	2f 77       	andi	r18, 0x7F	; 127
     c8c:	dc 01       	movw	r26, r24
     c8e:	ed 91       	ld	r30, X+
     c90:	fc 91       	ld	r31, X
     c92:	62 e0       	ldi	r22, 0x02	; 2
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	41 ef       	ldi	r20, 0xF1	; 241
     c98:	00 e0       	ldi	r16, 0x00	; 0
     c9a:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
     c9c:	0f 91       	pop	r16
     c9e:	08 95       	ret

00000ca0 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
   device->send_func(device, 3,
     ca4:	26 2f       	mov	r18, r22
     ca6:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
     ca8:	8b 01       	movw	r16, r22
     caa:	00 0f       	add	r16, r16
     cac:	01 2f       	mov	r16, r17
     cae:	00 1f       	adc	r16, r16
     cb0:	11 0b       	sbc	r17, r17
     cb2:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
     cb4:	0f 77       	andi	r16, 0x7F	; 127
     cb6:	dc 01       	movw	r26, r24
     cb8:	ed 91       	ld	r30, X+
     cba:	fc 91       	ld	r31, X
     cbc:	63 e0       	ldi	r22, 0x03	; 3
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	42 ef       	ldi	r20, 0xF2	; 242
     cc2:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
     cca:	0f 93       	push	r16
   device->send_func(device, 2,
     ccc:	26 2f       	mov	r18, r22
     cce:	2f 77       	andi	r18, 0x7F	; 127
     cd0:	dc 01       	movw	r26, r24
     cd2:	ed 91       	ld	r30, X+
     cd4:	fc 91       	ld	r31, X
     cd6:	62 e0       	ldi	r22, 0x02	; 2
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	43 ef       	ldi	r20, 0xF3	; 243
     cdc:	00 e0       	ldi	r16, 0x00	; 0
     cde:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
     ce4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
     ce6:	dc 01       	movw	r26, r24
     ce8:	ed 91       	ld	r30, X+
     cea:	fc 91       	ld	r31, X
     cec:	61 e0       	ldi	r22, 0x01	; 1
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	46 ef       	ldi	r20, 0xF6	; 246
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	00 e0       	ldi	r16, 0x00	; 0
     cf6:	09 95       	icall
}
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
     cfc:	0f 93       	push	r16
     cfe:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
     d00:	dc 01       	movw	r26, r24
     d02:	ed 91       	ld	r30, X+
     d04:	fc 91       	ld	r31, X
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	00 e0       	ldi	r16, 0x00	; 0
     d0e:	09 95       	icall
}
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
     d14:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
     d16:	dc 01       	movw	r26, r24
     d18:	ed 91       	ld	r30, X+
     d1a:	fc 91       	ld	r31, X
     d1c:	09 95       	icall
}
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
     d22:	6f 92       	push	r6
     d24:	7f 92       	push	r7
     d26:	8f 92       	push	r8
     d28:	9f 92       	push	r9
     d2a:	af 92       	push	r10
     d2c:	bf 92       	push	r11
     d2e:	cf 92       	push	r12
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <midi_send_array+0x1e>
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	4c 01       	movw	r8, r24
     d48:	6b 01       	movw	r12, r22
     d4a:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
     d4c:	61 15       	cp	r22, r1
     d4e:	71 05       	cpc	r23, r1
     d50:	41 f1       	breq	.+80     	; 0xda2 <midi_send_array+0x80>
     d52:	ee 24       	eor	r14, r14
     d54:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
     d56:	0f 2e       	mov	r0, r31
     d58:	f3 e0       	ldi	r31, 0x03	; 3
     d5a:	6f 2e       	mov	r6, r31
     d5c:	77 24       	eor	r7, r7
     d5e:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
     d60:	19 82       	std	Y+1, r1	; 0x01
     d62:	1a 82       	std	Y+2, r1	; 0x02
     d64:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
     d66:	86 01       	movw	r16, r12
     d68:	0e 19       	sub	r16, r14
     d6a:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
     d6c:	04 30       	cpi	r16, 0x04	; 4
     d6e:	11 05       	cpc	r17, r1
     d70:	08 f0       	brcs	.+2      	; 0xd74 <midi_send_array+0x52>
     d72:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
     d74:	b5 01       	movw	r22, r10
     d76:	6e 0d       	add	r22, r14
     d78:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	40 2f       	mov	r20, r16
     d80:	51 2f       	mov	r21, r17
     d82:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
     d86:	c4 01       	movw	r24, r8
     d88:	b8 01       	movw	r22, r16
     d8a:	49 81       	ldd	r20, Y+1	; 0x01
     d8c:	2a 81       	ldd	r18, Y+2	; 0x02
     d8e:	0b 81       	ldd	r16, Y+3	; 0x03
     d90:	0e 94 8a 06 	call	0xd14	; 0xd14 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	e8 0e       	add	r14, r24
     d9a:	f9 1e       	adc	r15, r25
     d9c:	ec 14       	cp	r14, r12
     d9e:	fd 04       	cpc	r15, r13
     da0:	f8 f2       	brcs	.-66     	; 0xd60 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	bf 90       	pop	r11
     dba:	af 90       	pop	r10
     dbc:	9f 90       	pop	r9
     dbe:	8f 90       	pop	r8
     dc0:	7f 90       	pop	r7
     dc2:	6f 90       	pop	r6
     dc4:	08 95       	ret

00000dc6 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
     dc6:	fc 01       	movw	r30, r24
     dc8:	73 83       	std	Z+3, r23	; 0x03
     dca:	62 83       	std	Z+2, r22	; 0x02
}
     dcc:	08 95       	ret

00000dce <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
     dce:	fc 01       	movw	r30, r24
     dd0:	75 83       	std	Z+5, r23	; 0x05
     dd2:	64 83       	std	Z+4, r22	; 0x04
}
     dd4:	08 95       	ret

00000dd6 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
     dd6:	fc 01       	movw	r30, r24
     dd8:	77 83       	std	Z+7, r23	; 0x07
     dda:	66 83       	std	Z+6, r22	; 0x06
}
     ddc:	08 95       	ret

00000dde <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
     dde:	fc 01       	movw	r30, r24
     de0:	71 87       	std	Z+9, r23	; 0x09
     de2:	60 87       	std	Z+8, r22	; 0x08
}
     de4:	08 95       	ret

00000de6 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
     de6:	fc 01       	movw	r30, r24
     de8:	73 87       	std	Z+11, r23	; 0x0b
     dea:	62 87       	std	Z+10, r22	; 0x0a
}
     dec:	08 95       	ret

00000dee <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
     dee:	fc 01       	movw	r30, r24
     df0:	75 87       	std	Z+13, r23	; 0x0d
     df2:	64 87       	std	Z+12, r22	; 0x0c
}
     df4:	08 95       	ret

00000df6 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
     df6:	fc 01       	movw	r30, r24
     df8:	77 87       	std	Z+15, r23	; 0x0f
     dfa:	66 87       	std	Z+14, r22	; 0x0e
}
     dfc:	08 95       	ret

00000dfe <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
     dfe:	fc 01       	movw	r30, r24
     e00:	71 8b       	std	Z+17, r23	; 0x11
     e02:	60 8b       	std	Z+16, r22	; 0x10
}
     e04:	08 95       	ret

00000e06 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
     e06:	fc 01       	movw	r30, r24
     e08:	73 8b       	std	Z+19, r23	; 0x13
     e0a:	62 8b       	std	Z+18, r22	; 0x12
}
     e0c:	08 95       	ret

00000e0e <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
     e0e:	fc 01       	movw	r30, r24
     e10:	75 8b       	std	Z+21, r23	; 0x15
     e12:	64 8b       	std	Z+20, r22	; 0x14
}
     e14:	08 95       	ret

00000e16 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
     e16:	fc 01       	movw	r30, r24
     e18:	77 8b       	std	Z+23, r23	; 0x17
     e1a:	66 8b       	std	Z+22, r22	; 0x16
}
     e1c:	08 95       	ret

00000e1e <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
     e1e:	fc 01       	movw	r30, r24
     e20:	71 8f       	std	Z+25, r23	; 0x19
     e22:	60 8f       	std	Z+24, r22	; 0x18
}
     e24:	08 95       	ret

00000e26 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
     e26:	fc 01       	movw	r30, r24
     e28:	73 8f       	std	Z+27, r23	; 0x1b
     e2a:	62 8f       	std	Z+26, r22	; 0x1a
}
     e2c:	08 95       	ret

00000e2e <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
     e2e:	fc 01       	movw	r30, r24
     e30:	75 8f       	std	Z+29, r23	; 0x1d
     e32:	64 8f       	std	Z+28, r22	; 0x1c
}
     e34:	08 95       	ret

00000e36 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
     e36:	fc 01       	movw	r30, r24
     e38:	77 8f       	std	Z+31, r23	; 0x1f
     e3a:	66 8f       	std	Z+30, r22	; 0x1e
}
     e3c:	08 95       	ret

00000e3e <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
     e44:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
     e46:	1f a2       	lds	r17, 0x9f
     e48:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
     e4a:	bc 01       	movw	r22, r24
     e4c:	68 5d       	subi	r22, 0xD8	; 216
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	88 51       	subi	r24, 0x18	; 24
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	40 ec       	ldi	r20, 0xC0	; 192
     e56:	0e 94 99 04 	call	0x932	; 0x932 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
     e5a:	1b 82       	std	Y+3, r1	; 0x03
     e5c:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
     e5e:	1d 82       	std	Y+5, r1	; 0x05
     e60:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
     e62:	1f 82       	std	Y+7, r1	; 0x07
     e64:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
     e66:	19 86       	std	Y+9, r1	; 0x09
     e68:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
     e6a:	1b 86       	std	Y+11, r1	; 0x0b
     e6c:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
     e6e:	1d 86       	std	Y+13, r1	; 0x0d
     e70:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
     e72:	1f 86       	std	Y+15, r1	; 0x0f
     e74:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
     e76:	19 8a       	std	Y+17, r1	; 0x11
     e78:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
     e7a:	1b 8a       	std	Y+19, r1	; 0x13
     e7c:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
     e7e:	1d 8a       	std	Y+21, r1	; 0x15
     e80:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
     e82:	1f 8a       	std	Y+23, r1	; 0x17
     e84:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
     e86:	19 8e       	std	Y+25, r1	; 0x19
     e88:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
     e8a:	1b 8e       	std	Y+27, r1	; 0x1b
     e8c:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
     e8e:	1d 8e       	std	Y+29, r1	; 0x1d
     e90:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
     e92:	1f 8e       	std	Y+31, r1	; 0x1f
     e94:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
     e96:	19 a2       	lds	r17, 0x99
     e98:	18 a2       	lds	r17, 0x98
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
     eae:	66 23       	and	r22, r22
     eb0:	99 f0       	breq	.+38     	; 0xed8 <midi_device_input+0x38>
     eb2:	04 2f       	mov	r16, r20
     eb4:	15 2f       	mov	r17, r21
     eb6:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
     eb8:	0f 2e       	mov	r0, r31
     eba:	f8 ee       	ldi	r31, 0xE8	; 232
     ebc:	ef 2e       	mov	r14, r31
     ebe:	ff 24       	eor	r15, r15
     ec0:	f0 2d       	mov	r31, r0
     ec2:	e8 0e       	add	r14, r24
     ec4:	f9 1e       	adc	r15, r25
     ec6:	f8 01       	movw	r30, r16
     ec8:	61 91       	ld	r22, Z+
     eca:	8f 01       	movw	r16, r30
     ecc:	c7 01       	movw	r24, r14
     ece:	0e 94 a0 04 	call	0x940	; 0x940 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
     ed2:	cf 5f       	subi	r28, 0xFF	; 255
     ed4:	cd 17       	cp	r28, r29
     ed6:	b9 f7       	brne	.-18     	; 0xec6 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	08 95       	ret

00000ee6 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
     ee6:	fc 01       	movw	r30, r24
     ee8:	71 83       	std	Z+1, r23	; 0x01
     eea:	60 83       	st	Z, r22
}
     eec:	08 95       	ret

00000eee <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
     eee:	fc 01       	movw	r30, r24
     ef0:	71 a3       	lds	r23, 0x51
     ef2:	60 a3       	lds	r22, 0x50
}
     ef4:	08 95       	ret

00000ef6 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
     ef6:	af 92       	push	r10
     ef8:	bf 92       	push	r11
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <midi_input_callbacks+0x16>
     f0c:	0f 92       	push	r0
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	6c 01       	movw	r12, r24
     f14:	5b 01       	movw	r10, r22
     f16:	f4 2e       	mov	r15, r20
     f18:	e2 2e       	mov	r14, r18
     f1a:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
     f1c:	dc 01       	movw	r26, r24
     f1e:	95 96       	adiw	r26, 0x25	; 37
     f20:	8c 91       	ld	r24, X
     f22:	95 97       	sbiw	r26, 0x25	; 37
     f24:	84 30       	cpi	r24, 0x04	; 4
     f26:	e9 f4       	brne	.+58     	; 0xf62 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
     f28:	5a 96       	adiw	r26, 0x1a	; 26
     f2a:	ed 91       	ld	r30, X+
     f2c:	fc 91       	ld	r31, X
     f2e:	5b 97       	sbiw	r26, 0x1b	; 27
     f30:	30 97       	sbiw	r30, 0x00	; 0
     f32:	09 f4       	brne	.+2      	; 0xf36 <midi_input_callbacks+0x40>
     f34:	ee c0       	rjmp	.+476    	; 0x1112 <__stack+0x13>
      const uint16_t start = ((cnt - 1) / 3) * 3;
     f36:	cb 01       	movw	r24, r22
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	63 e0       	ldi	r22, 0x03	; 3
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     f42:	cb 01       	movw	r24, r22
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	68 0f       	add	r22, r24
     f4a:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
     f4c:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
     f4e:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
     f50:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
     f52:	4a 2d       	mov	r20, r10
     f54:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
     f56:	c6 01       	movw	r24, r12
     f58:	9e 01       	movw	r18, r28
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	09 95       	icall
     f60:	c8 c0       	rjmp	.+400    	; 0x10f2 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
     f62:	62 30       	cpi	r22, 0x02	; 2
     f64:	71 05       	cpc	r23, r1
     f66:	09 f4       	brne	.+2      	; 0xf6a <midi_input_callbacks+0x74>
     f68:	5f c0       	rjmp	.+190    	; 0x1028 <midi_input_callbacks+0x132>
     f6a:	63 30       	cpi	r22, 0x03	; 3
     f6c:	71 05       	cpc	r23, r1
     f6e:	29 f0       	breq	.+10     	; 0xf7a <midi_input_callbacks+0x84>
     f70:	61 30       	cpi	r22, 0x01	; 1
     f72:	71 05       	cpc	r23, r1
     f74:	09 f0       	breq	.+2      	; 0xf78 <midi_input_callbacks+0x82>
     f76:	b3 c0       	rjmp	.+358    	; 0x10de <midi_input_callbacks+0x1e8>
     f78:	99 c0       	rjmp	.+306    	; 0x10ac <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     f7a:	84 2f       	mov	r24, r20
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	80 7f       	andi	r24, 0xF0	; 240
     f80:	90 70       	andi	r25, 0x00	; 0
     f82:	80 3a       	cpi	r24, 0xA0	; 160
     f84:	91 05       	cpc	r25, r1
     f86:	29 f1       	breq	.+74     	; 0xfd2 <midi_input_callbacks+0xdc>
     f88:	81 3a       	cpi	r24, 0xA1	; 161
     f8a:	91 05       	cpc	r25, r1
     f8c:	3c f4       	brge	.+14     	; 0xf9c <midi_input_callbacks+0xa6>
     f8e:	80 38       	cpi	r24, 0x80	; 128
     f90:	91 05       	cpc	r25, r1
     f92:	c9 f0       	breq	.+50     	; 0xfc6 <midi_input_callbacks+0xd0>
     f94:	80 39       	cpi	r24, 0x90	; 144
     f96:	91 05       	cpc	r25, r1
     f98:	91 f5       	brne	.+100    	; 0xffe <midi_input_callbacks+0x108>
     f9a:	0f c0       	rjmp	.+30     	; 0xfba <midi_input_callbacks+0xc4>
     f9c:	80 3e       	cpi	r24, 0xE0	; 224
     f9e:	91 05       	cpc	r25, r1
     fa0:	f1 f0       	breq	.+60     	; 0xfde <midi_input_callbacks+0xe8>
     fa2:	80 3f       	cpi	r24, 0xF0	; 240
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f1       	breq	.+66     	; 0xfea <midi_input_callbacks+0xf4>
     fa8:	80 3b       	cpi	r24, 0xB0	; 176
     faa:	91 05       	cpc	r25, r1
     fac:	41 f5       	brne	.+80     	; 0xffe <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
     fae:	d6 01       	movw	r26, r12
     fb0:	12 96       	adiw	r26, 0x02	; 2
     fb2:	ed 91       	ld	r30, X+
     fb4:	fc 91       	ld	r31, X
     fb6:	13 97       	sbiw	r26, 0x03	; 3
              break;
     fb8:	24 c0       	rjmp	.+72     	; 0x1002 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
     fba:	d6 01       	movw	r26, r12
     fbc:	14 96       	adiw	r26, 0x04	; 4
     fbe:	ed 91       	ld	r30, X+
     fc0:	fc 91       	ld	r31, X
     fc2:	15 97       	sbiw	r26, 0x05	; 5
              break;
     fc4:	1e c0       	rjmp	.+60     	; 0x1002 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
     fc6:	d6 01       	movw	r26, r12
     fc8:	16 96       	adiw	r26, 0x06	; 6
     fca:	ed 91       	ld	r30, X+
     fcc:	fc 91       	ld	r31, X
     fce:	17 97       	sbiw	r26, 0x07	; 7
              break;
     fd0:	18 c0       	rjmp	.+48     	; 0x1002 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
     fd2:	d6 01       	movw	r26, r12
     fd4:	18 96       	adiw	r26, 0x08	; 8
     fd6:	ed 91       	ld	r30, X+
     fd8:	fc 91       	ld	r31, X
     fda:	19 97       	sbiw	r26, 0x09	; 9
              break;
     fdc:	12 c0       	rjmp	.+36     	; 0x1002 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
     fde:	d6 01       	movw	r26, r12
     fe0:	1a 96       	adiw	r26, 0x0a	; 10
     fe2:	ed 91       	ld	r30, X+
     fe4:	fc 91       	ld	r31, X
     fe6:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
     fe8:	0c c0       	rjmp	.+24     	; 0x1002 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
     fea:	b2 ef       	ldi	r27, 0xF2	; 242
     fec:	4b 17       	cp	r20, r27
     fee:	09 f0       	breq	.+2      	; 0xff2 <midi_input_callbacks+0xfc>
     ff0:	90 c0       	rjmp	.+288    	; 0x1112 <__stack+0x13>
                func = device->input_songposition_callback;
     ff2:	d6 01       	movw	r26, r12
     ff4:	1c 96       	adiw	r26, 0x0c	; 12
     ff6:	ed 91       	ld	r30, X+
     ff8:	fc 91       	ld	r31, X
     ffa:	1d 97       	sbiw	r26, 0x0d	; 13
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
     ffe:	e0 e0       	ldi	r30, 0x00	; 0
    1000:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1002:	30 97       	sbiw	r30, 0x00	; 0
    1004:	09 f4       	brne	.+2      	; 0x1008 <midi_input_callbacks+0x112>
    1006:	85 c0       	rjmp	.+266    	; 0x1112 <__stack+0x13>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1008:	b2 ef       	ldi	r27, 0xF2	; 242
    100a:	fb 16       	cp	r15, r27
    100c:	31 f4       	brne	.+12     	; 0x101a <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    100e:	c6 01       	movw	r24, r12
    1010:	62 ef       	ldi	r22, 0xF2	; 242
    1012:	4e 2d       	mov	r20, r14
    1014:	21 2f       	mov	r18, r17
    1016:	09 95       	icall
    1018:	6c c0       	rjmp	.+216    	; 0x10f2 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    101a:	6f 2d       	mov	r22, r15
    101c:	6f 70       	andi	r22, 0x0F	; 15
    101e:	c6 01       	movw	r24, r12
    1020:	4e 2d       	mov	r20, r14
    1022:	21 2f       	mov	r18, r17
    1024:	09 95       	icall
    1026:	65 c0       	rjmp	.+202    	; 0x10f2 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1028:	84 2f       	mov	r24, r20
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	80 7f       	andi	r24, 0xF0	; 240
    102e:	90 70       	andi	r25, 0x00	; 0
    1030:	80 3d       	cpi	r24, 0xD0	; 208
    1032:	91 05       	cpc	r25, r1
    1034:	61 f0       	breq	.+24     	; 0x104e <midi_input_callbacks+0x158>
    1036:	80 3f       	cpi	r24, 0xF0	; 240
    1038:	91 05       	cpc	r25, r1
    103a:	79 f0       	breq	.+30     	; 0x105a <midi_input_callbacks+0x164>
    103c:	80 3c       	cpi	r24, 0xC0	; 192
    103e:	91 05       	cpc	r25, r1
    1040:	f9 f4       	brne	.+62     	; 0x1080 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1042:	d6 01       	movw	r26, r12
    1044:	1e 96       	adiw	r26, 0x0e	; 14
    1046:	ed 91       	ld	r30, X+
    1048:	fc 91       	ld	r31, X
    104a:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    104c:	1b c0       	rjmp	.+54     	; 0x1084 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    104e:	d6 01       	movw	r26, r12
    1050:	50 96       	adiw	r26, 0x10	; 16
    1052:	ed 91       	ld	r30, X+
    1054:	fc 91       	ld	r31, X
    1056:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1058:	15 c0       	rjmp	.+42     	; 0x1084 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    105a:	b3 ef       	ldi	r27, 0xF3	; 243
    105c:	4b 17       	cp	r20, r27
    105e:	31 f4       	brne	.+12     	; 0x106c <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    1060:	d6 01       	movw	r26, r12
    1062:	52 96       	adiw	r26, 0x12	; 18
    1064:	ed 91       	ld	r30, X+
    1066:	fc 91       	ld	r31, X
    1068:	53 97       	sbiw	r26, 0x13	; 19
    106a:	0c c0       	rjmp	.+24     	; 0x1084 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    106c:	b1 ef       	ldi	r27, 0xF1	; 241
    106e:	4b 17       	cp	r20, r27
    1070:	09 f0       	breq	.+2      	; 0x1074 <midi_input_callbacks+0x17e>
    1072:	4f c0       	rjmp	.+158    	; 0x1112 <__stack+0x13>
                func = device->input_tc_quarterframe_callback;
    1074:	d6 01       	movw	r26, r12
    1076:	54 96       	adiw	r26, 0x14	; 20
    1078:	ed 91       	ld	r30, X+
    107a:	fc 91       	ld	r31, X
    107c:	55 97       	sbiw	r26, 0x15	; 21
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1080:	e0 e0       	ldi	r30, 0x00	; 0
    1082:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1084:	30 97       	sbiw	r30, 0x00	; 0
    1086:	09 f4       	brne	.+2      	; 0x108a <midi_input_callbacks+0x194>
    1088:	44 c0       	rjmp	.+136    	; 0x1112 <__stack+0x13>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    108a:	b3 ef       	ldi	r27, 0xF3	; 243
    108c:	fb 16       	cp	r15, r27
    108e:	19 f0       	breq	.+6      	; 0x1096 <midi_input_callbacks+0x1a0>
    1090:	81 ef       	ldi	r24, 0xF1	; 241
    1092:	f8 16       	cp	r15, r24
    1094:	29 f4       	brne	.+10     	; 0x10a0 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1096:	c6 01       	movw	r24, r12
    1098:	6f 2d       	mov	r22, r15
    109a:	4e 2d       	mov	r20, r14
    109c:	09 95       	icall
    109e:	29 c0       	rjmp	.+82     	; 0x10f2 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    10a0:	6f 2d       	mov	r22, r15
    10a2:	6f 70       	andi	r22, 0x0F	; 15
    10a4:	c6 01       	movw	r24, r12
    10a6:	4e 2d       	mov	r20, r14
    10a8:	09 95       	icall
    10aa:	23 c0       	rjmp	.+70     	; 0x10f2 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    10ac:	84 2f       	mov	r24, r20
    10ae:	0e 94 18 05 	call	0xa30	; 0xa30 <midi_is_realtime>
    10b2:	88 23       	and	r24, r24
    10b4:	31 f0       	breq	.+12     	; 0x10c2 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    10b6:	d6 01       	movw	r26, r12
    10b8:	56 96       	adiw	r26, 0x16	; 22
    10ba:	ed 91       	ld	r30, X+
    10bc:	fc 91       	ld	r31, X
    10be:	57 97       	sbiw	r26, 0x17	; 23
    10c0:	08 c0       	rjmp	.+16     	; 0x10d2 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    10c2:	b6 ef       	ldi	r27, 0xF6	; 246
    10c4:	fb 16       	cp	r15, r27
    10c6:	29 f5       	brne	.+74     	; 0x1112 <__stack+0x13>
            func = device->input_tunerequest_callback;
    10c8:	d6 01       	movw	r26, r12
    10ca:	58 96       	adiw	r26, 0x18	; 24
    10cc:	ed 91       	ld	r30, X+
    10ce:	fc 91       	ld	r31, X
    10d0:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    10d2:	30 97       	sbiw	r30, 0x00	; 0
    10d4:	f1 f0       	breq	.+60     	; 0x1112 <__stack+0x13>
            func(device, byte0);
    10d6:	c6 01       	movw	r24, r12
    10d8:	6f 2d       	mov	r22, r15
    10da:	09 95       	icall
    10dc:	0a c0       	rjmp	.+20     	; 0x10f2 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    10de:	64 30       	cpi	r22, 0x04	; 4
    10e0:	71 05       	cpc	r23, r1
    10e2:	a8 f4       	brcc	.+42     	; 0x110e <__stack+0xf>
    10e4:	16 c0       	rjmp	.+44     	; 0x1112 <__stack+0x13>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    10e6:	c6 01       	movw	r24, r12
    10e8:	b5 01       	movw	r22, r10
    10ea:	4f 2d       	mov	r20, r15
    10ec:	2e 2d       	mov	r18, r14
    10ee:	01 2f       	mov	r16, r17
    10f0:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    10f2:	d6 01       	movw	r26, r12
    10f4:	5e 96       	adiw	r26, 0x1e	; 30
    10f6:	ed 91       	ld	r30, X+
    10f8:	fc 91       	ld	r31, X
    10fa:	5f 97       	sbiw	r26, 0x1f	; 31
    10fc:	30 97       	sbiw	r30, 0x00	; 0
    10fe:	89 f0       	breq	.+34     	; 0x1122 <__stack+0x23>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1100:	c6 01       	movw	r24, r12
    1102:	b5 01       	movw	r22, r10
    1104:	4f 2d       	mov	r20, r15
    1106:	2e 2d       	mov	r18, r14
    1108:	01 2f       	mov	r16, r17
    110a:	09 95       	icall
    110c:	0a c0       	rjmp	.+20     	; 0x1122 <__stack+0x23>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    110e:	aa 24       	eor	r10, r10
    1110:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1112:	d6 01       	movw	r26, r12
    1114:	5c 96       	adiw	r26, 0x1c	; 28
    1116:	ed 91       	ld	r30, X+
    1118:	fc 91       	ld	r31, X
    111a:	5d 97       	sbiw	r26, 0x1d	; 29
    111c:	30 97       	sbiw	r30, 0x00	; 0
    111e:	19 f7       	brne	.-58     	; 0x10e6 <midi_input_callbacks+0x1f0>
    1120:	e8 cf       	rjmp	.-48     	; 0x10f2 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	08 95       	ret

0000113e <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	7c 01       	movw	r14, r24
    114a:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    114c:	86 2f       	mov	r24, r22
    114e:	0e 94 18 05 	call	0xa30	; 0xa30 <midi_is_realtime>
    1152:	88 23       	and	r24, r24
    1154:	91 f0       	breq	.+36     	; 0x117a <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1156:	d7 01       	movw	r26, r14
    1158:	95 96       	adiw	r26, 0x25	; 37
    115a:	dc 91       	ld	r29, X
    115c:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	95 96       	adiw	r26, 0x25	; 37
    1162:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    1164:	c7 01       	movw	r24, r14
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	4c 2f       	mov	r20, r28
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	00 e0       	ldi	r16, 0x00	; 0
    1170:	0e 94 7b 07 	call	0xef6	; 0xef6 <midi_input_callbacks>
    device->input_state = state;
    1174:	f7 01       	movw	r30, r14
    1176:	d5 a3       	lds	r29, 0x55
    1178:	b7 c0       	rjmp	.+366    	; 0x12e8 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    117a:	8c 2f       	mov	r24, r28
    117c:	0e 94 14 05 	call	0xa28	; 0xa28 <midi_is_statusbyte>
    1180:	88 23       	and	r24, r24
    1182:	09 f4       	brne	.+2      	; 0x1186 <midi_process_byte+0x48>
    1184:	73 c0       	rjmp	.+230    	; 0x126c <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1186:	d7 01       	movw	r26, r14
    1188:	95 96       	adiw	r26, 0x25	; 37
    118a:	8c 91       	ld	r24, X
    118c:	95 97       	sbiw	r26, 0x25	; 37
    118e:	84 30       	cpi	r24, 0x04	; 4
    1190:	49 f0       	breq	.+18     	; 0x11a4 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    1192:	92 96       	adiw	r26, 0x22	; 34
    1194:	cc 93       	st	X, r28
    1196:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	97 96       	adiw	r26, 0x27	; 39
    119e:	9c 93       	st	X, r25
    11a0:	8e 93       	st	-X, r24
    11a2:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    11a4:	8c 2f       	mov	r24, r28
    11a6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <midi_packet_length>
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	41 f0       	breq	.+16     	; 0x11be <midi_process_byte+0x80>
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	00 f1       	brcs	.+64     	; 0x11f2 <midi_process_byte+0xb4>
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	a1 f0       	breq	.+40     	; 0x11de <midi_process_byte+0xa0>
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	09 f0       	breq	.+2      	; 0x11bc <midi_process_byte+0x7e>
    11ba:	4f c0       	rjmp	.+158    	; 0x125a <midi_process_byte+0x11c>
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	f7 01       	movw	r30, r14
    11c2:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    11c4:	c7 01       	movw	r24, r14
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	4c 2f       	mov	r20, r28
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	00 e0       	ldi	r16, 0x00	; 0
    11d0:	0e 94 7b 07 	call	0xef6	; 0xef6 <midi_input_callbacks>
        device->input_state = IDLE;
    11d4:	d7 01       	movw	r26, r14
    11d6:	95 96       	adiw	r26, 0x25	; 37
    11d8:	1c 92       	st	X, r1
    11da:	95 97       	sbiw	r26, 0x25	; 37
        break;
    11dc:	85 c0       	rjmp	.+266    	; 0x12e8 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	f7 01       	movw	r30, r14
    11e2:	85 a3       	lds	r24, 0x55
        break;
    11e4:	81 c0       	rjmp	.+258    	; 0x12e8 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	d7 01       	movw	r26, r14
    11ea:	95 96       	adiw	r26, 0x25	; 37
    11ec:	8c 93       	st	X, r24
    11ee:	95 97       	sbiw	r26, 0x25	; 37
        break;
    11f0:	7b c0       	rjmp	.+246    	; 0x12e8 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    11f2:	c0 3f       	cpi	r28, 0xF0	; 240
    11f4:	19 f0       	breq	.+6      	; 0x11fc <midi_process_byte+0xbe>
    11f6:	c7 3f       	cpi	r28, 0xF7	; 247
    11f8:	59 f5       	brne	.+86     	; 0x1250 <midi_process_byte+0x112>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    11fc:	84 e0       	ldi	r24, 0x04	; 4
    11fe:	f7 01       	movw	r30, r14
    1200:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    1202:	80 ef       	ldi	r24, 0xF0	; 240
    1204:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	97 a3       	lds	r25, 0x57
    120c:	86 a3       	lds	r24, 0x56
            break;
    120e:	6c c0       	rjmp	.+216    	; 0x12e8 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1210:	d7 01       	movw	r26, r14
    1212:	96 96       	adiw	r26, 0x26	; 38
    1214:	2d 91       	ld	r18, X+
    1216:	3c 91       	ld	r19, X
    1218:	97 97       	sbiw	r26, 0x27	; 39
    121a:	c9 01       	movw	r24, r18
    121c:	63 e0       	ldi	r22, 0x03	; 3
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
    1224:	f7 01       	movw	r30, r14
    1226:	e8 0f       	add	r30, r24
    1228:	f9 1f       	adc	r31, r25
    122a:	87 ef       	ldi	r24, 0xF7	; 247
    122c:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    122e:	b9 01       	movw	r22, r18
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	f7 01       	movw	r30, r14
    1236:	77 a3       	lds	r23, 0x57
    1238:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    123a:	c7 01       	movw	r24, r14
    123c:	42 a1       	lds	r20, 0x42
    123e:	23 a1       	lds	r18, 0x43
    1240:	04 a1       	lds	r16, 0x44
    1242:	0e 94 7b 07 	call	0xef6	; 0xef6 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1246:	d7 01       	movw	r26, r14
    1248:	95 96       	adiw	r26, 0x25	; 37
    124a:	1c 92       	st	X, r1
    124c:	95 97       	sbiw	r26, 0x25	; 37
            break;
    124e:	4c c0       	rjmp	.+152    	; 0x12e8 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    1250:	f7 01       	movw	r30, r14
    1252:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    1254:	17 a2       	lds	r17, 0x97
    1256:	16 a2       	lds	r17, 0x96
    1258:	47 c0       	rjmp	.+142    	; 0x12e8 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    125a:	d7 01       	movw	r26, r14
    125c:	95 96       	adiw	r26, 0x25	; 37
    125e:	1c 92       	st	X, r1
    1260:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    1262:	97 96       	adiw	r26, 0x27	; 39
    1264:	1c 92       	st	X, r1
    1266:	1e 92       	st	-X, r1
    1268:	96 97       	sbiw	r26, 0x26	; 38
        break;
    126a:	3e c0       	rjmp	.+124    	; 0x12e8 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    126c:	f7 01       	movw	r30, r14
    126e:	25 a1       	lds	r18, 0x45
    1270:	22 23       	and	r18, r18
    1272:	d1 f1       	breq	.+116    	; 0x12e8 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1274:	06 a0       	lds	r16, 0x86
    1276:	f7 a1       	lds	r31, 0x47
    1278:	e0 2d       	mov	r30, r0
    127a:	cf 01       	movw	r24, r30
    127c:	63 e0       	ldi	r22, 0x03	; 3
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
    1284:	ac 01       	movw	r20, r24
    1286:	8e 0d       	add	r24, r14
    1288:	9f 1d       	adc	r25, r15
    128a:	dc 01       	movw	r26, r24
    128c:	92 96       	adiw	r26, 0x22	; 34
    128e:	cc 93       	st	X, r28
    1290:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1292:	bf 01       	movw	r22, r30
    1294:	6f 5f       	subi	r22, 0xFF	; 255
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	f7 01       	movw	r30, r14
    129a:	77 a3       	lds	r23, 0x57
    129c:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    129e:	41 30       	cpi	r20, 0x01	; 1
    12a0:	51 05       	cpc	r21, r1
    12a2:	91 f0       	breq	.+36     	; 0x12c8 <midi_process_byte+0x18a>
    12a4:	42 30       	cpi	r20, 0x02	; 2
    12a6:	51 05       	cpc	r21, r1
    12a8:	f9 f4       	brne	.+62     	; 0x12e8 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    12aa:	c7 01       	movw	r24, r14
    12ac:	42 a1       	lds	r20, 0x42
    12ae:	23 a1       	lds	r18, 0x43
    12b0:	04 a1       	lds	r16, 0x44
    12b2:	0e 94 7b 07 	call	0xef6	; 0xef6 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    12b6:	f7 01       	movw	r30, r14
    12b8:	85 a1       	lds	r24, 0x45
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	a9 f0       	breq	.+42     	; 0x12e8 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	97 a3       	lds	r25, 0x57
    12c4:	86 a3       	lds	r24, 0x56
    12c6:	10 c0       	rjmp	.+32     	; 0x12e8 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    12c8:	22 30       	cpi	r18, 0x02	; 2
    12ca:	71 f4       	brne	.+28     	; 0x12e8 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    12cc:	c7 01       	movw	r24, r14
    12ce:	42 a1       	lds	r20, 0x42
    12d0:	23 a1       	lds	r18, 0x43
    12d2:	00 e0       	ldi	r16, 0x00	; 0
    12d4:	0e 94 7b 07 	call	0xef6	; 0xef6 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    12d8:	f7 01       	movw	r30, r14
    12da:	85 a1       	lds	r24, 0x45
    12dc:	84 30       	cpi	r24, 0x04	; 4
    12de:	21 f0       	breq	.+8      	; 0x12e8 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	97 a3       	lds	r25, 0x57
    12e6:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	08 95       	ret

000012f4 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1306:	dc 01       	movw	r26, r24
    1308:	90 96       	adiw	r26, 0x20	; 32
    130a:	ed 91       	ld	r30, X+
    130c:	fc 91       	ld	r31, X
    130e:	91 97       	sbiw	r26, 0x21	; 33
    1310:	30 97       	sbiw	r30, 0x00	; 0
    1312:	09 f0       	breq	.+2      	; 0x1316 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1314:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1316:	0f 2e       	mov	r0, r31
    1318:	f8 ee       	ldi	r31, 0xE8	; 232
    131a:	ef 2e       	mov	r14, r31
    131c:	ff 24       	eor	r15, r15
    131e:	f0 2d       	mov	r31, r0
    1320:	ec 0c       	add	r14, r12
    1322:	fd 1c       	adc	r15, r13
    1324:	c7 01       	movw	r24, r14
    1326:	0e 94 cf 04 	call	0x99e	; 0x99e <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    132a:	c8 2f       	mov	r28, r24
    132c:	d0 e0       	ldi	r29, 0x00	; 0
    132e:	20 97       	sbiw	r28, 0x00	; 0
    1330:	99 f0       	breq	.+38     	; 0x1358 <midi_device_process+0x64>
    1332:	00 e0       	ldi	r16, 0x00	; 0
    1334:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1336:	c7 01       	movw	r24, r14
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <bytequeue_get>
    133e:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1340:	c6 01       	movw	r24, r12
    1342:	0e 94 9f 08 	call	0x113e	; 0x113e <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1346:	c7 01       	movw	r24, r14
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    134e:	0f 5f       	subi	r16, 0xFF	; 255
    1350:	1f 4f       	sbci	r17, 0xFF	; 255
    1352:	0c 17       	cp	r16, r28
    1354:	1d 07       	cpc	r17, r29
    1356:	78 f3       	brcs	.-34     	; 0x1336 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	08 95       	ret

0000136a <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    136a:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    136c:	67 e0       	ldi	r22, 0x07	; 7
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
    1374:	48 2f       	mov	r20, r24
   if (remainder)
    1376:	88 23       	and	r24, r24
    1378:	81 f0       	breq	.+32     	; 0x139a <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    137a:	c9 01       	movw	r24, r18
    137c:	67 e0       	ldi	r22, 0x07	; 7
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
    1384:	cb 01       	movw	r24, r22
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	84 0f       	add	r24, r20
    1396:	91 1d       	adc	r25, r1
    1398:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    139a:	c9 01       	movw	r24, r18
    139c:	67 e0       	ldi	r22, 0x07	; 7
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
    13a4:	cb 01       	movw	r24, r22
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
}
    13b2:	08 95       	ret

000013b4 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    13b4:	48 2f       	mov	r20, r24
    13b6:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    13b8:	a1 f0       	breq	.+40     	; 0x13e2 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    13ba:	9c 01       	movw	r18, r24
    13bc:	36 95       	lsr	r19
    13be:	27 95       	ror	r18
    13c0:	36 95       	lsr	r19
    13c2:	27 95       	ror	r18
    13c4:	36 95       	lsr	r19
    13c6:	27 95       	ror	r18
    13c8:	c9 01       	movw	r24, r18
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	82 1b       	sub	r24, r18
    13d8:	93 0b       	sbc	r25, r19
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	84 0f       	add	r24, r20
    13de:	91 1d       	adc	r25, r1
    13e0:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    13e2:	9c 01       	movw	r18, r24
    13e4:	36 95       	lsr	r19
    13e6:	27 95       	ror	r18
    13e8:	36 95       	lsr	r19
    13ea:	27 95       	ror	r18
    13ec:	36 95       	lsr	r19
    13ee:	27 95       	ror	r18
    13f0:	c9 01       	movw	r24, r18
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	82 1b       	sub	r24, r18
    1400:	93 0b       	sbc	r25, r19
}
    1402:	08 95       	ret

00001404 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1404:	2f 92       	push	r2
    1406:	3f 92       	push	r3
    1408:	4f 92       	push	r4
    140a:	5f 92       	push	r5
    140c:	6f 92       	push	r6
    140e:	7f 92       	push	r7
    1410:	8f 92       	push	r8
    1412:	9f 92       	push	r9
    1414:	af 92       	push	r10
    1416:	bf 92       	push	r11
    1418:	cf 92       	push	r12
    141a:	df 92       	push	r13
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	00 d0       	rcall	.+0      	; 0x142a <sysex_encode+0x26>
    142a:	00 d0       	rcall	.+0      	; 0x142c <sysex_encode+0x28>
    142c:	00 d0       	rcall	.+0      	; 0x142e <sysex_encode+0x2a>
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	1c 01       	movw	r2, r24
    1434:	7a 83       	std	Y+2, r23	; 0x02
    1436:	69 83       	std	Y+1, r22	; 0x01
    1438:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    143a:	ca 01       	movw	r24, r20
    143c:	67 e0       	ldi	r22, 0x07	; 7
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
    1444:	2b 01       	movw	r4, r22
    1446:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    1448:	61 15       	cp	r22, r1
    144a:	71 05       	cpc	r23, r1
    144c:	b1 f1       	breq	.+108    	; 0x14ba <sysex_encode+0xb6>
    144e:	81 01       	movw	r16, r2
    1450:	e9 80       	ldd	r14, Y+1	; 0x01
    1452:	fa 80       	ldd	r15, Y+2	; 0x02
    1454:	cc 24       	eor	r12, r12
    1456:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1458:	88 24       	eor	r8, r8
    145a:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    145c:	1e 83       	std	Y+6, r17	; 0x06
    145e:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    1460:	f8 01       	movw	r30, r16
    1462:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1464:	fc 82       	std	Y+4, r15	; 0x04
    1466:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1468:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    146a:	ab 81       	ldd	r26, Y+3	; 0x03
    146c:	bc 81       	ldd	r27, Y+4	; 0x04
    146e:	2d 91       	ld	r18, X+
    1470:	bc 83       	std	Y+4, r27	; 0x04
    1472:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    1474:	4f 5f       	subi	r20, 0xFF	; 255
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	82 2f       	mov	r24, r18
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	80 78       	andi	r24, 0x80	; 128
    147e:	90 70       	andi	r25, 0x00	; 0
    1480:	bc 01       	movw	r22, r24
    1482:	04 2e       	mov	r0, r20
    1484:	02 c0       	rjmp	.+4      	; 0x148a <sysex_encode+0x86>
    1486:	75 95       	asr	r23
    1488:	67 95       	ror	r22
    148a:	0a 94       	dec	r0
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <sysex_encode+0x82>
    148e:	ad 81       	ldd	r26, Y+5	; 0x05
    1490:	be 81       	ldd	r27, Y+6	; 0x06
    1492:	8c 91       	ld	r24, X
    1494:	86 2b       	or	r24, r22
    1496:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1498:	2f 77       	andi	r18, 0x7F	; 127
    149a:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    149c:	47 30       	cpi	r20, 0x07	; 7
    149e:	51 05       	cpc	r21, r1
    14a0:	21 f7       	brne	.-56     	; 0x146a <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    14a2:	08 94       	sec
    14a4:	c1 1c       	adc	r12, r1
    14a6:	d1 1c       	adc	r13, r1
    14a8:	08 5f       	subi	r16, 0xF8	; 248
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
    14ac:	e7 e0       	ldi	r30, 0x07	; 7
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	ee 0e       	add	r14, r30
    14b2:	ff 1e       	adc	r15, r31
    14b4:	ca 14       	cp	r12, r10
    14b6:	db 04       	cpc	r13, r11
    14b8:	89 f6       	brne	.-94     	; 0x145c <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    14ba:	c3 01       	movw	r24, r6
    14bc:	67 e0       	ldi	r22, 0x07	; 7
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
   if (remainder) {
    14c4:	88 23       	and	r24, r24
    14c6:	d9 f1       	breq	.+118    	; 0x153e <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    14c8:	82 01       	movw	r16, r4
    14ca:	00 0f       	add	r16, r16
    14cc:	11 1f       	adc	r17, r17
    14ce:	00 0f       	add	r16, r16
    14d0:	11 1f       	adc	r17, r17
    14d2:	00 0f       	add	r16, r16
    14d4:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    14d6:	78 01       	movw	r14, r16
    14d8:	e4 18       	sub	r14, r4
    14da:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    14dc:	d1 01       	movw	r26, r2
    14de:	a0 0f       	add	r26, r16
    14e0:	b1 1f       	adc	r27, r17
    14e2:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    14e4:	68 2f       	mov	r22, r24
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	61 15       	cp	r22, r1
    14ea:	71 05       	cpc	r23, r1
    14ec:	19 f1       	breq	.+70     	; 0x1534 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    14ee:	e9 81       	ldd	r30, Y+1	; 0x01
    14f0:	fa 81       	ldd	r31, Y+2	; 0x02
    14f2:	ee 0e       	add	r14, r30
    14f4:	ff 1e       	adc	r15, r31
    14f6:	c8 01       	movw	r24, r16
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	28 0e       	add	r2, r24
    14fc:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    1502:	f7 01       	movw	r30, r14
    1504:	41 91       	ld	r20, Z+
    1506:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    1508:	2f 5f       	subi	r18, 0xFF	; 255
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	84 2f       	mov	r24, r20
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	80 78       	andi	r24, 0x80	; 128
    1512:	90 70       	andi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <sysex_encode+0x118>
    1518:	95 95       	asr	r25
    151a:	87 95       	ror	r24
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <sysex_encode+0x114>
    1520:	9c 91       	ld	r25, X
    1522:	89 2b       	or	r24, r25
    1524:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1526:	4f 77       	andi	r20, 0x7F	; 127
    1528:	f1 01       	movw	r30, r2
    152a:	41 93       	st	Z+, r20
    152c:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    152e:	26 17       	cp	r18, r22
    1530:	37 07       	cpc	r19, r23
    1532:	38 f3       	brcs	.-50     	; 0x1502 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    1534:	c8 01       	movw	r24, r16
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	86 0f       	add	r24, r22
    153a:	97 1f       	adc	r25, r23
    153c:	07 c0       	rjmp	.+14     	; 0x154c <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    153e:	c2 01       	movw	r24, r4
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
   }
}
    154c:	26 96       	adiw	r28, 0x06	; 6
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	9f 90       	pop	r9
    156e:	8f 90       	pop	r8
    1570:	7f 90       	pop	r7
    1572:	6f 90       	pop	r6
    1574:	5f 90       	pop	r5
    1576:	4f 90       	pop	r4
    1578:	3f 90       	pop	r3
    157a:	2f 90       	pop	r2
    157c:	08 95       	ret

0000157e <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    157e:	6f 92       	push	r6
    1580:	7f 92       	push	r7
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	3c 01       	movw	r6, r24
    159c:	4b 01       	movw	r8, r22
    159e:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    15a0:	42 30       	cpi	r20, 0x02	; 2
    15a2:	51 05       	cpc	r21, r1
    15a4:	08 f4       	brcc	.+2      	; 0x15a8 <sysex_decode+0x2a>
    15a6:	6f c0       	rjmp	.+222    	; 0x1686 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    15a8:	7a 01       	movw	r14, r20
    15aa:	f6 94       	lsr	r15
    15ac:	e7 94       	ror	r14
    15ae:	f6 94       	lsr	r15
    15b0:	e7 94       	ror	r14
    15b2:	f6 94       	lsr	r15
    15b4:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    15b6:	e1 14       	cp	r14, r1
    15b8:	f1 04       	cpc	r15, r1
    15ba:	29 f1       	breq	.+74     	; 0x1606 <sysex_decode+0x88>
    15bc:	eb 01       	movw	r28, r22
    15be:	b3 01       	movw	r22, r6
    15c0:	00 e0       	ldi	r16, 0x00	; 0
    15c2:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    15c4:	cc 24       	eor	r12, r12
    15c6:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    15c8:	de 01       	movw	r26, r28
    15ca:	11 96       	adiw	r26, 0x01	; 1
    15cc:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    15ce:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    15d0:	2d 91       	ld	r18, X+
    15d2:	2f 77       	andi	r18, 0x7F	; 127
    15d4:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    15d6:	4f 5f       	subi	r20, 0xFF	; 255
    15d8:	5f 4f       	sbci	r21, 0xFF	; 255
    15da:	88 81       	ld	r24, Y
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	04 2e       	mov	r0, r20
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <sysex_decode+0x68>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <sysex_decode+0x64>
    15ea:	80 78       	andi	r24, 0x80	; 128
    15ec:	28 2b       	or	r18, r24
    15ee:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    15f0:	47 30       	cpi	r20, 0x07	; 7
    15f2:	51 05       	cpc	r21, r1
    15f4:	69 f7       	brne	.-38     	; 0x15d0 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    15f6:	0f 5f       	subi	r16, 0xFF	; 255
    15f8:	1f 4f       	sbci	r17, 0xFF	; 255
    15fa:	28 96       	adiw	r28, 0x08	; 8
    15fc:	69 5f       	subi	r22, 0xF9	; 249
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	0e 15       	cp	r16, r14
    1602:	1f 05       	cpc	r17, r15
    1604:	09 f7       	brne	.-62     	; 0x15c8 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    1606:	5a 2d       	mov	r21, r10
    1608:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    160a:	99 f1       	breq	.+102    	; 0x1672 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    160c:	e7 01       	movw	r28, r14
    160e:	cc 0f       	add	r28, r28
    1610:	dd 1f       	adc	r29, r29
    1612:	cc 0f       	add	r28, r28
    1614:	dd 1f       	adc	r29, r29
    1616:	cc 0f       	add	r28, r28
    1618:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    161a:	8e 01       	movw	r16, r28
    161c:	0e 19       	sub	r16, r14
    161e:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    1620:	65 2f       	mov	r22, r21
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	61 50       	subi	r22, 0x01	; 1
    1626:	70 40       	sbci	r23, 0x00	; 0
    1628:	f9 f0       	breq	.+62     	; 0x1668 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    162a:	ce 01       	movw	r24, r28
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	d4 01       	movw	r26, r8
    1630:	a8 0f       	add	r26, r24
    1632:	b9 1f       	adc	r27, r25
    1634:	f3 01       	movw	r30, r6
    1636:	e0 0f       	add	r30, r16
    1638:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    163e:	c8 0d       	add	r28, r8
    1640:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    1642:	4d 91       	ld	r20, X+
    1644:	4f 77       	andi	r20, 0x7F	; 127
    1646:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    1648:	2f 5f       	subi	r18, 0xFF	; 255
    164a:	3f 4f       	sbci	r19, 0xFF	; 255
    164c:	88 81       	ld	r24, Y
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <sysex_decode+0xda>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <sysex_decode+0xd6>
    165c:	80 78       	andi	r24, 0x80	; 128
    165e:	48 2b       	or	r20, r24
    1660:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    1662:	26 17       	cp	r18, r22
    1664:	37 07       	cpc	r19, r23
    1666:	68 f3       	brcs	.-38     	; 0x1642 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    1668:	c8 01       	movw	r24, r16
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	85 0f       	add	r24, r21
    166e:	91 1d       	adc	r25, r1
    1670:	0c c0       	rjmp	.+24     	; 0x168a <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    1672:	c7 01       	movw	r24, r14
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	8e 19       	sub	r24, r14
    1682:	9f 09       	sbc	r25, r15
    1684:	02 c0       	rjmp	.+4      	; 0x168a <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	bf 90       	pop	r11
    169c:	af 90       	pop	r10
    169e:	9f 90       	pop	r9
    16a0:	8f 90       	pop	r8
    16a2:	7f 90       	pop	r7
    16a4:	6f 90       	pop	r6
    16a6:	08 95       	ret

000016a8 <__udivmodhi4>:
    16a8:	aa 1b       	sub	r26, r26
    16aa:	bb 1b       	sub	r27, r27
    16ac:	51 e1       	ldi	r21, 0x11	; 17
    16ae:	07 c0       	rjmp	.+14     	; 0x16be <__udivmodhi4_ep>

000016b0 <__udivmodhi4_loop>:
    16b0:	aa 1f       	adc	r26, r26
    16b2:	bb 1f       	adc	r27, r27
    16b4:	a6 17       	cp	r26, r22
    16b6:	b7 07       	cpc	r27, r23
    16b8:	10 f0       	brcs	.+4      	; 0x16be <__udivmodhi4_ep>
    16ba:	a6 1b       	sub	r26, r22
    16bc:	b7 0b       	sbc	r27, r23

000016be <__udivmodhi4_ep>:
    16be:	88 1f       	adc	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	5a 95       	dec	r21
    16c4:	a9 f7       	brne	.-22     	; 0x16b0 <__udivmodhi4_loop>
    16c6:	80 95       	com	r24
    16c8:	90 95       	com	r25
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	08 95       	ret

000016d0 <__divmodhi4>:
    16d0:	97 fb       	bst	r25, 7
    16d2:	09 2e       	mov	r0, r25
    16d4:	07 26       	eor	r0, r23
    16d6:	0a d0       	rcall	.+20     	; 0x16ec <__divmodhi4_neg1>
    16d8:	77 fd       	sbrc	r23, 7
    16da:	04 d0       	rcall	.+8      	; 0x16e4 <__divmodhi4_neg2>
    16dc:	e5 df       	rcall	.-54     	; 0x16a8 <__udivmodhi4>
    16de:	06 d0       	rcall	.+12     	; 0x16ec <__divmodhi4_neg1>
    16e0:	00 20       	and	r0, r0
    16e2:	1a f4       	brpl	.+6      	; 0x16ea <__divmodhi4_exit>

000016e4 <__divmodhi4_neg2>:
    16e4:	70 95       	com	r23
    16e6:	61 95       	neg	r22
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255

000016ea <__divmodhi4_exit>:
    16ea:	08 95       	ret

000016ec <__divmodhi4_neg1>:
    16ec:	f6 f7       	brtc	.-4      	; 0x16ea <__divmodhi4_exit>
    16ee:	90 95       	com	r25
    16f0:	81 95       	neg	r24
    16f2:	9f 4f       	sbci	r25, 0xFF	; 255
    16f4:	08 95       	ret

000016f6 <memcpy>:
    16f6:	fb 01       	movw	r30, r22
    16f8:	dc 01       	movw	r26, r24
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <memcpy+0xa>
    16fc:	01 90       	ld	r0, Z+
    16fe:	0d 92       	st	X+, r0
    1700:	41 50       	subi	r20, 0x01	; 1
    1702:	50 40       	sbci	r21, 0x00	; 0
    1704:	d8 f7       	brcc	.-10     	; 0x16fc <memcpy+0x6>
    1706:	08 95       	ret

00001708 <_exit>:
    1708:	f8 94       	cli

0000170a <__stop_program>:
    170a:	ff cf       	rjmp	.-2      	; 0x170a <__stop_program>
