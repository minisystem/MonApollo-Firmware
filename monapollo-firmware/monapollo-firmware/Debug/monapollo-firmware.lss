
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012c  00800100  000028a2  00002956  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028a2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b6  0080022c  0080022c  00002a82  2**0
                  ALLOC
  3 .eeprom       00000068  00810000  00810000  00002a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00002aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  000036e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00003a20  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000046b7  00000000  00000000  00003ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001323  00000000  00000000  00008397  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001c95  00000000  00000000  000096ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bc0  00000000  00000000  0000b350  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000143e  00000000  00000000  0000bf10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002b3c  00000000  00000000  0000d34e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  0000fe8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_9>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e2 ea       	ldi	r30, 0xA2	; 162
      78:	f8 e2       	ldi	r31, 0x28	; 40
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ac 32       	cpi	r26, 0x2C	; 44
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	13 e0       	ldi	r17, 0x03	; 3
      88:	ac e2       	ldi	r26, 0x2C	; 44
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a2 3e       	cpi	r26, 0xE2	; 226
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 9a 02 	call	0x534	; 0x534 <main>
      9a:	0c 94 4f 14 	jmp	0x289e	; 0x289e <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     120:	80 91 2c 02 	lds	r24, 0x022C
     124:	08 95       	ret

00000126 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	18 2f       	mov	r17, r24
     130:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	ec 01       	movw	r28, r24
     138:	22 97       	sbiw	r28, 0x02	; 2
     13a:	be 01       	movw	r22, r28
     13c:	4e e0       	ldi	r20, 0x0E	; 14
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	0e 94 00 14 	call	0x2800	; 0x2800 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     144:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     146:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     148:	10 93 2c 02 	sts	0x022C, r17
	
} 
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	08 95       	ret

00000156 <remove_note>:
void remove_note(uint8_t note){
     156:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     158:	c0 91 00 01 	lds	r28, 0x0100
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     15c:	c8 17       	cp	r28, r24
     15e:	41 f0       	breq	.+16     	; 0x170 <remove_note+0x1a>
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     168:	90 81       	ld	r25, Z
     16a:	98 17       	cp	r25, r24
     16c:	59 f4       	brne	.+22     	; 0x184 <remove_note+0x2e>
     16e:	02 c0       	rjmp	.+4      	; 0x174 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     174:	fa 01       	movw	r30, r20
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	e0 50       	subi	r30, 0x00	; 0
     17c:	ff 4f       	sbci	r31, 0xFF	; 255
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	80 83       	st	Z, r24
			free_slot = i;
			break;
     182:	07 c0       	rjmp	.+14     	; 0x192 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     184:	4f 5f       	subi	r20, 0xFF	; 255
     186:	5f 4f       	sbci	r21, 0xFF	; 255
     188:	32 96       	adiw	r30, 0x02	; 2
     18a:	48 30       	cpi	r20, 0x08	; 8
     18c:	51 05       	cpc	r21, r1
     18e:	61 f7       	brne	.-40     	; 0x168 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     190:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	ca 01       	movw	r24, r20
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	bc 01       	movw	r22, r24
     19c:	6e 5f       	subi	r22, 0xFE	; 254
     19e:	7e 4f       	sbci	r23, 0xFE	; 254
     1a0:	40 95       	com	r20
     1a2:	50 95       	com	r21
     1a4:	48 5f       	subi	r20, 0xF8	; 248
     1a6:	5f 4f       	sbci	r21, 0xFF	; 255
     1a8:	44 0f       	add	r20, r20
     1aa:	55 1f       	adc	r21, r21
     1ac:	80 50       	subi	r24, 0x00	; 0
     1ae:	9f 4f       	sbci	r25, 0xFF	; 255
     1b0:	0e 94 00 14 	call	0x2800	; 0x2800 <memmove>
	note_pool[7].note = EMPTY;	
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	80 93 0e 01 	sts	0x010E, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1ba:	80 91 00 01 	lds	r24, 0x0100
     1be:	8f 3f       	cpi	r24, 0xFF	; 255
     1c0:	19 f4       	brne	.+6      	; 0x1c8 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1c2:	c0 93 2c 02 	sts	0x022C, r28
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1c8:	80 93 2c 02 	sts	0x022C, r24

	}	
	
}
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1d0:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1d2:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1d4:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1d6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1d8:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     1da:	8c 91       	ld	r24, X
     1dc:	82 b9       	out	0x02, r24	; 2
     1de:	8d e0       	ldi	r24, 0x0D	; 13
     1e0:	8a 95       	dec	r24
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <set_control_voltage+0x10>
     1e4:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     1e6:	ea ed       	ldi	r30, 0xDA	; 218
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	40 81       	ld	r20, Z
     1ec:	21 e0       	ldi	r18, 0x01	; 1
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	c9 01       	movw	r24, r18
     1f2:	11 96       	adiw	r26, 0x01	; 1
     1f4:	0c 90       	ld	r0, X
     1f6:	11 97       	sbiw	r26, 0x01	; 1
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_control_voltage+0x2e>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <set_control_voltage+0x2a>
     202:	84 2b       	or	r24, r20
     204:	80 83       	st	Z, r24
     206:	82 e4       	ldi	r24, 0x42	; 66
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x38>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x3e>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     20e:	80 81       	ld	r24, Z
     210:	11 96       	adiw	r26, 0x01	; 1
     212:	0c 90       	ld	r0, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	02 c0       	rjmp	.+4      	; 0x21c <set_control_voltage+0x4c>
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <set_control_voltage+0x48>
     220:	20 95       	com	r18
     222:	28 23       	and	r18, r24
     224:	20 83       	st	Z, r18
	
}	
     226:	08 95       	ret

00000228 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     228:	83 b3       	in	r24, 0x13	; 19
     22a:	83 60       	ori	r24, 0x03	; 3
     22c:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     232:	97 b1       	in	r25, 0x07	; 7
     234:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     236:	e9 ed       	ldi	r30, 0xD9	; 217
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8f 60       	ori	r24, 0x0F	; 15
     23e:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     240:	ea ed       	ldi	r30, 0xDA	; 218
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     24a:	84 b3       	in	r24, 0x14	; 20
     24c:	83 60       	ori	r24, 0x03	; 3
     24e:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     250:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     252:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     254:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     256:	a0 9a       	sbi	0x14, 0	; 20
}
     258:	08 95       	ret

0000025a <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     25a:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     25c:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     25e:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     260:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     262:	62 b9       	out	0x02, r22	; 2
     264:	2d e0       	ldi	r18, 0x0D	; 13
     266:	2a 95       	dec	r18
     268:	f1 f7       	brne	.-4      	; 0x266 <set_dac+0xc>
     26a:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     26c:	ea ed       	ldi	r30, 0xDA	; 218
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	40 81       	ld	r20, Z
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	b9 01       	movw	r22, r18
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_dac+0x24>
     27a:	66 0f       	add	r22, r22
     27c:	77 1f       	adc	r23, r23
     27e:	8a 95       	dec	r24
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_dac+0x20>
     282:	cb 01       	movw	r24, r22
     284:	94 2f       	mov	r25, r20
     286:	98 2b       	or	r25, r24
     288:	90 83       	st	Z, r25
     28a:	72 e4       	ldi	r23, 0x42	; 66
     28c:	7a 95       	dec	r23
     28e:	f1 f7       	brne	.-4      	; 0x28c <set_dac+0x32>
     290:	00 c0       	rjmp	.+0      	; 0x292 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     292:	90 81       	ld	r25, Z
     294:	80 95       	com	r24
     296:	89 23       	and	r24, r25
     298:	80 83       	st	Z, r24
	
}
     29a:	08 95       	ret

0000029c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t digit)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	2a 97       	sbiw	r28, 0x0a	; 10
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     2b0:	de 01       	movw	r26, r28
     2b2:	11 96       	adiw	r26, 0x01	; 1
     2b4:	ee e4       	ldi	r30, 0x4E	; 78
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	3a e0       	ldi	r19, 0x0A	; 10
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	31 50       	subi	r19, 0x01	; 1
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2c6:	ea ed       	ldi	r30, 0xDA	; 218
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	30 81       	ld	r19, Z
     2cc:	30 61       	ori	r19, 0x10	; 16
     2ce:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d0:	30 81       	ld	r19, Z
     2d2:	3f 7e       	andi	r19, 0xEF	; 239
     2d4:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     2d6:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2d8:	30 81       	ld	r19, Z
     2da:	30 62       	ori	r19, 0x20	; 32
     2dc:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2de:	30 81       	ld	r19, Z
     2e0:	3f 7d       	andi	r19, 0xDF	; 223
     2e2:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) { //modulo is a bad idea because it is massively time consuming. Maybe a lookup table could be used?
     2e4:	62 30       	cpi	r22, 0x02	; 2
     2e6:	f9 f0       	breq	.+62     	; 0x326 <display_dec+0x8a>
     2e8:	63 30       	cpi	r22, 0x03	; 3
     2ea:	18 f4       	brcc	.+6      	; 0x2f2 <display_dec+0x56>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	a1 f5       	brne	.+104    	; 0x358 <display_dec+0xbc>
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <display_dec+0x70>
     2f2:	64 30       	cpi	r22, 0x04	; 4
     2f4:	29 f1       	breq	.+74     	; 0x340 <display_dec+0xa4>
     2f6:	68 30       	cpi	r22, 0x08	; 8
     2f8:	79 f5       	brne	.+94     	; 0x358 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     2fa:	6a e0       	ldi	r22, 0x0A	; 10
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
     302:	fe 01       	movw	r30, r28
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     30a:	26 c0       	rjmp	.+76     	; 0x358 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     30c:	64 e6       	ldi	r22, 0x64	; 100
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
     314:	6a e0       	ldi	r22, 0x0A	; 10
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
     31c:	fe 01       	movw	r30, r28
     31e:	e6 0f       	add	r30, r22
     320:	f7 1f       	adc	r31, r23
     322:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     324:	19 c0       	rjmp	.+50     	; 0x358 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     326:	68 ee       	ldi	r22, 0xE8	; 232
     328:	73 e0       	ldi	r23, 0x03	; 3
     32a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
     32e:	64 e6       	ldi	r22, 0x64	; 100
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
     336:	fe 01       	movw	r30, r28
     338:	e6 0f       	add	r30, r22
     33a:	f7 1f       	adc	r31, r23
     33c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     33e:	0c c0       	rjmp	.+24     	; 0x358 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     340:	60 e1       	ldi	r22, 0x10	; 16
     342:	77 e2       	ldi	r23, 0x27	; 39
     344:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
     348:	68 ee       	ldi	r22, 0xE8	; 232
     34a:	73 e0       	ldi	r23, 0x03	; 3
     34c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
     350:	fe 01       	movw	r30, r28
     352:	e6 0f       	add	r30, r22
     354:	f7 1f       	adc	r31, r23
     356:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     358:	20 95       	com	r18
     35a:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     35c:	ea ed       	ldi	r30, 0xDA	; 218
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     366:	80 81       	ld	r24, Z
     368:	8f 7e       	andi	r24, 0xEF	; 239
     36a:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     36c:	2a 96       	adiw	r28, 0x0a	; 10
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <update_display+0x8>
     386:	00 d0       	rcall	.+0      	; 0x388 <update_display+0xa>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t place = 0;
	
	uint8_t digit[] = {
     38c:	28 e0       	ldi	r18, 0x08	; 8
     38e:	29 83       	std	Y+1, r18	; 0x01
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	2a 83       	std	Y+2, r18	; 0x02
     394:	22 e0       	ldi	r18, 0x02	; 2
     396:	2b 83       	std	Y+3, r18	; 0x03
     398:	24 e0       	ldi	r18, 0x04	; 4
     39a:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	if (type == DEC) {
     39c:	66 23       	and	r22, r22
     39e:	81 f4       	brne	.+32     	; 0x3c0 <update_display+0x42>

		
			
		display_dec(number, digit[place]);
     3a0:	10 91 31 02 	lds	r17, 0x0231
     3a4:	fe 01       	movw	r30, r28
     3a6:	e1 0f       	add	r30, r17
     3a8:	f1 1d       	adc	r31, r1
     3aa:	61 81       	ldd	r22, Z+1	; 0x01
     3ac:	0e 94 4e 01 	call	0x29c	; 0x29c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     3b0:	81 2f       	mov	r24, r17
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	80 93 31 02 	sts	0x0231, r24
     3b8:	13 30       	cpi	r17, 0x03	; 3
     3ba:	11 f4       	brne	.+4      	; 0x3c0 <update_display+0x42>
		{
			place = 0;
     3bc:	10 92 31 02 	sts	0x0231, r1
		
		
	}
	
	
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     3e2:	80 91 ef 02 	lds	r24, 0x02EF
     3e6:	81 50       	subi	r24, 0x01	; 1
     3e8:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     3ea:	80 91 f0 02 	lds	r24, 0x02F0
     3ee:	88 23       	and	r24, r24
     3f0:	a1 f4       	brne	.+40     	; 0x41a <__vector_10+0x4a>
		count_finished = FALSE;
     3f2:	10 92 ed 02 	sts	0x02ED, r1
		no_overflow = TRUE;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	80 93 2b 02 	sts	0x022B, r24
		period_counter = 1; //set period counter to 1
     3fc:	80 93 f0 02 	sts	0x02F0, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     400:	e1 e8       	ldi	r30, 0x81	; 129
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	90 91 ee 02 	lds	r25, 0x02EE
     40a:	89 2b       	or	r24, r25
     40c:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     40e:	ef e6       	ldi	r30, 0x6F	; 111
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
     414:	81 60       	ori	r24, 0x01	; 1
     416:	80 83       	st	Z, r24
     418:	11 c0       	rjmp	.+34     	; 0x43c <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     41a:	e4 e8       	ldi	r30, 0x84	; 132
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	91 81       	ldd	r25, Z+1	; 0x01
     422:	90 93 ec 02 	sts	0x02EC, r25
     426:	80 93 eb 02 	sts	0x02EB, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     42a:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	80 93 ed 02 	sts	0x02ED, r24
		period_counter = 0;
     434:	10 92 f0 02 	sts	0x02F0, r1
		TCNT1 = 0; //reset timer/counter 1
     438:	11 82       	std	Z+1, r1	; 0x01
     43a:	10 82       	st	Z, r1
	}
	
	
	
	
}
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	9f 91       	pop	r25
     442:	8f 91       	pop	r24
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <__vector_9>:



ISR (TIMER1_OVF_vect) {
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     458:	10 92 2b 02 	sts	0x022B, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     45c:	0f 90       	pop	r0
     45e:	0f be       	out	0x3f, r0	; 63
     460:	0f 90       	pop	r0
     462:	1f 90       	pop	r1
     464:	18 95       	reti

00000466 <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     466:	84 2f       	mov	r24, r20
	remove_note(note);
     468:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
	gate_buffer--;
     46c:	80 91 33 02 	lds	r24, 0x0233
     470:	81 50       	subi	r24, 0x01	; 1
     472:	80 93 33 02 	sts	0x0233, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     476:	88 23       	and	r24, r24
     478:	09 f4       	brne	.+2      	; 0x47c <note_off_event+0x16>
     47a:	89 98       	cbi	0x11, 1	; 17
     47c:	08 95       	ret

0000047e <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     47e:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     480:	40 93 72 02 	sts	0x0272, r20
	if (velocity == 0) {
     484:	22 23       	and	r18, r18
     486:	59 f4       	brne	.+22     	; 0x49e <note_on_event+0x20>
		remove_note(note);
     488:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
		gate_buffer--;
     48c:	80 91 33 02 	lds	r24, 0x0233
     490:	81 50       	subi	r24, 0x01	; 1
     492:	80 93 33 02 	sts	0x0233, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     496:	88 23       	and	r24, r24
     498:	59 f4       	brne	.+22     	; 0x4b0 <note_on_event+0x32>
     49a:	89 98       	cbi	0x11, 1	; 17
     49c:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     49e:	62 2f       	mov	r22, r18
     4a0:	0e 94 93 00 	call	0x126	; 0x126 <new_note>
		gate_buffer++; //increment gate_buffer
     4a4:	80 91 33 02 	lds	r24, 0x0233
     4a8:	8f 5f       	subi	r24, 0xFF	; 255
     4aa:	80 93 33 02 	sts	0x0233, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     4ae:	89 9a       	sbi	0x11, 1	; 17
     4b0:	08 95       	ret

000004b2 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     4b2:	87 e2       	ldi	r24, 0x27	; 39
     4b4:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     4b8:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     4bc:	88 e9       	ldi	r24, 0x98	; 152
     4be:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     4c2:	08 95       	ret

000004c4 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	2f 93       	push	r18
     4d0:	3f 93       	push	r19
     4d2:	4f 93       	push	r20
     4d4:	5f 93       	push	r21
     4d6:	6f 93       	push	r22
     4d8:	7f 93       	push	r23
     4da:	8f 93       	push	r24
     4dc:	9f 93       	push	r25
     4de:	af 93       	push	r26
     4e0:	bf 93       	push	r27
     4e2:	ef 93       	push	r30
     4e4:	ff 93       	push	r31
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	0f 92       	push	r0
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
     4f0:	85 b1       	in	r24, 0x05	; 5
     4f2:	80 58       	subi	r24, 0x80	; 128
     4f4:	85 b9       	out	0x05, r24	; 5
	uint8_t inByte = UDR0;
     4f6:	80 91 c6 00 	lds	r24, 0x00C6
     4fa:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     4fc:	85 ef       	ldi	r24, 0xF5	; 245
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	ae 01       	movw	r20, r28
     504:	4f 5f       	subi	r20, 0xFF	; 255
     506:	5f 4f       	sbci	r21, 0xFF	; 255
     508:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     50c:	0f 90       	pop	r0
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	ff 91       	pop	r31
     514:	ef 91       	pop	r30
     516:	bf 91       	pop	r27
     518:	af 91       	pop	r26
     51a:	9f 91       	pop	r25
     51c:	8f 91       	pop	r24
     51e:	7f 91       	pop	r23
     520:	6f 91       	pop	r22
     522:	5f 91       	pop	r21
     524:	4f 91       	pop	r20
     526:	3f 91       	pop	r19
     528:	2f 91       	pop	r18
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     534:	c0 e8       	ldi	r28, 0x80	; 128
     536:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     538:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     53a:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     53c:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     53e:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     540:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     542:	0e 94 7f 04 	call	0x8fe	; 0x8fe <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     546:	a9 ed       	ldi	r26, 0xD9	; 217
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	8c 91       	ld	r24, X
     54c:	80 6c       	ori	r24, 0xC0	; 192
     54e:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     550:	ea ed       	ldi	r30, 0xDA	; 218
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	80 6c       	ori	r24, 0xC0	; 192
     558:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     55a:	81 b1       	in	r24, 0x01	; 1
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     560:	92 b1       	in	r25, 0x02	; 2
     562:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     564:	8c 91       	ld	r24, X
     566:	80 63       	ori	r24, 0x30	; 48
     568:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     56a:	80 81       	ld	r24, Z
     56c:	8f 7c       	andi	r24, 0xCF	; 207
     56e:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     570:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     572:	ec ed       	ldi	r30, 0xDC	; 220
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	80 62       	ori	r24, 0x20	; 32
     57a:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     57c:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     57e:	ed ed       	ldi	r30, 0xDD	; 221
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	80 62       	ori	r24, 0x20	; 32
     586:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     588:	80 81       	ld	r24, Z
     58a:	8f 7d       	andi	r24, 0xDF	; 223
     58c:	80 83       	st	Z, r24
	DATA_BUS = 0;
     58e:	12 b8       	out	0x02, r1	; 2
	patch.byte_2 = (1<<LFO_TRI);
     590:	c0 93 7c 02 	sts	0x027C, r28
	
	//setup ADC
    setup_adc();		
     594:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     598:	0e 94 14 01 	call	0x228	; 0x228 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     59c:	c5 ef       	ldi	r28, 0xF5	; 245
     59e:	d2 e0       	ldi	r29, 0x02	; 2
     5a0:	ce 01       	movw	r24, r28
     5a2:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     5a6:	ce 01       	movw	r24, r28
     5a8:	6f e3       	ldi	r22, 0x3F	; 63
     5aa:	72 e0       	ldi	r23, 0x02	; 2
     5ac:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     5b0:	ce 01       	movw	r24, r28
     5b2:	63 e3       	ldi	r22, 0x33	; 51
     5b4:	72 e0       	ldi	r23, 0x02	; 2
     5b6:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     5ba:	0e 94 59 02 	call	0x4b2	; 0x4b2 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     5be:	0e 94 a4 04 	call	0x948	; 0x948 <update_spi>
	
	
	
		
	sei(); //enable global interrupts
     5c2:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     5c4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
     5c8:	81 e4       	ldi	r24, 0x41	; 65
     5ca:	80 93 f1 02 	sts	0x02F1, r24
	patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
     5ce:	82 e2       	ldi	r24, 0x22	; 34
     5d0:	80 93 7e 02 	sts	0x027E, r24
	

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     5d4:	8e 01       	movw	r16, r28
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     5d6:	0f 2e       	mov	r0, r31
     5d8:	f3 ef       	ldi	r31, 0xF3	; 243
     5da:	ef 2e       	mov	r14, r31
     5dc:	f2 e0       	ldi	r31, 0x02	; 2
     5de:	ff 2e       	mov	r15, r31
     5e0:	f0 2d       	mov	r31, r0
	patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     5e2:	c8 01       	movw	r24, r16
     5e4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <midi_device_process>
		//value_to_display = vco1_init_cv;
		update_display(value_to_display, DEC);
     5e8:	80 91 96 01 	lds	r24, 0x0196
     5ec:	90 91 97 01 	lds	r25, 0x0197
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
			
		scan_pots_and_update_control_voltages();
     5f6:	0e 94 13 03 	call	0x626	; 0x626 <scan_pots_and_update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     5fa:	80 91 32 02 	lds	r24, 0x0232
     5fe:	98 2f       	mov	r25, r24
     600:	9f 5f       	subi	r25, 0xFF	; 255
     602:	90 93 32 02 	sts	0x0232, r25
     606:	85 30       	cpi	r24, 0x05	; 5
     608:	61 f7       	brne	.-40     	; 0x5e2 <main+0xae>
		{
			switch_timer = 0;
     60a:	10 92 32 02 	sts	0x0232, r1
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     60e:	f7 01       	movw	r30, r14
     610:	c0 81       	ld	r28, Z
     612:	0e 94 85 0c 	call	0x190a	; 0x190a <read_switch_port>
     616:	8c 27       	eor	r24, r28
     618:	f7 01       	movw	r30, r14
     61a:	80 83       	st	Z, r24
			update_spi();
     61c:	0e 94 a4 04 	call	0x948	; 0x948 <update_spi>
			refresh_synth();
     620:	0e 94 cc 05 	call	0xb98	; 0xb98 <refresh_synth>
     624:	de cf       	rjmp	.-68     	; 0x5e2 <main+0xae>

00000626 <scan_pots_and_update_control_voltages>:
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     626:	2f 92       	push	r2
     628:	3f 92       	push	r3
     62a:	4f 92       	push	r4
     62c:	5f 92       	push	r5
     62e:	6f 92       	push	r6
     630:	7f 92       	push	r7
     632:	8f 92       	push	r8
     634:	9f 92       	push	r9
     636:	af 92       	push	r10
     638:	bf 92       	push	r11
     63a:	cf 92       	push	r12
     63c:	df 92       	push	r13
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     64a:	02 e5       	ldi	r16, 0x52	; 82
     64c:	12 e0       	ldi	r17, 0x02	; 2
     64e:	0f 2e       	mov	r0, r31
     650:	f6 e7       	ldi	r31, 0x76	; 118
     652:	cf 2e       	mov	r12, r31
     654:	f1 e0       	ldi	r31, 0x01	; 1
     656:	df 2e       	mov	r13, r31
     658:	f0 2d       	mov	r31, r0
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     65a:	ee 24       	eor	r14, r14
     65c:	ff 24       	eor	r15, r15
     65e:	e3 94       	inc	r14
     660:	c0 e0       	ldi	r28, 0x00	; 0
     662:	d0 e0       	ldi	r29, 0x00	; 0
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     664:	0f 2e       	mov	r0, r31
     666:	fa e3       	ldi	r31, 0x3A	; 58
     668:	8f 2e       	mov	r8, r31
     66a:	f1 e0       	ldi	r31, 0x01	; 1
     66c:	9f 2e       	mov	r9, r31
     66e:	f0 2d       	mov	r31, r0
				break;
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     670:	aa 24       	eor	r10, r10
     672:	bb 24       	eor	r11, r11
     674:	68 94       	set
     676:	b1 f8       	bld	r11, 1
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     678:	0f 2e       	mov	r0, r31
     67a:	f8 e3       	ldi	r31, 0x38	; 56
     67c:	6f 2e       	mov	r6, r31
     67e:	f1 e0       	ldi	r31, 0x01	; 1
     680:	7f 2e       	mov	r7, r31
     682:	f0 2d       	mov	r31, r0
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     684:	0f 2e       	mov	r0, r31
     686:	f2 e4       	ldi	r31, 0x42	; 66
     688:	4f 2e       	mov	r4, r31
     68a:	f1 e0       	ldi	r31, 0x01	; 1
     68c:	5f 2e       	mov	r5, r31
     68e:	f0 2d       	mov	r31, r0
     690:	08 c0       	rjmp	.+16     	; 0x6a2 <scan_pots_and_update_control_voltages+0x7c>
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     692:	21 96       	adiw	r28, 0x01	; 1
     694:	08 94       	sec
     696:	e1 1c       	adc	r14, r1
     698:	f1 1c       	adc	r15, r1
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	c8 0e       	add	r12, r24
     6a0:	d9 1e       	adc	r13, r25

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{

		adc_value = read_pot(POTMUX_EN0, i);
     6a2:	86 e0       	ldi	r24, 0x06	; 6
     6a4:	6c 2f       	mov	r22, r28
     6a6:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     6aa:	90 93 76 02 	sts	0x0276, r25
     6ae:	80 93 75 02 	sts	0x0275, r24
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
     6b2:	f8 01       	movw	r30, r16
     6b4:	60 81       	ld	r22, Z
     6b6:	71 81       	ldd	r23, Z+1	; 0x01
     6b8:	86 1b       	sub	r24, r22
     6ba:	97 0b       	sbc	r25, r23
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
     6bc:	95 95       	asr	r25
     6be:	87 95       	ror	r24
     6c0:	95 95       	asr	r25
     6c2:	87 95       	ror	r24
     6c4:	9c 01       	movw	r18, r24
     6c6:	26 0f       	add	r18, r22
     6c8:	37 1f       	adc	r19, r23
     6ca:	21 93       	st	Z+, r18
     6cc:	31 93       	st	Z+, r19
     6ce:	8f 01       	movw	r16, r30
		int fine_offset = 0;
		
		switch (i)
     6d0:	c8 30       	cpi	r28, 0x08	; 8
     6d2:	d1 05       	cpc	r29, r1
     6d4:	71 f0       	breq	.+28     	; 0x6f2 <scan_pots_and_update_control_voltages+0xcc>
     6d6:	c9 30       	cpi	r28, 0x09	; 9
     6d8:	d1 05       	cpc	r29, r1
     6da:	24 f4       	brge	.+8      	; 0x6e4 <scan_pots_and_update_control_voltages+0xbe>
     6dc:	c4 30       	cpi	r28, 0x04	; 4
     6de:	d1 05       	cpc	r29, r1
     6e0:	b1 f5       	brne	.+108    	; 0x74e <scan_pots_and_update_control_voltages+0x128>
     6e2:	2a c0       	rjmp	.+84     	; 0x738 <scan_pots_and_update_control_voltages+0x112>
     6e4:	c9 30       	cpi	r28, 0x09	; 9
     6e6:	d1 05       	cpc	r29, r1
     6e8:	b1 f0       	breq	.+44     	; 0x716 <scan_pots_and_update_control_voltages+0xf0>
     6ea:	cb 30       	cpi	r28, 0x0B	; 11
     6ec:	d1 05       	cpc	r29, r1
     6ee:	79 f5       	brne	.+94     	; 0x74e <scan_pots_and_update_control_voltages+0x128>
     6f0:	3a c0       	rjmp	.+116    	; 0x766 <scan_pots_and_update_control_voltages+0x140>
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
     6f2:	60 91 e6 02 	lds	r22, 0x02E6
     6f6:	70 91 e7 02 	lds	r23, 0x02E7
     6fa:	60 50       	subi	r22, 0x00	; 0
     6fc:	7e 4f       	sbci	r23, 0xFE	; 254
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     6fe:	80 91 73 02 	lds	r24, 0x0273
     702:	90 91 74 02 	lds	r25, 0x0274
     706:	68 0f       	add	r22, r24
     708:	79 1f       	adc	r23, r25
     70a:	62 1b       	sub	r22, r18
     70c:	73 0b       	sbc	r23, r19
     70e:	c4 01       	movw	r24, r8
     710:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     714:	be cf       	rjmp	.-132    	; 0x692 <scan_pots_and_update_control_voltages+0x6c>
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     716:	b5 01       	movw	r22, r10
     718:	62 1b       	sub	r22, r18
     71a:	73 0b       	sbc	r23, r19
     71c:	70 93 74 02 	sts	0x0274, r23
     720:	60 93 73 02 	sts	0x0273, r22
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     724:	80 91 e8 02 	lds	r24, 0x02E8
     728:	90 91 e9 02 	lds	r25, 0x02E9
     72c:	68 0f       	add	r22, r24
     72e:	79 1f       	adc	r23, r25
     730:	c3 01       	movw	r24, r6
     732:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     736:	ad cf       	rjmp	.-166    	; 0x692 <scan_pots_and_update_control_voltages+0x6c>
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     738:	b9 01       	movw	r22, r18
     73a:	66 0f       	add	r22, r22
     73c:	77 1f       	adc	r23, r23
     73e:	66 0f       	add	r22, r22
     740:	77 1f       	adc	r23, r23
     742:	66 0f       	add	r22, r22
     744:	77 1f       	adc	r23, r23
     746:	c2 01       	movw	r24, r4
     748:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     74c:	a2 cf       	rjmp	.-188    	; 0x692 <scan_pots_and_update_control_voltages+0x6c>
			
			default: //set control voltage full-scale
				set_control_voltage(pot_decoder_0[i], pot_group_0[i] << 4);
     74e:	b9 01       	movw	r22, r18
     750:	62 95       	swap	r22
     752:	72 95       	swap	r23
     754:	70 7f       	andi	r23, 0xF0	; 240
     756:	76 27       	eor	r23, r22
     758:	60 7f       	andi	r22, 0xF0	; 240
     75a:	76 27       	eor	r23, r22
     75c:	f6 01       	movw	r30, r12
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	}; 
	
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     766:	f0 e1       	ldi	r31, 0x10	; 16
     768:	ef 16       	cp	r14, r31
     76a:	f1 04       	cpc	r15, r1
     76c:	0c f4       	brge	.+2      	; 0x770 <scan_pots_and_update_control_voltages+0x14a>
     76e:	91 cf       	rjmp	.-222    	; 0x692 <scan_pots_and_update_control_voltages+0x6c>
			
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
     770:	0e 94 90 00 	call	0x120	; 0x120 <get_current_note>
     774:	d8 2e       	mov	r13, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     776:	87 e0       	ldi	r24, 0x07	; 7
     778:	8d 15       	cp	r24, r13
     77a:	18 f0       	brcs	.+6      	; 0x782 <scan_pots_and_update_control_voltages+0x15c>
     77c:	dd 24       	eor	r13, r13
     77e:	68 94       	set
     780:	d3 f8       	bld	r13, 3
     782:	04 e3       	ldi	r16, 0x34	; 52
     784:	12 e0       	ldi	r17, 0x02	; 2
     786:	0f 2e       	mov	r0, r31
     788:	f8 e5       	ldi	r31, 0x58	; 88
     78a:	ef 2e       	mov	r14, r31
     78c:	f1 e0       	ldi	r31, 0x01	; 1
     78e:	ff 2e       	mov	r15, r31
     790:	f0 2d       	mov	r31, r0
     792:	c1 e0       	ldi	r28, 0x01	; 1
     794:	d0 e0       	ldi	r29, 0x00	; 0
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
		
		switch(i) 
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     796:	0f 2e       	mov	r0, r31
     798:	f8 ef       	ldi	r31, 0xF8	; 248
     79a:	cf 2e       	mov	r12, r31
     79c:	f0 2d       	mov	r31, r0
     79e:	cd 0c       	add	r12, r13
     7a0:	0f 2e       	mov	r0, r31
     7a2:	f2 e8       	ldi	r31, 0x82	; 130
     7a4:	8f 2e       	mov	r8, r31
     7a6:	f2 e0       	ldi	r31, 0x02	; 2
     7a8:	9f 2e       	mov	r9, r31
     7aa:	f0 2d       	mov	r31, r0
				uint16_t key_track_byte = (pot_group_1[3]); //
     7ac:	0f 2e       	mov	r0, r31
     7ae:	fa e3       	ldi	r31, 0x3A	; 58
     7b0:	af 2e       	mov	r10, r31
     7b2:	f2 e0       	ldi	r31, 0x02	; 2
     7b4:	bf 2e       	mov	r11, r31
     7b6:	f0 2d       	mov	r31, r0
				//if (key_track_byte > 1020) key_track_byte = 1024;			 
				uint16_t divided_pitch_cv = ((uint32_t)key_track_byte*interpolated_pitch_cv) >> 10; //note that produce of key_track_byte and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly

				//value_to_display = divided_pitch_cv;
							
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     7b8:	0f 2e       	mov	r0, r31
     7ba:	fe ef       	ldi	r31, 0xFE	; 254
     7bc:	6f 2e       	mov	r6, r31
     7be:	ff ef       	ldi	r31, 0xFF	; 255
     7c0:	7f 2e       	mov	r7, r31
     7c2:	f0 2d       	mov	r31, r0
     7c4:	6a 0c       	add	r6, r10
     7c6:	7b 1c       	adc	r7, r11
				if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
				set_control_voltage(&cutoff_cv, filter_cutoff_cv);
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f8 e2       	ldi	r31, 0x28	; 40
     7cc:	4f 2e       	mov	r4, r31
     7ce:	f1 e0       	ldi	r31, 0x01	; 1
     7d0:	5f 2e       	mov	r5, r31
     7d2:	f0 2d       	mov	r31, r0
     7d4:	0f 2e       	mov	r0, r31
     7d6:	ff ef       	ldi	r31, 0xFF	; 255
     7d8:	2f 2e       	mov	r2, r31
     7da:	ff e3       	ldi	r31, 0x3F	; 63
     7dc:	3f 2e       	mov	r3, r31
     7de:	f0 2d       	mov	r31, r0
     7e0:	05 c0       	rjmp	.+10     	; 0x7ec <scan_pots_and_update_control_voltages+0x1c6>
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     7e2:	21 96       	adiw	r28, 0x01	; 1
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	ee 0e       	add	r14, r30
     7ea:	ff 1e       	adc	r15, r31
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     7ec:	87 e0       	ldi	r24, 0x07	; 7
     7ee:	6c 2f       	mov	r22, r28
     7f0:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     7f4:	90 93 76 02 	sts	0x0276, r25
     7f8:	80 93 75 02 	sts	0x0275, r24
		int adc_change = adc_value - pot_group_1[i];
     7fc:	f8 01       	movw	r30, r16
     7fe:	20 81       	ld	r18, Z
     800:	31 81       	ldd	r19, Z+1	; 0x01
     802:	82 1b       	sub	r24, r18
     804:	93 0b       	sbc	r25, r19
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
     806:	95 95       	asr	r25
     808:	87 95       	ror	r24
     80a:	95 95       	asr	r25
     80c:	87 95       	ror	r24
     80e:	82 0f       	add	r24, r18
     810:	93 1f       	adc	r25, r19
     812:	81 93       	st	Z+, r24
     814:	91 93       	st	Z+, r25
     816:	8f 01       	movw	r16, r30
		
		switch(i) 
     818:	c3 30       	cpi	r28, 0x03	; 3
     81a:	d1 05       	cpc	r29, r1
     81c:	69 f5       	brne	.+90     	; 0x878 <scan_pots_and_update_control_voltages+0x252>
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     81e:	8c 2d       	mov	r24, r12
     820:	b4 01       	movw	r22, r8
     822:	0e 94 27 0c 	call	0x184e	; 0x184e <interpolate_pitch_cv>
				uint16_t key_track_byte = (pot_group_1[3]); //
				//if (key_track_byte > 1020) key_track_byte = 1024;			 
				uint16_t divided_pitch_cv = ((uint32_t)key_track_byte*interpolated_pitch_cv) >> 10; //note that produce of key_track_byte and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
     826:	bc 01       	movw	r22, r24
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	f5 01       	movw	r30, r10
     82e:	20 81       	ld	r18, Z
     830:	31 81       	ldd	r19, Z+1	; 0x01
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	0e 94 b1 13 	call	0x2762	; 0x2762 <__mulsi3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	07 2e       	mov	r0, r23
     840:	7a e0       	ldi	r23, 0x0A	; 10
     842:	b6 95       	lsr	r27
     844:	a7 95       	ror	r26
     846:	97 95       	ror	r25
     848:	87 95       	ror	r24
     84a:	7a 95       	dec	r23
     84c:	d1 f7       	brne	.-12     	; 0x842 <scan_pots_and_update_control_voltages+0x21c>
     84e:	70 2d       	mov	r23, r0

				//value_to_display = divided_pitch_cv;
							
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     850:	f3 01       	movw	r30, r6
     852:	60 81       	ld	r22, Z
     854:	71 81       	ldd	r23, Z+1	; 0x01
     856:	62 95       	swap	r22
     858:	72 95       	swap	r23
     85a:	70 7f       	andi	r23, 0xF0	; 240
     85c:	76 27       	eor	r23, r22
     85e:	60 7f       	andi	r22, 0xF0	; 240
     860:	76 27       	eor	r23, r22
     862:	68 0f       	add	r22, r24
     864:	79 1f       	adc	r23, r25
				if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
				set_control_voltage(&cutoff_cv, filter_cutoff_cv);
     866:	f0 e4       	ldi	r31, 0x40	; 64
     868:	60 30       	cpi	r22, 0x00	; 0
     86a:	7f 07       	cpc	r23, r31
     86c:	08 f0       	brcs	.+2      	; 0x870 <scan_pots_and_update_control_voltages+0x24a>
     86e:	b1 01       	movw	r22, r2
     870:	c2 01       	movw	r24, r4
     872:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
     876:	b5 cf       	rjmp	.-150    	; 0x7e2 <scan_pots_and_update_control_voltages+0x1bc>
				//value_to_display = filter_cutoff_cv;
				break;
			
			default:
				set_control_voltage(pot_decoder_1[i], pot_group_1[i] <<4);
     878:	bc 01       	movw	r22, r24
     87a:	62 95       	swap	r22
     87c:	72 95       	swap	r23
     87e:	70 7f       	andi	r23, 0xF0	; 240
     880:	76 27       	eor	r23, r22
     882:	60 7f       	andi	r22, 0xF0	; 240
     884:	76 27       	eor	r23, r22
     886:	f7 01       	movw	r30, r14
     888:	80 81       	ld	r24, Z
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//value_to_display = note;	
	
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     890:	cf 30       	cpi	r28, 0x0F	; 15
     892:	d1 05       	cpc	r29, r1
     894:	0c f4       	brge	.+2      	; 0x898 <scan_pots_and_update_control_voltages+0x272>
     896:	a5 cf       	rjmp	.-182    	; 0x7e2 <scan_pots_and_update_control_voltages+0x1bc>
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose 
     898:	8d 2d       	mov	r24, r13
     89a:	6f e0       	ldi	r22, 0x0F	; 15
     89c:	0e 94 02 05 	call	0xa04	; 0xa04 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     8a0:	64 ec       	ldi	r22, 0xC4	; 196
     8a2:	72 e0       	ldi	r23, 0x02	; 2
     8a4:	0e 94 27 0c 	call	0x184e	; 0x184e <interpolate_pitch_cv>
     8a8:	bc 01       	movw	r22, r24
	
	value_to_display = interpolated_pitch_cv;
     8aa:	90 93 97 01 	sts	0x0197, r25
     8ae:	80 93 96 01 	sts	0x0196, r24
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     8b2:	8c e4       	ldi	r24, 0x4C	; 76
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     8ba:	8d 2d       	mov	r24, r13
     8bc:	60 ef       	ldi	r22, 0xF0	; 240
     8be:	0e 94 02 05 	call	0xa04	; 0xa04 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     8c2:	62 ea       	ldi	r22, 0xA2	; 162
     8c4:	72 e0       	ldi	r23, 0x02	; 2
     8c6:	0e 94 27 0c 	call	0x184e	; 0x184e <interpolate_pitch_cv>
     8ca:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv); 
     8cc:	8a e4       	ldi	r24, 0x4A	; 74
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     8d4:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     8d6:	a1 9a       	sbi	0x14, 1	; 20
	
	
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	8f 90       	pop	r8
     8f0:	7f 90       	pop	r7
     8f2:	6f 90       	pop	r6
     8f4:	5f 90       	pop	r5
     8f6:	4f 90       	pop	r4
     8f8:	3f 90       	pop	r3
     8fa:	2f 90       	pop	r2
     8fc:	08 95       	ret

000008fe <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     8fe:	84 b1       	in	r24, 0x04	; 4
     900:	87 62       	ori	r24, 0x27	; 39
     902:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     904:	ec ed       	ldi	r30, 0xDC	; 220
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 81       	ld	r24, Z
     90a:	8c 65       	ori	r24, 0x5C	; 92
     90c:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     90e:	85 b1       	in	r24, 0x05	; 5
     910:	89 7d       	andi	r24, 0xD9	; 217
     912:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     914:	ed ed       	ldi	r30, 0xDD	; 221
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	83 7f       	andi	r24, 0xF3	; 243
     91c:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     91e:	80 e5       	ldi	r24, 0x50	; 80
     920:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     922:	80 81       	ld	r24, Z
     924:	87 7f       	andi	r24, 0xF7	; 247
     926:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     928:	80 81       	ld	r24, Z
     92a:	87 7f       	andi	r24, 0xF7	; 247
     92c:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     92e:	80 81       	ld	r24, Z
     930:	88 60       	ori	r24, 0x08	; 8
     932:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     934:	80 81       	ld	r24, Z
     936:	8f 7e       	andi	r24, 0xEF	; 239
     938:	80 83       	st	Z, r24
	
}
     93a:	08 95       	ret

0000093c <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     93c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     93e:	0d b4       	in	r0, 0x2d	; 45
     940:	07 fe       	sbrs	r0, 7
     942:	fd cf       	rjmp	.-6      	; 0x93e <spi_shift_byte+0x2>
	return SPDR;
     944:	8e b5       	in	r24, 0x2e	; 46
	
}
     946:	08 95       	ret

00000948 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     948:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(patch.byte_5);
     94a:	80 91 7f 02 	lds	r24, 0x027F
     94e:	0e 94 9e 04 	call	0x93c	; 0x93c <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     952:	90 91 78 02 	lds	r25, 0x0278
     956:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     958:	98 27       	eor	r25, r24
     95a:	90 93 78 02 	sts	0x0278, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     95e:	98 23       	and	r25, r24
     960:	90 93 77 02 	sts	0x0277, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     964:	80 91 f1 02 	lds	r24, 0x02F1
     968:	98 27       	eor	r25, r24
     96a:	90 93 f1 02 	sts	0x02F1, r25
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     96e:	80 91 7e 02 	lds	r24, 0x027E
     972:	0e 94 9e 04 	call	0x93c	; 0x93c <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     976:	90 91 7a 02 	lds	r25, 0x027A
     97a:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     97c:	98 27       	eor	r25, r24
     97e:	90 93 7a 02 	sts	0x027A, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     982:	98 23       	and	r25, r24
     984:	90 93 79 02 	sts	0x0279, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     988:	80 91 f2 02 	lds	r24, 0x02F2
     98c:	98 27       	eor	r25, r24
     98e:	90 93 f2 02 	sts	0x02F2, r25
							
			//SHIFT 3th BYTE
			spi_shift_byte(patch.byte_3);
     992:	80 91 7d 02 	lds	r24, 0x027D
     996:	0e 94 9e 04 	call	0x93c	; 0x93c <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(patch.byte_2);
     99a:	80 91 7c 02 	lds	r24, 0x027C
     99e:	0e 94 9e 04 	call	0x93c	; 0x93c <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     9a2:	90 91 f3 02 	lds	r25, 0x02F3
     9a6:	29 2f       	mov	r18, r25
     9a8:	22 95       	swap	r18
     9aa:	2f 70       	andi	r18, 0x0F	; 15
     9ac:	27 95       	ror	r18
     9ae:	22 27       	eor	r18, r18
     9b0:	27 95       	ror	r18

			//SHIFT 2th BYTE
			spi_shift_byte(patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     9b2:	89 2f       	mov	r24, r25
     9b4:	86 95       	lsr	r24
     9b6:	86 95       	lsr	r24
     9b8:	86 95       	lsr	r24
     9ba:	81 70       	andi	r24, 0x01	; 1
     9bc:	82 2b       	or	r24, r18
     9be:	40 91 f2 02 	lds	r20, 0x02F2
     9c2:	42 95       	swap	r20
     9c4:	46 95       	lsr	r20
     9c6:	47 70       	andi	r20, 0x07	; 7
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	41 70       	andi	r20, 0x01	; 1
     9cc:	50 70       	andi	r21, 0x00	; 0
     9ce:	9a 01       	movw	r18, r20
     9d0:	22 0f       	add	r18, r18
     9d2:	33 1f       	adc	r19, r19
     9d4:	22 0f       	add	r18, r18
     9d6:	33 1f       	adc	r19, r19
     9d8:	28 2b       	or	r18, r24
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     9da:	99 1f       	adc	r25, r25
     9dc:	99 27       	eor	r25, r25
     9de:	99 1f       	adc	r25, r25
     9e0:	89 2f       	mov	r24, r25
     9e2:	82 95       	swap	r24
     9e4:	88 0f       	add	r24, r24
     9e6:	88 0f       	add	r24, r24
     9e8:	80 7c       	andi	r24, 0xC0	; 192
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     9ea:	82 2b       	or	r24, r18
     9ec:	0e 94 9e 04 	call	0x93c	; 0x93c <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     9f0:	ed ed       	ldi	r30, 0xDD	; 221
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	87 7f       	andi	r24, 0xF7	; 247
     9f8:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     9fa:	80 81       	ld	r24, Z
     9fc:	88 60       	ori	r24, 0x08	; 8
     9fe:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     a00:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     a02:	08 95       	ret

00000a04 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
     a04:	90 91 80 02 	lds	r25, 0x0280
     a08:	97 70       	andi	r25, 0x07	; 7
	if (vco == VCO2) n = octave_index.vco2;
     a0a:	60 3f       	cpi	r22, 0xF0	; 240
     a0c:	31 f4       	brne	.+12     	; 0xa1a <transpose_note+0x16>
     a0e:	90 91 80 02 	lds	r25, 0x0280
     a12:	96 95       	lsr	r25
     a14:	96 95       	lsr	r25
     a16:	96 95       	lsr	r25
     a18:	97 70       	andi	r25, 0x07	; 7

	note = (n*12) + note; //calculate MIDI note after octave addition
     a1a:	29 2f       	mov	r18, r25
     a1c:	22 0f       	add	r18, r18
     a1e:	92 0f       	add	r25, r18
     a20:	99 0f       	add	r25, r25
     a22:	99 0f       	add	r25, r25
     a24:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
     a26:	89 38       	cpi	r24, 0x89	; 137
     a28:	08 f0       	brcs	.+2      	; 0xa2c <transpose_note+0x28>
     a2a:	88 e8       	ldi	r24, 0x88	; 136
	
}
     a2c:	08 95       	ret

00000a2e <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
     a2e:	80 91 f1 02 	lds	r24, 0x02F1
     a32:	98 2f       	mov	r25, r24
     a34:	96 95       	lsr	r25
     a36:	96 95       	lsr	r25
     a38:	96 95       	lsr	r25
     a3a:	90 ff       	sbrs	r25, 0
     a3c:	14 c0       	rjmp	.+40     	; 0xa66 <update_octave_range+0x38>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
     a3e:	20 91 80 02 	lds	r18, 0x0280
     a42:	92 2f       	mov	r25, r18
     a44:	9f 5f       	subi	r25, 0xFF	; 255
     a46:	97 70       	andi	r25, 0x07	; 7
     a48:	28 7f       	andi	r18, 0xF8	; 248
     a4a:	29 2b       	or	r18, r25
     a4c:	20 93 80 02 	sts	0x0280, r18
     a50:	95 30       	cpi	r25, 0x05	; 5
     a52:	29 f4       	brne	.+10     	; 0xa5e <update_octave_range+0x30>
     a54:	92 2f       	mov	r25, r18
     a56:	98 7f       	andi	r25, 0xF8	; 248
     a58:	94 60       	ori	r25, 0x04	; 4
     a5a:	90 93 80 02 	sts	0x0280, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
     a5e:	98 e0       	ldi	r25, 0x08	; 8
     a60:	89 27       	eor	r24, r25
     a62:	80 93 f1 02 	sts	0x02F1, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
     a66:	80 91 f2 02 	lds	r24, 0x02F2
     a6a:	98 2f       	mov	r25, r24
     a6c:	96 95       	lsr	r25
     a6e:	96 95       	lsr	r25
     a70:	96 95       	lsr	r25
     a72:	90 ff       	sbrs	r25, 0
     a74:	11 c0       	rjmp	.+34     	; 0xa98 <update_octave_range+0x6a>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
     a76:	90 91 80 02 	lds	r25, 0x0280
     a7a:	97 70       	andi	r25, 0x07	; 7
     a7c:	49 f0       	breq	.+18     	; 0xa90 <update_octave_range+0x62>
     a7e:	90 91 80 02 	lds	r25, 0x0280
     a82:	29 2f       	mov	r18, r25
     a84:	29 5f       	subi	r18, 0xF9	; 249
     a86:	27 70       	andi	r18, 0x07	; 7
     a88:	98 7f       	andi	r25, 0xF8	; 248
     a8a:	92 2b       	or	r25, r18
     a8c:	90 93 80 02 	sts	0x0280, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
     a90:	98 e0       	ldi	r25, 0x08	; 8
     a92:	89 27       	eor	r24, r25
     a94:	80 93 f2 02 	sts	0x02F2, r24

	}
	
	patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
     a98:	80 91 80 02 	lds	r24, 0x0280
     a9c:	87 70       	andi	r24, 0x07	; 7
     a9e:	e2 ea       	ldi	r30, 0xA2	; 162
     aa0:	f1 e0       	ldi	r31, 0x01	; 1
     aa2:	e8 0f       	add	r30, r24
     aa4:	f1 1d       	adc	r31, r1
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	00 80       	ld	r0, Z
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <update_octave_range+0x84>
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	0a 94       	dec	r0
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <update_octave_range+0x80>
     ab6:	58 2f       	mov	r21, r24
     ab8:	80 93 7e 02 	sts	0x027E, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
     abc:	90 91 f2 02 	lds	r25, 0x02F2
     ac0:	29 2f       	mov	r18, r25
     ac2:	26 95       	lsr	r18
     ac4:	26 95       	lsr	r18
     ac6:	20 ff       	sbrs	r18, 0
     ac8:	1a c0       	rjmp	.+52     	; 0xafe <update_octave_range+0xd0>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
     aca:	80 91 80 02 	lds	r24, 0x0280
     ace:	28 2f       	mov	r18, r24
     ad0:	26 95       	lsr	r18
     ad2:	26 95       	lsr	r18
     ad4:	26 95       	lsr	r18
     ad6:	2f 5f       	subi	r18, 0xFF	; 255
     ad8:	27 70       	andi	r18, 0x07	; 7
     ada:	32 2f       	mov	r19, r18
     adc:	33 0f       	add	r19, r19
     ade:	33 0f       	add	r19, r19
     ae0:	33 0f       	add	r19, r19
     ae2:	87 7c       	andi	r24, 0xC7	; 199
     ae4:	83 2b       	or	r24, r19
     ae6:	80 93 80 02 	sts	0x0280, r24
     aea:	25 30       	cpi	r18, 0x05	; 5
     aec:	21 f4       	brne	.+8      	; 0xaf6 <update_octave_range+0xc8>
     aee:	87 7c       	andi	r24, 0xC7	; 199
     af0:	80 62       	ori	r24, 0x20	; 32
     af2:	80 93 80 02 	sts	0x0280, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
     af6:	84 e0       	ldi	r24, 0x04	; 4
     af8:	98 27       	eor	r25, r24
     afa:	90 93 f2 02 	sts	0x02F2, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
     afe:	90 91 f2 02 	lds	r25, 0x02F2
     b02:	29 2f       	mov	r18, r25
     b04:	26 95       	lsr	r18
     b06:	20 ff       	sbrs	r18, 0
     b08:	17 c0       	rjmp	.+46     	; 0xb38 <update_octave_range+0x10a>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
     b0a:	80 91 80 02 	lds	r24, 0x0280
     b0e:	88 73       	andi	r24, 0x38	; 56
     b10:	79 f0       	breq	.+30     	; 0xb30 <update_octave_range+0x102>
     b12:	80 91 80 02 	lds	r24, 0x0280
     b16:	28 2f       	mov	r18, r24
     b18:	26 95       	lsr	r18
     b1a:	26 95       	lsr	r18
     b1c:	26 95       	lsr	r18
     b1e:	29 5f       	subi	r18, 0xF9	; 249
     b20:	27 70       	andi	r18, 0x07	; 7
     b22:	22 0f       	add	r18, r18
     b24:	22 0f       	add	r18, r18
     b26:	22 0f       	add	r18, r18
     b28:	87 7c       	andi	r24, 0xC7	; 199
     b2a:	82 2b       	or	r24, r18
     b2c:	80 93 80 02 	sts	0x0280, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	98 27       	eor	r25, r24
     b34:	90 93 f2 02 	sts	0x02F2, r25
		
	}
			
	patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
     b38:	40 91 7d 02 	lds	r20, 0x027D
     b3c:	4c 7f       	andi	r20, 0xFC	; 252
     b3e:	40 93 7d 02 	sts	0x027D, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
     b42:	90 91 80 02 	lds	r25, 0x0280
     b46:	96 95       	lsr	r25
     b48:	96 95       	lsr	r25
     b4a:	96 95       	lsr	r25
     b4c:	97 70       	andi	r25, 0x07	; 7
     b4e:	89 2f       	mov	r24, r25
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	83 30       	cpi	r24, 0x03	; 3
     b54:	91 05       	cpc	r25, r1
     b56:	84 f0       	brlt	.+32     	; 0xb78 <update_octave_range+0x14a>

						
		patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
     b58:	fc 01       	movw	r30, r24
     b5a:	e3 56       	subi	r30, 0x63	; 99
     b5c:	fe 4f       	sbci	r31, 0xFE	; 254
     b5e:	21 e0       	ldi	r18, 0x01	; 1
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	c9 01       	movw	r24, r18
     b64:	00 80       	ld	r0, Z
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <update_octave_range+0x13e>
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	0a 94       	dec	r0
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <update_octave_range+0x13a>
     b70:	84 2b       	or	r24, r20
     b72:	80 93 7d 02 	sts	0x027D, r24
     b76:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
     b78:	fc 01       	movw	r30, r24
     b7a:	e3 56       	subi	r30, 0x63	; 99
     b7c:	fe 4f       	sbci	r31, 0xFE	; 254
     b7e:	21 e0       	ldi	r18, 0x01	; 1
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	c9 01       	movw	r24, r18
     b84:	00 80       	ld	r0, Z
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <update_octave_range+0x15e>
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	0a 94       	dec	r0
     b8e:	e2 f7       	brpl	.-8      	; 0xb88 <update_octave_range+0x15a>
     b90:	85 2b       	or	r24, r21
     b92:	80 93 7e 02 	sts	0x027E, r24
     b96:	08 95       	ret

00000b98 <refresh_synth>:
	}	
	
}
	
	
void refresh_synth(void) {
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     b9c:	90 91 f1 02 	lds	r25, 0x02F1
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
     ba0:	80 91 f3 02 	lds	r24, 0x02F3
     ba4:	86 95       	lsr	r24
     ba6:	86 95       	lsr	r24
     ba8:	68 2f       	mov	r22, r24
     baa:	67 95       	ror	r22
     bac:	66 27       	eor	r22, r22
     bae:	67 95       	ror	r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     bb0:	29 2f       	mov	r18, r25
     bb2:	21 70       	andi	r18, 0x01	; 1
     bb4:	26 2b       	or	r18, r22
     bb6:	69 2f       	mov	r22, r25
     bb8:	66 1f       	adc	r22, r22
     bba:	66 27       	eor	r22, r22
     bbc:	66 1f       	adc	r22, r22
     bbe:	66 0f       	add	r22, r22
     bc0:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
     bc2:	c9 2f       	mov	r28, r25
     bc4:	c6 95       	lsr	r28
     bc6:	c6 95       	lsr	r28
     bc8:	d0 e0       	ldi	r29, 0x00	; 0
     bca:	c1 70       	andi	r28, 0x01	; 1
     bcc:	d0 70       	andi	r29, 0x00	; 0
     bce:	de 01       	movw	r26, r28
     bd0:	aa 0f       	add	r26, r26
     bd2:	bb 1f       	adc	r27, r27
     bd4:	aa 0f       	add	r26, r26
     bd6:	bb 1f       	adc	r27, r27
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     bd8:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
     bda:	a9 2f       	mov	r26, r25
     bdc:	a6 95       	lsr	r26
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	a1 70       	andi	r26, 0x01	; 1
     be2:	b0 70       	andi	r27, 0x00	; 0
     be4:	fd 01       	movw	r30, r26
     be6:	ee 0f       	add	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     bf2:	a6 2f       	mov	r26, r22
     bf4:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
     bf6:	e9 2f       	mov	r30, r25
     bf8:	e2 95       	swap	r30
     bfa:	ef 70       	andi	r30, 0x0F	; 15
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	e1 70       	andi	r30, 0x01	; 1
     c00:	f0 70       	andi	r31, 0x00	; 0
     c02:	bf 01       	movw	r22, r30
     c04:	62 95       	swap	r22
     c06:	72 95       	swap	r23
     c08:	70 7f       	andi	r23, 0xF0	; 240
     c0a:	76 27       	eor	r23, r22
     c0c:	60 7f       	andi	r22, 0xF0	; 240
     c0e:	76 27       	eor	r23, r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c10:	ea 2f       	mov	r30, r26
     c12:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
     c14:	69 2f       	mov	r22, r25
     c16:	62 95       	swap	r22
     c18:	66 95       	lsr	r22
     c1a:	67 70       	andi	r22, 0x07	; 7
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	61 70       	andi	r22, 0x01	; 1
     c20:	70 70       	andi	r23, 0x00	; 0
     c22:	ab 01       	movw	r20, r22
     c24:	44 0f       	add	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	42 95       	swap	r20
     c2a:	52 95       	swap	r21
     c2c:	50 7f       	andi	r21, 0xF0	; 240
     c2e:	54 27       	eor	r21, r20
     c30:	40 7f       	andi	r20, 0xF0	; 240
     c32:	54 27       	eor	r21, r20
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c34:	6e 2f       	mov	r22, r30
     c36:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
     c38:	49 2f       	mov	r20, r25
     c3a:	42 95       	swap	r20
     c3c:	46 95       	lsr	r20
     c3e:	46 95       	lsr	r20
     c40:	43 70       	andi	r20, 0x03	; 3
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	41 70       	andi	r20, 0x01	; 1
     c46:	50 70       	andi	r21, 0x00	; 0
     c48:	9a 01       	movw	r18, r20
     c4a:	00 24       	eor	r0, r0
     c4c:	36 95       	lsr	r19
     c4e:	27 95       	ror	r18
     c50:	07 94       	ror	r0
     c52:	36 95       	lsr	r19
     c54:	27 95       	ror	r18
     c56:	07 94       	ror	r0
     c58:	32 2f       	mov	r19, r18
     c5a:	20 2d       	mov	r18, r0
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c5c:	26 2b       	or	r18, r22
     c5e:	20 93 7f 02 	sts	0x027F, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
     c62:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
     c64:	81 95       	neg	r24
     c66:	89 27       	eor	r24, r25
     c68:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
     c6a:	89 27       	eor	r24, r25
     c6c:	0e 94 8e 0c 	call	0x191c	; 0x191c <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     c70:	ed ed       	ldi	r30, 0xDD	; 221
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	90 81       	ld	r25, Z
     c76:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
     c78:	80 91 f3 02 	lds	r24, 0x02F3
     c7c:	86 95       	lsr	r24
     c7e:	86 95       	lsr	r24
     c80:	86 95       	lsr	r24
     c82:	81 70       	andi	r24, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     c84:	81 95       	neg	r24
     c86:	82 27       	eor	r24, r18
     c88:	80 71       	andi	r24, 0x10	; 16
     c8a:	89 27       	eor	r24, r25
     c8c:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
     c8e:	0e 94 17 05 	call	0xa2e	; 0xa2e <update_octave_range>
	
	//parse LFO data
	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
     c92:	80 91 f2 02 	lds	r24, 0x02F2
     c96:	88 23       	and	r24, r24
     c98:	84 f5       	brge	.+96     	; 0xcfa <refresh_synth+0x162>
		
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
     c9a:	80 58       	subi	r24, 0x80	; 128
     c9c:	80 93 f2 02 	sts	0x02F2, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
     ca0:	80 91 81 02 	lds	r24, 0x0281
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	80 93 81 02 	sts	0x0281, r24
     caa:	85 30       	cpi	r24, 0x05	; 5
     cac:	11 f4       	brne	.+4      	; 0xcb2 <refresh_synth+0x11a>
     cae:	10 92 81 02 	sts	0x0281, r1
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
     cb2:	a0 91 81 02 	lds	r26, 0x0281
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	a9 55       	subi	r26, 0x59	; 89
     cba:	be 4f       	sbci	r27, 0xFE	; 254
     cbc:	8c 91       	ld	r24, X
     cbe:	87 70       	andi	r24, 0x07	; 7
     cc0:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     cc2:	ed ed       	ldi	r30, 0xDD	; 221
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 62       	ori	r24, 0x20	; 32
     cca:	80 83       	st	Z, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     ccc:	80 81       	ld	r24, Z
     cce:	8f 7d       	andi	r24, 0xDF	; 223
     cd0:	80 83       	st	Z, r24
		patch.byte_2 &= 0b00001111; //clear top 4 bits 
		patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
     cd2:	8c 91       	ld	r24, X
     cd4:	86 95       	lsr	r24
     cd6:	86 95       	lsr	r24
     cd8:	86 95       	lsr	r24
     cda:	87 70       	andi	r24, 0x07	; 7
     cdc:	21 e0       	ldi	r18, 0x01	; 1
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	a9 01       	movw	r20, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <refresh_synth+0x150>
     ce4:	44 0f       	add	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	8a 95       	dec	r24
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <refresh_synth+0x14c>
     cec:	ca 01       	movw	r24, r20
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
		patch.byte_2 &= 0b00001111; //clear top 4 bits 
     cee:	90 91 7c 02 	lds	r25, 0x027C
     cf2:	9f 70       	andi	r25, 0x0F	; 15
		patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
     cf4:	89 2b       	or	r24, r25
     cf6:	80 93 7c 02 	sts	0x027C, r24
		
		
	}		
				
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) //temporary tune button hack
     cfa:	80 91 f3 02 	lds	r24, 0x02F3
     cfe:	98 2f       	mov	r25, r24
     d00:	92 95       	swap	r25
     d02:	9f 70       	andi	r25, 0x0F	; 15
     d04:	90 ff       	sbrs	r25, 0
     d06:	3f c0       	rjmp	.+126    	; 0xd86 <refresh_synth+0x1ee>
		{ 
				
		switch_states.byte2 ^= (1<<PROG_WRITE_SW); //toggle read switch state
     d08:	90 e1       	ldi	r25, 0x10	; 16
     d0a:	89 27       	eor	r24, r25
     d0c:	80 93 f3 02 	sts	0x02F3, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
     d10:	87 e0       	ldi	r24, 0x07	; 7
     d12:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     d14:	cd ed       	ldi	r28, 0xDD	; 221
     d16:	d0 e0       	ldi	r29, 0x00	; 0
     d18:	88 81       	ld	r24, Y
     d1a:	80 62       	ori	r24, 0x20	; 32
     d1c:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     d1e:	88 81       	ld	r24, Y
     d20:	8f 7d       	andi	r24, 0xDF	; 223
     d22:	88 83       	st	Y, r24
		DATA_BUS = 0;
     d24:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
     d26:	8f e0       	ldi	r24, 0x0F	; 15
     d28:	6f e0       	ldi	r22, 0x0F	; 15
     d2a:	7e e5       	ldi	r23, 0x5E	; 94
     d2c:	0e 94 45 07 	call	0xe8a	; 0xe8a <set_vco_init_cv>
     d30:	90 93 e9 02 	sts	0x02E9, r25
     d34:	80 93 e8 02 	sts	0x02E8, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
     d38:	80 ef       	ldi	r24, 0xF0	; 240
     d3a:	6f e0       	ldi	r22, 0x0F	; 15
     d3c:	7e e5       	ldi	r23, 0x5E	; 94
     d3e:	0e 94 45 07 	call	0xe8a	; 0xe8a <set_vco_init_cv>
     d42:	90 93 e7 02 	sts	0x02E7, r25
     d46:	80 93 e6 02 	sts	0x02E6, r24

		tune_8ths(VCO1);
     d4a:	8f e0       	ldi	r24, 0x0F	; 15
     d4c:	0e 94 a9 08 	call	0x1152	; 0x1152 <tune_8ths>
		tune_8ths(VCO2);
     d50:	80 ef       	ldi	r24, 0xF0	; 240
     d52:	0e 94 a9 08 	call	0x1152	; 0x1152 <tune_8ths>
		tune_filter();
     d56:	0e 94 32 0a 	call	0x1464	; 0x1464 <tune_filter>
		save_tuning_tables();
     d5a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d5e:	8f e4       	ldi	r24, 0x4F	; 79
     d60:	93 ec       	ldi	r25, 0xC3	; 195
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <refresh_synth+0x1ca>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <refresh_synth+0x1d0>
     d68:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
     d6a:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     d6c:	88 81       	ld	r24, Y
     d6e:	80 62       	ori	r24, 0x20	; 32
     d70:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     d72:	88 81       	ld	r24, Y
     d74:	8f 7d       	andi	r24, 0xDF	; 223
     d76:	88 83       	st	Y, r24
		DATA_BUS = 0;
     d78:	12 b8       	out	0x02, r1	; 2
		patch.byte_2 &= 0b00001111; //clear top 4 bits 
     d7a:	80 91 7c 02 	lds	r24, 0x027C
     d7e:	8f 70       	andi	r24, 0x0F	; 15
		patch.byte_2 |= (1<<LFO_TRI);
     d80:	80 68       	ori	r24, 0x80	; 128
     d82:	80 93 7c 02 	sts	0x027C, r24
				
		}
		
		
	
}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	08 95       	ret

00000d8c <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     d8c:	80 e3       	ldi	r24, 0x30	; 48
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     d98:	82 e4       	ldi	r24, 0x42	; 66
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     da4:	84 e4       	ldi	r24, 0x44	; 68
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     db0:	8f e2       	ldi	r24, 0x2F	; 47
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     dbc:	84 e3       	ldi	r24, 0x34	; 52
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     dc8:	8e e3       	ldi	r24, 0x3E	; 62
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     dd4:	80 e4       	ldi	r24, 0x40	; 64
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     de0:	82 e2       	ldi	r24, 0x22	; 34
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     dec:	8c e2       	ldi	r24, 0x2C	; 44
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     df8:	84 e2       	ldi	r24, 0x24	; 36
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     e04:	86 e2       	ldi	r24, 0x26	; 38
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     e10:	88 e2       	ldi	r24, 0x28	; 40
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	6f ef       	ldi	r22, 0xFF	; 255
     e16:	7f e3       	ldi	r23, 0x3F	; 63
     e18:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     e1c:	8a e2       	ldi	r24, 0x2A	; 42
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     e28:	82 e3       	ldi	r24, 0x32	; 50
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     e34:	8c e1       	ldi	r24, 0x1C	; 28
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     e40:	88 e1       	ldi	r24, 0x18	; 24
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     e4c:	84 e1       	ldi	r24, 0x14	; 20
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	6f ef       	ldi	r22, 0xFF	; 255
     e52:	7f e3       	ldi	r23, 0x3F	; 63
     e54:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     e58:	80 e1       	ldi	r24, 0x10	; 16
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
     e70:	86 e4       	ldi	r24, 0x46	; 70
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
     e7c:	88 e4       	ldi	r24, 0x48	; 72
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
}	
     e88:	08 95       	ret

00000e8a <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
     e8a:	2f 92       	push	r2
     e8c:	3f 92       	push	r3
     e8e:	4f 92       	push	r4
     e90:	5f 92       	push	r5
     e92:	6f 92       	push	r6
     e94:	7f 92       	push	r7
     e96:	8f 92       	push	r8
     e98:	9f 92       	push	r9
     e9a:	af 92       	push	r10
     e9c:	bf 92       	push	r11
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	2c 97       	sbiw	r28, 0x0c	; 12
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	08 2f       	mov	r16, r24
     ec0:	78 87       	std	Y+8, r23	; 0x08
     ec2:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
     ec4:	80 91 ee 02 	lds	r24, 0x02EE
     ec8:	83 60       	ori	r24, 0x03	; 3
     eca:	80 93 ee 02 	sts	0x02EE, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
     ece:	0e 94 c6 06 	call	0xd8c	; 0xd8c <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
     ed2:	10 92 ed 02 	sts	0x02ED, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
     ed6:	0f 30       	cpi	r16, 0x0F	; 15
     ed8:	e1 f4       	brne	.+56     	; 0xf12 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     eda:	0f 2e       	mov	r0, r31
     edc:	fc e4       	ldi	r31, 0x4C	; 76
     ede:	4f 2e       	mov	r4, r31
     ee0:	f1 e0       	ldi	r31, 0x01	; 1
     ee2:	5f 2e       	mov	r5, r31
     ee4:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     ee6:	0f 2e       	mov	r0, r31
     ee8:	fc e3       	ldi	r31, 0x3C	; 60
     eea:	2f 2e       	mov	r2, r31
     eec:	f1 e0       	ldi	r31, 0x01	; 1
     eee:	3f 2e       	mov	r3, r31
     ef0:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     ef2:	26 e4       	ldi	r18, 0x46	; 70
     ef4:	31 e0       	ldi	r19, 0x01	; 1
     ef6:	3a 83       	std	Y+2, r19	; 0x02
     ef8:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     efa:	0f 2e       	mov	r0, r31
     efc:	f8 e3       	ldi	r31, 0x38	; 56
     efe:	8f 2e       	mov	r8, r31
     f00:	f1 e0       	ldi	r31, 0x01	; 1
     f02:	9f 2e       	mov	r9, r31
     f04:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
     f06:	86 e6       	ldi	r24, 0x66	; 102
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	9a 87       	std	Y+10, r25	; 0x0a
     f0c:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	1b c0       	rjmp	.+54     	; 0xf48 <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     f12:	0f 2e       	mov	r0, r31
     f14:	fa e4       	ldi	r31, 0x4A	; 74
     f16:	4f 2e       	mov	r4, r31
     f18:	f1 e0       	ldi	r31, 0x01	; 1
     f1a:	5f 2e       	mov	r5, r31
     f1c:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     f1e:	0f 2e       	mov	r0, r31
     f20:	fe e2       	ldi	r31, 0x2E	; 46
     f22:	2f 2e       	mov	r2, r31
     f24:	f1 e0       	ldi	r31, 0x01	; 1
     f26:	3f 2e       	mov	r3, r31
     f28:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     f2a:	e8 e4       	ldi	r30, 0x48	; 72
     f2c:	f1 e0       	ldi	r31, 0x01	; 1
     f2e:	fa 83       	std	Y+2, r31	; 0x02
     f30:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     f32:	0f 2e       	mov	r0, r31
     f34:	fa e3       	ldi	r31, 0x3A	; 58
     f36:	8f 2e       	mov	r8, r31
     f38:	f1 e0       	ldi	r31, 0x01	; 1
     f3a:	9f 2e       	mov	r9, r31
     f3c:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
     f3e:	24 e6       	ldi	r18, 0x64	; 100
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	3a 87       	std	Y+10, r19	; 0x0a
     f44:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
     f46:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
     f48:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     f4a:	ed ed       	ldi	r30, 0xDD	; 221
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 64       	ori	r24, 0x40	; 64
     f52:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     f54:	80 81       	ld	r24, Z
     f56:	8f 7b       	andi	r24, 0xBF	; 191
     f58:	80 83       	st	Z, r24
	DATA_BUS = 0;
     f5a:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
     f5c:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
     f5e:	84 b5       	in	r24, 0x24	; 36
     f60:	8f 60       	ori	r24, 0x0F	; 15
     f62:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
     f68:	ee e6       	ldi	r30, 0x6E	; 110
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	90 81       	ld	r25, Z
     f6e:	92 60       	ori	r25, 0x02	; 2
     f70:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
     f72:	80 93 ef 02 	sts	0x02EF, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     f76:	8d e0       	ldi	r24, 0x0D	; 13
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
     f7e:	80 2f       	mov	r24, r16
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	8c 01       	movw	r16, r24
     f84:	0f 5f       	subi	r16, 0xFF	; 255
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
     f88:	0f 2e       	mov	r0, r31
     f8a:	f0 e3       	ldi	r31, 0x30	; 48
     f8c:	ef 2e       	mov	r14, r31
     f8e:	f1 e0       	ldi	r31, 0x01	; 1
     f90:	ff 2e       	mov	r15, r31
     f92:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
     f94:	0f 2e       	mov	r0, r31
     f96:	f8 e2       	ldi	r31, 0x28	; 40
     f98:	cf 2e       	mov	r12, r31
     f9a:	f1 e0       	ldi	r31, 0x01	; 1
     f9c:	df 2e       	mov	r13, r31
     f9e:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
     fa0:	0f 2e       	mov	r0, r31
     fa2:	f4 e1       	ldi	r31, 0x14	; 20
     fa4:	af 2e       	mov	r10, r31
     fa6:	f1 e0       	ldi	r31, 0x01	; 1
     fa8:	bf 2e       	mov	r11, r31
     faa:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     fac:	0f 2e       	mov	r0, r31
     fae:	f6 e1       	ldi	r31, 0x16	; 22
     fb0:	6f 2e       	mov	r6, r31
     fb2:	f1 e0       	ldi	r31, 0x01	; 1
     fb4:	7f 2e       	mov	r7, r31
     fb6:	f0 2d       	mov	r31, r0
     fb8:	e0 e0       	ldi	r30, 0x00	; 0
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	fc 87       	std	Y+12, r31	; 0x0c
     fbe:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
     fc0:	21 e0       	ldi	r18, 0x01	; 1
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	0b 80       	ldd	r0, Y+3	; 0x03
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <set_vco_init_cv+0x142>
     fc8:	22 0f       	add	r18, r18
     fca:	33 1f       	adc	r19, r19
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <set_vco_init_cv+0x13e>
     fd0:	3e 83       	std	Y+6, r19	; 0x06
     fd2:	2d 83       	std	Y+5, r18	; 0x05
     fd4:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd6:	9c 85       	ldd	r25, Y+12	; 0x0c
     fd8:	82 2b       	or	r24, r18
     fda:	93 2b       	or	r25, r19
     fdc:	9c 87       	std	Y+12, r25	; 0x0c
     fde:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
     fe0:	c4 01       	movw	r24, r8
     fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		
		count_finished = FALSE;
     fea:	10 92 ed 02 	sts	0x02ED, r1
		period_counter = 0;
     fee:	10 92 f0 02 	sts	0x02F0, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
     ff2:	8f e0       	ldi	r24, 0x0F	; 15
     ff4:	e8 e1       	ldi	r30, 0x18	; 24
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	a8 95       	wdr
     ffe:	e0 93 60 00 	sts	0x0060, r30
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1008:	80 91 ed 02 	lds	r24, 0x02ED
    100c:	88 23       	and	r24, r24
    100e:	89 f5       	brne	.+98     	; 0x1072 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1010:	c8 01       	movw	r24, r16
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1018:	c4 01       	movw	r24, r8
    101a:	6b 85       	ldd	r22, Y+11	; 0x0b
    101c:	7c 85       	ldd	r23, Y+12	; 0x0c
    101e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1022:	c1 01       	movw	r24, r2
    1024:	6f ef       	ldi	r22, 0xFF	; 255
    1026:	7f e3       	ldi	r23, 0x3F	; 63
    1028:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    102c:	c7 01       	movw	r24, r14
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1036:	c6 01       	movw	r24, r12
    1038:	6f ef       	ldi	r22, 0xFF	; 255
    103a:	7f e3       	ldi	r23, 0x3F	; 63
    103c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1040:	c5 01       	movw	r24, r10
    1042:	6f ef       	ldi	r22, 0xFF	; 255
    1044:	7f e3       	ldi	r23, 0x3F	; 63
    1046:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    104a:	c3 01       	movw	r24, r6
    104c:	6f ef       	ldi	r22, 0xFF	; 255
    104e:	7f e3       	ldi	r23, 0x3F	; 63
    1050:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	6f ef       	ldi	r22, 0xFF	; 255
    105a:	7f e3       	ldi	r23, 0x3F	; 63
    105c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1060:	c2 01       	movw	r24, r4
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    106a:	80 91 ed 02 	lds	r24, 0x02ED
    106e:	88 23       	and	r24, r24
    1070:	79 f2       	breq	.-98     	; 0x1010 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1072:	88 e1       	ldi	r24, 0x18	; 24
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	80 93 60 00 	sts	0x0060, r24
    107c:	10 92 60 00 	sts	0x0060, r1
    1080:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1082:	80 91 eb 02 	lds	r24, 0x02EB
    1086:	90 91 ec 02 	lds	r25, 0x02EC
    108a:	ef 81       	ldd	r30, Y+7	; 0x07
    108c:	f8 85       	ldd	r31, Y+8	; 0x08
    108e:	e8 17       	cp	r30, r24
    1090:	f9 07       	cpc	r31, r25
    1092:	20 f0       	brcs	.+8      	; 0x109c <set_vco_init_cv+0x212>
    1094:	80 91 2b 02 	lds	r24, 0x022B
    1098:	88 23       	and	r24, r24
    109a:	51 f4       	brne	.+20     	; 0x10b0 <set_vco_init_cv+0x226>
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	80 95       	com	r24
    10a2:	90 95       	com	r25
    10a4:	2b 85       	ldd	r18, Y+11	; 0x0b
    10a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    10a8:	28 23       	and	r18, r24
    10aa:	39 23       	and	r19, r25
    10ac:	3c 87       	std	Y+12, r19	; 0x0c
    10ae:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 2b 02 	sts	0x022B, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
    10c0:	ef ef       	ldi	r30, 0xFF	; 255
    10c2:	8f 3f       	cpi	r24, 0xFF	; 255
    10c4:	9e 07       	cpc	r25, r30
    10c6:	09 f0       	breq	.+2      	; 0x10ca <set_vco_init_cv+0x240>
    10c8:	7b cf       	rjmp	.-266    	; 0xfc0 <set_vco_init_cv+0x136>
    10ca:	2b 85       	ldd	r18, Y+11	; 0x0b
    10cc:	3c 85       	ldd	r19, Y+12	; 0x0c
    10ce:	3e 83       	std	Y+6, r19	; 0x06
    10d0:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    10d2:	80 e1       	ldi	r24, 0x10	; 16
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    10de:	82 e1       	ldi	r24, 0x12	; 18
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    10ea:	88 e2       	ldi	r24, 0x28	; 40
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    10f6:	80 e3       	ldi	r24, 0x30	; 48
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    1102:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1104:	ee e6       	ldi	r30, 0x6E	; 110
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8d 7f       	andi	r24, 0xFD	; 253
    110c:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    110e:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    1110:	89 85       	ldd	r24, Y+9	; 0x09
    1112:	9a 85       	ldd	r25, Y+10	; 0x0a
    1114:	6d 81       	ldd	r22, Y+5	; 0x05
    1116:	7e 81       	ldd	r23, Y+6	; 0x06
    1118:	0e 94 49 14 	call	0x2892	; 0x2892 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	2c 96       	adiw	r28, 0x0c	; 12
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	9f 90       	pop	r9
    1142:	8f 90       	pop	r8
    1144:	7f 90       	pop	r7
    1146:	6f 90       	pop	r6
    1148:	5f 90       	pop	r5
    114a:	4f 90       	pop	r4
    114c:	3f 90       	pop	r3
    114e:	2f 90       	pop	r2
    1150:	08 95       	ret

00001152 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1152:	2f 92       	push	r2
    1154:	3f 92       	push	r3
    1156:	4f 92       	push	r4
    1158:	5f 92       	push	r5
    115a:	6f 92       	push	r6
    115c:	7f 92       	push	r7
    115e:	8f 92       	push	r8
    1160:	9f 92       	push	r9
    1162:	af 92       	push	r10
    1164:	bf 92       	push	r11
    1166:	cf 92       	push	r12
    1168:	df 92       	push	r13
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	ee 97       	sbiw	r28, 0x3e	; 62
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    1188:	de 01       	movw	r26, r28
    118a:	11 96       	adiw	r26, 0x01	; 1
    118c:	ec ea       	ldi	r30, 0xAC	; 172
    118e:	f1 e0       	ldi	r31, 0x01	; 1
    1190:	80 e3       	ldi	r24, 0x30	; 48
    1192:	01 90       	ld	r0, Z+
    1194:	0d 92       	st	X+, r0
    1196:	81 50       	subi	r24, 0x01	; 1
    1198:	e1 f7       	brne	.-8      	; 0x1192 <tune_8ths+0x40>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    119a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    119e:	0f 30       	cpi	r16, 0x0F	; 15
    11a0:	11 f5       	brne	.+68     	; 0x11e6 <tune_8ths+0x94>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    11a2:	60 90 e8 02 	lds	r6, 0x02E8
    11a6:	70 90 e9 02 	lds	r7, 0x02E9
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    11aa:	0f 2e       	mov	r0, r31
    11ac:	fc e4       	ldi	r31, 0x4C	; 76
    11ae:	af 2e       	mov	r10, r31
    11b0:	f1 e0       	ldi	r31, 0x01	; 1
    11b2:	bf 2e       	mov	r11, r31
    11b4:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    11b6:	0f 2e       	mov	r0, r31
    11b8:	fc e3       	ldi	r31, 0x3C	; 60
    11ba:	4f 2e       	mov	r4, r31
    11bc:	f1 e0       	ldi	r31, 0x01	; 1
    11be:	5f 2e       	mov	r5, r31
    11c0:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    11c2:	26 e4       	ldi	r18, 0x46	; 70
    11c4:	31 e0       	ldi	r19, 0x01	; 1
    11c6:	3a ab       	sts	0x5a, r19
    11c8:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    11ca:	0f 2e       	mov	r0, r31
    11cc:	f8 e3       	ldi	r31, 0x38	; 56
    11ce:	8f 2e       	mov	r8, r31
    11d0:	f1 e0       	ldi	r31, 0x01	; 1
    11d2:	9f 2e       	mov	r9, r31
    11d4:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    11d6:	04 ec       	ldi	r16, 0xC4	; 196
    11d8:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    11da:	cc 24       	eor	r12, r12
    11dc:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    11de:	ee 24       	eor	r14, r14
    11e0:	68 94       	set
    11e2:	e1 f8       	bld	r14, 1
    11e4:	22 c0       	rjmp	.+68     	; 0x122a <tune_8ths+0xd8>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    11e6:	60 90 e6 02 	lds	r6, 0x02E6
    11ea:	70 90 e7 02 	lds	r7, 0x02E7
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    11ee:	0f 2e       	mov	r0, r31
    11f0:	fa e4       	ldi	r31, 0x4A	; 74
    11f2:	af 2e       	mov	r10, r31
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	bf 2e       	mov	r11, r31
    11f8:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    11fa:	0f 2e       	mov	r0, r31
    11fc:	fe e2       	ldi	r31, 0x2E	; 46
    11fe:	4f 2e       	mov	r4, r31
    1200:	f1 e0       	ldi	r31, 0x01	; 1
    1202:	5f 2e       	mov	r5, r31
    1204:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    1206:	88 e4       	ldi	r24, 0x48	; 72
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	9a ab       	sts	0x5a, r25
    120c:	89 ab       	sts	0x59, r24
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    120e:	0f 2e       	mov	r0, r31
    1210:	fa e3       	ldi	r31, 0x3A	; 58
    1212:	8f 2e       	mov	r8, r31
    1214:	f1 e0       	ldi	r31, 0x01	; 1
    1216:	9f 2e       	mov	r9, r31
    1218:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    121a:	02 ea       	ldi	r16, 0xA2	; 162
    121c:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    121e:	cc 24       	eor	r12, r12
    1220:	68 94       	set
    1222:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    1224:	ee 24       	eor	r14, r14
    1226:	68 94       	set
    1228:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    122a:	c4 01       	movw	r24, r8
    122c:	b3 01       	movw	r22, r6
    122e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    1232:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1234:	ed ed       	ldi	r30, 0xDD	; 221
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	80 64       	ori	r24, 0x40	; 64
    123c:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    123e:	80 81       	ld	r24, Z
    1240:	8f 7b       	andi	r24, 0xBF	; 191
    1242:	80 83       	st	Z, r24
		DATA_BUS = 0;
    1244:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    1246:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	80 93 ef 02 	sts	0x02EF, r24
		
		compare_match_counter = 0;	
    124e:	10 92 ea 02 	sts	0x02EA, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1252:	8c 2d       	mov	r24, r12
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	24 e6       	ldi	r18, 0x64	; 100
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	82 9f       	mul	r24, r18
    125c:	10 01       	movw	r2, r0
    125e:	83 9f       	mul	r24, r19
    1260:	30 0c       	add	r3, r0
    1262:	92 9f       	mul	r25, r18
    1264:	30 0c       	add	r3, r0
    1266:	11 24       	eor	r1, r1
    1268:	de 01       	movw	r26, r28
    126a:	11 96       	adiw	r26, 0x01	; 1
    126c:	ba af       	sts	0x7a, r27
    126e:	a9 af       	sts	0x79, r26
	
}



void tune_8ths(uint8_t vco) {
    1270:	f8 01       	movw	r30, r16
    1272:	32 96       	adiw	r30, 0x02	; 2
    1274:	fe af       	sts	0x7e, r31
    1276:	ed af       	sts	0x7d, r30
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1278:	1c ae       	sts	0xbc, r17
    127a:	1b ae       	sts	0xbb, r17
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					//set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
					set_control_voltage(&cutoff_cv, MAX);
    127c:	0f 2e       	mov	r0, r31
    127e:	f8 e2       	ldi	r31, 0x28	; 40
    1280:	ef 2e       	mov	r14, r31
    1282:	f1 e0       	ldi	r31, 0x01	; 1
    1284:	ff 2e       	mov	r15, r31
    1286:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1288:	0f 2e       	mov	r0, r31
    128a:	f4 e1       	ldi	r31, 0x14	; 20
    128c:	cf 2e       	mov	r12, r31
    128e:	f1 e0       	ldi	r31, 0x01	; 1
    1290:	df 2e       	mov	r13, r31
    1292:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    1294:	e9 ad       	sts	0x69, r30
    1296:	fa ad       	sts	0x6a, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    1298:	80 81       	ld	r24, Z
    129a:	80 93 ef 02 	sts	0x02EF, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    129e:	84 b5       	in	r24, 0x24	; 36
    12a0:	8f 60       	ori	r24, 0x0F	; 15
    12a2:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	27 bd       	out	0x27, r18	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    12a8:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    12aa:	8b ad       	sts	0x6b, r24
    12ac:	9c ad       	sts	0x6c, r25
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	24 f4       	brge	.+8      	; 0x12bc <tune_8ths+0x16a>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	80 93 ee 02 	sts	0x02EE, r24
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <tune_8ths+0x170>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	80 93 ee 02 	sts	0x02EE, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    12c2:	a1 81       	ldd	r26, Z+1	; 0x01
    12c4:	b2 81       	ldd	r27, Z+2	; 0x02
    12c6:	b8 af       	sts	0x78, r27
    12c8:	af ab       	sts	0x5f, r26
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    12ca:	ed e0       	ldi	r30, 0x0D	; 13
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	fc ab       	sts	0x5c, r31
    12d0:	eb ab       	sts	0x5b, r30
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    12d2:	00 e0       	ldi	r16, 0x00	; 0
    12d4:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    12d6:	21 e0       	ldi	r18, 0x01	; 1
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	0b a8       	sts	0x8b, r16
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <tune_8ths+0x190>
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <tune_8ths+0x18c>
    12e6:	3e ab       	sts	0x5e, r19
    12e8:	2d ab       	sts	0x5d, r18
    12ea:	02 2b       	or	r16, r18
    12ec:	13 2b       	or	r17, r19
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    12ee:	ae e6       	ldi	r26, 0x6E	; 110
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	8c 91       	ld	r24, X
    12f4:	8d 7f       	andi	r24, 0xFD	; 253
    12f6:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    12f8:	c5 01       	movw	r24, r10
    12fa:	b8 01       	movw	r22, r16
    12fc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
    1300:	e3 ef       	ldi	r30, 0xF3	; 243
    1302:	f1 e0       	ldi	r31, 0x01	; 1
    1304:	31 97       	sbiw	r30, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <tune_8ths+0x1b2>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <tune_8ths+0x1b8>
    130a:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    130c:	ae e6       	ldi	r26, 0x6E	; 110
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	8c 91       	ld	r24, X
    1312:	82 60       	ori	r24, 0x02	; 2
    1314:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    1316:	10 92 ed 02 	sts	0x02ED, r1
				period_counter = 0;
    131a:	10 92 f0 02 	sts	0x02F0, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    131e:	e8 e1       	ldi	r30, 0x18	; 24
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	2f e0       	ldi	r18, 0x0F	; 15
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	a8 95       	wdr
    132a:	e0 93 60 00 	sts	0x0060, r30
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    1334:	80 91 ed 02 	lds	r24, 0x02ED
    1338:	88 23       	and	r24, r24
    133a:	51 f5       	brne	.+84     	; 0x1390 <tune_8ths+0x23e>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    133c:	80 91 ef 02 	lds	r24, 0x02EF
    1340:	d1 01       	movw	r26, r2
    1342:	a8 0f       	add	r26, r24
    1344:	b1 1d       	adc	r27, r1
    1346:	cd 01       	movw	r24, r26
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    134e:	c4 01       	movw	r24, r8
    1350:	b3 01       	movw	r22, r6
    1352:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1356:	c5 01       	movw	r24, r10
    1358:	b8 01       	movw	r22, r16
    135a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					//set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
					set_control_voltage(&cutoff_cv, MAX);
    135e:	c7 01       	movw	r24, r14
    1360:	6f ef       	ldi	r22, 0xFF	; 255
    1362:	7f e3       	ldi	r23, 0x3F	; 63
    1364:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1368:	c6 01       	movw	r24, r12
    136a:	6f ef       	ldi	r22, 0xFF	; 255
    136c:	7f e3       	ldi	r23, 0x3F	; 63
    136e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    1372:	c2 01       	movw	r24, r4
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e2       	ldi	r23, 0x20	; 32
    1378:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    137c:	89 a9       	sts	0x49, r24
    137e:	9a a9       	sts	0x4a, r25
    1380:	6f ef       	ldi	r22, 0xFF	; 255
    1382:	7f e3       	ldi	r23, 0x3F	; 63
    1384:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    1388:	80 91 ed 02 	lds	r24, 0x02ED
    138c:	88 23       	and	r24, r24
    138e:	b1 f2       	breq	.-84     	; 0x133c <tune_8ths+0x1ea>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    1390:	b8 e1       	ldi	r27, 0x18	; 24
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	b0 93 60 00 	sts	0x0060, r27
    139a:	10 92 60 00 	sts	0x0060, r1
    139e:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    13a0:	80 91 eb 02 	lds	r24, 0x02EB
    13a4:	90 91 ec 02 	lds	r25, 0x02EC
    13a8:	ef a9       	sts	0x4f, r30
    13aa:	f8 ad       	sts	0x68, r31
    13ac:	e8 17       	cp	r30, r24
    13ae:	f9 07       	cpc	r31, r25
    13b0:	50 f0       	brcs	.+20     	; 0x13c6 <tune_8ths+0x274>
    13b2:	80 91 2b 02 	lds	r24, 0x022B
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	31 f4       	brne	.+12     	; 0x13c6 <tune_8ths+0x274>
    13ba:	8d a9       	sts	0x4d, r24
    13bc:	9e a9       	sts	0x4e, r25
    13be:	80 95       	com	r24
    13c0:	90 95       	com	r25
    13c2:	08 23       	and	r16, r24
    13c4:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    13c6:	80 91 eb 02 	lds	r24, 0x02EB
    13ca:	90 91 ec 02 	lds	r25, 0x02EC
    13ce:	2f a9       	sts	0x4f, r18
    13d0:	38 ad       	sts	0x68, r19
    13d2:	82 17       	cp	r24, r18
    13d4:	93 07       	cpc	r25, r19
    13d6:	21 f4       	brne	.+8      	; 0x13e0 <tune_8ths+0x28e>
    13d8:	80 91 2b 02 	lds	r24, 0x022B
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	69 f0       	breq	.+26     	; 0x13fa <tune_8ths+0x2a8>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    13e0:	31 e0       	ldi	r19, 0x01	; 1
    13e2:	30 93 2b 02 	sts	0x022B, r19
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    13e6:	8b a9       	sts	0x4b, r24
    13e8:	9c a9       	sts	0x4c, r25
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	9c ab       	sts	0x5c, r25
    13ee:	8b ab       	sts	0x5b, r24
    13f0:	af ef       	ldi	r26, 0xFF	; 255
    13f2:	8f 3f       	cpi	r24, 0xFF	; 255
    13f4:	9a 07       	cpc	r25, r26
    13f6:	09 f0       	breq	.+2      	; 0x13fa <tune_8ths+0x2a8>
    13f8:	6e cf       	rjmp	.-292    	; 0x12d6 <tune_8ths+0x184>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    13fa:	ed ad       	sts	0x6d, r30
    13fc:	fe ad       	sts	0x6e, r31
    13fe:	01 93       	st	Z+, r16
    1400:	11 93       	st	Z+, r17
    1402:	fe af       	sts	0x7e, r31
    1404:	ed af       	sts	0x7d, r30
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    1406:	ae e6       	ldi	r26, 0x6E	; 110
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	8c 91       	ld	r24, X
    140c:	8d 7f       	andi	r24, 0xFD	; 253
    140e:	8c 93       	st	X, r24
			TCCR0A = 0; //turn off timer0
    1410:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1412:	eb ad       	sts	0x6b, r30
    1414:	fc ad       	sts	0x6c, r31
    1416:	31 96       	adiw	r30, 0x01	; 1
    1418:	fc af       	sts	0x7c, r31
    141a:	eb af       	sts	0x7b, r30
    141c:	29 ad       	sts	0x69, r18
    141e:	3a ad       	sts	0x6a, r19
    1420:	2d 5f       	subi	r18, 0xFD	; 253
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	3a af       	sts	0x7a, r19
    1426:	29 af       	sts	0x79, r18
    1428:	e0 31       	cpi	r30, 0x10	; 16
    142a:	f1 05       	cpc	r31, r1
    142c:	09 f0       	breq	.+2      	; 0x1430 <tune_8ths+0x2de>
    142e:	32 cf       	rjmp	.-412    	; 0x1294 <tune_8ths+0x142>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		
		PORTF &= ~(1<<GATE); //turn gate off
    1430:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    1432:	ee 96       	adiw	r28, 0x3e	; 62
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	df 90       	pop	r13
    144c:	cf 90       	pop	r12
    144e:	bf 90       	pop	r11
    1450:	af 90       	pop	r10
    1452:	9f 90       	pop	r9
    1454:	8f 90       	pop	r8
    1456:	7f 90       	pop	r7
    1458:	6f 90       	pop	r6
    145a:	5f 90       	pop	r5
    145c:	4f 90       	pop	r4
    145e:	3f 90       	pop	r3
    1460:	2f 90       	pop	r2
    1462:	08 95       	ret

00001464 <tune_filter>:
	
void tune_filter(void) {
    1464:	2f 92       	push	r2
    1466:	3f 92       	push	r3
    1468:	4f 92       	push	r4
    146a:	5f 92       	push	r5
    146c:	6f 92       	push	r6
    146e:	7f 92       	push	r7
    1470:	8f 92       	push	r8
    1472:	9f 92       	push	r9
    1474:	af 92       	push	r10
    1476:	bf 92       	push	r11
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	e5 97       	sbiw	r28, 0x35	; 53
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    1498:	de 01       	movw	r26, r28
    149a:	11 96       	adiw	r26, 0x01	; 1
    149c:	ec ed       	ldi	r30, 0xDC	; 220
    149e:	f1 e0       	ldi	r31, 0x01	; 1
    14a0:	8d e2       	ldi	r24, 0x2D	; 45
    14a2:	01 90       	ld	r0, Z+
    14a4:	0d 92       	st	X+, r0
    14a6:	81 50       	subi	r24, 0x01	; 1
    14a8:	e1 f7       	brne	.-8      	; 0x14a2 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    14aa:	80 e3       	ldi	r24, 0x30	; 48
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    14b6:	82 e4       	ldi	r24, 0x42	; 66
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    14c2:	84 e4       	ldi	r24, 0x44	; 68
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    14ce:	8f e2       	ldi	r24, 0x2F	; 47
    14d0:	92 e0       	ldi	r25, 0x02	; 2
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    14da:	84 e3       	ldi	r24, 0x34	; 52
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    14e6:	8e e3       	ldi	r24, 0x3E	; 62
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    14f2:	80 e4       	ldi	r24, 0x40	; 64
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    14fe:	82 e2       	ldi	r24, 0x22	; 34
    1500:	91 e0       	ldi	r25, 0x01	; 1
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    150a:	8c e2       	ldi	r24, 0x2C	; 44
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1516:	84 e2       	ldi	r24, 0x24	; 36
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1522:	86 e2       	ldi	r24, 0x26	; 38
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    152e:	88 e2       	ldi	r24, 0x28	; 40
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	6f ef       	ldi	r22, 0xFF	; 255
    1534:	7f e3       	ldi	r23, 0x3F	; 63
    1536:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    153a:	8a e2       	ldi	r24, 0x2A	; 42
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	6f ef       	ldi	r22, 0xFF	; 255
    1540:	7f e3       	ldi	r23, 0x3F	; 63
    1542:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1546:	82 e3       	ldi	r24, 0x32	; 50
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1552:	8c e1       	ldi	r24, 0x1C	; 28
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    155e:	88 e1       	ldi	r24, 0x18	; 24
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    156a:	84 e1       	ldi	r24, 0x14	; 20
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	6f ef       	ldi	r22, 0xFF	; 255
    1570:	7f e3       	ldi	r23, 0x3F	; 63
    1572:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1576:	80 e1       	ldi	r24, 0x10	; 16
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    158e:	86 e4       	ldi	r24, 0x46	; 70
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    159a:	88 e4       	ldi	r24, 0x48	; 72
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    15a6:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    15a8:	ed ed       	ldi	r30, 0xDD	; 221
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 64       	ori	r24, 0x40	; 64
    15b0:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 7b       	andi	r24, 0xBF	; 191
    15b6:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	80 93 ef 02 	sts	0x02EF, r24
	PORTF |= (1<<GATE); //turn gate on
    15be:	89 9a       	sbi	0x11, 1	; 17
    15c0:	9e 01       	movw	r18, r28
    15c2:	2f 5f       	subi	r18, 0xFF	; 255
    15c4:	3f 4f       	sbci	r19, 0xFF	; 255
    15c6:	39 ab       	sts	0x59, r19
    15c8:	28 ab       	sts	0x58, r18
    15ca:	84 e8       	ldi	r24, 0x84	; 132
    15cc:	92 e0       	ldi	r25, 0x02	; 2
    15ce:	9d ab       	sts	0x5d, r25
    15d0:	8c ab       	sts	0x5c, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    15d2:	1b aa       	sts	0x9b, r17
    15d4:	1a aa       	sts	0x9a, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    15d6:	0f 2e       	mov	r0, r31
    15d8:	f8 e2       	ldi	r31, 0x28	; 40
    15da:	ef 2e       	mov	r14, r31
    15dc:	f1 e0       	ldi	r31, 0x01	; 1
    15de:	ff 2e       	mov	r15, r31
    15e0:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				//need to have a watchdog timer here to escape while loop if it takes too long
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    15e2:	0f 2e       	mov	r0, r31
    15e4:	f0 e3       	ldi	r31, 0x30	; 48
    15e6:	cf 2e       	mov	r12, r31
    15e8:	f1 e0       	ldi	r31, 0x01	; 1
    15ea:	df 2e       	mov	r13, r31
    15ec:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    15ee:	0f 2e       	mov	r0, r31
    15f0:	fa e2       	ldi	r31, 0x2A	; 42
    15f2:	af 2e       	mov	r10, r31
    15f4:	f1 e0       	ldi	r31, 0x01	; 1
    15f6:	bf 2e       	mov	r11, r31
    15f8:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    15fa:	0f 2e       	mov	r0, r31
    15fc:	f4 e1       	ldi	r31, 0x14	; 20
    15fe:	8f 2e       	mov	r8, r31
    1600:	f1 e0       	ldi	r31, 0x01	; 1
    1602:	9f 2e       	mov	r9, r31
    1604:	f0 2d       	mov	r31, r0
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    1606:	0f 2e       	mov	r0, r31
    1608:	fc e1       	ldi	r31, 0x1C	; 28
    160a:	6f 2e       	mov	r6, r31
    160c:	f1 e0       	ldi	r31, 0x01	; 1
    160e:	7f 2e       	mov	r7, r31
    1610:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    1612:	a8 a9       	sts	0x48, r26
    1614:	b9 a9       	sts	0x49, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    1616:	8c 91       	ld	r24, X
    1618:	80 93 ef 02 	sts	0x02EF, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    161c:	84 b5       	in	r24, 0x24	; 36
    161e:	8f 60       	ori	r24, 0x0F	; 15
    1620:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1626:	ee e6       	ldi	r30, 0x6E	; 110
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	82 60       	ori	r24, 0x02	; 2
    162e:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    1630:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    1632:	ea a9       	sts	0x4a, r30
    1634:	fb a9       	sts	0x4b, r31
    1636:	e2 30       	cpi	r30, 0x02	; 2
    1638:	f1 05       	cpc	r31, r1
    163a:	24 f4       	brge	.+8      	; 0x1644 <tune_filter+0x1e0>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	80 93 ee 02 	sts	0x02EE, r24
    1642:	03 c0       	rjmp	.+6      	; 0x164a <tune_filter+0x1e6>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	80 93 ee 02 	sts	0x02EE, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    164a:	11 96       	adiw	r26, 0x01	; 1
    164c:	2d 91       	ld	r18, X+
    164e:	3c 91       	ld	r19, X
    1650:	12 97       	sbiw	r26, 0x02	; 2
    1652:	3f a7       	lds	r19, 0x7f
    1654:	2e a7       	lds	r18, 0x7e
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1656:	0f 2e       	mov	r0, r31
    1658:	fd e0       	ldi	r31, 0x0D	; 13
    165a:	4f 2e       	mov	r4, r31
    165c:	55 24       	eor	r5, r5
    165e:	f0 2d       	mov	r31, r0
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    1660:	00 e0       	ldi	r16, 0x00	; 0
    1662:	10 e0       	ldi	r17, 0x00	; 0
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    1664:	22 24       	eor	r2, r2
    1666:	33 24       	eor	r3, r3
    1668:	23 94       	inc	r2
    166a:	04 2c       	mov	r0, r4
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <tune_filter+0x20e>
    166e:	22 0c       	add	r2, r2
    1670:	33 1c       	adc	r3, r3
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <tune_filter+0x20a>
    1676:	02 29       	or	r16, r2
    1678:	13 29       	or	r17, r3

			set_control_voltage(&cutoff_cv, pitch_cv);
    167a:	c7 01       	movw	r24, r14
    167c:	b8 01       	movw	r22, r16
    167e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			count_finished = FALSE;
    1682:	10 92 ed 02 	sts	0x02ED, r1
			period_counter = 0;
    1686:	10 92 f0 02 	sts	0x02F0, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    168a:	88 e1       	ldi	r24, 0x18	; 24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	ef e0       	ldi	r30, 0x0F	; 15
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	a8 95       	wdr
    1696:	80 93 60 00 	sts	0x0060, r24
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	e0 93 60 00 	sts	0x0060, r30
			while (count_finished == FALSE) {
    16a0:	80 91 ed 02 	lds	r24, 0x02ED
    16a4:	88 23       	and	r24, r24
    16a6:	21 f5       	brne	.+72     	; 0x16f0 <tune_filter+0x28c>
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    16a8:	80 91 ef 02 	lds	r24, 0x02EF
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	84 5d       	subi	r24, 0xD4	; 212
    16b0:	9e 4f       	sbci	r25, 0xFE	; 254
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				//need to have a watchdog timer here to escape while loop if it takes too long
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    16b8:	c7 01       	movw	r24, r14
    16ba:	b8 01       	movw	r22, r16
    16bc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    16c0:	c6 01       	movw	r24, r12
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    16ca:	c5 01       	movw	r24, r10
    16cc:	6f ef       	ldi	r22, 0xFF	; 255
    16ce:	7f e3       	ldi	r23, 0x3F	; 63
    16d0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    16d4:	c4 01       	movw	r24, r8
    16d6:	6f ef       	ldi	r22, 0xFF	; 255
    16d8:	7f e3       	ldi	r23, 0x3F	; 63
    16da:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    16de:	c3 01       	movw	r24, r6
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    16e8:	80 91 ed 02 	lds	r24, 0x02ED
    16ec:	88 23       	and	r24, r24
    16ee:	e1 f2       	breq	.-72     	; 0x16a8 <tune_filter+0x244>
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
						
			}
			//turn off watchdog timer
			wdt_disable();
    16f0:	f8 e1       	ldi	r31, 0x18	; 24
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	f0 93 60 00 	sts	0x0060, r31
    16fa:	10 92 60 00 	sts	0x0060, r1
    16fe:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    1700:	80 91 eb 02 	lds	r24, 0x02EB
    1704:	90 91 ec 02 	lds	r25, 0x02EC
    1708:	2e a5       	lds	r18, 0x6e
    170a:	3f a5       	lds	r19, 0x6f
    170c:	28 17       	cp	r18, r24
    170e:	39 07       	cpc	r19, r25
    1710:	48 f0       	brcs	.+18     	; 0x1724 <tune_filter+0x2c0>
    1712:	80 91 2b 02 	lds	r24, 0x022B
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	29 f4       	brne	.+10     	; 0x1724 <tune_filter+0x2c0>
    171a:	c1 01       	movw	r24, r2
    171c:	80 95       	com	r24
    171e:	90 95       	com	r25
    1720:	08 23       	and	r16, r24
    1722:	19 23       	and	r17, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    1724:	80 91 eb 02 	lds	r24, 0x02EB
    1728:	90 91 ec 02 	lds	r25, 0x02EC
    172c:	ee a5       	lds	r30, 0x6e
    172e:	ff a5       	lds	r31, 0x6f
    1730:	8e 17       	cp	r24, r30
    1732:	9f 07       	cpc	r25, r31
    1734:	21 f4       	brne	.+8      	; 0x173e <tune_filter+0x2da>
    1736:	80 91 2b 02 	lds	r24, 0x022B
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	61 f0       	breq	.+24     	; 0x1756 <tune_filter+0x2f2>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	80 93 2b 02 	sts	0x022B, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1744:	08 94       	sec
    1746:	41 08       	sbc	r4, r1
    1748:	51 08       	sbc	r5, r1
    174a:	ff ef       	ldi	r31, 0xFF	; 255
    174c:	4f 16       	cp	r4, r31
    174e:	ff ef       	ldi	r31, 0xFF	; 255
    1750:	5f 06       	cpc	r5, r31
    1752:	09 f0       	breq	.+2      	; 0x1756 <tune_filter+0x2f2>
    1754:	87 cf       	rjmp	.-242    	; 0x1664 <tune_filter+0x200>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    1756:	2a a9       	sts	0x4a, r18
    1758:	3b a9       	sts	0x4b, r19
    175a:	2f 5f       	subi	r18, 0xFF	; 255
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	3b ab       	sts	0x5b, r19
    1760:	2a ab       	sts	0x5a, r18
    1762:	c8 01       	movw	r24, r16
    1764:	80 96       	adiw	r24, 0x20	; 32
    1766:	ec a9       	sts	0x4c, r30
    1768:	fd a9       	sts	0x4d, r31
    176a:	81 93       	st	Z+, r24
    176c:	91 93       	st	Z+, r25
    176e:	fd ab       	sts	0x5d, r31
    1770:	ec ab       	sts	0x5c, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    1772:	ee e6       	ldi	r30, 0x6E	; 110
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8d 7f       	andi	r24, 0xFD	; 253
    177a:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    177c:	14 bc       	out	0x24, r1	; 36
    177e:	28 a9       	sts	0x48, r18
    1780:	39 a9       	sts	0x49, r19
    1782:	2d 5f       	subi	r18, 0xFD	; 253
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	39 ab       	sts	0x59, r19
    1788:	28 ab       	sts	0x58, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    178a:	8a a9       	sts	0x4a, r24
    178c:	9b a9       	sts	0x4b, r25
    178e:	8f 30       	cpi	r24, 0x0F	; 15
    1790:	91 05       	cpc	r25, r1
    1792:	09 f0       	breq	.+2      	; 0x1796 <tune_filter+0x332>
    1794:	3e cf       	rjmp	.-388    	; 0x1612 <tune_filter+0x1ae>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    1796:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    1798:	e5 96       	adiw	r28, 0x35	; 53
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	7f 90       	pop	r7
    17be:	6f 90       	pop	r6
    17c0:	5f 90       	pop	r5
    17c2:	4f 90       	pop	r4
    17c4:	3f 90       	pop	r3
    17c6:	2f 90       	pop	r2
    17c8:	08 95       	ret

000017ca <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    17ca:	82 e8       	ldi	r24, 0x82	; 130
    17cc:	92 e0       	ldi	r25, 0x02	; 2
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	40 e2       	ldi	r20, 0x20	; 32
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	0e 94 28 14 	call	0x2850	; 0x2850 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    17da:	84 ec       	ldi	r24, 0xC4	; 196
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	62 e4       	ldi	r22, 0x42	; 66
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	42 e2       	ldi	r20, 0x22	; 34
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	0e 94 28 14 	call	0x2850	; 0x2850 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    17ea:	82 ea       	ldi	r24, 0xA2	; 162
    17ec:	92 e0       	ldi	r25, 0x02	; 2
    17ee:	60 e2       	ldi	r22, 0x20	; 32
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	42 e2       	ldi	r20, 0x22	; 34
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	0e 94 28 14 	call	0x2850	; 0x2850 <__eeupd_block_m6450a>
	
	
}
    17fa:	08 95       	ret

000017fc <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    17fc:	86 e6       	ldi	r24, 0x66	; 102
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 22 14 	call	0x2844	; 0x2844 <__eerd_word_m6450a>
    1804:	90 93 e9 02 	sts	0x02E9, r25
    1808:	80 93 e8 02 	sts	0x02E8, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    180c:	84 e6       	ldi	r24, 0x64	; 100
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 22 14 	call	0x2844	; 0x2844 <__eerd_word_m6450a>
    1814:	90 93 e7 02 	sts	0x02E7, r25
    1818:	80 93 e6 02 	sts	0x02E6, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    181c:	84 ec       	ldi	r24, 0xC4	; 196
    181e:	92 e0       	ldi	r25, 0x02	; 2
    1820:	62 e4       	ldi	r22, 0x42	; 66
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	42 e2       	ldi	r20, 0x22	; 34
    1826:	50 e0       	ldi	r21, 0x00	; 0
    1828:	0e 94 12 14 	call	0x2824	; 0x2824 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    182c:	82 ea       	ldi	r24, 0xA2	; 162
    182e:	92 e0       	ldi	r25, 0x02	; 2
    1830:	60 e2       	ldi	r22, 0x20	; 32
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	42 e2       	ldi	r20, 0x22	; 34
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	0e 94 12 14 	call	0x2824	; 0x2824 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    183c:	82 e8       	ldi	r24, 0x82	; 130
    183e:	92 e0       	ldi	r25, 0x02	; 2
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	0e 94 12 14 	call	0x2824	; 0x2824 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    184c:	08 95       	ret

0000184e <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    184e:	98 2f       	mov	r25, r24
    1850:	96 95       	lsr	r25
    1852:	96 95       	lsr	r25
    1854:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    1856:	29 2f       	mov	r18, r25
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	f9 01       	movw	r30, r18
    185c:	31 97       	sbiw	r30, 0x01	; 1
    185e:	ee 0f       	add	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	e6 0f       	add	r30, r22
    1864:	f7 1f       	adc	r31, r23
    1866:	01 90       	ld	r0, Z+
    1868:	f0 81       	ld	r31, Z
    186a:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    186c:	22 0f       	add	r18, r18
    186e:	33 1f       	adc	r19, r19
    1870:	26 0f       	add	r18, r22
    1872:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	
    1874:	d9 01       	movw	r26, r18
    1876:	4d 91       	ld	r20, X+
    1878:	5c 91       	ld	r21, X
    187a:	11 97       	sbiw	r26, 0x01	; 1
    187c:	4e 1b       	sub	r20, r30
    187e:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    1880:	99 0f       	add	r25, r25
    1882:	99 0f       	add	r25, r25
    1884:	99 0f       	add	r25, r25
    1886:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	48 9f       	mul	r20, r24
    188c:	90 01       	movw	r18, r0
    188e:	49 9f       	mul	r20, r25
    1890:	30 0d       	add	r19, r0
    1892:	58 9f       	mul	r21, r24
    1894:	30 0d       	add	r19, r0
    1896:	11 24       	eor	r1, r1
    1898:	36 95       	lsr	r19
    189a:	27 95       	ror	r18
    189c:	36 95       	lsr	r19
    189e:	27 95       	ror	r18
    18a0:	36 95       	lsr	r19
    18a2:	27 95       	ror	r18
    18a4:	e2 0f       	add	r30, r18
    18a6:	f3 1f       	adc	r31, r19
	
	return interpolated_pitch_cv;
	
}
    18a8:	8e 2f       	mov	r24, r30
    18aa:	9f 2f       	mov	r25, r31
    18ac:	08 95       	ret

000018ae <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) {
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	a2 97       	sbiw	r28, 0x22	; 34
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    18c2:	de 01       	movw	r26, r28
    18c4:	11 96       	adiw	r26, 0x01	; 1
    18c6:	e9 e0       	ldi	r30, 0x09	; 9
    18c8:	f2 e0       	ldi	r31, 0x02	; 2
    18ca:	82 e2       	ldi	r24, 0x22	; 34
    18cc:	01 90       	ld	r0, Z+
    18ce:	0d 92       	st	X+, r0
    18d0:	81 50       	subi	r24, 0x01	; 1
    18d2:	e1 f7       	brne	.-8      	; 0x18cc <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    18d4:	a4 ec       	ldi	r26, 0xC4	; 196
    18d6:	b2 e0       	ldi	r27, 0x02	; 2
    18d8:	fe 01       	movw	r30, r28
    18da:	31 96       	adiw	r30, 0x01	; 1
    18dc:	82 e2       	ldi	r24, 0x22	; 34
    18de:	01 90       	ld	r0, Z+
    18e0:	0d 92       	st	X+, r0
    18e2:	81 50       	subi	r24, 0x01	; 1
    18e4:	e1 f7       	brne	.-8      	; 0x18de <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    18e6:	a2 ea       	ldi	r26, 0xA2	; 162
    18e8:	b2 e0       	ldi	r27, 0x02	; 2
    18ea:	fe 01       	movw	r30, r28
    18ec:	31 96       	adiw	r30, 0x01	; 1
    18ee:	82 e2       	ldi	r24, 0x22	; 34
    18f0:	01 90       	ld	r0, Z+
    18f2:	0d 92       	st	X+, r0
    18f4:	81 50       	subi	r24, 0x01	; 1
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <set_one_volt_per_octave+0x42>
	
	
    18f8:	a2 96       	adiw	r28, 0x22	; 34
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    190a:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    190c:	80 91 f4 02 	lds	r24, 0x02F4
    1910:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    1912:	89 27       	eor	r24, r25
    1914:	80 93 f4 02 	sts	0x02F4, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    1918:	89 23       	and	r24, r25
    191a:	08 95       	ret

0000191c <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    191c:	ed ed       	ldi	r30, 0xDD	; 221
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	90 81       	ld	r25, Z
    1922:	9f 7b       	andi	r25, 0xBF	; 191
    1924:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	21 70       	andi	r18, 0x01	; 1
    192c:	30 70       	andi	r19, 0x00	; 0
    192e:	22 0f       	add	r18, r18
    1930:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    1932:	68 2f       	mov	r22, r24
    1934:	62 95       	swap	r22
    1936:	66 95       	lsr	r22
    1938:	67 70       	andi	r22, 0x07	; 7
    193a:	67 95       	ror	r22
    193c:	66 27       	eor	r22, r22
    193e:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1940:	26 2b       	or	r18, r22
    1942:	98 2f       	mov	r25, r24
    1944:	96 95       	lsr	r25
    1946:	96 95       	lsr	r25
    1948:	91 70       	andi	r25, 0x01	; 1
    194a:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    194c:	68 2f       	mov	r22, r24
    194e:	66 1f       	adc	r22, r22
    1950:	66 27       	eor	r22, r22
    1952:	66 1f       	adc	r22, r22
    1954:	66 0f       	add	r22, r22
    1956:	66 0f       	add	r22, r22
    1958:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    195a:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    195c:	a8 2f       	mov	r26, r24
    195e:	a6 95       	lsr	r26
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	a1 70       	andi	r26, 0x01	; 1
    1964:	b0 70       	andi	r27, 0x00	; 0
    1966:	bd 01       	movw	r22, r26
    1968:	66 0f       	add	r22, r22
    196a:	77 1f       	adc	r23, r23
    196c:	66 0f       	add	r22, r22
    196e:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1970:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    1972:	68 2f       	mov	r22, r24
    1974:	62 95       	swap	r22
    1976:	6f 70       	andi	r22, 0x0F	; 15
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	61 70       	andi	r22, 0x01	; 1
    197c:	70 70       	andi	r23, 0x00	; 0
    197e:	ab 01       	movw	r20, r22
    1980:	00 24       	eor	r0, r0
    1982:	56 95       	lsr	r21
    1984:	47 95       	ror	r20
    1986:	07 94       	ror	r0
    1988:	56 95       	lsr	r21
    198a:	47 95       	ror	r20
    198c:	07 94       	ror	r0
    198e:	54 2f       	mov	r21, r20
    1990:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1992:	62 2f       	mov	r22, r18
    1994:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    1996:	48 2f       	mov	r20, r24
    1998:	42 95       	swap	r20
    199a:	46 95       	lsr	r20
    199c:	46 95       	lsr	r20
    199e:	43 70       	andi	r20, 0x03	; 3
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	41 70       	andi	r20, 0x01	; 1
    19a4:	50 70       	andi	r21, 0x00	; 0
    19a6:	9a 01       	movw	r18, r20
    19a8:	22 0f       	add	r18, r18
    19aa:	33 1f       	adc	r19, r19
    19ac:	22 95       	swap	r18
    19ae:	32 95       	swap	r19
    19b0:	30 7f       	andi	r19, 0xF0	; 240
    19b2:	32 27       	eor	r19, r18
    19b4:	20 7f       	andi	r18, 0xF0	; 240
    19b6:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    19b8:	46 2f       	mov	r20, r22
    19ba:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    19bc:	86 95       	lsr	r24
    19be:	86 95       	lsr	r24
    19c0:	86 95       	lsr	r24
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	21 70       	andi	r18, 0x01	; 1
    19c8:	30 70       	andi	r19, 0x00	; 0
    19ca:	c9 01       	movw	r24, r18
    19cc:	82 95       	swap	r24
    19ce:	92 95       	swap	r25
    19d0:	90 7f       	andi	r25, 0xF0	; 240
    19d2:	98 27       	eor	r25, r24
    19d4:	80 7f       	andi	r24, 0xF0	; 240
    19d6:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    19d8:	84 2b       	or	r24, r20
    19da:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    19dc:	80 81       	ld	r24, Z
    19de:	80 64       	ori	r24, 0x40	; 64
    19e0:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    19e2:	80 81       	ld	r24, Z
    19e4:	8f 7b       	andi	r24, 0xBF	; 191
    19e6:	80 83       	st	Z, r24
	DATA_BUS = 0;
    19e8:	12 b8       	out	0x02, r1	; 2
	
	
    19ea:	08 95       	ret

000019ec <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    19ec:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    19ee:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    19f0:	74 83       	std	Z+4, r23	; 0x04
    19f2:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    19f4:	11 82       	std	Z+1, r1	; 0x01
    19f6:	10 82       	st	Z, r1
}
    19f8:	08 95       	ret

000019fa <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	ec 01       	movw	r28, r24
    1a02:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1a04:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <store_and_clear_interrupt>
    1a08:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1a0a:	39 81       	ldd	r19, Y+1	; 0x01
    1a0c:	83 2f       	mov	r24, r19
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	6a 81       	ldd	r22, Y+2	; 0x02
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__divmodhi4>
    1a1a:	48 81       	ld	r20, Y
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	84 17       	cp	r24, r20
    1a20:	95 07       	cpc	r25, r21
    1a22:	29 f4       	brne	.+10     	; 0x1a2e <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    1a24:	82 2f       	mov	r24, r18
    1a26:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <restore_interrupt_setting>
      return false;
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	11 c0       	rjmp	.+34     	; 0x1a50 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    1a2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a30:	fc 81       	ldd	r31, Y+4	; 0x04
    1a32:	e3 0f       	add	r30, r19
    1a34:	f1 1d       	adc	r31, r1
    1a36:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__divmodhi4>
    1a46:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1a48:	82 2f       	mov	r24, r18
    1a4a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <restore_interrupt_setting>
      return true;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	08 95       	ret

00001a58 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1a5e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1a62:	29 81       	ldd	r18, Y+1	; 0x01
    1a64:	98 81       	ld	r25, Y
    1a66:	29 17       	cp	r18, r25
    1a68:	18 f0       	brcs	.+6      	; 0x1a70 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1a6a:	c2 2f       	mov	r28, r18
    1a6c:	c9 1b       	sub	r28, r25
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    1a70:	ca 81       	ldd	r28, Y+2	; 0x02
    1a72:	c2 0f       	add	r28, r18
    1a74:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    1a76:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <restore_interrupt_setting>
   return len;
}
    1a7a:	8c 2f       	mov	r24, r28
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	08 95       	ret

00001a82 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1a82:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1a84:	20 81       	ld	r18, Z
    1a86:	86 2f       	mov	r24, r22
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	82 0f       	add	r24, r18
    1a8c:	91 1d       	adc	r25, r1
    1a8e:	62 81       	ldd	r22, Z+2	; 0x02
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__divmodhi4>
    1a96:	03 80       	ldd	r0, Z+3	; 0x03
    1a98:	f4 81       	ldd	r31, Z+4	; 0x04
    1a9a:	e0 2d       	mov	r30, r0
    1a9c:	e8 0f       	add	r30, r24
    1a9e:	f9 1f       	adc	r31, r25
}
    1aa0:	80 81       	ld	r24, Z
    1aa2:	08 95       	ret

00001aa4 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
    1aac:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1aae:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <store_and_clear_interrupt>
    1ab2:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1ab4:	88 81       	ld	r24, Y
    1ab6:	21 2f       	mov	r18, r17
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	28 0f       	add	r18, r24
    1abc:	31 1d       	adc	r19, r1
    1abe:	6a 81       	ldd	r22, Y+2	; 0x02
    1ac0:	c9 01       	movw	r24, r18
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__divmodhi4>
    1ac8:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1aca:	84 2f       	mov	r24, r20
    1acc:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <restore_interrupt_setting>
}
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	08 95       	ret

00001ad8 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1ad8:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1ada:	f8 94       	cli
   return sreg;
}
    1adc:	08 95       	ret

00001ade <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1ade:	8f bf       	out	0x3f, r24	; 63
}
    1ae0:	08 95       	ret

00001ae2 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	88 27       	eor	r24, r24
    1ae6:	88 1f       	adc	r24, r24
    1ae8:	08 95       	ret

00001aea <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1aea:	91 e0       	ldi	r25, 0x01	; 1
    1aec:	88 3f       	cpi	r24, 0xF8	; 248
    1aee:	08 f4       	brcc	.+2      	; 0x1af2 <midi_is_realtime+0x8>
    1af0:	90 e0       	ldi	r25, 0x00	; 0
}
    1af2:	89 2f       	mov	r24, r25
    1af4:	08 95       	ret

00001af6 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	20 7f       	andi	r18, 0xF0	; 240
    1afc:	30 70       	andi	r19, 0x00	; 0
    1afe:	20 3c       	cpi	r18, 0xC0	; 192
    1b00:	31 05       	cpc	r19, r1
    1b02:	e9 f1       	breq	.+122    	; 0x1b7e <midi_packet_length+0x88>
    1b04:	21 3c       	cpi	r18, 0xC1	; 193
    1b06:	31 05       	cpc	r19, r1
    1b08:	8c f4       	brge	.+34     	; 0x1b2c <midi_packet_length+0x36>
    1b0a:	20 39       	cpi	r18, 0x90	; 144
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	e1 f0       	breq	.+56     	; 0x1b48 <midi_packet_length+0x52>
    1b10:	21 39       	cpi	r18, 0x91	; 145
    1b12:	31 05       	cpc	r19, r1
    1b14:	24 f4       	brge	.+8      	; 0x1b1e <midi_packet_length+0x28>
    1b16:	20 38       	cpi	r18, 0x80	; 128
    1b18:	31 05       	cpc	r19, r1
    1b1a:	79 f5       	brne	.+94     	; 0x1b7a <midi_packet_length+0x84>
    1b1c:	15 c0       	rjmp	.+42     	; 0x1b48 <midi_packet_length+0x52>
    1b1e:	20 3a       	cpi	r18, 0xA0	; 160
    1b20:	31 05       	cpc	r19, r1
    1b22:	91 f0       	breq	.+36     	; 0x1b48 <midi_packet_length+0x52>
    1b24:	20 3b       	cpi	r18, 0xB0	; 176
    1b26:	31 05       	cpc	r19, r1
    1b28:	41 f5       	brne	.+80     	; 0x1b7a <midi_packet_length+0x84>
    1b2a:	0e c0       	rjmp	.+28     	; 0x1b48 <midi_packet_length+0x52>
    1b2c:	20 3e       	cpi	r18, 0xE0	; 224
    1b2e:	31 05       	cpc	r19, r1
    1b30:	59 f0       	breq	.+22     	; 0x1b48 <midi_packet_length+0x52>
    1b32:	21 3e       	cpi	r18, 0xE1	; 225
    1b34:	31 05       	cpc	r19, r1
    1b36:	24 f4       	brge	.+8      	; 0x1b40 <midi_packet_length+0x4a>
    1b38:	20 3d       	cpi	r18, 0xD0	; 208
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	f1 f4       	brne	.+60     	; 0x1b7a <midi_packet_length+0x84>
    1b3e:	1f c0       	rjmp	.+62     	; 0x1b7e <midi_packet_length+0x88>
    1b40:	20 3f       	cpi	r18, 0xF0	; 240
    1b42:	31 05       	cpc	r19, r1
    1b44:	d1 f4       	brne	.+52     	; 0x1b7a <midi_packet_length+0x84>
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1b48:	83 e0       	ldi	r24, 0x03	; 3
    1b4a:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    1b4c:	86 3f       	cpi	r24, 0xF6	; 246
    1b4e:	79 f0       	breq	.+30     	; 0x1b6e <midi_packet_length+0x78>
    1b50:	87 3f       	cpi	r24, 0xF7	; 247
    1b52:	38 f4       	brcc	.+14     	; 0x1b62 <midi_packet_length+0x6c>
    1b54:	82 3f       	cpi	r24, 0xF2	; 242
    1b56:	a9 f0       	breq	.+42     	; 0x1b82 <midi_packet_length+0x8c>
    1b58:	83 3f       	cpi	r24, 0xF3	; 243
    1b5a:	59 f0       	breq	.+22     	; 0x1b72 <midi_packet_length+0x7c>
    1b5c:	81 3f       	cpi	r24, 0xF1	; 241
    1b5e:	59 f4       	brne	.+22     	; 0x1b76 <midi_packet_length+0x80>
    1b60:	08 c0       	rjmp	.+16     	; 0x1b72 <midi_packet_length+0x7c>
    1b62:	88 3f       	cpi	r24, 0xF8	; 248
    1b64:	40 f0       	brcs	.+16     	; 0x1b76 <midi_packet_length+0x80>
    1b66:	8d 3f       	cpi	r24, 0xFD	; 253
    1b68:	10 f0       	brcs	.+4      	; 0x1b6e <midi_packet_length+0x78>
    1b6a:	8e 3f       	cpi	r24, 0xFE	; 254
    1b6c:	20 f0       	brcs	.+8      	; 0x1b76 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1b82:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1b84:	08 95       	ret

00001b86 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1b86:	0f 93       	push	r16
    1b88:	34 2f       	mov	r19, r20
    1b8a:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1b8c:	46 2f       	mov	r20, r22
    1b8e:	4f 70       	andi	r20, 0x0F	; 15
    1b90:	40 6b       	ori	r20, 0xB0	; 176
    1b92:	23 2f       	mov	r18, r19
    1b94:	2f 77       	andi	r18, 0x7F	; 127
    1b96:	0f 77       	andi	r16, 0x7F	; 127
    1b98:	dc 01       	movw	r26, r24
    1b9a:	ed 91       	ld	r30, X+
    1b9c:	fc 91       	ld	r31, X
    1b9e:	63 e0       	ldi	r22, 0x03	; 3
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1ba4:	0f 91       	pop	r16
    1ba6:	08 95       	ret

00001ba8 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1ba8:	0f 93       	push	r16
    1baa:	34 2f       	mov	r19, r20
    1bac:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1bae:	46 2f       	mov	r20, r22
    1bb0:	4f 70       	andi	r20, 0x0F	; 15
    1bb2:	40 69       	ori	r20, 0x90	; 144
    1bb4:	23 2f       	mov	r18, r19
    1bb6:	2f 77       	andi	r18, 0x7F	; 127
    1bb8:	0f 77       	andi	r16, 0x7F	; 127
    1bba:	dc 01       	movw	r26, r24
    1bbc:	ed 91       	ld	r30, X+
    1bbe:	fc 91       	ld	r31, X
    1bc0:	63 e0       	ldi	r22, 0x03	; 3
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1bc6:	0f 91       	pop	r16
    1bc8:	08 95       	ret

00001bca <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1bca:	0f 93       	push	r16
    1bcc:	34 2f       	mov	r19, r20
    1bce:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1bd0:	46 2f       	mov	r20, r22
    1bd2:	4f 70       	andi	r20, 0x0F	; 15
    1bd4:	40 68       	ori	r20, 0x80	; 128
    1bd6:	23 2f       	mov	r18, r19
    1bd8:	2f 77       	andi	r18, 0x7F	; 127
    1bda:	0f 77       	andi	r16, 0x7F	; 127
    1bdc:	dc 01       	movw	r26, r24
    1bde:	ed 91       	ld	r30, X+
    1be0:	fc 91       	ld	r31, X
    1be2:	63 e0       	ldi	r22, 0x03	; 3
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1be8:	0f 91       	pop	r16
    1bea:	08 95       	ret

00001bec <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1bec:	0f 93       	push	r16
    1bee:	34 2f       	mov	r19, r20
    1bf0:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    1bf2:	46 2f       	mov	r20, r22
    1bf4:	4f 70       	andi	r20, 0x0F	; 15
    1bf6:	40 6a       	ori	r20, 0xA0	; 160
    1bf8:	23 2f       	mov	r18, r19
    1bfa:	2f 77       	andi	r18, 0x7F	; 127
    1bfc:	0f 77       	andi	r16, 0x7F	; 127
    1bfe:	dc 01       	movw	r26, r24
    1c00:	ed 91       	ld	r30, X+
    1c02:	fc 91       	ld	r31, X
    1c04:	63 e0       	ldi	r22, 0x03	; 3
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    1c0a:	0f 91       	pop	r16
    1c0c:	08 95       	ret

00001c0e <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1c12:	20 e2       	ldi	r18, 0x20	; 32
    1c14:	40 30       	cpi	r20, 0x00	; 0
    1c16:	52 07       	cpc	r21, r18
    1c18:	44 f4       	brge	.+16     	; 0x1c2a <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    1c1a:	a0 ee       	ldi	r26, 0xE0	; 224
    1c1c:	40 30       	cpi	r20, 0x00	; 0
    1c1e:	5a 07       	cpc	r21, r26
    1c20:	3c f0       	brlt	.+14     	; 0x1c30 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1c22:	8a 01       	movw	r16, r20
    1c24:	00 50       	subi	r16, 0x00	; 0
    1c26:	10 4e       	sbci	r17, 0xE0	; 224
    1c28:	05 c0       	rjmp	.+10     	; 0x1c34 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1c2a:	0f ef       	ldi	r16, 0xFF	; 255
    1c2c:	1f e3       	ldi	r17, 0x3F	; 63
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    1c30:	00 e0       	ldi	r16, 0x00	; 0
    1c32:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1c34:	46 2f       	mov	r20, r22
    1c36:	4f 70       	andi	r20, 0x0F	; 15
    1c38:	40 6e       	ori	r20, 0xE0	; 224
    1c3a:	20 2f       	mov	r18, r16
    1c3c:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1c3e:	00 0f       	add	r16, r16
    1c40:	01 2f       	mov	r16, r17
    1c42:	00 1f       	adc	r16, r16
    1c44:	11 0b       	sbc	r17, r17
    1c46:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1c48:	0f 77       	andi	r16, 0x7F	; 127
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	ed 91       	ld	r30, X+
    1c4e:	fc 91       	ld	r31, X
    1c50:	63 e0       	ldi	r22, 0x03	; 3
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	08 95       	ret

00001c5c <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1c5c:	0f 93       	push	r16
    1c5e:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1c60:	46 2f       	mov	r20, r22
    1c62:	4f 70       	andi	r20, 0x0F	; 15
    1c64:	40 6c       	ori	r20, 0xC0	; 192
    1c66:	2f 77       	andi	r18, 0x7F	; 127
    1c68:	dc 01       	movw	r26, r24
    1c6a:	ed 91       	ld	r30, X+
    1c6c:	fc 91       	ld	r31, X
    1c6e:	62 e0       	ldi	r22, 0x02	; 2
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	00 e0       	ldi	r16, 0x00	; 0
    1c74:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1c7a:	0f 93       	push	r16
    1c7c:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1c7e:	46 2f       	mov	r20, r22
    1c80:	4f 70       	andi	r20, 0x0F	; 15
    1c82:	40 6d       	ori	r20, 0xD0	; 208
    1c84:	2f 77       	andi	r18, 0x7F	; 127
    1c86:	dc 01       	movw	r26, r24
    1c88:	ed 91       	ld	r30, X+
    1c8a:	fc 91       	ld	r31, X
    1c8c:	62 e0       	ldi	r22, 0x02	; 2
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	00 e0       	ldi	r16, 0x00	; 0
    1c92:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1c94:	0f 91       	pop	r16
    1c96:	08 95       	ret

00001c98 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1c98:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	ed 91       	ld	r30, X+
    1c9e:	fc 91       	ld	r31, X
    1ca0:	61 e0       	ldi	r22, 0x01	; 1
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	48 ef       	ldi	r20, 0xF8	; 248
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	00 e0       	ldi	r16, 0x00	; 0
    1caa:	09 95       	icall
}
    1cac:	0f 91       	pop	r16
    1cae:	08 95       	ret

00001cb0 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1cb0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	ed 91       	ld	r30, X+
    1cb6:	fc 91       	ld	r31, X
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	49 ef       	ldi	r20, 0xF9	; 249
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	00 e0       	ldi	r16, 0x00	; 0
    1cc2:	09 95       	icall
}
    1cc4:	0f 91       	pop	r16
    1cc6:	08 95       	ret

00001cc8 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1cc8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1cca:	dc 01       	movw	r26, r24
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	61 e0       	ldi	r22, 0x01	; 1
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	4a ef       	ldi	r20, 0xFA	; 250
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	00 e0       	ldi	r16, 0x00	; 0
    1cda:	09 95       	icall
}
    1cdc:	0f 91       	pop	r16
    1cde:	08 95       	ret

00001ce0 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1ce0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	ed 91       	ld	r30, X+
    1ce6:	fc 91       	ld	r31, X
    1ce8:	61 e0       	ldi	r22, 0x01	; 1
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	4b ef       	ldi	r20, 0xFB	; 251
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	00 e0       	ldi	r16, 0x00	; 0
    1cf2:	09 95       	icall
}
    1cf4:	0f 91       	pop	r16
    1cf6:	08 95       	ret

00001cf8 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1cf8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	ed 91       	ld	r30, X+
    1cfe:	fc 91       	ld	r31, X
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	4c ef       	ldi	r20, 0xFC	; 252
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	00 e0       	ldi	r16, 0x00	; 0
    1d0a:	09 95       	icall
}
    1d0c:	0f 91       	pop	r16
    1d0e:	08 95       	ret

00001d10 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1d10:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1d12:	dc 01       	movw	r26, r24
    1d14:	ed 91       	ld	r30, X+
    1d16:	fc 91       	ld	r31, X
    1d18:	61 e0       	ldi	r22, 0x01	; 1
    1d1a:	70 e0       	ldi	r23, 0x00	; 0
    1d1c:	4e ef       	ldi	r20, 0xFE	; 254
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	00 e0       	ldi	r16, 0x00	; 0
    1d22:	09 95       	icall
}
    1d24:	0f 91       	pop	r16
    1d26:	08 95       	ret

00001d28 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1d28:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	ed 91       	ld	r30, X+
    1d2e:	fc 91       	ld	r31, X
    1d30:	61 e0       	ldi	r22, 0x01	; 1
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	4f ef       	ldi	r20, 0xFF	; 255
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	00 e0       	ldi	r16, 0x00	; 0
    1d3a:	09 95       	icall
}
    1d3c:	0f 91       	pop	r16
    1d3e:	08 95       	ret

00001d40 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1d40:	0f 93       	push	r16
   device->send_func(device, 2,
    1d42:	26 2f       	mov	r18, r22
    1d44:	2f 77       	andi	r18, 0x7F	; 127
    1d46:	dc 01       	movw	r26, r24
    1d48:	ed 91       	ld	r30, X+
    1d4a:	fc 91       	ld	r31, X
    1d4c:	62 e0       	ldi	r22, 0x02	; 2
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	41 ef       	ldi	r20, 0xF1	; 241
    1d52:	00 e0       	ldi	r16, 0x00	; 0
    1d54:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1d56:	0f 91       	pop	r16
    1d58:	08 95       	ret

00001d5a <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
   device->send_func(device, 3,
    1d5e:	26 2f       	mov	r18, r22
    1d60:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1d62:	8b 01       	movw	r16, r22
    1d64:	00 0f       	add	r16, r16
    1d66:	01 2f       	mov	r16, r17
    1d68:	00 1f       	adc	r16, r16
    1d6a:	11 0b       	sbc	r17, r17
    1d6c:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1d6e:	0f 77       	andi	r16, 0x7F	; 127
    1d70:	dc 01       	movw	r26, r24
    1d72:	ed 91       	ld	r30, X+
    1d74:	fc 91       	ld	r31, X
    1d76:	63 e0       	ldi	r22, 0x03	; 3
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	42 ef       	ldi	r20, 0xF2	; 242
    1d7c:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	08 95       	ret

00001d84 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1d84:	0f 93       	push	r16
   device->send_func(device, 2,
    1d86:	26 2f       	mov	r18, r22
    1d88:	2f 77       	andi	r18, 0x7F	; 127
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	ed 91       	ld	r30, X+
    1d8e:	fc 91       	ld	r31, X
    1d90:	62 e0       	ldi	r22, 0x02	; 2
    1d92:	70 e0       	ldi	r23, 0x00	; 0
    1d94:	43 ef       	ldi	r20, 0xF3	; 243
    1d96:	00 e0       	ldi	r16, 0x00	; 0
    1d98:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1d9e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1da0:	dc 01       	movw	r26, r24
    1da2:	ed 91       	ld	r30, X+
    1da4:	fc 91       	ld	r31, X
    1da6:	61 e0       	ldi	r22, 0x01	; 1
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	46 ef       	ldi	r20, 0xF6	; 246
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	00 e0       	ldi	r16, 0x00	; 0
    1db0:	09 95       	icall
}
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1db6:	0f 93       	push	r16
    1db8:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1dba:	dc 01       	movw	r26, r24
    1dbc:	ed 91       	ld	r30, X+
    1dbe:	fc 91       	ld	r31, X
    1dc0:	61 e0       	ldi	r22, 0x01	; 1
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	00 e0       	ldi	r16, 0x00	; 0
    1dc8:	09 95       	icall
}
    1dca:	0f 91       	pop	r16
    1dcc:	08 95       	ret

00001dce <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1dce:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	ed 91       	ld	r30, X+
    1dd4:	fc 91       	ld	r31, X
    1dd6:	09 95       	icall
}
    1dd8:	0f 91       	pop	r16
    1dda:	08 95       	ret

00001ddc <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1ddc:	6f 92       	push	r6
    1dde:	7f 92       	push	r7
    1de0:	8f 92       	push	r8
    1de2:	9f 92       	push	r9
    1de4:	af 92       	push	r10
    1de6:	bf 92       	push	r11
    1de8:	cf 92       	push	r12
    1dea:	df 92       	push	r13
    1dec:	ef 92       	push	r14
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <midi_send_array+0x1e>
    1dfa:	0f 92       	push	r0
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	4c 01       	movw	r8, r24
    1e02:	6b 01       	movw	r12, r22
    1e04:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1e06:	61 15       	cp	r22, r1
    1e08:	71 05       	cpc	r23, r1
    1e0a:	41 f1       	breq	.+80     	; 0x1e5c <midi_send_array+0x80>
    1e0c:	ee 24       	eor	r14, r14
    1e0e:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    1e10:	0f 2e       	mov	r0, r31
    1e12:	f3 e0       	ldi	r31, 0x03	; 3
    1e14:	6f 2e       	mov	r6, r31
    1e16:	77 24       	eor	r7, r7
    1e18:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    1e1a:	19 82       	std	Y+1, r1	; 0x01
    1e1c:	1a 82       	std	Y+2, r1	; 0x02
    1e1e:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    1e20:	86 01       	movw	r16, r12
    1e22:	0e 19       	sub	r16, r14
    1e24:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    1e26:	04 30       	cpi	r16, 0x04	; 4
    1e28:	11 05       	cpc	r17, r1
    1e2a:	08 f0       	brcs	.+2      	; 0x1e2e <midi_send_array+0x52>
    1e2c:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1e2e:	b5 01       	movw	r22, r10
    1e30:	6e 0d       	add	r22, r14
    1e32:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    1e34:	ce 01       	movw	r24, r28
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	40 2f       	mov	r20, r16
    1e3a:	51 2f       	mov	r21, r17
    1e3c:	0e 94 f7 13 	call	0x27ee	; 0x27ee <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    1e40:	c4 01       	movw	r24, r8
    1e42:	b8 01       	movw	r22, r16
    1e44:	49 81       	ldd	r20, Y+1	; 0x01
    1e46:	2a 81       	ldd	r18, Y+2	; 0x02
    1e48:	0b 81       	ldd	r16, Y+3	; 0x03
    1e4a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	e8 0e       	add	r14, r24
    1e54:	f9 1e       	adc	r15, r25
    1e56:	ec 14       	cp	r14, r12
    1e58:	fd 04       	cpc	r15, r13
    1e5a:	f8 f2       	brcs	.-66     	; 0x1e1a <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	ff 90       	pop	r15
    1e6c:	ef 90       	pop	r14
    1e6e:	df 90       	pop	r13
    1e70:	cf 90       	pop	r12
    1e72:	bf 90       	pop	r11
    1e74:	af 90       	pop	r10
    1e76:	9f 90       	pop	r9
    1e78:	8f 90       	pop	r8
    1e7a:	7f 90       	pop	r7
    1e7c:	6f 90       	pop	r6
    1e7e:	08 95       	ret

00001e80 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1e80:	fc 01       	movw	r30, r24
    1e82:	73 83       	std	Z+3, r23	; 0x03
    1e84:	62 83       	std	Z+2, r22	; 0x02
}
    1e86:	08 95       	ret

00001e88 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1e88:	fc 01       	movw	r30, r24
    1e8a:	75 83       	std	Z+5, r23	; 0x05
    1e8c:	64 83       	std	Z+4, r22	; 0x04
}
    1e8e:	08 95       	ret

00001e90 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1e90:	fc 01       	movw	r30, r24
    1e92:	77 83       	std	Z+7, r23	; 0x07
    1e94:	66 83       	std	Z+6, r22	; 0x06
}
    1e96:	08 95       	ret

00001e98 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1e98:	fc 01       	movw	r30, r24
    1e9a:	71 87       	std	Z+9, r23	; 0x09
    1e9c:	60 87       	std	Z+8, r22	; 0x08
}
    1e9e:	08 95       	ret

00001ea0 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	73 87       	std	Z+11, r23	; 0x0b
    1ea4:	62 87       	std	Z+10, r22	; 0x0a
}
    1ea6:	08 95       	ret

00001ea8 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	75 87       	std	Z+13, r23	; 0x0d
    1eac:	64 87       	std	Z+12, r22	; 0x0c
}
    1eae:	08 95       	ret

00001eb0 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	77 87       	std	Z+15, r23	; 0x0f
    1eb4:	66 87       	std	Z+14, r22	; 0x0e
}
    1eb6:	08 95       	ret

00001eb8 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1eb8:	fc 01       	movw	r30, r24
    1eba:	71 8b       	std	Z+17, r23	; 0x11
    1ebc:	60 8b       	std	Z+16, r22	; 0x10
}
    1ebe:	08 95       	ret

00001ec0 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	73 8b       	std	Z+19, r23	; 0x13
    1ec4:	62 8b       	std	Z+18, r22	; 0x12
}
    1ec6:	08 95       	ret

00001ec8 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1ec8:	fc 01       	movw	r30, r24
    1eca:	75 8b       	std	Z+21, r23	; 0x15
    1ecc:	64 8b       	std	Z+20, r22	; 0x14
}
    1ece:	08 95       	ret

00001ed0 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	77 8b       	std	Z+23, r23	; 0x17
    1ed4:	66 8b       	std	Z+22, r22	; 0x16
}
    1ed6:	08 95       	ret

00001ed8 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1ed8:	fc 01       	movw	r30, r24
    1eda:	71 8f       	std	Z+25, r23	; 0x19
    1edc:	60 8f       	std	Z+24, r22	; 0x18
}
    1ede:	08 95       	ret

00001ee0 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	73 8f       	std	Z+27, r23	; 0x1b
    1ee4:	62 8f       	std	Z+26, r22	; 0x1a
}
    1ee6:	08 95       	ret

00001ee8 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1ee8:	fc 01       	movw	r30, r24
    1eea:	75 8f       	std	Z+29, r23	; 0x1d
    1eec:	64 8f       	std	Z+28, r22	; 0x1c
}
    1eee:	08 95       	ret

00001ef0 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	77 8f       	std	Z+31, r23	; 0x1f
    1ef4:	66 8f       	std	Z+30, r22	; 0x1e
}
    1ef6:	08 95       	ret

00001ef8 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1efe:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    1f00:	1f a2       	lds	r17, 0x9f
    1f02:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1f04:	bc 01       	movw	r22, r24
    1f06:	68 5d       	subi	r22, 0xD8	; 216
    1f08:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0a:	88 51       	subi	r24, 0x18	; 24
    1f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0e:	40 ec       	ldi	r20, 0xC0	; 192
    1f10:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1f14:	1b 82       	std	Y+3, r1	; 0x03
    1f16:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1f18:	1d 82       	std	Y+5, r1	; 0x05
    1f1a:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1f1c:	1f 82       	std	Y+7, r1	; 0x07
    1f1e:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1f20:	19 86       	std	Y+9, r1	; 0x09
    1f22:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1f24:	1b 86       	std	Y+11, r1	; 0x0b
    1f26:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1f28:	1d 86       	std	Y+13, r1	; 0x0d
    1f2a:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1f2c:	1f 86       	std	Y+15, r1	; 0x0f
    1f2e:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1f30:	19 8a       	std	Y+17, r1	; 0x11
    1f32:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1f34:	1b 8a       	std	Y+19, r1	; 0x13
    1f36:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1f38:	1d 8a       	std	Y+21, r1	; 0x15
    1f3a:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1f3c:	1f 8a       	std	Y+23, r1	; 0x17
    1f3e:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1f40:	19 8e       	std	Y+25, r1	; 0x19
    1f42:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1f44:	1b 8e       	std	Y+27, r1	; 0x1b
    1f46:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1f48:	1d 8e       	std	Y+29, r1	; 0x1d
    1f4a:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1f4c:	1f 8e       	std	Y+31, r1	; 0x1f
    1f4e:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1f50:	19 a2       	lds	r17, 0x99
    1f52:	18 a2       	lds	r17, 0x98
}
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	08 95       	ret

00001f5a <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1f5a:	ef 92       	push	r14
    1f5c:	ff 92       	push	r15
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1f68:	66 23       	and	r22, r22
    1f6a:	99 f0       	breq	.+38     	; 0x1f92 <midi_device_input+0x38>
    1f6c:	04 2f       	mov	r16, r20
    1f6e:	15 2f       	mov	r17, r21
    1f70:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    1f72:	0f 2e       	mov	r0, r31
    1f74:	f8 ee       	ldi	r31, 0xE8	; 232
    1f76:	ef 2e       	mov	r14, r31
    1f78:	ff 24       	eor	r15, r15
    1f7a:	f0 2d       	mov	r31, r0
    1f7c:	e8 0e       	add	r14, r24
    1f7e:	f9 1e       	adc	r15, r25
    1f80:	f8 01       	movw	r30, r16
    1f82:	61 91       	ld	r22, Z+
    1f84:	8f 01       	movw	r16, r30
    1f86:	c7 01       	movw	r24, r14
    1f88:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1f8c:	cf 5f       	subi	r28, 0xFF	; 255
    1f8e:	cd 17       	cp	r28, r29
    1f90:	b9 f7       	brne	.-18     	; 0x1f80 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	08 95       	ret

00001fa0 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	71 83       	std	Z+1, r23	; 0x01
    1fa4:	60 83       	st	Z, r22
}
    1fa6:	08 95       	ret

00001fa8 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    1fa8:	fc 01       	movw	r30, r24
    1faa:	71 a3       	lds	r23, 0x51
    1fac:	60 a3       	lds	r22, 0x50
}
    1fae:	08 95       	ret

00001fb0 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1fb0:	af 92       	push	r10
    1fb2:	bf 92       	push	r11
    1fb4:	cf 92       	push	r12
    1fb6:	df 92       	push	r13
    1fb8:	ef 92       	push	r14
    1fba:	ff 92       	push	r15
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <midi_input_callbacks+0x16>
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	6c 01       	movw	r12, r24
    1fce:	5b 01       	movw	r10, r22
    1fd0:	f4 2e       	mov	r15, r20
    1fd2:	e2 2e       	mov	r14, r18
    1fd4:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	95 96       	adiw	r26, 0x25	; 37
    1fda:	8c 91       	ld	r24, X
    1fdc:	95 97       	sbiw	r26, 0x25	; 37
    1fde:	84 30       	cpi	r24, 0x04	; 4
    1fe0:	e9 f4       	brne	.+58     	; 0x201c <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    1fe2:	5a 96       	adiw	r26, 0x1a	; 26
    1fe4:	ed 91       	ld	r30, X+
    1fe6:	fc 91       	ld	r31, X
    1fe8:	5b 97       	sbiw	r26, 0x1b	; 27
    1fea:	30 97       	sbiw	r30, 0x00	; 0
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <midi_input_callbacks+0x40>
    1fee:	ee c0       	rjmp	.+476    	; 0x21cc <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	63 e0       	ldi	r22, 0x03	; 3
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	68 0f       	add	r22, r24
    2004:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2006:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2008:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    200a:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    200c:	4a 2d       	mov	r20, r10
    200e:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    2010:	c6 01       	movw	r24, r12
    2012:	9e 01       	movw	r18, r28
    2014:	2f 5f       	subi	r18, 0xFF	; 255
    2016:	3f 4f       	sbci	r19, 0xFF	; 255
    2018:	09 95       	icall
    201a:	c8 c0       	rjmp	.+400    	; 0x21ac <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    201c:	62 30       	cpi	r22, 0x02	; 2
    201e:	71 05       	cpc	r23, r1
    2020:	09 f4       	brne	.+2      	; 0x2024 <midi_input_callbacks+0x74>
    2022:	5f c0       	rjmp	.+190    	; 0x20e2 <midi_input_callbacks+0x132>
    2024:	63 30       	cpi	r22, 0x03	; 3
    2026:	71 05       	cpc	r23, r1
    2028:	29 f0       	breq	.+10     	; 0x2034 <midi_input_callbacks+0x84>
    202a:	61 30       	cpi	r22, 0x01	; 1
    202c:	71 05       	cpc	r23, r1
    202e:	09 f0       	breq	.+2      	; 0x2032 <midi_input_callbacks+0x82>
    2030:	b3 c0       	rjmp	.+358    	; 0x2198 <midi_input_callbacks+0x1e8>
    2032:	99 c0       	rjmp	.+306    	; 0x2166 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2034:	84 2f       	mov	r24, r20
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	80 7f       	andi	r24, 0xF0	; 240
    203a:	90 70       	andi	r25, 0x00	; 0
    203c:	80 3a       	cpi	r24, 0xA0	; 160
    203e:	91 05       	cpc	r25, r1
    2040:	29 f1       	breq	.+74     	; 0x208c <midi_input_callbacks+0xdc>
    2042:	81 3a       	cpi	r24, 0xA1	; 161
    2044:	91 05       	cpc	r25, r1
    2046:	3c f4       	brge	.+14     	; 0x2056 <midi_input_callbacks+0xa6>
    2048:	80 38       	cpi	r24, 0x80	; 128
    204a:	91 05       	cpc	r25, r1
    204c:	c9 f0       	breq	.+50     	; 0x2080 <midi_input_callbacks+0xd0>
    204e:	80 39       	cpi	r24, 0x90	; 144
    2050:	91 05       	cpc	r25, r1
    2052:	91 f5       	brne	.+100    	; 0x20b8 <midi_input_callbacks+0x108>
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <midi_input_callbacks+0xc4>
    2056:	80 3e       	cpi	r24, 0xE0	; 224
    2058:	91 05       	cpc	r25, r1
    205a:	f1 f0       	breq	.+60     	; 0x2098 <midi_input_callbacks+0xe8>
    205c:	80 3f       	cpi	r24, 0xF0	; 240
    205e:	91 05       	cpc	r25, r1
    2060:	09 f1       	breq	.+66     	; 0x20a4 <midi_input_callbacks+0xf4>
    2062:	80 3b       	cpi	r24, 0xB0	; 176
    2064:	91 05       	cpc	r25, r1
    2066:	41 f5       	brne	.+80     	; 0x20b8 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2068:	d6 01       	movw	r26, r12
    206a:	12 96       	adiw	r26, 0x02	; 2
    206c:	ed 91       	ld	r30, X+
    206e:	fc 91       	ld	r31, X
    2070:	13 97       	sbiw	r26, 0x03	; 3
              break;
    2072:	24 c0       	rjmp	.+72     	; 0x20bc <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    2074:	d6 01       	movw	r26, r12
    2076:	14 96       	adiw	r26, 0x04	; 4
    2078:	ed 91       	ld	r30, X+
    207a:	fc 91       	ld	r31, X
    207c:	15 97       	sbiw	r26, 0x05	; 5
              break;
    207e:	1e c0       	rjmp	.+60     	; 0x20bc <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    2080:	d6 01       	movw	r26, r12
    2082:	16 96       	adiw	r26, 0x06	; 6
    2084:	ed 91       	ld	r30, X+
    2086:	fc 91       	ld	r31, X
    2088:	17 97       	sbiw	r26, 0x07	; 7
              break;
    208a:	18 c0       	rjmp	.+48     	; 0x20bc <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    208c:	d6 01       	movw	r26, r12
    208e:	18 96       	adiw	r26, 0x08	; 8
    2090:	ed 91       	ld	r30, X+
    2092:	fc 91       	ld	r31, X
    2094:	19 97       	sbiw	r26, 0x09	; 9
              break;
    2096:	12 c0       	rjmp	.+36     	; 0x20bc <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    2098:	d6 01       	movw	r26, r12
    209a:	1a 96       	adiw	r26, 0x0a	; 10
    209c:	ed 91       	ld	r30, X+
    209e:	fc 91       	ld	r31, X
    20a0:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    20a2:	0c c0       	rjmp	.+24     	; 0x20bc <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    20a4:	b2 ef       	ldi	r27, 0xF2	; 242
    20a6:	4b 17       	cp	r20, r27
    20a8:	09 f0       	breq	.+2      	; 0x20ac <midi_input_callbacks+0xfc>
    20aa:	90 c0       	rjmp	.+288    	; 0x21cc <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    20ac:	d6 01       	movw	r26, r12
    20ae:	1c 96       	adiw	r26, 0x0c	; 12
    20b0:	ed 91       	ld	r30, X+
    20b2:	fc 91       	ld	r31, X
    20b4:	1d 97       	sbiw	r26, 0x0d	; 13
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    20b8:	e0 e0       	ldi	r30, 0x00	; 0
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    20bc:	30 97       	sbiw	r30, 0x00	; 0
    20be:	09 f4       	brne	.+2      	; 0x20c2 <midi_input_callbacks+0x112>
    20c0:	85 c0       	rjmp	.+266    	; 0x21cc <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    20c2:	b2 ef       	ldi	r27, 0xF2	; 242
    20c4:	fb 16       	cp	r15, r27
    20c6:	31 f4       	brne	.+12     	; 0x20d4 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    20c8:	c6 01       	movw	r24, r12
    20ca:	62 ef       	ldi	r22, 0xF2	; 242
    20cc:	4e 2d       	mov	r20, r14
    20ce:	21 2f       	mov	r18, r17
    20d0:	09 95       	icall
    20d2:	6c c0       	rjmp	.+216    	; 0x21ac <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    20d4:	6f 2d       	mov	r22, r15
    20d6:	6f 70       	andi	r22, 0x0F	; 15
    20d8:	c6 01       	movw	r24, r12
    20da:	4e 2d       	mov	r20, r14
    20dc:	21 2f       	mov	r18, r17
    20de:	09 95       	icall
    20e0:	65 c0       	rjmp	.+202    	; 0x21ac <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    20e2:	84 2f       	mov	r24, r20
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	80 7f       	andi	r24, 0xF0	; 240
    20e8:	90 70       	andi	r25, 0x00	; 0
    20ea:	80 3d       	cpi	r24, 0xD0	; 208
    20ec:	91 05       	cpc	r25, r1
    20ee:	61 f0       	breq	.+24     	; 0x2108 <midi_input_callbacks+0x158>
    20f0:	80 3f       	cpi	r24, 0xF0	; 240
    20f2:	91 05       	cpc	r25, r1
    20f4:	79 f0       	breq	.+30     	; 0x2114 <midi_input_callbacks+0x164>
    20f6:	80 3c       	cpi	r24, 0xC0	; 192
    20f8:	91 05       	cpc	r25, r1
    20fa:	f9 f4       	brne	.+62     	; 0x213a <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    20fc:	d6 01       	movw	r26, r12
    20fe:	1e 96       	adiw	r26, 0x0e	; 14
    2100:	ed 91       	ld	r30, X+
    2102:	fc 91       	ld	r31, X
    2104:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2106:	1b c0       	rjmp	.+54     	; 0x213e <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2108:	d6 01       	movw	r26, r12
    210a:	50 96       	adiw	r26, 0x10	; 16
    210c:	ed 91       	ld	r30, X+
    210e:	fc 91       	ld	r31, X
    2110:	51 97       	sbiw	r26, 0x11	; 17
              break;
    2112:	15 c0       	rjmp	.+42     	; 0x213e <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2114:	b3 ef       	ldi	r27, 0xF3	; 243
    2116:	4b 17       	cp	r20, r27
    2118:	31 f4       	brne	.+12     	; 0x2126 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    211a:	d6 01       	movw	r26, r12
    211c:	52 96       	adiw	r26, 0x12	; 18
    211e:	ed 91       	ld	r30, X+
    2120:	fc 91       	ld	r31, X
    2122:	53 97       	sbiw	r26, 0x13	; 19
    2124:	0c c0       	rjmp	.+24     	; 0x213e <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2126:	b1 ef       	ldi	r27, 0xF1	; 241
    2128:	4b 17       	cp	r20, r27
    212a:	09 f0       	breq	.+2      	; 0x212e <midi_input_callbacks+0x17e>
    212c:	4f c0       	rjmp	.+158    	; 0x21cc <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    212e:	d6 01       	movw	r26, r12
    2130:	54 96       	adiw	r26, 0x14	; 20
    2132:	ed 91       	ld	r30, X+
    2134:	fc 91       	ld	r31, X
    2136:	55 97       	sbiw	r26, 0x15	; 21
    2138:	02 c0       	rjmp	.+4      	; 0x213e <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    213a:	e0 e0       	ldi	r30, 0x00	; 0
    213c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    213e:	30 97       	sbiw	r30, 0x00	; 0
    2140:	09 f4       	brne	.+2      	; 0x2144 <midi_input_callbacks+0x194>
    2142:	44 c0       	rjmp	.+136    	; 0x21cc <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2144:	b3 ef       	ldi	r27, 0xF3	; 243
    2146:	fb 16       	cp	r15, r27
    2148:	19 f0       	breq	.+6      	; 0x2150 <midi_input_callbacks+0x1a0>
    214a:	81 ef       	ldi	r24, 0xF1	; 241
    214c:	f8 16       	cp	r15, r24
    214e:	29 f4       	brne	.+10     	; 0x215a <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    2150:	c6 01       	movw	r24, r12
    2152:	6f 2d       	mov	r22, r15
    2154:	4e 2d       	mov	r20, r14
    2156:	09 95       	icall
    2158:	29 c0       	rjmp	.+82     	; 0x21ac <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    215a:	6f 2d       	mov	r22, r15
    215c:	6f 70       	andi	r22, 0x0F	; 15
    215e:	c6 01       	movw	r24, r12
    2160:	4e 2d       	mov	r20, r14
    2162:	09 95       	icall
    2164:	23 c0       	rjmp	.+70     	; 0x21ac <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2166:	84 2f       	mov	r24, r20
    2168:	0e 94 75 0d 	call	0x1aea	; 0x1aea <midi_is_realtime>
    216c:	88 23       	and	r24, r24
    216e:	31 f0       	breq	.+12     	; 0x217c <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    2170:	d6 01       	movw	r26, r12
    2172:	56 96       	adiw	r26, 0x16	; 22
    2174:	ed 91       	ld	r30, X+
    2176:	fc 91       	ld	r31, X
    2178:	57 97       	sbiw	r26, 0x17	; 23
    217a:	08 c0       	rjmp	.+16     	; 0x218c <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    217c:	b6 ef       	ldi	r27, 0xF6	; 246
    217e:	fb 16       	cp	r15, r27
    2180:	29 f5       	brne	.+74     	; 0x21cc <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    2182:	d6 01       	movw	r26, r12
    2184:	58 96       	adiw	r26, 0x18	; 24
    2186:	ed 91       	ld	r30, X+
    2188:	fc 91       	ld	r31, X
    218a:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    218c:	30 97       	sbiw	r30, 0x00	; 0
    218e:	f1 f0       	breq	.+60     	; 0x21cc <midi_input_callbacks+0x21c>
            func(device, byte0);
    2190:	c6 01       	movw	r24, r12
    2192:	6f 2d       	mov	r22, r15
    2194:	09 95       	icall
    2196:	0a c0       	rjmp	.+20     	; 0x21ac <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    2198:	64 30       	cpi	r22, 0x04	; 4
    219a:	71 05       	cpc	r23, r1
    219c:	a8 f4       	brcc	.+42     	; 0x21c8 <midi_input_callbacks+0x218>
    219e:	16 c0       	rjmp	.+44     	; 0x21cc <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    21a0:	c6 01       	movw	r24, r12
    21a2:	b5 01       	movw	r22, r10
    21a4:	4f 2d       	mov	r20, r15
    21a6:	2e 2d       	mov	r18, r14
    21a8:	01 2f       	mov	r16, r17
    21aa:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    21ac:	d6 01       	movw	r26, r12
    21ae:	5e 96       	adiw	r26, 0x1e	; 30
    21b0:	ed 91       	ld	r30, X+
    21b2:	fc 91       	ld	r31, X
    21b4:	5f 97       	sbiw	r26, 0x1f	; 31
    21b6:	30 97       	sbiw	r30, 0x00	; 0
    21b8:	89 f0       	breq	.+34     	; 0x21dc <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    21ba:	c6 01       	movw	r24, r12
    21bc:	b5 01       	movw	r22, r10
    21be:	4f 2d       	mov	r20, r15
    21c0:	2e 2d       	mov	r18, r14
    21c2:	01 2f       	mov	r16, r17
    21c4:	09 95       	icall
    21c6:	0a c0       	rjmp	.+20     	; 0x21dc <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    21c8:	aa 24       	eor	r10, r10
    21ca:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    21cc:	d6 01       	movw	r26, r12
    21ce:	5c 96       	adiw	r26, 0x1c	; 28
    21d0:	ed 91       	ld	r30, X+
    21d2:	fc 91       	ld	r31, X
    21d4:	5d 97       	sbiw	r26, 0x1d	; 29
    21d6:	30 97       	sbiw	r30, 0x00	; 0
    21d8:	19 f7       	brne	.-58     	; 0x21a0 <midi_input_callbacks+0x1f0>
    21da:	e8 cf       	rjmp	.-48     	; 0x21ac <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	df 90       	pop	r13
    21f0:	cf 90       	pop	r12
    21f2:	bf 90       	pop	r11
    21f4:	af 90       	pop	r10
    21f6:	08 95       	ret

000021f8 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    21f8:	ef 92       	push	r14
    21fa:	ff 92       	push	r15
    21fc:	0f 93       	push	r16
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	7c 01       	movw	r14, r24
    2204:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    2206:	86 2f       	mov	r24, r22
    2208:	0e 94 75 0d 	call	0x1aea	; 0x1aea <midi_is_realtime>
    220c:	88 23       	and	r24, r24
    220e:	91 f0       	breq	.+36     	; 0x2234 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    2210:	d7 01       	movw	r26, r14
    2212:	95 96       	adiw	r26, 0x25	; 37
    2214:	dc 91       	ld	r29, X
    2216:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	95 96       	adiw	r26, 0x25	; 37
    221c:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    221e:	c7 01       	movw	r24, r14
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	4c 2f       	mov	r20, r28
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	00 e0       	ldi	r16, 0x00	; 0
    222a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <midi_input_callbacks>
    device->input_state = state;
    222e:	f7 01       	movw	r30, r14
    2230:	d5 a3       	lds	r29, 0x55
    2232:	b7 c0       	rjmp	.+366    	; 0x23a2 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    2234:	8c 2f       	mov	r24, r28
    2236:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <midi_is_statusbyte>
    223a:	88 23       	and	r24, r24
    223c:	09 f4       	brne	.+2      	; 0x2240 <midi_process_byte+0x48>
    223e:	73 c0       	rjmp	.+230    	; 0x2326 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    2240:	d7 01       	movw	r26, r14
    2242:	95 96       	adiw	r26, 0x25	; 37
    2244:	8c 91       	ld	r24, X
    2246:	95 97       	sbiw	r26, 0x25	; 37
    2248:	84 30       	cpi	r24, 0x04	; 4
    224a:	49 f0       	breq	.+18     	; 0x225e <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    224c:	92 96       	adiw	r26, 0x22	; 34
    224e:	cc 93       	st	X, r28
    2250:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	97 96       	adiw	r26, 0x27	; 39
    2258:	9c 93       	st	X, r25
    225a:	8e 93       	st	-X, r24
    225c:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    225e:	8c 2f       	mov	r24, r28
    2260:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <midi_packet_length>
    2264:	81 30       	cpi	r24, 0x01	; 1
    2266:	41 f0       	breq	.+16     	; 0x2278 <midi_process_byte+0x80>
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	00 f1       	brcs	.+64     	; 0x22ac <midi_process_byte+0xb4>
    226c:	82 30       	cpi	r24, 0x02	; 2
    226e:	a1 f0       	breq	.+40     	; 0x2298 <midi_process_byte+0xa0>
    2270:	83 30       	cpi	r24, 0x03	; 3
    2272:	09 f0       	breq	.+2      	; 0x2276 <midi_process_byte+0x7e>
    2274:	4f c0       	rjmp	.+158    	; 0x2314 <midi_process_byte+0x11c>
    2276:	14 c0       	rjmp	.+40     	; 0x22a0 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	f7 01       	movw	r30, r14
    227c:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    227e:	c7 01       	movw	r24, r14
    2280:	61 e0       	ldi	r22, 0x01	; 1
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	4c 2f       	mov	r20, r28
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	00 e0       	ldi	r16, 0x00	; 0
    228a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <midi_input_callbacks>
        device->input_state = IDLE;
    228e:	d7 01       	movw	r26, r14
    2290:	95 96       	adiw	r26, 0x25	; 37
    2292:	1c 92       	st	X, r1
    2294:	95 97       	sbiw	r26, 0x25	; 37
        break;
    2296:	85 c0       	rjmp	.+266    	; 0x23a2 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	f7 01       	movw	r30, r14
    229c:	85 a3       	lds	r24, 0x55
        break;
    229e:	81 c0       	rjmp	.+258    	; 0x23a2 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    22a0:	83 e0       	ldi	r24, 0x03	; 3
    22a2:	d7 01       	movw	r26, r14
    22a4:	95 96       	adiw	r26, 0x25	; 37
    22a6:	8c 93       	st	X, r24
    22a8:	95 97       	sbiw	r26, 0x25	; 37
        break;
    22aa:	7b c0       	rjmp	.+246    	; 0x23a2 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    22ac:	c0 3f       	cpi	r28, 0xF0	; 240
    22ae:	19 f0       	breq	.+6      	; 0x22b6 <midi_process_byte+0xbe>
    22b0:	c7 3f       	cpi	r28, 0xF7	; 247
    22b2:	59 f5       	brne	.+86     	; 0x230a <midi_process_byte+0x112>
    22b4:	0a c0       	rjmp	.+20     	; 0x22ca <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    22b6:	84 e0       	ldi	r24, 0x04	; 4
    22b8:	f7 01       	movw	r30, r14
    22ba:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    22bc:	80 ef       	ldi	r24, 0xF0	; 240
    22be:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	97 a3       	lds	r25, 0x57
    22c6:	86 a3       	lds	r24, 0x56
            break;
    22c8:	6c c0       	rjmp	.+216    	; 0x23a2 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    22ca:	d7 01       	movw	r26, r14
    22cc:	96 96       	adiw	r26, 0x26	; 38
    22ce:	2d 91       	ld	r18, X+
    22d0:	3c 91       	ld	r19, X
    22d2:	97 97       	sbiw	r26, 0x27	; 39
    22d4:	c9 01       	movw	r24, r18
    22d6:	63 e0       	ldi	r22, 0x03	; 3
    22d8:	70 e0       	ldi	r23, 0x00	; 0
    22da:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
    22de:	f7 01       	movw	r30, r14
    22e0:	e8 0f       	add	r30, r24
    22e2:	f9 1f       	adc	r31, r25
    22e4:	87 ef       	ldi	r24, 0xF7	; 247
    22e6:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    22e8:	b9 01       	movw	r22, r18
    22ea:	6f 5f       	subi	r22, 0xFF	; 255
    22ec:	7f 4f       	sbci	r23, 0xFF	; 255
    22ee:	f7 01       	movw	r30, r14
    22f0:	77 a3       	lds	r23, 0x57
    22f2:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    22f4:	c7 01       	movw	r24, r14
    22f6:	42 a1       	lds	r20, 0x42
    22f8:	23 a1       	lds	r18, 0x43
    22fa:	04 a1       	lds	r16, 0x44
    22fc:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    2300:	d7 01       	movw	r26, r14
    2302:	95 96       	adiw	r26, 0x25	; 37
    2304:	1c 92       	st	X, r1
    2306:	95 97       	sbiw	r26, 0x25	; 37
            break;
    2308:	4c c0       	rjmp	.+152    	; 0x23a2 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    230a:	f7 01       	movw	r30, r14
    230c:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    230e:	17 a2       	lds	r17, 0x97
    2310:	16 a2       	lds	r17, 0x96
    2312:	47 c0       	rjmp	.+142    	; 0x23a2 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    2314:	d7 01       	movw	r26, r14
    2316:	95 96       	adiw	r26, 0x25	; 37
    2318:	1c 92       	st	X, r1
    231a:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    231c:	97 96       	adiw	r26, 0x27	; 39
    231e:	1c 92       	st	X, r1
    2320:	1e 92       	st	-X, r1
    2322:	96 97       	sbiw	r26, 0x26	; 38
        break;
    2324:	3e c0       	rjmp	.+124    	; 0x23a2 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    2326:	f7 01       	movw	r30, r14
    2328:	25 a1       	lds	r18, 0x45
    232a:	22 23       	and	r18, r18
    232c:	d1 f1       	breq	.+116    	; 0x23a2 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    232e:	06 a0       	lds	r16, 0x86
    2330:	f7 a1       	lds	r31, 0x47
    2332:	e0 2d       	mov	r30, r0
    2334:	cf 01       	movw	r24, r30
    2336:	63 e0       	ldi	r22, 0x03	; 3
    2338:	70 e0       	ldi	r23, 0x00	; 0
    233a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
    233e:	ac 01       	movw	r20, r24
    2340:	8e 0d       	add	r24, r14
    2342:	9f 1d       	adc	r25, r15
    2344:	dc 01       	movw	r26, r24
    2346:	92 96       	adiw	r26, 0x22	; 34
    2348:	cc 93       	st	X, r28
    234a:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    234c:	bf 01       	movw	r22, r30
    234e:	6f 5f       	subi	r22, 0xFF	; 255
    2350:	7f 4f       	sbci	r23, 0xFF	; 255
    2352:	f7 01       	movw	r30, r14
    2354:	77 a3       	lds	r23, 0x57
    2356:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    2358:	41 30       	cpi	r20, 0x01	; 1
    235a:	51 05       	cpc	r21, r1
    235c:	91 f0       	breq	.+36     	; 0x2382 <midi_process_byte+0x18a>
    235e:	42 30       	cpi	r20, 0x02	; 2
    2360:	51 05       	cpc	r21, r1
    2362:	f9 f4       	brne	.+62     	; 0x23a2 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    2364:	c7 01       	movw	r24, r14
    2366:	42 a1       	lds	r20, 0x42
    2368:	23 a1       	lds	r18, 0x43
    236a:	04 a1       	lds	r16, 0x44
    236c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    2370:	f7 01       	movw	r30, r14
    2372:	85 a1       	lds	r24, 0x45
    2374:	84 30       	cpi	r24, 0x04	; 4
    2376:	a9 f0       	breq	.+42     	; 0x23a2 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	97 a3       	lds	r25, 0x57
    237e:	86 a3       	lds	r24, 0x56
    2380:	10 c0       	rjmp	.+32     	; 0x23a2 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    2382:	22 30       	cpi	r18, 0x02	; 2
    2384:	71 f4       	brne	.+28     	; 0x23a2 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    2386:	c7 01       	movw	r24, r14
    2388:	42 a1       	lds	r20, 0x42
    238a:	23 a1       	lds	r18, 0x43
    238c:	00 e0       	ldi	r16, 0x00	; 0
    238e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    2392:	f7 01       	movw	r30, r14
    2394:	85 a1       	lds	r24, 0x45
    2396:	84 30       	cpi	r24, 0x04	; 4
    2398:	21 f0       	breq	.+8      	; 0x23a2 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	97 a3       	lds	r25, 0x57
    23a0:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	08 95       	ret

000023ae <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    23ae:	cf 92       	push	r12
    23b0:	df 92       	push	r13
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    23c0:	dc 01       	movw	r26, r24
    23c2:	90 96       	adiw	r26, 0x20	; 32
    23c4:	ed 91       	ld	r30, X+
    23c6:	fc 91       	ld	r31, X
    23c8:	91 97       	sbiw	r26, 0x21	; 33
    23ca:	30 97       	sbiw	r30, 0x00	; 0
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    23ce:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    23d0:	0f 2e       	mov	r0, r31
    23d2:	f8 ee       	ldi	r31, 0xE8	; 232
    23d4:	ef 2e       	mov	r14, r31
    23d6:	ff 24       	eor	r15, r15
    23d8:	f0 2d       	mov	r31, r0
    23da:	ec 0c       	add	r14, r12
    23dc:	fd 1c       	adc	r15, r13
    23de:	c7 01       	movw	r24, r14
    23e0:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    23e4:	c8 2f       	mov	r28, r24
    23e6:	d0 e0       	ldi	r29, 0x00	; 0
    23e8:	20 97       	sbiw	r28, 0x00	; 0
    23ea:	99 f0       	breq	.+38     	; 0x2412 <midi_device_process+0x64>
    23ec:	00 e0       	ldi	r16, 0x00	; 0
    23ee:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    23f0:	c7 01       	movw	r24, r14
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <bytequeue_get>
    23f8:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    23fa:	c6 01       	movw	r24, r12
    23fc:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    2400:	c7 01       	movw	r24, r14
    2402:	61 e0       	ldi	r22, 0x01	; 1
    2404:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2408:	0f 5f       	subi	r16, 0xFF	; 255
    240a:	1f 4f       	sbci	r17, 0xFF	; 255
    240c:	0c 17       	cp	r16, r28
    240e:	1d 07       	cpc	r17, r29
    2410:	78 f3       	brcs	.-34     	; 0x23f0 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	1f 91       	pop	r17
    2418:	0f 91       	pop	r16
    241a:	ff 90       	pop	r15
    241c:	ef 90       	pop	r14
    241e:	df 90       	pop	r13
    2420:	cf 90       	pop	r12
    2422:	08 95       	ret

00002424 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    2424:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    2426:	67 e0       	ldi	r22, 0x07	; 7
    2428:	70 e0       	ldi	r23, 0x00	; 0
    242a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
    242e:	48 2f       	mov	r20, r24
   if (remainder)
    2430:	88 23       	and	r24, r24
    2432:	81 f0       	breq	.+32     	; 0x2454 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    2434:	c9 01       	movw	r24, r18
    2436:	67 e0       	ldi	r22, 0x07	; 7
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
    243e:	cb 01       	movw	r24, r22
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	01 96       	adiw	r24, 0x01	; 1
    244e:	84 0f       	add	r24, r20
    2450:	91 1d       	adc	r25, r1
    2452:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    2454:	c9 01       	movw	r24, r18
    2456:	67 e0       	ldi	r22, 0x07	; 7
    2458:	70 e0       	ldi	r23, 0x00	; 0
    245a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
    245e:	cb 01       	movw	r24, r22
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
}
    246c:	08 95       	ret

0000246e <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    246e:	48 2f       	mov	r20, r24
    2470:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    2472:	a1 f0       	breq	.+40     	; 0x249c <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    2474:	9c 01       	movw	r18, r24
    2476:	36 95       	lsr	r19
    2478:	27 95       	ror	r18
    247a:	36 95       	lsr	r19
    247c:	27 95       	ror	r18
    247e:	36 95       	lsr	r19
    2480:	27 95       	ror	r18
    2482:	c9 01       	movw	r24, r18
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	82 1b       	sub	r24, r18
    2492:	93 0b       	sbc	r25, r19
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	84 0f       	add	r24, r20
    2498:	91 1d       	adc	r25, r1
    249a:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    249c:	9c 01       	movw	r18, r24
    249e:	36 95       	lsr	r19
    24a0:	27 95       	ror	r18
    24a2:	36 95       	lsr	r19
    24a4:	27 95       	ror	r18
    24a6:	36 95       	lsr	r19
    24a8:	27 95       	ror	r18
    24aa:	c9 01       	movw	r24, r18
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	82 1b       	sub	r24, r18
    24ba:	93 0b       	sbc	r25, r19
}
    24bc:	08 95       	ret

000024be <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    24be:	2f 92       	push	r2
    24c0:	3f 92       	push	r3
    24c2:	4f 92       	push	r4
    24c4:	5f 92       	push	r5
    24c6:	6f 92       	push	r6
    24c8:	7f 92       	push	r7
    24ca:	8f 92       	push	r8
    24cc:	9f 92       	push	r9
    24ce:	af 92       	push	r10
    24d0:	bf 92       	push	r11
    24d2:	cf 92       	push	r12
    24d4:	df 92       	push	r13
    24d6:	ef 92       	push	r14
    24d8:	ff 92       	push	r15
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	00 d0       	rcall	.+0      	; 0x24e4 <sysex_encode+0x26>
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <sysex_encode+0x28>
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <sysex_encode+0x2a>
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	1c 01       	movw	r2, r24
    24ee:	7a 83       	std	Y+2, r23	; 0x02
    24f0:	69 83       	std	Y+1, r22	; 0x01
    24f2:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    24f4:	ca 01       	movw	r24, r20
    24f6:	67 e0       	ldi	r22, 0x07	; 7
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
    24fe:	2b 01       	movw	r4, r22
    2500:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2502:	61 15       	cp	r22, r1
    2504:	71 05       	cpc	r23, r1
    2506:	b1 f1       	breq	.+108    	; 0x2574 <sysex_encode+0xb6>
    2508:	81 01       	movw	r16, r2
    250a:	e9 80       	ldd	r14, Y+1	; 0x01
    250c:	fa 80       	ldd	r15, Y+2	; 0x02
    250e:	cc 24       	eor	r12, r12
    2510:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2512:	88 24       	eor	r8, r8
    2514:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2516:	1e 83       	std	Y+6, r17	; 0x06
    2518:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    251a:	f8 01       	movw	r30, r16
    251c:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    251e:	fc 82       	std	Y+4, r15	; 0x04
    2520:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2522:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    2524:	ab 81       	ldd	r26, Y+3	; 0x03
    2526:	bc 81       	ldd	r27, Y+4	; 0x04
    2528:	2d 91       	ld	r18, X+
    252a:	bc 83       	std	Y+4, r27	; 0x04
    252c:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    252e:	4f 5f       	subi	r20, 0xFF	; 255
    2530:	5f 4f       	sbci	r21, 0xFF	; 255
    2532:	82 2f       	mov	r24, r18
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	80 78       	andi	r24, 0x80	; 128
    2538:	90 70       	andi	r25, 0x00	; 0
    253a:	bc 01       	movw	r22, r24
    253c:	04 2e       	mov	r0, r20
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <sysex_encode+0x86>
    2540:	75 95       	asr	r23
    2542:	67 95       	ror	r22
    2544:	0a 94       	dec	r0
    2546:	e2 f7       	brpl	.-8      	; 0x2540 <sysex_encode+0x82>
    2548:	ad 81       	ldd	r26, Y+5	; 0x05
    254a:	be 81       	ldd	r27, Y+6	; 0x06
    254c:	8c 91       	ld	r24, X
    254e:	86 2b       	or	r24, r22
    2550:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    2552:	2f 77       	andi	r18, 0x7F	; 127
    2554:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2556:	47 30       	cpi	r20, 0x07	; 7
    2558:	51 05       	cpc	r21, r1
    255a:	21 f7       	brne	.-56     	; 0x2524 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    255c:	08 94       	sec
    255e:	c1 1c       	adc	r12, r1
    2560:	d1 1c       	adc	r13, r1
    2562:	08 5f       	subi	r16, 0xF8	; 248
    2564:	1f 4f       	sbci	r17, 0xFF	; 255
    2566:	e7 e0       	ldi	r30, 0x07	; 7
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	ee 0e       	add	r14, r30
    256c:	ff 1e       	adc	r15, r31
    256e:	ca 14       	cp	r12, r10
    2570:	db 04       	cpc	r13, r11
    2572:	89 f6       	brne	.-94     	; 0x2516 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    2574:	c3 01       	movw	r24, r6
    2576:	67 e0       	ldi	r22, 0x07	; 7
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__udivmodhi4>
   if (remainder) {
    257e:	88 23       	and	r24, r24
    2580:	d9 f1       	breq	.+118    	; 0x25f8 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    2582:	82 01       	movw	r16, r4
    2584:	00 0f       	add	r16, r16
    2586:	11 1f       	adc	r17, r17
    2588:	00 0f       	add	r16, r16
    258a:	11 1f       	adc	r17, r17
    258c:	00 0f       	add	r16, r16
    258e:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    2590:	78 01       	movw	r14, r16
    2592:	e4 18       	sub	r14, r4
    2594:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    2596:	d1 01       	movw	r26, r2
    2598:	a0 0f       	add	r26, r16
    259a:	b1 1f       	adc	r27, r17
    259c:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    259e:	68 2f       	mov	r22, r24
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	61 15       	cp	r22, r1
    25a4:	71 05       	cpc	r23, r1
    25a6:	19 f1       	breq	.+70     	; 0x25ee <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    25a8:	e9 81       	ldd	r30, Y+1	; 0x01
    25aa:	fa 81       	ldd	r31, Y+2	; 0x02
    25ac:	ee 0e       	add	r14, r30
    25ae:	ff 1e       	adc	r15, r31
    25b0:	c8 01       	movw	r24, r16
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	28 0e       	add	r2, r24
    25b6:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    25bc:	f7 01       	movw	r30, r14
    25be:	41 91       	ld	r20, Z+
    25c0:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    25c2:	2f 5f       	subi	r18, 0xFF	; 255
    25c4:	3f 4f       	sbci	r19, 0xFF	; 255
    25c6:	84 2f       	mov	r24, r20
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	80 78       	andi	r24, 0x80	; 128
    25cc:	90 70       	andi	r25, 0x00	; 0
    25ce:	02 2e       	mov	r0, r18
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <sysex_encode+0x118>
    25d2:	95 95       	asr	r25
    25d4:	87 95       	ror	r24
    25d6:	0a 94       	dec	r0
    25d8:	e2 f7       	brpl	.-8      	; 0x25d2 <sysex_encode+0x114>
    25da:	9c 91       	ld	r25, X
    25dc:	89 2b       	or	r24, r25
    25de:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    25e0:	4f 77       	andi	r20, 0x7F	; 127
    25e2:	f1 01       	movw	r30, r2
    25e4:	41 93       	st	Z+, r20
    25e6:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    25e8:	26 17       	cp	r18, r22
    25ea:	37 07       	cpc	r19, r23
    25ec:	38 f3       	brcs	.-50     	; 0x25bc <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    25ee:	c8 01       	movw	r24, r16
    25f0:	01 96       	adiw	r24, 0x01	; 1
    25f2:	86 0f       	add	r24, r22
    25f4:	97 1f       	adc	r25, r23
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    25f8:	c2 01       	movw	r24, r4
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
   }
}
    2606:	26 96       	adiw	r28, 0x06	; 6
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	1f 91       	pop	r17
    2618:	0f 91       	pop	r16
    261a:	ff 90       	pop	r15
    261c:	ef 90       	pop	r14
    261e:	df 90       	pop	r13
    2620:	cf 90       	pop	r12
    2622:	bf 90       	pop	r11
    2624:	af 90       	pop	r10
    2626:	9f 90       	pop	r9
    2628:	8f 90       	pop	r8
    262a:	7f 90       	pop	r7
    262c:	6f 90       	pop	r6
    262e:	5f 90       	pop	r5
    2630:	4f 90       	pop	r4
    2632:	3f 90       	pop	r3
    2634:	2f 90       	pop	r2
    2636:	08 95       	ret

00002638 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2638:	6f 92       	push	r6
    263a:	7f 92       	push	r7
    263c:	8f 92       	push	r8
    263e:	9f 92       	push	r9
    2640:	af 92       	push	r10
    2642:	bf 92       	push	r11
    2644:	cf 92       	push	r12
    2646:	df 92       	push	r13
    2648:	ef 92       	push	r14
    264a:	ff 92       	push	r15
    264c:	0f 93       	push	r16
    264e:	1f 93       	push	r17
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	3c 01       	movw	r6, r24
    2656:	4b 01       	movw	r8, r22
    2658:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    265a:	42 30       	cpi	r20, 0x02	; 2
    265c:	51 05       	cpc	r21, r1
    265e:	08 f4       	brcc	.+2      	; 0x2662 <sysex_decode+0x2a>
    2660:	6f c0       	rjmp	.+222    	; 0x2740 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    2662:	7a 01       	movw	r14, r20
    2664:	f6 94       	lsr	r15
    2666:	e7 94       	ror	r14
    2668:	f6 94       	lsr	r15
    266a:	e7 94       	ror	r14
    266c:	f6 94       	lsr	r15
    266e:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    2670:	e1 14       	cp	r14, r1
    2672:	f1 04       	cpc	r15, r1
    2674:	29 f1       	breq	.+74     	; 0x26c0 <sysex_decode+0x88>
    2676:	eb 01       	movw	r28, r22
    2678:	b3 01       	movw	r22, r6
    267a:	00 e0       	ldi	r16, 0x00	; 0
    267c:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    267e:	cc 24       	eor	r12, r12
    2680:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2682:	de 01       	movw	r26, r28
    2684:	11 96       	adiw	r26, 0x01	; 1
    2686:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2688:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    268a:	2d 91       	ld	r18, X+
    268c:	2f 77       	andi	r18, 0x7F	; 127
    268e:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2690:	4f 5f       	subi	r20, 0xFF	; 255
    2692:	5f 4f       	sbci	r21, 0xFF	; 255
    2694:	88 81       	ld	r24, Y
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	04 2e       	mov	r0, r20
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <sysex_decode+0x68>
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	0a 94       	dec	r0
    26a2:	e2 f7       	brpl	.-8      	; 0x269c <sysex_decode+0x64>
    26a4:	80 78       	andi	r24, 0x80	; 128
    26a6:	28 2b       	or	r18, r24
    26a8:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    26aa:	47 30       	cpi	r20, 0x07	; 7
    26ac:	51 05       	cpc	r21, r1
    26ae:	69 f7       	brne	.-38     	; 0x268a <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    26b0:	0f 5f       	subi	r16, 0xFF	; 255
    26b2:	1f 4f       	sbci	r17, 0xFF	; 255
    26b4:	28 96       	adiw	r28, 0x08	; 8
    26b6:	69 5f       	subi	r22, 0xF9	; 249
    26b8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ba:	0e 15       	cp	r16, r14
    26bc:	1f 05       	cpc	r17, r15
    26be:	09 f7       	brne	.-62     	; 0x2682 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    26c0:	5a 2d       	mov	r21, r10
    26c2:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    26c4:	99 f1       	breq	.+102    	; 0x272c <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    26c6:	e7 01       	movw	r28, r14
    26c8:	cc 0f       	add	r28, r28
    26ca:	dd 1f       	adc	r29, r29
    26cc:	cc 0f       	add	r28, r28
    26ce:	dd 1f       	adc	r29, r29
    26d0:	cc 0f       	add	r28, r28
    26d2:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    26d4:	8e 01       	movw	r16, r28
    26d6:	0e 19       	sub	r16, r14
    26d8:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    26da:	65 2f       	mov	r22, r21
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	61 50       	subi	r22, 0x01	; 1
    26e0:	70 40       	sbci	r23, 0x00	; 0
    26e2:	f9 f0       	breq	.+62     	; 0x2722 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    26e4:	ce 01       	movw	r24, r28
    26e6:	01 96       	adiw	r24, 0x01	; 1
    26e8:	d4 01       	movw	r26, r8
    26ea:	a8 0f       	add	r26, r24
    26ec:	b9 1f       	adc	r27, r25
    26ee:	f3 01       	movw	r30, r6
    26f0:	e0 0f       	add	r30, r16
    26f2:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    26f8:	c8 0d       	add	r28, r8
    26fa:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    26fc:	4d 91       	ld	r20, X+
    26fe:	4f 77       	andi	r20, 0x7F	; 127
    2700:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2702:	2f 5f       	subi	r18, 0xFF	; 255
    2704:	3f 4f       	sbci	r19, 0xFF	; 255
    2706:	88 81       	ld	r24, Y
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	02 2e       	mov	r0, r18
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <sysex_decode+0xda>
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	0a 94       	dec	r0
    2714:	e2 f7       	brpl	.-8      	; 0x270e <sysex_decode+0xd6>
    2716:	80 78       	andi	r24, 0x80	; 128
    2718:	48 2b       	or	r20, r24
    271a:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    271c:	26 17       	cp	r18, r22
    271e:	37 07       	cpc	r19, r23
    2720:	68 f3       	brcs	.-38     	; 0x26fc <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    2722:	c8 01       	movw	r24, r16
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	85 0f       	add	r24, r21
    2728:	91 1d       	adc	r25, r1
    272a:	0c c0       	rjmp	.+24     	; 0x2744 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    272c:	c7 01       	movw	r24, r14
    272e:	88 0f       	add	r24, r24
    2730:	99 1f       	adc	r25, r25
    2732:	88 0f       	add	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	8e 19       	sub	r24, r14
    273c:	9f 09       	sbc	r25, r15
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	ff 90       	pop	r15
    274e:	ef 90       	pop	r14
    2750:	df 90       	pop	r13
    2752:	cf 90       	pop	r12
    2754:	bf 90       	pop	r11
    2756:	af 90       	pop	r10
    2758:	9f 90       	pop	r9
    275a:	8f 90       	pop	r8
    275c:	7f 90       	pop	r7
    275e:	6f 90       	pop	r6
    2760:	08 95       	ret

00002762 <__mulsi3>:
    2762:	62 9f       	mul	r22, r18
    2764:	d0 01       	movw	r26, r0
    2766:	73 9f       	mul	r23, r19
    2768:	f0 01       	movw	r30, r0
    276a:	82 9f       	mul	r24, r18
    276c:	e0 0d       	add	r30, r0
    276e:	f1 1d       	adc	r31, r1
    2770:	64 9f       	mul	r22, r20
    2772:	e0 0d       	add	r30, r0
    2774:	f1 1d       	adc	r31, r1
    2776:	92 9f       	mul	r25, r18
    2778:	f0 0d       	add	r31, r0
    277a:	83 9f       	mul	r24, r19
    277c:	f0 0d       	add	r31, r0
    277e:	74 9f       	mul	r23, r20
    2780:	f0 0d       	add	r31, r0
    2782:	65 9f       	mul	r22, r21
    2784:	f0 0d       	add	r31, r0
    2786:	99 27       	eor	r25, r25
    2788:	72 9f       	mul	r23, r18
    278a:	b0 0d       	add	r27, r0
    278c:	e1 1d       	adc	r30, r1
    278e:	f9 1f       	adc	r31, r25
    2790:	63 9f       	mul	r22, r19
    2792:	b0 0d       	add	r27, r0
    2794:	e1 1d       	adc	r30, r1
    2796:	f9 1f       	adc	r31, r25
    2798:	bd 01       	movw	r22, r26
    279a:	cf 01       	movw	r24, r30
    279c:	11 24       	eor	r1, r1
    279e:	08 95       	ret

000027a0 <__udivmodhi4>:
    27a0:	aa 1b       	sub	r26, r26
    27a2:	bb 1b       	sub	r27, r27
    27a4:	51 e1       	ldi	r21, 0x11	; 17
    27a6:	07 c0       	rjmp	.+14     	; 0x27b6 <__udivmodhi4_ep>

000027a8 <__udivmodhi4_loop>:
    27a8:	aa 1f       	adc	r26, r26
    27aa:	bb 1f       	adc	r27, r27
    27ac:	a6 17       	cp	r26, r22
    27ae:	b7 07       	cpc	r27, r23
    27b0:	10 f0       	brcs	.+4      	; 0x27b6 <__udivmodhi4_ep>
    27b2:	a6 1b       	sub	r26, r22
    27b4:	b7 0b       	sbc	r27, r23

000027b6 <__udivmodhi4_ep>:
    27b6:	88 1f       	adc	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	5a 95       	dec	r21
    27bc:	a9 f7       	brne	.-22     	; 0x27a8 <__udivmodhi4_loop>
    27be:	80 95       	com	r24
    27c0:	90 95       	com	r25
    27c2:	bc 01       	movw	r22, r24
    27c4:	cd 01       	movw	r24, r26
    27c6:	08 95       	ret

000027c8 <__divmodhi4>:
    27c8:	97 fb       	bst	r25, 7
    27ca:	09 2e       	mov	r0, r25
    27cc:	07 26       	eor	r0, r23
    27ce:	0a d0       	rcall	.+20     	; 0x27e4 <__divmodhi4_neg1>
    27d0:	77 fd       	sbrc	r23, 7
    27d2:	04 d0       	rcall	.+8      	; 0x27dc <__divmodhi4_neg2>
    27d4:	e5 df       	rcall	.-54     	; 0x27a0 <__udivmodhi4>
    27d6:	06 d0       	rcall	.+12     	; 0x27e4 <__divmodhi4_neg1>
    27d8:	00 20       	and	r0, r0
    27da:	1a f4       	brpl	.+6      	; 0x27e2 <__divmodhi4_exit>

000027dc <__divmodhi4_neg2>:
    27dc:	70 95       	com	r23
    27de:	61 95       	neg	r22
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255

000027e2 <__divmodhi4_exit>:
    27e2:	08 95       	ret

000027e4 <__divmodhi4_neg1>:
    27e4:	f6 f7       	brtc	.-4      	; 0x27e2 <__divmodhi4_exit>
    27e6:	90 95       	com	r25
    27e8:	81 95       	neg	r24
    27ea:	9f 4f       	sbci	r25, 0xFF	; 255
    27ec:	08 95       	ret

000027ee <memcpy>:
    27ee:	fb 01       	movw	r30, r22
    27f0:	dc 01       	movw	r26, r24
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <memcpy+0xa>
    27f4:	01 90       	ld	r0, Z+
    27f6:	0d 92       	st	X+, r0
    27f8:	41 50       	subi	r20, 0x01	; 1
    27fa:	50 40       	sbci	r21, 0x00	; 0
    27fc:	d8 f7       	brcc	.-10     	; 0x27f4 <memcpy+0x6>
    27fe:	08 95       	ret

00002800 <memmove>:
    2800:	68 17       	cp	r22, r24
    2802:	79 07       	cpc	r23, r25
    2804:	68 f4       	brcc	.+26     	; 0x2820 <memmove+0x20>
    2806:	fb 01       	movw	r30, r22
    2808:	dc 01       	movw	r26, r24
    280a:	e4 0f       	add	r30, r20
    280c:	f5 1f       	adc	r31, r21
    280e:	a4 0f       	add	r26, r20
    2810:	b5 1f       	adc	r27, r21
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <memmove+0x18>
    2814:	02 90       	ld	r0, -Z
    2816:	0e 92       	st	-X, r0
    2818:	41 50       	subi	r20, 0x01	; 1
    281a:	50 40       	sbci	r21, 0x00	; 0
    281c:	d8 f7       	brcc	.-10     	; 0x2814 <memmove+0x14>
    281e:	08 95       	ret
    2820:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <memcpy>

00002824 <__eerd_block_m6450a>:
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22

00002828 <__eerd_blraw_m6450a>:
    2828:	fc 01       	movw	r30, r24
    282a:	f9 99       	sbic	0x1f, 1	; 31
    282c:	fe cf       	rjmp	.-4      	; 0x282a <__eerd_blraw_m6450a+0x2>
    282e:	06 c0       	rjmp	.+12     	; 0x283c <__eerd_blraw_m6450a+0x14>
    2830:	f2 bd       	out	0x22, r31	; 34
    2832:	e1 bd       	out	0x21, r30	; 33
    2834:	f8 9a       	sbi	0x1f, 0	; 31
    2836:	31 96       	adiw	r30, 0x01	; 1
    2838:	00 b4       	in	r0, 0x20	; 32
    283a:	0d 92       	st	X+, r0
    283c:	41 50       	subi	r20, 0x01	; 1
    283e:	50 40       	sbci	r21, 0x00	; 0
    2840:	b8 f7       	brcc	.-18     	; 0x2830 <__eerd_blraw_m6450a+0x8>
    2842:	08 95       	ret

00002844 <__eerd_word_m6450a>:
    2844:	a8 e1       	ldi	r26, 0x18	; 24
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	42 e0       	ldi	r20, 0x02	; 2
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__eerd_blraw_m6450a>

00002850 <__eeupd_block_m6450a>:
    2850:	dc 01       	movw	r26, r24
    2852:	a4 0f       	add	r26, r20
    2854:	b5 1f       	adc	r27, r21
    2856:	41 50       	subi	r20, 0x01	; 1
    2858:	50 40       	sbci	r21, 0x00	; 0
    285a:	48 f0       	brcs	.+18     	; 0x286e <__eeupd_block_m6450a+0x1e>
    285c:	cb 01       	movw	r24, r22
    285e:	84 0f       	add	r24, r20
    2860:	95 1f       	adc	r25, r21
    2862:	2e 91       	ld	r18, -X
    2864:	0e 94 39 14 	call	0x2872	; 0x2872 <__eeupd_r18_m6450a>
    2868:	41 50       	subi	r20, 0x01	; 1
    286a:	50 40       	sbci	r21, 0x00	; 0
    286c:	d0 f7       	brcc	.-12     	; 0x2862 <__eeupd_block_m6450a+0x12>
    286e:	08 95       	ret

00002870 <__eeupd_byte_m6450a>:
    2870:	26 2f       	mov	r18, r22

00002872 <__eeupd_r18_m6450a>:
    2872:	f9 99       	sbic	0x1f, 1	; 31
    2874:	fe cf       	rjmp	.-4      	; 0x2872 <__eeupd_r18_m6450a>
    2876:	92 bd       	out	0x22, r25	; 34
    2878:	81 bd       	out	0x21, r24	; 33
    287a:	f8 9a       	sbi	0x1f, 0	; 31
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	00 b4       	in	r0, 0x20	; 32
    2880:	02 16       	cp	r0, r18
    2882:	31 f0       	breq	.+12     	; 0x2890 <__eeupd_r18_m6450a+0x1e>
    2884:	20 bd       	out	0x20, r18	; 32
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	fa 9a       	sbi	0x1f, 2	; 31
    288c:	f9 9a       	sbi	0x1f, 1	; 31
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	08 95       	ret

00002892 <__eeupd_word_m6450a>:
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	27 2f       	mov	r18, r23
    2896:	0e 94 39 14 	call	0x2872	; 0x2872 <__eeupd_r18_m6450a>
    289a:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__eeupd_byte_m6450a>

0000289e <_exit>:
    289e:	f8 94       	cli

000028a0 <__stop_program>:
    28a0:	ff cf       	rjmp	.-2      	; 0x28a0 <__stop_program>
