
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  000025e2  00002676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b5  00800200  00800200  00002776  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014a  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c0  00000000  00000000  000030f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044dd  00000000  00000000  000033b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000127c  00000000  00000000  00007895  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b0b  00000000  00000000  00008b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b74  00000000  00000000  0000a61c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000134f  00000000  00000000  0000b190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ab7  00000000  00000000  0000c4df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000ef96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_9>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e2 ee       	ldi	r30, 0xE2	; 226
      78:	f5 e2       	ldi	r31, 0x25	; 37
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	13 e0       	ldi	r17, 0x03	; 3
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a5 3b       	cpi	r26, 0xB5	; 181
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 a1 02 	call	0x542	; 0x542 <main>
      9a:	0c 94 ef 12 	jmp	0x25de	; 0x25de <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     120:	80 91 00 02 	lds	r24, 0x0200
     124:	08 95       	ret

00000126 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	18 2f       	mov	r17, r24
     130:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	ec 01       	movw	r28, r24
     138:	22 97       	sbiw	r28, 0x02	; 2
     13a:	be 01       	movw	r22, r28
     13c:	4e e0       	ldi	r20, 0x0E	; 14
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	0e 94 dd 12 	call	0x25ba	; 0x25ba <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     144:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     146:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     148:	10 93 00 02 	sts	0x0200, r17
	
} 
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	08 95       	ret

00000156 <remove_note>:
void remove_note(uint8_t note){
     156:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     158:	c0 91 00 01 	lds	r28, 0x0100
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     15c:	c8 17       	cp	r28, r24
     15e:	41 f0       	breq	.+16     	; 0x170 <remove_note+0x1a>
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     168:	90 81       	ld	r25, Z
     16a:	98 17       	cp	r25, r24
     16c:	59 f4       	brne	.+22     	; 0x184 <remove_note+0x2e>
     16e:	02 c0       	rjmp	.+4      	; 0x174 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     174:	fa 01       	movw	r30, r20
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	e0 50       	subi	r30, 0x00	; 0
     17c:	ff 4f       	sbci	r31, 0xFF	; 255
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	80 83       	st	Z, r24
			free_slot = i;
			break;
     182:	07 c0       	rjmp	.+14     	; 0x192 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     184:	4f 5f       	subi	r20, 0xFF	; 255
     186:	5f 4f       	sbci	r21, 0xFF	; 255
     188:	32 96       	adiw	r30, 0x02	; 2
     18a:	48 30       	cpi	r20, 0x08	; 8
     18c:	51 05       	cpc	r21, r1
     18e:	61 f7       	brne	.-40     	; 0x168 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     190:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	ca 01       	movw	r24, r20
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	bc 01       	movw	r22, r24
     19c:	6e 5f       	subi	r22, 0xFE	; 254
     19e:	7e 4f       	sbci	r23, 0xFE	; 254
     1a0:	40 95       	com	r20
     1a2:	50 95       	com	r21
     1a4:	48 5f       	subi	r20, 0xF8	; 248
     1a6:	5f 4f       	sbci	r21, 0xFF	; 255
     1a8:	44 0f       	add	r20, r20
     1aa:	55 1f       	adc	r21, r21
     1ac:	80 50       	subi	r24, 0x00	; 0
     1ae:	9f 4f       	sbci	r25, 0xFF	; 255
     1b0:	0e 94 dd 12 	call	0x25ba	; 0x25ba <memmove>
	note_pool[7].note = EMPTY;	
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	80 93 0e 01 	sts	0x010E, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1ba:	80 91 00 01 	lds	r24, 0x0100
     1be:	8f 3f       	cpi	r24, 0xFF	; 255
     1c0:	19 f4       	brne	.+6      	; 0x1c8 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1c2:	c0 93 00 02 	sts	0x0200, r28
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1c8:	80 93 00 02 	sts	0x0200, r24

	}	
	
}
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1d0:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1d2:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1d4:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1d6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1d8:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     1da:	8c 91       	ld	r24, X
     1dc:	82 b9       	out	0x02, r24	; 2
     1de:	8d e0       	ldi	r24, 0x0D	; 13
     1e0:	8a 95       	dec	r24
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <set_control_voltage+0x10>
     1e4:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     1e6:	ea ed       	ldi	r30, 0xDA	; 218
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	40 81       	ld	r20, Z
     1ec:	21 e0       	ldi	r18, 0x01	; 1
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	c9 01       	movw	r24, r18
     1f2:	11 96       	adiw	r26, 0x01	; 1
     1f4:	0c 90       	ld	r0, X
     1f6:	11 97       	sbiw	r26, 0x01	; 1
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_control_voltage+0x2e>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <set_control_voltage+0x2a>
     202:	84 2b       	or	r24, r20
     204:	80 83       	st	Z, r24
     206:	82 e4       	ldi	r24, 0x42	; 66
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x38>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x3e>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     20e:	80 81       	ld	r24, Z
     210:	11 96       	adiw	r26, 0x01	; 1
     212:	0c 90       	ld	r0, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	02 c0       	rjmp	.+4      	; 0x21c <set_control_voltage+0x4c>
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <set_control_voltage+0x48>
     220:	20 95       	com	r18
     222:	28 23       	and	r18, r24
     224:	20 83       	st	Z, r18
	
}	
     226:	08 95       	ret

00000228 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     228:	83 b3       	in	r24, 0x13	; 19
     22a:	83 60       	ori	r24, 0x03	; 3
     22c:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     232:	97 b1       	in	r25, 0x07	; 7
     234:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     236:	e9 ed       	ldi	r30, 0xD9	; 217
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8f 60       	ori	r24, 0x0F	; 15
     23e:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     240:	ea ed       	ldi	r30, 0xDA	; 218
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     24a:	84 b3       	in	r24, 0x14	; 20
     24c:	83 60       	ori	r24, 0x03	; 3
     24e:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     250:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     252:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     254:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     256:	a0 9a       	sbi	0x14, 0	; 20
}
     258:	08 95       	ret

0000025a <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     25a:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     25c:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     25e:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     260:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     262:	62 b9       	out	0x02, r22	; 2
     264:	2d e0       	ldi	r18, 0x0D	; 13
     266:	2a 95       	dec	r18
     268:	f1 f7       	brne	.-4      	; 0x266 <set_dac+0xc>
     26a:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     26c:	ea ed       	ldi	r30, 0xDA	; 218
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	40 81       	ld	r20, Z
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	b9 01       	movw	r22, r18
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_dac+0x24>
     27a:	66 0f       	add	r22, r22
     27c:	77 1f       	adc	r23, r23
     27e:	8a 95       	dec	r24
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_dac+0x20>
     282:	cb 01       	movw	r24, r22
     284:	94 2f       	mov	r25, r20
     286:	98 2b       	or	r25, r24
     288:	90 83       	st	Z, r25
     28a:	72 e4       	ldi	r23, 0x42	; 66
     28c:	7a 95       	dec	r23
     28e:	f1 f7       	brne	.-4      	; 0x28c <set_dac+0x32>
     290:	00 c0       	rjmp	.+0      	; 0x292 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     292:	90 81       	ld	r25, Z
     294:	80 95       	com	r24
     296:	89 23       	and	r24, r25
     298:	80 83       	st	Z, r24
	
}
     29a:	08 95       	ret

0000029c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t digit)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	2a 97       	sbiw	r28, 0x0a	; 10
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     2b0:	de 01       	movw	r26, r28
     2b2:	11 96       	adiw	r26, 0x01	; 1
     2b4:	ee e4       	ldi	r30, 0x4E	; 78
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	3a e0       	ldi	r19, 0x0A	; 10
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	31 50       	subi	r19, 0x01	; 1
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2c6:	ea ed       	ldi	r30, 0xDA	; 218
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	30 81       	ld	r19, Z
     2cc:	30 61       	ori	r19, 0x10	; 16
     2ce:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d0:	30 81       	ld	r19, Z
     2d2:	3f 7e       	andi	r19, 0xEF	; 239
     2d4:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     2d6:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2d8:	30 81       	ld	r19, Z
     2da:	30 62       	ori	r19, 0x20	; 32
     2dc:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2de:	30 81       	ld	r19, Z
     2e0:	3f 7d       	andi	r19, 0xDF	; 223
     2e2:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) { //modulo is a bad idea because it is massively time consuming. Maybe a lookup table could be used?
     2e4:	62 30       	cpi	r22, 0x02	; 2
     2e6:	f9 f0       	breq	.+62     	; 0x326 <display_dec+0x8a>
     2e8:	63 30       	cpi	r22, 0x03	; 3
     2ea:	18 f4       	brcc	.+6      	; 0x2f2 <display_dec+0x56>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	a1 f5       	brne	.+104    	; 0x358 <display_dec+0xbc>
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <display_dec+0x70>
     2f2:	64 30       	cpi	r22, 0x04	; 4
     2f4:	29 f1       	breq	.+74     	; 0x340 <display_dec+0xa4>
     2f6:	68 30       	cpi	r22, 0x08	; 8
     2f8:	79 f5       	brne	.+94     	; 0x358 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     2fa:	6a e0       	ldi	r22, 0x0A	; 10
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
     302:	fe 01       	movw	r30, r28
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     30a:	26 c0       	rjmp	.+76     	; 0x358 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     30c:	64 e6       	ldi	r22, 0x64	; 100
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
     314:	6a e0       	ldi	r22, 0x0A	; 10
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
     31c:	fe 01       	movw	r30, r28
     31e:	e6 0f       	add	r30, r22
     320:	f7 1f       	adc	r31, r23
     322:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     324:	19 c0       	rjmp	.+50     	; 0x358 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     326:	68 ee       	ldi	r22, 0xE8	; 232
     328:	73 e0       	ldi	r23, 0x03	; 3
     32a:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
     32e:	64 e6       	ldi	r22, 0x64	; 100
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
     336:	fe 01       	movw	r30, r28
     338:	e6 0f       	add	r30, r22
     33a:	f7 1f       	adc	r31, r23
     33c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     33e:	0c c0       	rjmp	.+24     	; 0x358 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     340:	60 e1       	ldi	r22, 0x10	; 16
     342:	77 e2       	ldi	r23, 0x27	; 39
     344:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
     348:	68 ee       	ldi	r22, 0xE8	; 232
     34a:	73 e0       	ldi	r23, 0x03	; 3
     34c:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
     350:	fe 01       	movw	r30, r28
     352:	e6 0f       	add	r30, r22
     354:	f7 1f       	adc	r31, r23
     356:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     358:	20 95       	com	r18
     35a:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     35c:	ea ed       	ldi	r30, 0xDA	; 218
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     366:	80 81       	ld	r24, Z
     368:	8f 7e       	andi	r24, 0xEF	; 239
     36a:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     36c:	2a 96       	adiw	r28, 0x0a	; 10
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <update_display+0x8>
     386:	00 d0       	rcall	.+0      	; 0x388 <update_display+0xa>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t place = 0;
	
	uint8_t digit[] = {
     38c:	28 e0       	ldi	r18, 0x08	; 8
     38e:	29 83       	std	Y+1, r18	; 0x01
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	2a 83       	std	Y+2, r18	; 0x02
     394:	22 e0       	ldi	r18, 0x02	; 2
     396:	2b 83       	std	Y+3, r18	; 0x03
     398:	24 e0       	ldi	r18, 0x04	; 4
     39a:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	if (type == DEC) {
     39c:	66 23       	and	r22, r22
     39e:	81 f4       	brne	.+32     	; 0x3c0 <update_display+0x42>

		
			
		display_dec(number, digit[place]);
     3a0:	10 91 05 02 	lds	r17, 0x0205
     3a4:	fe 01       	movw	r30, r28
     3a6:	e1 0f       	add	r30, r17
     3a8:	f1 1d       	adc	r31, r1
     3aa:	61 81       	ldd	r22, Z+1	; 0x01
     3ac:	0e 94 4e 01 	call	0x29c	; 0x29c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     3b0:	81 2f       	mov	r24, r17
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	80 93 05 02 	sts	0x0205, r24
     3b8:	13 30       	cpi	r17, 0x03	; 3
     3ba:	11 f4       	brne	.+4      	; 0x3c0 <update_display+0x42>
		{
			place = 0;
     3bc:	10 92 05 02 	sts	0x0205, r1
		
		
	}
	
	
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     3e2:	80 91 c2 02 	lds	r24, 0x02C2
     3e6:	81 50       	subi	r24, 0x01	; 1
     3e8:	87 bd       	out	0x27, r24	; 39
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
     3ea:	85 b1       	in	r24, 0x05	; 5
     3ec:	80 58       	subi	r24, 0x80	; 128
     3ee:	85 b9       	out	0x05, r24	; 5
	if (period_counter == 0) {
     3f0:	80 91 c3 02 	lds	r24, 0x02C3
     3f4:	88 23       	and	r24, r24
     3f6:	a1 f4       	brne	.+40     	; 0x420 <__vector_10+0x50>
		count_finished = FALSE;
     3f8:	10 92 c0 02 	sts	0x02C0, r1
		no_overflow = TRUE;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 ff 01 	sts	0x01FF, r24
		period_counter = 1; //set period counter to 1
     402:	80 93 c3 02 	sts	0x02C3, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     406:	e1 e8       	ldi	r30, 0x81	; 129
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	90 91 c1 02 	lds	r25, 0x02C1
     410:	89 2b       	or	r24, r25
     412:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     414:	ef e6       	ldi	r30, 0x6F	; 111
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	81 60       	ori	r24, 0x01	; 1
     41c:	80 83       	st	Z, r24
     41e:	11 c0       	rjmp	.+34     	; 0x442 <__vector_10+0x72>
		
	} else {
		
		osc_count = TCNT1;		
     420:	e4 e8       	ldi	r30, 0x84	; 132
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	90 93 bf 02 	sts	0x02BF, r25
     42c:	80 93 be 02 	sts	0x02BE, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     430:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 c0 02 	sts	0x02C0, r24
		period_counter = 0;
     43a:	10 92 c3 02 	sts	0x02C3, r1
		TCNT1 = 0; //reset timer/counter 1
     43e:	11 82       	std	Z+1, r1	; 0x01
     440:	10 82       	st	Z, r1
	}
	
	
	
	
}
     442:	ff 91       	pop	r31
     444:	ef 91       	pop	r30
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     45e:	10 92 ff 01 	sts	0x01FF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     46c:	84 2f       	mov	r24, r20
	remove_note(note);
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
	gate_buffer--;
     474:	80 91 07 02 	lds	r24, 0x0207
     478:	81 50       	subi	r24, 0x01	; 1
     47a:	80 93 07 02 	sts	0x0207, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     47e:	88 23       	and	r24, r24
     480:	09 f4       	brne	.+2      	; 0x484 <note_off_event+0x18>
     482:	89 98       	cbi	0x11, 1	; 17
     484:	08 95       	ret

00000486 <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     486:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     488:	40 93 46 02 	sts	0x0246, r20
	if (velocity == 0) {
     48c:	22 23       	and	r18, r18
     48e:	61 f4       	brne	.+24     	; 0x4a8 <note_on_event+0x22>
		remove_note(note);
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
		gate_buffer--;
     496:	80 91 07 02 	lds	r24, 0x0207
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	80 93 07 02 	sts	0x0207, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     4a0:	88 23       	and	r24, r24
     4a2:	69 f4       	brne	.+26     	; 0x4be <note_on_event+0x38>
     4a4:	89 98       	cbi	0x11, 1	; 17
     4a6:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	62 2f       	mov	r22, r18
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	0e 94 93 00 	call	0x126	; 0x126 <new_note>
		gate_buffer++; //increment gate_buffer
     4b2:	80 91 07 02 	lds	r24, 0x0207
     4b6:	8f 5f       	subi	r24, 0xFF	; 255
     4b8:	80 93 07 02 	sts	0x0207, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     4bc:	89 9a       	sbi	0x11, 1	; 17
     4be:	08 95       	ret

000004c0 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     4c0:	87 e2       	ldi	r24, 0x27	; 39
     4c2:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     4c6:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     4ca:	88 e9       	ldi	r24, 0x98	; 152
     4cc:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     4d0:	08 95       	ret

000004d2 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	2f 93       	push	r18
     4de:	3f 93       	push	r19
     4e0:	4f 93       	push	r20
     4e2:	5f 93       	push	r21
     4e4:	6f 93       	push	r22
     4e6:	7f 93       	push	r23
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	af 93       	push	r26
     4ee:	bf 93       	push	r27
     4f0:	ef 93       	push	r30
     4f2:	ff 93       	push	r31
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	0f 92       	push	r0
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
     4fe:	85 b1       	in	r24, 0x05	; 5
     500:	80 58       	subi	r24, 0x80	; 128
     502:	85 b9       	out	0x05, r24	; 5
	uint8_t inByte = UDR0;
     504:	80 91 c6 00 	lds	r24, 0x00C6
     508:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     50a:	88 ec       	ldi	r24, 0xC8	; 200
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	ae 01       	movw	r20, r28
     512:	4f 5f       	subi	r20, 0xFF	; 255
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	bf 91       	pop	r27
     526:	af 91       	pop	r26
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	7f 91       	pop	r23
     52e:	6f 91       	pop	r22
     530:	5f 91       	pop	r21
     532:	4f 91       	pop	r20
     534:	3f 91       	pop	r19
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     542:	80 e8       	ldi	r24, 0x80	; 128
     544:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     546:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     548:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     54a:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     54c:	9a 9a       	sbi	0x13, 2	; 19
	//PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
	PORTG |= (1<<TUNE_SELECT);
     54e:	a2 9a       	sbi	0x14, 2	; 20
	
	setup_spi(); 
     550:	0e 94 8a 04 	call	0x914	; 0x914 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     554:	a9 ed       	ldi	r26, 0xD9	; 217
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	8c 91       	ld	r24, X
     55a:	80 6c       	ori	r24, 0xC0	; 192
     55c:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     55e:	ea ed       	ldi	r30, 0xDA	; 218
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	80 81       	ld	r24, Z
     564:	80 6c       	ori	r24, 0xC0	; 192
     566:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     568:	81 b1       	in	r24, 0x01	; 1
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     56e:	92 b1       	in	r25, 0x02	; 2
     570:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     572:	8c 91       	ld	r24, X
     574:	80 63       	ori	r24, 0x30	; 48
     576:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     578:	80 81       	ld	r24, Z
     57a:	8f 7c       	andi	r24, 0xCF	; 207
     57c:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     57e:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     580:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     584:	0e 94 14 01 	call	0x228	; 0x228 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     588:	c8 ec       	ldi	r28, 0xC8	; 200
     58a:	d2 e0       	ldi	r29, 0x02	; 2
     58c:	ce 01       	movw	r24, r28
     58e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     592:	ce 01       	movw	r24, r28
     594:	63 e4       	ldi	r22, 0x43	; 67
     596:	72 e0       	ldi	r23, 0x02	; 2
     598:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     59c:	ce 01       	movw	r24, r28
     59e:	66 e3       	ldi	r22, 0x36	; 54
     5a0:	72 e0       	ldi	r23, 0x02	; 2
     5a2:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     5a6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     5aa:	0e 94 af 04 	call	0x95e	; 0x95e <update_spi>
	//TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
	//TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms
	

		
	sei(); //enable global interrupts
     5ae:	78 94       	sei
	
	////set initial pitch offset CVs
	vco1_init_cv = set_vco_init_cv(VCO1, 24079);
     5b0:	8f e0       	ldi	r24, 0x0F	; 15
     5b2:	6f e0       	ldi	r22, 0x0F	; 15
     5b4:	7e e5       	ldi	r23, 0x5E	; 94
     5b6:	0e 94 d3 06 	call	0xda6	; 0xda6 <set_vco_init_cv>
     5ba:	90 93 bc 02 	sts	0x02BC, r25
     5be:	80 93 bb 02 	sts	0x02BB, r24
	vco2_init_cv = set_vco_init_cv(VCO2, 24079);
     5c2:	80 ef       	ldi	r24, 0xF0	; 240
     5c4:	6f e0       	ldi	r22, 0x0F	; 15
     5c6:	7e e5       	ldi	r23, 0x5E	; 94
     5c8:	0e 94 d3 06 	call	0xda6	; 0xda6 <set_vco_init_cv>
     5cc:	90 93 ba 02 	sts	0x02BA, r25
     5d0:	80 93 b9 02 	sts	0x02B9, r24
	//value_to_display = compare_match_counter;//vco1_init_cv;
	
	//set initial switch states
	switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
     5d4:	81 e4       	ldi	r24, 0x41	; 65
     5d6:	80 93 c4 02 	sts	0x02C4, r24
	patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
     5da:	82 e2       	ldi	r24, 0x22	; 34
     5dc:	80 93 52 02 	sts	0x0252, r24
	

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     5e0:	8e 01       	movw	r16, r28
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     5e2:	0f 2e       	mov	r0, r31
     5e4:	f6 ec       	ldi	r31, 0xC6	; 198
     5e6:	ef 2e       	mov	r14, r31
     5e8:	f2 e0       	ldi	r31, 0x02	; 2
     5ea:	ff 2e       	mov	r15, r31
     5ec:	f0 2d       	mov	r31, r0
	patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     5ee:	c8 01       	movw	r24, r16
     5f0:	0e 94 b4 10 	call	0x2168	; 0x2168 <midi_device_process>
	
		update_display(value_to_display, DEC);
     5f4:	80 91 96 01 	lds	r24, 0x0196
     5f8:	90 91 97 01 	lds	r25, 0x0197
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
			
		scan_pots_and_update_control_voltages();
     602:	0e 94 19 03 	call	0x632	; 0x632 <scan_pots_and_update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     606:	80 91 06 02 	lds	r24, 0x0206
     60a:	98 2f       	mov	r25, r24
     60c:	9f 5f       	subi	r25, 0xFF	; 255
     60e:	90 93 06 02 	sts	0x0206, r25
     612:	85 30       	cpi	r24, 0x05	; 5
     614:	61 f7       	brne	.-40     	; 0x5ee <main+0xac>
		{
			switch_timer = 0;
     616:	10 92 06 02 	sts	0x0206, r1
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     61a:	f7 01       	movw	r30, r14
     61c:	c0 81       	ld	r28, Z
     61e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <read_switch_port>
     622:	8c 27       	eor	r24, r28
     624:	f7 01       	movw	r30, r14
     626:	80 83       	st	Z, r24
			update_spi();
     628:	0e 94 af 04 	call	0x95e	; 0x95e <update_spi>
			refresh_synth();
     62c:	0e 94 cb 05 	call	0xb96	; 0xb96 <refresh_synth>
     630:	de cf       	rjmp	.-68     	; 0x5ee <main+0xac>

00000632 <scan_pots_and_update_control_voltages>:
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     632:	2f 92       	push	r2
     634:	3f 92       	push	r3
     636:	4f 92       	push	r4
     638:	5f 92       	push	r5
     63a:	6f 92       	push	r6
     63c:	7f 92       	push	r7
     63e:	8f 92       	push	r8
     640:	9f 92       	push	r9
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     656:	06 e2       	ldi	r16, 0x26	; 38
     658:	12 e0       	ldi	r17, 0x02	; 2
     65a:	0f 2e       	mov	r0, r31
     65c:	f6 e7       	ldi	r31, 0x76	; 118
     65e:	cf 2e       	mov	r12, r31
     660:	f1 e0       	ldi	r31, 0x01	; 1
     662:	df 2e       	mov	r13, r31
     664:	f0 2d       	mov	r31, r0
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     666:	ee 24       	eor	r14, r14
     668:	ff 24       	eor	r15, r15
     66a:	e3 94       	inc	r14
     66c:	c0 e0       	ldi	r28, 0x00	; 0
     66e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     670:	0f 2e       	mov	r0, r31
     672:	fa e3       	ldi	r31, 0x3A	; 58
     674:	8f 2e       	mov	r8, r31
     676:	f1 e0       	ldi	r31, 0x01	; 1
     678:	9f 2e       	mov	r9, r31
     67a:	f0 2d       	mov	r31, r0
				break;
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     67c:	aa 24       	eor	r10, r10
     67e:	bb 24       	eor	r11, r11
     680:	68 94       	set
     682:	b1 f8       	bld	r11, 1
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     684:	0f 2e       	mov	r0, r31
     686:	f8 e3       	ldi	r31, 0x38	; 56
     688:	6f 2e       	mov	r6, r31
     68a:	f1 e0       	ldi	r31, 0x01	; 1
     68c:	7f 2e       	mov	r7, r31
     68e:	f0 2d       	mov	r31, r0
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     690:	0f 2e       	mov	r0, r31
     692:	f2 e4       	ldi	r31, 0x42	; 66
     694:	4f 2e       	mov	r4, r31
     696:	f1 e0       	ldi	r31, 0x01	; 1
     698:	5f 2e       	mov	r5, r31
     69a:	f0 2d       	mov	r31, r0
     69c:	08 c0       	rjmp	.+16     	; 0x6ae <scan_pots_and_update_control_voltages+0x7c>
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     69e:	21 96       	adiw	r28, 0x01	; 1
     6a0:	08 94       	sec
     6a2:	e1 1c       	adc	r14, r1
     6a4:	f1 1c       	adc	r15, r1
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	c8 0e       	add	r12, r24
     6ac:	d9 1e       	adc	r13, r25

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{

		adc_value = read_pot(POTMUX_EN0, i);
     6ae:	86 e0       	ldi	r24, 0x06	; 6
     6b0:	6c 2f       	mov	r22, r28
     6b2:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     6b6:	90 93 4a 02 	sts	0x024A, r25
     6ba:	80 93 49 02 	sts	0x0249, r24
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
     6be:	f8 01       	movw	r30, r16
     6c0:	60 81       	ld	r22, Z
     6c2:	71 81       	ldd	r23, Z+1	; 0x01
     6c4:	86 1b       	sub	r24, r22
     6c6:	97 0b       	sbc	r25, r23
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
     6c8:	95 95       	asr	r25
     6ca:	87 95       	ror	r24
     6cc:	95 95       	asr	r25
     6ce:	87 95       	ror	r24
     6d0:	9c 01       	movw	r18, r24
     6d2:	26 0f       	add	r18, r22
     6d4:	37 1f       	adc	r19, r23
     6d6:	21 93       	st	Z+, r18
     6d8:	31 93       	st	Z+, r19
     6da:	8f 01       	movw	r16, r30
		int fine_offset = 0;
		
		switch (i)
     6dc:	c8 30       	cpi	r28, 0x08	; 8
     6de:	d1 05       	cpc	r29, r1
     6e0:	71 f0       	breq	.+28     	; 0x6fe <scan_pots_and_update_control_voltages+0xcc>
     6e2:	c9 30       	cpi	r28, 0x09	; 9
     6e4:	d1 05       	cpc	r29, r1
     6e6:	24 f4       	brge	.+8      	; 0x6f0 <scan_pots_and_update_control_voltages+0xbe>
     6e8:	c4 30       	cpi	r28, 0x04	; 4
     6ea:	d1 05       	cpc	r29, r1
     6ec:	b1 f5       	brne	.+108    	; 0x75a <scan_pots_and_update_control_voltages+0x128>
     6ee:	2a c0       	rjmp	.+84     	; 0x744 <scan_pots_and_update_control_voltages+0x112>
     6f0:	c9 30       	cpi	r28, 0x09	; 9
     6f2:	d1 05       	cpc	r29, r1
     6f4:	b1 f0       	breq	.+44     	; 0x722 <scan_pots_and_update_control_voltages+0xf0>
     6f6:	cb 30       	cpi	r28, 0x0B	; 11
     6f8:	d1 05       	cpc	r29, r1
     6fa:	79 f5       	brne	.+94     	; 0x75a <scan_pots_and_update_control_voltages+0x128>
     6fc:	3a c0       	rjmp	.+116    	; 0x772 <scan_pots_and_update_control_voltages+0x140>
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
     6fe:	60 91 b9 02 	lds	r22, 0x02B9
     702:	70 91 ba 02 	lds	r23, 0x02BA
     706:	60 50       	subi	r22, 0x00	; 0
     708:	7e 4f       	sbci	r23, 0xFE	; 254
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     70a:	80 91 47 02 	lds	r24, 0x0247
     70e:	90 91 48 02 	lds	r25, 0x0248
     712:	68 0f       	add	r22, r24
     714:	79 1f       	adc	r23, r25
     716:	62 1b       	sub	r22, r18
     718:	73 0b       	sbc	r23, r19
     71a:	c4 01       	movw	r24, r8
     71c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     720:	be cf       	rjmp	.-132    	; 0x69e <scan_pots_and_update_control_voltages+0x6c>
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     722:	b5 01       	movw	r22, r10
     724:	62 1b       	sub	r22, r18
     726:	73 0b       	sbc	r23, r19
     728:	70 93 48 02 	sts	0x0248, r23
     72c:	60 93 47 02 	sts	0x0247, r22
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     730:	80 91 bb 02 	lds	r24, 0x02BB
     734:	90 91 bc 02 	lds	r25, 0x02BC
     738:	68 0f       	add	r22, r24
     73a:	79 1f       	adc	r23, r25
     73c:	c3 01       	movw	r24, r6
     73e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     742:	ad cf       	rjmp	.-166    	; 0x69e <scan_pots_and_update_control_voltages+0x6c>
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     744:	b9 01       	movw	r22, r18
     746:	66 0f       	add	r22, r22
     748:	77 1f       	adc	r23, r23
     74a:	66 0f       	add	r22, r22
     74c:	77 1f       	adc	r23, r23
     74e:	66 0f       	add	r22, r22
     750:	77 1f       	adc	r23, r23
     752:	c2 01       	movw	r24, r4
     754:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     758:	a2 cf       	rjmp	.-188    	; 0x69e <scan_pots_and_update_control_voltages+0x6c>
			
			default: //set control voltage full-scale
				set_control_voltage(pot_decoder_0[i], pot_group_0[i] << 4);
     75a:	b9 01       	movw	r22, r18
     75c:	62 95       	swap	r22
     75e:	72 95       	swap	r23
     760:	70 7f       	andi	r23, 0xF0	; 240
     762:	76 27       	eor	r23, r22
     764:	60 7f       	andi	r22, 0xF0	; 240
     766:	76 27       	eor	r23, r22
     768:	f6 01       	movw	r30, r12
     76a:	80 81       	ld	r24, Z
     76c:	91 81       	ldd	r25, Z+1	; 0x01
     76e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	}; 
	
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     772:	f0 e1       	ldi	r31, 0x10	; 16
     774:	ef 16       	cp	r14, r31
     776:	f1 04       	cpc	r15, r1
     778:	0c f4       	brge	.+2      	; 0x77c <scan_pots_and_update_control_voltages+0x14a>
     77a:	91 cf       	rjmp	.-222    	; 0x69e <scan_pots_and_update_control_voltages+0x6c>
			
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
     77c:	0e 94 90 00 	call	0x120	; 0x120 <get_current_note>
     780:	a8 2e       	mov	r10, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     782:	87 e0       	ldi	r24, 0x07	; 7
     784:	8a 15       	cp	r24, r10
     786:	18 f0       	brcs	.+6      	; 0x78e <scan_pots_and_update_control_voltages+0x15c>
     788:	aa 24       	eor	r10, r10
     78a:	68 94       	set
     78c:	a3 f8       	bld	r10, 3
     78e:	0f 2e       	mov	r0, r31
     790:	f8 e0       	ldi	r31, 0x08	; 8
     792:	ef 2e       	mov	r14, r31
     794:	f2 e0       	ldi	r31, 0x02	; 2
     796:	ff 2e       	mov	r15, r31
     798:	f0 2d       	mov	r31, r0
     79a:	0f 2e       	mov	r0, r31
     79c:	f8 e5       	ldi	r31, 0x58	; 88
     79e:	cf 2e       	mov	r12, r31
     7a0:	f1 e0       	ldi	r31, 0x01	; 1
     7a2:	df 2e       	mov	r13, r31
     7a4:	f0 2d       	mov	r31, r0
     7a6:	01 e0       	ldi	r16, 0x01	; 1
     7a8:	10 e0       	ldi	r17, 0x00	; 0
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
		
		switch(i) 
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     7aa:	0f 2e       	mov	r0, r31
     7ac:	f8 ef       	ldi	r31, 0xF8	; 248
     7ae:	bf 2e       	mov	r11, r31
     7b0:	f0 2d       	mov	r31, r0
     7b2:	ba 0c       	add	r11, r10
     7b4:	0f 2e       	mov	r0, r31
     7b6:	f5 e5       	ldi	r31, 0x55	; 85
     7b8:	6f 2e       	mov	r6, r31
     7ba:	f2 e0       	ldi	r31, 0x02	; 2
     7bc:	7f 2e       	mov	r7, r31
     7be:	f0 2d       	mov	r31, r0
				uint16_t key_track_byte = (pot_group_1[3]); //			 
     7c0:	0f 2e       	mov	r0, r31
     7c2:	fe e0       	ldi	r31, 0x0E	; 14
     7c4:	8f 2e       	mov	r8, r31
     7c6:	f2 e0       	ldi	r31, 0x02	; 2
     7c8:	9f 2e       	mov	r9, r31
     7ca:	f0 2d       	mov	r31, r0
				uint16_t divided_pitch_cv = ((uint32_t)key_track_byte*interpolated_pitch_cv) >> 10; //note that produce of key_track_byte and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly

				//value_to_display = divided_pitch_cv;
							
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     7cc:	0f 2e       	mov	r0, r31
     7ce:	fe ef       	ldi	r31, 0xFE	; 254
     7d0:	4f 2e       	mov	r4, r31
     7d2:	ff ef       	ldi	r31, 0xFF	; 255
     7d4:	5f 2e       	mov	r5, r31
     7d6:	f0 2d       	mov	r31, r0
     7d8:	48 0c       	add	r4, r8
     7da:	59 1c       	adc	r5, r9
				if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
				set_control_voltage(&cutoff_cv, filter_cutoff_cv);
     7dc:	0f 2e       	mov	r0, r31
     7de:	f8 e2       	ldi	r31, 0x28	; 40
     7e0:	2f 2e       	mov	r2, r31
     7e2:	f1 e0       	ldi	r31, 0x01	; 1
     7e4:	3f 2e       	mov	r3, r31
     7e6:	f0 2d       	mov	r31, r0
     7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <scan_pots_and_update_control_voltages+0x1c4>
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     7ea:	0f 5f       	subi	r16, 0xFF	; 255
     7ec:	1f 4f       	sbci	r17, 0xFF	; 255
     7ee:	e2 e0       	ldi	r30, 0x02	; 2
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	ce 0e       	add	r12, r30
     7f4:	df 1e       	adc	r13, r31
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     7f6:	87 e0       	ldi	r24, 0x07	; 7
     7f8:	60 2f       	mov	r22, r16
     7fa:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     7fe:	90 93 4a 02 	sts	0x024A, r25
     802:	80 93 49 02 	sts	0x0249, r24
		int adc_change = adc_value - pot_group_1[i];
     806:	f7 01       	movw	r30, r14
     808:	20 81       	ld	r18, Z
     80a:	31 81       	ldd	r19, Z+1	; 0x01
     80c:	82 1b       	sub	r24, r18
     80e:	93 0b       	sbc	r25, r19
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
     810:	95 95       	asr	r25
     812:	87 95       	ror	r24
     814:	95 95       	asr	r25
     816:	87 95       	ror	r24
     818:	82 0f       	add	r24, r18
     81a:	93 1f       	adc	r25, r19
     81c:	81 93       	st	Z+, r24
     81e:	91 93       	st	Z+, r25
     820:	7f 01       	movw	r14, r30
		
		switch(i) 
     822:	03 30       	cpi	r16, 0x03	; 3
     824:	11 05       	cpc	r17, r1
     826:	99 f5       	brne	.+102    	; 0x88e <scan_pots_and_update_control_voltages+0x25c>
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     828:	8b 2d       	mov	r24, r11
     82a:	b3 01       	movw	r22, r6
     82c:	0e 94 32 0b 	call	0x1664	; 0x1664 <interpolate_pitch_cv>
				uint16_t key_track_byte = (pot_group_1[3]); //			 
				uint16_t divided_pitch_cv = ((uint32_t)key_track_byte*interpolated_pitch_cv) >> 10; //note that produce of key_track_byte and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
     830:	bc 01       	movw	r22, r24
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	f4 01       	movw	r30, r8
     838:	20 81       	ld	r18, Z
     83a:	31 81       	ldd	r19, Z+1	; 0x01
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsi3>
     844:	dc 01       	movw	r26, r24
     846:	cb 01       	movw	r24, r22
     848:	07 2e       	mov	r0, r23
     84a:	7a e0       	ldi	r23, 0x0A	; 10
     84c:	b6 95       	lsr	r27
     84e:	a7 95       	ror	r26
     850:	97 95       	ror	r25
     852:	87 95       	ror	r24
     854:	7a 95       	dec	r23
     856:	d1 f7       	brne	.-12     	; 0x84c <scan_pots_and_update_control_voltages+0x21a>
     858:	70 2d       	mov	r23, r0

				//value_to_display = divided_pitch_cv;
							
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     85a:	f2 01       	movw	r30, r4
     85c:	c0 81       	ld	r28, Z
     85e:	d1 81       	ldd	r29, Z+1	; 0x01
     860:	c2 95       	swap	r28
     862:	d2 95       	swap	r29
     864:	d0 7f       	andi	r29, 0xF0	; 240
     866:	dc 27       	eor	r29, r28
     868:	c0 7f       	andi	r28, 0xF0	; 240
     86a:	dc 27       	eor	r29, r28
     86c:	c8 0f       	add	r28, r24
     86e:	d9 1f       	adc	r29, r25
     870:	f0 e4       	ldi	r31, 0x40	; 64
     872:	c0 30       	cpi	r28, 0x00	; 0
     874:	df 07       	cpc	r29, r31
     876:	10 f0       	brcs	.+4      	; 0x87c <scan_pots_and_update_control_voltages+0x24a>
     878:	cf ef       	ldi	r28, 0xFF	; 255
     87a:	df e3       	ldi	r29, 0x3F	; 63
				if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
				set_control_voltage(&cutoff_cv, filter_cutoff_cv);
     87c:	c1 01       	movw	r24, r2
     87e:	be 01       	movw	r22, r28
     880:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				value_to_display = filter_cutoff_cv;
     884:	d0 93 97 01 	sts	0x0197, r29
     888:	c0 93 96 01 	sts	0x0196, r28
     88c:	ae cf       	rjmp	.-164    	; 0x7ea <scan_pots_and_update_control_voltages+0x1b8>
				break;
			
			default:
				set_control_voltage(pot_decoder_1[i], pot_group_1[i] <<4);
     88e:	bc 01       	movw	r22, r24
     890:	62 95       	swap	r22
     892:	72 95       	swap	r23
     894:	70 7f       	andi	r23, 0xF0	; 240
     896:	76 27       	eor	r23, r22
     898:	60 7f       	andi	r22, 0xF0	; 240
     89a:	76 27       	eor	r23, r22
     89c:	f6 01       	movw	r30, r12
     89e:	80 81       	ld	r24, Z
     8a0:	91 81       	ldd	r25, Z+1	; 0x01
     8a2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//value_to_display = note;	
	
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     8a6:	0f 30       	cpi	r16, 0x0F	; 15
     8a8:	11 05       	cpc	r17, r1
     8aa:	0c f4       	brge	.+2      	; 0x8ae <scan_pots_and_update_control_voltages+0x27c>
     8ac:	9e cf       	rjmp	.-196    	; 0x7ea <scan_pots_and_update_control_voltages+0x1b8>
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose 
     8ae:	8a 2d       	mov	r24, r10
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	6f e0       	ldi	r22, 0x0F	; 15
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	0e 94 01 05 	call	0xa02	; 0xa02 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     8ba:	67 e9       	ldi	r22, 0x97	; 151
     8bc:	72 e0       	ldi	r23, 0x02	; 2
     8be:	0e 94 32 0b 	call	0x1664	; 0x1664 <interpolate_pitch_cv>
     8c2:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     8c4:	8c e4       	ldi	r24, 0x4C	; 76
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     8cc:	8a 2d       	mov	r24, r10
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	60 ef       	ldi	r22, 0xF0	; 240
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	0e 94 01 05 	call	0xa02	; 0xa02 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     8d8:	65 e7       	ldi	r22, 0x75	; 117
     8da:	72 e0       	ldi	r23, 0x02	; 2
     8dc:	0e 94 32 0b 	call	0x1664	; 0x1664 <interpolate_pitch_cv>
     8e0:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv); 
     8e2:	8a e4       	ldi	r24, 0x4A	; 74
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     8ea:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     8ec:	a1 9a       	sbi	0x14, 1	; 20
	
	
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	9f 90       	pop	r9
     904:	8f 90       	pop	r8
     906:	7f 90       	pop	r7
     908:	6f 90       	pop	r6
     90a:	5f 90       	pop	r5
     90c:	4f 90       	pop	r4
     90e:	3f 90       	pop	r3
     910:	2f 90       	pop	r2
     912:	08 95       	ret

00000914 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     914:	84 b1       	in	r24, 0x04	; 4
     916:	87 62       	ori	r24, 0x27	; 39
     918:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     91a:	ec ed       	ldi	r30, 0xDC	; 220
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	8c 65       	ori	r24, 0x5C	; 92
     922:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     924:	85 b1       	in	r24, 0x05	; 5
     926:	89 7d       	andi	r24, 0xD9	; 217
     928:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     92a:	ed ed       	ldi	r30, 0xDD	; 221
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	83 7f       	andi	r24, 0xF3	; 243
     932:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     934:	80 e5       	ldi	r24, 0x50	; 80
     936:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     938:	80 81       	ld	r24, Z
     93a:	87 7f       	andi	r24, 0xF7	; 247
     93c:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     93e:	80 81       	ld	r24, Z
     940:	87 7f       	andi	r24, 0xF7	; 247
     942:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     944:	80 81       	ld	r24, Z
     946:	88 60       	ori	r24, 0x08	; 8
     948:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     94a:	80 81       	ld	r24, Z
     94c:	8f 7e       	andi	r24, 0xEF	; 239
     94e:	80 83       	st	Z, r24
	
}
     950:	08 95       	ret

00000952 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     952:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     954:	0d b4       	in	r0, 0x2d	; 45
     956:	07 fe       	sbrs	r0, 7
     958:	fd cf       	rjmp	.-6      	; 0x954 <spi_shift_byte+0x2>
	return SPDR;
     95a:	8e b5       	in	r24, 0x2e	; 46
	
}
     95c:	08 95       	ret

0000095e <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     95e:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(patch.byte_5);
     960:	80 91 53 02 	lds	r24, 0x0253
     964:	0e 94 a9 04 	call	0x952	; 0x952 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     968:	90 91 4c 02 	lds	r25, 0x024C
     96c:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     96e:	98 27       	eor	r25, r24
     970:	90 93 4c 02 	sts	0x024C, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     974:	98 23       	and	r25, r24
     976:	90 93 4b 02 	sts	0x024B, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     97a:	80 91 c4 02 	lds	r24, 0x02C4
     97e:	98 27       	eor	r25, r24
     980:	90 93 c4 02 	sts	0x02C4, r25
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     984:	80 91 52 02 	lds	r24, 0x0252
     988:	0e 94 a9 04 	call	0x952	; 0x952 <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     98c:	90 91 4e 02 	lds	r25, 0x024E
     990:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     992:	98 27       	eor	r25, r24
     994:	90 93 4e 02 	sts	0x024E, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     998:	98 23       	and	r25, r24
     99a:	90 93 4d 02 	sts	0x024D, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     99e:	80 91 c5 02 	lds	r24, 0x02C5
     9a2:	98 27       	eor	r25, r24
     9a4:	90 93 c5 02 	sts	0x02C5, r25
							
			//SHIFT 3th BYTE
			spi_shift_byte(patch.byte_3);
     9a8:	80 91 51 02 	lds	r24, 0x0251
     9ac:	0e 94 a9 04 	call	0x952	; 0x952 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(0);
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 a9 04 	call	0x952	; 0x952 <spi_shift_byte>
			
			//SHIFT 1st BYTE			
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     9b6:	90 91 c6 02 	lds	r25, 0x02C6
     9ba:	89 2f       	mov	r24, r25
     9bc:	82 95       	swap	r24
     9be:	8f 70       	andi	r24, 0x0F	; 15
     9c0:	87 95       	ror	r24
     9c2:	88 27       	eor	r24, r24
     9c4:	87 95       	ror	r24

			//SHIFT 2th BYTE
			spi_shift_byte(0);
			
			//SHIFT 1st BYTE			
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     9c6:	96 95       	lsr	r25
     9c8:	96 95       	lsr	r25
     9ca:	96 95       	lsr	r25
     9cc:	91 70       	andi	r25, 0x01	; 1
     9ce:	89 2b       	or	r24, r25
     9d0:	20 91 c5 02 	lds	r18, 0x02C5
     9d4:	22 95       	swap	r18
     9d6:	26 95       	lsr	r18
     9d8:	27 70       	andi	r18, 0x07	; 7
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	21 70       	andi	r18, 0x01	; 1
     9de:	30 70       	andi	r19, 0x00	; 0
     9e0:	22 0f       	add	r18, r18
     9e2:	33 1f       	adc	r19, r19
     9e4:	22 0f       	add	r18, r18
     9e6:	33 1f       	adc	r19, r19
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV; 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     9e8:	82 2b       	or	r24, r18
     9ea:	0e 94 a9 04 	call	0x952	; 0x952 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     9ee:	ed ed       	ldi	r30, 0xDD	; 221
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	87 7f       	andi	r24, 0xF7	; 247
     9f6:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     9f8:	80 81       	ld	r24, Z
     9fa:	88 60       	ori	r24, 0x08	; 8
     9fc:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     9fe:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     a00:	08 95       	ret

00000a02 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
     a02:	90 91 54 02 	lds	r25, 0x0254
     a06:	97 70       	andi	r25, 0x07	; 7
	if (vco == VCO2) n = octave_index.vco2;
     a08:	60 3f       	cpi	r22, 0xF0	; 240
     a0a:	31 f4       	brne	.+12     	; 0xa18 <transpose_note+0x16>
     a0c:	90 91 54 02 	lds	r25, 0x0254
     a10:	96 95       	lsr	r25
     a12:	96 95       	lsr	r25
     a14:	96 95       	lsr	r25
     a16:	97 70       	andi	r25, 0x07	; 7

	note = (n*12) + note; //calculate MIDI note after octave addition
     a18:	29 2f       	mov	r18, r25
     a1a:	22 0f       	add	r18, r18
     a1c:	92 0f       	add	r25, r18
     a1e:	99 0f       	add	r25, r25
     a20:	99 0f       	add	r25, r25
     a22:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
     a24:	89 38       	cpi	r24, 0x89	; 137
     a26:	08 f0       	brcs	.+2      	; 0xa2a <transpose_note+0x28>
     a28:	88 e8       	ldi	r24, 0x88	; 136
	
}
     a2a:	08 95       	ret

00000a2c <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
     a2c:	80 91 c4 02 	lds	r24, 0x02C4
     a30:	98 2f       	mov	r25, r24
     a32:	96 95       	lsr	r25
     a34:	96 95       	lsr	r25
     a36:	96 95       	lsr	r25
     a38:	90 ff       	sbrs	r25, 0
     a3a:	14 c0       	rjmp	.+40     	; 0xa64 <update_octave_range+0x38>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
     a3c:	20 91 54 02 	lds	r18, 0x0254
     a40:	92 2f       	mov	r25, r18
     a42:	9f 5f       	subi	r25, 0xFF	; 255
     a44:	97 70       	andi	r25, 0x07	; 7
     a46:	28 7f       	andi	r18, 0xF8	; 248
     a48:	29 2b       	or	r18, r25
     a4a:	20 93 54 02 	sts	0x0254, r18
     a4e:	95 30       	cpi	r25, 0x05	; 5
     a50:	29 f4       	brne	.+10     	; 0xa5c <update_octave_range+0x30>
     a52:	92 2f       	mov	r25, r18
     a54:	98 7f       	andi	r25, 0xF8	; 248
     a56:	94 60       	ori	r25, 0x04	; 4
     a58:	90 93 54 02 	sts	0x0254, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
     a5c:	98 e0       	ldi	r25, 0x08	; 8
     a5e:	89 27       	eor	r24, r25
     a60:	80 93 c4 02 	sts	0x02C4, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
     a64:	80 91 c5 02 	lds	r24, 0x02C5
     a68:	98 2f       	mov	r25, r24
     a6a:	96 95       	lsr	r25
     a6c:	96 95       	lsr	r25
     a6e:	96 95       	lsr	r25
     a70:	90 ff       	sbrs	r25, 0
     a72:	11 c0       	rjmp	.+34     	; 0xa96 <update_octave_range+0x6a>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
     a74:	90 91 54 02 	lds	r25, 0x0254
     a78:	97 70       	andi	r25, 0x07	; 7
     a7a:	49 f0       	breq	.+18     	; 0xa8e <update_octave_range+0x62>
     a7c:	90 91 54 02 	lds	r25, 0x0254
     a80:	29 2f       	mov	r18, r25
     a82:	29 5f       	subi	r18, 0xF9	; 249
     a84:	27 70       	andi	r18, 0x07	; 7
     a86:	98 7f       	andi	r25, 0xF8	; 248
     a88:	92 2b       	or	r25, r18
     a8a:	90 93 54 02 	sts	0x0254, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
     a8e:	98 e0       	ldi	r25, 0x08	; 8
     a90:	89 27       	eor	r24, r25
     a92:	80 93 c5 02 	sts	0x02C5, r24

	}
	
	patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
     a96:	80 91 54 02 	lds	r24, 0x0254
     a9a:	87 70       	andi	r24, 0x07	; 7
     a9c:	ed e9       	ldi	r30, 0x9D	; 157
     a9e:	f1 e0       	ldi	r31, 0x01	; 1
     aa0:	e8 0f       	add	r30, r24
     aa2:	f1 1d       	adc	r31, r1
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	00 80       	ld	r0, Z
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <update_octave_range+0x84>
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	0a 94       	dec	r0
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <update_octave_range+0x80>
     ab4:	58 2f       	mov	r21, r24
     ab6:	80 93 52 02 	sts	0x0252, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
     aba:	90 91 c5 02 	lds	r25, 0x02C5
     abe:	29 2f       	mov	r18, r25
     ac0:	26 95       	lsr	r18
     ac2:	26 95       	lsr	r18
     ac4:	20 ff       	sbrs	r18, 0
     ac6:	1a c0       	rjmp	.+52     	; 0xafc <update_octave_range+0xd0>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
     ac8:	80 91 54 02 	lds	r24, 0x0254
     acc:	28 2f       	mov	r18, r24
     ace:	26 95       	lsr	r18
     ad0:	26 95       	lsr	r18
     ad2:	26 95       	lsr	r18
     ad4:	2f 5f       	subi	r18, 0xFF	; 255
     ad6:	27 70       	andi	r18, 0x07	; 7
     ad8:	32 2f       	mov	r19, r18
     ada:	33 0f       	add	r19, r19
     adc:	33 0f       	add	r19, r19
     ade:	33 0f       	add	r19, r19
     ae0:	87 7c       	andi	r24, 0xC7	; 199
     ae2:	83 2b       	or	r24, r19
     ae4:	80 93 54 02 	sts	0x0254, r24
     ae8:	25 30       	cpi	r18, 0x05	; 5
     aea:	21 f4       	brne	.+8      	; 0xaf4 <update_octave_range+0xc8>
     aec:	87 7c       	andi	r24, 0xC7	; 199
     aee:	80 62       	ori	r24, 0x20	; 32
     af0:	80 93 54 02 	sts	0x0254, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
     af4:	84 e0       	ldi	r24, 0x04	; 4
     af6:	98 27       	eor	r25, r24
     af8:	90 93 c5 02 	sts	0x02C5, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
     afc:	90 91 c5 02 	lds	r25, 0x02C5
     b00:	29 2f       	mov	r18, r25
     b02:	26 95       	lsr	r18
     b04:	20 ff       	sbrs	r18, 0
     b06:	17 c0       	rjmp	.+46     	; 0xb36 <update_octave_range+0x10a>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
     b08:	80 91 54 02 	lds	r24, 0x0254
     b0c:	88 73       	andi	r24, 0x38	; 56
     b0e:	79 f0       	breq	.+30     	; 0xb2e <update_octave_range+0x102>
     b10:	80 91 54 02 	lds	r24, 0x0254
     b14:	28 2f       	mov	r18, r24
     b16:	26 95       	lsr	r18
     b18:	26 95       	lsr	r18
     b1a:	26 95       	lsr	r18
     b1c:	29 5f       	subi	r18, 0xF9	; 249
     b1e:	27 70       	andi	r18, 0x07	; 7
     b20:	22 0f       	add	r18, r18
     b22:	22 0f       	add	r18, r18
     b24:	22 0f       	add	r18, r18
     b26:	87 7c       	andi	r24, 0xC7	; 199
     b28:	82 2b       	or	r24, r18
     b2a:	80 93 54 02 	sts	0x0254, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	98 27       	eor	r25, r24
     b32:	90 93 c5 02 	sts	0x02C5, r25
		
	}
			
	patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
     b36:	40 91 51 02 	lds	r20, 0x0251
     b3a:	4c 7f       	andi	r20, 0xFC	; 252
     b3c:	40 93 51 02 	sts	0x0251, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
     b40:	90 91 54 02 	lds	r25, 0x0254
     b44:	96 95       	lsr	r25
     b46:	96 95       	lsr	r25
     b48:	96 95       	lsr	r25
     b4a:	97 70       	andi	r25, 0x07	; 7
     b4c:	89 2f       	mov	r24, r25
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	83 30       	cpi	r24, 0x03	; 3
     b52:	91 05       	cpc	r25, r1
     b54:	84 f0       	brlt	.+32     	; 0xb76 <update_octave_range+0x14a>

						
		patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
     b56:	fc 01       	movw	r30, r24
     b58:	e8 56       	subi	r30, 0x68	; 104
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	c9 01       	movw	r24, r18
     b62:	00 80       	ld	r0, Z
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <update_octave_range+0x13e>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	0a 94       	dec	r0
     b6c:	e2 f7       	brpl	.-8      	; 0xb66 <update_octave_range+0x13a>
     b6e:	84 2b       	or	r24, r20
     b70:	80 93 51 02 	sts	0x0251, r24
     b74:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
     b76:	fc 01       	movw	r30, r24
     b78:	e8 56       	subi	r30, 0x68	; 104
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
     b7c:	21 e0       	ldi	r18, 0x01	; 1
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	c9 01       	movw	r24, r18
     b82:	00 80       	ld	r0, Z
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <update_octave_range+0x15e>
     b86:	88 0f       	add	r24, r24
     b88:	99 1f       	adc	r25, r25
     b8a:	0a 94       	dec	r0
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <update_octave_range+0x15a>
     b8e:	85 2b       	or	r24, r21
     b90:	80 93 52 02 	sts	0x0252, r24
     b94:	08 95       	ret

00000b96 <refresh_synth>:
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     b96:	90 91 c4 02 	lds	r25, 0x02C4
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
     b9a:	80 91 c6 02 	lds	r24, 0x02C6
     b9e:	86 95       	lsr	r24
     ba0:	86 95       	lsr	r24
     ba2:	68 2f       	mov	r22, r24
     ba4:	67 95       	ror	r22
     ba6:	66 27       	eor	r22, r22
     ba8:	67 95       	ror	r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     baa:	29 2f       	mov	r18, r25
     bac:	21 70       	andi	r18, 0x01	; 1
     bae:	26 2b       	or	r18, r22
     bb0:	69 2f       	mov	r22, r25
     bb2:	66 1f       	adc	r22, r22
     bb4:	66 27       	eor	r22, r22
     bb6:	66 1f       	adc	r22, r22
     bb8:	66 0f       	add	r22, r22
     bba:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
     bbc:	29 2f       	mov	r18, r25
     bbe:	26 95       	lsr	r18
     bc0:	26 95       	lsr	r18
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	21 70       	andi	r18, 0x01	; 1
     bc6:	30 70       	andi	r19, 0x00	; 0
     bc8:	d9 01       	movw	r26, r18
     bca:	aa 0f       	add	r26, r26
     bcc:	bb 1f       	adc	r27, r27
     bce:	aa 0f       	add	r26, r26
     bd0:	bb 1f       	adc	r27, r27
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     bd2:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
     bd4:	a9 2f       	mov	r26, r25
     bd6:	a6 95       	lsr	r26
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	a1 70       	andi	r26, 0x01	; 1
     bdc:	b0 70       	andi	r27, 0x00	; 0
     bde:	fd 01       	movw	r30, r26
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	ee 0f       	add	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     bec:	a6 2f       	mov	r26, r22
     bee:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
     bf0:	e9 2f       	mov	r30, r25
     bf2:	e2 95       	swap	r30
     bf4:	ef 70       	andi	r30, 0x0F	; 15
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	e1 70       	andi	r30, 0x01	; 1
     bfa:	f0 70       	andi	r31, 0x00	; 0
     bfc:	bf 01       	movw	r22, r30
     bfe:	62 95       	swap	r22
     c00:	72 95       	swap	r23
     c02:	70 7f       	andi	r23, 0xF0	; 240
     c04:	76 27       	eor	r23, r22
     c06:	60 7f       	andi	r22, 0xF0	; 240
     c08:	76 27       	eor	r23, r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c0a:	ea 2f       	mov	r30, r26
     c0c:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
     c0e:	69 2f       	mov	r22, r25
     c10:	62 95       	swap	r22
     c12:	66 95       	lsr	r22
     c14:	67 70       	andi	r22, 0x07	; 7
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	61 70       	andi	r22, 0x01	; 1
     c1a:	70 70       	andi	r23, 0x00	; 0
     c1c:	ab 01       	movw	r20, r22
     c1e:	44 0f       	add	r20, r20
     c20:	55 1f       	adc	r21, r21
     c22:	42 95       	swap	r20
     c24:	52 95       	swap	r21
     c26:	50 7f       	andi	r21, 0xF0	; 240
     c28:	54 27       	eor	r21, r20
     c2a:	40 7f       	andi	r20, 0xF0	; 240
     c2c:	54 27       	eor	r21, r20
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c2e:	6e 2f       	mov	r22, r30
     c30:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
     c32:	49 2f       	mov	r20, r25
     c34:	42 95       	swap	r20
     c36:	46 95       	lsr	r20
     c38:	46 95       	lsr	r20
     c3a:	43 70       	andi	r20, 0x03	; 3
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	41 70       	andi	r20, 0x01	; 1
     c40:	50 70       	andi	r21, 0x00	; 0
     c42:	9a 01       	movw	r18, r20
     c44:	00 24       	eor	r0, r0
     c46:	36 95       	lsr	r19
     c48:	27 95       	ror	r18
     c4a:	07 94       	ror	r0
     c4c:	36 95       	lsr	r19
     c4e:	27 95       	ror	r18
     c50:	07 94       	ror	r0
     c52:	32 2f       	mov	r19, r18
     c54:	20 2d       	mov	r18, r0
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c56:	26 2b       	or	r18, r22
     c58:	20 93 53 02 	sts	0x0253, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
     c5c:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
     c5e:	81 95       	neg	r24
     c60:	89 27       	eor	r24, r25
     c62:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
     c64:	89 27       	eor	r24, r25
     c66:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     c6a:	ed ed       	ldi	r30, 0xDD	; 221
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	90 81       	ld	r25, Z
     c70:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
     c72:	80 91 c6 02 	lds	r24, 0x02C6
     c76:	86 95       	lsr	r24
     c78:	86 95       	lsr	r24
     c7a:	86 95       	lsr	r24
     c7c:	81 70       	andi	r24, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     c7e:	81 95       	neg	r24
     c80:	82 27       	eor	r24, r18
     c82:	80 71       	andi	r24, 0x10	; 16
     c84:	89 27       	eor	r24, r25
     c86:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
     c88:	0e 94 16 05 	call	0xa2c	; 0xa2c <update_octave_range>
				
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) //temporary tune button hack
     c8c:	80 91 c6 02 	lds	r24, 0x02C6
     c90:	98 2f       	mov	r25, r24
     c92:	92 95       	swap	r25
     c94:	9f 70       	andi	r25, 0x0F	; 15
     c96:	90 ff       	sbrs	r25, 0
     c98:	12 c0       	rjmp	.+36     	; 0xcbe <refresh_synth+0x128>
		{ 
				
		switch_states.byte2 ^= (1<<PROG_WRITE_SW); //toggle read switch state
     c9a:	90 e1       	ldi	r25, 0x10	; 16
     c9c:	89 27       	eor	r24, r25
     c9e:	80 93 c6 02 	sts	0x02C6, r24

		tune_8ths(VCO2);
     ca2:	80 ef       	ldi	r24, 0xF0	; 240
     ca4:	0e 94 15 08 	call	0x102a	; 0x102a <tune_8ths>
		tune_8ths(VCO1);
     ca8:	8f e0       	ldi	r24, 0x0F	; 15
     caa:	0e 94 15 08 	call	0x102a	; 0x102a <tune_8ths>
		tune_filter();
     cae:	0e 94 95 09 	call	0x132a	; 0x132a <tune_filter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cb2:	8f e4       	ldi	r24, 0x4F	; 79
     cb4:	93 ec       	ldi	r25, 0xC3	; 195
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <refresh_synth+0x120>
     cba:	00 c0       	rjmp	.+0      	; 0xcbc <refresh_synth+0x126>
     cbc:	00 00       	nop
     cbe:	08 95       	ret

00000cc0 <initialize_voice_for_tuning>:
uint16_t vco2_pitch_table[17] = {0};
uint16_t filter_pitch_table[16] = {0};	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     cc0:	80 e3       	ldi	r24, 0x30	; 48
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     ccc:	82 e4       	ldi	r24, 0x42	; 66
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     cd8:	84 e4       	ldi	r24, 0x44	; 68
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     cf0:	84 e3       	ldi	r24, 0x34	; 52
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     cfc:	8e e3       	ldi	r24, 0x3E	; 62
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     d08:	80 e4       	ldi	r24, 0x40	; 64
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     d14:	82 e2       	ldi	r24, 0x22	; 34
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     d20:	8c e2       	ldi	r24, 0x2C	; 44
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     d2c:	84 e2       	ldi	r24, 0x24	; 36
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     d38:	86 e2       	ldi	r24, 0x26	; 38
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     d44:	88 e2       	ldi	r24, 0x28	; 40
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	6f ef       	ldi	r22, 0xFF	; 255
     d4a:	7f e3       	ldi	r23, 0x3F	; 63
     d4c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     d50:	8a e2       	ldi	r24, 0x2A	; 42
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     d5c:	82 e3       	ldi	r24, 0x32	; 50
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     d68:	8c e1       	ldi	r24, 0x1C	; 28
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     d74:	88 e1       	ldi	r24, 0x18	; 24
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     d80:	84 e1       	ldi	r24, 0x14	; 20
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	6f ef       	ldi	r22, 0xFF	; 255
     d86:	7f e3       	ldi	r23, 0x3F	; 63
     d88:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     d8c:	80 e1       	ldi	r24, 0x10	; 16
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     d98:	80 e2       	ldi	r24, 0x20	; 32
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
}	
     da4:	08 95       	ret

00000da6 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { //should add extra argument here to set reference count for base frequency
     da6:	2f 92       	push	r2
     da8:	3f 92       	push	r3
     daa:	4f 92       	push	r4
     dac:	5f 92       	push	r5
     dae:	6f 92       	push	r6
     db0:	7f 92       	push	r7
     db2:	8f 92       	push	r8
     db4:	9f 92       	push	r9
     db6:	af 92       	push	r10
     db8:	bf 92       	push	r11
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	2a 97       	sbiw	r28, 0x0a	; 10
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	08 2f       	mov	r16, r24
     ddc:	78 87       	std	Y+8, r23	; 0x08
     dde:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
     de0:	80 91 c1 02 	lds	r24, 0x02C1
     de4:	83 60       	ori	r24, 0x03	; 3
     de6:	80 93 c1 02 	sts	0x02C1, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
     dea:	0e 94 60 06 	call	0xcc0	; 0xcc0 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
     dee:	10 92 c0 02 	sts	0x02C0, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
     df2:	0f 30       	cpi	r16, 0x0F	; 15
     df4:	c1 f4       	brne	.+48     	; 0xe26 <set_vco_init_cv+0x80>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     df6:	0f 2e       	mov	r0, r31
     df8:	fc e4       	ldi	r31, 0x4C	; 76
     dfa:	4f 2e       	mov	r4, r31
     dfc:	f1 e0       	ldi	r31, 0x01	; 1
     dfe:	5f 2e       	mov	r5, r31
     e00:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     e02:	0f 2e       	mov	r0, r31
     e04:	fc e3       	ldi	r31, 0x3C	; 60
     e06:	2f 2e       	mov	r2, r31
     e08:	f1 e0       	ldi	r31, 0x01	; 1
     e0a:	3f 2e       	mov	r3, r31
     e0c:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     e0e:	26 e4       	ldi	r18, 0x46	; 70
     e10:	31 e0       	ldi	r19, 0x01	; 1
     e12:	3a 83       	std	Y+2, r19	; 0x02
     e14:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     e16:	0f 2e       	mov	r0, r31
     e18:	f8 e3       	ldi	r31, 0x38	; 56
     e1a:	8f 2e       	mov	r8, r31
     e1c:	f1 e0       	ldi	r31, 0x01	; 1
     e1e:	9f 2e       	mov	r9, r31
     e20:	f0 2d       	mov	r31, r0

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	17 c0       	rjmp	.+46     	; 0xe54 <set_vco_init_cv+0xae>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     e26:	0f 2e       	mov	r0, r31
     e28:	fa e4       	ldi	r31, 0x4A	; 74
     e2a:	4f 2e       	mov	r4, r31
     e2c:	f1 e0       	ldi	r31, 0x01	; 1
     e2e:	5f 2e       	mov	r5, r31
     e30:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     e32:	0f 2e       	mov	r0, r31
     e34:	fe e2       	ldi	r31, 0x2E	; 46
     e36:	2f 2e       	mov	r2, r31
     e38:	f1 e0       	ldi	r31, 0x01	; 1
     e3a:	3f 2e       	mov	r3, r31
     e3c:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     e3e:	88 e4       	ldi	r24, 0x48	; 72
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     e46:	0f 2e       	mov	r0, r31
     e48:	fa e3       	ldi	r31, 0x3A	; 58
     e4a:	8f 2e       	mov	r8, r31
     e4c:	f1 e0       	ldi	r31, 0x01	; 1
     e4e:	9f 2e       	mov	r9, r31
     e50:	f0 2d       	mov	r31, r0
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
     e52:	80 e4       	ldi	r24, 0x40	; 64
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
     e54:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     e56:	ed ed       	ldi	r30, 0xDD	; 221
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 64       	ori	r24, 0x40	; 64
     e5e:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     e60:	80 81       	ld	r24, Z
     e62:	8f 7b       	andi	r24, 0xBF	; 191
     e64:	80 83       	st	Z, r24
	DATA_BUS = 0;
     e66:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
     e68:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
     e6a:	84 b5       	in	r24, 0x24	; 36
     e6c:	8f 60       	ori	r24, 0x0F	; 15
     e6e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
     e74:	ee e6       	ldi	r30, 0x6E	; 110
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	90 81       	ld	r25, Z
     e7a:	92 60       	ori	r25, 0x02	; 2
     e7c:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
     e7e:	80 93 c2 02 	sts	0x02C2, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     e82:	ed e0       	ldi	r30, 0x0D	; 13
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	fc 83       	std	Y+4, r31	; 0x04
     e88:	eb 83       	std	Y+3, r30	; 0x03
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
     e8a:	80 2f       	mov	r24, r16
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	8c 01       	movw	r16, r24
     e90:	0f 5f       	subi	r16, 0xFF	; 255
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
     e94:	0f 2e       	mov	r0, r31
     e96:	f0 e3       	ldi	r31, 0x30	; 48
     e98:	ef 2e       	mov	r14, r31
     e9a:	f1 e0       	ldi	r31, 0x01	; 1
     e9c:	ff 2e       	mov	r15, r31
     e9e:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
     ea0:	0f 2e       	mov	r0, r31
     ea2:	f8 e2       	ldi	r31, 0x28	; 40
     ea4:	cf 2e       	mov	r12, r31
     ea6:	f1 e0       	ldi	r31, 0x01	; 1
     ea8:	df 2e       	mov	r13, r31
     eaa:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
     eac:	0f 2e       	mov	r0, r31
     eae:	f4 e1       	ldi	r31, 0x14	; 20
     eb0:	af 2e       	mov	r10, r31
     eb2:	f1 e0       	ldi	r31, 0x01	; 1
     eb4:	bf 2e       	mov	r11, r31
     eb6:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     eb8:	0f 2e       	mov	r0, r31
     eba:	f6 e1       	ldi	r31, 0x16	; 22
     ebc:	6f 2e       	mov	r6, r31
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
     ec0:	7f 2e       	mov	r7, r31
     ec2:	f0 2d       	mov	r31, r0
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	3a 87       	std	Y+10, r19	; 0x0a
     eca:	29 87       	std	Y+9, r18	; 0x09
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0b 80       	ldd	r0, Y+3	; 0x03
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <set_vco_init_cv+0x132>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <set_vco_init_cv+0x12e>
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	e9 85       	ldd	r30, Y+9	; 0x09
     ee2:	fa 85       	ldd	r31, Y+10	; 0x0a
     ee4:	e8 2b       	or	r30, r24
     ee6:	f9 2b       	or	r31, r25
     ee8:	fa 87       	std	Y+10, r31	; 0x0a
     eea:	e9 87       	std	Y+9, r30	; 0x09
		
		set_control_voltage(vco_init_cv, init_cv);
     eec:	c4 01       	movw	r24, r8
     eee:	bf 01       	movw	r22, r30
     ef0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		
		count_finished = FALSE;
     ef4:	10 92 c0 02 	sts	0x02C0, r1
		period_counter = 0;
     ef8:	10 92 c3 02 	sts	0x02C3, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     efc:	80 91 c0 02 	lds	r24, 0x02C0
     f00:	88 23       	and	r24, r24
     f02:	89 f5       	brne	.+98     	; 0xf66 <set_vco_init_cv+0x1c0>
			
			update_display(vco + 1, DEC);
     f04:	c8 01       	movw	r24, r16
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
     f0c:	c4 01       	movw	r24, r8
     f0e:	69 85       	ldd	r22, Y+9	; 0x09
     f10:	7a 85       	ldd	r23, Y+10	; 0x0a
     f12:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
     f16:	c1 01       	movw	r24, r2
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f e3       	ldi	r23, 0x3F	; 63
     f1c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
     f20:	c7 01       	movw	r24, r14
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
     f2a:	c6 01       	movw	r24, r12
     f2c:	6f ef       	ldi	r22, 0xFF	; 255
     f2e:	7f e3       	ldi	r23, 0x3F	; 63
     f30:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
     f34:	c5 01       	movw	r24, r10
     f36:	6f ef       	ldi	r22, 0xFF	; 255
     f38:	7f e3       	ldi	r23, 0x3F	; 63
     f3a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     f3e:	c3 01       	movw	r24, r6
     f40:	6f ef       	ldi	r22, 0xFF	; 255
     f42:	7f e3       	ldi	r23, 0x3F	; 63
     f44:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	6f ef       	ldi	r22, 0xFF	; 255
     f4e:	7f e3       	ldi	r23, 0x3F	; 63
     f50:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
     f54:	c2 01       	movw	r24, r4
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		count_finished = FALSE;
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     f5e:	80 91 c0 02 	lds	r24, 0x02C0
     f62:	88 23       	and	r24, r24
     f64:	79 f2       	breq	.-98     	; 0xf04 <set_vco_init_cv+0x15e>
			set_control_voltage(vco_pitch_cv, 0);	
			
		}
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
     f66:	80 91 be 02 	lds	r24, 0x02BE
     f6a:	90 91 bf 02 	lds	r25, 0x02BF
     f6e:	ef 81       	ldd	r30, Y+7	; 0x07
     f70:	f8 85       	ldd	r31, Y+8	; 0x08
     f72:	e8 17       	cp	r30, r24
     f74:	f9 07       	cpc	r31, r25
     f76:	20 f0       	brcs	.+8      	; 0xf80 <set_vco_init_cv+0x1da>
     f78:	80 91 ff 01 	lds	r24, 0x01FF
     f7c:	88 23       	and	r24, r24
     f7e:	51 f4       	brne	.+20     	; 0xf94 <set_vco_init_cv+0x1ee>
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	80 95       	com	r24
     f86:	90 95       	com	r25
     f88:	29 85       	ldd	r18, Y+9	; 0x09
     f8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     f8c:	28 23       	and	r18, r24
     f8e:	39 23       	and	r19, r25
     f90:	3a 87       	std	Y+10, r19	; 0x0a
     f92:	29 87       	std	Y+9, r18	; 0x09
		no_overflow = TRUE;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	80 93 ff 01 	sts	0x01FF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	9c 83       	std	Y+4, r25	; 0x04
     fa2:	8b 83       	std	Y+3, r24	; 0x03
     fa4:	ef ef       	ldi	r30, 0xFF	; 255
     fa6:	8f 3f       	cpi	r24, 0xFF	; 255
     fa8:	9e 07       	cpc	r25, r30
     faa:	09 f0       	breq	.+2      	; 0xfae <set_vco_init_cv+0x208>
     fac:	8f cf       	rjmp	.-226    	; 0xecc <set_vco_init_cv+0x126>
     fae:	29 85       	ldd	r18, Y+9	; 0x09
     fb0:	3a 85       	ldd	r19, Y+10	; 0x0a
     fb2:	3e 83       	std	Y+6, r19	; 0x06
     fb4:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
     fb6:	80 e1       	ldi	r24, 0x10	; 16
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
     fc2:	82 e1       	ldi	r24, 0x12	; 18
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
     fce:	88 e2       	ldi	r24, 0x28	; 40
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
     fda:	80 e3       	ldi	r24, 0x30	; 48
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
     fe6:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
     fe8:	ee e6       	ldi	r30, 0x6E	; 110
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8d 7f       	andi	r24, 0xFD	; 253
     ff0:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
     ff2:	14 bc       	out	0x24, r1	; 36
	
	return init_cv;
	
}
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	2a 96       	adiw	r28, 0x0a	; 10
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	9f 90       	pop	r9
    101a:	8f 90       	pop	r8
    101c:	7f 90       	pop	r7
    101e:	6f 90       	pop	r6
    1020:	5f 90       	pop	r5
    1022:	4f 90       	pop	r4
    1024:	3f 90       	pop	r3
    1026:	2f 90       	pop	r2
    1028:	08 95       	ret

0000102a <tune_8ths>:



void tune_8ths(uint8_t vco) {
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	c0 54       	subi	r28, 0x40	; 64
    1054:	d0 40       	sbci	r29, 0x00	; 0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    1062:	de 01       	movw	r26, r28
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	e2 ea       	ldi	r30, 0xA2	; 162
    1068:	f1 e0       	ldi	r31, 0x01	; 1
    106a:	80 e3       	ldi	r24, 0x30	; 48
    106c:	01 90       	ld	r0, Z+
    106e:	0d 92       	st	X+, r0
    1070:	81 50       	subi	r24, 0x01	; 1
    1072:	e1 f7       	brne	.-8      	; 0x106c <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    1074:	0e 94 60 06 	call	0xcc0	; 0xcc0 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1078:	0f 30       	cpi	r16, 0x0F	; 15
    107a:	e1 f4       	brne	.+56     	; 0x10b4 <tune_8ths+0x8a>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    107c:	20 90 bb 02 	lds	r2, 0x02BB
    1080:	30 90 bc 02 	lds	r3, 0x02BC
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1084:	0f 2e       	mov	r0, r31
    1086:	fc e4       	ldi	r31, 0x4C	; 76
    1088:	af 2e       	mov	r10, r31
    108a:	f1 e0       	ldi	r31, 0x01	; 1
    108c:	bf 2e       	mov	r11, r31
    108e:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    1090:	26 e4       	ldi	r18, 0x46	; 70
    1092:	31 e0       	ldi	r19, 0x01	; 1
    1094:	3a ab       	sts	0x5a, r19
    1096:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1098:	0f 2e       	mov	r0, r31
    109a:	f8 e3       	ldi	r31, 0x38	; 56
    109c:	4f 2e       	mov	r4, r31
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	5f 2e       	mov	r5, r31
    10a2:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    10a4:	07 e9       	ldi	r16, 0x97	; 151
    10a6:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    10a8:	cc 24       	eor	r12, r12
    10aa:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    10ac:	ee 24       	eor	r14, r14
    10ae:	68 94       	set
    10b0:	e1 f8       	bld	r14, 1
    10b2:	1c c0       	rjmp	.+56     	; 0x10ec <tune_8ths+0xc2>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    10b4:	20 90 b9 02 	lds	r2, 0x02B9
    10b8:	30 90 ba 02 	lds	r3, 0x02BA
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    10bc:	0f 2e       	mov	r0, r31
    10be:	fa e4       	ldi	r31, 0x4A	; 74
    10c0:	af 2e       	mov	r10, r31
    10c2:	f1 e0       	ldi	r31, 0x01	; 1
    10c4:	bf 2e       	mov	r11, r31
    10c6:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    10c8:	48 e4       	ldi	r20, 0x48	; 72
    10ca:	51 e0       	ldi	r21, 0x01	; 1
    10cc:	5a ab       	sts	0x5a, r21
    10ce:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    10d0:	0f 2e       	mov	r0, r31
    10d2:	fa e3       	ldi	r31, 0x3A	; 58
    10d4:	4f 2e       	mov	r4, r31
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	5f 2e       	mov	r5, r31
    10da:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    10dc:	05 e7       	ldi	r16, 0x75	; 117
    10de:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    10e0:	cc 24       	eor	r12, r12
    10e2:	68 94       	set
    10e4:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    10e6:	ee 24       	eor	r14, r14
    10e8:	68 94       	set
    10ea:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    10ec:	c2 01       	movw	r24, r4
    10ee:	b1 01       	movw	r22, r2
    10f0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    10f4:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    10f6:	ed ed       	ldi	r30, 0xDD	; 221
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	80 64       	ori	r24, 0x40	; 64
    10fe:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1100:	80 81       	ld	r24, Z
    1102:	8f 7b       	andi	r24, 0xBF	; 191
    1104:	80 83       	st	Z, r24
		DATA_BUS = 0;
    1106:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    1108:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	80 93 c2 02 	sts	0x02C2, r24
		
		compare_match_counter = 0;	
    1110:	10 92 bd 02 	sts	0x02BD, r1
				period_counter = 0;
			
				
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1114:	8c 2d       	mov	r24, r12
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	24 e6       	ldi	r18, 0x64	; 100
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	82 9f       	mul	r24, r18
    111e:	f0 01       	movw	r30, r0
    1120:	83 9f       	mul	r24, r19
    1122:	f0 0d       	add	r31, r0
    1124:	92 9f       	mul	r25, r18
    1126:	f0 0d       	add	r31, r0
    1128:	11 24       	eor	r1, r1
    112a:	fc ab       	sts	0x5c, r31
    112c:	eb ab       	sts	0x5b, r30
    112e:	9e 01       	movw	r18, r28
    1130:	2f 5f       	subi	r18, 0xFF	; 255
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	3c af       	sts	0x7c, r19
    1136:	2b af       	sts	0x7b, r18
	
}



void tune_8ths(uint8_t vco) {
    1138:	a8 01       	movw	r20, r16
    113a:	4e 5f       	subi	r20, 0xFE	; 254
    113c:	5f 4f       	sbci	r21, 0xFF	; 255
    113e:	21 96       	adiw	r28, 0x01	; 1
    1140:	5f af       	sts	0x7f, r21
    1142:	4e af       	sts	0x7e, r20
    1144:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1146:	1e ae       	sts	0xbe, r17
    1148:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    114a:	0f 2e       	mov	r0, r31
    114c:	f0 e3       	ldi	r31, 0x30	; 48
    114e:	ef 2e       	mov	r14, r31
    1150:	f1 e0       	ldi	r31, 0x01	; 1
    1152:	ff 2e       	mov	r15, r31
    1154:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    1156:	0f 2e       	mov	r0, r31
    1158:	f8 e2       	ldi	r31, 0x28	; 40
    115a:	cf 2e       	mov	r12, r31
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	df 2e       	mov	r13, r31
    1160:	f0 2d       	mov	r31, r0
					set_control_voltage(&sustain_1_cv, MAX);
    1162:	0f 2e       	mov	r0, r31
    1164:	f4 e1       	ldi	r31, 0x14	; 20
    1166:	8f 2e       	mov	r8, r31
    1168:	f1 e0       	ldi	r31, 0x01	; 1
    116a:	9f 2e       	mov	r9, r31
    116c:	f0 2d       	mov	r31, r0
					set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    116e:	0f 2e       	mov	r0, r31
    1170:	fc e1       	ldi	r31, 0x1C	; 28
    1172:	6f 2e       	mov	r6, r31
    1174:	f1 e0       	ldi	r31, 0x01	; 1
    1176:	7f 2e       	mov	r7, r31
    1178:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    117a:	ab ad       	sts	0x6b, r26
    117c:	bc ad       	sts	0x6c, r27
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    117e:	8c 91       	ld	r24, X
    1180:	80 93 c2 02 	sts	0x02C2, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1184:	84 b5       	in	r24, 0x24	; 36
    1186:	8f 60       	ori	r24, 0x0F	; 15
    1188:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    118a:	51 e0       	ldi	r21, 0x01	; 1
    118c:	57 bd       	out	0x27, r21	; 39
			TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    118e:	ee e6       	ldi	r30, 0x6E	; 110
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	82 60       	ori	r24, 0x02	; 2
    1196:	80 83       	st	Z, r24
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    1198:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    119a:	8d ad       	sts	0x6d, r24
    119c:	9e ad       	sts	0x6e, r25
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	24 f4       	brge	.+8      	; 0x11ac <__stack+0xad>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	80 93 c1 02 	sts	0x02C1, r24
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <__stack+0xb3>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	80 93 c1 02 	sts	0x02C1, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    11b2:	11 96       	adiw	r26, 0x01	; 1
    11b4:	ed 91       	ld	r30, X+
    11b6:	fc 91       	ld	r31, X
    11b8:	12 97       	sbiw	r26, 0x02	; 2
    11ba:	fa af       	sts	0x7a, r31
    11bc:	e9 af       	sts	0x79, r30
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    11be:	2d e0       	ldi	r18, 0x0D	; 13
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3e ab       	sts	0x5e, r19
    11c4:	2d ab       	sts	0x5d, r18
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    11c6:	00 e0       	ldi	r16, 0x00	; 0
    11c8:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	0d a8       	sts	0x8d, r16
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <__stack+0xd7>
    11d2:	44 0f       	add	r20, r20
    11d4:	55 1f       	adc	r21, r21
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <__stack+0xd3>
    11da:	58 af       	sts	0x78, r21
    11dc:	4f ab       	sts	0x5f, r20
    11de:	04 2b       	or	r16, r20
    11e0:	15 2b       	or	r17, r21

				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    11e2:	c5 01       	movw	r24, r10
    11e4:	b8 01       	movw	r22, r16
    11e6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				count_finished = FALSE;
    11ea:	10 92 c0 02 	sts	0x02C0, r1
				period_counter = 0;
    11ee:	10 92 c3 02 	sts	0x02C3, r1
			
				
				while (count_finished == FALSE) {
    11f2:	80 91 c0 02 	lds	r24, 0x02C0
    11f6:	88 23       	and	r24, r24
    11f8:	81 f5       	brne	.+96     	; 0x125a <__stack+0x15b>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    11fa:	80 91 c2 02 	lds	r24, 0x02C2
    11fe:	eb a9       	sts	0x4b, r30
    1200:	fc a9       	sts	0x4c, r31
    1202:	e8 0f       	add	r30, r24
    1204:	f1 1d       	adc	r31, r1
    1206:	cf 01       	movw	r24, r30
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    120e:	c2 01       	movw	r24, r4
    1210:	b1 01       	movw	r22, r2
    1212:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1216:	c5 01       	movw	r24, r10
    1218:	b8 01       	movw	r22, r16
    121a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    121e:	c7 01       	movw	r24, r14
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    1228:	c6 01       	movw	r24, r12
    122a:	6f ef       	ldi	r22, 0xFF	; 255
    122c:	7f e3       	ldi	r23, 0x3F	; 63
    122e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&sustain_1_cv, MAX);
    1232:	c4 01       	movw	r24, r8
    1234:	6f ef       	ldi	r22, 0xFF	; 255
    1236:	7f e3       	ldi	r23, 0x3F	; 63
    1238:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    123c:	c3 01       	movw	r24, r6
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					//set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
					set_control_voltage(vco_mix_cv, MAX);
    1246:	89 a9       	sts	0x49, r24
    1248:	9a a9       	sts	0x4a, r25
    124a:	6f ef       	ldi	r22, 0xFF	; 255
    124c:	7f e3       	ldi	r23, 0x3F	; 63
    124e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
				count_finished = FALSE;
				period_counter = 0;
			
				
				while (count_finished == FALSE) {
    1252:	80 91 c0 02 	lds	r24, 0x02C0
    1256:	88 23       	and	r24, r24
    1258:	81 f2       	breq	.-96     	; 0x11fa <__stack+0xfb>
			
			
				}							
				
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    125a:	80 91 be 02 	lds	r24, 0x02BE
    125e:	90 91 bf 02 	lds	r25, 0x02BF
    1262:	29 ad       	sts	0x69, r18
    1264:	3a ad       	sts	0x6a, r19
    1266:	28 17       	cp	r18, r24
    1268:	39 07       	cpc	r19, r25
    126a:	50 f0       	brcs	.+20     	; 0x1280 <__stack+0x181>
    126c:	80 91 ff 01 	lds	r24, 0x01FF
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	31 f4       	brne	.+12     	; 0x1280 <__stack+0x181>
    1274:	8f a9       	sts	0x4f, r24
    1276:	98 ad       	sts	0x68, r25
    1278:	80 95       	com	r24
    127a:	90 95       	com	r25
    127c:	08 23       	and	r16, r24
    127e:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    1280:	80 91 be 02 	lds	r24, 0x02BE
    1284:	90 91 bf 02 	lds	r25, 0x02BF
    1288:	49 ad       	sts	0x69, r20
    128a:	5a ad       	sts	0x6a, r21
    128c:	84 17       	cp	r24, r20
    128e:	95 07       	cpc	r25, r21
    1290:	21 f4       	brne	.+8      	; 0x129a <__stack+0x19b>
    1292:	80 91 ff 01 	lds	r24, 0x01FF
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	69 f0       	breq	.+26     	; 0x12b4 <__stack+0x1b5>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    129a:	51 e0       	ldi	r21, 0x01	; 1
    129c:	50 93 ff 01 	sts	0x01FF, r21
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    12a0:	8d a9       	sts	0x4d, r24
    12a2:	9e a9       	sts	0x4e, r25
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	9e ab       	sts	0x5e, r25
    12a8:	8d ab       	sts	0x5d, r24
    12aa:	ef ef       	ldi	r30, 0xFF	; 255
    12ac:	8f 3f       	cpi	r24, 0xFF	; 255
    12ae:	9e 07       	cpc	r25, r30
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <__stack+0x1b5>
    12b2:	8b cf       	rjmp	.-234    	; 0x11ca <__stack+0xcb>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    12b4:	21 96       	adiw	r28, 0x01	; 1
    12b6:	ee ad       	sts	0x6e, r30
    12b8:	ff ad       	sts	0x6f, r31
    12ba:	21 97       	sbiw	r28, 0x01	; 1
    12bc:	01 93       	st	Z+, r16
    12be:	11 93       	st	Z+, r17
    12c0:	21 96       	adiw	r28, 0x01	; 1
    12c2:	ff af       	sts	0x7f, r31
    12c4:	ee af       	sts	0x7e, r30
    12c6:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    12c8:	ee e6       	ldi	r30, 0x6E	; 110
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8d 7f       	andi	r24, 0xFD	; 253
    12d0:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    12d2:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    12d4:	2d ad       	sts	0x6d, r18
    12d6:	3e ad       	sts	0x6e, r19
    12d8:	2f 5f       	subi	r18, 0xFF	; 255
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	3e af       	sts	0x7e, r19
    12de:	2d af       	sts	0x7d, r18
    12e0:	4b ad       	sts	0x6b, r20
    12e2:	5c ad       	sts	0x6c, r21
    12e4:	4d 5f       	subi	r20, 0xFD	; 253
    12e6:	5f 4f       	sbci	r21, 0xFF	; 255
    12e8:	5c af       	sts	0x7c, r21
    12ea:	4b af       	sts	0x7b, r20
    12ec:	20 31       	cpi	r18, 0x10	; 16
    12ee:	31 05       	cpc	r19, r1
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <__stack+0x1f5>
    12f2:	43 cf       	rjmp	.-378    	; 0x117a <__stack+0x7b>
			TCCR0A = 0; //turn off timer0
		}
	

	
		PORTF &= ~(1<<GATE); //turn gate off
    12f4:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    12f6:	c0 5c       	subi	r28, 0xC0	; 192
    12f8:	df 4f       	sbci	r29, 0xFF	; 255
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	ff 90       	pop	r15
    130e:	ef 90       	pop	r14
    1310:	df 90       	pop	r13
    1312:	cf 90       	pop	r12
    1314:	bf 90       	pop	r11
    1316:	af 90       	pop	r10
    1318:	9f 90       	pop	r9
    131a:	8f 90       	pop	r8
    131c:	7f 90       	pop	r7
    131e:	6f 90       	pop	r6
    1320:	5f 90       	pop	r5
    1322:	4f 90       	pop	r4
    1324:	3f 90       	pop	r3
    1326:	2f 90       	pop	r2
    1328:	08 95       	ret

0000132a <tune_filter>:
	
void tune_filter(void) {
    132a:	2f 92       	push	r2
    132c:	3f 92       	push	r3
    132e:	4f 92       	push	r4
    1330:	5f 92       	push	r5
    1332:	6f 92       	push	r6
    1334:	7f 92       	push	r7
    1336:	8f 92       	push	r8
    1338:	9f 92       	push	r9
    133a:	af 92       	push	r10
    133c:	bf 92       	push	r11
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	e5 97       	sbiw	r28, 0x35	; 53
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    135e:	de 01       	movw	r26, r28
    1360:	11 96       	adiw	r26, 0x01	; 1
    1362:	e2 ed       	ldi	r30, 0xD2	; 210
    1364:	f1 e0       	ldi	r31, 0x01	; 1
    1366:	8d e2       	ldi	r24, 0x2D	; 45
    1368:	01 90       	ld	r0, Z+
    136a:	0d 92       	st	X+, r0
    136c:	81 50       	subi	r24, 0x01	; 1
    136e:	e1 f7       	brne	.-8      	; 0x1368 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1370:	80 e3       	ldi	r24, 0x30	; 48
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    137c:	82 e4       	ldi	r24, 0x42	; 66
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1388:	84 e4       	ldi	r24, 0x44	; 68
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    13a0:	84 e3       	ldi	r24, 0x34	; 52
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    13ac:	8e e3       	ldi	r24, 0x3E	; 62
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    13b8:	80 e4       	ldi	r24, 0x40	; 64
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    13c4:	82 e2       	ldi	r24, 0x22	; 34
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    13d0:	8c e2       	ldi	r24, 0x2C	; 44
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    13dc:	84 e2       	ldi	r24, 0x24	; 36
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    13e8:	86 e2       	ldi	r24, 0x26	; 38
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    13f4:	88 e2       	ldi	r24, 0x28	; 40
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	6f ef       	ldi	r22, 0xFF	; 255
    13fa:	7f e3       	ldi	r23, 0x3F	; 63
    13fc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    1400:	8a e2       	ldi	r24, 0x2A	; 42
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	6f ef       	ldi	r22, 0xFF	; 255
    1406:	7f e3       	ldi	r23, 0x3F	; 63
    1408:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    140c:	82 e3       	ldi	r24, 0x32	; 50
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1418:	8c e1       	ldi	r24, 0x1C	; 28
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1424:	88 e1       	ldi	r24, 0x18	; 24
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1430:	84 e1       	ldi	r24, 0x14	; 20
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	6f ef       	ldi	r22, 0xFF	; 255
    1436:	7f e3       	ldi	r23, 0x3F	; 63
    1438:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    143c:	80 e1       	ldi	r24, 0x10	; 16
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    1448:	80 e2       	ldi	r24, 0x20	; 32
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1454:	86 e4       	ldi	r24, 0x46	; 70
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1460:	88 e4       	ldi	r24, 0x48	; 72
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    146c:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    146e:	ed ed       	ldi	r30, 0xDD	; 221
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 64       	ori	r24, 0x40	; 64
    1476:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1478:	80 81       	ld	r24, Z
    147a:	8f 7b       	andi	r24, 0xBF	; 191
    147c:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 93 c2 02 	sts	0x02C2, r24
	PORTF |= (1<<GATE); //turn gate on
    1484:	89 9a       	sbi	0x11, 1	; 17
    1486:	9e 01       	movw	r18, r28
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	39 ab       	sts	0x59, r19
    148e:	28 ab       	sts	0x58, r18
    1490:	87 e5       	ldi	r24, 0x57	; 87
    1492:	92 e0       	ldi	r25, 0x02	; 2
    1494:	9d ab       	sts	0x5d, r25
    1496:	8c ab       	sts	0x5c, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    1498:	1b aa       	sts	0x9b, r17
    149a:	1a aa       	sts	0x9a, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    149c:	0f 2e       	mov	r0, r31
    149e:	f8 e2       	ldi	r31, 0x28	; 40
    14a0:	ef 2e       	mov	r14, r31
    14a2:	f1 e0       	ldi	r31, 0x01	; 1
    14a4:	ff 2e       	mov	r15, r31
    14a6:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				//need to have a watchdog timer here to escape while loop if it takes too long
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    14a8:	0f 2e       	mov	r0, r31
    14aa:	f0 e3       	ldi	r31, 0x30	; 48
    14ac:	cf 2e       	mov	r12, r31
    14ae:	f1 e0       	ldi	r31, 0x01	; 1
    14b0:	df 2e       	mov	r13, r31
    14b2:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    14b4:	0f 2e       	mov	r0, r31
    14b6:	fa e2       	ldi	r31, 0x2A	; 42
    14b8:	af 2e       	mov	r10, r31
    14ba:	f1 e0       	ldi	r31, 0x01	; 1
    14bc:	bf 2e       	mov	r11, r31
    14be:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    14c0:	0f 2e       	mov	r0, r31
    14c2:	f4 e1       	ldi	r31, 0x14	; 20
    14c4:	8f 2e       	mov	r8, r31
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	9f 2e       	mov	r9, r31
    14ca:	f0 2d       	mov	r31, r0
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    14cc:	0f 2e       	mov	r0, r31
    14ce:	fc e1       	ldi	r31, 0x1C	; 28
    14d0:	6f 2e       	mov	r6, r31
    14d2:	f1 e0       	ldi	r31, 0x01	; 1
    14d4:	7f 2e       	mov	r7, r31
    14d6:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    14d8:	a8 a9       	sts	0x48, r26
    14da:	b9 a9       	sts	0x49, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    14dc:	8c 91       	ld	r24, X
    14de:	80 93 c2 02 	sts	0x02C2, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    14e2:	84 b5       	in	r24, 0x24	; 36
    14e4:	8f 60       	ori	r24, 0x0F	; 15
    14e6:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    14ec:	ee e6       	ldi	r30, 0x6E	; 110
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	82 60       	ori	r24, 0x02	; 2
    14f4:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    14f6:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    14f8:	ea a9       	sts	0x4a, r30
    14fa:	fb a9       	sts	0x4b, r31
    14fc:	e2 30       	cpi	r30, 0x02	; 2
    14fe:	f1 05       	cpc	r31, r1
    1500:	24 f4       	brge	.+8      	; 0x150a <tune_filter+0x1e0>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	80 93 c1 02 	sts	0x02C1, r24
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <tune_filter+0x1e6>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	80 93 c1 02 	sts	0x02C1, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    1510:	11 96       	adiw	r26, 0x01	; 1
    1512:	2d 91       	ld	r18, X+
    1514:	3c 91       	ld	r19, X
    1516:	12 97       	sbiw	r26, 0x02	; 2
    1518:	3f a7       	lds	r19, 0x7f
    151a:	2e a7       	lds	r18, 0x7e
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    151c:	0f 2e       	mov	r0, r31
    151e:	fd e0       	ldi	r31, 0x0D	; 13
    1520:	4f 2e       	mov	r4, r31
    1522:	55 24       	eor	r5, r5
    1524:	f0 2d       	mov	r31, r0
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    1526:	00 e0       	ldi	r16, 0x00	; 0
    1528:	10 e0       	ldi	r17, 0x00	; 0
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    152a:	22 24       	eor	r2, r2
    152c:	33 24       	eor	r3, r3
    152e:	23 94       	inc	r2
    1530:	04 2c       	mov	r0, r4
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <tune_filter+0x20e>
    1534:	22 0c       	add	r2, r2
    1536:	33 1c       	adc	r3, r3
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <tune_filter+0x20a>
    153c:	02 29       	or	r16, r2
    153e:	13 29       	or	r17, r3

			set_control_voltage(&cutoff_cv, pitch_cv);
    1540:	c7 01       	movw	r24, r14
    1542:	b8 01       	movw	r22, r16
    1544:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			count_finished = FALSE;
    1548:	10 92 c0 02 	sts	0x02C0, r1
			period_counter = 0;
    154c:	10 92 c3 02 	sts	0x02C3, r1
		
		
			while (count_finished == FALSE) {
    1550:	80 91 c0 02 	lds	r24, 0x02C0
    1554:	88 23       	and	r24, r24
    1556:	21 f5       	brne	.+72     	; 0x15a0 <tune_filter+0x276>
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    1558:	80 91 c2 02 	lds	r24, 0x02C2
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	84 5d       	subi	r24, 0xD4	; 212
    1560:	9e 4f       	sbci	r25, 0xFE	; 254
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				//need to have a watchdog timer here to escape while loop if it takes too long
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    1568:	c7 01       	movw	r24, r14
    156a:	b8 01       	movw	r22, r16
    156c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1570:	c6 01       	movw	r24, r12
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    157a:	c5 01       	movw	r24, r10
    157c:	6f ef       	ldi	r22, 0xFF	; 255
    157e:	7f e3       	ldi	r23, 0x3F	; 63
    1580:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    1584:	c4 01       	movw	r24, r8
    1586:	6f ef       	ldi	r22, 0xFF	; 255
    1588:	7f e3       	ldi	r23, 0x3F	; 63
    158a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    158e:	c3 01       	movw	r24, r6
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&cutoff_cv, pitch_cv);
			count_finished = FALSE;
			period_counter = 0;
		
		
			while (count_finished == FALSE) {
    1598:	80 91 c0 02 	lds	r24, 0x02C0
    159c:	88 23       	and	r24, r24
    159e:	e1 f2       	breq	.-72     	; 0x1558 <tune_filter+0x22e>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
						
			}
		
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    15a0:	80 91 be 02 	lds	r24, 0x02BE
    15a4:	90 91 bf 02 	lds	r25, 0x02BF
    15a8:	ee a5       	lds	r30, 0x6e
    15aa:	ff a5       	lds	r31, 0x6f
    15ac:	e8 17       	cp	r30, r24
    15ae:	f9 07       	cpc	r31, r25
    15b0:	48 f0       	brcs	.+18     	; 0x15c4 <tune_filter+0x29a>
    15b2:	80 91 ff 01 	lds	r24, 0x01FF
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	29 f4       	brne	.+10     	; 0x15c4 <tune_filter+0x29a>
    15ba:	c1 01       	movw	r24, r2
    15bc:	80 95       	com	r24
    15be:	90 95       	com	r25
    15c0:	08 23       	and	r16, r24
    15c2:	19 23       	and	r17, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    15c4:	80 91 be 02 	lds	r24, 0x02BE
    15c8:	90 91 bf 02 	lds	r25, 0x02BF
    15cc:	2e a5       	lds	r18, 0x6e
    15ce:	3f a5       	lds	r19, 0x6f
    15d0:	82 17       	cp	r24, r18
    15d2:	93 07       	cpc	r25, r19
    15d4:	21 f4       	brne	.+8      	; 0x15de <tune_filter+0x2b4>
    15d6:	80 91 ff 01 	lds	r24, 0x01FF
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	61 f0       	breq	.+24     	; 0x15f6 <tune_filter+0x2cc>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    15de:	31 e0       	ldi	r19, 0x01	; 1
    15e0:	30 93 ff 01 	sts	0x01FF, r19
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    15e4:	08 94       	sec
    15e6:	41 08       	sbc	r4, r1
    15e8:	51 08       	sbc	r5, r1
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	48 16       	cp	r4, r24
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	58 06       	cpc	r5, r24
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <tune_filter+0x2cc>
    15f4:	9a cf       	rjmp	.-204    	; 0x152a <tune_filter+0x200>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv;
    15f6:	ea a9       	sts	0x4a, r30
    15f8:	fb a9       	sts	0x4b, r31
    15fa:	31 96       	adiw	r30, 0x01	; 1
    15fc:	fb ab       	sts	0x5b, r31
    15fe:	ea ab       	sts	0x5a, r30
    1600:	ec a9       	sts	0x4c, r30
    1602:	fd a9       	sts	0x4d, r31
    1604:	01 93       	st	Z+, r16
    1606:	11 93       	st	Z+, r17
    1608:	fd ab       	sts	0x5d, r31
    160a:	ec ab       	sts	0x5c, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    160c:	ee e6       	ldi	r30, 0x6E	; 110
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8d 7f       	andi	r24, 0xFD	; 253
    1614:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    1616:	14 bc       	out	0x24, r1	; 36
    1618:	28 a9       	sts	0x48, r18
    161a:	39 a9       	sts	0x49, r19
    161c:	2d 5f       	subi	r18, 0xFD	; 253
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	39 ab       	sts	0x59, r19
    1622:	28 ab       	sts	0x58, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    1624:	8a a9       	sts	0x4a, r24
    1626:	9b a9       	sts	0x4b, r25
    1628:	8f 30       	cpi	r24, 0x0F	; 15
    162a:	91 05       	cpc	r25, r1
    162c:	09 f0       	breq	.+2      	; 0x1630 <tune_filter+0x306>
    162e:	54 cf       	rjmp	.-344    	; 0x14d8 <tune_filter+0x1ae>
	TCCR0A = 0; //turn off timer0
}



PORTF &= ~(1<<GATE); //turn gate off
    1630:	89 98       	cbi	0x11, 1	; 17
	
	
}			
    1632:	e5 96       	adiw	r28, 0x35	; 53
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	df 90       	pop	r13
    164c:	cf 90       	pop	r12
    164e:	bf 90       	pop	r11
    1650:	af 90       	pop	r10
    1652:	9f 90       	pop	r9
    1654:	8f 90       	pop	r8
    1656:	7f 90       	pop	r7
    1658:	6f 90       	pop	r6
    165a:	5f 90       	pop	r5
    165c:	4f 90       	pop	r4
    165e:	3f 90       	pop	r3
    1660:	2f 90       	pop	r2
    1662:	08 95       	ret

00001664 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    1664:	98 2f       	mov	r25, r24
    1666:	96 95       	lsr	r25
    1668:	96 95       	lsr	r25
    166a:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    166c:	29 2f       	mov	r18, r25
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	f9 01       	movw	r30, r18
    1672:	31 97       	sbiw	r30, 0x01	; 1
    1674:	ee 0f       	add	r30, r30
    1676:	ff 1f       	adc	r31, r31
    1678:	e6 0f       	add	r30, r22
    167a:	f7 1f       	adc	r31, r23
    167c:	01 90       	ld	r0, Z+
    167e:	f0 81       	ld	r31, Z
    1680:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	26 0f       	add	r18, r22
    1688:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	
    168a:	d9 01       	movw	r26, r18
    168c:	4d 91       	ld	r20, X+
    168e:	5c 91       	ld	r21, X
    1690:	11 97       	sbiw	r26, 0x01	; 1
    1692:	4e 1b       	sub	r20, r30
    1694:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    1696:	99 0f       	add	r25, r25
    1698:	99 0f       	add	r25, r25
    169a:	99 0f       	add	r25, r25
    169c:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	48 9f       	mul	r20, r24
    16a2:	90 01       	movw	r18, r0
    16a4:	49 9f       	mul	r20, r25
    16a6:	30 0d       	add	r19, r0
    16a8:	58 9f       	mul	r21, r24
    16aa:	30 0d       	add	r19, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	36 95       	lsr	r19
    16b0:	27 95       	ror	r18
    16b2:	36 95       	lsr	r19
    16b4:	27 95       	ror	r18
    16b6:	36 95       	lsr	r19
    16b8:	27 95       	ror	r18
    16ba:	e2 0f       	add	r30, r18
    16bc:	f3 1f       	adc	r31, r19
	
	return interpolated_pitch_cv;
	
    16be:	8e 2f       	mov	r24, r30
    16c0:	9f 2f       	mov	r25, r31
    16c2:	08 95       	ret

000016c4 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    16c4:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    16c6:	80 91 c7 02 	lds	r24, 0x02C7
    16ca:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    16cc:	89 27       	eor	r24, r25
    16ce:	80 93 c7 02 	sts	0x02C7, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    16d2:	89 23       	and	r24, r25
    16d4:	08 95       	ret

000016d6 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    16d6:	ed ed       	ldi	r30, 0xDD	; 221
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	90 81       	ld	r25, Z
    16dc:	9f 7b       	andi	r25, 0xBF	; 191
    16de:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	21 70       	andi	r18, 0x01	; 1
    16e6:	30 70       	andi	r19, 0x00	; 0
    16e8:	22 0f       	add	r18, r18
    16ea:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    16ec:	68 2f       	mov	r22, r24
    16ee:	62 95       	swap	r22
    16f0:	66 95       	lsr	r22
    16f2:	67 70       	andi	r22, 0x07	; 7
    16f4:	67 95       	ror	r22
    16f6:	66 27       	eor	r22, r22
    16f8:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    16fa:	26 2b       	or	r18, r22
    16fc:	98 2f       	mov	r25, r24
    16fe:	96 95       	lsr	r25
    1700:	96 95       	lsr	r25
    1702:	91 70       	andi	r25, 0x01	; 1
    1704:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    1706:	68 2f       	mov	r22, r24
    1708:	66 1f       	adc	r22, r22
    170a:	66 27       	eor	r22, r22
    170c:	66 1f       	adc	r22, r22
    170e:	66 0f       	add	r22, r22
    1710:	66 0f       	add	r22, r22
    1712:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1714:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    1716:	a8 2f       	mov	r26, r24
    1718:	a6 95       	lsr	r26
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	a1 70       	andi	r26, 0x01	; 1
    171e:	b0 70       	andi	r27, 0x00	; 0
    1720:	bd 01       	movw	r22, r26
    1722:	66 0f       	add	r22, r22
    1724:	77 1f       	adc	r23, r23
    1726:	66 0f       	add	r22, r22
    1728:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    172a:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    172c:	68 2f       	mov	r22, r24
    172e:	62 95       	swap	r22
    1730:	6f 70       	andi	r22, 0x0F	; 15
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	61 70       	andi	r22, 0x01	; 1
    1736:	70 70       	andi	r23, 0x00	; 0
    1738:	ab 01       	movw	r20, r22
    173a:	00 24       	eor	r0, r0
    173c:	56 95       	lsr	r21
    173e:	47 95       	ror	r20
    1740:	07 94       	ror	r0
    1742:	56 95       	lsr	r21
    1744:	47 95       	ror	r20
    1746:	07 94       	ror	r0
    1748:	54 2f       	mov	r21, r20
    174a:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    174c:	62 2f       	mov	r22, r18
    174e:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    1750:	48 2f       	mov	r20, r24
    1752:	42 95       	swap	r20
    1754:	46 95       	lsr	r20
    1756:	46 95       	lsr	r20
    1758:	43 70       	andi	r20, 0x03	; 3
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	41 70       	andi	r20, 0x01	; 1
    175e:	50 70       	andi	r21, 0x00	; 0
    1760:	9a 01       	movw	r18, r20
    1762:	22 0f       	add	r18, r18
    1764:	33 1f       	adc	r19, r19
    1766:	22 95       	swap	r18
    1768:	32 95       	swap	r19
    176a:	30 7f       	andi	r19, 0xF0	; 240
    176c:	32 27       	eor	r19, r18
    176e:	20 7f       	andi	r18, 0xF0	; 240
    1770:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1772:	46 2f       	mov	r20, r22
    1774:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    1776:	86 95       	lsr	r24
    1778:	86 95       	lsr	r24
    177a:	86 95       	lsr	r24
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	21 70       	andi	r18, 0x01	; 1
    1782:	30 70       	andi	r19, 0x00	; 0
    1784:	c9 01       	movw	r24, r18
    1786:	82 95       	swap	r24
    1788:	92 95       	swap	r25
    178a:	90 7f       	andi	r25, 0xF0	; 240
    178c:	98 27       	eor	r25, r24
    178e:	80 7f       	andi	r24, 0xF0	; 240
    1790:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1792:	84 2b       	or	r24, r20
    1794:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1796:	80 81       	ld	r24, Z
    1798:	80 64       	ori	r24, 0x40	; 64
    179a:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    179c:	80 81       	ld	r24, Z
    179e:	8f 7b       	andi	r24, 0xBF	; 191
    17a0:	80 83       	st	Z, r24
	DATA_BUS = 0;
    17a2:	12 b8       	out	0x02, r1	; 2
	
	
    17a4:	08 95       	ret

000017a6 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    17a6:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    17a8:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    17aa:	74 83       	std	Z+4, r23	; 0x04
    17ac:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    17ae:	11 82       	std	Z+1, r1	; 0x01
    17b0:	10 82       	st	Z, r1
}
    17b2:	08 95       	ret

000017b4 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	ec 01       	movw	r28, r24
    17bc:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    17be:	0e 94 49 0c 	call	0x1892	; 0x1892 <store_and_clear_interrupt>
    17c2:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    17c4:	39 81       	ldd	r19, Y+1	; 0x01
    17c6:	83 2f       	mov	r24, r19
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	6a 81       	ldd	r22, Y+2	; 0x02
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
    17d4:	48 81       	ld	r20, Y
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	84 17       	cp	r24, r20
    17da:	95 07       	cpc	r25, r21
    17dc:	29 f4       	brne	.+10     	; 0x17e8 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    17de:	82 2f       	mov	r24, r18
    17e0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <restore_interrupt_setting>
      return false;
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	11 c0       	rjmp	.+34     	; 0x180a <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    17e8:	eb 81       	ldd	r30, Y+3	; 0x03
    17ea:	fc 81       	ldd	r31, Y+4	; 0x04
    17ec:	e3 0f       	add	r30, r19
    17ee:	f1 1d       	adc	r31, r1
    17f0:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	6a 81       	ldd	r22, Y+2	; 0x02
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
    1800:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1802:	82 2f       	mov	r24, r18
    1804:	0e 94 4c 0c 	call	0x1898	; 0x1898 <restore_interrupt_setting>
      return true;
    1808:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	08 95       	ret

00001812 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1818:	0e 94 49 0c 	call	0x1892	; 0x1892 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    181c:	29 81       	ldd	r18, Y+1	; 0x01
    181e:	98 81       	ld	r25, Y
    1820:	29 17       	cp	r18, r25
    1822:	18 f0       	brcs	.+6      	; 0x182a <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1824:	c2 2f       	mov	r28, r18
    1826:	c9 1b       	sub	r28, r25
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    182a:	ca 81       	ldd	r28, Y+2	; 0x02
    182c:	c2 0f       	add	r28, r18
    182e:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    1830:	0e 94 4c 0c 	call	0x1898	; 0x1898 <restore_interrupt_setting>
   return len;
}
    1834:	8c 2f       	mov	r24, r28
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	08 95       	ret

0000183c <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    183c:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    183e:	20 81       	ld	r18, Z
    1840:	86 2f       	mov	r24, r22
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	82 0f       	add	r24, r18
    1846:	91 1d       	adc	r25, r1
    1848:	62 81       	ldd	r22, Z+2	; 0x02
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
    1850:	03 80       	ldd	r0, Z+3	; 0x03
    1852:	f4 81       	ldd	r31, Z+4	; 0x04
    1854:	e0 2d       	mov	r30, r0
    1856:	e8 0f       	add	r30, r24
    1858:	f9 1f       	adc	r31, r25
}
    185a:	80 81       	ld	r24, Z
    185c:	08 95       	ret

0000185e <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	ec 01       	movw	r28, r24
    1866:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1868:	0e 94 49 0c 	call	0x1892	; 0x1892 <store_and_clear_interrupt>
    186c:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    186e:	88 81       	ld	r24, Y
    1870:	21 2f       	mov	r18, r17
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	28 0f       	add	r18, r24
    1876:	31 1d       	adc	r19, r1
    1878:	6a 81       	ldd	r22, Y+2	; 0x02
    187a:	c9 01       	movw	r24, r18
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
    1882:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1884:	84 2f       	mov	r24, r20
    1886:	0e 94 4c 0c 	call	0x1898	; 0x1898 <restore_interrupt_setting>
}
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	08 95       	ret

00001892 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1892:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1894:	f8 94       	cli
   return sreg;
}
    1896:	08 95       	ret

00001898 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1898:	8f bf       	out	0x3f, r24	; 63
}
    189a:	08 95       	ret

0000189c <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    189c:	88 1f       	adc	r24, r24
    189e:	88 27       	eor	r24, r24
    18a0:	88 1f       	adc	r24, r24
    18a2:	08 95       	ret

000018a4 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	88 3f       	cpi	r24, 0xF8	; 248
    18a8:	08 f4       	brcc	.+2      	; 0x18ac <midi_is_realtime+0x8>
    18aa:	90 e0       	ldi	r25, 0x00	; 0
}
    18ac:	89 2f       	mov	r24, r25
    18ae:	08 95       	ret

000018b0 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	20 7f       	andi	r18, 0xF0	; 240
    18b6:	30 70       	andi	r19, 0x00	; 0
    18b8:	20 3c       	cpi	r18, 0xC0	; 192
    18ba:	31 05       	cpc	r19, r1
    18bc:	e9 f1       	breq	.+122    	; 0x1938 <midi_packet_length+0x88>
    18be:	21 3c       	cpi	r18, 0xC1	; 193
    18c0:	31 05       	cpc	r19, r1
    18c2:	8c f4       	brge	.+34     	; 0x18e6 <midi_packet_length+0x36>
    18c4:	20 39       	cpi	r18, 0x90	; 144
    18c6:	31 05       	cpc	r19, r1
    18c8:	e1 f0       	breq	.+56     	; 0x1902 <midi_packet_length+0x52>
    18ca:	21 39       	cpi	r18, 0x91	; 145
    18cc:	31 05       	cpc	r19, r1
    18ce:	24 f4       	brge	.+8      	; 0x18d8 <midi_packet_length+0x28>
    18d0:	20 38       	cpi	r18, 0x80	; 128
    18d2:	31 05       	cpc	r19, r1
    18d4:	79 f5       	brne	.+94     	; 0x1934 <midi_packet_length+0x84>
    18d6:	15 c0       	rjmp	.+42     	; 0x1902 <midi_packet_length+0x52>
    18d8:	20 3a       	cpi	r18, 0xA0	; 160
    18da:	31 05       	cpc	r19, r1
    18dc:	91 f0       	breq	.+36     	; 0x1902 <midi_packet_length+0x52>
    18de:	20 3b       	cpi	r18, 0xB0	; 176
    18e0:	31 05       	cpc	r19, r1
    18e2:	41 f5       	brne	.+80     	; 0x1934 <midi_packet_length+0x84>
    18e4:	0e c0       	rjmp	.+28     	; 0x1902 <midi_packet_length+0x52>
    18e6:	20 3e       	cpi	r18, 0xE0	; 224
    18e8:	31 05       	cpc	r19, r1
    18ea:	59 f0       	breq	.+22     	; 0x1902 <midi_packet_length+0x52>
    18ec:	21 3e       	cpi	r18, 0xE1	; 225
    18ee:	31 05       	cpc	r19, r1
    18f0:	24 f4       	brge	.+8      	; 0x18fa <midi_packet_length+0x4a>
    18f2:	20 3d       	cpi	r18, 0xD0	; 208
    18f4:	31 05       	cpc	r19, r1
    18f6:	f1 f4       	brne	.+60     	; 0x1934 <midi_packet_length+0x84>
    18f8:	1f c0       	rjmp	.+62     	; 0x1938 <midi_packet_length+0x88>
    18fa:	20 3f       	cpi	r18, 0xF0	; 240
    18fc:	31 05       	cpc	r19, r1
    18fe:	d1 f4       	brne	.+52     	; 0x1934 <midi_packet_length+0x84>
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    1906:	86 3f       	cpi	r24, 0xF6	; 246
    1908:	79 f0       	breq	.+30     	; 0x1928 <midi_packet_length+0x78>
    190a:	87 3f       	cpi	r24, 0xF7	; 247
    190c:	38 f4       	brcc	.+14     	; 0x191c <midi_packet_length+0x6c>
    190e:	82 3f       	cpi	r24, 0xF2	; 242
    1910:	a9 f0       	breq	.+42     	; 0x193c <midi_packet_length+0x8c>
    1912:	83 3f       	cpi	r24, 0xF3	; 243
    1914:	59 f0       	breq	.+22     	; 0x192c <midi_packet_length+0x7c>
    1916:	81 3f       	cpi	r24, 0xF1	; 241
    1918:	59 f4       	brne	.+22     	; 0x1930 <midi_packet_length+0x80>
    191a:	08 c0       	rjmp	.+16     	; 0x192c <midi_packet_length+0x7c>
    191c:	88 3f       	cpi	r24, 0xF8	; 248
    191e:	40 f0       	brcs	.+16     	; 0x1930 <midi_packet_length+0x80>
    1920:	8d 3f       	cpi	r24, 0xFD	; 253
    1922:	10 f0       	brcs	.+4      	; 0x1928 <midi_packet_length+0x78>
    1924:	8e 3f       	cpi	r24, 0xFE	; 254
    1926:	20 f0       	brcs	.+8      	; 0x1930 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    193c:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    193e:	08 95       	ret

00001940 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1940:	0f 93       	push	r16
    1942:	34 2f       	mov	r19, r20
    1944:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1946:	46 2f       	mov	r20, r22
    1948:	4f 70       	andi	r20, 0x0F	; 15
    194a:	40 6b       	ori	r20, 0xB0	; 176
    194c:	23 2f       	mov	r18, r19
    194e:	2f 77       	andi	r18, 0x7F	; 127
    1950:	0f 77       	andi	r16, 0x7F	; 127
    1952:	dc 01       	movw	r26, r24
    1954:	ed 91       	ld	r30, X+
    1956:	fc 91       	ld	r31, X
    1958:	63 e0       	ldi	r22, 0x03	; 3
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    195e:	0f 91       	pop	r16
    1960:	08 95       	ret

00001962 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1962:	0f 93       	push	r16
    1964:	34 2f       	mov	r19, r20
    1966:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1968:	46 2f       	mov	r20, r22
    196a:	4f 70       	andi	r20, 0x0F	; 15
    196c:	40 69       	ori	r20, 0x90	; 144
    196e:	23 2f       	mov	r18, r19
    1970:	2f 77       	andi	r18, 0x7F	; 127
    1972:	0f 77       	andi	r16, 0x7F	; 127
    1974:	dc 01       	movw	r26, r24
    1976:	ed 91       	ld	r30, X+
    1978:	fc 91       	ld	r31, X
    197a:	63 e0       	ldi	r22, 0x03	; 3
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret

00001984 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1984:	0f 93       	push	r16
    1986:	34 2f       	mov	r19, r20
    1988:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    198a:	46 2f       	mov	r20, r22
    198c:	4f 70       	andi	r20, 0x0F	; 15
    198e:	40 68       	ori	r20, 0x80	; 128
    1990:	23 2f       	mov	r18, r19
    1992:	2f 77       	andi	r18, 0x7F	; 127
    1994:	0f 77       	andi	r16, 0x7F	; 127
    1996:	dc 01       	movw	r26, r24
    1998:	ed 91       	ld	r30, X+
    199a:	fc 91       	ld	r31, X
    199c:	63 e0       	ldi	r22, 0x03	; 3
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    19a6:	0f 93       	push	r16
    19a8:	34 2f       	mov	r19, r20
    19aa:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    19ac:	46 2f       	mov	r20, r22
    19ae:	4f 70       	andi	r20, 0x0F	; 15
    19b0:	40 6a       	ori	r20, 0xA0	; 160
    19b2:	23 2f       	mov	r18, r19
    19b4:	2f 77       	andi	r18, 0x7F	; 127
    19b6:	0f 77       	andi	r16, 0x7F	; 127
    19b8:	dc 01       	movw	r26, r24
    19ba:	ed 91       	ld	r30, X+
    19bc:	fc 91       	ld	r31, X
    19be:	63 e0       	ldi	r22, 0x03	; 3
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    19c4:	0f 91       	pop	r16
    19c6:	08 95       	ret

000019c8 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    19cc:	20 e2       	ldi	r18, 0x20	; 32
    19ce:	40 30       	cpi	r20, 0x00	; 0
    19d0:	52 07       	cpc	r21, r18
    19d2:	44 f4       	brge	.+16     	; 0x19e4 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    19d4:	a0 ee       	ldi	r26, 0xE0	; 224
    19d6:	40 30       	cpi	r20, 0x00	; 0
    19d8:	5a 07       	cpc	r21, r26
    19da:	3c f0       	brlt	.+14     	; 0x19ea <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    19dc:	8a 01       	movw	r16, r20
    19de:	00 50       	subi	r16, 0x00	; 0
    19e0:	10 4e       	sbci	r17, 0xE0	; 224
    19e2:	05 c0       	rjmp	.+10     	; 0x19ee <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    19e4:	0f ef       	ldi	r16, 0xFF	; 255
    19e6:	1f e3       	ldi	r17, 0x3F	; 63
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    19ea:	00 e0       	ldi	r16, 0x00	; 0
    19ec:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    19ee:	46 2f       	mov	r20, r22
    19f0:	4f 70       	andi	r20, 0x0F	; 15
    19f2:	40 6e       	ori	r20, 0xE0	; 224
    19f4:	20 2f       	mov	r18, r16
    19f6:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    19f8:	00 0f       	add	r16, r16
    19fa:	01 2f       	mov	r16, r17
    19fc:	00 1f       	adc	r16, r16
    19fe:	11 0b       	sbc	r17, r17
    1a00:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1a02:	0f 77       	andi	r16, 0x7F	; 127
    1a04:	dc 01       	movw	r26, r24
    1a06:	ed 91       	ld	r30, X+
    1a08:	fc 91       	ld	r31, X
    1a0a:	63 e0       	ldi	r22, 0x03	; 3
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	08 95       	ret

00001a16 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1a16:	0f 93       	push	r16
    1a18:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1a1a:	46 2f       	mov	r20, r22
    1a1c:	4f 70       	andi	r20, 0x0F	; 15
    1a1e:	40 6c       	ori	r20, 0xC0	; 192
    1a20:	2f 77       	andi	r18, 0x7F	; 127
    1a22:	dc 01       	movw	r26, r24
    1a24:	ed 91       	ld	r30, X+
    1a26:	fc 91       	ld	r31, X
    1a28:	62 e0       	ldi	r22, 0x02	; 2
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	00 e0       	ldi	r16, 0x00	; 0
    1a2e:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1a34:	0f 93       	push	r16
    1a36:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1a38:	46 2f       	mov	r20, r22
    1a3a:	4f 70       	andi	r20, 0x0F	; 15
    1a3c:	40 6d       	ori	r20, 0xD0	; 208
    1a3e:	2f 77       	andi	r18, 0x7F	; 127
    1a40:	dc 01       	movw	r26, r24
    1a42:	ed 91       	ld	r30, X+
    1a44:	fc 91       	ld	r31, X
    1a46:	62 e0       	ldi	r22, 0x02	; 2
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	00 e0       	ldi	r16, 0x00	; 0
    1a4c:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1a4e:	0f 91       	pop	r16
    1a50:	08 95       	ret

00001a52 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1a52:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1a54:	dc 01       	movw	r26, r24
    1a56:	ed 91       	ld	r30, X+
    1a58:	fc 91       	ld	r31, X
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	48 ef       	ldi	r20, 0xF8	; 248
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	00 e0       	ldi	r16, 0x00	; 0
    1a64:	09 95       	icall
}
    1a66:	0f 91       	pop	r16
    1a68:	08 95       	ret

00001a6a <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1a6a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	ed 91       	ld	r30, X+
    1a70:	fc 91       	ld	r31, X
    1a72:	61 e0       	ldi	r22, 0x01	; 1
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	49 ef       	ldi	r20, 0xF9	; 249
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	00 e0       	ldi	r16, 0x00	; 0
    1a7c:	09 95       	icall
}
    1a7e:	0f 91       	pop	r16
    1a80:	08 95       	ret

00001a82 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1a82:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1a84:	dc 01       	movw	r26, r24
    1a86:	ed 91       	ld	r30, X+
    1a88:	fc 91       	ld	r31, X
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	4a ef       	ldi	r20, 0xFA	; 250
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	00 e0       	ldi	r16, 0x00	; 0
    1a94:	09 95       	icall
}
    1a96:	0f 91       	pop	r16
    1a98:	08 95       	ret

00001a9a <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1a9a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	ed 91       	ld	r30, X+
    1aa0:	fc 91       	ld	r31, X
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	4b ef       	ldi	r20, 0xFB	; 251
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	00 e0       	ldi	r16, 0x00	; 0
    1aac:	09 95       	icall
}
    1aae:	0f 91       	pop	r16
    1ab0:	08 95       	ret

00001ab2 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1ab2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	ed 91       	ld	r30, X+
    1ab8:	fc 91       	ld	r31, X
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	4c ef       	ldi	r20, 0xFC	; 252
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	00 e0       	ldi	r16, 0x00	; 0
    1ac4:	09 95       	icall
}
    1ac6:	0f 91       	pop	r16
    1ac8:	08 95       	ret

00001aca <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1aca:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1acc:	dc 01       	movw	r26, r24
    1ace:	ed 91       	ld	r30, X+
    1ad0:	fc 91       	ld	r31, X
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	4e ef       	ldi	r20, 0xFE	; 254
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	00 e0       	ldi	r16, 0x00	; 0
    1adc:	09 95       	icall
}
    1ade:	0f 91       	pop	r16
    1ae0:	08 95       	ret

00001ae2 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1ae2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	ed 91       	ld	r30, X+
    1ae8:	fc 91       	ld	r31, X
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	4f ef       	ldi	r20, 0xFF	; 255
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	00 e0       	ldi	r16, 0x00	; 0
    1af4:	09 95       	icall
}
    1af6:	0f 91       	pop	r16
    1af8:	08 95       	ret

00001afa <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1afa:	0f 93       	push	r16
   device->send_func(device, 2,
    1afc:	26 2f       	mov	r18, r22
    1afe:	2f 77       	andi	r18, 0x7F	; 127
    1b00:	dc 01       	movw	r26, r24
    1b02:	ed 91       	ld	r30, X+
    1b04:	fc 91       	ld	r31, X
    1b06:	62 e0       	ldi	r22, 0x02	; 2
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	41 ef       	ldi	r20, 0xF1	; 241
    1b0c:	00 e0       	ldi	r16, 0x00	; 0
    1b0e:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1b10:	0f 91       	pop	r16
    1b12:	08 95       	ret

00001b14 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
   device->send_func(device, 3,
    1b18:	26 2f       	mov	r18, r22
    1b1a:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1b1c:	8b 01       	movw	r16, r22
    1b1e:	00 0f       	add	r16, r16
    1b20:	01 2f       	mov	r16, r17
    1b22:	00 1f       	adc	r16, r16
    1b24:	11 0b       	sbc	r17, r17
    1b26:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1b28:	0f 77       	andi	r16, 0x7F	; 127
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	ed 91       	ld	r30, X+
    1b2e:	fc 91       	ld	r31, X
    1b30:	63 e0       	ldi	r22, 0x03	; 3
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	42 ef       	ldi	r20, 0xF2	; 242
    1b36:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	08 95       	ret

00001b3e <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1b3e:	0f 93       	push	r16
   device->send_func(device, 2,
    1b40:	26 2f       	mov	r18, r22
    1b42:	2f 77       	andi	r18, 0x7F	; 127
    1b44:	dc 01       	movw	r26, r24
    1b46:	ed 91       	ld	r30, X+
    1b48:	fc 91       	ld	r31, X
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	43 ef       	ldi	r20, 0xF3	; 243
    1b50:	00 e0       	ldi	r16, 0x00	; 0
    1b52:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1b54:	0f 91       	pop	r16
    1b56:	08 95       	ret

00001b58 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1b58:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	ed 91       	ld	r30, X+
    1b5e:	fc 91       	ld	r31, X
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	46 ef       	ldi	r20, 0xF6	; 246
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	00 e0       	ldi	r16, 0x00	; 0
    1b6a:	09 95       	icall
}
    1b6c:	0f 91       	pop	r16
    1b6e:	08 95       	ret

00001b70 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1b70:	0f 93       	push	r16
    1b72:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1b74:	dc 01       	movw	r26, r24
    1b76:	ed 91       	ld	r30, X+
    1b78:	fc 91       	ld	r31, X
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	00 e0       	ldi	r16, 0x00	; 0
    1b82:	09 95       	icall
}
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1b88:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	ed 91       	ld	r30, X+
    1b8e:	fc 91       	ld	r31, X
    1b90:	09 95       	icall
}
    1b92:	0f 91       	pop	r16
    1b94:	08 95       	ret

00001b96 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1b96:	6f 92       	push	r6
    1b98:	7f 92       	push	r7
    1b9a:	8f 92       	push	r8
    1b9c:	9f 92       	push	r9
    1b9e:	af 92       	push	r10
    1ba0:	bf 92       	push	r11
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <midi_send_array+0x1e>
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	4c 01       	movw	r8, r24
    1bbc:	6b 01       	movw	r12, r22
    1bbe:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1bc0:	61 15       	cp	r22, r1
    1bc2:	71 05       	cpc	r23, r1
    1bc4:	41 f1       	breq	.+80     	; 0x1c16 <midi_send_array+0x80>
    1bc6:	ee 24       	eor	r14, r14
    1bc8:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    1bca:	0f 2e       	mov	r0, r31
    1bcc:	f3 e0       	ldi	r31, 0x03	; 3
    1bce:	6f 2e       	mov	r6, r31
    1bd0:	77 24       	eor	r7, r7
    1bd2:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    1bd4:	19 82       	std	Y+1, r1	; 0x01
    1bd6:	1a 82       	std	Y+2, r1	; 0x02
    1bd8:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    1bda:	86 01       	movw	r16, r12
    1bdc:	0e 19       	sub	r16, r14
    1bde:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    1be0:	04 30       	cpi	r16, 0x04	; 4
    1be2:	11 05       	cpc	r17, r1
    1be4:	08 f0       	brcs	.+2      	; 0x1be8 <midi_send_array+0x52>
    1be6:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1be8:	b5 01       	movw	r22, r10
    1bea:	6e 0d       	add	r22, r14
    1bec:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    1bee:	ce 01       	movw	r24, r28
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	40 2f       	mov	r20, r16
    1bf4:	51 2f       	mov	r21, r17
    1bf6:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    1bfa:	c4 01       	movw	r24, r8
    1bfc:	b8 01       	movw	r22, r16
    1bfe:	49 81       	ldd	r20, Y+1	; 0x01
    1c00:	2a 81       	ldd	r18, Y+2	; 0x02
    1c02:	0b 81       	ldd	r16, Y+3	; 0x03
    1c04:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1c08:	83 e0       	ldi	r24, 0x03	; 3
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	e8 0e       	add	r14, r24
    1c0e:	f9 1e       	adc	r15, r25
    1c10:	ec 14       	cp	r14, r12
    1c12:	fd 04       	cpc	r15, r13
    1c14:	f8 f2       	brcs	.-66     	; 0x1bd4 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	ff 90       	pop	r15
    1c26:	ef 90       	pop	r14
    1c28:	df 90       	pop	r13
    1c2a:	cf 90       	pop	r12
    1c2c:	bf 90       	pop	r11
    1c2e:	af 90       	pop	r10
    1c30:	9f 90       	pop	r9
    1c32:	8f 90       	pop	r8
    1c34:	7f 90       	pop	r7
    1c36:	6f 90       	pop	r6
    1c38:	08 95       	ret

00001c3a <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	73 83       	std	Z+3, r23	; 0x03
    1c3e:	62 83       	std	Z+2, r22	; 0x02
}
    1c40:	08 95       	ret

00001c42 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1c42:	fc 01       	movw	r30, r24
    1c44:	75 83       	std	Z+5, r23	; 0x05
    1c46:	64 83       	std	Z+4, r22	; 0x04
}
    1c48:	08 95       	ret

00001c4a <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	77 83       	std	Z+7, r23	; 0x07
    1c4e:	66 83       	std	Z+6, r22	; 0x06
}
    1c50:	08 95       	ret

00001c52 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1c52:	fc 01       	movw	r30, r24
    1c54:	71 87       	std	Z+9, r23	; 0x09
    1c56:	60 87       	std	Z+8, r22	; 0x08
}
    1c58:	08 95       	ret

00001c5a <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	73 87       	std	Z+11, r23	; 0x0b
    1c5e:	62 87       	std	Z+10, r22	; 0x0a
}
    1c60:	08 95       	ret

00001c62 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1c62:	fc 01       	movw	r30, r24
    1c64:	75 87       	std	Z+13, r23	; 0x0d
    1c66:	64 87       	std	Z+12, r22	; 0x0c
}
    1c68:	08 95       	ret

00001c6a <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	77 87       	std	Z+15, r23	; 0x0f
    1c6e:	66 87       	std	Z+14, r22	; 0x0e
}
    1c70:	08 95       	ret

00001c72 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1c72:	fc 01       	movw	r30, r24
    1c74:	71 8b       	std	Z+17, r23	; 0x11
    1c76:	60 8b       	std	Z+16, r22	; 0x10
}
    1c78:	08 95       	ret

00001c7a <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	73 8b       	std	Z+19, r23	; 0x13
    1c7e:	62 8b       	std	Z+18, r22	; 0x12
}
    1c80:	08 95       	ret

00001c82 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1c82:	fc 01       	movw	r30, r24
    1c84:	75 8b       	std	Z+21, r23	; 0x15
    1c86:	64 8b       	std	Z+20, r22	; 0x14
}
    1c88:	08 95       	ret

00001c8a <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	77 8b       	std	Z+23, r23	; 0x17
    1c8e:	66 8b       	std	Z+22, r22	; 0x16
}
    1c90:	08 95       	ret

00001c92 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1c92:	fc 01       	movw	r30, r24
    1c94:	71 8f       	std	Z+25, r23	; 0x19
    1c96:	60 8f       	std	Z+24, r22	; 0x18
}
    1c98:	08 95       	ret

00001c9a <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	73 8f       	std	Z+27, r23	; 0x1b
    1c9e:	62 8f       	std	Z+26, r22	; 0x1a
}
    1ca0:	08 95       	ret

00001ca2 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	75 8f       	std	Z+29, r23	; 0x1d
    1ca6:	64 8f       	std	Z+28, r22	; 0x1c
}
    1ca8:	08 95       	ret

00001caa <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1caa:	fc 01       	movw	r30, r24
    1cac:	77 8f       	std	Z+31, r23	; 0x1f
    1cae:	66 8f       	std	Z+30, r22	; 0x1e
}
    1cb0:	08 95       	ret

00001cb2 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1cb8:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    1cba:	1f a2       	lds	r17, 0x9f
    1cbc:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	68 5d       	subi	r22, 0xD8	; 216
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc4:	88 51       	subi	r24, 0x18	; 24
    1cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc8:	40 ec       	ldi	r20, 0xC0	; 192
    1cca:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1cce:	1b 82       	std	Y+3, r1	; 0x03
    1cd0:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1cd2:	1d 82       	std	Y+5, r1	; 0x05
    1cd4:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1cd6:	1f 82       	std	Y+7, r1	; 0x07
    1cd8:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1cda:	19 86       	std	Y+9, r1	; 0x09
    1cdc:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1cde:	1b 86       	std	Y+11, r1	; 0x0b
    1ce0:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1ce2:	1d 86       	std	Y+13, r1	; 0x0d
    1ce4:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1ce6:	1f 86       	std	Y+15, r1	; 0x0f
    1ce8:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1cea:	19 8a       	std	Y+17, r1	; 0x11
    1cec:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1cee:	1b 8a       	std	Y+19, r1	; 0x13
    1cf0:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1cf2:	1d 8a       	std	Y+21, r1	; 0x15
    1cf4:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1cf6:	1f 8a       	std	Y+23, r1	; 0x17
    1cf8:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1cfa:	19 8e       	std	Y+25, r1	; 0x19
    1cfc:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1cfe:	1b 8e       	std	Y+27, r1	; 0x1b
    1d00:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1d02:	1d 8e       	std	Y+29, r1	; 0x1d
    1d04:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1d06:	1f 8e       	std	Y+31, r1	; 0x1f
    1d08:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1d0a:	19 a2       	lds	r17, 0x99
    1d0c:	18 a2       	lds	r17, 0x98
}
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1d22:	66 23       	and	r22, r22
    1d24:	99 f0       	breq	.+38     	; 0x1d4c <midi_device_input+0x38>
    1d26:	04 2f       	mov	r16, r20
    1d28:	15 2f       	mov	r17, r21
    1d2a:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    1d2c:	0f 2e       	mov	r0, r31
    1d2e:	f8 ee       	ldi	r31, 0xE8	; 232
    1d30:	ef 2e       	mov	r14, r31
    1d32:	ff 24       	eor	r15, r15
    1d34:	f0 2d       	mov	r31, r0
    1d36:	e8 0e       	add	r14, r24
    1d38:	f9 1e       	adc	r15, r25
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	61 91       	ld	r22, Z+
    1d3e:	8f 01       	movw	r16, r30
    1d40:	c7 01       	movw	r24, r14
    1d42:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1d46:	cf 5f       	subi	r28, 0xFF	; 255
    1d48:	cd 17       	cp	r28, r29
    1d4a:	b9 f7       	brne	.-18     	; 0x1d3a <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	08 95       	ret

00001d5a <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	71 83       	std	Z+1, r23	; 0x01
    1d5e:	60 83       	st	Z, r22
}
    1d60:	08 95       	ret

00001d62 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    1d62:	fc 01       	movw	r30, r24
    1d64:	71 a3       	lds	r23, 0x51
    1d66:	60 a3       	lds	r22, 0x50
}
    1d68:	08 95       	ret

00001d6a <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1d6a:	af 92       	push	r10
    1d6c:	bf 92       	push	r11
    1d6e:	cf 92       	push	r12
    1d70:	df 92       	push	r13
    1d72:	ef 92       	push	r14
    1d74:	ff 92       	push	r15
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <midi_input_callbacks+0x16>
    1d80:	0f 92       	push	r0
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	6c 01       	movw	r12, r24
    1d88:	5b 01       	movw	r10, r22
    1d8a:	f4 2e       	mov	r15, r20
    1d8c:	e2 2e       	mov	r14, r18
    1d8e:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1d90:	dc 01       	movw	r26, r24
    1d92:	95 96       	adiw	r26, 0x25	; 37
    1d94:	8c 91       	ld	r24, X
    1d96:	95 97       	sbiw	r26, 0x25	; 37
    1d98:	84 30       	cpi	r24, 0x04	; 4
    1d9a:	e9 f4       	brne	.+58     	; 0x1dd6 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    1d9c:	5a 96       	adiw	r26, 0x1a	; 26
    1d9e:	ed 91       	ld	r30, X+
    1da0:	fc 91       	ld	r31, X
    1da2:	5b 97       	sbiw	r26, 0x1b	; 27
    1da4:	30 97       	sbiw	r30, 0x00	; 0
    1da6:	09 f4       	brne	.+2      	; 0x1daa <midi_input_callbacks+0x40>
    1da8:	ee c0       	rjmp	.+476    	; 0x1f86 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1daa:	cb 01       	movw	r24, r22
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	63 e0       	ldi	r22, 0x03	; 3
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
    1db6:	cb 01       	movw	r24, r22
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	68 0f       	add	r22, r24
    1dbe:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1dc0:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1dc2:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    1dc4:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1dc6:	4a 2d       	mov	r20, r10
    1dc8:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1dca:	c6 01       	movw	r24, r12
    1dcc:	9e 01       	movw	r18, r28
    1dce:	2f 5f       	subi	r18, 0xFF	; 255
    1dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd2:	09 95       	icall
    1dd4:	c8 c0       	rjmp	.+400    	; 0x1f66 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    1dd6:	62 30       	cpi	r22, 0x02	; 2
    1dd8:	71 05       	cpc	r23, r1
    1dda:	09 f4       	brne	.+2      	; 0x1dde <midi_input_callbacks+0x74>
    1ddc:	5f c0       	rjmp	.+190    	; 0x1e9c <midi_input_callbacks+0x132>
    1dde:	63 30       	cpi	r22, 0x03	; 3
    1de0:	71 05       	cpc	r23, r1
    1de2:	29 f0       	breq	.+10     	; 0x1dee <midi_input_callbacks+0x84>
    1de4:	61 30       	cpi	r22, 0x01	; 1
    1de6:	71 05       	cpc	r23, r1
    1de8:	09 f0       	breq	.+2      	; 0x1dec <midi_input_callbacks+0x82>
    1dea:	b3 c0       	rjmp	.+358    	; 0x1f52 <midi_input_callbacks+0x1e8>
    1dec:	99 c0       	rjmp	.+306    	; 0x1f20 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1dee:	84 2f       	mov	r24, r20
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	80 7f       	andi	r24, 0xF0	; 240
    1df4:	90 70       	andi	r25, 0x00	; 0
    1df6:	80 3a       	cpi	r24, 0xA0	; 160
    1df8:	91 05       	cpc	r25, r1
    1dfa:	29 f1       	breq	.+74     	; 0x1e46 <midi_input_callbacks+0xdc>
    1dfc:	81 3a       	cpi	r24, 0xA1	; 161
    1dfe:	91 05       	cpc	r25, r1
    1e00:	3c f4       	brge	.+14     	; 0x1e10 <midi_input_callbacks+0xa6>
    1e02:	80 38       	cpi	r24, 0x80	; 128
    1e04:	91 05       	cpc	r25, r1
    1e06:	c9 f0       	breq	.+50     	; 0x1e3a <midi_input_callbacks+0xd0>
    1e08:	80 39       	cpi	r24, 0x90	; 144
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	91 f5       	brne	.+100    	; 0x1e72 <midi_input_callbacks+0x108>
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <midi_input_callbacks+0xc4>
    1e10:	80 3e       	cpi	r24, 0xE0	; 224
    1e12:	91 05       	cpc	r25, r1
    1e14:	f1 f0       	breq	.+60     	; 0x1e52 <midi_input_callbacks+0xe8>
    1e16:	80 3f       	cpi	r24, 0xF0	; 240
    1e18:	91 05       	cpc	r25, r1
    1e1a:	09 f1       	breq	.+66     	; 0x1e5e <midi_input_callbacks+0xf4>
    1e1c:	80 3b       	cpi	r24, 0xB0	; 176
    1e1e:	91 05       	cpc	r25, r1
    1e20:	41 f5       	brne	.+80     	; 0x1e72 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    1e22:	d6 01       	movw	r26, r12
    1e24:	12 96       	adiw	r26, 0x02	; 2
    1e26:	ed 91       	ld	r30, X+
    1e28:	fc 91       	ld	r31, X
    1e2a:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1e2c:	24 c0       	rjmp	.+72     	; 0x1e76 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1e2e:	d6 01       	movw	r26, r12
    1e30:	14 96       	adiw	r26, 0x04	; 4
    1e32:	ed 91       	ld	r30, X+
    1e34:	fc 91       	ld	r31, X
    1e36:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1e38:	1e c0       	rjmp	.+60     	; 0x1e76 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1e3a:	d6 01       	movw	r26, r12
    1e3c:	16 96       	adiw	r26, 0x06	; 6
    1e3e:	ed 91       	ld	r30, X+
    1e40:	fc 91       	ld	r31, X
    1e42:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1e44:	18 c0       	rjmp	.+48     	; 0x1e76 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1e46:	d6 01       	movw	r26, r12
    1e48:	18 96       	adiw	r26, 0x08	; 8
    1e4a:	ed 91       	ld	r30, X+
    1e4c:	fc 91       	ld	r31, X
    1e4e:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1e50:	12 c0       	rjmp	.+36     	; 0x1e76 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1e52:	d6 01       	movw	r26, r12
    1e54:	1a 96       	adiw	r26, 0x0a	; 10
    1e56:	ed 91       	ld	r30, X+
    1e58:	fc 91       	ld	r31, X
    1e5a:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1e5c:	0c c0       	rjmp	.+24     	; 0x1e76 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1e5e:	b2 ef       	ldi	r27, 0xF2	; 242
    1e60:	4b 17       	cp	r20, r27
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <midi_input_callbacks+0xfc>
    1e64:	90 c0       	rjmp	.+288    	; 0x1f86 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    1e66:	d6 01       	movw	r26, r12
    1e68:	1c 96       	adiw	r26, 0x0c	; 12
    1e6a:	ed 91       	ld	r30, X+
    1e6c:	fc 91       	ld	r31, X
    1e6e:	1d 97       	sbiw	r26, 0x0d	; 13
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1e72:	e0 e0       	ldi	r30, 0x00	; 0
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1e76:	30 97       	sbiw	r30, 0x00	; 0
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <midi_input_callbacks+0x112>
    1e7a:	85 c0       	rjmp	.+266    	; 0x1f86 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1e7c:	b2 ef       	ldi	r27, 0xF2	; 242
    1e7e:	fb 16       	cp	r15, r27
    1e80:	31 f4       	brne	.+12     	; 0x1e8e <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    1e82:	c6 01       	movw	r24, r12
    1e84:	62 ef       	ldi	r22, 0xF2	; 242
    1e86:	4e 2d       	mov	r20, r14
    1e88:	21 2f       	mov	r18, r17
    1e8a:	09 95       	icall
    1e8c:	6c c0       	rjmp	.+216    	; 0x1f66 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1e8e:	6f 2d       	mov	r22, r15
    1e90:	6f 70       	andi	r22, 0x0F	; 15
    1e92:	c6 01       	movw	r24, r12
    1e94:	4e 2d       	mov	r20, r14
    1e96:	21 2f       	mov	r18, r17
    1e98:	09 95       	icall
    1e9a:	65 c0       	rjmp	.+202    	; 0x1f66 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1e9c:	84 2f       	mov	r24, r20
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	80 7f       	andi	r24, 0xF0	; 240
    1ea2:	90 70       	andi	r25, 0x00	; 0
    1ea4:	80 3d       	cpi	r24, 0xD0	; 208
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	61 f0       	breq	.+24     	; 0x1ec2 <midi_input_callbacks+0x158>
    1eaa:	80 3f       	cpi	r24, 0xF0	; 240
    1eac:	91 05       	cpc	r25, r1
    1eae:	79 f0       	breq	.+30     	; 0x1ece <midi_input_callbacks+0x164>
    1eb0:	80 3c       	cpi	r24, 0xC0	; 192
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	f9 f4       	brne	.+62     	; 0x1ef4 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1eb6:	d6 01       	movw	r26, r12
    1eb8:	1e 96       	adiw	r26, 0x0e	; 14
    1eba:	ed 91       	ld	r30, X+
    1ebc:	fc 91       	ld	r31, X
    1ebe:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1ec0:	1b c0       	rjmp	.+54     	; 0x1ef8 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1ec2:	d6 01       	movw	r26, r12
    1ec4:	50 96       	adiw	r26, 0x10	; 16
    1ec6:	ed 91       	ld	r30, X+
    1ec8:	fc 91       	ld	r31, X
    1eca:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1ecc:	15 c0       	rjmp	.+42     	; 0x1ef8 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1ece:	b3 ef       	ldi	r27, 0xF3	; 243
    1ed0:	4b 17       	cp	r20, r27
    1ed2:	31 f4       	brne	.+12     	; 0x1ee0 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    1ed4:	d6 01       	movw	r26, r12
    1ed6:	52 96       	adiw	r26, 0x12	; 18
    1ed8:	ed 91       	ld	r30, X+
    1eda:	fc 91       	ld	r31, X
    1edc:	53 97       	sbiw	r26, 0x13	; 19
    1ede:	0c c0       	rjmp	.+24     	; 0x1ef8 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1ee0:	b1 ef       	ldi	r27, 0xF1	; 241
    1ee2:	4b 17       	cp	r20, r27
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <midi_input_callbacks+0x17e>
    1ee6:	4f c0       	rjmp	.+158    	; 0x1f86 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    1ee8:	d6 01       	movw	r26, r12
    1eea:	54 96       	adiw	r26, 0x14	; 20
    1eec:	ed 91       	ld	r30, X+
    1eee:	fc 91       	ld	r31, X
    1ef0:	55 97       	sbiw	r26, 0x15	; 21
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1ef4:	e0 e0       	ldi	r30, 0x00	; 0
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1ef8:	30 97       	sbiw	r30, 0x00	; 0
    1efa:	09 f4       	brne	.+2      	; 0x1efe <midi_input_callbacks+0x194>
    1efc:	44 c0       	rjmp	.+136    	; 0x1f86 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1efe:	b3 ef       	ldi	r27, 0xF3	; 243
    1f00:	fb 16       	cp	r15, r27
    1f02:	19 f0       	breq	.+6      	; 0x1f0a <midi_input_callbacks+0x1a0>
    1f04:	81 ef       	ldi	r24, 0xF1	; 241
    1f06:	f8 16       	cp	r15, r24
    1f08:	29 f4       	brne	.+10     	; 0x1f14 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1f0a:	c6 01       	movw	r24, r12
    1f0c:	6f 2d       	mov	r22, r15
    1f0e:	4e 2d       	mov	r20, r14
    1f10:	09 95       	icall
    1f12:	29 c0       	rjmp	.+82     	; 0x1f66 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    1f14:	6f 2d       	mov	r22, r15
    1f16:	6f 70       	andi	r22, 0x0F	; 15
    1f18:	c6 01       	movw	r24, r12
    1f1a:	4e 2d       	mov	r20, r14
    1f1c:	09 95       	icall
    1f1e:	23 c0       	rjmp	.+70     	; 0x1f66 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1f20:	84 2f       	mov	r24, r20
    1f22:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <midi_is_realtime>
    1f26:	88 23       	and	r24, r24
    1f28:	31 f0       	breq	.+12     	; 0x1f36 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    1f2a:	d6 01       	movw	r26, r12
    1f2c:	56 96       	adiw	r26, 0x16	; 22
    1f2e:	ed 91       	ld	r30, X+
    1f30:	fc 91       	ld	r31, X
    1f32:	57 97       	sbiw	r26, 0x17	; 23
    1f34:	08 c0       	rjmp	.+16     	; 0x1f46 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    1f36:	b6 ef       	ldi	r27, 0xF6	; 246
    1f38:	fb 16       	cp	r15, r27
    1f3a:	29 f5       	brne	.+74     	; 0x1f86 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    1f3c:	d6 01       	movw	r26, r12
    1f3e:	58 96       	adiw	r26, 0x18	; 24
    1f40:	ed 91       	ld	r30, X+
    1f42:	fc 91       	ld	r31, X
    1f44:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1f46:	30 97       	sbiw	r30, 0x00	; 0
    1f48:	f1 f0       	breq	.+60     	; 0x1f86 <midi_input_callbacks+0x21c>
            func(device, byte0);
    1f4a:	c6 01       	movw	r24, r12
    1f4c:	6f 2d       	mov	r22, r15
    1f4e:	09 95       	icall
    1f50:	0a c0       	rjmp	.+20     	; 0x1f66 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1f52:	64 30       	cpi	r22, 0x04	; 4
    1f54:	71 05       	cpc	r23, r1
    1f56:	a8 f4       	brcc	.+42     	; 0x1f82 <midi_input_callbacks+0x218>
    1f58:	16 c0       	rjmp	.+44     	; 0x1f86 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1f5a:	c6 01       	movw	r24, r12
    1f5c:	b5 01       	movw	r22, r10
    1f5e:	4f 2d       	mov	r20, r15
    1f60:	2e 2d       	mov	r18, r14
    1f62:	01 2f       	mov	r16, r17
    1f64:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1f66:	d6 01       	movw	r26, r12
    1f68:	5e 96       	adiw	r26, 0x1e	; 30
    1f6a:	ed 91       	ld	r30, X+
    1f6c:	fc 91       	ld	r31, X
    1f6e:	5f 97       	sbiw	r26, 0x1f	; 31
    1f70:	30 97       	sbiw	r30, 0x00	; 0
    1f72:	89 f0       	breq	.+34     	; 0x1f96 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1f74:	c6 01       	movw	r24, r12
    1f76:	b5 01       	movw	r22, r10
    1f78:	4f 2d       	mov	r20, r15
    1f7a:	2e 2d       	mov	r18, r14
    1f7c:	01 2f       	mov	r16, r17
    1f7e:	09 95       	icall
    1f80:	0a c0       	rjmp	.+20     	; 0x1f96 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    1f82:	aa 24       	eor	r10, r10
    1f84:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1f86:	d6 01       	movw	r26, r12
    1f88:	5c 96       	adiw	r26, 0x1c	; 28
    1f8a:	ed 91       	ld	r30, X+
    1f8c:	fc 91       	ld	r31, X
    1f8e:	5d 97       	sbiw	r26, 0x1d	; 29
    1f90:	30 97       	sbiw	r30, 0x00	; 0
    1f92:	19 f7       	brne	.-58     	; 0x1f5a <midi_input_callbacks+0x1f0>
    1f94:	e8 cf       	rjmp	.-48     	; 0x1f66 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	df 90       	pop	r13
    1faa:	cf 90       	pop	r12
    1fac:	bf 90       	pop	r11
    1fae:	af 90       	pop	r10
    1fb0:	08 95       	ret

00001fb2 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1fb2:	ef 92       	push	r14
    1fb4:	ff 92       	push	r15
    1fb6:	0f 93       	push	r16
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	7c 01       	movw	r14, r24
    1fbe:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    1fc0:	86 2f       	mov	r24, r22
    1fc2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <midi_is_realtime>
    1fc6:	88 23       	and	r24, r24
    1fc8:	91 f0       	breq	.+36     	; 0x1fee <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1fca:	d7 01       	movw	r26, r14
    1fcc:	95 96       	adiw	r26, 0x25	; 37
    1fce:	dc 91       	ld	r29, X
    1fd0:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	95 96       	adiw	r26, 0x25	; 37
    1fd6:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    1fd8:	c7 01       	movw	r24, r14
    1fda:	61 e0       	ldi	r22, 0x01	; 1
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	4c 2f       	mov	r20, r28
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	00 e0       	ldi	r16, 0x00	; 0
    1fe4:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <midi_input_callbacks>
    device->input_state = state;
    1fe8:	f7 01       	movw	r30, r14
    1fea:	d5 a3       	lds	r29, 0x55
    1fec:	b7 c0       	rjmp	.+366    	; 0x215c <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    1fee:	8c 2f       	mov	r24, r28
    1ff0:	0e 94 4e 0c 	call	0x189c	; 0x189c <midi_is_statusbyte>
    1ff4:	88 23       	and	r24, r24
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <midi_process_byte+0x48>
    1ff8:	73 c0       	rjmp	.+230    	; 0x20e0 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1ffa:	d7 01       	movw	r26, r14
    1ffc:	95 96       	adiw	r26, 0x25	; 37
    1ffe:	8c 91       	ld	r24, X
    2000:	95 97       	sbiw	r26, 0x25	; 37
    2002:	84 30       	cpi	r24, 0x04	; 4
    2004:	49 f0       	breq	.+18     	; 0x2018 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    2006:	92 96       	adiw	r26, 0x22	; 34
    2008:	cc 93       	st	X, r28
    200a:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	97 96       	adiw	r26, 0x27	; 39
    2012:	9c 93       	st	X, r25
    2014:	8e 93       	st	-X, r24
    2016:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    2018:	8c 2f       	mov	r24, r28
    201a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <midi_packet_length>
    201e:	81 30       	cpi	r24, 0x01	; 1
    2020:	41 f0       	breq	.+16     	; 0x2032 <midi_process_byte+0x80>
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	00 f1       	brcs	.+64     	; 0x2066 <midi_process_byte+0xb4>
    2026:	82 30       	cpi	r24, 0x02	; 2
    2028:	a1 f0       	breq	.+40     	; 0x2052 <midi_process_byte+0xa0>
    202a:	83 30       	cpi	r24, 0x03	; 3
    202c:	09 f0       	breq	.+2      	; 0x2030 <midi_process_byte+0x7e>
    202e:	4f c0       	rjmp	.+158    	; 0x20ce <midi_process_byte+0x11c>
    2030:	14 c0       	rjmp	.+40     	; 0x205a <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	f7 01       	movw	r30, r14
    2036:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    2038:	c7 01       	movw	r24, r14
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	4c 2f       	mov	r20, r28
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	00 e0       	ldi	r16, 0x00	; 0
    2044:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <midi_input_callbacks>
        device->input_state = IDLE;
    2048:	d7 01       	movw	r26, r14
    204a:	95 96       	adiw	r26, 0x25	; 37
    204c:	1c 92       	st	X, r1
    204e:	95 97       	sbiw	r26, 0x25	; 37
        break;
    2050:	85 c0       	rjmp	.+266    	; 0x215c <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	f7 01       	movw	r30, r14
    2056:	85 a3       	lds	r24, 0x55
        break;
    2058:	81 c0       	rjmp	.+258    	; 0x215c <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	d7 01       	movw	r26, r14
    205e:	95 96       	adiw	r26, 0x25	; 37
    2060:	8c 93       	st	X, r24
    2062:	95 97       	sbiw	r26, 0x25	; 37
        break;
    2064:	7b c0       	rjmp	.+246    	; 0x215c <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    2066:	c0 3f       	cpi	r28, 0xF0	; 240
    2068:	19 f0       	breq	.+6      	; 0x2070 <midi_process_byte+0xbe>
    206a:	c7 3f       	cpi	r28, 0xF7	; 247
    206c:	59 f5       	brne	.+86     	; 0x20c4 <midi_process_byte+0x112>
    206e:	0a c0       	rjmp	.+20     	; 0x2084 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    2070:	84 e0       	ldi	r24, 0x04	; 4
    2072:	f7 01       	movw	r30, r14
    2074:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    2076:	80 ef       	ldi	r24, 0xF0	; 240
    2078:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	97 a3       	lds	r25, 0x57
    2080:	86 a3       	lds	r24, 0x56
            break;
    2082:	6c c0       	rjmp	.+216    	; 0x215c <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    2084:	d7 01       	movw	r26, r14
    2086:	96 96       	adiw	r26, 0x26	; 38
    2088:	2d 91       	ld	r18, X+
    208a:	3c 91       	ld	r19, X
    208c:	97 97       	sbiw	r26, 0x27	; 39
    208e:	c9 01       	movw	r24, r18
    2090:	63 e0       	ldi	r22, 0x03	; 3
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
    2098:	f7 01       	movw	r30, r14
    209a:	e8 0f       	add	r30, r24
    209c:	f9 1f       	adc	r31, r25
    209e:	87 ef       	ldi	r24, 0xF7	; 247
    20a0:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    20a2:	b9 01       	movw	r22, r18
    20a4:	6f 5f       	subi	r22, 0xFF	; 255
    20a6:	7f 4f       	sbci	r23, 0xFF	; 255
    20a8:	f7 01       	movw	r30, r14
    20aa:	77 a3       	lds	r23, 0x57
    20ac:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    20ae:	c7 01       	movw	r24, r14
    20b0:	42 a1       	lds	r20, 0x42
    20b2:	23 a1       	lds	r18, 0x43
    20b4:	04 a1       	lds	r16, 0x44
    20b6:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    20ba:	d7 01       	movw	r26, r14
    20bc:	95 96       	adiw	r26, 0x25	; 37
    20be:	1c 92       	st	X, r1
    20c0:	95 97       	sbiw	r26, 0x25	; 37
            break;
    20c2:	4c c0       	rjmp	.+152    	; 0x215c <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    20c4:	f7 01       	movw	r30, r14
    20c6:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    20c8:	17 a2       	lds	r17, 0x97
    20ca:	16 a2       	lds	r17, 0x96
    20cc:	47 c0       	rjmp	.+142    	; 0x215c <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    20ce:	d7 01       	movw	r26, r14
    20d0:	95 96       	adiw	r26, 0x25	; 37
    20d2:	1c 92       	st	X, r1
    20d4:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    20d6:	97 96       	adiw	r26, 0x27	; 39
    20d8:	1c 92       	st	X, r1
    20da:	1e 92       	st	-X, r1
    20dc:	96 97       	sbiw	r26, 0x26	; 38
        break;
    20de:	3e c0       	rjmp	.+124    	; 0x215c <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    20e0:	f7 01       	movw	r30, r14
    20e2:	25 a1       	lds	r18, 0x45
    20e4:	22 23       	and	r18, r18
    20e6:	d1 f1       	breq	.+116    	; 0x215c <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    20e8:	06 a0       	lds	r16, 0x86
    20ea:	f7 a1       	lds	r31, 0x47
    20ec:	e0 2d       	mov	r30, r0
    20ee:	cf 01       	movw	r24, r30
    20f0:	63 e0       	ldi	r22, 0x03	; 3
    20f2:	70 e0       	ldi	r23, 0x00	; 0
    20f4:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
    20f8:	ac 01       	movw	r20, r24
    20fa:	8e 0d       	add	r24, r14
    20fc:	9f 1d       	adc	r25, r15
    20fe:	dc 01       	movw	r26, r24
    2100:	92 96       	adiw	r26, 0x22	; 34
    2102:	cc 93       	st	X, r28
    2104:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    2106:	bf 01       	movw	r22, r30
    2108:	6f 5f       	subi	r22, 0xFF	; 255
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	f7 01       	movw	r30, r14
    210e:	77 a3       	lds	r23, 0x57
    2110:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    2112:	41 30       	cpi	r20, 0x01	; 1
    2114:	51 05       	cpc	r21, r1
    2116:	91 f0       	breq	.+36     	; 0x213c <midi_process_byte+0x18a>
    2118:	42 30       	cpi	r20, 0x02	; 2
    211a:	51 05       	cpc	r21, r1
    211c:	f9 f4       	brne	.+62     	; 0x215c <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    211e:	c7 01       	movw	r24, r14
    2120:	42 a1       	lds	r20, 0x42
    2122:	23 a1       	lds	r18, 0x43
    2124:	04 a1       	lds	r16, 0x44
    2126:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    212a:	f7 01       	movw	r30, r14
    212c:	85 a1       	lds	r24, 0x45
    212e:	84 30       	cpi	r24, 0x04	; 4
    2130:	a9 f0       	breq	.+42     	; 0x215c <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	97 a3       	lds	r25, 0x57
    2138:	86 a3       	lds	r24, 0x56
    213a:	10 c0       	rjmp	.+32     	; 0x215c <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    213c:	22 30       	cpi	r18, 0x02	; 2
    213e:	71 f4       	brne	.+28     	; 0x215c <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    2140:	c7 01       	movw	r24, r14
    2142:	42 a1       	lds	r20, 0x42
    2144:	23 a1       	lds	r18, 0x43
    2146:	00 e0       	ldi	r16, 0x00	; 0
    2148:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    214c:	f7 01       	movw	r30, r14
    214e:	85 a1       	lds	r24, 0x45
    2150:	84 30       	cpi	r24, 0x04	; 4
    2152:	21 f0       	breq	.+8      	; 0x215c <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	97 a3       	lds	r25, 0x57
    215a:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	0f 91       	pop	r16
    2162:	ff 90       	pop	r15
    2164:	ef 90       	pop	r14
    2166:	08 95       	ret

00002168 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    2168:	cf 92       	push	r12
    216a:	df 92       	push	r13
    216c:	ef 92       	push	r14
    216e:	ff 92       	push	r15
    2170:	0f 93       	push	r16
    2172:	1f 93       	push	r17
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    217a:	dc 01       	movw	r26, r24
    217c:	90 96       	adiw	r26, 0x20	; 32
    217e:	ed 91       	ld	r30, X+
    2180:	fc 91       	ld	r31, X
    2182:	91 97       	sbiw	r26, 0x21	; 33
    2184:	30 97       	sbiw	r30, 0x00	; 0
    2186:	09 f0       	breq	.+2      	; 0x218a <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    2188:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    218a:	0f 2e       	mov	r0, r31
    218c:	f8 ee       	ldi	r31, 0xE8	; 232
    218e:	ef 2e       	mov	r14, r31
    2190:	ff 24       	eor	r15, r15
    2192:	f0 2d       	mov	r31, r0
    2194:	ec 0c       	add	r14, r12
    2196:	fd 1c       	adc	r15, r13
    2198:	c7 01       	movw	r24, r14
    219a:	0e 94 09 0c 	call	0x1812	; 0x1812 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    219e:	c8 2f       	mov	r28, r24
    21a0:	d0 e0       	ldi	r29, 0x00	; 0
    21a2:	20 97       	sbiw	r28, 0x00	; 0
    21a4:	99 f0       	breq	.+38     	; 0x21cc <midi_device_process+0x64>
    21a6:	00 e0       	ldi	r16, 0x00	; 0
    21a8:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    21aa:	c7 01       	movw	r24, r14
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	0e 94 1e 0c 	call	0x183c	; 0x183c <bytequeue_get>
    21b2:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    21b4:	c6 01       	movw	r24, r12
    21b6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    21ba:	c7 01       	movw	r24, r14
    21bc:	61 e0       	ldi	r22, 0x01	; 1
    21be:	0e 94 2f 0c 	call	0x185e	; 0x185e <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    21c2:	0f 5f       	subi	r16, 0xFF	; 255
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	0c 17       	cp	r16, r28
    21c8:	1d 07       	cpc	r17, r29
    21ca:	78 f3       	brcs	.-34     	; 0x21aa <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	ff 90       	pop	r15
    21d6:	ef 90       	pop	r14
    21d8:	df 90       	pop	r13
    21da:	cf 90       	pop	r12
    21dc:	08 95       	ret

000021de <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    21de:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    21e0:	67 e0       	ldi	r22, 0x07	; 7
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
    21e8:	48 2f       	mov	r20, r24
   if (remainder)
    21ea:	88 23       	and	r24, r24
    21ec:	81 f0       	breq	.+32     	; 0x220e <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    21ee:	c9 01       	movw	r24, r18
    21f0:	67 e0       	ldi	r22, 0x07	; 7
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
    21f8:	cb 01       	movw	r24, r22
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	84 0f       	add	r24, r20
    220a:	91 1d       	adc	r25, r1
    220c:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    220e:	c9 01       	movw	r24, r18
    2210:	67 e0       	ldi	r22, 0x07	; 7
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
    2218:	cb 01       	movw	r24, r22
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
}
    2226:	08 95       	ret

00002228 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    2228:	48 2f       	mov	r20, r24
    222a:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    222c:	a1 f0       	breq	.+40     	; 0x2256 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    222e:	9c 01       	movw	r18, r24
    2230:	36 95       	lsr	r19
    2232:	27 95       	ror	r18
    2234:	36 95       	lsr	r19
    2236:	27 95       	ror	r18
    2238:	36 95       	lsr	r19
    223a:	27 95       	ror	r18
    223c:	c9 01       	movw	r24, r18
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	82 1b       	sub	r24, r18
    224c:	93 0b       	sbc	r25, r19
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	84 0f       	add	r24, r20
    2252:	91 1d       	adc	r25, r1
    2254:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    2256:	9c 01       	movw	r18, r24
    2258:	36 95       	lsr	r19
    225a:	27 95       	ror	r18
    225c:	36 95       	lsr	r19
    225e:	27 95       	ror	r18
    2260:	36 95       	lsr	r19
    2262:	27 95       	ror	r18
    2264:	c9 01       	movw	r24, r18
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	82 1b       	sub	r24, r18
    2274:	93 0b       	sbc	r25, r19
}
    2276:	08 95       	ret

00002278 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2278:	2f 92       	push	r2
    227a:	3f 92       	push	r3
    227c:	4f 92       	push	r4
    227e:	5f 92       	push	r5
    2280:	6f 92       	push	r6
    2282:	7f 92       	push	r7
    2284:	8f 92       	push	r8
    2286:	9f 92       	push	r9
    2288:	af 92       	push	r10
    228a:	bf 92       	push	r11
    228c:	cf 92       	push	r12
    228e:	df 92       	push	r13
    2290:	ef 92       	push	r14
    2292:	ff 92       	push	r15
    2294:	0f 93       	push	r16
    2296:	1f 93       	push	r17
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	00 d0       	rcall	.+0      	; 0x229e <sysex_encode+0x26>
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <sysex_encode+0x28>
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <sysex_encode+0x2a>
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	1c 01       	movw	r2, r24
    22a8:	7a 83       	std	Y+2, r23	; 0x02
    22aa:	69 83       	std	Y+1, r22	; 0x01
    22ac:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    22ae:	ca 01       	movw	r24, r20
    22b0:	67 e0       	ldi	r22, 0x07	; 7
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
    22b8:	2b 01       	movw	r4, r22
    22ba:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    22bc:	61 15       	cp	r22, r1
    22be:	71 05       	cpc	r23, r1
    22c0:	b1 f1       	breq	.+108    	; 0x232e <sysex_encode+0xb6>
    22c2:	81 01       	movw	r16, r2
    22c4:	e9 80       	ldd	r14, Y+1	; 0x01
    22c6:	fa 80       	ldd	r15, Y+2	; 0x02
    22c8:	cc 24       	eor	r12, r12
    22ca:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    22cc:	88 24       	eor	r8, r8
    22ce:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    22d0:	1e 83       	std	Y+6, r17	; 0x06
    22d2:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    22d4:	f8 01       	movw	r30, r16
    22d6:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    22d8:	fc 82       	std	Y+4, r15	; 0x04
    22da:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    22dc:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    22de:	ab 81       	ldd	r26, Y+3	; 0x03
    22e0:	bc 81       	ldd	r27, Y+4	; 0x04
    22e2:	2d 91       	ld	r18, X+
    22e4:	bc 83       	std	Y+4, r27	; 0x04
    22e6:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    22e8:	4f 5f       	subi	r20, 0xFF	; 255
    22ea:	5f 4f       	sbci	r21, 0xFF	; 255
    22ec:	82 2f       	mov	r24, r18
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	80 78       	andi	r24, 0x80	; 128
    22f2:	90 70       	andi	r25, 0x00	; 0
    22f4:	bc 01       	movw	r22, r24
    22f6:	04 2e       	mov	r0, r20
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <sysex_encode+0x86>
    22fa:	75 95       	asr	r23
    22fc:	67 95       	ror	r22
    22fe:	0a 94       	dec	r0
    2300:	e2 f7       	brpl	.-8      	; 0x22fa <sysex_encode+0x82>
    2302:	ad 81       	ldd	r26, Y+5	; 0x05
    2304:	be 81       	ldd	r27, Y+6	; 0x06
    2306:	8c 91       	ld	r24, X
    2308:	86 2b       	or	r24, r22
    230a:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    230c:	2f 77       	andi	r18, 0x7F	; 127
    230e:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2310:	47 30       	cpi	r20, 0x07	; 7
    2312:	51 05       	cpc	r21, r1
    2314:	21 f7       	brne	.-56     	; 0x22de <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2316:	08 94       	sec
    2318:	c1 1c       	adc	r12, r1
    231a:	d1 1c       	adc	r13, r1
    231c:	08 5f       	subi	r16, 0xF8	; 248
    231e:	1f 4f       	sbci	r17, 0xFF	; 255
    2320:	e7 e0       	ldi	r30, 0x07	; 7
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	ee 0e       	add	r14, r30
    2326:	ff 1e       	adc	r15, r31
    2328:	ca 14       	cp	r12, r10
    232a:	db 04       	cpc	r13, r11
    232c:	89 f6       	brne	.-94     	; 0x22d0 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    232e:	c3 01       	movw	r24, r6
    2330:	67 e0       	ldi	r22, 0x07	; 7
    2332:	70 e0       	ldi	r23, 0x00	; 0
    2334:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
   if (remainder) {
    2338:	88 23       	and	r24, r24
    233a:	d9 f1       	breq	.+118    	; 0x23b2 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    233c:	82 01       	movw	r16, r4
    233e:	00 0f       	add	r16, r16
    2340:	11 1f       	adc	r17, r17
    2342:	00 0f       	add	r16, r16
    2344:	11 1f       	adc	r17, r17
    2346:	00 0f       	add	r16, r16
    2348:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    234a:	78 01       	movw	r14, r16
    234c:	e4 18       	sub	r14, r4
    234e:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    2350:	d1 01       	movw	r26, r2
    2352:	a0 0f       	add	r26, r16
    2354:	b1 1f       	adc	r27, r17
    2356:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    2358:	68 2f       	mov	r22, r24
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	61 15       	cp	r22, r1
    235e:	71 05       	cpc	r23, r1
    2360:	19 f1       	breq	.+70     	; 0x23a8 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2362:	e9 81       	ldd	r30, Y+1	; 0x01
    2364:	fa 81       	ldd	r31, Y+2	; 0x02
    2366:	ee 0e       	add	r14, r30
    2368:	ff 1e       	adc	r15, r31
    236a:	c8 01       	movw	r24, r16
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	28 0e       	add	r2, r24
    2370:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    2376:	f7 01       	movw	r30, r14
    2378:	41 91       	ld	r20, Z+
    237a:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    237c:	2f 5f       	subi	r18, 0xFF	; 255
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	84 2f       	mov	r24, r20
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	80 78       	andi	r24, 0x80	; 128
    2386:	90 70       	andi	r25, 0x00	; 0
    2388:	02 2e       	mov	r0, r18
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <sysex_encode+0x118>
    238c:	95 95       	asr	r25
    238e:	87 95       	ror	r24
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <sysex_encode+0x114>
    2394:	9c 91       	ld	r25, X
    2396:	89 2b       	or	r24, r25
    2398:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    239a:	4f 77       	andi	r20, 0x7F	; 127
    239c:	f1 01       	movw	r30, r2
    239e:	41 93       	st	Z+, r20
    23a0:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    23a2:	26 17       	cp	r18, r22
    23a4:	37 07       	cpc	r19, r23
    23a6:	38 f3       	brcs	.-50     	; 0x2376 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    23a8:	c8 01       	movw	r24, r16
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	86 0f       	add	r24, r22
    23ae:	97 1f       	adc	r25, r23
    23b0:	07 c0       	rjmp	.+14     	; 0x23c0 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    23b2:	c2 01       	movw	r24, r4
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
   }
}
    23c0:	26 96       	adiw	r28, 0x06	; 6
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	ff 90       	pop	r15
    23d6:	ef 90       	pop	r14
    23d8:	df 90       	pop	r13
    23da:	cf 90       	pop	r12
    23dc:	bf 90       	pop	r11
    23de:	af 90       	pop	r10
    23e0:	9f 90       	pop	r9
    23e2:	8f 90       	pop	r8
    23e4:	7f 90       	pop	r7
    23e6:	6f 90       	pop	r6
    23e8:	5f 90       	pop	r5
    23ea:	4f 90       	pop	r4
    23ec:	3f 90       	pop	r3
    23ee:	2f 90       	pop	r2
    23f0:	08 95       	ret

000023f2 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    23f2:	6f 92       	push	r6
    23f4:	7f 92       	push	r7
    23f6:	8f 92       	push	r8
    23f8:	9f 92       	push	r9
    23fa:	af 92       	push	r10
    23fc:	bf 92       	push	r11
    23fe:	cf 92       	push	r12
    2400:	df 92       	push	r13
    2402:	ef 92       	push	r14
    2404:	ff 92       	push	r15
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	3c 01       	movw	r6, r24
    2410:	4b 01       	movw	r8, r22
    2412:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    2414:	42 30       	cpi	r20, 0x02	; 2
    2416:	51 05       	cpc	r21, r1
    2418:	08 f4       	brcc	.+2      	; 0x241c <sysex_decode+0x2a>
    241a:	6f c0       	rjmp	.+222    	; 0x24fa <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    241c:	7a 01       	movw	r14, r20
    241e:	f6 94       	lsr	r15
    2420:	e7 94       	ror	r14
    2422:	f6 94       	lsr	r15
    2424:	e7 94       	ror	r14
    2426:	f6 94       	lsr	r15
    2428:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    242a:	e1 14       	cp	r14, r1
    242c:	f1 04       	cpc	r15, r1
    242e:	29 f1       	breq	.+74     	; 0x247a <sysex_decode+0x88>
    2430:	eb 01       	movw	r28, r22
    2432:	b3 01       	movw	r22, r6
    2434:	00 e0       	ldi	r16, 0x00	; 0
    2436:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2438:	cc 24       	eor	r12, r12
    243a:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    243c:	de 01       	movw	r26, r28
    243e:	11 96       	adiw	r26, 0x01	; 1
    2440:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2442:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    2444:	2d 91       	ld	r18, X+
    2446:	2f 77       	andi	r18, 0x7F	; 127
    2448:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    244a:	4f 5f       	subi	r20, 0xFF	; 255
    244c:	5f 4f       	sbci	r21, 0xFF	; 255
    244e:	88 81       	ld	r24, Y
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	04 2e       	mov	r0, r20
    2454:	02 c0       	rjmp	.+4      	; 0x245a <sysex_decode+0x68>
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	0a 94       	dec	r0
    245c:	e2 f7       	brpl	.-8      	; 0x2456 <sysex_decode+0x64>
    245e:	80 78       	andi	r24, 0x80	; 128
    2460:	28 2b       	or	r18, r24
    2462:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2464:	47 30       	cpi	r20, 0x07	; 7
    2466:	51 05       	cpc	r21, r1
    2468:	69 f7       	brne	.-38     	; 0x2444 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    246a:	0f 5f       	subi	r16, 0xFF	; 255
    246c:	1f 4f       	sbci	r17, 0xFF	; 255
    246e:	28 96       	adiw	r28, 0x08	; 8
    2470:	69 5f       	subi	r22, 0xF9	; 249
    2472:	7f 4f       	sbci	r23, 0xFF	; 255
    2474:	0e 15       	cp	r16, r14
    2476:	1f 05       	cpc	r17, r15
    2478:	09 f7       	brne	.-62     	; 0x243c <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    247a:	5a 2d       	mov	r21, r10
    247c:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    247e:	99 f1       	breq	.+102    	; 0x24e6 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    2480:	e7 01       	movw	r28, r14
    2482:	cc 0f       	add	r28, r28
    2484:	dd 1f       	adc	r29, r29
    2486:	cc 0f       	add	r28, r28
    2488:	dd 1f       	adc	r29, r29
    248a:	cc 0f       	add	r28, r28
    248c:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    248e:	8e 01       	movw	r16, r28
    2490:	0e 19       	sub	r16, r14
    2492:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    2494:	65 2f       	mov	r22, r21
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	61 50       	subi	r22, 0x01	; 1
    249a:	70 40       	sbci	r23, 0x00	; 0
    249c:	f9 f0       	breq	.+62     	; 0x24dc <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    249e:	ce 01       	movw	r24, r28
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	d4 01       	movw	r26, r8
    24a4:	a8 0f       	add	r26, r24
    24a6:	b9 1f       	adc	r27, r25
    24a8:	f3 01       	movw	r30, r6
    24aa:	e0 0f       	add	r30, r16
    24ac:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    24b2:	c8 0d       	add	r28, r8
    24b4:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    24b6:	4d 91       	ld	r20, X+
    24b8:	4f 77       	andi	r20, 0x7F	; 127
    24ba:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    24bc:	2f 5f       	subi	r18, 0xFF	; 255
    24be:	3f 4f       	sbci	r19, 0xFF	; 255
    24c0:	88 81       	ld	r24, Y
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	02 2e       	mov	r0, r18
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <sysex_decode+0xda>
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	0a 94       	dec	r0
    24ce:	e2 f7       	brpl	.-8      	; 0x24c8 <sysex_decode+0xd6>
    24d0:	80 78       	andi	r24, 0x80	; 128
    24d2:	48 2b       	or	r20, r24
    24d4:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    24d6:	26 17       	cp	r18, r22
    24d8:	37 07       	cpc	r19, r23
    24da:	68 f3       	brcs	.-38     	; 0x24b6 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    24dc:	c8 01       	movw	r24, r16
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	85 0f       	add	r24, r21
    24e2:	91 1d       	adc	r25, r1
    24e4:	0c c0       	rjmp	.+24     	; 0x24fe <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    24e6:	c7 01       	movw	r24, r14
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	8e 19       	sub	r24, r14
    24f6:	9f 09       	sbc	r25, r15
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	1f 91       	pop	r17
    2504:	0f 91       	pop	r16
    2506:	ff 90       	pop	r15
    2508:	ef 90       	pop	r14
    250a:	df 90       	pop	r13
    250c:	cf 90       	pop	r12
    250e:	bf 90       	pop	r11
    2510:	af 90       	pop	r10
    2512:	9f 90       	pop	r9
    2514:	8f 90       	pop	r8
    2516:	7f 90       	pop	r7
    2518:	6f 90       	pop	r6
    251a:	08 95       	ret

0000251c <__mulsi3>:
    251c:	62 9f       	mul	r22, r18
    251e:	d0 01       	movw	r26, r0
    2520:	73 9f       	mul	r23, r19
    2522:	f0 01       	movw	r30, r0
    2524:	82 9f       	mul	r24, r18
    2526:	e0 0d       	add	r30, r0
    2528:	f1 1d       	adc	r31, r1
    252a:	64 9f       	mul	r22, r20
    252c:	e0 0d       	add	r30, r0
    252e:	f1 1d       	adc	r31, r1
    2530:	92 9f       	mul	r25, r18
    2532:	f0 0d       	add	r31, r0
    2534:	83 9f       	mul	r24, r19
    2536:	f0 0d       	add	r31, r0
    2538:	74 9f       	mul	r23, r20
    253a:	f0 0d       	add	r31, r0
    253c:	65 9f       	mul	r22, r21
    253e:	f0 0d       	add	r31, r0
    2540:	99 27       	eor	r25, r25
    2542:	72 9f       	mul	r23, r18
    2544:	b0 0d       	add	r27, r0
    2546:	e1 1d       	adc	r30, r1
    2548:	f9 1f       	adc	r31, r25
    254a:	63 9f       	mul	r22, r19
    254c:	b0 0d       	add	r27, r0
    254e:	e1 1d       	adc	r30, r1
    2550:	f9 1f       	adc	r31, r25
    2552:	bd 01       	movw	r22, r26
    2554:	cf 01       	movw	r24, r30
    2556:	11 24       	eor	r1, r1
    2558:	08 95       	ret

0000255a <__udivmodhi4>:
    255a:	aa 1b       	sub	r26, r26
    255c:	bb 1b       	sub	r27, r27
    255e:	51 e1       	ldi	r21, 0x11	; 17
    2560:	07 c0       	rjmp	.+14     	; 0x2570 <__udivmodhi4_ep>

00002562 <__udivmodhi4_loop>:
    2562:	aa 1f       	adc	r26, r26
    2564:	bb 1f       	adc	r27, r27
    2566:	a6 17       	cp	r26, r22
    2568:	b7 07       	cpc	r27, r23
    256a:	10 f0       	brcs	.+4      	; 0x2570 <__udivmodhi4_ep>
    256c:	a6 1b       	sub	r26, r22
    256e:	b7 0b       	sbc	r27, r23

00002570 <__udivmodhi4_ep>:
    2570:	88 1f       	adc	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	5a 95       	dec	r21
    2576:	a9 f7       	brne	.-22     	; 0x2562 <__udivmodhi4_loop>
    2578:	80 95       	com	r24
    257a:	90 95       	com	r25
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	08 95       	ret

00002582 <__divmodhi4>:
    2582:	97 fb       	bst	r25, 7
    2584:	09 2e       	mov	r0, r25
    2586:	07 26       	eor	r0, r23
    2588:	0a d0       	rcall	.+20     	; 0x259e <__divmodhi4_neg1>
    258a:	77 fd       	sbrc	r23, 7
    258c:	04 d0       	rcall	.+8      	; 0x2596 <__divmodhi4_neg2>
    258e:	e5 df       	rcall	.-54     	; 0x255a <__udivmodhi4>
    2590:	06 d0       	rcall	.+12     	; 0x259e <__divmodhi4_neg1>
    2592:	00 20       	and	r0, r0
    2594:	1a f4       	brpl	.+6      	; 0x259c <__divmodhi4_exit>

00002596 <__divmodhi4_neg2>:
    2596:	70 95       	com	r23
    2598:	61 95       	neg	r22
    259a:	7f 4f       	sbci	r23, 0xFF	; 255

0000259c <__divmodhi4_exit>:
    259c:	08 95       	ret

0000259e <__divmodhi4_neg1>:
    259e:	f6 f7       	brtc	.-4      	; 0x259c <__divmodhi4_exit>
    25a0:	90 95       	com	r25
    25a2:	81 95       	neg	r24
    25a4:	9f 4f       	sbci	r25, 0xFF	; 255
    25a6:	08 95       	ret

000025a8 <memcpy>:
    25a8:	fb 01       	movw	r30, r22
    25aa:	dc 01       	movw	r26, r24
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <memcpy+0xa>
    25ae:	01 90       	ld	r0, Z+
    25b0:	0d 92       	st	X+, r0
    25b2:	41 50       	subi	r20, 0x01	; 1
    25b4:	50 40       	sbci	r21, 0x00	; 0
    25b6:	d8 f7       	brcc	.-10     	; 0x25ae <memcpy+0x6>
    25b8:	08 95       	ret

000025ba <memmove>:
    25ba:	68 17       	cp	r22, r24
    25bc:	79 07       	cpc	r23, r25
    25be:	68 f4       	brcc	.+26     	; 0x25da <memmove+0x20>
    25c0:	fb 01       	movw	r30, r22
    25c2:	dc 01       	movw	r26, r24
    25c4:	e4 0f       	add	r30, r20
    25c6:	f5 1f       	adc	r31, r21
    25c8:	a4 0f       	add	r26, r20
    25ca:	b5 1f       	adc	r27, r21
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <memmove+0x18>
    25ce:	02 90       	ld	r0, -Z
    25d0:	0e 92       	st	-X, r0
    25d2:	41 50       	subi	r20, 0x01	; 1
    25d4:	50 40       	sbci	r21, 0x00	; 0
    25d6:	d8 f7       	brcc	.-10     	; 0x25ce <memmove+0x14>
    25d8:	08 95       	ret
    25da:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <memcpy>

000025de <_exit>:
    25de:	f8 94       	cli

000025e0 <__stop_program>:
    25e0:	ff cf       	rjmp	.-2      	; 0x25e0 <__stop_program>
