
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a8  00800100  00003580  00003634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003580  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b7  008002a8  008002a8  000037dc  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  000037dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00003e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00004d88  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005968  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000152f  00000000  00000000  0000a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001da0  00000000  00000000  0000bedf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c04  00000000  00000000  0000dc80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001795  00000000  00000000  0000e884  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002b61  00000000  00000000  00010019  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  00012b7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_9>
      28:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e0 e8       	ldi	r30, 0x80	; 128
      78:	f5 e3       	ldi	r31, 0x35	; 53
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a8 ea       	ldi	r26, 0xA8	; 168
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	af 35       	cpi	r26, 0x5F	; 95
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 e5 02 	call	0x5ca	; 0x5ca <main>
      9a:	0c 94 be 1a 	jmp	0x357c	; 0x357c <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 a8 02 	lds	r24, 0x02A8
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 6f 1a 	call	0x34de	; 0x34de <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 a8 02 	sts	0x02A8, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 6f 1a 	call	0x34de	; 0x34de <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 a8 02 	sts	0x02A8, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 a8 02 	sts	0x02A8, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1f6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1f8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1fa:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1fe:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     200:	8c 91       	ld	r24, X
     202:	87 70       	andi	r24, 0x07	; 7
     204:	82 b9       	out	0x02, r24	; 2
     206:	66 e0       	ldi	r22, 0x06	; 6
     208:	6a 95       	dec	r22
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x12>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     20e:	ea ed       	ldi	r30, 0xDA	; 218
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	40 81       	ld	r20, Z
     214:	8c 91       	ld	r24, X
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	86 95       	lsr	r24
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	b9 01       	movw	r22, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <set_control_voltage+0x34>
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <set_control_voltage+0x30>
     22e:	cb 01       	movw	r24, r22
     230:	84 2b       	or	r24, r20
     232:	80 83       	st	Z, r24
     234:	76 e0       	ldi	r23, 0x06	; 6
     236:	7a 95       	dec	r23
     238:	f1 f7       	brne	.-4      	; 0x236 <set_control_voltage+0x40>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     23c:	80 81       	ld	r24, Z
     23e:	9c 91       	ld	r25, X
     240:	96 95       	lsr	r25
     242:	96 95       	lsr	r25
     244:	96 95       	lsr	r25
     246:	97 70       	andi	r25, 0x07	; 7
     248:	02 c0       	rjmp	.+4      	; 0x24e <set_control_voltage+0x58>
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	9a 95       	dec	r25
     250:	e2 f7       	brpl	.-8      	; 0x24a <set_control_voltage+0x54>
     252:	20 95       	com	r18
     254:	28 23       	and	r18, r24
     256:	20 83       	st	Z, r18
	
}	
     258:	08 95       	ret

0000025a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     25a:	83 b3       	in	r24, 0x13	; 19
     25c:	83 60       	ori	r24, 0x03	; 3
     25e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     264:	97 b1       	in	r25, 0x07	; 7
     266:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     268:	e9 ed       	ldi	r30, 0xD9	; 217
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     272:	ea ed       	ldi	r30, 0xDA	; 218
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     27c:	84 b3       	in	r24, 0x14	; 20
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     282:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     284:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     286:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     288:	a0 9a       	sbi	0x14, 0	; 20
}
     28a:	08 95       	ret

0000028c <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2e 97       	sbiw	r28, 0x0e	; 14
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ac 01       	movw	r20, r24
	
	uint8_t digit[] = {
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	8a 83       	std	Y+2, r24	; 0x02
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	8b 83       	std	Y+3, r24	; 0x03
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	8c 83       	std	Y+4, r24	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2b6:	de 01       	movw	r26, r28
     2b8:	15 96       	adiw	r26, 0x05	; 5
     2ba:	e7 ee       	ldi	r30, 0xE7	; 231
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <display_dec+0x34>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2cc:	ea ed       	ldi	r30, 0xDA	; 218
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d6:	80 81       	ld	r24, Z
     2d8:	8f 7e       	andi	r24, 0xEF	; 239
     2da:	80 83       	st	Z, r24
	
	//set anode bit
	DATA_BUS = digit[place];
     2dc:	06 2f       	mov	r16, r22
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	de 01       	movw	r26, r28
     2e2:	a0 0f       	add	r26, r16
     2e4:	b1 1f       	adc	r27, r17
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	8c 91       	ld	r24, X
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	82 b9       	out	0x02, r24	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2ee:	80 81       	ld	r24, Z
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	80 83       	st	Z, r24
	//if (number > 999) {
	//number = 999;
	//}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     2fa:	ca 01       	movw	r24, r20
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	9a 01       	movw	r18, r20
     306:	36 95       	lsr	r19
     308:	27 95       	ror	r18
     30a:	28 0f       	add	r18, r24
     30c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     30e:	c9 01       	movw	r24, r18
     310:	92 95       	swap	r25
     312:	82 95       	swap	r24
     314:	8f 70       	andi	r24, 0x0F	; 15
     316:	89 27       	eor	r24, r25
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	89 27       	eor	r24, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     320:	29 2f       	mov	r18, r25
     322:	33 27       	eor	r19, r19
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
	r = number - q2 * 10;
     334:	28 2f       	mov	r18, r24
     336:	22 0f       	add	r18, r18
     338:	32 2f       	mov	r19, r18
     33a:	33 0f       	add	r19, r19
     33c:	33 0f       	add	r19, r19
     33e:	23 0f       	add	r18, r19
     340:	e4 2f       	mov	r30, r20
     342:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	ea 30       	cpi	r30, 0x0A	; 10
     34a:	10 f4       	brcc	.+4      	; 0x350 <display_dec+0xc4>
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	68 0f       	add	r22, r24
     352:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     354:	9b 01       	movw	r18, r22
     356:	36 95       	lsr	r19
     358:	27 95       	ror	r18
     35a:	36 95       	lsr	r19
     35c:	27 95       	ror	r18
     35e:	ab 01       	movw	r20, r22
     360:	56 95       	lsr	r21
     362:	47 95       	ror	r20
     364:	24 0f       	add	r18, r20
     366:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     368:	c9 01       	movw	r24, r18
     36a:	92 95       	swap	r25
     36c:	82 95       	swap	r24
     36e:	8f 70       	andi	r24, 0x0F	; 15
     370:	89 27       	eor	r24, r25
     372:	9f 70       	andi	r25, 0x0F	; 15
     374:	89 27       	eor	r24, r25
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     37a:	29 2f       	mov	r18, r25
     37c:	33 27       	eor	r19, r19
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
	r = qa - q3 * 10;
     38e:	98 2f       	mov	r25, r24
     390:	99 0f       	add	r25, r25
     392:	29 2f       	mov	r18, r25
     394:	22 0f       	add	r18, r18
     396:	22 0f       	add	r18, r18
     398:	92 0f       	add	r25, r18
     39a:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	6a 30       	cpi	r22, 0x0A	; 10
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <display_dec+0x118>
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3a6:	41 ef       	ldi	r20, 0xF1	; 241
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	da 01       	movw	r26, r20
     3ac:	a6 0f       	add	r26, r22
     3ae:	b1 1d       	adc	r27, r1
     3b0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3b2:	28 2f       	mov	r18, r24
     3b4:	26 95       	lsr	r18
     3b6:	26 95       	lsr	r18
     3b8:	98 2f       	mov	r25, r24
     3ba:	96 95       	lsr	r25
     3bc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3be:	29 2f       	mov	r18, r25
     3c0:	22 95       	swap	r18
     3c2:	2f 70       	andi	r18, 0x0F	; 15
     3c4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 0f       	add	r18, r18
     3d0:	62 2f       	mov	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	66 0f       	add	r22, r22
     3d6:	26 0f       	add	r18, r22
     3d8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3da:	da 01       	movw	r26, r20
     3dc:	a8 0f       	add	r26, r24
     3de:	b1 1d       	adc	r27, r1
     3e0:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3e2:	4e 0f       	add	r20, r30
     3e4:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3e6:	fa 01       	movw	r30, r20
     3e8:	40 81       	ld	r20, Z
     3ea:	40 93 ab 02 	sts	0x02AB, r20
	digit_index[1] = tens_place;
     3ee:	30 93 ac 02 	sts	0x02AC, r19
	digit_index[2] = hunds_place;
     3f2:	20 93 ad 02 	sts	0x02AD, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	8a 30       	cpi	r24, 0x0A	; 10
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <display_dec+0x172>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     400:	90 93 ae 02 	sts	0x02AE, r25

	cathode_byte = dec[digit_index[place]];
     404:	f8 01       	movw	r30, r16
     406:	e5 55       	subi	r30, 0x55	; 85
     408:	fd 4f       	sbci	r31, 0xFD	; 253
     40a:	80 81       	ld	r24, Z
     40c:	fe 01       	movw	r30, r28
     40e:	e8 0f       	add	r30, r24
     410:	f1 1d       	adc	r31, r1
     412:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     414:	90 91 fb 02 	lds	r25, 0x02FB
     418:	92 30       	cpi	r25, 0x02	; 2
     41a:	09 f4       	brne	.+2      	; 0x41e <display_dec+0x192>
     41c:	80 62       	ori	r24, 0x20	; 32
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     41e:	80 95       	com	r24
     420:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     422:	ea ed       	ldi	r30, 0xDA	; 218
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	80 61       	ori	r24, 0x10	; 16
     42a:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     42c:	80 81       	ld	r24, Z
     42e:	8f 7e       	andi	r24, 0xEF	; 239
     430:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     432:	2e 96       	adiw	r28, 0x0e	; 14
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	08 95       	ret

00000448 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     448:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     44a:	66 23       	and	r22, r22
     44c:	69 f4       	brne	.+26     	; 0x468 <update_display+0x20>

		
			
		display_dec(number, place);
     44e:	c0 91 af 02 	lds	r28, 0x02AF
     452:	6c 2f       	mov	r22, r28
     454:	0e 94 46 01 	call	0x28c	; 0x28c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     458:	8c 2f       	mov	r24, r28
     45a:	8f 5f       	subi	r24, 0xFF	; 255
     45c:	80 93 af 02 	sts	0x02AF, r24
     460:	c3 30       	cpi	r28, 0x03	; 3
     462:	11 f4       	brne	.+4      	; 0x468 <update_display+0x20>
		{
			place = 0;
     464:	10 92 af 02 	sts	0x02AF, r1
		
		
	}
	
	
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	8f 93       	push	r24
     478:	9f 93       	push	r25
     47a:	ef 93       	push	r30
     47c:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     47e:	80 91 6c 03 	lds	r24, 0x036C
     482:	81 50       	subi	r24, 0x01	; 1
     484:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     486:	80 91 6d 03 	lds	r24, 0x036D
     48a:	88 23       	and	r24, r24
     48c:	a1 f4       	brne	.+40     	; 0x4b6 <__vector_10+0x4a>
		count_finished = FALSE;
     48e:	10 92 6a 03 	sts	0x036A, r1
		no_overflow = TRUE;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 a7 02 	sts	0x02A7, r24
		period_counter = 1; //set period counter to 1
     498:	80 93 6d 03 	sts	0x036D, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     49c:	e1 e8       	ldi	r30, 0x81	; 129
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	90 91 6b 03 	lds	r25, 0x036B
     4a6:	89 2b       	or	r24, r25
     4a8:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4aa:	ef e6       	ldi	r30, 0x6F	; 111
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	81 60       	ori	r24, 0x01	; 1
     4b2:	80 83       	st	Z, r24
     4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4b6:	e4 e8       	ldi	r30, 0x84	; 132
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	91 81       	ldd	r25, Z+1	; 0x01
     4be:	90 93 69 03 	sts	0x0369, r25
     4c2:	80 93 68 03 	sts	0x0368, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4c6:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	80 93 6a 03 	sts	0x036A, r24
		period_counter = 0;
     4d0:	10 92 6d 03 	sts	0x036D, r1
		TCNT1 = 0; //reset timer/counter 1
     4d4:	11 82       	std	Z+1, r1	; 0x01
     4d6:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4d8:	ff 91       	pop	r31
     4da:	ef 91       	pop	r30
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	0f 90       	pop	r0
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	0f 90       	pop	r0
     4e6:	1f 90       	pop	r1
     4e8:	18 95       	reti

000004ea <__vector_9>:



ISR (TIMER1_OVF_vect) {
     4ea:	1f 92       	push	r1
     4ec:	0f 92       	push	r0
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	0f 92       	push	r0
     4f2:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     4f4:	10 92 a7 02 	sts	0x02A7, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     4f8:	0f 90       	pop	r0
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	0f 90       	pop	r0
     4fe:	1f 90       	pop	r1
     500:	18 95       	reti

00000502 <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     502:	84 2f       	mov	r24, r20
	remove_note(note);
     504:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     508:	80 91 b1 02 	lds	r24, 0x02B1
     50c:	81 50       	subi	r24, 0x01	; 1
     50e:	80 93 b1 02 	sts	0x02B1, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     512:	88 23       	and	r24, r24
     514:	09 f4       	brne	.+2      	; 0x518 <note_off_event+0x16>
     516:	89 98       	cbi	0x11, 1	; 17
     518:	08 95       	ret

0000051a <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     51a:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     51c:	40 93 b2 02 	sts	0x02B2, r20
	if (velocity == 0) {
     520:	22 23       	and	r18, r18
     522:	59 f4       	brne	.+22     	; 0x53a <note_on_event+0x20>
		remove_note(note);
     524:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     528:	80 91 b1 02 	lds	r24, 0x02B1
     52c:	81 50       	subi	r24, 0x01	; 1
     52e:	80 93 b1 02 	sts	0x02B1, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     532:	88 23       	and	r24, r24
     534:	59 f4       	brne	.+22     	; 0x54c <note_on_event+0x32>
     536:	89 98       	cbi	0x11, 1	; 17
     538:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     53a:	62 2f       	mov	r22, r18
     53c:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     540:	80 91 b1 02 	lds	r24, 0x02B1
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 93 b1 02 	sts	0x02B1, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     54a:	89 9a       	sbi	0x11, 1	; 17
     54c:	08 95       	ret

0000054e <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     54e:	87 e2       	ldi	r24, 0x27	; 39
     550:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     554:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     558:	88 e9       	ldi	r24, 0x98	; 152
     55a:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     55e:	08 95       	ret

00000560 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	0f 92       	push	r0
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     58c:	80 91 c6 00 	lds	r24, 0x00C6
     590:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     592:	82 e7       	ldi	r24, 0x72	; 114
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	61 e0       	ldi	r22, 0x01	; 1
     598:	ae 01       	movw	r20, r28
     59a:	4f 5f       	subi	r20, 0xFF	; 255
     59c:	5f 4f       	sbci	r21, 0xFF	; 255
     59e:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     5a2:	0f 90       	pop	r0
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	ff 91       	pop	r31
     5aa:	ef 91       	pop	r30
     5ac:	bf 91       	pop	r27
     5ae:	af 91       	pop	r26
     5b0:	9f 91       	pop	r25
     5b2:	8f 91       	pop	r24
     5b4:	7f 91       	pop	r23
     5b6:	6f 91       	pop	r22
     5b8:	5f 91       	pop	r21
     5ba:	4f 91       	pop	r20
     5bc:	3f 91       	pop	r19
     5be:	2f 91       	pop	r18
     5c0:	0f 90       	pop	r0
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	0f 90       	pop	r0
     5c6:	1f 90       	pop	r1
     5c8:	18 95       	reti

000005ca <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     5ca:	c0 e8       	ldi	r28, 0x80	; 128
     5cc:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     5ce:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     5d0:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     5d2:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     5d4:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     5d6:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     5d8:	0e 94 e7 05 	call	0xbce	; 0xbce <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     5dc:	a9 ed       	ldi	r26, 0xD9	; 217
     5de:	b0 e0       	ldi	r27, 0x00	; 0
     5e0:	8c 91       	ld	r24, X
     5e2:	80 6c       	ori	r24, 0xC0	; 192
     5e4:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     5e6:	ea ed       	ldi	r30, 0xDA	; 218
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	80 6c       	ori	r24, 0xC0	; 192
     5ee:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     5f0:	81 b1       	in	r24, 0x01	; 1
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     5f6:	92 b1       	in	r25, 0x02	; 2
     5f8:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     5fa:	8c 91       	ld	r24, X
     5fc:	80 63       	ori	r24, 0x30	; 48
     5fe:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     600:	80 81       	ld	r24, Z
     602:	8f 7c       	andi	r24, 0xCF	; 207
     604:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     606:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     608:	ec ed       	ldi	r30, 0xDC	; 220
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	80 62       	ori	r24, 0x20	; 32
     610:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     612:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     614:	ed ed       	ldi	r30, 0xDD	; 221
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	80 62       	ori	r24, 0x20	; 32
     61c:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     61e:	80 81       	ld	r24, Z
     620:	8f 7d       	andi	r24, 0xDF	; 223
     622:	80 83       	st	Z, r24
	DATA_BUS = 0;
     624:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     626:	c0 93 f6 02 	sts	0x02F6, r28
	
	//setup ADC
    setup_adc();		
     62a:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     62e:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     632:	c2 e7       	ldi	r28, 0x72	; 114
     634:	d3 e0       	ldi	r29, 0x03	; 3
     636:	ce 01       	movw	r24, r28
     638:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     63c:	ce 01       	movw	r24, r28
     63e:	6d e8       	ldi	r22, 0x8D	; 141
     640:	72 e0       	ldi	r23, 0x02	; 2
     642:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     646:	ce 01       	movw	r24, r28
     648:	61 e8       	ldi	r22, 0x81	; 129
     64a:	72 e0       	ldi	r23, 0x02	; 2
     64c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     650:	0e 94 a7 02 	call	0x54e	; 0x54e <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     654:	0e 94 0c 06 	call	0xc18	; 0xc18 <update_spi>
	
	
	current_patch.number = 1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 fa 02 	sts	0x02FA, r24
		
	sei(); //enable global interrupts
     65e:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     660:	0e 94 6d 12 	call	0x24da	; 0x24da <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
     664:	81 e4       	ldi	r24, 0x41	; 65
     666:	80 93 6e 03 	sts	0x036E, r24
	current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
     66a:	82 e2       	ldi	r24, 0x22	; 34
     66c:	80 93 f8 02 	sts	0x02F8, r24
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     670:	8e 01       	movw	r16, r28
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     672:	0f 2e       	mov	r0, r31
     674:	f0 e7       	ldi	r31, 0x70	; 112
     676:	ef 2e       	mov	r14, r31
     678:	f3 e0       	ldi	r31, 0x03	; 3
     67a:	ff 2e       	mov	r15, r31
     67c:	f0 2d       	mov	r31, r0
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     67e:	c8 01       	movw	r24, r16
     680:	0e 94 46 18 	call	0x308c	; 0x308c <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     684:	80 91 fd 01 	lds	r24, 0x01FD
     688:	90 91 fe 01 	lds	r25, 0x01FE
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	0e 94 24 02 	call	0x448	; 0x448 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     692:	0e 94 63 03 	call	0x6c6	; 0x6c6 <scan_pots>
		update_control_voltages();
     696:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     69a:	80 91 b0 02 	lds	r24, 0x02B0
     69e:	98 2f       	mov	r25, r24
     6a0:	9f 5f       	subi	r25, 0xFF	; 255
     6a2:	90 93 b0 02 	sts	0x02B0, r25
     6a6:	85 30       	cpi	r24, 0x05	; 5
     6a8:	51 f7       	brne	.-44     	; 0x67e <main+0xb4>
		{
			switch_timer = 0;
     6aa:	10 92 b0 02 	sts	0x02B0, r1
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     6ae:	f7 01       	movw	r30, r14
     6b0:	c0 81       	ld	r28, Z
     6b2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <read_switch_port>
     6b6:	8c 27       	eor	r24, r28
     6b8:	f7 01       	movw	r30, r14
     6ba:	80 83       	st	Z, r24
			update_spi();
     6bc:	0e 94 0c 06 	call	0xc18	; 0xc18 <update_spi>
			refresh_synth();
     6c0:	0e 94 01 0c 	call	0x1802	; 0x1802 <refresh_synth>
     6c4:	dc cf       	rjmp	.-72     	; 0x67e <main+0xb4>

000006c6 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     6c6:	9f 92       	push	r9
     6c8:	af 92       	push	r10
     6ca:	bf 92       	push	r11
     6cc:	cf 92       	push	r12
     6ce:	df 92       	push	r13
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	c0 e0       	ldi	r28, 0x00	; 0
     6de:	d1 e0       	ldi	r29, 0x01	; 1
     6e0:	09 eb       	ldi	r16, 0xB9	; 185
     6e2:	12 e0       	ldi	r17, 0x02	; 2
     6e4:	0f 2e       	mov	r0, r31
     6e6:	fc e3       	ldi	r31, 0x3C	; 60
     6e8:	af 2e       	mov	r10, r31
     6ea:	bb 24       	eor	r11, r11
     6ec:	f0 2d       	mov	r31, r0
     6ee:	ac 0e       	add	r10, r28
     6f0:	bd 1e       	adc	r11, r29
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     6f2:	0f 2e       	mov	r0, r31
     6f4:	fb ef       	ldi	r31, 0xFB	; 251
     6f6:	cf 2e       	mov	r12, r31
     6f8:	f2 e0       	ldi	r31, 0x02	; 2
     6fa:	df 2e       	mov	r13, r31
     6fc:	f0 2d       	mov	r31, r0
			
		} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) {
			
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     6fe:	99 24       	eor	r9, r9
     700:	68 94       	set
     702:	91 f8       	bld	r9, 1

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     704:	7e 01       	movw	r14, r28
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     706:	88 81       	ld	r24, Y
     708:	99 81       	ldd	r25, Y+1	; 0x01
     70a:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     70e:	90 93 b4 02 	sts	0x02B4, r25
     712:	80 93 b3 02 	sts	0x02B3, r24
		adc_change = adc_value - pot_id[i]->value;
     716:	e8 81       	ld	r30, Y
     718:	f9 81       	ldd	r31, Y+1	; 0x01
     71a:	40 81       	ld	r20, Z
     71c:	21 81       	ldd	r18, Z+1	; 0x01
     71e:	52 2f       	mov	r21, r18
     720:	53 70       	andi	r21, 0x03	; 3
     722:	84 1b       	sub	r24, r20
     724:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     726:	95 95       	asr	r25
     728:	87 95       	ror	r24
     72a:	95 95       	asr	r25
     72c:	87 95       	ror	r24
     72e:	84 0f       	add	r24, r20
     730:	95 1f       	adc	r25, r21
     732:	80 83       	st	Z, r24
     734:	89 2f       	mov	r24, r25
     736:	83 70       	andi	r24, 0x03	; 3
     738:	2c 7f       	andi	r18, 0xFC	; 252
     73a:	28 2b       	or	r18, r24
     73c:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     73e:	d6 01       	movw	r26, r12
     740:	8c 91       	ld	r24, X
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	29 f0       	breq	.+10     	; 0x750 <scan_pots+0x8a>
     746:	e8 81       	ld	r30, Y
     748:	f9 81       	ldd	r31, Y+1	; 0x01
     74a:	83 81       	ldd	r24, Z+3	; 0x03
     74c:	88 23       	and	r24, r24
     74e:	5c f0       	brlt	.+22     	; 0x766 <scan_pots+0xa0>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     750:	d7 01       	movw	r26, r14
     752:	ed 91       	ld	r30, X+
     754:	fc 91       	ld	r31, X
     756:	11 97       	sbiw	r26, 0x01	; 1
     758:	90 81       	ld	r25, Z
     75a:	81 81       	ldd	r24, Z+1	; 0x01
     75c:	83 70       	andi	r24, 0x03	; 3
     75e:	f8 01       	movw	r30, r16
     760:	90 83       	st	Z, r25
     762:	81 83       	std	Z+1, r24	; 0x01
     764:	17 c0       	rjmp	.+46     	; 0x794 <scan_pots+0xce>
			
		} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) {
     766:	20 81       	ld	r18, Z
     768:	81 81       	ldd	r24, Z+1	; 0x01
     76a:	38 2f       	mov	r19, r24
     76c:	33 70       	andi	r19, 0x03	; 3
     76e:	a9 01       	movw	r20, r18
     770:	55 95       	asr	r21
     772:	47 95       	ror	r20
     774:	55 95       	asr	r21
     776:	47 95       	ror	r20
     778:	82 81       	ldd	r24, Z+2	; 0x02
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	48 17       	cp	r20, r24
     77e:	59 07       	cpc	r21, r25
     780:	49 f0       	breq	.+18     	; 0x794 <scan_pots+0xce>
			
			*(patch_value + i) = pot_id[i]->value;
     782:	d8 01       	movw	r26, r16
     784:	11 96       	adiw	r26, 0x01	; 1
     786:	3c 93       	st	X, r19
     788:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     78a:	83 81       	ldd	r24, Z+3	; 0x03
     78c:	8f 77       	andi	r24, 0x7F	; 127
     78e:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     790:	f6 01       	movw	r30, r12
     792:	90 82       	st	Z, r9
     794:	22 96       	adiw	r28, 0x02	; 2
     796:	0e 5f       	subi	r16, 0xFE	; 254
     798:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     79a:	ca 15       	cp	r28, r10
     79c:	db 05       	cpc	r29, r11
     79e:	09 f0       	breq	.+2      	; 0x7a2 <scan_pots+0xdc>
     7a0:	b1 cf       	rjmp	.-158    	; 0x704 <scan_pots+0x3e>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     7a2:	8c e7       	ldi	r24, 0x7C	; 124
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     7aa:	90 93 b4 02 	sts	0x02B4, r25
     7ae:	80 93 b3 02 	sts	0x02B3, r24
	adc_change = adc_value - volume_pot.value;
     7b2:	20 91 7c 01 	lds	r18, 0x017C
     7b6:	40 91 7d 01 	lds	r20, 0x017D
     7ba:	34 2f       	mov	r19, r20
     7bc:	33 70       	andi	r19, 0x03	; 3
     7be:	82 1b       	sub	r24, r18
     7c0:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     7c2:	95 95       	asr	r25
     7c4:	87 95       	ror	r24
     7c6:	95 95       	asr	r25
     7c8:	87 95       	ror	r24
     7ca:	28 0f       	add	r18, r24
     7cc:	39 1f       	adc	r19, r25
     7ce:	20 93 7c 01 	sts	0x017C, r18
     7d2:	83 2f       	mov	r24, r19
     7d4:	83 70       	andi	r24, 0x03	; 3
     7d6:	4c 7f       	andi	r20, 0xFC	; 252
     7d8:	48 2b       	or	r20, r24
     7da:	40 93 7d 01 	sts	0x017D, r20
	
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	08 95       	ret

000007f6 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     7fa:	60 91 b9 02 	lds	r22, 0x02B9
     7fe:	70 91 ba 02 	lds	r23, 0x02BA
     802:	62 95       	swap	r22
     804:	72 95       	swap	r23
     806:	70 7f       	andi	r23, 0xF0	; 240
     808:	76 27       	eor	r23, r22
     80a:	60 7f       	andi	r22, 0xF0	; 240
     80c:	76 27       	eor	r23, r22
     80e:	84 ee       	ldi	r24, 0xE4	; 228
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     816:	60 91 bb 02 	lds	r22, 0x02BB
     81a:	70 91 bc 02 	lds	r23, 0x02BC
     81e:	62 95       	swap	r22
     820:	72 95       	swap	r23
     822:	70 7f       	andi	r23, 0xF0	; 240
     824:	76 27       	eor	r23, r22
     826:	60 7f       	andi	r22, 0xF0	; 240
     828:	76 27       	eor	r23, r22
     82a:	83 ee       	ldi	r24, 0xE3	; 227
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     832:	60 91 bd 02 	lds	r22, 0x02BD
     836:	70 91 be 02 	lds	r23, 0x02BE
     83a:	66 0f       	add	r22, r22
     83c:	77 1f       	adc	r23, r23
     83e:	66 0f       	add	r22, r22
     840:	77 1f       	adc	r23, r23
     842:	66 0f       	add	r22, r22
     844:	77 1f       	adc	r23, r23
     846:	82 ee       	ldi	r24, 0xE2	; 226
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     84e:	60 91 bf 02 	lds	r22, 0x02BF
     852:	70 91 c0 02 	lds	r23, 0x02C0
     856:	62 95       	swap	r22
     858:	72 95       	swap	r23
     85a:	70 7f       	andi	r23, 0xF0	; 240
     85c:	76 27       	eor	r23, r22
     85e:	60 7f       	andi	r22, 0xF0	; 240
     860:	76 27       	eor	r23, r22
     862:	8a ea       	ldi	r24, 0xAA	; 170
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     86a:	60 91 c1 02 	lds	r22, 0x02C1
     86e:	70 91 c2 02 	lds	r23, 0x02C2
     872:	66 0f       	add	r22, r22
     874:	77 1f       	adc	r23, r23
     876:	66 0f       	add	r22, r22
     878:	77 1f       	adc	r23, r23
     87a:	66 0f       	add	r22, r22
     87c:	77 1f       	adc	r23, r23
     87e:	81 ee       	ldi	r24, 0xE1	; 225
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     886:	60 91 c3 02 	lds	r22, 0x02C3
     88a:	70 91 c4 02 	lds	r23, 0x02C4
     88e:	62 95       	swap	r22
     890:	72 95       	swap	r23
     892:	70 7f       	andi	r23, 0xF0	; 240
     894:	76 27       	eor	r23, r22
     896:	60 7f       	andi	r22, 0xF0	; 240
     898:	76 27       	eor	r23, r22
     89a:	80 ee       	ldi	r24, 0xE0	; 224
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     8a2:	60 91 c5 02 	lds	r22, 0x02C5
     8a6:	70 91 c6 02 	lds	r23, 0x02C6
     8aa:	62 95       	swap	r22
     8ac:	72 95       	swap	r23
     8ae:	70 7f       	andi	r23, 0xF0	; 240
     8b0:	76 27       	eor	r23, r22
     8b2:	60 7f       	andi	r22, 0xF0	; 240
     8b4:	76 27       	eor	r23, r22
     8b6:	8f ed       	ldi	r24, 0xDF	; 223
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     8be:	60 91 c7 02 	lds	r22, 0x02C7
     8c2:	70 91 c8 02 	lds	r23, 0x02C8
     8c6:	62 95       	swap	r22
     8c8:	72 95       	swap	r23
     8ca:	70 7f       	andi	r23, 0xF0	; 240
     8cc:	76 27       	eor	r23, r22
     8ce:	60 7f       	andi	r22, 0xF0	; 240
     8d0:	76 27       	eor	r23, r22
     8d2:	8e ed       	ldi	r24, 0xDE	; 222
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     8da:	80 91 cb 02 	lds	r24, 0x02CB
     8de:	90 91 cc 02 	lds	r25, 0x02CC
     8e2:	c0 e0       	ldi	r28, 0x00	; 0
     8e4:	d2 e0       	ldi	r29, 0x02	; 2
     8e6:	c8 1b       	sub	r28, r24
     8e8:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     8ea:	60 91 63 03 	lds	r22, 0x0363
     8ee:	70 91 64 03 	lds	r23, 0x0364
     8f2:	60 50       	subi	r22, 0x00	; 0
     8f4:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     8f6:	80 91 c9 02 	lds	r24, 0x02C9
     8fa:	90 91 ca 02 	lds	r25, 0x02CA
     8fe:	68 1b       	sub	r22, r24
     900:	79 0b       	sbc	r23, r25
     902:	6c 0f       	add	r22, r28
     904:	7d 1f       	adc	r23, r29
     906:	8d ed       	ldi	r24, 0xDD	; 221
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     90e:	60 91 65 03 	lds	r22, 0x0365
     912:	70 91 66 03 	lds	r23, 0x0366
     916:	6c 0f       	add	r22, r28
     918:	7d 1f       	adc	r23, r29
     91a:	8c ed       	ldi	r24, 0xDC	; 220
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     922:	60 91 cd 02 	lds	r22, 0x02CD
     926:	70 91 ce 02 	lds	r23, 0x02CE
     92a:	62 95       	swap	r22
     92c:	72 95       	swap	r23
     92e:	70 7f       	andi	r23, 0xF0	; 240
     930:	76 27       	eor	r23, r22
     932:	60 7f       	andi	r22, 0xF0	; 240
     934:	76 27       	eor	r23, r22
     936:	8b ed       	ldi	r24, 0xDB	; 219
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     93e:	60 91 d1 02 	lds	r22, 0x02D1
     942:	70 91 d2 02 	lds	r23, 0x02D2
     946:	62 95       	swap	r22
     948:	72 95       	swap	r23
     94a:	70 7f       	andi	r23, 0xF0	; 240
     94c:	76 27       	eor	r23, r22
     94e:	60 7f       	andi	r22, 0xF0	; 240
     950:	76 27       	eor	r23, r22
     952:	8a ed       	ldi	r24, 0xDA	; 218
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     95a:	60 91 d3 02 	lds	r22, 0x02D3
     95e:	70 91 d4 02 	lds	r23, 0x02D4
     962:	62 95       	swap	r22
     964:	72 95       	swap	r23
     966:	70 7f       	andi	r23, 0xF0	; 240
     968:	76 27       	eor	r23, r22
     96a:	60 7f       	andi	r22, 0xF0	; 240
     96c:	76 27       	eor	r23, r22
     96e:	89 ed       	ldi	r24, 0xD9	; 217
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     976:	60 91 7c 01 	lds	r22, 0x017C
     97a:	80 91 7d 01 	lds	r24, 0x017D
     97e:	78 2f       	mov	r23, r24
     980:	73 70       	andi	r23, 0x03	; 3
     982:	62 95       	swap	r22
     984:	72 95       	swap	r23
     986:	70 7f       	andi	r23, 0xF0	; 240
     988:	76 27       	eor	r23, r22
     98a:	60 7f       	andi	r22, 0xF0	; 240
     98c:	76 27       	eor	r23, r22
     98e:	88 ed       	ldi	r24, 0xD8	; 216
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     996:	60 91 d5 02 	lds	r22, 0x02D5
     99a:	70 91 d6 02 	lds	r23, 0x02D6
     99e:	62 95       	swap	r22
     9a0:	72 95       	swap	r23
     9a2:	70 7f       	andi	r23, 0xF0	; 240
     9a4:	76 27       	eor	r23, r22
     9a6:	60 7f       	andi	r22, 0xF0	; 240
     9a8:	76 27       	eor	r23, r22
     9aa:	87 ed       	ldi	r24, 0xD7	; 215
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     9b2:	60 91 d7 02 	lds	r22, 0x02D7
     9b6:	70 91 d8 02 	lds	r23, 0x02D8
     9ba:	62 95       	swap	r22
     9bc:	72 95       	swap	r23
     9be:	70 7f       	andi	r23, 0xF0	; 240
     9c0:	76 27       	eor	r23, r22
     9c2:	60 7f       	andi	r22, 0xF0	; 240
     9c4:	76 27       	eor	r23, r22
     9c6:	86 ed       	ldi	r24, 0xD6	; 214
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     9ce:	60 91 d9 02 	lds	r22, 0x02D9
     9d2:	70 91 da 02 	lds	r23, 0x02DA
     9d6:	62 95       	swap	r22
     9d8:	72 95       	swap	r23
     9da:	70 7f       	andi	r23, 0xF0	; 240
     9dc:	76 27       	eor	r23, r22
     9de:	60 7f       	andi	r22, 0xF0	; 240
     9e0:	76 27       	eor	r23, r22
     9e2:	85 ed       	ldi	r24, 0xD5	; 213
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     9ea:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     9ee:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     9f0:	88 30       	cpi	r24, 0x08	; 8
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <update_control_voltages+0x200>
     9f4:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = note;
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     9f6:	8c 2f       	mov	r24, r28
     9f8:	88 50       	subi	r24, 0x08	; 8
     9fa:	6f ef       	ldi	r22, 0xFF	; 255
     9fc:	72 e0       	ldi	r23, 0x02	; 2
     9fe:	0e 94 96 12 	call	0x252c	; 0x252c <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     a02:	bc 01       	movw	r22, r24
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	20 91 dd 02 	lds	r18, 0x02DD
     a0c:	30 91 de 02 	lds	r19, 0x02DE
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	0e 94 20 1a 	call	0x3440	; 0x3440 <__mulsi3>
     a18:	dc 01       	movw	r26, r24
     a1a:	cb 01       	movw	r24, r22
     a1c:	07 2e       	mov	r0, r23
     a1e:	7a e0       	ldi	r23, 0x0A	; 10
     a20:	b6 95       	lsr	r27
     a22:	a7 95       	ror	r26
     a24:	97 95       	ror	r25
     a26:	87 95       	ror	r24
     a28:	7a 95       	dec	r23
     a2a:	d1 f7       	brne	.-12     	; 0xa20 <update_control_voltages+0x22a>
     a2c:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     a2e:	60 91 db 02 	lds	r22, 0x02DB
     a32:	70 91 dc 02 	lds	r23, 0x02DC
     a36:	62 95       	swap	r22
     a38:	72 95       	swap	r23
     a3a:	70 7f       	andi	r23, 0xF0	; 240
     a3c:	76 27       	eor	r23, r22
     a3e:	60 7f       	andi	r22, 0xF0	; 240
     a40:	76 27       	eor	r23, r22
     a42:	86 0f       	add	r24, r22
     a44:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     a46:	bc 01       	movw	r22, r24
     a48:	80 e4       	ldi	r24, 0x40	; 64
     a4a:	60 30       	cpi	r22, 0x00	; 0
     a4c:	78 07       	cpc	r23, r24
     a4e:	10 f0       	brcs	.+4      	; 0xa54 <update_control_voltages+0x25e>
     a50:	6f ef       	ldi	r22, 0xFF	; 255
     a52:	7f e3       	ldi	r23, 0x3F	; 63
     a54:	84 ed       	ldi	r24, 0xD4	; 212
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     a5c:	60 91 df 02 	lds	r22, 0x02DF
     a60:	70 91 e0 02 	lds	r23, 0x02E0
     a64:	62 95       	swap	r22
     a66:	72 95       	swap	r23
     a68:	70 7f       	andi	r23, 0xF0	; 240
     a6a:	76 27       	eor	r23, r22
     a6c:	60 7f       	andi	r22, 0xF0	; 240
     a6e:	76 27       	eor	r23, r22
     a70:	82 ed       	ldi	r24, 0xD2	; 210
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     a78:	60 91 e1 02 	lds	r22, 0x02E1
     a7c:	70 91 e2 02 	lds	r23, 0x02E2
     a80:	62 95       	swap	r22
     a82:	72 95       	swap	r23
     a84:	70 7f       	andi	r23, 0xF0	; 240
     a86:	76 27       	eor	r23, r22
     a88:	60 7f       	andi	r22, 0xF0	; 240
     a8a:	76 27       	eor	r23, r22
     a8c:	81 ed       	ldi	r24, 0xD1	; 209
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     a94:	60 91 e3 02 	lds	r22, 0x02E3
     a98:	70 91 e4 02 	lds	r23, 0x02E4
     a9c:	62 95       	swap	r22
     a9e:	72 95       	swap	r23
     aa0:	70 7f       	andi	r23, 0xF0	; 240
     aa2:	76 27       	eor	r23, r22
     aa4:	60 7f       	andi	r22, 0xF0	; 240
     aa6:	76 27       	eor	r23, r22
     aa8:	80 ed       	ldi	r24, 0xD0	; 208
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     ab0:	60 91 e5 02 	lds	r22, 0x02E5
     ab4:	70 91 e6 02 	lds	r23, 0x02E6
     ab8:	62 95       	swap	r22
     aba:	72 95       	swap	r23
     abc:	70 7f       	andi	r23, 0xF0	; 240
     abe:	76 27       	eor	r23, r22
     ac0:	60 7f       	andi	r22, 0xF0	; 240
     ac2:	76 27       	eor	r23, r22
     ac4:	8f ec       	ldi	r24, 0xCF	; 207
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     acc:	60 91 e7 02 	lds	r22, 0x02E7
     ad0:	70 91 e8 02 	lds	r23, 0x02E8
     ad4:	62 95       	swap	r22
     ad6:	72 95       	swap	r23
     ad8:	70 7f       	andi	r23, 0xF0	; 240
     ada:	76 27       	eor	r23, r22
     adc:	60 7f       	andi	r22, 0xF0	; 240
     ade:	76 27       	eor	r23, r22
     ae0:	8e ec       	ldi	r24, 0xCE	; 206
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     ae8:	60 91 e9 02 	lds	r22, 0x02E9
     aec:	70 91 ea 02 	lds	r23, 0x02EA
     af0:	62 95       	swap	r22
     af2:	72 95       	swap	r23
     af4:	70 7f       	andi	r23, 0xF0	; 240
     af6:	76 27       	eor	r23, r22
     af8:	60 7f       	andi	r22, 0xF0	; 240
     afa:	76 27       	eor	r23, r22
     afc:	8d ec       	ldi	r24, 0xCD	; 205
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     b04:	60 91 eb 02 	lds	r22, 0x02EB
     b08:	70 91 ec 02 	lds	r23, 0x02EC
     b0c:	62 95       	swap	r22
     b0e:	72 95       	swap	r23
     b10:	70 7f       	andi	r23, 0xF0	; 240
     b12:	76 27       	eor	r23, r22
     b14:	60 7f       	andi	r22, 0xF0	; 240
     b16:	76 27       	eor	r23, r22
     b18:	8c ec       	ldi	r24, 0xCC	; 204
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     b20:	60 91 ef 02 	lds	r22, 0x02EF
     b24:	70 91 f0 02 	lds	r23, 0x02F0
     b28:	62 95       	swap	r22
     b2a:	72 95       	swap	r23
     b2c:	70 7f       	andi	r23, 0xF0	; 240
     b2e:	76 27       	eor	r23, r22
     b30:	60 7f       	andi	r22, 0xF0	; 240
     b32:	76 27       	eor	r23, r22
     b34:	8a ec       	ldi	r24, 0xCA	; 202
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     b3c:	60 91 ed 02 	lds	r22, 0x02ED
     b40:	70 91 ee 02 	lds	r23, 0x02EE
     b44:	62 95       	swap	r22
     b46:	72 95       	swap	r23
     b48:	70 7f       	andi	r23, 0xF0	; 240
     b4a:	76 27       	eor	r23, r22
     b4c:	60 7f       	andi	r22, 0xF0	; 240
     b4e:	76 27       	eor	r23, r22
     b50:	8b ec       	ldi	r24, 0xCB	; 203
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     b58:	60 91 f3 02 	lds	r22, 0x02F3
     b5c:	70 91 f4 02 	lds	r23, 0x02F4
     b60:	62 95       	swap	r22
     b62:	72 95       	swap	r23
     b64:	70 7f       	andi	r23, 0xF0	; 240
     b66:	76 27       	eor	r23, r22
     b68:	60 7f       	andi	r22, 0xF0	; 240
     b6a:	76 27       	eor	r23, r22
     b6c:	88 ec       	ldi	r24, 0xC8	; 200
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     b74:	60 91 f1 02 	lds	r22, 0x02F1
     b78:	70 91 f2 02 	lds	r23, 0x02F2
     b7c:	62 95       	swap	r22
     b7e:	72 95       	swap	r23
     b80:	70 7f       	andi	r23, 0xF0	; 240
     b82:	76 27       	eor	r23, r22
     b84:	60 7f       	andi	r22, 0xF0	; 240
     b86:	76 27       	eor	r23, r22
     b88:	89 ec       	ldi	r24, 0xC9	; 201
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     b90:	8c 2f       	mov	r24, r28
     b92:	6f e0       	ldi	r22, 0x0F	; 15
     b94:	0e 94 20 0b 	call	0x1640	; 0x1640 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     b98:	61 e4       	ldi	r22, 0x41	; 65
     b9a:	73 e0       	ldi	r23, 0x03	; 3
     b9c:	0e 94 96 12 	call	0x252c	; 0x252c <interpolate_pitch_cv>
     ba0:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     ba2:	86 ee       	ldi	r24, 0xE6	; 230
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     baa:	8c 2f       	mov	r24, r28
     bac:	60 ef       	ldi	r22, 0xF0	; 240
     bae:	0e 94 20 0b 	call	0x1640	; 0x1640 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     bb2:	6f e1       	ldi	r22, 0x1F	; 31
     bb4:	73 e0       	ldi	r23, 0x03	; 3
     bb6:	0e 94 96 12 	call	0x252c	; 0x252c <interpolate_pitch_cv>
     bba:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     bbc:	85 ee       	ldi	r24, 0xE5	; 229
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     bc4:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     bc6:	a1 9a       	sbi	0x14, 1	; 20
}			
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     bce:	84 b1       	in	r24, 0x04	; 4
     bd0:	87 62       	ori	r24, 0x27	; 39
     bd2:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     bd4:	ec ed       	ldi	r30, 0xDC	; 220
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8c 65       	ori	r24, 0x5C	; 92
     bdc:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     bde:	85 b1       	in	r24, 0x05	; 5
     be0:	89 7d       	andi	r24, 0xD9	; 217
     be2:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     be4:	ed ed       	ldi	r30, 0xDD	; 221
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	83 7f       	andi	r24, 0xF3	; 243
     bec:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     bee:	80 e5       	ldi	r24, 0x50	; 80
     bf0:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     bf2:	80 81       	ld	r24, Z
     bf4:	87 7f       	andi	r24, 0xF7	; 247
     bf6:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     bf8:	80 81       	ld	r24, Z
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     bfe:	80 81       	ld	r24, Z
     c00:	88 60       	ori	r24, 0x08	; 8
     c02:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     c04:	80 81       	ld	r24, Z
     c06:	8f 7e       	andi	r24, 0xEF	; 239
     c08:	80 83       	st	Z, r24
	
}
     c0a:	08 95       	ret

00000c0c <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     c0c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     c0e:	0d b4       	in	r0, 0x2d	; 45
     c10:	07 fe       	sbrs	r0, 7
     c12:	fd cf       	rjmp	.-6      	; 0xc0e <spi_shift_byte+0x2>
	return SPDR;
     c14:	8e b5       	in	r24, 0x2e	; 46
	
}
     c16:	08 95       	ret

00000c18 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     c18:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     c1a:	80 91 f9 02 	lds	r24, 0x02F9
     c1e:	0e 94 06 06 	call	0xc0c	; 0xc0c <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     c22:	90 91 b7 02 	lds	r25, 0x02B7
     c26:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     c28:	98 27       	eor	r25, r24
     c2a:	90 93 b7 02 	sts	0x02B7, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     c2e:	98 23       	and	r25, r24
     c30:	90 93 b8 02 	sts	0x02B8, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     c34:	80 91 6e 03 	lds	r24, 0x036E
     c38:	98 27       	eor	r25, r24
     c3a:	90 93 6e 03 	sts	0x036E, r25
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     c3e:	80 91 f8 02 	lds	r24, 0x02F8
     c42:	0e 94 06 06 	call	0xc0c	; 0xc0c <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     c46:	90 91 b5 02 	lds	r25, 0x02B5
     c4a:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     c4c:	98 27       	eor	r25, r24
     c4e:	90 93 b5 02 	sts	0x02B5, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     c52:	98 23       	and	r25, r24
     c54:	90 93 b6 02 	sts	0x02B6, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     c58:	80 91 6f 03 	lds	r24, 0x036F
     c5c:	98 27       	eor	r25, r24
     c5e:	90 93 6f 03 	sts	0x036F, r25
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     c62:	80 91 f7 02 	lds	r24, 0x02F7
     c66:	0e 94 06 06 	call	0xc0c	; 0xc0c <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     c6a:	80 91 f6 02 	lds	r24, 0x02F6
     c6e:	0e 94 06 06 	call	0xc0c	; 0xc0c <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     c72:	90 91 70 03 	lds	r25, 0x0370
     c76:	29 2f       	mov	r18, r25
     c78:	22 95       	swap	r18
     c7a:	2f 70       	andi	r18, 0x0F	; 15
     c7c:	27 95       	ror	r18
     c7e:	22 27       	eor	r18, r18
     c80:	27 95       	ror	r18

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     c82:	89 2f       	mov	r24, r25
     c84:	86 95       	lsr	r24
     c86:	86 95       	lsr	r24
     c88:	86 95       	lsr	r24
     c8a:	81 70       	andi	r24, 0x01	; 1
     c8c:	82 2b       	or	r24, r18
     c8e:	40 91 6f 03 	lds	r20, 0x036F
     c92:	42 95       	swap	r20
     c94:	46 95       	lsr	r20
     c96:	47 70       	andi	r20, 0x07	; 7
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	41 70       	andi	r20, 0x01	; 1
     c9c:	50 70       	andi	r21, 0x00	; 0
     c9e:	9a 01       	movw	r18, r20
     ca0:	22 0f       	add	r18, r18
     ca2:	33 1f       	adc	r19, r19
     ca4:	22 0f       	add	r18, r18
     ca6:	33 1f       	adc	r19, r19
     ca8:	28 2b       	or	r18, r24
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     caa:	99 1f       	adc	r25, r25
     cac:	99 27       	eor	r25, r25
     cae:	99 1f       	adc	r25, r25
     cb0:	89 2f       	mov	r24, r25
     cb2:	82 95       	swap	r24
     cb4:	88 0f       	add	r24, r24
     cb6:	88 0f       	add	r24, r24
     cb8:	80 7c       	andi	r24, 0xC0	; 192
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     cba:	82 2b       	or	r24, r18
     cbc:	0e 94 06 06 	call	0xc0c	; 0xc0c <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     cc0:	ed ed       	ldi	r30, 0xDD	; 221
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	87 7f       	andi	r24, 0xF7	; 247
     cc8:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     cca:	80 81       	ld	r24, Z
     ccc:	88 60       	ori	r24, 0x08	; 8
     cce:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     cd0:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     cd2:	08 95       	ret

00000cd4 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     cd4:	a0 e0       	ldi	r26, 0x00	; 0
     cd6:	b1 e0       	ldi	r27, 0x01	; 1
     cd8:	9d 01       	movw	r18, r26
     cda:	24 5c       	subi	r18, 0xC4	; 196
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= 29; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     cde:	ed 91       	ld	r30, X+
     ce0:	fc 91       	ld	r31, X
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	80 81       	ld	r24, Z
     ce6:	41 81       	ldd	r20, Z+1	; 0x01
     ce8:	94 2f       	mov	r25, r20
     cea:	93 70       	andi	r25, 0x03	; 3
     cec:	95 95       	asr	r25
     cee:	87 95       	ror	r24
     cf0:	95 95       	asr	r25
     cf2:	87 95       	ror	r24
     cf4:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     cf6:	ed 91       	ld	r30, X+
     cf8:	fd 91       	ld	r31, X+
     cfa:	83 81       	ldd	r24, Z+3	; 0x03
     cfc:	80 68       	ori	r24, 0x80	; 128
     cfe:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= 29; i++) {
     d00:	a2 17       	cp	r26, r18
     d02:	b3 07       	cpc	r27, r19
     d04:	61 f7       	brne	.-40     	; 0xcde <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}		
     d06:	08 95       	ret

00000d08 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	ab 97       	sbiw	r28, 0x2b	; 43
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     d20:	e5 ed       	ldi	r30, 0xD5	; 213
     d22:	f2 e0       	ldi	r31, 0x02	; 2
     d24:	20 91 d5 02 	lds	r18, 0x02D5
     d28:	82 2f       	mov	r24, r18
     d2a:	82 95       	swap	r24
     d2c:	80 7f       	andi	r24, 0xF0	; 240
     d2e:	22 95       	swap	r18
     d30:	2f 70       	andi	r18, 0x0F	; 15
     d32:	90 91 d6 02 	lds	r25, 0x02D6
     d36:	93 70       	andi	r25, 0x03	; 3
     d38:	92 95       	swap	r25
     d3a:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     d3c:	df 01       	movw	r26, r30
     d3e:	5a 97       	sbiw	r26, 0x1a	; 26
     d40:	3c 91       	ld	r19, X
     d42:	53 2f       	mov	r21, r19
     d44:	55 0f       	add	r21, r21
     d46:	55 0f       	add	r21, r21
     d48:	4a 81       	ldd	r20, Y+2	; 0x02
     d4a:	43 70       	andi	r20, 0x03	; 3
     d4c:	45 2b       	or	r20, r21
     d4e:	4a 83       	std	Y+2, r20	; 0x02
     d50:	63 2f       	mov	r22, r19
     d52:	62 95       	swap	r22
     d54:	66 95       	lsr	r22
     d56:	66 95       	lsr	r22
     d58:	63 70       	andi	r22, 0x03	; 3
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	4c 91       	ld	r20, X
     d5e:	43 70       	andi	r20, 0x03	; 3
     d60:	44 0f       	add	r20, r20
     d62:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     d64:	df 01       	movw	r26, r30
     d66:	58 97       	sbiw	r26, 0x18	; 24
     d68:	3c 91       	ld	r19, X
     d6a:	53 2f       	mov	r21, r19
     d6c:	52 95       	swap	r21
     d6e:	50 7f       	andi	r21, 0xF0	; 240
     d70:	46 2b       	or	r20, r22
     d72:	45 2b       	or	r20, r21
     d74:	4b 83       	std	Y+3, r20	; 0x03
     d76:	63 2f       	mov	r22, r19
     d78:	62 95       	swap	r22
     d7a:	6f 70       	andi	r22, 0x0F	; 15
     d7c:	11 96       	adiw	r26, 0x01	; 1
     d7e:	4c 91       	ld	r20, X
     d80:	43 70       	andi	r20, 0x03	; 3
     d82:	42 95       	swap	r20
     d84:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     d86:	df 01       	movw	r26, r30
     d88:	56 97       	sbiw	r26, 0x16	; 22
     d8a:	3c 91       	ld	r19, X
     d8c:	53 2f       	mov	r21, r19
     d8e:	52 95       	swap	r21
     d90:	55 0f       	add	r21, r21
     d92:	55 0f       	add	r21, r21
     d94:	50 7c       	andi	r21, 0xC0	; 192
     d96:	46 2b       	or	r20, r22
     d98:	45 2b       	or	r20, r21
     d9a:	4c 83       	std	Y+4, r20	; 0x04
     d9c:	11 96       	adiw	r26, 0x01	; 1
     d9e:	4c 91       	ld	r20, X
     da0:	42 95       	swap	r20
     da2:	44 0f       	add	r20, r20
     da4:	44 0f       	add	r20, r20
     da6:	40 7c       	andi	r20, 0xC0	; 192
     da8:	36 95       	lsr	r19
     daa:	36 95       	lsr	r19
     dac:	34 2b       	or	r19, r20
     dae:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     db0:	df 01       	movw	r26, r30
     db2:	54 97       	sbiw	r26, 0x14	; 20
     db4:	3c 91       	ld	r19, X
     db6:	3e 83       	std	Y+6, r19	; 0x06
     db8:	11 96       	adiw	r26, 0x01	; 1
     dba:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     dbc:	df 01       	movw	r26, r30
     dbe:	52 97       	sbiw	r26, 0x12	; 18
     dc0:	3c 91       	ld	r19, X
     dc2:	53 2f       	mov	r21, r19
     dc4:	55 0f       	add	r21, r21
     dc6:	55 0f       	add	r21, r21
     dc8:	43 70       	andi	r20, 0x03	; 3
     dca:	45 2b       	or	r20, r21
     dcc:	4f 83       	std	Y+7, r20	; 0x07
     dce:	63 2f       	mov	r22, r19
     dd0:	62 95       	swap	r22
     dd2:	66 95       	lsr	r22
     dd4:	66 95       	lsr	r22
     dd6:	63 70       	andi	r22, 0x03	; 3
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	4c 91       	ld	r20, X
     ddc:	43 70       	andi	r20, 0x03	; 3
     dde:	44 0f       	add	r20, r20
     de0:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     de2:	df 01       	movw	r26, r30
     de4:	50 97       	sbiw	r26, 0x10	; 16
     de6:	3c 91       	ld	r19, X
     de8:	53 2f       	mov	r21, r19
     dea:	52 95       	swap	r21
     dec:	50 7f       	andi	r21, 0xF0	; 240
     dee:	46 2b       	or	r20, r22
     df0:	45 2b       	or	r20, r21
     df2:	48 87       	std	Y+8, r20	; 0x08
     df4:	63 2f       	mov	r22, r19
     df6:	62 95       	swap	r22
     df8:	6f 70       	andi	r22, 0x0F	; 15
     dfa:	11 96       	adiw	r26, 0x01	; 1
     dfc:	4c 91       	ld	r20, X
     dfe:	43 70       	andi	r20, 0x03	; 3
     e00:	42 95       	swap	r20
     e02:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     e04:	df 01       	movw	r26, r30
     e06:	1e 97       	sbiw	r26, 0x0e	; 14
     e08:	3c 91       	ld	r19, X
     e0a:	53 2f       	mov	r21, r19
     e0c:	52 95       	swap	r21
     e0e:	55 0f       	add	r21, r21
     e10:	55 0f       	add	r21, r21
     e12:	50 7c       	andi	r21, 0xC0	; 192
     e14:	46 2b       	or	r20, r22
     e16:	45 2b       	or	r20, r21
     e18:	49 87       	std	Y+9, r20	; 0x09
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	4c 91       	ld	r20, X
     e1e:	42 95       	swap	r20
     e20:	44 0f       	add	r20, r20
     e22:	44 0f       	add	r20, r20
     e24:	40 7c       	andi	r20, 0xC0	; 192
     e26:	36 95       	lsr	r19
     e28:	36 95       	lsr	r19
     e2a:	34 2b       	or	r19, r20
     e2c:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     e2e:	df 01       	movw	r26, r30
     e30:	1c 97       	sbiw	r26, 0x0c	; 12
     e32:	3c 91       	ld	r19, X
     e34:	3b 87       	std	Y+11, r19	; 0x0b
     e36:	11 96       	adiw	r26, 0x01	; 1
     e38:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     e3a:	df 01       	movw	r26, r30
     e3c:	1a 97       	sbiw	r26, 0x0a	; 10
     e3e:	3c 91       	ld	r19, X
     e40:	53 2f       	mov	r21, r19
     e42:	55 0f       	add	r21, r21
     e44:	55 0f       	add	r21, r21
     e46:	43 70       	andi	r20, 0x03	; 3
     e48:	45 2b       	or	r20, r21
     e4a:	4c 87       	std	Y+12, r20	; 0x0c
     e4c:	63 2f       	mov	r22, r19
     e4e:	62 95       	swap	r22
     e50:	66 95       	lsr	r22
     e52:	66 95       	lsr	r22
     e54:	63 70       	andi	r22, 0x03	; 3
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	4c 91       	ld	r20, X
     e5a:	43 70       	andi	r20, 0x03	; 3
     e5c:	44 0f       	add	r20, r20
     e5e:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
     e60:	df 01       	movw	r26, r30
     e62:	18 97       	sbiw	r26, 0x08	; 8
     e64:	3c 91       	ld	r19, X
     e66:	53 2f       	mov	r21, r19
     e68:	52 95       	swap	r21
     e6a:	50 7f       	andi	r21, 0xF0	; 240
     e6c:	46 2b       	or	r20, r22
     e6e:	45 2b       	or	r20, r21
     e70:	4d 87       	std	Y+13, r20	; 0x0d
     e72:	63 2f       	mov	r22, r19
     e74:	62 95       	swap	r22
     e76:	6f 70       	andi	r22, 0x0F	; 15
     e78:	11 96       	adiw	r26, 0x01	; 1
     e7a:	4c 91       	ld	r20, X
     e7c:	43 70       	andi	r20, 0x03	; 3
     e7e:	42 95       	swap	r20
     e80:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
     e82:	df 01       	movw	r26, r30
     e84:	16 97       	sbiw	r26, 0x06	; 6
     e86:	3c 91       	ld	r19, X
     e88:	53 2f       	mov	r21, r19
     e8a:	52 95       	swap	r21
     e8c:	55 0f       	add	r21, r21
     e8e:	55 0f       	add	r21, r21
     e90:	50 7c       	andi	r21, 0xC0	; 192
     e92:	46 2b       	or	r20, r22
     e94:	45 2b       	or	r20, r21
     e96:	4e 87       	std	Y+14, r20	; 0x0e
     e98:	11 96       	adiw	r26, 0x01	; 1
     e9a:	4c 91       	ld	r20, X
     e9c:	42 95       	swap	r20
     e9e:	44 0f       	add	r20, r20
     ea0:	44 0f       	add	r20, r20
     ea2:	40 7c       	andi	r20, 0xC0	; 192
     ea4:	36 95       	lsr	r19
     ea6:	36 95       	lsr	r19
     ea8:	34 2b       	or	r19, r20
     eaa:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
     eac:	df 01       	movw	r26, r30
     eae:	14 97       	sbiw	r26, 0x04	; 4
     eb0:	3c 91       	ld	r19, X
     eb2:	38 8b       	std	Y+16, r19	; 0x10
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
     eb8:	df 01       	movw	r26, r30
     eba:	12 97       	sbiw	r26, 0x02	; 2
     ebc:	3c 91       	ld	r19, X
     ebe:	53 2f       	mov	r21, r19
     ec0:	55 0f       	add	r21, r21
     ec2:	55 0f       	add	r21, r21
     ec4:	43 70       	andi	r20, 0x03	; 3
     ec6:	45 2b       	or	r20, r21
     ec8:	49 8b       	std	Y+17, r20	; 0x11
     eca:	32 95       	swap	r19
     ecc:	36 95       	lsr	r19
     ece:	36 95       	lsr	r19
     ed0:	33 70       	andi	r19, 0x03	; 3
     ed2:	11 96       	adiw	r26, 0x01	; 1
     ed4:	4c 91       	ld	r20, X
     ed6:	43 70       	andi	r20, 0x03	; 3
     ed8:	44 0f       	add	r20, r20
     eda:	44 0f       	add	r20, r20
     edc:	83 2b       	or	r24, r19
     ede:	84 2b       	or	r24, r20
     ee0:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
     ee2:	80 91 d7 02 	lds	r24, 0x02D7
     ee6:	38 2f       	mov	r19, r24
     ee8:	32 95       	swap	r19
     eea:	33 0f       	add	r19, r19
     eec:	33 0f       	add	r19, r19
     eee:	30 7c       	andi	r19, 0xC0	; 192
     ef0:	92 2b       	or	r25, r18
     ef2:	93 2b       	or	r25, r19
     ef4:	9b 8b       	std	Y+19, r25	; 0x13
     ef6:	93 81       	ldd	r25, Z+3	; 0x03
     ef8:	92 95       	swap	r25
     efa:	99 0f       	add	r25, r25
     efc:	99 0f       	add	r25, r25
     efe:	90 7c       	andi	r25, 0xC0	; 192
     f00:	86 95       	lsr	r24
     f02:	86 95       	lsr	r24
     f04:	89 2b       	or	r24, r25
     f06:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
     f08:	80 91 d9 02 	lds	r24, 0x02D9
     f0c:	8d 8b       	std	Y+21, r24	; 0x15
     f0e:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
     f10:	80 91 db 02 	lds	r24, 0x02DB
     f14:	28 2f       	mov	r18, r24
     f16:	22 0f       	add	r18, r18
     f18:	22 0f       	add	r18, r18
     f1a:	93 70       	andi	r25, 0x03	; 3
     f1c:	92 2b       	or	r25, r18
     f1e:	9e 8b       	std	Y+22, r25	; 0x16
     f20:	38 2f       	mov	r19, r24
     f22:	32 95       	swap	r19
     f24:	36 95       	lsr	r19
     f26:	36 95       	lsr	r19
     f28:	33 70       	andi	r19, 0x03	; 3
     f2a:	97 81       	ldd	r25, Z+7	; 0x07
     f2c:	93 70       	andi	r25, 0x03	; 3
     f2e:	99 0f       	add	r25, r25
     f30:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
     f32:	80 91 dd 02 	lds	r24, 0x02DD
     f36:	28 2f       	mov	r18, r24
     f38:	22 95       	swap	r18
     f3a:	20 7f       	andi	r18, 0xF0	; 240
     f3c:	93 2b       	or	r25, r19
     f3e:	92 2b       	or	r25, r18
     f40:	9f 8b       	std	Y+23, r25	; 0x17
     f42:	38 2f       	mov	r19, r24
     f44:	32 95       	swap	r19
     f46:	3f 70       	andi	r19, 0x0F	; 15
     f48:	91 85       	ldd	r25, Z+9	; 0x09
     f4a:	93 70       	andi	r25, 0x03	; 3
     f4c:	92 95       	swap	r25
     f4e:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
     f50:	80 91 df 02 	lds	r24, 0x02DF
     f54:	28 2f       	mov	r18, r24
     f56:	22 95       	swap	r18
     f58:	22 0f       	add	r18, r18
     f5a:	22 0f       	add	r18, r18
     f5c:	20 7c       	andi	r18, 0xC0	; 192
     f5e:	93 2b       	or	r25, r19
     f60:	92 2b       	or	r25, r18
     f62:	98 8f       	std	Y+24, r25	; 0x18
     f64:	93 85       	ldd	r25, Z+11	; 0x0b
     f66:	92 95       	swap	r25
     f68:	99 0f       	add	r25, r25
     f6a:	99 0f       	add	r25, r25
     f6c:	90 7c       	andi	r25, 0xC0	; 192
     f6e:	86 95       	lsr	r24
     f70:	86 95       	lsr	r24
     f72:	89 2b       	or	r24, r25
     f74:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
     f76:	80 91 e1 02 	lds	r24, 0x02E1
     f7a:	8a 8f       	std	Y+26, r24	; 0x1a
     f7c:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
     f7e:	80 91 e3 02 	lds	r24, 0x02E3
     f82:	28 2f       	mov	r18, r24
     f84:	22 0f       	add	r18, r18
     f86:	22 0f       	add	r18, r18
     f88:	93 70       	andi	r25, 0x03	; 3
     f8a:	92 2b       	or	r25, r18
     f8c:	9b 8f       	std	Y+27, r25	; 0x1b
     f8e:	38 2f       	mov	r19, r24
     f90:	32 95       	swap	r19
     f92:	36 95       	lsr	r19
     f94:	36 95       	lsr	r19
     f96:	33 70       	andi	r19, 0x03	; 3
     f98:	97 85       	ldd	r25, Z+15	; 0x0f
     f9a:	93 70       	andi	r25, 0x03	; 3
     f9c:	99 0f       	add	r25, r25
     f9e:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
     fa0:	80 91 e5 02 	lds	r24, 0x02E5
     fa4:	28 2f       	mov	r18, r24
     fa6:	22 95       	swap	r18
     fa8:	20 7f       	andi	r18, 0xF0	; 240
     faa:	93 2b       	or	r25, r19
     fac:	92 2b       	or	r25, r18
     fae:	9c 8f       	std	Y+28, r25	; 0x1c
     fb0:	38 2f       	mov	r19, r24
     fb2:	32 95       	swap	r19
     fb4:	3f 70       	andi	r19, 0x0F	; 15
     fb6:	91 89       	ldd	r25, Z+17	; 0x11
     fb8:	93 70       	andi	r25, 0x03	; 3
     fba:	92 95       	swap	r25
     fbc:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
     fbe:	80 91 e7 02 	lds	r24, 0x02E7
     fc2:	28 2f       	mov	r18, r24
     fc4:	22 95       	swap	r18
     fc6:	22 0f       	add	r18, r18
     fc8:	22 0f       	add	r18, r18
     fca:	20 7c       	andi	r18, 0xC0	; 192
     fcc:	93 2b       	or	r25, r19
     fce:	92 2b       	or	r25, r18
     fd0:	9d 8f       	std	Y+29, r25	; 0x1d
     fd2:	93 89       	ldd	r25, Z+19	; 0x13
     fd4:	92 95       	swap	r25
     fd6:	99 0f       	add	r25, r25
     fd8:	99 0f       	add	r25, r25
     fda:	90 7c       	andi	r25, 0xC0	; 192
     fdc:	86 95       	lsr	r24
     fde:	86 95       	lsr	r24
     fe0:	89 2b       	or	r24, r25
     fe2:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
     fe4:	80 91 e9 02 	lds	r24, 0x02E9
     fe8:	8f 8f       	std	Y+31, r24	; 0x1f
     fea:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
     fec:	80 91 eb 02 	lds	r24, 0x02EB
     ff0:	28 2f       	mov	r18, r24
     ff2:	22 0f       	add	r18, r18
     ff4:	22 0f       	add	r18, r18
     ff6:	93 70       	andi	r25, 0x03	; 3
     ff8:	92 2b       	or	r25, r18
     ffa:	98 a3       	lds	r25, 0x58
     ffc:	38 2f       	mov	r19, r24
     ffe:	32 95       	swap	r19
    1000:	36 95       	lsr	r19
    1002:	36 95       	lsr	r19
    1004:	33 70       	andi	r19, 0x03	; 3
    1006:	97 89       	ldd	r25, Z+23	; 0x17
    1008:	93 70       	andi	r25, 0x03	; 3
    100a:	99 0f       	add	r25, r25
    100c:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    100e:	80 91 ed 02 	lds	r24, 0x02ED
    1012:	28 2f       	mov	r18, r24
    1014:	22 95       	swap	r18
    1016:	20 7f       	andi	r18, 0xF0	; 240
    1018:	93 2b       	or	r25, r19
    101a:	92 2b       	or	r25, r18
    101c:	99 a3       	lds	r25, 0x59
    101e:	38 2f       	mov	r19, r24
    1020:	32 95       	swap	r19
    1022:	3f 70       	andi	r19, 0x0F	; 15
    1024:	91 8d       	ldd	r25, Z+25	; 0x19
    1026:	93 70       	andi	r25, 0x03	; 3
    1028:	92 95       	swap	r25
    102a:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    102c:	80 91 ef 02 	lds	r24, 0x02EF
    1030:	28 2f       	mov	r18, r24
    1032:	22 95       	swap	r18
    1034:	22 0f       	add	r18, r18
    1036:	22 0f       	add	r18, r18
    1038:	20 7c       	andi	r18, 0xC0	; 192
    103a:	93 2b       	or	r25, r19
    103c:	92 2b       	or	r25, r18
    103e:	9a a3       	lds	r25, 0x5a
    1040:	93 8d       	ldd	r25, Z+27	; 0x1b
    1042:	92 95       	swap	r25
    1044:	99 0f       	add	r25, r25
    1046:	99 0f       	add	r25, r25
    1048:	90 7c       	andi	r25, 0xC0	; 192
    104a:	86 95       	lsr	r24
    104c:	86 95       	lsr	r24
    104e:	89 2b       	or	r24, r25
    1050:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    1052:	80 91 f1 02 	lds	r24, 0x02F1
    1056:	8c a3       	lds	r24, 0x5c
    1058:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    105a:	80 91 f3 02 	lds	r24, 0x02F3
    105e:	28 2f       	mov	r18, r24
    1060:	22 0f       	add	r18, r18
    1062:	22 0f       	add	r18, r18
    1064:	93 70       	andi	r25, 0x03	; 3
    1066:	92 2b       	or	r25, r18
    1068:	9d a3       	lds	r25, 0x5d
    106a:	82 95       	swap	r24
    106c:	86 95       	lsr	r24
    106e:	86 95       	lsr	r24
    1070:	83 70       	andi	r24, 0x03	; 3
    1072:	2e a1       	lds	r18, 0x4e
    1074:	20 7f       	andi	r18, 0xF0	; 240
    1076:	97 8d       	ldd	r25, Z+31	; 0x1f
    1078:	93 70       	andi	r25, 0x03	; 3
    107a:	99 0f       	add	r25, r25
    107c:	99 0f       	add	r25, r25
    107e:	82 2b       	or	r24, r18
    1080:	89 2b       	or	r24, r25
    1082:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    1084:	80 91 f5 02 	lds	r24, 0x02F5
    1088:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    108a:	80 91 f6 02 	lds	r24, 0x02F6
    108e:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    1090:	80 91 f7 02 	lds	r24, 0x02F7
    1094:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    1096:	80 91 f8 02 	lds	r24, 0x02F8
    109a:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    109c:	80 91 f9 02 	lds	r24, 0x02F9
    10a0:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    10a2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <lock_pots>
	current_patch.mode = MEMORY;
    10a6:	10 92 fb 02 	sts	0x02FB, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    10aa:	21 2f       	mov	r18, r17
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	8b e2       	ldi	r24, 0x2B	; 43
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	28 9f       	mul	r18, r24
    10b4:	b0 01       	movw	r22, r0
    10b6:	29 9f       	mul	r18, r25
    10b8:	70 0d       	add	r23, r0
    10ba:	38 9f       	mul	r19, r24
    10bc:	70 0d       	add	r23, r0
    10be:	11 24       	eor	r1, r1
    10c0:	60 50       	subi	r22, 0x00	; 0
    10c2:	70 40       	sbci	r23, 0x00	; 0
    10c4:	ce 01       	movw	r24, r28
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	4b e2       	ldi	r20, 0x2B	; 43
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	0e 94 97 1a 	call	0x352e	; 0x352e <__eeupd_block_m6450a>
}	
    10d0:	ab 96       	adiw	r28, 0x2b	; 43
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	08 95       	ret

000010e4 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	eb 97       	sbiw	r28, 0x3b	; 59
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	2b e2       	ldi	r18, 0x2B	; 43
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	82 9f       	mul	r24, r18
    1100:	b0 01       	movw	r22, r0
    1102:	83 9f       	mul	r24, r19
    1104:	70 0d       	add	r23, r0
    1106:	92 9f       	mul	r25, r18
    1108:	70 0d       	add	r23, r0
    110a:	11 24       	eor	r1, r1
    110c:	60 50       	subi	r22, 0x00	; 0
    110e:	70 40       	sbci	r23, 0x00	; 0
    1110:	ce 01       	movw	r24, r28
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	4b e2       	ldi	r20, 0x2B	; 43
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	0e 94 81 1a 	call	0x3502	; 0x3502 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    111c:	e5 ed       	ldi	r30, 0xD5	; 213
    111e:	f2 e0       	ldi	r31, 0x02	; 2
    1120:	8a 89       	ldd	r24, Y+18	; 0x12
    1122:	28 2f       	mov	r18, r24
    1124:	22 95       	swap	r18
    1126:	2f 70       	andi	r18, 0x0F	; 15
    1128:	9b 89       	ldd	r25, Y+19	; 0x13
    112a:	39 2f       	mov	r19, r25
    112c:	32 95       	swap	r19
    112e:	30 7f       	andi	r19, 0xF0	; 240
    1130:	32 2b       	or	r19, r18
    1132:	29 2f       	mov	r18, r25
    1134:	22 95       	swap	r18
    1136:	2f 70       	andi	r18, 0x0F	; 15
    1138:	23 70       	andi	r18, 0x03	; 3
    113a:	30 93 d5 02 	sts	0x02D5, r19
    113e:	20 93 d6 02 	sts	0x02D6, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    1142:	df 01       	movw	r26, r30
    1144:	5a 97       	sbiw	r26, 0x1a	; 26
    1146:	4a 81       	ldd	r20, Y+2	; 0x02
    1148:	46 95       	lsr	r20
    114a:	46 95       	lsr	r20
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	32 2f       	mov	r19, r18
    1150:	32 95       	swap	r19
    1152:	33 0f       	add	r19, r19
    1154:	33 0f       	add	r19, r19
    1156:	30 7c       	andi	r19, 0xC0	; 192
    1158:	43 2b       	or	r20, r19
    115a:	32 2f       	mov	r19, r18
    115c:	36 95       	lsr	r19
    115e:	36 95       	lsr	r19
    1160:	33 70       	andi	r19, 0x03	; 3
    1162:	4c 93       	st	X, r20
    1164:	11 96       	adiw	r26, 0x01	; 1
    1166:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    1168:	df 01       	movw	r26, r30
    116a:	58 97       	sbiw	r26, 0x18	; 24
    116c:	32 2f       	mov	r19, r18
    116e:	32 95       	swap	r19
    1170:	3f 70       	andi	r19, 0x0F	; 15
    1172:	2c 81       	ldd	r18, Y+4	; 0x04
    1174:	42 2f       	mov	r20, r18
    1176:	42 95       	swap	r20
    1178:	40 7f       	andi	r20, 0xF0	; 240
    117a:	43 2b       	or	r20, r19
    117c:	32 2f       	mov	r19, r18
    117e:	32 95       	swap	r19
    1180:	3f 70       	andi	r19, 0x0F	; 15
    1182:	33 70       	andi	r19, 0x03	; 3
    1184:	4c 93       	st	X, r20
    1186:	11 96       	adiw	r26, 0x01	; 1
    1188:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    118a:	df 01       	movw	r26, r30
    118c:	56 97       	sbiw	r26, 0x16	; 22
    118e:	22 95       	swap	r18
    1190:	26 95       	lsr	r18
    1192:	26 95       	lsr	r18
    1194:	23 70       	andi	r18, 0x03	; 3
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	43 2f       	mov	r20, r19
    119a:	44 0f       	add	r20, r20
    119c:	44 0f       	add	r20, r20
    119e:	24 2b       	or	r18, r20
    11a0:	32 95       	swap	r19
    11a2:	36 95       	lsr	r19
    11a4:	36 95       	lsr	r19
    11a6:	33 70       	andi	r19, 0x03	; 3
    11a8:	2c 93       	st	X, r18
    11aa:	11 96       	adiw	r26, 0x01	; 1
    11ac:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    11ae:	df 01       	movw	r26, r30
    11b0:	54 97       	sbiw	r26, 0x14	; 20
    11b2:	4e 81       	ldd	r20, Y+6	; 0x06
    11b4:	2f 81       	ldd	r18, Y+7	; 0x07
    11b6:	32 2f       	mov	r19, r18
    11b8:	33 70       	andi	r19, 0x03	; 3
    11ba:	4c 93       	st	X, r20
    11bc:	11 96       	adiw	r26, 0x01	; 1
    11be:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    11c0:	df 01       	movw	r26, r30
    11c2:	52 97       	sbiw	r26, 0x12	; 18
    11c4:	32 2f       	mov	r19, r18
    11c6:	36 95       	lsr	r19
    11c8:	36 95       	lsr	r19
    11ca:	28 85       	ldd	r18, Y+8	; 0x08
    11cc:	42 2f       	mov	r20, r18
    11ce:	42 95       	swap	r20
    11d0:	44 0f       	add	r20, r20
    11d2:	44 0f       	add	r20, r20
    11d4:	40 7c       	andi	r20, 0xC0	; 192
    11d6:	43 2b       	or	r20, r19
    11d8:	32 2f       	mov	r19, r18
    11da:	36 95       	lsr	r19
    11dc:	36 95       	lsr	r19
    11de:	33 70       	andi	r19, 0x03	; 3
    11e0:	4c 93       	st	X, r20
    11e2:	11 96       	adiw	r26, 0x01	; 1
    11e4:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    11e6:	df 01       	movw	r26, r30
    11e8:	50 97       	sbiw	r26, 0x10	; 16
    11ea:	32 2f       	mov	r19, r18
    11ec:	32 95       	swap	r19
    11ee:	3f 70       	andi	r19, 0x0F	; 15
    11f0:	29 85       	ldd	r18, Y+9	; 0x09
    11f2:	42 2f       	mov	r20, r18
    11f4:	42 95       	swap	r20
    11f6:	40 7f       	andi	r20, 0xF0	; 240
    11f8:	43 2b       	or	r20, r19
    11fa:	32 2f       	mov	r19, r18
    11fc:	32 95       	swap	r19
    11fe:	3f 70       	andi	r19, 0x0F	; 15
    1200:	33 70       	andi	r19, 0x03	; 3
    1202:	4c 93       	st	X, r20
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    1208:	df 01       	movw	r26, r30
    120a:	1e 97       	sbiw	r26, 0x0e	; 14
    120c:	22 95       	swap	r18
    120e:	26 95       	lsr	r18
    1210:	26 95       	lsr	r18
    1212:	23 70       	andi	r18, 0x03	; 3
    1214:	3a 85       	ldd	r19, Y+10	; 0x0a
    1216:	43 2f       	mov	r20, r19
    1218:	44 0f       	add	r20, r20
    121a:	44 0f       	add	r20, r20
    121c:	24 2b       	or	r18, r20
    121e:	32 95       	swap	r19
    1220:	36 95       	lsr	r19
    1222:	36 95       	lsr	r19
    1224:	33 70       	andi	r19, 0x03	; 3
    1226:	2c 93       	st	X, r18
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    122c:	df 01       	movw	r26, r30
    122e:	1c 97       	sbiw	r26, 0x0c	; 12
    1230:	4b 85       	ldd	r20, Y+11	; 0x0b
    1232:	2c 85       	ldd	r18, Y+12	; 0x0c
    1234:	32 2f       	mov	r19, r18
    1236:	33 70       	andi	r19, 0x03	; 3
    1238:	4c 93       	st	X, r20
    123a:	11 96       	adiw	r26, 0x01	; 1
    123c:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    123e:	df 01       	movw	r26, r30
    1240:	1a 97       	sbiw	r26, 0x0a	; 10
    1242:	32 2f       	mov	r19, r18
    1244:	36 95       	lsr	r19
    1246:	36 95       	lsr	r19
    1248:	2d 85       	ldd	r18, Y+13	; 0x0d
    124a:	42 2f       	mov	r20, r18
    124c:	42 95       	swap	r20
    124e:	44 0f       	add	r20, r20
    1250:	44 0f       	add	r20, r20
    1252:	40 7c       	andi	r20, 0xC0	; 192
    1254:	43 2b       	or	r20, r19
    1256:	32 2f       	mov	r19, r18
    1258:	36 95       	lsr	r19
    125a:	36 95       	lsr	r19
    125c:	33 70       	andi	r19, 0x03	; 3
    125e:	4c 93       	st	X, r20
    1260:	11 96       	adiw	r26, 0x01	; 1
    1262:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    1264:	df 01       	movw	r26, r30
    1266:	18 97       	sbiw	r26, 0x08	; 8
    1268:	32 2f       	mov	r19, r18
    126a:	32 95       	swap	r19
    126c:	3f 70       	andi	r19, 0x0F	; 15
    126e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1270:	42 2f       	mov	r20, r18
    1272:	42 95       	swap	r20
    1274:	40 7f       	andi	r20, 0xF0	; 240
    1276:	43 2b       	or	r20, r19
    1278:	32 2f       	mov	r19, r18
    127a:	32 95       	swap	r19
    127c:	3f 70       	andi	r19, 0x0F	; 15
    127e:	33 70       	andi	r19, 0x03	; 3
    1280:	4c 93       	st	X, r20
    1282:	11 96       	adiw	r26, 0x01	; 1
    1284:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    1286:	df 01       	movw	r26, r30
    1288:	16 97       	sbiw	r26, 0x06	; 6
    128a:	22 95       	swap	r18
    128c:	26 95       	lsr	r18
    128e:	26 95       	lsr	r18
    1290:	23 70       	andi	r18, 0x03	; 3
    1292:	3f 85       	ldd	r19, Y+15	; 0x0f
    1294:	43 2f       	mov	r20, r19
    1296:	44 0f       	add	r20, r20
    1298:	44 0f       	add	r20, r20
    129a:	24 2b       	or	r18, r20
    129c:	32 95       	swap	r19
    129e:	36 95       	lsr	r19
    12a0:	36 95       	lsr	r19
    12a2:	33 70       	andi	r19, 0x03	; 3
    12a4:	2c 93       	st	X, r18
    12a6:	11 96       	adiw	r26, 0x01	; 1
    12a8:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    12aa:	df 01       	movw	r26, r30
    12ac:	14 97       	sbiw	r26, 0x04	; 4
    12ae:	48 89       	ldd	r20, Y+16	; 0x10
    12b0:	29 89       	ldd	r18, Y+17	; 0x11
    12b2:	32 2f       	mov	r19, r18
    12b4:	33 70       	andi	r19, 0x03	; 3
    12b6:	4c 93       	st	X, r20
    12b8:	11 96       	adiw	r26, 0x01	; 1
    12ba:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    12bc:	df 01       	movw	r26, r30
    12be:	12 97       	sbiw	r26, 0x02	; 2
    12c0:	26 95       	lsr	r18
    12c2:	26 95       	lsr	r18
    12c4:	38 2f       	mov	r19, r24
    12c6:	32 95       	swap	r19
    12c8:	33 0f       	add	r19, r19
    12ca:	33 0f       	add	r19, r19
    12cc:	30 7c       	andi	r19, 0xC0	; 192
    12ce:	23 2b       	or	r18, r19
    12d0:	86 95       	lsr	r24
    12d2:	86 95       	lsr	r24
    12d4:	83 70       	andi	r24, 0x03	; 3
    12d6:	2c 93       	st	X, r18
    12d8:	11 96       	adiw	r26, 0x01	; 1
    12da:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    12dc:	92 95       	swap	r25
    12de:	96 95       	lsr	r25
    12e0:	96 95       	lsr	r25
    12e2:	93 70       	andi	r25, 0x03	; 3
    12e4:	8c 89       	ldd	r24, Y+20	; 0x14
    12e6:	28 2f       	mov	r18, r24
    12e8:	22 0f       	add	r18, r18
    12ea:	22 0f       	add	r18, r18
    12ec:	92 2b       	or	r25, r18
    12ee:	82 95       	swap	r24
    12f0:	86 95       	lsr	r24
    12f2:	86 95       	lsr	r24
    12f4:	83 70       	andi	r24, 0x03	; 3
    12f6:	90 93 d7 02 	sts	0x02D7, r25
    12fa:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    12fc:	2d 89       	ldd	r18, Y+21	; 0x15
    12fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1300:	98 2f       	mov	r25, r24
    1302:	93 70       	andi	r25, 0x03	; 3
    1304:	20 93 d9 02 	sts	0x02D9, r18
    1308:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    130a:	98 2f       	mov	r25, r24
    130c:	96 95       	lsr	r25
    130e:	96 95       	lsr	r25
    1310:	8f 89       	ldd	r24, Y+23	; 0x17
    1312:	28 2f       	mov	r18, r24
    1314:	22 95       	swap	r18
    1316:	22 0f       	add	r18, r18
    1318:	22 0f       	add	r18, r18
    131a:	20 7c       	andi	r18, 0xC0	; 192
    131c:	29 2b       	or	r18, r25
    131e:	98 2f       	mov	r25, r24
    1320:	96 95       	lsr	r25
    1322:	96 95       	lsr	r25
    1324:	93 70       	andi	r25, 0x03	; 3
    1326:	20 93 db 02 	sts	0x02DB, r18
    132a:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    132c:	98 2f       	mov	r25, r24
    132e:	92 95       	swap	r25
    1330:	9f 70       	andi	r25, 0x0F	; 15
    1332:	88 8d       	ldd	r24, Y+24	; 0x18
    1334:	28 2f       	mov	r18, r24
    1336:	22 95       	swap	r18
    1338:	20 7f       	andi	r18, 0xF0	; 240
    133a:	29 2b       	or	r18, r25
    133c:	98 2f       	mov	r25, r24
    133e:	92 95       	swap	r25
    1340:	9f 70       	andi	r25, 0x0F	; 15
    1342:	93 70       	andi	r25, 0x03	; 3
    1344:	20 93 dd 02 	sts	0x02DD, r18
    1348:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    134a:	82 95       	swap	r24
    134c:	86 95       	lsr	r24
    134e:	86 95       	lsr	r24
    1350:	83 70       	andi	r24, 0x03	; 3
    1352:	99 8d       	ldd	r25, Y+25	; 0x19
    1354:	29 2f       	mov	r18, r25
    1356:	22 0f       	add	r18, r18
    1358:	22 0f       	add	r18, r18
    135a:	82 2b       	or	r24, r18
    135c:	92 95       	swap	r25
    135e:	96 95       	lsr	r25
    1360:	96 95       	lsr	r25
    1362:	93 70       	andi	r25, 0x03	; 3
    1364:	80 93 df 02 	sts	0x02DF, r24
    1368:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    136a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    136c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    136e:	98 2f       	mov	r25, r24
    1370:	93 70       	andi	r25, 0x03	; 3
    1372:	20 93 e1 02 	sts	0x02E1, r18
    1376:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    1378:	98 2f       	mov	r25, r24
    137a:	96 95       	lsr	r25
    137c:	96 95       	lsr	r25
    137e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1380:	28 2f       	mov	r18, r24
    1382:	22 95       	swap	r18
    1384:	22 0f       	add	r18, r18
    1386:	22 0f       	add	r18, r18
    1388:	20 7c       	andi	r18, 0xC0	; 192
    138a:	29 2b       	or	r18, r25
    138c:	98 2f       	mov	r25, r24
    138e:	96 95       	lsr	r25
    1390:	96 95       	lsr	r25
    1392:	93 70       	andi	r25, 0x03	; 3
    1394:	20 93 e3 02 	sts	0x02E3, r18
    1398:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    139a:	98 2f       	mov	r25, r24
    139c:	92 95       	swap	r25
    139e:	9f 70       	andi	r25, 0x0F	; 15
    13a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13a2:	28 2f       	mov	r18, r24
    13a4:	22 95       	swap	r18
    13a6:	20 7f       	andi	r18, 0xF0	; 240
    13a8:	29 2b       	or	r18, r25
    13aa:	98 2f       	mov	r25, r24
    13ac:	92 95       	swap	r25
    13ae:	9f 70       	andi	r25, 0x0F	; 15
    13b0:	93 70       	andi	r25, 0x03	; 3
    13b2:	20 93 e5 02 	sts	0x02E5, r18
    13b6:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    13b8:	82 95       	swap	r24
    13ba:	86 95       	lsr	r24
    13bc:	86 95       	lsr	r24
    13be:	83 70       	andi	r24, 0x03	; 3
    13c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13c2:	29 2f       	mov	r18, r25
    13c4:	22 0f       	add	r18, r18
    13c6:	22 0f       	add	r18, r18
    13c8:	82 2b       	or	r24, r18
    13ca:	92 95       	swap	r25
    13cc:	96 95       	lsr	r25
    13ce:	96 95       	lsr	r25
    13d0:	93 70       	andi	r25, 0x03	; 3
    13d2:	80 93 e7 02 	sts	0x02E7, r24
    13d6:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    13d8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    13da:	88 a1       	lds	r24, 0x48
    13dc:	98 2f       	mov	r25, r24
    13de:	93 70       	andi	r25, 0x03	; 3
    13e0:	20 93 e9 02 	sts	0x02E9, r18
    13e4:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    13e6:	98 2f       	mov	r25, r24
    13e8:	96 95       	lsr	r25
    13ea:	96 95       	lsr	r25
    13ec:	89 a1       	lds	r24, 0x49
    13ee:	28 2f       	mov	r18, r24
    13f0:	22 95       	swap	r18
    13f2:	22 0f       	add	r18, r18
    13f4:	22 0f       	add	r18, r18
    13f6:	20 7c       	andi	r18, 0xC0	; 192
    13f8:	29 2b       	or	r18, r25
    13fa:	98 2f       	mov	r25, r24
    13fc:	96 95       	lsr	r25
    13fe:	96 95       	lsr	r25
    1400:	93 70       	andi	r25, 0x03	; 3
    1402:	20 93 eb 02 	sts	0x02EB, r18
    1406:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    1408:	98 2f       	mov	r25, r24
    140a:	92 95       	swap	r25
    140c:	9f 70       	andi	r25, 0x0F	; 15
    140e:	8a a1       	lds	r24, 0x4a
    1410:	28 2f       	mov	r18, r24
    1412:	22 95       	swap	r18
    1414:	20 7f       	andi	r18, 0xF0	; 240
    1416:	29 2b       	or	r18, r25
    1418:	98 2f       	mov	r25, r24
    141a:	92 95       	swap	r25
    141c:	9f 70       	andi	r25, 0x0F	; 15
    141e:	93 70       	andi	r25, 0x03	; 3
    1420:	20 93 ed 02 	sts	0x02ED, r18
    1424:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1426:	82 95       	swap	r24
    1428:	86 95       	lsr	r24
    142a:	86 95       	lsr	r24
    142c:	83 70       	andi	r24, 0x03	; 3
    142e:	9b a1       	lds	r25, 0x4b
    1430:	29 2f       	mov	r18, r25
    1432:	22 0f       	add	r18, r18
    1434:	22 0f       	add	r18, r18
    1436:	82 2b       	or	r24, r18
    1438:	92 95       	swap	r25
    143a:	96 95       	lsr	r25
    143c:	96 95       	lsr	r25
    143e:	93 70       	andi	r25, 0x03	; 3
    1440:	80 93 ef 02 	sts	0x02EF, r24
    1444:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1446:	2c a1       	lds	r18, 0x4c
    1448:	8d a1       	lds	r24, 0x4d
    144a:	98 2f       	mov	r25, r24
    144c:	93 70       	andi	r25, 0x03	; 3
    144e:	20 93 f1 02 	sts	0x02F1, r18
    1452:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1454:	98 2f       	mov	r25, r24
    1456:	96 95       	lsr	r25
    1458:	96 95       	lsr	r25
    145a:	8e a1       	lds	r24, 0x4e
    145c:	28 2f       	mov	r18, r24
    145e:	22 95       	swap	r18
    1460:	22 0f       	add	r18, r18
    1462:	22 0f       	add	r18, r18
    1464:	20 7c       	andi	r18, 0xC0	; 192
    1466:	29 2b       	or	r18, r25
    1468:	86 95       	lsr	r24
    146a:	86 95       	lsr	r24
    146c:	98 2f       	mov	r25, r24
    146e:	93 70       	andi	r25, 0x03	; 3
    1470:	20 93 f3 02 	sts	0x02F3, r18
    1474:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    1476:	7f a1       	lds	r23, 0x4f
    1478:	70 93 f5 02 	sts	0x02F5, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    147c:	88 a5       	lds	r24, 0x68
    147e:	80 93 f6 02 	sts	0x02F6, r24
	current_patch.byte_3 = loaded_patch.byte_3;
    1482:	89 a5       	lds	r24, 0x69
    1484:	80 93 f7 02 	sts	0x02F7, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    1488:	9a a5       	lds	r25, 0x6a
    148a:	90 93 f8 02 	sts	0x02F8, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    148e:	6b a5       	lds	r22, 0x6b
    1490:	60 93 f9 02 	sts	0x02F9, r22
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1494:	de 01       	movw	r26, r28
    1496:	9c 96       	adiw	r26, 0x2c	; 44
    1498:	ef ef       	ldi	r30, 0xFF	; 255
    149a:	f1 e0       	ldi	r31, 0x01	; 1
    149c:	28 e0       	ldi	r18, 0x08	; 8
    149e:	01 90       	ld	r0, Z+
    14a0:	0d 92       	st	X+, r0
    14a2:	21 50       	subi	r18, 0x01	; 1
    14a4:	e1 f7       	brne	.-8      	; 0x149e <__stack+0x39f>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    14a6:	e9 2f       	mov	r30, r25
    14a8:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	9f 01       	movw	r18, r30
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	22 0f       	add	r18, r18
    14b4:	33 1f       	adc	r19, r19
    14b6:	a9 01       	movw	r20, r18
    14b8:	44 0f       	add	r20, r20
    14ba:	55 1f       	adc	r21, r21
    14bc:	44 0f       	add	r20, r20
    14be:	55 1f       	adc	r21, r21
    14c0:	44 0f       	add	r20, r20
    14c2:	55 1f       	adc	r21, r21
    14c4:	42 1b       	sub	r20, r18
    14c6:	53 0b       	sbc	r21, r19
    14c8:	4e 0f       	add	r20, r30
    14ca:	5f 1f       	adc	r21, r31
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	55 95       	asr	r21
    14d2:	47 95       	ror	r20
    14d4:	55 95       	asr	r21
    14d6:	47 95       	ror	r20
    14d8:	55 95       	asr	r21
    14da:	47 95       	ror	r20
    14dc:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    14de:	fe 01       	movw	r30, r28
    14e0:	e4 0f       	add	r30, r20
    14e2:	f1 1d       	adc	r31, r1
    14e4:	24 a5       	lds	r18, 0x64
    14e6:	20 93 fc 02 	sts	0x02FC, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    14ea:	de 01       	movw	r26, r28
    14ec:	d4 96       	adiw	r26, 0x34	; 52
    14ee:	e7 e0       	ldi	r30, 0x07	; 7
    14f0:	f2 e0       	ldi	r31, 0x02	; 2
    14f2:	28 e0       	ldi	r18, 0x08	; 8
    14f4:	01 90       	ld	r0, Z+
    14f6:	0d 92       	st	X+, r0
    14f8:	21 50       	subi	r18, 0x01	; 1
    14fa:	e1 f7       	brne	.-8      	; 0x14f4 <__stack+0x3f5>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    14fc:	29 2f       	mov	r18, r25
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	20 7e       	andi	r18, 0xE0	; 224
    1502:	30 70       	andi	r19, 0x00	; 0
    1504:	35 95       	asr	r19
    1506:	27 95       	ror	r18
    1508:	35 95       	asr	r19
    150a:	27 95       	ror	r18
    150c:	35 95       	asr	r19
    150e:	27 95       	ror	r18
    1510:	83 70       	andi	r24, 0x03	; 3
    1512:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    1514:	42 2f       	mov	r20, r18
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	ca 01       	movw	r24, r20
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	9c 01       	movw	r18, r24
    1524:	22 0f       	add	r18, r18
    1526:	33 1f       	adc	r19, r19
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	22 0f       	add	r18, r18
    152e:	33 1f       	adc	r19, r19
    1530:	28 1b       	sub	r18, r24
    1532:	39 0b       	sbc	r19, r25
    1534:	42 0f       	add	r20, r18
    1536:	53 1f       	adc	r21, r19
    1538:	ca 01       	movw	r24, r20
    153a:	95 95       	asr	r25
    153c:	87 95       	ror	r24
    153e:	95 95       	asr	r25
    1540:	87 95       	ror	r24
    1542:	95 95       	asr	r25
    1544:	87 95       	ror	r24
    1546:	95 95       	asr	r25
    1548:	87 95       	ror	r24
    154a:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    154c:	fe 01       	movw	r30, r28
    154e:	e8 0f       	add	r30, r24
    1550:	f1 1d       	adc	r31, r1
    1552:	84 a9       	sts	0x44, r24
    1554:	80 93 fd 02 	sts	0x02FD, r24
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1558:	26 2f       	mov	r18, r22
    155a:	26 95       	lsr	r18
    155c:	27 95       	ror	r18
    155e:	22 27       	eor	r18, r18
    1560:	27 95       	ror	r18
    1562:	86 2f       	mov	r24, r22
    1564:	81 70       	andi	r24, 0x01	; 1
    1566:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1568:	46 2f       	mov	r20, r22
    156a:	46 95       	lsr	r20
    156c:	46 95       	lsr	r20
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	41 70       	andi	r20, 0x01	; 1
    1572:	50 70       	andi	r21, 0x00	; 0
    1574:	ca 01       	movw	r24, r20
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
	octave_index.vco2 = vco2_lookup[bit_index];
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    157e:	82 2b       	or	r24, r18
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1580:	46 2f       	mov	r20, r22
    1582:	46 95       	lsr	r20
    1584:	46 95       	lsr	r20
    1586:	46 95       	lsr	r20
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	41 70       	andi	r20, 0x01	; 1
    158c:	50 70       	andi	r21, 0x00	; 0
    158e:	9a 01       	movw	r18, r20
    1590:	22 0f       	add	r18, r18
    1592:	33 1f       	adc	r19, r19
	octave_index.vco2 = vco2_lookup[bit_index];
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1594:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1596:	46 2f       	mov	r20, r22
    1598:	42 95       	swap	r20
    159a:	4f 70       	andi	r20, 0x0F	; 15
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	41 70       	andi	r20, 0x01	; 1
    15a0:	50 70       	andi	r21, 0x00	; 0
    15a2:	ca 01       	movw	r24, r20
    15a4:	82 95       	swap	r24
    15a6:	92 95       	swap	r25
    15a8:	90 7f       	andi	r25, 0xF0	; 240
    15aa:	98 27       	eor	r25, r24
    15ac:	80 7f       	andi	r24, 0xF0	; 240
    15ae:	98 27       	eor	r25, r24
	octave_index.vco2 = vco2_lookup[bit_index];
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    15b0:	82 2b       	or	r24, r18
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    15b2:	46 2f       	mov	r20, r22
    15b4:	42 95       	swap	r20
    15b6:	46 95       	lsr	r20
    15b8:	47 70       	andi	r20, 0x07	; 7
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	41 70       	andi	r20, 0x01	; 1
    15be:	50 70       	andi	r21, 0x00	; 0
    15c0:	9a 01       	movw	r18, r20
    15c2:	22 0f       	add	r18, r18
    15c4:	33 1f       	adc	r19, r19
    15c6:	22 95       	swap	r18
    15c8:	32 95       	swap	r19
    15ca:	30 7f       	andi	r19, 0xF0	; 240
    15cc:	32 27       	eor	r19, r18
    15ce:	20 7f       	andi	r18, 0xF0	; 240
    15d0:	32 27       	eor	r19, r18
	octave_index.vco2 = vco2_lookup[bit_index];
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    15d2:	48 2f       	mov	r20, r24
    15d4:	42 2b       	or	r20, r18
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    15d6:	26 2f       	mov	r18, r22
    15d8:	22 95       	swap	r18
    15da:	26 95       	lsr	r18
    15dc:	26 95       	lsr	r18
    15de:	23 70       	andi	r18, 0x03	; 3
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	21 70       	andi	r18, 0x01	; 1
    15e4:	30 70       	andi	r19, 0x00	; 0
    15e6:	c9 01       	movw	r24, r18
    15e8:	00 24       	eor	r0, r0
    15ea:	96 95       	lsr	r25
    15ec:	87 95       	ror	r24
    15ee:	07 94       	ror	r0
    15f0:	96 95       	lsr	r25
    15f2:	87 95       	ror	r24
    15f4:	07 94       	ror	r0
    15f6:	98 2f       	mov	r25, r24
    15f8:	80 2d       	mov	r24, r0
	octave_index.vco2 = vco2_lookup[bit_index];
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    15fa:	84 2b       	or	r24, r20
    15fc:	80 93 6e 03 	sts	0x036E, r24
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
	
	switch_states.byte2 =	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1600:	66 1f       	adc	r22, r22
    1602:	66 27       	eor	r22, r22
    1604:	66 1f       	adc	r22, r22
    1606:	66 0f       	add	r22, r22
    1608:	66 0f       	add	r22, r22
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    160a:	27 2f       	mov	r18, r23
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	21 70       	andi	r18, 0x01	; 1
    1610:	30 70       	andi	r19, 0x00	; 0
    1612:	c9 01       	movw	r24, r18
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
	
	switch_states.byte2 =	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1620:	86 2b       	or	r24, r22
    1622:	80 93 70 03 	sts	0x0370, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1626:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <lock_pots>
	
	current_patch.mode = MEMORY;
    162a:	10 92 fb 02 	sts	0x02FB, r1
	
}
    162e:	eb 96       	adiw	r28, 0x3b	; 59
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	08 95       	ret

00001640 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1640:	90 91 fc 02 	lds	r25, 0x02FC
	if (vco == VCO2) n = octave_index.vco2;
    1644:	60 3f       	cpi	r22, 0xF0	; 240
    1646:	11 f4       	brne	.+4      	; 0x164c <transpose_note+0xc>
    1648:	90 91 fd 02 	lds	r25, 0x02FD

	note = (n*12) + note; //calculate MIDI note after octave addition
    164c:	29 2f       	mov	r18, r25
    164e:	22 0f       	add	r18, r18
    1650:	92 0f       	add	r25, r18
    1652:	99 0f       	add	r25, r25
    1654:	99 0f       	add	r25, r25
    1656:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1658:	89 38       	cpi	r24, 0x89	; 137
    165a:	08 f0       	brcs	.+2      	; 0x165e <transpose_note+0x1e>
    165c:	88 e8       	ldi	r24, 0x88	; 136
	
}
    165e:	08 95       	ret

00001660 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1660:	80 91 6e 03 	lds	r24, 0x036E
    1664:	98 2f       	mov	r25, r24
    1666:	96 95       	lsr	r25
    1668:	96 95       	lsr	r25
    166a:	96 95       	lsr	r25
    166c:	90 ff       	sbrs	r25, 0
    166e:	0e c0       	rjmp	.+28     	; 0x168c <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1670:	90 91 fc 02 	lds	r25, 0x02FC
    1674:	9f 5f       	subi	r25, 0xFF	; 255
    1676:	90 93 fc 02 	sts	0x02FC, r25
    167a:	95 30       	cpi	r25, 0x05	; 5
    167c:	19 f4       	brne	.+6      	; 0x1684 <update_octave_range+0x24>
    167e:	94 e0       	ldi	r25, 0x04	; 4
    1680:	90 93 fc 02 	sts	0x02FC, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1684:	98 e0       	ldi	r25, 0x08	; 8
    1686:	89 27       	eor	r24, r25
    1688:	80 93 6e 03 	sts	0x036E, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    168c:	80 91 6f 03 	lds	r24, 0x036F
    1690:	98 2f       	mov	r25, r24
    1692:	96 95       	lsr	r25
    1694:	96 95       	lsr	r25
    1696:	96 95       	lsr	r25
    1698:	90 ff       	sbrs	r25, 0
    169a:	0b c0       	rjmp	.+22     	; 0x16b2 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    169c:	90 91 fc 02 	lds	r25, 0x02FC
    16a0:	99 23       	and	r25, r25
    16a2:	19 f0       	breq	.+6      	; 0x16aa <update_octave_range+0x4a>
    16a4:	91 50       	subi	r25, 0x01	; 1
    16a6:	90 93 fc 02 	sts	0x02FC, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    16aa:	98 e0       	ldi	r25, 0x08	; 8
    16ac:	89 27       	eor	r24, r25
    16ae:	80 93 6f 03 	sts	0x036F, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    16b2:	80 91 fc 02 	lds	r24, 0x02FC
    16b6:	e9 e1       	ldi	r30, 0x19	; 25
    16b8:	f2 e0       	ldi	r31, 0x02	; 2
    16ba:	e8 0f       	add	r30, r24
    16bc:	f1 1d       	adc	r31, r1
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	00 80       	ld	r0, Z
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <update_octave_range+0x6a>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <update_octave_range+0x66>
    16ce:	58 2f       	mov	r21, r24
    16d0:	80 93 f8 02 	sts	0x02F8, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    16d4:	90 91 6f 03 	lds	r25, 0x036F
    16d8:	29 2f       	mov	r18, r25
    16da:	26 95       	lsr	r18
    16dc:	26 95       	lsr	r18
    16de:	20 ff       	sbrs	r18, 0
    16e0:	0e c0       	rjmp	.+28     	; 0x16fe <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    16e2:	80 91 fd 02 	lds	r24, 0x02FD
    16e6:	8f 5f       	subi	r24, 0xFF	; 255
    16e8:	80 93 fd 02 	sts	0x02FD, r24
    16ec:	85 30       	cpi	r24, 0x05	; 5
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <update_octave_range+0x96>
    16f0:	84 e0       	ldi	r24, 0x04	; 4
    16f2:	80 93 fd 02 	sts	0x02FD, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    16f6:	84 e0       	ldi	r24, 0x04	; 4
    16f8:	98 27       	eor	r25, r24
    16fa:	90 93 6f 03 	sts	0x036F, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    16fe:	90 91 6f 03 	lds	r25, 0x036F
    1702:	29 2f       	mov	r18, r25
    1704:	26 95       	lsr	r18
    1706:	20 ff       	sbrs	r18, 0
    1708:	0b c0       	rjmp	.+22     	; 0x1720 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    170a:	80 91 fd 02 	lds	r24, 0x02FD
    170e:	88 23       	and	r24, r24
    1710:	19 f0       	breq	.+6      	; 0x1718 <update_octave_range+0xb8>
    1712:	81 50       	subi	r24, 0x01	; 1
    1714:	80 93 fd 02 	sts	0x02FD, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	98 27       	eor	r25, r24
    171c:	90 93 6f 03 	sts	0x036F, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1720:	40 91 f7 02 	lds	r20, 0x02F7
    1724:	4c 7f       	andi	r20, 0xFC	; 252
    1726:	40 93 f7 02 	sts	0x02F7, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    172a:	90 91 fd 02 	lds	r25, 0x02FD
    172e:	93 30       	cpi	r25, 0x03	; 3
    1730:	88 f0       	brcs	.+34     	; 0x1754 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1732:	e4 e1       	ldi	r30, 0x14	; 20
    1734:	f2 e0       	ldi	r31, 0x02	; 2
    1736:	e9 0f       	add	r30, r25
    1738:	f1 1d       	adc	r31, r1
    173a:	21 e0       	ldi	r18, 0x01	; 1
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	c9 01       	movw	r24, r18
    1740:	00 80       	ld	r0, Z
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <update_octave_range+0xe8>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <update_octave_range+0xe4>
    174c:	84 2b       	or	r24, r20
    174e:	80 93 f7 02 	sts	0x02F7, r24
    1752:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1754:	e4 e1       	ldi	r30, 0x14	; 20
    1756:	f2 e0       	ldi	r31, 0x02	; 2
    1758:	e9 0f       	add	r30, r25
    175a:	f1 1d       	adc	r31, r1
    175c:	21 e0       	ldi	r18, 0x01	; 1
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	c9 01       	movw	r24, r18
    1762:	00 80       	ld	r0, Z
    1764:	02 c0       	rjmp	.+4      	; 0x176a <update_octave_range+0x10a>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <update_octave_range+0x106>
    176e:	85 2b       	or	r24, r21
    1770:	80 93 f8 02 	sts	0x02F8, r24
    1774:	08 95       	ret

00001776 <update_patch_programmer>:
	
}

void update_patch_programmer(void) {
	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1776:	80 91 70 03 	lds	r24, 0x0370
    177a:	98 2f       	mov	r25, r24
    177c:	92 95       	swap	r25
    177e:	96 95       	lsr	r25
    1780:	96 95       	lsr	r25
    1782:	93 70       	andi	r25, 0x03	; 3
    1784:	90 ff       	sbrs	r25, 0
    1786:	11 c0       	rjmp	.+34     	; 0x17aa <update_patch_programmer+0x34>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1788:	90 e4       	ldi	r25, 0x40	; 64
    178a:	89 27       	eor	r24, r25
    178c:	80 93 70 03 	sts	0x0370, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1790:	80 91 fa 02 	lds	r24, 0x02FA
    1794:	8f 5f       	subi	r24, 0xFF	; 255
    1796:	80 93 fa 02 	sts	0x02FA, r24
    179a:	85 32       	cpi	r24, 0x25	; 37
    179c:	21 f4       	brne	.+8      	; 0x17a6 <update_patch_programmer+0x30>
			
			current_patch.number = NUM_PATCHES; //max patch number
    179e:	84 e2       	ldi	r24, 0x24	; 36
    17a0:	80 93 fa 02 	sts	0x02FA, r24
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <update_patch_programmer+0x34>
			
		} else { //load next patch
			
			load_patch(current_patch.number);
    17a6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <load_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    17aa:	80 91 70 03 	lds	r24, 0x0370
    17ae:	98 2f       	mov	r25, r24
    17b0:	92 95       	swap	r25
    17b2:	96 95       	lsr	r25
    17b4:	97 70       	andi	r25, 0x07	; 7
    17b6:	90 ff       	sbrs	r25, 0
    17b8:	0d c0       	rjmp	.+26     	; 0x17d4 <update_patch_programmer+0x5e>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    17ba:	90 e2       	ldi	r25, 0x20	; 32
    17bc:	89 27       	eor	r24, r25
    17be:	80 93 70 03 	sts	0x0370, r24

		if (current_patch.number == 1) {} else {current_patch.number--; load_patch(current_patch.number);}
    17c2:	80 91 fa 02 	lds	r24, 0x02FA
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	29 f0       	breq	.+10     	; 0x17d4 <update_patch_programmer+0x5e>
    17ca:	81 50       	subi	r24, 0x01	; 1
    17cc:	80 93 fa 02 	sts	0x02FA, r24
    17d0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <load_patch>
	
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    17d4:	80 91 70 03 	lds	r24, 0x0370
    17d8:	98 2f       	mov	r25, r24
    17da:	92 95       	swap	r25
    17dc:	9f 70       	andi	r25, 0x0F	; 15
    17de:	90 ff       	sbrs	r25, 0
    17e0:	08 c0       	rjmp	.+16     	; 0x17f2 <update_patch_programmer+0x7c>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW); //toggle switch state bit
    17e2:	90 e1       	ldi	r25, 0x10	; 16
    17e4:	89 27       	eor	r24, r25
    17e6:	80 93 70 03 	sts	0x0370, r24
		save_patch(current_patch.number);
    17ea:	80 91 fa 02 	lds	r24, 0x02FA
    17ee:	0e 94 84 06 	call	0xd08	; 0xd08 <save_patch>
		
		
	}
	
	
	value_to_display = current_patch.number;	
    17f2:	80 91 fa 02 	lds	r24, 0x02FA
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	90 93 fe 01 	sts	0x01FE, r25
    17fc:	80 93 fd 01 	sts	0x01FD, r24
	
	
}	
    1800:	08 95       	ret

00001802 <refresh_synth>:
	
	
void refresh_synth(void) {
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1806:	90 91 6e 03 	lds	r25, 0x036E
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    180a:	80 91 70 03 	lds	r24, 0x0370
    180e:	86 95       	lsr	r24
    1810:	86 95       	lsr	r24
    1812:	68 2f       	mov	r22, r24
    1814:	67 95       	ror	r22
    1816:	66 27       	eor	r22, r22
    1818:	67 95       	ror	r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    181a:	29 2f       	mov	r18, r25
    181c:	21 70       	andi	r18, 0x01	; 1
    181e:	26 2b       	or	r18, r22
    1820:	69 2f       	mov	r22, r25
    1822:	66 1f       	adc	r22, r22
    1824:	66 27       	eor	r22, r22
    1826:	66 1f       	adc	r22, r22
    1828:	66 0f       	add	r22, r22
    182a:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    182c:	c9 2f       	mov	r28, r25
    182e:	c6 95       	lsr	r28
    1830:	c6 95       	lsr	r28
    1832:	d0 e0       	ldi	r29, 0x00	; 0
    1834:	c1 70       	andi	r28, 0x01	; 1
    1836:	d0 70       	andi	r29, 0x00	; 0
    1838:	de 01       	movw	r26, r28
    183a:	aa 0f       	add	r26, r26
    183c:	bb 1f       	adc	r27, r27
    183e:	aa 0f       	add	r26, r26
    1840:	bb 1f       	adc	r27, r27
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1842:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1844:	a9 2f       	mov	r26, r25
    1846:	a6 95       	lsr	r26
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	a1 70       	andi	r26, 0x01	; 1
    184c:	b0 70       	andi	r27, 0x00	; 0
    184e:	fd 01       	movw	r30, r26
    1850:	ee 0f       	add	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    185c:	a6 2f       	mov	r26, r22
    185e:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1860:	e9 2f       	mov	r30, r25
    1862:	e2 95       	swap	r30
    1864:	ef 70       	andi	r30, 0x0F	; 15
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	e1 70       	andi	r30, 0x01	; 1
    186a:	f0 70       	andi	r31, 0x00	; 0
    186c:	bf 01       	movw	r22, r30
    186e:	62 95       	swap	r22
    1870:	72 95       	swap	r23
    1872:	70 7f       	andi	r23, 0xF0	; 240
    1874:	76 27       	eor	r23, r22
    1876:	60 7f       	andi	r22, 0xF0	; 240
    1878:	76 27       	eor	r23, r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    187a:	ea 2f       	mov	r30, r26
    187c:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    187e:	69 2f       	mov	r22, r25
    1880:	62 95       	swap	r22
    1882:	66 95       	lsr	r22
    1884:	67 70       	andi	r22, 0x07	; 7
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	61 70       	andi	r22, 0x01	; 1
    188a:	70 70       	andi	r23, 0x00	; 0
    188c:	ab 01       	movw	r20, r22
    188e:	44 0f       	add	r20, r20
    1890:	55 1f       	adc	r21, r21
    1892:	42 95       	swap	r20
    1894:	52 95       	swap	r21
    1896:	50 7f       	andi	r21, 0xF0	; 240
    1898:	54 27       	eor	r21, r20
    189a:	40 7f       	andi	r20, 0xF0	; 240
    189c:	54 27       	eor	r21, r20
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    189e:	6e 2f       	mov	r22, r30
    18a0:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    18a2:	49 2f       	mov	r20, r25
    18a4:	42 95       	swap	r20
    18a6:	46 95       	lsr	r20
    18a8:	46 95       	lsr	r20
    18aa:	43 70       	andi	r20, 0x03	; 3
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	41 70       	andi	r20, 0x01	; 1
    18b0:	50 70       	andi	r21, 0x00	; 0
    18b2:	9a 01       	movw	r18, r20
    18b4:	00 24       	eor	r0, r0
    18b6:	36 95       	lsr	r19
    18b8:	27 95       	ror	r18
    18ba:	07 94       	ror	r0
    18bc:	36 95       	lsr	r19
    18be:	27 95       	ror	r18
    18c0:	07 94       	ror	r0
    18c2:	32 2f       	mov	r19, r18
    18c4:	20 2d       	mov	r18, r0
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    18c6:	26 2b       	or	r18, r22
    18c8:	20 93 f9 02 	sts	0x02F9, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    18cc:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    18ce:	81 95       	neg	r24
    18d0:	89 27       	eor	r24, r25
    18d2:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    18d4:	89 27       	eor	r24, r25
    18d6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    18da:	ed ed       	ldi	r30, 0xDD	; 221
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    18e0:	90 91 70 03 	lds	r25, 0x0370
    18e4:	96 95       	lsr	r25
    18e6:	96 95       	lsr	r25
    18e8:	96 95       	lsr	r25
    18ea:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    18ec:	91 95       	neg	r25
    18ee:	80 81       	ld	r24, Z
    18f0:	89 27       	eor	r24, r25
    18f2:	80 71       	andi	r24, 0x10	; 16
    18f4:	82 27       	eor	r24, r18
    18f6:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    18f8:	e5 ef       	ldi	r30, 0xF5	; 245
    18fa:	f2 e0       	ldi	r31, 0x02	; 2
    18fc:	80 81       	ld	r24, Z
    18fe:	98 27       	eor	r25, r24
    1900:	91 70       	andi	r25, 0x01	; 1
    1902:	89 27       	eor	r24, r25
    1904:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1906:	0e 94 30 0b 	call	0x1660	; 0x1660 <update_octave_range>
	
	//parse LFO data
	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    190a:	80 91 6f 03 	lds	r24, 0x036F
    190e:	88 23       	and	r24, r24
    1910:	64 f5       	brge	.+88     	; 0x196a <refresh_synth+0x168>
		
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1912:	80 58       	subi	r24, 0x80	; 128
    1914:	80 93 6f 03 	sts	0x036F, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1918:	80 91 fe 02 	lds	r24, 0x02FE
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	80 93 fe 02 	sts	0x02FE, r24
    1922:	85 30       	cpi	r24, 0x05	; 5
    1924:	11 f4       	brne	.+4      	; 0x192a <refresh_synth+0x128>
    1926:	10 92 fe 02 	sts	0x02FE, r1
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    192a:	a0 91 fe 02 	lds	r26, 0x02FE
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	aa 0f       	add	r26, r26
    1932:	bb 1f       	adc	r27, r27
    1934:	a2 5e       	subi	r26, 0xE2	; 226
    1936:	bd 4f       	sbci	r27, 0xFD	; 253
    1938:	8c 91       	ld	r24, X
    193a:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    193c:	ed ed       	ldi	r30, 0xDD	; 221
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	80 62       	ori	r24, 0x20	; 32
    1944:	80 83       	st	Z, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1946:	80 81       	ld	r24, Z
    1948:	8f 7d       	andi	r24, 0xDF	; 223
    194a:	80 83       	st	Z, r24
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	11 96       	adiw	r26, 0x01	; 1
    1952:	0c 90       	ld	r0, X
    1954:	02 c0       	rjmp	.+4      	; 0x195a <refresh_synth+0x158>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	0a 94       	dec	r0
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <refresh_synth+0x154>
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    195e:	90 91 f6 02 	lds	r25, 0x02F6
    1962:	9f 70       	andi	r25, 0x0F	; 15
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1964:	89 2b       	or	r24, r25
    1966:	80 93 f6 02 	sts	0x02F6, r24
		
		
	}
	
	update_patch_programmer();		
    196a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <update_patch_programmer>
				
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) //temporary tune button hack
    196e:	80 91 6f 03 	lds	r24, 0x036F
    1972:	98 2f       	mov	r25, r24
    1974:	92 95       	swap	r25
    1976:	96 95       	lsr	r25
    1978:	97 70       	andi	r25, 0x07	; 7
    197a:	90 ff       	sbrs	r25, 0
    197c:	3f c0       	rjmp	.+126    	; 0x19fc <refresh_synth+0x1fa>
		{ 
				
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle read switch state
    197e:	90 e2       	ldi	r25, 0x20	; 32
    1980:	89 27       	eor	r24, r25
    1982:	80 93 6f 03 	sts	0x036F, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1986:	87 e0       	ldi	r24, 0x07	; 7
    1988:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    198a:	cd ed       	ldi	r28, 0xDD	; 221
    198c:	d0 e0       	ldi	r29, 0x00	; 0
    198e:	88 81       	ld	r24, Y
    1990:	80 62       	ori	r24, 0x20	; 32
    1992:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1994:	88 81       	ld	r24, Y
    1996:	8f 7d       	andi	r24, 0xDF	; 223
    1998:	88 83       	st	Y, r24
		DATA_BUS = 0;
    199a:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    199c:	8f e0       	ldi	r24, 0x0F	; 15
    199e:	6f e0       	ldi	r22, 0x0F	; 15
    19a0:	7e e5       	ldi	r23, 0x5E	; 94
    19a2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <set_vco_init_cv>
    19a6:	90 93 66 03 	sts	0x0366, r25
    19aa:	80 93 65 03 	sts	0x0365, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    19ae:	80 ef       	ldi	r24, 0xF0	; 240
    19b0:	6f e0       	ldi	r22, 0x0F	; 15
    19b2:	7e e5       	ldi	r23, 0x5E	; 94
    19b4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <set_vco_init_cv>
    19b8:	90 93 64 03 	sts	0x0364, r25
    19bc:	80 93 63 03 	sts	0x0363, r24

		tune_8ths(VCO1);
    19c0:	8f e0       	ldi	r24, 0x0F	; 15
    19c2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <tune_8ths>
		tune_8ths(VCO2);
    19c6:	80 ef       	ldi	r24, 0xF0	; 240
    19c8:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <tune_8ths>
		tune_filter();
    19cc:	0e 94 86 10 	call	0x210c	; 0x210c <tune_filter>
		save_tuning_tables();
    19d0:	0e 94 54 12 	call	0x24a8	; 0x24a8 <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19d4:	8f e4       	ldi	r24, 0x4F	; 79
    19d6:	93 ec       	ldi	r25, 0xC3	; 195
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <refresh_synth+0x1d6>
    19dc:	00 c0       	rjmp	.+0      	; 0x19de <refresh_synth+0x1dc>
    19de:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
    19e0:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    19e2:	88 81       	ld	r24, Y
    19e4:	80 62       	ori	r24, 0x20	; 32
    19e6:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    19e8:	88 81       	ld	r24, Y
    19ea:	8f 7d       	andi	r24, 0xDF	; 223
    19ec:	88 83       	st	Y, r24
		DATA_BUS = 0;
    19ee:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    19f0:	80 91 f6 02 	lds	r24, 0x02F6
    19f4:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    19f6:	80 68       	ori	r24, 0x80	; 128
    19f8:	80 93 f6 02 	sts	0x02F6, r24
				
		}
		
		
	
}
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1a02:	88 ed       	ldi	r24, 0xD8	; 216
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1a0e:	81 ee       	ldi	r24, 0xE1	; 225
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1a1a:	82 ee       	ldi	r24, 0xE2	; 226
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1a26:	8a ea       	ldi	r24, 0xAA	; 170
    1a28:	92 e0       	ldi	r25, 0x02	; 2
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1a32:	8a ed       	ldi	r24, 0xDA	; 218
    1a34:	91 e0       	ldi	r25, 0x01	; 1
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1a3e:	8f ed       	ldi	r24, 0xDF	; 223
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1a4a:	80 ee       	ldi	r24, 0xE0	; 224
    1a4c:	91 e0       	ldi	r25, 0x01	; 1
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1a56:	81 ed       	ldi	r24, 0xD1	; 209
    1a58:	91 e0       	ldi	r25, 0x01	; 1
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1a62:	86 ed       	ldi	r24, 0xD6	; 214
    1a64:	91 e0       	ldi	r25, 0x01	; 1
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1a6e:	82 ed       	ldi	r24, 0xD2	; 210
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1a7a:	83 ed       	ldi	r24, 0xD3	; 211
    1a7c:	91 e0       	ldi	r25, 0x01	; 1
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1a86:	84 ed       	ldi	r24, 0xD4	; 212
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	6f ef       	ldi	r22, 0xFF	; 255
    1a8c:	7f e3       	ldi	r23, 0x3F	; 63
    1a8e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1a92:	85 ed       	ldi	r24, 0xD5	; 213
    1a94:	91 e0       	ldi	r25, 0x01	; 1
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1a9e:	89 ed       	ldi	r24, 0xD9	; 217
    1aa0:	91 e0       	ldi	r25, 0x01	; 1
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1aaa:	8e ec       	ldi	r24, 0xCE	; 206
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1ab6:	8c ec       	ldi	r24, 0xCC	; 204
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1ac2:	8a ec       	ldi	r24, 0xCA	; 202
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	6f ef       	ldi	r22, 0xFF	; 255
    1ac8:	7f e3       	ldi	r23, 0x3F	; 63
    1aca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1ace:	88 ec       	ldi	r24, 0xC8	; 200
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1ada:	80 ed       	ldi	r24, 0xD0	; 208
    1adc:	91 e0       	ldi	r25, 0x01	; 1
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1ae6:	83 ee       	ldi	r24, 0xE3	; 227
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1af2:	84 ee       	ldi	r24, 0xE4	; 228
    1af4:	91 e0       	ldi	r25, 0x01	; 1
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}	
    1afe:	08 95       	ret

00001b00 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1b00:	2f 92       	push	r2
    1b02:	3f 92       	push	r3
    1b04:	4f 92       	push	r4
    1b06:	5f 92       	push	r5
    1b08:	6f 92       	push	r6
    1b0a:	7f 92       	push	r7
    1b0c:	8f 92       	push	r8
    1b0e:	9f 92       	push	r9
    1b10:	af 92       	push	r10
    1b12:	bf 92       	push	r11
    1b14:	cf 92       	push	r12
    1b16:	df 92       	push	r13
    1b18:	ef 92       	push	r14
    1b1a:	ff 92       	push	r15
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	2c 97       	sbiw	r28, 0x0c	; 12
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	08 2f       	mov	r16, r24
    1b36:	78 87       	std	Y+8, r23	; 0x08
    1b38:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1b3a:	80 91 6b 03 	lds	r24, 0x036B
    1b3e:	83 60       	ori	r24, 0x03	; 3
    1b40:	80 93 6b 03 	sts	0x036B, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1b44:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1b48:	10 92 6a 03 	sts	0x036A, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1b4c:	0f 30       	cpi	r16, 0x0F	; 15
    1b4e:	e1 f4       	brne	.+56     	; 0x1b88 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1b50:	0f 2e       	mov	r0, r31
    1b52:	f6 ee       	ldi	r31, 0xE6	; 230
    1b54:	4f 2e       	mov	r4, r31
    1b56:	f1 e0       	ldi	r31, 0x01	; 1
    1b58:	5f 2e       	mov	r5, r31
    1b5a:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1b5c:	0f 2e       	mov	r0, r31
    1b5e:	fe ed       	ldi	r31, 0xDE	; 222
    1b60:	2f 2e       	mov	r2, r31
    1b62:	f1 e0       	ldi	r31, 0x01	; 1
    1b64:	3f 2e       	mov	r3, r31
    1b66:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1b68:	23 ee       	ldi	r18, 0xE3	; 227
    1b6a:	31 e0       	ldi	r19, 0x01	; 1
    1b6c:	3a 83       	std	Y+2, r19	; 0x02
    1b6e:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1b70:	0f 2e       	mov	r0, r31
    1b72:	fc ed       	ldi	r31, 0xDC	; 220
    1b74:	8f 2e       	mov	r8, r31
    1b76:	f1 e0       	ldi	r31, 0x01	; 1
    1b78:	9f 2e       	mov	r9, r31
    1b7a:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1b7c:	82 e7       	ldi	r24, 0x72	; 114
    1b7e:	96 e0       	ldi	r25, 0x06	; 6
    1b80:	9a 87       	std	Y+10, r25	; 0x0a
    1b82:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	1b c0       	rjmp	.+54     	; 0x1bbe <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1b88:	0f 2e       	mov	r0, r31
    1b8a:	f5 ee       	ldi	r31, 0xE5	; 229
    1b8c:	4f 2e       	mov	r4, r31
    1b8e:	f1 e0       	ldi	r31, 0x01	; 1
    1b90:	5f 2e       	mov	r5, r31
    1b92:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1b94:	0f 2e       	mov	r0, r31
    1b96:	f7 ed       	ldi	r31, 0xD7	; 215
    1b98:	2f 2e       	mov	r2, r31
    1b9a:	f1 e0       	ldi	r31, 0x01	; 1
    1b9c:	3f 2e       	mov	r3, r31
    1b9e:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1ba0:	e4 ee       	ldi	r30, 0xE4	; 228
    1ba2:	f1 e0       	ldi	r31, 0x01	; 1
    1ba4:	fa 83       	std	Y+2, r31	; 0x02
    1ba6:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1ba8:	0f 2e       	mov	r0, r31
    1baa:	fd ed       	ldi	r31, 0xDD	; 221
    1bac:	8f 2e       	mov	r8, r31
    1bae:	f1 e0       	ldi	r31, 0x01	; 1
    1bb0:	9f 2e       	mov	r9, r31
    1bb2:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1bb4:	20 e7       	ldi	r18, 0x70	; 112
    1bb6:	36 e0       	ldi	r19, 0x06	; 6
    1bb8:	3a 87       	std	Y+10, r19	; 0x0a
    1bba:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1bbc:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1bbe:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1bc0:	ed ed       	ldi	r30, 0xDD	; 221
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	80 64       	ori	r24, 0x40	; 64
    1bc8:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1bca:	80 81       	ld	r24, Z
    1bcc:	8f 7b       	andi	r24, 0xBF	; 191
    1bce:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1bd0:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1bd2:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1bd4:	84 b5       	in	r24, 0x24	; 36
    1bd6:	8f 60       	ori	r24, 0x0F	; 15
    1bd8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1bde:	ee e6       	ldi	r30, 0x6E	; 110
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	90 81       	ld	r25, Z
    1be4:	92 60       	ori	r25, 0x02	; 2
    1be6:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1be8:	80 93 6c 03 	sts	0x036C, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1bec:	8d e0       	ldi	r24, 0x0D	; 13
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1bf4:	80 2f       	mov	r24, r16
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	8c 01       	movw	r16, r24
    1bfa:	0f 5f       	subi	r16, 0xFF	; 255
    1bfc:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1bfe:	0f 2e       	mov	r0, r31
    1c00:	f8 ed       	ldi	r31, 0xD8	; 216
    1c02:	ef 2e       	mov	r14, r31
    1c04:	f1 e0       	ldi	r31, 0x01	; 1
    1c06:	ff 2e       	mov	r15, r31
    1c08:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1c0a:	0f 2e       	mov	r0, r31
    1c0c:	f4 ed       	ldi	r31, 0xD4	; 212
    1c0e:	cf 2e       	mov	r12, r31
    1c10:	f1 e0       	ldi	r31, 0x01	; 1
    1c12:	df 2e       	mov	r13, r31
    1c14:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1c16:	0f 2e       	mov	r0, r31
    1c18:	fa ec       	ldi	r31, 0xCA	; 202
    1c1a:	af 2e       	mov	r10, r31
    1c1c:	f1 e0       	ldi	r31, 0x01	; 1
    1c1e:	bf 2e       	mov	r11, r31
    1c20:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1c22:	0f 2e       	mov	r0, r31
    1c24:	fb ec       	ldi	r31, 0xCB	; 203
    1c26:	6f 2e       	mov	r6, r31
    1c28:	f1 e0       	ldi	r31, 0x01	; 1
    1c2a:	7f 2e       	mov	r7, r31
    1c2c:	f0 2d       	mov	r31, r0
    1c2e:	e0 e0       	ldi	r30, 0x00	; 0
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	fc 87       	std	Y+12, r31	; 0x0c
    1c34:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1c36:	21 e0       	ldi	r18, 0x01	; 1
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	0b 80       	ldd	r0, Y+3	; 0x03
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <set_vco_init_cv+0x142>
    1c3e:	22 0f       	add	r18, r18
    1c40:	33 1f       	adc	r19, r19
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <set_vco_init_cv+0x13e>
    1c46:	3e 83       	std	Y+6, r19	; 0x06
    1c48:	2d 83       	std	Y+5, r18	; 0x05
    1c4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c4e:	82 2b       	or	r24, r18
    1c50:	93 2b       	or	r25, r19
    1c52:	9c 87       	std	Y+12, r25	; 0x0c
    1c54:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1c56:	c4 01       	movw	r24, r8
    1c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
		
		count_finished = FALSE;
    1c60:	10 92 6a 03 	sts	0x036A, r1
		period_counter = 0;
    1c64:	10 92 6d 03 	sts	0x036D, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1c68:	8f e0       	ldi	r24, 0x0F	; 15
    1c6a:	e8 e1       	ldi	r30, 0x18	; 24
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	a8 95       	wdr
    1c74:	e0 93 60 00 	sts	0x0060, r30
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1c7e:	80 91 6a 03 	lds	r24, 0x036A
    1c82:	88 23       	and	r24, r24
    1c84:	89 f5       	brne	.+98     	; 0x1ce8 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1c86:	c8 01       	movw	r24, r16
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	0e 94 24 02 	call	0x448	; 0x448 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1c8e:	c4 01       	movw	r24, r8
    1c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c94:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1c98:	c1 01       	movw	r24, r2
    1c9a:	6f ef       	ldi	r22, 0xFF	; 255
    1c9c:	7f e3       	ldi	r23, 0x3F	; 63
    1c9e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1ca2:	c7 01       	movw	r24, r14
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1cac:	c6 01       	movw	r24, r12
    1cae:	6f ef       	ldi	r22, 0xFF	; 255
    1cb0:	7f e3       	ldi	r23, 0x3F	; 63
    1cb2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1cb6:	c5 01       	movw	r24, r10
    1cb8:	6f ef       	ldi	r22, 0xFF	; 255
    1cba:	7f e3       	ldi	r23, 0x3F	; 63
    1cbc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1cc0:	c3 01       	movw	r24, r6
    1cc2:	6f ef       	ldi	r22, 0xFF	; 255
    1cc4:	7f e3       	ldi	r23, 0x3F	; 63
    1cc6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cce:	6f ef       	ldi	r22, 0xFF	; 255
    1cd0:	7f e3       	ldi	r23, 0x3F	; 63
    1cd2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1cd6:	c2 01       	movw	r24, r4
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1ce0:	80 91 6a 03 	lds	r24, 0x036A
    1ce4:	88 23       	and	r24, r24
    1ce6:	79 f2       	breq	.-98     	; 0x1c86 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1ce8:	88 e1       	ldi	r24, 0x18	; 24
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	80 93 60 00 	sts	0x0060, r24
    1cf2:	10 92 60 00 	sts	0x0060, r1
    1cf6:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1cf8:	80 91 68 03 	lds	r24, 0x0368
    1cfc:	90 91 69 03 	lds	r25, 0x0369
    1d00:	ef 81       	ldd	r30, Y+7	; 0x07
    1d02:	f8 85       	ldd	r31, Y+8	; 0x08
    1d04:	e8 17       	cp	r30, r24
    1d06:	f9 07       	cpc	r31, r25
    1d08:	20 f0       	brcs	.+8      	; 0x1d12 <set_vco_init_cv+0x212>
    1d0a:	80 91 a7 02 	lds	r24, 0x02A7
    1d0e:	88 23       	and	r24, r24
    1d10:	51 f4       	brne	.+20     	; 0x1d26 <set_vco_init_cv+0x226>
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	9e 81       	ldd	r25, Y+6	; 0x06
    1d16:	80 95       	com	r24
    1d18:	90 95       	com	r25
    1d1a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d1c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d1e:	28 23       	and	r18, r24
    1d20:	39 23       	and	r19, r25
    1d22:	3c 87       	std	Y+12, r19	; 0x0c
    1d24:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	80 93 a7 02 	sts	0x02A7, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8b 83       	std	Y+3, r24	; 0x03
    1d36:	ef ef       	ldi	r30, 0xFF	; 255
    1d38:	8f 3f       	cpi	r24, 0xFF	; 255
    1d3a:	9e 07       	cpc	r25, r30
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <set_vco_init_cv+0x240>
    1d3e:	7b cf       	rjmp	.-266    	; 0x1c36 <set_vco_init_cv+0x136>
    1d40:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d42:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d44:	3e 83       	std	Y+6, r19	; 0x06
    1d46:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1d48:	88 ec       	ldi	r24, 0xC8	; 200
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    1d54:	89 ec       	ldi	r24, 0xC9	; 201
    1d56:	91 e0       	ldi	r25, 0x01	; 1
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	70 e0       	ldi	r23, 0x00	; 0
    1d5c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    1d60:	84 ed       	ldi	r24, 0xD4	; 212
    1d62:	91 e0       	ldi	r25, 0x01	; 1
    1d64:	60 e0       	ldi	r22, 0x00	; 0
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    1d6c:	88 ed       	ldi	r24, 0xD8	; 216
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    1d78:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1d7a:	ee e6       	ldi	r30, 0x6E	; 110
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	8d 7f       	andi	r24, 0xFD	; 253
    1d82:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    1d84:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	6d 81       	ldd	r22, Y+5	; 0x05
    1d8c:	7e 81       	ldd	r23, Y+6	; 0x06
    1d8e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	2c 96       	adiw	r28, 0x0c	; 12
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	ef 90       	pop	r14
    1dae:	df 90       	pop	r13
    1db0:	cf 90       	pop	r12
    1db2:	bf 90       	pop	r11
    1db4:	af 90       	pop	r10
    1db6:	9f 90       	pop	r9
    1db8:	8f 90       	pop	r8
    1dba:	7f 90       	pop	r7
    1dbc:	6f 90       	pop	r6
    1dbe:	5f 90       	pop	r5
    1dc0:	4f 90       	pop	r4
    1dc2:	3f 90       	pop	r3
    1dc4:	2f 90       	pop	r2
    1dc6:	08 95       	ret

00001dc8 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1dc8:	2f 92       	push	r2
    1dca:	3f 92       	push	r3
    1dcc:	4f 92       	push	r4
    1dce:	5f 92       	push	r5
    1dd0:	6f 92       	push	r6
    1dd2:	7f 92       	push	r7
    1dd4:	8f 92       	push	r8
    1dd6:	9f 92       	push	r9
    1dd8:	af 92       	push	r10
    1dda:	bf 92       	push	r11
    1ddc:	cf 92       	push	r12
    1dde:	df 92       	push	r13
    1de0:	ef 92       	push	r14
    1de2:	ff 92       	push	r15
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	c0 54       	subi	r28, 0x40	; 64
    1df2:	d0 40       	sbci	r29, 0x00	; 0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    1e00:	de 01       	movw	r26, r28
    1e02:	11 96       	adiw	r26, 0x01	; 1
    1e04:	e8 e2       	ldi	r30, 0x28	; 40
    1e06:	f2 e0       	ldi	r31, 0x02	; 2
    1e08:	80 e3       	ldi	r24, 0x30	; 48
    1e0a:	01 90       	ld	r0, Z+
    1e0c:	0d 92       	st	X+, r0
    1e0e:	81 50       	subi	r24, 0x01	; 1
    1e10:	e1 f7       	brne	.-8      	; 0x1e0a <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    1e12:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1e16:	0f 30       	cpi	r16, 0x0F	; 15
    1e18:	11 f5       	brne	.+68     	; 0x1e5e <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    1e1a:	40 90 65 03 	lds	r4, 0x0365
    1e1e:	50 90 66 03 	lds	r5, 0x0366
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1e22:	0f 2e       	mov	r0, r31
    1e24:	f6 ee       	ldi	r31, 0xE6	; 230
    1e26:	8f 2e       	mov	r8, r31
    1e28:	f1 e0       	ldi	r31, 0x01	; 1
    1e2a:	9f 2e       	mov	r9, r31
    1e2c:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    1e2e:	0f 2e       	mov	r0, r31
    1e30:	fe ed       	ldi	r31, 0xDE	; 222
    1e32:	2f 2e       	mov	r2, r31
    1e34:	f1 e0       	ldi	r31, 0x01	; 1
    1e36:	3f 2e       	mov	r3, r31
    1e38:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    1e3a:	23 ee       	ldi	r18, 0xE3	; 227
    1e3c:	31 e0       	ldi	r19, 0x01	; 1
    1e3e:	3a ab       	sts	0x5a, r19
    1e40:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1e42:	0f 2e       	mov	r0, r31
    1e44:	fc ed       	ldi	r31, 0xDC	; 220
    1e46:	6f 2e       	mov	r6, r31
    1e48:	f1 e0       	ldi	r31, 0x01	; 1
    1e4a:	7f 2e       	mov	r7, r31
    1e4c:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    1e4e:	01 e4       	ldi	r16, 0x41	; 65
    1e50:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    1e52:	cc 24       	eor	r12, r12
    1e54:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    1e56:	ee 24       	eor	r14, r14
    1e58:	68 94       	set
    1e5a:	e1 f8       	bld	r14, 1
    1e5c:	22 c0       	rjmp	.+68     	; 0x1ea2 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    1e5e:	40 90 63 03 	lds	r4, 0x0363
    1e62:	50 90 64 03 	lds	r5, 0x0364
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1e66:	0f 2e       	mov	r0, r31
    1e68:	f5 ee       	ldi	r31, 0xE5	; 229
    1e6a:	8f 2e       	mov	r8, r31
    1e6c:	f1 e0       	ldi	r31, 0x01	; 1
    1e6e:	9f 2e       	mov	r9, r31
    1e70:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    1e72:	0f 2e       	mov	r0, r31
    1e74:	f7 ed       	ldi	r31, 0xD7	; 215
    1e76:	2f 2e       	mov	r2, r31
    1e78:	f1 e0       	ldi	r31, 0x01	; 1
    1e7a:	3f 2e       	mov	r3, r31
    1e7c:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    1e7e:	44 ee       	ldi	r20, 0xE4	; 228
    1e80:	51 e0       	ldi	r21, 0x01	; 1
    1e82:	5a ab       	sts	0x5a, r21
    1e84:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1e86:	0f 2e       	mov	r0, r31
    1e88:	fd ed       	ldi	r31, 0xDD	; 221
    1e8a:	6f 2e       	mov	r6, r31
    1e8c:	f1 e0       	ldi	r31, 0x01	; 1
    1e8e:	7f 2e       	mov	r7, r31
    1e90:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    1e92:	0f e1       	ldi	r16, 0x1F	; 31
    1e94:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    1e96:	cc 24       	eor	r12, r12
    1e98:	68 94       	set
    1e9a:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    1e9c:	ee 24       	eor	r14, r14
    1e9e:	68 94       	set
    1ea0:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    1ea2:	c3 01       	movw	r24, r6
    1ea4:	b2 01       	movw	r22, r4
    1ea6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    1eaa:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1eac:	ed ed       	ldi	r30, 0xDD	; 221
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 64       	ori	r24, 0x40	; 64
    1eb4:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1eb6:	80 81       	ld	r24, Z
    1eb8:	8f 7b       	andi	r24, 0xBF	; 191
    1eba:	80 83       	st	Z, r24
		DATA_BUS = 0;
    1ebc:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    1ebe:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	80 93 6c 03 	sts	0x036C, r24
		
		compare_match_counter = 0;	
    1ec6:	10 92 67 03 	sts	0x0367, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1eca:	8c 2d       	mov	r24, r12
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	24 e6       	ldi	r18, 0x64	; 100
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	82 9f       	mul	r24, r18
    1ed4:	d0 01       	movw	r26, r0
    1ed6:	83 9f       	mul	r24, r19
    1ed8:	b0 0d       	add	r27, r0
    1eda:	92 9f       	mul	r25, r18
    1edc:	b0 0d       	add	r27, r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	bc ab       	sts	0x5c, r27
    1ee2:	ab ab       	sts	0x5b, r26
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	31 96       	adiw	r30, 0x01	; 1
    1ee8:	fc af       	sts	0x7c, r31
    1eea:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    1eec:	98 01       	movw	r18, r16
    1eee:	2e 5f       	subi	r18, 0xFE	; 254
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef2:	21 96       	adiw	r28, 0x01	; 1
    1ef4:	3f af       	sts	0x7f, r19
    1ef6:	2e af       	sts	0x7e, r18
    1ef8:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1efa:	1e ae       	sts	0xbe, r17
    1efc:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1efe:	0f 2e       	mov	r0, r31
    1f00:	f8 ed       	ldi	r31, 0xD8	; 216
    1f02:	ef 2e       	mov	r14, r31
    1f04:	f1 e0       	ldi	r31, 0x01	; 1
    1f06:	ff 2e       	mov	r15, r31
    1f08:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    1f0a:	0f 2e       	mov	r0, r31
    1f0c:	f4 ed       	ldi	r31, 0xD4	; 212
    1f0e:	cf 2e       	mov	r12, r31
    1f10:	f1 e0       	ldi	r31, 0x01	; 1
    1f12:	df 2e       	mov	r13, r31
    1f14:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1f16:	0f 2e       	mov	r0, r31
    1f18:	fa ec       	ldi	r31, 0xCA	; 202
    1f1a:	af 2e       	mov	r10, r31
    1f1c:	f1 e0       	ldi	r31, 0x01	; 1
    1f1e:	bf 2e       	mov	r11, r31
    1f20:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    1f22:	eb ad       	sts	0x6b, r30
    1f24:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    1f26:	80 81       	ld	r24, Z
    1f28:	80 93 6c 03 	sts	0x036C, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1f2c:	84 b5       	in	r24, 0x24	; 36
    1f2e:	8f 60       	ori	r24, 0x0F	; 15
    1f30:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    1f36:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    1f38:	4d ad       	sts	0x6d, r20
    1f3a:	5e ad       	sts	0x6e, r21
    1f3c:	43 30       	cpi	r20, 0x03	; 3
    1f3e:	51 05       	cpc	r21, r1
    1f40:	24 f4       	brge	.+8      	; 0x1f4a <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	80 93 6b 03 	sts	0x036B, r24
    1f48:	03 c0       	rjmp	.+6      	; 0x1f50 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	80 93 6b 03 	sts	0x036B, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    1f50:	81 81       	ldd	r24, Z+1	; 0x01
    1f52:	92 81       	ldd	r25, Z+2	; 0x02
    1f54:	9a af       	sts	0x7a, r25
    1f56:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1f58:	ad e0       	ldi	r26, 0x0D	; 13
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	be ab       	sts	0x5e, r27
    1f5e:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    1f60:	00 e0       	ldi	r16, 0x00	; 0
    1f62:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    1f64:	e1 e0       	ldi	r30, 0x01	; 1
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	0d a8       	sts	0x8d, r16
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <tune_8ths+0x1a8>
    1f6c:	ee 0f       	add	r30, r30
    1f6e:	ff 1f       	adc	r31, r31
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <tune_8ths+0x1a4>
    1f74:	f8 af       	sts	0x78, r31
    1f76:	ef ab       	sts	0x5f, r30
    1f78:	0e 2b       	or	r16, r30
    1f7a:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    1f7c:	ae e6       	ldi	r26, 0x6E	; 110
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	8c 91       	ld	r24, X
    1f82:	8d 7f       	andi	r24, 0xFD	; 253
    1f84:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1f86:	c4 01       	movw	r24, r8
    1f88:	b8 01       	movw	r22, r16
    1f8a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
    1f8e:	e3 ef       	ldi	r30, 0xF3	; 243
    1f90:	f1 e0       	ldi	r31, 0x01	; 1
    1f92:	31 97       	sbiw	r30, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <tune_8ths+0x1ca>
    1f96:	00 c0       	rjmp	.+0      	; 0x1f98 <tune_8ths+0x1d0>
    1f98:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1f9a:	ae e6       	ldi	r26, 0x6E	; 110
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	8c 91       	ld	r24, X
    1fa0:	82 60       	ori	r24, 0x02	; 2
    1fa2:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    1fa4:	10 92 6a 03 	sts	0x036A, r1
				period_counter = 0;
    1fa8:	10 92 6d 03 	sts	0x036D, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    1fac:	e8 e1       	ldi	r30, 0x18	; 24
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	2f e0       	ldi	r18, 0x0F	; 15
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	a8 95       	wdr
    1fb8:	e0 93 60 00 	sts	0x0060, r30
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    1fc2:	80 91 6a 03 	lds	r24, 0x036A
    1fc6:	88 23       	and	r24, r24
    1fc8:	81 f5       	brne	.+96     	; 0x202a <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1fca:	80 91 6c 03 	lds	r24, 0x036C
    1fce:	4b a9       	sts	0x4b, r20
    1fd0:	5c a9       	sts	0x4c, r21
    1fd2:	48 0f       	add	r20, r24
    1fd4:	51 1d       	adc	r21, r1
    1fd6:	ca 01       	movw	r24, r20
    1fd8:	60 e0       	ldi	r22, 0x00	; 0
    1fda:	0e 94 24 02 	call	0x448	; 0x448 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    1fde:	c3 01       	movw	r24, r6
    1fe0:	b2 01       	movw	r22, r4
    1fe2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1fe6:	c4 01       	movw	r24, r8
    1fe8:	b8 01       	movw	r22, r16
    1fea:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1fee:	c7 01       	movw	r24, r14
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    1ff8:	c6 01       	movw	r24, r12
    1ffa:	6f ef       	ldi	r22, 0xFF	; 255
    1ffc:	7f e3       	ldi	r23, 0x3F	; 63
    1ffe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2002:	c5 01       	movw	r24, r10
    2004:	6f ef       	ldi	r22, 0xFF	; 255
    2006:	7f e3       	ldi	r23, 0x3F	; 63
    2008:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    200c:	c1 01       	movw	r24, r2
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	70 e2       	ldi	r23, 0x20	; 32
    2012:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    2016:	89 a9       	sts	0x49, r24
    2018:	9a a9       	sts	0x4a, r25
    201a:	6f ef       	ldi	r22, 0xFF	; 255
    201c:	7f e3       	ldi	r23, 0x3F	; 63
    201e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2022:	80 91 6a 03 	lds	r24, 0x036A
    2026:	88 23       	and	r24, r24
    2028:	81 f2       	breq	.-96     	; 0x1fca <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    202a:	58 e1       	ldi	r21, 0x18	; 24
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	50 93 60 00 	sts	0x0060, r21
    2034:	10 92 60 00 	sts	0x0060, r1
    2038:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    203a:	80 91 68 03 	lds	r24, 0x0368
    203e:	90 91 69 03 	lds	r25, 0x0369
    2042:	a9 ad       	sts	0x69, r26
    2044:	ba ad       	sts	0x6a, r27
    2046:	a8 17       	cp	r26, r24
    2048:	b9 07       	cpc	r27, r25
    204a:	50 f0       	brcs	.+20     	; 0x2060 <tune_8ths+0x298>
    204c:	80 91 a7 02 	lds	r24, 0x02A7
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	31 f4       	brne	.+12     	; 0x2060 <tune_8ths+0x298>
    2054:	8f a9       	sts	0x4f, r24
    2056:	98 ad       	sts	0x68, r25
    2058:	80 95       	com	r24
    205a:	90 95       	com	r25
    205c:	08 23       	and	r16, r24
    205e:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2060:	80 91 68 03 	lds	r24, 0x0368
    2064:	90 91 69 03 	lds	r25, 0x0369
    2068:	e9 ad       	sts	0x69, r30
    206a:	fa ad       	sts	0x6a, r31
    206c:	8e 17       	cp	r24, r30
    206e:	9f 07       	cpc	r25, r31
    2070:	21 f4       	brne	.+8      	; 0x207a <tune_8ths+0x2b2>
    2072:	80 91 a7 02 	lds	r24, 0x02A7
    2076:	81 30       	cpi	r24, 0x01	; 1
    2078:	71 f0       	breq	.+28     	; 0x2096 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    207a:	f1 e0       	ldi	r31, 0x01	; 1
    207c:	f0 93 a7 02 	sts	0x02A7, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2080:	2d a9       	sts	0x4d, r18
    2082:	3e a9       	sts	0x4e, r19
    2084:	21 50       	subi	r18, 0x01	; 1
    2086:	30 40       	sbci	r19, 0x00	; 0
    2088:	3e ab       	sts	0x5e, r19
    208a:	2d ab       	sts	0x5d, r18
    208c:	4f ef       	ldi	r20, 0xFF	; 255
    208e:	2f 3f       	cpi	r18, 0xFF	; 255
    2090:	34 07       	cpc	r19, r20
    2092:	09 f0       	breq	.+2      	; 0x2096 <tune_8ths+0x2ce>
    2094:	67 cf       	rjmp	.-306    	; 0x1f64 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    2096:	21 96       	adiw	r28, 0x01	; 1
    2098:	ae ad       	sts	0x6e, r26
    209a:	bf ad       	sts	0x6f, r27
    209c:	21 97       	sbiw	r28, 0x01	; 1
    209e:	0d 93       	st	X+, r16
    20a0:	1d 93       	st	X+, r17
    20a2:	21 96       	adiw	r28, 0x01	; 1
    20a4:	bf af       	sts	0x7f, r27
    20a6:	ae af       	sts	0x7e, r26
    20a8:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    20aa:	ee e6       	ldi	r30, 0x6E	; 110
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	8d 7f       	andi	r24, 0xFD	; 253
    20b2:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    20b4:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    20b6:	2d ad       	sts	0x6d, r18
    20b8:	3e ad       	sts	0x6e, r19
    20ba:	2f 5f       	subi	r18, 0xFF	; 255
    20bc:	3f 4f       	sbci	r19, 0xFF	; 255
    20be:	3e af       	sts	0x7e, r19
    20c0:	2d af       	sts	0x7d, r18
    20c2:	4b ad       	sts	0x6b, r20
    20c4:	5c ad       	sts	0x6c, r21
    20c6:	4d 5f       	subi	r20, 0xFD	; 253
    20c8:	5f 4f       	sbci	r21, 0xFF	; 255
    20ca:	5c af       	sts	0x7c, r21
    20cc:	4b af       	sts	0x7b, r20
    20ce:	20 31       	cpi	r18, 0x10	; 16
    20d0:	31 05       	cpc	r19, r1
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <tune_8ths+0x30e>
    20d4:	26 cf       	rjmp	.-436    	; 0x1f22 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		
		PORTF &= ~(1<<GATE); //turn gate off
    20d6:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    20d8:	c0 5c       	subi	r28, 0xC0	; 192
    20da:	df 4f       	sbci	r29, 0xFF	; 255
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	ff 90       	pop	r15
    20f0:	ef 90       	pop	r14
    20f2:	df 90       	pop	r13
    20f4:	cf 90       	pop	r12
    20f6:	bf 90       	pop	r11
    20f8:	af 90       	pop	r10
    20fa:	9f 90       	pop	r9
    20fc:	8f 90       	pop	r8
    20fe:	7f 90       	pop	r7
    2100:	6f 90       	pop	r6
    2102:	5f 90       	pop	r5
    2104:	4f 90       	pop	r4
    2106:	3f 90       	pop	r3
    2108:	2f 90       	pop	r2
    210a:	08 95       	ret

0000210c <tune_filter>:
	
void tune_filter(void) {
    210c:	2f 92       	push	r2
    210e:	3f 92       	push	r3
    2110:	4f 92       	push	r4
    2112:	5f 92       	push	r5
    2114:	6f 92       	push	r6
    2116:	7f 92       	push	r7
    2118:	8f 92       	push	r8
    211a:	9f 92       	push	r9
    211c:	af 92       	push	r10
    211e:	bf 92       	push	r11
    2120:	cf 92       	push	r12
    2122:	df 92       	push	r13
    2124:	ef 92       	push	r14
    2126:	ff 92       	push	r15
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	e9 97       	sbiw	r28, 0x39	; 57
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    2140:	de 01       	movw	r26, r28
    2142:	11 96       	adiw	r26, 0x01	; 1
    2144:	e8 e5       	ldi	r30, 0x58	; 88
    2146:	f2 e0       	ldi	r31, 0x02	; 2
    2148:	8d e2       	ldi	r24, 0x2D	; 45
    214a:	01 90       	ld	r0, Z+
    214c:	0d 92       	st	X+, r0
    214e:	81 50       	subi	r24, 0x01	; 1
    2150:	e1 f7       	brne	.-8      	; 0x214a <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2152:	88 ed       	ldi	r24, 0xD8	; 216
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    215e:	81 ee       	ldi	r24, 0xE1	; 225
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    216a:	82 ee       	ldi	r24, 0xE2	; 226
    216c:	91 e0       	ldi	r25, 0x01	; 1
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	70 e0       	ldi	r23, 0x00	; 0
    2172:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2176:	8a ea       	ldi	r24, 0xAA	; 170
    2178:	92 e0       	ldi	r25, 0x02	; 2
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2182:	8a ed       	ldi	r24, 0xDA	; 218
    2184:	91 e0       	ldi	r25, 0x01	; 1
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    218e:	8f ed       	ldi	r24, 0xDF	; 223
    2190:	91 e0       	ldi	r25, 0x01	; 1
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    219a:	80 ee       	ldi	r24, 0xE0	; 224
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    21a6:	81 ed       	ldi	r24, 0xD1	; 209
    21a8:	91 e0       	ldi	r25, 0x01	; 1
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    21b2:	86 ed       	ldi	r24, 0xD6	; 214
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	70 e0       	ldi	r23, 0x00	; 0
    21ba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    21be:	82 ed       	ldi	r24, 0xD2	; 210
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    21ca:	83 ed       	ldi	r24, 0xD3	; 211
    21cc:	91 e0       	ldi	r25, 0x01	; 1
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    21d6:	84 ed       	ldi	r24, 0xD4	; 212
    21d8:	91 e0       	ldi	r25, 0x01	; 1
    21da:	6f ef       	ldi	r22, 0xFF	; 255
    21dc:	7f e3       	ldi	r23, 0x3F	; 63
    21de:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    21e2:	85 ed       	ldi	r24, 0xD5	; 213
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	6f ef       	ldi	r22, 0xFF	; 255
    21e8:	7f e3       	ldi	r23, 0x3F	; 63
    21ea:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    21ee:	89 ed       	ldi	r24, 0xD9	; 217
    21f0:	91 e0       	ldi	r25, 0x01	; 1
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    21fa:	8e ec       	ldi	r24, 0xCE	; 206
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2206:	8c ec       	ldi	r24, 0xCC	; 204
    2208:	91 e0       	ldi	r25, 0x01	; 1
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2212:	8a ec       	ldi	r24, 0xCA	; 202
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	6f ef       	ldi	r22, 0xFF	; 255
    2218:	7f e3       	ldi	r23, 0x3F	; 63
    221a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    221e:	88 ec       	ldi	r24, 0xC8	; 200
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    222a:	80 ed       	ldi	r24, 0xD0	; 208
    222c:	91 e0       	ldi	r25, 0x01	; 1
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2236:	83 ee       	ldi	r24, 0xE3	; 227
    2238:	91 e0       	ldi	r25, 0x01	; 1
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2242:	84 ee       	ldi	r24, 0xE4	; 228
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    224e:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2250:	ed ed       	ldi	r30, 0xDD	; 221
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	80 64       	ori	r24, 0x40	; 64
    2258:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    225a:	80 81       	ld	r24, Z
    225c:	8f 7b       	andi	r24, 0xBF	; 191
    225e:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	80 93 6c 03 	sts	0x036C, r24
	PORTF |= (1<<GATE); //turn gate on
    2266:	89 9a       	sbi	0x11, 1	; 17
    2268:	9e 01       	movw	r18, r28
    226a:	2f 5f       	subi	r18, 0xFF	; 255
    226c:	3f 4f       	sbci	r19, 0xFF	; 255
    226e:	3d ab       	sts	0x5d, r19
    2270:	2c ab       	sts	0x5c, r18
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	93 e0       	ldi	r25, 0x03	; 3
    2276:	99 af       	sts	0x79, r25
    2278:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    227a:	1f aa       	sts	0x9f, r17
    227c:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    227e:	0f 2e       	mov	r0, r31
    2280:	f4 ed       	ldi	r31, 0xD4	; 212
    2282:	af 2e       	mov	r10, r31
    2284:	f1 e0       	ldi	r31, 0x01	; 1
    2286:	bf 2e       	mov	r11, r31
    2288:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    228a:	0f 2e       	mov	r0, r31
    228c:	f8 ed       	ldi	r31, 0xD8	; 216
    228e:	6f 2e       	mov	r6, r31
    2290:	f1 e0       	ldi	r31, 0x01	; 1
    2292:	7f 2e       	mov	r7, r31
    2294:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2296:	0f 2e       	mov	r0, r31
    2298:	f5 ed       	ldi	r31, 0xD5	; 213
    229a:	4f 2e       	mov	r4, r31
    229c:	f1 e0       	ldi	r31, 0x01	; 1
    229e:	5f 2e       	mov	r5, r31
    22a0:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    22a2:	0f 2e       	mov	r0, r31
    22a4:	fa ec       	ldi	r31, 0xCA	; 202
    22a6:	2f 2e       	mov	r2, r31
    22a8:	f1 e0       	ldi	r31, 0x01	; 1
    22aa:	3f 2e       	mov	r3, r31
    22ac:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    22ae:	ac a9       	sts	0x4c, r26
    22b0:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    22b2:	8c 91       	ld	r24, X
    22b4:	80 93 6c 03 	sts	0x036C, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    22b8:	84 b5       	in	r24, 0x24	; 36
    22ba:	8f 60       	ori	r24, 0x0F	; 15
    22bc:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    22c2:	ee e6       	ldi	r30, 0x6E	; 110
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	82 60       	ori	r24, 0x02	; 2
    22ca:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    22cc:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    22ce:	ee a9       	sts	0x4e, r30
    22d0:	ff a9       	sts	0x4f, r31
    22d2:	e2 30       	cpi	r30, 0x02	; 2
    22d4:	f1 05       	cpc	r31, r1
    22d6:	24 f4       	brge	.+8      	; 0x22e0 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	80 93 6b 03 	sts	0x036B, r24
    22de:	03 c0       	rjmp	.+6      	; 0x22e6 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    22e0:	82 e0       	ldi	r24, 0x02	; 2
    22e2:	80 93 6b 03 	sts	0x036B, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    22e6:	11 96       	adiw	r26, 0x01	; 1
    22e8:	2d 91       	ld	r18, X+
    22ea:	3c 91       	ld	r19, X
    22ec:	12 97       	sbiw	r26, 0x02	; 2
    22ee:	3b ab       	sts	0x5b, r19
    22f0:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    22f2:	8d e0       	ldi	r24, 0x0D	; 13
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9f a7       	lds	r25, 0x7f
    22f8:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    22fa:	ee 24       	eor	r14, r14
    22fc:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    22fe:	0f 2e       	mov	r0, r31
    2300:	f1 ed       	ldi	r31, 0xD1	; 209
    2302:	cf 2e       	mov	r12, r31
    2304:	f1 e0       	ldi	r31, 0x01	; 1
    2306:	df 2e       	mov	r13, r31
    2308:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    230a:	0f 2e       	mov	r0, r31
    230c:	f6 ed       	ldi	r31, 0xD6	; 214
    230e:	8f 2e       	mov	r8, r31
    2310:	f1 e0       	ldi	r31, 0x01	; 1
    2312:	9f 2e       	mov	r9, r31
    2314:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	fc 01       	movw	r30, r24
    231c:	0e a4       	lds	r16, 0xae
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <tune_filter+0x218>
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	0a 94       	dec	r0
    2326:	e2 f7       	brpl	.-8      	; 0x2320 <tune_filter+0x214>
    2328:	f9 ab       	sts	0x59, r31
    232a:	e8 ab       	sts	0x58, r30
    232c:	ee 2a       	or	r14, r30
    232e:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2330:	c5 01       	movw	r24, r10
    2332:	b7 01       	movw	r22, r14
    2334:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
    2338:	10 92 6a 03 	sts	0x036A, r1
			period_counter = 0;
    233c:	10 92 6d 03 	sts	0x036D, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2340:	8f e0       	ldi	r24, 0x0F	; 15
    2342:	28 e1       	ldi	r18, 0x18	; 24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	a8 95       	wdr
    234c:	20 93 60 00 	sts	0x0060, r18
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2356:	80 91 6a 03 	lds	r24, 0x036A
    235a:	88 23       	and	r24, r24
    235c:	b1 f5       	brne	.+108    	; 0x23ca <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    235e:	02 ed       	ldi	r16, 0xD2	; 210
    2360:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2362:	80 91 6c 03 	lds	r24, 0x036C
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	84 5d       	subi	r24, 0xD4	; 212
    236a:	9e 4f       	sbci	r25, 0xFE	; 254
    236c:	60 e0       	ldi	r22, 0x00	; 0
    236e:	0e 94 24 02 	call	0x448	; 0x448 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2372:	c5 01       	movw	r24, r10
    2374:	b7 01       	movw	r22, r14
    2376:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    237a:	c3 01       	movw	r24, r6
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2384:	c2 01       	movw	r24, r4
    2386:	6f ef       	ldi	r22, 0xFF	; 255
    2388:	7f e3       	ldi	r23, 0x3F	; 63
    238a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    238e:	c1 01       	movw	r24, r2
    2390:	6f ef       	ldi	r22, 0xFF	; 255
    2392:	7f e3       	ldi	r23, 0x3F	; 63
    2394:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    2398:	8e ec       	ldi	r24, 0xCE	; 206
    239a:	91 e0       	ldi	r25, 0x01	; 1
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    23a4:	c6 01       	movw	r24, r12
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	70 e0       	ldi	r23, 0x00	; 0
    23aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    23ae:	c4 01       	movw	r24, r8
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	70 e0       	ldi	r23, 0x00	; 0
    23b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    23b8:	c8 01       	movw	r24, r16
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    23c2:	80 91 6a 03 	lds	r24, 0x036A
    23c6:	88 23       	and	r24, r24
    23c8:	61 f2       	breq	.-104    	; 0x2362 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    23ca:	88 e1       	ldi	r24, 0x18	; 24
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	80 93 60 00 	sts	0x0060, r24
    23d4:	10 92 60 00 	sts	0x0060, r1
    23d8:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    23da:	80 91 68 03 	lds	r24, 0x0368
    23de:	90 91 69 03 	lds	r25, 0x0369
    23e2:	2a a9       	sts	0x4a, r18
    23e4:	3b a9       	sts	0x4b, r19
    23e6:	28 17       	cp	r18, r24
    23e8:	39 07       	cpc	r19, r25
    23ea:	50 f0       	brcs	.+20     	; 0x2400 <tune_filter+0x2f4>
    23ec:	80 91 a7 02 	lds	r24, 0x02A7
    23f0:	81 30       	cpi	r24, 0x01	; 1
    23f2:	31 f4       	brne	.+12     	; 0x2400 <tune_filter+0x2f4>
    23f4:	88 a9       	sts	0x48, r24
    23f6:	99 a9       	sts	0x49, r25
    23f8:	80 95       	com	r24
    23fa:	90 95       	com	r25
    23fc:	e8 22       	and	r14, r24
    23fe:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2400:	80 91 68 03 	lds	r24, 0x0368
    2404:	90 91 69 03 	lds	r25, 0x0369
    2408:	ea a9       	sts	0x4a, r30
    240a:	fb a9       	sts	0x4b, r31
    240c:	8e 17       	cp	r24, r30
    240e:	9f 07       	cpc	r25, r31
    2410:	21 f4       	brne	.+8      	; 0x241a <tune_filter+0x30e>
    2412:	80 91 a7 02 	lds	r24, 0x02A7
    2416:	81 30       	cpi	r24, 0x01	; 1
    2418:	71 f0       	breq	.+28     	; 0x2436 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	80 93 a7 02 	sts	0x02A7, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2420:	2e a5       	lds	r18, 0x6e
    2422:	3f a5       	lds	r19, 0x6f
    2424:	21 50       	subi	r18, 0x01	; 1
    2426:	30 40       	sbci	r19, 0x00	; 0
    2428:	3f a7       	lds	r19, 0x7f
    242a:	2e a7       	lds	r18, 0x7e
    242c:	8f ef       	ldi	r24, 0xFF	; 255
    242e:	2f 3f       	cpi	r18, 0xFF	; 255
    2430:	38 07       	cpc	r19, r24
    2432:	09 f0       	breq	.+2      	; 0x2436 <tune_filter+0x32a>
    2434:	70 cf       	rjmp	.-288    	; 0x2316 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2436:	ee a9       	sts	0x4e, r30
    2438:	ff a9       	sts	0x4f, r31
    243a:	31 96       	adiw	r30, 0x01	; 1
    243c:	ff ab       	sts	0x5f, r31
    243e:	ee ab       	sts	0x5e, r30
    2440:	c7 01       	movw	r24, r14
    2442:	80 96       	adiw	r24, 0x20	; 32
    2444:	e8 ad       	sts	0x68, r30
    2446:	f9 ad       	sts	0x69, r31
    2448:	81 93       	st	Z+, r24
    244a:	91 93       	st	Z+, r25
    244c:	f9 af       	sts	0x79, r31
    244e:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2450:	ee e6       	ldi	r30, 0x6E	; 110
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	8d 7f       	andi	r24, 0xFD	; 253
    2458:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    245a:	14 bc       	out	0x24, r1	; 36
    245c:	2c a9       	sts	0x4c, r18
    245e:	3d a9       	sts	0x4d, r19
    2460:	2d 5f       	subi	r18, 0xFD	; 253
    2462:	3f 4f       	sbci	r19, 0xFF	; 255
    2464:	3d ab       	sts	0x5d, r19
    2466:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2468:	8e a9       	sts	0x4e, r24
    246a:	9f a9       	sts	0x4f, r25
    246c:	8f 30       	cpi	r24, 0x0F	; 15
    246e:	91 05       	cpc	r25, r1
    2470:	09 f0       	breq	.+2      	; 0x2474 <tune_filter+0x368>
    2472:	1d cf       	rjmp	.-454    	; 0x22ae <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2474:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2476:	e9 96       	adiw	r28, 0x39	; 57
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	f8 94       	cli
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	cd bf       	out	0x3d, r28	; 61
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	ff 90       	pop	r15
    248c:	ef 90       	pop	r14
    248e:	df 90       	pop	r13
    2490:	cf 90       	pop	r12
    2492:	bf 90       	pop	r11
    2494:	af 90       	pop	r10
    2496:	9f 90       	pop	r9
    2498:	8f 90       	pop	r8
    249a:	7f 90       	pop	r7
    249c:	6f 90       	pop	r6
    249e:	5f 90       	pop	r5
    24a0:	4f 90       	pop	r4
    24a2:	3f 90       	pop	r3
    24a4:	2f 90       	pop	r2
    24a6:	08 95       	ret

000024a8 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    24a8:	8f ef       	ldi	r24, 0xFF	; 255
    24aa:	92 e0       	ldi	r25, 0x02	; 2
    24ac:	6c e0       	ldi	r22, 0x0C	; 12
    24ae:	76 e0       	ldi	r23, 0x06	; 6
    24b0:	40 e2       	ldi	r20, 0x20	; 32
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	0e 94 97 1a 	call	0x352e	; 0x352e <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    24b8:	81 e4       	ldi	r24, 0x41	; 65
    24ba:	93 e0       	ldi	r25, 0x03	; 3
    24bc:	6e e4       	ldi	r22, 0x4E	; 78
    24be:	76 e0       	ldi	r23, 0x06	; 6
    24c0:	42 e2       	ldi	r20, 0x22	; 34
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	0e 94 97 1a 	call	0x352e	; 0x352e <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    24c8:	8f e1       	ldi	r24, 0x1F	; 31
    24ca:	93 e0       	ldi	r25, 0x03	; 3
    24cc:	6c e2       	ldi	r22, 0x2C	; 44
    24ce:	76 e0       	ldi	r23, 0x06	; 6
    24d0:	42 e2       	ldi	r20, 0x22	; 34
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	0e 94 97 1a 	call	0x352e	; 0x352e <__eeupd_block_m6450a>
	
	
}
    24d8:	08 95       	ret

000024da <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    24da:	82 e7       	ldi	r24, 0x72	; 114
    24dc:	96 e0       	ldi	r25, 0x06	; 6
    24de:	0e 94 91 1a 	call	0x3522	; 0x3522 <__eerd_word_m6450a>
    24e2:	90 93 66 03 	sts	0x0366, r25
    24e6:	80 93 65 03 	sts	0x0365, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    24ea:	80 e7       	ldi	r24, 0x70	; 112
    24ec:	96 e0       	ldi	r25, 0x06	; 6
    24ee:	0e 94 91 1a 	call	0x3522	; 0x3522 <__eerd_word_m6450a>
    24f2:	90 93 64 03 	sts	0x0364, r25
    24f6:	80 93 63 03 	sts	0x0363, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    24fa:	81 e4       	ldi	r24, 0x41	; 65
    24fc:	93 e0       	ldi	r25, 0x03	; 3
    24fe:	6e e4       	ldi	r22, 0x4E	; 78
    2500:	76 e0       	ldi	r23, 0x06	; 6
    2502:	42 e2       	ldi	r20, 0x22	; 34
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	0e 94 81 1a 	call	0x3502	; 0x3502 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    250a:	8f e1       	ldi	r24, 0x1F	; 31
    250c:	93 e0       	ldi	r25, 0x03	; 3
    250e:	6c e2       	ldi	r22, 0x2C	; 44
    2510:	76 e0       	ldi	r23, 0x06	; 6
    2512:	42 e2       	ldi	r20, 0x22	; 34
    2514:	50 e0       	ldi	r21, 0x00	; 0
    2516:	0e 94 81 1a 	call	0x3502	; 0x3502 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    251a:	8f ef       	ldi	r24, 0xFF	; 255
    251c:	92 e0       	ldi	r25, 0x02	; 2
    251e:	6c e0       	ldi	r22, 0x0C	; 12
    2520:	76 e0       	ldi	r23, 0x06	; 6
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	0e 94 81 1a 	call	0x3502	; 0x3502 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    252a:	08 95       	ret

0000252c <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    252c:	98 2f       	mov	r25, r24
    252e:	96 95       	lsr	r25
    2530:	96 95       	lsr	r25
    2532:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2534:	29 2f       	mov	r18, r25
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	f9 01       	movw	r30, r18
    253a:	31 97       	sbiw	r30, 0x01	; 1
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	e6 0f       	add	r30, r22
    2542:	f7 1f       	adc	r31, r23
    2544:	01 90       	ld	r0, Z+
    2546:	f0 81       	ld	r31, Z
    2548:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    254a:	22 0f       	add	r18, r18
    254c:	33 1f       	adc	r19, r19
    254e:	26 0f       	add	r18, r22
    2550:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2552:	d9 01       	movw	r26, r18
    2554:	4d 91       	ld	r20, X+
    2556:	5c 91       	ld	r21, X
    2558:	11 97       	sbiw	r26, 0x01	; 1
    255a:	4e 1b       	sub	r20, r30
    255c:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    255e:	99 0f       	add	r25, r25
    2560:	99 0f       	add	r25, r25
    2562:	99 0f       	add	r25, r25
    2564:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	48 9f       	mul	r20, r24
    256a:	90 01       	movw	r18, r0
    256c:	49 9f       	mul	r20, r25
    256e:	30 0d       	add	r19, r0
    2570:	58 9f       	mul	r21, r24
    2572:	30 0d       	add	r19, r0
    2574:	11 24       	eor	r1, r1
    2576:	36 95       	lsr	r19
    2578:	27 95       	ror	r18
    257a:	36 95       	lsr	r19
    257c:	27 95       	ror	r18
    257e:	36 95       	lsr	r19
    2580:	27 95       	ror	r18
    2582:	e2 0f       	add	r30, r18
    2584:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2586:	8e 2f       	mov	r24, r30
    2588:	9f 2f       	mov	r25, r31
    258a:	08 95       	ret

0000258c <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	a2 97       	sbiw	r28, 0x22	; 34
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    25a0:	de 01       	movw	r26, r28
    25a2:	11 96       	adiw	r26, 0x01	; 1
    25a4:	e5 e8       	ldi	r30, 0x85	; 133
    25a6:	f2 e0       	ldi	r31, 0x02	; 2
    25a8:	82 e2       	ldi	r24, 0x22	; 34
    25aa:	01 90       	ld	r0, Z+
    25ac:	0d 92       	st	X+, r0
    25ae:	81 50       	subi	r24, 0x01	; 1
    25b0:	e1 f7       	brne	.-8      	; 0x25aa <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    25b2:	a1 e4       	ldi	r26, 0x41	; 65
    25b4:	b3 e0       	ldi	r27, 0x03	; 3
    25b6:	fe 01       	movw	r30, r28
    25b8:	31 96       	adiw	r30, 0x01	; 1
    25ba:	82 e2       	ldi	r24, 0x22	; 34
    25bc:	01 90       	ld	r0, Z+
    25be:	0d 92       	st	X+, r0
    25c0:	81 50       	subi	r24, 0x01	; 1
    25c2:	e1 f7       	brne	.-8      	; 0x25bc <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    25c4:	af e1       	ldi	r26, 0x1F	; 31
    25c6:	b3 e0       	ldi	r27, 0x03	; 3
    25c8:	fe 01       	movw	r30, r28
    25ca:	31 96       	adiw	r30, 0x01	; 1
    25cc:	82 e2       	ldi	r24, 0x22	; 34
    25ce:	01 90       	ld	r0, Z+
    25d0:	0d 92       	st	X+, r0
    25d2:	81 50       	subi	r24, 0x01	; 1
    25d4:	e1 f7       	brne	.-8      	; 0x25ce <set_one_volt_per_octave+0x42>
	
	
    25d6:	a2 96       	adiw	r28, 0x22	; 34
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	08 95       	ret

000025e8 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    25e8:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    25ea:	80 91 71 03 	lds	r24, 0x0371
    25ee:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    25f0:	89 27       	eor	r24, r25
    25f2:	80 93 71 03 	sts	0x0371, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    25f6:	89 23       	and	r24, r25
    25f8:	08 95       	ret

000025fa <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    25fa:	ed ed       	ldi	r30, 0xDD	; 221
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	90 81       	ld	r25, Z
    2600:	9f 7b       	andi	r25, 0xBF	; 191
    2602:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	21 70       	andi	r18, 0x01	; 1
    260a:	30 70       	andi	r19, 0x00	; 0
    260c:	22 0f       	add	r18, r18
    260e:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2610:	68 2f       	mov	r22, r24
    2612:	62 95       	swap	r22
    2614:	66 95       	lsr	r22
    2616:	67 70       	andi	r22, 0x07	; 7
    2618:	67 95       	ror	r22
    261a:	66 27       	eor	r22, r22
    261c:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    261e:	26 2b       	or	r18, r22
    2620:	98 2f       	mov	r25, r24
    2622:	96 95       	lsr	r25
    2624:	96 95       	lsr	r25
    2626:	91 70       	andi	r25, 0x01	; 1
    2628:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    262a:	68 2f       	mov	r22, r24
    262c:	66 1f       	adc	r22, r22
    262e:	66 27       	eor	r22, r22
    2630:	66 1f       	adc	r22, r22
    2632:	66 0f       	add	r22, r22
    2634:	66 0f       	add	r22, r22
    2636:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2638:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    263a:	a8 2f       	mov	r26, r24
    263c:	a6 95       	lsr	r26
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	a1 70       	andi	r26, 0x01	; 1
    2642:	b0 70       	andi	r27, 0x00	; 0
    2644:	bd 01       	movw	r22, r26
    2646:	66 0f       	add	r22, r22
    2648:	77 1f       	adc	r23, r23
    264a:	66 0f       	add	r22, r22
    264c:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    264e:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2650:	68 2f       	mov	r22, r24
    2652:	62 95       	swap	r22
    2654:	6f 70       	andi	r22, 0x0F	; 15
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	61 70       	andi	r22, 0x01	; 1
    265a:	70 70       	andi	r23, 0x00	; 0
    265c:	ab 01       	movw	r20, r22
    265e:	00 24       	eor	r0, r0
    2660:	56 95       	lsr	r21
    2662:	47 95       	ror	r20
    2664:	07 94       	ror	r0
    2666:	56 95       	lsr	r21
    2668:	47 95       	ror	r20
    266a:	07 94       	ror	r0
    266c:	54 2f       	mov	r21, r20
    266e:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2670:	62 2f       	mov	r22, r18
    2672:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2674:	48 2f       	mov	r20, r24
    2676:	42 95       	swap	r20
    2678:	46 95       	lsr	r20
    267a:	46 95       	lsr	r20
    267c:	43 70       	andi	r20, 0x03	; 3
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	41 70       	andi	r20, 0x01	; 1
    2682:	50 70       	andi	r21, 0x00	; 0
    2684:	9a 01       	movw	r18, r20
    2686:	22 0f       	add	r18, r18
    2688:	33 1f       	adc	r19, r19
    268a:	22 95       	swap	r18
    268c:	32 95       	swap	r19
    268e:	30 7f       	andi	r19, 0xF0	; 240
    2690:	32 27       	eor	r19, r18
    2692:	20 7f       	andi	r18, 0xF0	; 240
    2694:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2696:	46 2f       	mov	r20, r22
    2698:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    269a:	86 95       	lsr	r24
    269c:	86 95       	lsr	r24
    269e:	86 95       	lsr	r24
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	21 70       	andi	r18, 0x01	; 1
    26a6:	30 70       	andi	r19, 0x00	; 0
    26a8:	c9 01       	movw	r24, r18
    26aa:	82 95       	swap	r24
    26ac:	92 95       	swap	r25
    26ae:	90 7f       	andi	r25, 0xF0	; 240
    26b0:	98 27       	eor	r25, r24
    26b2:	80 7f       	andi	r24, 0xF0	; 240
    26b4:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    26b6:	84 2b       	or	r24, r20
    26b8:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    26ba:	80 81       	ld	r24, Z
    26bc:	80 64       	ori	r24, 0x40	; 64
    26be:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    26c0:	80 81       	ld	r24, Z
    26c2:	8f 7b       	andi	r24, 0xBF	; 191
    26c4:	80 83       	st	Z, r24
	DATA_BUS = 0;
    26c6:	12 b8       	out	0x02, r1	; 2
	
	
    26c8:	08 95       	ret

000026ca <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    26ca:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    26cc:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    26ce:	74 83       	std	Z+4, r23	; 0x04
    26d0:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    26d2:	11 82       	std	Z+1, r1	; 0x01
    26d4:	10 82       	st	Z, r1
}
    26d6:	08 95       	ret

000026d8 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    26d8:	1f 93       	push	r17
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	ec 01       	movw	r28, r24
    26e0:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    26e2:	0e 94 db 13 	call	0x27b6	; 0x27b6 <store_and_clear_interrupt>
    26e6:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    26e8:	39 81       	ldd	r19, Y+1	; 0x01
    26ea:	83 2f       	mov	r24, r19
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	01 96       	adiw	r24, 0x01	; 1
    26f0:	6a 81       	ldd	r22, Y+2	; 0x02
    26f2:	70 e0       	ldi	r23, 0x00	; 0
    26f4:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__divmodhi4>
    26f8:	48 81       	ld	r20, Y
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	84 17       	cp	r24, r20
    26fe:	95 07       	cpc	r25, r21
    2700:	29 f4       	brne	.+10     	; 0x270c <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2702:	82 2f       	mov	r24, r18
    2704:	0e 94 de 13 	call	0x27bc	; 0x27bc <restore_interrupt_setting>
      return false;
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	11 c0       	rjmp	.+34     	; 0x272e <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    270c:	eb 81       	ldd	r30, Y+3	; 0x03
    270e:	fc 81       	ldd	r31, Y+4	; 0x04
    2710:	e3 0f       	add	r30, r19
    2712:	f1 1d       	adc	r31, r1
    2714:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	6a 81       	ldd	r22, Y+2	; 0x02
    271e:	70 e0       	ldi	r23, 0x00	; 0
    2720:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__divmodhi4>
    2724:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2726:	82 2f       	mov	r24, r18
    2728:	0e 94 de 13 	call	0x27bc	; 0x27bc <restore_interrupt_setting>
      return true;
    272c:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
    2734:	08 95       	ret

00002736 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    273c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2740:	29 81       	ldd	r18, Y+1	; 0x01
    2742:	98 81       	ld	r25, Y
    2744:	29 17       	cp	r18, r25
    2746:	18 f0       	brcs	.+6      	; 0x274e <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2748:	c2 2f       	mov	r28, r18
    274a:	c9 1b       	sub	r28, r25
    274c:	03 c0       	rjmp	.+6      	; 0x2754 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    274e:	ca 81       	ldd	r28, Y+2	; 0x02
    2750:	c2 0f       	add	r28, r18
    2752:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2754:	0e 94 de 13 	call	0x27bc	; 0x27bc <restore_interrupt_setting>
   return len;
}
    2758:	8c 2f       	mov	r24, r28
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	08 95       	ret

00002760 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2760:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2762:	20 81       	ld	r18, Z
    2764:	86 2f       	mov	r24, r22
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	82 0f       	add	r24, r18
    276a:	91 1d       	adc	r25, r1
    276c:	62 81       	ldd	r22, Z+2	; 0x02
    276e:	70 e0       	ldi	r23, 0x00	; 0
    2770:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__divmodhi4>
    2774:	03 80       	ldd	r0, Z+3	; 0x03
    2776:	f4 81       	ldd	r31, Z+4	; 0x04
    2778:	e0 2d       	mov	r30, r0
    277a:	e8 0f       	add	r30, r24
    277c:	f9 1f       	adc	r31, r25
}
    277e:	80 81       	ld	r24, Z
    2780:	08 95       	ret

00002782 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2782:	1f 93       	push	r17
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	ec 01       	movw	r28, r24
    278a:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    278c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <store_and_clear_interrupt>
    2790:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2792:	88 81       	ld	r24, Y
    2794:	21 2f       	mov	r18, r17
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	28 0f       	add	r18, r24
    279a:	31 1d       	adc	r19, r1
    279c:	6a 81       	ldd	r22, Y+2	; 0x02
    279e:	c9 01       	movw	r24, r18
    27a0:	70 e0       	ldi	r23, 0x00	; 0
    27a2:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__divmodhi4>
    27a6:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    27a8:	84 2f       	mov	r24, r20
    27aa:	0e 94 de 13 	call	0x27bc	; 0x27bc <restore_interrupt_setting>
}
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	1f 91       	pop	r17
    27b4:	08 95       	ret

000027b6 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    27b6:	8f b7       	in	r24, 0x3f	; 63
   cli();
    27b8:	f8 94       	cli
   return sreg;
}
    27ba:	08 95       	ret

000027bc <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    27bc:	8f bf       	out	0x3f, r24	; 63
}
    27be:	08 95       	ret

000027c0 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    27c0:	88 1f       	adc	r24, r24
    27c2:	88 27       	eor	r24, r24
    27c4:	88 1f       	adc	r24, r24
    27c6:	08 95       	ret

000027c8 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	88 3f       	cpi	r24, 0xF8	; 248
    27cc:	08 f4       	brcc	.+2      	; 0x27d0 <midi_is_realtime+0x8>
    27ce:	90 e0       	ldi	r25, 0x00	; 0
}
    27d0:	89 2f       	mov	r24, r25
    27d2:	08 95       	ret

000027d4 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	20 7f       	andi	r18, 0xF0	; 240
    27da:	30 70       	andi	r19, 0x00	; 0
    27dc:	20 3c       	cpi	r18, 0xC0	; 192
    27de:	31 05       	cpc	r19, r1
    27e0:	e9 f1       	breq	.+122    	; 0x285c <midi_packet_length+0x88>
    27e2:	21 3c       	cpi	r18, 0xC1	; 193
    27e4:	31 05       	cpc	r19, r1
    27e6:	8c f4       	brge	.+34     	; 0x280a <midi_packet_length+0x36>
    27e8:	20 39       	cpi	r18, 0x90	; 144
    27ea:	31 05       	cpc	r19, r1
    27ec:	e1 f0       	breq	.+56     	; 0x2826 <midi_packet_length+0x52>
    27ee:	21 39       	cpi	r18, 0x91	; 145
    27f0:	31 05       	cpc	r19, r1
    27f2:	24 f4       	brge	.+8      	; 0x27fc <midi_packet_length+0x28>
    27f4:	20 38       	cpi	r18, 0x80	; 128
    27f6:	31 05       	cpc	r19, r1
    27f8:	79 f5       	brne	.+94     	; 0x2858 <midi_packet_length+0x84>
    27fa:	15 c0       	rjmp	.+42     	; 0x2826 <midi_packet_length+0x52>
    27fc:	20 3a       	cpi	r18, 0xA0	; 160
    27fe:	31 05       	cpc	r19, r1
    2800:	91 f0       	breq	.+36     	; 0x2826 <midi_packet_length+0x52>
    2802:	20 3b       	cpi	r18, 0xB0	; 176
    2804:	31 05       	cpc	r19, r1
    2806:	41 f5       	brne	.+80     	; 0x2858 <midi_packet_length+0x84>
    2808:	0e c0       	rjmp	.+28     	; 0x2826 <midi_packet_length+0x52>
    280a:	20 3e       	cpi	r18, 0xE0	; 224
    280c:	31 05       	cpc	r19, r1
    280e:	59 f0       	breq	.+22     	; 0x2826 <midi_packet_length+0x52>
    2810:	21 3e       	cpi	r18, 0xE1	; 225
    2812:	31 05       	cpc	r19, r1
    2814:	24 f4       	brge	.+8      	; 0x281e <midi_packet_length+0x4a>
    2816:	20 3d       	cpi	r18, 0xD0	; 208
    2818:	31 05       	cpc	r19, r1
    281a:	f1 f4       	brne	.+60     	; 0x2858 <midi_packet_length+0x84>
    281c:	1f c0       	rjmp	.+62     	; 0x285c <midi_packet_length+0x88>
    281e:	20 3f       	cpi	r18, 0xF0	; 240
    2820:	31 05       	cpc	r19, r1
    2822:	d1 f4       	brne	.+52     	; 0x2858 <midi_packet_length+0x84>
    2824:	02 c0       	rjmp	.+4      	; 0x282a <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2826:	83 e0       	ldi	r24, 0x03	; 3
    2828:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    282a:	86 3f       	cpi	r24, 0xF6	; 246
    282c:	79 f0       	breq	.+30     	; 0x284c <midi_packet_length+0x78>
    282e:	87 3f       	cpi	r24, 0xF7	; 247
    2830:	38 f4       	brcc	.+14     	; 0x2840 <midi_packet_length+0x6c>
    2832:	82 3f       	cpi	r24, 0xF2	; 242
    2834:	a9 f0       	breq	.+42     	; 0x2860 <midi_packet_length+0x8c>
    2836:	83 3f       	cpi	r24, 0xF3	; 243
    2838:	59 f0       	breq	.+22     	; 0x2850 <midi_packet_length+0x7c>
    283a:	81 3f       	cpi	r24, 0xF1	; 241
    283c:	59 f4       	brne	.+22     	; 0x2854 <midi_packet_length+0x80>
    283e:	08 c0       	rjmp	.+16     	; 0x2850 <midi_packet_length+0x7c>
    2840:	88 3f       	cpi	r24, 0xF8	; 248
    2842:	40 f0       	brcs	.+16     	; 0x2854 <midi_packet_length+0x80>
    2844:	8d 3f       	cpi	r24, 0xFD	; 253
    2846:	10 f0       	brcs	.+4      	; 0x284c <midi_packet_length+0x78>
    2848:	8e 3f       	cpi	r24, 0xFE	; 254
    284a:	20 f0       	brcs	.+8      	; 0x2854 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    285c:	82 e0       	ldi	r24, 0x02	; 2
    285e:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2860:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2862:	08 95       	ret

00002864 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2864:	0f 93       	push	r16
    2866:	34 2f       	mov	r19, r20
    2868:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    286a:	46 2f       	mov	r20, r22
    286c:	4f 70       	andi	r20, 0x0F	; 15
    286e:	40 6b       	ori	r20, 0xB0	; 176
    2870:	23 2f       	mov	r18, r19
    2872:	2f 77       	andi	r18, 0x7F	; 127
    2874:	0f 77       	andi	r16, 0x7F	; 127
    2876:	dc 01       	movw	r26, r24
    2878:	ed 91       	ld	r30, X+
    287a:	fc 91       	ld	r31, X
    287c:	63 e0       	ldi	r22, 0x03	; 3
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2882:	0f 91       	pop	r16
    2884:	08 95       	ret

00002886 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2886:	0f 93       	push	r16
    2888:	34 2f       	mov	r19, r20
    288a:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    288c:	46 2f       	mov	r20, r22
    288e:	4f 70       	andi	r20, 0x0F	; 15
    2890:	40 69       	ori	r20, 0x90	; 144
    2892:	23 2f       	mov	r18, r19
    2894:	2f 77       	andi	r18, 0x7F	; 127
    2896:	0f 77       	andi	r16, 0x7F	; 127
    2898:	dc 01       	movw	r26, r24
    289a:	ed 91       	ld	r30, X+
    289c:	fc 91       	ld	r31, X
    289e:	63 e0       	ldi	r22, 0x03	; 3
    28a0:	70 e0       	ldi	r23, 0x00	; 0
    28a2:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    28a4:	0f 91       	pop	r16
    28a6:	08 95       	ret

000028a8 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    28a8:	0f 93       	push	r16
    28aa:	34 2f       	mov	r19, r20
    28ac:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    28ae:	46 2f       	mov	r20, r22
    28b0:	4f 70       	andi	r20, 0x0F	; 15
    28b2:	40 68       	ori	r20, 0x80	; 128
    28b4:	23 2f       	mov	r18, r19
    28b6:	2f 77       	andi	r18, 0x7F	; 127
    28b8:	0f 77       	andi	r16, 0x7F	; 127
    28ba:	dc 01       	movw	r26, r24
    28bc:	ed 91       	ld	r30, X+
    28be:	fc 91       	ld	r31, X
    28c0:	63 e0       	ldi	r22, 0x03	; 3
    28c2:	70 e0       	ldi	r23, 0x00	; 0
    28c4:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    28c6:	0f 91       	pop	r16
    28c8:	08 95       	ret

000028ca <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    28ca:	0f 93       	push	r16
    28cc:	34 2f       	mov	r19, r20
    28ce:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    28d0:	46 2f       	mov	r20, r22
    28d2:	4f 70       	andi	r20, 0x0F	; 15
    28d4:	40 6a       	ori	r20, 0xA0	; 160
    28d6:	23 2f       	mov	r18, r19
    28d8:	2f 77       	andi	r18, 0x7F	; 127
    28da:	0f 77       	andi	r16, 0x7F	; 127
    28dc:	dc 01       	movw	r26, r24
    28de:	ed 91       	ld	r30, X+
    28e0:	fc 91       	ld	r31, X
    28e2:	63 e0       	ldi	r22, 0x03	; 3
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    28e8:	0f 91       	pop	r16
    28ea:	08 95       	ret

000028ec <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    28ec:	0f 93       	push	r16
    28ee:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    28f0:	20 e2       	ldi	r18, 0x20	; 32
    28f2:	40 30       	cpi	r20, 0x00	; 0
    28f4:	52 07       	cpc	r21, r18
    28f6:	44 f4       	brge	.+16     	; 0x2908 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    28f8:	a0 ee       	ldi	r26, 0xE0	; 224
    28fa:	40 30       	cpi	r20, 0x00	; 0
    28fc:	5a 07       	cpc	r21, r26
    28fe:	3c f0       	brlt	.+14     	; 0x290e <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2900:	8a 01       	movw	r16, r20
    2902:	00 50       	subi	r16, 0x00	; 0
    2904:	10 4e       	sbci	r17, 0xE0	; 224
    2906:	05 c0       	rjmp	.+10     	; 0x2912 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2908:	0f ef       	ldi	r16, 0xFF	; 255
    290a:	1f e3       	ldi	r17, 0x3F	; 63
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    290e:	00 e0       	ldi	r16, 0x00	; 0
    2910:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2912:	46 2f       	mov	r20, r22
    2914:	4f 70       	andi	r20, 0x0F	; 15
    2916:	40 6e       	ori	r20, 0xE0	; 224
    2918:	20 2f       	mov	r18, r16
    291a:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    291c:	00 0f       	add	r16, r16
    291e:	01 2f       	mov	r16, r17
    2920:	00 1f       	adc	r16, r16
    2922:	11 0b       	sbc	r17, r17
    2924:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2926:	0f 77       	andi	r16, 0x7F	; 127
    2928:	dc 01       	movw	r26, r24
    292a:	ed 91       	ld	r30, X+
    292c:	fc 91       	ld	r31, X
    292e:	63 e0       	ldi	r22, 0x03	; 3
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2934:	1f 91       	pop	r17
    2936:	0f 91       	pop	r16
    2938:	08 95       	ret

0000293a <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    293a:	0f 93       	push	r16
    293c:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    293e:	46 2f       	mov	r20, r22
    2940:	4f 70       	andi	r20, 0x0F	; 15
    2942:	40 6c       	ori	r20, 0xC0	; 192
    2944:	2f 77       	andi	r18, 0x7F	; 127
    2946:	dc 01       	movw	r26, r24
    2948:	ed 91       	ld	r30, X+
    294a:	fc 91       	ld	r31, X
    294c:	62 e0       	ldi	r22, 0x02	; 2
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	00 e0       	ldi	r16, 0x00	; 0
    2952:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2954:	0f 91       	pop	r16
    2956:	08 95       	ret

00002958 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2958:	0f 93       	push	r16
    295a:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    295c:	46 2f       	mov	r20, r22
    295e:	4f 70       	andi	r20, 0x0F	; 15
    2960:	40 6d       	ori	r20, 0xD0	; 208
    2962:	2f 77       	andi	r18, 0x7F	; 127
    2964:	dc 01       	movw	r26, r24
    2966:	ed 91       	ld	r30, X+
    2968:	fc 91       	ld	r31, X
    296a:	62 e0       	ldi	r22, 0x02	; 2
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	00 e0       	ldi	r16, 0x00	; 0
    2970:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2972:	0f 91       	pop	r16
    2974:	08 95       	ret

00002976 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2976:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2978:	dc 01       	movw	r26, r24
    297a:	ed 91       	ld	r30, X+
    297c:	fc 91       	ld	r31, X
    297e:	61 e0       	ldi	r22, 0x01	; 1
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	48 ef       	ldi	r20, 0xF8	; 248
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	00 e0       	ldi	r16, 0x00	; 0
    2988:	09 95       	icall
}
    298a:	0f 91       	pop	r16
    298c:	08 95       	ret

0000298e <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    298e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2990:	dc 01       	movw	r26, r24
    2992:	ed 91       	ld	r30, X+
    2994:	fc 91       	ld	r31, X
    2996:	61 e0       	ldi	r22, 0x01	; 1
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	49 ef       	ldi	r20, 0xF9	; 249
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	00 e0       	ldi	r16, 0x00	; 0
    29a0:	09 95       	icall
}
    29a2:	0f 91       	pop	r16
    29a4:	08 95       	ret

000029a6 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    29a6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    29a8:	dc 01       	movw	r26, r24
    29aa:	ed 91       	ld	r30, X+
    29ac:	fc 91       	ld	r31, X
    29ae:	61 e0       	ldi	r22, 0x01	; 1
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	4a ef       	ldi	r20, 0xFA	; 250
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	00 e0       	ldi	r16, 0x00	; 0
    29b8:	09 95       	icall
}
    29ba:	0f 91       	pop	r16
    29bc:	08 95       	ret

000029be <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    29be:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    29c0:	dc 01       	movw	r26, r24
    29c2:	ed 91       	ld	r30, X+
    29c4:	fc 91       	ld	r31, X
    29c6:	61 e0       	ldi	r22, 0x01	; 1
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	4b ef       	ldi	r20, 0xFB	; 251
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	00 e0       	ldi	r16, 0x00	; 0
    29d0:	09 95       	icall
}
    29d2:	0f 91       	pop	r16
    29d4:	08 95       	ret

000029d6 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    29d6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    29d8:	dc 01       	movw	r26, r24
    29da:	ed 91       	ld	r30, X+
    29dc:	fc 91       	ld	r31, X
    29de:	61 e0       	ldi	r22, 0x01	; 1
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	4c ef       	ldi	r20, 0xFC	; 252
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	00 e0       	ldi	r16, 0x00	; 0
    29e8:	09 95       	icall
}
    29ea:	0f 91       	pop	r16
    29ec:	08 95       	ret

000029ee <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    29ee:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    29f0:	dc 01       	movw	r26, r24
    29f2:	ed 91       	ld	r30, X+
    29f4:	fc 91       	ld	r31, X
    29f6:	61 e0       	ldi	r22, 0x01	; 1
    29f8:	70 e0       	ldi	r23, 0x00	; 0
    29fa:	4e ef       	ldi	r20, 0xFE	; 254
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	00 e0       	ldi	r16, 0x00	; 0
    2a00:	09 95       	icall
}
    2a02:	0f 91       	pop	r16
    2a04:	08 95       	ret

00002a06 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2a06:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2a08:	dc 01       	movw	r26, r24
    2a0a:	ed 91       	ld	r30, X+
    2a0c:	fc 91       	ld	r31, X
    2a0e:	61 e0       	ldi	r22, 0x01	; 1
    2a10:	70 e0       	ldi	r23, 0x00	; 0
    2a12:	4f ef       	ldi	r20, 0xFF	; 255
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	00 e0       	ldi	r16, 0x00	; 0
    2a18:	09 95       	icall
}
    2a1a:	0f 91       	pop	r16
    2a1c:	08 95       	ret

00002a1e <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    2a1e:	0f 93       	push	r16
   device->send_func(device, 2,
    2a20:	26 2f       	mov	r18, r22
    2a22:	2f 77       	andi	r18, 0x7F	; 127
    2a24:	dc 01       	movw	r26, r24
    2a26:	ed 91       	ld	r30, X+
    2a28:	fc 91       	ld	r31, X
    2a2a:	62 e0       	ldi	r22, 0x02	; 2
    2a2c:	70 e0       	ldi	r23, 0x00	; 0
    2a2e:	41 ef       	ldi	r20, 0xF1	; 241
    2a30:	00 e0       	ldi	r16, 0x00	; 0
    2a32:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2a34:	0f 91       	pop	r16
    2a36:	08 95       	ret

00002a38 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2a38:	0f 93       	push	r16
    2a3a:	1f 93       	push	r17
   device->send_func(device, 3,
    2a3c:	26 2f       	mov	r18, r22
    2a3e:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2a40:	8b 01       	movw	r16, r22
    2a42:	00 0f       	add	r16, r16
    2a44:	01 2f       	mov	r16, r17
    2a46:	00 1f       	adc	r16, r16
    2a48:	11 0b       	sbc	r17, r17
    2a4a:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2a4c:	0f 77       	andi	r16, 0x7F	; 127
    2a4e:	dc 01       	movw	r26, r24
    2a50:	ed 91       	ld	r30, X+
    2a52:	fc 91       	ld	r31, X
    2a54:	63 e0       	ldi	r22, 0x03	; 3
    2a56:	70 e0       	ldi	r23, 0x00	; 0
    2a58:	42 ef       	ldi	r20, 0xF2	; 242
    2a5a:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	08 95       	ret

00002a62 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2a62:	0f 93       	push	r16
   device->send_func(device, 2,
    2a64:	26 2f       	mov	r18, r22
    2a66:	2f 77       	andi	r18, 0x7F	; 127
    2a68:	dc 01       	movw	r26, r24
    2a6a:	ed 91       	ld	r30, X+
    2a6c:	fc 91       	ld	r31, X
    2a6e:	62 e0       	ldi	r22, 0x02	; 2
    2a70:	70 e0       	ldi	r23, 0x00	; 0
    2a72:	43 ef       	ldi	r20, 0xF3	; 243
    2a74:	00 e0       	ldi	r16, 0x00	; 0
    2a76:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2a78:	0f 91       	pop	r16
    2a7a:	08 95       	ret

00002a7c <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2a7c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    2a7e:	dc 01       	movw	r26, r24
    2a80:	ed 91       	ld	r30, X+
    2a82:	fc 91       	ld	r31, X
    2a84:	61 e0       	ldi	r22, 0x01	; 1
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	46 ef       	ldi	r20, 0xF6	; 246
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	00 e0       	ldi	r16, 0x00	; 0
    2a8e:	09 95       	icall
}
    2a90:	0f 91       	pop	r16
    2a92:	08 95       	ret

00002a94 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2a94:	0f 93       	push	r16
    2a96:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2a98:	dc 01       	movw	r26, r24
    2a9a:	ed 91       	ld	r30, X+
    2a9c:	fc 91       	ld	r31, X
    2a9e:	61 e0       	ldi	r22, 0x01	; 1
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	00 e0       	ldi	r16, 0x00	; 0
    2aa6:	09 95       	icall
}
    2aa8:	0f 91       	pop	r16
    2aaa:	08 95       	ret

00002aac <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    2aac:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    2aae:	dc 01       	movw	r26, r24
    2ab0:	ed 91       	ld	r30, X+
    2ab2:	fc 91       	ld	r31, X
    2ab4:	09 95       	icall
}
    2ab6:	0f 91       	pop	r16
    2ab8:	08 95       	ret

00002aba <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2aba:	6f 92       	push	r6
    2abc:	7f 92       	push	r7
    2abe:	8f 92       	push	r8
    2ac0:	9f 92       	push	r9
    2ac2:	af 92       	push	r10
    2ac4:	bf 92       	push	r11
    2ac6:	cf 92       	push	r12
    2ac8:	df 92       	push	r13
    2aca:	ef 92       	push	r14
    2acc:	ff 92       	push	r15
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <midi_send_array+0x1e>
    2ad8:	0f 92       	push	r0
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	4c 01       	movw	r8, r24
    2ae0:	6b 01       	movw	r12, r22
    2ae2:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2ae4:	61 15       	cp	r22, r1
    2ae6:	71 05       	cpc	r23, r1
    2ae8:	41 f1       	breq	.+80     	; 0x2b3a <midi_send_array+0x80>
    2aea:	ee 24       	eor	r14, r14
    2aec:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2aee:	0f 2e       	mov	r0, r31
    2af0:	f3 e0       	ldi	r31, 0x03	; 3
    2af2:	6f 2e       	mov	r6, r31
    2af4:	77 24       	eor	r7, r7
    2af6:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2af8:	19 82       	std	Y+1, r1	; 0x01
    2afa:	1a 82       	std	Y+2, r1	; 0x02
    2afc:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2afe:	86 01       	movw	r16, r12
    2b00:	0e 19       	sub	r16, r14
    2b02:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2b04:	04 30       	cpi	r16, 0x04	; 4
    2b06:	11 05       	cpc	r17, r1
    2b08:	08 f0       	brcs	.+2      	; 0x2b0c <midi_send_array+0x52>
    2b0a:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2b0c:	b5 01       	movw	r22, r10
    2b0e:	6e 0d       	add	r22, r14
    2b10:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2b12:	ce 01       	movw	r24, r28
    2b14:	01 96       	adiw	r24, 0x01	; 1
    2b16:	40 2f       	mov	r20, r16
    2b18:	51 2f       	mov	r21, r17
    2b1a:	0e 94 66 1a 	call	0x34cc	; 0x34cc <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2b1e:	c4 01       	movw	r24, r8
    2b20:	b8 01       	movw	r22, r16
    2b22:	49 81       	ldd	r20, Y+1	; 0x01
    2b24:	2a 81       	ldd	r18, Y+2	; 0x02
    2b26:	0b 81       	ldd	r16, Y+3	; 0x03
    2b28:	0e 94 56 15 	call	0x2aac	; 0x2aac <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2b2c:	83 e0       	ldi	r24, 0x03	; 3
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	e8 0e       	add	r14, r24
    2b32:	f9 1e       	adc	r15, r25
    2b34:	ec 14       	cp	r14, r12
    2b36:	fd 04       	cpc	r15, r13
    2b38:	f8 f2       	brcs	.-66     	; 0x2af8 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	1f 91       	pop	r17
    2b46:	0f 91       	pop	r16
    2b48:	ff 90       	pop	r15
    2b4a:	ef 90       	pop	r14
    2b4c:	df 90       	pop	r13
    2b4e:	cf 90       	pop	r12
    2b50:	bf 90       	pop	r11
    2b52:	af 90       	pop	r10
    2b54:	9f 90       	pop	r9
    2b56:	8f 90       	pop	r8
    2b58:	7f 90       	pop	r7
    2b5a:	6f 90       	pop	r6
    2b5c:	08 95       	ret

00002b5e <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    2b5e:	fc 01       	movw	r30, r24
    2b60:	73 83       	std	Z+3, r23	; 0x03
    2b62:	62 83       	std	Z+2, r22	; 0x02
}
    2b64:	08 95       	ret

00002b66 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2b66:	fc 01       	movw	r30, r24
    2b68:	75 83       	std	Z+5, r23	; 0x05
    2b6a:	64 83       	std	Z+4, r22	; 0x04
}
    2b6c:	08 95       	ret

00002b6e <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    2b6e:	fc 01       	movw	r30, r24
    2b70:	77 83       	std	Z+7, r23	; 0x07
    2b72:	66 83       	std	Z+6, r22	; 0x06
}
    2b74:	08 95       	ret

00002b76 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2b76:	fc 01       	movw	r30, r24
    2b78:	71 87       	std	Z+9, r23	; 0x09
    2b7a:	60 87       	std	Z+8, r22	; 0x08
}
    2b7c:	08 95       	ret

00002b7e <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    2b7e:	fc 01       	movw	r30, r24
    2b80:	73 87       	std	Z+11, r23	; 0x0b
    2b82:	62 87       	std	Z+10, r22	; 0x0a
}
    2b84:	08 95       	ret

00002b86 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2b86:	fc 01       	movw	r30, r24
    2b88:	75 87       	std	Z+13, r23	; 0x0d
    2b8a:	64 87       	std	Z+12, r22	; 0x0c
}
    2b8c:	08 95       	ret

00002b8e <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    2b8e:	fc 01       	movw	r30, r24
    2b90:	77 87       	std	Z+15, r23	; 0x0f
    2b92:	66 87       	std	Z+14, r22	; 0x0e
}
    2b94:	08 95       	ret

00002b96 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2b96:	fc 01       	movw	r30, r24
    2b98:	71 8b       	std	Z+17, r23	; 0x11
    2b9a:	60 8b       	std	Z+16, r22	; 0x10
}
    2b9c:	08 95       	ret

00002b9e <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	73 8b       	std	Z+19, r23	; 0x13
    2ba2:	62 8b       	std	Z+18, r22	; 0x12
}
    2ba4:	08 95       	ret

00002ba6 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	75 8b       	std	Z+21, r23	; 0x15
    2baa:	64 8b       	std	Z+20, r22	; 0x14
}
    2bac:	08 95       	ret

00002bae <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    2bae:	fc 01       	movw	r30, r24
    2bb0:	77 8b       	std	Z+23, r23	; 0x17
    2bb2:	66 8b       	std	Z+22, r22	; 0x16
}
    2bb4:	08 95       	ret

00002bb6 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	71 8f       	std	Z+25, r23	; 0x19
    2bba:	60 8f       	std	Z+24, r22	; 0x18
}
    2bbc:	08 95       	ret

00002bbe <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	73 8f       	std	Z+27, r23	; 0x1b
    2bc2:	62 8f       	std	Z+26, r22	; 0x1a
}
    2bc4:	08 95       	ret

00002bc6 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	75 8f       	std	Z+29, r23	; 0x1d
    2bca:	64 8f       	std	Z+28, r22	; 0x1c
}
    2bcc:	08 95       	ret

00002bce <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    2bce:	fc 01       	movw	r30, r24
    2bd0:	77 8f       	std	Z+31, r23	; 0x1f
    2bd2:	66 8f       	std	Z+30, r22	; 0x1e
}
    2bd4:	08 95       	ret

00002bd6 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    2bdc:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    2bde:	1f a2       	lds	r17, 0x9f
    2be0:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2be2:	bc 01       	movw	r22, r24
    2be4:	68 5d       	subi	r22, 0xD8	; 216
    2be6:	7f 4f       	sbci	r23, 0xFF	; 255
    2be8:	88 51       	subi	r24, 0x18	; 24
    2bea:	9f 4f       	sbci	r25, 0xFF	; 255
    2bec:	40 ec       	ldi	r20, 0xC0	; 192
    2bee:	0e 94 65 13 	call	0x26ca	; 0x26ca <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2bf2:	1b 82       	std	Y+3, r1	; 0x03
    2bf4:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2bf6:	1d 82       	std	Y+5, r1	; 0x05
    2bf8:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2bfa:	1f 82       	std	Y+7, r1	; 0x07
    2bfc:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    2bfe:	19 86       	std	Y+9, r1	; 0x09
    2c00:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2c02:	1b 86       	std	Y+11, r1	; 0x0b
    2c04:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2c06:	1d 86       	std	Y+13, r1	; 0x0d
    2c08:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2c0a:	1f 86       	std	Y+15, r1	; 0x0f
    2c0c:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    2c0e:	19 8a       	std	Y+17, r1	; 0x11
    2c10:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2c12:	1b 8a       	std	Y+19, r1	; 0x13
    2c14:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2c16:	1d 8a       	std	Y+21, r1	; 0x15
    2c18:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2c1a:	1f 8a       	std	Y+23, r1	; 0x17
    2c1c:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    2c1e:	19 8e       	std	Y+25, r1	; 0x19
    2c20:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2c22:	1b 8e       	std	Y+27, r1	; 0x1b
    2c24:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2c26:	1d 8e       	std	Y+29, r1	; 0x1d
    2c28:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2c2a:	1f 8e       	std	Y+31, r1	; 0x1f
    2c2c:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    2c2e:	19 a2       	lds	r17, 0x99
    2c30:	18 a2       	lds	r17, 0x98
}
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	08 95       	ret

00002c38 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2c38:	ef 92       	push	r14
    2c3a:	ff 92       	push	r15
    2c3c:	0f 93       	push	r16
    2c3e:	1f 93       	push	r17
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2c46:	66 23       	and	r22, r22
    2c48:	99 f0       	breq	.+38     	; 0x2c70 <midi_device_input+0x38>
    2c4a:	04 2f       	mov	r16, r20
    2c4c:	15 2f       	mov	r17, r21
    2c4e:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    2c50:	0f 2e       	mov	r0, r31
    2c52:	f8 ee       	ldi	r31, 0xE8	; 232
    2c54:	ef 2e       	mov	r14, r31
    2c56:	ff 24       	eor	r15, r15
    2c58:	f0 2d       	mov	r31, r0
    2c5a:	e8 0e       	add	r14, r24
    2c5c:	f9 1e       	adc	r15, r25
    2c5e:	f8 01       	movw	r30, r16
    2c60:	61 91       	ld	r22, Z+
    2c62:	8f 01       	movw	r16, r30
    2c64:	c7 01       	movw	r24, r14
    2c66:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2c6a:	cf 5f       	subi	r28, 0xFF	; 255
    2c6c:	cd 17       	cp	r28, r29
    2c6e:	b9 f7       	brne	.-18     	; 0x2c5e <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	1f 91       	pop	r17
    2c76:	0f 91       	pop	r16
    2c78:	ff 90       	pop	r15
    2c7a:	ef 90       	pop	r14
    2c7c:	08 95       	ret

00002c7e <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    2c7e:	fc 01       	movw	r30, r24
    2c80:	71 83       	std	Z+1, r23	; 0x01
    2c82:	60 83       	st	Z, r22
}
    2c84:	08 95       	ret

00002c86 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    2c86:	fc 01       	movw	r30, r24
    2c88:	71 a3       	lds	r23, 0x51
    2c8a:	60 a3       	lds	r22, 0x50
}
    2c8c:	08 95       	ret

00002c8e <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    2c8e:	af 92       	push	r10
    2c90:	bf 92       	push	r11
    2c92:	cf 92       	push	r12
    2c94:	df 92       	push	r13
    2c96:	ef 92       	push	r14
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <midi_input_callbacks+0x16>
    2ca4:	0f 92       	push	r0
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	6c 01       	movw	r12, r24
    2cac:	5b 01       	movw	r10, r22
    2cae:	f4 2e       	mov	r15, r20
    2cb0:	e2 2e       	mov	r14, r18
    2cb2:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	95 96       	adiw	r26, 0x25	; 37
    2cb8:	8c 91       	ld	r24, X
    2cba:	95 97       	sbiw	r26, 0x25	; 37
    2cbc:	84 30       	cpi	r24, 0x04	; 4
    2cbe:	e9 f4       	brne	.+58     	; 0x2cfa <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    2cc0:	5a 96       	adiw	r26, 0x1a	; 26
    2cc2:	ed 91       	ld	r30, X+
    2cc4:	fc 91       	ld	r31, X
    2cc6:	5b 97       	sbiw	r26, 0x1b	; 27
    2cc8:	30 97       	sbiw	r30, 0x00	; 0
    2cca:	09 f4       	brne	.+2      	; 0x2cce <midi_input_callbacks+0x40>
    2ccc:	ee c0       	rjmp	.+476    	; 0x2eaa <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    2cce:	cb 01       	movw	r24, r22
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	63 e0       	ldi	r22, 0x03	; 3
    2cd4:	70 e0       	ldi	r23, 0x00	; 0
    2cd6:	0e 94 3f 1a 	call	0x347e	; 0x347e <__udivmodhi4>
    2cda:	cb 01       	movw	r24, r22
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	68 0f       	add	r22, r24
    2ce2:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2ce4:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2ce6:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    2ce8:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2cea:	4a 2d       	mov	r20, r10
    2cec:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    2cee:	c6 01       	movw	r24, r12
    2cf0:	9e 01       	movw	r18, r28
    2cf2:	2f 5f       	subi	r18, 0xFF	; 255
    2cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf6:	09 95       	icall
    2cf8:	c8 c0       	rjmp	.+400    	; 0x2e8a <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    2cfa:	62 30       	cpi	r22, 0x02	; 2
    2cfc:	71 05       	cpc	r23, r1
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <midi_input_callbacks+0x74>
    2d00:	5f c0       	rjmp	.+190    	; 0x2dc0 <midi_input_callbacks+0x132>
    2d02:	63 30       	cpi	r22, 0x03	; 3
    2d04:	71 05       	cpc	r23, r1
    2d06:	29 f0       	breq	.+10     	; 0x2d12 <midi_input_callbacks+0x84>
    2d08:	61 30       	cpi	r22, 0x01	; 1
    2d0a:	71 05       	cpc	r23, r1
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <midi_input_callbacks+0x82>
    2d0e:	b3 c0       	rjmp	.+358    	; 0x2e76 <midi_input_callbacks+0x1e8>
    2d10:	99 c0       	rjmp	.+306    	; 0x2e44 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2d12:	84 2f       	mov	r24, r20
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	80 7f       	andi	r24, 0xF0	; 240
    2d18:	90 70       	andi	r25, 0x00	; 0
    2d1a:	80 3a       	cpi	r24, 0xA0	; 160
    2d1c:	91 05       	cpc	r25, r1
    2d1e:	29 f1       	breq	.+74     	; 0x2d6a <midi_input_callbacks+0xdc>
    2d20:	81 3a       	cpi	r24, 0xA1	; 161
    2d22:	91 05       	cpc	r25, r1
    2d24:	3c f4       	brge	.+14     	; 0x2d34 <midi_input_callbacks+0xa6>
    2d26:	80 38       	cpi	r24, 0x80	; 128
    2d28:	91 05       	cpc	r25, r1
    2d2a:	c9 f0       	breq	.+50     	; 0x2d5e <midi_input_callbacks+0xd0>
    2d2c:	80 39       	cpi	r24, 0x90	; 144
    2d2e:	91 05       	cpc	r25, r1
    2d30:	91 f5       	brne	.+100    	; 0x2d96 <midi_input_callbacks+0x108>
    2d32:	0f c0       	rjmp	.+30     	; 0x2d52 <midi_input_callbacks+0xc4>
    2d34:	80 3e       	cpi	r24, 0xE0	; 224
    2d36:	91 05       	cpc	r25, r1
    2d38:	f1 f0       	breq	.+60     	; 0x2d76 <midi_input_callbacks+0xe8>
    2d3a:	80 3f       	cpi	r24, 0xF0	; 240
    2d3c:	91 05       	cpc	r25, r1
    2d3e:	09 f1       	breq	.+66     	; 0x2d82 <midi_input_callbacks+0xf4>
    2d40:	80 3b       	cpi	r24, 0xB0	; 176
    2d42:	91 05       	cpc	r25, r1
    2d44:	41 f5       	brne	.+80     	; 0x2d96 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2d46:	d6 01       	movw	r26, r12
    2d48:	12 96       	adiw	r26, 0x02	; 2
    2d4a:	ed 91       	ld	r30, X+
    2d4c:	fc 91       	ld	r31, X
    2d4e:	13 97       	sbiw	r26, 0x03	; 3
              break;
    2d50:	24 c0       	rjmp	.+72     	; 0x2d9a <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    2d52:	d6 01       	movw	r26, r12
    2d54:	14 96       	adiw	r26, 0x04	; 4
    2d56:	ed 91       	ld	r30, X+
    2d58:	fc 91       	ld	r31, X
    2d5a:	15 97       	sbiw	r26, 0x05	; 5
              break;
    2d5c:	1e c0       	rjmp	.+60     	; 0x2d9a <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    2d5e:	d6 01       	movw	r26, r12
    2d60:	16 96       	adiw	r26, 0x06	; 6
    2d62:	ed 91       	ld	r30, X+
    2d64:	fc 91       	ld	r31, X
    2d66:	17 97       	sbiw	r26, 0x07	; 7
              break;
    2d68:	18 c0       	rjmp	.+48     	; 0x2d9a <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    2d6a:	d6 01       	movw	r26, r12
    2d6c:	18 96       	adiw	r26, 0x08	; 8
    2d6e:	ed 91       	ld	r30, X+
    2d70:	fc 91       	ld	r31, X
    2d72:	19 97       	sbiw	r26, 0x09	; 9
              break;
    2d74:	12 c0       	rjmp	.+36     	; 0x2d9a <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    2d76:	d6 01       	movw	r26, r12
    2d78:	1a 96       	adiw	r26, 0x0a	; 10
    2d7a:	ed 91       	ld	r30, X+
    2d7c:	fc 91       	ld	r31, X
    2d7e:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    2d80:	0c c0       	rjmp	.+24     	; 0x2d9a <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    2d82:	b2 ef       	ldi	r27, 0xF2	; 242
    2d84:	4b 17       	cp	r20, r27
    2d86:	09 f0       	breq	.+2      	; 0x2d8a <midi_input_callbacks+0xfc>
    2d88:	90 c0       	rjmp	.+288    	; 0x2eaa <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    2d8a:	d6 01       	movw	r26, r12
    2d8c:	1c 96       	adiw	r26, 0x0c	; 12
    2d8e:	ed 91       	ld	r30, X+
    2d90:	fc 91       	ld	r31, X
    2d92:	1d 97       	sbiw	r26, 0x0d	; 13
    2d94:	02 c0       	rjmp	.+4      	; 0x2d9a <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    2d96:	e0 e0       	ldi	r30, 0x00	; 0
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    2d9a:	30 97       	sbiw	r30, 0x00	; 0
    2d9c:	09 f4       	brne	.+2      	; 0x2da0 <midi_input_callbacks+0x112>
    2d9e:	85 c0       	rjmp	.+266    	; 0x2eaa <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    2da0:	b2 ef       	ldi	r27, 0xF2	; 242
    2da2:	fb 16       	cp	r15, r27
    2da4:	31 f4       	brne	.+12     	; 0x2db2 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    2da6:	c6 01       	movw	r24, r12
    2da8:	62 ef       	ldi	r22, 0xF2	; 242
    2daa:	4e 2d       	mov	r20, r14
    2dac:	21 2f       	mov	r18, r17
    2dae:	09 95       	icall
    2db0:	6c c0       	rjmp	.+216    	; 0x2e8a <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    2db2:	6f 2d       	mov	r22, r15
    2db4:	6f 70       	andi	r22, 0x0F	; 15
    2db6:	c6 01       	movw	r24, r12
    2db8:	4e 2d       	mov	r20, r14
    2dba:	21 2f       	mov	r18, r17
    2dbc:	09 95       	icall
    2dbe:	65 c0       	rjmp	.+202    	; 0x2e8a <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2dc0:	84 2f       	mov	r24, r20
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	80 7f       	andi	r24, 0xF0	; 240
    2dc6:	90 70       	andi	r25, 0x00	; 0
    2dc8:	80 3d       	cpi	r24, 0xD0	; 208
    2dca:	91 05       	cpc	r25, r1
    2dcc:	61 f0       	breq	.+24     	; 0x2de6 <midi_input_callbacks+0x158>
    2dce:	80 3f       	cpi	r24, 0xF0	; 240
    2dd0:	91 05       	cpc	r25, r1
    2dd2:	79 f0       	breq	.+30     	; 0x2df2 <midi_input_callbacks+0x164>
    2dd4:	80 3c       	cpi	r24, 0xC0	; 192
    2dd6:	91 05       	cpc	r25, r1
    2dd8:	f9 f4       	brne	.+62     	; 0x2e18 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    2dda:	d6 01       	movw	r26, r12
    2ddc:	1e 96       	adiw	r26, 0x0e	; 14
    2dde:	ed 91       	ld	r30, X+
    2de0:	fc 91       	ld	r31, X
    2de2:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2de4:	1b c0       	rjmp	.+54     	; 0x2e1c <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2de6:	d6 01       	movw	r26, r12
    2de8:	50 96       	adiw	r26, 0x10	; 16
    2dea:	ed 91       	ld	r30, X+
    2dec:	fc 91       	ld	r31, X
    2dee:	51 97       	sbiw	r26, 0x11	; 17
              break;
    2df0:	15 c0       	rjmp	.+42     	; 0x2e1c <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2df2:	b3 ef       	ldi	r27, 0xF3	; 243
    2df4:	4b 17       	cp	r20, r27
    2df6:	31 f4       	brne	.+12     	; 0x2e04 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    2df8:	d6 01       	movw	r26, r12
    2dfa:	52 96       	adiw	r26, 0x12	; 18
    2dfc:	ed 91       	ld	r30, X+
    2dfe:	fc 91       	ld	r31, X
    2e00:	53 97       	sbiw	r26, 0x13	; 19
    2e02:	0c c0       	rjmp	.+24     	; 0x2e1c <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2e04:	b1 ef       	ldi	r27, 0xF1	; 241
    2e06:	4b 17       	cp	r20, r27
    2e08:	09 f0       	breq	.+2      	; 0x2e0c <midi_input_callbacks+0x17e>
    2e0a:	4f c0       	rjmp	.+158    	; 0x2eaa <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    2e0c:	d6 01       	movw	r26, r12
    2e0e:	54 96       	adiw	r26, 0x14	; 20
    2e10:	ed 91       	ld	r30, X+
    2e12:	fc 91       	ld	r31, X
    2e14:	55 97       	sbiw	r26, 0x15	; 21
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    2e18:	e0 e0       	ldi	r30, 0x00	; 0
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    2e1c:	30 97       	sbiw	r30, 0x00	; 0
    2e1e:	09 f4       	brne	.+2      	; 0x2e22 <midi_input_callbacks+0x194>
    2e20:	44 c0       	rjmp	.+136    	; 0x2eaa <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2e22:	b3 ef       	ldi	r27, 0xF3	; 243
    2e24:	fb 16       	cp	r15, r27
    2e26:	19 f0       	breq	.+6      	; 0x2e2e <midi_input_callbacks+0x1a0>
    2e28:	81 ef       	ldi	r24, 0xF1	; 241
    2e2a:	f8 16       	cp	r15, r24
    2e2c:	29 f4       	brne	.+10     	; 0x2e38 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    2e2e:	c6 01       	movw	r24, r12
    2e30:	6f 2d       	mov	r22, r15
    2e32:	4e 2d       	mov	r20, r14
    2e34:	09 95       	icall
    2e36:	29 c0       	rjmp	.+82     	; 0x2e8a <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    2e38:	6f 2d       	mov	r22, r15
    2e3a:	6f 70       	andi	r22, 0x0F	; 15
    2e3c:	c6 01       	movw	r24, r12
    2e3e:	4e 2d       	mov	r20, r14
    2e40:	09 95       	icall
    2e42:	23 c0       	rjmp	.+70     	; 0x2e8a <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2e44:	84 2f       	mov	r24, r20
    2e46:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <midi_is_realtime>
    2e4a:	88 23       	and	r24, r24
    2e4c:	31 f0       	breq	.+12     	; 0x2e5a <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    2e4e:	d6 01       	movw	r26, r12
    2e50:	56 96       	adiw	r26, 0x16	; 22
    2e52:	ed 91       	ld	r30, X+
    2e54:	fc 91       	ld	r31, X
    2e56:	57 97       	sbiw	r26, 0x17	; 23
    2e58:	08 c0       	rjmp	.+16     	; 0x2e6a <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    2e5a:	b6 ef       	ldi	r27, 0xF6	; 246
    2e5c:	fb 16       	cp	r15, r27
    2e5e:	29 f5       	brne	.+74     	; 0x2eaa <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    2e60:	d6 01       	movw	r26, r12
    2e62:	58 96       	adiw	r26, 0x18	; 24
    2e64:	ed 91       	ld	r30, X+
    2e66:	fc 91       	ld	r31, X
    2e68:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    2e6a:	30 97       	sbiw	r30, 0x00	; 0
    2e6c:	f1 f0       	breq	.+60     	; 0x2eaa <midi_input_callbacks+0x21c>
            func(device, byte0);
    2e6e:	c6 01       	movw	r24, r12
    2e70:	6f 2d       	mov	r22, r15
    2e72:	09 95       	icall
    2e74:	0a c0       	rjmp	.+20     	; 0x2e8a <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    2e76:	64 30       	cpi	r22, 0x04	; 4
    2e78:	71 05       	cpc	r23, r1
    2e7a:	a8 f4       	brcc	.+42     	; 0x2ea6 <midi_input_callbacks+0x218>
    2e7c:	16 c0       	rjmp	.+44     	; 0x2eaa <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    2e7e:	c6 01       	movw	r24, r12
    2e80:	b5 01       	movw	r22, r10
    2e82:	4f 2d       	mov	r20, r15
    2e84:	2e 2d       	mov	r18, r14
    2e86:	01 2f       	mov	r16, r17
    2e88:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    2e8a:	d6 01       	movw	r26, r12
    2e8c:	5e 96       	adiw	r26, 0x1e	; 30
    2e8e:	ed 91       	ld	r30, X+
    2e90:	fc 91       	ld	r31, X
    2e92:	5f 97       	sbiw	r26, 0x1f	; 31
    2e94:	30 97       	sbiw	r30, 0x00	; 0
    2e96:	89 f0       	breq	.+34     	; 0x2eba <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    2e98:	c6 01       	movw	r24, r12
    2e9a:	b5 01       	movw	r22, r10
    2e9c:	4f 2d       	mov	r20, r15
    2e9e:	2e 2d       	mov	r18, r14
    2ea0:	01 2f       	mov	r16, r17
    2ea2:	09 95       	icall
    2ea4:	0a c0       	rjmp	.+20     	; 0x2eba <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    2ea6:	aa 24       	eor	r10, r10
    2ea8:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    2eaa:	d6 01       	movw	r26, r12
    2eac:	5c 96       	adiw	r26, 0x1c	; 28
    2eae:	ed 91       	ld	r30, X+
    2eb0:	fc 91       	ld	r31, X
    2eb2:	5d 97       	sbiw	r26, 0x1d	; 29
    2eb4:	30 97       	sbiw	r30, 0x00	; 0
    2eb6:	19 f7       	brne	.-58     	; 0x2e7e <midi_input_callbacks+0x1f0>
    2eb8:	e8 cf       	rjmp	.-48     	; 0x2e8a <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	ff 90       	pop	r15
    2eca:	ef 90       	pop	r14
    2ecc:	df 90       	pop	r13
    2ece:	cf 90       	pop	r12
    2ed0:	bf 90       	pop	r11
    2ed2:	af 90       	pop	r10
    2ed4:	08 95       	ret

00002ed6 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    2ed6:	ef 92       	push	r14
    2ed8:	ff 92       	push	r15
    2eda:	0f 93       	push	r16
    2edc:	cf 93       	push	r28
    2ede:	df 93       	push	r29
    2ee0:	7c 01       	movw	r14, r24
    2ee2:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    2ee4:	86 2f       	mov	r24, r22
    2ee6:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <midi_is_realtime>
    2eea:	88 23       	and	r24, r24
    2eec:	91 f0       	breq	.+36     	; 0x2f12 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    2eee:	d7 01       	movw	r26, r14
    2ef0:	95 96       	adiw	r26, 0x25	; 37
    2ef2:	dc 91       	ld	r29, X
    2ef4:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	95 96       	adiw	r26, 0x25	; 37
    2efa:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    2efc:	c7 01       	movw	r24, r14
    2efe:	61 e0       	ldi	r22, 0x01	; 1
    2f00:	70 e0       	ldi	r23, 0x00	; 0
    2f02:	4c 2f       	mov	r20, r28
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	00 e0       	ldi	r16, 0x00	; 0
    2f08:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <midi_input_callbacks>
    device->input_state = state;
    2f0c:	f7 01       	movw	r30, r14
    2f0e:	d5 a3       	lds	r29, 0x55
    2f10:	b7 c0       	rjmp	.+366    	; 0x3080 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    2f12:	8c 2f       	mov	r24, r28
    2f14:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <midi_is_statusbyte>
    2f18:	88 23       	and	r24, r24
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <midi_process_byte+0x48>
    2f1c:	73 c0       	rjmp	.+230    	; 0x3004 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    2f1e:	d7 01       	movw	r26, r14
    2f20:	95 96       	adiw	r26, 0x25	; 37
    2f22:	8c 91       	ld	r24, X
    2f24:	95 97       	sbiw	r26, 0x25	; 37
    2f26:	84 30       	cpi	r24, 0x04	; 4
    2f28:	49 f0       	breq	.+18     	; 0x2f3c <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    2f2a:	92 96       	adiw	r26, 0x22	; 34
    2f2c:	cc 93       	st	X, r28
    2f2e:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	97 96       	adiw	r26, 0x27	; 39
    2f36:	9c 93       	st	X, r25
    2f38:	8e 93       	st	-X, r24
    2f3a:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    2f3c:	8c 2f       	mov	r24, r28
    2f3e:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <midi_packet_length>
    2f42:	81 30       	cpi	r24, 0x01	; 1
    2f44:	41 f0       	breq	.+16     	; 0x2f56 <midi_process_byte+0x80>
    2f46:	81 30       	cpi	r24, 0x01	; 1
    2f48:	00 f1       	brcs	.+64     	; 0x2f8a <midi_process_byte+0xb4>
    2f4a:	82 30       	cpi	r24, 0x02	; 2
    2f4c:	a1 f0       	breq	.+40     	; 0x2f76 <midi_process_byte+0xa0>
    2f4e:	83 30       	cpi	r24, 0x03	; 3
    2f50:	09 f0       	breq	.+2      	; 0x2f54 <midi_process_byte+0x7e>
    2f52:	4f c0       	rjmp	.+158    	; 0x2ff2 <midi_process_byte+0x11c>
    2f54:	14 c0       	rjmp	.+40     	; 0x2f7e <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	f7 01       	movw	r30, r14
    2f5a:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    2f5c:	c7 01       	movw	r24, r14
    2f5e:	61 e0       	ldi	r22, 0x01	; 1
    2f60:	70 e0       	ldi	r23, 0x00	; 0
    2f62:	4c 2f       	mov	r20, r28
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	00 e0       	ldi	r16, 0x00	; 0
    2f68:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <midi_input_callbacks>
        device->input_state = IDLE;
    2f6c:	d7 01       	movw	r26, r14
    2f6e:	95 96       	adiw	r26, 0x25	; 37
    2f70:	1c 92       	st	X, r1
    2f72:	95 97       	sbiw	r26, 0x25	; 37
        break;
    2f74:	85 c0       	rjmp	.+266    	; 0x3080 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    2f76:	82 e0       	ldi	r24, 0x02	; 2
    2f78:	f7 01       	movw	r30, r14
    2f7a:	85 a3       	lds	r24, 0x55
        break;
    2f7c:	81 c0       	rjmp	.+258    	; 0x3080 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    2f7e:	83 e0       	ldi	r24, 0x03	; 3
    2f80:	d7 01       	movw	r26, r14
    2f82:	95 96       	adiw	r26, 0x25	; 37
    2f84:	8c 93       	st	X, r24
    2f86:	95 97       	sbiw	r26, 0x25	; 37
        break;
    2f88:	7b c0       	rjmp	.+246    	; 0x3080 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    2f8a:	c0 3f       	cpi	r28, 0xF0	; 240
    2f8c:	19 f0       	breq	.+6      	; 0x2f94 <midi_process_byte+0xbe>
    2f8e:	c7 3f       	cpi	r28, 0xF7	; 247
    2f90:	59 f5       	brne	.+86     	; 0x2fe8 <midi_process_byte+0x112>
    2f92:	0a c0       	rjmp	.+20     	; 0x2fa8 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    2f94:	84 e0       	ldi	r24, 0x04	; 4
    2f96:	f7 01       	movw	r30, r14
    2f98:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    2f9a:	80 ef       	ldi	r24, 0xF0	; 240
    2f9c:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	97 a3       	lds	r25, 0x57
    2fa4:	86 a3       	lds	r24, 0x56
            break;
    2fa6:	6c c0       	rjmp	.+216    	; 0x3080 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    2fa8:	d7 01       	movw	r26, r14
    2faa:	96 96       	adiw	r26, 0x26	; 38
    2fac:	2d 91       	ld	r18, X+
    2fae:	3c 91       	ld	r19, X
    2fb0:	97 97       	sbiw	r26, 0x27	; 39
    2fb2:	c9 01       	movw	r24, r18
    2fb4:	63 e0       	ldi	r22, 0x03	; 3
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	0e 94 3f 1a 	call	0x347e	; 0x347e <__udivmodhi4>
    2fbc:	f7 01       	movw	r30, r14
    2fbe:	e8 0f       	add	r30, r24
    2fc0:	f9 1f       	adc	r31, r25
    2fc2:	87 ef       	ldi	r24, 0xF7	; 247
    2fc4:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    2fc6:	b9 01       	movw	r22, r18
    2fc8:	6f 5f       	subi	r22, 0xFF	; 255
    2fca:	7f 4f       	sbci	r23, 0xFF	; 255
    2fcc:	f7 01       	movw	r30, r14
    2fce:	77 a3       	lds	r23, 0x57
    2fd0:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    2fd2:	c7 01       	movw	r24, r14
    2fd4:	42 a1       	lds	r20, 0x42
    2fd6:	23 a1       	lds	r18, 0x43
    2fd8:	04 a1       	lds	r16, 0x44
    2fda:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    2fde:	d7 01       	movw	r26, r14
    2fe0:	95 96       	adiw	r26, 0x25	; 37
    2fe2:	1c 92       	st	X, r1
    2fe4:	95 97       	sbiw	r26, 0x25	; 37
            break;
    2fe6:	4c c0       	rjmp	.+152    	; 0x3080 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    2fe8:	f7 01       	movw	r30, r14
    2fea:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    2fec:	17 a2       	lds	r17, 0x97
    2fee:	16 a2       	lds	r17, 0x96
    2ff0:	47 c0       	rjmp	.+142    	; 0x3080 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    2ff2:	d7 01       	movw	r26, r14
    2ff4:	95 96       	adiw	r26, 0x25	; 37
    2ff6:	1c 92       	st	X, r1
    2ff8:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    2ffa:	97 96       	adiw	r26, 0x27	; 39
    2ffc:	1c 92       	st	X, r1
    2ffe:	1e 92       	st	-X, r1
    3000:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3002:	3e c0       	rjmp	.+124    	; 0x3080 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    3004:	f7 01       	movw	r30, r14
    3006:	25 a1       	lds	r18, 0x45
    3008:	22 23       	and	r18, r18
    300a:	d1 f1       	breq	.+116    	; 0x3080 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    300c:	06 a0       	lds	r16, 0x86
    300e:	f7 a1       	lds	r31, 0x47
    3010:	e0 2d       	mov	r30, r0
    3012:	cf 01       	movw	r24, r30
    3014:	63 e0       	ldi	r22, 0x03	; 3
    3016:	70 e0       	ldi	r23, 0x00	; 0
    3018:	0e 94 3f 1a 	call	0x347e	; 0x347e <__udivmodhi4>
    301c:	ac 01       	movw	r20, r24
    301e:	8e 0d       	add	r24, r14
    3020:	9f 1d       	adc	r25, r15
    3022:	dc 01       	movw	r26, r24
    3024:	92 96       	adiw	r26, 0x22	; 34
    3026:	cc 93       	st	X, r28
    3028:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    302a:	bf 01       	movw	r22, r30
    302c:	6f 5f       	subi	r22, 0xFF	; 255
    302e:	7f 4f       	sbci	r23, 0xFF	; 255
    3030:	f7 01       	movw	r30, r14
    3032:	77 a3       	lds	r23, 0x57
    3034:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    3036:	41 30       	cpi	r20, 0x01	; 1
    3038:	51 05       	cpc	r21, r1
    303a:	91 f0       	breq	.+36     	; 0x3060 <midi_process_byte+0x18a>
    303c:	42 30       	cpi	r20, 0x02	; 2
    303e:	51 05       	cpc	r21, r1
    3040:	f9 f4       	brne	.+62     	; 0x3080 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    3042:	c7 01       	movw	r24, r14
    3044:	42 a1       	lds	r20, 0x42
    3046:	23 a1       	lds	r18, 0x43
    3048:	04 a1       	lds	r16, 0x44
    304a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    304e:	f7 01       	movw	r30, r14
    3050:	85 a1       	lds	r24, 0x45
    3052:	84 30       	cpi	r24, 0x04	; 4
    3054:	a9 f0       	breq	.+42     	; 0x3080 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	97 a3       	lds	r25, 0x57
    305c:	86 a3       	lds	r24, 0x56
    305e:	10 c0       	rjmp	.+32     	; 0x3080 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3060:	22 30       	cpi	r18, 0x02	; 2
    3062:	71 f4       	brne	.+28     	; 0x3080 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3064:	c7 01       	movw	r24, r14
    3066:	42 a1       	lds	r20, 0x42
    3068:	23 a1       	lds	r18, 0x43
    306a:	00 e0       	ldi	r16, 0x00	; 0
    306c:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3070:	f7 01       	movw	r30, r14
    3072:	85 a1       	lds	r24, 0x45
    3074:	84 30       	cpi	r24, 0x04	; 4
    3076:	21 f0       	breq	.+8      	; 0x3080 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	97 a3       	lds	r25, 0x57
    307e:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	0f 91       	pop	r16
    3086:	ff 90       	pop	r15
    3088:	ef 90       	pop	r14
    308a:	08 95       	ret

0000308c <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    308c:	cf 92       	push	r12
    308e:	df 92       	push	r13
    3090:	ef 92       	push	r14
    3092:	ff 92       	push	r15
    3094:	0f 93       	push	r16
    3096:	1f 93       	push	r17
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    309e:	dc 01       	movw	r26, r24
    30a0:	90 96       	adiw	r26, 0x20	; 32
    30a2:	ed 91       	ld	r30, X+
    30a4:	fc 91       	ld	r31, X
    30a6:	91 97       	sbiw	r26, 0x21	; 33
    30a8:	30 97       	sbiw	r30, 0x00	; 0
    30aa:	09 f0       	breq	.+2      	; 0x30ae <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    30ac:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    30ae:	0f 2e       	mov	r0, r31
    30b0:	f8 ee       	ldi	r31, 0xE8	; 232
    30b2:	ef 2e       	mov	r14, r31
    30b4:	ff 24       	eor	r15, r15
    30b6:	f0 2d       	mov	r31, r0
    30b8:	ec 0c       	add	r14, r12
    30ba:	fd 1c       	adc	r15, r13
    30bc:	c7 01       	movw	r24, r14
    30be:	0e 94 9b 13 	call	0x2736	; 0x2736 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    30c2:	c8 2f       	mov	r28, r24
    30c4:	d0 e0       	ldi	r29, 0x00	; 0
    30c6:	20 97       	sbiw	r28, 0x00	; 0
    30c8:	99 f0       	breq	.+38     	; 0x30f0 <midi_device_process+0x64>
    30ca:	00 e0       	ldi	r16, 0x00	; 0
    30cc:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    30ce:	c7 01       	movw	r24, r14
    30d0:	60 e0       	ldi	r22, 0x00	; 0
    30d2:	0e 94 b0 13 	call	0x2760	; 0x2760 <bytequeue_get>
    30d6:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    30d8:	c6 01       	movw	r24, r12
    30da:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    30de:	c7 01       	movw	r24, r14
    30e0:	61 e0       	ldi	r22, 0x01	; 1
    30e2:	0e 94 c1 13 	call	0x2782	; 0x2782 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    30e6:	0f 5f       	subi	r16, 0xFF	; 255
    30e8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ea:	0c 17       	cp	r16, r28
    30ec:	1d 07       	cpc	r17, r29
    30ee:	78 f3       	brcs	.-34     	; 0x30ce <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	1f 91       	pop	r17
    30f6:	0f 91       	pop	r16
    30f8:	ff 90       	pop	r15
    30fa:	ef 90       	pop	r14
    30fc:	df 90       	pop	r13
    30fe:	cf 90       	pop	r12
    3100:	08 95       	ret

00003102 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3102:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    3104:	67 e0       	ldi	r22, 0x07	; 7
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	0e 94 3f 1a 	call	0x347e	; 0x347e <__udivmodhi4>
    310c:	48 2f       	mov	r20, r24
   if (remainder)
    310e:	88 23       	and	r24, r24
    3110:	81 f0       	breq	.+32     	; 0x3132 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    3112:	c9 01       	movw	r24, r18
    3114:	67 e0       	ldi	r22, 0x07	; 7
    3116:	70 e0       	ldi	r23, 0x00	; 0
    3118:	0e 94 3f 1a 	call	0x347e	; 0x347e <__udivmodhi4>
    311c:	cb 01       	movw	r24, r22
    311e:	88 0f       	add	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	88 0f       	add	r24, r24
    3124:	99 1f       	adc	r25, r25
    3126:	88 0f       	add	r24, r24
    3128:	99 1f       	adc	r25, r25
    312a:	01 96       	adiw	r24, 0x01	; 1
    312c:	84 0f       	add	r24, r20
    312e:	91 1d       	adc	r25, r1
    3130:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3132:	c9 01       	movw	r24, r18
    3134:	67 e0       	ldi	r22, 0x07	; 7
    3136:	70 e0       	ldi	r23, 0x00	; 0
    3138:	0e 94 3f 1a 	call	0x347e	; 0x347e <__udivmodhi4>
    313c:	cb 01       	movw	r24, r22
    313e:	88 0f       	add	r24, r24
    3140:	99 1f       	adc	r25, r25
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
}
    314a:	08 95       	ret

0000314c <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    314c:	48 2f       	mov	r20, r24
    314e:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3150:	a1 f0       	breq	.+40     	; 0x317a <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3152:	9c 01       	movw	r18, r24
    3154:	36 95       	lsr	r19
    3156:	27 95       	ror	r18
    3158:	36 95       	lsr	r19
    315a:	27 95       	ror	r18
    315c:	36 95       	lsr	r19
    315e:	27 95       	ror	r18
    3160:	c9 01       	movw	r24, r18
    3162:	88 0f       	add	r24, r24
    3164:	99 1f       	adc	r25, r25
    3166:	88 0f       	add	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	82 1b       	sub	r24, r18
    3170:	93 0b       	sbc	r25, r19
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	84 0f       	add	r24, r20
    3176:	91 1d       	adc	r25, r1
    3178:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    317a:	9c 01       	movw	r18, r24
    317c:	36 95       	lsr	r19
    317e:	27 95       	ror	r18
    3180:	36 95       	lsr	r19
    3182:	27 95       	ror	r18
    3184:	36 95       	lsr	r19
    3186:	27 95       	ror	r18
    3188:	c9 01       	movw	r24, r18
    318a:	88 0f       	add	r24, r24
    318c:	99 1f       	adc	r25, r25
    318e:	88 0f       	add	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	88 0f       	add	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	82 1b       	sub	r24, r18
    3198:	93 0b       	sbc	r25, r19
}
    319a:	08 95       	ret

0000319c <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    319c:	2f 92       	push	r2
    319e:	3f 92       	push	r3
    31a0:	4f 92       	push	r4
    31a2:	5f 92       	push	r5
    31a4:	6f 92       	push	r6
    31a6:	7f 92       	push	r7
    31a8:	8f 92       	push	r8
    31aa:	9f 92       	push	r9
    31ac:	af 92       	push	r10
    31ae:	bf 92       	push	r11
    31b0:	cf 92       	push	r12
    31b2:	df 92       	push	r13
    31b4:	ef 92       	push	r14
    31b6:	ff 92       	push	r15
    31b8:	0f 93       	push	r16
    31ba:	1f 93       	push	r17
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
    31c0:	00 d0       	rcall	.+0      	; 0x31c2 <sysex_encode+0x26>
    31c2:	00 d0       	rcall	.+0      	; 0x31c4 <sysex_encode+0x28>
    31c4:	00 d0       	rcall	.+0      	; 0x31c6 <sysex_encode+0x2a>
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	1c 01       	movw	r2, r24
    31cc:	7a 83       	std	Y+2, r23	; 0x02
    31ce:	69 83       	std	Y+1, r22	; 0x01
    31d0:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    31d2:	ca 01       	movw	r24, r20
    31d4:	67 e0       	ldi	r22, 0x07	; 7
    31d6:	70 e0       	ldi	r23, 0x00	; 0
    31d8:	0e 94 3f 1a 	call	0x347e	; 0x347e <__udivmodhi4>
    31dc:	2b 01       	movw	r4, r22
    31de:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    31e0:	61 15       	cp	r22, r1
    31e2:	71 05       	cpc	r23, r1
    31e4:	b1 f1       	breq	.+108    	; 0x3252 <sysex_encode+0xb6>
    31e6:	81 01       	movw	r16, r2
    31e8:	e9 80       	ldd	r14, Y+1	; 0x01
    31ea:	fa 80       	ldd	r15, Y+2	; 0x02
    31ec:	cc 24       	eor	r12, r12
    31ee:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    31f0:	88 24       	eor	r8, r8
    31f2:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    31f4:	1e 83       	std	Y+6, r17	; 0x06
    31f6:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    31f8:	f8 01       	movw	r30, r16
    31fa:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    31fc:	fc 82       	std	Y+4, r15	; 0x04
    31fe:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3200:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3202:	ab 81       	ldd	r26, Y+3	; 0x03
    3204:	bc 81       	ldd	r27, Y+4	; 0x04
    3206:	2d 91       	ld	r18, X+
    3208:	bc 83       	std	Y+4, r27	; 0x04
    320a:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    320c:	4f 5f       	subi	r20, 0xFF	; 255
    320e:	5f 4f       	sbci	r21, 0xFF	; 255
    3210:	82 2f       	mov	r24, r18
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	80 78       	andi	r24, 0x80	; 128
    3216:	90 70       	andi	r25, 0x00	; 0
    3218:	bc 01       	movw	r22, r24
    321a:	04 2e       	mov	r0, r20
    321c:	02 c0       	rjmp	.+4      	; 0x3222 <sysex_encode+0x86>
    321e:	75 95       	asr	r23
    3220:	67 95       	ror	r22
    3222:	0a 94       	dec	r0
    3224:	e2 f7       	brpl	.-8      	; 0x321e <sysex_encode+0x82>
    3226:	ad 81       	ldd	r26, Y+5	; 0x05
    3228:	be 81       	ldd	r27, Y+6	; 0x06
    322a:	8c 91       	ld	r24, X
    322c:	86 2b       	or	r24, r22
    322e:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3230:	2f 77       	andi	r18, 0x7F	; 127
    3232:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3234:	47 30       	cpi	r20, 0x07	; 7
    3236:	51 05       	cpc	r21, r1
    3238:	21 f7       	brne	.-56     	; 0x3202 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    323a:	08 94       	sec
    323c:	c1 1c       	adc	r12, r1
    323e:	d1 1c       	adc	r13, r1
    3240:	08 5f       	subi	r16, 0xF8	; 248
    3242:	1f 4f       	sbci	r17, 0xFF	; 255
    3244:	e7 e0       	ldi	r30, 0x07	; 7
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	ee 0e       	add	r14, r30
    324a:	ff 1e       	adc	r15, r31
    324c:	ca 14       	cp	r12, r10
    324e:	db 04       	cpc	r13, r11
    3250:	89 f6       	brne	.-94     	; 0x31f4 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3252:	c3 01       	movw	r24, r6
    3254:	67 e0       	ldi	r22, 0x07	; 7
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	0e 94 3f 1a 	call	0x347e	; 0x347e <__udivmodhi4>
   if (remainder) {
    325c:	88 23       	and	r24, r24
    325e:	d9 f1       	breq	.+118    	; 0x32d6 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3260:	82 01       	movw	r16, r4
    3262:	00 0f       	add	r16, r16
    3264:	11 1f       	adc	r17, r17
    3266:	00 0f       	add	r16, r16
    3268:	11 1f       	adc	r17, r17
    326a:	00 0f       	add	r16, r16
    326c:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    326e:	78 01       	movw	r14, r16
    3270:	e4 18       	sub	r14, r4
    3272:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3274:	d1 01       	movw	r26, r2
    3276:	a0 0f       	add	r26, r16
    3278:	b1 1f       	adc	r27, r17
    327a:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    327c:	68 2f       	mov	r22, r24
    327e:	70 e0       	ldi	r23, 0x00	; 0
    3280:	61 15       	cp	r22, r1
    3282:	71 05       	cpc	r23, r1
    3284:	19 f1       	breq	.+70     	; 0x32cc <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3286:	e9 81       	ldd	r30, Y+1	; 0x01
    3288:	fa 81       	ldd	r31, Y+2	; 0x02
    328a:	ee 0e       	add	r14, r30
    328c:	ff 1e       	adc	r15, r31
    328e:	c8 01       	movw	r24, r16
    3290:	01 96       	adiw	r24, 0x01	; 1
    3292:	28 0e       	add	r2, r24
    3294:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    329a:	f7 01       	movw	r30, r14
    329c:	41 91       	ld	r20, Z+
    329e:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    32a0:	2f 5f       	subi	r18, 0xFF	; 255
    32a2:	3f 4f       	sbci	r19, 0xFF	; 255
    32a4:	84 2f       	mov	r24, r20
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	80 78       	andi	r24, 0x80	; 128
    32aa:	90 70       	andi	r25, 0x00	; 0
    32ac:	02 2e       	mov	r0, r18
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <sysex_encode+0x118>
    32b0:	95 95       	asr	r25
    32b2:	87 95       	ror	r24
    32b4:	0a 94       	dec	r0
    32b6:	e2 f7       	brpl	.-8      	; 0x32b0 <sysex_encode+0x114>
    32b8:	9c 91       	ld	r25, X
    32ba:	89 2b       	or	r24, r25
    32bc:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    32be:	4f 77       	andi	r20, 0x7F	; 127
    32c0:	f1 01       	movw	r30, r2
    32c2:	41 93       	st	Z+, r20
    32c4:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    32c6:	26 17       	cp	r18, r22
    32c8:	37 07       	cpc	r19, r23
    32ca:	38 f3       	brcs	.-50     	; 0x329a <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    32cc:	c8 01       	movw	r24, r16
    32ce:	01 96       	adiw	r24, 0x01	; 1
    32d0:	86 0f       	add	r24, r22
    32d2:	97 1f       	adc	r25, r23
    32d4:	07 c0       	rjmp	.+14     	; 0x32e4 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    32d6:	c2 01       	movw	r24, r4
    32d8:	88 0f       	add	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	88 0f       	add	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	88 0f       	add	r24, r24
    32e2:	99 1f       	adc	r25, r25
   }
}
    32e4:	26 96       	adiw	r28, 0x06	; 6
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	df 91       	pop	r29
    32f2:	cf 91       	pop	r28
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	ff 90       	pop	r15
    32fa:	ef 90       	pop	r14
    32fc:	df 90       	pop	r13
    32fe:	cf 90       	pop	r12
    3300:	bf 90       	pop	r11
    3302:	af 90       	pop	r10
    3304:	9f 90       	pop	r9
    3306:	8f 90       	pop	r8
    3308:	7f 90       	pop	r7
    330a:	6f 90       	pop	r6
    330c:	5f 90       	pop	r5
    330e:	4f 90       	pop	r4
    3310:	3f 90       	pop	r3
    3312:	2f 90       	pop	r2
    3314:	08 95       	ret

00003316 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3316:	6f 92       	push	r6
    3318:	7f 92       	push	r7
    331a:	8f 92       	push	r8
    331c:	9f 92       	push	r9
    331e:	af 92       	push	r10
    3320:	bf 92       	push	r11
    3322:	cf 92       	push	r12
    3324:	df 92       	push	r13
    3326:	ef 92       	push	r14
    3328:	ff 92       	push	r15
    332a:	0f 93       	push	r16
    332c:	1f 93       	push	r17
    332e:	cf 93       	push	r28
    3330:	df 93       	push	r29
    3332:	3c 01       	movw	r6, r24
    3334:	4b 01       	movw	r8, r22
    3336:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3338:	42 30       	cpi	r20, 0x02	; 2
    333a:	51 05       	cpc	r21, r1
    333c:	08 f4       	brcc	.+2      	; 0x3340 <sysex_decode+0x2a>
    333e:	6f c0       	rjmp	.+222    	; 0x341e <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3340:	7a 01       	movw	r14, r20
    3342:	f6 94       	lsr	r15
    3344:	e7 94       	ror	r14
    3346:	f6 94       	lsr	r15
    3348:	e7 94       	ror	r14
    334a:	f6 94       	lsr	r15
    334c:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    334e:	e1 14       	cp	r14, r1
    3350:	f1 04       	cpc	r15, r1
    3352:	29 f1       	breq	.+74     	; 0x339e <sysex_decode+0x88>
    3354:	eb 01       	movw	r28, r22
    3356:	b3 01       	movw	r22, r6
    3358:	00 e0       	ldi	r16, 0x00	; 0
    335a:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    335c:	cc 24       	eor	r12, r12
    335e:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3360:	de 01       	movw	r26, r28
    3362:	11 96       	adiw	r26, 0x01	; 1
    3364:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3366:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3368:	2d 91       	ld	r18, X+
    336a:	2f 77       	andi	r18, 0x7F	; 127
    336c:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    336e:	4f 5f       	subi	r20, 0xFF	; 255
    3370:	5f 4f       	sbci	r21, 0xFF	; 255
    3372:	88 81       	ld	r24, Y
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	04 2e       	mov	r0, r20
    3378:	02 c0       	rjmp	.+4      	; 0x337e <sysex_decode+0x68>
    337a:	88 0f       	add	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	0a 94       	dec	r0
    3380:	e2 f7       	brpl	.-8      	; 0x337a <sysex_decode+0x64>
    3382:	80 78       	andi	r24, 0x80	; 128
    3384:	28 2b       	or	r18, r24
    3386:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3388:	47 30       	cpi	r20, 0x07	; 7
    338a:	51 05       	cpc	r21, r1
    338c:	69 f7       	brne	.-38     	; 0x3368 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    338e:	0f 5f       	subi	r16, 0xFF	; 255
    3390:	1f 4f       	sbci	r17, 0xFF	; 255
    3392:	28 96       	adiw	r28, 0x08	; 8
    3394:	69 5f       	subi	r22, 0xF9	; 249
    3396:	7f 4f       	sbci	r23, 0xFF	; 255
    3398:	0e 15       	cp	r16, r14
    339a:	1f 05       	cpc	r17, r15
    339c:	09 f7       	brne	.-62     	; 0x3360 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    339e:	5a 2d       	mov	r21, r10
    33a0:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    33a2:	99 f1       	breq	.+102    	; 0x340a <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    33a4:	e7 01       	movw	r28, r14
    33a6:	cc 0f       	add	r28, r28
    33a8:	dd 1f       	adc	r29, r29
    33aa:	cc 0f       	add	r28, r28
    33ac:	dd 1f       	adc	r29, r29
    33ae:	cc 0f       	add	r28, r28
    33b0:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    33b2:	8e 01       	movw	r16, r28
    33b4:	0e 19       	sub	r16, r14
    33b6:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    33b8:	65 2f       	mov	r22, r21
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	61 50       	subi	r22, 0x01	; 1
    33be:	70 40       	sbci	r23, 0x00	; 0
    33c0:	f9 f0       	breq	.+62     	; 0x3400 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    33c2:	ce 01       	movw	r24, r28
    33c4:	01 96       	adiw	r24, 0x01	; 1
    33c6:	d4 01       	movw	r26, r8
    33c8:	a8 0f       	add	r26, r24
    33ca:	b9 1f       	adc	r27, r25
    33cc:	f3 01       	movw	r30, r6
    33ce:	e0 0f       	add	r30, r16
    33d0:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    33d6:	c8 0d       	add	r28, r8
    33d8:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    33da:	4d 91       	ld	r20, X+
    33dc:	4f 77       	andi	r20, 0x7F	; 127
    33de:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    33e0:	2f 5f       	subi	r18, 0xFF	; 255
    33e2:	3f 4f       	sbci	r19, 0xFF	; 255
    33e4:	88 81       	ld	r24, Y
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	02 2e       	mov	r0, r18
    33ea:	02 c0       	rjmp	.+4      	; 0x33f0 <sysex_decode+0xda>
    33ec:	88 0f       	add	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	0a 94       	dec	r0
    33f2:	e2 f7       	brpl	.-8      	; 0x33ec <sysex_decode+0xd6>
    33f4:	80 78       	andi	r24, 0x80	; 128
    33f6:	48 2b       	or	r20, r24
    33f8:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    33fa:	26 17       	cp	r18, r22
    33fc:	37 07       	cpc	r19, r23
    33fe:	68 f3       	brcs	.-38     	; 0x33da <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3400:	c8 01       	movw	r24, r16
    3402:	01 97       	sbiw	r24, 0x01	; 1
    3404:	85 0f       	add	r24, r21
    3406:	91 1d       	adc	r25, r1
    3408:	0c c0       	rjmp	.+24     	; 0x3422 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    340a:	c7 01       	movw	r24, r14
    340c:	88 0f       	add	r24, r24
    340e:	99 1f       	adc	r25, r25
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	8e 19       	sub	r24, r14
    341a:	9f 09       	sbc	r25, r15
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3422:	df 91       	pop	r29
    3424:	cf 91       	pop	r28
    3426:	1f 91       	pop	r17
    3428:	0f 91       	pop	r16
    342a:	ff 90       	pop	r15
    342c:	ef 90       	pop	r14
    342e:	df 90       	pop	r13
    3430:	cf 90       	pop	r12
    3432:	bf 90       	pop	r11
    3434:	af 90       	pop	r10
    3436:	9f 90       	pop	r9
    3438:	8f 90       	pop	r8
    343a:	7f 90       	pop	r7
    343c:	6f 90       	pop	r6
    343e:	08 95       	ret

00003440 <__mulsi3>:
    3440:	62 9f       	mul	r22, r18
    3442:	d0 01       	movw	r26, r0
    3444:	73 9f       	mul	r23, r19
    3446:	f0 01       	movw	r30, r0
    3448:	82 9f       	mul	r24, r18
    344a:	e0 0d       	add	r30, r0
    344c:	f1 1d       	adc	r31, r1
    344e:	64 9f       	mul	r22, r20
    3450:	e0 0d       	add	r30, r0
    3452:	f1 1d       	adc	r31, r1
    3454:	92 9f       	mul	r25, r18
    3456:	f0 0d       	add	r31, r0
    3458:	83 9f       	mul	r24, r19
    345a:	f0 0d       	add	r31, r0
    345c:	74 9f       	mul	r23, r20
    345e:	f0 0d       	add	r31, r0
    3460:	65 9f       	mul	r22, r21
    3462:	f0 0d       	add	r31, r0
    3464:	99 27       	eor	r25, r25
    3466:	72 9f       	mul	r23, r18
    3468:	b0 0d       	add	r27, r0
    346a:	e1 1d       	adc	r30, r1
    346c:	f9 1f       	adc	r31, r25
    346e:	63 9f       	mul	r22, r19
    3470:	b0 0d       	add	r27, r0
    3472:	e1 1d       	adc	r30, r1
    3474:	f9 1f       	adc	r31, r25
    3476:	bd 01       	movw	r22, r26
    3478:	cf 01       	movw	r24, r30
    347a:	11 24       	eor	r1, r1
    347c:	08 95       	ret

0000347e <__udivmodhi4>:
    347e:	aa 1b       	sub	r26, r26
    3480:	bb 1b       	sub	r27, r27
    3482:	51 e1       	ldi	r21, 0x11	; 17
    3484:	07 c0       	rjmp	.+14     	; 0x3494 <__udivmodhi4_ep>

00003486 <__udivmodhi4_loop>:
    3486:	aa 1f       	adc	r26, r26
    3488:	bb 1f       	adc	r27, r27
    348a:	a6 17       	cp	r26, r22
    348c:	b7 07       	cpc	r27, r23
    348e:	10 f0       	brcs	.+4      	; 0x3494 <__udivmodhi4_ep>
    3490:	a6 1b       	sub	r26, r22
    3492:	b7 0b       	sbc	r27, r23

00003494 <__udivmodhi4_ep>:
    3494:	88 1f       	adc	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	5a 95       	dec	r21
    349a:	a9 f7       	brne	.-22     	; 0x3486 <__udivmodhi4_loop>
    349c:	80 95       	com	r24
    349e:	90 95       	com	r25
    34a0:	bc 01       	movw	r22, r24
    34a2:	cd 01       	movw	r24, r26
    34a4:	08 95       	ret

000034a6 <__divmodhi4>:
    34a6:	97 fb       	bst	r25, 7
    34a8:	09 2e       	mov	r0, r25
    34aa:	07 26       	eor	r0, r23
    34ac:	0a d0       	rcall	.+20     	; 0x34c2 <__divmodhi4_neg1>
    34ae:	77 fd       	sbrc	r23, 7
    34b0:	04 d0       	rcall	.+8      	; 0x34ba <__divmodhi4_neg2>
    34b2:	e5 df       	rcall	.-54     	; 0x347e <__udivmodhi4>
    34b4:	06 d0       	rcall	.+12     	; 0x34c2 <__divmodhi4_neg1>
    34b6:	00 20       	and	r0, r0
    34b8:	1a f4       	brpl	.+6      	; 0x34c0 <__divmodhi4_exit>

000034ba <__divmodhi4_neg2>:
    34ba:	70 95       	com	r23
    34bc:	61 95       	neg	r22
    34be:	7f 4f       	sbci	r23, 0xFF	; 255

000034c0 <__divmodhi4_exit>:
    34c0:	08 95       	ret

000034c2 <__divmodhi4_neg1>:
    34c2:	f6 f7       	brtc	.-4      	; 0x34c0 <__divmodhi4_exit>
    34c4:	90 95       	com	r25
    34c6:	81 95       	neg	r24
    34c8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ca:	08 95       	ret

000034cc <memcpy>:
    34cc:	fb 01       	movw	r30, r22
    34ce:	dc 01       	movw	r26, r24
    34d0:	02 c0       	rjmp	.+4      	; 0x34d6 <memcpy+0xa>
    34d2:	01 90       	ld	r0, Z+
    34d4:	0d 92       	st	X+, r0
    34d6:	41 50       	subi	r20, 0x01	; 1
    34d8:	50 40       	sbci	r21, 0x00	; 0
    34da:	d8 f7       	brcc	.-10     	; 0x34d2 <memcpy+0x6>
    34dc:	08 95       	ret

000034de <memmove>:
    34de:	68 17       	cp	r22, r24
    34e0:	79 07       	cpc	r23, r25
    34e2:	68 f4       	brcc	.+26     	; 0x34fe <memmove+0x20>
    34e4:	fb 01       	movw	r30, r22
    34e6:	dc 01       	movw	r26, r24
    34e8:	e4 0f       	add	r30, r20
    34ea:	f5 1f       	adc	r31, r21
    34ec:	a4 0f       	add	r26, r20
    34ee:	b5 1f       	adc	r27, r21
    34f0:	02 c0       	rjmp	.+4      	; 0x34f6 <memmove+0x18>
    34f2:	02 90       	ld	r0, -Z
    34f4:	0e 92       	st	-X, r0
    34f6:	41 50       	subi	r20, 0x01	; 1
    34f8:	50 40       	sbci	r21, 0x00	; 0
    34fa:	d8 f7       	brcc	.-10     	; 0x34f2 <memmove+0x14>
    34fc:	08 95       	ret
    34fe:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <memcpy>

00003502 <__eerd_block_m6450a>:
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22

00003506 <__eerd_blraw_m6450a>:
    3506:	fc 01       	movw	r30, r24
    3508:	f9 99       	sbic	0x1f, 1	; 31
    350a:	fe cf       	rjmp	.-4      	; 0x3508 <__eerd_blraw_m6450a+0x2>
    350c:	06 c0       	rjmp	.+12     	; 0x351a <__eerd_blraw_m6450a+0x14>
    350e:	f2 bd       	out	0x22, r31	; 34
    3510:	e1 bd       	out	0x21, r30	; 33
    3512:	f8 9a       	sbi	0x1f, 0	; 31
    3514:	31 96       	adiw	r30, 0x01	; 1
    3516:	00 b4       	in	r0, 0x20	; 32
    3518:	0d 92       	st	X+, r0
    351a:	41 50       	subi	r20, 0x01	; 1
    351c:	50 40       	sbci	r21, 0x00	; 0
    351e:	b8 f7       	brcc	.-18     	; 0x350e <__eerd_blraw_m6450a+0x8>
    3520:	08 95       	ret

00003522 <__eerd_word_m6450a>:
    3522:	a8 e1       	ldi	r26, 0x18	; 24
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	42 e0       	ldi	r20, 0x02	; 2
    3528:	50 e0       	ldi	r21, 0x00	; 0
    352a:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__eerd_blraw_m6450a>

0000352e <__eeupd_block_m6450a>:
    352e:	dc 01       	movw	r26, r24
    3530:	a4 0f       	add	r26, r20
    3532:	b5 1f       	adc	r27, r21
    3534:	41 50       	subi	r20, 0x01	; 1
    3536:	50 40       	sbci	r21, 0x00	; 0
    3538:	48 f0       	brcs	.+18     	; 0x354c <__eeupd_block_m6450a+0x1e>
    353a:	cb 01       	movw	r24, r22
    353c:	84 0f       	add	r24, r20
    353e:	95 1f       	adc	r25, r21
    3540:	2e 91       	ld	r18, -X
    3542:	0e 94 a8 1a 	call	0x3550	; 0x3550 <__eeupd_r18_m6450a>
    3546:	41 50       	subi	r20, 0x01	; 1
    3548:	50 40       	sbci	r21, 0x00	; 0
    354a:	d0 f7       	brcc	.-12     	; 0x3540 <__eeupd_block_m6450a+0x12>
    354c:	08 95       	ret

0000354e <__eeupd_byte_m6450a>:
    354e:	26 2f       	mov	r18, r22

00003550 <__eeupd_r18_m6450a>:
    3550:	f9 99       	sbic	0x1f, 1	; 31
    3552:	fe cf       	rjmp	.-4      	; 0x3550 <__eeupd_r18_m6450a>
    3554:	92 bd       	out	0x22, r25	; 34
    3556:	81 bd       	out	0x21, r24	; 33
    3558:	f8 9a       	sbi	0x1f, 0	; 31
    355a:	01 97       	sbiw	r24, 0x01	; 1
    355c:	00 b4       	in	r0, 0x20	; 32
    355e:	02 16       	cp	r0, r18
    3560:	31 f0       	breq	.+12     	; 0x356e <__eeupd_r18_m6450a+0x1e>
    3562:	20 bd       	out	0x20, r18	; 32
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	fa 9a       	sbi	0x1f, 2	; 31
    356a:	f9 9a       	sbi	0x1f, 1	; 31
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	08 95       	ret

00003570 <__eeupd_word_m6450a>:
    3570:	01 96       	adiw	r24, 0x01	; 1
    3572:	27 2f       	mov	r18, r23
    3574:	0e 94 a8 1a 	call	0x3550	; 0x3550 <__eeupd_r18_m6450a>
    3578:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__eeupd_byte_m6450a>

0000357c <_exit>:
    357c:	f8 94       	cli

0000357e <__stop_program>:
    357e:	ff cf       	rjmp	.-2      	; 0x357e <__stop_program>
