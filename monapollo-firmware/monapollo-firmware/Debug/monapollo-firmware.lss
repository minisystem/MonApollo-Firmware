
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  000038a4  00003958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038a4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c8  008002b0  008002b0  00003b08  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  0000417c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002e0  00000000  00000000  000050b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005f91  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016ab  00000000  00000000  0000b321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000201b  00000000  00000000  0000c9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ca0  00000000  00000000  0000e9e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018a1  00000000  00000000  0000f688  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cf1  00000000  00000000  00010f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00013c1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_9>
      28:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e4 ea       	ldi	r30, 0xA4	; 164
      78:	f8 e3       	ldi	r31, 0x38	; 56
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a8 37       	cpi	r26, 0x78	; 120
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 53 03 	call	0x6a6	; 0x6a6 <main>
      9a:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 b0 02 	lds	r24, 0x02B0
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 01 1c 	call	0x3802	; 0x3802 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 b0 02 	sts	0x02B0, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 01 1c 	call	0x3802	; 0x3802 <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 b0 02 	sts	0x02B0, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 b0 02 	sts	0x02B0, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     1f6:	8d e0       	ldi	r24, 0x0D	; 13
     1f8:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     202:	08 95       	ret

00000204 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     204:	90 93 89 00 	sts	0x0089, r25
     208:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1;
     20c:	20 91 84 00 	lds	r18, 0x0084
     210:	30 91 85 00 	lds	r19, 0x0085
     214:	82 17       	cp	r24, r18
     216:	93 07       	cpc	r25, r19
     218:	28 f4       	brcc	.+10     	; 0x224 <update_clock_rate+0x20>
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	90 93 85 00 	sts	0x0085, r25
     220:	80 93 84 00 	sts	0x0084, r24
     224:	08 95       	ret

00000226 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     226:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     228:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     22a:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     22c:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     22e:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     230:	8c 91       	ld	r24, X
     232:	87 70       	andi	r24, 0x07	; 7
     234:	82 b9       	out	0x02, r24	; 2
     236:	66 e0       	ldi	r22, 0x06	; 6
     238:	6a 95       	dec	r22
     23a:	f1 f7       	brne	.-4      	; 0x238 <set_control_voltage+0x12>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     23e:	ea ed       	ldi	r30, 0xDA	; 218
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	40 81       	ld	r20, Z
     244:	8c 91       	ld	r24, X
     246:	86 95       	lsr	r24
     248:	86 95       	lsr	r24
     24a:	86 95       	lsr	r24
     24c:	87 70       	andi	r24, 0x07	; 7
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	b9 01       	movw	r22, r18
     254:	02 c0       	rjmp	.+4      	; 0x25a <set_control_voltage+0x34>
     256:	66 0f       	add	r22, r22
     258:	77 1f       	adc	r23, r23
     25a:	8a 95       	dec	r24
     25c:	e2 f7       	brpl	.-8      	; 0x256 <set_control_voltage+0x30>
     25e:	cb 01       	movw	r24, r22
     260:	84 2b       	or	r24, r20
     262:	80 83       	st	Z, r24
     264:	76 e0       	ldi	r23, 0x06	; 6
     266:	7a 95       	dec	r23
     268:	f1 f7       	brne	.-4      	; 0x266 <set_control_voltage+0x40>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     26c:	80 81       	ld	r24, Z
     26e:	9c 91       	ld	r25, X
     270:	96 95       	lsr	r25
     272:	96 95       	lsr	r25
     274:	96 95       	lsr	r25
     276:	97 70       	andi	r25, 0x07	; 7
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_control_voltage+0x58>
     27a:	22 0f       	add	r18, r18
     27c:	33 1f       	adc	r19, r19
     27e:	9a 95       	dec	r25
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_control_voltage+0x54>
     282:	20 95       	com	r18
     284:	28 23       	and	r18, r24
     286:	20 83       	st	Z, r18
	
}	
     288:	08 95       	ret

0000028a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     28a:	83 b3       	in	r24, 0x13	; 19
     28c:	83 60       	ori	r24, 0x03	; 3
     28e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     294:	97 b1       	in	r25, 0x07	; 7
     296:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     298:	e9 ed       	ldi	r30, 0xD9	; 217
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	8f 60       	ori	r24, 0x0F	; 15
     2a0:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     2a2:	ea ed       	ldi	r30, 0xDA	; 218
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     2ac:	84 b3       	in	r24, 0x14	; 20
     2ae:	83 60       	ori	r24, 0x03	; 3
     2b0:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     2b2:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     2b4:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     2b6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     2b8:	a0 9a       	sbi	0x14, 0	; 20
}
     2ba:	08 95       	ret

000002bc <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	2e 97       	sbiw	r28, 0x0e	; 14
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     2d4:	28 e0       	ldi	r18, 0x08	; 8
     2d6:	29 83       	std	Y+1, r18	; 0x01
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	2a 83       	std	Y+2, r18	; 0x02
     2dc:	22 e0       	ldi	r18, 0x02	; 2
     2de:	2b 83       	std	Y+3, r18	; 0x03
     2e0:	24 e0       	ldi	r18, 0x04	; 4
     2e2:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2e4:	de 01       	movw	r26, r28
     2e6:	15 96       	adiw	r26, 0x05	; 5
     2e8:	e7 ee       	ldi	r30, 0xE7	; 231
     2ea:	f1 e0       	ldi	r31, 0x01	; 1
     2ec:	2a e0       	ldi	r18, 0x0A	; 10
     2ee:	01 90       	ld	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2f6:	2f ef       	ldi	r18, 0xFF	; 255
     2f8:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2fa:	ea ed       	ldi	r30, 0xDA	; 218
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	20 81       	ld	r18, Z
     300:	20 61       	ori	r18, 0x10	; 16
     302:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     304:	20 81       	ld	r18, Z
     306:	2f 7e       	andi	r18, 0xEF	; 239
     308:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     30a:	06 2f       	mov	r16, r22
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	de 01       	movw	r26, r28
     310:	a0 0f       	add	r26, r16
     312:	b1 1f       	adc	r27, r17
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	2c 91       	ld	r18, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     31c:	20 81       	ld	r18, Z
     31e:	20 62       	ori	r18, 0x20	; 32
     320:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     322:	20 81       	ld	r18, Z
     324:	2f 7d       	andi	r18, 0xDF	; 223
     326:	20 83       	st	Z, r18
     328:	48 2f       	mov	r20, r24
     32a:	59 2f       	mov	r21, r25
     32c:	87 e2       	ldi	r24, 0x27	; 39
     32e:	40 31       	cpi	r20, 0x10	; 16
     330:	58 07       	cpc	r21, r24
     332:	10 f0       	brcs	.+4      	; 0x338 <display_dec+0x7c>
     334:	4f e0       	ldi	r20, 0x0F	; 15
     336:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     338:	ca 01       	movw	r24, r20
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	9a 01       	movw	r18, r20
     344:	36 95       	lsr	r19
     346:	27 95       	ror	r18
     348:	28 0f       	add	r18, r24
     34a:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     34c:	c9 01       	movw	r24, r18
     34e:	92 95       	swap	r25
     350:	82 95       	swap	r24
     352:	8f 70       	andi	r24, 0x0F	; 15
     354:	89 27       	eor	r24, r25
     356:	9f 70       	andi	r25, 0x0F	; 15
     358:	89 27       	eor	r24, r25
     35a:	82 0f       	add	r24, r18
     35c:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     35e:	29 2f       	mov	r18, r25
     360:	33 27       	eor	r19, r19
     362:	82 0f       	add	r24, r18
     364:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     366:	96 95       	lsr	r25
     368:	87 95       	ror	r24
     36a:	96 95       	lsr	r25
     36c:	87 95       	ror	r24
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
	r = number - q2 * 10;
     372:	28 2f       	mov	r18, r24
     374:	22 0f       	add	r18, r18
     376:	32 2f       	mov	r19, r18
     378:	33 0f       	add	r19, r19
     37a:	33 0f       	add	r19, r19
     37c:	23 0f       	add	r18, r19
     37e:	e4 2f       	mov	r30, r20
     380:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	ea 30       	cpi	r30, 0x0A	; 10
     388:	10 f4       	brcc	.+4      	; 0x38e <display_dec+0xd2>
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	68 0f       	add	r22, r24
     390:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     392:	9b 01       	movw	r18, r22
     394:	36 95       	lsr	r19
     396:	27 95       	ror	r18
     398:	36 95       	lsr	r19
     39a:	27 95       	ror	r18
     39c:	ab 01       	movw	r20, r22
     39e:	56 95       	lsr	r21
     3a0:	47 95       	ror	r20
     3a2:	24 0f       	add	r18, r20
     3a4:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     3a6:	c9 01       	movw	r24, r18
     3a8:	92 95       	swap	r25
     3aa:	82 95       	swap	r24
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	89 27       	eor	r24, r25
     3b0:	9f 70       	andi	r25, 0x0F	; 15
     3b2:	89 27       	eor	r24, r25
     3b4:	82 0f       	add	r24, r18
     3b6:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     3b8:	29 2f       	mov	r18, r25
     3ba:	33 27       	eor	r19, r19
     3bc:	82 0f       	add	r24, r18
     3be:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     3c0:	96 95       	lsr	r25
     3c2:	87 95       	ror	r24
     3c4:	96 95       	lsr	r25
     3c6:	87 95       	ror	r24
     3c8:	96 95       	lsr	r25
     3ca:	87 95       	ror	r24
	r = qa - q3 * 10;
     3cc:	98 2f       	mov	r25, r24
     3ce:	99 0f       	add	r25, r25
     3d0:	29 2f       	mov	r18, r25
     3d2:	22 0f       	add	r18, r18
     3d4:	22 0f       	add	r18, r18
     3d6:	92 0f       	add	r25, r18
     3d8:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	6a 30       	cpi	r22, 0x0A	; 10
     3de:	08 f4       	brcc	.+2      	; 0x3e2 <display_dec+0x126>
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3e4:	41 ef       	ldi	r20, 0xF1	; 241
     3e6:	51 e0       	ldi	r21, 0x01	; 1
     3e8:	da 01       	movw	r26, r20
     3ea:	a6 0f       	add	r26, r22
     3ec:	b1 1d       	adc	r27, r1
     3ee:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3f0:	28 2f       	mov	r18, r24
     3f2:	26 95       	lsr	r18
     3f4:	26 95       	lsr	r18
     3f6:	98 2f       	mov	r25, r24
     3f8:	96 95       	lsr	r25
     3fa:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3fc:	29 2f       	mov	r18, r25
     3fe:	22 95       	swap	r18
     400:	2f 70       	andi	r18, 0x0F	; 15
     402:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     404:	96 95       	lsr	r25
     406:	96 95       	lsr	r25
     408:	96 95       	lsr	r25
	r = qb - q4 * 10;
     40a:	29 2f       	mov	r18, r25
     40c:	22 0f       	add	r18, r18
     40e:	62 2f       	mov	r22, r18
     410:	66 0f       	add	r22, r22
     412:	66 0f       	add	r22, r22
     414:	26 0f       	add	r18, r22
     416:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     418:	da 01       	movw	r26, r20
     41a:	a8 0f       	add	r26, r24
     41c:	b1 1d       	adc	r27, r1
     41e:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     420:	4e 0f       	add	r20, r30
     422:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     424:	fa 01       	movw	r30, r20
     426:	40 81       	ld	r20, Z
     428:	40 93 b3 02 	sts	0x02B3, r20
	digit_index[1] = tens_place;
     42c:	30 93 b4 02 	sts	0x02B4, r19
	digit_index[2] = hunds_place;
     430:	20 93 b5 02 	sts	0x02B5, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	8a 30       	cpi	r24, 0x0A	; 10
     438:	08 f4       	brcc	.+2      	; 0x43c <display_dec+0x180>
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     43e:	90 93 b6 02 	sts	0x02B6, r25

	cathode_byte = dec[digit_index[place]];
     442:	f8 01       	movw	r30, r16
     444:	ed 54       	subi	r30, 0x4D	; 77
     446:	fd 4f       	sbci	r31, 0xFD	; 253
     448:	80 81       	ld	r24, Z
     44a:	fe 01       	movw	r30, r28
     44c:	e8 0f       	add	r30, r24
     44e:	f1 1d       	adc	r31, r1
     450:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     452:	90 91 07 03 	lds	r25, 0x0307
     456:	92 30       	cpi	r25, 0x02	; 2
     458:	11 f4       	brne	.+4      	; 0x45e <display_dec+0x1a2>
     45a:	80 62       	ori	r24, 0x20	; 32
     45c:	03 c0       	rjmp	.+6      	; 0x464 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     45e:	91 30       	cpi	r25, 0x01	; 1
     460:	09 f4       	brne	.+2      	; 0x464 <display_dec+0x1a8>
     462:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     464:	80 95       	com	r24
     466:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     468:	ea ed       	ldi	r30, 0xDA	; 218
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	80 61       	ori	r24, 0x10	; 16
     470:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     472:	80 81       	ld	r24, Z
     474:	8f 7e       	andi	r24, 0xEF	; 239
     476:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     478:	2e 96       	adiw	r28, 0x0e	; 14
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     48e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     490:	66 23       	and	r22, r22
     492:	69 f4       	brne	.+26     	; 0x4ae <update_display+0x20>

		
			
		display_dec(number, place);
     494:	c0 91 b7 02 	lds	r28, 0x02B7
     498:	6c 2f       	mov	r22, r28
     49a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     49e:	8c 2f       	mov	r24, r28
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	80 93 b7 02 	sts	0x02B7, r24
     4a6:	c3 30       	cpi	r28, 0x03	; 3
     4a8:	11 f4       	brne	.+4      	; 0x4ae <update_display+0x20>
		{
			place = 0;
     4aa:	10 92 b7 02 	sts	0x02B7, r1
		
		
	}
	
	
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <__vector_10>:
#include "hardware.h"
#include "tune.h"
#include "display.h"
#include "clock.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	8f 93       	push	r24
     4be:	9f 93       	push	r25
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     4c4:	80 91 79 03 	lds	r24, 0x0379
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     4cc:	80 91 7a 03 	lds	r24, 0x037A
     4d0:	88 23       	and	r24, r24
     4d2:	a1 f4       	brne	.+40     	; 0x4fc <__vector_10+0x4a>
		count_finished = FALSE;
     4d4:	10 92 77 03 	sts	0x0377, r1
		no_overflow = TRUE;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     4de:	80 93 7a 03 	sts	0x037A, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     4e2:	e1 e8       	ldi	r30, 0x81	; 129
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	90 91 78 03 	lds	r25, 0x0378
     4ec:	89 2b       	or	r24, r25
     4ee:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4f0:	ef e6       	ldi	r30, 0x6F	; 111
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	81 60       	ori	r24, 0x01	; 1
     4f8:	80 83       	st	Z, r24
     4fa:	11 c0       	rjmp	.+34     	; 0x51e <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4fc:	e4 e8       	ldi	r30, 0x84	; 132
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	91 81       	ldd	r25, Z+1	; 0x01
     504:	90 93 76 03 	sts	0x0376, r25
     508:	80 93 75 03 	sts	0x0375, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     50c:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	80 93 77 03 	sts	0x0377, r24
		period_counter = 0;
     516:	10 92 7a 03 	sts	0x037A, r1
		TCNT1 = 0; //reset timer/counter 1
     51a:	11 82       	std	Z+1, r1	; 0x01
     51c:	10 82       	st	Z, r1
	}
	
	
	
	
}
     51e:	ff 91       	pop	r31
     520:	ef 91       	pop	r30
     522:	9f 91       	pop	r25
     524:	8f 91       	pop	r24
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     530:	1f 92       	push	r1
     532:	0f 92       	push	r0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     53a:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
	//PORTB ^= (1<<ARP_SYNC_LED);
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     556:	80 91 7f 03 	lds	r24, 0x037F
     55a:	86 95       	lsr	r24
     55c:	90 91 80 03 	lds	r25, 0x0380
     560:	98 17       	cp	r25, r24
     562:	11 f4       	brne	.+4      	; 0x568 <__vector_7+0x20>
		
		PORTF &= ~(1<<GATE); //50% gate width
     564:	89 98       	cbi	0x11, 1	; 17
		PORTB &= ~ (1<<ARP_SYNC_LED);
     566:	2f 98       	cbi	0x05, 7	; 5
	}		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     568:	80 91 80 03 	lds	r24, 0x0380
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	80 93 80 03 	sts	0x0380, r24
     572:	90 91 7f 03 	lds	r25, 0x037F
     576:	89 17       	cp	r24, r25
     578:	21 f4       	brne	.+8      	; 0x582 <__vector_7+0x3a>
		//PORTB ^= (1<<ARP_SYNC_LED);
		system_clock.ppqn_counter = 0;
     57a:	10 92 80 03 	sts	0x0380, r1
		PORTB |= (1<<ARP_SYNC_LED);
     57e:	2f 9a       	sbi	0x05, 7	; 5
		PORTF |= (1<<GATE);
     580:	89 9a       	sbi	0x11, 1	; 17
	}
	
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	0f 90       	pop	r0
     588:	0f be       	out	0x3f, r0	; 63
     58a:	0f 90       	pop	r0
     58c:	1f 90       	pop	r1
     58e:	18 95       	reti

00000590 <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     590:	68 3f       	cpi	r22, 0xF8	; 248
     592:	19 f0       	breq	.+6      	; 0x59a <real_time_event+0xa>
     594:	6a 3f       	cpi	r22, 0xFA	; 250
     596:	c1 f4       	brne	.+48     	; 0x5c8 <real_time_event+0x38>
     598:	15 c0       	rjmp	.+42     	; 0x5c4 <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     59a:	80 91 86 03 	lds	r24, 0x0386
     59e:	8f 5f       	subi	r24, 0xFF	; 255
     5a0:	80 93 86 03 	sts	0x0386, r24
     5a4:	90 91 85 03 	lds	r25, 0x0385
     5a8:	89 17       	cp	r24, r25
     5aa:	71 f4       	brne	.+28     	; 0x5c8 <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     5ac:	2c 9a       	sbi	0x05, 4	; 5
     5ae:	86 e0       	ldi	r24, 0x06	; 6
     5b0:	8a 95       	dec	r24
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <real_time_event+0x20>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     5b6:	85 b1       	in	r24, 0x05	; 5
     5b8:	80 58       	subi	r24, 0x80	; 128
     5ba:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     5bc:	10 92 86 03 	sts	0x0386, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     5c0:	2c 98       	cbi	0x05, 4	; 5
     5c2:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     5c4:	10 92 86 03 	sts	0x0386, r1
     5c8:	08 95       	ret

000005ca <note_off_event>:
		PORTF |= (1<<GATE);
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     5ca:	84 2f       	mov	r24, r20
	remove_note(note);
     5cc:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     5d0:	80 91 b9 02 	lds	r24, 0x02B9
     5d4:	81 50       	subi	r24, 0x01	; 1
     5d6:	80 93 b9 02 	sts	0x02B9, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     5da:	88 23       	and	r24, r24
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <note_off_event+0x16>
     5de:	89 98       	cbi	0x11, 1	; 17
     5e0:	08 95       	ret

000005e2 <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     5e2:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     5e4:	90 91 ff 02 	lds	r25, 0x02FF
     5e8:	90 ff       	sbrs	r25, 0
     5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     5ec:	2c 9a       	sbi	0x05, 4	; 5
     5ee:	96 e0       	ldi	r25, 0x06	; 6
     5f0:	9a 95       	dec	r25
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <note_on_event+0xe>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     5f6:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	//value_to_display = note;
	midi_note_number = note;
     5f8:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) {
     5fc:	22 23       	and	r18, r18
     5fe:	59 f4       	brne	.+22     	; 0x616 <note_on_event+0x34>
		remove_note(note);
     600:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     604:	80 91 b9 02 	lds	r24, 0x02B9
     608:	81 50       	subi	r24, 0x01	; 1
     60a:	80 93 b9 02 	sts	0x02B9, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     60e:	88 23       	and	r24, r24
     610:	59 f4       	brne	.+22     	; 0x628 <note_on_event+0x46>
     612:	89 98       	cbi	0x11, 1	; 17
     614:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     616:	62 2f       	mov	r22, r18
     618:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     61c:	80 91 b9 02 	lds	r24, 0x02B9
     620:	8f 5f       	subi	r24, 0xFF	; 255
     622:	80 93 b9 02 	sts	0x02B9, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     626:	89 9a       	sbi	0x11, 1	; 17
     628:	08 95       	ret

0000062a <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     62a:	87 e2       	ldi	r24, 0x27	; 39
     62c:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     630:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     634:	88 e9       	ldi	r24, 0x98	; 152
     636:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     63a:	08 95       	ret

0000063c <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     63c:	1f 92       	push	r1
     63e:	0f 92       	push	r0
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	0f 92       	push	r0
     644:	11 24       	eor	r1, r1
     646:	2f 93       	push	r18
     648:	3f 93       	push	r19
     64a:	4f 93       	push	r20
     64c:	5f 93       	push	r21
     64e:	6f 93       	push	r22
     650:	7f 93       	push	r23
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	af 93       	push	r26
     658:	bf 93       	push	r27
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	0f 92       	push	r0
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     668:	80 91 c6 00 	lds	r24, 0x00C6
     66c:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     66e:	8b e8       	ldi	r24, 0x8B	; 139
     670:	93 e0       	ldi	r25, 0x03	; 3
     672:	61 e0       	ldi	r22, 0x01	; 1
     674:	ae 01       	movw	r20, r28
     676:	4f 5f       	subi	r20, 0xFF	; 255
     678:	5f 4f       	sbci	r21, 0xFF	; 255
     67a:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     67e:	0f 90       	pop	r0
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	ff 91       	pop	r31
     686:	ef 91       	pop	r30
     688:	bf 91       	pop	r27
     68a:	af 91       	pop	r26
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	7f 91       	pop	r23
     692:	6f 91       	pop	r22
     694:	5f 91       	pop	r21
     696:	4f 91       	pop	r20
     698:	3f 91       	pop	r19
     69a:	2f 91       	pop	r18
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     6a6:	c0 e8       	ldi	r28, 0x80	; 128
     6a8:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     6aa:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     6ac:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     6ae:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     6b0:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     6b2:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     6b4:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     6b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     6ba:	a9 ed       	ldi	r26, 0xD9	; 217
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	8c 91       	ld	r24, X
     6c0:	80 6c       	ori	r24, 0xC0	; 192
     6c2:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     6c4:	ea ed       	ldi	r30, 0xDA	; 218
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	80 6c       	ori	r24, 0xC0	; 192
     6cc:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     6ce:	81 b1       	in	r24, 0x01	; 1
     6d0:	8f ef       	ldi	r24, 0xFF	; 255
     6d2:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     6d4:	92 b1       	in	r25, 0x02	; 2
     6d6:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     6d8:	8c 91       	ld	r24, X
     6da:	80 63       	ori	r24, 0x30	; 48
     6dc:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     6de:	80 81       	ld	r24, Z
     6e0:	8f 7c       	andi	r24, 0xCF	; 207
     6e2:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     6e4:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     6e6:	ec ed       	ldi	r30, 0xDC	; 220
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	80 62       	ori	r24, 0x20	; 32
     6ee:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     6f0:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     6f2:	ed ed       	ldi	r30, 0xDD	; 221
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	80 62       	ori	r24, 0x20	; 32
     6fa:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     6fc:	80 81       	ld	r24, Z
     6fe:	8f 7d       	andi	r24, 0xDF	; 223
     700:	80 83       	st	Z, r24
	DATA_BUS = 0;
     702:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     704:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     708:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     70c:	0e 94 45 01 	call	0x28a	; 0x28a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     710:	cb e8       	ldi	r28, 0x8B	; 139
     712:	d3 e0       	ldi	r29, 0x03	; 3
     714:	ce 01       	movw	r24, r28
     716:	0e 94 7d 17 	call	0x2efa	; 0x2efa <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     71a:	ce 01       	movw	r24, r28
     71c:	61 ef       	ldi	r22, 0xF1	; 241
     71e:	72 e0       	ldi	r23, 0x02	; 2
     720:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     724:	ce 01       	movw	r24, r28
     726:	65 ee       	ldi	r22, 0xE5	; 229
     728:	72 e0       	ldi	r23, 0x02	; 2
     72a:	0e 94 49 17 	call	0x2e92	; 0x2e92 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     72e:	ce 01       	movw	r24, r28
     730:	68 ec       	ldi	r22, 0xC8	; 200
     732:	72 e0       	ldi	r23, 0x02	; 2
     734:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     738:	0e 94 15 03 	call	0x62a	; 0x62a <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     73c:	0e 94 c9 06 	call	0xd92	; 0xd92 <update_spi>
	
	
	current_patch.number = 1;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     746:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     748:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0e 94 4c 09 	call	0x1298	; 0x1298 <load_patch>
	
	setup_system_clock();
     752:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     756:	88 e1       	ldi	r24, 0x18	; 24
     758:	80 93 7f 03 	sts	0x037F, r24

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     75c:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     75e:	0f 2e       	mov	r0, r31
     760:	fd e7       	ldi	r31, 0x7D	; 125
     762:	ef 2e       	mov	r14, r31
     764:	f3 e0       	ldi	r31, 0x03	; 3
     766:	ff 2e       	mov	r15, r31
     768:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     76a:	0f 2e       	mov	r0, r31
     76c:	f7 e0       	ldi	r31, 0x07	; 7
     76e:	cf 2e       	mov	r12, r31
     770:	f3 e0       	ldi	r31, 0x03	; 3
     772:	df 2e       	mov	r13, r31
     774:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     776:	bb 24       	eor	r11, r11
     778:	68 94       	set
     77a:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     77c:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     77e:	c8 01       	movw	r24, r16
     780:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     784:	80 91 fd 01 	lds	r24, 0x01FD
     788:	90 91 fe 01 	lds	r25, 0x01FE
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     792:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <scan_pots>
		update_control_voltages();
     796:	0e 94 85 04 	call	0x90a	; 0x90a <update_control_voltages>
			
		//do SPI read/write every 5 loops - whole section needs major update
		if (switch_timer++ == 5)
     79a:	80 91 b8 02 	lds	r24, 0x02B8
     79e:	98 2f       	mov	r25, r24
     7a0:	9f 5f       	subi	r25, 0xFF	; 255
     7a2:	90 93 b8 02 	sts	0x02B8, r25
     7a6:	85 30       	cpi	r24, 0x05	; 5
     7a8:	51 f7       	brne	.-44     	; 0x77e <main+0xd8>
		{
			switch_timer = 0;
     7aa:	10 92 b8 02 	sts	0x02B8, r1
			switch_press = 0; //reset global switch press flag
     7ae:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     7b2:	f7 01       	movw	r30, r14
     7b4:	c0 81       	ld	r28, Z
     7b6:	0e 94 7f 14 	call	0x28fe	; 0x28fe <read_switch_port>
     7ba:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     7bc:	f6 01       	movw	r30, r12
     7be:	90 81       	ld	r25, Z
     7c0:	91 30       	cpi	r25, 0x01	; 1
     7c2:	11 f4       	brne	.+4      	; 0x7c8 <main+0x122>
     7c4:	cd 2f       	mov	r28, r29
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <main+0x124>
     7c8:	c0 e0       	ldi	r28, 0x00	; 0
     7ca:	c8 2b       	or	r28, r24
     7cc:	f7 01       	movw	r30, r14
     7ce:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     7d0:	0e 94 c9 06 	call	0xd92	; 0xd92 <update_spi>
			if (switch_press) { 
     7d4:	80 91 c1 02 	lds	r24, 0x02C1
     7d8:	88 23       	and	r24, r24
     7da:	39 f0       	breq	.+14     	; 0x7ea <main+0x144>
				update_patch();
     7dc:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     7e0:	f6 01       	movw	r30, r12
     7e2:	80 81       	ld	r24, Z
     7e4:	88 23       	and	r24, r24
     7e6:	09 f4       	brne	.+2      	; 0x7ea <main+0x144>
     7e8:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     7ea:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <update_patch_programmer>
     7ee:	c7 cf       	rjmp	.-114    	; 0x77e <main+0xd8>

000007f0 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	c0 e0       	ldi	r28, 0x00	; 0
     804:	d1 e0       	ldi	r29, 0x01	; 1
     806:	02 ec       	ldi	r16, 0xC2	; 194
     808:	12 e0       	ldi	r17, 0x02	; 2
     80a:	0f 2e       	mov	r0, r31
     80c:	fc e3       	ldi	r31, 0x3C	; 60
     80e:	cf 2e       	mov	r12, r31
     810:	dd 24       	eor	r13, r13
     812:	f0 2d       	mov	r31, r0
     814:	cc 0e       	add	r12, r28
     816:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     818:	0f 2e       	mov	r0, r31
     81a:	f7 e0       	ldi	r31, 0x07	; 7
     81c:	ef 2e       	mov	r14, r31
     81e:	f3 e0       	ldi	r31, 0x03	; 3
     820:	ff 2e       	mov	r15, r31
     822:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     824:	bb 24       	eor	r11, r11
     826:	68 94       	set
     828:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     82a:	88 81       	ld	r24, Y
     82c:	99 81       	ldd	r25, Y+1	; 0x01
     82e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     832:	90 93 bc 02 	sts	0x02BC, r25
     836:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     83a:	e8 81       	ld	r30, Y
     83c:	f9 81       	ldd	r31, Y+1	; 0x01
     83e:	40 81       	ld	r20, Z
     840:	21 81       	ldd	r18, Z+1	; 0x01
     842:	52 2f       	mov	r21, r18
     844:	53 70       	andi	r21, 0x03	; 3
     846:	84 1b       	sub	r24, r20
     848:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     84a:	95 95       	asr	r25
     84c:	87 95       	ror	r24
     84e:	95 95       	asr	r25
     850:	87 95       	ror	r24
     852:	84 0f       	add	r24, r20
     854:	95 1f       	adc	r25, r21
     856:	80 83       	st	Z, r24
     858:	89 2f       	mov	r24, r25
     85a:	83 70       	andi	r24, 0x03	; 3
     85c:	2c 7f       	andi	r18, 0xFC	; 252
     85e:	28 2b       	or	r18, r24
     860:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     862:	e9 91       	ld	r30, Y+
     864:	f9 91       	ld	r31, Y+
     866:	92 81       	ldd	r25, Z+2	; 0x02
     868:	20 81       	ld	r18, Z
     86a:	81 81       	ldd	r24, Z+1	; 0x01
     86c:	38 2f       	mov	r19, r24
     86e:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     870:	d7 01       	movw	r26, r14
     872:	8c 91       	ld	r24, X
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	19 f0       	breq	.+6      	; 0x87e <scan_pots+0x8e>
     878:	83 81       	ldd	r24, Z+3	; 0x03
     87a:	88 23       	and	r24, r24
     87c:	24 f0       	brlt	.+8      	; 0x886 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     87e:	f8 01       	movw	r30, r16
     880:	31 83       	std	Z+1, r19	; 0x01
     882:	20 83       	st	Z, r18
     884:	14 c0       	rjmp	.+40     	; 0x8ae <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     886:	49 2f       	mov	r20, r25
     888:	43 50       	subi	r20, 0x03	; 3
     88a:	c9 01       	movw	r24, r18
     88c:	95 95       	asr	r25
     88e:	87 95       	ror	r24
     890:	95 95       	asr	r25
     892:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     894:	94 2f       	mov	r25, r20
     896:	98 1b       	sub	r25, r24
     898:	9a 3f       	cpi	r25, 0xFA	; 250
     89a:	48 f4       	brcc	.+18     	; 0x8ae <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     89c:	d8 01       	movw	r26, r16
     89e:	11 96       	adiw	r26, 0x01	; 1
     8a0:	3c 93       	st	X, r19
     8a2:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     8a4:	83 81       	ldd	r24, Z+3	; 0x03
     8a6:	8f 77       	andi	r24, 0x7F	; 127
     8a8:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     8aa:	f7 01       	movw	r30, r14
     8ac:	b0 82       	st	Z, r11
     8ae:	0e 5f       	subi	r16, 0xFE	; 254
     8b0:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     8b2:	cc 15       	cp	r28, r12
     8b4:	dd 05       	cpc	r29, r13
     8b6:	09 f0       	breq	.+2      	; 0x8ba <scan_pots+0xca>
     8b8:	b8 cf       	rjmp	.-144    	; 0x82a <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     8ba:	8c e7       	ldi	r24, 0x7C	; 124
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     8c2:	90 93 bc 02 	sts	0x02BC, r25
     8c6:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     8ca:	20 91 7c 01 	lds	r18, 0x017C
     8ce:	40 91 7d 01 	lds	r20, 0x017D
     8d2:	34 2f       	mov	r19, r20
     8d4:	33 70       	andi	r19, 0x03	; 3
     8d6:	82 1b       	sub	r24, r18
     8d8:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     8da:	95 95       	asr	r25
     8dc:	87 95       	ror	r24
     8de:	95 95       	asr	r25
     8e0:	87 95       	ror	r24
     8e2:	28 0f       	add	r18, r24
     8e4:	39 1f       	adc	r19, r25
     8e6:	20 93 7c 01 	sts	0x017C, r18
     8ea:	83 2f       	mov	r24, r19
     8ec:	83 70       	andi	r24, 0x03	; 3
     8ee:	4c 7f       	andi	r20, 0xFC	; 252
     8f0:	48 2b       	or	r20, r24
     8f2:	40 93 7d 01 	sts	0x017D, r20
	
}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	bf 90       	pop	r11
     908:	08 95       	ret

0000090a <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     90e:	60 91 c2 02 	lds	r22, 0x02C2
     912:	70 91 c3 02 	lds	r23, 0x02C3
     916:	62 95       	swap	r22
     918:	72 95       	swap	r23
     91a:	70 7f       	andi	r23, 0xF0	; 240
     91c:	76 27       	eor	r23, r22
     91e:	60 7f       	andi	r22, 0xF0	; 240
     920:	76 27       	eor	r23, r22
     922:	84 ee       	ldi	r24, 0xE4	; 228
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     92a:	60 91 c4 02 	lds	r22, 0x02C4
     92e:	70 91 c5 02 	lds	r23, 0x02C5
     932:	62 95       	swap	r22
     934:	72 95       	swap	r23
     936:	70 7f       	andi	r23, 0xF0	; 240
     938:	76 27       	eor	r23, r22
     93a:	60 7f       	andi	r22, 0xF0	; 240
     93c:	76 27       	eor	r23, r22
     93e:	83 ee       	ldi	r24, 0xE3	; 227
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     946:	60 91 c6 02 	lds	r22, 0x02C6
     94a:	70 91 c7 02 	lds	r23, 0x02C7
     94e:	66 0f       	add	r22, r22
     950:	77 1f       	adc	r23, r23
     952:	66 0f       	add	r22, r22
     954:	77 1f       	adc	r23, r23
     956:	66 0f       	add	r22, r22
     958:	77 1f       	adc	r23, r23
     95a:	82 ee       	ldi	r24, 0xE2	; 226
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     962:	60 91 c8 02 	lds	r22, 0x02C8
     966:	70 91 c9 02 	lds	r23, 0x02C9
     96a:	62 95       	swap	r22
     96c:	72 95       	swap	r23
     96e:	70 7f       	andi	r23, 0xF0	; 240
     970:	76 27       	eor	r23, r22
     972:	60 7f       	andi	r22, 0xF0	; 240
     974:	76 27       	eor	r23, r22
     976:	82 eb       	ldi	r24, 0xB2	; 178
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     97e:	60 91 ca 02 	lds	r22, 0x02CA
     982:	70 91 cb 02 	lds	r23, 0x02CB
     986:	66 0f       	add	r22, r22
     988:	77 1f       	adc	r23, r23
     98a:	66 0f       	add	r22, r22
     98c:	77 1f       	adc	r23, r23
     98e:	66 0f       	add	r22, r22
     990:	77 1f       	adc	r23, r23
     992:	81 ee       	ldi	r24, 0xE1	; 225
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     99a:	60 91 cc 02 	lds	r22, 0x02CC
     99e:	70 91 cd 02 	lds	r23, 0x02CD
     9a2:	62 95       	swap	r22
     9a4:	72 95       	swap	r23
     9a6:	70 7f       	andi	r23, 0xF0	; 240
     9a8:	76 27       	eor	r23, r22
     9aa:	60 7f       	andi	r22, 0xF0	; 240
     9ac:	76 27       	eor	r23, r22
     9ae:	80 ee       	ldi	r24, 0xE0	; 224
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     9b6:	60 91 ce 02 	lds	r22, 0x02CE
     9ba:	70 91 cf 02 	lds	r23, 0x02CF
     9be:	62 95       	swap	r22
     9c0:	72 95       	swap	r23
     9c2:	70 7f       	andi	r23, 0xF0	; 240
     9c4:	76 27       	eor	r23, r22
     9c6:	60 7f       	andi	r22, 0xF0	; 240
     9c8:	76 27       	eor	r23, r22
     9ca:	8f ed       	ldi	r24, 0xDF	; 223
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     9d2:	60 91 d0 02 	lds	r22, 0x02D0
     9d6:	70 91 d1 02 	lds	r23, 0x02D1
     9da:	62 95       	swap	r22
     9dc:	72 95       	swap	r23
     9de:	70 7f       	andi	r23, 0xF0	; 240
     9e0:	76 27       	eor	r23, r22
     9e2:	60 7f       	andi	r22, 0xF0	; 240
     9e4:	76 27       	eor	r23, r22
     9e6:	8e ed       	ldi	r24, 0xDE	; 222
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     9ee:	80 91 d4 02 	lds	r24, 0x02D4
     9f2:	90 91 d5 02 	lds	r25, 0x02D5
     9f6:	c0 e0       	ldi	r28, 0x00	; 0
     9f8:	d2 e0       	ldi	r29, 0x02	; 2
     9fa:	c8 1b       	sub	r28, r24
     9fc:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     9fe:	60 91 70 03 	lds	r22, 0x0370
     a02:	70 91 71 03 	lds	r23, 0x0371
     a06:	60 50       	subi	r22, 0x00	; 0
     a08:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     a0a:	80 91 d2 02 	lds	r24, 0x02D2
     a0e:	90 91 d3 02 	lds	r25, 0x02D3
     a12:	68 1b       	sub	r22, r24
     a14:	79 0b       	sbc	r23, r25
     a16:	6c 0f       	add	r22, r28
     a18:	7d 1f       	adc	r23, r29
     a1a:	8d ed       	ldi	r24, 0xDD	; 221
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     a22:	60 91 72 03 	lds	r22, 0x0372
     a26:	70 91 73 03 	lds	r23, 0x0373
     a2a:	6c 0f       	add	r22, r28
     a2c:	7d 1f       	adc	r23, r29
     a2e:	8c ed       	ldi	r24, 0xDC	; 220
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     a36:	60 91 d6 02 	lds	r22, 0x02D6
     a3a:	70 91 d7 02 	lds	r23, 0x02D7
     a3e:	62 95       	swap	r22
     a40:	72 95       	swap	r23
     a42:	70 7f       	andi	r23, 0xF0	; 240
     a44:	76 27       	eor	r23, r22
     a46:	60 7f       	andi	r22, 0xF0	; 240
     a48:	76 27       	eor	r23, r22
     a4a:	8b ed       	ldi	r24, 0xDB	; 219
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     a52:	60 91 da 02 	lds	r22, 0x02DA
     a56:	70 91 db 02 	lds	r23, 0x02DB
     a5a:	62 95       	swap	r22
     a5c:	72 95       	swap	r23
     a5e:	70 7f       	andi	r23, 0xF0	; 240
     a60:	76 27       	eor	r23, r22
     a62:	60 7f       	andi	r22, 0xF0	; 240
     a64:	76 27       	eor	r23, r22
     a66:	8a ed       	ldi	r24, 0xDA	; 218
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     a6e:	60 91 dc 02 	lds	r22, 0x02DC
     a72:	70 91 dd 02 	lds	r23, 0x02DD
     a76:	62 95       	swap	r22
     a78:	72 95       	swap	r23
     a7a:	70 7f       	andi	r23, 0xF0	; 240
     a7c:	76 27       	eor	r23, r22
     a7e:	60 7f       	andi	r22, 0xF0	; 240
     a80:	76 27       	eor	r23, r22
     a82:	89 ed       	ldi	r24, 0xD9	; 217
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     a8a:	60 91 7c 01 	lds	r22, 0x017C
     a8e:	80 91 7d 01 	lds	r24, 0x017D
     a92:	78 2f       	mov	r23, r24
     a94:	73 70       	andi	r23, 0x03	; 3
     a96:	62 95       	swap	r22
     a98:	72 95       	swap	r23
     a9a:	70 7f       	andi	r23, 0xF0	; 240
     a9c:	76 27       	eor	r23, r22
     a9e:	60 7f       	andi	r22, 0xF0	; 240
     aa0:	76 27       	eor	r23, r22
     aa2:	88 ed       	ldi	r24, 0xD8	; 216
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     aaa:	60 91 de 02 	lds	r22, 0x02DE
     aae:	70 91 df 02 	lds	r23, 0x02DF
     ab2:	62 95       	swap	r22
     ab4:	72 95       	swap	r23
     ab6:	70 7f       	andi	r23, 0xF0	; 240
     ab8:	76 27       	eor	r23, r22
     aba:	60 7f       	andi	r22, 0xF0	; 240
     abc:	76 27       	eor	r23, r22
     abe:	87 ed       	ldi	r24, 0xD7	; 215
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     ac6:	60 91 e0 02 	lds	r22, 0x02E0
     aca:	70 91 e1 02 	lds	r23, 0x02E1
     ace:	62 95       	swap	r22
     ad0:	72 95       	swap	r23
     ad2:	70 7f       	andi	r23, 0xF0	; 240
     ad4:	76 27       	eor	r23, r22
     ad6:	60 7f       	andi	r22, 0xF0	; 240
     ad8:	76 27       	eor	r23, r22
     ada:	86 ed       	ldi	r24, 0xD6	; 214
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     ae2:	60 91 e2 02 	lds	r22, 0x02E2
     ae6:	70 91 e3 02 	lds	r23, 0x02E3
     aea:	62 95       	swap	r22
     aec:	72 95       	swap	r23
     aee:	70 7f       	andi	r23, 0xF0	; 240
     af0:	76 27       	eor	r23, r22
     af2:	60 7f       	andi	r22, 0xF0	; 240
     af4:	76 27       	eor	r23, r22
     af6:	85 ed       	ldi	r24, 0xD5	; 213
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     afe:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     b02:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     b04:	88 30       	cpi	r24, 0x08	; 8
     b06:	08 f4       	brcc	.+2      	; 0xb0a <update_control_voltages+0x200>
     b08:	c8 e0       	ldi	r28, 0x08	; 8
	value_to_display = current_patch.number + 100*midi_clock.divider; //100*note;
     b0a:	60 91 03 03 	lds	r22, 0x0303
     b0e:	40 91 85 03 	lds	r20, 0x0385
     b12:	50 e0       	ldi	r21, 0x00	; 0
     b14:	24 e6       	ldi	r18, 0x64	; 100
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	42 9f       	mul	r20, r18
     b1a:	c0 01       	movw	r24, r0
     b1c:	43 9f       	mul	r20, r19
     b1e:	90 0d       	add	r25, r0
     b20:	52 9f       	mul	r21, r18
     b22:	90 0d       	add	r25, r0
     b24:	11 24       	eor	r1, r1
     b26:	86 0f       	add	r24, r22
     b28:	91 1d       	adc	r25, r1
     b2a:	90 93 fe 01 	sts	0x01FE, r25
     b2e:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     b32:	8c 2f       	mov	r24, r28
     b34:	88 50       	subi	r24, 0x08	; 8
     b36:	6c e0       	ldi	r22, 0x0C	; 12
     b38:	73 e0       	ldi	r23, 0x03	; 3
     b3a:	0e 94 21 14 	call	0x2842	; 0x2842 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     b3e:	bc 01       	movw	r22, r24
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	20 91 e6 02 	lds	r18, 0x02E6
     b48:	30 91 e7 02 	lds	r19, 0x02E7
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__mulsi3>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	07 2e       	mov	r0, r23
     b5a:	7a e0       	ldi	r23, 0x0A	; 10
     b5c:	b6 95       	lsr	r27
     b5e:	a7 95       	ror	r26
     b60:	97 95       	ror	r25
     b62:	87 95       	ror	r24
     b64:	7a 95       	dec	r23
     b66:	d1 f7       	brne	.-12     	; 0xb5c <update_control_voltages+0x252>
     b68:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     b6a:	60 91 e4 02 	lds	r22, 0x02E4
     b6e:	70 91 e5 02 	lds	r23, 0x02E5
     b72:	62 95       	swap	r22
     b74:	72 95       	swap	r23
     b76:	70 7f       	andi	r23, 0xF0	; 240
     b78:	76 27       	eor	r23, r22
     b7a:	60 7f       	andi	r22, 0xF0	; 240
     b7c:	76 27       	eor	r23, r22
     b7e:	86 0f       	add	r24, r22
     b80:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     b82:	bc 01       	movw	r22, r24
     b84:	80 e4       	ldi	r24, 0x40	; 64
     b86:	60 30       	cpi	r22, 0x00	; 0
     b88:	78 07       	cpc	r23, r24
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <update_control_voltages+0x286>
     b8c:	6f ef       	ldi	r22, 0xFF	; 255
     b8e:	7f e3       	ldi	r23, 0x3F	; 63
     b90:	84 ed       	ldi	r24, 0xD4	; 212
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     b98:	60 91 e8 02 	lds	r22, 0x02E8
     b9c:	70 91 e9 02 	lds	r23, 0x02E9
     ba0:	62 95       	swap	r22
     ba2:	72 95       	swap	r23
     ba4:	70 7f       	andi	r23, 0xF0	; 240
     ba6:	76 27       	eor	r23, r22
     ba8:	60 7f       	andi	r22, 0xF0	; 240
     baa:	76 27       	eor	r23, r22
     bac:	82 ed       	ldi	r24, 0xD2	; 210
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     bb4:	60 91 ea 02 	lds	r22, 0x02EA
     bb8:	70 91 eb 02 	lds	r23, 0x02EB
     bbc:	62 95       	swap	r22
     bbe:	72 95       	swap	r23
     bc0:	70 7f       	andi	r23, 0xF0	; 240
     bc2:	76 27       	eor	r23, r22
     bc4:	60 7f       	andi	r22, 0xF0	; 240
     bc6:	76 27       	eor	r23, r22
     bc8:	81 ed       	ldi	r24, 0xD1	; 209
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     bd0:	60 91 ec 02 	lds	r22, 0x02EC
     bd4:	70 91 ed 02 	lds	r23, 0x02ED
     bd8:	62 95       	swap	r22
     bda:	72 95       	swap	r23
     bdc:	70 7f       	andi	r23, 0xF0	; 240
     bde:	76 27       	eor	r23, r22
     be0:	60 7f       	andi	r22, 0xF0	; 240
     be2:	76 27       	eor	r23, r22
     be4:	80 ed       	ldi	r24, 0xD0	; 208
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     bec:	60 91 ee 02 	lds	r22, 0x02EE
     bf0:	70 91 ef 02 	lds	r23, 0x02EF
     bf4:	62 95       	swap	r22
     bf6:	72 95       	swap	r23
     bf8:	70 7f       	andi	r23, 0xF0	; 240
     bfa:	76 27       	eor	r23, r22
     bfc:	60 7f       	andi	r22, 0xF0	; 240
     bfe:	76 27       	eor	r23, r22
     c00:	8f ec       	ldi	r24, 0xCF	; 207
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     c08:	60 91 f0 02 	lds	r22, 0x02F0
     c0c:	70 91 f1 02 	lds	r23, 0x02F1
     c10:	62 95       	swap	r22
     c12:	72 95       	swap	r23
     c14:	70 7f       	andi	r23, 0xF0	; 240
     c16:	76 27       	eor	r23, r22
     c18:	60 7f       	andi	r22, 0xF0	; 240
     c1a:	76 27       	eor	r23, r22
     c1c:	8e ec       	ldi	r24, 0xCE	; 206
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     c24:	60 91 f2 02 	lds	r22, 0x02F2
     c28:	70 91 f3 02 	lds	r23, 0x02F3
     c2c:	62 95       	swap	r22
     c2e:	72 95       	swap	r23
     c30:	70 7f       	andi	r23, 0xF0	; 240
     c32:	76 27       	eor	r23, r22
     c34:	60 7f       	andi	r22, 0xF0	; 240
     c36:	76 27       	eor	r23, r22
     c38:	8d ec       	ldi	r24, 0xCD	; 205
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     c40:	60 91 f4 02 	lds	r22, 0x02F4
     c44:	70 91 f5 02 	lds	r23, 0x02F5
     c48:	62 95       	swap	r22
     c4a:	72 95       	swap	r23
     c4c:	70 7f       	andi	r23, 0xF0	; 240
     c4e:	76 27       	eor	r23, r22
     c50:	60 7f       	andi	r22, 0xF0	; 240
     c52:	76 27       	eor	r23, r22
     c54:	8c ec       	ldi	r24, 0xCC	; 204
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     c5c:	60 91 f8 02 	lds	r22, 0x02F8
     c60:	70 91 f9 02 	lds	r23, 0x02F9
     c64:	62 95       	swap	r22
     c66:	72 95       	swap	r23
     c68:	70 7f       	andi	r23, 0xF0	; 240
     c6a:	76 27       	eor	r23, r22
     c6c:	60 7f       	andi	r22, 0xF0	; 240
     c6e:	76 27       	eor	r23, r22
     c70:	8a ec       	ldi	r24, 0xCA	; 202
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     c78:	60 91 f6 02 	lds	r22, 0x02F6
     c7c:	70 91 f7 02 	lds	r23, 0x02F7
     c80:	62 95       	swap	r22
     c82:	72 95       	swap	r23
     c84:	70 7f       	andi	r23, 0xF0	; 240
     c86:	76 27       	eor	r23, r22
     c88:	60 7f       	andi	r22, 0xF0	; 240
     c8a:	76 27       	eor	r23, r22
     c8c:	8b ec       	ldi	r24, 0xCB	; 203
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     c94:	60 91 fc 02 	lds	r22, 0x02FC
     c98:	70 91 fd 02 	lds	r23, 0x02FD
     c9c:	62 95       	swap	r22
     c9e:	72 95       	swap	r23
     ca0:	70 7f       	andi	r23, 0xF0	; 240
     ca2:	76 27       	eor	r23, r22
     ca4:	60 7f       	andi	r22, 0xF0	; 240
     ca6:	76 27       	eor	r23, r22
     ca8:	88 ec       	ldi	r24, 0xC8	; 200
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     cb0:	60 91 fa 02 	lds	r22, 0x02FA
     cb4:	70 91 fb 02 	lds	r23, 0x02FB
     cb8:	62 95       	swap	r22
     cba:	72 95       	swap	r23
     cbc:	70 7f       	andi	r23, 0xF0	; 240
     cbe:	76 27       	eor	r23, r22
     cc0:	60 7f       	andi	r22, 0xF0	; 240
     cc2:	76 27       	eor	r23, r22
     cc4:	89 ec       	ldi	r24, 0xC9	; 201
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     ccc:	8c 2f       	mov	r24, r28
     cce:	6f e0       	ldi	r22, 0x0F	; 15
     cd0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     cd4:	6e e4       	ldi	r22, 0x4E	; 78
     cd6:	73 e0       	ldi	r23, 0x03	; 3
     cd8:	0e 94 21 14 	call	0x2842	; 0x2842 <interpolate_pitch_cv>
     cdc:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     cde:	86 ee       	ldi	r24, 0xE6	; 230
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     ce6:	8c 2f       	mov	r24, r28
     ce8:	60 ef       	ldi	r22, 0xF0	; 240
     cea:	0e 94 2c 0c 	call	0x1858	; 0x1858 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     cee:	6c e2       	ldi	r22, 0x2C	; 44
     cf0:	73 e0       	ldi	r23, 0x03	; 3
     cf2:	0e 94 21 14 	call	0x2842	; 0x2842 <interpolate_pitch_cv>
     cf6:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     cf8:	85 ee       	ldi	r24, 0xE5	; 229
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     d00:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     d02:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;
     d04:	20 91 88 01 	lds	r18, 0x0188
     d08:	80 91 89 01 	lds	r24, 0x0189
     d0c:	38 2f       	mov	r19, r24
     d0e:	33 70       	andi	r19, 0x03	; 3
     d10:	83 ef       	ldi	r24, 0xF3	; 243
     d12:	94 e0       	ldi	r25, 0x04	; 4
     d14:	82 1b       	sub	r24, r18
     d16:	93 0b       	sbc	r25, r19
     d18:	90 93 82 03 	sts	0x0382, r25
     d1c:	80 93 81 03 	sts	0x0381, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     d20:	20 91 83 03 	lds	r18, 0x0383
     d24:	30 91 84 03 	lds	r19, 0x0384
     d28:	82 17       	cp	r24, r18
     d2a:	93 07       	cpc	r25, r19
     d2c:	11 f0       	breq	.+4      	; 0xd32 <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
     d2e:	0e 94 02 01 	call	0x204	; 0x204 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     d32:	80 91 81 03 	lds	r24, 0x0381
     d36:	90 91 82 03 	lds	r25, 0x0382
     d3a:	90 93 84 03 	sts	0x0384, r25
     d3e:	80 93 83 03 	sts	0x0383, r24
	
}			
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     d48:	84 b1       	in	r24, 0x04	; 4
     d4a:	87 62       	ori	r24, 0x27	; 39
     d4c:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     d4e:	ec ed       	ldi	r30, 0xDC	; 220
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8c 65       	ori	r24, 0x5C	; 92
     d56:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     d58:	85 b1       	in	r24, 0x05	; 5
     d5a:	89 7d       	andi	r24, 0xD9	; 217
     d5c:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     d5e:	ed ed       	ldi	r30, 0xDD	; 221
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	83 7f       	andi	r24, 0xF3	; 243
     d66:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     d68:	80 e5       	ldi	r24, 0x50	; 80
     d6a:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     d6c:	80 81       	ld	r24, Z
     d6e:	87 7f       	andi	r24, 0xF7	; 247
     d70:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     d72:	80 81       	ld	r24, Z
     d74:	87 7f       	andi	r24, 0xF7	; 247
     d76:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     d78:	80 81       	ld	r24, Z
     d7a:	88 60       	ori	r24, 0x08	; 8
     d7c:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     d7e:	80 81       	ld	r24, Z
     d80:	8f 7e       	andi	r24, 0xEF	; 239
     d82:	80 83       	st	Z, r24
	
}
     d84:	08 95       	ret

00000d86 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     d86:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     d88:	0d b4       	in	r0, 0x2d	; 45
     d8a:	07 fe       	sbrs	r0, 7
     d8c:	fd cf       	rjmp	.-6      	; 0xd88 <spi_shift_byte+0x2>
	return SPDR;
     d8e:	8e b5       	in	r24, 0x2e	; 46
	
}
     d90:	08 95       	ret

00000d92 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     d92:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     d94:	80 91 02 03 	lds	r24, 0x0302
     d98:	0e 94 c3 06 	call	0xd86	; 0xd86 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     d9c:	90 91 c1 02 	lds	r25, 0x02C1
     da0:	98 2b       	or	r25, r24
     da2:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     da6:	20 91 bf 02 	lds	r18, 0x02BF
     daa:	98 2f       	mov	r25, r24
     dac:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     dae:	89 2f       	mov	r24, r25
     db0:	82 27       	eor	r24, r18
     db2:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     db6:	89 23       	and	r24, r25
     db8:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     dbc:	90 91 7b 03 	lds	r25, 0x037B
     dc0:	89 27       	eor	r24, r25
     dc2:	80 93 7b 03 	sts	0x037B, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     dc6:	80 91 01 03 	lds	r24, 0x0301
     dca:	0e 94 c3 06 	call	0xd86	; 0xd86 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     dce:	90 91 c1 02 	lds	r25, 0x02C1
     dd2:	98 2b       	or	r25, r24
     dd4:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     dd8:	20 91 bd 02 	lds	r18, 0x02BD
     ddc:	98 2f       	mov	r25, r24
     dde:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     de0:	89 2f       	mov	r24, r25
     de2:	82 27       	eor	r24, r18
     de4:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     de8:	89 23       	and	r24, r25
     dea:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     dee:	90 91 7c 03 	lds	r25, 0x037C
     df2:	89 27       	eor	r24, r25
     df4:	80 93 7c 03 	sts	0x037C, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     df8:	80 91 00 03 	lds	r24, 0x0300
     dfc:	0e 94 c3 06 	call	0xd86	; 0xd86 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     e00:	80 91 ff 02 	lds	r24, 0x02FF
     e04:	0e 94 c3 06 	call	0xd86	; 0xd86 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     e08:	30 91 7c 03 	lds	r19, 0x037C
     e0c:	36 95       	lsr	r19
     e0e:	36 95       	lsr	r19
     e10:	36 95       	lsr	r19
     e12:	34 70       	andi	r19, 0x04	; 4
     e14:	80 91 07 03 	lds	r24, 0x0307
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	11 f4       	brne	.+4      	; 0xe20 <update_spi+0x8e>
     e1c:	80 e8       	ldi	r24, 0x80	; 128
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <update_spi+0x90>
     e20:	80 e0       	ldi	r24, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
     e22:	90 91 7d 03 	lds	r25, 0x037D
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     e26:	29 2f       	mov	r18, r25
     e28:	22 1f       	adc	r18, r18
     e2a:	22 27       	eor	r18, r18
     e2c:	22 1f       	adc	r18, r18
     e2e:	22 95       	swap	r18
     e30:	22 0f       	add	r18, r18
     e32:	22 0f       	add	r18, r18
     e34:	20 7c       	andi	r18, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     e36:	23 2b       	or	r18, r19
     e38:	96 95       	lsr	r25
     e3a:	96 95       	lsr	r25
     e3c:	96 95       	lsr	r25
     e3e:	91 70       	andi	r25, 0x01	; 1
     e40:	92 2b       	or	r25, r18
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     e42:	89 2b       	or	r24, r25
     e44:	0e 94 c3 06 	call	0xd86	; 0xd86 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     e48:	ed ed       	ldi	r30, 0xDD	; 221
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     e52:	80 81       	ld	r24, Z
     e54:	88 60       	ori	r24, 0x08	; 8
     e56:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     e58:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     e5a:	08 95       	ret

00000e5c <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     e5c:	a0 e0       	ldi	r26, 0x00	; 0
     e5e:	b1 e0       	ldi	r27, 0x01	; 1
     e60:	9d 01       	movw	r18, r26
     e62:	24 5c       	subi	r18, 0xC4	; 196
     e64:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= 29; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     e66:	ed 91       	ld	r30, X+
     e68:	fc 91       	ld	r31, X
     e6a:	11 97       	sbiw	r26, 0x01	; 1
     e6c:	80 81       	ld	r24, Z
     e6e:	41 81       	ldd	r20, Z+1	; 0x01
     e70:	94 2f       	mov	r25, r20
     e72:	93 70       	andi	r25, 0x03	; 3
     e74:	95 95       	asr	r25
     e76:	87 95       	ror	r24
     e78:	95 95       	asr	r25
     e7a:	87 95       	ror	r24
     e7c:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     e7e:	ed 91       	ld	r30, X+
     e80:	fd 91       	ld	r31, X+
     e82:	83 81       	ldd	r24, Z+3	; 0x03
     e84:	80 68       	ori	r24, 0x80	; 128
     e86:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= 29; i++) {
     e88:	a2 17       	cp	r26, r18
     e8a:	b3 07       	cpc	r27, r19
     e8c:	61 f7       	brne	.-40     	; 0xe66 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     e8e:	08 95       	ret

00000e90 <unlock_pots>:

void unlock_pots(void) {
     e90:	e0 e0       	ldi	r30, 0x00	; 0
     e92:	f1 e0       	ldi	r31, 0x01	; 1
     e94:	cf 01       	movw	r24, r30
     e96:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked = 0;
     e98:	a1 91       	ld	r26, Z+
     e9a:	b1 91       	ld	r27, Z+
     e9c:	13 96       	adiw	r26, 0x03	; 3
     e9e:	2c 91       	ld	r18, X
     ea0:	13 97       	sbiw	r26, 0x03	; 3
     ea2:	2f 77       	andi	r18, 0x7F	; 127
     ea4:	13 96       	adiw	r26, 0x03	; 3
     ea6:	2c 93       	st	X, r18
     ea8:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= 29; i++) {
     eaa:	e8 17       	cp	r30, r24
     eac:	f9 07       	cpc	r31, r25
     eae:	a1 f7       	brne	.-24     	; 0xe98 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
     eb0:	08 95       	ret

00000eb2 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	ab 97       	sbiw	r28, 0x2b	; 43
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     eca:	ee ed       	ldi	r30, 0xDE	; 222
     ecc:	f2 e0       	ldi	r31, 0x02	; 2
     ece:	20 91 de 02 	lds	r18, 0x02DE
     ed2:	82 2f       	mov	r24, r18
     ed4:	82 95       	swap	r24
     ed6:	80 7f       	andi	r24, 0xF0	; 240
     ed8:	22 95       	swap	r18
     eda:	2f 70       	andi	r18, 0x0F	; 15
     edc:	90 91 df 02 	lds	r25, 0x02DF
     ee0:	93 70       	andi	r25, 0x03	; 3
     ee2:	92 95       	swap	r25
     ee4:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     ee6:	df 01       	movw	r26, r30
     ee8:	5a 97       	sbiw	r26, 0x1a	; 26
     eea:	3c 91       	ld	r19, X
     eec:	53 2f       	mov	r21, r19
     eee:	55 0f       	add	r21, r21
     ef0:	55 0f       	add	r21, r21
     ef2:	4a 81       	ldd	r20, Y+2	; 0x02
     ef4:	43 70       	andi	r20, 0x03	; 3
     ef6:	45 2b       	or	r20, r21
     ef8:	4a 83       	std	Y+2, r20	; 0x02
     efa:	63 2f       	mov	r22, r19
     efc:	62 95       	swap	r22
     efe:	66 95       	lsr	r22
     f00:	66 95       	lsr	r22
     f02:	63 70       	andi	r22, 0x03	; 3
     f04:	11 96       	adiw	r26, 0x01	; 1
     f06:	4c 91       	ld	r20, X
     f08:	43 70       	andi	r20, 0x03	; 3
     f0a:	44 0f       	add	r20, r20
     f0c:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     f0e:	df 01       	movw	r26, r30
     f10:	58 97       	sbiw	r26, 0x18	; 24
     f12:	3c 91       	ld	r19, X
     f14:	53 2f       	mov	r21, r19
     f16:	52 95       	swap	r21
     f18:	50 7f       	andi	r21, 0xF0	; 240
     f1a:	46 2b       	or	r20, r22
     f1c:	45 2b       	or	r20, r21
     f1e:	4b 83       	std	Y+3, r20	; 0x03
     f20:	63 2f       	mov	r22, r19
     f22:	62 95       	swap	r22
     f24:	6f 70       	andi	r22, 0x0F	; 15
     f26:	11 96       	adiw	r26, 0x01	; 1
     f28:	4c 91       	ld	r20, X
     f2a:	43 70       	andi	r20, 0x03	; 3
     f2c:	42 95       	swap	r20
     f2e:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     f30:	df 01       	movw	r26, r30
     f32:	56 97       	sbiw	r26, 0x16	; 22
     f34:	3c 91       	ld	r19, X
     f36:	53 2f       	mov	r21, r19
     f38:	52 95       	swap	r21
     f3a:	55 0f       	add	r21, r21
     f3c:	55 0f       	add	r21, r21
     f3e:	50 7c       	andi	r21, 0xC0	; 192
     f40:	46 2b       	or	r20, r22
     f42:	45 2b       	or	r20, r21
     f44:	4c 83       	std	Y+4, r20	; 0x04
     f46:	11 96       	adiw	r26, 0x01	; 1
     f48:	4c 91       	ld	r20, X
     f4a:	42 95       	swap	r20
     f4c:	44 0f       	add	r20, r20
     f4e:	44 0f       	add	r20, r20
     f50:	40 7c       	andi	r20, 0xC0	; 192
     f52:	36 95       	lsr	r19
     f54:	36 95       	lsr	r19
     f56:	34 2b       	or	r19, r20
     f58:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     f5a:	df 01       	movw	r26, r30
     f5c:	54 97       	sbiw	r26, 0x14	; 20
     f5e:	3c 91       	ld	r19, X
     f60:	3e 83       	std	Y+6, r19	; 0x06
     f62:	11 96       	adiw	r26, 0x01	; 1
     f64:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     f66:	df 01       	movw	r26, r30
     f68:	52 97       	sbiw	r26, 0x12	; 18
     f6a:	3c 91       	ld	r19, X
     f6c:	53 2f       	mov	r21, r19
     f6e:	55 0f       	add	r21, r21
     f70:	55 0f       	add	r21, r21
     f72:	43 70       	andi	r20, 0x03	; 3
     f74:	45 2b       	or	r20, r21
     f76:	4f 83       	std	Y+7, r20	; 0x07
     f78:	63 2f       	mov	r22, r19
     f7a:	62 95       	swap	r22
     f7c:	66 95       	lsr	r22
     f7e:	66 95       	lsr	r22
     f80:	63 70       	andi	r22, 0x03	; 3
     f82:	11 96       	adiw	r26, 0x01	; 1
     f84:	4c 91       	ld	r20, X
     f86:	43 70       	andi	r20, 0x03	; 3
     f88:	44 0f       	add	r20, r20
     f8a:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     f8c:	df 01       	movw	r26, r30
     f8e:	50 97       	sbiw	r26, 0x10	; 16
     f90:	3c 91       	ld	r19, X
     f92:	53 2f       	mov	r21, r19
     f94:	52 95       	swap	r21
     f96:	50 7f       	andi	r21, 0xF0	; 240
     f98:	46 2b       	or	r20, r22
     f9a:	45 2b       	or	r20, r21
     f9c:	48 87       	std	Y+8, r20	; 0x08
     f9e:	63 2f       	mov	r22, r19
     fa0:	62 95       	swap	r22
     fa2:	6f 70       	andi	r22, 0x0F	; 15
     fa4:	11 96       	adiw	r26, 0x01	; 1
     fa6:	4c 91       	ld	r20, X
     fa8:	43 70       	andi	r20, 0x03	; 3
     faa:	42 95       	swap	r20
     fac:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     fae:	df 01       	movw	r26, r30
     fb0:	1e 97       	sbiw	r26, 0x0e	; 14
     fb2:	3c 91       	ld	r19, X
     fb4:	53 2f       	mov	r21, r19
     fb6:	52 95       	swap	r21
     fb8:	55 0f       	add	r21, r21
     fba:	55 0f       	add	r21, r21
     fbc:	50 7c       	andi	r21, 0xC0	; 192
     fbe:	46 2b       	or	r20, r22
     fc0:	45 2b       	or	r20, r21
     fc2:	49 87       	std	Y+9, r20	; 0x09
     fc4:	11 96       	adiw	r26, 0x01	; 1
     fc6:	4c 91       	ld	r20, X
     fc8:	42 95       	swap	r20
     fca:	44 0f       	add	r20, r20
     fcc:	44 0f       	add	r20, r20
     fce:	40 7c       	andi	r20, 0xC0	; 192
     fd0:	36 95       	lsr	r19
     fd2:	36 95       	lsr	r19
     fd4:	34 2b       	or	r19, r20
     fd6:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     fd8:	df 01       	movw	r26, r30
     fda:	1c 97       	sbiw	r26, 0x0c	; 12
     fdc:	3c 91       	ld	r19, X
     fde:	3b 87       	std	Y+11, r19	; 0x0b
     fe0:	11 96       	adiw	r26, 0x01	; 1
     fe2:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     fe4:	df 01       	movw	r26, r30
     fe6:	1a 97       	sbiw	r26, 0x0a	; 10
     fe8:	3c 91       	ld	r19, X
     fea:	53 2f       	mov	r21, r19
     fec:	55 0f       	add	r21, r21
     fee:	55 0f       	add	r21, r21
     ff0:	43 70       	andi	r20, 0x03	; 3
     ff2:	45 2b       	or	r20, r21
     ff4:	4c 87       	std	Y+12, r20	; 0x0c
     ff6:	63 2f       	mov	r22, r19
     ff8:	62 95       	swap	r22
     ffa:	66 95       	lsr	r22
     ffc:	66 95       	lsr	r22
     ffe:	63 70       	andi	r22, 0x03	; 3
    1000:	11 96       	adiw	r26, 0x01	; 1
    1002:	4c 91       	ld	r20, X
    1004:	43 70       	andi	r20, 0x03	; 3
    1006:	44 0f       	add	r20, r20
    1008:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    100a:	df 01       	movw	r26, r30
    100c:	18 97       	sbiw	r26, 0x08	; 8
    100e:	3c 91       	ld	r19, X
    1010:	53 2f       	mov	r21, r19
    1012:	52 95       	swap	r21
    1014:	50 7f       	andi	r21, 0xF0	; 240
    1016:	46 2b       	or	r20, r22
    1018:	45 2b       	or	r20, r21
    101a:	4d 87       	std	Y+13, r20	; 0x0d
    101c:	63 2f       	mov	r22, r19
    101e:	62 95       	swap	r22
    1020:	6f 70       	andi	r22, 0x0F	; 15
    1022:	11 96       	adiw	r26, 0x01	; 1
    1024:	4c 91       	ld	r20, X
    1026:	43 70       	andi	r20, 0x03	; 3
    1028:	42 95       	swap	r20
    102a:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    102c:	df 01       	movw	r26, r30
    102e:	16 97       	sbiw	r26, 0x06	; 6
    1030:	3c 91       	ld	r19, X
    1032:	53 2f       	mov	r21, r19
    1034:	52 95       	swap	r21
    1036:	55 0f       	add	r21, r21
    1038:	55 0f       	add	r21, r21
    103a:	50 7c       	andi	r21, 0xC0	; 192
    103c:	46 2b       	or	r20, r22
    103e:	45 2b       	or	r20, r21
    1040:	4e 87       	std	Y+14, r20	; 0x0e
    1042:	11 96       	adiw	r26, 0x01	; 1
    1044:	4c 91       	ld	r20, X
    1046:	42 95       	swap	r20
    1048:	44 0f       	add	r20, r20
    104a:	44 0f       	add	r20, r20
    104c:	40 7c       	andi	r20, 0xC0	; 192
    104e:	36 95       	lsr	r19
    1050:	36 95       	lsr	r19
    1052:	34 2b       	or	r19, r20
    1054:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    1056:	df 01       	movw	r26, r30
    1058:	14 97       	sbiw	r26, 0x04	; 4
    105a:	3c 91       	ld	r19, X
    105c:	38 8b       	std	Y+16, r19	; 0x10
    105e:	11 96       	adiw	r26, 0x01	; 1
    1060:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    1062:	df 01       	movw	r26, r30
    1064:	12 97       	sbiw	r26, 0x02	; 2
    1066:	3c 91       	ld	r19, X
    1068:	53 2f       	mov	r21, r19
    106a:	55 0f       	add	r21, r21
    106c:	55 0f       	add	r21, r21
    106e:	43 70       	andi	r20, 0x03	; 3
    1070:	45 2b       	or	r20, r21
    1072:	49 8b       	std	Y+17, r20	; 0x11
    1074:	32 95       	swap	r19
    1076:	36 95       	lsr	r19
    1078:	36 95       	lsr	r19
    107a:	33 70       	andi	r19, 0x03	; 3
    107c:	11 96       	adiw	r26, 0x01	; 1
    107e:	4c 91       	ld	r20, X
    1080:	43 70       	andi	r20, 0x03	; 3
    1082:	44 0f       	add	r20, r20
    1084:	44 0f       	add	r20, r20
    1086:	83 2b       	or	r24, r19
    1088:	84 2b       	or	r24, r20
    108a:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    108c:	80 91 e0 02 	lds	r24, 0x02E0
    1090:	38 2f       	mov	r19, r24
    1092:	32 95       	swap	r19
    1094:	33 0f       	add	r19, r19
    1096:	33 0f       	add	r19, r19
    1098:	30 7c       	andi	r19, 0xC0	; 192
    109a:	92 2b       	or	r25, r18
    109c:	93 2b       	or	r25, r19
    109e:	9b 8b       	std	Y+19, r25	; 0x13
    10a0:	93 81       	ldd	r25, Z+3	; 0x03
    10a2:	92 95       	swap	r25
    10a4:	99 0f       	add	r25, r25
    10a6:	99 0f       	add	r25, r25
    10a8:	90 7c       	andi	r25, 0xC0	; 192
    10aa:	86 95       	lsr	r24
    10ac:	86 95       	lsr	r24
    10ae:	89 2b       	or	r24, r25
    10b0:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    10b2:	80 91 e2 02 	lds	r24, 0x02E2
    10b6:	8d 8b       	std	Y+21, r24	; 0x15
    10b8:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    10ba:	80 91 e4 02 	lds	r24, 0x02E4
    10be:	28 2f       	mov	r18, r24
    10c0:	22 0f       	add	r18, r18
    10c2:	22 0f       	add	r18, r18
    10c4:	93 70       	andi	r25, 0x03	; 3
    10c6:	92 2b       	or	r25, r18
    10c8:	9e 8b       	std	Y+22, r25	; 0x16
    10ca:	38 2f       	mov	r19, r24
    10cc:	32 95       	swap	r19
    10ce:	36 95       	lsr	r19
    10d0:	36 95       	lsr	r19
    10d2:	33 70       	andi	r19, 0x03	; 3
    10d4:	97 81       	ldd	r25, Z+7	; 0x07
    10d6:	93 70       	andi	r25, 0x03	; 3
    10d8:	99 0f       	add	r25, r25
    10da:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    10dc:	80 91 e6 02 	lds	r24, 0x02E6
    10e0:	28 2f       	mov	r18, r24
    10e2:	22 95       	swap	r18
    10e4:	20 7f       	andi	r18, 0xF0	; 240
    10e6:	93 2b       	or	r25, r19
    10e8:	92 2b       	or	r25, r18
    10ea:	9f 8b       	std	Y+23, r25	; 0x17
    10ec:	38 2f       	mov	r19, r24
    10ee:	32 95       	swap	r19
    10f0:	3f 70       	andi	r19, 0x0F	; 15
    10f2:	91 85       	ldd	r25, Z+9	; 0x09
    10f4:	93 70       	andi	r25, 0x03	; 3
    10f6:	92 95       	swap	r25
    10f8:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    10fa:	80 91 e8 02 	lds	r24, 0x02E8
    10fe:	28 2f       	mov	r18, r24
    1100:	22 95       	swap	r18
    1102:	22 0f       	add	r18, r18
    1104:	22 0f       	add	r18, r18
    1106:	20 7c       	andi	r18, 0xC0	; 192
    1108:	93 2b       	or	r25, r19
    110a:	92 2b       	or	r25, r18
    110c:	98 8f       	std	Y+24, r25	; 0x18
    110e:	93 85       	ldd	r25, Z+11	; 0x0b
    1110:	92 95       	swap	r25
    1112:	99 0f       	add	r25, r25
    1114:	99 0f       	add	r25, r25
    1116:	90 7c       	andi	r25, 0xC0	; 192
    1118:	86 95       	lsr	r24
    111a:	86 95       	lsr	r24
    111c:	89 2b       	or	r24, r25
    111e:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    1120:	80 91 ea 02 	lds	r24, 0x02EA
    1124:	8a 8f       	std	Y+26, r24	; 0x1a
    1126:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    1128:	80 91 ec 02 	lds	r24, 0x02EC
    112c:	28 2f       	mov	r18, r24
    112e:	22 0f       	add	r18, r18
    1130:	22 0f       	add	r18, r18
    1132:	93 70       	andi	r25, 0x03	; 3
    1134:	92 2b       	or	r25, r18
    1136:	9b 8f       	std	Y+27, r25	; 0x1b
    1138:	38 2f       	mov	r19, r24
    113a:	32 95       	swap	r19
    113c:	36 95       	lsr	r19
    113e:	36 95       	lsr	r19
    1140:	33 70       	andi	r19, 0x03	; 3
    1142:	97 85       	ldd	r25, Z+15	; 0x0f
    1144:	93 70       	andi	r25, 0x03	; 3
    1146:	99 0f       	add	r25, r25
    1148:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    114a:	80 91 ee 02 	lds	r24, 0x02EE
    114e:	28 2f       	mov	r18, r24
    1150:	22 95       	swap	r18
    1152:	20 7f       	andi	r18, 0xF0	; 240
    1154:	93 2b       	or	r25, r19
    1156:	92 2b       	or	r25, r18
    1158:	9c 8f       	std	Y+28, r25	; 0x1c
    115a:	38 2f       	mov	r19, r24
    115c:	32 95       	swap	r19
    115e:	3f 70       	andi	r19, 0x0F	; 15
    1160:	91 89       	ldd	r25, Z+17	; 0x11
    1162:	93 70       	andi	r25, 0x03	; 3
    1164:	92 95       	swap	r25
    1166:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    1168:	80 91 f0 02 	lds	r24, 0x02F0
    116c:	28 2f       	mov	r18, r24
    116e:	22 95       	swap	r18
    1170:	22 0f       	add	r18, r18
    1172:	22 0f       	add	r18, r18
    1174:	20 7c       	andi	r18, 0xC0	; 192
    1176:	93 2b       	or	r25, r19
    1178:	92 2b       	or	r25, r18
    117a:	9d 8f       	std	Y+29, r25	; 0x1d
    117c:	93 89       	ldd	r25, Z+19	; 0x13
    117e:	92 95       	swap	r25
    1180:	99 0f       	add	r25, r25
    1182:	99 0f       	add	r25, r25
    1184:	90 7c       	andi	r25, 0xC0	; 192
    1186:	86 95       	lsr	r24
    1188:	86 95       	lsr	r24
    118a:	89 2b       	or	r24, r25
    118c:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    118e:	80 91 f2 02 	lds	r24, 0x02F2
    1192:	8f 8f       	std	Y+31, r24	; 0x1f
    1194:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    1196:	80 91 f4 02 	lds	r24, 0x02F4
    119a:	28 2f       	mov	r18, r24
    119c:	22 0f       	add	r18, r18
    119e:	22 0f       	add	r18, r18
    11a0:	93 70       	andi	r25, 0x03	; 3
    11a2:	92 2b       	or	r25, r18
    11a4:	98 a3       	lds	r25, 0x58
    11a6:	38 2f       	mov	r19, r24
    11a8:	32 95       	swap	r19
    11aa:	36 95       	lsr	r19
    11ac:	36 95       	lsr	r19
    11ae:	33 70       	andi	r19, 0x03	; 3
    11b0:	97 89       	ldd	r25, Z+23	; 0x17
    11b2:	93 70       	andi	r25, 0x03	; 3
    11b4:	99 0f       	add	r25, r25
    11b6:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    11b8:	80 91 f6 02 	lds	r24, 0x02F6
    11bc:	28 2f       	mov	r18, r24
    11be:	22 95       	swap	r18
    11c0:	20 7f       	andi	r18, 0xF0	; 240
    11c2:	93 2b       	or	r25, r19
    11c4:	92 2b       	or	r25, r18
    11c6:	99 a3       	lds	r25, 0x59
    11c8:	38 2f       	mov	r19, r24
    11ca:	32 95       	swap	r19
    11cc:	3f 70       	andi	r19, 0x0F	; 15
    11ce:	91 8d       	ldd	r25, Z+25	; 0x19
    11d0:	93 70       	andi	r25, 0x03	; 3
    11d2:	92 95       	swap	r25
    11d4:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    11d6:	80 91 f8 02 	lds	r24, 0x02F8
    11da:	28 2f       	mov	r18, r24
    11dc:	22 95       	swap	r18
    11de:	22 0f       	add	r18, r18
    11e0:	22 0f       	add	r18, r18
    11e2:	20 7c       	andi	r18, 0xC0	; 192
    11e4:	93 2b       	or	r25, r19
    11e6:	92 2b       	or	r25, r18
    11e8:	9a a3       	lds	r25, 0x5a
    11ea:	93 8d       	ldd	r25, Z+27	; 0x1b
    11ec:	92 95       	swap	r25
    11ee:	99 0f       	add	r25, r25
    11f0:	99 0f       	add	r25, r25
    11f2:	90 7c       	andi	r25, 0xC0	; 192
    11f4:	86 95       	lsr	r24
    11f6:	86 95       	lsr	r24
    11f8:	89 2b       	or	r24, r25
    11fa:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    11fc:	80 91 fa 02 	lds	r24, 0x02FA
    1200:	8c a3       	lds	r24, 0x5c
    1202:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    1204:	80 91 fc 02 	lds	r24, 0x02FC
    1208:	28 2f       	mov	r18, r24
    120a:	22 0f       	add	r18, r18
    120c:	22 0f       	add	r18, r18
    120e:	93 70       	andi	r25, 0x03	; 3
    1210:	92 2b       	or	r25, r18
    1212:	9d a3       	lds	r25, 0x5d
    1214:	82 95       	swap	r24
    1216:	86 95       	lsr	r24
    1218:	86 95       	lsr	r24
    121a:	83 70       	andi	r24, 0x03	; 3
    121c:	2e a1       	lds	r18, 0x4e
    121e:	20 7f       	andi	r18, 0xF0	; 240
    1220:	97 8d       	ldd	r25, Z+31	; 0x1f
    1222:	93 70       	andi	r25, 0x03	; 3
    1224:	99 0f       	add	r25, r25
    1226:	99 0f       	add	r25, r25
    1228:	82 2b       	or	r24, r18
    122a:	89 2b       	or	r24, r25
    122c:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    122e:	80 91 fe 02 	lds	r24, 0x02FE
    1232:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    1234:	80 91 ff 02 	lds	r24, 0x02FF
    1238:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    123a:	80 91 00 03 	lds	r24, 0x0300
    123e:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    1240:	80 91 01 03 	lds	r24, 0x0301
    1244:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    1246:	80 91 02 03 	lds	r24, 0x0302
    124a:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    124c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    1250:	80 91 7d 03 	lds	r24, 0x037D
    1254:	8f 77       	andi	r24, 0x7F	; 127
    1256:	80 93 7d 03 	sts	0x037D, r24
	current_patch.mode = MEMORY;
    125a:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    125e:	21 2f       	mov	r18, r17
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	8b e2       	ldi	r24, 0x2B	; 43
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	28 9f       	mul	r18, r24
    1268:	b0 01       	movw	r22, r0
    126a:	29 9f       	mul	r18, r25
    126c:	70 0d       	add	r23, r0
    126e:	38 9f       	mul	r19, r24
    1270:	70 0d       	add	r23, r0
    1272:	11 24       	eor	r1, r1
    1274:	60 50       	subi	r22, 0x00	; 0
    1276:	70 40       	sbci	r23, 0x00	; 0
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	4b e2       	ldi	r20, 0x2B	; 43
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	0e 94 29 1c 	call	0x3852	; 0x3852 <__eeupd_block_m6450a>
}	
    1284:	ab 96       	adiw	r28, 0x2b	; 43
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	08 95       	ret

00001298 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	c3 54       	subi	r28, 0x43	; 67
    12a4:	d0 40       	sbci	r29, 0x00	; 0
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	2b e2       	ldi	r18, 0x2B	; 43
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	82 9f       	mul	r24, r18
    12b8:	b0 01       	movw	r22, r0
    12ba:	83 9f       	mul	r24, r19
    12bc:	70 0d       	add	r23, r0
    12be:	92 9f       	mul	r25, r18
    12c0:	70 0d       	add	r23, r0
    12c2:	11 24       	eor	r1, r1
    12c4:	60 50       	subi	r22, 0x00	; 0
    12c6:	70 40       	sbci	r23, 0x00	; 0
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	4b e2       	ldi	r20, 0x2B	; 43
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	0e 94 13 1c 	call	0x3826	; 0x3826 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    12d4:	ee ed       	ldi	r30, 0xDE	; 222
    12d6:	f2 e0       	ldi	r31, 0x02	; 2
    12d8:	8a 89       	ldd	r24, Y+18	; 0x12
    12da:	28 2f       	mov	r18, r24
    12dc:	22 95       	swap	r18
    12de:	2f 70       	andi	r18, 0x0F	; 15
    12e0:	9b 89       	ldd	r25, Y+19	; 0x13
    12e2:	39 2f       	mov	r19, r25
    12e4:	32 95       	swap	r19
    12e6:	30 7f       	andi	r19, 0xF0	; 240
    12e8:	32 2b       	or	r19, r18
    12ea:	29 2f       	mov	r18, r25
    12ec:	22 95       	swap	r18
    12ee:	2f 70       	andi	r18, 0x0F	; 15
    12f0:	23 70       	andi	r18, 0x03	; 3
    12f2:	30 93 de 02 	sts	0x02DE, r19
    12f6:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    12fa:	df 01       	movw	r26, r30
    12fc:	5a 97       	sbiw	r26, 0x1a	; 26
    12fe:	4a 81       	ldd	r20, Y+2	; 0x02
    1300:	46 95       	lsr	r20
    1302:	46 95       	lsr	r20
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	32 2f       	mov	r19, r18
    1308:	32 95       	swap	r19
    130a:	33 0f       	add	r19, r19
    130c:	33 0f       	add	r19, r19
    130e:	30 7c       	andi	r19, 0xC0	; 192
    1310:	43 2b       	or	r20, r19
    1312:	32 2f       	mov	r19, r18
    1314:	36 95       	lsr	r19
    1316:	36 95       	lsr	r19
    1318:	33 70       	andi	r19, 0x03	; 3
    131a:	4c 93       	st	X, r20
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    1320:	df 01       	movw	r26, r30
    1322:	58 97       	sbiw	r26, 0x18	; 24
    1324:	32 2f       	mov	r19, r18
    1326:	32 95       	swap	r19
    1328:	3f 70       	andi	r19, 0x0F	; 15
    132a:	2c 81       	ldd	r18, Y+4	; 0x04
    132c:	42 2f       	mov	r20, r18
    132e:	42 95       	swap	r20
    1330:	40 7f       	andi	r20, 0xF0	; 240
    1332:	43 2b       	or	r20, r19
    1334:	32 2f       	mov	r19, r18
    1336:	32 95       	swap	r19
    1338:	3f 70       	andi	r19, 0x0F	; 15
    133a:	33 70       	andi	r19, 0x03	; 3
    133c:	4c 93       	st	X, r20
    133e:	11 96       	adiw	r26, 0x01	; 1
    1340:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    1342:	df 01       	movw	r26, r30
    1344:	56 97       	sbiw	r26, 0x16	; 22
    1346:	22 95       	swap	r18
    1348:	26 95       	lsr	r18
    134a:	26 95       	lsr	r18
    134c:	23 70       	andi	r18, 0x03	; 3
    134e:	3d 81       	ldd	r19, Y+5	; 0x05
    1350:	43 2f       	mov	r20, r19
    1352:	44 0f       	add	r20, r20
    1354:	44 0f       	add	r20, r20
    1356:	24 2b       	or	r18, r20
    1358:	32 95       	swap	r19
    135a:	36 95       	lsr	r19
    135c:	36 95       	lsr	r19
    135e:	33 70       	andi	r19, 0x03	; 3
    1360:	2c 93       	st	X, r18
    1362:	11 96       	adiw	r26, 0x01	; 1
    1364:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    1366:	df 01       	movw	r26, r30
    1368:	54 97       	sbiw	r26, 0x14	; 20
    136a:	4e 81       	ldd	r20, Y+6	; 0x06
    136c:	2f 81       	ldd	r18, Y+7	; 0x07
    136e:	32 2f       	mov	r19, r18
    1370:	33 70       	andi	r19, 0x03	; 3
    1372:	4c 93       	st	X, r20
    1374:	11 96       	adiw	r26, 0x01	; 1
    1376:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1378:	df 01       	movw	r26, r30
    137a:	52 97       	sbiw	r26, 0x12	; 18
    137c:	32 2f       	mov	r19, r18
    137e:	36 95       	lsr	r19
    1380:	36 95       	lsr	r19
    1382:	28 85       	ldd	r18, Y+8	; 0x08
    1384:	42 2f       	mov	r20, r18
    1386:	42 95       	swap	r20
    1388:	44 0f       	add	r20, r20
    138a:	44 0f       	add	r20, r20
    138c:	40 7c       	andi	r20, 0xC0	; 192
    138e:	43 2b       	or	r20, r19
    1390:	32 2f       	mov	r19, r18
    1392:	36 95       	lsr	r19
    1394:	36 95       	lsr	r19
    1396:	33 70       	andi	r19, 0x03	; 3
    1398:	4c 93       	st	X, r20
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    139e:	df 01       	movw	r26, r30
    13a0:	50 97       	sbiw	r26, 0x10	; 16
    13a2:	32 2f       	mov	r19, r18
    13a4:	32 95       	swap	r19
    13a6:	3f 70       	andi	r19, 0x0F	; 15
    13a8:	29 85       	ldd	r18, Y+9	; 0x09
    13aa:	42 2f       	mov	r20, r18
    13ac:	42 95       	swap	r20
    13ae:	40 7f       	andi	r20, 0xF0	; 240
    13b0:	43 2b       	or	r20, r19
    13b2:	32 2f       	mov	r19, r18
    13b4:	32 95       	swap	r19
    13b6:	3f 70       	andi	r19, 0x0F	; 15
    13b8:	33 70       	andi	r19, 0x03	; 3
    13ba:	4c 93       	st	X, r20
    13bc:	11 96       	adiw	r26, 0x01	; 1
    13be:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    13c0:	df 01       	movw	r26, r30
    13c2:	1e 97       	sbiw	r26, 0x0e	; 14
    13c4:	22 95       	swap	r18
    13c6:	26 95       	lsr	r18
    13c8:	26 95       	lsr	r18
    13ca:	23 70       	andi	r18, 0x03	; 3
    13cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ce:	43 2f       	mov	r20, r19
    13d0:	44 0f       	add	r20, r20
    13d2:	44 0f       	add	r20, r20
    13d4:	24 2b       	or	r18, r20
    13d6:	32 95       	swap	r19
    13d8:	36 95       	lsr	r19
    13da:	36 95       	lsr	r19
    13dc:	33 70       	andi	r19, 0x03	; 3
    13de:	2c 93       	st	X, r18
    13e0:	11 96       	adiw	r26, 0x01	; 1
    13e2:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    13e4:	df 01       	movw	r26, r30
    13e6:	1c 97       	sbiw	r26, 0x0c	; 12
    13e8:	4b 85       	ldd	r20, Y+11	; 0x0b
    13ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ec:	32 2f       	mov	r19, r18
    13ee:	33 70       	andi	r19, 0x03	; 3
    13f0:	4c 93       	st	X, r20
    13f2:	11 96       	adiw	r26, 0x01	; 1
    13f4:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    13f6:	df 01       	movw	r26, r30
    13f8:	1a 97       	sbiw	r26, 0x0a	; 10
    13fa:	32 2f       	mov	r19, r18
    13fc:	36 95       	lsr	r19
    13fe:	36 95       	lsr	r19
    1400:	2d 85       	ldd	r18, Y+13	; 0x0d
    1402:	42 2f       	mov	r20, r18
    1404:	42 95       	swap	r20
    1406:	44 0f       	add	r20, r20
    1408:	44 0f       	add	r20, r20
    140a:	40 7c       	andi	r20, 0xC0	; 192
    140c:	43 2b       	or	r20, r19
    140e:	32 2f       	mov	r19, r18
    1410:	36 95       	lsr	r19
    1412:	36 95       	lsr	r19
    1414:	33 70       	andi	r19, 0x03	; 3
    1416:	4c 93       	st	X, r20
    1418:	11 96       	adiw	r26, 0x01	; 1
    141a:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    141c:	df 01       	movw	r26, r30
    141e:	18 97       	sbiw	r26, 0x08	; 8
    1420:	32 2f       	mov	r19, r18
    1422:	32 95       	swap	r19
    1424:	3f 70       	andi	r19, 0x0F	; 15
    1426:	2e 85       	ldd	r18, Y+14	; 0x0e
    1428:	42 2f       	mov	r20, r18
    142a:	42 95       	swap	r20
    142c:	40 7f       	andi	r20, 0xF0	; 240
    142e:	43 2b       	or	r20, r19
    1430:	32 2f       	mov	r19, r18
    1432:	32 95       	swap	r19
    1434:	3f 70       	andi	r19, 0x0F	; 15
    1436:	33 70       	andi	r19, 0x03	; 3
    1438:	4c 93       	st	X, r20
    143a:	11 96       	adiw	r26, 0x01	; 1
    143c:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    143e:	df 01       	movw	r26, r30
    1440:	16 97       	sbiw	r26, 0x06	; 6
    1442:	22 95       	swap	r18
    1444:	26 95       	lsr	r18
    1446:	26 95       	lsr	r18
    1448:	23 70       	andi	r18, 0x03	; 3
    144a:	3f 85       	ldd	r19, Y+15	; 0x0f
    144c:	43 2f       	mov	r20, r19
    144e:	44 0f       	add	r20, r20
    1450:	44 0f       	add	r20, r20
    1452:	24 2b       	or	r18, r20
    1454:	32 95       	swap	r19
    1456:	36 95       	lsr	r19
    1458:	36 95       	lsr	r19
    145a:	33 70       	andi	r19, 0x03	; 3
    145c:	2c 93       	st	X, r18
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    1462:	df 01       	movw	r26, r30
    1464:	14 97       	sbiw	r26, 0x04	; 4
    1466:	48 89       	ldd	r20, Y+16	; 0x10
    1468:	29 89       	ldd	r18, Y+17	; 0x11
    146a:	32 2f       	mov	r19, r18
    146c:	33 70       	andi	r19, 0x03	; 3
    146e:	4c 93       	st	X, r20
    1470:	11 96       	adiw	r26, 0x01	; 1
    1472:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    1474:	df 01       	movw	r26, r30
    1476:	12 97       	sbiw	r26, 0x02	; 2
    1478:	26 95       	lsr	r18
    147a:	26 95       	lsr	r18
    147c:	38 2f       	mov	r19, r24
    147e:	32 95       	swap	r19
    1480:	33 0f       	add	r19, r19
    1482:	33 0f       	add	r19, r19
    1484:	30 7c       	andi	r19, 0xC0	; 192
    1486:	23 2b       	or	r18, r19
    1488:	86 95       	lsr	r24
    148a:	86 95       	lsr	r24
    148c:	83 70       	andi	r24, 0x03	; 3
    148e:	2c 93       	st	X, r18
    1490:	11 96       	adiw	r26, 0x01	; 1
    1492:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    1494:	92 95       	swap	r25
    1496:	96 95       	lsr	r25
    1498:	96 95       	lsr	r25
    149a:	93 70       	andi	r25, 0x03	; 3
    149c:	8c 89       	ldd	r24, Y+20	; 0x14
    149e:	28 2f       	mov	r18, r24
    14a0:	22 0f       	add	r18, r18
    14a2:	22 0f       	add	r18, r18
    14a4:	92 2b       	or	r25, r18
    14a6:	82 95       	swap	r24
    14a8:	86 95       	lsr	r24
    14aa:	86 95       	lsr	r24
    14ac:	83 70       	andi	r24, 0x03	; 3
    14ae:	90 93 e0 02 	sts	0x02E0, r25
    14b2:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    14b4:	2d 89       	ldd	r18, Y+21	; 0x15
    14b6:	8e 89       	ldd	r24, Y+22	; 0x16
    14b8:	98 2f       	mov	r25, r24
    14ba:	93 70       	andi	r25, 0x03	; 3
    14bc:	20 93 e2 02 	sts	0x02E2, r18
    14c0:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    14c2:	98 2f       	mov	r25, r24
    14c4:	96 95       	lsr	r25
    14c6:	96 95       	lsr	r25
    14c8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ca:	28 2f       	mov	r18, r24
    14cc:	22 95       	swap	r18
    14ce:	22 0f       	add	r18, r18
    14d0:	22 0f       	add	r18, r18
    14d2:	20 7c       	andi	r18, 0xC0	; 192
    14d4:	29 2b       	or	r18, r25
    14d6:	98 2f       	mov	r25, r24
    14d8:	96 95       	lsr	r25
    14da:	96 95       	lsr	r25
    14dc:	93 70       	andi	r25, 0x03	; 3
    14de:	20 93 e4 02 	sts	0x02E4, r18
    14e2:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    14e4:	98 2f       	mov	r25, r24
    14e6:	92 95       	swap	r25
    14e8:	9f 70       	andi	r25, 0x0F	; 15
    14ea:	88 8d       	ldd	r24, Y+24	; 0x18
    14ec:	28 2f       	mov	r18, r24
    14ee:	22 95       	swap	r18
    14f0:	20 7f       	andi	r18, 0xF0	; 240
    14f2:	29 2b       	or	r18, r25
    14f4:	98 2f       	mov	r25, r24
    14f6:	92 95       	swap	r25
    14f8:	9f 70       	andi	r25, 0x0F	; 15
    14fa:	93 70       	andi	r25, 0x03	; 3
    14fc:	20 93 e6 02 	sts	0x02E6, r18
    1500:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    1502:	82 95       	swap	r24
    1504:	86 95       	lsr	r24
    1506:	86 95       	lsr	r24
    1508:	83 70       	andi	r24, 0x03	; 3
    150a:	99 8d       	ldd	r25, Y+25	; 0x19
    150c:	29 2f       	mov	r18, r25
    150e:	22 0f       	add	r18, r18
    1510:	22 0f       	add	r18, r18
    1512:	82 2b       	or	r24, r18
    1514:	92 95       	swap	r25
    1516:	96 95       	lsr	r25
    1518:	96 95       	lsr	r25
    151a:	93 70       	andi	r25, 0x03	; 3
    151c:	80 93 e8 02 	sts	0x02E8, r24
    1520:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    1522:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1524:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1526:	98 2f       	mov	r25, r24
    1528:	93 70       	andi	r25, 0x03	; 3
    152a:	20 93 ea 02 	sts	0x02EA, r18
    152e:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    1530:	98 2f       	mov	r25, r24
    1532:	96 95       	lsr	r25
    1534:	96 95       	lsr	r25
    1536:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1538:	28 2f       	mov	r18, r24
    153a:	22 95       	swap	r18
    153c:	22 0f       	add	r18, r18
    153e:	22 0f       	add	r18, r18
    1540:	20 7c       	andi	r18, 0xC0	; 192
    1542:	29 2b       	or	r18, r25
    1544:	98 2f       	mov	r25, r24
    1546:	96 95       	lsr	r25
    1548:	96 95       	lsr	r25
    154a:	93 70       	andi	r25, 0x03	; 3
    154c:	20 93 ec 02 	sts	0x02EC, r18
    1550:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    1552:	98 2f       	mov	r25, r24
    1554:	92 95       	swap	r25
    1556:	9f 70       	andi	r25, 0x0F	; 15
    1558:	8d 8d       	ldd	r24, Y+29	; 0x1d
    155a:	28 2f       	mov	r18, r24
    155c:	22 95       	swap	r18
    155e:	20 7f       	andi	r18, 0xF0	; 240
    1560:	29 2b       	or	r18, r25
    1562:	98 2f       	mov	r25, r24
    1564:	92 95       	swap	r25
    1566:	9f 70       	andi	r25, 0x0F	; 15
    1568:	93 70       	andi	r25, 0x03	; 3
    156a:	20 93 ee 02 	sts	0x02EE, r18
    156e:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    1570:	82 95       	swap	r24
    1572:	86 95       	lsr	r24
    1574:	86 95       	lsr	r24
    1576:	83 70       	andi	r24, 0x03	; 3
    1578:	9e 8d       	ldd	r25, Y+30	; 0x1e
    157a:	29 2f       	mov	r18, r25
    157c:	22 0f       	add	r18, r18
    157e:	22 0f       	add	r18, r18
    1580:	82 2b       	or	r24, r18
    1582:	92 95       	swap	r25
    1584:	96 95       	lsr	r25
    1586:	96 95       	lsr	r25
    1588:	93 70       	andi	r25, 0x03	; 3
    158a:	80 93 f0 02 	sts	0x02F0, r24
    158e:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    1590:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1592:	88 a1       	lds	r24, 0x48
    1594:	98 2f       	mov	r25, r24
    1596:	93 70       	andi	r25, 0x03	; 3
    1598:	20 93 f2 02 	sts	0x02F2, r18
    159c:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    159e:	98 2f       	mov	r25, r24
    15a0:	96 95       	lsr	r25
    15a2:	96 95       	lsr	r25
    15a4:	89 a1       	lds	r24, 0x49
    15a6:	28 2f       	mov	r18, r24
    15a8:	22 95       	swap	r18
    15aa:	22 0f       	add	r18, r18
    15ac:	22 0f       	add	r18, r18
    15ae:	20 7c       	andi	r18, 0xC0	; 192
    15b0:	29 2b       	or	r18, r25
    15b2:	98 2f       	mov	r25, r24
    15b4:	96 95       	lsr	r25
    15b6:	96 95       	lsr	r25
    15b8:	93 70       	andi	r25, 0x03	; 3
    15ba:	20 93 f4 02 	sts	0x02F4, r18
    15be:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    15c0:	98 2f       	mov	r25, r24
    15c2:	92 95       	swap	r25
    15c4:	9f 70       	andi	r25, 0x0F	; 15
    15c6:	8a a1       	lds	r24, 0x4a
    15c8:	28 2f       	mov	r18, r24
    15ca:	22 95       	swap	r18
    15cc:	20 7f       	andi	r18, 0xF0	; 240
    15ce:	29 2b       	or	r18, r25
    15d0:	98 2f       	mov	r25, r24
    15d2:	92 95       	swap	r25
    15d4:	9f 70       	andi	r25, 0x0F	; 15
    15d6:	93 70       	andi	r25, 0x03	; 3
    15d8:	20 93 f6 02 	sts	0x02F6, r18
    15dc:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    15de:	82 95       	swap	r24
    15e0:	86 95       	lsr	r24
    15e2:	86 95       	lsr	r24
    15e4:	83 70       	andi	r24, 0x03	; 3
    15e6:	9b a1       	lds	r25, 0x4b
    15e8:	29 2f       	mov	r18, r25
    15ea:	22 0f       	add	r18, r18
    15ec:	22 0f       	add	r18, r18
    15ee:	82 2b       	or	r24, r18
    15f0:	92 95       	swap	r25
    15f2:	96 95       	lsr	r25
    15f4:	96 95       	lsr	r25
    15f6:	93 70       	andi	r25, 0x03	; 3
    15f8:	80 93 f8 02 	sts	0x02F8, r24
    15fc:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    15fe:	2c a1       	lds	r18, 0x4c
    1600:	8d a1       	lds	r24, 0x4d
    1602:	98 2f       	mov	r25, r24
    1604:	93 70       	andi	r25, 0x03	; 3
    1606:	20 93 fa 02 	sts	0x02FA, r18
    160a:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    160c:	98 2f       	mov	r25, r24
    160e:	96 95       	lsr	r25
    1610:	96 95       	lsr	r25
    1612:	8e a1       	lds	r24, 0x4e
    1614:	28 2f       	mov	r18, r24
    1616:	22 95       	swap	r18
    1618:	22 0f       	add	r18, r18
    161a:	22 0f       	add	r18, r18
    161c:	20 7c       	andi	r18, 0xC0	; 192
    161e:	29 2b       	or	r18, r25
    1620:	86 95       	lsr	r24
    1622:	86 95       	lsr	r24
    1624:	98 2f       	mov	r25, r24
    1626:	93 70       	andi	r25, 0x03	; 3
    1628:	20 93 fc 02 	sts	0x02FC, r18
    162c:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    162e:	7f a1       	lds	r23, 0x4f
    1630:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    1634:	68 a5       	lds	r22, 0x68
    1636:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    163a:	89 a5       	lds	r24, 0x69
    163c:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    1640:	9a a5       	lds	r25, 0x6a
    1642:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    1646:	1b a5       	lds	r17, 0x6b
    1648:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    164c:	de 01       	movw	r26, r28
    164e:	9c 96       	adiw	r26, 0x2c	; 44
    1650:	ef ef       	ldi	r30, 0xFF	; 255
    1652:	f1 e0       	ldi	r31, 0x01	; 1
    1654:	28 e0       	ldi	r18, 0x08	; 8
    1656:	01 90       	ld	r0, Z+
    1658:	0d 92       	st	X+, r0
    165a:	21 50       	subi	r18, 0x01	; 1
    165c:	e1 f7       	brne	.-8      	; 0x1656 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    165e:	e9 2f       	mov	r30, r25
    1660:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	9f 01       	movw	r18, r30
    1666:	22 0f       	add	r18, r18
    1668:	33 1f       	adc	r19, r19
    166a:	22 0f       	add	r18, r18
    166c:	33 1f       	adc	r19, r19
    166e:	a9 01       	movw	r20, r18
    1670:	44 0f       	add	r20, r20
    1672:	55 1f       	adc	r21, r21
    1674:	44 0f       	add	r20, r20
    1676:	55 1f       	adc	r21, r21
    1678:	44 0f       	add	r20, r20
    167a:	55 1f       	adc	r21, r21
    167c:	42 1b       	sub	r20, r18
    167e:	53 0b       	sbc	r21, r19
    1680:	4e 0f       	add	r20, r30
    1682:	5f 1f       	adc	r21, r31
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	55 95       	asr	r21
    168a:	47 95       	ror	r20
    168c:	55 95       	asr	r21
    168e:	47 95       	ror	r20
    1690:	55 95       	asr	r21
    1692:	47 95       	ror	r20
    1694:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1696:	fe 01       	movw	r30, r28
    1698:	e4 0f       	add	r30, r20
    169a:	f1 1d       	adc	r31, r1
    169c:	24 a5       	lds	r18, 0x64
    169e:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    16a2:	de 01       	movw	r26, r28
    16a4:	d4 96       	adiw	r26, 0x34	; 52
    16a6:	e7 e0       	ldi	r30, 0x07	; 7
    16a8:	f2 e0       	ldi	r31, 0x02	; 2
    16aa:	28 e0       	ldi	r18, 0x08	; 8
    16ac:	01 90       	ld	r0, Z+
    16ae:	0d 92       	st	X+, r0
    16b0:	21 50       	subi	r18, 0x01	; 1
    16b2:	e1 f7       	brne	.-8      	; 0x16ac <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    16b4:	29 2f       	mov	r18, r25
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	20 7e       	andi	r18, 0xE0	; 224
    16ba:	30 70       	andi	r19, 0x00	; 0
    16bc:	35 95       	asr	r19
    16be:	27 95       	ror	r18
    16c0:	35 95       	asr	r19
    16c2:	27 95       	ror	r18
    16c4:	35 95       	asr	r19
    16c6:	27 95       	ror	r18
    16c8:	83 70       	andi	r24, 0x03	; 3
    16ca:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    16cc:	42 2f       	mov	r20, r18
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	ca 01       	movw	r24, r20
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	9c 01       	movw	r18, r24
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	28 1b       	sub	r18, r24
    16ea:	39 0b       	sbc	r19, r25
    16ec:	42 0f       	add	r20, r18
    16ee:	53 1f       	adc	r21, r19
    16f0:	ca 01       	movw	r24, r20
    16f2:	95 95       	asr	r25
    16f4:	87 95       	ror	r24
    16f6:	95 95       	asr	r25
    16f8:	87 95       	ror	r24
    16fa:	95 95       	asr	r25
    16fc:	87 95       	ror	r24
    16fe:	95 95       	asr	r25
    1700:	87 95       	ror	r24
    1702:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    1704:	fe 01       	movw	r30, r28
    1706:	e8 0f       	add	r30, r24
    1708:	f1 1d       	adc	r31, r1
    170a:	84 a9       	sts	0x44, r24
    170c:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    1710:	de 01       	movw	r26, r28
    1712:	dc 96       	adiw	r26, 0x3c	; 60
    1714:	ef e0       	ldi	r30, 0x0F	; 15
    1716:	f2 e0       	ldi	r31, 0x02	; 2
    1718:	88 e0       	ldi	r24, 0x08	; 8
    171a:	01 90       	ld	r0, Z+
    171c:	0d 92       	st	X+, r0
    171e:	81 50       	subi	r24, 0x01	; 1
    1720:	e1 f7       	brne	.-8      	; 0x171a <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    1722:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    1724:	46 2f       	mov	r20, r22
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	ca 01       	movw	r24, r20
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	9c 01       	movw	r18, r24
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	22 0f       	add	r18, r18
    173e:	33 1f       	adc	r19, r19
    1740:	28 1b       	sub	r18, r24
    1742:	39 0b       	sbc	r19, r25
    1744:	42 0f       	add	r20, r18
    1746:	53 1f       	adc	r21, r19
    1748:	ca 01       	movw	r24, r20
    174a:	95 95       	asr	r25
    174c:	87 95       	ror	r24
    174e:	95 95       	asr	r25
    1750:	87 95       	ror	r24
    1752:	95 95       	asr	r25
    1754:	87 95       	ror	r24
    1756:	95 95       	asr	r25
    1758:	87 95       	ror	r24
    175a:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    175c:	fe 01       	movw	r30, r28
    175e:	e8 0f       	add	r30, r24
    1760:	f1 1d       	adc	r31, r1
    1762:	84 ad       	sts	0x64, r24
    1764:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1768:	21 2f       	mov	r18, r17
    176a:	26 95       	lsr	r18
    176c:	27 95       	ror	r18
    176e:	22 27       	eor	r18, r18
    1770:	27 95       	ror	r18
    1772:	81 2f       	mov	r24, r17
    1774:	81 70       	andi	r24, 0x01	; 1
    1776:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1778:	81 2f       	mov	r24, r17
    177a:	86 95       	lsr	r24
    177c:	86 95       	lsr	r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	81 70       	andi	r24, 0x01	; 1
    1782:	90 70       	andi	r25, 0x00	; 0
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    178c:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    178e:	81 2f       	mov	r24, r17
    1790:	86 95       	lsr	r24
    1792:	86 95       	lsr	r24
    1794:	86 95       	lsr	r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	81 70       	andi	r24, 0x01	; 1
    179a:	90 70       	andi	r25, 0x00	; 0
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17a0:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    17a2:	81 2f       	mov	r24, r17
    17a4:	82 95       	swap	r24
    17a6:	8f 70       	andi	r24, 0x0F	; 15
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	81 70       	andi	r24, 0x01	; 1
    17ac:	90 70       	andi	r25, 0x00	; 0
    17ae:	82 95       	swap	r24
    17b0:	92 95       	swap	r25
    17b2:	90 7f       	andi	r25, 0xF0	; 240
    17b4:	98 27       	eor	r25, r24
    17b6:	80 7f       	andi	r24, 0xF0	; 240
    17b8:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17ba:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    17bc:	81 2f       	mov	r24, r17
    17be:	82 95       	swap	r24
    17c0:	86 95       	lsr	r24
    17c2:	87 70       	andi	r24, 0x07	; 7
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	90 70       	andi	r25, 0x00	; 0
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	82 95       	swap	r24
    17d0:	92 95       	swap	r25
    17d2:	90 7f       	andi	r25, 0xF0	; 240
    17d4:	98 27       	eor	r25, r24
    17d6:	80 7f       	andi	r24, 0xF0	; 240
    17d8:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17da:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    17dc:	81 2f       	mov	r24, r17
    17de:	82 95       	swap	r24
    17e0:	86 95       	lsr	r24
    17e2:	86 95       	lsr	r24
    17e4:	83 70       	andi	r24, 0x03	; 3
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	81 70       	andi	r24, 0x01	; 1
    17ea:	90 70       	andi	r25, 0x00	; 0
    17ec:	00 24       	eor	r0, r0
    17ee:	96 95       	lsr	r25
    17f0:	87 95       	ror	r24
    17f2:	07 94       	ror	r0
    17f4:	96 95       	lsr	r25
    17f6:	87 95       	ror	r24
    17f8:	07 94       	ror	r0
    17fa:	98 2f       	mov	r25, r24
    17fc:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17fe:	82 2b       	or	r24, r18
    1800:	80 93 7b 03 	sts	0x037B, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    1804:	87 2f       	mov	r24, r23
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	81 70       	andi	r24, 0x01	; 1
    180a:	90 70       	andi	r25, 0x00	; 0
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1818:	90 91 7d 03 	lds	r25, 0x037D
    181c:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    181e:	89 2b       	or	r24, r25
    1820:	11 1f       	adc	r17, r17
    1822:	11 27       	eor	r17, r17
    1824:	11 1f       	adc	r17, r17
    1826:	11 0f       	add	r17, r17
    1828:	11 0f       	add	r17, r17
    182a:	81 2b       	or	r24, r17
    182c:	80 93 7d 03 	sts	0x037D, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1830:	0e 94 2e 07 	call	0xe5c	; 0xe5c <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    1834:	80 91 7d 03 	lds	r24, 0x037D
    1838:	8f 77       	andi	r24, 0x7F	; 127
    183a:	80 93 7d 03 	sts	0x037D, r24
	
	current_patch.mode = MEMORY;
    183e:	10 92 07 03 	sts	0x0307, r1
	
}
    1842:	cd 5b       	subi	r28, 0xBD	; 189
    1844:	df 4f       	sbci	r29, 0xFF	; 255
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	08 95       	ret

00001858 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1858:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    185c:	60 3f       	cpi	r22, 0xF0	; 240
    185e:	11 f4       	brne	.+4      	; 0x1864 <transpose_note+0xc>
    1860:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    1864:	29 2f       	mov	r18, r25
    1866:	22 0f       	add	r18, r18
    1868:	92 0f       	add	r25, r18
    186a:	99 0f       	add	r25, r25
    186c:	99 0f       	add	r25, r25
    186e:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1870:	89 38       	cpi	r24, 0x89	; 137
    1872:	08 f0       	brcs	.+2      	; 0x1876 <transpose_note+0x1e>
    1874:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1876:	08 95       	ret

00001878 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1878:	80 91 7b 03 	lds	r24, 0x037B
    187c:	98 2f       	mov	r25, r24
    187e:	96 95       	lsr	r25
    1880:	96 95       	lsr	r25
    1882:	96 95       	lsr	r25
    1884:	90 ff       	sbrs	r25, 0
    1886:	0e c0       	rjmp	.+28     	; 0x18a4 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1888:	90 91 08 03 	lds	r25, 0x0308
    188c:	9f 5f       	subi	r25, 0xFF	; 255
    188e:	90 93 08 03 	sts	0x0308, r25
    1892:	95 30       	cpi	r25, 0x05	; 5
    1894:	19 f4       	brne	.+6      	; 0x189c <update_octave_range+0x24>
    1896:	94 e0       	ldi	r25, 0x04	; 4
    1898:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    189c:	98 e0       	ldi	r25, 0x08	; 8
    189e:	89 27       	eor	r24, r25
    18a0:	80 93 7b 03 	sts	0x037B, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    18a4:	80 91 7c 03 	lds	r24, 0x037C
    18a8:	98 2f       	mov	r25, r24
    18aa:	96 95       	lsr	r25
    18ac:	96 95       	lsr	r25
    18ae:	96 95       	lsr	r25
    18b0:	90 ff       	sbrs	r25, 0
    18b2:	0b c0       	rjmp	.+22     	; 0x18ca <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    18b4:	90 91 08 03 	lds	r25, 0x0308
    18b8:	99 23       	and	r25, r25
    18ba:	19 f0       	breq	.+6      	; 0x18c2 <update_octave_range+0x4a>
    18bc:	91 50       	subi	r25, 0x01	; 1
    18be:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    18c2:	98 e0       	ldi	r25, 0x08	; 8
    18c4:	89 27       	eor	r24, r25
    18c6:	80 93 7c 03 	sts	0x037C, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    18ca:	80 91 08 03 	lds	r24, 0x0308
    18ce:	e1 e2       	ldi	r30, 0x21	; 33
    18d0:	f2 e0       	ldi	r31, 0x02	; 2
    18d2:	e8 0f       	add	r30, r24
    18d4:	f1 1d       	adc	r31, r1
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	00 80       	ld	r0, Z
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <update_octave_range+0x6a>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <update_octave_range+0x66>
    18e6:	58 2f       	mov	r21, r24
    18e8:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    18ec:	90 91 7c 03 	lds	r25, 0x037C
    18f0:	29 2f       	mov	r18, r25
    18f2:	26 95       	lsr	r18
    18f4:	26 95       	lsr	r18
    18f6:	20 ff       	sbrs	r18, 0
    18f8:	0e c0       	rjmp	.+28     	; 0x1916 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    18fa:	80 91 09 03 	lds	r24, 0x0309
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	80 93 09 03 	sts	0x0309, r24
    1904:	85 30       	cpi	r24, 0x05	; 5
    1906:	19 f4       	brne	.+6      	; 0x190e <update_octave_range+0x96>
    1908:	84 e0       	ldi	r24, 0x04	; 4
    190a:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	98 27       	eor	r25, r24
    1912:	90 93 7c 03 	sts	0x037C, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1916:	90 91 7c 03 	lds	r25, 0x037C
    191a:	29 2f       	mov	r18, r25
    191c:	26 95       	lsr	r18
    191e:	20 ff       	sbrs	r18, 0
    1920:	0b c0       	rjmp	.+22     	; 0x1938 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1922:	80 91 09 03 	lds	r24, 0x0309
    1926:	88 23       	and	r24, r24
    1928:	19 f0       	breq	.+6      	; 0x1930 <update_octave_range+0xb8>
    192a:	81 50       	subi	r24, 0x01	; 1
    192c:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	98 27       	eor	r25, r24
    1934:	90 93 7c 03 	sts	0x037C, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1938:	40 91 00 03 	lds	r20, 0x0300
    193c:	4c 7f       	andi	r20, 0xFC	; 252
    193e:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1942:	90 91 09 03 	lds	r25, 0x0309
    1946:	93 30       	cpi	r25, 0x03	; 3
    1948:	88 f0       	brcs	.+34     	; 0x196c <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    194a:	ec e1       	ldi	r30, 0x1C	; 28
    194c:	f2 e0       	ldi	r31, 0x02	; 2
    194e:	e9 0f       	add	r30, r25
    1950:	f1 1d       	adc	r31, r1
    1952:	21 e0       	ldi	r18, 0x01	; 1
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	c9 01       	movw	r24, r18
    1958:	00 80       	ld	r0, Z
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <update_octave_range+0xe8>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <update_octave_range+0xe4>
    1964:	84 2b       	or	r24, r20
    1966:	80 93 00 03 	sts	0x0300, r24
    196a:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    196c:	ec e1       	ldi	r30, 0x1C	; 28
    196e:	f2 e0       	ldi	r31, 0x02	; 2
    1970:	e9 0f       	add	r30, r25
    1972:	f1 1d       	adc	r31, r1
    1974:	21 e0       	ldi	r18, 0x01	; 1
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	c9 01       	movw	r24, r18
    197a:	00 80       	ld	r0, Z
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <update_octave_range+0x10a>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <update_octave_range+0x106>
    1986:	85 2b       	or	r24, r21
    1988:	80 93 01 03 	sts	0x0301, r24
    198c:	08 95       	ret

0000198e <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    198e:	80 91 7c 03 	lds	r24, 0x037C
    1992:	88 23       	and	r24, r24
    1994:	64 f4       	brge	.+24     	; 0x19ae <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1996:	80 58       	subi	r24, 0x80	; 128
    1998:	80 93 7c 03 	sts	0x037C, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    199c:	80 91 0a 03 	lds	r24, 0x030A
    19a0:	8f 5f       	subi	r24, 0xFF	; 255
    19a2:	80 93 0a 03 	sts	0x030A, r24
    19a6:	85 30       	cpi	r24, 0x05	; 5
    19a8:	11 f4       	brne	.+4      	; 0x19ae <update_lfo_shape+0x20>
    19aa:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    19ae:	e0 91 0a 03 	lds	r30, 0x030A
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	ee 0f       	add	r30, r30
    19b6:	ff 1f       	adc	r31, r31
    19b8:	ea 5d       	subi	r30, 0xDA	; 218
    19ba:	fd 4f       	sbci	r31, 0xFD	; 253
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	01 80       	ldd	r0, Z+1	; 0x01
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <update_lfo_shape+0x3a>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    19cc:	90 91 ff 02 	lds	r25, 0x02FF
    19d0:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    19d2:	89 2b       	or	r24, r25
    19d4:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    19d8:	80 81       	ld	r24, Z
    19da:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    19dc:	ed ed       	ldi	r30, 0xDD	; 221
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	80 62       	ori	r24, 0x20	; 32
    19e4:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    19e6:	80 81       	ld	r24, Z
    19e8:	8f 7d       	andi	r24, 0xDF	; 223
    19ea:	80 83       	st	Z, r24
	
}		
    19ec:	08 95       	ret

000019ee <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    19ee:	80 91 7c 03 	lds	r24, 0x037C
    19f2:	80 ff       	sbrs	r24, 0
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	89 27       	eor	r24, r25
    19fa:	80 93 7c 03 	sts	0x037C, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    19fe:	80 91 0b 03 	lds	r24, 0x030B
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	80 93 0b 03 	sts	0x030B, r24
    1a08:	85 30       	cpi	r24, 0x05	; 5
    1a0a:	11 f4       	brne	.+4      	; 0x1a10 <update_lfo_sync+0x22>
    1a0c:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1a10:	10 92 86 03 	sts	0x0386, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1a14:	60 91 ff 02 	lds	r22, 0x02FF
    1a18:	60 7f       	andi	r22, 0xF0	; 240
    1a1a:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1a1e:	20 91 0b 03 	lds	r18, 0x030B
    1a22:	22 23       	and	r18, r18
    1a24:	71 f0       	breq	.+28     	; 0x1a42 <update_lfo_sync+0x54>
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	21 50       	subi	r18, 0x01	; 1
    1a2a:	30 40       	sbci	r19, 0x00	; 0
    1a2c:	41 e0       	ldi	r20, 0x01	; 1
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	ca 01       	movw	r24, r20
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <update_lfo_sync+0x4a>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	2a 95       	dec	r18
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <update_lfo_sync+0x46>
    1a3c:	86 2b       	or	r24, r22
    1a3e:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1a42:	80 91 ff 02 	lds	r24, 0x02FF
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	8f 70       	andi	r24, 0x0F	; 15
    1a4a:	90 70       	andi	r25, 0x00	; 0
    1a4c:	82 30       	cpi	r24, 0x02	; 2
    1a4e:	91 05       	cpc	r25, r1
    1a50:	89 f0       	breq	.+34     	; 0x1a74 <update_lfo_sync+0x86>
    1a52:	83 30       	cpi	r24, 0x03	; 3
    1a54:	91 05       	cpc	r25, r1
    1a56:	24 f4       	brge	.+8      	; 0x1a60 <update_lfo_sync+0x72>
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	b1 f4       	brne	.+44     	; 0x1a8a <update_lfo_sync+0x9c>
    1a5e:	07 c0       	rjmp	.+14     	; 0x1a6e <update_lfo_sync+0x80>
    1a60:	84 30       	cpi	r24, 0x04	; 4
    1a62:	91 05       	cpc	r25, r1
    1a64:	59 f0       	breq	.+22     	; 0x1a7c <update_lfo_sync+0x8e>
    1a66:	88 30       	cpi	r24, 0x08	; 8
    1a68:	91 05       	cpc	r25, r1
    1a6a:	79 f4       	brne	.+30     	; 0x1a8a <update_lfo_sync+0x9c>
    1a6c:	0b c0       	rjmp	.+22     	; 0x1a84 <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode
    1a6e:	10 92 85 03 	sts	0x0385, r1
			
			break;
    1a72:	08 95       	ret
			
		case 0b0010:
			midi_clock.divider = 24; //1:4
    1a74:	88 e1       	ldi	r24, 0x18	; 24
    1a76:	80 93 85 03 	sts	0x0385, r24
			break;
    1a7a:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1a7c:	8c e0       	ldi	r24, 0x0C	; 12
    1a7e:	80 93 85 03 	sts	0x0385, r24
			break;
    1a82:	08 95       	ret
			
		case 0b1000:
			 midi_clock.divider = 6; //1:16	 		
    1a84:	86 e0       	ldi	r24, 0x06	; 6
    1a86:	80 93 85 03 	sts	0x0385, r24
    1a8a:	08 95       	ret

00001a8c <update_patch>:
	
	
	
}		
	
void update_patch(void) {
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1a94:	90 91 7b 03 	lds	r25, 0x037B
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1a98:	80 91 7d 03 	lds	r24, 0x037D
    1a9c:	86 95       	lsr	r24
    1a9e:	86 95       	lsr	r24
    1aa0:	68 2f       	mov	r22, r24
    1aa2:	67 95       	ror	r22
    1aa4:	66 27       	eor	r22, r22
    1aa6:	67 95       	ror	r22
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1aa8:	29 2f       	mov	r18, r25
    1aaa:	21 70       	andi	r18, 0x01	; 1
    1aac:	26 2b       	or	r18, r22
    1aae:	69 2f       	mov	r22, r25
    1ab0:	66 1f       	adc	r22, r22
    1ab2:	66 27       	eor	r22, r22
    1ab4:	66 1f       	adc	r22, r22
    1ab6:	66 0f       	add	r22, r22
    1ab8:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1aba:	c9 2f       	mov	r28, r25
    1abc:	c6 95       	lsr	r28
    1abe:	c6 95       	lsr	r28
    1ac0:	d0 e0       	ldi	r29, 0x00	; 0
    1ac2:	c1 70       	andi	r28, 0x01	; 1
    1ac4:	d0 70       	andi	r29, 0x00	; 0
    1ac6:	de 01       	movw	r26, r28
    1ac8:	aa 0f       	add	r26, r26
    1aca:	bb 1f       	adc	r27, r27
    1acc:	aa 0f       	add	r26, r26
    1ace:	bb 1f       	adc	r27, r27
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ad0:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1ad2:	a9 2f       	mov	r26, r25
    1ad4:	a6 95       	lsr	r26
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	a1 70       	andi	r26, 0x01	; 1
    1ada:	b0 70       	andi	r27, 0x00	; 0
    1adc:	fd 01       	movw	r30, r26
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	ee 0f       	add	r30, r30
    1ae4:	ff 1f       	adc	r31, r31
    1ae6:	ee 0f       	add	r30, r30
    1ae8:	ff 1f       	adc	r31, r31
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1aea:	a6 2f       	mov	r26, r22
    1aec:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1aee:	e9 2f       	mov	r30, r25
    1af0:	e2 95       	swap	r30
    1af2:	ef 70       	andi	r30, 0x0F	; 15
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	e1 70       	andi	r30, 0x01	; 1
    1af8:	f0 70       	andi	r31, 0x00	; 0
    1afa:	bf 01       	movw	r22, r30
    1afc:	62 95       	swap	r22
    1afe:	72 95       	swap	r23
    1b00:	70 7f       	andi	r23, 0xF0	; 240
    1b02:	76 27       	eor	r23, r22
    1b04:	60 7f       	andi	r22, 0xF0	; 240
    1b06:	76 27       	eor	r23, r22
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1b08:	ea 2f       	mov	r30, r26
    1b0a:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1b0c:	69 2f       	mov	r22, r25
    1b0e:	62 95       	swap	r22
    1b10:	66 95       	lsr	r22
    1b12:	67 70       	andi	r22, 0x07	; 7
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	61 70       	andi	r22, 0x01	; 1
    1b18:	70 70       	andi	r23, 0x00	; 0
    1b1a:	ab 01       	movw	r20, r22
    1b1c:	44 0f       	add	r20, r20
    1b1e:	55 1f       	adc	r21, r21
    1b20:	42 95       	swap	r20
    1b22:	52 95       	swap	r21
    1b24:	50 7f       	andi	r21, 0xF0	; 240
    1b26:	54 27       	eor	r21, r20
    1b28:	40 7f       	andi	r20, 0xF0	; 240
    1b2a:	54 27       	eor	r21, r20
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1b2c:	6e 2f       	mov	r22, r30
    1b2e:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1b30:	49 2f       	mov	r20, r25
    1b32:	42 95       	swap	r20
    1b34:	46 95       	lsr	r20
    1b36:	46 95       	lsr	r20
    1b38:	43 70       	andi	r20, 0x03	; 3
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	41 70       	andi	r20, 0x01	; 1
    1b3e:	50 70       	andi	r21, 0x00	; 0
    1b40:	9a 01       	movw	r18, r20
    1b42:	00 24       	eor	r0, r0
    1b44:	36 95       	lsr	r19
    1b46:	27 95       	ror	r18
    1b48:	07 94       	ror	r0
    1b4a:	36 95       	lsr	r19
    1b4c:	27 95       	ror	r18
    1b4e:	07 94       	ror	r0
    1b50:	32 2f       	mov	r19, r18
    1b52:	20 2d       	mov	r18, r0
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1b54:	26 2b       	or	r18, r22
    1b56:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1b5a:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1b5c:	81 95       	neg	r24
    1b5e:	89 27       	eor	r24, r25
    1b60:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1b62:	89 27       	eor	r24, r25
    1b64:	0e 94 8f 14 	call	0x291e	; 0x291e <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1b68:	ed ed       	ldi	r30, 0xDD	; 221
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1b6e:	90 91 7d 03 	lds	r25, 0x037D
    1b72:	96 95       	lsr	r25
    1b74:	96 95       	lsr	r25
    1b76:	96 95       	lsr	r25
    1b78:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1b7a:	91 95       	neg	r25
    1b7c:	80 81       	ld	r24, Z
    1b7e:	89 27       	eor	r24, r25
    1b80:	80 71       	andi	r24, 0x10	; 16
    1b82:	82 27       	eor	r24, r18
    1b84:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1b86:	ee ef       	ldi	r30, 0xFE	; 254
    1b88:	f2 e0       	ldi	r31, 0x02	; 2
    1b8a:	80 81       	ld	r24, Z
    1b8c:	98 27       	eor	r25, r24
    1b8e:	91 70       	andi	r25, 0x01	; 1
    1b90:	89 27       	eor	r24, r25
    1b92:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1b94:	0e 94 3c 0c 	call	0x1878	; 0x1878 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1b98:	0e 94 c7 0c 	call	0x198e	; 0x198e <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1b9c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <update_lfo_sync>

	
	//update_patch_programmer();		
				
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) //temporary tune button hack
    1ba0:	80 91 7c 03 	lds	r24, 0x037C
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	92 95       	swap	r25
    1ba8:	96 95       	lsr	r25
    1baa:	97 70       	andi	r25, 0x07	; 7
    1bac:	90 ff       	sbrs	r25, 0
    1bae:	49 c0       	rjmp	.+146    	; 0x1c42 <update_patch+0x1b6>
		{ 
				
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle read switch state
    1bb0:	90 e2       	ldi	r25, 0x20	; 32
    1bb2:	89 27       	eor	r24, r25
    1bb4:	80 93 7c 03 	sts	0x037C, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1bb8:	87 e0       	ldi	r24, 0x07	; 7
    1bba:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1bbc:	cd ed       	ldi	r28, 0xDD	; 221
    1bbe:	d0 e0       	ldi	r29, 0x00	; 0
    1bc0:	88 81       	ld	r24, Y
    1bc2:	80 62       	ori	r24, 0x20	; 32
    1bc4:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1bc6:	88 81       	ld	r24, Y
    1bc8:	8f 7d       	andi	r24, 0xDF	; 223
    1bca:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1bcc:	12 b8       	out	0x02, r1	; 2
		
		//will need to turn off Timer1 output compare match now, it is used by the master clock
		TIMSK1 &= (1<<OCIE1A);
    1bce:	0f e6       	ldi	r16, 0x6F	; 111
    1bd0:	10 e0       	ldi	r17, 0x00	; 0
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	80 81       	ld	r24, Z
    1bd6:	82 70       	andi	r24, 0x02	; 2
    1bd8:	80 83       	st	Z, r24
		//will need to get rid of CTC here for Timer1 too
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    1bda:	8f e0       	ldi	r24, 0x0F	; 15
    1bdc:	6f e0       	ldi	r22, 0x0F	; 15
    1bde:	7e e5       	ldi	r23, 0x5E	; 94
    1be0:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <set_vco_init_cv>
    1be4:	90 93 73 03 	sts	0x0373, r25
    1be8:	80 93 72 03 	sts	0x0372, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    1bec:	80 ef       	ldi	r24, 0xF0	; 240
    1bee:	6f e0       	ldi	r22, 0x0F	; 15
    1bf0:	7e e5       	ldi	r23, 0x5E	; 94
    1bf2:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <set_vco_init_cv>
    1bf6:	90 93 71 03 	sts	0x0371, r25
    1bfa:	80 93 70 03 	sts	0x0370, r24
		//vco1_init_cv = vco2_init_cv;
		tune_8ths(VCO1);
    1bfe:	8f e0       	ldi	r24, 0x0F	; 15
    1c00:	0e 94 6f 10 	call	0x20de	; 0x20de <tune_8ths>
		tune_8ths(VCO2);
    1c04:	80 ef       	ldi	r24, 0xF0	; 240
    1c06:	0e 94 6f 10 	call	0x20de	; 0x20de <tune_8ths>
		tune_filter();
    1c0a:	0e 94 11 12 	call	0x2422	; 0x2422 <tune_filter>
		save_tuning_tables();
    1c0e:	0e 94 df 13 	call	0x27be	; 0x27be <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c12:	8f e4       	ldi	r24, 0x4F	; 79
    1c14:	93 ec       	ldi	r25, 0xC3	; 195
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <update_patch+0x18a>
    1c1a:	00 c0       	rjmp	.+0      	; 0x1c1c <update_patch+0x190>
    1c1c:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
    1c1e:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1c20:	88 81       	ld	r24, Y
    1c22:	80 62       	ori	r24, 0x20	; 32
    1c24:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1c26:	88 81       	ld	r24, Y
    1c28:	8f 7d       	andi	r24, 0xDF	; 223
    1c2a:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1c2c:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    1c2e:	80 91 ff 02 	lds	r24, 0x02FF
    1c32:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1c34:	80 68       	ori	r24, 0x80	; 128
    1c36:	80 93 ff 02 	sts	0x02FF, r24
		
		TIMSK1 |= (1<<OCIE1A); //turn output compare back on for master clock
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	80 81       	ld	r24, Z
    1c3e:	82 60       	ori	r24, 0x02	; 2
    1c40:	80 83       	st	Z, r24
				
		}
		
		
	
}
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	08 95       	ret

00001c4c <update_patch_programmer>:
	
}

void update_patch_programmer(void) {
	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1c4c:	80 91 7d 03 	lds	r24, 0x037D
    1c50:	98 2f       	mov	r25, r24
    1c52:	92 95       	swap	r25
    1c54:	96 95       	lsr	r25
    1c56:	96 95       	lsr	r25
    1c58:	93 70       	andi	r25, 0x03	; 3
    1c5a:	90 ff       	sbrs	r25, 0
    1c5c:	17 c0       	rjmp	.+46     	; 0x1c8c <update_patch_programmer+0x40>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1c5e:	90 e4       	ldi	r25, 0x40	; 64
    1c60:	89 27       	eor	r24, r25
    1c62:	80 93 7d 03 	sts	0x037D, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1c66:	80 91 03 03 	lds	r24, 0x0303
    1c6a:	8f 5f       	subi	r24, 0xFF	; 255
    1c6c:	80 93 03 03 	sts	0x0303, r24
    1c70:	85 32       	cpi	r24, 0x25	; 37
    1c72:	21 f4       	brne	.+8      	; 0x1c7c <update_patch_programmer+0x30>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1c74:	84 e2       	ldi	r24, 0x24	; 36
    1c76:	80 93 03 03 	sts	0x0303, r24
    1c7a:	08 c0       	rjmp	.+16     	; 0x1c8c <update_patch_programmer+0x40>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1c7c:	90 91 07 03 	lds	r25, 0x0307
    1c80:	93 30       	cpi	r25, 0x03	; 3
    1c82:	21 f0       	breq	.+8      	; 0x1c8c <update_patch_programmer+0x40>
			
			load_patch(current_patch.number);
    1c84:	0e 94 4c 09 	call	0x1298	; 0x1298 <load_patch>
			update_patch();
    1c88:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1c8c:	80 91 7d 03 	lds	r24, 0x037D
    1c90:	98 2f       	mov	r25, r24
    1c92:	92 95       	swap	r25
    1c94:	96 95       	lsr	r25
    1c96:	97 70       	andi	r25, 0x07	; 7
    1c98:	90 ff       	sbrs	r25, 0
    1c9a:	15 c0       	rjmp	.+42     	; 0x1cc6 <update_patch_programmer+0x7a>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1c9c:	90 e2       	ldi	r25, 0x20	; 32
    1c9e:	89 27       	eor	r24, r25
    1ca0:	80 93 7d 03 	sts	0x037D, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1ca4:	80 91 03 03 	lds	r24, 0x0303
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	19 f0       	breq	.+6      	; 0x1cb2 <update_patch_programmer+0x66>
    1cac:	81 50       	subi	r24, 0x01	; 1
    1cae:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1cb2:	80 91 07 03 	lds	r24, 0x0307
    1cb6:	83 30       	cpi	r24, 0x03	; 3
    1cb8:	31 f0       	breq	.+12     	; 0x1cc6 <update_patch_programmer+0x7a>
			
			load_patch(current_patch.number); 
    1cba:	80 91 03 03 	lds	r24, 0x0303
    1cbe:	0e 94 4c 09 	call	0x1298	; 0x1298 <load_patch>
			update_patch();
    1cc2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1cc6:	80 91 7d 03 	lds	r24, 0x037D
    1cca:	98 2f       	mov	r25, r24
    1ccc:	92 95       	swap	r25
    1cce:	9f 70       	andi	r25, 0x0F	; 15
    1cd0:	90 ff       	sbrs	r25, 0
    1cd2:	15 c0       	rjmp	.+42     	; 0x1cfe <update_patch_programmer+0xb2>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1cd4:	90 e1       	ldi	r25, 0x10	; 16
    1cd6:	89 27       	eor	r24, r25
    1cd8:	80 93 7d 03 	sts	0x037D, r24
		if (current_patch.mode != WRITE) {
    1cdc:	90 91 07 03 	lds	r25, 0x0307
    1ce0:	93 30       	cpi	r25, 0x03	; 3
    1ce2:	49 f0       	breq	.+18     	; 0x1cf6 <update_patch_programmer+0xaa>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1ce4:	8f 77       	andi	r24, 0x7F	; 127
    1ce6:	80 93 7d 03 	sts	0x037D, r24
			current_patch.mode = WRITE;
    1cea:	83 e0       	ldi	r24, 0x03	; 3
    1cec:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1cf0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <lock_pots>
    1cf4:	04 c0       	rjmp	.+8      	; 0x1cfe <update_patch_programmer+0xb2>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1cf6:	80 91 03 03 	lds	r24, 0x0303
    1cfa:	0e 94 59 07 	call	0xeb2	; 0xeb2 <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1cfe:	80 91 7d 03 	lds	r24, 0x037D
    1d02:	88 23       	and	r24, r24
    1d04:	44 f4       	brge	.+16     	; 0x1d16 <update_patch_programmer+0xca>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1d06:	80 68       	ori	r24, 0x80	; 128
    1d08:	80 93 7d 03 	sts	0x037D, r24
		current_patch.mode = MANUAL;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    1d12:	0e 94 48 07 	call	0xe90	; 0xe90 <unlock_pots>
    1d16:	08 95       	ret

00001d18 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1d18:	88 ed       	ldi	r24, 0xD8	; 216
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1d24:	81 ee       	ldi	r24, 0xE1	; 225
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1d30:	82 ee       	ldi	r24, 0xE2	; 226
    1d32:	91 e0       	ldi	r25, 0x01	; 1
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	70 e0       	ldi	r23, 0x00	; 0
    1d38:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1d3c:	82 eb       	ldi	r24, 0xB2	; 178
    1d3e:	92 e0       	ldi	r25, 0x02	; 2
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1d48:	8a ed       	ldi	r24, 0xDA	; 218
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1d54:	8f ed       	ldi	r24, 0xDF	; 223
    1d56:	91 e0       	ldi	r25, 0x01	; 1
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	70 e0       	ldi	r23, 0x00	; 0
    1d5c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1d60:	80 ee       	ldi	r24, 0xE0	; 224
    1d62:	91 e0       	ldi	r25, 0x01	; 1
    1d64:	60 e0       	ldi	r22, 0x00	; 0
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1d6c:	81 ed       	ldi	r24, 0xD1	; 209
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1d78:	86 ed       	ldi	r24, 0xD6	; 214
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1d84:	82 ed       	ldi	r24, 0xD2	; 210
    1d86:	91 e0       	ldi	r25, 0x01	; 1
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1d90:	83 ed       	ldi	r24, 0xD3	; 211
    1d92:	91 e0       	ldi	r25, 0x01	; 1
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1d9c:	84 ed       	ldi	r24, 0xD4	; 212
    1d9e:	91 e0       	ldi	r25, 0x01	; 1
    1da0:	6f ef       	ldi	r22, 0xFF	; 255
    1da2:	7f e3       	ldi	r23, 0x3F	; 63
    1da4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1da8:	85 ed       	ldi	r24, 0xD5	; 213
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1db4:	89 ed       	ldi	r24, 0xD9	; 217
    1db6:	91 e0       	ldi	r25, 0x01	; 1
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1dc0:	8e ec       	ldi	r24, 0xCE	; 206
    1dc2:	91 e0       	ldi	r25, 0x01	; 1
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1dcc:	8c ec       	ldi	r24, 0xCC	; 204
    1dce:	91 e0       	ldi	r25, 0x01	; 1
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	70 e0       	ldi	r23, 0x00	; 0
    1dd4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1dd8:	8a ec       	ldi	r24, 0xCA	; 202
    1dda:	91 e0       	ldi	r25, 0x01	; 1
    1ddc:	6f ef       	ldi	r22, 0xFF	; 255
    1dde:	7f e3       	ldi	r23, 0x3F	; 63
    1de0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1de4:	88 ec       	ldi	r24, 0xC8	; 200
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1df0:	80 ed       	ldi	r24, 0xD0	; 208
    1df2:	91 e0       	ldi	r25, 0x01	; 1
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1dfc:	83 ee       	ldi	r24, 0xE3	; 227
    1dfe:	91 e0       	ldi	r25, 0x01	; 1
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	70 e0       	ldi	r23, 0x00	; 0
    1e04:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1e08:	84 ee       	ldi	r24, 0xE4	; 228
    1e0a:	91 e0       	ldi	r25, 0x01	; 1
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	70 e0       	ldi	r23, 0x00	; 0
    1e10:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
}	
    1e14:	08 95       	ret

00001e16 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1e16:	2f 92       	push	r2
    1e18:	3f 92       	push	r3
    1e1a:	4f 92       	push	r4
    1e1c:	5f 92       	push	r5
    1e1e:	6f 92       	push	r6
    1e20:	7f 92       	push	r7
    1e22:	8f 92       	push	r8
    1e24:	9f 92       	push	r9
    1e26:	af 92       	push	r10
    1e28:	bf 92       	push	r11
    1e2a:	cf 92       	push	r12
    1e2c:	df 92       	push	r13
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	2c 97       	sbiw	r28, 0x0c	; 12
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	08 2f       	mov	r16, r24
    1e4c:	78 87       	std	Y+8, r23	; 0x08
    1e4e:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1e50:	80 91 78 03 	lds	r24, 0x0378
    1e54:	83 60       	ori	r24, 0x03	; 3
    1e56:	80 93 78 03 	sts	0x0378, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1e5a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1e5e:	10 92 77 03 	sts	0x0377, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1e62:	0f 30       	cpi	r16, 0x0F	; 15
    1e64:	e1 f4       	brne	.+56     	; 0x1e9e <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1e66:	0f 2e       	mov	r0, r31
    1e68:	f6 ee       	ldi	r31, 0xE6	; 230
    1e6a:	4f 2e       	mov	r4, r31
    1e6c:	f1 e0       	ldi	r31, 0x01	; 1
    1e6e:	5f 2e       	mov	r5, r31
    1e70:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1e72:	0f 2e       	mov	r0, r31
    1e74:	fe ed       	ldi	r31, 0xDE	; 222
    1e76:	2f 2e       	mov	r2, r31
    1e78:	f1 e0       	ldi	r31, 0x01	; 1
    1e7a:	3f 2e       	mov	r3, r31
    1e7c:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1e7e:	23 ee       	ldi	r18, 0xE3	; 227
    1e80:	31 e0       	ldi	r19, 0x01	; 1
    1e82:	3a 83       	std	Y+2, r19	; 0x02
    1e84:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1e86:	0f 2e       	mov	r0, r31
    1e88:	fc ed       	ldi	r31, 0xDC	; 220
    1e8a:	8f 2e       	mov	r8, r31
    1e8c:	f1 e0       	ldi	r31, 0x01	; 1
    1e8e:	9f 2e       	mov	r9, r31
    1e90:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1e92:	82 e7       	ldi	r24, 0x72	; 114
    1e94:	96 e0       	ldi	r25, 0x06	; 6
    1e96:	9a 87       	std	Y+10, r25	; 0x0a
    1e98:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	1b c0       	rjmp	.+54     	; 0x1ed4 <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1e9e:	0f 2e       	mov	r0, r31
    1ea0:	f5 ee       	ldi	r31, 0xE5	; 229
    1ea2:	4f 2e       	mov	r4, r31
    1ea4:	f1 e0       	ldi	r31, 0x01	; 1
    1ea6:	5f 2e       	mov	r5, r31
    1ea8:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1eaa:	0f 2e       	mov	r0, r31
    1eac:	f7 ed       	ldi	r31, 0xD7	; 215
    1eae:	2f 2e       	mov	r2, r31
    1eb0:	f1 e0       	ldi	r31, 0x01	; 1
    1eb2:	3f 2e       	mov	r3, r31
    1eb4:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1eb6:	e4 ee       	ldi	r30, 0xE4	; 228
    1eb8:	f1 e0       	ldi	r31, 0x01	; 1
    1eba:	fa 83       	std	Y+2, r31	; 0x02
    1ebc:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1ebe:	0f 2e       	mov	r0, r31
    1ec0:	fd ed       	ldi	r31, 0xDD	; 221
    1ec2:	8f 2e       	mov	r8, r31
    1ec4:	f1 e0       	ldi	r31, 0x01	; 1
    1ec6:	9f 2e       	mov	r9, r31
    1ec8:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1eca:	20 e7       	ldi	r18, 0x70	; 112
    1ecc:	36 e0       	ldi	r19, 0x06	; 6
    1ece:	3a 87       	std	Y+10, r19	; 0x0a
    1ed0:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1ed2:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1ed4:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1ed6:	ed ed       	ldi	r30, 0xDD	; 221
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	80 64       	ori	r24, 0x40	; 64
    1ede:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8f 7b       	andi	r24, 0xBF	; 191
    1ee4:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1ee6:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1ee8:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1eea:	84 b5       	in	r24, 0x24	; 36
    1eec:	8f 60       	ori	r24, 0x0F	; 15
    1eee:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1ef4:	ee e6       	ldi	r30, 0x6E	; 110
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	90 81       	ld	r25, Z
    1efa:	92 60       	ori	r25, 0x02	; 2
    1efc:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1efe:	80 93 79 03 	sts	0x0379, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1f02:	8d e0       	ldi	r24, 0x0D	; 13
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1f0a:	80 2f       	mov	r24, r16
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	8c 01       	movw	r16, r24
    1f10:	0f 5f       	subi	r16, 0xFF	; 255
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1f14:	0f 2e       	mov	r0, r31
    1f16:	f8 ed       	ldi	r31, 0xD8	; 216
    1f18:	ef 2e       	mov	r14, r31
    1f1a:	f1 e0       	ldi	r31, 0x01	; 1
    1f1c:	ff 2e       	mov	r15, r31
    1f1e:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1f20:	0f 2e       	mov	r0, r31
    1f22:	f4 ed       	ldi	r31, 0xD4	; 212
    1f24:	cf 2e       	mov	r12, r31
    1f26:	f1 e0       	ldi	r31, 0x01	; 1
    1f28:	df 2e       	mov	r13, r31
    1f2a:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1f2c:	0f 2e       	mov	r0, r31
    1f2e:	fa ec       	ldi	r31, 0xCA	; 202
    1f30:	af 2e       	mov	r10, r31
    1f32:	f1 e0       	ldi	r31, 0x01	; 1
    1f34:	bf 2e       	mov	r11, r31
    1f36:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1f38:	0f 2e       	mov	r0, r31
    1f3a:	fb ec       	ldi	r31, 0xCB	; 203
    1f3c:	6f 2e       	mov	r6, r31
    1f3e:	f1 e0       	ldi	r31, 0x01	; 1
    1f40:	7f 2e       	mov	r7, r31
    1f42:	f0 2d       	mov	r31, r0
    1f44:	e0 e0       	ldi	r30, 0x00	; 0
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	fc 87       	std	Y+12, r31	; 0x0c
    1f4a:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1f4c:	21 e0       	ldi	r18, 0x01	; 1
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	0b 80       	ldd	r0, Y+3	; 0x03
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <set_vco_init_cv+0x142>
    1f54:	22 0f       	add	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	0a 94       	dec	r0
    1f5a:	e2 f7       	brpl	.-8      	; 0x1f54 <set_vco_init_cv+0x13e>
    1f5c:	3e 83       	std	Y+6, r19	; 0x06
    1f5e:	2d 83       	std	Y+5, r18	; 0x05
    1f60:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f62:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f64:	82 2b       	or	r24, r18
    1f66:	93 2b       	or	r25, r19
    1f68:	9c 87       	std	Y+12, r25	; 0x0c
    1f6a:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1f6c:	c4 01       	movw	r24, r8
    1f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f72:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
		
		count_finished = FALSE;
    1f76:	10 92 77 03 	sts	0x0377, r1
		period_counter = 0;
    1f7a:	10 92 7a 03 	sts	0x037A, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1f7e:	8f e0       	ldi	r24, 0x0F	; 15
    1f80:	e8 e1       	ldi	r30, 0x18	; 24
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	a8 95       	wdr
    1f8a:	e0 93 60 00 	sts	0x0060, r30
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1f94:	80 91 77 03 	lds	r24, 0x0377
    1f98:	88 23       	and	r24, r24
    1f9a:	89 f5       	brne	.+98     	; 0x1ffe <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1f9c:	c8 01       	movw	r24, r16
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1fa4:	c4 01       	movw	r24, r8
    1fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1faa:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1fae:	c1 01       	movw	r24, r2
    1fb0:	6f ef       	ldi	r22, 0xFF	; 255
    1fb2:	7f e3       	ldi	r23, 0x3F	; 63
    1fb4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1fb8:	c7 01       	movw	r24, r14
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1fc2:	c6 01       	movw	r24, r12
    1fc4:	6f ef       	ldi	r22, 0xFF	; 255
    1fc6:	7f e3       	ldi	r23, 0x3F	; 63
    1fc8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1fcc:	c5 01       	movw	r24, r10
    1fce:	6f ef       	ldi	r22, 0xFF	; 255
    1fd0:	7f e3       	ldi	r23, 0x3F	; 63
    1fd2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1fd6:	c3 01       	movw	r24, r6
    1fd8:	6f ef       	ldi	r22, 0xFF	; 255
    1fda:	7f e3       	ldi	r23, 0x3F	; 63
    1fdc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	6f ef       	ldi	r22, 0xFF	; 255
    1fe6:	7f e3       	ldi	r23, 0x3F	; 63
    1fe8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1fec:	c2 01       	movw	r24, r4
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	70 e0       	ldi	r23, 0x00	; 0
    1ff2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1ff6:	80 91 77 03 	lds	r24, 0x0377
    1ffa:	88 23       	and	r24, r24
    1ffc:	79 f2       	breq	.-98     	; 0x1f9c <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1ffe:	88 e1       	ldi	r24, 0x18	; 24
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	80 93 60 00 	sts	0x0060, r24
    2008:	10 92 60 00 	sts	0x0060, r1
    200c:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    200e:	80 91 75 03 	lds	r24, 0x0375
    2012:	90 91 76 03 	lds	r25, 0x0376
    2016:	ef 81       	ldd	r30, Y+7	; 0x07
    2018:	f8 85       	ldd	r31, Y+8	; 0x08
    201a:	e8 17       	cp	r30, r24
    201c:	f9 07       	cpc	r31, r25
    201e:	20 f0       	brcs	.+8      	; 0x2028 <set_vco_init_cv+0x212>
    2020:	80 91 af 02 	lds	r24, 0x02AF
    2024:	88 23       	and	r24, r24
    2026:	51 f4       	brne	.+20     	; 0x203c <set_vco_init_cv+0x226>
    2028:	8d 81       	ldd	r24, Y+5	; 0x05
    202a:	9e 81       	ldd	r25, Y+6	; 0x06
    202c:	80 95       	com	r24
    202e:	90 95       	com	r25
    2030:	2b 85       	ldd	r18, Y+11	; 0x0b
    2032:	3c 85       	ldd	r19, Y+12	; 0x0c
    2034:	28 23       	and	r18, r24
    2036:	39 23       	and	r19, r25
    2038:	3c 87       	std	Y+12, r19	; 0x0c
    203a:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8b 83       	std	Y+3, r24	; 0x03
    204c:	ef ef       	ldi	r30, 0xFF	; 255
    204e:	8f 3f       	cpi	r24, 0xFF	; 255
    2050:	9e 07       	cpc	r25, r30
    2052:	09 f0       	breq	.+2      	; 0x2056 <set_vco_init_cv+0x240>
    2054:	7b cf       	rjmp	.-266    	; 0x1f4c <set_vco_init_cv+0x136>
    2056:	2b 85       	ldd	r18, Y+11	; 0x0b
    2058:	3c 85       	ldd	r19, Y+12	; 0x0c
    205a:	3e 83       	std	Y+6, r19	; 0x06
    205c:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    205e:	88 ec       	ldi	r24, 0xC8	; 200
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    206a:	89 ec       	ldi	r24, 0xC9	; 201
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    2076:	84 ed       	ldi	r24, 0xD4	; 212
    2078:	91 e0       	ldi	r25, 0x01	; 1
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    2082:	88 ed       	ldi	r24, 0xD8	; 216
    2084:	91 e0       	ldi	r25, 0x01	; 1
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    208e:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    2090:	ee e6       	ldi	r30, 0x6E	; 110
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	8d 7f       	andi	r24, 0xFD	; 253
    2098:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    209a:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	6d 81       	ldd	r22, Y+5	; 0x05
    20a2:	7e 81       	ldd	r23, Y+6	; 0x06
    20a4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	2c 96       	adiw	r28, 0x0c	; 12
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	bf 90       	pop	r11
    20ca:	af 90       	pop	r10
    20cc:	9f 90       	pop	r9
    20ce:	8f 90       	pop	r8
    20d0:	7f 90       	pop	r7
    20d2:	6f 90       	pop	r6
    20d4:	5f 90       	pop	r5
    20d6:	4f 90       	pop	r4
    20d8:	3f 90       	pop	r3
    20da:	2f 90       	pop	r2
    20dc:	08 95       	ret

000020de <tune_8ths>:



void tune_8ths(uint8_t vco) {
    20de:	2f 92       	push	r2
    20e0:	3f 92       	push	r3
    20e2:	4f 92       	push	r4
    20e4:	5f 92       	push	r5
    20e6:	6f 92       	push	r6
    20e8:	7f 92       	push	r7
    20ea:	8f 92       	push	r8
    20ec:	9f 92       	push	r9
    20ee:	af 92       	push	r10
    20f0:	bf 92       	push	r11
    20f2:	cf 92       	push	r12
    20f4:	df 92       	push	r13
    20f6:	ef 92       	push	r14
    20f8:	ff 92       	push	r15
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	c0 54       	subi	r28, 0x40	; 64
    2108:	d0 40       	sbci	r29, 0x00	; 0
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    2116:	de 01       	movw	r26, r28
    2118:	11 96       	adiw	r26, 0x01	; 1
    211a:	e0 e3       	ldi	r30, 0x30	; 48
    211c:	f2 e0       	ldi	r31, 0x02	; 2
    211e:	80 e3       	ldi	r24, 0x30	; 48
    2120:	01 90       	ld	r0, Z+
    2122:	0d 92       	st	X+, r0
    2124:	81 50       	subi	r24, 0x01	; 1
    2126:	e1 f7       	brne	.-8      	; 0x2120 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    2128:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    212c:	0f 30       	cpi	r16, 0x0F	; 15
    212e:	11 f5       	brne	.+68     	; 0x2174 <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    2130:	40 90 72 03 	lds	r4, 0x0372
    2134:	50 90 73 03 	lds	r5, 0x0373
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2138:	0f 2e       	mov	r0, r31
    213a:	f6 ee       	ldi	r31, 0xE6	; 230
    213c:	8f 2e       	mov	r8, r31
    213e:	f1 e0       	ldi	r31, 0x01	; 1
    2140:	9f 2e       	mov	r9, r31
    2142:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    2144:	0f 2e       	mov	r0, r31
    2146:	fe ed       	ldi	r31, 0xDE	; 222
    2148:	2f 2e       	mov	r2, r31
    214a:	f1 e0       	ldi	r31, 0x01	; 1
    214c:	3f 2e       	mov	r3, r31
    214e:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    2150:	23 ee       	ldi	r18, 0xE3	; 227
    2152:	31 e0       	ldi	r19, 0x01	; 1
    2154:	3a ab       	sts	0x5a, r19
    2156:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2158:	0f 2e       	mov	r0, r31
    215a:	fc ed       	ldi	r31, 0xDC	; 220
    215c:	6f 2e       	mov	r6, r31
    215e:	f1 e0       	ldi	r31, 0x01	; 1
    2160:	7f 2e       	mov	r7, r31
    2162:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    2164:	0e e4       	ldi	r16, 0x4E	; 78
    2166:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2168:	cc 24       	eor	r12, r12
    216a:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    216c:	ee 24       	eor	r14, r14
    216e:	68 94       	set
    2170:	e1 f8       	bld	r14, 1
    2172:	22 c0       	rjmp	.+68     	; 0x21b8 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    2174:	40 90 70 03 	lds	r4, 0x0370
    2178:	50 90 71 03 	lds	r5, 0x0371
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    217c:	0f 2e       	mov	r0, r31
    217e:	f5 ee       	ldi	r31, 0xE5	; 229
    2180:	8f 2e       	mov	r8, r31
    2182:	f1 e0       	ldi	r31, 0x01	; 1
    2184:	9f 2e       	mov	r9, r31
    2186:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2188:	0f 2e       	mov	r0, r31
    218a:	f7 ed       	ldi	r31, 0xD7	; 215
    218c:	2f 2e       	mov	r2, r31
    218e:	f1 e0       	ldi	r31, 0x01	; 1
    2190:	3f 2e       	mov	r3, r31
    2192:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    2194:	44 ee       	ldi	r20, 0xE4	; 228
    2196:	51 e0       	ldi	r21, 0x01	; 1
    2198:	5a ab       	sts	0x5a, r21
    219a:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    219c:	0f 2e       	mov	r0, r31
    219e:	fd ed       	ldi	r31, 0xDD	; 221
    21a0:	6f 2e       	mov	r6, r31
    21a2:	f1 e0       	ldi	r31, 0x01	; 1
    21a4:	7f 2e       	mov	r7, r31
    21a6:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    21a8:	0c e2       	ldi	r16, 0x2C	; 44
    21aa:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    21ac:	cc 24       	eor	r12, r12
    21ae:	68 94       	set
    21b0:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    21b2:	ee 24       	eor	r14, r14
    21b4:	68 94       	set
    21b6:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    21b8:	c3 01       	movw	r24, r6
    21ba:	b2 01       	movw	r22, r4
    21bc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    21c0:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    21c2:	ed ed       	ldi	r30, 0xDD	; 221
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	80 64       	ori	r24, 0x40	; 64
    21ca:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    21cc:	80 81       	ld	r24, Z
    21ce:	8f 7b       	andi	r24, 0xBF	; 191
    21d0:	80 83       	st	Z, r24
		DATA_BUS = 0;
    21d2:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    21d4:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	80 93 79 03 	sts	0x0379, r24
		
		compare_match_counter = 0;	
    21dc:	10 92 74 03 	sts	0x0374, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    21e0:	8c 2d       	mov	r24, r12
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	24 e6       	ldi	r18, 0x64	; 100
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	82 9f       	mul	r24, r18
    21ea:	d0 01       	movw	r26, r0
    21ec:	83 9f       	mul	r24, r19
    21ee:	b0 0d       	add	r27, r0
    21f0:	92 9f       	mul	r25, r18
    21f2:	b0 0d       	add	r27, r0
    21f4:	11 24       	eor	r1, r1
    21f6:	bc ab       	sts	0x5c, r27
    21f8:	ab ab       	sts	0x5b, r26
    21fa:	fe 01       	movw	r30, r28
    21fc:	31 96       	adiw	r30, 0x01	; 1
    21fe:	fc af       	sts	0x7c, r31
    2200:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    2202:	98 01       	movw	r18, r16
    2204:	2e 5f       	subi	r18, 0xFE	; 254
    2206:	3f 4f       	sbci	r19, 0xFF	; 255
    2208:	21 96       	adiw	r28, 0x01	; 1
    220a:	3f af       	sts	0x7f, r19
    220c:	2e af       	sts	0x7e, r18
    220e:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2210:	1e ae       	sts	0xbe, r17
    2212:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2214:	0f 2e       	mov	r0, r31
    2216:	f8 ed       	ldi	r31, 0xD8	; 216
    2218:	ef 2e       	mov	r14, r31
    221a:	f1 e0       	ldi	r31, 0x01	; 1
    221c:	ff 2e       	mov	r15, r31
    221e:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    2220:	0f 2e       	mov	r0, r31
    2222:	f4 ed       	ldi	r31, 0xD4	; 212
    2224:	cf 2e       	mov	r12, r31
    2226:	f1 e0       	ldi	r31, 0x01	; 1
    2228:	df 2e       	mov	r13, r31
    222a:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    222c:	0f 2e       	mov	r0, r31
    222e:	fa ec       	ldi	r31, 0xCA	; 202
    2230:	af 2e       	mov	r10, r31
    2232:	f1 e0       	ldi	r31, 0x01	; 1
    2234:	bf 2e       	mov	r11, r31
    2236:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    2238:	eb ad       	sts	0x6b, r30
    223a:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    223c:	80 81       	ld	r24, Z
    223e:	80 93 79 03 	sts	0x0379, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2242:	84 b5       	in	r24, 0x24	; 36
    2244:	8f 60       	ori	r24, 0x0F	; 15
    2246:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    224c:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    224e:	4d ad       	sts	0x6d, r20
    2250:	5e ad       	sts	0x6e, r21
    2252:	43 30       	cpi	r20, 0x03	; 3
    2254:	51 05       	cpc	r21, r1
    2256:	24 f4       	brge	.+8      	; 0x2260 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2258:	83 e0       	ldi	r24, 0x03	; 3
    225a:	80 93 78 03 	sts	0x0378, r24
    225e:	03 c0       	rjmp	.+6      	; 0x2266 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    2260:	82 e0       	ldi	r24, 0x02	; 2
    2262:	80 93 78 03 	sts	0x0378, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    2266:	81 81       	ldd	r24, Z+1	; 0x01
    2268:	92 81       	ldd	r25, Z+2	; 0x02
    226a:	9a af       	sts	0x7a, r25
    226c:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    226e:	ad e0       	ldi	r26, 0x0D	; 13
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	be ab       	sts	0x5e, r27
    2274:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    2276:	00 e0       	ldi	r16, 0x00	; 0
    2278:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    227a:	e1 e0       	ldi	r30, 0x01	; 1
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	0d a8       	sts	0x8d, r16
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <tune_8ths+0x1a8>
    2282:	ee 0f       	add	r30, r30
    2284:	ff 1f       	adc	r31, r31
    2286:	0a 94       	dec	r0
    2288:	e2 f7       	brpl	.-8      	; 0x2282 <tune_8ths+0x1a4>
    228a:	f8 af       	sts	0x78, r31
    228c:	ef ab       	sts	0x5f, r30
    228e:	0e 2b       	or	r16, r30
    2290:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    2292:	ae e6       	ldi	r26, 0x6E	; 110
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	8c 91       	ld	r24, X
    2298:	8d 7f       	andi	r24, 0xFD	; 253
    229a:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    229c:	c4 01       	movw	r24, r8
    229e:	b8 01       	movw	r22, r16
    22a0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
    22a4:	e3 ef       	ldi	r30, 0xF3	; 243
    22a6:	f1 e0       	ldi	r31, 0x01	; 1
    22a8:	31 97       	sbiw	r30, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <tune_8ths+0x1ca>
    22ac:	00 c0       	rjmp	.+0      	; 0x22ae <tune_8ths+0x1d0>
    22ae:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    22b0:	ae e6       	ldi	r26, 0x6E	; 110
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	8c 91       	ld	r24, X
    22b6:	82 60       	ori	r24, 0x02	; 2
    22b8:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    22ba:	10 92 77 03 	sts	0x0377, r1
				period_counter = 0;
    22be:	10 92 7a 03 	sts	0x037A, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    22c2:	e8 e1       	ldi	r30, 0x18	; 24
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	2f e0       	ldi	r18, 0x0F	; 15
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	a8 95       	wdr
    22ce:	e0 93 60 00 	sts	0x0060, r30
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    22d8:	80 91 77 03 	lds	r24, 0x0377
    22dc:	88 23       	and	r24, r24
    22de:	81 f5       	brne	.+96     	; 0x2340 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    22e0:	80 91 79 03 	lds	r24, 0x0379
    22e4:	4b a9       	sts	0x4b, r20
    22e6:	5c a9       	sts	0x4c, r21
    22e8:	48 0f       	add	r20, r24
    22ea:	51 1d       	adc	r21, r1
    22ec:	ca 01       	movw	r24, r20
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    22f4:	c3 01       	movw	r24, r6
    22f6:	b2 01       	movw	r22, r4
    22f8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    22fc:	c4 01       	movw	r24, r8
    22fe:	b8 01       	movw	r22, r16
    2300:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2304:	c7 01       	movw	r24, r14
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	70 e0       	ldi	r23, 0x00	; 0
    230a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    230e:	c6 01       	movw	r24, r12
    2310:	6f ef       	ldi	r22, 0xFF	; 255
    2312:	7f e3       	ldi	r23, 0x3F	; 63
    2314:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2318:	c5 01       	movw	r24, r10
    231a:	6f ef       	ldi	r22, 0xFF	; 255
    231c:	7f e3       	ldi	r23, 0x3F	; 63
    231e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    2322:	c1 01       	movw	r24, r2
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	70 e2       	ldi	r23, 0x20	; 32
    2328:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    232c:	89 a9       	sts	0x49, r24
    232e:	9a a9       	sts	0x4a, r25
    2330:	6f ef       	ldi	r22, 0xFF	; 255
    2332:	7f e3       	ldi	r23, 0x3F	; 63
    2334:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2338:	80 91 77 03 	lds	r24, 0x0377
    233c:	88 23       	and	r24, r24
    233e:	81 f2       	breq	.-96     	; 0x22e0 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    2340:	58 e1       	ldi	r21, 0x18	; 24
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	50 93 60 00 	sts	0x0060, r21
    234a:	10 92 60 00 	sts	0x0060, r1
    234e:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    2350:	80 91 75 03 	lds	r24, 0x0375
    2354:	90 91 76 03 	lds	r25, 0x0376
    2358:	a9 ad       	sts	0x69, r26
    235a:	ba ad       	sts	0x6a, r27
    235c:	a8 17       	cp	r26, r24
    235e:	b9 07       	cpc	r27, r25
    2360:	50 f0       	brcs	.+20     	; 0x2376 <tune_8ths+0x298>
    2362:	80 91 af 02 	lds	r24, 0x02AF
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	31 f4       	brne	.+12     	; 0x2376 <tune_8ths+0x298>
    236a:	8f a9       	sts	0x4f, r24
    236c:	98 ad       	sts	0x68, r25
    236e:	80 95       	com	r24
    2370:	90 95       	com	r25
    2372:	08 23       	and	r16, r24
    2374:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2376:	80 91 75 03 	lds	r24, 0x0375
    237a:	90 91 76 03 	lds	r25, 0x0376
    237e:	e9 ad       	sts	0x69, r30
    2380:	fa ad       	sts	0x6a, r31
    2382:	8e 17       	cp	r24, r30
    2384:	9f 07       	cpc	r25, r31
    2386:	21 f4       	brne	.+8      	; 0x2390 <tune_8ths+0x2b2>
    2388:	80 91 af 02 	lds	r24, 0x02AF
    238c:	81 30       	cpi	r24, 0x01	; 1
    238e:	71 f0       	breq	.+28     	; 0x23ac <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    2390:	f1 e0       	ldi	r31, 0x01	; 1
    2392:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2396:	2d a9       	sts	0x4d, r18
    2398:	3e a9       	sts	0x4e, r19
    239a:	21 50       	subi	r18, 0x01	; 1
    239c:	30 40       	sbci	r19, 0x00	; 0
    239e:	3e ab       	sts	0x5e, r19
    23a0:	2d ab       	sts	0x5d, r18
    23a2:	4f ef       	ldi	r20, 0xFF	; 255
    23a4:	2f 3f       	cpi	r18, 0xFF	; 255
    23a6:	34 07       	cpc	r19, r20
    23a8:	09 f0       	breq	.+2      	; 0x23ac <tune_8ths+0x2ce>
    23aa:	67 cf       	rjmp	.-306    	; 0x227a <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    23ac:	21 96       	adiw	r28, 0x01	; 1
    23ae:	ae ad       	sts	0x6e, r26
    23b0:	bf ad       	sts	0x6f, r27
    23b2:	21 97       	sbiw	r28, 0x01	; 1
    23b4:	0d 93       	st	X+, r16
    23b6:	1d 93       	st	X+, r17
    23b8:	21 96       	adiw	r28, 0x01	; 1
    23ba:	bf af       	sts	0x7f, r27
    23bc:	ae af       	sts	0x7e, r26
    23be:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    23c0:	ee e6       	ldi	r30, 0x6E	; 110
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	8d 7f       	andi	r24, 0xFD	; 253
    23c8:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    23ca:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    23cc:	2d ad       	sts	0x6d, r18
    23ce:	3e ad       	sts	0x6e, r19
    23d0:	2f 5f       	subi	r18, 0xFF	; 255
    23d2:	3f 4f       	sbci	r19, 0xFF	; 255
    23d4:	3e af       	sts	0x7e, r19
    23d6:	2d af       	sts	0x7d, r18
    23d8:	4b ad       	sts	0x6b, r20
    23da:	5c ad       	sts	0x6c, r21
    23dc:	4d 5f       	subi	r20, 0xFD	; 253
    23de:	5f 4f       	sbci	r21, 0xFF	; 255
    23e0:	5c af       	sts	0x7c, r21
    23e2:	4b af       	sts	0x7b, r20
    23e4:	20 31       	cpi	r18, 0x10	; 16
    23e6:	31 05       	cpc	r19, r1
    23e8:	09 f0       	breq	.+2      	; 0x23ec <tune_8ths+0x30e>
    23ea:	26 cf       	rjmp	.-436    	; 0x2238 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    23ec:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    23ee:	c0 5c       	subi	r28, 0xC0	; 192
    23f0:	df 4f       	sbci	r29, 0xFF	; 255
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	df 90       	pop	r13
    240a:	cf 90       	pop	r12
    240c:	bf 90       	pop	r11
    240e:	af 90       	pop	r10
    2410:	9f 90       	pop	r9
    2412:	8f 90       	pop	r8
    2414:	7f 90       	pop	r7
    2416:	6f 90       	pop	r6
    2418:	5f 90       	pop	r5
    241a:	4f 90       	pop	r4
    241c:	3f 90       	pop	r3
    241e:	2f 90       	pop	r2
    2420:	08 95       	ret

00002422 <tune_filter>:
	
void tune_filter(void) {
    2422:	2f 92       	push	r2
    2424:	3f 92       	push	r3
    2426:	4f 92       	push	r4
    2428:	5f 92       	push	r5
    242a:	6f 92       	push	r6
    242c:	7f 92       	push	r7
    242e:	8f 92       	push	r8
    2430:	9f 92       	push	r9
    2432:	af 92       	push	r10
    2434:	bf 92       	push	r11
    2436:	cf 92       	push	r12
    2438:	df 92       	push	r13
    243a:	ef 92       	push	r14
    243c:	ff 92       	push	r15
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	e9 97       	sbiw	r28, 0x39	; 57
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    2456:	de 01       	movw	r26, r28
    2458:	11 96       	adiw	r26, 0x01	; 1
    245a:	e0 e6       	ldi	r30, 0x60	; 96
    245c:	f2 e0       	ldi	r31, 0x02	; 2
    245e:	8d e2       	ldi	r24, 0x2D	; 45
    2460:	01 90       	ld	r0, Z+
    2462:	0d 92       	st	X+, r0
    2464:	81 50       	subi	r24, 0x01	; 1
    2466:	e1 f7       	brne	.-8      	; 0x2460 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2468:	88 ed       	ldi	r24, 0xD8	; 216
    246a:	91 e0       	ldi	r25, 0x01	; 1
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2474:	81 ee       	ldi	r24, 0xE1	; 225
    2476:	91 e0       	ldi	r25, 0x01	; 1
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2480:	82 ee       	ldi	r24, 0xE2	; 226
    2482:	91 e0       	ldi	r25, 0x01	; 1
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	70 e0       	ldi	r23, 0x00	; 0
    2488:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    248c:	82 eb       	ldi	r24, 0xB2	; 178
    248e:	92 e0       	ldi	r25, 0x02	; 2
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	70 e0       	ldi	r23, 0x00	; 0
    2494:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2498:	8a ed       	ldi	r24, 0xDA	; 218
    249a:	91 e0       	ldi	r25, 0x01	; 1
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	70 e0       	ldi	r23, 0x00	; 0
    24a0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    24a4:	8f ed       	ldi	r24, 0xDF	; 223
    24a6:	91 e0       	ldi	r25, 0x01	; 1
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	70 e0       	ldi	r23, 0x00	; 0
    24ac:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    24b0:	80 ee       	ldi	r24, 0xE0	; 224
    24b2:	91 e0       	ldi	r25, 0x01	; 1
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    24bc:	81 ed       	ldi	r24, 0xD1	; 209
    24be:	91 e0       	ldi	r25, 0x01	; 1
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    24c8:	86 ed       	ldi	r24, 0xD6	; 214
    24ca:	91 e0       	ldi	r25, 0x01	; 1
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	70 e0       	ldi	r23, 0x00	; 0
    24d0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    24d4:	82 ed       	ldi	r24, 0xD2	; 210
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    24e0:	83 ed       	ldi	r24, 0xD3	; 211
    24e2:	91 e0       	ldi	r25, 0x01	; 1
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    24ec:	84 ed       	ldi	r24, 0xD4	; 212
    24ee:	91 e0       	ldi	r25, 0x01	; 1
    24f0:	6f ef       	ldi	r22, 0xFF	; 255
    24f2:	7f e3       	ldi	r23, 0x3F	; 63
    24f4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    24f8:	85 ed       	ldi	r24, 0xD5	; 213
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	6f ef       	ldi	r22, 0xFF	; 255
    24fe:	7f e3       	ldi	r23, 0x3F	; 63
    2500:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    2504:	89 ed       	ldi	r24, 0xD9	; 217
    2506:	91 e0       	ldi	r25, 0x01	; 1
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2510:	8e ec       	ldi	r24, 0xCE	; 206
    2512:	91 e0       	ldi	r25, 0x01	; 1
    2514:	60 e0       	ldi	r22, 0x00	; 0
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    251c:	8c ec       	ldi	r24, 0xCC	; 204
    251e:	91 e0       	ldi	r25, 0x01	; 1
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	70 e0       	ldi	r23, 0x00	; 0
    2524:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2528:	8a ec       	ldi	r24, 0xCA	; 202
    252a:	91 e0       	ldi	r25, 0x01	; 1
    252c:	6f ef       	ldi	r22, 0xFF	; 255
    252e:	7f e3       	ldi	r23, 0x3F	; 63
    2530:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    2534:	88 ec       	ldi	r24, 0xC8	; 200
    2536:	91 e0       	ldi	r25, 0x01	; 1
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    2540:	80 ed       	ldi	r24, 0xD0	; 208
    2542:	91 e0       	ldi	r25, 0x01	; 1
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	70 e0       	ldi	r23, 0x00	; 0
    2548:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    254c:	83 ee       	ldi	r24, 0xE3	; 227
    254e:	91 e0       	ldi	r25, 0x01	; 1
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	70 e0       	ldi	r23, 0x00	; 0
    2554:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2558:	84 ee       	ldi	r24, 0xE4	; 228
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    2564:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2566:	ed ed       	ldi	r30, 0xDD	; 221
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	80 64       	ori	r24, 0x40	; 64
    256e:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2570:	80 81       	ld	r24, Z
    2572:	8f 7b       	andi	r24, 0xBF	; 191
    2574:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	80 93 79 03 	sts	0x0379, r24
	PORTF |= (1<<GATE); //turn gate on
    257c:	89 9a       	sbi	0x11, 1	; 17
    257e:	9e 01       	movw	r18, r28
    2580:	2f 5f       	subi	r18, 0xFF	; 255
    2582:	3f 4f       	sbci	r19, 0xFF	; 255
    2584:	3d ab       	sts	0x5d, r19
    2586:	2c ab       	sts	0x5c, r18
    2588:	8e e0       	ldi	r24, 0x0E	; 14
    258a:	93 e0       	ldi	r25, 0x03	; 3
    258c:	99 af       	sts	0x79, r25
    258e:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2590:	1f aa       	sts	0x9f, r17
    2592:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    2594:	0f 2e       	mov	r0, r31
    2596:	f4 ed       	ldi	r31, 0xD4	; 212
    2598:	af 2e       	mov	r10, r31
    259a:	f1 e0       	ldi	r31, 0x01	; 1
    259c:	bf 2e       	mov	r11, r31
    259e:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    25a0:	0f 2e       	mov	r0, r31
    25a2:	f8 ed       	ldi	r31, 0xD8	; 216
    25a4:	6f 2e       	mov	r6, r31
    25a6:	f1 e0       	ldi	r31, 0x01	; 1
    25a8:	7f 2e       	mov	r7, r31
    25aa:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    25ac:	0f 2e       	mov	r0, r31
    25ae:	f5 ed       	ldi	r31, 0xD5	; 213
    25b0:	4f 2e       	mov	r4, r31
    25b2:	f1 e0       	ldi	r31, 0x01	; 1
    25b4:	5f 2e       	mov	r5, r31
    25b6:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    25b8:	0f 2e       	mov	r0, r31
    25ba:	fa ec       	ldi	r31, 0xCA	; 202
    25bc:	2f 2e       	mov	r2, r31
    25be:	f1 e0       	ldi	r31, 0x01	; 1
    25c0:	3f 2e       	mov	r3, r31
    25c2:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    25c4:	ac a9       	sts	0x4c, r26
    25c6:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    25c8:	8c 91       	ld	r24, X
    25ca:	80 93 79 03 	sts	0x0379, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    25ce:	84 b5       	in	r24, 0x24	; 36
    25d0:	8f 60       	ori	r24, 0x0F	; 15
    25d2:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    25d8:	ee e6       	ldi	r30, 0x6E	; 110
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	82 60       	ori	r24, 0x02	; 2
    25e0:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    25e2:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    25e4:	ee a9       	sts	0x4e, r30
    25e6:	ff a9       	sts	0x4f, r31
    25e8:	e2 30       	cpi	r30, 0x02	; 2
    25ea:	f1 05       	cpc	r31, r1
    25ec:	24 f4       	brge	.+8      	; 0x25f6 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    25ee:	83 e0       	ldi	r24, 0x03	; 3
    25f0:	80 93 78 03 	sts	0x0378, r24
    25f4:	03 c0       	rjmp	.+6      	; 0x25fc <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	80 93 78 03 	sts	0x0378, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    25fc:	11 96       	adiw	r26, 0x01	; 1
    25fe:	2d 91       	ld	r18, X+
    2600:	3c 91       	ld	r19, X
    2602:	12 97       	sbiw	r26, 0x02	; 2
    2604:	3b ab       	sts	0x5b, r19
    2606:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2608:	8d e0       	ldi	r24, 0x0D	; 13
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	9f a7       	lds	r25, 0x7f
    260e:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2610:	ee 24       	eor	r14, r14
    2612:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2614:	0f 2e       	mov	r0, r31
    2616:	f1 ed       	ldi	r31, 0xD1	; 209
    2618:	cf 2e       	mov	r12, r31
    261a:	f1 e0       	ldi	r31, 0x01	; 1
    261c:	df 2e       	mov	r13, r31
    261e:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2620:	0f 2e       	mov	r0, r31
    2622:	f6 ed       	ldi	r31, 0xD6	; 214
    2624:	8f 2e       	mov	r8, r31
    2626:	f1 e0       	ldi	r31, 0x01	; 1
    2628:	9f 2e       	mov	r9, r31
    262a:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	fc 01       	movw	r30, r24
    2632:	0e a4       	lds	r16, 0xae
    2634:	02 c0       	rjmp	.+4      	; 0x263a <tune_filter+0x218>
    2636:	ee 0f       	add	r30, r30
    2638:	ff 1f       	adc	r31, r31
    263a:	0a 94       	dec	r0
    263c:	e2 f7       	brpl	.-8      	; 0x2636 <tune_filter+0x214>
    263e:	f9 ab       	sts	0x59, r31
    2640:	e8 ab       	sts	0x58, r30
    2642:	ee 2a       	or	r14, r30
    2644:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2646:	c5 01       	movw	r24, r10
    2648:	b7 01       	movw	r22, r14
    264a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			count_finished = FALSE;
    264e:	10 92 77 03 	sts	0x0377, r1
			period_counter = 0;
    2652:	10 92 7a 03 	sts	0x037A, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2656:	8f e0       	ldi	r24, 0x0F	; 15
    2658:	28 e1       	ldi	r18, 0x18	; 24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	a8 95       	wdr
    2662:	20 93 60 00 	sts	0x0060, r18
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    266c:	80 91 77 03 	lds	r24, 0x0377
    2670:	88 23       	and	r24, r24
    2672:	b1 f5       	brne	.+108    	; 0x26e0 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    2674:	02 ed       	ldi	r16, 0xD2	; 210
    2676:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2678:	80 91 79 03 	lds	r24, 0x0379
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	84 5d       	subi	r24, 0xD4	; 212
    2680:	9e 4f       	sbci	r25, 0xFE	; 254
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2688:	c5 01       	movw	r24, r10
    268a:	b7 01       	movw	r22, r14
    268c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2690:	c3 01       	movw	r24, r6
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    269a:	c2 01       	movw	r24, r4
    269c:	6f ef       	ldi	r22, 0xFF	; 255
    269e:	7f e3       	ldi	r23, 0x3F	; 63
    26a0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    26a4:	c1 01       	movw	r24, r2
    26a6:	6f ef       	ldi	r22, 0xFF	; 255
    26a8:	7f e3       	ldi	r23, 0x3F	; 63
    26aa:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    26ae:	8e ec       	ldi	r24, 0xCE	; 206
    26b0:	91 e0       	ldi	r25, 0x01	; 1
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    26ba:	c6 01       	movw	r24, r12
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	70 e0       	ldi	r23, 0x00	; 0
    26c0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    26c4:	c4 01       	movw	r24, r8
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	70 e0       	ldi	r23, 0x00	; 0
    26ca:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    26ce:	c8 01       	movw	r24, r16
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	70 e0       	ldi	r23, 0x00	; 0
    26d4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    26d8:	80 91 77 03 	lds	r24, 0x0377
    26dc:	88 23       	and	r24, r24
    26de:	61 f2       	breq	.-104    	; 0x2678 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    26e0:	88 e1       	ldi	r24, 0x18	; 24
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	80 93 60 00 	sts	0x0060, r24
    26ea:	10 92 60 00 	sts	0x0060, r1
    26ee:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    26f0:	80 91 75 03 	lds	r24, 0x0375
    26f4:	90 91 76 03 	lds	r25, 0x0376
    26f8:	2a a9       	sts	0x4a, r18
    26fa:	3b a9       	sts	0x4b, r19
    26fc:	28 17       	cp	r18, r24
    26fe:	39 07       	cpc	r19, r25
    2700:	50 f0       	brcs	.+20     	; 0x2716 <tune_filter+0x2f4>
    2702:	80 91 af 02 	lds	r24, 0x02AF
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	31 f4       	brne	.+12     	; 0x2716 <tune_filter+0x2f4>
    270a:	88 a9       	sts	0x48, r24
    270c:	99 a9       	sts	0x49, r25
    270e:	80 95       	com	r24
    2710:	90 95       	com	r25
    2712:	e8 22       	and	r14, r24
    2714:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2716:	80 91 75 03 	lds	r24, 0x0375
    271a:	90 91 76 03 	lds	r25, 0x0376
    271e:	ea a9       	sts	0x4a, r30
    2720:	fb a9       	sts	0x4b, r31
    2722:	8e 17       	cp	r24, r30
    2724:	9f 07       	cpc	r25, r31
    2726:	21 f4       	brne	.+8      	; 0x2730 <tune_filter+0x30e>
    2728:	80 91 af 02 	lds	r24, 0x02AF
    272c:	81 30       	cpi	r24, 0x01	; 1
    272e:	71 f0       	breq	.+28     	; 0x274c <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2736:	2e a5       	lds	r18, 0x6e
    2738:	3f a5       	lds	r19, 0x6f
    273a:	21 50       	subi	r18, 0x01	; 1
    273c:	30 40       	sbci	r19, 0x00	; 0
    273e:	3f a7       	lds	r19, 0x7f
    2740:	2e a7       	lds	r18, 0x7e
    2742:	8f ef       	ldi	r24, 0xFF	; 255
    2744:	2f 3f       	cpi	r18, 0xFF	; 255
    2746:	38 07       	cpc	r19, r24
    2748:	09 f0       	breq	.+2      	; 0x274c <tune_filter+0x32a>
    274a:	70 cf       	rjmp	.-288    	; 0x262c <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    274c:	ee a9       	sts	0x4e, r30
    274e:	ff a9       	sts	0x4f, r31
    2750:	31 96       	adiw	r30, 0x01	; 1
    2752:	ff ab       	sts	0x5f, r31
    2754:	ee ab       	sts	0x5e, r30
    2756:	c7 01       	movw	r24, r14
    2758:	80 96       	adiw	r24, 0x20	; 32
    275a:	e8 ad       	sts	0x68, r30
    275c:	f9 ad       	sts	0x69, r31
    275e:	81 93       	st	Z+, r24
    2760:	91 93       	st	Z+, r25
    2762:	f9 af       	sts	0x79, r31
    2764:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2766:	ee e6       	ldi	r30, 0x6E	; 110
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	8d 7f       	andi	r24, 0xFD	; 253
    276e:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2770:	14 bc       	out	0x24, r1	; 36
    2772:	2c a9       	sts	0x4c, r18
    2774:	3d a9       	sts	0x4d, r19
    2776:	2d 5f       	subi	r18, 0xFD	; 253
    2778:	3f 4f       	sbci	r19, 0xFF	; 255
    277a:	3d ab       	sts	0x5d, r19
    277c:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    277e:	8e a9       	sts	0x4e, r24
    2780:	9f a9       	sts	0x4f, r25
    2782:	8f 30       	cpi	r24, 0x0F	; 15
    2784:	91 05       	cpc	r25, r1
    2786:	09 f0       	breq	.+2      	; 0x278a <tune_filter+0x368>
    2788:	1d cf       	rjmp	.-454    	; 0x25c4 <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    278a:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    278c:	e9 96       	adiw	r28, 0x39	; 57
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	ff 90       	pop	r15
    27a2:	ef 90       	pop	r14
    27a4:	df 90       	pop	r13
    27a6:	cf 90       	pop	r12
    27a8:	bf 90       	pop	r11
    27aa:	af 90       	pop	r10
    27ac:	9f 90       	pop	r9
    27ae:	8f 90       	pop	r8
    27b0:	7f 90       	pop	r7
    27b2:	6f 90       	pop	r6
    27b4:	5f 90       	pop	r5
    27b6:	4f 90       	pop	r4
    27b8:	3f 90       	pop	r3
    27ba:	2f 90       	pop	r2
    27bc:	08 95       	ret

000027be <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    27be:	8c e0       	ldi	r24, 0x0C	; 12
    27c0:	93 e0       	ldi	r25, 0x03	; 3
    27c2:	6c e0       	ldi	r22, 0x0C	; 12
    27c4:	76 e0       	ldi	r23, 0x06	; 6
    27c6:	40 e2       	ldi	r20, 0x20	; 32
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	0e 94 29 1c 	call	0x3852	; 0x3852 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    27ce:	8e e4       	ldi	r24, 0x4E	; 78
    27d0:	93 e0       	ldi	r25, 0x03	; 3
    27d2:	6e e4       	ldi	r22, 0x4E	; 78
    27d4:	76 e0       	ldi	r23, 0x06	; 6
    27d6:	42 e2       	ldi	r20, 0x22	; 34
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	0e 94 29 1c 	call	0x3852	; 0x3852 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    27de:	8c e2       	ldi	r24, 0x2C	; 44
    27e0:	93 e0       	ldi	r25, 0x03	; 3
    27e2:	6c e2       	ldi	r22, 0x2C	; 44
    27e4:	76 e0       	ldi	r23, 0x06	; 6
    27e6:	42 e2       	ldi	r20, 0x22	; 34
    27e8:	50 e0       	ldi	r21, 0x00	; 0
    27ea:	0e 94 29 1c 	call	0x3852	; 0x3852 <__eeupd_block_m6450a>
	
	
}
    27ee:	08 95       	ret

000027f0 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    27f0:	82 e7       	ldi	r24, 0x72	; 114
    27f2:	96 e0       	ldi	r25, 0x06	; 6
    27f4:	0e 94 23 1c 	call	0x3846	; 0x3846 <__eerd_word_m6450a>
    27f8:	90 93 73 03 	sts	0x0373, r25
    27fc:	80 93 72 03 	sts	0x0372, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2800:	80 e7       	ldi	r24, 0x70	; 112
    2802:	96 e0       	ldi	r25, 0x06	; 6
    2804:	0e 94 23 1c 	call	0x3846	; 0x3846 <__eerd_word_m6450a>
    2808:	90 93 71 03 	sts	0x0371, r25
    280c:	80 93 70 03 	sts	0x0370, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2810:	8e e4       	ldi	r24, 0x4E	; 78
    2812:	93 e0       	ldi	r25, 0x03	; 3
    2814:	6e e4       	ldi	r22, 0x4E	; 78
    2816:	76 e0       	ldi	r23, 0x06	; 6
    2818:	42 e2       	ldi	r20, 0x22	; 34
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	0e 94 13 1c 	call	0x3826	; 0x3826 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2820:	8c e2       	ldi	r24, 0x2C	; 44
    2822:	93 e0       	ldi	r25, 0x03	; 3
    2824:	6c e2       	ldi	r22, 0x2C	; 44
    2826:	76 e0       	ldi	r23, 0x06	; 6
    2828:	42 e2       	ldi	r20, 0x22	; 34
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	0e 94 13 1c 	call	0x3826	; 0x3826 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2830:	8c e0       	ldi	r24, 0x0C	; 12
    2832:	93 e0       	ldi	r25, 0x03	; 3
    2834:	6c e0       	ldi	r22, 0x0C	; 12
    2836:	76 e0       	ldi	r23, 0x06	; 6
    2838:	40 e2       	ldi	r20, 0x20	; 32
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	0e 94 13 1c 	call	0x3826	; 0x3826 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2840:	08 95       	ret

00002842 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2842:	98 2f       	mov	r25, r24
    2844:	96 95       	lsr	r25
    2846:	96 95       	lsr	r25
    2848:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    284a:	29 2f       	mov	r18, r25
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	f9 01       	movw	r30, r18
    2850:	31 97       	sbiw	r30, 0x01	; 1
    2852:	ee 0f       	add	r30, r30
    2854:	ff 1f       	adc	r31, r31
    2856:	e6 0f       	add	r30, r22
    2858:	f7 1f       	adc	r31, r23
    285a:	01 90       	ld	r0, Z+
    285c:	f0 81       	ld	r31, Z
    285e:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2860:	22 0f       	add	r18, r18
    2862:	33 1f       	adc	r19, r19
    2864:	26 0f       	add	r18, r22
    2866:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2868:	d9 01       	movw	r26, r18
    286a:	4d 91       	ld	r20, X+
    286c:	5c 91       	ld	r21, X
    286e:	11 97       	sbiw	r26, 0x01	; 1
    2870:	4e 1b       	sub	r20, r30
    2872:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2874:	99 0f       	add	r25, r25
    2876:	99 0f       	add	r25, r25
    2878:	99 0f       	add	r25, r25
    287a:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	48 9f       	mul	r20, r24
    2880:	90 01       	movw	r18, r0
    2882:	49 9f       	mul	r20, r25
    2884:	30 0d       	add	r19, r0
    2886:	58 9f       	mul	r21, r24
    2888:	30 0d       	add	r19, r0
    288a:	11 24       	eor	r1, r1
    288c:	36 95       	lsr	r19
    288e:	27 95       	ror	r18
    2890:	36 95       	lsr	r19
    2892:	27 95       	ror	r18
    2894:	36 95       	lsr	r19
    2896:	27 95       	ror	r18
    2898:	e2 0f       	add	r30, r18
    289a:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    289c:	8e 2f       	mov	r24, r30
    289e:	9f 2f       	mov	r25, r31
    28a0:	08 95       	ret

000028a2 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	a2 97       	sbiw	r28, 0x22	; 34
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    28b6:	de 01       	movw	r26, r28
    28b8:	11 96       	adiw	r26, 0x01	; 1
    28ba:	ed e8       	ldi	r30, 0x8D	; 141
    28bc:	f2 e0       	ldi	r31, 0x02	; 2
    28be:	82 e2       	ldi	r24, 0x22	; 34
    28c0:	01 90       	ld	r0, Z+
    28c2:	0d 92       	st	X+, r0
    28c4:	81 50       	subi	r24, 0x01	; 1
    28c6:	e1 f7       	brne	.-8      	; 0x28c0 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    28c8:	ae e4       	ldi	r26, 0x4E	; 78
    28ca:	b3 e0       	ldi	r27, 0x03	; 3
    28cc:	fe 01       	movw	r30, r28
    28ce:	31 96       	adiw	r30, 0x01	; 1
    28d0:	82 e2       	ldi	r24, 0x22	; 34
    28d2:	01 90       	ld	r0, Z+
    28d4:	0d 92       	st	X+, r0
    28d6:	81 50       	subi	r24, 0x01	; 1
    28d8:	e1 f7       	brne	.-8      	; 0x28d2 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    28da:	ac e2       	ldi	r26, 0x2C	; 44
    28dc:	b3 e0       	ldi	r27, 0x03	; 3
    28de:	fe 01       	movw	r30, r28
    28e0:	31 96       	adiw	r30, 0x01	; 1
    28e2:	82 e2       	ldi	r24, 0x22	; 34
    28e4:	01 90       	ld	r0, Z+
    28e6:	0d 92       	st	X+, r0
    28e8:	81 50       	subi	r24, 0x01	; 1
    28ea:	e1 f7       	brne	.-8      	; 0x28e4 <set_one_volt_per_octave+0x42>
	
	
    28ec:	a2 96       	adiw	r28, 0x22	; 34
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    28fe:	9f b1       	in	r25, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2900:	89 2f       	mov	r24, r25
    2902:	8c 70       	andi	r24, 0x0C	; 12
    2904:	20 91 c1 02 	lds	r18, 0x02C1
    2908:	82 2b       	or	r24, r18
    290a:	80 93 c1 02 	sts	0x02C1, r24
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    290e:	80 91 7e 03 	lds	r24, 0x037E
    2912:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    2914:	89 27       	eor	r24, r25
    2916:	80 93 7e 03 	sts	0x037E, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    291a:	89 23       	and	r24, r25
    291c:	08 95       	ret

0000291e <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    291e:	ed ed       	ldi	r30, 0xDD	; 221
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	90 81       	ld	r25, Z
    2924:	9f 7b       	andi	r25, 0xBF	; 191
    2926:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2928:	28 2f       	mov	r18, r24
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	21 70       	andi	r18, 0x01	; 1
    292e:	30 70       	andi	r19, 0x00	; 0
    2930:	22 0f       	add	r18, r18
    2932:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2934:	68 2f       	mov	r22, r24
    2936:	62 95       	swap	r22
    2938:	66 95       	lsr	r22
    293a:	67 70       	andi	r22, 0x07	; 7
    293c:	67 95       	ror	r22
    293e:	66 27       	eor	r22, r22
    2940:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2942:	26 2b       	or	r18, r22
    2944:	98 2f       	mov	r25, r24
    2946:	96 95       	lsr	r25
    2948:	96 95       	lsr	r25
    294a:	91 70       	andi	r25, 0x01	; 1
    294c:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    294e:	68 2f       	mov	r22, r24
    2950:	66 1f       	adc	r22, r22
    2952:	66 27       	eor	r22, r22
    2954:	66 1f       	adc	r22, r22
    2956:	66 0f       	add	r22, r22
    2958:	66 0f       	add	r22, r22
    295a:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    295c:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    295e:	a8 2f       	mov	r26, r24
    2960:	a6 95       	lsr	r26
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	a1 70       	andi	r26, 0x01	; 1
    2966:	b0 70       	andi	r27, 0x00	; 0
    2968:	bd 01       	movw	r22, r26
    296a:	66 0f       	add	r22, r22
    296c:	77 1f       	adc	r23, r23
    296e:	66 0f       	add	r22, r22
    2970:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2972:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2974:	68 2f       	mov	r22, r24
    2976:	62 95       	swap	r22
    2978:	6f 70       	andi	r22, 0x0F	; 15
    297a:	70 e0       	ldi	r23, 0x00	; 0
    297c:	61 70       	andi	r22, 0x01	; 1
    297e:	70 70       	andi	r23, 0x00	; 0
    2980:	ab 01       	movw	r20, r22
    2982:	00 24       	eor	r0, r0
    2984:	56 95       	lsr	r21
    2986:	47 95       	ror	r20
    2988:	07 94       	ror	r0
    298a:	56 95       	lsr	r21
    298c:	47 95       	ror	r20
    298e:	07 94       	ror	r0
    2990:	54 2f       	mov	r21, r20
    2992:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2994:	62 2f       	mov	r22, r18
    2996:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2998:	48 2f       	mov	r20, r24
    299a:	42 95       	swap	r20
    299c:	46 95       	lsr	r20
    299e:	46 95       	lsr	r20
    29a0:	43 70       	andi	r20, 0x03	; 3
    29a2:	50 e0       	ldi	r21, 0x00	; 0
    29a4:	41 70       	andi	r20, 0x01	; 1
    29a6:	50 70       	andi	r21, 0x00	; 0
    29a8:	9a 01       	movw	r18, r20
    29aa:	22 0f       	add	r18, r18
    29ac:	33 1f       	adc	r19, r19
    29ae:	22 95       	swap	r18
    29b0:	32 95       	swap	r19
    29b2:	30 7f       	andi	r19, 0xF0	; 240
    29b4:	32 27       	eor	r19, r18
    29b6:	20 7f       	andi	r18, 0xF0	; 240
    29b8:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    29ba:	46 2f       	mov	r20, r22
    29bc:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    29be:	86 95       	lsr	r24
    29c0:	86 95       	lsr	r24
    29c2:	86 95       	lsr	r24
    29c4:	28 2f       	mov	r18, r24
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	21 70       	andi	r18, 0x01	; 1
    29ca:	30 70       	andi	r19, 0x00	; 0
    29cc:	c9 01       	movw	r24, r18
    29ce:	82 95       	swap	r24
    29d0:	92 95       	swap	r25
    29d2:	90 7f       	andi	r25, 0xF0	; 240
    29d4:	98 27       	eor	r25, r24
    29d6:	80 7f       	andi	r24, 0xF0	; 240
    29d8:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    29da:	84 2b       	or	r24, r20
    29dc:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    29de:	80 81       	ld	r24, Z
    29e0:	80 64       	ori	r24, 0x40	; 64
    29e2:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    29e4:	80 81       	ld	r24, Z
    29e6:	8f 7b       	andi	r24, 0xBF	; 191
    29e8:	80 83       	st	Z, r24
	DATA_BUS = 0;
    29ea:	12 b8       	out	0x02, r1	; 2
	
	
    29ec:	08 95       	ret

000029ee <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    29ee:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    29f0:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    29f2:	74 83       	std	Z+4, r23	; 0x04
    29f4:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    29f6:	11 82       	std	Z+1, r1	; 0x01
    29f8:	10 82       	st	Z, r1
}
    29fa:	08 95       	ret

000029fc <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    29fc:	1f 93       	push	r17
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	ec 01       	movw	r28, r24
    2a04:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2a06:	0e 94 6d 15 	call	0x2ada	; 0x2ada <store_and_clear_interrupt>
    2a0a:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2a0c:	39 81       	ldd	r19, Y+1	; 0x01
    2a0e:	83 2f       	mov	r24, r19
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	01 96       	adiw	r24, 0x01	; 1
    2a14:	6a 81       	ldd	r22, Y+2	; 0x02
    2a16:	70 e0       	ldi	r23, 0x00	; 0
    2a18:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__divmodhi4>
    2a1c:	48 81       	ld	r20, Y
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	84 17       	cp	r24, r20
    2a22:	95 07       	cpc	r25, r21
    2a24:	29 f4       	brne	.+10     	; 0x2a30 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2a26:	82 2f       	mov	r24, r18
    2a28:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <restore_interrupt_setting>
      return false;
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	11 c0       	rjmp	.+34     	; 0x2a52 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2a30:	eb 81       	ldd	r30, Y+3	; 0x03
    2a32:	fc 81       	ldd	r31, Y+4	; 0x04
    2a34:	e3 0f       	add	r30, r19
    2a36:	f1 1d       	adc	r31, r1
    2a38:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	01 96       	adiw	r24, 0x01	; 1
    2a40:	6a 81       	ldd	r22, Y+2	; 0x02
    2a42:	70 e0       	ldi	r23, 0x00	; 0
    2a44:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__divmodhi4>
    2a48:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2a4a:	82 2f       	mov	r24, r18
    2a4c:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <restore_interrupt_setting>
      return true;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	1f 91       	pop	r17
    2a58:	08 95       	ret

00002a5a <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2a60:	0e 94 6d 15 	call	0x2ada	; 0x2ada <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2a64:	29 81       	ldd	r18, Y+1	; 0x01
    2a66:	98 81       	ld	r25, Y
    2a68:	29 17       	cp	r18, r25
    2a6a:	18 f0       	brcs	.+6      	; 0x2a72 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2a6c:	c2 2f       	mov	r28, r18
    2a6e:	c9 1b       	sub	r28, r25
    2a70:	03 c0       	rjmp	.+6      	; 0x2a78 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2a72:	ca 81       	ldd	r28, Y+2	; 0x02
    2a74:	c2 0f       	add	r28, r18
    2a76:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2a78:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <restore_interrupt_setting>
   return len;
}
    2a7c:	8c 2f       	mov	r24, r28
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	08 95       	ret

00002a84 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2a84:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2a86:	20 81       	ld	r18, Z
    2a88:	86 2f       	mov	r24, r22
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	82 0f       	add	r24, r18
    2a8e:	91 1d       	adc	r25, r1
    2a90:	62 81       	ldd	r22, Z+2	; 0x02
    2a92:	70 e0       	ldi	r23, 0x00	; 0
    2a94:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__divmodhi4>
    2a98:	03 80       	ldd	r0, Z+3	; 0x03
    2a9a:	f4 81       	ldd	r31, Z+4	; 0x04
    2a9c:	e0 2d       	mov	r30, r0
    2a9e:	e8 0f       	add	r30, r24
    2aa0:	f9 1f       	adc	r31, r25
}
    2aa2:	80 81       	ld	r24, Z
    2aa4:	08 95       	ret

00002aa6 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2aa6:	1f 93       	push	r17
    2aa8:	cf 93       	push	r28
    2aaa:	df 93       	push	r29
    2aac:	ec 01       	movw	r28, r24
    2aae:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2ab0:	0e 94 6d 15 	call	0x2ada	; 0x2ada <store_and_clear_interrupt>
    2ab4:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2ab6:	88 81       	ld	r24, Y
    2ab8:	21 2f       	mov	r18, r17
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	28 0f       	add	r18, r24
    2abe:	31 1d       	adc	r19, r1
    2ac0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ac2:	c9 01       	movw	r24, r18
    2ac4:	70 e0       	ldi	r23, 0x00	; 0
    2ac6:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__divmodhi4>
    2aca:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2acc:	84 2f       	mov	r24, r20
    2ace:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <restore_interrupt_setting>
}
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	1f 91       	pop	r17
    2ad8:	08 95       	ret

00002ada <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2ada:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2adc:	f8 94       	cli
   return sreg;
}
    2ade:	08 95       	ret

00002ae0 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2ae0:	8f bf       	out	0x3f, r24	; 63
}
    2ae2:	08 95       	ret

00002ae4 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2ae4:	88 1f       	adc	r24, r24
    2ae6:	88 27       	eor	r24, r24
    2ae8:	88 1f       	adc	r24, r24
    2aea:	08 95       	ret

00002aec <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2aec:	91 e0       	ldi	r25, 0x01	; 1
    2aee:	88 3f       	cpi	r24, 0xF8	; 248
    2af0:	08 f4       	brcc	.+2      	; 0x2af4 <midi_is_realtime+0x8>
    2af2:	90 e0       	ldi	r25, 0x00	; 0
}
    2af4:	89 2f       	mov	r24, r25
    2af6:	08 95       	ret

00002af8 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2af8:	28 2f       	mov	r18, r24
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	20 7f       	andi	r18, 0xF0	; 240
    2afe:	30 70       	andi	r19, 0x00	; 0
    2b00:	20 3c       	cpi	r18, 0xC0	; 192
    2b02:	31 05       	cpc	r19, r1
    2b04:	e9 f1       	breq	.+122    	; 0x2b80 <midi_packet_length+0x88>
    2b06:	21 3c       	cpi	r18, 0xC1	; 193
    2b08:	31 05       	cpc	r19, r1
    2b0a:	8c f4       	brge	.+34     	; 0x2b2e <midi_packet_length+0x36>
    2b0c:	20 39       	cpi	r18, 0x90	; 144
    2b0e:	31 05       	cpc	r19, r1
    2b10:	e1 f0       	breq	.+56     	; 0x2b4a <midi_packet_length+0x52>
    2b12:	21 39       	cpi	r18, 0x91	; 145
    2b14:	31 05       	cpc	r19, r1
    2b16:	24 f4       	brge	.+8      	; 0x2b20 <midi_packet_length+0x28>
    2b18:	20 38       	cpi	r18, 0x80	; 128
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	79 f5       	brne	.+94     	; 0x2b7c <midi_packet_length+0x84>
    2b1e:	15 c0       	rjmp	.+42     	; 0x2b4a <midi_packet_length+0x52>
    2b20:	20 3a       	cpi	r18, 0xA0	; 160
    2b22:	31 05       	cpc	r19, r1
    2b24:	91 f0       	breq	.+36     	; 0x2b4a <midi_packet_length+0x52>
    2b26:	20 3b       	cpi	r18, 0xB0	; 176
    2b28:	31 05       	cpc	r19, r1
    2b2a:	41 f5       	brne	.+80     	; 0x2b7c <midi_packet_length+0x84>
    2b2c:	0e c0       	rjmp	.+28     	; 0x2b4a <midi_packet_length+0x52>
    2b2e:	20 3e       	cpi	r18, 0xE0	; 224
    2b30:	31 05       	cpc	r19, r1
    2b32:	59 f0       	breq	.+22     	; 0x2b4a <midi_packet_length+0x52>
    2b34:	21 3e       	cpi	r18, 0xE1	; 225
    2b36:	31 05       	cpc	r19, r1
    2b38:	24 f4       	brge	.+8      	; 0x2b42 <midi_packet_length+0x4a>
    2b3a:	20 3d       	cpi	r18, 0xD0	; 208
    2b3c:	31 05       	cpc	r19, r1
    2b3e:	f1 f4       	brne	.+60     	; 0x2b7c <midi_packet_length+0x84>
    2b40:	1f c0       	rjmp	.+62     	; 0x2b80 <midi_packet_length+0x88>
    2b42:	20 3f       	cpi	r18, 0xF0	; 240
    2b44:	31 05       	cpc	r19, r1
    2b46:	d1 f4       	brne	.+52     	; 0x2b7c <midi_packet_length+0x84>
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2b4a:	83 e0       	ldi	r24, 0x03	; 3
    2b4c:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2b4e:	86 3f       	cpi	r24, 0xF6	; 246
    2b50:	79 f0       	breq	.+30     	; 0x2b70 <midi_packet_length+0x78>
    2b52:	87 3f       	cpi	r24, 0xF7	; 247
    2b54:	38 f4       	brcc	.+14     	; 0x2b64 <midi_packet_length+0x6c>
    2b56:	82 3f       	cpi	r24, 0xF2	; 242
    2b58:	a9 f0       	breq	.+42     	; 0x2b84 <midi_packet_length+0x8c>
    2b5a:	83 3f       	cpi	r24, 0xF3	; 243
    2b5c:	59 f0       	breq	.+22     	; 0x2b74 <midi_packet_length+0x7c>
    2b5e:	81 3f       	cpi	r24, 0xF1	; 241
    2b60:	59 f4       	brne	.+22     	; 0x2b78 <midi_packet_length+0x80>
    2b62:	08 c0       	rjmp	.+16     	; 0x2b74 <midi_packet_length+0x7c>
    2b64:	88 3f       	cpi	r24, 0xF8	; 248
    2b66:	40 f0       	brcs	.+16     	; 0x2b78 <midi_packet_length+0x80>
    2b68:	8d 3f       	cpi	r24, 0xFD	; 253
    2b6a:	10 f0       	brcs	.+4      	; 0x2b70 <midi_packet_length+0x78>
    2b6c:	8e 3f       	cpi	r24, 0xFE	; 254
    2b6e:	20 f0       	brcs	.+8      	; 0x2b78 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2b74:	82 e0       	ldi	r24, 0x02	; 2
    2b76:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2b80:	82 e0       	ldi	r24, 0x02	; 2
    2b82:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2b84:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2b86:	08 95       	ret

00002b88 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2b88:	0f 93       	push	r16
    2b8a:	34 2f       	mov	r19, r20
    2b8c:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2b8e:	46 2f       	mov	r20, r22
    2b90:	4f 70       	andi	r20, 0x0F	; 15
    2b92:	40 6b       	ori	r20, 0xB0	; 176
    2b94:	23 2f       	mov	r18, r19
    2b96:	2f 77       	andi	r18, 0x7F	; 127
    2b98:	0f 77       	andi	r16, 0x7F	; 127
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	ed 91       	ld	r30, X+
    2b9e:	fc 91       	ld	r31, X
    2ba0:	63 e0       	ldi	r22, 0x03	; 3
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2ba6:	0f 91       	pop	r16
    2ba8:	08 95       	ret

00002baa <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2baa:	0f 93       	push	r16
    2bac:	34 2f       	mov	r19, r20
    2bae:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2bb0:	46 2f       	mov	r20, r22
    2bb2:	4f 70       	andi	r20, 0x0F	; 15
    2bb4:	40 69       	ori	r20, 0x90	; 144
    2bb6:	23 2f       	mov	r18, r19
    2bb8:	2f 77       	andi	r18, 0x7F	; 127
    2bba:	0f 77       	andi	r16, 0x7F	; 127
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	ed 91       	ld	r30, X+
    2bc0:	fc 91       	ld	r31, X
    2bc2:	63 e0       	ldi	r22, 0x03	; 3
    2bc4:	70 e0       	ldi	r23, 0x00	; 0
    2bc6:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2bc8:	0f 91       	pop	r16
    2bca:	08 95       	ret

00002bcc <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2bcc:	0f 93       	push	r16
    2bce:	34 2f       	mov	r19, r20
    2bd0:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2bd2:	46 2f       	mov	r20, r22
    2bd4:	4f 70       	andi	r20, 0x0F	; 15
    2bd6:	40 68       	ori	r20, 0x80	; 128
    2bd8:	23 2f       	mov	r18, r19
    2bda:	2f 77       	andi	r18, 0x7F	; 127
    2bdc:	0f 77       	andi	r16, 0x7F	; 127
    2bde:	dc 01       	movw	r26, r24
    2be0:	ed 91       	ld	r30, X+
    2be2:	fc 91       	ld	r31, X
    2be4:	63 e0       	ldi	r22, 0x03	; 3
    2be6:	70 e0       	ldi	r23, 0x00	; 0
    2be8:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2bea:	0f 91       	pop	r16
    2bec:	08 95       	ret

00002bee <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2bee:	0f 93       	push	r16
    2bf0:	34 2f       	mov	r19, r20
    2bf2:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2bf4:	46 2f       	mov	r20, r22
    2bf6:	4f 70       	andi	r20, 0x0F	; 15
    2bf8:	40 6a       	ori	r20, 0xA0	; 160
    2bfa:	23 2f       	mov	r18, r19
    2bfc:	2f 77       	andi	r18, 0x7F	; 127
    2bfe:	0f 77       	andi	r16, 0x7F	; 127
    2c00:	dc 01       	movw	r26, r24
    2c02:	ed 91       	ld	r30, X+
    2c04:	fc 91       	ld	r31, X
    2c06:	63 e0       	ldi	r22, 0x03	; 3
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2c0c:	0f 91       	pop	r16
    2c0e:	08 95       	ret

00002c10 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2c14:	20 e2       	ldi	r18, 0x20	; 32
    2c16:	40 30       	cpi	r20, 0x00	; 0
    2c18:	52 07       	cpc	r21, r18
    2c1a:	44 f4       	brge	.+16     	; 0x2c2c <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2c1c:	a0 ee       	ldi	r26, 0xE0	; 224
    2c1e:	40 30       	cpi	r20, 0x00	; 0
    2c20:	5a 07       	cpc	r21, r26
    2c22:	3c f0       	brlt	.+14     	; 0x2c32 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2c24:	8a 01       	movw	r16, r20
    2c26:	00 50       	subi	r16, 0x00	; 0
    2c28:	10 4e       	sbci	r17, 0xE0	; 224
    2c2a:	05 c0       	rjmp	.+10     	; 0x2c36 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2c2c:	0f ef       	ldi	r16, 0xFF	; 255
    2c2e:	1f e3       	ldi	r17, 0x3F	; 63
    2c30:	02 c0       	rjmp	.+4      	; 0x2c36 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2c32:	00 e0       	ldi	r16, 0x00	; 0
    2c34:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2c36:	46 2f       	mov	r20, r22
    2c38:	4f 70       	andi	r20, 0x0F	; 15
    2c3a:	40 6e       	ori	r20, 0xE0	; 224
    2c3c:	20 2f       	mov	r18, r16
    2c3e:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2c40:	00 0f       	add	r16, r16
    2c42:	01 2f       	mov	r16, r17
    2c44:	00 1f       	adc	r16, r16
    2c46:	11 0b       	sbc	r17, r17
    2c48:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2c4a:	0f 77       	andi	r16, 0x7F	; 127
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	ed 91       	ld	r30, X+
    2c50:	fc 91       	ld	r31, X
    2c52:	63 e0       	ldi	r22, 0x03	; 3
    2c54:	70 e0       	ldi	r23, 0x00	; 0
    2c56:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	08 95       	ret

00002c5e <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2c5e:	0f 93       	push	r16
    2c60:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2c62:	46 2f       	mov	r20, r22
    2c64:	4f 70       	andi	r20, 0x0F	; 15
    2c66:	40 6c       	ori	r20, 0xC0	; 192
    2c68:	2f 77       	andi	r18, 0x7F	; 127
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	ed 91       	ld	r30, X+
    2c6e:	fc 91       	ld	r31, X
    2c70:	62 e0       	ldi	r22, 0x02	; 2
    2c72:	70 e0       	ldi	r23, 0x00	; 0
    2c74:	00 e0       	ldi	r16, 0x00	; 0
    2c76:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2c78:	0f 91       	pop	r16
    2c7a:	08 95       	ret

00002c7c <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2c7c:	0f 93       	push	r16
    2c7e:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2c80:	46 2f       	mov	r20, r22
    2c82:	4f 70       	andi	r20, 0x0F	; 15
    2c84:	40 6d       	ori	r20, 0xD0	; 208
    2c86:	2f 77       	andi	r18, 0x7F	; 127
    2c88:	dc 01       	movw	r26, r24
    2c8a:	ed 91       	ld	r30, X+
    2c8c:	fc 91       	ld	r31, X
    2c8e:	62 e0       	ldi	r22, 0x02	; 2
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	00 e0       	ldi	r16, 0x00	; 0
    2c94:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2c96:	0f 91       	pop	r16
    2c98:	08 95       	ret

00002c9a <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2c9a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	ed 91       	ld	r30, X+
    2ca0:	fc 91       	ld	r31, X
    2ca2:	61 e0       	ldi	r22, 0x01	; 1
    2ca4:	70 e0       	ldi	r23, 0x00	; 0
    2ca6:	48 ef       	ldi	r20, 0xF8	; 248
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	00 e0       	ldi	r16, 0x00	; 0
    2cac:	09 95       	icall
}
    2cae:	0f 91       	pop	r16
    2cb0:	08 95       	ret

00002cb2 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    2cb2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	ed 91       	ld	r30, X+
    2cb8:	fc 91       	ld	r31, X
    2cba:	61 e0       	ldi	r22, 0x01	; 1
    2cbc:	70 e0       	ldi	r23, 0x00	; 0
    2cbe:	49 ef       	ldi	r20, 0xF9	; 249
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	00 e0       	ldi	r16, 0x00	; 0
    2cc4:	09 95       	icall
}
    2cc6:	0f 91       	pop	r16
    2cc8:	08 95       	ret

00002cca <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2cca:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2ccc:	dc 01       	movw	r26, r24
    2cce:	ed 91       	ld	r30, X+
    2cd0:	fc 91       	ld	r31, X
    2cd2:	61 e0       	ldi	r22, 0x01	; 1
    2cd4:	70 e0       	ldi	r23, 0x00	; 0
    2cd6:	4a ef       	ldi	r20, 0xFA	; 250
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	00 e0       	ldi	r16, 0x00	; 0
    2cdc:	09 95       	icall
}
    2cde:	0f 91       	pop	r16
    2ce0:	08 95       	ret

00002ce2 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    2ce2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	ed 91       	ld	r30, X+
    2ce8:	fc 91       	ld	r31, X
    2cea:	61 e0       	ldi	r22, 0x01	; 1
    2cec:	70 e0       	ldi	r23, 0x00	; 0
    2cee:	4b ef       	ldi	r20, 0xFB	; 251
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	00 e0       	ldi	r16, 0x00	; 0
    2cf4:	09 95       	icall
}
    2cf6:	0f 91       	pop	r16
    2cf8:	08 95       	ret

00002cfa <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    2cfa:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	ed 91       	ld	r30, X+
    2d00:	fc 91       	ld	r31, X
    2d02:	61 e0       	ldi	r22, 0x01	; 1
    2d04:	70 e0       	ldi	r23, 0x00	; 0
    2d06:	4c ef       	ldi	r20, 0xFC	; 252
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	00 e0       	ldi	r16, 0x00	; 0
    2d0c:	09 95       	icall
}
    2d0e:	0f 91       	pop	r16
    2d10:	08 95       	ret

00002d12 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    2d12:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    2d14:	dc 01       	movw	r26, r24
    2d16:	ed 91       	ld	r30, X+
    2d18:	fc 91       	ld	r31, X
    2d1a:	61 e0       	ldi	r22, 0x01	; 1
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	4e ef       	ldi	r20, 0xFE	; 254
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	00 e0       	ldi	r16, 0x00	; 0
    2d24:	09 95       	icall
}
    2d26:	0f 91       	pop	r16
    2d28:	08 95       	ret

00002d2a <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2d2a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	ed 91       	ld	r30, X+
    2d30:	fc 91       	ld	r31, X
    2d32:	61 e0       	ldi	r22, 0x01	; 1
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	4f ef       	ldi	r20, 0xFF	; 255
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	00 e0       	ldi	r16, 0x00	; 0
    2d3c:	09 95       	icall
}
    2d3e:	0f 91       	pop	r16
    2d40:	08 95       	ret

00002d42 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    2d42:	0f 93       	push	r16
   device->send_func(device, 2,
    2d44:	26 2f       	mov	r18, r22
    2d46:	2f 77       	andi	r18, 0x7F	; 127
    2d48:	dc 01       	movw	r26, r24
    2d4a:	ed 91       	ld	r30, X+
    2d4c:	fc 91       	ld	r31, X
    2d4e:	62 e0       	ldi	r22, 0x02	; 2
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	41 ef       	ldi	r20, 0xF1	; 241
    2d54:	00 e0       	ldi	r16, 0x00	; 0
    2d56:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2d58:	0f 91       	pop	r16
    2d5a:	08 95       	ret

00002d5c <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
   device->send_func(device, 3,
    2d60:	26 2f       	mov	r18, r22
    2d62:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2d64:	8b 01       	movw	r16, r22
    2d66:	00 0f       	add	r16, r16
    2d68:	01 2f       	mov	r16, r17
    2d6a:	00 1f       	adc	r16, r16
    2d6c:	11 0b       	sbc	r17, r17
    2d6e:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2d70:	0f 77       	andi	r16, 0x7F	; 127
    2d72:	dc 01       	movw	r26, r24
    2d74:	ed 91       	ld	r30, X+
    2d76:	fc 91       	ld	r31, X
    2d78:	63 e0       	ldi	r22, 0x03	; 3
    2d7a:	70 e0       	ldi	r23, 0x00	; 0
    2d7c:	42 ef       	ldi	r20, 0xF2	; 242
    2d7e:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2d80:	1f 91       	pop	r17
    2d82:	0f 91       	pop	r16
    2d84:	08 95       	ret

00002d86 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2d86:	0f 93       	push	r16
   device->send_func(device, 2,
    2d88:	26 2f       	mov	r18, r22
    2d8a:	2f 77       	andi	r18, 0x7F	; 127
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	ed 91       	ld	r30, X+
    2d90:	fc 91       	ld	r31, X
    2d92:	62 e0       	ldi	r22, 0x02	; 2
    2d94:	70 e0       	ldi	r23, 0x00	; 0
    2d96:	43 ef       	ldi	r20, 0xF3	; 243
    2d98:	00 e0       	ldi	r16, 0x00	; 0
    2d9a:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2d9c:	0f 91       	pop	r16
    2d9e:	08 95       	ret

00002da0 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2da0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    2da2:	dc 01       	movw	r26, r24
    2da4:	ed 91       	ld	r30, X+
    2da6:	fc 91       	ld	r31, X
    2da8:	61 e0       	ldi	r22, 0x01	; 1
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	46 ef       	ldi	r20, 0xF6	; 246
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	00 e0       	ldi	r16, 0x00	; 0
    2db2:	09 95       	icall
}
    2db4:	0f 91       	pop	r16
    2db6:	08 95       	ret

00002db8 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2db8:	0f 93       	push	r16
    2dba:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	ed 91       	ld	r30, X+
    2dc0:	fc 91       	ld	r31, X
    2dc2:	61 e0       	ldi	r22, 0x01	; 1
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	00 e0       	ldi	r16, 0x00	; 0
    2dca:	09 95       	icall
}
    2dcc:	0f 91       	pop	r16
    2dce:	08 95       	ret

00002dd0 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    2dd0:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	ed 91       	ld	r30, X+
    2dd6:	fc 91       	ld	r31, X
    2dd8:	09 95       	icall
}
    2dda:	0f 91       	pop	r16
    2ddc:	08 95       	ret

00002dde <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2dde:	6f 92       	push	r6
    2de0:	7f 92       	push	r7
    2de2:	8f 92       	push	r8
    2de4:	9f 92       	push	r9
    2de6:	af 92       	push	r10
    2de8:	bf 92       	push	r11
    2dea:	cf 92       	push	r12
    2dec:	df 92       	push	r13
    2dee:	ef 92       	push	r14
    2df0:	ff 92       	push	r15
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <midi_send_array+0x1e>
    2dfc:	0f 92       	push	r0
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	4c 01       	movw	r8, r24
    2e04:	6b 01       	movw	r12, r22
    2e06:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2e08:	61 15       	cp	r22, r1
    2e0a:	71 05       	cpc	r23, r1
    2e0c:	41 f1       	breq	.+80     	; 0x2e5e <midi_send_array+0x80>
    2e0e:	ee 24       	eor	r14, r14
    2e10:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2e12:	0f 2e       	mov	r0, r31
    2e14:	f3 e0       	ldi	r31, 0x03	; 3
    2e16:	6f 2e       	mov	r6, r31
    2e18:	77 24       	eor	r7, r7
    2e1a:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2e1c:	19 82       	std	Y+1, r1	; 0x01
    2e1e:	1a 82       	std	Y+2, r1	; 0x02
    2e20:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2e22:	86 01       	movw	r16, r12
    2e24:	0e 19       	sub	r16, r14
    2e26:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2e28:	04 30       	cpi	r16, 0x04	; 4
    2e2a:	11 05       	cpc	r17, r1
    2e2c:	08 f0       	brcs	.+2      	; 0x2e30 <midi_send_array+0x52>
    2e2e:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2e30:	b5 01       	movw	r22, r10
    2e32:	6e 0d       	add	r22, r14
    2e34:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2e36:	ce 01       	movw	r24, r28
    2e38:	01 96       	adiw	r24, 0x01	; 1
    2e3a:	40 2f       	mov	r20, r16
    2e3c:	51 2f       	mov	r21, r17
    2e3e:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2e42:	c4 01       	movw	r24, r8
    2e44:	b8 01       	movw	r22, r16
    2e46:	49 81       	ldd	r20, Y+1	; 0x01
    2e48:	2a 81       	ldd	r18, Y+2	; 0x02
    2e4a:	0b 81       	ldd	r16, Y+3	; 0x03
    2e4c:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2e50:	83 e0       	ldi	r24, 0x03	; 3
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	e8 0e       	add	r14, r24
    2e56:	f9 1e       	adc	r15, r25
    2e58:	ec 14       	cp	r14, r12
    2e5a:	fd 04       	cpc	r15, r13
    2e5c:	f8 f2       	brcs	.-66     	; 0x2e1c <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	1f 91       	pop	r17
    2e6a:	0f 91       	pop	r16
    2e6c:	ff 90       	pop	r15
    2e6e:	ef 90       	pop	r14
    2e70:	df 90       	pop	r13
    2e72:	cf 90       	pop	r12
    2e74:	bf 90       	pop	r11
    2e76:	af 90       	pop	r10
    2e78:	9f 90       	pop	r9
    2e7a:	8f 90       	pop	r8
    2e7c:	7f 90       	pop	r7
    2e7e:	6f 90       	pop	r6
    2e80:	08 95       	ret

00002e82 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    2e82:	fc 01       	movw	r30, r24
    2e84:	73 83       	std	Z+3, r23	; 0x03
    2e86:	62 83       	std	Z+2, r22	; 0x02
}
    2e88:	08 95       	ret

00002e8a <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	75 83       	std	Z+5, r23	; 0x05
    2e8e:	64 83       	std	Z+4, r22	; 0x04
}
    2e90:	08 95       	ret

00002e92 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    2e92:	fc 01       	movw	r30, r24
    2e94:	77 83       	std	Z+7, r23	; 0x07
    2e96:	66 83       	std	Z+6, r22	; 0x06
}
    2e98:	08 95       	ret

00002e9a <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	71 87       	std	Z+9, r23	; 0x09
    2e9e:	60 87       	std	Z+8, r22	; 0x08
}
    2ea0:	08 95       	ret

00002ea2 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	73 87       	std	Z+11, r23	; 0x0b
    2ea6:	62 87       	std	Z+10, r22	; 0x0a
}
    2ea8:	08 95       	ret

00002eaa <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2eaa:	fc 01       	movw	r30, r24
    2eac:	75 87       	std	Z+13, r23	; 0x0d
    2eae:	64 87       	std	Z+12, r22	; 0x0c
}
    2eb0:	08 95       	ret

00002eb2 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	77 87       	std	Z+15, r23	; 0x0f
    2eb6:	66 87       	std	Z+14, r22	; 0x0e
}
    2eb8:	08 95       	ret

00002eba <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2eba:	fc 01       	movw	r30, r24
    2ebc:	71 8b       	std	Z+17, r23	; 0x11
    2ebe:	60 8b       	std	Z+16, r22	; 0x10
}
    2ec0:	08 95       	ret

00002ec2 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	73 8b       	std	Z+19, r23	; 0x13
    2ec6:	62 8b       	std	Z+18, r22	; 0x12
}
    2ec8:	08 95       	ret

00002eca <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    2eca:	fc 01       	movw	r30, r24
    2ecc:	75 8b       	std	Z+21, r23	; 0x15
    2ece:	64 8b       	std	Z+20, r22	; 0x14
}
    2ed0:	08 95       	ret

00002ed2 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	77 8b       	std	Z+23, r23	; 0x17
    2ed6:	66 8b       	std	Z+22, r22	; 0x16
}
    2ed8:	08 95       	ret

00002eda <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2eda:	fc 01       	movw	r30, r24
    2edc:	71 8f       	std	Z+25, r23	; 0x19
    2ede:	60 8f       	std	Z+24, r22	; 0x18
}
    2ee0:	08 95       	ret

00002ee2 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	73 8f       	std	Z+27, r23	; 0x1b
    2ee6:	62 8f       	std	Z+26, r22	; 0x1a
}
    2ee8:	08 95       	ret

00002eea <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2eea:	fc 01       	movw	r30, r24
    2eec:	75 8f       	std	Z+29, r23	; 0x1d
    2eee:	64 8f       	std	Z+28, r22	; 0x1c
}
    2ef0:	08 95       	ret

00002ef2 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	77 8f       	std	Z+31, r23	; 0x1f
    2ef6:	66 8f       	std	Z+30, r22	; 0x1e
}
    2ef8:	08 95       	ret

00002efa <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    2f00:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    2f02:	1f a2       	lds	r17, 0x9f
    2f04:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2f06:	bc 01       	movw	r22, r24
    2f08:	68 5d       	subi	r22, 0xD8	; 216
    2f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0c:	88 51       	subi	r24, 0x18	; 24
    2f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f10:	40 ec       	ldi	r20, 0xC0	; 192
    2f12:	0e 94 f7 14 	call	0x29ee	; 0x29ee <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2f16:	1b 82       	std	Y+3, r1	; 0x03
    2f18:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2f1a:	1d 82       	std	Y+5, r1	; 0x05
    2f1c:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2f1e:	1f 82       	std	Y+7, r1	; 0x07
    2f20:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    2f22:	19 86       	std	Y+9, r1	; 0x09
    2f24:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2f26:	1b 86       	std	Y+11, r1	; 0x0b
    2f28:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2f2a:	1d 86       	std	Y+13, r1	; 0x0d
    2f2c:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2f2e:	1f 86       	std	Y+15, r1	; 0x0f
    2f30:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    2f32:	19 8a       	std	Y+17, r1	; 0x11
    2f34:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2f36:	1b 8a       	std	Y+19, r1	; 0x13
    2f38:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2f3a:	1d 8a       	std	Y+21, r1	; 0x15
    2f3c:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2f3e:	1f 8a       	std	Y+23, r1	; 0x17
    2f40:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    2f42:	19 8e       	std	Y+25, r1	; 0x19
    2f44:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2f46:	1b 8e       	std	Y+27, r1	; 0x1b
    2f48:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2f4a:	1d 8e       	std	Y+29, r1	; 0x1d
    2f4c:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2f4e:	1f 8e       	std	Y+31, r1	; 0x1f
    2f50:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    2f52:	19 a2       	lds	r17, 0x99
    2f54:	18 a2       	lds	r17, 0x98
}
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	08 95       	ret

00002f5c <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2f5c:	ef 92       	push	r14
    2f5e:	ff 92       	push	r15
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2f6a:	66 23       	and	r22, r22
    2f6c:	99 f0       	breq	.+38     	; 0x2f94 <midi_device_input+0x38>
    2f6e:	04 2f       	mov	r16, r20
    2f70:	15 2f       	mov	r17, r21
    2f72:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    2f74:	0f 2e       	mov	r0, r31
    2f76:	f8 ee       	ldi	r31, 0xE8	; 232
    2f78:	ef 2e       	mov	r14, r31
    2f7a:	ff 24       	eor	r15, r15
    2f7c:	f0 2d       	mov	r31, r0
    2f7e:	e8 0e       	add	r14, r24
    2f80:	f9 1e       	adc	r15, r25
    2f82:	f8 01       	movw	r30, r16
    2f84:	61 91       	ld	r22, Z+
    2f86:	8f 01       	movw	r16, r30
    2f88:	c7 01       	movw	r24, r14
    2f8a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2f8e:	cf 5f       	subi	r28, 0xFF	; 255
    2f90:	cd 17       	cp	r28, r29
    2f92:	b9 f7       	brne	.-18     	; 0x2f82 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	ff 90       	pop	r15
    2f9e:	ef 90       	pop	r14
    2fa0:	08 95       	ret

00002fa2 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	71 83       	std	Z+1, r23	; 0x01
    2fa6:	60 83       	st	Z, r22
}
    2fa8:	08 95       	ret

00002faa <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    2faa:	fc 01       	movw	r30, r24
    2fac:	71 a3       	lds	r23, 0x51
    2fae:	60 a3       	lds	r22, 0x50
}
    2fb0:	08 95       	ret

00002fb2 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    2fb2:	af 92       	push	r10
    2fb4:	bf 92       	push	r11
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <midi_input_callbacks+0x16>
    2fc8:	0f 92       	push	r0
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	6c 01       	movw	r12, r24
    2fd0:	5b 01       	movw	r10, r22
    2fd2:	f4 2e       	mov	r15, r20
    2fd4:	e2 2e       	mov	r14, r18
    2fd6:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2fd8:	dc 01       	movw	r26, r24
    2fda:	95 96       	adiw	r26, 0x25	; 37
    2fdc:	8c 91       	ld	r24, X
    2fde:	95 97       	sbiw	r26, 0x25	; 37
    2fe0:	84 30       	cpi	r24, 0x04	; 4
    2fe2:	e9 f4       	brne	.+58     	; 0x301e <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    2fe4:	5a 96       	adiw	r26, 0x1a	; 26
    2fe6:	ed 91       	ld	r30, X+
    2fe8:	fc 91       	ld	r31, X
    2fea:	5b 97       	sbiw	r26, 0x1b	; 27
    2fec:	30 97       	sbiw	r30, 0x00	; 0
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <midi_input_callbacks+0x40>
    2ff0:	ee c0       	rjmp	.+476    	; 0x31ce <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	63 e0       	ldi	r22, 0x03	; 3
    2ff8:	70 e0       	ldi	r23, 0x00	; 0
    2ffa:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    2ffe:	cb 01       	movw	r24, r22
    3000:	88 0f       	add	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	68 0f       	add	r22, r24
    3006:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    3008:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    300a:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    300c:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    300e:	4a 2d       	mov	r20, r10
    3010:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    3012:	c6 01       	movw	r24, r12
    3014:	9e 01       	movw	r18, r28
    3016:	2f 5f       	subi	r18, 0xFF	; 255
    3018:	3f 4f       	sbci	r19, 0xFF	; 255
    301a:	09 95       	icall
    301c:	c8 c0       	rjmp	.+400    	; 0x31ae <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    301e:	62 30       	cpi	r22, 0x02	; 2
    3020:	71 05       	cpc	r23, r1
    3022:	09 f4       	brne	.+2      	; 0x3026 <midi_input_callbacks+0x74>
    3024:	5f c0       	rjmp	.+190    	; 0x30e4 <midi_input_callbacks+0x132>
    3026:	63 30       	cpi	r22, 0x03	; 3
    3028:	71 05       	cpc	r23, r1
    302a:	29 f0       	breq	.+10     	; 0x3036 <midi_input_callbacks+0x84>
    302c:	61 30       	cpi	r22, 0x01	; 1
    302e:	71 05       	cpc	r23, r1
    3030:	09 f0       	breq	.+2      	; 0x3034 <midi_input_callbacks+0x82>
    3032:	b3 c0       	rjmp	.+358    	; 0x319a <midi_input_callbacks+0x1e8>
    3034:	99 c0       	rjmp	.+306    	; 0x3168 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3036:	84 2f       	mov	r24, r20
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	80 7f       	andi	r24, 0xF0	; 240
    303c:	90 70       	andi	r25, 0x00	; 0
    303e:	80 3a       	cpi	r24, 0xA0	; 160
    3040:	91 05       	cpc	r25, r1
    3042:	29 f1       	breq	.+74     	; 0x308e <midi_input_callbacks+0xdc>
    3044:	81 3a       	cpi	r24, 0xA1	; 161
    3046:	91 05       	cpc	r25, r1
    3048:	3c f4       	brge	.+14     	; 0x3058 <midi_input_callbacks+0xa6>
    304a:	80 38       	cpi	r24, 0x80	; 128
    304c:	91 05       	cpc	r25, r1
    304e:	c9 f0       	breq	.+50     	; 0x3082 <midi_input_callbacks+0xd0>
    3050:	80 39       	cpi	r24, 0x90	; 144
    3052:	91 05       	cpc	r25, r1
    3054:	91 f5       	brne	.+100    	; 0x30ba <midi_input_callbacks+0x108>
    3056:	0f c0       	rjmp	.+30     	; 0x3076 <midi_input_callbacks+0xc4>
    3058:	80 3e       	cpi	r24, 0xE0	; 224
    305a:	91 05       	cpc	r25, r1
    305c:	f1 f0       	breq	.+60     	; 0x309a <midi_input_callbacks+0xe8>
    305e:	80 3f       	cpi	r24, 0xF0	; 240
    3060:	91 05       	cpc	r25, r1
    3062:	09 f1       	breq	.+66     	; 0x30a6 <midi_input_callbacks+0xf4>
    3064:	80 3b       	cpi	r24, 0xB0	; 176
    3066:	91 05       	cpc	r25, r1
    3068:	41 f5       	brne	.+80     	; 0x30ba <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    306a:	d6 01       	movw	r26, r12
    306c:	12 96       	adiw	r26, 0x02	; 2
    306e:	ed 91       	ld	r30, X+
    3070:	fc 91       	ld	r31, X
    3072:	13 97       	sbiw	r26, 0x03	; 3
              break;
    3074:	24 c0       	rjmp	.+72     	; 0x30be <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    3076:	d6 01       	movw	r26, r12
    3078:	14 96       	adiw	r26, 0x04	; 4
    307a:	ed 91       	ld	r30, X+
    307c:	fc 91       	ld	r31, X
    307e:	15 97       	sbiw	r26, 0x05	; 5
              break;
    3080:	1e c0       	rjmp	.+60     	; 0x30be <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    3082:	d6 01       	movw	r26, r12
    3084:	16 96       	adiw	r26, 0x06	; 6
    3086:	ed 91       	ld	r30, X+
    3088:	fc 91       	ld	r31, X
    308a:	17 97       	sbiw	r26, 0x07	; 7
              break;
    308c:	18 c0       	rjmp	.+48     	; 0x30be <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    308e:	d6 01       	movw	r26, r12
    3090:	18 96       	adiw	r26, 0x08	; 8
    3092:	ed 91       	ld	r30, X+
    3094:	fc 91       	ld	r31, X
    3096:	19 97       	sbiw	r26, 0x09	; 9
              break;
    3098:	12 c0       	rjmp	.+36     	; 0x30be <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    309a:	d6 01       	movw	r26, r12
    309c:	1a 96       	adiw	r26, 0x0a	; 10
    309e:	ed 91       	ld	r30, X+
    30a0:	fc 91       	ld	r31, X
    30a2:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    30a4:	0c c0       	rjmp	.+24     	; 0x30be <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    30a6:	b2 ef       	ldi	r27, 0xF2	; 242
    30a8:	4b 17       	cp	r20, r27
    30aa:	09 f0       	breq	.+2      	; 0x30ae <midi_input_callbacks+0xfc>
    30ac:	90 c0       	rjmp	.+288    	; 0x31ce <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    30ae:	d6 01       	movw	r26, r12
    30b0:	1c 96       	adiw	r26, 0x0c	; 12
    30b2:	ed 91       	ld	r30, X+
    30b4:	fc 91       	ld	r31, X
    30b6:	1d 97       	sbiw	r26, 0x0d	; 13
    30b8:	02 c0       	rjmp	.+4      	; 0x30be <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    30ba:	e0 e0       	ldi	r30, 0x00	; 0
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    30be:	30 97       	sbiw	r30, 0x00	; 0
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <midi_input_callbacks+0x112>
    30c2:	85 c0       	rjmp	.+266    	; 0x31ce <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    30c4:	b2 ef       	ldi	r27, 0xF2	; 242
    30c6:	fb 16       	cp	r15, r27
    30c8:	31 f4       	brne	.+12     	; 0x30d6 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    30ca:	c6 01       	movw	r24, r12
    30cc:	62 ef       	ldi	r22, 0xF2	; 242
    30ce:	4e 2d       	mov	r20, r14
    30d0:	21 2f       	mov	r18, r17
    30d2:	09 95       	icall
    30d4:	6c c0       	rjmp	.+216    	; 0x31ae <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    30d6:	6f 2d       	mov	r22, r15
    30d8:	6f 70       	andi	r22, 0x0F	; 15
    30da:	c6 01       	movw	r24, r12
    30dc:	4e 2d       	mov	r20, r14
    30de:	21 2f       	mov	r18, r17
    30e0:	09 95       	icall
    30e2:	65 c0       	rjmp	.+202    	; 0x31ae <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    30e4:	84 2f       	mov	r24, r20
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	80 7f       	andi	r24, 0xF0	; 240
    30ea:	90 70       	andi	r25, 0x00	; 0
    30ec:	80 3d       	cpi	r24, 0xD0	; 208
    30ee:	91 05       	cpc	r25, r1
    30f0:	61 f0       	breq	.+24     	; 0x310a <midi_input_callbacks+0x158>
    30f2:	80 3f       	cpi	r24, 0xF0	; 240
    30f4:	91 05       	cpc	r25, r1
    30f6:	79 f0       	breq	.+30     	; 0x3116 <midi_input_callbacks+0x164>
    30f8:	80 3c       	cpi	r24, 0xC0	; 192
    30fa:	91 05       	cpc	r25, r1
    30fc:	f9 f4       	brne	.+62     	; 0x313c <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    30fe:	d6 01       	movw	r26, r12
    3100:	1e 96       	adiw	r26, 0x0e	; 14
    3102:	ed 91       	ld	r30, X+
    3104:	fc 91       	ld	r31, X
    3106:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    3108:	1b c0       	rjmp	.+54     	; 0x3140 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    310a:	d6 01       	movw	r26, r12
    310c:	50 96       	adiw	r26, 0x10	; 16
    310e:	ed 91       	ld	r30, X+
    3110:	fc 91       	ld	r31, X
    3112:	51 97       	sbiw	r26, 0x11	; 17
              break;
    3114:	15 c0       	rjmp	.+42     	; 0x3140 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    3116:	b3 ef       	ldi	r27, 0xF3	; 243
    3118:	4b 17       	cp	r20, r27
    311a:	31 f4       	brne	.+12     	; 0x3128 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    311c:	d6 01       	movw	r26, r12
    311e:	52 96       	adiw	r26, 0x12	; 18
    3120:	ed 91       	ld	r30, X+
    3122:	fc 91       	ld	r31, X
    3124:	53 97       	sbiw	r26, 0x13	; 19
    3126:	0c c0       	rjmp	.+24     	; 0x3140 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    3128:	b1 ef       	ldi	r27, 0xF1	; 241
    312a:	4b 17       	cp	r20, r27
    312c:	09 f0       	breq	.+2      	; 0x3130 <midi_input_callbacks+0x17e>
    312e:	4f c0       	rjmp	.+158    	; 0x31ce <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    3130:	d6 01       	movw	r26, r12
    3132:	54 96       	adiw	r26, 0x14	; 20
    3134:	ed 91       	ld	r30, X+
    3136:	fc 91       	ld	r31, X
    3138:	55 97       	sbiw	r26, 0x15	; 21
    313a:	02 c0       	rjmp	.+4      	; 0x3140 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    313c:	e0 e0       	ldi	r30, 0x00	; 0
    313e:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    3140:	30 97       	sbiw	r30, 0x00	; 0
    3142:	09 f4       	brne	.+2      	; 0x3146 <midi_input_callbacks+0x194>
    3144:	44 c0       	rjmp	.+136    	; 0x31ce <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    3146:	b3 ef       	ldi	r27, 0xF3	; 243
    3148:	fb 16       	cp	r15, r27
    314a:	19 f0       	breq	.+6      	; 0x3152 <midi_input_callbacks+0x1a0>
    314c:	81 ef       	ldi	r24, 0xF1	; 241
    314e:	f8 16       	cp	r15, r24
    3150:	29 f4       	brne	.+10     	; 0x315c <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    3152:	c6 01       	movw	r24, r12
    3154:	6f 2d       	mov	r22, r15
    3156:	4e 2d       	mov	r20, r14
    3158:	09 95       	icall
    315a:	29 c0       	rjmp	.+82     	; 0x31ae <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    315c:	6f 2d       	mov	r22, r15
    315e:	6f 70       	andi	r22, 0x0F	; 15
    3160:	c6 01       	movw	r24, r12
    3162:	4e 2d       	mov	r20, r14
    3164:	09 95       	icall
    3166:	23 c0       	rjmp	.+70     	; 0x31ae <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    3168:	84 2f       	mov	r24, r20
    316a:	0e 94 76 15 	call	0x2aec	; 0x2aec <midi_is_realtime>
    316e:	88 23       	and	r24, r24
    3170:	31 f0       	breq	.+12     	; 0x317e <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    3172:	d6 01       	movw	r26, r12
    3174:	56 96       	adiw	r26, 0x16	; 22
    3176:	ed 91       	ld	r30, X+
    3178:	fc 91       	ld	r31, X
    317a:	57 97       	sbiw	r26, 0x17	; 23
    317c:	08 c0       	rjmp	.+16     	; 0x318e <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    317e:	b6 ef       	ldi	r27, 0xF6	; 246
    3180:	fb 16       	cp	r15, r27
    3182:	29 f5       	brne	.+74     	; 0x31ce <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    3184:	d6 01       	movw	r26, r12
    3186:	58 96       	adiw	r26, 0x18	; 24
    3188:	ed 91       	ld	r30, X+
    318a:	fc 91       	ld	r31, X
    318c:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    318e:	30 97       	sbiw	r30, 0x00	; 0
    3190:	f1 f0       	breq	.+60     	; 0x31ce <midi_input_callbacks+0x21c>
            func(device, byte0);
    3192:	c6 01       	movw	r24, r12
    3194:	6f 2d       	mov	r22, r15
    3196:	09 95       	icall
    3198:	0a c0       	rjmp	.+20     	; 0x31ae <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    319a:	64 30       	cpi	r22, 0x04	; 4
    319c:	71 05       	cpc	r23, r1
    319e:	a8 f4       	brcc	.+42     	; 0x31ca <midi_input_callbacks+0x218>
    31a0:	16 c0       	rjmp	.+44     	; 0x31ce <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    31a2:	c6 01       	movw	r24, r12
    31a4:	b5 01       	movw	r22, r10
    31a6:	4f 2d       	mov	r20, r15
    31a8:	2e 2d       	mov	r18, r14
    31aa:	01 2f       	mov	r16, r17
    31ac:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    31ae:	d6 01       	movw	r26, r12
    31b0:	5e 96       	adiw	r26, 0x1e	; 30
    31b2:	ed 91       	ld	r30, X+
    31b4:	fc 91       	ld	r31, X
    31b6:	5f 97       	sbiw	r26, 0x1f	; 31
    31b8:	30 97       	sbiw	r30, 0x00	; 0
    31ba:	89 f0       	breq	.+34     	; 0x31de <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    31bc:	c6 01       	movw	r24, r12
    31be:	b5 01       	movw	r22, r10
    31c0:	4f 2d       	mov	r20, r15
    31c2:	2e 2d       	mov	r18, r14
    31c4:	01 2f       	mov	r16, r17
    31c6:	09 95       	icall
    31c8:	0a c0       	rjmp	.+20     	; 0x31de <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    31ca:	aa 24       	eor	r10, r10
    31cc:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    31ce:	d6 01       	movw	r26, r12
    31d0:	5c 96       	adiw	r26, 0x1c	; 28
    31d2:	ed 91       	ld	r30, X+
    31d4:	fc 91       	ld	r31, X
    31d6:	5d 97       	sbiw	r26, 0x1d	; 29
    31d8:	30 97       	sbiw	r30, 0x00	; 0
    31da:	19 f7       	brne	.-58     	; 0x31a2 <midi_input_callbacks+0x1f0>
    31dc:	e8 cf       	rjmp	.-48     	; 0x31ae <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	ff 90       	pop	r15
    31ee:	ef 90       	pop	r14
    31f0:	df 90       	pop	r13
    31f2:	cf 90       	pop	r12
    31f4:	bf 90       	pop	r11
    31f6:	af 90       	pop	r10
    31f8:	08 95       	ret

000031fa <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    31fa:	ef 92       	push	r14
    31fc:	ff 92       	push	r15
    31fe:	0f 93       	push	r16
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	7c 01       	movw	r14, r24
    3206:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    3208:	86 2f       	mov	r24, r22
    320a:	0e 94 76 15 	call	0x2aec	; 0x2aec <midi_is_realtime>
    320e:	88 23       	and	r24, r24
    3210:	91 f0       	breq	.+36     	; 0x3236 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    3212:	d7 01       	movw	r26, r14
    3214:	95 96       	adiw	r26, 0x25	; 37
    3216:	dc 91       	ld	r29, X
    3218:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	95 96       	adiw	r26, 0x25	; 37
    321e:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    3220:	c7 01       	movw	r24, r14
    3222:	61 e0       	ldi	r22, 0x01	; 1
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	4c 2f       	mov	r20, r28
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	00 e0       	ldi	r16, 0x00	; 0
    322c:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <midi_input_callbacks>
    device->input_state = state;
    3230:	f7 01       	movw	r30, r14
    3232:	d5 a3       	lds	r29, 0x55
    3234:	b7 c0       	rjmp	.+366    	; 0x33a4 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    3236:	8c 2f       	mov	r24, r28
    3238:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <midi_is_statusbyte>
    323c:	88 23       	and	r24, r24
    323e:	09 f4       	brne	.+2      	; 0x3242 <midi_process_byte+0x48>
    3240:	73 c0       	rjmp	.+230    	; 0x3328 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    3242:	d7 01       	movw	r26, r14
    3244:	95 96       	adiw	r26, 0x25	; 37
    3246:	8c 91       	ld	r24, X
    3248:	95 97       	sbiw	r26, 0x25	; 37
    324a:	84 30       	cpi	r24, 0x04	; 4
    324c:	49 f0       	breq	.+18     	; 0x3260 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    324e:	92 96       	adiw	r26, 0x22	; 34
    3250:	cc 93       	st	X, r28
    3252:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	97 96       	adiw	r26, 0x27	; 39
    325a:	9c 93       	st	X, r25
    325c:	8e 93       	st	-X, r24
    325e:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    3260:	8c 2f       	mov	r24, r28
    3262:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <midi_packet_length>
    3266:	81 30       	cpi	r24, 0x01	; 1
    3268:	41 f0       	breq	.+16     	; 0x327a <midi_process_byte+0x80>
    326a:	81 30       	cpi	r24, 0x01	; 1
    326c:	00 f1       	brcs	.+64     	; 0x32ae <midi_process_byte+0xb4>
    326e:	82 30       	cpi	r24, 0x02	; 2
    3270:	a1 f0       	breq	.+40     	; 0x329a <midi_process_byte+0xa0>
    3272:	83 30       	cpi	r24, 0x03	; 3
    3274:	09 f0       	breq	.+2      	; 0x3278 <midi_process_byte+0x7e>
    3276:	4f c0       	rjmp	.+158    	; 0x3316 <midi_process_byte+0x11c>
    3278:	14 c0       	rjmp	.+40     	; 0x32a2 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	f7 01       	movw	r30, r14
    327e:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3280:	c7 01       	movw	r24, r14
    3282:	61 e0       	ldi	r22, 0x01	; 1
    3284:	70 e0       	ldi	r23, 0x00	; 0
    3286:	4c 2f       	mov	r20, r28
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	00 e0       	ldi	r16, 0x00	; 0
    328c:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <midi_input_callbacks>
        device->input_state = IDLE;
    3290:	d7 01       	movw	r26, r14
    3292:	95 96       	adiw	r26, 0x25	; 37
    3294:	1c 92       	st	X, r1
    3296:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3298:	85 c0       	rjmp	.+266    	; 0x33a4 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	f7 01       	movw	r30, r14
    329e:	85 a3       	lds	r24, 0x55
        break;
    32a0:	81 c0       	rjmp	.+258    	; 0x33a4 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    32a2:	83 e0       	ldi	r24, 0x03	; 3
    32a4:	d7 01       	movw	r26, r14
    32a6:	95 96       	adiw	r26, 0x25	; 37
    32a8:	8c 93       	st	X, r24
    32aa:	95 97       	sbiw	r26, 0x25	; 37
        break;
    32ac:	7b c0       	rjmp	.+246    	; 0x33a4 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    32ae:	c0 3f       	cpi	r28, 0xF0	; 240
    32b0:	19 f0       	breq	.+6      	; 0x32b8 <midi_process_byte+0xbe>
    32b2:	c7 3f       	cpi	r28, 0xF7	; 247
    32b4:	59 f5       	brne	.+86     	; 0x330c <midi_process_byte+0x112>
    32b6:	0a c0       	rjmp	.+20     	; 0x32cc <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    32b8:	84 e0       	ldi	r24, 0x04	; 4
    32ba:	f7 01       	movw	r30, r14
    32bc:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    32be:	80 ef       	ldi	r24, 0xF0	; 240
    32c0:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	97 a3       	lds	r25, 0x57
    32c8:	86 a3       	lds	r24, 0x56
            break;
    32ca:	6c c0       	rjmp	.+216    	; 0x33a4 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    32cc:	d7 01       	movw	r26, r14
    32ce:	96 96       	adiw	r26, 0x26	; 38
    32d0:	2d 91       	ld	r18, X+
    32d2:	3c 91       	ld	r19, X
    32d4:	97 97       	sbiw	r26, 0x27	; 39
    32d6:	c9 01       	movw	r24, r18
    32d8:	63 e0       	ldi	r22, 0x03	; 3
    32da:	70 e0       	ldi	r23, 0x00	; 0
    32dc:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    32e0:	f7 01       	movw	r30, r14
    32e2:	e8 0f       	add	r30, r24
    32e4:	f9 1f       	adc	r31, r25
    32e6:	87 ef       	ldi	r24, 0xF7	; 247
    32e8:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    32ea:	b9 01       	movw	r22, r18
    32ec:	6f 5f       	subi	r22, 0xFF	; 255
    32ee:	7f 4f       	sbci	r23, 0xFF	; 255
    32f0:	f7 01       	movw	r30, r14
    32f2:	77 a3       	lds	r23, 0x57
    32f4:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    32f6:	c7 01       	movw	r24, r14
    32f8:	42 a1       	lds	r20, 0x42
    32fa:	23 a1       	lds	r18, 0x43
    32fc:	04 a1       	lds	r16, 0x44
    32fe:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3302:	d7 01       	movw	r26, r14
    3304:	95 96       	adiw	r26, 0x25	; 37
    3306:	1c 92       	st	X, r1
    3308:	95 97       	sbiw	r26, 0x25	; 37
            break;
    330a:	4c c0       	rjmp	.+152    	; 0x33a4 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    330c:	f7 01       	movw	r30, r14
    330e:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    3310:	17 a2       	lds	r17, 0x97
    3312:	16 a2       	lds	r17, 0x96
    3314:	47 c0       	rjmp	.+142    	; 0x33a4 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    3316:	d7 01       	movw	r26, r14
    3318:	95 96       	adiw	r26, 0x25	; 37
    331a:	1c 92       	st	X, r1
    331c:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    331e:	97 96       	adiw	r26, 0x27	; 39
    3320:	1c 92       	st	X, r1
    3322:	1e 92       	st	-X, r1
    3324:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3326:	3e c0       	rjmp	.+124    	; 0x33a4 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    3328:	f7 01       	movw	r30, r14
    332a:	25 a1       	lds	r18, 0x45
    332c:	22 23       	and	r18, r18
    332e:	d1 f1       	breq	.+116    	; 0x33a4 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    3330:	06 a0       	lds	r16, 0x86
    3332:	f7 a1       	lds	r31, 0x47
    3334:	e0 2d       	mov	r30, r0
    3336:	cf 01       	movw	r24, r30
    3338:	63 e0       	ldi	r22, 0x03	; 3
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    3340:	ac 01       	movw	r20, r24
    3342:	8e 0d       	add	r24, r14
    3344:	9f 1d       	adc	r25, r15
    3346:	dc 01       	movw	r26, r24
    3348:	92 96       	adiw	r26, 0x22	; 34
    334a:	cc 93       	st	X, r28
    334c:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    334e:	bf 01       	movw	r22, r30
    3350:	6f 5f       	subi	r22, 0xFF	; 255
    3352:	7f 4f       	sbci	r23, 0xFF	; 255
    3354:	f7 01       	movw	r30, r14
    3356:	77 a3       	lds	r23, 0x57
    3358:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    335a:	41 30       	cpi	r20, 0x01	; 1
    335c:	51 05       	cpc	r21, r1
    335e:	91 f0       	breq	.+36     	; 0x3384 <midi_process_byte+0x18a>
    3360:	42 30       	cpi	r20, 0x02	; 2
    3362:	51 05       	cpc	r21, r1
    3364:	f9 f4       	brne	.+62     	; 0x33a4 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    3366:	c7 01       	movw	r24, r14
    3368:	42 a1       	lds	r20, 0x42
    336a:	23 a1       	lds	r18, 0x43
    336c:	04 a1       	lds	r16, 0x44
    336e:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    3372:	f7 01       	movw	r30, r14
    3374:	85 a1       	lds	r24, 0x45
    3376:	84 30       	cpi	r24, 0x04	; 4
    3378:	a9 f0       	breq	.+42     	; 0x33a4 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	97 a3       	lds	r25, 0x57
    3380:	86 a3       	lds	r24, 0x56
    3382:	10 c0       	rjmp	.+32     	; 0x33a4 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3384:	22 30       	cpi	r18, 0x02	; 2
    3386:	71 f4       	brne	.+28     	; 0x33a4 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3388:	c7 01       	movw	r24, r14
    338a:	42 a1       	lds	r20, 0x42
    338c:	23 a1       	lds	r18, 0x43
    338e:	00 e0       	ldi	r16, 0x00	; 0
    3390:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3394:	f7 01       	movw	r30, r14
    3396:	85 a1       	lds	r24, 0x45
    3398:	84 30       	cpi	r24, 0x04	; 4
    339a:	21 f0       	breq	.+8      	; 0x33a4 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	97 a3       	lds	r25, 0x57
    33a2:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	0f 91       	pop	r16
    33aa:	ff 90       	pop	r15
    33ac:	ef 90       	pop	r14
    33ae:	08 95       	ret

000033b0 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    33b0:	cf 92       	push	r12
    33b2:	df 92       	push	r13
    33b4:	ef 92       	push	r14
    33b6:	ff 92       	push	r15
    33b8:	0f 93       	push	r16
    33ba:	1f 93       	push	r17
    33bc:	cf 93       	push	r28
    33be:	df 93       	push	r29
    33c0:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    33c2:	dc 01       	movw	r26, r24
    33c4:	90 96       	adiw	r26, 0x20	; 32
    33c6:	ed 91       	ld	r30, X+
    33c8:	fc 91       	ld	r31, X
    33ca:	91 97       	sbiw	r26, 0x21	; 33
    33cc:	30 97       	sbiw	r30, 0x00	; 0
    33ce:	09 f0       	breq	.+2      	; 0x33d2 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    33d0:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    33d2:	0f 2e       	mov	r0, r31
    33d4:	f8 ee       	ldi	r31, 0xE8	; 232
    33d6:	ef 2e       	mov	r14, r31
    33d8:	ff 24       	eor	r15, r15
    33da:	f0 2d       	mov	r31, r0
    33dc:	ec 0c       	add	r14, r12
    33de:	fd 1c       	adc	r15, r13
    33e0:	c7 01       	movw	r24, r14
    33e2:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    33e6:	c8 2f       	mov	r28, r24
    33e8:	d0 e0       	ldi	r29, 0x00	; 0
    33ea:	20 97       	sbiw	r28, 0x00	; 0
    33ec:	99 f0       	breq	.+38     	; 0x3414 <midi_device_process+0x64>
    33ee:	00 e0       	ldi	r16, 0x00	; 0
    33f0:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    33f2:	c7 01       	movw	r24, r14
    33f4:	60 e0       	ldi	r22, 0x00	; 0
    33f6:	0e 94 42 15 	call	0x2a84	; 0x2a84 <bytequeue_get>
    33fa:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    33fc:	c6 01       	movw	r24, r12
    33fe:	0e 94 fd 18 	call	0x31fa	; 0x31fa <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3402:	c7 01       	movw	r24, r14
    3404:	61 e0       	ldi	r22, 0x01	; 1
    3406:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    340a:	0f 5f       	subi	r16, 0xFF	; 255
    340c:	1f 4f       	sbci	r17, 0xFF	; 255
    340e:	0c 17       	cp	r16, r28
    3410:	1d 07       	cpc	r17, r29
    3412:	78 f3       	brcs	.-34     	; 0x33f2 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    3414:	df 91       	pop	r29
    3416:	cf 91       	pop	r28
    3418:	1f 91       	pop	r17
    341a:	0f 91       	pop	r16
    341c:	ff 90       	pop	r15
    341e:	ef 90       	pop	r14
    3420:	df 90       	pop	r13
    3422:	cf 90       	pop	r12
    3424:	08 95       	ret

00003426 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3426:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    3428:	67 e0       	ldi	r22, 0x07	; 7
    342a:	70 e0       	ldi	r23, 0x00	; 0
    342c:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    3430:	48 2f       	mov	r20, r24
   if (remainder)
    3432:	88 23       	and	r24, r24
    3434:	81 f0       	breq	.+32     	; 0x3456 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    3436:	c9 01       	movw	r24, r18
    3438:	67 e0       	ldi	r22, 0x07	; 7
    343a:	70 e0       	ldi	r23, 0x00	; 0
    343c:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    3440:	cb 01       	movw	r24, r22
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	01 96       	adiw	r24, 0x01	; 1
    3450:	84 0f       	add	r24, r20
    3452:	91 1d       	adc	r25, r1
    3454:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3456:	c9 01       	movw	r24, r18
    3458:	67 e0       	ldi	r22, 0x07	; 7
    345a:	70 e0       	ldi	r23, 0x00	; 0
    345c:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    3460:	cb 01       	movw	r24, r22
    3462:	88 0f       	add	r24, r24
    3464:	99 1f       	adc	r25, r25
    3466:	88 0f       	add	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	88 0f       	add	r24, r24
    346c:	99 1f       	adc	r25, r25
}
    346e:	08 95       	ret

00003470 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3470:	48 2f       	mov	r20, r24
    3472:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3474:	a1 f0       	breq	.+40     	; 0x349e <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3476:	9c 01       	movw	r18, r24
    3478:	36 95       	lsr	r19
    347a:	27 95       	ror	r18
    347c:	36 95       	lsr	r19
    347e:	27 95       	ror	r18
    3480:	36 95       	lsr	r19
    3482:	27 95       	ror	r18
    3484:	c9 01       	movw	r24, r18
    3486:	88 0f       	add	r24, r24
    3488:	99 1f       	adc	r25, r25
    348a:	88 0f       	add	r24, r24
    348c:	99 1f       	adc	r25, r25
    348e:	88 0f       	add	r24, r24
    3490:	99 1f       	adc	r25, r25
    3492:	82 1b       	sub	r24, r18
    3494:	93 0b       	sbc	r25, r19
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	84 0f       	add	r24, r20
    349a:	91 1d       	adc	r25, r1
    349c:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    349e:	9c 01       	movw	r18, r24
    34a0:	36 95       	lsr	r19
    34a2:	27 95       	ror	r18
    34a4:	36 95       	lsr	r19
    34a6:	27 95       	ror	r18
    34a8:	36 95       	lsr	r19
    34aa:	27 95       	ror	r18
    34ac:	c9 01       	movw	r24, r18
    34ae:	88 0f       	add	r24, r24
    34b0:	99 1f       	adc	r25, r25
    34b2:	88 0f       	add	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	82 1b       	sub	r24, r18
    34bc:	93 0b       	sbc	r25, r19
}
    34be:	08 95       	ret

000034c0 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    34c0:	2f 92       	push	r2
    34c2:	3f 92       	push	r3
    34c4:	4f 92       	push	r4
    34c6:	5f 92       	push	r5
    34c8:	6f 92       	push	r6
    34ca:	7f 92       	push	r7
    34cc:	8f 92       	push	r8
    34ce:	9f 92       	push	r9
    34d0:	af 92       	push	r10
    34d2:	bf 92       	push	r11
    34d4:	cf 92       	push	r12
    34d6:	df 92       	push	r13
    34d8:	ef 92       	push	r14
    34da:	ff 92       	push	r15
    34dc:	0f 93       	push	r16
    34de:	1f 93       	push	r17
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <sysex_encode+0x26>
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <sysex_encode+0x28>
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <sysex_encode+0x2a>
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	1c 01       	movw	r2, r24
    34f0:	7a 83       	std	Y+2, r23	; 0x02
    34f2:	69 83       	std	Y+1, r22	; 0x01
    34f4:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    34f6:	ca 01       	movw	r24, r20
    34f8:	67 e0       	ldi	r22, 0x07	; 7
    34fa:	70 e0       	ldi	r23, 0x00	; 0
    34fc:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    3500:	2b 01       	movw	r4, r22
    3502:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3504:	61 15       	cp	r22, r1
    3506:	71 05       	cpc	r23, r1
    3508:	b1 f1       	breq	.+108    	; 0x3576 <sysex_encode+0xb6>
    350a:	81 01       	movw	r16, r2
    350c:	e9 80       	ldd	r14, Y+1	; 0x01
    350e:	fa 80       	ldd	r15, Y+2	; 0x02
    3510:	cc 24       	eor	r12, r12
    3512:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3514:	88 24       	eor	r8, r8
    3516:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3518:	1e 83       	std	Y+6, r17	; 0x06
    351a:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    351c:	f8 01       	movw	r30, r16
    351e:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3520:	fc 82       	std	Y+4, r15	; 0x04
    3522:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3524:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3526:	ab 81       	ldd	r26, Y+3	; 0x03
    3528:	bc 81       	ldd	r27, Y+4	; 0x04
    352a:	2d 91       	ld	r18, X+
    352c:	bc 83       	std	Y+4, r27	; 0x04
    352e:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3530:	4f 5f       	subi	r20, 0xFF	; 255
    3532:	5f 4f       	sbci	r21, 0xFF	; 255
    3534:	82 2f       	mov	r24, r18
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	80 78       	andi	r24, 0x80	; 128
    353a:	90 70       	andi	r25, 0x00	; 0
    353c:	bc 01       	movw	r22, r24
    353e:	04 2e       	mov	r0, r20
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <sysex_encode+0x86>
    3542:	75 95       	asr	r23
    3544:	67 95       	ror	r22
    3546:	0a 94       	dec	r0
    3548:	e2 f7       	brpl	.-8      	; 0x3542 <sysex_encode+0x82>
    354a:	ad 81       	ldd	r26, Y+5	; 0x05
    354c:	be 81       	ldd	r27, Y+6	; 0x06
    354e:	8c 91       	ld	r24, X
    3550:	86 2b       	or	r24, r22
    3552:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3554:	2f 77       	andi	r18, 0x7F	; 127
    3556:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3558:	47 30       	cpi	r20, 0x07	; 7
    355a:	51 05       	cpc	r21, r1
    355c:	21 f7       	brne	.-56     	; 0x3526 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    355e:	08 94       	sec
    3560:	c1 1c       	adc	r12, r1
    3562:	d1 1c       	adc	r13, r1
    3564:	08 5f       	subi	r16, 0xF8	; 248
    3566:	1f 4f       	sbci	r17, 0xFF	; 255
    3568:	e7 e0       	ldi	r30, 0x07	; 7
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	ee 0e       	add	r14, r30
    356e:	ff 1e       	adc	r15, r31
    3570:	ca 14       	cp	r12, r10
    3572:	db 04       	cpc	r13, r11
    3574:	89 f6       	brne	.-94     	; 0x3518 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3576:	c3 01       	movw	r24, r6
    3578:	67 e0       	ldi	r22, 0x07	; 7
    357a:	70 e0       	ldi	r23, 0x00	; 0
    357c:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
   if (remainder) {
    3580:	88 23       	and	r24, r24
    3582:	d9 f1       	breq	.+118    	; 0x35fa <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3584:	82 01       	movw	r16, r4
    3586:	00 0f       	add	r16, r16
    3588:	11 1f       	adc	r17, r17
    358a:	00 0f       	add	r16, r16
    358c:	11 1f       	adc	r17, r17
    358e:	00 0f       	add	r16, r16
    3590:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3592:	78 01       	movw	r14, r16
    3594:	e4 18       	sub	r14, r4
    3596:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3598:	d1 01       	movw	r26, r2
    359a:	a0 0f       	add	r26, r16
    359c:	b1 1f       	adc	r27, r17
    359e:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    35a0:	68 2f       	mov	r22, r24
    35a2:	70 e0       	ldi	r23, 0x00	; 0
    35a4:	61 15       	cp	r22, r1
    35a6:	71 05       	cpc	r23, r1
    35a8:	19 f1       	breq	.+70     	; 0x35f0 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    35aa:	e9 81       	ldd	r30, Y+1	; 0x01
    35ac:	fa 81       	ldd	r31, Y+2	; 0x02
    35ae:	ee 0e       	add	r14, r30
    35b0:	ff 1e       	adc	r15, r31
    35b2:	c8 01       	movw	r24, r16
    35b4:	01 96       	adiw	r24, 0x01	; 1
    35b6:	28 0e       	add	r2, r24
    35b8:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    35be:	f7 01       	movw	r30, r14
    35c0:	41 91       	ld	r20, Z+
    35c2:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    35c4:	2f 5f       	subi	r18, 0xFF	; 255
    35c6:	3f 4f       	sbci	r19, 0xFF	; 255
    35c8:	84 2f       	mov	r24, r20
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	80 78       	andi	r24, 0x80	; 128
    35ce:	90 70       	andi	r25, 0x00	; 0
    35d0:	02 2e       	mov	r0, r18
    35d2:	02 c0       	rjmp	.+4      	; 0x35d8 <sysex_encode+0x118>
    35d4:	95 95       	asr	r25
    35d6:	87 95       	ror	r24
    35d8:	0a 94       	dec	r0
    35da:	e2 f7       	brpl	.-8      	; 0x35d4 <sysex_encode+0x114>
    35dc:	9c 91       	ld	r25, X
    35de:	89 2b       	or	r24, r25
    35e0:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    35e2:	4f 77       	andi	r20, 0x7F	; 127
    35e4:	f1 01       	movw	r30, r2
    35e6:	41 93       	st	Z+, r20
    35e8:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    35ea:	26 17       	cp	r18, r22
    35ec:	37 07       	cpc	r19, r23
    35ee:	38 f3       	brcs	.-50     	; 0x35be <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    35f0:	c8 01       	movw	r24, r16
    35f2:	01 96       	adiw	r24, 0x01	; 1
    35f4:	86 0f       	add	r24, r22
    35f6:	97 1f       	adc	r25, r23
    35f8:	07 c0       	rjmp	.+14     	; 0x3608 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    35fa:	c2 01       	movw	r24, r4
    35fc:	88 0f       	add	r24, r24
    35fe:	99 1f       	adc	r25, r25
    3600:	88 0f       	add	r24, r24
    3602:	99 1f       	adc	r25, r25
    3604:	88 0f       	add	r24, r24
    3606:	99 1f       	adc	r25, r25
   }
}
    3608:	26 96       	adiw	r28, 0x06	; 6
    360a:	0f b6       	in	r0, 0x3f	; 63
    360c:	f8 94       	cli
    360e:	de bf       	out	0x3e, r29	; 62
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	cd bf       	out	0x3d, r28	; 61
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    361c:	ff 90       	pop	r15
    361e:	ef 90       	pop	r14
    3620:	df 90       	pop	r13
    3622:	cf 90       	pop	r12
    3624:	bf 90       	pop	r11
    3626:	af 90       	pop	r10
    3628:	9f 90       	pop	r9
    362a:	8f 90       	pop	r8
    362c:	7f 90       	pop	r7
    362e:	6f 90       	pop	r6
    3630:	5f 90       	pop	r5
    3632:	4f 90       	pop	r4
    3634:	3f 90       	pop	r3
    3636:	2f 90       	pop	r2
    3638:	08 95       	ret

0000363a <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    363a:	6f 92       	push	r6
    363c:	7f 92       	push	r7
    363e:	8f 92       	push	r8
    3640:	9f 92       	push	r9
    3642:	af 92       	push	r10
    3644:	bf 92       	push	r11
    3646:	cf 92       	push	r12
    3648:	df 92       	push	r13
    364a:	ef 92       	push	r14
    364c:	ff 92       	push	r15
    364e:	0f 93       	push	r16
    3650:	1f 93       	push	r17
    3652:	cf 93       	push	r28
    3654:	df 93       	push	r29
    3656:	3c 01       	movw	r6, r24
    3658:	4b 01       	movw	r8, r22
    365a:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    365c:	42 30       	cpi	r20, 0x02	; 2
    365e:	51 05       	cpc	r21, r1
    3660:	08 f4       	brcc	.+2      	; 0x3664 <sysex_decode+0x2a>
    3662:	6f c0       	rjmp	.+222    	; 0x3742 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3664:	7a 01       	movw	r14, r20
    3666:	f6 94       	lsr	r15
    3668:	e7 94       	ror	r14
    366a:	f6 94       	lsr	r15
    366c:	e7 94       	ror	r14
    366e:	f6 94       	lsr	r15
    3670:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3672:	e1 14       	cp	r14, r1
    3674:	f1 04       	cpc	r15, r1
    3676:	29 f1       	breq	.+74     	; 0x36c2 <sysex_decode+0x88>
    3678:	eb 01       	movw	r28, r22
    367a:	b3 01       	movw	r22, r6
    367c:	00 e0       	ldi	r16, 0x00	; 0
    367e:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3680:	cc 24       	eor	r12, r12
    3682:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3684:	de 01       	movw	r26, r28
    3686:	11 96       	adiw	r26, 0x01	; 1
    3688:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    368a:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    368c:	2d 91       	ld	r18, X+
    368e:	2f 77       	andi	r18, 0x7F	; 127
    3690:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3692:	4f 5f       	subi	r20, 0xFF	; 255
    3694:	5f 4f       	sbci	r21, 0xFF	; 255
    3696:	88 81       	ld	r24, Y
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	04 2e       	mov	r0, r20
    369c:	02 c0       	rjmp	.+4      	; 0x36a2 <sysex_decode+0x68>
    369e:	88 0f       	add	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	0a 94       	dec	r0
    36a4:	e2 f7       	brpl	.-8      	; 0x369e <sysex_decode+0x64>
    36a6:	80 78       	andi	r24, 0x80	; 128
    36a8:	28 2b       	or	r18, r24
    36aa:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    36ac:	47 30       	cpi	r20, 0x07	; 7
    36ae:	51 05       	cpc	r21, r1
    36b0:	69 f7       	brne	.-38     	; 0x368c <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    36b2:	0f 5f       	subi	r16, 0xFF	; 255
    36b4:	1f 4f       	sbci	r17, 0xFF	; 255
    36b6:	28 96       	adiw	r28, 0x08	; 8
    36b8:	69 5f       	subi	r22, 0xF9	; 249
    36ba:	7f 4f       	sbci	r23, 0xFF	; 255
    36bc:	0e 15       	cp	r16, r14
    36be:	1f 05       	cpc	r17, r15
    36c0:	09 f7       	brne	.-62     	; 0x3684 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    36c2:	5a 2d       	mov	r21, r10
    36c4:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    36c6:	99 f1       	breq	.+102    	; 0x372e <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    36c8:	e7 01       	movw	r28, r14
    36ca:	cc 0f       	add	r28, r28
    36cc:	dd 1f       	adc	r29, r29
    36ce:	cc 0f       	add	r28, r28
    36d0:	dd 1f       	adc	r29, r29
    36d2:	cc 0f       	add	r28, r28
    36d4:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    36d6:	8e 01       	movw	r16, r28
    36d8:	0e 19       	sub	r16, r14
    36da:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    36dc:	65 2f       	mov	r22, r21
    36de:	70 e0       	ldi	r23, 0x00	; 0
    36e0:	61 50       	subi	r22, 0x01	; 1
    36e2:	70 40       	sbci	r23, 0x00	; 0
    36e4:	f9 f0       	breq	.+62     	; 0x3724 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    36e6:	ce 01       	movw	r24, r28
    36e8:	01 96       	adiw	r24, 0x01	; 1
    36ea:	d4 01       	movw	r26, r8
    36ec:	a8 0f       	add	r26, r24
    36ee:	b9 1f       	adc	r27, r25
    36f0:	f3 01       	movw	r30, r6
    36f2:	e0 0f       	add	r30, r16
    36f4:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    36fa:	c8 0d       	add	r28, r8
    36fc:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    36fe:	4d 91       	ld	r20, X+
    3700:	4f 77       	andi	r20, 0x7F	; 127
    3702:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3704:	2f 5f       	subi	r18, 0xFF	; 255
    3706:	3f 4f       	sbci	r19, 0xFF	; 255
    3708:	88 81       	ld	r24, Y
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	02 2e       	mov	r0, r18
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <sysex_decode+0xda>
    3710:	88 0f       	add	r24, r24
    3712:	99 1f       	adc	r25, r25
    3714:	0a 94       	dec	r0
    3716:	e2 f7       	brpl	.-8      	; 0x3710 <sysex_decode+0xd6>
    3718:	80 78       	andi	r24, 0x80	; 128
    371a:	48 2b       	or	r20, r24
    371c:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    371e:	26 17       	cp	r18, r22
    3720:	37 07       	cpc	r19, r23
    3722:	68 f3       	brcs	.-38     	; 0x36fe <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3724:	c8 01       	movw	r24, r16
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	85 0f       	add	r24, r21
    372a:	91 1d       	adc	r25, r1
    372c:	0c c0       	rjmp	.+24     	; 0x3746 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    372e:	c7 01       	movw	r24, r14
    3730:	88 0f       	add	r24, r24
    3732:	99 1f       	adc	r25, r25
    3734:	88 0f       	add	r24, r24
    3736:	99 1f       	adc	r25, r25
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	8e 19       	sub	r24, r14
    373e:	9f 09       	sbc	r25, r15
    3740:	02 c0       	rjmp	.+4      	; 0x3746 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3746:	df 91       	pop	r29
    3748:	cf 91       	pop	r28
    374a:	1f 91       	pop	r17
    374c:	0f 91       	pop	r16
    374e:	ff 90       	pop	r15
    3750:	ef 90       	pop	r14
    3752:	df 90       	pop	r13
    3754:	cf 90       	pop	r12
    3756:	bf 90       	pop	r11
    3758:	af 90       	pop	r10
    375a:	9f 90       	pop	r9
    375c:	8f 90       	pop	r8
    375e:	7f 90       	pop	r7
    3760:	6f 90       	pop	r6
    3762:	08 95       	ret

00003764 <__mulsi3>:
    3764:	62 9f       	mul	r22, r18
    3766:	d0 01       	movw	r26, r0
    3768:	73 9f       	mul	r23, r19
    376a:	f0 01       	movw	r30, r0
    376c:	82 9f       	mul	r24, r18
    376e:	e0 0d       	add	r30, r0
    3770:	f1 1d       	adc	r31, r1
    3772:	64 9f       	mul	r22, r20
    3774:	e0 0d       	add	r30, r0
    3776:	f1 1d       	adc	r31, r1
    3778:	92 9f       	mul	r25, r18
    377a:	f0 0d       	add	r31, r0
    377c:	83 9f       	mul	r24, r19
    377e:	f0 0d       	add	r31, r0
    3780:	74 9f       	mul	r23, r20
    3782:	f0 0d       	add	r31, r0
    3784:	65 9f       	mul	r22, r21
    3786:	f0 0d       	add	r31, r0
    3788:	99 27       	eor	r25, r25
    378a:	72 9f       	mul	r23, r18
    378c:	b0 0d       	add	r27, r0
    378e:	e1 1d       	adc	r30, r1
    3790:	f9 1f       	adc	r31, r25
    3792:	63 9f       	mul	r22, r19
    3794:	b0 0d       	add	r27, r0
    3796:	e1 1d       	adc	r30, r1
    3798:	f9 1f       	adc	r31, r25
    379a:	bd 01       	movw	r22, r26
    379c:	cf 01       	movw	r24, r30
    379e:	11 24       	eor	r1, r1
    37a0:	08 95       	ret

000037a2 <__udivmodhi4>:
    37a2:	aa 1b       	sub	r26, r26
    37a4:	bb 1b       	sub	r27, r27
    37a6:	51 e1       	ldi	r21, 0x11	; 17
    37a8:	07 c0       	rjmp	.+14     	; 0x37b8 <__udivmodhi4_ep>

000037aa <__udivmodhi4_loop>:
    37aa:	aa 1f       	adc	r26, r26
    37ac:	bb 1f       	adc	r27, r27
    37ae:	a6 17       	cp	r26, r22
    37b0:	b7 07       	cpc	r27, r23
    37b2:	10 f0       	brcs	.+4      	; 0x37b8 <__udivmodhi4_ep>
    37b4:	a6 1b       	sub	r26, r22
    37b6:	b7 0b       	sbc	r27, r23

000037b8 <__udivmodhi4_ep>:
    37b8:	88 1f       	adc	r24, r24
    37ba:	99 1f       	adc	r25, r25
    37bc:	5a 95       	dec	r21
    37be:	a9 f7       	brne	.-22     	; 0x37aa <__udivmodhi4_loop>
    37c0:	80 95       	com	r24
    37c2:	90 95       	com	r25
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	08 95       	ret

000037ca <__divmodhi4>:
    37ca:	97 fb       	bst	r25, 7
    37cc:	09 2e       	mov	r0, r25
    37ce:	07 26       	eor	r0, r23
    37d0:	0a d0       	rcall	.+20     	; 0x37e6 <__divmodhi4_neg1>
    37d2:	77 fd       	sbrc	r23, 7
    37d4:	04 d0       	rcall	.+8      	; 0x37de <__divmodhi4_neg2>
    37d6:	e5 df       	rcall	.-54     	; 0x37a2 <__udivmodhi4>
    37d8:	06 d0       	rcall	.+12     	; 0x37e6 <__divmodhi4_neg1>
    37da:	00 20       	and	r0, r0
    37dc:	1a f4       	brpl	.+6      	; 0x37e4 <__divmodhi4_exit>

000037de <__divmodhi4_neg2>:
    37de:	70 95       	com	r23
    37e0:	61 95       	neg	r22
    37e2:	7f 4f       	sbci	r23, 0xFF	; 255

000037e4 <__divmodhi4_exit>:
    37e4:	08 95       	ret

000037e6 <__divmodhi4_neg1>:
    37e6:	f6 f7       	brtc	.-4      	; 0x37e4 <__divmodhi4_exit>
    37e8:	90 95       	com	r25
    37ea:	81 95       	neg	r24
    37ec:	9f 4f       	sbci	r25, 0xFF	; 255
    37ee:	08 95       	ret

000037f0 <memcpy>:
    37f0:	fb 01       	movw	r30, r22
    37f2:	dc 01       	movw	r26, r24
    37f4:	02 c0       	rjmp	.+4      	; 0x37fa <memcpy+0xa>
    37f6:	01 90       	ld	r0, Z+
    37f8:	0d 92       	st	X+, r0
    37fa:	41 50       	subi	r20, 0x01	; 1
    37fc:	50 40       	sbci	r21, 0x00	; 0
    37fe:	d8 f7       	brcc	.-10     	; 0x37f6 <memcpy+0x6>
    3800:	08 95       	ret

00003802 <memmove>:
    3802:	68 17       	cp	r22, r24
    3804:	79 07       	cpc	r23, r25
    3806:	68 f4       	brcc	.+26     	; 0x3822 <memmove+0x20>
    3808:	fb 01       	movw	r30, r22
    380a:	dc 01       	movw	r26, r24
    380c:	e4 0f       	add	r30, r20
    380e:	f5 1f       	adc	r31, r21
    3810:	a4 0f       	add	r26, r20
    3812:	b5 1f       	adc	r27, r21
    3814:	02 c0       	rjmp	.+4      	; 0x381a <memmove+0x18>
    3816:	02 90       	ld	r0, -Z
    3818:	0e 92       	st	-X, r0
    381a:	41 50       	subi	r20, 0x01	; 1
    381c:	50 40       	sbci	r21, 0x00	; 0
    381e:	d8 f7       	brcc	.-10     	; 0x3816 <memmove+0x14>
    3820:	08 95       	ret
    3822:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <memcpy>

00003826 <__eerd_block_m6450a>:
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22

0000382a <__eerd_blraw_m6450a>:
    382a:	fc 01       	movw	r30, r24
    382c:	f9 99       	sbic	0x1f, 1	; 31
    382e:	fe cf       	rjmp	.-4      	; 0x382c <__eerd_blraw_m6450a+0x2>
    3830:	06 c0       	rjmp	.+12     	; 0x383e <__eerd_blraw_m6450a+0x14>
    3832:	f2 bd       	out	0x22, r31	; 34
    3834:	e1 bd       	out	0x21, r30	; 33
    3836:	f8 9a       	sbi	0x1f, 0	; 31
    3838:	31 96       	adiw	r30, 0x01	; 1
    383a:	00 b4       	in	r0, 0x20	; 32
    383c:	0d 92       	st	X+, r0
    383e:	41 50       	subi	r20, 0x01	; 1
    3840:	50 40       	sbci	r21, 0x00	; 0
    3842:	b8 f7       	brcc	.-18     	; 0x3832 <__eerd_blraw_m6450a+0x8>
    3844:	08 95       	ret

00003846 <__eerd_word_m6450a>:
    3846:	a8 e1       	ldi	r26, 0x18	; 24
    3848:	b0 e0       	ldi	r27, 0x00	; 0
    384a:	42 e0       	ldi	r20, 0x02	; 2
    384c:	50 e0       	ldi	r21, 0x00	; 0
    384e:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__eerd_blraw_m6450a>

00003852 <__eeupd_block_m6450a>:
    3852:	dc 01       	movw	r26, r24
    3854:	a4 0f       	add	r26, r20
    3856:	b5 1f       	adc	r27, r21
    3858:	41 50       	subi	r20, 0x01	; 1
    385a:	50 40       	sbci	r21, 0x00	; 0
    385c:	48 f0       	brcs	.+18     	; 0x3870 <__eeupd_block_m6450a+0x1e>
    385e:	cb 01       	movw	r24, r22
    3860:	84 0f       	add	r24, r20
    3862:	95 1f       	adc	r25, r21
    3864:	2e 91       	ld	r18, -X
    3866:	0e 94 3a 1c 	call	0x3874	; 0x3874 <__eeupd_r18_m6450a>
    386a:	41 50       	subi	r20, 0x01	; 1
    386c:	50 40       	sbci	r21, 0x00	; 0
    386e:	d0 f7       	brcc	.-12     	; 0x3864 <__eeupd_block_m6450a+0x12>
    3870:	08 95       	ret

00003872 <__eeupd_byte_m6450a>:
    3872:	26 2f       	mov	r18, r22

00003874 <__eeupd_r18_m6450a>:
    3874:	f9 99       	sbic	0x1f, 1	; 31
    3876:	fe cf       	rjmp	.-4      	; 0x3874 <__eeupd_r18_m6450a>
    3878:	92 bd       	out	0x22, r25	; 34
    387a:	81 bd       	out	0x21, r24	; 33
    387c:	f8 9a       	sbi	0x1f, 0	; 31
    387e:	01 97       	sbiw	r24, 0x01	; 1
    3880:	00 b4       	in	r0, 0x20	; 32
    3882:	02 16       	cp	r0, r18
    3884:	31 f0       	breq	.+12     	; 0x3892 <__eeupd_r18_m6450a+0x1e>
    3886:	20 bd       	out	0x20, r18	; 32
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	fa 9a       	sbi	0x1f, 2	; 31
    388e:	f9 9a       	sbi	0x1f, 1	; 31
    3890:	0f be       	out	0x3f, r0	; 63
    3892:	08 95       	ret

00003894 <__eeupd_word_m6450a>:
    3894:	01 96       	adiw	r24, 0x01	; 1
    3896:	27 2f       	mov	r18, r23
    3898:	0e 94 3a 1c 	call	0x3874	; 0x3874 <__eeupd_r18_m6450a>
    389c:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__eeupd_byte_m6450a>

000038a0 <_exit>:
    38a0:	f8 94       	cli

000038a2 <__stop_program>:
    38a2:	ff cf       	rjmp	.-2      	; 0x38a2 <__stop_program>
