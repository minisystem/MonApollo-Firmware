
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003790  00003844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003790  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bf  008002b0  008002b0  000039f4  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  000039f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00004068  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00004fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005d6c  00000000  00000000  00005260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015ee  00000000  00000000  0000afcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f31  00000000  00000000  0000c5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c40  00000000  00000000  0000e4ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000187b  00000000  00000000  0000f12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002be2  00000000  00000000  000109a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00013589  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_9>
      28:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e0 e9       	ldi	r30, 0x90	; 144
      78:	f7 e3       	ldi	r31, 0x37	; 55
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	af 36       	cpi	r26, 0x6F	; 111
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 0c 03 	call	0x618	; 0x618 <main>
      9a:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 b0 02 	lds	r24, 0x02B0
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 77 1b 	call	0x36ee	; 0x36ee <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 b0 02 	sts	0x02B0, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 77 1b 	call	0x36ee	; 0x36ee <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 b0 02 	sts	0x02B0, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 b0 02 	sts	0x02B0, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1f6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1f8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1fa:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1fe:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     200:	8c 91       	ld	r24, X
     202:	87 70       	andi	r24, 0x07	; 7
     204:	82 b9       	out	0x02, r24	; 2
     206:	66 e0       	ldi	r22, 0x06	; 6
     208:	6a 95       	dec	r22
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x12>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     20e:	ea ed       	ldi	r30, 0xDA	; 218
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	40 81       	ld	r20, Z
     214:	8c 91       	ld	r24, X
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	86 95       	lsr	r24
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	b9 01       	movw	r22, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <set_control_voltage+0x34>
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <set_control_voltage+0x30>
     22e:	cb 01       	movw	r24, r22
     230:	84 2b       	or	r24, r20
     232:	80 83       	st	Z, r24
     234:	76 e0       	ldi	r23, 0x06	; 6
     236:	7a 95       	dec	r23
     238:	f1 f7       	brne	.-4      	; 0x236 <set_control_voltage+0x40>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     23c:	80 81       	ld	r24, Z
     23e:	9c 91       	ld	r25, X
     240:	96 95       	lsr	r25
     242:	96 95       	lsr	r25
     244:	96 95       	lsr	r25
     246:	97 70       	andi	r25, 0x07	; 7
     248:	02 c0       	rjmp	.+4      	; 0x24e <set_control_voltage+0x58>
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	9a 95       	dec	r25
     250:	e2 f7       	brpl	.-8      	; 0x24a <set_control_voltage+0x54>
     252:	20 95       	com	r18
     254:	28 23       	and	r18, r24
     256:	20 83       	st	Z, r18
	
}	
     258:	08 95       	ret

0000025a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     25a:	83 b3       	in	r24, 0x13	; 19
     25c:	83 60       	ori	r24, 0x03	; 3
     25e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     264:	97 b1       	in	r25, 0x07	; 7
     266:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     268:	e9 ed       	ldi	r30, 0xD9	; 217
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     272:	ea ed       	ldi	r30, 0xDA	; 218
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     27c:	84 b3       	in	r24, 0x14	; 20
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     282:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     284:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     286:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     288:	a0 9a       	sbi	0x14, 0	; 20
}
     28a:	08 95       	ret

0000028c <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2e 97       	sbiw	r28, 0x0e	; 14
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     2a4:	28 e0       	ldi	r18, 0x08	; 8
     2a6:	29 83       	std	Y+1, r18	; 0x01
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	2a 83       	std	Y+2, r18	; 0x02
     2ac:	22 e0       	ldi	r18, 0x02	; 2
     2ae:	2b 83       	std	Y+3, r18	; 0x03
     2b0:	24 e0       	ldi	r18, 0x04	; 4
     2b2:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2b4:	de 01       	movw	r26, r28
     2b6:	15 96       	adiw	r26, 0x05	; 5
     2b8:	e7 ee       	ldi	r30, 0xE7	; 231
     2ba:	f1 e0       	ldi	r31, 0x01	; 1
     2bc:	2a e0       	ldi	r18, 0x0A	; 10
     2be:	01 90       	ld	r0, Z+
     2c0:	0d 92       	st	X+, r0
     2c2:	21 50       	subi	r18, 0x01	; 1
     2c4:	e1 f7       	brne	.-8      	; 0x2be <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c6:	2f ef       	ldi	r18, 0xFF	; 255
     2c8:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2ca:	ea ed       	ldi	r30, 0xDA	; 218
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	20 81       	ld	r18, Z
     2d0:	20 61       	ori	r18, 0x10	; 16
     2d2:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d4:	20 81       	ld	r18, Z
     2d6:	2f 7e       	andi	r18, 0xEF	; 239
     2d8:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     2da:	06 2f       	mov	r16, r22
     2dc:	10 e0       	ldi	r17, 0x00	; 0
     2de:	de 01       	movw	r26, r28
     2e0:	a0 0f       	add	r26, r16
     2e2:	b1 1f       	adc	r27, r17
     2e4:	11 96       	adiw	r26, 0x01	; 1
     2e6:	2c 91       	ld	r18, X
     2e8:	11 97       	sbiw	r26, 0x01	; 1
     2ea:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2ec:	20 81       	ld	r18, Z
     2ee:	20 62       	ori	r18, 0x20	; 32
     2f0:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2f2:	20 81       	ld	r18, Z
     2f4:	2f 7d       	andi	r18, 0xDF	; 223
     2f6:	20 83       	st	Z, r18
     2f8:	48 2f       	mov	r20, r24
     2fa:	59 2f       	mov	r21, r25
     2fc:	87 e2       	ldi	r24, 0x27	; 39
     2fe:	40 31       	cpi	r20, 0x10	; 16
     300:	58 07       	cpc	r21, r24
     302:	10 f0       	brcs	.+4      	; 0x308 <display_dec+0x7c>
     304:	4f e0       	ldi	r20, 0x0F	; 15
     306:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     308:	ca 01       	movw	r24, r20
     30a:	96 95       	lsr	r25
     30c:	87 95       	ror	r24
     30e:	96 95       	lsr	r25
     310:	87 95       	ror	r24
     312:	9a 01       	movw	r18, r20
     314:	36 95       	lsr	r19
     316:	27 95       	ror	r18
     318:	28 0f       	add	r18, r24
     31a:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     31c:	c9 01       	movw	r24, r18
     31e:	92 95       	swap	r25
     320:	82 95       	swap	r24
     322:	8f 70       	andi	r24, 0x0F	; 15
     324:	89 27       	eor	r24, r25
     326:	9f 70       	andi	r25, 0x0F	; 15
     328:	89 27       	eor	r24, r25
     32a:	82 0f       	add	r24, r18
     32c:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     32e:	29 2f       	mov	r18, r25
     330:	33 27       	eor	r19, r19
     332:	82 0f       	add	r24, r18
     334:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     336:	96 95       	lsr	r25
     338:	87 95       	ror	r24
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
	r = number - q2 * 10;
     342:	28 2f       	mov	r18, r24
     344:	22 0f       	add	r18, r18
     346:	32 2f       	mov	r19, r18
     348:	33 0f       	add	r19, r19
     34a:	33 0f       	add	r19, r19
     34c:	23 0f       	add	r18, r19
     34e:	e4 2f       	mov	r30, r20
     350:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	ea 30       	cpi	r30, 0x0A	; 10
     358:	10 f4       	brcc	.+4      	; 0x35e <display_dec+0xd2>
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	68 0f       	add	r22, r24
     360:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     362:	9b 01       	movw	r18, r22
     364:	36 95       	lsr	r19
     366:	27 95       	ror	r18
     368:	36 95       	lsr	r19
     36a:	27 95       	ror	r18
     36c:	ab 01       	movw	r20, r22
     36e:	56 95       	lsr	r21
     370:	47 95       	ror	r20
     372:	24 0f       	add	r18, r20
     374:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     376:	c9 01       	movw	r24, r18
     378:	92 95       	swap	r25
     37a:	82 95       	swap	r24
     37c:	8f 70       	andi	r24, 0x0F	; 15
     37e:	89 27       	eor	r24, r25
     380:	9f 70       	andi	r25, 0x0F	; 15
     382:	89 27       	eor	r24, r25
     384:	82 0f       	add	r24, r18
     386:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     388:	29 2f       	mov	r18, r25
     38a:	33 27       	eor	r19, r19
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     390:	96 95       	lsr	r25
     392:	87 95       	ror	r24
     394:	96 95       	lsr	r25
     396:	87 95       	ror	r24
     398:	96 95       	lsr	r25
     39a:	87 95       	ror	r24
	r = qa - q3 * 10;
     39c:	98 2f       	mov	r25, r24
     39e:	99 0f       	add	r25, r25
     3a0:	29 2f       	mov	r18, r25
     3a2:	22 0f       	add	r18, r18
     3a4:	22 0f       	add	r18, r18
     3a6:	92 0f       	add	r25, r18
     3a8:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	6a 30       	cpi	r22, 0x0A	; 10
     3ae:	08 f4       	brcc	.+2      	; 0x3b2 <display_dec+0x126>
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3b4:	41 ef       	ldi	r20, 0xF1	; 241
     3b6:	51 e0       	ldi	r21, 0x01	; 1
     3b8:	da 01       	movw	r26, r20
     3ba:	a6 0f       	add	r26, r22
     3bc:	b1 1d       	adc	r27, r1
     3be:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3c0:	28 2f       	mov	r18, r24
     3c2:	26 95       	lsr	r18
     3c4:	26 95       	lsr	r18
     3c6:	98 2f       	mov	r25, r24
     3c8:	96 95       	lsr	r25
     3ca:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 95       	swap	r18
     3d0:	2f 70       	andi	r18, 0x0F	; 15
     3d2:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3d4:	96 95       	lsr	r25
     3d6:	96 95       	lsr	r25
     3d8:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3da:	29 2f       	mov	r18, r25
     3dc:	22 0f       	add	r18, r18
     3de:	62 2f       	mov	r22, r18
     3e0:	66 0f       	add	r22, r22
     3e2:	66 0f       	add	r22, r22
     3e4:	26 0f       	add	r18, r22
     3e6:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3e8:	da 01       	movw	r26, r20
     3ea:	a8 0f       	add	r26, r24
     3ec:	b1 1d       	adc	r27, r1
     3ee:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3f0:	4e 0f       	add	r20, r30
     3f2:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3f4:	fa 01       	movw	r30, r20
     3f6:	40 81       	ld	r20, Z
     3f8:	40 93 b3 02 	sts	0x02B3, r20
	digit_index[1] = tens_place;
     3fc:	30 93 b4 02 	sts	0x02B4, r19
	digit_index[2] = hunds_place;
     400:	20 93 b5 02 	sts	0x02B5, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	8a 30       	cpi	r24, 0x0A	; 10
     408:	08 f4       	brcc	.+2      	; 0x40c <display_dec+0x180>
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     40e:	90 93 b6 02 	sts	0x02B6, r25

	cathode_byte = dec[digit_index[place]];
     412:	f8 01       	movw	r30, r16
     414:	ed 54       	subi	r30, 0x4D	; 77
     416:	fd 4f       	sbci	r31, 0xFD	; 253
     418:	80 81       	ld	r24, Z
     41a:	fe 01       	movw	r30, r28
     41c:	e8 0f       	add	r30, r24
     41e:	f1 1d       	adc	r31, r1
     420:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     422:	90 91 07 03 	lds	r25, 0x0307
     426:	92 30       	cpi	r25, 0x02	; 2
     428:	11 f4       	brne	.+4      	; 0x42e <display_dec+0x1a2>
     42a:	80 62       	ori	r24, 0x20	; 32
     42c:	03 c0       	rjmp	.+6      	; 0x434 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     42e:	91 30       	cpi	r25, 0x01	; 1
     430:	09 f4       	brne	.+2      	; 0x434 <display_dec+0x1a8>
     432:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     434:	80 95       	com	r24
     436:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     438:	ea ed       	ldi	r30, 0xDA	; 218
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	80 61       	ori	r24, 0x10	; 16
     440:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     442:	80 81       	ld	r24, Z
     444:	8f 7e       	andi	r24, 0xEF	; 239
     446:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     448:	2e 96       	adiw	r28, 0x0e	; 14
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	08 95       	ret

0000045e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     45e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     460:	66 23       	and	r22, r22
     462:	69 f4       	brne	.+26     	; 0x47e <update_display+0x20>

		
			
		display_dec(number, place);
     464:	c0 91 b7 02 	lds	r28, 0x02B7
     468:	6c 2f       	mov	r22, r28
     46a:	0e 94 46 01 	call	0x28c	; 0x28c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     46e:	8c 2f       	mov	r24, r28
     470:	8f 5f       	subi	r24, 0xFF	; 255
     472:	80 93 b7 02 	sts	0x02B7, r24
     476:	c3 30       	cpi	r28, 0x03	; 3
     478:	11 f4       	brne	.+4      	; 0x47e <update_display+0x20>
		{
			place = 0;
     47a:	10 92 b7 02 	sts	0x02B7, r1
		
		
	}
	
	
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	8f 93       	push	r24
     48e:	9f 93       	push	r25
     490:	ef 93       	push	r30
     492:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     494:	80 91 79 03 	lds	r24, 0x0379
     498:	81 50       	subi	r24, 0x01	; 1
     49a:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     49c:	80 91 7a 03 	lds	r24, 0x037A
     4a0:	88 23       	and	r24, r24
     4a2:	a1 f4       	brne	.+40     	; 0x4cc <__vector_10+0x4a>
		count_finished = FALSE;
     4a4:	10 92 77 03 	sts	0x0377, r1
		no_overflow = TRUE;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     4ae:	80 93 7a 03 	sts	0x037A, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     4b2:	e1 e8       	ldi	r30, 0x81	; 129
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	90 91 78 03 	lds	r25, 0x0378
     4bc:	89 2b       	or	r24, r25
     4be:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4c0:	ef e6       	ldi	r30, 0x6F	; 111
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	81 60       	ori	r24, 0x01	; 1
     4c8:	80 83       	st	Z, r24
     4ca:	11 c0       	rjmp	.+34     	; 0x4ee <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4cc:	e4 e8       	ldi	r30, 0x84	; 132
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	91 81       	ldd	r25, Z+1	; 0x01
     4d4:	90 93 76 03 	sts	0x0376, r25
     4d8:	80 93 75 03 	sts	0x0375, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4dc:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 77 03 	sts	0x0377, r24
		period_counter = 0;
     4e6:	10 92 7a 03 	sts	0x037A, r1
		TCNT1 = 0; //reset timer/counter 1
     4ea:	11 82       	std	Z+1, r1	; 0x01
     4ec:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	9f 91       	pop	r25
     4f4:	8f 91       	pop	r24
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     50a:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     50e:	0f 90       	pop	r0
     510:	0f be       	out	0x3f, r0	; 63
     512:	0f 90       	pop	r0
     514:	1f 90       	pop	r1
     516:	18 95       	reti

00000518 <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     518:	68 3f       	cpi	r22, 0xF8	; 248
     51a:	19 f0       	breq	.+6      	; 0x522 <real_time_event+0xa>
     51c:	6a 3f       	cpi	r22, 0xFA	; 250
     51e:	91 f4       	brne	.+36     	; 0x544 <real_time_event+0x2c>
     520:	0f c0       	rjmp	.+30     	; 0x540 <real_time_event+0x28>
		
		case MIDI_CLOCK:
		
			if (++clock.midi_ppqn_counter == clock.divider) {
     522:	80 91 81 03 	lds	r24, 0x0381
     526:	8f 5f       	subi	r24, 0xFF	; 255
     528:	80 93 81 03 	sts	0x0381, r24
     52c:	90 91 7f 03 	lds	r25, 0x037F
     530:	89 17       	cp	r24, r25
     532:	41 f4       	brne	.+16     	; 0x544 <real_time_event+0x2c>
				PORTB ^= (1<<ARP_SYNC_LED);
     534:	85 b1       	in	r24, 0x05	; 5
     536:	80 58       	subi	r24, 0x80	; 128
     538:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				clock.midi_ppqn_counter = 0; //reset MIDI ppqn clock	
     53a:	10 92 81 03 	sts	0x0381, r1
     53e:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			clock.midi_ppqn_counter = 0;
     540:	10 92 81 03 	sts	0x0381, r1
     544:	08 95       	ret

00000546 <note_off_event>:
		PORTF |= (1<<GATE);
	}
	PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     546:	84 2f       	mov	r24, r20
	remove_note(note);
     548:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     54c:	80 91 b9 02 	lds	r24, 0x02B9
     550:	81 50       	subi	r24, 0x01	; 1
     552:	80 93 b9 02 	sts	0x02B9, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     556:	88 23       	and	r24, r24
     558:	09 f4       	brne	.+2      	; 0x55c <note_off_event+0x16>
     55a:	89 98       	cbi	0x11, 1	; 17
     55c:	08 95       	ret

0000055e <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     55e:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) PORTB |= (1<< LFO_RESET);
     560:	90 91 ff 02 	lds	r25, 0x02FF
     564:	90 fd       	sbrc	r25, 0
     566:	2c 9a       	sbi	0x05, 4	; 5
	//value_to_display = note;
	midi_note_number = note;
     568:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) {
     56c:	22 23       	and	r18, r18
     56e:	59 f4       	brne	.+22     	; 0x586 <note_on_event+0x28>
		remove_note(note);
     570:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     574:	80 91 b9 02 	lds	r24, 0x02B9
     578:	81 50       	subi	r24, 0x01	; 1
     57a:	80 93 b9 02 	sts	0x02B9, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     57e:	88 23       	and	r24, r24
     580:	59 f4       	brne	.+22     	; 0x598 <note_on_event+0x3a>
     582:	89 98       	cbi	0x11, 1	; 17
     584:	09 c0       	rjmp	.+18     	; 0x598 <note_on_event+0x3a>
				
	} else {
		new_note(note, velocity);
     586:	62 2f       	mov	r22, r18
     588:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     58c:	80 91 b9 02 	lds	r24, 0x02B9
     590:	8f 5f       	subi	r24, 0xFF	; 255
     592:	80 93 b9 02 	sts	0x02B9, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     596:	89 9a       	sbi	0x11, 1	; 17
	}
	PORTB &= ~(1<< LFO_RESET);
     598:	2c 98       	cbi	0x05, 4	; 5
	
}
     59a:	08 95       	ret

0000059c <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     59c:	87 e2       	ldi	r24, 0x27	; 39
     59e:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     5a2:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     5a6:	88 e9       	ldi	r24, 0x98	; 152
     5a8:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     5ac:	08 95       	ret

000005ae <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     5ae:	1f 92       	push	r1
     5b0:	0f 92       	push	r0
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	0f 92       	push	r0
     5b6:	11 24       	eor	r1, r1
     5b8:	2f 93       	push	r18
     5ba:	3f 93       	push	r19
     5bc:	4f 93       	push	r20
     5be:	5f 93       	push	r21
     5c0:	6f 93       	push	r22
     5c2:	7f 93       	push	r23
     5c4:	8f 93       	push	r24
     5c6:	9f 93       	push	r25
     5c8:	af 93       	push	r26
     5ca:	bf 93       	push	r27
     5cc:	ef 93       	push	r30
     5ce:	ff 93       	push	r31
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	0f 92       	push	r0
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     5da:	80 91 c6 00 	lds	r24, 0x00C6
     5de:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     5e0:	82 e8       	ldi	r24, 0x82	; 130
     5e2:	93 e0       	ldi	r25, 0x03	; 3
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	ae 01       	movw	r20, r28
     5e8:	4f 5f       	subi	r20, 0xFF	; 255
     5ea:	5f 4f       	sbci	r21, 0xFF	; 255
     5ec:	0e 94 24 17 	call	0x2e48	; 0x2e48 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     5f0:	0f 90       	pop	r0
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	ff 91       	pop	r31
     5f8:	ef 91       	pop	r30
     5fa:	bf 91       	pop	r27
     5fc:	af 91       	pop	r26
     5fe:	9f 91       	pop	r25
     600:	8f 91       	pop	r24
     602:	7f 91       	pop	r23
     604:	6f 91       	pop	r22
     606:	5f 91       	pop	r21
     608:	4f 91       	pop	r20
     60a:	3f 91       	pop	r19
     60c:	2f 91       	pop	r18
     60e:	0f 90       	pop	r0
     610:	0f be       	out	0x3f, r0	; 63
     612:	0f 90       	pop	r0
     614:	1f 90       	pop	r1
     616:	18 95       	reti

00000618 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     618:	c0 e8       	ldi	r28, 0x80	; 128
     61a:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     61c:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     61e:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     620:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     622:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     624:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     626:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     628:	0e 94 39 06 	call	0xc72	; 0xc72 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     62c:	a9 ed       	ldi	r26, 0xD9	; 217
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	8c 91       	ld	r24, X
     632:	80 6c       	ori	r24, 0xC0	; 192
     634:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     636:	ea ed       	ldi	r30, 0xDA	; 218
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 81       	ld	r24, Z
     63c:	80 6c       	ori	r24, 0xC0	; 192
     63e:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     640:	81 b1       	in	r24, 0x01	; 1
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     646:	92 b1       	in	r25, 0x02	; 2
     648:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     64a:	8c 91       	ld	r24, X
     64c:	80 63       	ori	r24, 0x30	; 48
     64e:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     650:	80 81       	ld	r24, Z
     652:	8f 7c       	andi	r24, 0xCF	; 207
     654:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     656:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     658:	ec ed       	ldi	r30, 0xDC	; 220
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	80 62       	ori	r24, 0x20	; 32
     660:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     662:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     664:	ed ed       	ldi	r30, 0xDD	; 221
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	80 62       	ori	r24, 0x20	; 32
     66c:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     66e:	80 81       	ld	r24, Z
     670:	8f 7d       	andi	r24, 0xDF	; 223
     672:	80 83       	st	Z, r24
	DATA_BUS = 0;
     674:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     676:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     67a:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     67e:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     682:	c2 e8       	ldi	r28, 0x82	; 130
     684:	d3 e0       	ldi	r29, 0x03	; 3
     686:	ce 01       	movw	r24, r28
     688:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     68c:	ce 01       	movw	r24, r28
     68e:	6f ea       	ldi	r22, 0xAF	; 175
     690:	72 e0       	ldi	r23, 0x02	; 2
     692:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     696:	ce 01       	movw	r24, r28
     698:	63 ea       	ldi	r22, 0xA3	; 163
     69a:	72 e0       	ldi	r23, 0x02	; 2
     69c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     6a0:	ce 01       	movw	r24, r28
     6a2:	6c e8       	ldi	r22, 0x8C	; 140
     6a4:	72 e0       	ldi	r23, 0x02	; 2
     6a6:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     6aa:	0e 94 ce 02 	call	0x59c	; 0x59c <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     6ae:	0e 94 5e 06 	call	0xcbc	; 0xcbc <update_spi>
	
	
	current_patch.number = 1;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     6b8:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     6ba:	0e 94 6e 13 	call	0x26dc	; 0x26dc <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <load_patch>

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     6c4:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     6c6:	0f 2e       	mov	r0, r31
     6c8:	fd e7       	ldi	r31, 0x7D	; 125
     6ca:	ef 2e       	mov	r14, r31
     6cc:	f3 e0       	ldi	r31, 0x03	; 3
     6ce:	ff 2e       	mov	r15, r31
     6d0:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     6d2:	0f 2e       	mov	r0, r31
     6d4:	f7 e0       	ldi	r31, 0x07	; 7
     6d6:	cf 2e       	mov	r12, r31
     6d8:	f3 e0       	ldi	r31, 0x03	; 3
     6da:	df 2e       	mov	r13, r31
     6dc:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     6de:	bb 24       	eor	r11, r11
     6e0:	68 94       	set
     6e2:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     6e4:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     6e6:	c8 01       	movw	r24, r16
     6e8:	0e 94 4e 19 	call	0x329c	; 0x329c <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     6ec:	80 91 fd 01 	lds	r24, 0x01FD
     6f0:	90 91 fe 01 	lds	r25, 0x01FE
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     6fa:	0e 94 ac 03 	call	0x758	; 0x758 <scan_pots>
		update_control_voltages();
     6fe:	0e 94 39 04 	call	0x872	; 0x872 <update_control_voltages>
			
		//do SPI read/write every 5 loops - whole section needs major update
		if (switch_timer++ == 5)
     702:	80 91 b8 02 	lds	r24, 0x02B8
     706:	98 2f       	mov	r25, r24
     708:	9f 5f       	subi	r25, 0xFF	; 255
     70a:	90 93 b8 02 	sts	0x02B8, r25
     70e:	85 30       	cpi	r24, 0x05	; 5
     710:	51 f7       	brne	.-44     	; 0x6e6 <main+0xce>
		{
			switch_timer = 0;
     712:	10 92 b8 02 	sts	0x02B8, r1
			switch_press = 0; //reset global switch press flag
     716:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     71a:	f7 01       	movw	r30, r14
     71c:	c0 81       	ld	r28, Z
     71e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <read_switch_port>
     722:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     724:	f6 01       	movw	r30, r12
     726:	90 81       	ld	r25, Z
     728:	91 30       	cpi	r25, 0x01	; 1
     72a:	11 f4       	brne	.+4      	; 0x730 <main+0x118>
     72c:	cd 2f       	mov	r28, r29
     72e:	01 c0       	rjmp	.+2      	; 0x732 <main+0x11a>
     730:	c0 e0       	ldi	r28, 0x00	; 0
     732:	c8 2b       	or	r28, r24
     734:	f7 01       	movw	r30, r14
     736:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     738:	0e 94 5e 06 	call	0xcbc	; 0xcbc <update_spi>
			if (switch_press) { 
     73c:	80 91 c1 02 	lds	r24, 0x02C1
     740:	88 23       	and	r24, r24
     742:	39 f0       	breq	.+14     	; 0x752 <main+0x13a>
				update_patch();
     744:	0e 94 ca 0c 	call	0x1994	; 0x1994 <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     748:	f6 01       	movw	r30, r12
     74a:	80 81       	ld	r24, Z
     74c:	88 23       	and	r24, r24
     74e:	09 f4       	brne	.+2      	; 0x752 <main+0x13a>
     750:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     752:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <update_patch_programmer>
     756:	c7 cf       	rjmp	.-114    	; 0x6e6 <main+0xce>

00000758 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     758:	bf 92       	push	r11
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	c0 e0       	ldi	r28, 0x00	; 0
     76c:	d1 e0       	ldi	r29, 0x01	; 1
     76e:	02 ec       	ldi	r16, 0xC2	; 194
     770:	12 e0       	ldi	r17, 0x02	; 2
     772:	0f 2e       	mov	r0, r31
     774:	fc e3       	ldi	r31, 0x3C	; 60
     776:	cf 2e       	mov	r12, r31
     778:	dd 24       	eor	r13, r13
     77a:	f0 2d       	mov	r31, r0
     77c:	cc 0e       	add	r12, r28
     77e:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     780:	0f 2e       	mov	r0, r31
     782:	f7 e0       	ldi	r31, 0x07	; 7
     784:	ef 2e       	mov	r14, r31
     786:	f3 e0       	ldi	r31, 0x03	; 3
     788:	ff 2e       	mov	r15, r31
     78a:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     78c:	bb 24       	eor	r11, r11
     78e:	68 94       	set
     790:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     792:	88 81       	ld	r24, Y
     794:	99 81       	ldd	r25, Y+1	; 0x01
     796:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     79a:	90 93 bc 02 	sts	0x02BC, r25
     79e:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     7a2:	e8 81       	ld	r30, Y
     7a4:	f9 81       	ldd	r31, Y+1	; 0x01
     7a6:	40 81       	ld	r20, Z
     7a8:	21 81       	ldd	r18, Z+1	; 0x01
     7aa:	52 2f       	mov	r21, r18
     7ac:	53 70       	andi	r21, 0x03	; 3
     7ae:	84 1b       	sub	r24, r20
     7b0:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     7b2:	95 95       	asr	r25
     7b4:	87 95       	ror	r24
     7b6:	95 95       	asr	r25
     7b8:	87 95       	ror	r24
     7ba:	84 0f       	add	r24, r20
     7bc:	95 1f       	adc	r25, r21
     7be:	80 83       	st	Z, r24
     7c0:	89 2f       	mov	r24, r25
     7c2:	83 70       	andi	r24, 0x03	; 3
     7c4:	2c 7f       	andi	r18, 0xFC	; 252
     7c6:	28 2b       	or	r18, r24
     7c8:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     7ca:	e9 91       	ld	r30, Y+
     7cc:	f9 91       	ld	r31, Y+
     7ce:	92 81       	ldd	r25, Z+2	; 0x02
     7d0:	20 81       	ld	r18, Z
     7d2:	81 81       	ldd	r24, Z+1	; 0x01
     7d4:	38 2f       	mov	r19, r24
     7d6:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     7d8:	d7 01       	movw	r26, r14
     7da:	8c 91       	ld	r24, X
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	19 f0       	breq	.+6      	; 0x7e6 <scan_pots+0x8e>
     7e0:	83 81       	ldd	r24, Z+3	; 0x03
     7e2:	88 23       	and	r24, r24
     7e4:	24 f0       	brlt	.+8      	; 0x7ee <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     7e6:	f8 01       	movw	r30, r16
     7e8:	31 83       	std	Z+1, r19	; 0x01
     7ea:	20 83       	st	Z, r18
     7ec:	14 c0       	rjmp	.+40     	; 0x816 <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     7ee:	49 2f       	mov	r20, r25
     7f0:	43 50       	subi	r20, 0x03	; 3
     7f2:	c9 01       	movw	r24, r18
     7f4:	95 95       	asr	r25
     7f6:	87 95       	ror	r24
     7f8:	95 95       	asr	r25
     7fa:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     7fc:	94 2f       	mov	r25, r20
     7fe:	98 1b       	sub	r25, r24
     800:	9a 3f       	cpi	r25, 0xFA	; 250
     802:	48 f4       	brcc	.+18     	; 0x816 <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     804:	d8 01       	movw	r26, r16
     806:	11 96       	adiw	r26, 0x01	; 1
     808:	3c 93       	st	X, r19
     80a:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     80c:	83 81       	ldd	r24, Z+3	; 0x03
     80e:	8f 77       	andi	r24, 0x7F	; 127
     810:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     812:	f7 01       	movw	r30, r14
     814:	b0 82       	st	Z, r11
     816:	0e 5f       	subi	r16, 0xFE	; 254
     818:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     81a:	cc 15       	cp	r28, r12
     81c:	dd 05       	cpc	r29, r13
     81e:	09 f0       	breq	.+2      	; 0x822 <scan_pots+0xca>
     820:	b8 cf       	rjmp	.-144    	; 0x792 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     822:	8c e7       	ldi	r24, 0x7C	; 124
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     82a:	90 93 bc 02 	sts	0x02BC, r25
     82e:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     832:	20 91 7c 01 	lds	r18, 0x017C
     836:	40 91 7d 01 	lds	r20, 0x017D
     83a:	34 2f       	mov	r19, r20
     83c:	33 70       	andi	r19, 0x03	; 3
     83e:	82 1b       	sub	r24, r18
     840:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     842:	95 95       	asr	r25
     844:	87 95       	ror	r24
     846:	95 95       	asr	r25
     848:	87 95       	ror	r24
     84a:	28 0f       	add	r18, r24
     84c:	39 1f       	adc	r19, r25
     84e:	20 93 7c 01 	sts	0x017C, r18
     852:	83 2f       	mov	r24, r19
     854:	83 70       	andi	r24, 0x03	; 3
     856:	4c 7f       	andi	r20, 0xFC	; 252
     858:	48 2b       	or	r20, r24
     85a:	40 93 7d 01 	sts	0x017D, r20
	
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	bf 90       	pop	r11
     870:	08 95       	ret

00000872 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     876:	60 91 c2 02 	lds	r22, 0x02C2
     87a:	70 91 c3 02 	lds	r23, 0x02C3
     87e:	62 95       	swap	r22
     880:	72 95       	swap	r23
     882:	70 7f       	andi	r23, 0xF0	; 240
     884:	76 27       	eor	r23, r22
     886:	60 7f       	andi	r22, 0xF0	; 240
     888:	76 27       	eor	r23, r22
     88a:	84 ee       	ldi	r24, 0xE4	; 228
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     892:	60 91 c4 02 	lds	r22, 0x02C4
     896:	70 91 c5 02 	lds	r23, 0x02C5
     89a:	62 95       	swap	r22
     89c:	72 95       	swap	r23
     89e:	70 7f       	andi	r23, 0xF0	; 240
     8a0:	76 27       	eor	r23, r22
     8a2:	60 7f       	andi	r22, 0xF0	; 240
     8a4:	76 27       	eor	r23, r22
     8a6:	83 ee       	ldi	r24, 0xE3	; 227
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     8ae:	60 91 c6 02 	lds	r22, 0x02C6
     8b2:	70 91 c7 02 	lds	r23, 0x02C7
     8b6:	66 0f       	add	r22, r22
     8b8:	77 1f       	adc	r23, r23
     8ba:	66 0f       	add	r22, r22
     8bc:	77 1f       	adc	r23, r23
     8be:	66 0f       	add	r22, r22
     8c0:	77 1f       	adc	r23, r23
     8c2:	82 ee       	ldi	r24, 0xE2	; 226
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     8ca:	60 91 c8 02 	lds	r22, 0x02C8
     8ce:	70 91 c9 02 	lds	r23, 0x02C9
     8d2:	62 95       	swap	r22
     8d4:	72 95       	swap	r23
     8d6:	70 7f       	andi	r23, 0xF0	; 240
     8d8:	76 27       	eor	r23, r22
     8da:	60 7f       	andi	r22, 0xF0	; 240
     8dc:	76 27       	eor	r23, r22
     8de:	82 eb       	ldi	r24, 0xB2	; 178
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     8e6:	60 91 ca 02 	lds	r22, 0x02CA
     8ea:	70 91 cb 02 	lds	r23, 0x02CB
     8ee:	66 0f       	add	r22, r22
     8f0:	77 1f       	adc	r23, r23
     8f2:	66 0f       	add	r22, r22
     8f4:	77 1f       	adc	r23, r23
     8f6:	66 0f       	add	r22, r22
     8f8:	77 1f       	adc	r23, r23
     8fa:	81 ee       	ldi	r24, 0xE1	; 225
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     902:	60 91 cc 02 	lds	r22, 0x02CC
     906:	70 91 cd 02 	lds	r23, 0x02CD
     90a:	62 95       	swap	r22
     90c:	72 95       	swap	r23
     90e:	70 7f       	andi	r23, 0xF0	; 240
     910:	76 27       	eor	r23, r22
     912:	60 7f       	andi	r22, 0xF0	; 240
     914:	76 27       	eor	r23, r22
     916:	80 ee       	ldi	r24, 0xE0	; 224
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     91e:	60 91 ce 02 	lds	r22, 0x02CE
     922:	70 91 cf 02 	lds	r23, 0x02CF
     926:	62 95       	swap	r22
     928:	72 95       	swap	r23
     92a:	70 7f       	andi	r23, 0xF0	; 240
     92c:	76 27       	eor	r23, r22
     92e:	60 7f       	andi	r22, 0xF0	; 240
     930:	76 27       	eor	r23, r22
     932:	8f ed       	ldi	r24, 0xDF	; 223
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     93a:	60 91 d0 02 	lds	r22, 0x02D0
     93e:	70 91 d1 02 	lds	r23, 0x02D1
     942:	62 95       	swap	r22
     944:	72 95       	swap	r23
     946:	70 7f       	andi	r23, 0xF0	; 240
     948:	76 27       	eor	r23, r22
     94a:	60 7f       	andi	r22, 0xF0	; 240
     94c:	76 27       	eor	r23, r22
     94e:	8e ed       	ldi	r24, 0xDE	; 222
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     956:	80 91 d4 02 	lds	r24, 0x02D4
     95a:	90 91 d5 02 	lds	r25, 0x02D5
     95e:	c0 e0       	ldi	r28, 0x00	; 0
     960:	d2 e0       	ldi	r29, 0x02	; 2
     962:	c8 1b       	sub	r28, r24
     964:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     966:	60 91 70 03 	lds	r22, 0x0370
     96a:	70 91 71 03 	lds	r23, 0x0371
     96e:	60 50       	subi	r22, 0x00	; 0
     970:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     972:	80 91 d2 02 	lds	r24, 0x02D2
     976:	90 91 d3 02 	lds	r25, 0x02D3
     97a:	68 1b       	sub	r22, r24
     97c:	79 0b       	sbc	r23, r25
     97e:	6c 0f       	add	r22, r28
     980:	7d 1f       	adc	r23, r29
     982:	8d ed       	ldi	r24, 0xDD	; 221
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     98a:	60 91 72 03 	lds	r22, 0x0372
     98e:	70 91 73 03 	lds	r23, 0x0373
     992:	6c 0f       	add	r22, r28
     994:	7d 1f       	adc	r23, r29
     996:	8c ed       	ldi	r24, 0xDC	; 220
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     99e:	60 91 d6 02 	lds	r22, 0x02D6
     9a2:	70 91 d7 02 	lds	r23, 0x02D7
     9a6:	62 95       	swap	r22
     9a8:	72 95       	swap	r23
     9aa:	70 7f       	andi	r23, 0xF0	; 240
     9ac:	76 27       	eor	r23, r22
     9ae:	60 7f       	andi	r22, 0xF0	; 240
     9b0:	76 27       	eor	r23, r22
     9b2:	8b ed       	ldi	r24, 0xDB	; 219
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     9ba:	60 91 da 02 	lds	r22, 0x02DA
     9be:	70 91 db 02 	lds	r23, 0x02DB
     9c2:	62 95       	swap	r22
     9c4:	72 95       	swap	r23
     9c6:	70 7f       	andi	r23, 0xF0	; 240
     9c8:	76 27       	eor	r23, r22
     9ca:	60 7f       	andi	r22, 0xF0	; 240
     9cc:	76 27       	eor	r23, r22
     9ce:	8a ed       	ldi	r24, 0xDA	; 218
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     9d6:	60 91 dc 02 	lds	r22, 0x02DC
     9da:	70 91 dd 02 	lds	r23, 0x02DD
     9de:	62 95       	swap	r22
     9e0:	72 95       	swap	r23
     9e2:	70 7f       	andi	r23, 0xF0	; 240
     9e4:	76 27       	eor	r23, r22
     9e6:	60 7f       	andi	r22, 0xF0	; 240
     9e8:	76 27       	eor	r23, r22
     9ea:	89 ed       	ldi	r24, 0xD9	; 217
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     9f2:	60 91 7c 01 	lds	r22, 0x017C
     9f6:	80 91 7d 01 	lds	r24, 0x017D
     9fa:	78 2f       	mov	r23, r24
     9fc:	73 70       	andi	r23, 0x03	; 3
     9fe:	62 95       	swap	r22
     a00:	72 95       	swap	r23
     a02:	70 7f       	andi	r23, 0xF0	; 240
     a04:	76 27       	eor	r23, r22
     a06:	60 7f       	andi	r22, 0xF0	; 240
     a08:	76 27       	eor	r23, r22
     a0a:	88 ed       	ldi	r24, 0xD8	; 216
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     a12:	60 91 de 02 	lds	r22, 0x02DE
     a16:	70 91 df 02 	lds	r23, 0x02DF
     a1a:	62 95       	swap	r22
     a1c:	72 95       	swap	r23
     a1e:	70 7f       	andi	r23, 0xF0	; 240
     a20:	76 27       	eor	r23, r22
     a22:	60 7f       	andi	r22, 0xF0	; 240
     a24:	76 27       	eor	r23, r22
     a26:	87 ed       	ldi	r24, 0xD7	; 215
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     a2e:	60 91 e0 02 	lds	r22, 0x02E0
     a32:	70 91 e1 02 	lds	r23, 0x02E1
     a36:	62 95       	swap	r22
     a38:	72 95       	swap	r23
     a3a:	70 7f       	andi	r23, 0xF0	; 240
     a3c:	76 27       	eor	r23, r22
     a3e:	60 7f       	andi	r22, 0xF0	; 240
     a40:	76 27       	eor	r23, r22
     a42:	86 ed       	ldi	r24, 0xD6	; 214
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     a4a:	60 91 e2 02 	lds	r22, 0x02E2
     a4e:	70 91 e3 02 	lds	r23, 0x02E3
     a52:	62 95       	swap	r22
     a54:	72 95       	swap	r23
     a56:	70 7f       	andi	r23, 0xF0	; 240
     a58:	76 27       	eor	r23, r22
     a5a:	60 7f       	andi	r22, 0xF0	; 240
     a5c:	76 27       	eor	r23, r22
     a5e:	85 ed       	ldi	r24, 0xD5	; 213
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     a66:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     a6a:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     a6c:	88 30       	cpi	r24, 0x08	; 8
     a6e:	08 f4       	brcc	.+2      	; 0xa72 <update_control_voltages+0x200>
     a70:	c8 e0       	ldi	r28, 0x08	; 8
	value_to_display = current_patch.number + 100*clock.divider; //100*note;
     a72:	60 91 03 03 	lds	r22, 0x0303
     a76:	40 91 7f 03 	lds	r20, 0x037F
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	24 e6       	ldi	r18, 0x64	; 100
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	42 9f       	mul	r20, r18
     a82:	c0 01       	movw	r24, r0
     a84:	43 9f       	mul	r20, r19
     a86:	90 0d       	add	r25, r0
     a88:	52 9f       	mul	r21, r18
     a8a:	90 0d       	add	r25, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	86 0f       	add	r24, r22
     a90:	91 1d       	adc	r25, r1
     a92:	90 93 fe 01 	sts	0x01FE, r25
     a96:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     a9a:	8c 2f       	mov	r24, r28
     a9c:	88 50       	subi	r24, 0x08	; 8
     a9e:	6c e0       	ldi	r22, 0x0C	; 12
     aa0:	73 e0       	ldi	r23, 0x03	; 3
     aa2:	0e 94 97 13 	call	0x272e	; 0x272e <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     aa6:	bc 01       	movw	r22, r24
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	20 91 e6 02 	lds	r18, 0x02E6
     ab0:	30 91 e7 02 	lds	r19, 0x02E7
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	0e 94 28 1b 	call	0x3650	; 0x3650 <__mulsi3>
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	07 2e       	mov	r0, r23
     ac2:	7a e0       	ldi	r23, 0x0A	; 10
     ac4:	b6 95       	lsr	r27
     ac6:	a7 95       	ror	r26
     ac8:	97 95       	ror	r25
     aca:	87 95       	ror	r24
     acc:	7a 95       	dec	r23
     ace:	d1 f7       	brne	.-12     	; 0xac4 <update_control_voltages+0x252>
     ad0:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     ad2:	60 91 e4 02 	lds	r22, 0x02E4
     ad6:	70 91 e5 02 	lds	r23, 0x02E5
     ada:	62 95       	swap	r22
     adc:	72 95       	swap	r23
     ade:	70 7f       	andi	r23, 0xF0	; 240
     ae0:	76 27       	eor	r23, r22
     ae2:	60 7f       	andi	r22, 0xF0	; 240
     ae4:	76 27       	eor	r23, r22
     ae6:	86 0f       	add	r24, r22
     ae8:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     aea:	bc 01       	movw	r22, r24
     aec:	80 e4       	ldi	r24, 0x40	; 64
     aee:	60 30       	cpi	r22, 0x00	; 0
     af0:	78 07       	cpc	r23, r24
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <update_control_voltages+0x286>
     af4:	6f ef       	ldi	r22, 0xFF	; 255
     af6:	7f e3       	ldi	r23, 0x3F	; 63
     af8:	84 ed       	ldi	r24, 0xD4	; 212
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     b00:	60 91 e8 02 	lds	r22, 0x02E8
     b04:	70 91 e9 02 	lds	r23, 0x02E9
     b08:	62 95       	swap	r22
     b0a:	72 95       	swap	r23
     b0c:	70 7f       	andi	r23, 0xF0	; 240
     b0e:	76 27       	eor	r23, r22
     b10:	60 7f       	andi	r22, 0xF0	; 240
     b12:	76 27       	eor	r23, r22
     b14:	82 ed       	ldi	r24, 0xD2	; 210
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     b1c:	60 91 ea 02 	lds	r22, 0x02EA
     b20:	70 91 eb 02 	lds	r23, 0x02EB
     b24:	62 95       	swap	r22
     b26:	72 95       	swap	r23
     b28:	70 7f       	andi	r23, 0xF0	; 240
     b2a:	76 27       	eor	r23, r22
     b2c:	60 7f       	andi	r22, 0xF0	; 240
     b2e:	76 27       	eor	r23, r22
     b30:	81 ed       	ldi	r24, 0xD1	; 209
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     b38:	60 91 ec 02 	lds	r22, 0x02EC
     b3c:	70 91 ed 02 	lds	r23, 0x02ED
     b40:	62 95       	swap	r22
     b42:	72 95       	swap	r23
     b44:	70 7f       	andi	r23, 0xF0	; 240
     b46:	76 27       	eor	r23, r22
     b48:	60 7f       	andi	r22, 0xF0	; 240
     b4a:	76 27       	eor	r23, r22
     b4c:	80 ed       	ldi	r24, 0xD0	; 208
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     b54:	60 91 ee 02 	lds	r22, 0x02EE
     b58:	70 91 ef 02 	lds	r23, 0x02EF
     b5c:	62 95       	swap	r22
     b5e:	72 95       	swap	r23
     b60:	70 7f       	andi	r23, 0xF0	; 240
     b62:	76 27       	eor	r23, r22
     b64:	60 7f       	andi	r22, 0xF0	; 240
     b66:	76 27       	eor	r23, r22
     b68:	8f ec       	ldi	r24, 0xCF	; 207
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     b70:	60 91 f0 02 	lds	r22, 0x02F0
     b74:	70 91 f1 02 	lds	r23, 0x02F1
     b78:	62 95       	swap	r22
     b7a:	72 95       	swap	r23
     b7c:	70 7f       	andi	r23, 0xF0	; 240
     b7e:	76 27       	eor	r23, r22
     b80:	60 7f       	andi	r22, 0xF0	; 240
     b82:	76 27       	eor	r23, r22
     b84:	8e ec       	ldi	r24, 0xCE	; 206
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     b8c:	60 91 f2 02 	lds	r22, 0x02F2
     b90:	70 91 f3 02 	lds	r23, 0x02F3
     b94:	62 95       	swap	r22
     b96:	72 95       	swap	r23
     b98:	70 7f       	andi	r23, 0xF0	; 240
     b9a:	76 27       	eor	r23, r22
     b9c:	60 7f       	andi	r22, 0xF0	; 240
     b9e:	76 27       	eor	r23, r22
     ba0:	8d ec       	ldi	r24, 0xCD	; 205
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     ba8:	60 91 f4 02 	lds	r22, 0x02F4
     bac:	70 91 f5 02 	lds	r23, 0x02F5
     bb0:	62 95       	swap	r22
     bb2:	72 95       	swap	r23
     bb4:	70 7f       	andi	r23, 0xF0	; 240
     bb6:	76 27       	eor	r23, r22
     bb8:	60 7f       	andi	r22, 0xF0	; 240
     bba:	76 27       	eor	r23, r22
     bbc:	8c ec       	ldi	r24, 0xCC	; 204
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     bc4:	60 91 f8 02 	lds	r22, 0x02F8
     bc8:	70 91 f9 02 	lds	r23, 0x02F9
     bcc:	62 95       	swap	r22
     bce:	72 95       	swap	r23
     bd0:	70 7f       	andi	r23, 0xF0	; 240
     bd2:	76 27       	eor	r23, r22
     bd4:	60 7f       	andi	r22, 0xF0	; 240
     bd6:	76 27       	eor	r23, r22
     bd8:	8a ec       	ldi	r24, 0xCA	; 202
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     be0:	60 91 f6 02 	lds	r22, 0x02F6
     be4:	70 91 f7 02 	lds	r23, 0x02F7
     be8:	62 95       	swap	r22
     bea:	72 95       	swap	r23
     bec:	70 7f       	andi	r23, 0xF0	; 240
     bee:	76 27       	eor	r23, r22
     bf0:	60 7f       	andi	r22, 0xF0	; 240
     bf2:	76 27       	eor	r23, r22
     bf4:	8b ec       	ldi	r24, 0xCB	; 203
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     bfc:	60 91 fc 02 	lds	r22, 0x02FC
     c00:	70 91 fd 02 	lds	r23, 0x02FD
     c04:	62 95       	swap	r22
     c06:	72 95       	swap	r23
     c08:	70 7f       	andi	r23, 0xF0	; 240
     c0a:	76 27       	eor	r23, r22
     c0c:	60 7f       	andi	r22, 0xF0	; 240
     c0e:	76 27       	eor	r23, r22
     c10:	88 ec       	ldi	r24, 0xC8	; 200
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     c18:	60 91 fa 02 	lds	r22, 0x02FA
     c1c:	70 91 fb 02 	lds	r23, 0x02FB
     c20:	62 95       	swap	r22
     c22:	72 95       	swap	r23
     c24:	70 7f       	andi	r23, 0xF0	; 240
     c26:	76 27       	eor	r23, r22
     c28:	60 7f       	andi	r22, 0xF0	; 240
     c2a:	76 27       	eor	r23, r22
     c2c:	89 ec       	ldi	r24, 0xC9	; 201
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     c34:	8c 2f       	mov	r24, r28
     c36:	6f e0       	ldi	r22, 0x0F	; 15
     c38:	0e 94 c1 0b 	call	0x1782	; 0x1782 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     c3c:	6e e4       	ldi	r22, 0x4E	; 78
     c3e:	73 e0       	ldi	r23, 0x03	; 3
     c40:	0e 94 97 13 	call	0x272e	; 0x272e <interpolate_pitch_cv>
     c44:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     c46:	86 ee       	ldi	r24, 0xE6	; 230
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     c4e:	8c 2f       	mov	r24, r28
     c50:	60 ef       	ldi	r22, 0xF0	; 240
     c52:	0e 94 c1 0b 	call	0x1782	; 0x1782 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     c56:	6c e2       	ldi	r22, 0x2C	; 44
     c58:	73 e0       	ldi	r23, 0x03	; 3
     c5a:	0e 94 97 13 	call	0x272e	; 0x272e <interpolate_pitch_cv>
     c5e:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     c60:	85 ee       	ldi	r24, 0xE5	; 229
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     c68:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     c6a:	a1 9a       	sbi	0x14, 1	; 20
}			
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     c72:	84 b1       	in	r24, 0x04	; 4
     c74:	87 62       	ori	r24, 0x27	; 39
     c76:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     c78:	ec ed       	ldi	r30, 0xDC	; 220
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8c 65       	ori	r24, 0x5C	; 92
     c80:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     c82:	85 b1       	in	r24, 0x05	; 5
     c84:	89 7d       	andi	r24, 0xD9	; 217
     c86:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     c88:	ed ed       	ldi	r30, 0xDD	; 221
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	83 7f       	andi	r24, 0xF3	; 243
     c90:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     c92:	80 e5       	ldi	r24, 0x50	; 80
     c94:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     c96:	80 81       	ld	r24, Z
     c98:	87 7f       	andi	r24, 0xF7	; 247
     c9a:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     c9c:	80 81       	ld	r24, Z
     c9e:	87 7f       	andi	r24, 0xF7	; 247
     ca0:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     ca2:	80 81       	ld	r24, Z
     ca4:	88 60       	ori	r24, 0x08	; 8
     ca6:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     ca8:	80 81       	ld	r24, Z
     caa:	8f 7e       	andi	r24, 0xEF	; 239
     cac:	80 83       	st	Z, r24
	
}
     cae:	08 95       	ret

00000cb0 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     cb0:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     cb2:	0d b4       	in	r0, 0x2d	; 45
     cb4:	07 fe       	sbrs	r0, 7
     cb6:	fd cf       	rjmp	.-6      	; 0xcb2 <spi_shift_byte+0x2>
	return SPDR;
     cb8:	8e b5       	in	r24, 0x2e	; 46
	
}
     cba:	08 95       	ret

00000cbc <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     cbc:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     cbe:	80 91 02 03 	lds	r24, 0x0302
     cc2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     cc6:	90 91 c1 02 	lds	r25, 0x02C1
     cca:	98 2b       	or	r25, r24
     ccc:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     cd0:	20 91 bf 02 	lds	r18, 0x02BF
     cd4:	98 2f       	mov	r25, r24
     cd6:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     cd8:	89 2f       	mov	r24, r25
     cda:	82 27       	eor	r24, r18
     cdc:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     ce0:	89 23       	and	r24, r25
     ce2:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     ce6:	90 91 7b 03 	lds	r25, 0x037B
     cea:	89 27       	eor	r24, r25
     cec:	80 93 7b 03 	sts	0x037B, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     cf0:	80 91 01 03 	lds	r24, 0x0301
     cf4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     cf8:	90 91 c1 02 	lds	r25, 0x02C1
     cfc:	98 2b       	or	r25, r24
     cfe:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     d02:	20 91 bd 02 	lds	r18, 0x02BD
     d06:	98 2f       	mov	r25, r24
     d08:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     d0a:	89 2f       	mov	r24, r25
     d0c:	82 27       	eor	r24, r18
     d0e:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     d12:	89 23       	and	r24, r25
     d14:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     d18:	90 91 7c 03 	lds	r25, 0x037C
     d1c:	89 27       	eor	r24, r25
     d1e:	80 93 7c 03 	sts	0x037C, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     d22:	80 91 00 03 	lds	r24, 0x0300
     d26:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     d2a:	80 91 ff 02 	lds	r24, 0x02FF
     d2e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     d32:	30 91 7c 03 	lds	r19, 0x037C
     d36:	36 95       	lsr	r19
     d38:	36 95       	lsr	r19
     d3a:	36 95       	lsr	r19
     d3c:	34 70       	andi	r19, 0x04	; 4
     d3e:	80 91 07 03 	lds	r24, 0x0307
     d42:	83 30       	cpi	r24, 0x03	; 3
     d44:	11 f4       	brne	.+4      	; 0xd4a <update_spi+0x8e>
     d46:	80 e8       	ldi	r24, 0x80	; 128
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <update_spi+0x90>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
     d4c:	90 91 7d 03 	lds	r25, 0x037D
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     d50:	29 2f       	mov	r18, r25
     d52:	22 1f       	adc	r18, r18
     d54:	22 27       	eor	r18, r18
     d56:	22 1f       	adc	r18, r18
     d58:	22 95       	swap	r18
     d5a:	22 0f       	add	r18, r18
     d5c:	22 0f       	add	r18, r18
     d5e:	20 7c       	andi	r18, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     d60:	23 2b       	or	r18, r19
     d62:	96 95       	lsr	r25
     d64:	96 95       	lsr	r25
     d66:	96 95       	lsr	r25
     d68:	91 70       	andi	r25, 0x01	; 1
     d6a:	92 2b       	or	r25, r18
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     d6c:	89 2b       	or	r24, r25
     d6e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     d72:	ed ed       	ldi	r30, 0xDD	; 221
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	87 7f       	andi	r24, 0xF7	; 247
     d7a:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     d7c:	80 81       	ld	r24, Z
     d7e:	88 60       	ori	r24, 0x08	; 8
     d80:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     d82:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     d84:	08 95       	ret

00000d86 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b1 e0       	ldi	r27, 0x01	; 1
     d8a:	9d 01       	movw	r18, r26
     d8c:	24 5c       	subi	r18, 0xC4	; 196
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= 29; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     d90:	ed 91       	ld	r30, X+
     d92:	fc 91       	ld	r31, X
     d94:	11 97       	sbiw	r26, 0x01	; 1
     d96:	80 81       	ld	r24, Z
     d98:	41 81       	ldd	r20, Z+1	; 0x01
     d9a:	94 2f       	mov	r25, r20
     d9c:	93 70       	andi	r25, 0x03	; 3
     d9e:	95 95       	asr	r25
     da0:	87 95       	ror	r24
     da2:	95 95       	asr	r25
     da4:	87 95       	ror	r24
     da6:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     da8:	ed 91       	ld	r30, X+
     daa:	fd 91       	ld	r31, X+
     dac:	83 81       	ldd	r24, Z+3	; 0x03
     dae:	80 68       	ori	r24, 0x80	; 128
     db0:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= 29; i++) {
     db2:	a2 17       	cp	r26, r18
     db4:	b3 07       	cpc	r27, r19
     db6:	61 f7       	brne	.-40     	; 0xd90 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     db8:	08 95       	ret

00000dba <unlock_pots>:

void unlock_pots(void) {
     dba:	e0 e0       	ldi	r30, 0x00	; 0
     dbc:	f1 e0       	ldi	r31, 0x01	; 1
     dbe:	cf 01       	movw	r24, r30
     dc0:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked = 0;
     dc2:	a1 91       	ld	r26, Z+
     dc4:	b1 91       	ld	r27, Z+
     dc6:	13 96       	adiw	r26, 0x03	; 3
     dc8:	2c 91       	ld	r18, X
     dca:	13 97       	sbiw	r26, 0x03	; 3
     dcc:	2f 77       	andi	r18, 0x7F	; 127
     dce:	13 96       	adiw	r26, 0x03	; 3
     dd0:	2c 93       	st	X, r18
     dd2:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= 29; i++) {
     dd4:	e8 17       	cp	r30, r24
     dd6:	f9 07       	cpc	r31, r25
     dd8:	a1 f7       	brne	.-24     	; 0xdc2 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
     dda:	08 95       	ret

00000ddc <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	ab 97       	sbiw	r28, 0x2b	; 43
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     df4:	ee ed       	ldi	r30, 0xDE	; 222
     df6:	f2 e0       	ldi	r31, 0x02	; 2
     df8:	20 91 de 02 	lds	r18, 0x02DE
     dfc:	82 2f       	mov	r24, r18
     dfe:	82 95       	swap	r24
     e00:	80 7f       	andi	r24, 0xF0	; 240
     e02:	22 95       	swap	r18
     e04:	2f 70       	andi	r18, 0x0F	; 15
     e06:	90 91 df 02 	lds	r25, 0x02DF
     e0a:	93 70       	andi	r25, 0x03	; 3
     e0c:	92 95       	swap	r25
     e0e:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     e10:	df 01       	movw	r26, r30
     e12:	5a 97       	sbiw	r26, 0x1a	; 26
     e14:	3c 91       	ld	r19, X
     e16:	53 2f       	mov	r21, r19
     e18:	55 0f       	add	r21, r21
     e1a:	55 0f       	add	r21, r21
     e1c:	4a 81       	ldd	r20, Y+2	; 0x02
     e1e:	43 70       	andi	r20, 0x03	; 3
     e20:	45 2b       	or	r20, r21
     e22:	4a 83       	std	Y+2, r20	; 0x02
     e24:	63 2f       	mov	r22, r19
     e26:	62 95       	swap	r22
     e28:	66 95       	lsr	r22
     e2a:	66 95       	lsr	r22
     e2c:	63 70       	andi	r22, 0x03	; 3
     e2e:	11 96       	adiw	r26, 0x01	; 1
     e30:	4c 91       	ld	r20, X
     e32:	43 70       	andi	r20, 0x03	; 3
     e34:	44 0f       	add	r20, r20
     e36:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     e38:	df 01       	movw	r26, r30
     e3a:	58 97       	sbiw	r26, 0x18	; 24
     e3c:	3c 91       	ld	r19, X
     e3e:	53 2f       	mov	r21, r19
     e40:	52 95       	swap	r21
     e42:	50 7f       	andi	r21, 0xF0	; 240
     e44:	46 2b       	or	r20, r22
     e46:	45 2b       	or	r20, r21
     e48:	4b 83       	std	Y+3, r20	; 0x03
     e4a:	63 2f       	mov	r22, r19
     e4c:	62 95       	swap	r22
     e4e:	6f 70       	andi	r22, 0x0F	; 15
     e50:	11 96       	adiw	r26, 0x01	; 1
     e52:	4c 91       	ld	r20, X
     e54:	43 70       	andi	r20, 0x03	; 3
     e56:	42 95       	swap	r20
     e58:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     e5a:	df 01       	movw	r26, r30
     e5c:	56 97       	sbiw	r26, 0x16	; 22
     e5e:	3c 91       	ld	r19, X
     e60:	53 2f       	mov	r21, r19
     e62:	52 95       	swap	r21
     e64:	55 0f       	add	r21, r21
     e66:	55 0f       	add	r21, r21
     e68:	50 7c       	andi	r21, 0xC0	; 192
     e6a:	46 2b       	or	r20, r22
     e6c:	45 2b       	or	r20, r21
     e6e:	4c 83       	std	Y+4, r20	; 0x04
     e70:	11 96       	adiw	r26, 0x01	; 1
     e72:	4c 91       	ld	r20, X
     e74:	42 95       	swap	r20
     e76:	44 0f       	add	r20, r20
     e78:	44 0f       	add	r20, r20
     e7a:	40 7c       	andi	r20, 0xC0	; 192
     e7c:	36 95       	lsr	r19
     e7e:	36 95       	lsr	r19
     e80:	34 2b       	or	r19, r20
     e82:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     e84:	df 01       	movw	r26, r30
     e86:	54 97       	sbiw	r26, 0x14	; 20
     e88:	3c 91       	ld	r19, X
     e8a:	3e 83       	std	Y+6, r19	; 0x06
     e8c:	11 96       	adiw	r26, 0x01	; 1
     e8e:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     e90:	df 01       	movw	r26, r30
     e92:	52 97       	sbiw	r26, 0x12	; 18
     e94:	3c 91       	ld	r19, X
     e96:	53 2f       	mov	r21, r19
     e98:	55 0f       	add	r21, r21
     e9a:	55 0f       	add	r21, r21
     e9c:	43 70       	andi	r20, 0x03	; 3
     e9e:	45 2b       	or	r20, r21
     ea0:	4f 83       	std	Y+7, r20	; 0x07
     ea2:	63 2f       	mov	r22, r19
     ea4:	62 95       	swap	r22
     ea6:	66 95       	lsr	r22
     ea8:	66 95       	lsr	r22
     eaa:	63 70       	andi	r22, 0x03	; 3
     eac:	11 96       	adiw	r26, 0x01	; 1
     eae:	4c 91       	ld	r20, X
     eb0:	43 70       	andi	r20, 0x03	; 3
     eb2:	44 0f       	add	r20, r20
     eb4:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     eb6:	df 01       	movw	r26, r30
     eb8:	50 97       	sbiw	r26, 0x10	; 16
     eba:	3c 91       	ld	r19, X
     ebc:	53 2f       	mov	r21, r19
     ebe:	52 95       	swap	r21
     ec0:	50 7f       	andi	r21, 0xF0	; 240
     ec2:	46 2b       	or	r20, r22
     ec4:	45 2b       	or	r20, r21
     ec6:	48 87       	std	Y+8, r20	; 0x08
     ec8:	63 2f       	mov	r22, r19
     eca:	62 95       	swap	r22
     ecc:	6f 70       	andi	r22, 0x0F	; 15
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	4c 91       	ld	r20, X
     ed2:	43 70       	andi	r20, 0x03	; 3
     ed4:	42 95       	swap	r20
     ed6:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     ed8:	df 01       	movw	r26, r30
     eda:	1e 97       	sbiw	r26, 0x0e	; 14
     edc:	3c 91       	ld	r19, X
     ede:	53 2f       	mov	r21, r19
     ee0:	52 95       	swap	r21
     ee2:	55 0f       	add	r21, r21
     ee4:	55 0f       	add	r21, r21
     ee6:	50 7c       	andi	r21, 0xC0	; 192
     ee8:	46 2b       	or	r20, r22
     eea:	45 2b       	or	r20, r21
     eec:	49 87       	std	Y+9, r20	; 0x09
     eee:	11 96       	adiw	r26, 0x01	; 1
     ef0:	4c 91       	ld	r20, X
     ef2:	42 95       	swap	r20
     ef4:	44 0f       	add	r20, r20
     ef6:	44 0f       	add	r20, r20
     ef8:	40 7c       	andi	r20, 0xC0	; 192
     efa:	36 95       	lsr	r19
     efc:	36 95       	lsr	r19
     efe:	34 2b       	or	r19, r20
     f00:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     f02:	df 01       	movw	r26, r30
     f04:	1c 97       	sbiw	r26, 0x0c	; 12
     f06:	3c 91       	ld	r19, X
     f08:	3b 87       	std	Y+11, r19	; 0x0b
     f0a:	11 96       	adiw	r26, 0x01	; 1
     f0c:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     f0e:	df 01       	movw	r26, r30
     f10:	1a 97       	sbiw	r26, 0x0a	; 10
     f12:	3c 91       	ld	r19, X
     f14:	53 2f       	mov	r21, r19
     f16:	55 0f       	add	r21, r21
     f18:	55 0f       	add	r21, r21
     f1a:	43 70       	andi	r20, 0x03	; 3
     f1c:	45 2b       	or	r20, r21
     f1e:	4c 87       	std	Y+12, r20	; 0x0c
     f20:	63 2f       	mov	r22, r19
     f22:	62 95       	swap	r22
     f24:	66 95       	lsr	r22
     f26:	66 95       	lsr	r22
     f28:	63 70       	andi	r22, 0x03	; 3
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	4c 91       	ld	r20, X
     f2e:	43 70       	andi	r20, 0x03	; 3
     f30:	44 0f       	add	r20, r20
     f32:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
     f34:	df 01       	movw	r26, r30
     f36:	18 97       	sbiw	r26, 0x08	; 8
     f38:	3c 91       	ld	r19, X
     f3a:	53 2f       	mov	r21, r19
     f3c:	52 95       	swap	r21
     f3e:	50 7f       	andi	r21, 0xF0	; 240
     f40:	46 2b       	or	r20, r22
     f42:	45 2b       	or	r20, r21
     f44:	4d 87       	std	Y+13, r20	; 0x0d
     f46:	63 2f       	mov	r22, r19
     f48:	62 95       	swap	r22
     f4a:	6f 70       	andi	r22, 0x0F	; 15
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	4c 91       	ld	r20, X
     f50:	43 70       	andi	r20, 0x03	; 3
     f52:	42 95       	swap	r20
     f54:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
     f56:	df 01       	movw	r26, r30
     f58:	16 97       	sbiw	r26, 0x06	; 6
     f5a:	3c 91       	ld	r19, X
     f5c:	53 2f       	mov	r21, r19
     f5e:	52 95       	swap	r21
     f60:	55 0f       	add	r21, r21
     f62:	55 0f       	add	r21, r21
     f64:	50 7c       	andi	r21, 0xC0	; 192
     f66:	46 2b       	or	r20, r22
     f68:	45 2b       	or	r20, r21
     f6a:	4e 87       	std	Y+14, r20	; 0x0e
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	4c 91       	ld	r20, X
     f70:	42 95       	swap	r20
     f72:	44 0f       	add	r20, r20
     f74:	44 0f       	add	r20, r20
     f76:	40 7c       	andi	r20, 0xC0	; 192
     f78:	36 95       	lsr	r19
     f7a:	36 95       	lsr	r19
     f7c:	34 2b       	or	r19, r20
     f7e:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
     f80:	df 01       	movw	r26, r30
     f82:	14 97       	sbiw	r26, 0x04	; 4
     f84:	3c 91       	ld	r19, X
     f86:	38 8b       	std	Y+16, r19	; 0x10
     f88:	11 96       	adiw	r26, 0x01	; 1
     f8a:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
     f8c:	df 01       	movw	r26, r30
     f8e:	12 97       	sbiw	r26, 0x02	; 2
     f90:	3c 91       	ld	r19, X
     f92:	53 2f       	mov	r21, r19
     f94:	55 0f       	add	r21, r21
     f96:	55 0f       	add	r21, r21
     f98:	43 70       	andi	r20, 0x03	; 3
     f9a:	45 2b       	or	r20, r21
     f9c:	49 8b       	std	Y+17, r20	; 0x11
     f9e:	32 95       	swap	r19
     fa0:	36 95       	lsr	r19
     fa2:	36 95       	lsr	r19
     fa4:	33 70       	andi	r19, 0x03	; 3
     fa6:	11 96       	adiw	r26, 0x01	; 1
     fa8:	4c 91       	ld	r20, X
     faa:	43 70       	andi	r20, 0x03	; 3
     fac:	44 0f       	add	r20, r20
     fae:	44 0f       	add	r20, r20
     fb0:	83 2b       	or	r24, r19
     fb2:	84 2b       	or	r24, r20
     fb4:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
     fb6:	80 91 e0 02 	lds	r24, 0x02E0
     fba:	38 2f       	mov	r19, r24
     fbc:	32 95       	swap	r19
     fbe:	33 0f       	add	r19, r19
     fc0:	33 0f       	add	r19, r19
     fc2:	30 7c       	andi	r19, 0xC0	; 192
     fc4:	92 2b       	or	r25, r18
     fc6:	93 2b       	or	r25, r19
     fc8:	9b 8b       	std	Y+19, r25	; 0x13
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	92 95       	swap	r25
     fce:	99 0f       	add	r25, r25
     fd0:	99 0f       	add	r25, r25
     fd2:	90 7c       	andi	r25, 0xC0	; 192
     fd4:	86 95       	lsr	r24
     fd6:	86 95       	lsr	r24
     fd8:	89 2b       	or	r24, r25
     fda:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
     fdc:	80 91 e2 02 	lds	r24, 0x02E2
     fe0:	8d 8b       	std	Y+21, r24	; 0x15
     fe2:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
     fe4:	80 91 e4 02 	lds	r24, 0x02E4
     fe8:	28 2f       	mov	r18, r24
     fea:	22 0f       	add	r18, r18
     fec:	22 0f       	add	r18, r18
     fee:	93 70       	andi	r25, 0x03	; 3
     ff0:	92 2b       	or	r25, r18
     ff2:	9e 8b       	std	Y+22, r25	; 0x16
     ff4:	38 2f       	mov	r19, r24
     ff6:	32 95       	swap	r19
     ff8:	36 95       	lsr	r19
     ffa:	36 95       	lsr	r19
     ffc:	33 70       	andi	r19, 0x03	; 3
     ffe:	97 81       	ldd	r25, Z+7	; 0x07
    1000:	93 70       	andi	r25, 0x03	; 3
    1002:	99 0f       	add	r25, r25
    1004:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    1006:	80 91 e6 02 	lds	r24, 0x02E6
    100a:	28 2f       	mov	r18, r24
    100c:	22 95       	swap	r18
    100e:	20 7f       	andi	r18, 0xF0	; 240
    1010:	93 2b       	or	r25, r19
    1012:	92 2b       	or	r25, r18
    1014:	9f 8b       	std	Y+23, r25	; 0x17
    1016:	38 2f       	mov	r19, r24
    1018:	32 95       	swap	r19
    101a:	3f 70       	andi	r19, 0x0F	; 15
    101c:	91 85       	ldd	r25, Z+9	; 0x09
    101e:	93 70       	andi	r25, 0x03	; 3
    1020:	92 95       	swap	r25
    1022:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    1024:	80 91 e8 02 	lds	r24, 0x02E8
    1028:	28 2f       	mov	r18, r24
    102a:	22 95       	swap	r18
    102c:	22 0f       	add	r18, r18
    102e:	22 0f       	add	r18, r18
    1030:	20 7c       	andi	r18, 0xC0	; 192
    1032:	93 2b       	or	r25, r19
    1034:	92 2b       	or	r25, r18
    1036:	98 8f       	std	Y+24, r25	; 0x18
    1038:	93 85       	ldd	r25, Z+11	; 0x0b
    103a:	92 95       	swap	r25
    103c:	99 0f       	add	r25, r25
    103e:	99 0f       	add	r25, r25
    1040:	90 7c       	andi	r25, 0xC0	; 192
    1042:	86 95       	lsr	r24
    1044:	86 95       	lsr	r24
    1046:	89 2b       	or	r24, r25
    1048:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    104a:	80 91 ea 02 	lds	r24, 0x02EA
    104e:	8a 8f       	std	Y+26, r24	; 0x1a
    1050:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    1052:	80 91 ec 02 	lds	r24, 0x02EC
    1056:	28 2f       	mov	r18, r24
    1058:	22 0f       	add	r18, r18
    105a:	22 0f       	add	r18, r18
    105c:	93 70       	andi	r25, 0x03	; 3
    105e:	92 2b       	or	r25, r18
    1060:	9b 8f       	std	Y+27, r25	; 0x1b
    1062:	38 2f       	mov	r19, r24
    1064:	32 95       	swap	r19
    1066:	36 95       	lsr	r19
    1068:	36 95       	lsr	r19
    106a:	33 70       	andi	r19, 0x03	; 3
    106c:	97 85       	ldd	r25, Z+15	; 0x0f
    106e:	93 70       	andi	r25, 0x03	; 3
    1070:	99 0f       	add	r25, r25
    1072:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    1074:	80 91 ee 02 	lds	r24, 0x02EE
    1078:	28 2f       	mov	r18, r24
    107a:	22 95       	swap	r18
    107c:	20 7f       	andi	r18, 0xF0	; 240
    107e:	93 2b       	or	r25, r19
    1080:	92 2b       	or	r25, r18
    1082:	9c 8f       	std	Y+28, r25	; 0x1c
    1084:	38 2f       	mov	r19, r24
    1086:	32 95       	swap	r19
    1088:	3f 70       	andi	r19, 0x0F	; 15
    108a:	91 89       	ldd	r25, Z+17	; 0x11
    108c:	93 70       	andi	r25, 0x03	; 3
    108e:	92 95       	swap	r25
    1090:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    1092:	80 91 f0 02 	lds	r24, 0x02F0
    1096:	28 2f       	mov	r18, r24
    1098:	22 95       	swap	r18
    109a:	22 0f       	add	r18, r18
    109c:	22 0f       	add	r18, r18
    109e:	20 7c       	andi	r18, 0xC0	; 192
    10a0:	93 2b       	or	r25, r19
    10a2:	92 2b       	or	r25, r18
    10a4:	9d 8f       	std	Y+29, r25	; 0x1d
    10a6:	93 89       	ldd	r25, Z+19	; 0x13
    10a8:	92 95       	swap	r25
    10aa:	99 0f       	add	r25, r25
    10ac:	99 0f       	add	r25, r25
    10ae:	90 7c       	andi	r25, 0xC0	; 192
    10b0:	86 95       	lsr	r24
    10b2:	86 95       	lsr	r24
    10b4:	89 2b       	or	r24, r25
    10b6:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    10b8:	80 91 f2 02 	lds	r24, 0x02F2
    10bc:	8f 8f       	std	Y+31, r24	; 0x1f
    10be:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    10c0:	80 91 f4 02 	lds	r24, 0x02F4
    10c4:	28 2f       	mov	r18, r24
    10c6:	22 0f       	add	r18, r18
    10c8:	22 0f       	add	r18, r18
    10ca:	93 70       	andi	r25, 0x03	; 3
    10cc:	92 2b       	or	r25, r18
    10ce:	98 a3       	lds	r25, 0x58
    10d0:	38 2f       	mov	r19, r24
    10d2:	32 95       	swap	r19
    10d4:	36 95       	lsr	r19
    10d6:	36 95       	lsr	r19
    10d8:	33 70       	andi	r19, 0x03	; 3
    10da:	97 89       	ldd	r25, Z+23	; 0x17
    10dc:	93 70       	andi	r25, 0x03	; 3
    10de:	99 0f       	add	r25, r25
    10e0:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    10e2:	80 91 f6 02 	lds	r24, 0x02F6
    10e6:	28 2f       	mov	r18, r24
    10e8:	22 95       	swap	r18
    10ea:	20 7f       	andi	r18, 0xF0	; 240
    10ec:	93 2b       	or	r25, r19
    10ee:	92 2b       	or	r25, r18
    10f0:	99 a3       	lds	r25, 0x59
    10f2:	38 2f       	mov	r19, r24
    10f4:	32 95       	swap	r19
    10f6:	3f 70       	andi	r19, 0x0F	; 15
    10f8:	91 8d       	ldd	r25, Z+25	; 0x19
    10fa:	93 70       	andi	r25, 0x03	; 3
    10fc:	92 95       	swap	r25
    10fe:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    1100:	80 91 f8 02 	lds	r24, 0x02F8
    1104:	28 2f       	mov	r18, r24
    1106:	22 95       	swap	r18
    1108:	22 0f       	add	r18, r18
    110a:	22 0f       	add	r18, r18
    110c:	20 7c       	andi	r18, 0xC0	; 192
    110e:	93 2b       	or	r25, r19
    1110:	92 2b       	or	r25, r18
    1112:	9a a3       	lds	r25, 0x5a
    1114:	93 8d       	ldd	r25, Z+27	; 0x1b
    1116:	92 95       	swap	r25
    1118:	99 0f       	add	r25, r25
    111a:	99 0f       	add	r25, r25
    111c:	90 7c       	andi	r25, 0xC0	; 192
    111e:	86 95       	lsr	r24
    1120:	86 95       	lsr	r24
    1122:	89 2b       	or	r24, r25
    1124:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    1126:	80 91 fa 02 	lds	r24, 0x02FA
    112a:	8c a3       	lds	r24, 0x5c
    112c:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    112e:	80 91 fc 02 	lds	r24, 0x02FC
    1132:	28 2f       	mov	r18, r24
    1134:	22 0f       	add	r18, r18
    1136:	22 0f       	add	r18, r18
    1138:	93 70       	andi	r25, 0x03	; 3
    113a:	92 2b       	or	r25, r18
    113c:	9d a3       	lds	r25, 0x5d
    113e:	82 95       	swap	r24
    1140:	86 95       	lsr	r24
    1142:	86 95       	lsr	r24
    1144:	83 70       	andi	r24, 0x03	; 3
    1146:	2e a1       	lds	r18, 0x4e
    1148:	20 7f       	andi	r18, 0xF0	; 240
    114a:	97 8d       	ldd	r25, Z+31	; 0x1f
    114c:	93 70       	andi	r25, 0x03	; 3
    114e:	99 0f       	add	r25, r25
    1150:	99 0f       	add	r25, r25
    1152:	82 2b       	or	r24, r18
    1154:	89 2b       	or	r24, r25
    1156:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    1158:	80 91 fe 02 	lds	r24, 0x02FE
    115c:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    115e:	80 91 ff 02 	lds	r24, 0x02FF
    1162:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    1164:	80 91 00 03 	lds	r24, 0x0300
    1168:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    116a:	80 91 01 03 	lds	r24, 0x0301
    116e:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    1170:	80 91 02 03 	lds	r24, 0x0302
    1174:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    1176:	0e 94 c3 06 	call	0xd86	; 0xd86 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    117a:	80 91 7d 03 	lds	r24, 0x037D
    117e:	8f 77       	andi	r24, 0x7F	; 127
    1180:	80 93 7d 03 	sts	0x037D, r24
	current_patch.mode = MEMORY;
    1184:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    1188:	21 2f       	mov	r18, r17
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	8b e2       	ldi	r24, 0x2B	; 43
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	28 9f       	mul	r18, r24
    1192:	b0 01       	movw	r22, r0
    1194:	29 9f       	mul	r18, r25
    1196:	70 0d       	add	r23, r0
    1198:	38 9f       	mul	r19, r24
    119a:	70 0d       	add	r23, r0
    119c:	11 24       	eor	r1, r1
    119e:	60 50       	subi	r22, 0x00	; 0
    11a0:	70 40       	sbci	r23, 0x00	; 0
    11a2:	ce 01       	movw	r24, r28
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	4b e2       	ldi	r20, 0x2B	; 43
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	0e 94 9f 1b 	call	0x373e	; 0x373e <__eeupd_block_m6450a>
}	
    11ae:	ab 96       	adiw	r28, 0x2b	; 43
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	08 95       	ret

000011c2 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	c3 54       	subi	r28, 0x43	; 67
    11ce:	d0 40       	sbci	r29, 0x00	; 0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	2b e2       	ldi	r18, 0x2B	; 43
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	82 9f       	mul	r24, r18
    11e2:	b0 01       	movw	r22, r0
    11e4:	83 9f       	mul	r24, r19
    11e6:	70 0d       	add	r23, r0
    11e8:	92 9f       	mul	r25, r18
    11ea:	70 0d       	add	r23, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	60 50       	subi	r22, 0x00	; 0
    11f0:	70 40       	sbci	r23, 0x00	; 0
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	4b e2       	ldi	r20, 0x2B	; 43
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	0e 94 89 1b 	call	0x3712	; 0x3712 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    11fe:	ee ed       	ldi	r30, 0xDE	; 222
    1200:	f2 e0       	ldi	r31, 0x02	; 2
    1202:	8a 89       	ldd	r24, Y+18	; 0x12
    1204:	28 2f       	mov	r18, r24
    1206:	22 95       	swap	r18
    1208:	2f 70       	andi	r18, 0x0F	; 15
    120a:	9b 89       	ldd	r25, Y+19	; 0x13
    120c:	39 2f       	mov	r19, r25
    120e:	32 95       	swap	r19
    1210:	30 7f       	andi	r19, 0xF0	; 240
    1212:	32 2b       	or	r19, r18
    1214:	29 2f       	mov	r18, r25
    1216:	22 95       	swap	r18
    1218:	2f 70       	andi	r18, 0x0F	; 15
    121a:	23 70       	andi	r18, 0x03	; 3
    121c:	30 93 de 02 	sts	0x02DE, r19
    1220:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    1224:	df 01       	movw	r26, r30
    1226:	5a 97       	sbiw	r26, 0x1a	; 26
    1228:	4a 81       	ldd	r20, Y+2	; 0x02
    122a:	46 95       	lsr	r20
    122c:	46 95       	lsr	r20
    122e:	2b 81       	ldd	r18, Y+3	; 0x03
    1230:	32 2f       	mov	r19, r18
    1232:	32 95       	swap	r19
    1234:	33 0f       	add	r19, r19
    1236:	33 0f       	add	r19, r19
    1238:	30 7c       	andi	r19, 0xC0	; 192
    123a:	43 2b       	or	r20, r19
    123c:	32 2f       	mov	r19, r18
    123e:	36 95       	lsr	r19
    1240:	36 95       	lsr	r19
    1242:	33 70       	andi	r19, 0x03	; 3
    1244:	4c 93       	st	X, r20
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    124a:	df 01       	movw	r26, r30
    124c:	58 97       	sbiw	r26, 0x18	; 24
    124e:	32 2f       	mov	r19, r18
    1250:	32 95       	swap	r19
    1252:	3f 70       	andi	r19, 0x0F	; 15
    1254:	2c 81       	ldd	r18, Y+4	; 0x04
    1256:	42 2f       	mov	r20, r18
    1258:	42 95       	swap	r20
    125a:	40 7f       	andi	r20, 0xF0	; 240
    125c:	43 2b       	or	r20, r19
    125e:	32 2f       	mov	r19, r18
    1260:	32 95       	swap	r19
    1262:	3f 70       	andi	r19, 0x0F	; 15
    1264:	33 70       	andi	r19, 0x03	; 3
    1266:	4c 93       	st	X, r20
    1268:	11 96       	adiw	r26, 0x01	; 1
    126a:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    126c:	df 01       	movw	r26, r30
    126e:	56 97       	sbiw	r26, 0x16	; 22
    1270:	22 95       	swap	r18
    1272:	26 95       	lsr	r18
    1274:	26 95       	lsr	r18
    1276:	23 70       	andi	r18, 0x03	; 3
    1278:	3d 81       	ldd	r19, Y+5	; 0x05
    127a:	43 2f       	mov	r20, r19
    127c:	44 0f       	add	r20, r20
    127e:	44 0f       	add	r20, r20
    1280:	24 2b       	or	r18, r20
    1282:	32 95       	swap	r19
    1284:	36 95       	lsr	r19
    1286:	36 95       	lsr	r19
    1288:	33 70       	andi	r19, 0x03	; 3
    128a:	2c 93       	st	X, r18
    128c:	11 96       	adiw	r26, 0x01	; 1
    128e:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    1290:	df 01       	movw	r26, r30
    1292:	54 97       	sbiw	r26, 0x14	; 20
    1294:	4e 81       	ldd	r20, Y+6	; 0x06
    1296:	2f 81       	ldd	r18, Y+7	; 0x07
    1298:	32 2f       	mov	r19, r18
    129a:	33 70       	andi	r19, 0x03	; 3
    129c:	4c 93       	st	X, r20
    129e:	11 96       	adiw	r26, 0x01	; 1
    12a0:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    12a2:	df 01       	movw	r26, r30
    12a4:	52 97       	sbiw	r26, 0x12	; 18
    12a6:	32 2f       	mov	r19, r18
    12a8:	36 95       	lsr	r19
    12aa:	36 95       	lsr	r19
    12ac:	28 85       	ldd	r18, Y+8	; 0x08
    12ae:	42 2f       	mov	r20, r18
    12b0:	42 95       	swap	r20
    12b2:	44 0f       	add	r20, r20
    12b4:	44 0f       	add	r20, r20
    12b6:	40 7c       	andi	r20, 0xC0	; 192
    12b8:	43 2b       	or	r20, r19
    12ba:	32 2f       	mov	r19, r18
    12bc:	36 95       	lsr	r19
    12be:	36 95       	lsr	r19
    12c0:	33 70       	andi	r19, 0x03	; 3
    12c2:	4c 93       	st	X, r20
    12c4:	11 96       	adiw	r26, 0x01	; 1
    12c6:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    12c8:	df 01       	movw	r26, r30
    12ca:	50 97       	sbiw	r26, 0x10	; 16
    12cc:	32 2f       	mov	r19, r18
    12ce:	32 95       	swap	r19
    12d0:	3f 70       	andi	r19, 0x0F	; 15
    12d2:	29 85       	ldd	r18, Y+9	; 0x09
    12d4:	42 2f       	mov	r20, r18
    12d6:	42 95       	swap	r20
    12d8:	40 7f       	andi	r20, 0xF0	; 240
    12da:	43 2b       	or	r20, r19
    12dc:	32 2f       	mov	r19, r18
    12de:	32 95       	swap	r19
    12e0:	3f 70       	andi	r19, 0x0F	; 15
    12e2:	33 70       	andi	r19, 0x03	; 3
    12e4:	4c 93       	st	X, r20
    12e6:	11 96       	adiw	r26, 0x01	; 1
    12e8:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    12ea:	df 01       	movw	r26, r30
    12ec:	1e 97       	sbiw	r26, 0x0e	; 14
    12ee:	22 95       	swap	r18
    12f0:	26 95       	lsr	r18
    12f2:	26 95       	lsr	r18
    12f4:	23 70       	andi	r18, 0x03	; 3
    12f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    12f8:	43 2f       	mov	r20, r19
    12fa:	44 0f       	add	r20, r20
    12fc:	44 0f       	add	r20, r20
    12fe:	24 2b       	or	r18, r20
    1300:	32 95       	swap	r19
    1302:	36 95       	lsr	r19
    1304:	36 95       	lsr	r19
    1306:	33 70       	andi	r19, 0x03	; 3
    1308:	2c 93       	st	X, r18
    130a:	11 96       	adiw	r26, 0x01	; 1
    130c:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    130e:	df 01       	movw	r26, r30
    1310:	1c 97       	sbiw	r26, 0x0c	; 12
    1312:	4b 85       	ldd	r20, Y+11	; 0x0b
    1314:	2c 85       	ldd	r18, Y+12	; 0x0c
    1316:	32 2f       	mov	r19, r18
    1318:	33 70       	andi	r19, 0x03	; 3
    131a:	4c 93       	st	X, r20
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1320:	df 01       	movw	r26, r30
    1322:	1a 97       	sbiw	r26, 0x0a	; 10
    1324:	32 2f       	mov	r19, r18
    1326:	36 95       	lsr	r19
    1328:	36 95       	lsr	r19
    132a:	2d 85       	ldd	r18, Y+13	; 0x0d
    132c:	42 2f       	mov	r20, r18
    132e:	42 95       	swap	r20
    1330:	44 0f       	add	r20, r20
    1332:	44 0f       	add	r20, r20
    1334:	40 7c       	andi	r20, 0xC0	; 192
    1336:	43 2b       	or	r20, r19
    1338:	32 2f       	mov	r19, r18
    133a:	36 95       	lsr	r19
    133c:	36 95       	lsr	r19
    133e:	33 70       	andi	r19, 0x03	; 3
    1340:	4c 93       	st	X, r20
    1342:	11 96       	adiw	r26, 0x01	; 1
    1344:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    1346:	df 01       	movw	r26, r30
    1348:	18 97       	sbiw	r26, 0x08	; 8
    134a:	32 2f       	mov	r19, r18
    134c:	32 95       	swap	r19
    134e:	3f 70       	andi	r19, 0x0F	; 15
    1350:	2e 85       	ldd	r18, Y+14	; 0x0e
    1352:	42 2f       	mov	r20, r18
    1354:	42 95       	swap	r20
    1356:	40 7f       	andi	r20, 0xF0	; 240
    1358:	43 2b       	or	r20, r19
    135a:	32 2f       	mov	r19, r18
    135c:	32 95       	swap	r19
    135e:	3f 70       	andi	r19, 0x0F	; 15
    1360:	33 70       	andi	r19, 0x03	; 3
    1362:	4c 93       	st	X, r20
    1364:	11 96       	adiw	r26, 0x01	; 1
    1366:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    1368:	df 01       	movw	r26, r30
    136a:	16 97       	sbiw	r26, 0x06	; 6
    136c:	22 95       	swap	r18
    136e:	26 95       	lsr	r18
    1370:	26 95       	lsr	r18
    1372:	23 70       	andi	r18, 0x03	; 3
    1374:	3f 85       	ldd	r19, Y+15	; 0x0f
    1376:	43 2f       	mov	r20, r19
    1378:	44 0f       	add	r20, r20
    137a:	44 0f       	add	r20, r20
    137c:	24 2b       	or	r18, r20
    137e:	32 95       	swap	r19
    1380:	36 95       	lsr	r19
    1382:	36 95       	lsr	r19
    1384:	33 70       	andi	r19, 0x03	; 3
    1386:	2c 93       	st	X, r18
    1388:	11 96       	adiw	r26, 0x01	; 1
    138a:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    138c:	df 01       	movw	r26, r30
    138e:	14 97       	sbiw	r26, 0x04	; 4
    1390:	48 89       	ldd	r20, Y+16	; 0x10
    1392:	29 89       	ldd	r18, Y+17	; 0x11
    1394:	32 2f       	mov	r19, r18
    1396:	33 70       	andi	r19, 0x03	; 3
    1398:	4c 93       	st	X, r20
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    139e:	df 01       	movw	r26, r30
    13a0:	12 97       	sbiw	r26, 0x02	; 2
    13a2:	26 95       	lsr	r18
    13a4:	26 95       	lsr	r18
    13a6:	38 2f       	mov	r19, r24
    13a8:	32 95       	swap	r19
    13aa:	33 0f       	add	r19, r19
    13ac:	33 0f       	add	r19, r19
    13ae:	30 7c       	andi	r19, 0xC0	; 192
    13b0:	23 2b       	or	r18, r19
    13b2:	86 95       	lsr	r24
    13b4:	86 95       	lsr	r24
    13b6:	83 70       	andi	r24, 0x03	; 3
    13b8:	2c 93       	st	X, r18
    13ba:	11 96       	adiw	r26, 0x01	; 1
    13bc:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    13be:	92 95       	swap	r25
    13c0:	96 95       	lsr	r25
    13c2:	96 95       	lsr	r25
    13c4:	93 70       	andi	r25, 0x03	; 3
    13c6:	8c 89       	ldd	r24, Y+20	; 0x14
    13c8:	28 2f       	mov	r18, r24
    13ca:	22 0f       	add	r18, r18
    13cc:	22 0f       	add	r18, r18
    13ce:	92 2b       	or	r25, r18
    13d0:	82 95       	swap	r24
    13d2:	86 95       	lsr	r24
    13d4:	86 95       	lsr	r24
    13d6:	83 70       	andi	r24, 0x03	; 3
    13d8:	90 93 e0 02 	sts	0x02E0, r25
    13dc:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    13de:	2d 89       	ldd	r18, Y+21	; 0x15
    13e0:	8e 89       	ldd	r24, Y+22	; 0x16
    13e2:	98 2f       	mov	r25, r24
    13e4:	93 70       	andi	r25, 0x03	; 3
    13e6:	20 93 e2 02 	sts	0x02E2, r18
    13ea:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    13ec:	98 2f       	mov	r25, r24
    13ee:	96 95       	lsr	r25
    13f0:	96 95       	lsr	r25
    13f2:	8f 89       	ldd	r24, Y+23	; 0x17
    13f4:	28 2f       	mov	r18, r24
    13f6:	22 95       	swap	r18
    13f8:	22 0f       	add	r18, r18
    13fa:	22 0f       	add	r18, r18
    13fc:	20 7c       	andi	r18, 0xC0	; 192
    13fe:	29 2b       	or	r18, r25
    1400:	98 2f       	mov	r25, r24
    1402:	96 95       	lsr	r25
    1404:	96 95       	lsr	r25
    1406:	93 70       	andi	r25, 0x03	; 3
    1408:	20 93 e4 02 	sts	0x02E4, r18
    140c:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    140e:	98 2f       	mov	r25, r24
    1410:	92 95       	swap	r25
    1412:	9f 70       	andi	r25, 0x0F	; 15
    1414:	88 8d       	ldd	r24, Y+24	; 0x18
    1416:	28 2f       	mov	r18, r24
    1418:	22 95       	swap	r18
    141a:	20 7f       	andi	r18, 0xF0	; 240
    141c:	29 2b       	or	r18, r25
    141e:	98 2f       	mov	r25, r24
    1420:	92 95       	swap	r25
    1422:	9f 70       	andi	r25, 0x0F	; 15
    1424:	93 70       	andi	r25, 0x03	; 3
    1426:	20 93 e6 02 	sts	0x02E6, r18
    142a:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    142c:	82 95       	swap	r24
    142e:	86 95       	lsr	r24
    1430:	86 95       	lsr	r24
    1432:	83 70       	andi	r24, 0x03	; 3
    1434:	99 8d       	ldd	r25, Y+25	; 0x19
    1436:	29 2f       	mov	r18, r25
    1438:	22 0f       	add	r18, r18
    143a:	22 0f       	add	r18, r18
    143c:	82 2b       	or	r24, r18
    143e:	92 95       	swap	r25
    1440:	96 95       	lsr	r25
    1442:	96 95       	lsr	r25
    1444:	93 70       	andi	r25, 0x03	; 3
    1446:	80 93 e8 02 	sts	0x02E8, r24
    144a:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    144c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    144e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1450:	98 2f       	mov	r25, r24
    1452:	93 70       	andi	r25, 0x03	; 3
    1454:	20 93 ea 02 	sts	0x02EA, r18
    1458:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    145a:	98 2f       	mov	r25, r24
    145c:	96 95       	lsr	r25
    145e:	96 95       	lsr	r25
    1460:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1462:	28 2f       	mov	r18, r24
    1464:	22 95       	swap	r18
    1466:	22 0f       	add	r18, r18
    1468:	22 0f       	add	r18, r18
    146a:	20 7c       	andi	r18, 0xC0	; 192
    146c:	29 2b       	or	r18, r25
    146e:	98 2f       	mov	r25, r24
    1470:	96 95       	lsr	r25
    1472:	96 95       	lsr	r25
    1474:	93 70       	andi	r25, 0x03	; 3
    1476:	20 93 ec 02 	sts	0x02EC, r18
    147a:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    147c:	98 2f       	mov	r25, r24
    147e:	92 95       	swap	r25
    1480:	9f 70       	andi	r25, 0x0F	; 15
    1482:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1484:	28 2f       	mov	r18, r24
    1486:	22 95       	swap	r18
    1488:	20 7f       	andi	r18, 0xF0	; 240
    148a:	29 2b       	or	r18, r25
    148c:	98 2f       	mov	r25, r24
    148e:	92 95       	swap	r25
    1490:	9f 70       	andi	r25, 0x0F	; 15
    1492:	93 70       	andi	r25, 0x03	; 3
    1494:	20 93 ee 02 	sts	0x02EE, r18
    1498:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    149a:	82 95       	swap	r24
    149c:	86 95       	lsr	r24
    149e:	86 95       	lsr	r24
    14a0:	83 70       	andi	r24, 0x03	; 3
    14a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14a4:	29 2f       	mov	r18, r25
    14a6:	22 0f       	add	r18, r18
    14a8:	22 0f       	add	r18, r18
    14aa:	82 2b       	or	r24, r18
    14ac:	92 95       	swap	r25
    14ae:	96 95       	lsr	r25
    14b0:	96 95       	lsr	r25
    14b2:	93 70       	andi	r25, 0x03	; 3
    14b4:	80 93 f0 02 	sts	0x02F0, r24
    14b8:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    14ba:	2f 8d       	ldd	r18, Y+31	; 0x1f
    14bc:	88 a1       	lds	r24, 0x48
    14be:	98 2f       	mov	r25, r24
    14c0:	93 70       	andi	r25, 0x03	; 3
    14c2:	20 93 f2 02 	sts	0x02F2, r18
    14c6:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    14c8:	98 2f       	mov	r25, r24
    14ca:	96 95       	lsr	r25
    14cc:	96 95       	lsr	r25
    14ce:	89 a1       	lds	r24, 0x49
    14d0:	28 2f       	mov	r18, r24
    14d2:	22 95       	swap	r18
    14d4:	22 0f       	add	r18, r18
    14d6:	22 0f       	add	r18, r18
    14d8:	20 7c       	andi	r18, 0xC0	; 192
    14da:	29 2b       	or	r18, r25
    14dc:	98 2f       	mov	r25, r24
    14de:	96 95       	lsr	r25
    14e0:	96 95       	lsr	r25
    14e2:	93 70       	andi	r25, 0x03	; 3
    14e4:	20 93 f4 02 	sts	0x02F4, r18
    14e8:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    14ea:	98 2f       	mov	r25, r24
    14ec:	92 95       	swap	r25
    14ee:	9f 70       	andi	r25, 0x0F	; 15
    14f0:	8a a1       	lds	r24, 0x4a
    14f2:	28 2f       	mov	r18, r24
    14f4:	22 95       	swap	r18
    14f6:	20 7f       	andi	r18, 0xF0	; 240
    14f8:	29 2b       	or	r18, r25
    14fa:	98 2f       	mov	r25, r24
    14fc:	92 95       	swap	r25
    14fe:	9f 70       	andi	r25, 0x0F	; 15
    1500:	93 70       	andi	r25, 0x03	; 3
    1502:	20 93 f6 02 	sts	0x02F6, r18
    1506:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1508:	82 95       	swap	r24
    150a:	86 95       	lsr	r24
    150c:	86 95       	lsr	r24
    150e:	83 70       	andi	r24, 0x03	; 3
    1510:	9b a1       	lds	r25, 0x4b
    1512:	29 2f       	mov	r18, r25
    1514:	22 0f       	add	r18, r18
    1516:	22 0f       	add	r18, r18
    1518:	82 2b       	or	r24, r18
    151a:	92 95       	swap	r25
    151c:	96 95       	lsr	r25
    151e:	96 95       	lsr	r25
    1520:	93 70       	andi	r25, 0x03	; 3
    1522:	80 93 f8 02 	sts	0x02F8, r24
    1526:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1528:	2c a1       	lds	r18, 0x4c
    152a:	8d a1       	lds	r24, 0x4d
    152c:	98 2f       	mov	r25, r24
    152e:	93 70       	andi	r25, 0x03	; 3
    1530:	20 93 fa 02 	sts	0x02FA, r18
    1534:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1536:	98 2f       	mov	r25, r24
    1538:	96 95       	lsr	r25
    153a:	96 95       	lsr	r25
    153c:	8e a1       	lds	r24, 0x4e
    153e:	28 2f       	mov	r18, r24
    1540:	22 95       	swap	r18
    1542:	22 0f       	add	r18, r18
    1544:	22 0f       	add	r18, r18
    1546:	20 7c       	andi	r18, 0xC0	; 192
    1548:	29 2b       	or	r18, r25
    154a:	86 95       	lsr	r24
    154c:	86 95       	lsr	r24
    154e:	98 2f       	mov	r25, r24
    1550:	93 70       	andi	r25, 0x03	; 3
    1552:	20 93 fc 02 	sts	0x02FC, r18
    1556:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    1558:	7f a1       	lds	r23, 0x4f
    155a:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    155e:	68 a5       	lds	r22, 0x68
    1560:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    1564:	89 a5       	lds	r24, 0x69
    1566:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    156a:	9a a5       	lds	r25, 0x6a
    156c:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    1570:	1b a5       	lds	r17, 0x6b
    1572:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1576:	de 01       	movw	r26, r28
    1578:	9c 96       	adiw	r26, 0x2c	; 44
    157a:	ef ef       	ldi	r30, 0xFF	; 255
    157c:	f1 e0       	ldi	r31, 0x01	; 1
    157e:	28 e0       	ldi	r18, 0x08	; 8
    1580:	01 90       	ld	r0, Z+
    1582:	0d 92       	st	X+, r0
    1584:	21 50       	subi	r18, 0x01	; 1
    1586:	e1 f7       	brne	.-8      	; 0x1580 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    1588:	e9 2f       	mov	r30, r25
    158a:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	9f 01       	movw	r18, r30
    1590:	22 0f       	add	r18, r18
    1592:	33 1f       	adc	r19, r19
    1594:	22 0f       	add	r18, r18
    1596:	33 1f       	adc	r19, r19
    1598:	a9 01       	movw	r20, r18
    159a:	44 0f       	add	r20, r20
    159c:	55 1f       	adc	r21, r21
    159e:	44 0f       	add	r20, r20
    15a0:	55 1f       	adc	r21, r21
    15a2:	44 0f       	add	r20, r20
    15a4:	55 1f       	adc	r21, r21
    15a6:	42 1b       	sub	r20, r18
    15a8:	53 0b       	sbc	r21, r19
    15aa:	4e 0f       	add	r20, r30
    15ac:	5f 1f       	adc	r21, r31
    15ae:	55 95       	asr	r21
    15b0:	47 95       	ror	r20
    15b2:	55 95       	asr	r21
    15b4:	47 95       	ror	r20
    15b6:	55 95       	asr	r21
    15b8:	47 95       	ror	r20
    15ba:	55 95       	asr	r21
    15bc:	47 95       	ror	r20
    15be:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    15c0:	fe 01       	movw	r30, r28
    15c2:	e4 0f       	add	r30, r20
    15c4:	f1 1d       	adc	r31, r1
    15c6:	24 a5       	lds	r18, 0x64
    15c8:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    15cc:	de 01       	movw	r26, r28
    15ce:	d4 96       	adiw	r26, 0x34	; 52
    15d0:	e7 e0       	ldi	r30, 0x07	; 7
    15d2:	f2 e0       	ldi	r31, 0x02	; 2
    15d4:	28 e0       	ldi	r18, 0x08	; 8
    15d6:	01 90       	ld	r0, Z+
    15d8:	0d 92       	st	X+, r0
    15da:	21 50       	subi	r18, 0x01	; 1
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    15de:	29 2f       	mov	r18, r25
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	20 7e       	andi	r18, 0xE0	; 224
    15e4:	30 70       	andi	r19, 0x00	; 0
    15e6:	35 95       	asr	r19
    15e8:	27 95       	ror	r18
    15ea:	35 95       	asr	r19
    15ec:	27 95       	ror	r18
    15ee:	35 95       	asr	r19
    15f0:	27 95       	ror	r18
    15f2:	83 70       	andi	r24, 0x03	; 3
    15f4:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    15f6:	42 2f       	mov	r20, r18
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	ca 01       	movw	r24, r20
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	9c 01       	movw	r18, r24
    1606:	22 0f       	add	r18, r18
    1608:	33 1f       	adc	r19, r19
    160a:	22 0f       	add	r18, r18
    160c:	33 1f       	adc	r19, r19
    160e:	22 0f       	add	r18, r18
    1610:	33 1f       	adc	r19, r19
    1612:	28 1b       	sub	r18, r24
    1614:	39 0b       	sbc	r19, r25
    1616:	42 0f       	add	r20, r18
    1618:	53 1f       	adc	r21, r19
    161a:	ca 01       	movw	r24, r20
    161c:	95 95       	asr	r25
    161e:	87 95       	ror	r24
    1620:	95 95       	asr	r25
    1622:	87 95       	ror	r24
    1624:	95 95       	asr	r25
    1626:	87 95       	ror	r24
    1628:	95 95       	asr	r25
    162a:	87 95       	ror	r24
    162c:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    162e:	fe 01       	movw	r30, r28
    1630:	e8 0f       	add	r30, r24
    1632:	f1 1d       	adc	r31, r1
    1634:	84 a9       	sts	0x44, r24
    1636:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    163a:	de 01       	movw	r26, r28
    163c:	dc 96       	adiw	r26, 0x3c	; 60
    163e:	ef e0       	ldi	r30, 0x0F	; 15
    1640:	f2 e0       	ldi	r31, 0x02	; 2
    1642:	88 e0       	ldi	r24, 0x08	; 8
    1644:	01 90       	ld	r0, Z+
    1646:	0d 92       	st	X+, r0
    1648:	81 50       	subi	r24, 0x01	; 1
    164a:	e1 f7       	brne	.-8      	; 0x1644 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    164c:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    164e:	46 2f       	mov	r20, r22
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	ca 01       	movw	r24, r20
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	9c 01       	movw	r18, r24
    165e:	22 0f       	add	r18, r18
    1660:	33 1f       	adc	r19, r19
    1662:	22 0f       	add	r18, r18
    1664:	33 1f       	adc	r19, r19
    1666:	22 0f       	add	r18, r18
    1668:	33 1f       	adc	r19, r19
    166a:	28 1b       	sub	r18, r24
    166c:	39 0b       	sbc	r19, r25
    166e:	42 0f       	add	r20, r18
    1670:	53 1f       	adc	r21, r19
    1672:	ca 01       	movw	r24, r20
    1674:	95 95       	asr	r25
    1676:	87 95       	ror	r24
    1678:	95 95       	asr	r25
    167a:	87 95       	ror	r24
    167c:	95 95       	asr	r25
    167e:	87 95       	ror	r24
    1680:	95 95       	asr	r25
    1682:	87 95       	ror	r24
    1684:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1686:	fe 01       	movw	r30, r28
    1688:	e8 0f       	add	r30, r24
    168a:	f1 1d       	adc	r31, r1
    168c:	84 ad       	sts	0x64, r24
    168e:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1692:	21 2f       	mov	r18, r17
    1694:	26 95       	lsr	r18
    1696:	27 95       	ror	r18
    1698:	22 27       	eor	r18, r18
    169a:	27 95       	ror	r18
    169c:	81 2f       	mov	r24, r17
    169e:	81 70       	andi	r24, 0x01	; 1
    16a0:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    16a2:	81 2f       	mov	r24, r17
    16a4:	86 95       	lsr	r24
    16a6:	86 95       	lsr	r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	81 70       	andi	r24, 0x01	; 1
    16ac:	90 70       	andi	r25, 0x00	; 0
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    16b6:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    16b8:	81 2f       	mov	r24, r17
    16ba:	86 95       	lsr	r24
    16bc:	86 95       	lsr	r24
    16be:	86 95       	lsr	r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	81 70       	andi	r24, 0x01	; 1
    16c4:	90 70       	andi	r25, 0x00	; 0
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    16ca:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    16cc:	81 2f       	mov	r24, r17
    16ce:	82 95       	swap	r24
    16d0:	8f 70       	andi	r24, 0x0F	; 15
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	81 70       	andi	r24, 0x01	; 1
    16d6:	90 70       	andi	r25, 0x00	; 0
    16d8:	82 95       	swap	r24
    16da:	92 95       	swap	r25
    16dc:	90 7f       	andi	r25, 0xF0	; 240
    16de:	98 27       	eor	r25, r24
    16e0:	80 7f       	andi	r24, 0xF0	; 240
    16e2:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    16e4:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    16e6:	81 2f       	mov	r24, r17
    16e8:	82 95       	swap	r24
    16ea:	86 95       	lsr	r24
    16ec:	87 70       	andi	r24, 0x07	; 7
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	81 70       	andi	r24, 0x01	; 1
    16f2:	90 70       	andi	r25, 0x00	; 0
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	82 95       	swap	r24
    16fa:	92 95       	swap	r25
    16fc:	90 7f       	andi	r25, 0xF0	; 240
    16fe:	98 27       	eor	r25, r24
    1700:	80 7f       	andi	r24, 0xF0	; 240
    1702:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1704:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1706:	81 2f       	mov	r24, r17
    1708:	82 95       	swap	r24
    170a:	86 95       	lsr	r24
    170c:	86 95       	lsr	r24
    170e:	83 70       	andi	r24, 0x03	; 3
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	81 70       	andi	r24, 0x01	; 1
    1714:	90 70       	andi	r25, 0x00	; 0
    1716:	00 24       	eor	r0, r0
    1718:	96 95       	lsr	r25
    171a:	87 95       	ror	r24
    171c:	07 94       	ror	r0
    171e:	96 95       	lsr	r25
    1720:	87 95       	ror	r24
    1722:	07 94       	ror	r0
    1724:	98 2f       	mov	r25, r24
    1726:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1728:	82 2b       	or	r24, r18
    172a:	80 93 7b 03 	sts	0x037B, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    172e:	87 2f       	mov	r24, r23
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	81 70       	andi	r24, 0x01	; 1
    1734:	90 70       	andi	r25, 0x00	; 0
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1742:	90 91 7d 03 	lds	r25, 0x037D
    1746:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1748:	89 2b       	or	r24, r25
    174a:	11 1f       	adc	r17, r17
    174c:	11 27       	eor	r17, r17
    174e:	11 1f       	adc	r17, r17
    1750:	11 0f       	add	r17, r17
    1752:	11 0f       	add	r17, r17
    1754:	81 2b       	or	r24, r17
    1756:	80 93 7d 03 	sts	0x037D, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    175a:	0e 94 c3 06 	call	0xd86	; 0xd86 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    175e:	80 91 7d 03 	lds	r24, 0x037D
    1762:	8f 77       	andi	r24, 0x7F	; 127
    1764:	80 93 7d 03 	sts	0x037D, r24
	
	current_patch.mode = MEMORY;
    1768:	10 92 07 03 	sts	0x0307, r1
	
}
    176c:	cd 5b       	subi	r28, 0xBD	; 189
    176e:	df 4f       	sbci	r29, 0xFF	; 255
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	08 95       	ret

00001782 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1782:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    1786:	60 3f       	cpi	r22, 0xF0	; 240
    1788:	11 f4       	brne	.+4      	; 0x178e <transpose_note+0xc>
    178a:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    178e:	29 2f       	mov	r18, r25
    1790:	22 0f       	add	r18, r18
    1792:	92 0f       	add	r25, r18
    1794:	99 0f       	add	r25, r25
    1796:	99 0f       	add	r25, r25
    1798:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    179a:	89 38       	cpi	r24, 0x89	; 137
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <transpose_note+0x1e>
    179e:	88 e8       	ldi	r24, 0x88	; 136
	
}
    17a0:	08 95       	ret

000017a2 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    17a2:	80 91 7b 03 	lds	r24, 0x037B
    17a6:	98 2f       	mov	r25, r24
    17a8:	96 95       	lsr	r25
    17aa:	96 95       	lsr	r25
    17ac:	96 95       	lsr	r25
    17ae:	90 ff       	sbrs	r25, 0
    17b0:	0e c0       	rjmp	.+28     	; 0x17ce <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    17b2:	90 91 08 03 	lds	r25, 0x0308
    17b6:	9f 5f       	subi	r25, 0xFF	; 255
    17b8:	90 93 08 03 	sts	0x0308, r25
    17bc:	95 30       	cpi	r25, 0x05	; 5
    17be:	19 f4       	brne	.+6      	; 0x17c6 <update_octave_range+0x24>
    17c0:	94 e0       	ldi	r25, 0x04	; 4
    17c2:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    17c6:	98 e0       	ldi	r25, 0x08	; 8
    17c8:	89 27       	eor	r24, r25
    17ca:	80 93 7b 03 	sts	0x037B, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    17ce:	80 91 7c 03 	lds	r24, 0x037C
    17d2:	98 2f       	mov	r25, r24
    17d4:	96 95       	lsr	r25
    17d6:	96 95       	lsr	r25
    17d8:	96 95       	lsr	r25
    17da:	90 ff       	sbrs	r25, 0
    17dc:	0b c0       	rjmp	.+22     	; 0x17f4 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    17de:	90 91 08 03 	lds	r25, 0x0308
    17e2:	99 23       	and	r25, r25
    17e4:	19 f0       	breq	.+6      	; 0x17ec <update_octave_range+0x4a>
    17e6:	91 50       	subi	r25, 0x01	; 1
    17e8:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    17ec:	98 e0       	ldi	r25, 0x08	; 8
    17ee:	89 27       	eor	r24, r25
    17f0:	80 93 7c 03 	sts	0x037C, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    17f4:	80 91 08 03 	lds	r24, 0x0308
    17f8:	e1 e2       	ldi	r30, 0x21	; 33
    17fa:	f2 e0       	ldi	r31, 0x02	; 2
    17fc:	e8 0f       	add	r30, r24
    17fe:	f1 1d       	adc	r31, r1
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	00 80       	ld	r0, Z
    1806:	02 c0       	rjmp	.+4      	; 0x180c <update_octave_range+0x6a>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <update_octave_range+0x66>
    1810:	58 2f       	mov	r21, r24
    1812:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1816:	90 91 7c 03 	lds	r25, 0x037C
    181a:	29 2f       	mov	r18, r25
    181c:	26 95       	lsr	r18
    181e:	26 95       	lsr	r18
    1820:	20 ff       	sbrs	r18, 0
    1822:	0e c0       	rjmp	.+28     	; 0x1840 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1824:	80 91 09 03 	lds	r24, 0x0309
    1828:	8f 5f       	subi	r24, 0xFF	; 255
    182a:	80 93 09 03 	sts	0x0309, r24
    182e:	85 30       	cpi	r24, 0x05	; 5
    1830:	19 f4       	brne	.+6      	; 0x1838 <update_octave_range+0x96>
    1832:	84 e0       	ldi	r24, 0x04	; 4
    1834:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1838:	84 e0       	ldi	r24, 0x04	; 4
    183a:	98 27       	eor	r25, r24
    183c:	90 93 7c 03 	sts	0x037C, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1840:	90 91 7c 03 	lds	r25, 0x037C
    1844:	29 2f       	mov	r18, r25
    1846:	26 95       	lsr	r18
    1848:	20 ff       	sbrs	r18, 0
    184a:	0b c0       	rjmp	.+22     	; 0x1862 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    184c:	80 91 09 03 	lds	r24, 0x0309
    1850:	88 23       	and	r24, r24
    1852:	19 f0       	breq	.+6      	; 0x185a <update_octave_range+0xb8>
    1854:	81 50       	subi	r24, 0x01	; 1
    1856:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	98 27       	eor	r25, r24
    185e:	90 93 7c 03 	sts	0x037C, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1862:	40 91 00 03 	lds	r20, 0x0300
    1866:	4c 7f       	andi	r20, 0xFC	; 252
    1868:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    186c:	90 91 09 03 	lds	r25, 0x0309
    1870:	93 30       	cpi	r25, 0x03	; 3
    1872:	88 f0       	brcs	.+34     	; 0x1896 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1874:	ec e1       	ldi	r30, 0x1C	; 28
    1876:	f2 e0       	ldi	r31, 0x02	; 2
    1878:	e9 0f       	add	r30, r25
    187a:	f1 1d       	adc	r31, r1
    187c:	21 e0       	ldi	r18, 0x01	; 1
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	c9 01       	movw	r24, r18
    1882:	00 80       	ld	r0, Z
    1884:	02 c0       	rjmp	.+4      	; 0x188a <update_octave_range+0xe8>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <update_octave_range+0xe4>
    188e:	84 2b       	or	r24, r20
    1890:	80 93 00 03 	sts	0x0300, r24
    1894:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1896:	ec e1       	ldi	r30, 0x1C	; 28
    1898:	f2 e0       	ldi	r31, 0x02	; 2
    189a:	e9 0f       	add	r30, r25
    189c:	f1 1d       	adc	r31, r1
    189e:	21 e0       	ldi	r18, 0x01	; 1
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	c9 01       	movw	r24, r18
    18a4:	00 80       	ld	r0, Z
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <update_octave_range+0x10a>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <update_octave_range+0x106>
    18b0:	85 2b       	or	r24, r21
    18b2:	80 93 01 03 	sts	0x0301, r24
    18b6:	08 95       	ret

000018b8 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    18b8:	80 91 7c 03 	lds	r24, 0x037C
    18bc:	88 23       	and	r24, r24
    18be:	64 f4       	brge	.+24     	; 0x18d8 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    18c0:	80 58       	subi	r24, 0x80	; 128
    18c2:	80 93 7c 03 	sts	0x037C, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    18c6:	80 91 0a 03 	lds	r24, 0x030A
    18ca:	8f 5f       	subi	r24, 0xFF	; 255
    18cc:	80 93 0a 03 	sts	0x030A, r24
    18d0:	85 30       	cpi	r24, 0x05	; 5
    18d2:	11 f4       	brne	.+4      	; 0x18d8 <update_lfo_shape+0x20>
    18d4:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    18d8:	e0 91 0a 03 	lds	r30, 0x030A
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	ea 5d       	subi	r30, 0xDA	; 218
    18e4:	fd 4f       	sbci	r31, 0xFD	; 253
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	01 80       	ldd	r0, Z+1	; 0x01
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <update_lfo_shape+0x3a>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    18f6:	90 91 ff 02 	lds	r25, 0x02FF
    18fa:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    18fc:	89 2b       	or	r24, r25
    18fe:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1902:	80 81       	ld	r24, Z
    1904:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1906:	ed ed       	ldi	r30, 0xDD	; 221
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	80 62       	ori	r24, 0x20	; 32
    190e:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1910:	80 81       	ld	r24, Z
    1912:	8f 7d       	andi	r24, 0xDF	; 223
    1914:	80 83       	st	Z, r24
	
}		
    1916:	08 95       	ret

00001918 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1918:	80 91 7c 03 	lds	r24, 0x037C
    191c:	80 ff       	sbrs	r24, 0
    191e:	0d c0       	rjmp	.+26     	; 0x193a <update_lfo_sync+0x22>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1920:	91 e0       	ldi	r25, 0x01	; 1
    1922:	89 27       	eor	r24, r25
    1924:	80 93 7c 03 	sts	0x037C, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1928:	80 91 0b 03 	lds	r24, 0x030B
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	80 93 0b 03 	sts	0x030B, r24
    1932:	85 30       	cpi	r24, 0x05	; 5
    1934:	11 f4       	brne	.+4      	; 0x193a <update_lfo_sync+0x22>
    1936:	10 92 0b 03 	sts	0x030B, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    193a:	60 91 ff 02 	lds	r22, 0x02FF
    193e:	60 7f       	andi	r22, 0xF0	; 240
    1940:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1944:	20 91 0b 03 	lds	r18, 0x030B
    1948:	22 23       	and	r18, r18
    194a:	71 f0       	breq	.+28     	; 0x1968 <update_lfo_sync+0x50>
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	21 50       	subi	r18, 0x01	; 1
    1950:	30 40       	sbci	r19, 0x00	; 0
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	ca 01       	movw	r24, r20
    1958:	02 c0       	rjmp	.+4      	; 0x195e <update_lfo_sync+0x46>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	2a 95       	dec	r18
    1960:	e2 f7       	brpl	.-8      	; 0x195a <update_lfo_sync+0x42>
    1962:	86 2b       	or	r24, r22
    1964:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from 
	switch (current_patch.byte_2 & 0b00001111) {
    1968:	80 91 ff 02 	lds	r24, 0x02FF
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	8f 70       	andi	r24, 0x0F	; 15
    1970:	90 70       	andi	r25, 0x00	; 0
    1972:	82 30       	cpi	r24, 0x02	; 2
    1974:	91 05       	cpc	r25, r1
    1976:	31 f0       	breq	.+12     	; 0x1984 <update_lfo_sync+0x6c>
    1978:	84 30       	cpi	r24, 0x04	; 4
    197a:	91 05       	cpc	r25, r1
    197c:	39 f0       	breq	.+14     	; 0x198c <update_lfo_sync+0x74>
		
		case 0b0001:
			clock.divider = 0; //key sync mode
    197e:	10 92 7f 03 	sts	0x037F, r1
    1982:	08 95       	ret
			break;
			
		case 0b0010:
			clock.divider = 24; //1:1
    1984:	88 e1       	ldi	r24, 0x18	; 24
    1986:	80 93 7f 03 	sts	0x037F, r24
			break;
    198a:	08 95       	ret
			
		case 0b0100:
			clock.divider = 12; //1:2
    198c:	8c e0       	ldi	r24, 0x0C	; 12
    198e:	80 93 7f 03 	sts	0x037F, r24
    1992:	08 95       	ret

00001994 <update_patch>:
	}
	
	
}		
	
void update_patch(void) {
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1998:	90 91 7b 03 	lds	r25, 0x037B
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    199c:	80 91 7d 03 	lds	r24, 0x037D
    19a0:	86 95       	lsr	r24
    19a2:	86 95       	lsr	r24
    19a4:	68 2f       	mov	r22, r24
    19a6:	67 95       	ror	r22
    19a8:	66 27       	eor	r22, r22
    19aa:	67 95       	ror	r22
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    19ac:	29 2f       	mov	r18, r25
    19ae:	21 70       	andi	r18, 0x01	; 1
    19b0:	26 2b       	or	r18, r22
    19b2:	69 2f       	mov	r22, r25
    19b4:	66 1f       	adc	r22, r22
    19b6:	66 27       	eor	r22, r22
    19b8:	66 1f       	adc	r22, r22
    19ba:	66 0f       	add	r22, r22
    19bc:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    19be:	c9 2f       	mov	r28, r25
    19c0:	c6 95       	lsr	r28
    19c2:	c6 95       	lsr	r28
    19c4:	d0 e0       	ldi	r29, 0x00	; 0
    19c6:	c1 70       	andi	r28, 0x01	; 1
    19c8:	d0 70       	andi	r29, 0x00	; 0
    19ca:	de 01       	movw	r26, r28
    19cc:	aa 0f       	add	r26, r26
    19ce:	bb 1f       	adc	r27, r27
    19d0:	aa 0f       	add	r26, r26
    19d2:	bb 1f       	adc	r27, r27
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    19d4:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    19d6:	a9 2f       	mov	r26, r25
    19d8:	a6 95       	lsr	r26
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	a1 70       	andi	r26, 0x01	; 1
    19de:	b0 70       	andi	r27, 0x00	; 0
    19e0:	fd 01       	movw	r30, r26
    19e2:	ee 0f       	add	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	ee 0f       	add	r30, r30
    19e8:	ff 1f       	adc	r31, r31
    19ea:	ee 0f       	add	r30, r30
    19ec:	ff 1f       	adc	r31, r31
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    19ee:	a6 2f       	mov	r26, r22
    19f0:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    19f2:	e9 2f       	mov	r30, r25
    19f4:	e2 95       	swap	r30
    19f6:	ef 70       	andi	r30, 0x0F	; 15
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	e1 70       	andi	r30, 0x01	; 1
    19fc:	f0 70       	andi	r31, 0x00	; 0
    19fe:	bf 01       	movw	r22, r30
    1a00:	62 95       	swap	r22
    1a02:	72 95       	swap	r23
    1a04:	70 7f       	andi	r23, 0xF0	; 240
    1a06:	76 27       	eor	r23, r22
    1a08:	60 7f       	andi	r22, 0xF0	; 240
    1a0a:	76 27       	eor	r23, r22
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1a0c:	ea 2f       	mov	r30, r26
    1a0e:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1a10:	69 2f       	mov	r22, r25
    1a12:	62 95       	swap	r22
    1a14:	66 95       	lsr	r22
    1a16:	67 70       	andi	r22, 0x07	; 7
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	61 70       	andi	r22, 0x01	; 1
    1a1c:	70 70       	andi	r23, 0x00	; 0
    1a1e:	ab 01       	movw	r20, r22
    1a20:	44 0f       	add	r20, r20
    1a22:	55 1f       	adc	r21, r21
    1a24:	42 95       	swap	r20
    1a26:	52 95       	swap	r21
    1a28:	50 7f       	andi	r21, 0xF0	; 240
    1a2a:	54 27       	eor	r21, r20
    1a2c:	40 7f       	andi	r20, 0xF0	; 240
    1a2e:	54 27       	eor	r21, r20
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1a30:	6e 2f       	mov	r22, r30
    1a32:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1a34:	49 2f       	mov	r20, r25
    1a36:	42 95       	swap	r20
    1a38:	46 95       	lsr	r20
    1a3a:	46 95       	lsr	r20
    1a3c:	43 70       	andi	r20, 0x03	; 3
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	41 70       	andi	r20, 0x01	; 1
    1a42:	50 70       	andi	r21, 0x00	; 0
    1a44:	9a 01       	movw	r18, r20
    1a46:	00 24       	eor	r0, r0
    1a48:	36 95       	lsr	r19
    1a4a:	27 95       	ror	r18
    1a4c:	07 94       	ror	r0
    1a4e:	36 95       	lsr	r19
    1a50:	27 95       	ror	r18
    1a52:	07 94       	ror	r0
    1a54:	32 2f       	mov	r19, r18
    1a56:	20 2d       	mov	r18, r0
	//}
	//switch_press = 0;
	
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1a58:	26 2b       	or	r18, r22
    1a5a:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1a5e:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1a60:	81 95       	neg	r24
    1a62:	89 27       	eor	r24, r25
    1a64:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1a66:	89 27       	eor	r24, r25
    1a68:	0e 94 05 14 	call	0x280a	; 0x280a <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1a6c:	ed ed       	ldi	r30, 0xDD	; 221
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1a72:	90 91 7d 03 	lds	r25, 0x037D
    1a76:	96 95       	lsr	r25
    1a78:	96 95       	lsr	r25
    1a7a:	96 95       	lsr	r25
    1a7c:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1a7e:	91 95       	neg	r25
    1a80:	80 81       	ld	r24, Z
    1a82:	89 27       	eor	r24, r25
    1a84:	80 71       	andi	r24, 0x10	; 16
    1a86:	82 27       	eor	r24, r18
    1a88:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1a8a:	ee ef       	ldi	r30, 0xFE	; 254
    1a8c:	f2 e0       	ldi	r31, 0x02	; 2
    1a8e:	80 81       	ld	r24, Z
    1a90:	98 27       	eor	r25, r24
    1a92:	91 70       	andi	r25, 0x01	; 1
    1a94:	89 27       	eor	r24, r25
    1a96:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1a98:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1a9c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1aa0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <update_lfo_sync>

	
	//update_patch_programmer();		
				
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) //temporary tune button hack
    1aa4:	80 91 7c 03 	lds	r24, 0x037C
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	92 95       	swap	r25
    1aac:	96 95       	lsr	r25
    1aae:	97 70       	andi	r25, 0x07	; 7
    1ab0:	90 ff       	sbrs	r25, 0
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <update_patch+0x19e>
		{ 
				
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle read switch state
    1ab4:	90 e2       	ldi	r25, 0x20	; 32
    1ab6:	89 27       	eor	r24, r25
    1ab8:	80 93 7c 03 	sts	0x037C, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1abc:	87 e0       	ldi	r24, 0x07	; 7
    1abe:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1ac0:	cd ed       	ldi	r28, 0xDD	; 221
    1ac2:	d0 e0       	ldi	r29, 0x00	; 0
    1ac4:	88 81       	ld	r24, Y
    1ac6:	80 62       	ori	r24, 0x20	; 32
    1ac8:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1aca:	88 81       	ld	r24, Y
    1acc:	8f 7d       	andi	r24, 0xDF	; 223
    1ace:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1ad0:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    1ad2:	8f e0       	ldi	r24, 0x0F	; 15
    1ad4:	6f e0       	ldi	r22, 0x0F	; 15
    1ad6:	7e e5       	ldi	r23, 0x5E	; 94
    1ad8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <set_vco_init_cv>
    1adc:	90 93 73 03 	sts	0x0373, r25
    1ae0:	80 93 72 03 	sts	0x0372, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    1ae4:	80 ef       	ldi	r24, 0xF0	; 240
    1ae6:	6f e0       	ldi	r22, 0x0F	; 15
    1ae8:	7e e5       	ldi	r23, 0x5E	; 94
    1aea:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <set_vco_init_cv>
    1aee:	90 93 71 03 	sts	0x0371, r25
    1af2:	80 93 70 03 	sts	0x0370, r24
		//vco1_init_cv = vco2_init_cv;
		tune_8ths(VCO1);
    1af6:	8f e0       	ldi	r24, 0x0F	; 15
    1af8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <tune_8ths>
		tune_8ths(VCO2);
    1afc:	80 ef       	ldi	r24, 0xF0	; 240
    1afe:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <tune_8ths>
		tune_filter();
    1b02:	0e 94 87 11 	call	0x230e	; 0x230e <tune_filter>
		save_tuning_tables();
    1b06:	0e 94 55 13 	call	0x26aa	; 0x26aa <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b0a:	8f e4       	ldi	r24, 0x4F	; 79
    1b0c:	93 ec       	ldi	r25, 0xC3	; 195
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <update_patch+0x17a>
    1b12:	00 c0       	rjmp	.+0      	; 0x1b14 <update_patch+0x180>
    1b14:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
    1b16:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1b18:	88 81       	ld	r24, Y
    1b1a:	80 62       	ori	r24, 0x20	; 32
    1b1c:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1b1e:	88 81       	ld	r24, Y
    1b20:	8f 7d       	andi	r24, 0xDF	; 223
    1b22:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1b24:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    1b26:	80 91 ff 02 	lds	r24, 0x02FF
    1b2a:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1b2c:	80 68       	ori	r24, 0x80	; 128
    1b2e:	80 93 ff 02 	sts	0x02FF, r24
				
		}
		
		
	
}
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	08 95       	ret

00001b38 <update_patch_programmer>:
	
}

void update_patch_programmer(void) {
	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1b38:	80 91 7d 03 	lds	r24, 0x037D
    1b3c:	98 2f       	mov	r25, r24
    1b3e:	92 95       	swap	r25
    1b40:	96 95       	lsr	r25
    1b42:	96 95       	lsr	r25
    1b44:	93 70       	andi	r25, 0x03	; 3
    1b46:	90 ff       	sbrs	r25, 0
    1b48:	17 c0       	rjmp	.+46     	; 0x1b78 <update_patch_programmer+0x40>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1b4a:	90 e4       	ldi	r25, 0x40	; 64
    1b4c:	89 27       	eor	r24, r25
    1b4e:	80 93 7d 03 	sts	0x037D, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1b52:	80 91 03 03 	lds	r24, 0x0303
    1b56:	8f 5f       	subi	r24, 0xFF	; 255
    1b58:	80 93 03 03 	sts	0x0303, r24
    1b5c:	85 32       	cpi	r24, 0x25	; 37
    1b5e:	21 f4       	brne	.+8      	; 0x1b68 <update_patch_programmer+0x30>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1b60:	84 e2       	ldi	r24, 0x24	; 36
    1b62:	80 93 03 03 	sts	0x0303, r24
    1b66:	08 c0       	rjmp	.+16     	; 0x1b78 <update_patch_programmer+0x40>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1b68:	90 91 07 03 	lds	r25, 0x0307
    1b6c:	93 30       	cpi	r25, 0x03	; 3
    1b6e:	21 f0       	breq	.+8      	; 0x1b78 <update_patch_programmer+0x40>
			
			load_patch(current_patch.number);
    1b70:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <load_patch>
			update_patch();
    1b74:	0e 94 ca 0c 	call	0x1994	; 0x1994 <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1b78:	80 91 7d 03 	lds	r24, 0x037D
    1b7c:	98 2f       	mov	r25, r24
    1b7e:	92 95       	swap	r25
    1b80:	96 95       	lsr	r25
    1b82:	97 70       	andi	r25, 0x07	; 7
    1b84:	90 ff       	sbrs	r25, 0
    1b86:	15 c0       	rjmp	.+42     	; 0x1bb2 <update_patch_programmer+0x7a>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1b88:	90 e2       	ldi	r25, 0x20	; 32
    1b8a:	89 27       	eor	r24, r25
    1b8c:	80 93 7d 03 	sts	0x037D, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1b90:	80 91 03 03 	lds	r24, 0x0303
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	19 f0       	breq	.+6      	; 0x1b9e <update_patch_programmer+0x66>
    1b98:	81 50       	subi	r24, 0x01	; 1
    1b9a:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1b9e:	80 91 07 03 	lds	r24, 0x0307
    1ba2:	83 30       	cpi	r24, 0x03	; 3
    1ba4:	31 f0       	breq	.+12     	; 0x1bb2 <update_patch_programmer+0x7a>
			
			load_patch(current_patch.number); 
    1ba6:	80 91 03 03 	lds	r24, 0x0303
    1baa:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <load_patch>
			update_patch();
    1bae:	0e 94 ca 0c 	call	0x1994	; 0x1994 <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1bb2:	80 91 7d 03 	lds	r24, 0x037D
    1bb6:	98 2f       	mov	r25, r24
    1bb8:	92 95       	swap	r25
    1bba:	9f 70       	andi	r25, 0x0F	; 15
    1bbc:	90 ff       	sbrs	r25, 0
    1bbe:	15 c0       	rjmp	.+42     	; 0x1bea <update_patch_programmer+0xb2>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1bc0:	90 e1       	ldi	r25, 0x10	; 16
    1bc2:	89 27       	eor	r24, r25
    1bc4:	80 93 7d 03 	sts	0x037D, r24
		if (current_patch.mode != WRITE) {
    1bc8:	90 91 07 03 	lds	r25, 0x0307
    1bcc:	93 30       	cpi	r25, 0x03	; 3
    1bce:	49 f0       	breq	.+18     	; 0x1be2 <update_patch_programmer+0xaa>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1bd0:	8f 77       	andi	r24, 0x7F	; 127
    1bd2:	80 93 7d 03 	sts	0x037D, r24
			current_patch.mode = WRITE;
    1bd6:	83 e0       	ldi	r24, 0x03	; 3
    1bd8:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1bdc:	0e 94 c3 06 	call	0xd86	; 0xd86 <lock_pots>
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <update_patch_programmer+0xb2>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1be2:	80 91 03 03 	lds	r24, 0x0303
    1be6:	0e 94 ee 06 	call	0xddc	; 0xddc <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1bea:	80 91 7d 03 	lds	r24, 0x037D
    1bee:	88 23       	and	r24, r24
    1bf0:	44 f4       	brge	.+16     	; 0x1c02 <update_patch_programmer+0xca>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1bf2:	80 68       	ori	r24, 0x80	; 128
    1bf4:	80 93 7d 03 	sts	0x037D, r24
		current_patch.mode = MANUAL;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    1bfe:	0e 94 dd 06 	call	0xdba	; 0xdba <unlock_pots>
    1c02:	08 95       	ret

00001c04 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1c04:	88 ed       	ldi	r24, 0xD8	; 216
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1c10:	81 ee       	ldi	r24, 0xE1	; 225
    1c12:	91 e0       	ldi	r25, 0x01	; 1
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1c1c:	82 ee       	ldi	r24, 0xE2	; 226
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1c28:	82 eb       	ldi	r24, 0xB2	; 178
    1c2a:	92 e0       	ldi	r25, 0x02	; 2
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1c34:	8a ed       	ldi	r24, 0xDA	; 218
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1c40:	8f ed       	ldi	r24, 0xDF	; 223
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1c4c:	80 ee       	ldi	r24, 0xE0	; 224
    1c4e:	91 e0       	ldi	r25, 0x01	; 1
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1c58:	81 ed       	ldi	r24, 0xD1	; 209
    1c5a:	91 e0       	ldi	r25, 0x01	; 1
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1c64:	86 ed       	ldi	r24, 0xD6	; 214
    1c66:	91 e0       	ldi	r25, 0x01	; 1
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1c70:	82 ed       	ldi	r24, 0xD2	; 210
    1c72:	91 e0       	ldi	r25, 0x01	; 1
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1c7c:	83 ed       	ldi	r24, 0xD3	; 211
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1c88:	84 ed       	ldi	r24, 0xD4	; 212
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	6f ef       	ldi	r22, 0xFF	; 255
    1c8e:	7f e3       	ldi	r23, 0x3F	; 63
    1c90:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1c94:	85 ed       	ldi	r24, 0xD5	; 213
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1ca0:	89 ed       	ldi	r24, 0xD9	; 217
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1cac:	8e ec       	ldi	r24, 0xCE	; 206
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	60 e0       	ldi	r22, 0x00	; 0
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1cb8:	8c ec       	ldi	r24, 0xCC	; 204
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1cc4:	8a ec       	ldi	r24, 0xCA	; 202
    1cc6:	91 e0       	ldi	r25, 0x01	; 1
    1cc8:	6f ef       	ldi	r22, 0xFF	; 255
    1cca:	7f e3       	ldi	r23, 0x3F	; 63
    1ccc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1cd0:	88 ec       	ldi	r24, 0xC8	; 200
    1cd2:	91 e0       	ldi	r25, 0x01	; 1
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1cdc:	80 ed       	ldi	r24, 0xD0	; 208
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1ce8:	83 ee       	ldi	r24, 0xE3	; 227
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1cf4:	84 ee       	ldi	r24, 0xE4	; 228
    1cf6:	91 e0       	ldi	r25, 0x01	; 1
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}	
    1d00:	08 95       	ret

00001d02 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1d02:	2f 92       	push	r2
    1d04:	3f 92       	push	r3
    1d06:	4f 92       	push	r4
    1d08:	5f 92       	push	r5
    1d0a:	6f 92       	push	r6
    1d0c:	7f 92       	push	r7
    1d0e:	8f 92       	push	r8
    1d10:	9f 92       	push	r9
    1d12:	af 92       	push	r10
    1d14:	bf 92       	push	r11
    1d16:	cf 92       	push	r12
    1d18:	df 92       	push	r13
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	0f 93       	push	r16
    1d20:	1f 93       	push	r17
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	2c 97       	sbiw	r28, 0x0c	; 12
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	08 2f       	mov	r16, r24
    1d38:	78 87       	std	Y+8, r23	; 0x08
    1d3a:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1d3c:	80 91 78 03 	lds	r24, 0x0378
    1d40:	83 60       	ori	r24, 0x03	; 3
    1d42:	80 93 78 03 	sts	0x0378, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1d46:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1d4a:	10 92 77 03 	sts	0x0377, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1d4e:	0f 30       	cpi	r16, 0x0F	; 15
    1d50:	e1 f4       	brne	.+56     	; 0x1d8a <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1d52:	0f 2e       	mov	r0, r31
    1d54:	f6 ee       	ldi	r31, 0xE6	; 230
    1d56:	4f 2e       	mov	r4, r31
    1d58:	f1 e0       	ldi	r31, 0x01	; 1
    1d5a:	5f 2e       	mov	r5, r31
    1d5c:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1d5e:	0f 2e       	mov	r0, r31
    1d60:	fe ed       	ldi	r31, 0xDE	; 222
    1d62:	2f 2e       	mov	r2, r31
    1d64:	f1 e0       	ldi	r31, 0x01	; 1
    1d66:	3f 2e       	mov	r3, r31
    1d68:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1d6a:	23 ee       	ldi	r18, 0xE3	; 227
    1d6c:	31 e0       	ldi	r19, 0x01	; 1
    1d6e:	3a 83       	std	Y+2, r19	; 0x02
    1d70:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1d72:	0f 2e       	mov	r0, r31
    1d74:	fc ed       	ldi	r31, 0xDC	; 220
    1d76:	8f 2e       	mov	r8, r31
    1d78:	f1 e0       	ldi	r31, 0x01	; 1
    1d7a:	9f 2e       	mov	r9, r31
    1d7c:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1d7e:	82 e7       	ldi	r24, 0x72	; 114
    1d80:	96 e0       	ldi	r25, 0x06	; 6
    1d82:	9a 87       	std	Y+10, r25	; 0x0a
    1d84:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	1b c0       	rjmp	.+54     	; 0x1dc0 <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1d8a:	0f 2e       	mov	r0, r31
    1d8c:	f5 ee       	ldi	r31, 0xE5	; 229
    1d8e:	4f 2e       	mov	r4, r31
    1d90:	f1 e0       	ldi	r31, 0x01	; 1
    1d92:	5f 2e       	mov	r5, r31
    1d94:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1d96:	0f 2e       	mov	r0, r31
    1d98:	f7 ed       	ldi	r31, 0xD7	; 215
    1d9a:	2f 2e       	mov	r2, r31
    1d9c:	f1 e0       	ldi	r31, 0x01	; 1
    1d9e:	3f 2e       	mov	r3, r31
    1da0:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1da2:	e4 ee       	ldi	r30, 0xE4	; 228
    1da4:	f1 e0       	ldi	r31, 0x01	; 1
    1da6:	fa 83       	std	Y+2, r31	; 0x02
    1da8:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1daa:	0f 2e       	mov	r0, r31
    1dac:	fd ed       	ldi	r31, 0xDD	; 221
    1dae:	8f 2e       	mov	r8, r31
    1db0:	f1 e0       	ldi	r31, 0x01	; 1
    1db2:	9f 2e       	mov	r9, r31
    1db4:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1db6:	20 e7       	ldi	r18, 0x70	; 112
    1db8:	36 e0       	ldi	r19, 0x06	; 6
    1dba:	3a 87       	std	Y+10, r19	; 0x0a
    1dbc:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1dbe:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1dc0:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1dc2:	ed ed       	ldi	r30, 0xDD	; 221
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 64       	ori	r24, 0x40	; 64
    1dca:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1dcc:	80 81       	ld	r24, Z
    1dce:	8f 7b       	andi	r24, 0xBF	; 191
    1dd0:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1dd2:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1dd4:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1dd6:	84 b5       	in	r24, 0x24	; 36
    1dd8:	8f 60       	ori	r24, 0x0F	; 15
    1dda:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1de0:	ee e6       	ldi	r30, 0x6E	; 110
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	90 81       	ld	r25, Z
    1de6:	92 60       	ori	r25, 0x02	; 2
    1de8:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1dea:	80 93 79 03 	sts	0x0379, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1dee:	8d e0       	ldi	r24, 0x0D	; 13
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9c 83       	std	Y+4, r25	; 0x04
    1df4:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1df6:	80 2f       	mov	r24, r16
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	8c 01       	movw	r16, r24
    1dfc:	0f 5f       	subi	r16, 0xFF	; 255
    1dfe:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1e00:	0f 2e       	mov	r0, r31
    1e02:	f8 ed       	ldi	r31, 0xD8	; 216
    1e04:	ef 2e       	mov	r14, r31
    1e06:	f1 e0       	ldi	r31, 0x01	; 1
    1e08:	ff 2e       	mov	r15, r31
    1e0a:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1e0c:	0f 2e       	mov	r0, r31
    1e0e:	f4 ed       	ldi	r31, 0xD4	; 212
    1e10:	cf 2e       	mov	r12, r31
    1e12:	f1 e0       	ldi	r31, 0x01	; 1
    1e14:	df 2e       	mov	r13, r31
    1e16:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1e18:	0f 2e       	mov	r0, r31
    1e1a:	fa ec       	ldi	r31, 0xCA	; 202
    1e1c:	af 2e       	mov	r10, r31
    1e1e:	f1 e0       	ldi	r31, 0x01	; 1
    1e20:	bf 2e       	mov	r11, r31
    1e22:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1e24:	0f 2e       	mov	r0, r31
    1e26:	fb ec       	ldi	r31, 0xCB	; 203
    1e28:	6f 2e       	mov	r6, r31
    1e2a:	f1 e0       	ldi	r31, 0x01	; 1
    1e2c:	7f 2e       	mov	r7, r31
    1e2e:	f0 2d       	mov	r31, r0
    1e30:	e0 e0       	ldi	r30, 0x00	; 0
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	fc 87       	std	Y+12, r31	; 0x0c
    1e36:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1e38:	21 e0       	ldi	r18, 0x01	; 1
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	0b 80       	ldd	r0, Y+3	; 0x03
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <set_vco_init_cv+0x142>
    1e40:	22 0f       	add	r18, r18
    1e42:	33 1f       	adc	r19, r19
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <set_vco_init_cv+0x13e>
    1e48:	3e 83       	std	Y+6, r19	; 0x06
    1e4a:	2d 83       	std	Y+5, r18	; 0x05
    1e4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e50:	82 2b       	or	r24, r18
    1e52:	93 2b       	or	r25, r19
    1e54:	9c 87       	std	Y+12, r25	; 0x0c
    1e56:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1e58:	c4 01       	movw	r24, r8
    1e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
		
		count_finished = FALSE;
    1e62:	10 92 77 03 	sts	0x0377, r1
		period_counter = 0;
    1e66:	10 92 7a 03 	sts	0x037A, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1e6a:	8f e0       	ldi	r24, 0x0F	; 15
    1e6c:	e8 e1       	ldi	r30, 0x18	; 24
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	a8 95       	wdr
    1e76:	e0 93 60 00 	sts	0x0060, r30
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1e80:	80 91 77 03 	lds	r24, 0x0377
    1e84:	88 23       	and	r24, r24
    1e86:	89 f5       	brne	.+98     	; 0x1eea <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1e88:	c8 01       	movw	r24, r16
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1e90:	c4 01       	movw	r24, r8
    1e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e96:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1e9a:	c1 01       	movw	r24, r2
    1e9c:	6f ef       	ldi	r22, 0xFF	; 255
    1e9e:	7f e3       	ldi	r23, 0x3F	; 63
    1ea0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1ea4:	c7 01       	movw	r24, r14
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1eae:	c6 01       	movw	r24, r12
    1eb0:	6f ef       	ldi	r22, 0xFF	; 255
    1eb2:	7f e3       	ldi	r23, 0x3F	; 63
    1eb4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1eb8:	c5 01       	movw	r24, r10
    1eba:	6f ef       	ldi	r22, 0xFF	; 255
    1ebc:	7f e3       	ldi	r23, 0x3F	; 63
    1ebe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1ec2:	c3 01       	movw	r24, r6
    1ec4:	6f ef       	ldi	r22, 0xFF	; 255
    1ec6:	7f e3       	ldi	r23, 0x3F	; 63
    1ec8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	6f ef       	ldi	r22, 0xFF	; 255
    1ed2:	7f e3       	ldi	r23, 0x3F	; 63
    1ed4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1ed8:	c2 01       	movw	r24, r4
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1ee2:	80 91 77 03 	lds	r24, 0x0377
    1ee6:	88 23       	and	r24, r24
    1ee8:	79 f2       	breq	.-98     	; 0x1e88 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1eea:	88 e1       	ldi	r24, 0x18	; 24
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	80 93 60 00 	sts	0x0060, r24
    1ef4:	10 92 60 00 	sts	0x0060, r1
    1ef8:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1efa:	80 91 75 03 	lds	r24, 0x0375
    1efe:	90 91 76 03 	lds	r25, 0x0376
    1f02:	ef 81       	ldd	r30, Y+7	; 0x07
    1f04:	f8 85       	ldd	r31, Y+8	; 0x08
    1f06:	e8 17       	cp	r30, r24
    1f08:	f9 07       	cpc	r31, r25
    1f0a:	20 f0       	brcs	.+8      	; 0x1f14 <set_vco_init_cv+0x212>
    1f0c:	80 91 af 02 	lds	r24, 0x02AF
    1f10:	88 23       	and	r24, r24
    1f12:	51 f4       	brne	.+20     	; 0x1f28 <set_vco_init_cv+0x226>
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	9e 81       	ldd	r25, Y+6	; 0x06
    1f18:	80 95       	com	r24
    1f1a:	90 95       	com	r25
    1f1c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f1e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f20:	28 23       	and	r18, r24
    1f22:	39 23       	and	r19, r25
    1f24:	3c 87       	std	Y+12, r19	; 0x0c
    1f26:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	9c 83       	std	Y+4, r25	; 0x04
    1f36:	8b 83       	std	Y+3, r24	; 0x03
    1f38:	ef ef       	ldi	r30, 0xFF	; 255
    1f3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f3c:	9e 07       	cpc	r25, r30
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <set_vco_init_cv+0x240>
    1f40:	7b cf       	rjmp	.-266    	; 0x1e38 <set_vco_init_cv+0x136>
    1f42:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f44:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f46:	3e 83       	std	Y+6, r19	; 0x06
    1f48:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1f4a:	88 ec       	ldi	r24, 0xC8	; 200
    1f4c:	91 e0       	ldi	r25, 0x01	; 1
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	70 e0       	ldi	r23, 0x00	; 0
    1f52:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    1f56:	89 ec       	ldi	r24, 0xC9	; 201
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    1f62:	84 ed       	ldi	r24, 0xD4	; 212
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    1f6e:	88 ed       	ldi	r24, 0xD8	; 216
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    1f7a:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1f7c:	ee e6       	ldi	r30, 0x6E	; 110
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8d 7f       	andi	r24, 0xFD	; 253
    1f84:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    1f86:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f8e:	7e 81       	ldd	r23, Y+6	; 0x06
    1f90:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	2c 96       	adiw	r28, 0x0c	; 12
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	1f 91       	pop	r17
    1faa:	0f 91       	pop	r16
    1fac:	ff 90       	pop	r15
    1fae:	ef 90       	pop	r14
    1fb0:	df 90       	pop	r13
    1fb2:	cf 90       	pop	r12
    1fb4:	bf 90       	pop	r11
    1fb6:	af 90       	pop	r10
    1fb8:	9f 90       	pop	r9
    1fba:	8f 90       	pop	r8
    1fbc:	7f 90       	pop	r7
    1fbe:	6f 90       	pop	r6
    1fc0:	5f 90       	pop	r5
    1fc2:	4f 90       	pop	r4
    1fc4:	3f 90       	pop	r3
    1fc6:	2f 90       	pop	r2
    1fc8:	08 95       	ret

00001fca <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1fca:	2f 92       	push	r2
    1fcc:	3f 92       	push	r3
    1fce:	4f 92       	push	r4
    1fd0:	5f 92       	push	r5
    1fd2:	6f 92       	push	r6
    1fd4:	7f 92       	push	r7
    1fd6:	8f 92       	push	r8
    1fd8:	9f 92       	push	r9
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	c0 54       	subi	r28, 0x40	; 64
    1ff4:	d0 40       	sbci	r29, 0x00	; 0
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    2002:	de 01       	movw	r26, r28
    2004:	11 96       	adiw	r26, 0x01	; 1
    2006:	e0 e3       	ldi	r30, 0x30	; 48
    2008:	f2 e0       	ldi	r31, 0x02	; 2
    200a:	80 e3       	ldi	r24, 0x30	; 48
    200c:	01 90       	ld	r0, Z+
    200e:	0d 92       	st	X+, r0
    2010:	81 50       	subi	r24, 0x01	; 1
    2012:	e1 f7       	brne	.-8      	; 0x200c <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    2014:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    2018:	0f 30       	cpi	r16, 0x0F	; 15
    201a:	11 f5       	brne	.+68     	; 0x2060 <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    201c:	40 90 72 03 	lds	r4, 0x0372
    2020:	50 90 73 03 	lds	r5, 0x0373
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2024:	0f 2e       	mov	r0, r31
    2026:	f6 ee       	ldi	r31, 0xE6	; 230
    2028:	8f 2e       	mov	r8, r31
    202a:	f1 e0       	ldi	r31, 0x01	; 1
    202c:	9f 2e       	mov	r9, r31
    202e:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    2030:	0f 2e       	mov	r0, r31
    2032:	fe ed       	ldi	r31, 0xDE	; 222
    2034:	2f 2e       	mov	r2, r31
    2036:	f1 e0       	ldi	r31, 0x01	; 1
    2038:	3f 2e       	mov	r3, r31
    203a:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    203c:	23 ee       	ldi	r18, 0xE3	; 227
    203e:	31 e0       	ldi	r19, 0x01	; 1
    2040:	3a ab       	sts	0x5a, r19
    2042:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2044:	0f 2e       	mov	r0, r31
    2046:	fc ed       	ldi	r31, 0xDC	; 220
    2048:	6f 2e       	mov	r6, r31
    204a:	f1 e0       	ldi	r31, 0x01	; 1
    204c:	7f 2e       	mov	r7, r31
    204e:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    2050:	0e e4       	ldi	r16, 0x4E	; 78
    2052:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2054:	cc 24       	eor	r12, r12
    2056:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    2058:	ee 24       	eor	r14, r14
    205a:	68 94       	set
    205c:	e1 f8       	bld	r14, 1
    205e:	22 c0       	rjmp	.+68     	; 0x20a4 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    2060:	40 90 70 03 	lds	r4, 0x0370
    2064:	50 90 71 03 	lds	r5, 0x0371
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2068:	0f 2e       	mov	r0, r31
    206a:	f5 ee       	ldi	r31, 0xE5	; 229
    206c:	8f 2e       	mov	r8, r31
    206e:	f1 e0       	ldi	r31, 0x01	; 1
    2070:	9f 2e       	mov	r9, r31
    2072:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2074:	0f 2e       	mov	r0, r31
    2076:	f7 ed       	ldi	r31, 0xD7	; 215
    2078:	2f 2e       	mov	r2, r31
    207a:	f1 e0       	ldi	r31, 0x01	; 1
    207c:	3f 2e       	mov	r3, r31
    207e:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    2080:	44 ee       	ldi	r20, 0xE4	; 228
    2082:	51 e0       	ldi	r21, 0x01	; 1
    2084:	5a ab       	sts	0x5a, r21
    2086:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2088:	0f 2e       	mov	r0, r31
    208a:	fd ed       	ldi	r31, 0xDD	; 221
    208c:	6f 2e       	mov	r6, r31
    208e:	f1 e0       	ldi	r31, 0x01	; 1
    2090:	7f 2e       	mov	r7, r31
    2092:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    2094:	0c e2       	ldi	r16, 0x2C	; 44
    2096:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    2098:	cc 24       	eor	r12, r12
    209a:	68 94       	set
    209c:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    209e:	ee 24       	eor	r14, r14
    20a0:	68 94       	set
    20a2:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    20a4:	c3 01       	movw	r24, r6
    20a6:	b2 01       	movw	r22, r4
    20a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    20ac:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    20ae:	ed ed       	ldi	r30, 0xDD	; 221
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	80 64       	ori	r24, 0x40	; 64
    20b6:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    20b8:	80 81       	ld	r24, Z
    20ba:	8f 7b       	andi	r24, 0xBF	; 191
    20bc:	80 83       	st	Z, r24
		DATA_BUS = 0;
    20be:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    20c0:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	80 93 79 03 	sts	0x0379, r24
		
		compare_match_counter = 0;	
    20c8:	10 92 74 03 	sts	0x0374, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    20cc:	8c 2d       	mov	r24, r12
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	24 e6       	ldi	r18, 0x64	; 100
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	82 9f       	mul	r24, r18
    20d6:	d0 01       	movw	r26, r0
    20d8:	83 9f       	mul	r24, r19
    20da:	b0 0d       	add	r27, r0
    20dc:	92 9f       	mul	r25, r18
    20de:	b0 0d       	add	r27, r0
    20e0:	11 24       	eor	r1, r1
    20e2:	bc ab       	sts	0x5c, r27
    20e4:	ab ab       	sts	0x5b, r26
    20e6:	fe 01       	movw	r30, r28
    20e8:	31 96       	adiw	r30, 0x01	; 1
    20ea:	fc af       	sts	0x7c, r31
    20ec:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    20ee:	98 01       	movw	r18, r16
    20f0:	2e 5f       	subi	r18, 0xFE	; 254
    20f2:	3f 4f       	sbci	r19, 0xFF	; 255
    20f4:	21 96       	adiw	r28, 0x01	; 1
    20f6:	3f af       	sts	0x7f, r19
    20f8:	2e af       	sts	0x7e, r18
    20fa:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    20fc:	1e ae       	sts	0xbe, r17
    20fe:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2100:	0f 2e       	mov	r0, r31
    2102:	f8 ed       	ldi	r31, 0xD8	; 216
    2104:	ef 2e       	mov	r14, r31
    2106:	f1 e0       	ldi	r31, 0x01	; 1
    2108:	ff 2e       	mov	r15, r31
    210a:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    210c:	0f 2e       	mov	r0, r31
    210e:	f4 ed       	ldi	r31, 0xD4	; 212
    2110:	cf 2e       	mov	r12, r31
    2112:	f1 e0       	ldi	r31, 0x01	; 1
    2114:	df 2e       	mov	r13, r31
    2116:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2118:	0f 2e       	mov	r0, r31
    211a:	fa ec       	ldi	r31, 0xCA	; 202
    211c:	af 2e       	mov	r10, r31
    211e:	f1 e0       	ldi	r31, 0x01	; 1
    2120:	bf 2e       	mov	r11, r31
    2122:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    2124:	eb ad       	sts	0x6b, r30
    2126:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    2128:	80 81       	ld	r24, Z
    212a:	80 93 79 03 	sts	0x0379, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    212e:	84 b5       	in	r24, 0x24	; 36
    2130:	8f 60       	ori	r24, 0x0F	; 15
    2132:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    2138:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    213a:	4d ad       	sts	0x6d, r20
    213c:	5e ad       	sts	0x6e, r21
    213e:	43 30       	cpi	r20, 0x03	; 3
    2140:	51 05       	cpc	r21, r1
    2142:	24 f4       	brge	.+8      	; 0x214c <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2144:	83 e0       	ldi	r24, 0x03	; 3
    2146:	80 93 78 03 	sts	0x0378, r24
    214a:	03 c0       	rjmp	.+6      	; 0x2152 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	80 93 78 03 	sts	0x0378, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    2152:	81 81       	ldd	r24, Z+1	; 0x01
    2154:	92 81       	ldd	r25, Z+2	; 0x02
    2156:	9a af       	sts	0x7a, r25
    2158:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    215a:	ad e0       	ldi	r26, 0x0D	; 13
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	be ab       	sts	0x5e, r27
    2160:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    2162:	00 e0       	ldi	r16, 0x00	; 0
    2164:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2166:	e1 e0       	ldi	r30, 0x01	; 1
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	0d a8       	sts	0x8d, r16
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <tune_8ths+0x1a8>
    216e:	ee 0f       	add	r30, r30
    2170:	ff 1f       	adc	r31, r31
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <tune_8ths+0x1a4>
    2176:	f8 af       	sts	0x78, r31
    2178:	ef ab       	sts	0x5f, r30
    217a:	0e 2b       	or	r16, r30
    217c:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    217e:	ae e6       	ldi	r26, 0x6E	; 110
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	8c 91       	ld	r24, X
    2184:	8d 7f       	andi	r24, 0xFD	; 253
    2186:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2188:	c4 01       	movw	r24, r8
    218a:	b8 01       	movw	r22, r16
    218c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
    2190:	e3 ef       	ldi	r30, 0xF3	; 243
    2192:	f1 e0       	ldi	r31, 0x01	; 1
    2194:	31 97       	sbiw	r30, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <tune_8ths+0x1ca>
    2198:	00 c0       	rjmp	.+0      	; 0x219a <tune_8ths+0x1d0>
    219a:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    219c:	ae e6       	ldi	r26, 0x6E	; 110
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	8c 91       	ld	r24, X
    21a2:	82 60       	ori	r24, 0x02	; 2
    21a4:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    21a6:	10 92 77 03 	sts	0x0377, r1
				period_counter = 0;
    21aa:	10 92 7a 03 	sts	0x037A, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    21ae:	e8 e1       	ldi	r30, 0x18	; 24
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	2f e0       	ldi	r18, 0x0F	; 15
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	a8 95       	wdr
    21ba:	e0 93 60 00 	sts	0x0060, r30
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    21c4:	80 91 77 03 	lds	r24, 0x0377
    21c8:	88 23       	and	r24, r24
    21ca:	81 f5       	brne	.+96     	; 0x222c <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    21cc:	80 91 79 03 	lds	r24, 0x0379
    21d0:	4b a9       	sts	0x4b, r20
    21d2:	5c a9       	sts	0x4c, r21
    21d4:	48 0f       	add	r20, r24
    21d6:	51 1d       	adc	r21, r1
    21d8:	ca 01       	movw	r24, r20
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    21e0:	c3 01       	movw	r24, r6
    21e2:	b2 01       	movw	r22, r4
    21e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    21e8:	c4 01       	movw	r24, r8
    21ea:	b8 01       	movw	r22, r16
    21ec:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    21f0:	c7 01       	movw	r24, r14
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    21fa:	c6 01       	movw	r24, r12
    21fc:	6f ef       	ldi	r22, 0xFF	; 255
    21fe:	7f e3       	ldi	r23, 0x3F	; 63
    2200:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2204:	c5 01       	movw	r24, r10
    2206:	6f ef       	ldi	r22, 0xFF	; 255
    2208:	7f e3       	ldi	r23, 0x3F	; 63
    220a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    220e:	c1 01       	movw	r24, r2
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	70 e2       	ldi	r23, 0x20	; 32
    2214:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    2218:	89 a9       	sts	0x49, r24
    221a:	9a a9       	sts	0x4a, r25
    221c:	6f ef       	ldi	r22, 0xFF	; 255
    221e:	7f e3       	ldi	r23, 0x3F	; 63
    2220:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2224:	80 91 77 03 	lds	r24, 0x0377
    2228:	88 23       	and	r24, r24
    222a:	81 f2       	breq	.-96     	; 0x21cc <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    222c:	58 e1       	ldi	r21, 0x18	; 24
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	50 93 60 00 	sts	0x0060, r21
    2236:	10 92 60 00 	sts	0x0060, r1
    223a:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    223c:	80 91 75 03 	lds	r24, 0x0375
    2240:	90 91 76 03 	lds	r25, 0x0376
    2244:	a9 ad       	sts	0x69, r26
    2246:	ba ad       	sts	0x6a, r27
    2248:	a8 17       	cp	r26, r24
    224a:	b9 07       	cpc	r27, r25
    224c:	50 f0       	brcs	.+20     	; 0x2262 <tune_8ths+0x298>
    224e:	80 91 af 02 	lds	r24, 0x02AF
    2252:	81 30       	cpi	r24, 0x01	; 1
    2254:	31 f4       	brne	.+12     	; 0x2262 <tune_8ths+0x298>
    2256:	8f a9       	sts	0x4f, r24
    2258:	98 ad       	sts	0x68, r25
    225a:	80 95       	com	r24
    225c:	90 95       	com	r25
    225e:	08 23       	and	r16, r24
    2260:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2262:	80 91 75 03 	lds	r24, 0x0375
    2266:	90 91 76 03 	lds	r25, 0x0376
    226a:	e9 ad       	sts	0x69, r30
    226c:	fa ad       	sts	0x6a, r31
    226e:	8e 17       	cp	r24, r30
    2270:	9f 07       	cpc	r25, r31
    2272:	21 f4       	brne	.+8      	; 0x227c <tune_8ths+0x2b2>
    2274:	80 91 af 02 	lds	r24, 0x02AF
    2278:	81 30       	cpi	r24, 0x01	; 1
    227a:	71 f0       	breq	.+28     	; 0x2298 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    227c:	f1 e0       	ldi	r31, 0x01	; 1
    227e:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2282:	2d a9       	sts	0x4d, r18
    2284:	3e a9       	sts	0x4e, r19
    2286:	21 50       	subi	r18, 0x01	; 1
    2288:	30 40       	sbci	r19, 0x00	; 0
    228a:	3e ab       	sts	0x5e, r19
    228c:	2d ab       	sts	0x5d, r18
    228e:	4f ef       	ldi	r20, 0xFF	; 255
    2290:	2f 3f       	cpi	r18, 0xFF	; 255
    2292:	34 07       	cpc	r19, r20
    2294:	09 f0       	breq	.+2      	; 0x2298 <tune_8ths+0x2ce>
    2296:	67 cf       	rjmp	.-306    	; 0x2166 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    2298:	21 96       	adiw	r28, 0x01	; 1
    229a:	ae ad       	sts	0x6e, r26
    229c:	bf ad       	sts	0x6f, r27
    229e:	21 97       	sbiw	r28, 0x01	; 1
    22a0:	0d 93       	st	X+, r16
    22a2:	1d 93       	st	X+, r17
    22a4:	21 96       	adiw	r28, 0x01	; 1
    22a6:	bf af       	sts	0x7f, r27
    22a8:	ae af       	sts	0x7e, r26
    22aa:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    22ac:	ee e6       	ldi	r30, 0x6E	; 110
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	8d 7f       	andi	r24, 0xFD	; 253
    22b4:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    22b6:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    22b8:	2d ad       	sts	0x6d, r18
    22ba:	3e ad       	sts	0x6e, r19
    22bc:	2f 5f       	subi	r18, 0xFF	; 255
    22be:	3f 4f       	sbci	r19, 0xFF	; 255
    22c0:	3e af       	sts	0x7e, r19
    22c2:	2d af       	sts	0x7d, r18
    22c4:	4b ad       	sts	0x6b, r20
    22c6:	5c ad       	sts	0x6c, r21
    22c8:	4d 5f       	subi	r20, 0xFD	; 253
    22ca:	5f 4f       	sbci	r21, 0xFF	; 255
    22cc:	5c af       	sts	0x7c, r21
    22ce:	4b af       	sts	0x7b, r20
    22d0:	20 31       	cpi	r18, 0x10	; 16
    22d2:	31 05       	cpc	r19, r1
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <tune_8ths+0x30e>
    22d6:	26 cf       	rjmp	.-436    	; 0x2124 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    22d8:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    22da:	c0 5c       	subi	r28, 0xC0	; 192
    22dc:	df 4f       	sbci	r29, 0xFF	; 255
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	ff 90       	pop	r15
    22f2:	ef 90       	pop	r14
    22f4:	df 90       	pop	r13
    22f6:	cf 90       	pop	r12
    22f8:	bf 90       	pop	r11
    22fa:	af 90       	pop	r10
    22fc:	9f 90       	pop	r9
    22fe:	8f 90       	pop	r8
    2300:	7f 90       	pop	r7
    2302:	6f 90       	pop	r6
    2304:	5f 90       	pop	r5
    2306:	4f 90       	pop	r4
    2308:	3f 90       	pop	r3
    230a:	2f 90       	pop	r2
    230c:	08 95       	ret

0000230e <tune_filter>:
	
void tune_filter(void) {
    230e:	2f 92       	push	r2
    2310:	3f 92       	push	r3
    2312:	4f 92       	push	r4
    2314:	5f 92       	push	r5
    2316:	6f 92       	push	r6
    2318:	7f 92       	push	r7
    231a:	8f 92       	push	r8
    231c:	9f 92       	push	r9
    231e:	af 92       	push	r10
    2320:	bf 92       	push	r11
    2322:	cf 92       	push	r12
    2324:	df 92       	push	r13
    2326:	ef 92       	push	r14
    2328:	ff 92       	push	r15
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	e9 97       	sbiw	r28, 0x39	; 57
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    2342:	de 01       	movw	r26, r28
    2344:	11 96       	adiw	r26, 0x01	; 1
    2346:	e0 e6       	ldi	r30, 0x60	; 96
    2348:	f2 e0       	ldi	r31, 0x02	; 2
    234a:	8d e2       	ldi	r24, 0x2D	; 45
    234c:	01 90       	ld	r0, Z+
    234e:	0d 92       	st	X+, r0
    2350:	81 50       	subi	r24, 0x01	; 1
    2352:	e1 f7       	brne	.-8      	; 0x234c <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2354:	88 ed       	ldi	r24, 0xD8	; 216
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2360:	81 ee       	ldi	r24, 0xE1	; 225
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    236c:	82 ee       	ldi	r24, 0xE2	; 226
    236e:	91 e0       	ldi	r25, 0x01	; 1
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2378:	82 eb       	ldi	r24, 0xB2	; 178
    237a:	92 e0       	ldi	r25, 0x02	; 2
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2384:	8a ed       	ldi	r24, 0xDA	; 218
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	70 e0       	ldi	r23, 0x00	; 0
    238c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    2390:	8f ed       	ldi	r24, 0xDF	; 223
    2392:	91 e0       	ldi	r25, 0x01	; 1
    2394:	60 e0       	ldi	r22, 0x00	; 0
    2396:	70 e0       	ldi	r23, 0x00	; 0
    2398:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    239c:	80 ee       	ldi	r24, 0xE0	; 224
    239e:	91 e0       	ldi	r25, 0x01	; 1
    23a0:	60 e0       	ldi	r22, 0x00	; 0
    23a2:	70 e0       	ldi	r23, 0x00	; 0
    23a4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    23a8:	81 ed       	ldi	r24, 0xD1	; 209
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	70 e0       	ldi	r23, 0x00	; 0
    23b0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    23b4:	86 ed       	ldi	r24, 0xD6	; 214
    23b6:	91 e0       	ldi	r25, 0x01	; 1
    23b8:	60 e0       	ldi	r22, 0x00	; 0
    23ba:	70 e0       	ldi	r23, 0x00	; 0
    23bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    23c0:	82 ed       	ldi	r24, 0xD2	; 210
    23c2:	91 e0       	ldi	r25, 0x01	; 1
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	70 e0       	ldi	r23, 0x00	; 0
    23c8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    23cc:	83 ed       	ldi	r24, 0xD3	; 211
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	70 e0       	ldi	r23, 0x00	; 0
    23d4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    23d8:	84 ed       	ldi	r24, 0xD4	; 212
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	6f ef       	ldi	r22, 0xFF	; 255
    23de:	7f e3       	ldi	r23, 0x3F	; 63
    23e0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    23e4:	85 ed       	ldi	r24, 0xD5	; 213
    23e6:	91 e0       	ldi	r25, 0x01	; 1
    23e8:	6f ef       	ldi	r22, 0xFF	; 255
    23ea:	7f e3       	ldi	r23, 0x3F	; 63
    23ec:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    23f0:	89 ed       	ldi	r24, 0xD9	; 217
    23f2:	91 e0       	ldi	r25, 0x01	; 1
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	70 e0       	ldi	r23, 0x00	; 0
    23f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    23fc:	8e ec       	ldi	r24, 0xCE	; 206
    23fe:	91 e0       	ldi	r25, 0x01	; 1
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	70 e0       	ldi	r23, 0x00	; 0
    2404:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2408:	8c ec       	ldi	r24, 0xCC	; 204
    240a:	91 e0       	ldi	r25, 0x01	; 1
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	70 e0       	ldi	r23, 0x00	; 0
    2410:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2414:	8a ec       	ldi	r24, 0xCA	; 202
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	6f ef       	ldi	r22, 0xFF	; 255
    241a:	7f e3       	ldi	r23, 0x3F	; 63
    241c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    2420:	88 ec       	ldi	r24, 0xC8	; 200
    2422:	91 e0       	ldi	r25, 0x01	; 1
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    242c:	80 ed       	ldi	r24, 0xD0	; 208
    242e:	91 e0       	ldi	r25, 0x01	; 1
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	70 e0       	ldi	r23, 0x00	; 0
    2434:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2438:	83 ee       	ldi	r24, 0xE3	; 227
    243a:	91 e0       	ldi	r25, 0x01	; 1
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2444:	84 ee       	ldi	r24, 0xE4	; 228
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    2450:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2452:	ed ed       	ldi	r30, 0xDD	; 221
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	80 64       	ori	r24, 0x40	; 64
    245a:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    245c:	80 81       	ld	r24, Z
    245e:	8f 7b       	andi	r24, 0xBF	; 191
    2460:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	80 93 79 03 	sts	0x0379, r24
	PORTF |= (1<<GATE); //turn gate on
    2468:	89 9a       	sbi	0x11, 1	; 17
    246a:	9e 01       	movw	r18, r28
    246c:	2f 5f       	subi	r18, 0xFF	; 255
    246e:	3f 4f       	sbci	r19, 0xFF	; 255
    2470:	3d ab       	sts	0x5d, r19
    2472:	2c ab       	sts	0x5c, r18
    2474:	8e e0       	ldi	r24, 0x0E	; 14
    2476:	93 e0       	ldi	r25, 0x03	; 3
    2478:	99 af       	sts	0x79, r25
    247a:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    247c:	1f aa       	sts	0x9f, r17
    247e:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    2480:	0f 2e       	mov	r0, r31
    2482:	f4 ed       	ldi	r31, 0xD4	; 212
    2484:	af 2e       	mov	r10, r31
    2486:	f1 e0       	ldi	r31, 0x01	; 1
    2488:	bf 2e       	mov	r11, r31
    248a:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    248c:	0f 2e       	mov	r0, r31
    248e:	f8 ed       	ldi	r31, 0xD8	; 216
    2490:	6f 2e       	mov	r6, r31
    2492:	f1 e0       	ldi	r31, 0x01	; 1
    2494:	7f 2e       	mov	r7, r31
    2496:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2498:	0f 2e       	mov	r0, r31
    249a:	f5 ed       	ldi	r31, 0xD5	; 213
    249c:	4f 2e       	mov	r4, r31
    249e:	f1 e0       	ldi	r31, 0x01	; 1
    24a0:	5f 2e       	mov	r5, r31
    24a2:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    24a4:	0f 2e       	mov	r0, r31
    24a6:	fa ec       	ldi	r31, 0xCA	; 202
    24a8:	2f 2e       	mov	r2, r31
    24aa:	f1 e0       	ldi	r31, 0x01	; 1
    24ac:	3f 2e       	mov	r3, r31
    24ae:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    24b0:	ac a9       	sts	0x4c, r26
    24b2:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    24b4:	8c 91       	ld	r24, X
    24b6:	80 93 79 03 	sts	0x0379, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    24ba:	84 b5       	in	r24, 0x24	; 36
    24bc:	8f 60       	ori	r24, 0x0F	; 15
    24be:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    24c4:	ee e6       	ldi	r30, 0x6E	; 110
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	82 60       	ori	r24, 0x02	; 2
    24cc:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    24ce:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    24d0:	ee a9       	sts	0x4e, r30
    24d2:	ff a9       	sts	0x4f, r31
    24d4:	e2 30       	cpi	r30, 0x02	; 2
    24d6:	f1 05       	cpc	r31, r1
    24d8:	24 f4       	brge	.+8      	; 0x24e2 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    24da:	83 e0       	ldi	r24, 0x03	; 3
    24dc:	80 93 78 03 	sts	0x0378, r24
    24e0:	03 c0       	rjmp	.+6      	; 0x24e8 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	80 93 78 03 	sts	0x0378, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    24e8:	11 96       	adiw	r26, 0x01	; 1
    24ea:	2d 91       	ld	r18, X+
    24ec:	3c 91       	ld	r19, X
    24ee:	12 97       	sbiw	r26, 0x02	; 2
    24f0:	3b ab       	sts	0x5b, r19
    24f2:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    24f4:	8d e0       	ldi	r24, 0x0D	; 13
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9f a7       	lds	r25, 0x7f
    24fa:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    24fc:	ee 24       	eor	r14, r14
    24fe:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2500:	0f 2e       	mov	r0, r31
    2502:	f1 ed       	ldi	r31, 0xD1	; 209
    2504:	cf 2e       	mov	r12, r31
    2506:	f1 e0       	ldi	r31, 0x01	; 1
    2508:	df 2e       	mov	r13, r31
    250a:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    250c:	0f 2e       	mov	r0, r31
    250e:	f6 ed       	ldi	r31, 0xD6	; 214
    2510:	8f 2e       	mov	r8, r31
    2512:	f1 e0       	ldi	r31, 0x01	; 1
    2514:	9f 2e       	mov	r9, r31
    2516:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	fc 01       	movw	r30, r24
    251e:	0e a4       	lds	r16, 0xae
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <tune_filter+0x218>
    2522:	ee 0f       	add	r30, r30
    2524:	ff 1f       	adc	r31, r31
    2526:	0a 94       	dec	r0
    2528:	e2 f7       	brpl	.-8      	; 0x2522 <tune_filter+0x214>
    252a:	f9 ab       	sts	0x59, r31
    252c:	e8 ab       	sts	0x58, r30
    252e:	ee 2a       	or	r14, r30
    2530:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2532:	c5 01       	movw	r24, r10
    2534:	b7 01       	movw	r22, r14
    2536:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
    253a:	10 92 77 03 	sts	0x0377, r1
			period_counter = 0;
    253e:	10 92 7a 03 	sts	0x037A, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2542:	8f e0       	ldi	r24, 0x0F	; 15
    2544:	28 e1       	ldi	r18, 0x18	; 24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	a8 95       	wdr
    254e:	20 93 60 00 	sts	0x0060, r18
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2558:	80 91 77 03 	lds	r24, 0x0377
    255c:	88 23       	and	r24, r24
    255e:	b1 f5       	brne	.+108    	; 0x25cc <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    2560:	02 ed       	ldi	r16, 0xD2	; 210
    2562:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2564:	80 91 79 03 	lds	r24, 0x0379
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	84 5d       	subi	r24, 0xD4	; 212
    256c:	9e 4f       	sbci	r25, 0xFE	; 254
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2574:	c5 01       	movw	r24, r10
    2576:	b7 01       	movw	r22, r14
    2578:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    257c:	c3 01       	movw	r24, r6
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	70 e0       	ldi	r23, 0x00	; 0
    2582:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2586:	c2 01       	movw	r24, r4
    2588:	6f ef       	ldi	r22, 0xFF	; 255
    258a:	7f e3       	ldi	r23, 0x3F	; 63
    258c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    2590:	c1 01       	movw	r24, r2
    2592:	6f ef       	ldi	r22, 0xFF	; 255
    2594:	7f e3       	ldi	r23, 0x3F	; 63
    2596:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    259a:	8e ec       	ldi	r24, 0xCE	; 206
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    25a6:	c6 01       	movw	r24, r12
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    25b0:	c4 01       	movw	r24, r8
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    25ba:	c8 01       	movw	r24, r16
    25bc:	60 e0       	ldi	r22, 0x00	; 0
    25be:	70 e0       	ldi	r23, 0x00	; 0
    25c0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    25c4:	80 91 77 03 	lds	r24, 0x0377
    25c8:	88 23       	and	r24, r24
    25ca:	61 f2       	breq	.-104    	; 0x2564 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    25cc:	88 e1       	ldi	r24, 0x18	; 24
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	80 93 60 00 	sts	0x0060, r24
    25d6:	10 92 60 00 	sts	0x0060, r1
    25da:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    25dc:	80 91 75 03 	lds	r24, 0x0375
    25e0:	90 91 76 03 	lds	r25, 0x0376
    25e4:	2a a9       	sts	0x4a, r18
    25e6:	3b a9       	sts	0x4b, r19
    25e8:	28 17       	cp	r18, r24
    25ea:	39 07       	cpc	r19, r25
    25ec:	50 f0       	brcs	.+20     	; 0x2602 <tune_filter+0x2f4>
    25ee:	80 91 af 02 	lds	r24, 0x02AF
    25f2:	81 30       	cpi	r24, 0x01	; 1
    25f4:	31 f4       	brne	.+12     	; 0x2602 <tune_filter+0x2f4>
    25f6:	88 a9       	sts	0x48, r24
    25f8:	99 a9       	sts	0x49, r25
    25fa:	80 95       	com	r24
    25fc:	90 95       	com	r25
    25fe:	e8 22       	and	r14, r24
    2600:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2602:	80 91 75 03 	lds	r24, 0x0375
    2606:	90 91 76 03 	lds	r25, 0x0376
    260a:	ea a9       	sts	0x4a, r30
    260c:	fb a9       	sts	0x4b, r31
    260e:	8e 17       	cp	r24, r30
    2610:	9f 07       	cpc	r25, r31
    2612:	21 f4       	brne	.+8      	; 0x261c <tune_filter+0x30e>
    2614:	80 91 af 02 	lds	r24, 0x02AF
    2618:	81 30       	cpi	r24, 0x01	; 1
    261a:	71 f0       	breq	.+28     	; 0x2638 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2622:	2e a5       	lds	r18, 0x6e
    2624:	3f a5       	lds	r19, 0x6f
    2626:	21 50       	subi	r18, 0x01	; 1
    2628:	30 40       	sbci	r19, 0x00	; 0
    262a:	3f a7       	lds	r19, 0x7f
    262c:	2e a7       	lds	r18, 0x7e
    262e:	8f ef       	ldi	r24, 0xFF	; 255
    2630:	2f 3f       	cpi	r18, 0xFF	; 255
    2632:	38 07       	cpc	r19, r24
    2634:	09 f0       	breq	.+2      	; 0x2638 <tune_filter+0x32a>
    2636:	70 cf       	rjmp	.-288    	; 0x2518 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2638:	ee a9       	sts	0x4e, r30
    263a:	ff a9       	sts	0x4f, r31
    263c:	31 96       	adiw	r30, 0x01	; 1
    263e:	ff ab       	sts	0x5f, r31
    2640:	ee ab       	sts	0x5e, r30
    2642:	c7 01       	movw	r24, r14
    2644:	80 96       	adiw	r24, 0x20	; 32
    2646:	e8 ad       	sts	0x68, r30
    2648:	f9 ad       	sts	0x69, r31
    264a:	81 93       	st	Z+, r24
    264c:	91 93       	st	Z+, r25
    264e:	f9 af       	sts	0x79, r31
    2650:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2652:	ee e6       	ldi	r30, 0x6E	; 110
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	8d 7f       	andi	r24, 0xFD	; 253
    265a:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    265c:	14 bc       	out	0x24, r1	; 36
    265e:	2c a9       	sts	0x4c, r18
    2660:	3d a9       	sts	0x4d, r19
    2662:	2d 5f       	subi	r18, 0xFD	; 253
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	3d ab       	sts	0x5d, r19
    2668:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    266a:	8e a9       	sts	0x4e, r24
    266c:	9f a9       	sts	0x4f, r25
    266e:	8f 30       	cpi	r24, 0x0F	; 15
    2670:	91 05       	cpc	r25, r1
    2672:	09 f0       	breq	.+2      	; 0x2676 <tune_filter+0x368>
    2674:	1d cf       	rjmp	.-454    	; 0x24b0 <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2676:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2678:	e9 96       	adiw	r28, 0x39	; 57
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	df 91       	pop	r29
    2686:	cf 91       	pop	r28
    2688:	1f 91       	pop	r17
    268a:	0f 91       	pop	r16
    268c:	ff 90       	pop	r15
    268e:	ef 90       	pop	r14
    2690:	df 90       	pop	r13
    2692:	cf 90       	pop	r12
    2694:	bf 90       	pop	r11
    2696:	af 90       	pop	r10
    2698:	9f 90       	pop	r9
    269a:	8f 90       	pop	r8
    269c:	7f 90       	pop	r7
    269e:	6f 90       	pop	r6
    26a0:	5f 90       	pop	r5
    26a2:	4f 90       	pop	r4
    26a4:	3f 90       	pop	r3
    26a6:	2f 90       	pop	r2
    26a8:	08 95       	ret

000026aa <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    26aa:	8c e0       	ldi	r24, 0x0C	; 12
    26ac:	93 e0       	ldi	r25, 0x03	; 3
    26ae:	6c e0       	ldi	r22, 0x0C	; 12
    26b0:	76 e0       	ldi	r23, 0x06	; 6
    26b2:	40 e2       	ldi	r20, 0x20	; 32
    26b4:	50 e0       	ldi	r21, 0x00	; 0
    26b6:	0e 94 9f 1b 	call	0x373e	; 0x373e <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    26ba:	8e e4       	ldi	r24, 0x4E	; 78
    26bc:	93 e0       	ldi	r25, 0x03	; 3
    26be:	6e e4       	ldi	r22, 0x4E	; 78
    26c0:	76 e0       	ldi	r23, 0x06	; 6
    26c2:	42 e2       	ldi	r20, 0x22	; 34
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	0e 94 9f 1b 	call	0x373e	; 0x373e <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    26ca:	8c e2       	ldi	r24, 0x2C	; 44
    26cc:	93 e0       	ldi	r25, 0x03	; 3
    26ce:	6c e2       	ldi	r22, 0x2C	; 44
    26d0:	76 e0       	ldi	r23, 0x06	; 6
    26d2:	42 e2       	ldi	r20, 0x22	; 34
    26d4:	50 e0       	ldi	r21, 0x00	; 0
    26d6:	0e 94 9f 1b 	call	0x373e	; 0x373e <__eeupd_block_m6450a>
	
	
}
    26da:	08 95       	ret

000026dc <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    26dc:	82 e7       	ldi	r24, 0x72	; 114
    26de:	96 e0       	ldi	r25, 0x06	; 6
    26e0:	0e 94 99 1b 	call	0x3732	; 0x3732 <__eerd_word_m6450a>
    26e4:	90 93 73 03 	sts	0x0373, r25
    26e8:	80 93 72 03 	sts	0x0372, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    26ec:	80 e7       	ldi	r24, 0x70	; 112
    26ee:	96 e0       	ldi	r25, 0x06	; 6
    26f0:	0e 94 99 1b 	call	0x3732	; 0x3732 <__eerd_word_m6450a>
    26f4:	90 93 71 03 	sts	0x0371, r25
    26f8:	80 93 70 03 	sts	0x0370, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    26fc:	8e e4       	ldi	r24, 0x4E	; 78
    26fe:	93 e0       	ldi	r25, 0x03	; 3
    2700:	6e e4       	ldi	r22, 0x4E	; 78
    2702:	76 e0       	ldi	r23, 0x06	; 6
    2704:	42 e2       	ldi	r20, 0x22	; 34
    2706:	50 e0       	ldi	r21, 0x00	; 0
    2708:	0e 94 89 1b 	call	0x3712	; 0x3712 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    270c:	8c e2       	ldi	r24, 0x2C	; 44
    270e:	93 e0       	ldi	r25, 0x03	; 3
    2710:	6c e2       	ldi	r22, 0x2C	; 44
    2712:	76 e0       	ldi	r23, 0x06	; 6
    2714:	42 e2       	ldi	r20, 0x22	; 34
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	0e 94 89 1b 	call	0x3712	; 0x3712 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    271c:	8c e0       	ldi	r24, 0x0C	; 12
    271e:	93 e0       	ldi	r25, 0x03	; 3
    2720:	6c e0       	ldi	r22, 0x0C	; 12
    2722:	76 e0       	ldi	r23, 0x06	; 6
    2724:	40 e2       	ldi	r20, 0x20	; 32
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	0e 94 89 1b 	call	0x3712	; 0x3712 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    272c:	08 95       	ret

0000272e <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    272e:	98 2f       	mov	r25, r24
    2730:	96 95       	lsr	r25
    2732:	96 95       	lsr	r25
    2734:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2736:	29 2f       	mov	r18, r25
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	f9 01       	movw	r30, r18
    273c:	31 97       	sbiw	r30, 0x01	; 1
    273e:	ee 0f       	add	r30, r30
    2740:	ff 1f       	adc	r31, r31
    2742:	e6 0f       	add	r30, r22
    2744:	f7 1f       	adc	r31, r23
    2746:	01 90       	ld	r0, Z+
    2748:	f0 81       	ld	r31, Z
    274a:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    274c:	22 0f       	add	r18, r18
    274e:	33 1f       	adc	r19, r19
    2750:	26 0f       	add	r18, r22
    2752:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2754:	d9 01       	movw	r26, r18
    2756:	4d 91       	ld	r20, X+
    2758:	5c 91       	ld	r21, X
    275a:	11 97       	sbiw	r26, 0x01	; 1
    275c:	4e 1b       	sub	r20, r30
    275e:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2760:	99 0f       	add	r25, r25
    2762:	99 0f       	add	r25, r25
    2764:	99 0f       	add	r25, r25
    2766:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	48 9f       	mul	r20, r24
    276c:	90 01       	movw	r18, r0
    276e:	49 9f       	mul	r20, r25
    2770:	30 0d       	add	r19, r0
    2772:	58 9f       	mul	r21, r24
    2774:	30 0d       	add	r19, r0
    2776:	11 24       	eor	r1, r1
    2778:	36 95       	lsr	r19
    277a:	27 95       	ror	r18
    277c:	36 95       	lsr	r19
    277e:	27 95       	ror	r18
    2780:	36 95       	lsr	r19
    2782:	27 95       	ror	r18
    2784:	e2 0f       	add	r30, r18
    2786:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2788:	8e 2f       	mov	r24, r30
    278a:	9f 2f       	mov	r25, r31
    278c:	08 95       	ret

0000278e <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	a2 97       	sbiw	r28, 0x22	; 34
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    27a2:	de 01       	movw	r26, r28
    27a4:	11 96       	adiw	r26, 0x01	; 1
    27a6:	ed e8       	ldi	r30, 0x8D	; 141
    27a8:	f2 e0       	ldi	r31, 0x02	; 2
    27aa:	82 e2       	ldi	r24, 0x22	; 34
    27ac:	01 90       	ld	r0, Z+
    27ae:	0d 92       	st	X+, r0
    27b0:	81 50       	subi	r24, 0x01	; 1
    27b2:	e1 f7       	brne	.-8      	; 0x27ac <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    27b4:	ae e4       	ldi	r26, 0x4E	; 78
    27b6:	b3 e0       	ldi	r27, 0x03	; 3
    27b8:	fe 01       	movw	r30, r28
    27ba:	31 96       	adiw	r30, 0x01	; 1
    27bc:	82 e2       	ldi	r24, 0x22	; 34
    27be:	01 90       	ld	r0, Z+
    27c0:	0d 92       	st	X+, r0
    27c2:	81 50       	subi	r24, 0x01	; 1
    27c4:	e1 f7       	brne	.-8      	; 0x27be <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    27c6:	ac e2       	ldi	r26, 0x2C	; 44
    27c8:	b3 e0       	ldi	r27, 0x03	; 3
    27ca:	fe 01       	movw	r30, r28
    27cc:	31 96       	adiw	r30, 0x01	; 1
    27ce:	82 e2       	ldi	r24, 0x22	; 34
    27d0:	01 90       	ld	r0, Z+
    27d2:	0d 92       	st	X+, r0
    27d4:	81 50       	subi	r24, 0x01	; 1
    27d6:	e1 f7       	brne	.-8      	; 0x27d0 <set_one_volt_per_octave+0x42>
	
	
    27d8:	a2 96       	adiw	r28, 0x22	; 34
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	08 95       	ret

000027ea <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    27ea:	9f b1       	in	r25, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    27ec:	89 2f       	mov	r24, r25
    27ee:	8c 70       	andi	r24, 0x0C	; 12
    27f0:	20 91 c1 02 	lds	r18, 0x02C1
    27f4:	82 2b       	or	r24, r18
    27f6:	80 93 c1 02 	sts	0x02C1, r24
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    27fa:	80 91 7e 03 	lds	r24, 0x037E
    27fe:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    2800:	89 27       	eor	r24, r25
    2802:	80 93 7e 03 	sts	0x037E, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2806:	89 23       	and	r24, r25
    2808:	08 95       	ret

0000280a <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    280a:	ed ed       	ldi	r30, 0xDD	; 221
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	90 81       	ld	r25, Z
    2810:	9f 7b       	andi	r25, 0xBF	; 191
    2812:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	21 70       	andi	r18, 0x01	; 1
    281a:	30 70       	andi	r19, 0x00	; 0
    281c:	22 0f       	add	r18, r18
    281e:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2820:	68 2f       	mov	r22, r24
    2822:	62 95       	swap	r22
    2824:	66 95       	lsr	r22
    2826:	67 70       	andi	r22, 0x07	; 7
    2828:	67 95       	ror	r22
    282a:	66 27       	eor	r22, r22
    282c:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    282e:	26 2b       	or	r18, r22
    2830:	98 2f       	mov	r25, r24
    2832:	96 95       	lsr	r25
    2834:	96 95       	lsr	r25
    2836:	91 70       	andi	r25, 0x01	; 1
    2838:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    283a:	68 2f       	mov	r22, r24
    283c:	66 1f       	adc	r22, r22
    283e:	66 27       	eor	r22, r22
    2840:	66 1f       	adc	r22, r22
    2842:	66 0f       	add	r22, r22
    2844:	66 0f       	add	r22, r22
    2846:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2848:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    284a:	a8 2f       	mov	r26, r24
    284c:	a6 95       	lsr	r26
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	a1 70       	andi	r26, 0x01	; 1
    2852:	b0 70       	andi	r27, 0x00	; 0
    2854:	bd 01       	movw	r22, r26
    2856:	66 0f       	add	r22, r22
    2858:	77 1f       	adc	r23, r23
    285a:	66 0f       	add	r22, r22
    285c:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    285e:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2860:	68 2f       	mov	r22, r24
    2862:	62 95       	swap	r22
    2864:	6f 70       	andi	r22, 0x0F	; 15
    2866:	70 e0       	ldi	r23, 0x00	; 0
    2868:	61 70       	andi	r22, 0x01	; 1
    286a:	70 70       	andi	r23, 0x00	; 0
    286c:	ab 01       	movw	r20, r22
    286e:	00 24       	eor	r0, r0
    2870:	56 95       	lsr	r21
    2872:	47 95       	ror	r20
    2874:	07 94       	ror	r0
    2876:	56 95       	lsr	r21
    2878:	47 95       	ror	r20
    287a:	07 94       	ror	r0
    287c:	54 2f       	mov	r21, r20
    287e:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2880:	62 2f       	mov	r22, r18
    2882:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2884:	48 2f       	mov	r20, r24
    2886:	42 95       	swap	r20
    2888:	46 95       	lsr	r20
    288a:	46 95       	lsr	r20
    288c:	43 70       	andi	r20, 0x03	; 3
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	41 70       	andi	r20, 0x01	; 1
    2892:	50 70       	andi	r21, 0x00	; 0
    2894:	9a 01       	movw	r18, r20
    2896:	22 0f       	add	r18, r18
    2898:	33 1f       	adc	r19, r19
    289a:	22 95       	swap	r18
    289c:	32 95       	swap	r19
    289e:	30 7f       	andi	r19, 0xF0	; 240
    28a0:	32 27       	eor	r19, r18
    28a2:	20 7f       	andi	r18, 0xF0	; 240
    28a4:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    28a6:	46 2f       	mov	r20, r22
    28a8:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    28aa:	86 95       	lsr	r24
    28ac:	86 95       	lsr	r24
    28ae:	86 95       	lsr	r24
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	21 70       	andi	r18, 0x01	; 1
    28b6:	30 70       	andi	r19, 0x00	; 0
    28b8:	c9 01       	movw	r24, r18
    28ba:	82 95       	swap	r24
    28bc:	92 95       	swap	r25
    28be:	90 7f       	andi	r25, 0xF0	; 240
    28c0:	98 27       	eor	r25, r24
    28c2:	80 7f       	andi	r24, 0xF0	; 240
    28c4:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    28c6:	84 2b       	or	r24, r20
    28c8:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    28ca:	80 81       	ld	r24, Z
    28cc:	80 64       	ori	r24, 0x40	; 64
    28ce:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    28d0:	80 81       	ld	r24, Z
    28d2:	8f 7b       	andi	r24, 0xBF	; 191
    28d4:	80 83       	st	Z, r24
	DATA_BUS = 0;
    28d6:	12 b8       	out	0x02, r1	; 2
	
	
    28d8:	08 95       	ret

000028da <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    28da:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    28dc:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    28de:	74 83       	std	Z+4, r23	; 0x04
    28e0:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    28e2:	11 82       	std	Z+1, r1	; 0x01
    28e4:	10 82       	st	Z, r1
}
    28e6:	08 95       	ret

000028e8 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    28e8:	1f 93       	push	r17
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	ec 01       	movw	r28, r24
    28f0:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    28f2:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <store_and_clear_interrupt>
    28f6:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    28f8:	39 81       	ldd	r19, Y+1	; 0x01
    28fa:	83 2f       	mov	r24, r19
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	6a 81       	ldd	r22, Y+2	; 0x02
    2902:	70 e0       	ldi	r23, 0x00	; 0
    2904:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <__divmodhi4>
    2908:	48 81       	ld	r20, Y
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	84 17       	cp	r24, r20
    290e:	95 07       	cpc	r25, r21
    2910:	29 f4       	brne	.+10     	; 0x291c <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2912:	82 2f       	mov	r24, r18
    2914:	0e 94 e6 14 	call	0x29cc	; 0x29cc <restore_interrupt_setting>
      return false;
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	11 c0       	rjmp	.+34     	; 0x293e <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    291c:	eb 81       	ldd	r30, Y+3	; 0x03
    291e:	fc 81       	ldd	r31, Y+4	; 0x04
    2920:	e3 0f       	add	r30, r19
    2922:	f1 1d       	adc	r31, r1
    2924:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	6a 81       	ldd	r22, Y+2	; 0x02
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <__divmodhi4>
    2934:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2936:	82 2f       	mov	r24, r18
    2938:	0e 94 e6 14 	call	0x29cc	; 0x29cc <restore_interrupt_setting>
      return true;
    293c:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	08 95       	ret

00002946 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    294c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2950:	29 81       	ldd	r18, Y+1	; 0x01
    2952:	98 81       	ld	r25, Y
    2954:	29 17       	cp	r18, r25
    2956:	18 f0       	brcs	.+6      	; 0x295e <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2958:	c2 2f       	mov	r28, r18
    295a:	c9 1b       	sub	r28, r25
    295c:	03 c0       	rjmp	.+6      	; 0x2964 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    295e:	ca 81       	ldd	r28, Y+2	; 0x02
    2960:	c2 0f       	add	r28, r18
    2962:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2964:	0e 94 e6 14 	call	0x29cc	; 0x29cc <restore_interrupt_setting>
   return len;
}
    2968:	8c 2f       	mov	r24, r28
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	08 95       	ret

00002970 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2970:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2972:	20 81       	ld	r18, Z
    2974:	86 2f       	mov	r24, r22
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	82 0f       	add	r24, r18
    297a:	91 1d       	adc	r25, r1
    297c:	62 81       	ldd	r22, Z+2	; 0x02
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <__divmodhi4>
    2984:	03 80       	ldd	r0, Z+3	; 0x03
    2986:	f4 81       	ldd	r31, Z+4	; 0x04
    2988:	e0 2d       	mov	r30, r0
    298a:	e8 0f       	add	r30, r24
    298c:	f9 1f       	adc	r31, r25
}
    298e:	80 81       	ld	r24, Z
    2990:	08 95       	ret

00002992 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	ec 01       	movw	r28, r24
    299a:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    299c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <store_and_clear_interrupt>
    29a0:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    29a2:	88 81       	ld	r24, Y
    29a4:	21 2f       	mov	r18, r17
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	28 0f       	add	r18, r24
    29aa:	31 1d       	adc	r19, r1
    29ac:	6a 81       	ldd	r22, Y+2	; 0x02
    29ae:	c9 01       	movw	r24, r18
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <__divmodhi4>
    29b6:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    29b8:	84 2f       	mov	r24, r20
    29ba:	0e 94 e6 14 	call	0x29cc	; 0x29cc <restore_interrupt_setting>
}
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	1f 91       	pop	r17
    29c4:	08 95       	ret

000029c6 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    29c6:	8f b7       	in	r24, 0x3f	; 63
   cli();
    29c8:	f8 94       	cli
   return sreg;
}
    29ca:	08 95       	ret

000029cc <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    29cc:	8f bf       	out	0x3f, r24	; 63
}
    29ce:	08 95       	ret

000029d0 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    29d0:	88 1f       	adc	r24, r24
    29d2:	88 27       	eor	r24, r24
    29d4:	88 1f       	adc	r24, r24
    29d6:	08 95       	ret

000029d8 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    29d8:	91 e0       	ldi	r25, 0x01	; 1
    29da:	88 3f       	cpi	r24, 0xF8	; 248
    29dc:	08 f4       	brcc	.+2      	; 0x29e0 <midi_is_realtime+0x8>
    29de:	90 e0       	ldi	r25, 0x00	; 0
}
    29e0:	89 2f       	mov	r24, r25
    29e2:	08 95       	ret

000029e4 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    29e4:	28 2f       	mov	r18, r24
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	20 7f       	andi	r18, 0xF0	; 240
    29ea:	30 70       	andi	r19, 0x00	; 0
    29ec:	20 3c       	cpi	r18, 0xC0	; 192
    29ee:	31 05       	cpc	r19, r1
    29f0:	e9 f1       	breq	.+122    	; 0x2a6c <midi_packet_length+0x88>
    29f2:	21 3c       	cpi	r18, 0xC1	; 193
    29f4:	31 05       	cpc	r19, r1
    29f6:	8c f4       	brge	.+34     	; 0x2a1a <midi_packet_length+0x36>
    29f8:	20 39       	cpi	r18, 0x90	; 144
    29fa:	31 05       	cpc	r19, r1
    29fc:	e1 f0       	breq	.+56     	; 0x2a36 <midi_packet_length+0x52>
    29fe:	21 39       	cpi	r18, 0x91	; 145
    2a00:	31 05       	cpc	r19, r1
    2a02:	24 f4       	brge	.+8      	; 0x2a0c <midi_packet_length+0x28>
    2a04:	20 38       	cpi	r18, 0x80	; 128
    2a06:	31 05       	cpc	r19, r1
    2a08:	79 f5       	brne	.+94     	; 0x2a68 <midi_packet_length+0x84>
    2a0a:	15 c0       	rjmp	.+42     	; 0x2a36 <midi_packet_length+0x52>
    2a0c:	20 3a       	cpi	r18, 0xA0	; 160
    2a0e:	31 05       	cpc	r19, r1
    2a10:	91 f0       	breq	.+36     	; 0x2a36 <midi_packet_length+0x52>
    2a12:	20 3b       	cpi	r18, 0xB0	; 176
    2a14:	31 05       	cpc	r19, r1
    2a16:	41 f5       	brne	.+80     	; 0x2a68 <midi_packet_length+0x84>
    2a18:	0e c0       	rjmp	.+28     	; 0x2a36 <midi_packet_length+0x52>
    2a1a:	20 3e       	cpi	r18, 0xE0	; 224
    2a1c:	31 05       	cpc	r19, r1
    2a1e:	59 f0       	breq	.+22     	; 0x2a36 <midi_packet_length+0x52>
    2a20:	21 3e       	cpi	r18, 0xE1	; 225
    2a22:	31 05       	cpc	r19, r1
    2a24:	24 f4       	brge	.+8      	; 0x2a2e <midi_packet_length+0x4a>
    2a26:	20 3d       	cpi	r18, 0xD0	; 208
    2a28:	31 05       	cpc	r19, r1
    2a2a:	f1 f4       	brne	.+60     	; 0x2a68 <midi_packet_length+0x84>
    2a2c:	1f c0       	rjmp	.+62     	; 0x2a6c <midi_packet_length+0x88>
    2a2e:	20 3f       	cpi	r18, 0xF0	; 240
    2a30:	31 05       	cpc	r19, r1
    2a32:	d1 f4       	brne	.+52     	; 0x2a68 <midi_packet_length+0x84>
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2a36:	83 e0       	ldi	r24, 0x03	; 3
    2a38:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2a3a:	86 3f       	cpi	r24, 0xF6	; 246
    2a3c:	79 f0       	breq	.+30     	; 0x2a5c <midi_packet_length+0x78>
    2a3e:	87 3f       	cpi	r24, 0xF7	; 247
    2a40:	38 f4       	brcc	.+14     	; 0x2a50 <midi_packet_length+0x6c>
    2a42:	82 3f       	cpi	r24, 0xF2	; 242
    2a44:	a9 f0       	breq	.+42     	; 0x2a70 <midi_packet_length+0x8c>
    2a46:	83 3f       	cpi	r24, 0xF3	; 243
    2a48:	59 f0       	breq	.+22     	; 0x2a60 <midi_packet_length+0x7c>
    2a4a:	81 3f       	cpi	r24, 0xF1	; 241
    2a4c:	59 f4       	brne	.+22     	; 0x2a64 <midi_packet_length+0x80>
    2a4e:	08 c0       	rjmp	.+16     	; 0x2a60 <midi_packet_length+0x7c>
    2a50:	88 3f       	cpi	r24, 0xF8	; 248
    2a52:	40 f0       	brcs	.+16     	; 0x2a64 <midi_packet_length+0x80>
    2a54:	8d 3f       	cpi	r24, 0xFD	; 253
    2a56:	10 f0       	brcs	.+4      	; 0x2a5c <midi_packet_length+0x78>
    2a58:	8e 3f       	cpi	r24, 0xFE	; 254
    2a5a:	20 f0       	brcs	.+8      	; 0x2a64 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2a60:	82 e0       	ldi	r24, 0x02	; 2
    2a62:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2a6c:	82 e0       	ldi	r24, 0x02	; 2
    2a6e:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2a70:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2a72:	08 95       	ret

00002a74 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2a74:	0f 93       	push	r16
    2a76:	34 2f       	mov	r19, r20
    2a78:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2a7a:	46 2f       	mov	r20, r22
    2a7c:	4f 70       	andi	r20, 0x0F	; 15
    2a7e:	40 6b       	ori	r20, 0xB0	; 176
    2a80:	23 2f       	mov	r18, r19
    2a82:	2f 77       	andi	r18, 0x7F	; 127
    2a84:	0f 77       	andi	r16, 0x7F	; 127
    2a86:	dc 01       	movw	r26, r24
    2a88:	ed 91       	ld	r30, X+
    2a8a:	fc 91       	ld	r31, X
    2a8c:	63 e0       	ldi	r22, 0x03	; 3
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2a92:	0f 91       	pop	r16
    2a94:	08 95       	ret

00002a96 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2a96:	0f 93       	push	r16
    2a98:	34 2f       	mov	r19, r20
    2a9a:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2a9c:	46 2f       	mov	r20, r22
    2a9e:	4f 70       	andi	r20, 0x0F	; 15
    2aa0:	40 69       	ori	r20, 0x90	; 144
    2aa2:	23 2f       	mov	r18, r19
    2aa4:	2f 77       	andi	r18, 0x7F	; 127
    2aa6:	0f 77       	andi	r16, 0x7F	; 127
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	ed 91       	ld	r30, X+
    2aac:	fc 91       	ld	r31, X
    2aae:	63 e0       	ldi	r22, 0x03	; 3
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2ab4:	0f 91       	pop	r16
    2ab6:	08 95       	ret

00002ab8 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2ab8:	0f 93       	push	r16
    2aba:	34 2f       	mov	r19, r20
    2abc:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2abe:	46 2f       	mov	r20, r22
    2ac0:	4f 70       	andi	r20, 0x0F	; 15
    2ac2:	40 68       	ori	r20, 0x80	; 128
    2ac4:	23 2f       	mov	r18, r19
    2ac6:	2f 77       	andi	r18, 0x7F	; 127
    2ac8:	0f 77       	andi	r16, 0x7F	; 127
    2aca:	dc 01       	movw	r26, r24
    2acc:	ed 91       	ld	r30, X+
    2ace:	fc 91       	ld	r31, X
    2ad0:	63 e0       	ldi	r22, 0x03	; 3
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2ad6:	0f 91       	pop	r16
    2ad8:	08 95       	ret

00002ada <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2ada:	0f 93       	push	r16
    2adc:	34 2f       	mov	r19, r20
    2ade:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2ae0:	46 2f       	mov	r20, r22
    2ae2:	4f 70       	andi	r20, 0x0F	; 15
    2ae4:	40 6a       	ori	r20, 0xA0	; 160
    2ae6:	23 2f       	mov	r18, r19
    2ae8:	2f 77       	andi	r18, 0x7F	; 127
    2aea:	0f 77       	andi	r16, 0x7F	; 127
    2aec:	dc 01       	movw	r26, r24
    2aee:	ed 91       	ld	r30, X+
    2af0:	fc 91       	ld	r31, X
    2af2:	63 e0       	ldi	r22, 0x03	; 3
    2af4:	70 e0       	ldi	r23, 0x00	; 0
    2af6:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2af8:	0f 91       	pop	r16
    2afa:	08 95       	ret

00002afc <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2afc:	0f 93       	push	r16
    2afe:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2b00:	20 e2       	ldi	r18, 0x20	; 32
    2b02:	40 30       	cpi	r20, 0x00	; 0
    2b04:	52 07       	cpc	r21, r18
    2b06:	44 f4       	brge	.+16     	; 0x2b18 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2b08:	a0 ee       	ldi	r26, 0xE0	; 224
    2b0a:	40 30       	cpi	r20, 0x00	; 0
    2b0c:	5a 07       	cpc	r21, r26
    2b0e:	3c f0       	brlt	.+14     	; 0x2b1e <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2b10:	8a 01       	movw	r16, r20
    2b12:	00 50       	subi	r16, 0x00	; 0
    2b14:	10 4e       	sbci	r17, 0xE0	; 224
    2b16:	05 c0       	rjmp	.+10     	; 0x2b22 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2b18:	0f ef       	ldi	r16, 0xFF	; 255
    2b1a:	1f e3       	ldi	r17, 0x3F	; 63
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2b1e:	00 e0       	ldi	r16, 0x00	; 0
    2b20:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2b22:	46 2f       	mov	r20, r22
    2b24:	4f 70       	andi	r20, 0x0F	; 15
    2b26:	40 6e       	ori	r20, 0xE0	; 224
    2b28:	20 2f       	mov	r18, r16
    2b2a:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2b2c:	00 0f       	add	r16, r16
    2b2e:	01 2f       	mov	r16, r17
    2b30:	00 1f       	adc	r16, r16
    2b32:	11 0b       	sbc	r17, r17
    2b34:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2b36:	0f 77       	andi	r16, 0x7F	; 127
    2b38:	dc 01       	movw	r26, r24
    2b3a:	ed 91       	ld	r30, X+
    2b3c:	fc 91       	ld	r31, X
    2b3e:	63 e0       	ldi	r22, 0x03	; 3
    2b40:	70 e0       	ldi	r23, 0x00	; 0
    2b42:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2b44:	1f 91       	pop	r17
    2b46:	0f 91       	pop	r16
    2b48:	08 95       	ret

00002b4a <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2b4a:	0f 93       	push	r16
    2b4c:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2b4e:	46 2f       	mov	r20, r22
    2b50:	4f 70       	andi	r20, 0x0F	; 15
    2b52:	40 6c       	ori	r20, 0xC0	; 192
    2b54:	2f 77       	andi	r18, 0x7F	; 127
    2b56:	dc 01       	movw	r26, r24
    2b58:	ed 91       	ld	r30, X+
    2b5a:	fc 91       	ld	r31, X
    2b5c:	62 e0       	ldi	r22, 0x02	; 2
    2b5e:	70 e0       	ldi	r23, 0x00	; 0
    2b60:	00 e0       	ldi	r16, 0x00	; 0
    2b62:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2b64:	0f 91       	pop	r16
    2b66:	08 95       	ret

00002b68 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2b68:	0f 93       	push	r16
    2b6a:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2b6c:	46 2f       	mov	r20, r22
    2b6e:	4f 70       	andi	r20, 0x0F	; 15
    2b70:	40 6d       	ori	r20, 0xD0	; 208
    2b72:	2f 77       	andi	r18, 0x7F	; 127
    2b74:	dc 01       	movw	r26, r24
    2b76:	ed 91       	ld	r30, X+
    2b78:	fc 91       	ld	r31, X
    2b7a:	62 e0       	ldi	r22, 0x02	; 2
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	00 e0       	ldi	r16, 0x00	; 0
    2b80:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2b82:	0f 91       	pop	r16
    2b84:	08 95       	ret

00002b86 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2b86:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2b88:	dc 01       	movw	r26, r24
    2b8a:	ed 91       	ld	r30, X+
    2b8c:	fc 91       	ld	r31, X
    2b8e:	61 e0       	ldi	r22, 0x01	; 1
    2b90:	70 e0       	ldi	r23, 0x00	; 0
    2b92:	48 ef       	ldi	r20, 0xF8	; 248
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	00 e0       	ldi	r16, 0x00	; 0
    2b98:	09 95       	icall
}
    2b9a:	0f 91       	pop	r16
    2b9c:	08 95       	ret

00002b9e <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    2b9e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	ed 91       	ld	r30, X+
    2ba4:	fc 91       	ld	r31, X
    2ba6:	61 e0       	ldi	r22, 0x01	; 1
    2ba8:	70 e0       	ldi	r23, 0x00	; 0
    2baa:	49 ef       	ldi	r20, 0xF9	; 249
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	00 e0       	ldi	r16, 0x00	; 0
    2bb0:	09 95       	icall
}
    2bb2:	0f 91       	pop	r16
    2bb4:	08 95       	ret

00002bb6 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2bb6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2bb8:	dc 01       	movw	r26, r24
    2bba:	ed 91       	ld	r30, X+
    2bbc:	fc 91       	ld	r31, X
    2bbe:	61 e0       	ldi	r22, 0x01	; 1
    2bc0:	70 e0       	ldi	r23, 0x00	; 0
    2bc2:	4a ef       	ldi	r20, 0xFA	; 250
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	00 e0       	ldi	r16, 0x00	; 0
    2bc8:	09 95       	icall
}
    2bca:	0f 91       	pop	r16
    2bcc:	08 95       	ret

00002bce <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    2bce:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	ed 91       	ld	r30, X+
    2bd4:	fc 91       	ld	r31, X
    2bd6:	61 e0       	ldi	r22, 0x01	; 1
    2bd8:	70 e0       	ldi	r23, 0x00	; 0
    2bda:	4b ef       	ldi	r20, 0xFB	; 251
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	00 e0       	ldi	r16, 0x00	; 0
    2be0:	09 95       	icall
}
    2be2:	0f 91       	pop	r16
    2be4:	08 95       	ret

00002be6 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    2be6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    2be8:	dc 01       	movw	r26, r24
    2bea:	ed 91       	ld	r30, X+
    2bec:	fc 91       	ld	r31, X
    2bee:	61 e0       	ldi	r22, 0x01	; 1
    2bf0:	70 e0       	ldi	r23, 0x00	; 0
    2bf2:	4c ef       	ldi	r20, 0xFC	; 252
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	00 e0       	ldi	r16, 0x00	; 0
    2bf8:	09 95       	icall
}
    2bfa:	0f 91       	pop	r16
    2bfc:	08 95       	ret

00002bfe <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    2bfe:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    2c00:	dc 01       	movw	r26, r24
    2c02:	ed 91       	ld	r30, X+
    2c04:	fc 91       	ld	r31, X
    2c06:	61 e0       	ldi	r22, 0x01	; 1
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	4e ef       	ldi	r20, 0xFE	; 254
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	00 e0       	ldi	r16, 0x00	; 0
    2c10:	09 95       	icall
}
    2c12:	0f 91       	pop	r16
    2c14:	08 95       	ret

00002c16 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2c16:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2c18:	dc 01       	movw	r26, r24
    2c1a:	ed 91       	ld	r30, X+
    2c1c:	fc 91       	ld	r31, X
    2c1e:	61 e0       	ldi	r22, 0x01	; 1
    2c20:	70 e0       	ldi	r23, 0x00	; 0
    2c22:	4f ef       	ldi	r20, 0xFF	; 255
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	00 e0       	ldi	r16, 0x00	; 0
    2c28:	09 95       	icall
}
    2c2a:	0f 91       	pop	r16
    2c2c:	08 95       	ret

00002c2e <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    2c2e:	0f 93       	push	r16
   device->send_func(device, 2,
    2c30:	26 2f       	mov	r18, r22
    2c32:	2f 77       	andi	r18, 0x7F	; 127
    2c34:	dc 01       	movw	r26, r24
    2c36:	ed 91       	ld	r30, X+
    2c38:	fc 91       	ld	r31, X
    2c3a:	62 e0       	ldi	r22, 0x02	; 2
    2c3c:	70 e0       	ldi	r23, 0x00	; 0
    2c3e:	41 ef       	ldi	r20, 0xF1	; 241
    2c40:	00 e0       	ldi	r16, 0x00	; 0
    2c42:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2c44:	0f 91       	pop	r16
    2c46:	08 95       	ret

00002c48 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2c48:	0f 93       	push	r16
    2c4a:	1f 93       	push	r17
   device->send_func(device, 3,
    2c4c:	26 2f       	mov	r18, r22
    2c4e:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2c50:	8b 01       	movw	r16, r22
    2c52:	00 0f       	add	r16, r16
    2c54:	01 2f       	mov	r16, r17
    2c56:	00 1f       	adc	r16, r16
    2c58:	11 0b       	sbc	r17, r17
    2c5a:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2c5c:	0f 77       	andi	r16, 0x7F	; 127
    2c5e:	dc 01       	movw	r26, r24
    2c60:	ed 91       	ld	r30, X+
    2c62:	fc 91       	ld	r31, X
    2c64:	63 e0       	ldi	r22, 0x03	; 3
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	42 ef       	ldi	r20, 0xF2	; 242
    2c6a:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	08 95       	ret

00002c72 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2c72:	0f 93       	push	r16
   device->send_func(device, 2,
    2c74:	26 2f       	mov	r18, r22
    2c76:	2f 77       	andi	r18, 0x7F	; 127
    2c78:	dc 01       	movw	r26, r24
    2c7a:	ed 91       	ld	r30, X+
    2c7c:	fc 91       	ld	r31, X
    2c7e:	62 e0       	ldi	r22, 0x02	; 2
    2c80:	70 e0       	ldi	r23, 0x00	; 0
    2c82:	43 ef       	ldi	r20, 0xF3	; 243
    2c84:	00 e0       	ldi	r16, 0x00	; 0
    2c86:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2c88:	0f 91       	pop	r16
    2c8a:	08 95       	ret

00002c8c <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2c8c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    2c8e:	dc 01       	movw	r26, r24
    2c90:	ed 91       	ld	r30, X+
    2c92:	fc 91       	ld	r31, X
    2c94:	61 e0       	ldi	r22, 0x01	; 1
    2c96:	70 e0       	ldi	r23, 0x00	; 0
    2c98:	46 ef       	ldi	r20, 0xF6	; 246
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	00 e0       	ldi	r16, 0x00	; 0
    2c9e:	09 95       	icall
}
    2ca0:	0f 91       	pop	r16
    2ca2:	08 95       	ret

00002ca4 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2ca4:	0f 93       	push	r16
    2ca6:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2ca8:	dc 01       	movw	r26, r24
    2caa:	ed 91       	ld	r30, X+
    2cac:	fc 91       	ld	r31, X
    2cae:	61 e0       	ldi	r22, 0x01	; 1
    2cb0:	70 e0       	ldi	r23, 0x00	; 0
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	00 e0       	ldi	r16, 0x00	; 0
    2cb6:	09 95       	icall
}
    2cb8:	0f 91       	pop	r16
    2cba:	08 95       	ret

00002cbc <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    2cbc:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	ed 91       	ld	r30, X+
    2cc2:	fc 91       	ld	r31, X
    2cc4:	09 95       	icall
}
    2cc6:	0f 91       	pop	r16
    2cc8:	08 95       	ret

00002cca <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2cca:	6f 92       	push	r6
    2ccc:	7f 92       	push	r7
    2cce:	8f 92       	push	r8
    2cd0:	9f 92       	push	r9
    2cd2:	af 92       	push	r10
    2cd4:	bf 92       	push	r11
    2cd6:	cf 92       	push	r12
    2cd8:	df 92       	push	r13
    2cda:	ef 92       	push	r14
    2cdc:	ff 92       	push	r15
    2cde:	0f 93       	push	r16
    2ce0:	1f 93       	push	r17
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
    2ce6:	00 d0       	rcall	.+0      	; 0x2ce8 <midi_send_array+0x1e>
    2ce8:	0f 92       	push	r0
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	4c 01       	movw	r8, r24
    2cf0:	6b 01       	movw	r12, r22
    2cf2:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2cf4:	61 15       	cp	r22, r1
    2cf6:	71 05       	cpc	r23, r1
    2cf8:	41 f1       	breq	.+80     	; 0x2d4a <midi_send_array+0x80>
    2cfa:	ee 24       	eor	r14, r14
    2cfc:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2cfe:	0f 2e       	mov	r0, r31
    2d00:	f3 e0       	ldi	r31, 0x03	; 3
    2d02:	6f 2e       	mov	r6, r31
    2d04:	77 24       	eor	r7, r7
    2d06:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2d08:	19 82       	std	Y+1, r1	; 0x01
    2d0a:	1a 82       	std	Y+2, r1	; 0x02
    2d0c:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2d0e:	86 01       	movw	r16, r12
    2d10:	0e 19       	sub	r16, r14
    2d12:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2d14:	04 30       	cpi	r16, 0x04	; 4
    2d16:	11 05       	cpc	r17, r1
    2d18:	08 f0       	brcs	.+2      	; 0x2d1c <midi_send_array+0x52>
    2d1a:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2d1c:	b5 01       	movw	r22, r10
    2d1e:	6e 0d       	add	r22, r14
    2d20:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2d22:	ce 01       	movw	r24, r28
    2d24:	01 96       	adiw	r24, 0x01	; 1
    2d26:	40 2f       	mov	r20, r16
    2d28:	51 2f       	mov	r21, r17
    2d2a:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2d2e:	c4 01       	movw	r24, r8
    2d30:	b8 01       	movw	r22, r16
    2d32:	49 81       	ldd	r20, Y+1	; 0x01
    2d34:	2a 81       	ldd	r18, Y+2	; 0x02
    2d36:	0b 81       	ldd	r16, Y+3	; 0x03
    2d38:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2d3c:	83 e0       	ldi	r24, 0x03	; 3
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	e8 0e       	add	r14, r24
    2d42:	f9 1e       	adc	r15, r25
    2d44:	ec 14       	cp	r14, r12
    2d46:	fd 04       	cpc	r15, r13
    2d48:	f8 f2       	brcs	.-66     	; 0x2d08 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	df 91       	pop	r29
    2d52:	cf 91       	pop	r28
    2d54:	1f 91       	pop	r17
    2d56:	0f 91       	pop	r16
    2d58:	ff 90       	pop	r15
    2d5a:	ef 90       	pop	r14
    2d5c:	df 90       	pop	r13
    2d5e:	cf 90       	pop	r12
    2d60:	bf 90       	pop	r11
    2d62:	af 90       	pop	r10
    2d64:	9f 90       	pop	r9
    2d66:	8f 90       	pop	r8
    2d68:	7f 90       	pop	r7
    2d6a:	6f 90       	pop	r6
    2d6c:	08 95       	ret

00002d6e <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    2d6e:	fc 01       	movw	r30, r24
    2d70:	73 83       	std	Z+3, r23	; 0x03
    2d72:	62 83       	std	Z+2, r22	; 0x02
}
    2d74:	08 95       	ret

00002d76 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2d76:	fc 01       	movw	r30, r24
    2d78:	75 83       	std	Z+5, r23	; 0x05
    2d7a:	64 83       	std	Z+4, r22	; 0x04
}
    2d7c:	08 95       	ret

00002d7e <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    2d7e:	fc 01       	movw	r30, r24
    2d80:	77 83       	std	Z+7, r23	; 0x07
    2d82:	66 83       	std	Z+6, r22	; 0x06
}
    2d84:	08 95       	ret

00002d86 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2d86:	fc 01       	movw	r30, r24
    2d88:	71 87       	std	Z+9, r23	; 0x09
    2d8a:	60 87       	std	Z+8, r22	; 0x08
}
    2d8c:	08 95       	ret

00002d8e <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    2d8e:	fc 01       	movw	r30, r24
    2d90:	73 87       	std	Z+11, r23	; 0x0b
    2d92:	62 87       	std	Z+10, r22	; 0x0a
}
    2d94:	08 95       	ret

00002d96 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2d96:	fc 01       	movw	r30, r24
    2d98:	75 87       	std	Z+13, r23	; 0x0d
    2d9a:	64 87       	std	Z+12, r22	; 0x0c
}
    2d9c:	08 95       	ret

00002d9e <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    2d9e:	fc 01       	movw	r30, r24
    2da0:	77 87       	std	Z+15, r23	; 0x0f
    2da2:	66 87       	std	Z+14, r22	; 0x0e
}
    2da4:	08 95       	ret

00002da6 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2da6:	fc 01       	movw	r30, r24
    2da8:	71 8b       	std	Z+17, r23	; 0x11
    2daa:	60 8b       	std	Z+16, r22	; 0x10
}
    2dac:	08 95       	ret

00002dae <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    2dae:	fc 01       	movw	r30, r24
    2db0:	73 8b       	std	Z+19, r23	; 0x13
    2db2:	62 8b       	std	Z+18, r22	; 0x12
}
    2db4:	08 95       	ret

00002db6 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    2db6:	fc 01       	movw	r30, r24
    2db8:	75 8b       	std	Z+21, r23	; 0x15
    2dba:	64 8b       	std	Z+20, r22	; 0x14
}
    2dbc:	08 95       	ret

00002dbe <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	77 8b       	std	Z+23, r23	; 0x17
    2dc2:	66 8b       	std	Z+22, r22	; 0x16
}
    2dc4:	08 95       	ret

00002dc6 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	71 8f       	std	Z+25, r23	; 0x19
    2dca:	60 8f       	std	Z+24, r22	; 0x18
}
    2dcc:	08 95       	ret

00002dce <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    2dce:	fc 01       	movw	r30, r24
    2dd0:	73 8f       	std	Z+27, r23	; 0x1b
    2dd2:	62 8f       	std	Z+26, r22	; 0x1a
}
    2dd4:	08 95       	ret

00002dd6 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	75 8f       	std	Z+29, r23	; 0x1d
    2dda:	64 8f       	std	Z+28, r22	; 0x1c
}
    2ddc:	08 95       	ret

00002dde <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    2dde:	fc 01       	movw	r30, r24
    2de0:	77 8f       	std	Z+31, r23	; 0x1f
    2de2:	66 8f       	std	Z+30, r22	; 0x1e
}
    2de4:	08 95       	ret

00002de6 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    2dec:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    2dee:	1f a2       	lds	r17, 0x9f
    2df0:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2df2:	bc 01       	movw	r22, r24
    2df4:	68 5d       	subi	r22, 0xD8	; 216
    2df6:	7f 4f       	sbci	r23, 0xFF	; 255
    2df8:	88 51       	subi	r24, 0x18	; 24
    2dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfc:	40 ec       	ldi	r20, 0xC0	; 192
    2dfe:	0e 94 6d 14 	call	0x28da	; 0x28da <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2e02:	1b 82       	std	Y+3, r1	; 0x03
    2e04:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2e06:	1d 82       	std	Y+5, r1	; 0x05
    2e08:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2e0a:	1f 82       	std	Y+7, r1	; 0x07
    2e0c:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    2e0e:	19 86       	std	Y+9, r1	; 0x09
    2e10:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2e12:	1b 86       	std	Y+11, r1	; 0x0b
    2e14:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2e16:	1d 86       	std	Y+13, r1	; 0x0d
    2e18:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2e1a:	1f 86       	std	Y+15, r1	; 0x0f
    2e1c:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    2e1e:	19 8a       	std	Y+17, r1	; 0x11
    2e20:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2e22:	1b 8a       	std	Y+19, r1	; 0x13
    2e24:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2e26:	1d 8a       	std	Y+21, r1	; 0x15
    2e28:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2e2a:	1f 8a       	std	Y+23, r1	; 0x17
    2e2c:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    2e2e:	19 8e       	std	Y+25, r1	; 0x19
    2e30:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2e32:	1b 8e       	std	Y+27, r1	; 0x1b
    2e34:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2e36:	1d 8e       	std	Y+29, r1	; 0x1d
    2e38:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2e3a:	1f 8e       	std	Y+31, r1	; 0x1f
    2e3c:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    2e3e:	19 a2       	lds	r17, 0x99
    2e40:	18 a2       	lds	r17, 0x98
}
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	08 95       	ret

00002e48 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2e48:	ef 92       	push	r14
    2e4a:	ff 92       	push	r15
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2e56:	66 23       	and	r22, r22
    2e58:	99 f0       	breq	.+38     	; 0x2e80 <midi_device_input+0x38>
    2e5a:	04 2f       	mov	r16, r20
    2e5c:	15 2f       	mov	r17, r21
    2e5e:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    2e60:	0f 2e       	mov	r0, r31
    2e62:	f8 ee       	ldi	r31, 0xE8	; 232
    2e64:	ef 2e       	mov	r14, r31
    2e66:	ff 24       	eor	r15, r15
    2e68:	f0 2d       	mov	r31, r0
    2e6a:	e8 0e       	add	r14, r24
    2e6c:	f9 1e       	adc	r15, r25
    2e6e:	f8 01       	movw	r30, r16
    2e70:	61 91       	ld	r22, Z+
    2e72:	8f 01       	movw	r16, r30
    2e74:	c7 01       	movw	r24, r14
    2e76:	0e 94 74 14 	call	0x28e8	; 0x28e8 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2e7a:	cf 5f       	subi	r28, 0xFF	; 255
    2e7c:	cd 17       	cp	r28, r29
    2e7e:	b9 f7       	brne	.-18     	; 0x2e6e <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    2e80:	df 91       	pop	r29
    2e82:	cf 91       	pop	r28
    2e84:	1f 91       	pop	r17
    2e86:	0f 91       	pop	r16
    2e88:	ff 90       	pop	r15
    2e8a:	ef 90       	pop	r14
    2e8c:	08 95       	ret

00002e8e <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    2e8e:	fc 01       	movw	r30, r24
    2e90:	71 83       	std	Z+1, r23	; 0x01
    2e92:	60 83       	st	Z, r22
}
    2e94:	08 95       	ret

00002e96 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    2e96:	fc 01       	movw	r30, r24
    2e98:	71 a3       	lds	r23, 0x51
    2e9a:	60 a3       	lds	r22, 0x50
}
    2e9c:	08 95       	ret

00002e9e <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    2e9e:	af 92       	push	r10
    2ea0:	bf 92       	push	r11
    2ea2:	cf 92       	push	r12
    2ea4:	df 92       	push	r13
    2ea6:	ef 92       	push	r14
    2ea8:	ff 92       	push	r15
    2eaa:	0f 93       	push	r16
    2eac:	1f 93       	push	r17
    2eae:	cf 93       	push	r28
    2eb0:	df 93       	push	r29
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <midi_input_callbacks+0x16>
    2eb4:	0f 92       	push	r0
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	6c 01       	movw	r12, r24
    2ebc:	5b 01       	movw	r10, r22
    2ebe:	f4 2e       	mov	r15, r20
    2ec0:	e2 2e       	mov	r14, r18
    2ec2:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	95 96       	adiw	r26, 0x25	; 37
    2ec8:	8c 91       	ld	r24, X
    2eca:	95 97       	sbiw	r26, 0x25	; 37
    2ecc:	84 30       	cpi	r24, 0x04	; 4
    2ece:	e9 f4       	brne	.+58     	; 0x2f0a <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    2ed0:	5a 96       	adiw	r26, 0x1a	; 26
    2ed2:	ed 91       	ld	r30, X+
    2ed4:	fc 91       	ld	r31, X
    2ed6:	5b 97       	sbiw	r26, 0x1b	; 27
    2ed8:	30 97       	sbiw	r30, 0x00	; 0
    2eda:	09 f4       	brne	.+2      	; 0x2ede <midi_input_callbacks+0x40>
    2edc:	ee c0       	rjmp	.+476    	; 0x30ba <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    2ede:	cb 01       	movw	r24, r22
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	63 e0       	ldi	r22, 0x03	; 3
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodhi4>
    2eea:	cb 01       	movw	r24, r22
    2eec:	88 0f       	add	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	68 0f       	add	r22, r24
    2ef2:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2ef4:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2ef6:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    2ef8:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2efa:	4a 2d       	mov	r20, r10
    2efc:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    2efe:	c6 01       	movw	r24, r12
    2f00:	9e 01       	movw	r18, r28
    2f02:	2f 5f       	subi	r18, 0xFF	; 255
    2f04:	3f 4f       	sbci	r19, 0xFF	; 255
    2f06:	09 95       	icall
    2f08:	c8 c0       	rjmp	.+400    	; 0x309a <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    2f0a:	62 30       	cpi	r22, 0x02	; 2
    2f0c:	71 05       	cpc	r23, r1
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <midi_input_callbacks+0x74>
    2f10:	5f c0       	rjmp	.+190    	; 0x2fd0 <midi_input_callbacks+0x132>
    2f12:	63 30       	cpi	r22, 0x03	; 3
    2f14:	71 05       	cpc	r23, r1
    2f16:	29 f0       	breq	.+10     	; 0x2f22 <midi_input_callbacks+0x84>
    2f18:	61 30       	cpi	r22, 0x01	; 1
    2f1a:	71 05       	cpc	r23, r1
    2f1c:	09 f0       	breq	.+2      	; 0x2f20 <midi_input_callbacks+0x82>
    2f1e:	b3 c0       	rjmp	.+358    	; 0x3086 <midi_input_callbacks+0x1e8>
    2f20:	99 c0       	rjmp	.+306    	; 0x3054 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2f22:	84 2f       	mov	r24, r20
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	80 7f       	andi	r24, 0xF0	; 240
    2f28:	90 70       	andi	r25, 0x00	; 0
    2f2a:	80 3a       	cpi	r24, 0xA0	; 160
    2f2c:	91 05       	cpc	r25, r1
    2f2e:	29 f1       	breq	.+74     	; 0x2f7a <midi_input_callbacks+0xdc>
    2f30:	81 3a       	cpi	r24, 0xA1	; 161
    2f32:	91 05       	cpc	r25, r1
    2f34:	3c f4       	brge	.+14     	; 0x2f44 <midi_input_callbacks+0xa6>
    2f36:	80 38       	cpi	r24, 0x80	; 128
    2f38:	91 05       	cpc	r25, r1
    2f3a:	c9 f0       	breq	.+50     	; 0x2f6e <midi_input_callbacks+0xd0>
    2f3c:	80 39       	cpi	r24, 0x90	; 144
    2f3e:	91 05       	cpc	r25, r1
    2f40:	91 f5       	brne	.+100    	; 0x2fa6 <midi_input_callbacks+0x108>
    2f42:	0f c0       	rjmp	.+30     	; 0x2f62 <midi_input_callbacks+0xc4>
    2f44:	80 3e       	cpi	r24, 0xE0	; 224
    2f46:	91 05       	cpc	r25, r1
    2f48:	f1 f0       	breq	.+60     	; 0x2f86 <midi_input_callbacks+0xe8>
    2f4a:	80 3f       	cpi	r24, 0xF0	; 240
    2f4c:	91 05       	cpc	r25, r1
    2f4e:	09 f1       	breq	.+66     	; 0x2f92 <midi_input_callbacks+0xf4>
    2f50:	80 3b       	cpi	r24, 0xB0	; 176
    2f52:	91 05       	cpc	r25, r1
    2f54:	41 f5       	brne	.+80     	; 0x2fa6 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2f56:	d6 01       	movw	r26, r12
    2f58:	12 96       	adiw	r26, 0x02	; 2
    2f5a:	ed 91       	ld	r30, X+
    2f5c:	fc 91       	ld	r31, X
    2f5e:	13 97       	sbiw	r26, 0x03	; 3
              break;
    2f60:	24 c0       	rjmp	.+72     	; 0x2faa <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    2f62:	d6 01       	movw	r26, r12
    2f64:	14 96       	adiw	r26, 0x04	; 4
    2f66:	ed 91       	ld	r30, X+
    2f68:	fc 91       	ld	r31, X
    2f6a:	15 97       	sbiw	r26, 0x05	; 5
              break;
    2f6c:	1e c0       	rjmp	.+60     	; 0x2faa <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    2f6e:	d6 01       	movw	r26, r12
    2f70:	16 96       	adiw	r26, 0x06	; 6
    2f72:	ed 91       	ld	r30, X+
    2f74:	fc 91       	ld	r31, X
    2f76:	17 97       	sbiw	r26, 0x07	; 7
              break;
    2f78:	18 c0       	rjmp	.+48     	; 0x2faa <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    2f7a:	d6 01       	movw	r26, r12
    2f7c:	18 96       	adiw	r26, 0x08	; 8
    2f7e:	ed 91       	ld	r30, X+
    2f80:	fc 91       	ld	r31, X
    2f82:	19 97       	sbiw	r26, 0x09	; 9
              break;
    2f84:	12 c0       	rjmp	.+36     	; 0x2faa <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    2f86:	d6 01       	movw	r26, r12
    2f88:	1a 96       	adiw	r26, 0x0a	; 10
    2f8a:	ed 91       	ld	r30, X+
    2f8c:	fc 91       	ld	r31, X
    2f8e:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    2f90:	0c c0       	rjmp	.+24     	; 0x2faa <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    2f92:	b2 ef       	ldi	r27, 0xF2	; 242
    2f94:	4b 17       	cp	r20, r27
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <midi_input_callbacks+0xfc>
    2f98:	90 c0       	rjmp	.+288    	; 0x30ba <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    2f9a:	d6 01       	movw	r26, r12
    2f9c:	1c 96       	adiw	r26, 0x0c	; 12
    2f9e:	ed 91       	ld	r30, X+
    2fa0:	fc 91       	ld	r31, X
    2fa2:	1d 97       	sbiw	r26, 0x0d	; 13
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    2fa6:	e0 e0       	ldi	r30, 0x00	; 0
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    2faa:	30 97       	sbiw	r30, 0x00	; 0
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <midi_input_callbacks+0x112>
    2fae:	85 c0       	rjmp	.+266    	; 0x30ba <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    2fb0:	b2 ef       	ldi	r27, 0xF2	; 242
    2fb2:	fb 16       	cp	r15, r27
    2fb4:	31 f4       	brne	.+12     	; 0x2fc2 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    2fb6:	c6 01       	movw	r24, r12
    2fb8:	62 ef       	ldi	r22, 0xF2	; 242
    2fba:	4e 2d       	mov	r20, r14
    2fbc:	21 2f       	mov	r18, r17
    2fbe:	09 95       	icall
    2fc0:	6c c0       	rjmp	.+216    	; 0x309a <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    2fc2:	6f 2d       	mov	r22, r15
    2fc4:	6f 70       	andi	r22, 0x0F	; 15
    2fc6:	c6 01       	movw	r24, r12
    2fc8:	4e 2d       	mov	r20, r14
    2fca:	21 2f       	mov	r18, r17
    2fcc:	09 95       	icall
    2fce:	65 c0       	rjmp	.+202    	; 0x309a <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2fd0:	84 2f       	mov	r24, r20
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	80 7f       	andi	r24, 0xF0	; 240
    2fd6:	90 70       	andi	r25, 0x00	; 0
    2fd8:	80 3d       	cpi	r24, 0xD0	; 208
    2fda:	91 05       	cpc	r25, r1
    2fdc:	61 f0       	breq	.+24     	; 0x2ff6 <midi_input_callbacks+0x158>
    2fde:	80 3f       	cpi	r24, 0xF0	; 240
    2fe0:	91 05       	cpc	r25, r1
    2fe2:	79 f0       	breq	.+30     	; 0x3002 <midi_input_callbacks+0x164>
    2fe4:	80 3c       	cpi	r24, 0xC0	; 192
    2fe6:	91 05       	cpc	r25, r1
    2fe8:	f9 f4       	brne	.+62     	; 0x3028 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    2fea:	d6 01       	movw	r26, r12
    2fec:	1e 96       	adiw	r26, 0x0e	; 14
    2fee:	ed 91       	ld	r30, X+
    2ff0:	fc 91       	ld	r31, X
    2ff2:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2ff4:	1b c0       	rjmp	.+54     	; 0x302c <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2ff6:	d6 01       	movw	r26, r12
    2ff8:	50 96       	adiw	r26, 0x10	; 16
    2ffa:	ed 91       	ld	r30, X+
    2ffc:	fc 91       	ld	r31, X
    2ffe:	51 97       	sbiw	r26, 0x11	; 17
              break;
    3000:	15 c0       	rjmp	.+42     	; 0x302c <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    3002:	b3 ef       	ldi	r27, 0xF3	; 243
    3004:	4b 17       	cp	r20, r27
    3006:	31 f4       	brne	.+12     	; 0x3014 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    3008:	d6 01       	movw	r26, r12
    300a:	52 96       	adiw	r26, 0x12	; 18
    300c:	ed 91       	ld	r30, X+
    300e:	fc 91       	ld	r31, X
    3010:	53 97       	sbiw	r26, 0x13	; 19
    3012:	0c c0       	rjmp	.+24     	; 0x302c <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    3014:	b1 ef       	ldi	r27, 0xF1	; 241
    3016:	4b 17       	cp	r20, r27
    3018:	09 f0       	breq	.+2      	; 0x301c <midi_input_callbacks+0x17e>
    301a:	4f c0       	rjmp	.+158    	; 0x30ba <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    301c:	d6 01       	movw	r26, r12
    301e:	54 96       	adiw	r26, 0x14	; 20
    3020:	ed 91       	ld	r30, X+
    3022:	fc 91       	ld	r31, X
    3024:	55 97       	sbiw	r26, 0x15	; 21
    3026:	02 c0       	rjmp	.+4      	; 0x302c <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    3028:	e0 e0       	ldi	r30, 0x00	; 0
    302a:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    302c:	30 97       	sbiw	r30, 0x00	; 0
    302e:	09 f4       	brne	.+2      	; 0x3032 <midi_input_callbacks+0x194>
    3030:	44 c0       	rjmp	.+136    	; 0x30ba <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    3032:	b3 ef       	ldi	r27, 0xF3	; 243
    3034:	fb 16       	cp	r15, r27
    3036:	19 f0       	breq	.+6      	; 0x303e <midi_input_callbacks+0x1a0>
    3038:	81 ef       	ldi	r24, 0xF1	; 241
    303a:	f8 16       	cp	r15, r24
    303c:	29 f4       	brne	.+10     	; 0x3048 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    303e:	c6 01       	movw	r24, r12
    3040:	6f 2d       	mov	r22, r15
    3042:	4e 2d       	mov	r20, r14
    3044:	09 95       	icall
    3046:	29 c0       	rjmp	.+82     	; 0x309a <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    3048:	6f 2d       	mov	r22, r15
    304a:	6f 70       	andi	r22, 0x0F	; 15
    304c:	c6 01       	movw	r24, r12
    304e:	4e 2d       	mov	r20, r14
    3050:	09 95       	icall
    3052:	23 c0       	rjmp	.+70     	; 0x309a <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    3054:	84 2f       	mov	r24, r20
    3056:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <midi_is_realtime>
    305a:	88 23       	and	r24, r24
    305c:	31 f0       	breq	.+12     	; 0x306a <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    305e:	d6 01       	movw	r26, r12
    3060:	56 96       	adiw	r26, 0x16	; 22
    3062:	ed 91       	ld	r30, X+
    3064:	fc 91       	ld	r31, X
    3066:	57 97       	sbiw	r26, 0x17	; 23
    3068:	08 c0       	rjmp	.+16     	; 0x307a <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    306a:	b6 ef       	ldi	r27, 0xF6	; 246
    306c:	fb 16       	cp	r15, r27
    306e:	29 f5       	brne	.+74     	; 0x30ba <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    3070:	d6 01       	movw	r26, r12
    3072:	58 96       	adiw	r26, 0x18	; 24
    3074:	ed 91       	ld	r30, X+
    3076:	fc 91       	ld	r31, X
    3078:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    307a:	30 97       	sbiw	r30, 0x00	; 0
    307c:	f1 f0       	breq	.+60     	; 0x30ba <midi_input_callbacks+0x21c>
            func(device, byte0);
    307e:	c6 01       	movw	r24, r12
    3080:	6f 2d       	mov	r22, r15
    3082:	09 95       	icall
    3084:	0a c0       	rjmp	.+20     	; 0x309a <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    3086:	64 30       	cpi	r22, 0x04	; 4
    3088:	71 05       	cpc	r23, r1
    308a:	a8 f4       	brcc	.+42     	; 0x30b6 <midi_input_callbacks+0x218>
    308c:	16 c0       	rjmp	.+44     	; 0x30ba <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    308e:	c6 01       	movw	r24, r12
    3090:	b5 01       	movw	r22, r10
    3092:	4f 2d       	mov	r20, r15
    3094:	2e 2d       	mov	r18, r14
    3096:	01 2f       	mov	r16, r17
    3098:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    309a:	d6 01       	movw	r26, r12
    309c:	5e 96       	adiw	r26, 0x1e	; 30
    309e:	ed 91       	ld	r30, X+
    30a0:	fc 91       	ld	r31, X
    30a2:	5f 97       	sbiw	r26, 0x1f	; 31
    30a4:	30 97       	sbiw	r30, 0x00	; 0
    30a6:	89 f0       	breq	.+34     	; 0x30ca <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    30a8:	c6 01       	movw	r24, r12
    30aa:	b5 01       	movw	r22, r10
    30ac:	4f 2d       	mov	r20, r15
    30ae:	2e 2d       	mov	r18, r14
    30b0:	01 2f       	mov	r16, r17
    30b2:	09 95       	icall
    30b4:	0a c0       	rjmp	.+20     	; 0x30ca <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    30b6:	aa 24       	eor	r10, r10
    30b8:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    30ba:	d6 01       	movw	r26, r12
    30bc:	5c 96       	adiw	r26, 0x1c	; 28
    30be:	ed 91       	ld	r30, X+
    30c0:	fc 91       	ld	r31, X
    30c2:	5d 97       	sbiw	r26, 0x1d	; 29
    30c4:	30 97       	sbiw	r30, 0x00	; 0
    30c6:	19 f7       	brne	.-58     	; 0x308e <midi_input_callbacks+0x1f0>
    30c8:	e8 cf       	rjmp	.-48     	; 0x309a <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    30ca:	0f 90       	pop	r0
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	ff 90       	pop	r15
    30da:	ef 90       	pop	r14
    30dc:	df 90       	pop	r13
    30de:	cf 90       	pop	r12
    30e0:	bf 90       	pop	r11
    30e2:	af 90       	pop	r10
    30e4:	08 95       	ret

000030e6 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    30e6:	ef 92       	push	r14
    30e8:	ff 92       	push	r15
    30ea:	0f 93       	push	r16
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	7c 01       	movw	r14, r24
    30f2:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    30f4:	86 2f       	mov	r24, r22
    30f6:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <midi_is_realtime>
    30fa:	88 23       	and	r24, r24
    30fc:	91 f0       	breq	.+36     	; 0x3122 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    30fe:	d7 01       	movw	r26, r14
    3100:	95 96       	adiw	r26, 0x25	; 37
    3102:	dc 91       	ld	r29, X
    3104:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	95 96       	adiw	r26, 0x25	; 37
    310a:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    310c:	c7 01       	movw	r24, r14
    310e:	61 e0       	ldi	r22, 0x01	; 1
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	4c 2f       	mov	r20, r28
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	00 e0       	ldi	r16, 0x00	; 0
    3118:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <midi_input_callbacks>
    device->input_state = state;
    311c:	f7 01       	movw	r30, r14
    311e:	d5 a3       	lds	r29, 0x55
    3120:	b7 c0       	rjmp	.+366    	; 0x3290 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    3122:	8c 2f       	mov	r24, r28
    3124:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <midi_is_statusbyte>
    3128:	88 23       	and	r24, r24
    312a:	09 f4       	brne	.+2      	; 0x312e <midi_process_byte+0x48>
    312c:	73 c0       	rjmp	.+230    	; 0x3214 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    312e:	d7 01       	movw	r26, r14
    3130:	95 96       	adiw	r26, 0x25	; 37
    3132:	8c 91       	ld	r24, X
    3134:	95 97       	sbiw	r26, 0x25	; 37
    3136:	84 30       	cpi	r24, 0x04	; 4
    3138:	49 f0       	breq	.+18     	; 0x314c <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    313a:	92 96       	adiw	r26, 0x22	; 34
    313c:	cc 93       	st	X, r28
    313e:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	97 96       	adiw	r26, 0x27	; 39
    3146:	9c 93       	st	X, r25
    3148:	8e 93       	st	-X, r24
    314a:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    314c:	8c 2f       	mov	r24, r28
    314e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <midi_packet_length>
    3152:	81 30       	cpi	r24, 0x01	; 1
    3154:	41 f0       	breq	.+16     	; 0x3166 <midi_process_byte+0x80>
    3156:	81 30       	cpi	r24, 0x01	; 1
    3158:	00 f1       	brcs	.+64     	; 0x319a <midi_process_byte+0xb4>
    315a:	82 30       	cpi	r24, 0x02	; 2
    315c:	a1 f0       	breq	.+40     	; 0x3186 <midi_process_byte+0xa0>
    315e:	83 30       	cpi	r24, 0x03	; 3
    3160:	09 f0       	breq	.+2      	; 0x3164 <midi_process_byte+0x7e>
    3162:	4f c0       	rjmp	.+158    	; 0x3202 <midi_process_byte+0x11c>
    3164:	14 c0       	rjmp	.+40     	; 0x318e <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	f7 01       	movw	r30, r14
    316a:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    316c:	c7 01       	movw	r24, r14
    316e:	61 e0       	ldi	r22, 0x01	; 1
    3170:	70 e0       	ldi	r23, 0x00	; 0
    3172:	4c 2f       	mov	r20, r28
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	00 e0       	ldi	r16, 0x00	; 0
    3178:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <midi_input_callbacks>
        device->input_state = IDLE;
    317c:	d7 01       	movw	r26, r14
    317e:	95 96       	adiw	r26, 0x25	; 37
    3180:	1c 92       	st	X, r1
    3182:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3184:	85 c0       	rjmp	.+266    	; 0x3290 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    3186:	82 e0       	ldi	r24, 0x02	; 2
    3188:	f7 01       	movw	r30, r14
    318a:	85 a3       	lds	r24, 0x55
        break;
    318c:	81 c0       	rjmp	.+258    	; 0x3290 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    318e:	83 e0       	ldi	r24, 0x03	; 3
    3190:	d7 01       	movw	r26, r14
    3192:	95 96       	adiw	r26, 0x25	; 37
    3194:	8c 93       	st	X, r24
    3196:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3198:	7b c0       	rjmp	.+246    	; 0x3290 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    319a:	c0 3f       	cpi	r28, 0xF0	; 240
    319c:	19 f0       	breq	.+6      	; 0x31a4 <midi_process_byte+0xbe>
    319e:	c7 3f       	cpi	r28, 0xF7	; 247
    31a0:	59 f5       	brne	.+86     	; 0x31f8 <midi_process_byte+0x112>
    31a2:	0a c0       	rjmp	.+20     	; 0x31b8 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    31a4:	84 e0       	ldi	r24, 0x04	; 4
    31a6:	f7 01       	movw	r30, r14
    31a8:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    31aa:	80 ef       	ldi	r24, 0xF0	; 240
    31ac:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	97 a3       	lds	r25, 0x57
    31b4:	86 a3       	lds	r24, 0x56
            break;
    31b6:	6c c0       	rjmp	.+216    	; 0x3290 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    31b8:	d7 01       	movw	r26, r14
    31ba:	96 96       	adiw	r26, 0x26	; 38
    31bc:	2d 91       	ld	r18, X+
    31be:	3c 91       	ld	r19, X
    31c0:	97 97       	sbiw	r26, 0x27	; 39
    31c2:	c9 01       	movw	r24, r18
    31c4:	63 e0       	ldi	r22, 0x03	; 3
    31c6:	70 e0       	ldi	r23, 0x00	; 0
    31c8:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodhi4>
    31cc:	f7 01       	movw	r30, r14
    31ce:	e8 0f       	add	r30, r24
    31d0:	f9 1f       	adc	r31, r25
    31d2:	87 ef       	ldi	r24, 0xF7	; 247
    31d4:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    31d6:	b9 01       	movw	r22, r18
    31d8:	6f 5f       	subi	r22, 0xFF	; 255
    31da:	7f 4f       	sbci	r23, 0xFF	; 255
    31dc:	f7 01       	movw	r30, r14
    31de:	77 a3       	lds	r23, 0x57
    31e0:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    31e2:	c7 01       	movw	r24, r14
    31e4:	42 a1       	lds	r20, 0x42
    31e6:	23 a1       	lds	r18, 0x43
    31e8:	04 a1       	lds	r16, 0x44
    31ea:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    31ee:	d7 01       	movw	r26, r14
    31f0:	95 96       	adiw	r26, 0x25	; 37
    31f2:	1c 92       	st	X, r1
    31f4:	95 97       	sbiw	r26, 0x25	; 37
            break;
    31f6:	4c c0       	rjmp	.+152    	; 0x3290 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    31f8:	f7 01       	movw	r30, r14
    31fa:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    31fc:	17 a2       	lds	r17, 0x97
    31fe:	16 a2       	lds	r17, 0x96
    3200:	47 c0       	rjmp	.+142    	; 0x3290 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    3202:	d7 01       	movw	r26, r14
    3204:	95 96       	adiw	r26, 0x25	; 37
    3206:	1c 92       	st	X, r1
    3208:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    320a:	97 96       	adiw	r26, 0x27	; 39
    320c:	1c 92       	st	X, r1
    320e:	1e 92       	st	-X, r1
    3210:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3212:	3e c0       	rjmp	.+124    	; 0x3290 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    3214:	f7 01       	movw	r30, r14
    3216:	25 a1       	lds	r18, 0x45
    3218:	22 23       	and	r18, r18
    321a:	d1 f1       	breq	.+116    	; 0x3290 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    321c:	06 a0       	lds	r16, 0x86
    321e:	f7 a1       	lds	r31, 0x47
    3220:	e0 2d       	mov	r30, r0
    3222:	cf 01       	movw	r24, r30
    3224:	63 e0       	ldi	r22, 0x03	; 3
    3226:	70 e0       	ldi	r23, 0x00	; 0
    3228:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodhi4>
    322c:	ac 01       	movw	r20, r24
    322e:	8e 0d       	add	r24, r14
    3230:	9f 1d       	adc	r25, r15
    3232:	dc 01       	movw	r26, r24
    3234:	92 96       	adiw	r26, 0x22	; 34
    3236:	cc 93       	st	X, r28
    3238:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    323a:	bf 01       	movw	r22, r30
    323c:	6f 5f       	subi	r22, 0xFF	; 255
    323e:	7f 4f       	sbci	r23, 0xFF	; 255
    3240:	f7 01       	movw	r30, r14
    3242:	77 a3       	lds	r23, 0x57
    3244:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    3246:	41 30       	cpi	r20, 0x01	; 1
    3248:	51 05       	cpc	r21, r1
    324a:	91 f0       	breq	.+36     	; 0x3270 <midi_process_byte+0x18a>
    324c:	42 30       	cpi	r20, 0x02	; 2
    324e:	51 05       	cpc	r21, r1
    3250:	f9 f4       	brne	.+62     	; 0x3290 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    3252:	c7 01       	movw	r24, r14
    3254:	42 a1       	lds	r20, 0x42
    3256:	23 a1       	lds	r18, 0x43
    3258:	04 a1       	lds	r16, 0x44
    325a:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    325e:	f7 01       	movw	r30, r14
    3260:	85 a1       	lds	r24, 0x45
    3262:	84 30       	cpi	r24, 0x04	; 4
    3264:	a9 f0       	breq	.+42     	; 0x3290 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	97 a3       	lds	r25, 0x57
    326c:	86 a3       	lds	r24, 0x56
    326e:	10 c0       	rjmp	.+32     	; 0x3290 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3270:	22 30       	cpi	r18, 0x02	; 2
    3272:	71 f4       	brne	.+28     	; 0x3290 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3274:	c7 01       	movw	r24, r14
    3276:	42 a1       	lds	r20, 0x42
    3278:	23 a1       	lds	r18, 0x43
    327a:	00 e0       	ldi	r16, 0x00	; 0
    327c:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3280:	f7 01       	movw	r30, r14
    3282:	85 a1       	lds	r24, 0x45
    3284:	84 30       	cpi	r24, 0x04	; 4
    3286:	21 f0       	breq	.+8      	; 0x3290 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	97 a3       	lds	r25, 0x57
    328e:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	0f 91       	pop	r16
    3296:	ff 90       	pop	r15
    3298:	ef 90       	pop	r14
    329a:	08 95       	ret

0000329c <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    329c:	cf 92       	push	r12
    329e:	df 92       	push	r13
    32a0:	ef 92       	push	r14
    32a2:	ff 92       	push	r15
    32a4:	0f 93       	push	r16
    32a6:	1f 93       	push	r17
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    32ae:	dc 01       	movw	r26, r24
    32b0:	90 96       	adiw	r26, 0x20	; 32
    32b2:	ed 91       	ld	r30, X+
    32b4:	fc 91       	ld	r31, X
    32b6:	91 97       	sbiw	r26, 0x21	; 33
    32b8:	30 97       	sbiw	r30, 0x00	; 0
    32ba:	09 f0       	breq	.+2      	; 0x32be <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    32bc:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    32be:	0f 2e       	mov	r0, r31
    32c0:	f8 ee       	ldi	r31, 0xE8	; 232
    32c2:	ef 2e       	mov	r14, r31
    32c4:	ff 24       	eor	r15, r15
    32c6:	f0 2d       	mov	r31, r0
    32c8:	ec 0c       	add	r14, r12
    32ca:	fd 1c       	adc	r15, r13
    32cc:	c7 01       	movw	r24, r14
    32ce:	0e 94 a3 14 	call	0x2946	; 0x2946 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    32d2:	c8 2f       	mov	r28, r24
    32d4:	d0 e0       	ldi	r29, 0x00	; 0
    32d6:	20 97       	sbiw	r28, 0x00	; 0
    32d8:	99 f0       	breq	.+38     	; 0x3300 <midi_device_process+0x64>
    32da:	00 e0       	ldi	r16, 0x00	; 0
    32dc:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    32de:	c7 01       	movw	r24, r14
    32e0:	60 e0       	ldi	r22, 0x00	; 0
    32e2:	0e 94 b8 14 	call	0x2970	; 0x2970 <bytequeue_get>
    32e6:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    32e8:	c6 01       	movw	r24, r12
    32ea:	0e 94 73 18 	call	0x30e6	; 0x30e6 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    32ee:	c7 01       	movw	r24, r14
    32f0:	61 e0       	ldi	r22, 0x01	; 1
    32f2:	0e 94 c9 14 	call	0x2992	; 0x2992 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    32f6:	0f 5f       	subi	r16, 0xFF	; 255
    32f8:	1f 4f       	sbci	r17, 0xFF	; 255
    32fa:	0c 17       	cp	r16, r28
    32fc:	1d 07       	cpc	r17, r29
    32fe:	78 f3       	brcs	.-34     	; 0x32de <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	1f 91       	pop	r17
    3306:	0f 91       	pop	r16
    3308:	ff 90       	pop	r15
    330a:	ef 90       	pop	r14
    330c:	df 90       	pop	r13
    330e:	cf 90       	pop	r12
    3310:	08 95       	ret

00003312 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3312:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    3314:	67 e0       	ldi	r22, 0x07	; 7
    3316:	70 e0       	ldi	r23, 0x00	; 0
    3318:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodhi4>
    331c:	48 2f       	mov	r20, r24
   if (remainder)
    331e:	88 23       	and	r24, r24
    3320:	81 f0       	breq	.+32     	; 0x3342 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    3322:	c9 01       	movw	r24, r18
    3324:	67 e0       	ldi	r22, 0x07	; 7
    3326:	70 e0       	ldi	r23, 0x00	; 0
    3328:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodhi4>
    332c:	cb 01       	movw	r24, r22
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	01 96       	adiw	r24, 0x01	; 1
    333c:	84 0f       	add	r24, r20
    333e:	91 1d       	adc	r25, r1
    3340:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3342:	c9 01       	movw	r24, r18
    3344:	67 e0       	ldi	r22, 0x07	; 7
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodhi4>
    334c:	cb 01       	movw	r24, r22
    334e:	88 0f       	add	r24, r24
    3350:	99 1f       	adc	r25, r25
    3352:	88 0f       	add	r24, r24
    3354:	99 1f       	adc	r25, r25
    3356:	88 0f       	add	r24, r24
    3358:	99 1f       	adc	r25, r25
}
    335a:	08 95       	ret

0000335c <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    335c:	48 2f       	mov	r20, r24
    335e:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3360:	a1 f0       	breq	.+40     	; 0x338a <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3362:	9c 01       	movw	r18, r24
    3364:	36 95       	lsr	r19
    3366:	27 95       	ror	r18
    3368:	36 95       	lsr	r19
    336a:	27 95       	ror	r18
    336c:	36 95       	lsr	r19
    336e:	27 95       	ror	r18
    3370:	c9 01       	movw	r24, r18
    3372:	88 0f       	add	r24, r24
    3374:	99 1f       	adc	r25, r25
    3376:	88 0f       	add	r24, r24
    3378:	99 1f       	adc	r25, r25
    337a:	88 0f       	add	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	82 1b       	sub	r24, r18
    3380:	93 0b       	sbc	r25, r19
    3382:	01 97       	sbiw	r24, 0x01	; 1
    3384:	84 0f       	add	r24, r20
    3386:	91 1d       	adc	r25, r1
    3388:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    338a:	9c 01       	movw	r18, r24
    338c:	36 95       	lsr	r19
    338e:	27 95       	ror	r18
    3390:	36 95       	lsr	r19
    3392:	27 95       	ror	r18
    3394:	36 95       	lsr	r19
    3396:	27 95       	ror	r18
    3398:	c9 01       	movw	r24, r18
    339a:	88 0f       	add	r24, r24
    339c:	99 1f       	adc	r25, r25
    339e:	88 0f       	add	r24, r24
    33a0:	99 1f       	adc	r25, r25
    33a2:	88 0f       	add	r24, r24
    33a4:	99 1f       	adc	r25, r25
    33a6:	82 1b       	sub	r24, r18
    33a8:	93 0b       	sbc	r25, r19
}
    33aa:	08 95       	ret

000033ac <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    33ac:	2f 92       	push	r2
    33ae:	3f 92       	push	r3
    33b0:	4f 92       	push	r4
    33b2:	5f 92       	push	r5
    33b4:	6f 92       	push	r6
    33b6:	7f 92       	push	r7
    33b8:	8f 92       	push	r8
    33ba:	9f 92       	push	r9
    33bc:	af 92       	push	r10
    33be:	bf 92       	push	r11
    33c0:	cf 92       	push	r12
    33c2:	df 92       	push	r13
    33c4:	ef 92       	push	r14
    33c6:	ff 92       	push	r15
    33c8:	0f 93       	push	r16
    33ca:	1f 93       	push	r17
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <sysex_encode+0x26>
    33d2:	00 d0       	rcall	.+0      	; 0x33d4 <sysex_encode+0x28>
    33d4:	00 d0       	rcall	.+0      	; 0x33d6 <sysex_encode+0x2a>
    33d6:	cd b7       	in	r28, 0x3d	; 61
    33d8:	de b7       	in	r29, 0x3e	; 62
    33da:	1c 01       	movw	r2, r24
    33dc:	7a 83       	std	Y+2, r23	; 0x02
    33de:	69 83       	std	Y+1, r22	; 0x01
    33e0:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    33e2:	ca 01       	movw	r24, r20
    33e4:	67 e0       	ldi	r22, 0x07	; 7
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodhi4>
    33ec:	2b 01       	movw	r4, r22
    33ee:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    33f0:	61 15       	cp	r22, r1
    33f2:	71 05       	cpc	r23, r1
    33f4:	b1 f1       	breq	.+108    	; 0x3462 <sysex_encode+0xb6>
    33f6:	81 01       	movw	r16, r2
    33f8:	e9 80       	ldd	r14, Y+1	; 0x01
    33fa:	fa 80       	ldd	r15, Y+2	; 0x02
    33fc:	cc 24       	eor	r12, r12
    33fe:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3400:	88 24       	eor	r8, r8
    3402:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3404:	1e 83       	std	Y+6, r17	; 0x06
    3406:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    3408:	f8 01       	movw	r30, r16
    340a:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    340c:	fc 82       	std	Y+4, r15	; 0x04
    340e:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3410:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3412:	ab 81       	ldd	r26, Y+3	; 0x03
    3414:	bc 81       	ldd	r27, Y+4	; 0x04
    3416:	2d 91       	ld	r18, X+
    3418:	bc 83       	std	Y+4, r27	; 0x04
    341a:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    341c:	4f 5f       	subi	r20, 0xFF	; 255
    341e:	5f 4f       	sbci	r21, 0xFF	; 255
    3420:	82 2f       	mov	r24, r18
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	80 78       	andi	r24, 0x80	; 128
    3426:	90 70       	andi	r25, 0x00	; 0
    3428:	bc 01       	movw	r22, r24
    342a:	04 2e       	mov	r0, r20
    342c:	02 c0       	rjmp	.+4      	; 0x3432 <sysex_encode+0x86>
    342e:	75 95       	asr	r23
    3430:	67 95       	ror	r22
    3432:	0a 94       	dec	r0
    3434:	e2 f7       	brpl	.-8      	; 0x342e <sysex_encode+0x82>
    3436:	ad 81       	ldd	r26, Y+5	; 0x05
    3438:	be 81       	ldd	r27, Y+6	; 0x06
    343a:	8c 91       	ld	r24, X
    343c:	86 2b       	or	r24, r22
    343e:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3440:	2f 77       	andi	r18, 0x7F	; 127
    3442:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3444:	47 30       	cpi	r20, 0x07	; 7
    3446:	51 05       	cpc	r21, r1
    3448:	21 f7       	brne	.-56     	; 0x3412 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    344a:	08 94       	sec
    344c:	c1 1c       	adc	r12, r1
    344e:	d1 1c       	adc	r13, r1
    3450:	08 5f       	subi	r16, 0xF8	; 248
    3452:	1f 4f       	sbci	r17, 0xFF	; 255
    3454:	e7 e0       	ldi	r30, 0x07	; 7
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	ee 0e       	add	r14, r30
    345a:	ff 1e       	adc	r15, r31
    345c:	ca 14       	cp	r12, r10
    345e:	db 04       	cpc	r13, r11
    3460:	89 f6       	brne	.-94     	; 0x3404 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3462:	c3 01       	movw	r24, r6
    3464:	67 e0       	ldi	r22, 0x07	; 7
    3466:	70 e0       	ldi	r23, 0x00	; 0
    3468:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodhi4>
   if (remainder) {
    346c:	88 23       	and	r24, r24
    346e:	d9 f1       	breq	.+118    	; 0x34e6 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3470:	82 01       	movw	r16, r4
    3472:	00 0f       	add	r16, r16
    3474:	11 1f       	adc	r17, r17
    3476:	00 0f       	add	r16, r16
    3478:	11 1f       	adc	r17, r17
    347a:	00 0f       	add	r16, r16
    347c:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    347e:	78 01       	movw	r14, r16
    3480:	e4 18       	sub	r14, r4
    3482:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3484:	d1 01       	movw	r26, r2
    3486:	a0 0f       	add	r26, r16
    3488:	b1 1f       	adc	r27, r17
    348a:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    348c:	68 2f       	mov	r22, r24
    348e:	70 e0       	ldi	r23, 0x00	; 0
    3490:	61 15       	cp	r22, r1
    3492:	71 05       	cpc	r23, r1
    3494:	19 f1       	breq	.+70     	; 0x34dc <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3496:	e9 81       	ldd	r30, Y+1	; 0x01
    3498:	fa 81       	ldd	r31, Y+2	; 0x02
    349a:	ee 0e       	add	r14, r30
    349c:	ff 1e       	adc	r15, r31
    349e:	c8 01       	movw	r24, r16
    34a0:	01 96       	adiw	r24, 0x01	; 1
    34a2:	28 0e       	add	r2, r24
    34a4:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    34aa:	f7 01       	movw	r30, r14
    34ac:	41 91       	ld	r20, Z+
    34ae:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    34b0:	2f 5f       	subi	r18, 0xFF	; 255
    34b2:	3f 4f       	sbci	r19, 0xFF	; 255
    34b4:	84 2f       	mov	r24, r20
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	80 78       	andi	r24, 0x80	; 128
    34ba:	90 70       	andi	r25, 0x00	; 0
    34bc:	02 2e       	mov	r0, r18
    34be:	02 c0       	rjmp	.+4      	; 0x34c4 <sysex_encode+0x118>
    34c0:	95 95       	asr	r25
    34c2:	87 95       	ror	r24
    34c4:	0a 94       	dec	r0
    34c6:	e2 f7       	brpl	.-8      	; 0x34c0 <sysex_encode+0x114>
    34c8:	9c 91       	ld	r25, X
    34ca:	89 2b       	or	r24, r25
    34cc:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    34ce:	4f 77       	andi	r20, 0x7F	; 127
    34d0:	f1 01       	movw	r30, r2
    34d2:	41 93       	st	Z+, r20
    34d4:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    34d6:	26 17       	cp	r18, r22
    34d8:	37 07       	cpc	r19, r23
    34da:	38 f3       	brcs	.-50     	; 0x34aa <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    34dc:	c8 01       	movw	r24, r16
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	86 0f       	add	r24, r22
    34e2:	97 1f       	adc	r25, r23
    34e4:	07 c0       	rjmp	.+14     	; 0x34f4 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    34e6:	c2 01       	movw	r24, r4
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	88 0f       	add	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
   }
}
    34f4:	26 96       	adiw	r28, 0x06	; 6
    34f6:	0f b6       	in	r0, 0x3f	; 63
    34f8:	f8 94       	cli
    34fa:	de bf       	out	0x3e, r29	; 62
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	cd bf       	out	0x3d, r28	; 61
    3500:	df 91       	pop	r29
    3502:	cf 91       	pop	r28
    3504:	1f 91       	pop	r17
    3506:	0f 91       	pop	r16
    3508:	ff 90       	pop	r15
    350a:	ef 90       	pop	r14
    350c:	df 90       	pop	r13
    350e:	cf 90       	pop	r12
    3510:	bf 90       	pop	r11
    3512:	af 90       	pop	r10
    3514:	9f 90       	pop	r9
    3516:	8f 90       	pop	r8
    3518:	7f 90       	pop	r7
    351a:	6f 90       	pop	r6
    351c:	5f 90       	pop	r5
    351e:	4f 90       	pop	r4
    3520:	3f 90       	pop	r3
    3522:	2f 90       	pop	r2
    3524:	08 95       	ret

00003526 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3526:	6f 92       	push	r6
    3528:	7f 92       	push	r7
    352a:	8f 92       	push	r8
    352c:	9f 92       	push	r9
    352e:	af 92       	push	r10
    3530:	bf 92       	push	r11
    3532:	cf 92       	push	r12
    3534:	df 92       	push	r13
    3536:	ef 92       	push	r14
    3538:	ff 92       	push	r15
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	3c 01       	movw	r6, r24
    3544:	4b 01       	movw	r8, r22
    3546:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3548:	42 30       	cpi	r20, 0x02	; 2
    354a:	51 05       	cpc	r21, r1
    354c:	08 f4       	brcc	.+2      	; 0x3550 <sysex_decode+0x2a>
    354e:	6f c0       	rjmp	.+222    	; 0x362e <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3550:	7a 01       	movw	r14, r20
    3552:	f6 94       	lsr	r15
    3554:	e7 94       	ror	r14
    3556:	f6 94       	lsr	r15
    3558:	e7 94       	ror	r14
    355a:	f6 94       	lsr	r15
    355c:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    355e:	e1 14       	cp	r14, r1
    3560:	f1 04       	cpc	r15, r1
    3562:	29 f1       	breq	.+74     	; 0x35ae <sysex_decode+0x88>
    3564:	eb 01       	movw	r28, r22
    3566:	b3 01       	movw	r22, r6
    3568:	00 e0       	ldi	r16, 0x00	; 0
    356a:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    356c:	cc 24       	eor	r12, r12
    356e:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3570:	de 01       	movw	r26, r28
    3572:	11 96       	adiw	r26, 0x01	; 1
    3574:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3576:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3578:	2d 91       	ld	r18, X+
    357a:	2f 77       	andi	r18, 0x7F	; 127
    357c:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    357e:	4f 5f       	subi	r20, 0xFF	; 255
    3580:	5f 4f       	sbci	r21, 0xFF	; 255
    3582:	88 81       	ld	r24, Y
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	04 2e       	mov	r0, r20
    3588:	02 c0       	rjmp	.+4      	; 0x358e <sysex_decode+0x68>
    358a:	88 0f       	add	r24, r24
    358c:	99 1f       	adc	r25, r25
    358e:	0a 94       	dec	r0
    3590:	e2 f7       	brpl	.-8      	; 0x358a <sysex_decode+0x64>
    3592:	80 78       	andi	r24, 0x80	; 128
    3594:	28 2b       	or	r18, r24
    3596:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3598:	47 30       	cpi	r20, 0x07	; 7
    359a:	51 05       	cpc	r21, r1
    359c:	69 f7       	brne	.-38     	; 0x3578 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    359e:	0f 5f       	subi	r16, 0xFF	; 255
    35a0:	1f 4f       	sbci	r17, 0xFF	; 255
    35a2:	28 96       	adiw	r28, 0x08	; 8
    35a4:	69 5f       	subi	r22, 0xF9	; 249
    35a6:	7f 4f       	sbci	r23, 0xFF	; 255
    35a8:	0e 15       	cp	r16, r14
    35aa:	1f 05       	cpc	r17, r15
    35ac:	09 f7       	brne	.-62     	; 0x3570 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    35ae:	5a 2d       	mov	r21, r10
    35b0:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    35b2:	99 f1       	breq	.+102    	; 0x361a <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    35b4:	e7 01       	movw	r28, r14
    35b6:	cc 0f       	add	r28, r28
    35b8:	dd 1f       	adc	r29, r29
    35ba:	cc 0f       	add	r28, r28
    35bc:	dd 1f       	adc	r29, r29
    35be:	cc 0f       	add	r28, r28
    35c0:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    35c2:	8e 01       	movw	r16, r28
    35c4:	0e 19       	sub	r16, r14
    35c6:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    35c8:	65 2f       	mov	r22, r21
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	61 50       	subi	r22, 0x01	; 1
    35ce:	70 40       	sbci	r23, 0x00	; 0
    35d0:	f9 f0       	breq	.+62     	; 0x3610 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    35d2:	ce 01       	movw	r24, r28
    35d4:	01 96       	adiw	r24, 0x01	; 1
    35d6:	d4 01       	movw	r26, r8
    35d8:	a8 0f       	add	r26, r24
    35da:	b9 1f       	adc	r27, r25
    35dc:	f3 01       	movw	r30, r6
    35de:	e0 0f       	add	r30, r16
    35e0:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    35e6:	c8 0d       	add	r28, r8
    35e8:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    35ea:	4d 91       	ld	r20, X+
    35ec:	4f 77       	andi	r20, 0x7F	; 127
    35ee:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    35f0:	2f 5f       	subi	r18, 0xFF	; 255
    35f2:	3f 4f       	sbci	r19, 0xFF	; 255
    35f4:	88 81       	ld	r24, Y
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	02 2e       	mov	r0, r18
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <sysex_decode+0xda>
    35fc:	88 0f       	add	r24, r24
    35fe:	99 1f       	adc	r25, r25
    3600:	0a 94       	dec	r0
    3602:	e2 f7       	brpl	.-8      	; 0x35fc <sysex_decode+0xd6>
    3604:	80 78       	andi	r24, 0x80	; 128
    3606:	48 2b       	or	r20, r24
    3608:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    360a:	26 17       	cp	r18, r22
    360c:	37 07       	cpc	r19, r23
    360e:	68 f3       	brcs	.-38     	; 0x35ea <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3610:	c8 01       	movw	r24, r16
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	85 0f       	add	r24, r21
    3616:	91 1d       	adc	r25, r1
    3618:	0c c0       	rjmp	.+24     	; 0x3632 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    361a:	c7 01       	movw	r24, r14
    361c:	88 0f       	add	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	88 0f       	add	r24, r24
    3622:	99 1f       	adc	r25, r25
    3624:	88 0f       	add	r24, r24
    3626:	99 1f       	adc	r25, r25
    3628:	8e 19       	sub	r24, r14
    362a:	9f 09       	sbc	r25, r15
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	ff 90       	pop	r15
    363c:	ef 90       	pop	r14
    363e:	df 90       	pop	r13
    3640:	cf 90       	pop	r12
    3642:	bf 90       	pop	r11
    3644:	af 90       	pop	r10
    3646:	9f 90       	pop	r9
    3648:	8f 90       	pop	r8
    364a:	7f 90       	pop	r7
    364c:	6f 90       	pop	r6
    364e:	08 95       	ret

00003650 <__mulsi3>:
    3650:	62 9f       	mul	r22, r18
    3652:	d0 01       	movw	r26, r0
    3654:	73 9f       	mul	r23, r19
    3656:	f0 01       	movw	r30, r0
    3658:	82 9f       	mul	r24, r18
    365a:	e0 0d       	add	r30, r0
    365c:	f1 1d       	adc	r31, r1
    365e:	64 9f       	mul	r22, r20
    3660:	e0 0d       	add	r30, r0
    3662:	f1 1d       	adc	r31, r1
    3664:	92 9f       	mul	r25, r18
    3666:	f0 0d       	add	r31, r0
    3668:	83 9f       	mul	r24, r19
    366a:	f0 0d       	add	r31, r0
    366c:	74 9f       	mul	r23, r20
    366e:	f0 0d       	add	r31, r0
    3670:	65 9f       	mul	r22, r21
    3672:	f0 0d       	add	r31, r0
    3674:	99 27       	eor	r25, r25
    3676:	72 9f       	mul	r23, r18
    3678:	b0 0d       	add	r27, r0
    367a:	e1 1d       	adc	r30, r1
    367c:	f9 1f       	adc	r31, r25
    367e:	63 9f       	mul	r22, r19
    3680:	b0 0d       	add	r27, r0
    3682:	e1 1d       	adc	r30, r1
    3684:	f9 1f       	adc	r31, r25
    3686:	bd 01       	movw	r22, r26
    3688:	cf 01       	movw	r24, r30
    368a:	11 24       	eor	r1, r1
    368c:	08 95       	ret

0000368e <__udivmodhi4>:
    368e:	aa 1b       	sub	r26, r26
    3690:	bb 1b       	sub	r27, r27
    3692:	51 e1       	ldi	r21, 0x11	; 17
    3694:	07 c0       	rjmp	.+14     	; 0x36a4 <__udivmodhi4_ep>

00003696 <__udivmodhi4_loop>:
    3696:	aa 1f       	adc	r26, r26
    3698:	bb 1f       	adc	r27, r27
    369a:	a6 17       	cp	r26, r22
    369c:	b7 07       	cpc	r27, r23
    369e:	10 f0       	brcs	.+4      	; 0x36a4 <__udivmodhi4_ep>
    36a0:	a6 1b       	sub	r26, r22
    36a2:	b7 0b       	sbc	r27, r23

000036a4 <__udivmodhi4_ep>:
    36a4:	88 1f       	adc	r24, r24
    36a6:	99 1f       	adc	r25, r25
    36a8:	5a 95       	dec	r21
    36aa:	a9 f7       	brne	.-22     	; 0x3696 <__udivmodhi4_loop>
    36ac:	80 95       	com	r24
    36ae:	90 95       	com	r25
    36b0:	bc 01       	movw	r22, r24
    36b2:	cd 01       	movw	r24, r26
    36b4:	08 95       	ret

000036b6 <__divmodhi4>:
    36b6:	97 fb       	bst	r25, 7
    36b8:	09 2e       	mov	r0, r25
    36ba:	07 26       	eor	r0, r23
    36bc:	0a d0       	rcall	.+20     	; 0x36d2 <__divmodhi4_neg1>
    36be:	77 fd       	sbrc	r23, 7
    36c0:	04 d0       	rcall	.+8      	; 0x36ca <__divmodhi4_neg2>
    36c2:	e5 df       	rcall	.-54     	; 0x368e <__udivmodhi4>
    36c4:	06 d0       	rcall	.+12     	; 0x36d2 <__divmodhi4_neg1>
    36c6:	00 20       	and	r0, r0
    36c8:	1a f4       	brpl	.+6      	; 0x36d0 <__divmodhi4_exit>

000036ca <__divmodhi4_neg2>:
    36ca:	70 95       	com	r23
    36cc:	61 95       	neg	r22
    36ce:	7f 4f       	sbci	r23, 0xFF	; 255

000036d0 <__divmodhi4_exit>:
    36d0:	08 95       	ret

000036d2 <__divmodhi4_neg1>:
    36d2:	f6 f7       	brtc	.-4      	; 0x36d0 <__divmodhi4_exit>
    36d4:	90 95       	com	r25
    36d6:	81 95       	neg	r24
    36d8:	9f 4f       	sbci	r25, 0xFF	; 255
    36da:	08 95       	ret

000036dc <memcpy>:
    36dc:	fb 01       	movw	r30, r22
    36de:	dc 01       	movw	r26, r24
    36e0:	02 c0       	rjmp	.+4      	; 0x36e6 <memcpy+0xa>
    36e2:	01 90       	ld	r0, Z+
    36e4:	0d 92       	st	X+, r0
    36e6:	41 50       	subi	r20, 0x01	; 1
    36e8:	50 40       	sbci	r21, 0x00	; 0
    36ea:	d8 f7       	brcc	.-10     	; 0x36e2 <memcpy+0x6>
    36ec:	08 95       	ret

000036ee <memmove>:
    36ee:	68 17       	cp	r22, r24
    36f0:	79 07       	cpc	r23, r25
    36f2:	68 f4       	brcc	.+26     	; 0x370e <memmove+0x20>
    36f4:	fb 01       	movw	r30, r22
    36f6:	dc 01       	movw	r26, r24
    36f8:	e4 0f       	add	r30, r20
    36fa:	f5 1f       	adc	r31, r21
    36fc:	a4 0f       	add	r26, r20
    36fe:	b5 1f       	adc	r27, r21
    3700:	02 c0       	rjmp	.+4      	; 0x3706 <memmove+0x18>
    3702:	02 90       	ld	r0, -Z
    3704:	0e 92       	st	-X, r0
    3706:	41 50       	subi	r20, 0x01	; 1
    3708:	50 40       	sbci	r21, 0x00	; 0
    370a:	d8 f7       	brcc	.-10     	; 0x3702 <memmove+0x14>
    370c:	08 95       	ret
    370e:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <memcpy>

00003712 <__eerd_block_m6450a>:
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22

00003716 <__eerd_blraw_m6450a>:
    3716:	fc 01       	movw	r30, r24
    3718:	f9 99       	sbic	0x1f, 1	; 31
    371a:	fe cf       	rjmp	.-4      	; 0x3718 <__eerd_blraw_m6450a+0x2>
    371c:	06 c0       	rjmp	.+12     	; 0x372a <__eerd_blraw_m6450a+0x14>
    371e:	f2 bd       	out	0x22, r31	; 34
    3720:	e1 bd       	out	0x21, r30	; 33
    3722:	f8 9a       	sbi	0x1f, 0	; 31
    3724:	31 96       	adiw	r30, 0x01	; 1
    3726:	00 b4       	in	r0, 0x20	; 32
    3728:	0d 92       	st	X+, r0
    372a:	41 50       	subi	r20, 0x01	; 1
    372c:	50 40       	sbci	r21, 0x00	; 0
    372e:	b8 f7       	brcc	.-18     	; 0x371e <__eerd_blraw_m6450a+0x8>
    3730:	08 95       	ret

00003732 <__eerd_word_m6450a>:
    3732:	a8 e1       	ldi	r26, 0x18	; 24
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	42 e0       	ldi	r20, 0x02	; 2
    3738:	50 e0       	ldi	r21, 0x00	; 0
    373a:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <__eerd_blraw_m6450a>

0000373e <__eeupd_block_m6450a>:
    373e:	dc 01       	movw	r26, r24
    3740:	a4 0f       	add	r26, r20
    3742:	b5 1f       	adc	r27, r21
    3744:	41 50       	subi	r20, 0x01	; 1
    3746:	50 40       	sbci	r21, 0x00	; 0
    3748:	48 f0       	brcs	.+18     	; 0x375c <__eeupd_block_m6450a+0x1e>
    374a:	cb 01       	movw	r24, r22
    374c:	84 0f       	add	r24, r20
    374e:	95 1f       	adc	r25, r21
    3750:	2e 91       	ld	r18, -X
    3752:	0e 94 b0 1b 	call	0x3760	; 0x3760 <__eeupd_r18_m6450a>
    3756:	41 50       	subi	r20, 0x01	; 1
    3758:	50 40       	sbci	r21, 0x00	; 0
    375a:	d0 f7       	brcc	.-12     	; 0x3750 <__eeupd_block_m6450a+0x12>
    375c:	08 95       	ret

0000375e <__eeupd_byte_m6450a>:
    375e:	26 2f       	mov	r18, r22

00003760 <__eeupd_r18_m6450a>:
    3760:	f9 99       	sbic	0x1f, 1	; 31
    3762:	fe cf       	rjmp	.-4      	; 0x3760 <__eeupd_r18_m6450a>
    3764:	92 bd       	out	0x22, r25	; 34
    3766:	81 bd       	out	0x21, r24	; 33
    3768:	f8 9a       	sbi	0x1f, 0	; 31
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	00 b4       	in	r0, 0x20	; 32
    376e:	02 16       	cp	r0, r18
    3770:	31 f0       	breq	.+12     	; 0x377e <__eeupd_r18_m6450a+0x1e>
    3772:	20 bd       	out	0x20, r18	; 32
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	fa 9a       	sbi	0x1f, 2	; 31
    377a:	f9 9a       	sbi	0x1f, 1	; 31
    377c:	0f be       	out	0x3f, r0	; 63
    377e:	08 95       	ret

00003780 <__eeupd_word_m6450a>:
    3780:	01 96       	adiw	r24, 0x01	; 1
    3782:	27 2f       	mov	r18, r23
    3784:	0e 94 b0 1b 	call	0x3760	; 0x3760 <__eeupd_r18_m6450a>
    3788:	0c 94 af 1b 	jmp	0x375e	; 0x375e <__eeupd_byte_m6450a>

0000378c <_exit>:
    378c:	f8 94       	cli

0000378e <__stop_program>:
    378e:	ff cf       	rjmp	.-2      	; 0x378e <__stop_program>
