
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b4  00800100  00003fb2  00004066  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fb2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000220  008002b4  008002b4  0000421a  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  0000421a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00004890  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00005484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000003b8  00000000  00000000  000057c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000070fd  00000000  00000000  00005b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019e5  00000000  00000000  0000cc7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024c5  00000000  00000000  0000e662  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e20  00000000  00000000  00010b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a4d  00000000  00000000  00011948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002fe1  00000000  00000000  00013395  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  00016376  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 89 03 	jmp	0x712	; 0x712 <__vector_9>
      28:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e2 eb       	ldi	r30, 0xB2	; 178
      78:	ff e3       	ldi	r31, 0x3F	; 63
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a4 eb       	ldi	r26, 0xB4	; 180
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a4 3d       	cpi	r26, 0xD4	; 212
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 da 04 	call	0x9b4	; 0x9b4 <main>
      9a:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:
//#include "display.h"

struct arp arp;


void update_arp_sequence(void) {
     146:	4f 92       	push	r4
     148:	5f 92       	push	r5
     14a:	6f 92       	push	r6
     14c:	7f 92       	push	r7
     14e:	8f 92       	push	r8
     150:	9f 92       	push	r9
     152:	af 92       	push	r10
     154:	bf 92       	push	r11
     156:	cf 92       	push	r12
     158:	df 92       	push	r13
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
	


	arp.step_number = gate_buffer*(arp.range + 1);
     166:	90 91 88 03 	lds	r25, 0x0388
     16a:	9f 5f       	subi	r25, 0xFF	; 255
     16c:	80 91 b4 02 	lds	r24, 0x02B4
     170:	98 9f       	mul	r25, r24
     172:	80 2d       	mov	r24, r0
     174:	11 24       	eor	r1, r1
     176:	80 93 89 03 	sts	0x0389, r24
     17a:	88 24       	eor	r8, r8
     17c:	99 24       	eor	r9, r9
	//arp.step_position = 0; //would use this if note retrigger feature was added
	
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
     17e:	66 24       	eor	r6, r6
     180:	77 24       	eor	r7, r7


	arp.step_number = gate_buffer*(arp.range + 1);
	//arp.step_position = 0; //would use this if note retrigger feature was added
	
	uint8_t step = 0;
     182:	ff 24       	eor	r15, r15
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     184:	44 24       	eor	r4, r4
     186:	55 24       	eor	r5, r5
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     188:	0f 2e       	mov	r0, r31
     18a:	f4 e9       	ldi	r31, 0x94	; 148
     18c:	cf 2e       	mov	r12, r31
     18e:	f3 e0       	ldi	r31, 0x03	; 3
     190:	df 2e       	mov	r13, r31
     192:	f0 2d       	mov	r31, r0
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
						
						root_note += 12;
						
					}
					arp.sequence[step++].note = root_note - (range*12);
     194:	0f 2e       	mov	r0, r31
     196:	f8 e8       	ldi	r31, 0x88	; 136
     198:	af 2e       	mov	r10, r31
     19a:	f3 e0       	ldi	r31, 0x03	; 3
     19c:	bf 2e       	mov	r11, r31
     19e:	f0 2d       	mov	r31, r0
     1a0:	4a c0       	rjmp	.+148    	; 0x236 <update_arp_sequence+0xf0>
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
     1a2:	81 50       	subi	r24, 0x01	; 1
     1a4:	80 1b       	sub	r24, r16
     1a6:	0e 94 85 01 	call	0x30a	; 0x30a <get_indexed_note>
     1aa:	28 2f       	mov	r18, r24
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     1ac:	f6 01       	movw	r30, r12
     1ae:	80 81       	ld	r24, Z
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	41 f0       	breq	.+16     	; 0x1c4 <update_arp_sequence+0x7e>
     1b4:	83 30       	cpi	r24, 0x03	; 3
     1b6:	18 f4       	brcc	.+6      	; 0x1be <update_arp_sequence+0x78>
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	39 f5       	brne	.+78     	; 0x20a <update_arp_sequence+0xc4>
     1bc:	0a c0       	rjmp	.+20     	; 0x1d2 <update_arp_sequence+0x8c>
     1be:	85 30       	cpi	r24, 0x05	; 5
     1c0:	20 f5       	brcc	.+72     	; 0x20a <update_arp_sequence+0xc4>
     1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <update_arp_sequence+0x8c>
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     1c4:	ce 01       	movw	r24, r28
     1c6:	82 0f       	add	r24, r18
     1c8:	91 1d       	adc	r25, r1
     1ca:	88 30       	cpi	r24, 0x08	; 8
     1cc:	91 05       	cpc	r25, r1
     1ce:	64 f0       	brlt	.+24     	; 0x1e8 <update_arp_sequence+0xa2>
     1d0:	12 c0       	rjmp	.+36     	; 0x1f6 <update_arp_sequence+0xb0>
			switch(arp.mode) {
				
				case UP:
				case UP_DOWN:
				case RANDOM:
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1d2:	8f 2d       	mov	r24, r15
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	8a 0d       	add	r24, r10
     1dc:	9b 1d       	adc	r25, r11
     1de:	2e 19       	sub	r18, r14
     1e0:	fc 01       	movw	r30, r24
     1e2:	25 87       	std	Z+13, r18	; 0x0d
     1e4:	f3 94       	inc	r15
				
					break;
     1e6:	11 c0       	rjmp	.+34     	; 0x20a <update_arp_sequence+0xc4>
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
						
						root_note += 12;
     1e8:	24 5f       	subi	r18, 0xF4	; 244
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     1ea:	ce 01       	movw	r24, r28
     1ec:	82 0f       	add	r24, r18
     1ee:	91 1d       	adc	r25, r1
     1f0:	88 30       	cpi	r24, 0x08	; 8
     1f2:	91 05       	cpc	r25, r1
     1f4:	cc f3       	brlt	.-14     	; 0x1e8 <update_arp_sequence+0xa2>
						
						root_note += 12;
						
					}
					arp.sequence[step++].note = root_note - (range*12);
     1f6:	8f 2d       	mov	r24, r15
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	8a 0d       	add	r24, r10
     200:	9b 1d       	adc	r25, r11
     202:	2e 0d       	add	r18, r14
     204:	fc 01       	movw	r30, r24
     206:	25 87       	std	Z+13, r18	; 0x0d
     208:	f3 94       	inc	r15
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     20a:	0f 5f       	subi	r16, 0xFF	; 255
     20c:	1f 4f       	sbci	r17, 0xFF	; 255
     20e:	80 91 b4 02 	lds	r24, 0x02B4
     212:	28 2f       	mov	r18, r24
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	02 17       	cp	r16, r18
     218:	13 07       	cpc	r17, r19
     21a:	1c f2       	brlt	.-122    	; 0x1a2 <update_arp_sequence+0x5c>
	//arp.step_position = 0; //would use this if note retrigger feature was added
	
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
     21c:	08 94       	sec
     21e:	61 1c       	adc	r6, r1
     220:	71 1c       	adc	r7, r1
     222:	84 ef       	ldi	r24, 0xF4	; 244
     224:	9f ef       	ldi	r25, 0xFF	; 255
     226:	88 0e       	add	r8, r24
     228:	99 1e       	adc	r9, r25
     22a:	f5 01       	movw	r30, r10
     22c:	80 81       	ld	r24, Z
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	86 15       	cp	r24, r6
     232:	97 05       	cpc	r25, r7
     234:	44 f0       	brlt	.+16     	; 0x246 <update_arp_sequence+0x100>
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     236:	80 91 b4 02 	lds	r24, 0x02B4
     23a:	88 23       	and	r24, r24
     23c:	79 f3       	breq	.-34     	; 0x21c <update_arp_sequence+0xd6>
//#include "display.h"

struct arp arp;


void update_arp_sequence(void) {
     23e:	e8 2c       	mov	r14, r8
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     240:	e4 01       	movw	r28, r8
     242:	82 01       	movw	r16, r4
     244:	ae cf       	rjmp	.-164    	; 0x1a2 <update_arp_sequence+0x5c>
		//value_to_display = step;

	}
	
	
}
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	1f 91       	pop	r17
     24c:	0f 91       	pop	r16
     24e:	ff 90       	pop	r15
     250:	ef 90       	pop	r14
     252:	df 90       	pop	r13
     254:	cf 90       	pop	r12
     256:	bf 90       	pop	r11
     258:	af 90       	pop	r10
     25a:	9f 90       	pop	r9
     25c:	8f 90       	pop	r8
     25e:	7f 90       	pop	r7
     260:	6f 90       	pop	r6
     262:	5f 90       	pop	r5
     264:	4f 90       	pop	r4
     266:	08 95       	ret

00000268 <step_arp_note>:

void step_arp_note(void) { //updates arp note according to step position in sequence
	
	arp.current_note = arp.sequence[arp.step_position].note;
     268:	90 91 8a 03 	lds	r25, 0x038A
     26c:	a9 2f       	mov	r26, r25
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	e8 e8       	ldi	r30, 0x88	; 136
     272:	f3 e0       	ldi	r31, 0x03	; 3
     274:	aa 0f       	add	r26, r26
     276:	bb 1f       	adc	r27, r27
     278:	ae 0f       	add	r26, r30
     27a:	bf 1f       	adc	r27, r31
     27c:	1d 96       	adiw	r26, 0x0d	; 13
     27e:	8c 91       	ld	r24, X
     280:	1d 97       	sbiw	r26, 0x0d	; 13
     282:	85 83       	std	Z+5, r24	; 0x05
	arp.previous_note = arp.current_note;
     284:	84 83       	std	Z+4, r24	; 0x04
	
	switch (arp.mode) {
     286:	84 85       	ldd	r24, Z+12	; 0x0c
     288:	83 30       	cpi	r24, 0x03	; 3
     28a:	19 f0       	breq	.+6      	; 0x292 <step_arp_note+0x2a>
     28c:	84 30       	cpi	r24, 0x04	; 4
     28e:	99 f5       	brne	.+102    	; 0x2f6 <step_arp_note+0x8e>
     290:	28 c0       	rjmp	.+80     	; 0x2e2 <step_arp_note+0x7a>
		
		case UP_DOWN:
			
			if (arp.direction == UP) {
     292:	80 91 8b 03 	lds	r24, 0x038B
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	91 f4       	brne	.+36     	; 0x2be <step_arp_note+0x56>
				arp.step_position++;	
     29a:	9f 5f       	subi	r25, 0xFF	; 255
     29c:	90 93 8a 03 	sts	0x038A, r25
				
				if (arp.step_position >= arp.step_number) {
     2a0:	80 91 89 03 	lds	r24, 0x0389
     2a4:	98 17       	cp	r25, r24
     2a6:	80 f1       	brcs	.+96     	; 0x308 <step_arp_note+0xa0>
					arp.step_position = arp.step_number == 1 ? 0 : arp.step_number - 2; //Omar handles edge case here
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	11 f0       	breq	.+4      	; 0x2b0 <step_arp_note+0x48>
     2ac:	82 50       	subi	r24, 0x02	; 2
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <step_arp_note+0x4a>
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	80 93 8a 03 	sts	0x038A, r24
					arp.direction = DOWN;
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	80 93 8b 03 	sts	0x038B, r24
     2bc:	08 95       	ret
				}				
				
			} else {
				if (arp.step_position <= 0) {
     2be:	99 23       	and	r25, r25
     2c0:	61 f4       	brne	.+24     	; 0x2da <step_arp_note+0x72>
					
					arp.step_position = arp.step_number == 1 ? 0 : 1; //Omar handles edge case here
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	90 91 89 03 	lds	r25, 0x0389
     2c8:	91 30       	cpi	r25, 0x01	; 1
     2ca:	09 f4       	brne	.+2      	; 0x2ce <step_arp_note+0x66>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	80 93 8a 03 	sts	0x038A, r24
					arp.direction = UP;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 8b 03 	sts	0x038B, r24
     2d8:	08 95       	ret
					
				} else {
					arp.step_position--;
     2da:	91 50       	subi	r25, 0x01	; 1
     2dc:	90 93 8a 03 	sts	0x038A, r25
     2e0:	08 95       	ret
			
			break;
			
		case RANDOM:
		
			arp.step_position = random() % arp.step_number; //maybe >> random() result to generate 8 bit value before modulo?
     2e2:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <random>
     2e6:	60 91 89 03 	lds	r22, 0x0389
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__divmodhi4>
     2f0:	80 93 8a 03 	sts	0x038A, r24
		
			break;
     2f4:	08 95       	ret
			
		default:
		
			if (++arp.step_position >= arp.step_number) arp.step_position  = 0;//reset step position when at end of sequence 
     2f6:	9f 5f       	subi	r25, 0xFF	; 255
     2f8:	90 93 8a 03 	sts	0x038A, r25
     2fc:	80 91 89 03 	lds	r24, 0x0389
     300:	98 17       	cp	r25, r24
     302:	10 f0       	brcs	.+4      	; 0x308 <step_arp_note+0xa0>
     304:	10 92 8a 03 	sts	0x038A, r1
     308:	08 95       	ret

0000030a <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     30a:	e8 2f       	mov	r30, r24
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	ee 0f       	add	r30, r30
     310:	ff 1f       	adc	r31, r31
     312:	e8 54       	subi	r30, 0x48	; 72
     314:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     316:	80 81       	ld	r24, Z
     318:	08 95       	ret

0000031a <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.mode) {
     31a:	80 91 94 03 	lds	r24, 0x0394
     31e:	88 23       	and	r24, r24
     320:	19 f0       	breq	.+6      	; 0x328 <get_current_note+0xe>
		
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     322:	80 91 8d 03 	lds	r24, 0x038D
     326:	08 95       	ret
		

		
	} else {
		
		note = current_note;
     328:	80 91 b5 02 	lds	r24, 0x02B5
				
	}
	return note;
	
}
     32c:	08 95       	ret

0000032e <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	18 2f       	mov	r17, r24
     338:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     33a:	8a eb       	ldi	r24, 0xBA	; 186
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	ec 01       	movw	r28, r24
     340:	22 97       	sbiw	r28, 0x02	; 2
     342:	be 01       	movw	r22, r28
     344:	4e e0       	ldi	r20, 0x0E	; 14
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     34c:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     34e:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     350:	10 93 b5 02 	sts	0x02B5, r17
	
} 
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	08 95       	ret

0000035e <remove_note>:
void remove_note(uint8_t note){
     35e:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     360:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     364:	c8 17       	cp	r28, r24
     366:	41 f0       	breq	.+16     	; 0x378 <remove_note+0x1a>
     368:	ea eb       	ldi	r30, 0xBA	; 186
     36a:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     36c:	41 e0       	ldi	r20, 0x01	; 1
     36e:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     370:	90 81       	ld	r25, Z
     372:	98 17       	cp	r25, r24
     374:	59 f4       	brne	.+22     	; 0x38c <remove_note+0x2e>
     376:	02 c0       	rjmp	.+4      	; 0x37c <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     37c:	fa 01       	movw	r30, r20
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	e8 54       	subi	r30, 0x48	; 72
     384:	fe 4f       	sbci	r31, 0xFE	; 254
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	80 83       	st	Z, r24
			free_slot = i;
			break;
     38a:	07 c0       	rjmp	.+14     	; 0x39a <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     38c:	4f 5f       	subi	r20, 0xFF	; 255
     38e:	5f 4f       	sbci	r21, 0xFF	; 255
     390:	32 96       	adiw	r30, 0x02	; 2
     392:	48 30       	cpi	r20, 0x08	; 8
     394:	51 05       	cpc	r21, r1
     396:	61 f7       	brne	.-40     	; 0x370 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     398:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	ca 01       	movw	r24, r20
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	bc 01       	movw	r22, r24
     3a4:	66 54       	subi	r22, 0x46	; 70
     3a6:	7e 4f       	sbci	r23, 0xFE	; 254
     3a8:	40 95       	com	r20
     3aa:	50 95       	com	r21
     3ac:	48 5f       	subi	r20, 0xF8	; 248
     3ae:	5f 4f       	sbci	r21, 0xFF	; 255
     3b0:	44 0f       	add	r20, r20
     3b2:	55 1f       	adc	r21, r21
     3b4:	88 54       	subi	r24, 0x48	; 72
     3b6:	9e 4f       	sbci	r25, 0xFE	; 254
     3b8:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <memmove>
	note_pool[7].note = EMPTY;	
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     3c2:	80 91 b8 01 	lds	r24, 0x01B8
     3c6:	8f 3f       	cpi	r24, 0xFF	; 255
     3c8:	19 f4       	brne	.+6      	; 0x3d0 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     3ca:	c0 93 b5 02 	sts	0x02B5, r28
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     3d0:	80 93 b5 02 	sts	0x02B5, r24

	}	
	
}
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <setup_system_clock>:
struct clock lfo_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     3d8:	8d e0       	ldi	r24, 0x0D	; 13
     3da:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     3e4:	08 95       	ret

000003e6 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     3e6:	90 93 89 00 	sts	0x0089, r25
     3ea:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     3ee:	20 91 84 00 	lds	r18, 0x0084
     3f2:	30 91 85 00 	lds	r19, 0x0085
     3f6:	82 17       	cp	r24, r18
     3f8:	93 07       	cpc	r25, r19
     3fa:	28 f4       	brcc	.+10     	; 0x406 <update_clock_rate+0x20>
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	90 93 85 00 	sts	0x0085, r25
     402:	80 93 84 00 	sts	0x0084, r24
     406:	08 95       	ret

00000408 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     408:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     40a:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     40c:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     40e:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     410:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     412:	8c 91       	ld	r24, X
     414:	87 70       	andi	r24, 0x07	; 7
     416:	82 b9       	out	0x02, r24	; 2
     418:	66 e0       	ldi	r22, 0x06	; 6
     41a:	6a 95       	dec	r22
     41c:	f1 f7       	brne	.-4      	; 0x41a <set_control_voltage+0x12>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     420:	ea ed       	ldi	r30, 0xDA	; 218
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	40 81       	ld	r20, Z
     426:	8c 91       	ld	r24, X
     428:	86 95       	lsr	r24
     42a:	86 95       	lsr	r24
     42c:	86 95       	lsr	r24
     42e:	87 70       	andi	r24, 0x07	; 7
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	b9 01       	movw	r22, r18
     436:	02 c0       	rjmp	.+4      	; 0x43c <set_control_voltage+0x34>
     438:	66 0f       	add	r22, r22
     43a:	77 1f       	adc	r23, r23
     43c:	8a 95       	dec	r24
     43e:	e2 f7       	brpl	.-8      	; 0x438 <set_control_voltage+0x30>
     440:	cb 01       	movw	r24, r22
     442:	84 2b       	or	r24, r20
     444:	80 83       	st	Z, r24
     446:	76 e0       	ldi	r23, 0x06	; 6
     448:	7a 95       	dec	r23
     44a:	f1 f7       	brne	.-4      	; 0x448 <set_control_voltage+0x40>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     44e:	80 81       	ld	r24, Z
     450:	9c 91       	ld	r25, X
     452:	96 95       	lsr	r25
     454:	96 95       	lsr	r25
     456:	96 95       	lsr	r25
     458:	97 70       	andi	r25, 0x07	; 7
     45a:	02 c0       	rjmp	.+4      	; 0x460 <set_control_voltage+0x58>
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	9a 95       	dec	r25
     462:	e2 f7       	brpl	.-8      	; 0x45c <set_control_voltage+0x54>
     464:	20 95       	com	r18
     466:	28 23       	and	r18, r24
     468:	20 83       	st	Z, r18
	
}	
     46a:	08 95       	ret

0000046c <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     46c:	83 b3       	in	r24, 0x13	; 19
     46e:	83 60       	ori	r24, 0x03	; 3
     470:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     472:	8f ef       	ldi	r24, 0xFF	; 255
     474:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     476:	97 b1       	in	r25, 0x07	; 7
     478:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     47a:	e9 ed       	ldi	r30, 0xD9	; 217
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	8f 60       	ori	r24, 0x0F	; 15
     482:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     484:	ea ed       	ldi	r30, 0xDA	; 218
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	80 7f       	andi	r24, 0xF0	; 240
     48c:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     48e:	84 b3       	in	r24, 0x14	; 20
     490:	83 60       	ori	r24, 0x03	; 3
     492:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     494:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     496:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     498:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     49a:	a0 9a       	sbi	0x14, 0	; 20
}
     49c:	08 95       	ret

0000049e <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	2e 97       	sbiw	r28, 0x0e	; 14
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     4b6:	28 e0       	ldi	r18, 0x08	; 8
     4b8:	29 83       	std	Y+1, r18	; 0x01
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	2a 83       	std	Y+2, r18	; 0x02
     4be:	22 e0       	ldi	r18, 0x02	; 2
     4c0:	2b 83       	std	Y+3, r18	; 0x03
     4c2:	24 e0       	ldi	r18, 0x04	; 4
     4c4:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     4c6:	de 01       	movw	r26, r28
     4c8:	15 96       	adiw	r26, 0x05	; 5
     4ca:	e7 ee       	ldi	r30, 0xE7	; 231
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	2a e0       	ldi	r18, 0x0A	; 10
     4d0:	01 90       	ld	r0, Z+
     4d2:	0d 92       	st	X+, r0
     4d4:	21 50       	subi	r18, 0x01	; 1
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     4d8:	2f ef       	ldi	r18, 0xFF	; 255
     4da:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     4dc:	ea ed       	ldi	r30, 0xDA	; 218
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	20 81       	ld	r18, Z
     4e2:	20 61       	ori	r18, 0x10	; 16
     4e4:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     4e6:	20 81       	ld	r18, Z
     4e8:	2f 7e       	andi	r18, 0xEF	; 239
     4ea:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     4ec:	06 2f       	mov	r16, r22
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	de 01       	movw	r26, r28
     4f2:	a0 0f       	add	r26, r16
     4f4:	b1 1f       	adc	r27, r17
     4f6:	11 96       	adiw	r26, 0x01	; 1
     4f8:	2c 91       	ld	r18, X
     4fa:	11 97       	sbiw	r26, 0x01	; 1
     4fc:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     4fe:	20 81       	ld	r18, Z
     500:	20 62       	ori	r18, 0x20	; 32
     502:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     504:	20 81       	ld	r18, Z
     506:	2f 7d       	andi	r18, 0xDF	; 223
     508:	20 83       	st	Z, r18
     50a:	48 2f       	mov	r20, r24
     50c:	59 2f       	mov	r21, r25
     50e:	87 e2       	ldi	r24, 0x27	; 39
     510:	40 31       	cpi	r20, 0x10	; 16
     512:	58 07       	cpc	r21, r24
     514:	10 f0       	brcs	.+4      	; 0x51a <display_dec+0x7c>
     516:	4f e0       	ldi	r20, 0x0F	; 15
     518:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     51a:	ca 01       	movw	r24, r20
     51c:	96 95       	lsr	r25
     51e:	87 95       	ror	r24
     520:	96 95       	lsr	r25
     522:	87 95       	ror	r24
     524:	9a 01       	movw	r18, r20
     526:	36 95       	lsr	r19
     528:	27 95       	ror	r18
     52a:	28 0f       	add	r18, r24
     52c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     52e:	c9 01       	movw	r24, r18
     530:	92 95       	swap	r25
     532:	82 95       	swap	r24
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	89 27       	eor	r24, r25
     538:	9f 70       	andi	r25, 0x0F	; 15
     53a:	89 27       	eor	r24, r25
     53c:	82 0f       	add	r24, r18
     53e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     540:	29 2f       	mov	r18, r25
     542:	33 27       	eor	r19, r19
     544:	82 0f       	add	r24, r18
     546:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     548:	96 95       	lsr	r25
     54a:	87 95       	ror	r24
     54c:	96 95       	lsr	r25
     54e:	87 95       	ror	r24
     550:	96 95       	lsr	r25
     552:	87 95       	ror	r24
	r = number - q2 * 10;
     554:	28 2f       	mov	r18, r24
     556:	22 0f       	add	r18, r18
     558:	32 2f       	mov	r19, r18
     55a:	33 0f       	add	r19, r19
     55c:	33 0f       	add	r19, r19
     55e:	23 0f       	add	r18, r19
     560:	e4 2f       	mov	r30, r20
     562:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	ea 30       	cpi	r30, 0x0A	; 10
     56a:	10 f4       	brcc	.+4      	; 0x570 <display_dec+0xd2>
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	68 0f       	add	r22, r24
     572:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     574:	9b 01       	movw	r18, r22
     576:	36 95       	lsr	r19
     578:	27 95       	ror	r18
     57a:	36 95       	lsr	r19
     57c:	27 95       	ror	r18
     57e:	ab 01       	movw	r20, r22
     580:	56 95       	lsr	r21
     582:	47 95       	ror	r20
     584:	24 0f       	add	r18, r20
     586:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     588:	c9 01       	movw	r24, r18
     58a:	92 95       	swap	r25
     58c:	82 95       	swap	r24
     58e:	8f 70       	andi	r24, 0x0F	; 15
     590:	89 27       	eor	r24, r25
     592:	9f 70       	andi	r25, 0x0F	; 15
     594:	89 27       	eor	r24, r25
     596:	82 0f       	add	r24, r18
     598:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     59a:	29 2f       	mov	r18, r25
     59c:	33 27       	eor	r19, r19
     59e:	82 0f       	add	r24, r18
     5a0:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     5a2:	96 95       	lsr	r25
     5a4:	87 95       	ror	r24
     5a6:	96 95       	lsr	r25
     5a8:	87 95       	ror	r24
     5aa:	96 95       	lsr	r25
     5ac:	87 95       	ror	r24
	r = qa - q3 * 10;
     5ae:	98 2f       	mov	r25, r24
     5b0:	99 0f       	add	r25, r25
     5b2:	29 2f       	mov	r18, r25
     5b4:	22 0f       	add	r18, r18
     5b6:	22 0f       	add	r18, r18
     5b8:	92 0f       	add	r25, r18
     5ba:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	6a 30       	cpi	r22, 0x0A	; 10
     5c0:	08 f4       	brcc	.+2      	; 0x5c4 <display_dec+0x126>
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     5c6:	41 ef       	ldi	r20, 0xF1	; 241
     5c8:	51 e0       	ldi	r21, 0x01	; 1
     5ca:	da 01       	movw	r26, r20
     5cc:	a6 0f       	add	r26, r22
     5ce:	b1 1d       	adc	r27, r1
     5d0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     5d2:	28 2f       	mov	r18, r24
     5d4:	26 95       	lsr	r18
     5d6:	26 95       	lsr	r18
     5d8:	98 2f       	mov	r25, r24
     5da:	96 95       	lsr	r25
     5dc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     5de:	29 2f       	mov	r18, r25
     5e0:	22 95       	swap	r18
     5e2:	2f 70       	andi	r18, 0x0F	; 15
     5e4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     5e6:	96 95       	lsr	r25
     5e8:	96 95       	lsr	r25
     5ea:	96 95       	lsr	r25
	r = qb - q4 * 10;
     5ec:	29 2f       	mov	r18, r25
     5ee:	22 0f       	add	r18, r18
     5f0:	62 2f       	mov	r22, r18
     5f2:	66 0f       	add	r22, r22
     5f4:	66 0f       	add	r22, r22
     5f6:	26 0f       	add	r18, r22
     5f8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     5fa:	da 01       	movw	r26, r20
     5fc:	a8 0f       	add	r26, r24
     5fe:	b1 1d       	adc	r27, r1
     600:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     602:	4e 0f       	add	r20, r30
     604:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     606:	fa 01       	movw	r30, r20
     608:	40 81       	ld	r20, Z
     60a:	40 93 b8 02 	sts	0x02B8, r20
	digit_index[1] = tens_place;
     60e:	30 93 b9 02 	sts	0x02B9, r19
	digit_index[2] = hunds_place;
     612:	20 93 ba 02 	sts	0x02BA, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	8a 30       	cpi	r24, 0x0A	; 10
     61a:	08 f4       	brcc	.+2      	; 0x61e <display_dec+0x180>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     620:	90 93 bb 02 	sts	0x02BB, r25

	cathode_byte = dec[digit_index[place]];
     624:	f8 01       	movw	r30, r16
     626:	e8 54       	subi	r30, 0x48	; 72
     628:	fd 4f       	sbci	r31, 0xFD	; 253
     62a:	80 81       	ld	r24, Z
     62c:	fe 01       	movw	r30, r28
     62e:	e8 0f       	add	r30, r24
     630:	f1 1d       	adc	r31, r1
     632:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     634:	90 91 0b 03 	lds	r25, 0x030B
     638:	92 30       	cpi	r25, 0x02	; 2
     63a:	11 f4       	brne	.+4      	; 0x640 <display_dec+0x1a2>
     63c:	80 62       	ori	r24, 0x20	; 32
     63e:	03 c0       	rjmp	.+6      	; 0x646 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     640:	91 30       	cpi	r25, 0x01	; 1
     642:	09 f4       	brne	.+2      	; 0x646 <display_dec+0x1a8>
     644:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     646:	80 95       	com	r24
     648:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     64a:	ea ed       	ldi	r30, 0xDA	; 218
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	80 61       	ori	r24, 0x10	; 16
     652:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     654:	80 81       	ld	r24, Z
     656:	8f 7e       	andi	r24, 0xEF	; 239
     658:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     65a:	2e 96       	adiw	r28, 0x0e	; 14
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret

00000670 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     670:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     672:	66 23       	and	r22, r22
     674:	69 f4       	brne	.+26     	; 0x690 <update_display+0x20>

		
			
		display_dec(number, place);
     676:	c0 91 bc 02 	lds	r28, 0x02BC
     67a:	6c 2f       	mov	r22, r28
     67c:	0e 94 4f 02 	call	0x49e	; 0x49e <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     680:	8c 2f       	mov	r24, r28
     682:	8f 5f       	subi	r24, 0xFF	; 255
     684:	80 93 bc 02 	sts	0x02BC, r24
     688:	c3 30       	cpi	r28, 0x03	; 3
     68a:	11 f4       	brne	.+4      	; 0x690 <update_display+0x20>
		{
			place = 0;
     68c:	10 92 bc 02 	sts	0x02BC, r1
		
		
	}
	
	
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	0f 92       	push	r0
     69c:	11 24       	eor	r1, r1
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	ef 93       	push	r30
     6a4:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     6a6:	80 91 80 03 	lds	r24, 0x0380
     6aa:	81 50       	subi	r24, 0x01	; 1
     6ac:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     6ae:	80 91 81 03 	lds	r24, 0x0381
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <__vector_10+0x4a>
		count_finished = FALSE;
     6b6:	10 92 7e 03 	sts	0x037E, r1
		no_overflow = TRUE;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     6c0:	80 93 81 03 	sts	0x0381, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     6c4:	e1 e8       	ldi	r30, 0x81	; 129
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	90 91 7f 03 	lds	r25, 0x037F
     6ce:	89 2b       	or	r24, r25
     6d0:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     6d2:	ef e6       	ldi	r30, 0x6F	; 111
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	81 60       	ori	r24, 0x01	; 1
     6da:	80 83       	st	Z, r24
     6dc:	11 c0       	rjmp	.+34     	; 0x700 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     6de:	e4 e8       	ldi	r30, 0x84	; 132
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	91 81       	ldd	r25, Z+1	; 0x01
     6e6:	90 93 7d 03 	sts	0x037D, r25
     6ea:	80 93 7c 03 	sts	0x037C, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     6ee:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 7e 03 	sts	0x037E, r24
		period_counter = 0;
     6f8:	10 92 81 03 	sts	0x0381, r1
		TCNT1 = 0; //reset timer/counter 1
     6fc:	11 82       	std	Z+1, r1	; 0x01
     6fe:	10 82       	st	Z, r1
	}
	
	
	
	
}
     700:	ff 91       	pop	r31
     702:	ef 91       	pop	r30
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	0f 90       	pop	r0
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	0f 90       	pop	r0
     70e:	1f 90       	pop	r1
     710:	18 95       	reti

00000712 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     712:	1f 92       	push	r1
     714:	0f 92       	push	r0
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	0f 92       	push	r0
     71a:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     71c:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	2f 93       	push	r18
     736:	3f 93       	push	r19
     738:	4f 93       	push	r20
     73a:	5f 93       	push	r21
     73c:	6f 93       	push	r22
     73e:	7f 93       	push	r23
     740:	8f 93       	push	r24
     742:	9f 93       	push	r25
     744:	af 93       	push	r26
     746:	bf 93       	push	r27
     748:	ef 93       	push	r30
     74a:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     74c:	80 91 d5 03 	lds	r24, 0x03D5
     750:	86 95       	lsr	r24
     752:	90 91 d6 03 	lds	r25, 0x03D6
     756:	98 17       	cp	r25, r24
     758:	51 f4       	brne	.+20     	; 0x76e <__vector_7+0x44>
				
		
		if ((arp.clock_source == INTERNAL_CLOCK) && (arp.mode)) {
     75a:	80 91 93 03 	lds	r24, 0x0393
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	31 f4       	brne	.+12     	; 0x76e <__vector_7+0x44>
     762:	80 91 94 03 	lds	r24, 0x0394
     766:	88 23       	and	r24, r24
     768:	11 f0       	breq	.+4      	; 0x76e <__vector_7+0x44>
			
			PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     76a:	89 98       	cbi	0x11, 1	; 17
			PORTB &= ~ (1<<ARP_SYNC_LED); //turn off arp sync LED
     76c:	2f 98       	cbi	0x05, 7	; 5
			
		}
	}			
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     76e:	80 91 d6 03 	lds	r24, 0x03D6
     772:	8f 5f       	subi	r24, 0xFF	; 255
     774:	80 93 d6 03 	sts	0x03D6, r24
     778:	90 91 d5 03 	lds	r25, 0x03D5
     77c:	89 17       	cp	r24, r25
     77e:	91 f4       	brne	.+36     	; 0x7a4 <__vector_7+0x7a>
		
		system_clock.ppqn_counter = 0;
     780:	10 92 d6 03 	sts	0x03D6, r1
		
		if ((arp.clock_source == INTERNAL_CLOCK) && (arp.mode)) {
     784:	80 91 93 03 	lds	r24, 0x0393
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	61 f4       	brne	.+24     	; 0x7a4 <__vector_7+0x7a>
     78c:	80 91 94 03 	lds	r24, 0x0394
     790:	88 23       	and	r24, r24
     792:	41 f0       	breq	.+16     	; 0x7a4 <__vector_7+0x7a>
			
			//step arp note here based on range and note sequence from assigner	
			
			if (gate_buffer) { //if there are still notes in gate buffer
     794:	80 91 b4 02 	lds	r24, 0x02B4
     798:	88 23       	and	r24, r24
     79a:	21 f0       	breq	.+8      	; 0x7a4 <__vector_7+0x7a>
				step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
     79c:	0e 94 34 01 	call	0x268	; 0x268 <step_arp_note>
				PORTF |= (1<<GATE);
     7a0:	89 9a       	sbi	0x11, 1	; 17
				PORTB |= (1<<ARP_SYNC_LED);
     7a2:	2f 9a       	sbi	0x05, 7	; 5
			} 
		}			
	}
	
     7a4:	ff 91       	pop	r31
     7a6:	ef 91       	pop	r30
     7a8:	bf 91       	pop	r27
     7aa:	af 91       	pop	r26
     7ac:	9f 91       	pop	r25
     7ae:	8f 91       	pop	r24
     7b0:	7f 91       	pop	r23
     7b2:	6f 91       	pop	r22
     7b4:	5f 91       	pop	r21
     7b6:	4f 91       	pop	r20
     7b8:	3f 91       	pop	r19
     7ba:	2f 91       	pop	r18
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <song_position_event>:
uint8_t switch_timer = 0;


void song_position_event(MidiDevice * device, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
	
	arp.display = 42;
     7c6:	8a e2       	ldi	r24, 0x2A	; 42
     7c8:	80 93 92 03 	sts	0x0392, r24
	
}
     7cc:	08 95       	ret

000007ce <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     7ce:	6a 3f       	cpi	r22, 0xFA	; 250
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <real_time_event+0x6>
     7d2:	52 c0       	rjmp	.+164    	; 0x878 <real_time_event+0xaa>
     7d4:	6c 3f       	cpi	r22, 0xFC	; 252
     7d6:	09 f4       	brne	.+2      	; 0x7da <real_time_event+0xc>
     7d8:	62 c0       	rjmp	.+196    	; 0x89e <real_time_event+0xd0>
     7da:	68 3f       	cpi	r22, 0xF8	; 248
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <real_time_event+0x12>
     7de:	62 c0       	rjmp	.+196    	; 0x8a4 <real_time_event+0xd6>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) { //this divider is used just for generating Song Position Pointer for arpeggiator (and eventually software LFO...)
     7e0:	80 91 e2 03 	lds	r24, 0x03E2
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	80 93 e2 03 	sts	0x03E2, r24
     7ea:	90 91 e1 03 	lds	r25, 0x03E1
     7ee:	89 17       	cp	r24, r25
     7f0:	69 f4       	brne	.+26     	; 0x80c <real_time_event+0x3e>
				
				++arp.song_position;
     7f2:	80 91 90 03 	lds	r24, 0x0390
     7f6:	90 91 91 03 	lds	r25, 0x0391
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	90 93 91 03 	sts	0x0391, r25
     800:	80 93 90 03 	sts	0x0390, r24
				midi_clock.ppqn_counter = 0;
     804:	10 92 e2 03 	sts	0x03E2, r1
				arp.display = arp.song_position;
     808:	80 93 92 03 	sts	0x0392, r24
			}						
		
			if (++lfo_clock.ppqn_counter == lfo_clock.divider) {
     80c:	80 91 dc 03 	lds	r24, 0x03DC
     810:	8f 5f       	subi	r24, 0xFF	; 255
     812:	80 93 dc 03 	sts	0x03DC, r24
     816:	90 91 db 03 	lds	r25, 0x03DB
     81a:	89 17       	cp	r24, r25
     81c:	21 f4       	brne	.+8      	; 0x826 <real_time_event+0x58>
				PORTB |= (1<< LFO_RESET);
     81e:	2c 9a       	sbi	0x05, 4	; 5
				//_delay_us(1); //what is minimum pulse width required for LFO reset? Will need to implement this with some other kind of delay OR OR OR - maybe a RC network to provide minimum pulse width for LFO reset????
				
				//PORTB ^= (1<<ARP_SYNC_LED);
				//register clock event - this will do something  - reset LFO or initiate LFO
				lfo_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     820:	10 92 dc 03 	sts	0x03DC, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     824:	2c 98       	cbi	0x05, 4	; 5
			}
			
			if (arp.mode) { //if arp is running
     826:	80 91 94 03 	lds	r24, 0x0394
     82a:	88 23       	and	r24, r24
     82c:	d9 f1       	breq	.+118    	; 0x8a4 <real_time_event+0xd6>
				
				//arp.ppqn_counter++;
			
				if (arp.ppqn_counter == arp.divider) {
     82e:	90 91 8e 03 	lds	r25, 0x038E
     832:	80 91 8f 03 	lds	r24, 0x038F
     836:	98 17       	cp	r25, r24
     838:	51 f4       	brne	.+20     	; 0x84e <real_time_event+0x80>
				
				
					arp.ppqn_counter = 0;
     83a:	10 92 8e 03 	sts	0x038E, r1
					if (gate_buffer) { //if there are still notes in gate buffer
     83e:	80 91 b4 02 	lds	r24, 0x02B4
     842:	88 23       	and	r24, r24
     844:	21 f0       	breq	.+8      	; 0x84e <real_time_event+0x80>
						
						step_arp_note(); //should force inline this function.
     846:	0e 94 34 01 	call	0x268	; 0x268 <step_arp_note>
						PORTF |= (1<<GATE);
     84a:	89 9a       	sbi	0x11, 1	; 17
						PORTB |= (1<<ARP_SYNC_LED);
     84c:	2f 9a       	sbi	0x05, 7	; 5
					}	
				
				}
				
				if (arp.ppqn_counter == arp.divider - (arp.divider >> 1)) { //50% gate width
     84e:	40 91 8f 03 	lds	r20, 0x038F
     852:	20 91 8e 03 	lds	r18, 0x038E
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	84 2f       	mov	r24, r20
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	46 95       	lsr	r20
     85e:	84 1b       	sub	r24, r20
     860:	91 09       	sbc	r25, r1
     862:	28 17       	cp	r18, r24
     864:	39 07       	cpc	r19, r25
     866:	11 f4       	brne	.+4      	; 0x86c <real_time_event+0x9e>
								
					PORTF &= ~(1<<GATE);
     868:	89 98       	cbi	0x11, 1	; 17
					PORTB &= ~ (1<<ARP_SYNC_LED); //turn off arp sync LED
     86a:	2f 98       	cbi	0x05, 7	; 5
								
				}
				arp.ppqn_counter++; //post increment means ppqn_counter is never 0, lowest is 1. Does this make sense for counting from 1 to arp.divide?
     86c:	80 91 8e 03 	lds	r24, 0x038E
     870:	8f 5f       	subi	r24, 0xFF	; 255
     872:	80 93 8e 03 	sts	0x038E, r24
     876:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			lfo_clock.ppqn_counter = 0;
     878:	10 92 dc 03 	sts	0x03DC, r1
			midi_clock.ppqn_counter = 0;
     87c:	10 92 e2 03 	sts	0x03E2, r1
			arp.ppqn_counter = arp.divider-1; //trigger arp step on next MIDI clock tick. This -1 here is key to getting proper sync to beat clock behavior
     880:	80 91 8f 03 	lds	r24, 0x038F
     884:	81 50       	subi	r24, 0x01	; 1
     886:	80 93 8e 03 	sts	0x038E, r24
			arp.clock_source = MIDI_CLOCK;
     88a:	88 ef       	ldi	r24, 0xF8	; 248
     88c:	80 93 93 03 	sts	0x0393, r24
			arp.step_position = 0; 
     890:	10 92 8a 03 	sts	0x038A, r1
			arp.song_position = 0; //reset master song position counter
     894:	10 92 91 03 	sts	0x0391, r1
     898:	10 92 90 03 	sts	0x0390, r1
			break;
     89c:	08 95       	ret
			
		case MIDI_STOP:
		
			arp.clock_source = INTERNAL_CLOCK; //revert to internal clock when MIDI STOP message received
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 93 03 	sts	0x0393, r24
     8a4:	08 95       	ret

000008a6 <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     8a6:	84 2f       	mov	r24, r20
	
	remove_note(note);
     8a8:	0e 94 af 01 	call	0x35e	; 0x35e <remove_note>
	gate_buffer--;
     8ac:	80 91 b4 02 	lds	r24, 0x02B4
     8b0:	81 50       	subi	r24, 0x01	; 1
     8b2:	80 93 b4 02 	sts	0x02B4, r24
	//
	if (arp.mode) {	//if arp on, update arp sequence
     8b6:	90 91 94 03 	lds	r25, 0x0394
     8ba:	99 23       	and	r25, r25
     8bc:	71 f0       	breq	.+28     	; 0x8da <note_off_event+0x34>
		//gate_buffer--;
		if (gate_buffer == 0) {
     8be:	88 23       	and	r24, r24
     8c0:	49 f4       	brne	.+18     	; 0x8d4 <note_off_event+0x2e>
			arp.current_note = arp.previous_note; //handle last note prevservation for release phase
     8c2:	80 91 8c 03 	lds	r24, 0x038C
     8c6:	80 93 8d 03 	sts	0x038D, r24
			//if (arp.clock_source == INTERNAL_CLOCK) arp.step_position = 0; //if arp is synced to MIDI clock, then step position is reset when MIDI START message received
			arp.step_position = 0;
     8ca:	10 92 8a 03 	sts	0x038A, r1
			arp.direction = UP; //this is to initialize UP/DOWN mode
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	80 93 8b 03 	sts	0x038B, r24
		}			
		update_arp_sequence();
     8d4:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     8d8:	08 95       	ret
	} else {
		
		//update_arp_sequence();
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     8da:	88 23       	and	r24, r24
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <note_off_event+0x3a>
     8de:	89 98       	cbi	0x11, 1	; 17
     8e0:	08 95       	ret

000008e2 <note_on_event>:
	
}



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     8e2:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     8e4:	90 91 03 03 	lds	r25, 0x0303
     8e8:	90 ff       	sbrs	r25, 0
     8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     8ec:	2c 9a       	sbi	0x05, 4	; 5
     8ee:	96 e0       	ldi	r25, 0x06	; 6
     8f0:	9a 95       	dec	r25
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <note_on_event+0xe>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     8f6:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     8f8:	80 93 be 02 	sts	0x02BE, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     8fc:	22 23       	and	r18, r18
     8fe:	59 f4       	brne	.+22     	; 0x916 <note_on_event+0x34>
		remove_note(note);
     900:	0e 94 af 01 	call	0x35e	; 0x35e <remove_note>
		gate_buffer--;
     904:	80 91 b4 02 	lds	r24, 0x02B4
     908:	81 50       	subi	r24, 0x01	; 1
     90a:	80 93 b4 02 	sts	0x02B4, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     90e:	88 23       	and	r24, r24
     910:	91 f4       	brne	.+36     	; 0x936 <note_on_event+0x54>
     912:	89 98       	cbi	0x11, 1	; 17
     914:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);
     916:	62 2f       	mov	r22, r18
     918:	0e 94 97 01 	call	0x32e	; 0x32e <new_note>
		
		gate_buffer++;
     91c:	80 91 b4 02 	lds	r24, 0x02B4
     920:	8f 5f       	subi	r24, 0xFF	; 255
     922:	80 93 b4 02 	sts	0x02B4, r24
		if (arp.mode) { //if arp is off, handle gate
     926:	80 91 94 03 	lds	r24, 0x0394
     92a:	88 23       	and	r24, r24
     92c:	19 f0       	breq	.+6      	; 0x934 <note_on_event+0x52>
			//new_note(note, velocity);
			//gate_buffer++; //increment gate_buffer
			//arp.display = arp.ppqn_counter;
			update_arp_sequence();
     92e:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     932:	08 95       	ret
				//arp.ppqn_counter = arp.divider; //reset ppqn counter to trigger arp step. This should implement KEY SYNC but messes up over all beat sync to master
				//ok, if note on comes on an arp divider beat, then it needs to be triggered, but if it isn't on a divider beat, then it shouldn't be triggered, right?	
				//arp.step_position = 0; //reset step position when new note arrives? Have a look here to get into nitty gritty details of arp sync behaviour: http://lauterzeit.com/arp_lfo_seq_sync/
			//}			
		} else {
			PORTF |= (1<<GATE); //if arp is OFF then turn on gate. Otherwise arpeggiator handles GATE
     934:	89 9a       	sbi	0x11, 1	; 17
     936:	08 95       	ret

00000938 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     938:	87 e2       	ldi	r24, 0x27	; 39
     93a:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     93e:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     942:	88 e9       	ldi	r24, 0x98	; 152
     944:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     948:	08 95       	ret

0000094a <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     94a:	1f 92       	push	r1
     94c:	0f 92       	push	r0
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	0f 92       	push	r0
     952:	11 24       	eor	r1, r1
     954:	2f 93       	push	r18
     956:	3f 93       	push	r19
     958:	4f 93       	push	r20
     95a:	5f 93       	push	r21
     95c:	6f 93       	push	r22
     95e:	7f 93       	push	r23
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	0f 92       	push	r0
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     976:	80 91 c6 00 	lds	r24, 0x00C6
     97a:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     97c:	87 ee       	ldi	r24, 0xE7	; 231
     97e:	93 e0       	ldi	r25, 0x03	; 3
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	ae 01       	movw	r20, r28
     984:	4f 5f       	subi	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     98c:	0f 90       	pop	r0
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	ff 91       	pop	r31
     994:	ef 91       	pop	r30
     996:	bf 91       	pop	r27
     998:	af 91       	pop	r26
     99a:	9f 91       	pop	r25
     99c:	8f 91       	pop	r24
     99e:	7f 91       	pop	r23
     9a0:	6f 91       	pop	r22
     9a2:	5f 91       	pop	r21
     9a4:	4f 91       	pop	r20
     9a6:	3f 91       	pop	r19
     9a8:	2f 91       	pop	r18
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0
     9b0:	1f 90       	pop	r1
     9b2:	18 95       	reti

000009b4 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     9b4:	c0 e8       	ldi	r28, 0x80	; 128
     9b6:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     9b8:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     9ba:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     9bc:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     9be:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     9c0:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     9c2:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     9c4:	0e 94 3c 08 	call	0x1078	; 0x1078 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     9c8:	a9 ed       	ldi	r26, 0xD9	; 217
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	8c 91       	ld	r24, X
     9ce:	80 6c       	ori	r24, 0xC0	; 192
     9d0:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     9d2:	ea ed       	ldi	r30, 0xDA	; 218
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	80 6c       	ori	r24, 0xC0	; 192
     9da:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     9dc:	81 b1       	in	r24, 0x01	; 1
     9de:	8f ef       	ldi	r24, 0xFF	; 255
     9e0:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     9e2:	92 b1       	in	r25, 0x02	; 2
     9e4:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     9e6:	8c 91       	ld	r24, X
     9e8:	80 63       	ori	r24, 0x30	; 48
     9ea:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     9ec:	80 81       	ld	r24, Z
     9ee:	8f 7c       	andi	r24, 0xCF	; 207
     9f0:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     9f2:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     9f4:	ec ed       	ldi	r30, 0xDC	; 220
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	80 62       	ori	r24, 0x20	; 32
     9fc:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     9fe:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     a00:	ed ed       	ldi	r30, 0xDD	; 221
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	80 62       	ori	r24, 0x20	; 32
     a08:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     a0a:	80 81       	ld	r24, Z
     a0c:	8f 7d       	andi	r24, 0xDF	; 223
     a0e:	80 83       	st	Z, r24
	DATA_BUS = 0;
     a10:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     a12:	c0 93 03 03 	sts	0x0303, r28
	
	//setup ADC
    setup_adc();		
     a16:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     a1a:	0e 94 36 02 	call	0x46c	; 0x46c <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     a1e:	c7 ee       	ldi	r28, 0xE7	; 231
     a20:	d3 e0       	ldi	r29, 0x03	; 3
     a22:	ce 01       	movw	r24, r28
     a24:	0e 94 32 1a 	call	0x3464	; 0x3464 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     a28:	ce 01       	movw	r24, r28
     a2a:	61 e7       	ldi	r22, 0x71	; 113
     a2c:	74 e0       	ldi	r23, 0x04	; 4
     a2e:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     a32:	ce 01       	movw	r24, r28
     a34:	63 e5       	ldi	r22, 0x53	; 83
     a36:	74 e0       	ldi	r23, 0x04	; 4
     a38:	0e 94 fe 19 	call	0x33fc	; 0x33fc <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     a3c:	ce 01       	movw	r24, r28
     a3e:	67 ee       	ldi	r22, 0xE7	; 231
     a40:	73 e0       	ldi	r23, 0x03	; 3
     a42:	0e 94 1e 1a 	call	0x343c	; 0x343c <midi_register_realtime_callback>
	midi_register_songposition_callback(&midi_device, song_position_event);
     a46:	ce 01       	movw	r24, r28
     a48:	63 ee       	ldi	r22, 0xE3	; 227
     a4a:	73 e0       	ldi	r23, 0x03	; 3
     a4c:	0e 94 0a 1a 	call	0x3414	; 0x3414 <midi_register_songposition_callback>
	//setup MIDI USART
	setup_midi_usart();
     a50:	0e 94 9c 04 	call	0x938	; 0x938 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     a54:	0e 94 61 08 	call	0x10c2	; 0x10c2 <update_spi>
	
	
	current_patch.number = 1;
     a58:	c1 e0       	ldi	r28, 0x01	; 1
     a5a:	c0 93 07 03 	sts	0x0307, r28
		
	sei(); //enable global interrupts
     a5e:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     a60:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <load_patch>
	
	setup_system_clock();
     a6a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     a6e:	88 e1       	ldi	r24, 0x18	; 24
     a70:	80 93 d5 03 	sts	0x03D5, r24
	midi_clock.divider = 6;//this is for MIDI beat clock which is /6 MIDI ppqn clock or 16th notes
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	80 93 e1 03 	sts	0x03E1, r24
	arp.step_position = 0; //initialize step position
     a7a:	10 92 8a 03 	sts	0x038A, r1
	arp.clock_source = INTERNAL_CLOCK;
     a7e:	c0 93 93 03 	sts	0x0393, r28
	arp.mode = OFF;
     a82:	10 92 94 03 	sts	0x0394, r1
	arp.ppqn_counter = 1;
     a86:	c0 93 8e 03 	sts	0x038E, r28

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     a8a:	07 ee       	ldi	r16, 0xE7	; 231
     a8c:	13 e0       	ldi	r17, 0x03	; 3
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     a8e:	0f 2e       	mov	r0, r31
     a90:	f4 e8       	ldi	r31, 0x84	; 132
     a92:	ef 2e       	mov	r14, r31
     a94:	f3 e0       	ldi	r31, 0x03	; 3
     a96:	ff 2e       	mov	r15, r31
     a98:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     a9a:	0f 2e       	mov	r0, r31
     a9c:	fb e0       	ldi	r31, 0x0B	; 11
     a9e:	cf 2e       	mov	r12, r31
     aa0:	f3 e0       	ldi	r31, 0x03	; 3
     aa2:	df 2e       	mov	r13, r31
     aa4:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     aa6:	bb 24       	eor	r11, r11
     aa8:	68 94       	set
     aaa:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     aac:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     aae:	c8 01       	movw	r24, r16
     ab0:	0e 94 8d 1c 	call	0x391a	; 0x391a <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     ab4:	80 91 fd 01 	lds	r24, 0x01FD
     ab8:	90 91 fe 01 	lds	r25, 0x01FE
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	0e 94 38 03 	call	0x670	; 0x670 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     ac2:	0e 94 90 05 	call	0xb20	; 0xb20 <scan_pots>
		update_control_voltages();
     ac6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     aca:	80 91 bd 02 	lds	r24, 0x02BD
     ace:	98 2f       	mov	r25, r24
     ad0:	9f 5f       	subi	r25, 0xFF	; 255
     ad2:	90 93 bd 02 	sts	0x02BD, r25
     ad6:	85 30       	cpi	r24, 0x05	; 5
     ad8:	51 f7       	brne	.-44     	; 0xaae <main+0xfa>
		{
			switch_timer = 0;
     ada:	10 92 bd 02 	sts	0x02BD, r1
			switch_press = 0; //reset global switch press flag
     ade:	10 92 c5 02 	sts	0x02C5, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     ae2:	f7 01       	movw	r30, r14
     ae4:	c0 81       	ld	r28, Z
     ae6:	0e 94 14 17 	call	0x2e28	; 0x2e28 <read_switch_port>
     aea:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     aec:	f6 01       	movw	r30, r12
     aee:	90 81       	ld	r25, Z
     af0:	91 30       	cpi	r25, 0x01	; 1
     af2:	11 f4       	brne	.+4      	; 0xaf8 <main+0x144>
     af4:	cd 2f       	mov	r28, r29
     af6:	01 c0       	rjmp	.+2      	; 0xafa <main+0x146>
     af8:	c0 e0       	ldi	r28, 0x00	; 0
     afa:	c8 2b       	or	r28, r24
     afc:	f7 01       	movw	r30, r14
     afe:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     b00:	0e 94 61 08 	call	0x10c2	; 0x10c2 <update_spi>
			if (switch_press) { 
     b04:	80 91 c5 02 	lds	r24, 0x02C5
     b08:	88 23       	and	r24, r24
     b0a:	39 f0       	breq	.+14     	; 0xb1a <main+0x166>
				update_patch();
     b0c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     b10:	f6 01       	movw	r30, r12
     b12:	80 81       	ld	r24, Z
     b14:	88 23       	and	r24, r24
     b16:	09 f4       	brne	.+2      	; 0xb1a <main+0x166>
     b18:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     b1a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <update_patch_programmer>
     b1e:	c7 cf       	rjmp	.-114    	; 0xaae <main+0xfa>

00000b20 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     b20:	bf 92       	push	r11
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	c0 e0       	ldi	r28, 0x00	; 0
     b34:	d1 e0       	ldi	r29, 0x01	; 1
     b36:	06 ec       	ldi	r16, 0xC6	; 198
     b38:	12 e0       	ldi	r17, 0x02	; 2
     b3a:	0f 2e       	mov	r0, r31
     b3c:	fc e3       	ldi	r31, 0x3C	; 60
     b3e:	cf 2e       	mov	r12, r31
     b40:	dd 24       	eor	r13, r13
     b42:	f0 2d       	mov	r31, r0
     b44:	cc 0e       	add	r12, r28
     b46:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     b48:	0f 2e       	mov	r0, r31
     b4a:	fb e0       	ldi	r31, 0x0B	; 11
     b4c:	ef 2e       	mov	r14, r31
     b4e:	f3 e0       	ldi	r31, 0x03	; 3
     b50:	ff 2e       	mov	r15, r31
     b52:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     b54:	bb 24       	eor	r11, r11
     b56:	68 94       	set
     b58:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     b5a:	88 81       	ld	r24, Y
     b5c:	99 81       	ldd	r25, Y+1	; 0x01
     b5e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     b62:	90 93 c0 02 	sts	0x02C0, r25
     b66:	80 93 bf 02 	sts	0x02BF, r24
		adc_change = adc_value - pot_id[i]->value;
     b6a:	e8 81       	ld	r30, Y
     b6c:	f9 81       	ldd	r31, Y+1	; 0x01
     b6e:	40 81       	ld	r20, Z
     b70:	21 81       	ldd	r18, Z+1	; 0x01
     b72:	52 2f       	mov	r21, r18
     b74:	53 70       	andi	r21, 0x03	; 3
     b76:	84 1b       	sub	r24, r20
     b78:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     b7a:	95 95       	asr	r25
     b7c:	87 95       	ror	r24
     b7e:	95 95       	asr	r25
     b80:	87 95       	ror	r24
     b82:	84 0f       	add	r24, r20
     b84:	95 1f       	adc	r25, r21
     b86:	80 83       	st	Z, r24
     b88:	89 2f       	mov	r24, r25
     b8a:	83 70       	andi	r24, 0x03	; 3
     b8c:	2c 7f       	andi	r18, 0xFC	; 252
     b8e:	28 2b       	or	r18, r24
     b90:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     b92:	e9 91       	ld	r30, Y+
     b94:	f9 91       	ld	r31, Y+
     b96:	92 81       	ldd	r25, Z+2	; 0x02
     b98:	20 81       	ld	r18, Z
     b9a:	81 81       	ldd	r24, Z+1	; 0x01
     b9c:	38 2f       	mov	r19, r24
     b9e:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     ba0:	d7 01       	movw	r26, r14
     ba2:	8c 91       	ld	r24, X
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	19 f0       	breq	.+6      	; 0xbae <scan_pots+0x8e>
     ba8:	83 81       	ldd	r24, Z+3	; 0x03
     baa:	88 23       	and	r24, r24
     bac:	24 f0       	brlt	.+8      	; 0xbb6 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     bae:	f8 01       	movw	r30, r16
     bb0:	31 83       	std	Z+1, r19	; 0x01
     bb2:	20 83       	st	Z, r18
     bb4:	14 c0       	rjmp	.+40     	; 0xbde <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     bb6:	49 2f       	mov	r20, r25
     bb8:	43 50       	subi	r20, 0x03	; 3
     bba:	c9 01       	movw	r24, r18
     bbc:	95 95       	asr	r25
     bbe:	87 95       	ror	r24
     bc0:	95 95       	asr	r25
     bc2:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     bc4:	94 2f       	mov	r25, r20
     bc6:	98 1b       	sub	r25, r24
     bc8:	9a 3f       	cpi	r25, 0xFA	; 250
     bca:	48 f4       	brcc	.+18     	; 0xbde <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     bcc:	d8 01       	movw	r26, r16
     bce:	11 96       	adiw	r26, 0x01	; 1
     bd0:	3c 93       	st	X, r19
     bd2:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     bd4:	83 81       	ldd	r24, Z+3	; 0x03
     bd6:	8f 77       	andi	r24, 0x7F	; 127
     bd8:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     bda:	f7 01       	movw	r30, r14
     bdc:	b0 82       	st	Z, r11
     bde:	0e 5f       	subi	r16, 0xFE	; 254
     be0:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     be2:	cc 15       	cp	r28, r12
     be4:	dd 05       	cpc	r29, r13
     be6:	09 f0       	breq	.+2      	; 0xbea <scan_pots+0xca>
     be8:	b8 cf       	rjmp	.-144    	; 0xb5a <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     bea:	8c e7       	ldi	r24, 0x7C	; 124
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     bf2:	90 93 c0 02 	sts	0x02C0, r25
     bf6:	80 93 bf 02 	sts	0x02BF, r24
	adc_change = adc_value - volume_pot.value;
     bfa:	20 91 7c 01 	lds	r18, 0x017C
     bfe:	40 91 7d 01 	lds	r20, 0x017D
     c02:	34 2f       	mov	r19, r20
     c04:	33 70       	andi	r19, 0x03	; 3
     c06:	82 1b       	sub	r24, r18
     c08:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     c0a:	95 95       	asr	r25
     c0c:	87 95       	ror	r24
     c0e:	95 95       	asr	r25
     c10:	87 95       	ror	r24
     c12:	28 0f       	add	r18, r24
     c14:	39 1f       	adc	r19, r25
     c16:	20 93 7c 01 	sts	0x017C, r18
     c1a:	83 2f       	mov	r24, r19
     c1c:	83 70       	andi	r24, 0x03	; 3
     c1e:	4c 7f       	andi	r20, 0xFC	; 252
     c20:	48 2b       	or	r20, r24
     c22:	40 93 7d 01 	sts	0x017D, r20
	
}
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	df 90       	pop	r13
     c34:	cf 90       	pop	r12
     c36:	bf 90       	pop	r11
     c38:	08 95       	ret

00000c3a <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     c3e:	60 91 c6 02 	lds	r22, 0x02C6
     c42:	70 91 c7 02 	lds	r23, 0x02C7
     c46:	62 95       	swap	r22
     c48:	72 95       	swap	r23
     c4a:	70 7f       	andi	r23, 0xF0	; 240
     c4c:	76 27       	eor	r23, r22
     c4e:	60 7f       	andi	r22, 0xF0	; 240
     c50:	76 27       	eor	r23, r22
     c52:	84 ee       	ldi	r24, 0xE4	; 228
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     c5a:	60 91 c8 02 	lds	r22, 0x02C8
     c5e:	70 91 c9 02 	lds	r23, 0x02C9
     c62:	62 95       	swap	r22
     c64:	72 95       	swap	r23
     c66:	70 7f       	andi	r23, 0xF0	; 240
     c68:	76 27       	eor	r23, r22
     c6a:	60 7f       	andi	r22, 0xF0	; 240
     c6c:	76 27       	eor	r23, r22
     c6e:	83 ee       	ldi	r24, 0xE3	; 227
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     c76:	60 91 ca 02 	lds	r22, 0x02CA
     c7a:	70 91 cb 02 	lds	r23, 0x02CB
     c7e:	66 0f       	add	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	66 0f       	add	r22, r22
     c84:	77 1f       	adc	r23, r23
     c86:	66 0f       	add	r22, r22
     c88:	77 1f       	adc	r23, r23
     c8a:	82 ee       	ldi	r24, 0xE2	; 226
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     c92:	60 91 cc 02 	lds	r22, 0x02CC
     c96:	70 91 cd 02 	lds	r23, 0x02CD
     c9a:	62 95       	swap	r22
     c9c:	72 95       	swap	r23
     c9e:	70 7f       	andi	r23, 0xF0	; 240
     ca0:	76 27       	eor	r23, r22
     ca2:	60 7f       	andi	r22, 0xF0	; 240
     ca4:	76 27       	eor	r23, r22
     ca6:	87 eb       	ldi	r24, 0xB7	; 183
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     cae:	60 91 ce 02 	lds	r22, 0x02CE
     cb2:	70 91 cf 02 	lds	r23, 0x02CF
     cb6:	66 0f       	add	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	66 0f       	add	r22, r22
     cbc:	77 1f       	adc	r23, r23
     cbe:	66 0f       	add	r22, r22
     cc0:	77 1f       	adc	r23, r23
     cc2:	81 ee       	ldi	r24, 0xE1	; 225
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     cca:	60 91 d0 02 	lds	r22, 0x02D0
     cce:	70 91 d1 02 	lds	r23, 0x02D1
     cd2:	62 95       	swap	r22
     cd4:	72 95       	swap	r23
     cd6:	70 7f       	andi	r23, 0xF0	; 240
     cd8:	76 27       	eor	r23, r22
     cda:	60 7f       	andi	r22, 0xF0	; 240
     cdc:	76 27       	eor	r23, r22
     cde:	80 ee       	ldi	r24, 0xE0	; 224
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     ce6:	60 91 d2 02 	lds	r22, 0x02D2
     cea:	70 91 d3 02 	lds	r23, 0x02D3
     cee:	62 95       	swap	r22
     cf0:	72 95       	swap	r23
     cf2:	70 7f       	andi	r23, 0xF0	; 240
     cf4:	76 27       	eor	r23, r22
     cf6:	60 7f       	andi	r22, 0xF0	; 240
     cf8:	76 27       	eor	r23, r22
     cfa:	8f ed       	ldi	r24, 0xDF	; 223
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     d02:	60 91 d4 02 	lds	r22, 0x02D4
     d06:	70 91 d5 02 	lds	r23, 0x02D5
     d0a:	62 95       	swap	r22
     d0c:	72 95       	swap	r23
     d0e:	70 7f       	andi	r23, 0xF0	; 240
     d10:	76 27       	eor	r23, r22
     d12:	60 7f       	andi	r22, 0xF0	; 240
     d14:	76 27       	eor	r23, r22
     d16:	8e ed       	ldi	r24, 0xDE	; 222
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     d1e:	80 91 d8 02 	lds	r24, 0x02D8
     d22:	90 91 d9 02 	lds	r25, 0x02D9
     d26:	c0 e0       	ldi	r28, 0x00	; 0
     d28:	d2 e0       	ldi	r29, 0x02	; 2
     d2a:	c8 1b       	sub	r28, r24
     d2c:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     d2e:	60 91 77 03 	lds	r22, 0x0377
     d32:	70 91 78 03 	lds	r23, 0x0378
     d36:	60 50       	subi	r22, 0x00	; 0
     d38:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     d3a:	80 91 d6 02 	lds	r24, 0x02D6
     d3e:	90 91 d7 02 	lds	r25, 0x02D7
     d42:	68 1b       	sub	r22, r24
     d44:	79 0b       	sbc	r23, r25
     d46:	6c 0f       	add	r22, r28
     d48:	7d 1f       	adc	r23, r29
     d4a:	8d ed       	ldi	r24, 0xDD	; 221
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     d52:	60 91 79 03 	lds	r22, 0x0379
     d56:	70 91 7a 03 	lds	r23, 0x037A
     d5a:	6c 0f       	add	r22, r28
     d5c:	7d 1f       	adc	r23, r29
     d5e:	8c ed       	ldi	r24, 0xDC	; 220
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     d66:	60 91 da 02 	lds	r22, 0x02DA
     d6a:	70 91 db 02 	lds	r23, 0x02DB
     d6e:	62 95       	swap	r22
     d70:	72 95       	swap	r23
     d72:	70 7f       	andi	r23, 0xF0	; 240
     d74:	76 27       	eor	r23, r22
     d76:	60 7f       	andi	r22, 0xF0	; 240
     d78:	76 27       	eor	r23, r22
     d7a:	8b ed       	ldi	r24, 0xDB	; 219
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     d82:	60 91 de 02 	lds	r22, 0x02DE
     d86:	70 91 df 02 	lds	r23, 0x02DF
     d8a:	62 95       	swap	r22
     d8c:	72 95       	swap	r23
     d8e:	70 7f       	andi	r23, 0xF0	; 240
     d90:	76 27       	eor	r23, r22
     d92:	60 7f       	andi	r22, 0xF0	; 240
     d94:	76 27       	eor	r23, r22
     d96:	8a ed       	ldi	r24, 0xDA	; 218
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     d9e:	60 91 e0 02 	lds	r22, 0x02E0
     da2:	70 91 e1 02 	lds	r23, 0x02E1
     da6:	62 95       	swap	r22
     da8:	72 95       	swap	r23
     daa:	70 7f       	andi	r23, 0xF0	; 240
     dac:	76 27       	eor	r23, r22
     dae:	60 7f       	andi	r22, 0xF0	; 240
     db0:	76 27       	eor	r23, r22
     db2:	89 ed       	ldi	r24, 0xD9	; 217
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     dba:	60 91 7c 01 	lds	r22, 0x017C
     dbe:	80 91 7d 01 	lds	r24, 0x017D
     dc2:	78 2f       	mov	r23, r24
     dc4:	73 70       	andi	r23, 0x03	; 3
     dc6:	62 95       	swap	r22
     dc8:	72 95       	swap	r23
     dca:	70 7f       	andi	r23, 0xF0	; 240
     dcc:	76 27       	eor	r23, r22
     dce:	60 7f       	andi	r22, 0xF0	; 240
     dd0:	76 27       	eor	r23, r22
     dd2:	88 ed       	ldi	r24, 0xD8	; 216
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     dda:	60 91 e2 02 	lds	r22, 0x02E2
     dde:	70 91 e3 02 	lds	r23, 0x02E3
     de2:	62 95       	swap	r22
     de4:	72 95       	swap	r23
     de6:	70 7f       	andi	r23, 0xF0	; 240
     de8:	76 27       	eor	r23, r22
     dea:	60 7f       	andi	r22, 0xF0	; 240
     dec:	76 27       	eor	r23, r22
     dee:	87 ed       	ldi	r24, 0xD7	; 215
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     df6:	60 91 e4 02 	lds	r22, 0x02E4
     dfa:	70 91 e5 02 	lds	r23, 0x02E5
     dfe:	62 95       	swap	r22
     e00:	72 95       	swap	r23
     e02:	70 7f       	andi	r23, 0xF0	; 240
     e04:	76 27       	eor	r23, r22
     e06:	60 7f       	andi	r22, 0xF0	; 240
     e08:	76 27       	eor	r23, r22
     e0a:	86 ed       	ldi	r24, 0xD6	; 214
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     e12:	60 91 e6 02 	lds	r22, 0x02E6
     e16:	70 91 e7 02 	lds	r23, 0x02E7
     e1a:	62 95       	swap	r22
     e1c:	72 95       	swap	r23
     e1e:	70 7f       	andi	r23, 0xF0	; 240
     e20:	76 27       	eor	r23, r22
     e22:	60 7f       	andi	r22, 0xF0	; 240
     e24:	76 27       	eor	r23, r22
     e26:	85 ed       	ldi	r24, 0xD5	; 213
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     e2e:	0e 94 8d 01 	call	0x31a	; 0x31a <get_current_note>
     e32:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     e34:	88 30       	cpi	r24, 0x08	; 8
     e36:	08 f4       	brcc	.+2      	; 0xe3a <update_control_voltages+0x200>
     e38:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = current_patch.number + 100*(arp.sequence[arp.step_position].note); //100*note;
	//value_to_display = arp.sequence[arp.step_position].note;
	//uint8_t arp_note = arp.sequence[arp.step_position].note;
	//if (arp_note == EMPTY) arp_note = 0;
	value_to_display = current_patch.number + 100*arp.display;
     e3a:	60 91 07 03 	lds	r22, 0x0307
     e3e:	40 91 92 03 	lds	r20, 0x0392
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	24 e6       	ldi	r18, 0x64	; 100
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	42 9f       	mul	r20, r18
     e4a:	c0 01       	movw	r24, r0
     e4c:	43 9f       	mul	r20, r19
     e4e:	90 0d       	add	r25, r0
     e50:	52 9f       	mul	r21, r18
     e52:	90 0d       	add	r25, r0
     e54:	11 24       	eor	r1, r1
     e56:	86 0f       	add	r24, r22
     e58:	91 1d       	adc	r25, r1
     e5a:	90 93 fe 01 	sts	0x01FE, r25
     e5e:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     e62:	8c 2f       	mov	r24, r28
     e64:	88 50       	subi	r24, 0x08	; 8
     e66:	63 e1       	ldi	r22, 0x13	; 19
     e68:	73 e0       	ldi	r23, 0x03	; 3
     e6a:	0e 94 89 16 	call	0x2d12	; 0x2d12 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     e6e:	bc 01       	movw	r22, r24
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	20 91 ea 02 	lds	r18, 0x02EA
     e78:	30 91 eb 02 	lds	r19, 0x02EB
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__mulsi3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	07 2e       	mov	r0, r23
     e8a:	7a e0       	ldi	r23, 0x0A	; 10
     e8c:	b6 95       	lsr	r27
     e8e:	a7 95       	ror	r26
     e90:	97 95       	ror	r25
     e92:	87 95       	ror	r24
     e94:	7a 95       	dec	r23
     e96:	d1 f7       	brne	.-12     	; 0xe8c <update_control_voltages+0x252>
     e98:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     e9a:	60 91 e8 02 	lds	r22, 0x02E8
     e9e:	70 91 e9 02 	lds	r23, 0x02E9
     ea2:	62 95       	swap	r22
     ea4:	72 95       	swap	r23
     ea6:	70 7f       	andi	r23, 0xF0	; 240
     ea8:	76 27       	eor	r23, r22
     eaa:	60 7f       	andi	r22, 0xF0	; 240
     eac:	76 27       	eor	r23, r22
     eae:	86 0f       	add	r24, r22
     eb0:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     eb2:	bc 01       	movw	r22, r24
     eb4:	80 e4       	ldi	r24, 0x40	; 64
     eb6:	60 30       	cpi	r22, 0x00	; 0
     eb8:	78 07       	cpc	r23, r24
     eba:	10 f0       	brcs	.+4      	; 0xec0 <update_control_voltages+0x286>
     ebc:	6f ef       	ldi	r22, 0xFF	; 255
     ebe:	7f e3       	ldi	r23, 0x3F	; 63
     ec0:	84 ed       	ldi	r24, 0xD4	; 212
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     ec8:	60 91 ec 02 	lds	r22, 0x02EC
     ecc:	70 91 ed 02 	lds	r23, 0x02ED
     ed0:	62 95       	swap	r22
     ed2:	72 95       	swap	r23
     ed4:	70 7f       	andi	r23, 0xF0	; 240
     ed6:	76 27       	eor	r23, r22
     ed8:	60 7f       	andi	r22, 0xF0	; 240
     eda:	76 27       	eor	r23, r22
     edc:	82 ed       	ldi	r24, 0xD2	; 210
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     ee4:	60 91 ee 02 	lds	r22, 0x02EE
     ee8:	70 91 ef 02 	lds	r23, 0x02EF
     eec:	62 95       	swap	r22
     eee:	72 95       	swap	r23
     ef0:	70 7f       	andi	r23, 0xF0	; 240
     ef2:	76 27       	eor	r23, r22
     ef4:	60 7f       	andi	r22, 0xF0	; 240
     ef6:	76 27       	eor	r23, r22
     ef8:	81 ed       	ldi	r24, 0xD1	; 209
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     f00:	60 91 f0 02 	lds	r22, 0x02F0
     f04:	70 91 f1 02 	lds	r23, 0x02F1
     f08:	62 95       	swap	r22
     f0a:	72 95       	swap	r23
     f0c:	70 7f       	andi	r23, 0xF0	; 240
     f0e:	76 27       	eor	r23, r22
     f10:	60 7f       	andi	r22, 0xF0	; 240
     f12:	76 27       	eor	r23, r22
     f14:	80 ed       	ldi	r24, 0xD0	; 208
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     f1c:	60 91 f2 02 	lds	r22, 0x02F2
     f20:	70 91 f3 02 	lds	r23, 0x02F3
     f24:	62 95       	swap	r22
     f26:	72 95       	swap	r23
     f28:	70 7f       	andi	r23, 0xF0	; 240
     f2a:	76 27       	eor	r23, r22
     f2c:	60 7f       	andi	r22, 0xF0	; 240
     f2e:	76 27       	eor	r23, r22
     f30:	8f ec       	ldi	r24, 0xCF	; 207
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     f38:	60 91 f4 02 	lds	r22, 0x02F4
     f3c:	70 91 f5 02 	lds	r23, 0x02F5
     f40:	62 95       	swap	r22
     f42:	72 95       	swap	r23
     f44:	70 7f       	andi	r23, 0xF0	; 240
     f46:	76 27       	eor	r23, r22
     f48:	60 7f       	andi	r22, 0xF0	; 240
     f4a:	76 27       	eor	r23, r22
     f4c:	8e ec       	ldi	r24, 0xCE	; 206
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     f54:	60 91 f6 02 	lds	r22, 0x02F6
     f58:	70 91 f7 02 	lds	r23, 0x02F7
     f5c:	62 95       	swap	r22
     f5e:	72 95       	swap	r23
     f60:	70 7f       	andi	r23, 0xF0	; 240
     f62:	76 27       	eor	r23, r22
     f64:	60 7f       	andi	r22, 0xF0	; 240
     f66:	76 27       	eor	r23, r22
     f68:	8d ec       	ldi	r24, 0xCD	; 205
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     f70:	60 91 f8 02 	lds	r22, 0x02F8
     f74:	70 91 f9 02 	lds	r23, 0x02F9
     f78:	62 95       	swap	r22
     f7a:	72 95       	swap	r23
     f7c:	70 7f       	andi	r23, 0xF0	; 240
     f7e:	76 27       	eor	r23, r22
     f80:	60 7f       	andi	r22, 0xF0	; 240
     f82:	76 27       	eor	r23, r22
     f84:	8c ec       	ldi	r24, 0xCC	; 204
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     f8c:	60 91 fc 02 	lds	r22, 0x02FC
     f90:	70 91 fd 02 	lds	r23, 0x02FD
     f94:	62 95       	swap	r22
     f96:	72 95       	swap	r23
     f98:	70 7f       	andi	r23, 0xF0	; 240
     f9a:	76 27       	eor	r23, r22
     f9c:	60 7f       	andi	r22, 0xF0	; 240
     f9e:	76 27       	eor	r23, r22
     fa0:	8a ec       	ldi	r24, 0xCA	; 202
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     fa8:	60 91 fa 02 	lds	r22, 0x02FA
     fac:	70 91 fb 02 	lds	r23, 0x02FB
     fb0:	62 95       	swap	r22
     fb2:	72 95       	swap	r23
     fb4:	70 7f       	andi	r23, 0xF0	; 240
     fb6:	76 27       	eor	r23, r22
     fb8:	60 7f       	andi	r22, 0xF0	; 240
     fba:	76 27       	eor	r23, r22
     fbc:	8b ec       	ldi	r24, 0xCB	; 203
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     fc4:	60 91 00 03 	lds	r22, 0x0300
     fc8:	70 91 01 03 	lds	r23, 0x0301
     fcc:	62 95       	swap	r22
     fce:	72 95       	swap	r23
     fd0:	70 7f       	andi	r23, 0xF0	; 240
     fd2:	76 27       	eor	r23, r22
     fd4:	60 7f       	andi	r22, 0xF0	; 240
     fd6:	76 27       	eor	r23, r22
     fd8:	88 ec       	ldi	r24, 0xC8	; 200
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     fe0:	60 91 fe 02 	lds	r22, 0x02FE
     fe4:	70 91 ff 02 	lds	r23, 0x02FF
     fe8:	62 95       	swap	r22
     fea:	72 95       	swap	r23
     fec:	70 7f       	andi	r23, 0xF0	; 240
     fee:	76 27       	eor	r23, r22
     ff0:	60 7f       	andi	r22, 0xF0	; 240
     ff2:	76 27       	eor	r23, r22
     ff4:	89 ec       	ldi	r24, 0xC9	; 201
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     ffc:	8c 2f       	mov	r24, r28
     ffe:	6f e0       	ldi	r22, 0x0F	; 15
    1000:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
    1004:	65 e5       	ldi	r22, 0x55	; 85
    1006:	73 e0       	ldi	r23, 0x03	; 3
    1008:	0e 94 89 16 	call	0x2d12	; 0x2d12 <interpolate_pitch_cv>
    100c:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
    100e:	86 ee       	ldi	r24, 0xE6	; 230
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
    1016:	8c 2f       	mov	r24, r28
    1018:	60 ef       	ldi	r22, 0xF0	; 240
    101a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
    101e:	63 e3       	ldi	r22, 0x33	; 51
    1020:	73 e0       	ldi	r23, 0x03	; 3
    1022:	0e 94 89 16 	call	0x2d12	; 0x2d12 <interpolate_pitch_cv>
    1026:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
    1028:	85 ee       	ldi	r24, 0xE5	; 229
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
    1030:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
    1032:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
    1034:	20 91 88 01 	lds	r18, 0x0188
    1038:	80 91 89 01 	lds	r24, 0x0189
    103c:	38 2f       	mov	r19, r24
    103e:	33 70       	andi	r19, 0x03	; 3
    1040:	83 ef       	ldi	r24, 0xF3	; 243
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	82 1b       	sub	r24, r18
    1046:	93 0b       	sbc	r25, r19
    1048:	90 93 d8 03 	sts	0x03D8, r25
    104c:	80 93 d7 03 	sts	0x03D7, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
    1050:	20 91 d9 03 	lds	r18, 0x03D9
    1054:	30 91 da 03 	lds	r19, 0x03DA
    1058:	82 17       	cp	r24, r18
    105a:	93 07       	cpc	r25, r19
    105c:	11 f0       	breq	.+4      	; 0x1062 <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
    105e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
    1062:	80 91 d7 03 	lds	r24, 0x03D7
    1066:	90 91 d8 03 	lds	r25, 0x03D8
    106a:	90 93 da 03 	sts	0x03DA, r25
    106e:	80 93 d9 03 	sts	0x03D9, r24
	
}			
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
    1078:	84 b1       	in	r24, 0x04	; 4
    107a:	87 62       	ori	r24, 0x27	; 39
    107c:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
    107e:	ec ed       	ldi	r30, 0xDC	; 220
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8c 65       	ori	r24, 0x5C	; 92
    1086:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
    1088:	85 b1       	in	r24, 0x05	; 5
    108a:	89 7d       	andi	r24, 0xD9	; 217
    108c:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
    108e:	ed ed       	ldi	r30, 0xDD	; 221
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	83 7f       	andi	r24, 0xF3	; 243
    1096:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
    1098:	80 e5       	ldi	r24, 0x50	; 80
    109a:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
    109c:	80 81       	ld	r24, Z
    109e:	87 7f       	andi	r24, 0xF7	; 247
    10a0:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
    10a2:	80 81       	ld	r24, Z
    10a4:	87 7f       	andi	r24, 0xF7	; 247
    10a6:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
    10a8:	80 81       	ld	r24, Z
    10aa:	88 60       	ori	r24, 0x08	; 8
    10ac:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 7e       	andi	r24, 0xEF	; 239
    10b2:	80 83       	st	Z, r24
	
}
    10b4:	08 95       	ret

000010b6 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
    10b6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    10b8:	0d b4       	in	r0, 0x2d	; 45
    10ba:	07 fe       	sbrs	r0, 7
    10bc:	fd cf       	rjmp	.-6      	; 0x10b8 <spi_shift_byte+0x2>
	return SPDR;
    10be:	8e b5       	in	r24, 0x2e	; 46
	
}
    10c0:	08 95       	ret

000010c2 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
    10c2:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
    10c4:	80 91 06 03 	lds	r24, 0x0306
    10c8:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
    10cc:	90 91 c5 02 	lds	r25, 0x02C5
    10d0:	98 2b       	or	r25, r24
    10d2:	90 93 c5 02 	sts	0x02C5, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
    10d6:	20 91 c3 02 	lds	r18, 0x02C3
    10da:	98 2f       	mov	r25, r24
    10dc:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
    10de:	89 2f       	mov	r24, r25
    10e0:	82 27       	eor	r24, r18
    10e2:	80 93 c3 02 	sts	0x02C3, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
    10e6:	89 23       	and	r24, r25
    10e8:	80 93 c4 02 	sts	0x02C4, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
    10ec:	90 91 82 03 	lds	r25, 0x0382
    10f0:	89 27       	eor	r24, r25
    10f2:	80 93 82 03 	sts	0x0382, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
    10f6:	80 91 05 03 	lds	r24, 0x0305
    10fa:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
    10fe:	90 91 c5 02 	lds	r25, 0x02C5
    1102:	98 2b       	or	r25, r24
    1104:	90 93 c5 02 	sts	0x02C5, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
    1108:	20 91 c1 02 	lds	r18, 0x02C1
    110c:	98 2f       	mov	r25, r24
    110e:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
    1110:	89 2f       	mov	r24, r25
    1112:	82 27       	eor	r24, r18
    1114:	80 93 c1 02 	sts	0x02C1, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
    1118:	89 23       	and	r24, r25
    111a:	80 93 c2 02 	sts	0x02C2, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
    111e:	90 91 83 03 	lds	r25, 0x0383
    1122:	89 27       	eor	r24, r25
    1124:	80 93 83 03 	sts	0x0383, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
    1128:	80 91 04 03 	lds	r24, 0x0304
    112c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
    1130:	80 91 03 03 	lds	r24, 0x0303
    1134:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    1138:	80 91 0b 03 	lds	r24, 0x030B
    113c:	83 30       	cpi	r24, 0x03	; 3
    113e:	11 f4       	brne	.+4      	; 0x1144 <__stack+0x45>
    1140:	20 e8       	ldi	r18, 0x80	; 128
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <__stack+0x47>
    1144:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
    1146:	80 91 84 03 	lds	r24, 0x0384
    114a:	88 1f       	adc	r24, r24
    114c:	88 27       	eor	r24, r24
    114e:	88 1f       	adc	r24, r24
    1150:	82 95       	swap	r24
    1152:	88 0f       	add	r24, r24
    1154:	88 0f       	add	r24, r24
    1156:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    1158:	90 91 02 03 	lds	r25, 0x0302
    115c:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
    115e:	82 2b       	or	r24, r18
    1160:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
    1164:	ed ed       	ldi	r30, 0xDD	; 221
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	87 7f       	andi	r24, 0xF7	; 247
    116c:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
    116e:	80 81       	ld	r24, Z
    1170:	88 60       	ori	r24, 0x08	; 8
    1172:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
    1174:	2d 98       	cbi	0x05, 5	; 5
			
			

	
    1176:	08 95       	ret

00001178 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
    1178:	a0 e0       	ldi	r26, 0x00	; 0
    117a:	b1 e0       	ldi	r27, 0x01	; 1
    117c:	9d 01       	movw	r18, r26
    117e:	24 5c       	subi	r18, 0xC4	; 196
    1180:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
    1182:	ed 91       	ld	r30, X+
    1184:	fc 91       	ld	r31, X
    1186:	11 97       	sbiw	r26, 0x01	; 1
    1188:	80 81       	ld	r24, Z
    118a:	41 81       	ldd	r20, Z+1	; 0x01
    118c:	94 2f       	mov	r25, r20
    118e:	93 70       	andi	r25, 0x03	; 3
    1190:	95 95       	asr	r25
    1192:	87 95       	ror	r24
    1194:	95 95       	asr	r25
    1196:	87 95       	ror	r24
    1198:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
    119a:	ed 91       	ld	r30, X+
    119c:	fd 91       	ld	r31, X+
    119e:	83 81       	ldd	r24, Z+3	; 0x03
    11a0:	80 68       	ori	r24, 0x80	; 128
    11a2:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
    11a4:	a2 17       	cp	r26, r18
    11a6:	b3 07       	cpc	r27, r19
    11a8:	61 f7       	brne	.-40     	; 0x1182 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
    11aa:	08 95       	ret

000011ac <unlock_pots>:

void unlock_pots(void) {
    11ac:	e0 e0       	ldi	r30, 0x00	; 0
    11ae:	f1 e0       	ldi	r31, 0x01	; 1
    11b0:	cf 01       	movw	r24, r30
    11b2:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
    11b4:	a1 91       	ld	r26, Z+
    11b6:	b1 91       	ld	r27, Z+
    11b8:	13 96       	adiw	r26, 0x03	; 3
    11ba:	2c 91       	ld	r18, X
    11bc:	13 97       	sbiw	r26, 0x03	; 3
    11be:	2f 77       	andi	r18, 0x7F	; 127
    11c0:	13 96       	adiw	r26, 0x03	; 3
    11c2:	2c 93       	st	X, r18
    11c4:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
    11c6:	e8 17       	cp	r30, r24
    11c8:	f9 07       	cpc	r31, r25
    11ca:	a1 f7       	brne	.-24     	; 0x11b4 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
    11cc:	08 95       	ret

000011ce <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	ab 97       	sbiw	r28, 0x2b	; 43
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
    11e6:	e2 ee       	ldi	r30, 0xE2	; 226
    11e8:	f2 e0       	ldi	r31, 0x02	; 2
    11ea:	20 91 e2 02 	lds	r18, 0x02E2
    11ee:	82 2f       	mov	r24, r18
    11f0:	82 95       	swap	r24
    11f2:	80 7f       	andi	r24, 0xF0	; 240
    11f4:	22 95       	swap	r18
    11f6:	2f 70       	andi	r18, 0x0F	; 15
    11f8:	90 91 e3 02 	lds	r25, 0x02E3
    11fc:	93 70       	andi	r25, 0x03	; 3
    11fe:	92 95       	swap	r25
    1200:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
    1202:	df 01       	movw	r26, r30
    1204:	5a 97       	sbiw	r26, 0x1a	; 26
    1206:	3c 91       	ld	r19, X
    1208:	53 2f       	mov	r21, r19
    120a:	55 0f       	add	r21, r21
    120c:	55 0f       	add	r21, r21
    120e:	4a 81       	ldd	r20, Y+2	; 0x02
    1210:	43 70       	andi	r20, 0x03	; 3
    1212:	45 2b       	or	r20, r21
    1214:	4a 83       	std	Y+2, r20	; 0x02
    1216:	63 2f       	mov	r22, r19
    1218:	62 95       	swap	r22
    121a:	66 95       	lsr	r22
    121c:	66 95       	lsr	r22
    121e:	63 70       	andi	r22, 0x03	; 3
    1220:	11 96       	adiw	r26, 0x01	; 1
    1222:	4c 91       	ld	r20, X
    1224:	43 70       	andi	r20, 0x03	; 3
    1226:	44 0f       	add	r20, r20
    1228:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    122a:	df 01       	movw	r26, r30
    122c:	58 97       	sbiw	r26, 0x18	; 24
    122e:	3c 91       	ld	r19, X
    1230:	53 2f       	mov	r21, r19
    1232:	52 95       	swap	r21
    1234:	50 7f       	andi	r21, 0xF0	; 240
    1236:	46 2b       	or	r20, r22
    1238:	45 2b       	or	r20, r21
    123a:	4b 83       	std	Y+3, r20	; 0x03
    123c:	63 2f       	mov	r22, r19
    123e:	62 95       	swap	r22
    1240:	6f 70       	andi	r22, 0x0F	; 15
    1242:	11 96       	adiw	r26, 0x01	; 1
    1244:	4c 91       	ld	r20, X
    1246:	43 70       	andi	r20, 0x03	; 3
    1248:	42 95       	swap	r20
    124a:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    124c:	df 01       	movw	r26, r30
    124e:	56 97       	sbiw	r26, 0x16	; 22
    1250:	3c 91       	ld	r19, X
    1252:	53 2f       	mov	r21, r19
    1254:	52 95       	swap	r21
    1256:	55 0f       	add	r21, r21
    1258:	55 0f       	add	r21, r21
    125a:	50 7c       	andi	r21, 0xC0	; 192
    125c:	46 2b       	or	r20, r22
    125e:	45 2b       	or	r20, r21
    1260:	4c 83       	std	Y+4, r20	; 0x04
    1262:	11 96       	adiw	r26, 0x01	; 1
    1264:	4c 91       	ld	r20, X
    1266:	42 95       	swap	r20
    1268:	44 0f       	add	r20, r20
    126a:	44 0f       	add	r20, r20
    126c:	40 7c       	andi	r20, 0xC0	; 192
    126e:	36 95       	lsr	r19
    1270:	36 95       	lsr	r19
    1272:	34 2b       	or	r19, r20
    1274:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    1276:	df 01       	movw	r26, r30
    1278:	54 97       	sbiw	r26, 0x14	; 20
    127a:	3c 91       	ld	r19, X
    127c:	3e 83       	std	Y+6, r19	; 0x06
    127e:	11 96       	adiw	r26, 0x01	; 1
    1280:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    1282:	df 01       	movw	r26, r30
    1284:	52 97       	sbiw	r26, 0x12	; 18
    1286:	3c 91       	ld	r19, X
    1288:	53 2f       	mov	r21, r19
    128a:	55 0f       	add	r21, r21
    128c:	55 0f       	add	r21, r21
    128e:	43 70       	andi	r20, 0x03	; 3
    1290:	45 2b       	or	r20, r21
    1292:	4f 83       	std	Y+7, r20	; 0x07
    1294:	63 2f       	mov	r22, r19
    1296:	62 95       	swap	r22
    1298:	66 95       	lsr	r22
    129a:	66 95       	lsr	r22
    129c:	63 70       	andi	r22, 0x03	; 3
    129e:	11 96       	adiw	r26, 0x01	; 1
    12a0:	4c 91       	ld	r20, X
    12a2:	43 70       	andi	r20, 0x03	; 3
    12a4:	44 0f       	add	r20, r20
    12a6:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    12a8:	df 01       	movw	r26, r30
    12aa:	50 97       	sbiw	r26, 0x10	; 16
    12ac:	3c 91       	ld	r19, X
    12ae:	53 2f       	mov	r21, r19
    12b0:	52 95       	swap	r21
    12b2:	50 7f       	andi	r21, 0xF0	; 240
    12b4:	46 2b       	or	r20, r22
    12b6:	45 2b       	or	r20, r21
    12b8:	48 87       	std	Y+8, r20	; 0x08
    12ba:	63 2f       	mov	r22, r19
    12bc:	62 95       	swap	r22
    12be:	6f 70       	andi	r22, 0x0F	; 15
    12c0:	11 96       	adiw	r26, 0x01	; 1
    12c2:	4c 91       	ld	r20, X
    12c4:	43 70       	andi	r20, 0x03	; 3
    12c6:	42 95       	swap	r20
    12c8:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    12ca:	df 01       	movw	r26, r30
    12cc:	1e 97       	sbiw	r26, 0x0e	; 14
    12ce:	3c 91       	ld	r19, X
    12d0:	53 2f       	mov	r21, r19
    12d2:	52 95       	swap	r21
    12d4:	55 0f       	add	r21, r21
    12d6:	55 0f       	add	r21, r21
    12d8:	50 7c       	andi	r21, 0xC0	; 192
    12da:	46 2b       	or	r20, r22
    12dc:	45 2b       	or	r20, r21
    12de:	49 87       	std	Y+9, r20	; 0x09
    12e0:	11 96       	adiw	r26, 0x01	; 1
    12e2:	4c 91       	ld	r20, X
    12e4:	42 95       	swap	r20
    12e6:	44 0f       	add	r20, r20
    12e8:	44 0f       	add	r20, r20
    12ea:	40 7c       	andi	r20, 0xC0	; 192
    12ec:	36 95       	lsr	r19
    12ee:	36 95       	lsr	r19
    12f0:	34 2b       	or	r19, r20
    12f2:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    12f4:	df 01       	movw	r26, r30
    12f6:	1c 97       	sbiw	r26, 0x0c	; 12
    12f8:	3c 91       	ld	r19, X
    12fa:	3b 87       	std	Y+11, r19	; 0x0b
    12fc:	11 96       	adiw	r26, 0x01	; 1
    12fe:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1300:	df 01       	movw	r26, r30
    1302:	1a 97       	sbiw	r26, 0x0a	; 10
    1304:	3c 91       	ld	r19, X
    1306:	53 2f       	mov	r21, r19
    1308:	55 0f       	add	r21, r21
    130a:	55 0f       	add	r21, r21
    130c:	43 70       	andi	r20, 0x03	; 3
    130e:	45 2b       	or	r20, r21
    1310:	4c 87       	std	Y+12, r20	; 0x0c
    1312:	63 2f       	mov	r22, r19
    1314:	62 95       	swap	r22
    1316:	66 95       	lsr	r22
    1318:	66 95       	lsr	r22
    131a:	63 70       	andi	r22, 0x03	; 3
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	4c 91       	ld	r20, X
    1320:	43 70       	andi	r20, 0x03	; 3
    1322:	44 0f       	add	r20, r20
    1324:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    1326:	df 01       	movw	r26, r30
    1328:	18 97       	sbiw	r26, 0x08	; 8
    132a:	3c 91       	ld	r19, X
    132c:	53 2f       	mov	r21, r19
    132e:	52 95       	swap	r21
    1330:	50 7f       	andi	r21, 0xF0	; 240
    1332:	46 2b       	or	r20, r22
    1334:	45 2b       	or	r20, r21
    1336:	4d 87       	std	Y+13, r20	; 0x0d
    1338:	63 2f       	mov	r22, r19
    133a:	62 95       	swap	r22
    133c:	6f 70       	andi	r22, 0x0F	; 15
    133e:	11 96       	adiw	r26, 0x01	; 1
    1340:	4c 91       	ld	r20, X
    1342:	43 70       	andi	r20, 0x03	; 3
    1344:	42 95       	swap	r20
    1346:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    1348:	df 01       	movw	r26, r30
    134a:	16 97       	sbiw	r26, 0x06	; 6
    134c:	3c 91       	ld	r19, X
    134e:	53 2f       	mov	r21, r19
    1350:	52 95       	swap	r21
    1352:	55 0f       	add	r21, r21
    1354:	55 0f       	add	r21, r21
    1356:	50 7c       	andi	r21, 0xC0	; 192
    1358:	46 2b       	or	r20, r22
    135a:	45 2b       	or	r20, r21
    135c:	4e 87       	std	Y+14, r20	; 0x0e
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	4c 91       	ld	r20, X
    1362:	42 95       	swap	r20
    1364:	44 0f       	add	r20, r20
    1366:	44 0f       	add	r20, r20
    1368:	40 7c       	andi	r20, 0xC0	; 192
    136a:	36 95       	lsr	r19
    136c:	36 95       	lsr	r19
    136e:	34 2b       	or	r19, r20
    1370:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    1372:	df 01       	movw	r26, r30
    1374:	14 97       	sbiw	r26, 0x04	; 4
    1376:	3c 91       	ld	r19, X
    1378:	38 8b       	std	Y+16, r19	; 0x10
    137a:	11 96       	adiw	r26, 0x01	; 1
    137c:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    137e:	df 01       	movw	r26, r30
    1380:	12 97       	sbiw	r26, 0x02	; 2
    1382:	3c 91       	ld	r19, X
    1384:	53 2f       	mov	r21, r19
    1386:	55 0f       	add	r21, r21
    1388:	55 0f       	add	r21, r21
    138a:	43 70       	andi	r20, 0x03	; 3
    138c:	45 2b       	or	r20, r21
    138e:	49 8b       	std	Y+17, r20	; 0x11
    1390:	32 95       	swap	r19
    1392:	36 95       	lsr	r19
    1394:	36 95       	lsr	r19
    1396:	33 70       	andi	r19, 0x03	; 3
    1398:	11 96       	adiw	r26, 0x01	; 1
    139a:	4c 91       	ld	r20, X
    139c:	43 70       	andi	r20, 0x03	; 3
    139e:	44 0f       	add	r20, r20
    13a0:	44 0f       	add	r20, r20
    13a2:	83 2b       	or	r24, r19
    13a4:	84 2b       	or	r24, r20
    13a6:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    13a8:	80 91 e4 02 	lds	r24, 0x02E4
    13ac:	38 2f       	mov	r19, r24
    13ae:	32 95       	swap	r19
    13b0:	33 0f       	add	r19, r19
    13b2:	33 0f       	add	r19, r19
    13b4:	30 7c       	andi	r19, 0xC0	; 192
    13b6:	92 2b       	or	r25, r18
    13b8:	93 2b       	or	r25, r19
    13ba:	9b 8b       	std	Y+19, r25	; 0x13
    13bc:	93 81       	ldd	r25, Z+3	; 0x03
    13be:	92 95       	swap	r25
    13c0:	99 0f       	add	r25, r25
    13c2:	99 0f       	add	r25, r25
    13c4:	90 7c       	andi	r25, 0xC0	; 192
    13c6:	86 95       	lsr	r24
    13c8:	86 95       	lsr	r24
    13ca:	89 2b       	or	r24, r25
    13cc:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    13ce:	80 91 e6 02 	lds	r24, 0x02E6
    13d2:	8d 8b       	std	Y+21, r24	; 0x15
    13d4:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    13d6:	80 91 e8 02 	lds	r24, 0x02E8
    13da:	28 2f       	mov	r18, r24
    13dc:	22 0f       	add	r18, r18
    13de:	22 0f       	add	r18, r18
    13e0:	93 70       	andi	r25, 0x03	; 3
    13e2:	92 2b       	or	r25, r18
    13e4:	9e 8b       	std	Y+22, r25	; 0x16
    13e6:	38 2f       	mov	r19, r24
    13e8:	32 95       	swap	r19
    13ea:	36 95       	lsr	r19
    13ec:	36 95       	lsr	r19
    13ee:	33 70       	andi	r19, 0x03	; 3
    13f0:	97 81       	ldd	r25, Z+7	; 0x07
    13f2:	93 70       	andi	r25, 0x03	; 3
    13f4:	99 0f       	add	r25, r25
    13f6:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    13f8:	80 91 ea 02 	lds	r24, 0x02EA
    13fc:	28 2f       	mov	r18, r24
    13fe:	22 95       	swap	r18
    1400:	20 7f       	andi	r18, 0xF0	; 240
    1402:	93 2b       	or	r25, r19
    1404:	92 2b       	or	r25, r18
    1406:	9f 8b       	std	Y+23, r25	; 0x17
    1408:	38 2f       	mov	r19, r24
    140a:	32 95       	swap	r19
    140c:	3f 70       	andi	r19, 0x0F	; 15
    140e:	91 85       	ldd	r25, Z+9	; 0x09
    1410:	93 70       	andi	r25, 0x03	; 3
    1412:	92 95       	swap	r25
    1414:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    1416:	80 91 ec 02 	lds	r24, 0x02EC
    141a:	28 2f       	mov	r18, r24
    141c:	22 95       	swap	r18
    141e:	22 0f       	add	r18, r18
    1420:	22 0f       	add	r18, r18
    1422:	20 7c       	andi	r18, 0xC0	; 192
    1424:	93 2b       	or	r25, r19
    1426:	92 2b       	or	r25, r18
    1428:	98 8f       	std	Y+24, r25	; 0x18
    142a:	93 85       	ldd	r25, Z+11	; 0x0b
    142c:	92 95       	swap	r25
    142e:	99 0f       	add	r25, r25
    1430:	99 0f       	add	r25, r25
    1432:	90 7c       	andi	r25, 0xC0	; 192
    1434:	86 95       	lsr	r24
    1436:	86 95       	lsr	r24
    1438:	89 2b       	or	r24, r25
    143a:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    143c:	80 91 ee 02 	lds	r24, 0x02EE
    1440:	8a 8f       	std	Y+26, r24	; 0x1a
    1442:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    1444:	80 91 f0 02 	lds	r24, 0x02F0
    1448:	28 2f       	mov	r18, r24
    144a:	22 0f       	add	r18, r18
    144c:	22 0f       	add	r18, r18
    144e:	93 70       	andi	r25, 0x03	; 3
    1450:	92 2b       	or	r25, r18
    1452:	9b 8f       	std	Y+27, r25	; 0x1b
    1454:	38 2f       	mov	r19, r24
    1456:	32 95       	swap	r19
    1458:	36 95       	lsr	r19
    145a:	36 95       	lsr	r19
    145c:	33 70       	andi	r19, 0x03	; 3
    145e:	97 85       	ldd	r25, Z+15	; 0x0f
    1460:	93 70       	andi	r25, 0x03	; 3
    1462:	99 0f       	add	r25, r25
    1464:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    1466:	80 91 f2 02 	lds	r24, 0x02F2
    146a:	28 2f       	mov	r18, r24
    146c:	22 95       	swap	r18
    146e:	20 7f       	andi	r18, 0xF0	; 240
    1470:	93 2b       	or	r25, r19
    1472:	92 2b       	or	r25, r18
    1474:	9c 8f       	std	Y+28, r25	; 0x1c
    1476:	38 2f       	mov	r19, r24
    1478:	32 95       	swap	r19
    147a:	3f 70       	andi	r19, 0x0F	; 15
    147c:	91 89       	ldd	r25, Z+17	; 0x11
    147e:	93 70       	andi	r25, 0x03	; 3
    1480:	92 95       	swap	r25
    1482:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    1484:	80 91 f4 02 	lds	r24, 0x02F4
    1488:	28 2f       	mov	r18, r24
    148a:	22 95       	swap	r18
    148c:	22 0f       	add	r18, r18
    148e:	22 0f       	add	r18, r18
    1490:	20 7c       	andi	r18, 0xC0	; 192
    1492:	93 2b       	or	r25, r19
    1494:	92 2b       	or	r25, r18
    1496:	9d 8f       	std	Y+29, r25	; 0x1d
    1498:	93 89       	ldd	r25, Z+19	; 0x13
    149a:	92 95       	swap	r25
    149c:	99 0f       	add	r25, r25
    149e:	99 0f       	add	r25, r25
    14a0:	90 7c       	andi	r25, 0xC0	; 192
    14a2:	86 95       	lsr	r24
    14a4:	86 95       	lsr	r24
    14a6:	89 2b       	or	r24, r25
    14a8:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    14aa:	80 91 f6 02 	lds	r24, 0x02F6
    14ae:	8f 8f       	std	Y+31, r24	; 0x1f
    14b0:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    14b2:	80 91 f8 02 	lds	r24, 0x02F8
    14b6:	28 2f       	mov	r18, r24
    14b8:	22 0f       	add	r18, r18
    14ba:	22 0f       	add	r18, r18
    14bc:	93 70       	andi	r25, 0x03	; 3
    14be:	92 2b       	or	r25, r18
    14c0:	98 a3       	lds	r25, 0x58
    14c2:	38 2f       	mov	r19, r24
    14c4:	32 95       	swap	r19
    14c6:	36 95       	lsr	r19
    14c8:	36 95       	lsr	r19
    14ca:	33 70       	andi	r19, 0x03	; 3
    14cc:	97 89       	ldd	r25, Z+23	; 0x17
    14ce:	93 70       	andi	r25, 0x03	; 3
    14d0:	99 0f       	add	r25, r25
    14d2:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    14d4:	80 91 fa 02 	lds	r24, 0x02FA
    14d8:	28 2f       	mov	r18, r24
    14da:	22 95       	swap	r18
    14dc:	20 7f       	andi	r18, 0xF0	; 240
    14de:	93 2b       	or	r25, r19
    14e0:	92 2b       	or	r25, r18
    14e2:	99 a3       	lds	r25, 0x59
    14e4:	38 2f       	mov	r19, r24
    14e6:	32 95       	swap	r19
    14e8:	3f 70       	andi	r19, 0x0F	; 15
    14ea:	91 8d       	ldd	r25, Z+25	; 0x19
    14ec:	93 70       	andi	r25, 0x03	; 3
    14ee:	92 95       	swap	r25
    14f0:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    14f2:	80 91 fc 02 	lds	r24, 0x02FC
    14f6:	28 2f       	mov	r18, r24
    14f8:	22 95       	swap	r18
    14fa:	22 0f       	add	r18, r18
    14fc:	22 0f       	add	r18, r18
    14fe:	20 7c       	andi	r18, 0xC0	; 192
    1500:	93 2b       	or	r25, r19
    1502:	92 2b       	or	r25, r18
    1504:	9a a3       	lds	r25, 0x5a
    1506:	93 8d       	ldd	r25, Z+27	; 0x1b
    1508:	92 95       	swap	r25
    150a:	99 0f       	add	r25, r25
    150c:	99 0f       	add	r25, r25
    150e:	90 7c       	andi	r25, 0xC0	; 192
    1510:	86 95       	lsr	r24
    1512:	86 95       	lsr	r24
    1514:	89 2b       	or	r24, r25
    1516:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    1518:	80 91 fe 02 	lds	r24, 0x02FE
    151c:	8c a3       	lds	r24, 0x5c
    151e:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    1520:	80 91 00 03 	lds	r24, 0x0300
    1524:	28 2f       	mov	r18, r24
    1526:	22 0f       	add	r18, r18
    1528:	22 0f       	add	r18, r18
    152a:	93 70       	andi	r25, 0x03	; 3
    152c:	92 2b       	or	r25, r18
    152e:	9d a3       	lds	r25, 0x5d
    1530:	82 95       	swap	r24
    1532:	86 95       	lsr	r24
    1534:	86 95       	lsr	r24
    1536:	83 70       	andi	r24, 0x03	; 3
    1538:	2e a1       	lds	r18, 0x4e
    153a:	20 7f       	andi	r18, 0xF0	; 240
    153c:	97 8d       	ldd	r25, Z+31	; 0x1f
    153e:	93 70       	andi	r25, 0x03	; 3
    1540:	99 0f       	add	r25, r25
    1542:	99 0f       	add	r25, r25
    1544:	82 2b       	or	r24, r18
    1546:	89 2b       	or	r24, r25
    1548:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    154a:	80 91 02 03 	lds	r24, 0x0302
    154e:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    1550:	80 91 03 03 	lds	r24, 0x0303
    1554:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    1556:	80 91 04 03 	lds	r24, 0x0304
    155a:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    155c:	80 91 05 03 	lds	r24, 0x0305
    1560:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    1562:	80 91 06 03 	lds	r24, 0x0306
    1566:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    1568:	0e 94 bc 08 	call	0x1178	; 0x1178 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    156c:	80 91 84 03 	lds	r24, 0x0384
    1570:	8f 77       	andi	r24, 0x7F	; 127
    1572:	80 93 84 03 	sts	0x0384, r24
	current_patch.mode = MEMORY;
    1576:	10 92 0b 03 	sts	0x030B, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    157a:	21 2f       	mov	r18, r17
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	8b e2       	ldi	r24, 0x2B	; 43
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	28 9f       	mul	r18, r24
    1584:	b0 01       	movw	r22, r0
    1586:	29 9f       	mul	r18, r25
    1588:	70 0d       	add	r23, r0
    158a:	38 9f       	mul	r19, r24
    158c:	70 0d       	add	r23, r0
    158e:	11 24       	eor	r1, r1
    1590:	60 50       	subi	r22, 0x00	; 0
    1592:	70 40       	sbci	r23, 0x00	; 0
    1594:	ce 01       	movw	r24, r28
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	4b e2       	ldi	r20, 0x2B	; 43
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__eeupd_block_m6450a>
}	
    15a0:	ab 96       	adiw	r28, 0x2b	; 43
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	08 95       	ret

000015b4 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	c3 54       	subi	r28, 0x43	; 67
    15c0:	d0 40       	sbci	r29, 0x00	; 0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	2b e2       	ldi	r18, 0x2B	; 43
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	82 9f       	mul	r24, r18
    15d4:	b0 01       	movw	r22, r0
    15d6:	83 9f       	mul	r24, r19
    15d8:	70 0d       	add	r23, r0
    15da:	92 9f       	mul	r25, r18
    15dc:	70 0d       	add	r23, r0
    15de:	11 24       	eor	r1, r1
    15e0:	60 50       	subi	r22, 0x00	; 0
    15e2:	70 40       	sbci	r23, 0x00	; 0
    15e4:	ce 01       	movw	r24, r28
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	4b e2       	ldi	r20, 0x2B	; 43
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    15f0:	e2 ee       	ldi	r30, 0xE2	; 226
    15f2:	f2 e0       	ldi	r31, 0x02	; 2
    15f4:	8a 89       	ldd	r24, Y+18	; 0x12
    15f6:	28 2f       	mov	r18, r24
    15f8:	22 95       	swap	r18
    15fa:	2f 70       	andi	r18, 0x0F	; 15
    15fc:	9b 89       	ldd	r25, Y+19	; 0x13
    15fe:	39 2f       	mov	r19, r25
    1600:	32 95       	swap	r19
    1602:	30 7f       	andi	r19, 0xF0	; 240
    1604:	32 2b       	or	r19, r18
    1606:	29 2f       	mov	r18, r25
    1608:	22 95       	swap	r18
    160a:	2f 70       	andi	r18, 0x0F	; 15
    160c:	23 70       	andi	r18, 0x03	; 3
    160e:	30 93 e2 02 	sts	0x02E2, r19
    1612:	20 93 e3 02 	sts	0x02E3, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    1616:	df 01       	movw	r26, r30
    1618:	5a 97       	sbiw	r26, 0x1a	; 26
    161a:	4a 81       	ldd	r20, Y+2	; 0x02
    161c:	46 95       	lsr	r20
    161e:	46 95       	lsr	r20
    1620:	2b 81       	ldd	r18, Y+3	; 0x03
    1622:	32 2f       	mov	r19, r18
    1624:	32 95       	swap	r19
    1626:	33 0f       	add	r19, r19
    1628:	33 0f       	add	r19, r19
    162a:	30 7c       	andi	r19, 0xC0	; 192
    162c:	43 2b       	or	r20, r19
    162e:	32 2f       	mov	r19, r18
    1630:	36 95       	lsr	r19
    1632:	36 95       	lsr	r19
    1634:	33 70       	andi	r19, 0x03	; 3
    1636:	4c 93       	st	X, r20
    1638:	11 96       	adiw	r26, 0x01	; 1
    163a:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    163c:	df 01       	movw	r26, r30
    163e:	58 97       	sbiw	r26, 0x18	; 24
    1640:	32 2f       	mov	r19, r18
    1642:	32 95       	swap	r19
    1644:	3f 70       	andi	r19, 0x0F	; 15
    1646:	2c 81       	ldd	r18, Y+4	; 0x04
    1648:	42 2f       	mov	r20, r18
    164a:	42 95       	swap	r20
    164c:	40 7f       	andi	r20, 0xF0	; 240
    164e:	43 2b       	or	r20, r19
    1650:	32 2f       	mov	r19, r18
    1652:	32 95       	swap	r19
    1654:	3f 70       	andi	r19, 0x0F	; 15
    1656:	33 70       	andi	r19, 0x03	; 3
    1658:	4c 93       	st	X, r20
    165a:	11 96       	adiw	r26, 0x01	; 1
    165c:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    165e:	df 01       	movw	r26, r30
    1660:	56 97       	sbiw	r26, 0x16	; 22
    1662:	22 95       	swap	r18
    1664:	26 95       	lsr	r18
    1666:	26 95       	lsr	r18
    1668:	23 70       	andi	r18, 0x03	; 3
    166a:	3d 81       	ldd	r19, Y+5	; 0x05
    166c:	43 2f       	mov	r20, r19
    166e:	44 0f       	add	r20, r20
    1670:	44 0f       	add	r20, r20
    1672:	24 2b       	or	r18, r20
    1674:	32 95       	swap	r19
    1676:	36 95       	lsr	r19
    1678:	36 95       	lsr	r19
    167a:	33 70       	andi	r19, 0x03	; 3
    167c:	2c 93       	st	X, r18
    167e:	11 96       	adiw	r26, 0x01	; 1
    1680:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    1682:	df 01       	movw	r26, r30
    1684:	54 97       	sbiw	r26, 0x14	; 20
    1686:	4e 81       	ldd	r20, Y+6	; 0x06
    1688:	2f 81       	ldd	r18, Y+7	; 0x07
    168a:	32 2f       	mov	r19, r18
    168c:	33 70       	andi	r19, 0x03	; 3
    168e:	4c 93       	st	X, r20
    1690:	11 96       	adiw	r26, 0x01	; 1
    1692:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1694:	df 01       	movw	r26, r30
    1696:	52 97       	sbiw	r26, 0x12	; 18
    1698:	32 2f       	mov	r19, r18
    169a:	36 95       	lsr	r19
    169c:	36 95       	lsr	r19
    169e:	28 85       	ldd	r18, Y+8	; 0x08
    16a0:	42 2f       	mov	r20, r18
    16a2:	42 95       	swap	r20
    16a4:	44 0f       	add	r20, r20
    16a6:	44 0f       	add	r20, r20
    16a8:	40 7c       	andi	r20, 0xC0	; 192
    16aa:	43 2b       	or	r20, r19
    16ac:	32 2f       	mov	r19, r18
    16ae:	36 95       	lsr	r19
    16b0:	36 95       	lsr	r19
    16b2:	33 70       	andi	r19, 0x03	; 3
    16b4:	4c 93       	st	X, r20
    16b6:	11 96       	adiw	r26, 0x01	; 1
    16b8:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    16ba:	df 01       	movw	r26, r30
    16bc:	50 97       	sbiw	r26, 0x10	; 16
    16be:	32 2f       	mov	r19, r18
    16c0:	32 95       	swap	r19
    16c2:	3f 70       	andi	r19, 0x0F	; 15
    16c4:	29 85       	ldd	r18, Y+9	; 0x09
    16c6:	42 2f       	mov	r20, r18
    16c8:	42 95       	swap	r20
    16ca:	40 7f       	andi	r20, 0xF0	; 240
    16cc:	43 2b       	or	r20, r19
    16ce:	32 2f       	mov	r19, r18
    16d0:	32 95       	swap	r19
    16d2:	3f 70       	andi	r19, 0x0F	; 15
    16d4:	33 70       	andi	r19, 0x03	; 3
    16d6:	4c 93       	st	X, r20
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    16dc:	df 01       	movw	r26, r30
    16de:	1e 97       	sbiw	r26, 0x0e	; 14
    16e0:	22 95       	swap	r18
    16e2:	26 95       	lsr	r18
    16e4:	26 95       	lsr	r18
    16e6:	23 70       	andi	r18, 0x03	; 3
    16e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ea:	43 2f       	mov	r20, r19
    16ec:	44 0f       	add	r20, r20
    16ee:	44 0f       	add	r20, r20
    16f0:	24 2b       	or	r18, r20
    16f2:	32 95       	swap	r19
    16f4:	36 95       	lsr	r19
    16f6:	36 95       	lsr	r19
    16f8:	33 70       	andi	r19, 0x03	; 3
    16fa:	2c 93       	st	X, r18
    16fc:	11 96       	adiw	r26, 0x01	; 1
    16fe:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    1700:	df 01       	movw	r26, r30
    1702:	1c 97       	sbiw	r26, 0x0c	; 12
    1704:	4b 85       	ldd	r20, Y+11	; 0x0b
    1706:	2c 85       	ldd	r18, Y+12	; 0x0c
    1708:	32 2f       	mov	r19, r18
    170a:	33 70       	andi	r19, 0x03	; 3
    170c:	4c 93       	st	X, r20
    170e:	11 96       	adiw	r26, 0x01	; 1
    1710:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1712:	df 01       	movw	r26, r30
    1714:	1a 97       	sbiw	r26, 0x0a	; 10
    1716:	32 2f       	mov	r19, r18
    1718:	36 95       	lsr	r19
    171a:	36 95       	lsr	r19
    171c:	2d 85       	ldd	r18, Y+13	; 0x0d
    171e:	42 2f       	mov	r20, r18
    1720:	42 95       	swap	r20
    1722:	44 0f       	add	r20, r20
    1724:	44 0f       	add	r20, r20
    1726:	40 7c       	andi	r20, 0xC0	; 192
    1728:	43 2b       	or	r20, r19
    172a:	32 2f       	mov	r19, r18
    172c:	36 95       	lsr	r19
    172e:	36 95       	lsr	r19
    1730:	33 70       	andi	r19, 0x03	; 3
    1732:	4c 93       	st	X, r20
    1734:	11 96       	adiw	r26, 0x01	; 1
    1736:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    1738:	df 01       	movw	r26, r30
    173a:	18 97       	sbiw	r26, 0x08	; 8
    173c:	32 2f       	mov	r19, r18
    173e:	32 95       	swap	r19
    1740:	3f 70       	andi	r19, 0x0F	; 15
    1742:	2e 85       	ldd	r18, Y+14	; 0x0e
    1744:	42 2f       	mov	r20, r18
    1746:	42 95       	swap	r20
    1748:	40 7f       	andi	r20, 0xF0	; 240
    174a:	43 2b       	or	r20, r19
    174c:	32 2f       	mov	r19, r18
    174e:	32 95       	swap	r19
    1750:	3f 70       	andi	r19, 0x0F	; 15
    1752:	33 70       	andi	r19, 0x03	; 3
    1754:	4c 93       	st	X, r20
    1756:	11 96       	adiw	r26, 0x01	; 1
    1758:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    175a:	df 01       	movw	r26, r30
    175c:	16 97       	sbiw	r26, 0x06	; 6
    175e:	22 95       	swap	r18
    1760:	26 95       	lsr	r18
    1762:	26 95       	lsr	r18
    1764:	23 70       	andi	r18, 0x03	; 3
    1766:	3f 85       	ldd	r19, Y+15	; 0x0f
    1768:	43 2f       	mov	r20, r19
    176a:	44 0f       	add	r20, r20
    176c:	44 0f       	add	r20, r20
    176e:	24 2b       	or	r18, r20
    1770:	32 95       	swap	r19
    1772:	36 95       	lsr	r19
    1774:	36 95       	lsr	r19
    1776:	33 70       	andi	r19, 0x03	; 3
    1778:	2c 93       	st	X, r18
    177a:	11 96       	adiw	r26, 0x01	; 1
    177c:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    177e:	df 01       	movw	r26, r30
    1780:	14 97       	sbiw	r26, 0x04	; 4
    1782:	48 89       	ldd	r20, Y+16	; 0x10
    1784:	29 89       	ldd	r18, Y+17	; 0x11
    1786:	32 2f       	mov	r19, r18
    1788:	33 70       	andi	r19, 0x03	; 3
    178a:	4c 93       	st	X, r20
    178c:	11 96       	adiw	r26, 0x01	; 1
    178e:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    1790:	df 01       	movw	r26, r30
    1792:	12 97       	sbiw	r26, 0x02	; 2
    1794:	26 95       	lsr	r18
    1796:	26 95       	lsr	r18
    1798:	38 2f       	mov	r19, r24
    179a:	32 95       	swap	r19
    179c:	33 0f       	add	r19, r19
    179e:	33 0f       	add	r19, r19
    17a0:	30 7c       	andi	r19, 0xC0	; 192
    17a2:	23 2b       	or	r18, r19
    17a4:	86 95       	lsr	r24
    17a6:	86 95       	lsr	r24
    17a8:	83 70       	andi	r24, 0x03	; 3
    17aa:	2c 93       	st	X, r18
    17ac:	11 96       	adiw	r26, 0x01	; 1
    17ae:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    17b0:	92 95       	swap	r25
    17b2:	96 95       	lsr	r25
    17b4:	96 95       	lsr	r25
    17b6:	93 70       	andi	r25, 0x03	; 3
    17b8:	8c 89       	ldd	r24, Y+20	; 0x14
    17ba:	28 2f       	mov	r18, r24
    17bc:	22 0f       	add	r18, r18
    17be:	22 0f       	add	r18, r18
    17c0:	92 2b       	or	r25, r18
    17c2:	82 95       	swap	r24
    17c4:	86 95       	lsr	r24
    17c6:	86 95       	lsr	r24
    17c8:	83 70       	andi	r24, 0x03	; 3
    17ca:	90 93 e4 02 	sts	0x02E4, r25
    17ce:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    17d0:	2d 89       	ldd	r18, Y+21	; 0x15
    17d2:	8e 89       	ldd	r24, Y+22	; 0x16
    17d4:	98 2f       	mov	r25, r24
    17d6:	93 70       	andi	r25, 0x03	; 3
    17d8:	20 93 e6 02 	sts	0x02E6, r18
    17dc:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    17de:	98 2f       	mov	r25, r24
    17e0:	96 95       	lsr	r25
    17e2:	96 95       	lsr	r25
    17e4:	8f 89       	ldd	r24, Y+23	; 0x17
    17e6:	28 2f       	mov	r18, r24
    17e8:	22 95       	swap	r18
    17ea:	22 0f       	add	r18, r18
    17ec:	22 0f       	add	r18, r18
    17ee:	20 7c       	andi	r18, 0xC0	; 192
    17f0:	29 2b       	or	r18, r25
    17f2:	98 2f       	mov	r25, r24
    17f4:	96 95       	lsr	r25
    17f6:	96 95       	lsr	r25
    17f8:	93 70       	andi	r25, 0x03	; 3
    17fa:	20 93 e8 02 	sts	0x02E8, r18
    17fe:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    1800:	98 2f       	mov	r25, r24
    1802:	92 95       	swap	r25
    1804:	9f 70       	andi	r25, 0x0F	; 15
    1806:	88 8d       	ldd	r24, Y+24	; 0x18
    1808:	28 2f       	mov	r18, r24
    180a:	22 95       	swap	r18
    180c:	20 7f       	andi	r18, 0xF0	; 240
    180e:	29 2b       	or	r18, r25
    1810:	98 2f       	mov	r25, r24
    1812:	92 95       	swap	r25
    1814:	9f 70       	andi	r25, 0x0F	; 15
    1816:	93 70       	andi	r25, 0x03	; 3
    1818:	20 93 ea 02 	sts	0x02EA, r18
    181c:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    181e:	82 95       	swap	r24
    1820:	86 95       	lsr	r24
    1822:	86 95       	lsr	r24
    1824:	83 70       	andi	r24, 0x03	; 3
    1826:	99 8d       	ldd	r25, Y+25	; 0x19
    1828:	29 2f       	mov	r18, r25
    182a:	22 0f       	add	r18, r18
    182c:	22 0f       	add	r18, r18
    182e:	82 2b       	or	r24, r18
    1830:	92 95       	swap	r25
    1832:	96 95       	lsr	r25
    1834:	96 95       	lsr	r25
    1836:	93 70       	andi	r25, 0x03	; 3
    1838:	80 93 ec 02 	sts	0x02EC, r24
    183c:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    183e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1840:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1842:	98 2f       	mov	r25, r24
    1844:	93 70       	andi	r25, 0x03	; 3
    1846:	20 93 ee 02 	sts	0x02EE, r18
    184a:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    184c:	98 2f       	mov	r25, r24
    184e:	96 95       	lsr	r25
    1850:	96 95       	lsr	r25
    1852:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1854:	28 2f       	mov	r18, r24
    1856:	22 95       	swap	r18
    1858:	22 0f       	add	r18, r18
    185a:	22 0f       	add	r18, r18
    185c:	20 7c       	andi	r18, 0xC0	; 192
    185e:	29 2b       	or	r18, r25
    1860:	98 2f       	mov	r25, r24
    1862:	96 95       	lsr	r25
    1864:	96 95       	lsr	r25
    1866:	93 70       	andi	r25, 0x03	; 3
    1868:	20 93 f0 02 	sts	0x02F0, r18
    186c:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    186e:	98 2f       	mov	r25, r24
    1870:	92 95       	swap	r25
    1872:	9f 70       	andi	r25, 0x0F	; 15
    1874:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1876:	28 2f       	mov	r18, r24
    1878:	22 95       	swap	r18
    187a:	20 7f       	andi	r18, 0xF0	; 240
    187c:	29 2b       	or	r18, r25
    187e:	98 2f       	mov	r25, r24
    1880:	92 95       	swap	r25
    1882:	9f 70       	andi	r25, 0x0F	; 15
    1884:	93 70       	andi	r25, 0x03	; 3
    1886:	20 93 f2 02 	sts	0x02F2, r18
    188a:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    188c:	82 95       	swap	r24
    188e:	86 95       	lsr	r24
    1890:	86 95       	lsr	r24
    1892:	83 70       	andi	r24, 0x03	; 3
    1894:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1896:	29 2f       	mov	r18, r25
    1898:	22 0f       	add	r18, r18
    189a:	22 0f       	add	r18, r18
    189c:	82 2b       	or	r24, r18
    189e:	92 95       	swap	r25
    18a0:	96 95       	lsr	r25
    18a2:	96 95       	lsr	r25
    18a4:	93 70       	andi	r25, 0x03	; 3
    18a6:	80 93 f4 02 	sts	0x02F4, r24
    18aa:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    18ac:	2f 8d       	ldd	r18, Y+31	; 0x1f
    18ae:	88 a1       	lds	r24, 0x48
    18b0:	98 2f       	mov	r25, r24
    18b2:	93 70       	andi	r25, 0x03	; 3
    18b4:	20 93 f6 02 	sts	0x02F6, r18
    18b8:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    18ba:	98 2f       	mov	r25, r24
    18bc:	96 95       	lsr	r25
    18be:	96 95       	lsr	r25
    18c0:	89 a1       	lds	r24, 0x49
    18c2:	28 2f       	mov	r18, r24
    18c4:	22 95       	swap	r18
    18c6:	22 0f       	add	r18, r18
    18c8:	22 0f       	add	r18, r18
    18ca:	20 7c       	andi	r18, 0xC0	; 192
    18cc:	29 2b       	or	r18, r25
    18ce:	98 2f       	mov	r25, r24
    18d0:	96 95       	lsr	r25
    18d2:	96 95       	lsr	r25
    18d4:	93 70       	andi	r25, 0x03	; 3
    18d6:	20 93 f8 02 	sts	0x02F8, r18
    18da:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    18dc:	98 2f       	mov	r25, r24
    18de:	92 95       	swap	r25
    18e0:	9f 70       	andi	r25, 0x0F	; 15
    18e2:	8a a1       	lds	r24, 0x4a
    18e4:	28 2f       	mov	r18, r24
    18e6:	22 95       	swap	r18
    18e8:	20 7f       	andi	r18, 0xF0	; 240
    18ea:	29 2b       	or	r18, r25
    18ec:	98 2f       	mov	r25, r24
    18ee:	92 95       	swap	r25
    18f0:	9f 70       	andi	r25, 0x0F	; 15
    18f2:	93 70       	andi	r25, 0x03	; 3
    18f4:	20 93 fa 02 	sts	0x02FA, r18
    18f8:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    18fa:	82 95       	swap	r24
    18fc:	86 95       	lsr	r24
    18fe:	86 95       	lsr	r24
    1900:	83 70       	andi	r24, 0x03	; 3
    1902:	9b a1       	lds	r25, 0x4b
    1904:	29 2f       	mov	r18, r25
    1906:	22 0f       	add	r18, r18
    1908:	22 0f       	add	r18, r18
    190a:	82 2b       	or	r24, r18
    190c:	92 95       	swap	r25
    190e:	96 95       	lsr	r25
    1910:	96 95       	lsr	r25
    1912:	93 70       	andi	r25, 0x03	; 3
    1914:	80 93 fc 02 	sts	0x02FC, r24
    1918:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    191a:	2c a1       	lds	r18, 0x4c
    191c:	8d a1       	lds	r24, 0x4d
    191e:	98 2f       	mov	r25, r24
    1920:	93 70       	andi	r25, 0x03	; 3
    1922:	20 93 fe 02 	sts	0x02FE, r18
    1926:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1928:	98 2f       	mov	r25, r24
    192a:	96 95       	lsr	r25
    192c:	96 95       	lsr	r25
    192e:	8e a1       	lds	r24, 0x4e
    1930:	28 2f       	mov	r18, r24
    1932:	22 95       	swap	r18
    1934:	22 0f       	add	r18, r18
    1936:	22 0f       	add	r18, r18
    1938:	20 7c       	andi	r18, 0xC0	; 192
    193a:	29 2b       	or	r18, r25
    193c:	86 95       	lsr	r24
    193e:	86 95       	lsr	r24
    1940:	98 2f       	mov	r25, r24
    1942:	93 70       	andi	r25, 0x03	; 3
    1944:	20 93 00 03 	sts	0x0300, r18
    1948:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    194a:	7f a1       	lds	r23, 0x4f
    194c:	70 93 02 03 	sts	0x0302, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    1950:	68 a5       	lds	r22, 0x68
    1952:	60 93 03 03 	sts	0x0303, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    1956:	89 a5       	lds	r24, 0x69
    1958:	80 93 04 03 	sts	0x0304, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    195c:	9a a5       	lds	r25, 0x6a
    195e:	90 93 05 03 	sts	0x0305, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    1962:	1b a5       	lds	r17, 0x6b
    1964:	10 93 06 03 	sts	0x0306, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1968:	de 01       	movw	r26, r28
    196a:	9c 96       	adiw	r26, 0x2c	; 44
    196c:	ef ef       	ldi	r30, 0xFF	; 255
    196e:	f1 e0       	ldi	r31, 0x01	; 1
    1970:	28 e0       	ldi	r18, 0x08	; 8
    1972:	01 90       	ld	r0, Z+
    1974:	0d 92       	st	X+, r0
    1976:	21 50       	subi	r18, 0x01	; 1
    1978:	e1 f7       	brne	.-8      	; 0x1972 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    197a:	e9 2f       	mov	r30, r25
    197c:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	9f 01       	movw	r18, r30
    1982:	22 0f       	add	r18, r18
    1984:	33 1f       	adc	r19, r19
    1986:	22 0f       	add	r18, r18
    1988:	33 1f       	adc	r19, r19
    198a:	a9 01       	movw	r20, r18
    198c:	44 0f       	add	r20, r20
    198e:	55 1f       	adc	r21, r21
    1990:	44 0f       	add	r20, r20
    1992:	55 1f       	adc	r21, r21
    1994:	44 0f       	add	r20, r20
    1996:	55 1f       	adc	r21, r21
    1998:	42 1b       	sub	r20, r18
    199a:	53 0b       	sbc	r21, r19
    199c:	4e 0f       	add	r20, r30
    199e:	5f 1f       	adc	r21, r31
    19a0:	55 95       	asr	r21
    19a2:	47 95       	ror	r20
    19a4:	55 95       	asr	r21
    19a6:	47 95       	ror	r20
    19a8:	55 95       	asr	r21
    19aa:	47 95       	ror	r20
    19ac:	55 95       	asr	r21
    19ae:	47 95       	ror	r20
    19b0:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    19b2:	fe 01       	movw	r30, r28
    19b4:	e4 0f       	add	r30, r20
    19b6:	f1 1d       	adc	r31, r1
    19b8:	24 a5       	lds	r18, 0x64
    19ba:	20 93 0c 03 	sts	0x030C, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    19be:	de 01       	movw	r26, r28
    19c0:	d4 96       	adiw	r26, 0x34	; 52
    19c2:	e7 e0       	ldi	r30, 0x07	; 7
    19c4:	f2 e0       	ldi	r31, 0x02	; 2
    19c6:	28 e0       	ldi	r18, 0x08	; 8
    19c8:	01 90       	ld	r0, Z+
    19ca:	0d 92       	st	X+, r0
    19cc:	21 50       	subi	r18, 0x01	; 1
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    19d0:	29 2f       	mov	r18, r25
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	20 7e       	andi	r18, 0xE0	; 224
    19d6:	30 70       	andi	r19, 0x00	; 0
    19d8:	35 95       	asr	r19
    19da:	27 95       	ror	r18
    19dc:	35 95       	asr	r19
    19de:	27 95       	ror	r18
    19e0:	35 95       	asr	r19
    19e2:	27 95       	ror	r18
    19e4:	83 70       	andi	r24, 0x03	; 3
    19e6:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    19e8:	42 2f       	mov	r20, r18
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	ca 01       	movw	r24, r20
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	9c 01       	movw	r18, r24
    19f8:	22 0f       	add	r18, r18
    19fa:	33 1f       	adc	r19, r19
    19fc:	22 0f       	add	r18, r18
    19fe:	33 1f       	adc	r19, r19
    1a00:	22 0f       	add	r18, r18
    1a02:	33 1f       	adc	r19, r19
    1a04:	28 1b       	sub	r18, r24
    1a06:	39 0b       	sbc	r19, r25
    1a08:	42 0f       	add	r20, r18
    1a0a:	53 1f       	adc	r21, r19
    1a0c:	ca 01       	movw	r24, r20
    1a0e:	95 95       	asr	r25
    1a10:	87 95       	ror	r24
    1a12:	95 95       	asr	r25
    1a14:	87 95       	ror	r24
    1a16:	95 95       	asr	r25
    1a18:	87 95       	ror	r24
    1a1a:	95 95       	asr	r25
    1a1c:	87 95       	ror	r24
    1a1e:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    1a20:	fe 01       	movw	r30, r28
    1a22:	e8 0f       	add	r30, r24
    1a24:	f1 1d       	adc	r31, r1
    1a26:	84 a9       	sts	0x44, r24
    1a28:	80 93 0d 03 	sts	0x030D, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    1a2c:	de 01       	movw	r26, r28
    1a2e:	dc 96       	adiw	r26, 0x3c	; 60
    1a30:	ef e0       	ldi	r30, 0x0F	; 15
    1a32:	f2 e0       	ldi	r31, 0x02	; 2
    1a34:	88 e0       	ldi	r24, 0x08	; 8
    1a36:	01 90       	ld	r0, Z+
    1a38:	0d 92       	st	X+, r0
    1a3a:	81 50       	subi	r24, 0x01	; 1
    1a3c:	e1 f7       	brne	.-8      	; 0x1a36 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    1a3e:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    1a40:	46 2f       	mov	r20, r22
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	ca 01       	movw	r24, r20
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	9c 01       	movw	r18, r24
    1a50:	22 0f       	add	r18, r18
    1a52:	33 1f       	adc	r19, r19
    1a54:	22 0f       	add	r18, r18
    1a56:	33 1f       	adc	r19, r19
    1a58:	22 0f       	add	r18, r18
    1a5a:	33 1f       	adc	r19, r19
    1a5c:	28 1b       	sub	r18, r24
    1a5e:	39 0b       	sbc	r19, r25
    1a60:	42 0f       	add	r20, r18
    1a62:	53 1f       	adc	r21, r19
    1a64:	ca 01       	movw	r24, r20
    1a66:	95 95       	asr	r25
    1a68:	87 95       	ror	r24
    1a6a:	95 95       	asr	r25
    1a6c:	87 95       	ror	r24
    1a6e:	95 95       	asr	r25
    1a70:	87 95       	ror	r24
    1a72:	95 95       	asr	r25
    1a74:	87 95       	ror	r24
    1a76:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e8 0f       	add	r30, r24
    1a7c:	f1 1d       	adc	r31, r1
    1a7e:	84 ad       	sts	0x64, r24
    1a80:	80 93 0e 03 	sts	0x030E, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1a84:	21 2f       	mov	r18, r17
    1a86:	26 95       	lsr	r18
    1a88:	27 95       	ror	r18
    1a8a:	22 27       	eor	r18, r18
    1a8c:	27 95       	ror	r18
    1a8e:	81 2f       	mov	r24, r17
    1a90:	81 70       	andi	r24, 0x01	; 1
    1a92:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1a94:	81 2f       	mov	r24, r17
    1a96:	86 95       	lsr	r24
    1a98:	86 95       	lsr	r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	81 70       	andi	r24, 0x01	; 1
    1a9e:	90 70       	andi	r25, 0x00	; 0
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1aa8:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1aaa:	81 2f       	mov	r24, r17
    1aac:	86 95       	lsr	r24
    1aae:	86 95       	lsr	r24
    1ab0:	86 95       	lsr	r24
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	81 70       	andi	r24, 0x01	; 1
    1ab6:	90 70       	andi	r25, 0x00	; 0
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1abc:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1abe:	81 2f       	mov	r24, r17
    1ac0:	82 95       	swap	r24
    1ac2:	8f 70       	andi	r24, 0x0F	; 15
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	82 95       	swap	r24
    1acc:	92 95       	swap	r25
    1ace:	90 7f       	andi	r25, 0xF0	; 240
    1ad0:	98 27       	eor	r25, r24
    1ad2:	80 7f       	andi	r24, 0xF0	; 240
    1ad4:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1ad6:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    1ad8:	81 2f       	mov	r24, r17
    1ada:	82 95       	swap	r24
    1adc:	86 95       	lsr	r24
    1ade:	87 70       	andi	r24, 0x07	; 7
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	81 70       	andi	r24, 0x01	; 1
    1ae4:	90 70       	andi	r25, 0x00	; 0
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	82 95       	swap	r24
    1aec:	92 95       	swap	r25
    1aee:	90 7f       	andi	r25, 0xF0	; 240
    1af0:	98 27       	eor	r25, r24
    1af2:	80 7f       	andi	r24, 0xF0	; 240
    1af4:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1af6:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1af8:	81 2f       	mov	r24, r17
    1afa:	82 95       	swap	r24
    1afc:	86 95       	lsr	r24
    1afe:	86 95       	lsr	r24
    1b00:	83 70       	andi	r24, 0x03	; 3
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	81 70       	andi	r24, 0x01	; 1
    1b06:	90 70       	andi	r25, 0x00	; 0
    1b08:	00 24       	eor	r0, r0
    1b0a:	96 95       	lsr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	07 94       	ror	r0
    1b10:	96 95       	lsr	r25
    1b12:	87 95       	ror	r24
    1b14:	07 94       	ror	r0
    1b16:	98 2f       	mov	r25, r24
    1b18:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1b1a:	82 2b       	or	r24, r18
    1b1c:	80 93 82 03 	sts	0x0382, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    1b20:	87 2f       	mov	r24, r23
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	81 70       	andi	r24, 0x01	; 1
    1b26:	90 70       	andi	r25, 0x00	; 0
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1b34:	90 91 84 03 	lds	r25, 0x0384
    1b38:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1b3a:	89 2b       	or	r24, r25
    1b3c:	11 1f       	adc	r17, r17
    1b3e:	11 27       	eor	r17, r17
    1b40:	11 1f       	adc	r17, r17
    1b42:	11 0f       	add	r17, r17
    1b44:	11 0f       	add	r17, r17
    1b46:	81 2b       	or	r24, r17
    1b48:	80 93 84 03 	sts	0x0384, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1b4c:	0e 94 bc 08 	call	0x1178	; 0x1178 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    1b50:	80 91 84 03 	lds	r24, 0x0384
    1b54:	8f 77       	andi	r24, 0x7F	; 127
    1b56:	80 93 84 03 	sts	0x0384, r24
	
	current_patch.mode = MEMORY;
    1b5a:	10 92 0b 03 	sts	0x030B, r1
	
}
    1b5e:	cd 5b       	subi	r28, 0xBD	; 189
    1b60:	df 4f       	sbci	r29, 0xFF	; 255
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	08 95       	ret

00001b74 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1b74:	90 91 0c 03 	lds	r25, 0x030C
	if (vco == VCO2) n = octave_index.vco2;
    1b78:	60 3f       	cpi	r22, 0xF0	; 240
    1b7a:	11 f4       	brne	.+4      	; 0x1b80 <transpose_note+0xc>
    1b7c:	90 91 0d 03 	lds	r25, 0x030D

	note = (n*12) + note; //calculate MIDI note after octave addition
    1b80:	29 2f       	mov	r18, r25
    1b82:	22 0f       	add	r18, r18
    1b84:	92 0f       	add	r25, r18
    1b86:	99 0f       	add	r25, r25
    1b88:	99 0f       	add	r25, r25
    1b8a:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1b8c:	89 38       	cpi	r24, 0x89	; 137
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <transpose_note+0x1e>
    1b90:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1b92:	08 95       	ret

00001b94 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1b94:	80 91 82 03 	lds	r24, 0x0382
    1b98:	98 2f       	mov	r25, r24
    1b9a:	96 95       	lsr	r25
    1b9c:	96 95       	lsr	r25
    1b9e:	96 95       	lsr	r25
    1ba0:	90 ff       	sbrs	r25, 0
    1ba2:	0e c0       	rjmp	.+28     	; 0x1bc0 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1ba4:	90 91 0c 03 	lds	r25, 0x030C
    1ba8:	9f 5f       	subi	r25, 0xFF	; 255
    1baa:	90 93 0c 03 	sts	0x030C, r25
    1bae:	95 30       	cpi	r25, 0x05	; 5
    1bb0:	19 f4       	brne	.+6      	; 0x1bb8 <update_octave_range+0x24>
    1bb2:	94 e0       	ldi	r25, 0x04	; 4
    1bb4:	90 93 0c 03 	sts	0x030C, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1bb8:	98 e0       	ldi	r25, 0x08	; 8
    1bba:	89 27       	eor	r24, r25
    1bbc:	80 93 82 03 	sts	0x0382, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1bc0:	80 91 83 03 	lds	r24, 0x0383
    1bc4:	98 2f       	mov	r25, r24
    1bc6:	96 95       	lsr	r25
    1bc8:	96 95       	lsr	r25
    1bca:	96 95       	lsr	r25
    1bcc:	90 ff       	sbrs	r25, 0
    1bce:	0b c0       	rjmp	.+22     	; 0x1be6 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1bd0:	90 91 0c 03 	lds	r25, 0x030C
    1bd4:	99 23       	and	r25, r25
    1bd6:	19 f0       	breq	.+6      	; 0x1bde <update_octave_range+0x4a>
    1bd8:	91 50       	subi	r25, 0x01	; 1
    1bda:	90 93 0c 03 	sts	0x030C, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1bde:	98 e0       	ldi	r25, 0x08	; 8
    1be0:	89 27       	eor	r24, r25
    1be2:	80 93 83 03 	sts	0x0383, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1be6:	80 91 0c 03 	lds	r24, 0x030C
    1bea:	e1 e2       	ldi	r30, 0x21	; 33
    1bec:	f2 e0       	ldi	r31, 0x02	; 2
    1bee:	e8 0f       	add	r30, r24
    1bf0:	f1 1d       	adc	r31, r1
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	00 80       	ld	r0, Z
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <update_octave_range+0x6a>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <update_octave_range+0x66>
    1c02:	58 2f       	mov	r21, r24
    1c04:	80 93 05 03 	sts	0x0305, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1c08:	90 91 83 03 	lds	r25, 0x0383
    1c0c:	29 2f       	mov	r18, r25
    1c0e:	26 95       	lsr	r18
    1c10:	26 95       	lsr	r18
    1c12:	20 ff       	sbrs	r18, 0
    1c14:	0e c0       	rjmp	.+28     	; 0x1c32 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1c16:	80 91 0d 03 	lds	r24, 0x030D
    1c1a:	8f 5f       	subi	r24, 0xFF	; 255
    1c1c:	80 93 0d 03 	sts	0x030D, r24
    1c20:	85 30       	cpi	r24, 0x05	; 5
    1c22:	19 f4       	brne	.+6      	; 0x1c2a <update_octave_range+0x96>
    1c24:	84 e0       	ldi	r24, 0x04	; 4
    1c26:	80 93 0d 03 	sts	0x030D, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1c2a:	84 e0       	ldi	r24, 0x04	; 4
    1c2c:	98 27       	eor	r25, r24
    1c2e:	90 93 83 03 	sts	0x0383, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1c32:	90 91 83 03 	lds	r25, 0x0383
    1c36:	29 2f       	mov	r18, r25
    1c38:	26 95       	lsr	r18
    1c3a:	20 ff       	sbrs	r18, 0
    1c3c:	0b c0       	rjmp	.+22     	; 0x1c54 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1c3e:	80 91 0d 03 	lds	r24, 0x030D
    1c42:	88 23       	and	r24, r24
    1c44:	19 f0       	breq	.+6      	; 0x1c4c <update_octave_range+0xb8>
    1c46:	81 50       	subi	r24, 0x01	; 1
    1c48:	80 93 0d 03 	sts	0x030D, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	98 27       	eor	r25, r24
    1c50:	90 93 83 03 	sts	0x0383, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1c54:	40 91 04 03 	lds	r20, 0x0304
    1c58:	4c 7f       	andi	r20, 0xFC	; 252
    1c5a:	40 93 04 03 	sts	0x0304, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1c5e:	90 91 0d 03 	lds	r25, 0x030D
    1c62:	93 30       	cpi	r25, 0x03	; 3
    1c64:	88 f0       	brcs	.+34     	; 0x1c88 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1c66:	ec e1       	ldi	r30, 0x1C	; 28
    1c68:	f2 e0       	ldi	r31, 0x02	; 2
    1c6a:	e9 0f       	add	r30, r25
    1c6c:	f1 1d       	adc	r31, r1
    1c6e:	21 e0       	ldi	r18, 0x01	; 1
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	c9 01       	movw	r24, r18
    1c74:	00 80       	ld	r0, Z
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <update_octave_range+0xe8>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <update_octave_range+0xe4>
    1c80:	84 2b       	or	r24, r20
    1c82:	80 93 04 03 	sts	0x0304, r24
    1c86:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1c88:	ec e1       	ldi	r30, 0x1C	; 28
    1c8a:	f2 e0       	ldi	r31, 0x02	; 2
    1c8c:	e9 0f       	add	r30, r25
    1c8e:	f1 1d       	adc	r31, r1
    1c90:	21 e0       	ldi	r18, 0x01	; 1
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	c9 01       	movw	r24, r18
    1c96:	00 80       	ld	r0, Z
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <update_octave_range+0x10a>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	0a 94       	dec	r0
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <update_octave_range+0x106>
    1ca2:	85 2b       	or	r24, r21
    1ca4:	80 93 05 03 	sts	0x0305, r24
    1ca8:	08 95       	ret

00001caa <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1caa:	80 91 83 03 	lds	r24, 0x0383
    1cae:	88 23       	and	r24, r24
    1cb0:	64 f4       	brge	.+24     	; 0x1cca <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1cb2:	80 58       	subi	r24, 0x80	; 128
    1cb4:	80 93 83 03 	sts	0x0383, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1cb8:	80 91 0e 03 	lds	r24, 0x030E
    1cbc:	8f 5f       	subi	r24, 0xFF	; 255
    1cbe:	80 93 0e 03 	sts	0x030E, r24
    1cc2:	85 30       	cpi	r24, 0x05	; 5
    1cc4:	11 f4       	brne	.+4      	; 0x1cca <update_lfo_shape+0x20>
    1cc6:	10 92 0e 03 	sts	0x030E, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1cca:	e0 91 0e 03 	lds	r30, 0x030E
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	ee 0f       	add	r30, r30
    1cd2:	ff 1f       	adc	r31, r31
    1cd4:	ea 5d       	subi	r30, 0xDA	; 218
    1cd6:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	01 80       	ldd	r0, Z+1	; 0x01
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <update_lfo_shape+0x3a>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	0a 94       	dec	r0
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1ce8:	90 91 03 03 	lds	r25, 0x0303
    1cec:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1cee:	89 2b       	or	r24, r25
    1cf0:	80 93 03 03 	sts	0x0303, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1cf4:	80 81       	ld	r24, Z
    1cf6:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1cf8:	ed ed       	ldi	r30, 0xDD	; 221
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	80 62       	ori	r24, 0x20	; 32
    1d00:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1d02:	80 81       	ld	r24, Z
    1d04:	8f 7d       	andi	r24, 0xDF	; 223
    1d06:	80 83       	st	Z, r24
	
}		
    1d08:	08 95       	ret

00001d0a <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1d0a:	80 91 83 03 	lds	r24, 0x0383
    1d0e:	80 ff       	sbrs	r24, 0
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	89 27       	eor	r24, r25
    1d16:	80 93 83 03 	sts	0x0383, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1d1a:	80 91 0f 03 	lds	r24, 0x030F
    1d1e:	8f 5f       	subi	r24, 0xFF	; 255
    1d20:	80 93 0f 03 	sts	0x030F, r24
    1d24:	85 30       	cpi	r24, 0x05	; 5
    1d26:	11 f4       	brne	.+4      	; 0x1d2c <update_lfo_sync+0x22>
    1d28:	10 92 0f 03 	sts	0x030F, r1
		lfo_clock.ppqn_counter = 0; //reset counter
    1d2c:	10 92 dc 03 	sts	0x03DC, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1d30:	60 91 03 03 	lds	r22, 0x0303
    1d34:	60 7f       	andi	r22, 0xF0	; 240
    1d36:	60 93 03 03 	sts	0x0303, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1d3a:	20 91 0f 03 	lds	r18, 0x030F
    1d3e:	22 23       	and	r18, r18
    1d40:	71 f0       	breq	.+28     	; 0x1d5e <update_lfo_sync+0x54>
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	21 50       	subi	r18, 0x01	; 1
    1d46:	30 40       	sbci	r19, 0x00	; 0
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	ca 01       	movw	r24, r20
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <update_lfo_sync+0x4a>
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	2a 95       	dec	r18
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <update_lfo_sync+0x46>
    1d58:	86 2b       	or	r24, r22
    1d5a:	80 93 03 03 	sts	0x0303, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1d5e:	80 91 03 03 	lds	r24, 0x0303
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	8f 70       	andi	r24, 0x0F	; 15
    1d66:	90 70       	andi	r25, 0x00	; 0
    1d68:	82 30       	cpi	r24, 0x02	; 2
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	89 f0       	breq	.+34     	; 0x1d90 <update_lfo_sync+0x86>
    1d6e:	83 30       	cpi	r24, 0x03	; 3
    1d70:	91 05       	cpc	r25, r1
    1d72:	24 f4       	brge	.+8      	; 0x1d7c <update_lfo_sync+0x72>
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	91 05       	cpc	r25, r1
    1d78:	b9 f4       	brne	.+46     	; 0x1da8 <update_lfo_sync+0x9e>
    1d7a:	07 c0       	rjmp	.+14     	; 0x1d8a <update_lfo_sync+0x80>
    1d7c:	84 30       	cpi	r24, 0x04	; 4
    1d7e:	91 05       	cpc	r25, r1
    1d80:	59 f0       	breq	.+22     	; 0x1d98 <update_lfo_sync+0x8e>
    1d82:	88 30       	cpi	r24, 0x08	; 8
    1d84:	91 05       	cpc	r25, r1
    1d86:	81 f4       	brne	.+32     	; 0x1da8 <update_lfo_sync+0x9e>
    1d88:	0b c0       	rjmp	.+22     	; 0x1da0 <update_lfo_sync+0x96>
		
		case 0b0001:
			lfo_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1d8a:	10 92 db 03 	sts	0x03DB, r1
			
			break;
    1d8e:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			lfo_clock.divider = 24; //1:4
    1d90:	88 e1       	ldi	r24, 0x18	; 24
    1d92:	80 93 db 03 	sts	0x03DB, r24
			break;
    1d96:	08 95       	ret
			
		case 0b0100:
			lfo_clock.divider = 12; //1:8
    1d98:	8c e0       	ldi	r24, 0x0C	; 12
    1d9a:	80 93 db 03 	sts	0x03DB, r24
			break;
    1d9e:	08 95       	ret
			
		case 0b1000:
			lfo_clock.divider = 6; //1:16	 		
    1da0:	86 e0       	ldi	r24, 0x06	; 6
    1da2:	80 93 db 03 	sts	0x03DB, r24
			break;
    1da6:	08 95       	ret
		
		default:
			lfo_clock.divider = 0; //need to turn midi sync off here. How?
    1da8:	10 92 db 03 	sts	0x03DB, r1
    1dac:	08 95       	ret

00001dae <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1dae:	80 91 83 03 	lds	r24, 0x0383
    1db2:	98 2f       	mov	r25, r24
    1db4:	92 95       	swap	r25
    1db6:	96 95       	lsr	r25
    1db8:	96 95       	lsr	r25
    1dba:	93 70       	andi	r25, 0x03	; 3
    1dbc:	90 ff       	sbrs	r25, 0
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <update_arp_sync+0x3a>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1dc0:	90 e4       	ldi	r25, 0x40	; 64
    1dc2:	89 27       	eor	r24, r25
    1dc4:	80 93 83 03 	sts	0x0383, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1dc8:	80 91 10 03 	lds	r24, 0x0310
    1dcc:	8f 5f       	subi	r24, 0xFF	; 255
    1dce:	80 93 10 03 	sts	0x0310, r24
    1dd2:	85 30       	cpi	r24, 0x05	; 5
    1dd4:	11 f4       	brne	.+4      	; 0x1dda <update_arp_sync+0x2c>
    1dd6:	10 92 10 03 	sts	0x0310, r1
		//if (arp.clock_source == MIDI_CLOCK) arp.ppqn_counter = 0;//arp.ppqn_counter >> 1; //need to take into account current ppqn count and and new divider value.
		arp.ppqn_counter = arp.ppqn_counter >> 1;//0; //try this at least to get rid of weird ppqn counter overflow that occurs when changing sync modes.
    1dda:	80 91 8e 03 	lds	r24, 0x038E
    1dde:	86 95       	lsr	r24
    1de0:	80 93 8e 03 	sts	0x038E, r24
		
		//OK, now need to modify this to maintain phase with beat clock
		system_clock.ppqn_counter = 0;	//same applies to system clock ppqn counter
    1de4:	10 92 d6 03 	sts	0x03D6, r1
		
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1de8:	60 91 04 03 	lds	r22, 0x0304
    1dec:	63 7c       	andi	r22, 0xC3	; 195
    1dee:	60 93 04 03 	sts	0x0304, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1df2:	20 91 10 03 	lds	r18, 0x0310
    1df6:	22 23       	and	r18, r18
    1df8:	71 f0       	breq	.+28     	; 0x1e16 <update_arp_sync+0x68>
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	2f 5f       	subi	r18, 0xFF	; 255
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	41 e0       	ldi	r20, 0x01	; 1
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	ca 01       	movw	r24, r20
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <update_arp_sync+0x5e>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	2a 95       	dec	r18
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <update_arp_sync+0x5a>
    1e10:	86 2b       	or	r24, r22
    1e12:	80 93 04 03 	sts	0x0304, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1e16:	80 91 04 03 	lds	r24, 0x0304
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	8c 73       	andi	r24, 0x3C	; 60
    1e1e:	90 70       	andi	r25, 0x00	; 0
    1e20:	88 30       	cpi	r24, 0x08	; 8
    1e22:	91 05       	cpc	r25, r1
    1e24:	a1 f0       	breq	.+40     	; 0x1e4e <update_arp_sync+0xa0>
    1e26:	89 30       	cpi	r24, 0x09	; 9
    1e28:	91 05       	cpc	r25, r1
    1e2a:	24 f4       	brge	.+8      	; 0x1e34 <update_arp_sync+0x86>
    1e2c:	84 30       	cpi	r24, 0x04	; 4
    1e2e:	91 05       	cpc	r25, r1
    1e30:	01 f5       	brne	.+64     	; 0x1e72 <update_arp_sync+0xc4>
    1e32:	07 c0       	rjmp	.+14     	; 0x1e42 <update_arp_sync+0x94>
    1e34:	80 31       	cpi	r24, 0x10	; 16
    1e36:	91 05       	cpc	r25, r1
    1e38:	81 f0       	breq	.+32     	; 0x1e5a <update_arp_sync+0xac>
    1e3a:	80 32       	cpi	r24, 0x20	; 32
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	c9 f4       	brne	.+50     	; 0x1e72 <update_arp_sync+0xc4>
    1e40:	12 c0       	rjmp	.+36     	; 0x1e66 <update_arp_sync+0xb8>
			
		case 0b00000100:
			system_clock.divider = arp.divider = 48; //1:2
    1e42:	80 e3       	ldi	r24, 0x30	; 48
    1e44:	80 93 8f 03 	sts	0x038F, r24
    1e48:	80 93 d5 03 	sts	0x03D5, r24
			break;
    1e4c:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = arp.divider = 24; //1:4
    1e4e:	88 e1       	ldi	r24, 0x18	; 24
    1e50:	80 93 8f 03 	sts	0x038F, r24
    1e54:	80 93 d5 03 	sts	0x03D5, r24
			
			break;
    1e58:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = arp.divider = 12; //1:8
    1e5a:	8c e0       	ldi	r24, 0x0C	; 12
    1e5c:	80 93 8f 03 	sts	0x038F, r24
    1e60:	80 93 d5 03 	sts	0x03D5, r24
			break;
    1e64:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = arp.divider = 6; //1:16	
    1e66:	86 e0       	ldi	r24, 0x06	; 6
    1e68:	80 93 8f 03 	sts	0x038F, r24
    1e6c:	80 93 d5 03 	sts	0x03D5, r24
			break;
    1e70:	08 95       	ret
			
		default:
			system_clock.divider = arp.divider = 3; //1:32 - this is a hack - no LEDs lighted
    1e72:	83 e0       	ldi	r24, 0x03	; 3
    1e74:	80 93 8f 03 	sts	0x038F, r24
    1e78:	80 93 d5 03 	sts	0x03D5, r24
    1e7c:	08 95       	ret

00001e7e <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1e7e:	80 91 83 03 	lds	r24, 0x0383
    1e82:	80 31       	cpi	r24, 0x10	; 16
    1e84:	69 f4       	brne	.+26     	; 0x1ea0 <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1e86:	10 92 83 03 	sts	0x0383, r1
		
		if (++arp_range == 4) arp_range = 0;
    1e8a:	80 91 11 03 	lds	r24, 0x0311
    1e8e:	8f 5f       	subi	r24, 0xFF	; 255
    1e90:	80 93 11 03 	sts	0x0311, r24
    1e94:	84 30       	cpi	r24, 0x04	; 4
    1e96:	11 f4       	brne	.+4      	; 0x1e9c <update_arp_range+0x1e>
    1e98:	10 92 11 03 	sts	0x0311, r1
		arp.step_position = 0; //reset step position if range changes
    1e9c:	10 92 8a 03 	sts	0x038A, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1ea0:	80 91 02 03 	lds	r24, 0x0302
    1ea4:	8d 7f       	andi	r24, 0xFD	; 253
    1ea6:	80 93 02 03 	sts	0x0302, r24
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1eaa:	80 91 04 03 	lds	r24, 0x0304
    1eae:	8f 73       	andi	r24, 0x3F	; 63
    1eb0:	80 93 04 03 	sts	0x0304, r24
	
	arp.range = arp_range;
    1eb4:	80 91 11 03 	lds	r24, 0x0311
    1eb8:	80 93 88 03 	sts	0x0388, r24
	
	update_arp_sequence(); //update sequence with new settings
    1ebc:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1ec0:	80 91 11 03 	lds	r24, 0x0311
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	51 f0       	breq	.+20     	; 0x1edc <update_arp_range+0x5e>
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	71 f0       	breq	.+28     	; 0x1ee8 <update_arp_range+0x6a>
    1ecc:	81 30       	cpi	r24, 0x01	; 1
    1ece:	89 f4       	brne	.+34     	; 0x1ef2 <update_arp_range+0x74>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1ed0:	80 91 02 03 	lds	r24, 0x0302
    1ed4:	82 60       	ori	r24, 0x02	; 2
    1ed6:	80 93 02 03 	sts	0x0302, r24
			break;
    1eda:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1edc:	80 91 04 03 	lds	r24, 0x0304
    1ee0:	80 64       	ori	r24, 0x40	; 64
    1ee2:	80 93 04 03 	sts	0x0304, r24
			break;
    1ee6:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1ee8:	80 91 04 03 	lds	r24, 0x0304
    1eec:	80 68       	ori	r24, 0x80	; 128
    1eee:	80 93 04 03 	sts	0x0304, r24
    1ef2:	08 95       	ret

00001ef4 <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1ef4:	80 91 83 03 	lds	r24, 0x0383
    1ef8:	98 2f       	mov	r25, r24
    1efa:	92 95       	swap	r25
    1efc:	96 95       	lsr	r25
    1efe:	97 70       	andi	r25, 0x07	; 7
    1f00:	90 ff       	sbrs	r25, 0
    1f02:	25 c0       	rjmp	.+74     	; 0x1f4e <update_arp_mode+0x5a>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1f04:	90 e2       	ldi	r25, 0x20	; 32
    1f06:	89 27       	eor	r24, r25
    1f08:	80 93 83 03 	sts	0x0383, r24
		if (arp_mode == 0) {
    1f0c:	80 91 12 03 	lds	r24, 0x0312
    1f10:	88 23       	and	r24, r24
    1f12:	a1 f4       	brne	.+40     	; 0x1f3c <update_arp_mode+0x48>
			
			update_arp_sequence(); //if arp mode is OFF it's about to be turned on, so update arp_sequence
    1f14:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
			arp.ppqn_counter = ((arp.song_position*6) % arp.divider);// +1; //not sure about the +1 here - may
    1f18:	80 91 90 03 	lds	r24, 0x0390
    1f1c:	90 91 91 03 	lds	r25, 0x0391
    1f20:	9c 01       	movw	r18, r24
    1f22:	22 0f       	add	r18, r18
    1f24:	33 1f       	adc	r19, r19
    1f26:	82 0f       	add	r24, r18
    1f28:	93 1f       	adc	r25, r19
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	60 91 8f 03 	lds	r22, 0x038F
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodhi4>
    1f38:	80 93 8e 03 	sts	0x038E, r24
			//now need to set arp.ppqn_counter and arp.step_position based on arp.song_position
			//arp.step_position = //do something to calculate arp step position based on calculated ppqn_counter. Is there enough information to calculate this???
		
		}			
		if (++arp_mode == 5) arp_mode = 0;
    1f3c:	80 91 12 03 	lds	r24, 0x0312
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	80 93 12 03 	sts	0x0312, r24
    1f46:	85 30       	cpi	r24, 0x05	; 5
    1f48:	11 f4       	brne	.+4      	; 0x1f4e <update_arp_mode+0x5a>
    1f4a:	10 92 12 03 	sts	0x0312, r1
		
	}

	//if (arp.clock_source != MIDI_CLOCK) arp.clock_source = INTERNAL_CLOCK;	

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1f4e:	90 91 02 03 	lds	r25, 0x0302
    1f52:	93 7c       	andi	r25, 0xC3	; 195
    1f54:	90 93 02 03 	sts	0x0302, r25
	
	switch(arp_mode) {
    1f58:	80 91 12 03 	lds	r24, 0x0312
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	79 f0       	breq	.+30     	; 0x1f7e <update_arp_mode+0x8a>
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	28 f0       	brcs	.+10     	; 0x1f6e <update_arp_mode+0x7a>
    1f64:	82 30       	cpi	r24, 0x02	; 2
    1f66:	91 f0       	breq	.+36     	; 0x1f8c <update_arp_mode+0x98>
    1f68:	83 30       	cpi	r24, 0x03	; 3
    1f6a:	f1 f4       	brne	.+60     	; 0x1fa8 <update_arp_mode+0xb4>
    1f6c:	16 c0       	rjmp	.+44     	; 0x1f9a <update_arp_mode+0xa6>
		
		case 0:
		
			//turn arp off
			arp.mode = OFF;
    1f6e:	10 92 94 03 	sts	0x0394, r1
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    1f72:	80 91 b4 02 	lds	r24, 0x02B4
    1f76:	88 23       	and	r24, r24
    1f78:	e9 f4       	brne	.+58     	; 0x1fb4 <update_arp_mode+0xc0>
    1f7a:	89 98       	cbi	0x11, 1	; 17
    1f7c:	1b c0       	rjmp	.+54     	; 0x1fb4 <update_arp_mode+0xc0>
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1f7e:	94 62       	ori	r25, 0x24	; 36
    1f80:	90 93 02 03 	sts	0x0302, r25
			arp.mode = UP;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	80 93 94 03 	sts	0x0394, r24
			break;	
    1f8a:	14 c0       	rjmp	.+40     	; 0x1fb4 <update_arp_mode+0xc0>
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1f8c:	94 61       	ori	r25, 0x14	; 20
    1f8e:	90 93 02 03 	sts	0x0302, r25
			arp.mode = DOWN;
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	80 93 94 03 	sts	0x0394, r24
			break;
    1f98:	0d c0       	rjmp	.+26     	; 0x1fb4 <update_arp_mode+0xc0>
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1f9a:	94 63       	ori	r25, 0x34	; 52
    1f9c:	90 93 02 03 	sts	0x0302, r25
			arp.mode = UP_DOWN;
    1fa0:	83 e0       	ldi	r24, 0x03	; 3
    1fa2:	80 93 94 03 	sts	0x0394, r24
			break;
    1fa6:	06 c0       	rjmp	.+12     	; 0x1fb4 <update_arp_mode+0xc0>
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1fa8:	9c 60       	ori	r25, 0x0C	; 12
    1faa:	90 93 02 03 	sts	0x0302, r25
			arp.mode = RANDOM;
    1fae:	84 e0       	ldi	r24, 0x04	; 4
    1fb0:	80 93 94 03 	sts	0x0394, r24
			
					
		
	}
	
	update_arp_sequence(); //update arp sequence with new mode
    1fb4:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	



}
    1fb8:	08 95       	ret

00001fba <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1fba:	90 91 82 03 	lds	r25, 0x0382
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1fbe:	80 91 84 03 	lds	r24, 0x0384
    1fc2:	86 95       	lsr	r24
    1fc4:	86 95       	lsr	r24
    1fc6:	68 2f       	mov	r22, r24
    1fc8:	67 95       	ror	r22
    1fca:	66 27       	eor	r22, r22
    1fcc:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1fce:	29 2f       	mov	r18, r25
    1fd0:	21 70       	andi	r18, 0x01	; 1
    1fd2:	26 2b       	or	r18, r22
    1fd4:	69 2f       	mov	r22, r25
    1fd6:	66 1f       	adc	r22, r22
    1fd8:	66 27       	eor	r22, r22
    1fda:	66 1f       	adc	r22, r22
    1fdc:	66 0f       	add	r22, r22
    1fde:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1fe0:	29 2f       	mov	r18, r25
    1fe2:	26 95       	lsr	r18
    1fe4:	26 95       	lsr	r18
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	21 70       	andi	r18, 0x01	; 1
    1fea:	30 70       	andi	r19, 0x00	; 0
    1fec:	d9 01       	movw	r26, r18
    1fee:	aa 0f       	add	r26, r26
    1ff0:	bb 1f       	adc	r27, r27
    1ff2:	aa 0f       	add	r26, r26
    1ff4:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ff6:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1ff8:	a9 2f       	mov	r26, r25
    1ffa:	a6 95       	lsr	r26
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	a1 70       	andi	r26, 0x01	; 1
    2000:	b0 70       	andi	r27, 0x00	; 0
    2002:	fd 01       	movw	r30, r26
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	ee 0f       	add	r30, r30
    200e:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    2010:	a6 2f       	mov	r26, r22
    2012:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    2014:	e9 2f       	mov	r30, r25
    2016:	e2 95       	swap	r30
    2018:	ef 70       	andi	r30, 0x0F	; 15
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	e1 70       	andi	r30, 0x01	; 1
    201e:	f0 70       	andi	r31, 0x00	; 0
    2020:	bf 01       	movw	r22, r30
    2022:	62 95       	swap	r22
    2024:	72 95       	swap	r23
    2026:	70 7f       	andi	r23, 0xF0	; 240
    2028:	76 27       	eor	r23, r22
    202a:	60 7f       	andi	r22, 0xF0	; 240
    202c:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    202e:	ea 2f       	mov	r30, r26
    2030:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    2032:	69 2f       	mov	r22, r25
    2034:	62 95       	swap	r22
    2036:	66 95       	lsr	r22
    2038:	67 70       	andi	r22, 0x07	; 7
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	61 70       	andi	r22, 0x01	; 1
    203e:	70 70       	andi	r23, 0x00	; 0
    2040:	ab 01       	movw	r20, r22
    2042:	44 0f       	add	r20, r20
    2044:	55 1f       	adc	r21, r21
    2046:	42 95       	swap	r20
    2048:	52 95       	swap	r21
    204a:	50 7f       	andi	r21, 0xF0	; 240
    204c:	54 27       	eor	r21, r20
    204e:	40 7f       	andi	r20, 0xF0	; 240
    2050:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    2052:	6e 2f       	mov	r22, r30
    2054:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    2056:	49 2f       	mov	r20, r25
    2058:	42 95       	swap	r20
    205a:	46 95       	lsr	r20
    205c:	46 95       	lsr	r20
    205e:	43 70       	andi	r20, 0x03	; 3
    2060:	50 e0       	ldi	r21, 0x00	; 0
    2062:	41 70       	andi	r20, 0x01	; 1
    2064:	50 70       	andi	r21, 0x00	; 0
    2066:	9a 01       	movw	r18, r20
    2068:	00 24       	eor	r0, r0
    206a:	36 95       	lsr	r19
    206c:	27 95       	ror	r18
    206e:	07 94       	ror	r0
    2070:	36 95       	lsr	r19
    2072:	27 95       	ror	r18
    2074:	07 94       	ror	r0
    2076:	32 2f       	mov	r19, r18
    2078:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    207a:	26 2b       	or	r18, r22
    207c:	20 93 06 03 	sts	0x0306, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    2080:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    2082:	81 95       	neg	r24
    2084:	89 27       	eor	r24, r25
    2086:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    2088:	89 27       	eor	r24, r25
    208a:	0e 94 44 17 	call	0x2e88	; 0x2e88 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    208e:	ed ed       	ldi	r30, 0xDD	; 221
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    2094:	90 91 84 03 	lds	r25, 0x0384
    2098:	96 95       	lsr	r25
    209a:	96 95       	lsr	r25
    209c:	96 95       	lsr	r25
    209e:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    20a0:	91 95       	neg	r25
    20a2:	80 81       	ld	r24, Z
    20a4:	89 27       	eor	r24, r25
    20a6:	80 71       	andi	r24, 0x10	; 16
    20a8:	82 27       	eor	r24, r18
    20aa:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    20ac:	e2 e0       	ldi	r30, 0x02	; 2
    20ae:	f3 e0       	ldi	r31, 0x03	; 3
    20b0:	80 81       	ld	r24, Z
    20b2:	98 27       	eor	r25, r24
    20b4:	91 70       	andi	r25, 0x01	; 1
    20b6:	89 27       	eor	r24, r25
    20b8:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    20ba:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    20be:	0e 94 55 0e 	call	0x1caa	; 0x1caa <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    20c2:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    20c6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <update_arp_sync>
	update_arp_range();
    20ca:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <update_arp_range>
	update_arp_mode();
    20ce:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    20d2:	08 95       	ret

000020d4 <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    20d8:	90 91 0b 03 	lds	r25, 0x030B
    20dc:	95 30       	cpi	r25, 0x05	; 5
    20de:	01 f5       	brne	.+64     	; 0x2120 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    20e0:	87 e0       	ldi	r24, 0x07	; 7
    20e2:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    20e4:	cd ed       	ldi	r28, 0xDD	; 221
    20e6:	d0 e0       	ldi	r29, 0x00	; 0
    20e8:	88 81       	ld	r24, Y
    20ea:	80 62       	ori	r24, 0x20	; 32
    20ec:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    20ee:	88 81       	ld	r24, Y
    20f0:	8f 7d       	andi	r24, 0xDF	; 223
    20f2:	88 83       	st	Y, r24
		DATA_BUS = 0;
    20f4:	12 b8       	out	0x02, r1	; 2
		
		tune();
    20f6:	0e 94 e7 16 	call	0x2dce	; 0x2dce <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    20fa:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    20fc:	88 81       	ld	r24, Y
    20fe:	80 62       	ori	r24, 0x20	; 32
    2100:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    2102:	88 81       	ld	r24, Y
    2104:	8f 7d       	andi	r24, 0xDF	; 223
    2106:	88 83       	st	Y, r24
		DATA_BUS = 0;
    2108:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    210a:	80 91 03 03 	lds	r24, 0x0303
    210e:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    2110:	80 68       	ori	r24, 0x80	; 128
    2112:	80 93 03 03 	sts	0x0303, r24
		
		setup_system_clock(); //restore system clock settings
    2116:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <setup_system_clock>

		current_patch.mode = MEMORY;
    211a:	10 92 0b 03 	sts	0x030B, r1
		
		return;
    211e:	63 c0       	rjmp	.+198    	; 0x21e6 <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    2120:	80 91 84 03 	lds	r24, 0x0384
    2124:	28 2f       	mov	r18, r24
    2126:	22 95       	swap	r18
    2128:	26 95       	lsr	r18
    212a:	26 95       	lsr	r18
    212c:	23 70       	andi	r18, 0x03	; 3
    212e:	20 ff       	sbrs	r18, 0
    2130:	15 c0       	rjmp	.+42     	; 0x215c <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    2132:	20 e4       	ldi	r18, 0x40	; 64
    2134:	82 27       	eor	r24, r18
    2136:	80 93 84 03 	sts	0x0384, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    213a:	80 91 07 03 	lds	r24, 0x0307
    213e:	8f 5f       	subi	r24, 0xFF	; 255
    2140:	80 93 07 03 	sts	0x0307, r24
    2144:	85 32       	cpi	r24, 0x25	; 37
    2146:	21 f4       	brne	.+8      	; 0x2150 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    2148:	84 e2       	ldi	r24, 0x24	; 36
    214a:	80 93 07 03 	sts	0x0307, r24
    214e:	06 c0       	rjmp	.+12     	; 0x215c <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    2150:	93 30       	cpi	r25, 0x03	; 3
    2152:	21 f0       	breq	.+8      	; 0x215c <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    2154:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <load_patch>
			update_patch();
    2158:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    215c:	80 91 84 03 	lds	r24, 0x0384
    2160:	98 2f       	mov	r25, r24
    2162:	92 95       	swap	r25
    2164:	96 95       	lsr	r25
    2166:	97 70       	andi	r25, 0x07	; 7
    2168:	90 ff       	sbrs	r25, 0
    216a:	15 c0       	rjmp	.+42     	; 0x2196 <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    216c:	90 e2       	ldi	r25, 0x20	; 32
    216e:	89 27       	eor	r24, r25
    2170:	80 93 84 03 	sts	0x0384, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    2174:	80 91 07 03 	lds	r24, 0x0307
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	19 f0       	breq	.+6      	; 0x2182 <update_patch_programmer+0xae>
    217c:	81 50       	subi	r24, 0x01	; 1
    217e:	80 93 07 03 	sts	0x0307, r24
		
		if (current_patch.mode != WRITE) {
    2182:	80 91 0b 03 	lds	r24, 0x030B
    2186:	83 30       	cpi	r24, 0x03	; 3
    2188:	31 f0       	breq	.+12     	; 0x2196 <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    218a:	80 91 07 03 	lds	r24, 0x0307
    218e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <load_patch>
			update_patch();
    2192:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    2196:	80 91 84 03 	lds	r24, 0x0384
    219a:	98 2f       	mov	r25, r24
    219c:	92 95       	swap	r25
    219e:	9f 70       	andi	r25, 0x0F	; 15
    21a0:	90 ff       	sbrs	r25, 0
    21a2:	15 c0       	rjmp	.+42     	; 0x21ce <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    21a4:	90 e1       	ldi	r25, 0x10	; 16
    21a6:	89 27       	eor	r24, r25
    21a8:	80 93 84 03 	sts	0x0384, r24
		if (current_patch.mode != WRITE) {
    21ac:	90 91 0b 03 	lds	r25, 0x030B
    21b0:	93 30       	cpi	r25, 0x03	; 3
    21b2:	49 f0       	breq	.+18     	; 0x21c6 <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    21b4:	8f 77       	andi	r24, 0x7F	; 127
    21b6:	80 93 84 03 	sts	0x0384, r24
			current_patch.mode = WRITE;
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	80 93 0b 03 	sts	0x030B, r24
			lock_pots();
    21c0:	0e 94 bc 08 	call	0x1178	; 0x1178 <lock_pots>
    21c4:	04 c0       	rjmp	.+8      	; 0x21ce <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    21c6:	80 91 07 03 	lds	r24, 0x0307
    21ca:	0e 94 e7 08 	call	0x11ce	; 0x11ce <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    21ce:	80 91 84 03 	lds	r24, 0x0384
    21d2:	88 23       	and	r24, r24
    21d4:	44 f4       	brge	.+16     	; 0x21e6 <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    21d6:	80 68       	ori	r24, 0x80	; 128
    21d8:	80 93 84 03 	sts	0x0384, r24
		current_patch.mode = MANUAL;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	80 93 0b 03 	sts	0x030B, r24
		unlock_pots();
    21e2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	08 95       	ret

000021ec <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    21ec:	88 ed       	ldi	r24, 0xD8	; 216
    21ee:	91 e0       	ldi	r25, 0x01	; 1
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    21f8:	81 ee       	ldi	r24, 0xE1	; 225
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2204:	82 ee       	ldi	r24, 0xE2	; 226
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2210:	87 eb       	ldi	r24, 0xB7	; 183
    2212:	92 e0       	ldi	r25, 0x02	; 2
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	70 e0       	ldi	r23, 0x00	; 0
    2218:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    221c:	8a ed       	ldi	r24, 0xDA	; 218
    221e:	91 e0       	ldi	r25, 0x01	; 1
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    2228:	8f ed       	ldi	r24, 0xDF	; 223
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2234:	80 ee       	ldi	r24, 0xE0	; 224
    2236:	91 e0       	ldi	r25, 0x01	; 1
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2240:	81 ed       	ldi	r24, 0xD1	; 209
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	70 e0       	ldi	r23, 0x00	; 0
    2248:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    224c:	86 ed       	ldi	r24, 0xD6	; 214
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    2258:	82 ed       	ldi	r24, 0xD2	; 210
    225a:	91 e0       	ldi	r25, 0x01	; 1
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2264:	83 ed       	ldi	r24, 0xD3	; 211
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    2270:	84 ed       	ldi	r24, 0xD4	; 212
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	6f ef       	ldi	r22, 0xFF	; 255
    2276:	7f e3       	ldi	r23, 0x3F	; 63
    2278:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    227c:	85 ed       	ldi	r24, 0xD5	; 213
    227e:	91 e0       	ldi	r25, 0x01	; 1
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    2288:	89 ed       	ldi	r24, 0xD9	; 217
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2294:	8e ec       	ldi	r24, 0xCE	; 206
    2296:	91 e0       	ldi	r25, 0x01	; 1
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    22a0:	8c ec       	ldi	r24, 0xCC	; 204
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	60 e0       	ldi	r22, 0x00	; 0
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    22ac:	8a ec       	ldi	r24, 0xCA	; 202
    22ae:	91 e0       	ldi	r25, 0x01	; 1
    22b0:	6f ef       	ldi	r22, 0xFF	; 255
    22b2:	7f e3       	ldi	r23, 0x3F	; 63
    22b4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    22b8:	88 ec       	ldi	r24, 0xC8	; 200
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    22c4:	80 ed       	ldi	r24, 0xD0	; 208
    22c6:	91 e0       	ldi	r25, 0x01	; 1
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    22d0:	83 ee       	ldi	r24, 0xE3	; 227
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    22dc:	84 ee       	ldi	r24, 0xE4	; 228
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
}	
    22e8:	08 95       	ret

000022ea <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    22ea:	2f 92       	push	r2
    22ec:	3f 92       	push	r3
    22ee:	4f 92       	push	r4
    22f0:	5f 92       	push	r5
    22f2:	6f 92       	push	r6
    22f4:	7f 92       	push	r7
    22f6:	8f 92       	push	r8
    22f8:	9f 92       	push	r9
    22fa:	af 92       	push	r10
    22fc:	bf 92       	push	r11
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	2c 97       	sbiw	r28, 0x0c	; 12
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	18 2f       	mov	r17, r24
    2320:	78 87       	std	Y+8, r23	; 0x08
    2322:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    2324:	80 91 7f 03 	lds	r24, 0x037F
    2328:	83 60       	ori	r24, 0x03	; 3
    232a:	80 93 7f 03 	sts	0x037F, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    232e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    2332:	10 92 7e 03 	sts	0x037E, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    2336:	1f 30       	cpi	r17, 0x0F	; 15
    2338:	e9 f4       	brne	.+58     	; 0x2374 <set_vco_init_cv+0x8a>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    233a:	0f 2e       	mov	r0, r31
    233c:	f6 ee       	ldi	r31, 0xE6	; 230
    233e:	4f 2e       	mov	r4, r31
    2340:	f1 e0       	ldi	r31, 0x01	; 1
    2342:	5f 2e       	mov	r5, r31
    2344:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    2346:	0f 2e       	mov	r0, r31
    2348:	fe ed       	ldi	r31, 0xDE	; 222
    234a:	2f 2e       	mov	r2, r31
    234c:	f1 e0       	ldi	r31, 0x01	; 1
    234e:	3f 2e       	mov	r3, r31
    2350:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    2352:	23 ee       	ldi	r18, 0xE3	; 227
    2354:	31 e0       	ldi	r19, 0x01	; 1
    2356:	3a 83       	std	Y+2, r19	; 0x02
    2358:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    235a:	0f 2e       	mov	r0, r31
    235c:	fc ed       	ldi	r31, 0xDC	; 220
    235e:	ef 2e       	mov	r14, r31
    2360:	f1 e0       	ldi	r31, 0x01	; 1
    2362:	ff 2e       	mov	r15, r31
    2364:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		vco_display_num = 1;
		eeprom_addr = &vco1_init_cv_eeprom;
    2366:	82 e7       	ldi	r24, 0x72	; 114
    2368:	96 e0       	ldi	r25, 0x06	; 6
    236a:	9a 87       	std	Y+10, r25	; 0x0a
    236c:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    236e:	81 e0       	ldi	r24, 0x01	; 1
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		vco_display_num = 1;
    2370:	11 e0       	ldi	r17, 0x01	; 1
    2372:	1c c0       	rjmp	.+56     	; 0x23ac <set_vco_init_cv+0xc2>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2374:	0f 2e       	mov	r0, r31
    2376:	f5 ee       	ldi	r31, 0xE5	; 229
    2378:	4f 2e       	mov	r4, r31
    237a:	f1 e0       	ldi	r31, 0x01	; 1
    237c:	5f 2e       	mov	r5, r31
    237e:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    2380:	0f 2e       	mov	r0, r31
    2382:	f7 ed       	ldi	r31, 0xD7	; 215
    2384:	2f 2e       	mov	r2, r31
    2386:	f1 e0       	ldi	r31, 0x01	; 1
    2388:	3f 2e       	mov	r3, r31
    238a:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    238c:	e4 ee       	ldi	r30, 0xE4	; 228
    238e:	f1 e0       	ldi	r31, 0x01	; 1
    2390:	fa 83       	std	Y+2, r31	; 0x02
    2392:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2394:	0f 2e       	mov	r0, r31
    2396:	fd ed       	ldi	r31, 0xDD	; 221
    2398:	ef 2e       	mov	r14, r31
    239a:	f1 e0       	ldi	r31, 0x01	; 1
    239c:	ff 2e       	mov	r15, r31
    239e:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		vco_display_num = 2;
		eeprom_addr = &vco2_init_cv_eeprom;
    23a0:	20 e7       	ldi	r18, 0x70	; 112
    23a2:	36 e0       	ldi	r19, 0x06	; 6
    23a4:	3a 87       	std	Y+10, r19	; 0x0a
    23a6:	29 87       	std	Y+9, r18	; 0x09
		vco_display_num = 1;
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    23a8:	80 e4       	ldi	r24, 0x40	; 64
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		vco_display_num = 2;
    23aa:	12 e0       	ldi	r17, 0x02	; 2
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    23ac:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    23ae:	ed ed       	ldi	r30, 0xDD	; 221
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	80 64       	ori	r24, 0x40	; 64
    23b6:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    23b8:	80 81       	ld	r24, Z
    23ba:	8f 7b       	andi	r24, 0xBF	; 191
    23bc:	80 83       	st	Z, r24
	DATA_BUS = 0;
    23be:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    23c0:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    23c2:	84 b5       	in	r24, 0x24	; 36
    23c4:	8f 60       	ori	r24, 0x0F	; 15
    23c6:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    23cc:	ee e6       	ldi	r30, 0x6E	; 110
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	90 81       	ld	r25, Z
    23d2:	92 60       	ori	r25, 0x02	; 2
    23d4:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    23d6:	80 93 80 03 	sts	0x0380, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    23da:	8d e0       	ldi	r24, 0x0D	; 13
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9c 83       	std	Y+4, r25	; 0x04
    23e0:	8b 83       	std	Y+3, r24	; 0x03
		count_finished = FALSE;
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    23e2:	0f e0       	ldi	r16, 0x0F	; 15
			
			update_display(vco_display_num, DEC);
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    23e4:	0f 2e       	mov	r0, r31
    23e6:	f8 ed       	ldi	r31, 0xD8	; 216
    23e8:	cf 2e       	mov	r12, r31
    23ea:	f1 e0       	ldi	r31, 0x01	; 1
    23ec:	df 2e       	mov	r13, r31
    23ee:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    23f0:	0f 2e       	mov	r0, r31
    23f2:	f4 ed       	ldi	r31, 0xD4	; 212
    23f4:	af 2e       	mov	r10, r31
    23f6:	f1 e0       	ldi	r31, 0x01	; 1
    23f8:	bf 2e       	mov	r11, r31
    23fa:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    23fc:	0f 2e       	mov	r0, r31
    23fe:	fa ec       	ldi	r31, 0xCA	; 202
    2400:	8f 2e       	mov	r8, r31
    2402:	f1 e0       	ldi	r31, 0x01	; 1
    2404:	9f 2e       	mov	r9, r31
    2406:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    2408:	0f 2e       	mov	r0, r31
    240a:	fb ec       	ldi	r31, 0xCB	; 203
    240c:	6f 2e       	mov	r6, r31
    240e:	f1 e0       	ldi	r31, 0x01	; 1
    2410:	7f 2e       	mov	r7, r31
    2412:	f0 2d       	mov	r31, r0
		//WDTCR = 0x00;
		wdt_disable();
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
		no_overflow = TRUE;
    2414:	e0 e0       	ldi	r30, 0x00	; 0
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	fc 87       	std	Y+12, r31	; 0x0c
    241a:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    241c:	21 e0       	ldi	r18, 0x01	; 1
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	0b 80       	ldd	r0, Y+3	; 0x03
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <set_vco_init_cv+0x13e>
    2424:	22 0f       	add	r18, r18
    2426:	33 1f       	adc	r19, r19
    2428:	0a 94       	dec	r0
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <set_vco_init_cv+0x13a>
    242c:	3e 83       	std	Y+6, r19	; 0x06
    242e:	2d 83       	std	Y+5, r18	; 0x05
    2430:	8b 85       	ldd	r24, Y+11	; 0x0b
    2432:	9c 85       	ldd	r25, Y+12	; 0x0c
    2434:	82 2b       	or	r24, r18
    2436:	93 2b       	or	r25, r19
    2438:	9c 87       	std	Y+12, r25	; 0x0c
    243a:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    243c:	c7 01       	movw	r24, r14
    243e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2440:	7c 85       	ldd	r23, Y+12	; 0x0c
    2442:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
		
		
		count_finished = FALSE;
    2446:	10 92 7e 03 	sts	0x037E, r1
		period_counter = 0;
    244a:	10 92 81 03 	sts	0x0381, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    244e:	e8 e1       	ldi	r30, 0x18	; 24
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	a8 95       	wdr
    2458:	e0 93 60 00 	sts	0x0060, r30
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	00 93 60 00 	sts	0x0060, r16
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    2462:	80 91 7e 03 	lds	r24, 0x037E
    2466:	88 23       	and	r24, r24
    2468:	91 f5       	brne	.+100    	; 0x24ce <set_vco_init_cv+0x1e4>
			
			update_display(vco_display_num, DEC);
    246a:	81 2f       	mov	r24, r17
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	0e 94 38 03 	call	0x670	; 0x670 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    2474:	c7 01       	movw	r24, r14
    2476:	6b 85       	ldd	r22, Y+11	; 0x0b
    2478:	7c 85       	ldd	r23, Y+12	; 0x0c
    247a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    247e:	c1 01       	movw	r24, r2
    2480:	6f ef       	ldi	r22, 0xFF	; 255
    2482:	7f e3       	ldi	r23, 0x3F	; 63
    2484:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    2488:	c6 01       	movw	r24, r12
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    2492:	c5 01       	movw	r24, r10
    2494:	6f ef       	ldi	r22, 0xFF	; 255
    2496:	7f e3       	ldi	r23, 0x3F	; 63
    2498:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    249c:	c4 01       	movw	r24, r8
    249e:	6f ef       	ldi	r22, 0xFF	; 255
    24a0:	7f e3       	ldi	r23, 0x3F	; 63
    24a2:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    24a6:	c3 01       	movw	r24, r6
    24a8:	6f ef       	ldi	r22, 0xFF	; 255
    24aa:	7f e3       	ldi	r23, 0x3F	; 63
    24ac:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	6f ef       	ldi	r22, 0xFF	; 255
    24b6:	7f e3       	ldi	r23, 0x3F	; 63
    24b8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    24bc:	c2 01       	movw	r24, r4
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	70 e0       	ldi	r23, 0x00	; 0
    24c2:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    24c6:	80 91 7e 03 	lds	r24, 0x037E
    24ca:	88 23       	and	r24, r24
    24cc:	71 f2       	breq	.-100    	; 0x246a <set_vco_init_cv+0x180>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    24ce:	98 e1       	ldi	r25, 0x18	; 24
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	90 93 60 00 	sts	0x0060, r25
    24d8:	10 92 60 00 	sts	0x0060, r1
    24dc:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    24de:	80 91 7c 03 	lds	r24, 0x037C
    24e2:	90 91 7d 03 	lds	r25, 0x037D
    24e6:	ef 81       	ldd	r30, Y+7	; 0x07
    24e8:	f8 85       	ldd	r31, Y+8	; 0x08
    24ea:	e8 17       	cp	r30, r24
    24ec:	f9 07       	cpc	r31, r25
    24ee:	20 f0       	brcs	.+8      	; 0x24f8 <set_vco_init_cv+0x20e>
    24f0:	80 91 af 02 	lds	r24, 0x02AF
    24f4:	88 23       	and	r24, r24
    24f6:	51 f4       	brne	.+20     	; 0x250c <set_vco_init_cv+0x222>
    24f8:	8d 81       	ldd	r24, Y+5	; 0x05
    24fa:	9e 81       	ldd	r25, Y+6	; 0x06
    24fc:	80 95       	com	r24
    24fe:	90 95       	com	r25
    2500:	2b 85       	ldd	r18, Y+11	; 0x0b
    2502:	3c 85       	ldd	r19, Y+12	; 0x0c
    2504:	28 23       	and	r18, r24
    2506:	39 23       	and	r19, r25
    2508:	3c 87       	std	Y+12, r19	; 0x0c
    250a:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    250c:	31 e0       	ldi	r19, 0x01	; 1
    250e:	30 93 af 02 	sts	0x02AF, r19
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	9c 83       	std	Y+4, r25	; 0x04
    251a:	8b 83       	std	Y+3, r24	; 0x03
    251c:	ef ef       	ldi	r30, 0xFF	; 255
    251e:	8f 3f       	cpi	r24, 0xFF	; 255
    2520:	9e 07       	cpc	r25, r30
    2522:	09 f0       	breq	.+2      	; 0x2526 <set_vco_init_cv+0x23c>
    2524:	7b cf       	rjmp	.-266    	; 0x241c <set_vco_init_cv+0x132>
    2526:	2b 85       	ldd	r18, Y+11	; 0x0b
    2528:	3c 85       	ldd	r19, Y+12	; 0x0c
    252a:	3e 83       	std	Y+6, r19	; 0x06
    252c:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    252e:	88 ec       	ldi	r24, 0xC8	; 200
    2530:	91 e0       	ldi	r25, 0x01	; 1
    2532:	60 e0       	ldi	r22, 0x00	; 0
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    253a:	89 ec       	ldi	r24, 0xC9	; 201
    253c:	91 e0       	ldi	r25, 0x01	; 1
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    2546:	84 ed       	ldi	r24, 0xD4	; 212
    2548:	91 e0       	ldi	r25, 0x01	; 1
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    2552:	88 ed       	ldi	r24, 0xD8	; 216
    2554:	91 e0       	ldi	r25, 0x01	; 1
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    255e:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    2560:	ee e6       	ldi	r30, 0x6E	; 110
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	8d 7f       	andi	r24, 0xFD	; 253
    2568:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    256a:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	6d 81       	ldd	r22, Y+5	; 0x05
    2572:	7e 81       	ldd	r23, Y+6	; 0x06
    2574:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	2c 96       	adiw	r28, 0x0c	; 12
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	ff 90       	pop	r15
    2592:	ef 90       	pop	r14
    2594:	df 90       	pop	r13
    2596:	cf 90       	pop	r12
    2598:	bf 90       	pop	r11
    259a:	af 90       	pop	r10
    259c:	9f 90       	pop	r9
    259e:	8f 90       	pop	r8
    25a0:	7f 90       	pop	r7
    25a2:	6f 90       	pop	r6
    25a4:	5f 90       	pop	r5
    25a6:	4f 90       	pop	r4
    25a8:	3f 90       	pop	r3
    25aa:	2f 90       	pop	r2
    25ac:	08 95       	ret

000025ae <tune_8ths>:



void tune_8ths(uint8_t vco) {
    25ae:	2f 92       	push	r2
    25b0:	3f 92       	push	r3
    25b2:	4f 92       	push	r4
    25b4:	5f 92       	push	r5
    25b6:	6f 92       	push	r6
    25b8:	7f 92       	push	r7
    25ba:	8f 92       	push	r8
    25bc:	9f 92       	push	r9
    25be:	af 92       	push	r10
    25c0:	bf 92       	push	r11
    25c2:	cf 92       	push	r12
    25c4:	df 92       	push	r13
    25c6:	ef 92       	push	r14
    25c8:	ff 92       	push	r15
    25ca:	0f 93       	push	r16
    25cc:	1f 93       	push	r17
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	c0 54       	subi	r28, 0x40	; 64
    25d8:	d0 40       	sbci	r29, 0x00	; 0
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
    25e4:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    25e6:	de 01       	movw	r26, r28
    25e8:	11 96       	adiw	r26, 0x01	; 1
    25ea:	e0 e3       	ldi	r30, 0x30	; 48
    25ec:	f2 e0       	ldi	r31, 0x02	; 2
    25ee:	80 e3       	ldi	r24, 0x30	; 48
    25f0:	01 90       	ld	r0, Z+
    25f2:	0d 92       	st	X+, r0
    25f4:	81 50       	subi	r24, 0x01	; 1
    25f6:	e1 f7       	brne	.-8      	; 0x25f0 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    25f8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    25fc:	0f 30       	cpi	r16, 0x0F	; 15
    25fe:	11 f5       	brne	.+68     	; 0x2644 <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    2600:	40 90 79 03 	lds	r4, 0x0379
    2604:	50 90 7a 03 	lds	r5, 0x037A
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2608:	0f 2e       	mov	r0, r31
    260a:	f6 ee       	ldi	r31, 0xE6	; 230
    260c:	8f 2e       	mov	r8, r31
    260e:	f1 e0       	ldi	r31, 0x01	; 1
    2610:	9f 2e       	mov	r9, r31
    2612:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    2614:	0f 2e       	mov	r0, r31
    2616:	fe ed       	ldi	r31, 0xDE	; 222
    2618:	2f 2e       	mov	r2, r31
    261a:	f1 e0       	ldi	r31, 0x01	; 1
    261c:	3f 2e       	mov	r3, r31
    261e:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    2620:	23 ee       	ldi	r18, 0xE3	; 227
    2622:	31 e0       	ldi	r19, 0x01	; 1
    2624:	3a ab       	sts	0x5a, r19
    2626:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2628:	0f 2e       	mov	r0, r31
    262a:	fc ed       	ldi	r31, 0xDC	; 220
    262c:	6f 2e       	mov	r6, r31
    262e:	f1 e0       	ldi	r31, 0x01	; 1
    2630:	7f 2e       	mov	r7, r31
    2632:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    2634:	05 e5       	ldi	r16, 0x55	; 85
    2636:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2638:	cc 24       	eor	r12, r12
    263a:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    263c:	ee 24       	eor	r14, r14
    263e:	68 94       	set
    2640:	e1 f8       	bld	r14, 1
    2642:	22 c0       	rjmp	.+68     	; 0x2688 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    2644:	40 90 77 03 	lds	r4, 0x0377
    2648:	50 90 78 03 	lds	r5, 0x0378
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    264c:	0f 2e       	mov	r0, r31
    264e:	f5 ee       	ldi	r31, 0xE5	; 229
    2650:	8f 2e       	mov	r8, r31
    2652:	f1 e0       	ldi	r31, 0x01	; 1
    2654:	9f 2e       	mov	r9, r31
    2656:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2658:	0f 2e       	mov	r0, r31
    265a:	f7 ed       	ldi	r31, 0xD7	; 215
    265c:	2f 2e       	mov	r2, r31
    265e:	f1 e0       	ldi	r31, 0x01	; 1
    2660:	3f 2e       	mov	r3, r31
    2662:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    2664:	44 ee       	ldi	r20, 0xE4	; 228
    2666:	51 e0       	ldi	r21, 0x01	; 1
    2668:	5a ab       	sts	0x5a, r21
    266a:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    266c:	0f 2e       	mov	r0, r31
    266e:	fd ed       	ldi	r31, 0xDD	; 221
    2670:	6f 2e       	mov	r6, r31
    2672:	f1 e0       	ldi	r31, 0x01	; 1
    2674:	7f 2e       	mov	r7, r31
    2676:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    2678:	03 e3       	ldi	r16, 0x33	; 51
    267a:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    267c:	cc 24       	eor	r12, r12
    267e:	68 94       	set
    2680:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    2682:	ee 24       	eor	r14, r14
    2684:	68 94       	set
    2686:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    2688:	c3 01       	movw	r24, r6
    268a:	b2 01       	movw	r22, r4
    268c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    2690:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2692:	ed ed       	ldi	r30, 0xDD	; 221
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	80 64       	ori	r24, 0x40	; 64
    269a:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    269c:	80 81       	ld	r24, Z
    269e:	8f 7b       	andi	r24, 0xBF	; 191
    26a0:	80 83       	st	Z, r24
		DATA_BUS = 0;
    26a2:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    26a4:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	80 93 80 03 	sts	0x0380, r24
		
		compare_match_counter = 0;	
    26ac:	10 92 7b 03 	sts	0x037B, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    26b0:	8c 2d       	mov	r24, r12
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	24 e6       	ldi	r18, 0x64	; 100
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	82 9f       	mul	r24, r18
    26ba:	d0 01       	movw	r26, r0
    26bc:	83 9f       	mul	r24, r19
    26be:	b0 0d       	add	r27, r0
    26c0:	92 9f       	mul	r25, r18
    26c2:	b0 0d       	add	r27, r0
    26c4:	11 24       	eor	r1, r1
    26c6:	bc ab       	sts	0x5c, r27
    26c8:	ab ab       	sts	0x5b, r26
    26ca:	fe 01       	movw	r30, r28
    26cc:	31 96       	adiw	r30, 0x01	; 1
    26ce:	fc af       	sts	0x7c, r31
    26d0:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    26d2:	98 01       	movw	r18, r16
    26d4:	2e 5f       	subi	r18, 0xFE	; 254
    26d6:	3f 4f       	sbci	r19, 0xFF	; 255
    26d8:	21 96       	adiw	r28, 0x01	; 1
    26da:	3f af       	sts	0x7f, r19
    26dc:	2e af       	sts	0x7e, r18
    26de:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    26e0:	1e ae       	sts	0xbe, r17
    26e2:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    26e4:	0f 2e       	mov	r0, r31
    26e6:	f8 ed       	ldi	r31, 0xD8	; 216
    26e8:	ef 2e       	mov	r14, r31
    26ea:	f1 e0       	ldi	r31, 0x01	; 1
    26ec:	ff 2e       	mov	r15, r31
    26ee:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    26f0:	0f 2e       	mov	r0, r31
    26f2:	f4 ed       	ldi	r31, 0xD4	; 212
    26f4:	cf 2e       	mov	r12, r31
    26f6:	f1 e0       	ldi	r31, 0x01	; 1
    26f8:	df 2e       	mov	r13, r31
    26fa:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    26fc:	0f 2e       	mov	r0, r31
    26fe:	fa ec       	ldi	r31, 0xCA	; 202
    2700:	af 2e       	mov	r10, r31
    2702:	f1 e0       	ldi	r31, 0x01	; 1
    2704:	bf 2e       	mov	r11, r31
    2706:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    2708:	eb ad       	sts	0x6b, r30
    270a:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    270c:	80 81       	ld	r24, Z
    270e:	80 93 80 03 	sts	0x0380, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2712:	84 b5       	in	r24, 0x24	; 36
    2714:	8f 60       	ori	r24, 0x0F	; 15
    2716:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    271c:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    271e:	4d ad       	sts	0x6d, r20
    2720:	5e ad       	sts	0x6e, r21
    2722:	43 30       	cpi	r20, 0x03	; 3
    2724:	51 05       	cpc	r21, r1
    2726:	24 f4       	brge	.+8      	; 0x2730 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2728:	83 e0       	ldi	r24, 0x03	; 3
    272a:	80 93 7f 03 	sts	0x037F, r24
    272e:	03 c0       	rjmp	.+6      	; 0x2736 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	80 93 7f 03 	sts	0x037F, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    2736:	81 81       	ldd	r24, Z+1	; 0x01
    2738:	92 81       	ldd	r25, Z+2	; 0x02
    273a:	9a af       	sts	0x7a, r25
    273c:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    273e:	ad e0       	ldi	r26, 0x0D	; 13
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	be ab       	sts	0x5e, r27
    2744:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    2746:	00 e0       	ldi	r16, 0x00	; 0
    2748:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    274a:	e1 e0       	ldi	r30, 0x01	; 1
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	0d a8       	sts	0x8d, r16
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <tune_8ths+0x1a8>
    2752:	ee 0f       	add	r30, r30
    2754:	ff 1f       	adc	r31, r31
    2756:	0a 94       	dec	r0
    2758:	e2 f7       	brpl	.-8      	; 0x2752 <tune_8ths+0x1a4>
    275a:	f8 af       	sts	0x78, r31
    275c:	ef ab       	sts	0x5f, r30
    275e:	0e 2b       	or	r16, r30
    2760:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    2762:	ae e6       	ldi	r26, 0x6E	; 110
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	8c 91       	ld	r24, X
    2768:	8d 7f       	andi	r24, 0xFD	; 253
    276a:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    276c:	c4 01       	movw	r24, r8
    276e:	b8 01       	movw	r22, r16
    2770:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2774:	e3 ef       	ldi	r30, 0xF3	; 243
    2776:	f1 e0       	ldi	r31, 0x01	; 1
    2778:	31 97       	sbiw	r30, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <tune_8ths+0x1ca>
    277c:	00 c0       	rjmp	.+0      	; 0x277e <tune_8ths+0x1d0>
    277e:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2780:	ae e6       	ldi	r26, 0x6E	; 110
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	8c 91       	ld	r24, X
    2786:	82 60       	ori	r24, 0x02	; 2
    2788:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    278a:	10 92 7e 03 	sts	0x037E, r1
				period_counter = 0;
    278e:	10 92 81 03 	sts	0x0381, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    2792:	e8 e1       	ldi	r30, 0x18	; 24
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	2f e0       	ldi	r18, 0x0F	; 15
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	a8 95       	wdr
    279e:	e0 93 60 00 	sts	0x0060, r30
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    27a8:	80 91 7e 03 	lds	r24, 0x037E
    27ac:	88 23       	and	r24, r24
    27ae:	81 f5       	brne	.+96     	; 0x2810 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    27b0:	80 91 80 03 	lds	r24, 0x0380
    27b4:	4b a9       	sts	0x4b, r20
    27b6:	5c a9       	sts	0x4c, r21
    27b8:	48 0f       	add	r20, r24
    27ba:	51 1d       	adc	r21, r1
    27bc:	ca 01       	movw	r24, r20
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	0e 94 38 03 	call	0x670	; 0x670 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    27c4:	c3 01       	movw	r24, r6
    27c6:	b2 01       	movw	r22, r4
    27c8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    27cc:	c4 01       	movw	r24, r8
    27ce:	b8 01       	movw	r22, r16
    27d0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    27d4:	c7 01       	movw	r24, r14
    27d6:	60 e0       	ldi	r22, 0x00	; 0
    27d8:	70 e0       	ldi	r23, 0x00	; 0
    27da:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    27de:	c6 01       	movw	r24, r12
    27e0:	6f ef       	ldi	r22, 0xFF	; 255
    27e2:	7f e3       	ldi	r23, 0x3F	; 63
    27e4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    27e8:	c5 01       	movw	r24, r10
    27ea:	6f ef       	ldi	r22, 0xFF	; 255
    27ec:	7f e3       	ldi	r23, 0x3F	; 63
    27ee:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    27f2:	c1 01       	movw	r24, r2
    27f4:	60 e0       	ldi	r22, 0x00	; 0
    27f6:	70 e2       	ldi	r23, 0x20	; 32
    27f8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    27fc:	89 a9       	sts	0x49, r24
    27fe:	9a a9       	sts	0x4a, r25
    2800:	6f ef       	ldi	r22, 0xFF	; 255
    2802:	7f e3       	ldi	r23, 0x3F	; 63
    2804:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2808:	80 91 7e 03 	lds	r24, 0x037E
    280c:	88 23       	and	r24, r24
    280e:	81 f2       	breq	.-96     	; 0x27b0 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    2810:	58 e1       	ldi	r21, 0x18	; 24
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	50 93 60 00 	sts	0x0060, r21
    281a:	10 92 60 00 	sts	0x0060, r1
    281e:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    2820:	80 91 7c 03 	lds	r24, 0x037C
    2824:	90 91 7d 03 	lds	r25, 0x037D
    2828:	a9 ad       	sts	0x69, r26
    282a:	ba ad       	sts	0x6a, r27
    282c:	a8 17       	cp	r26, r24
    282e:	b9 07       	cpc	r27, r25
    2830:	50 f0       	brcs	.+20     	; 0x2846 <tune_8ths+0x298>
    2832:	80 91 af 02 	lds	r24, 0x02AF
    2836:	81 30       	cpi	r24, 0x01	; 1
    2838:	31 f4       	brne	.+12     	; 0x2846 <tune_8ths+0x298>
    283a:	8f a9       	sts	0x4f, r24
    283c:	98 ad       	sts	0x68, r25
    283e:	80 95       	com	r24
    2840:	90 95       	com	r25
    2842:	08 23       	and	r16, r24
    2844:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2846:	80 91 7c 03 	lds	r24, 0x037C
    284a:	90 91 7d 03 	lds	r25, 0x037D
    284e:	e9 ad       	sts	0x69, r30
    2850:	fa ad       	sts	0x6a, r31
    2852:	8e 17       	cp	r24, r30
    2854:	9f 07       	cpc	r25, r31
    2856:	21 f4       	brne	.+8      	; 0x2860 <tune_8ths+0x2b2>
    2858:	80 91 af 02 	lds	r24, 0x02AF
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	71 f0       	breq	.+28     	; 0x287c <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    2860:	f1 e0       	ldi	r31, 0x01	; 1
    2862:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2866:	2d a9       	sts	0x4d, r18
    2868:	3e a9       	sts	0x4e, r19
    286a:	21 50       	subi	r18, 0x01	; 1
    286c:	30 40       	sbci	r19, 0x00	; 0
    286e:	3e ab       	sts	0x5e, r19
    2870:	2d ab       	sts	0x5d, r18
    2872:	4f ef       	ldi	r20, 0xFF	; 255
    2874:	2f 3f       	cpi	r18, 0xFF	; 255
    2876:	34 07       	cpc	r19, r20
    2878:	09 f0       	breq	.+2      	; 0x287c <tune_8ths+0x2ce>
    287a:	67 cf       	rjmp	.-306    	; 0x274a <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    287c:	21 96       	adiw	r28, 0x01	; 1
    287e:	ae ad       	sts	0x6e, r26
    2880:	bf ad       	sts	0x6f, r27
    2882:	21 97       	sbiw	r28, 0x01	; 1
    2884:	0d 93       	st	X+, r16
    2886:	1d 93       	st	X+, r17
    2888:	21 96       	adiw	r28, 0x01	; 1
    288a:	bf af       	sts	0x7f, r27
    288c:	ae af       	sts	0x7e, r26
    288e:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2890:	ee e6       	ldi	r30, 0x6E	; 110
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	8d 7f       	andi	r24, 0xFD	; 253
    2898:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    289a:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    289c:	2d ad       	sts	0x6d, r18
    289e:	3e ad       	sts	0x6e, r19
    28a0:	2f 5f       	subi	r18, 0xFF	; 255
    28a2:	3f 4f       	sbci	r19, 0xFF	; 255
    28a4:	3e af       	sts	0x7e, r19
    28a6:	2d af       	sts	0x7d, r18
    28a8:	4b ad       	sts	0x6b, r20
    28aa:	5c ad       	sts	0x6c, r21
    28ac:	4d 5f       	subi	r20, 0xFD	; 253
    28ae:	5f 4f       	sbci	r21, 0xFF	; 255
    28b0:	5c af       	sts	0x7c, r21
    28b2:	4b af       	sts	0x7b, r20
    28b4:	20 31       	cpi	r18, 0x10	; 16
    28b6:	31 05       	cpc	r19, r1
    28b8:	09 f0       	breq	.+2      	; 0x28bc <tune_8ths+0x30e>
    28ba:	26 cf       	rjmp	.-436    	; 0x2708 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    28bc:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    28be:	c0 5c       	subi	r28, 0xC0	; 192
    28c0:	df 4f       	sbci	r29, 0xFF	; 255
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	1f 91       	pop	r17
    28d2:	0f 91       	pop	r16
    28d4:	ff 90       	pop	r15
    28d6:	ef 90       	pop	r14
    28d8:	df 90       	pop	r13
    28da:	cf 90       	pop	r12
    28dc:	bf 90       	pop	r11
    28de:	af 90       	pop	r10
    28e0:	9f 90       	pop	r9
    28e2:	8f 90       	pop	r8
    28e4:	7f 90       	pop	r7
    28e6:	6f 90       	pop	r6
    28e8:	5f 90       	pop	r5
    28ea:	4f 90       	pop	r4
    28ec:	3f 90       	pop	r3
    28ee:	2f 90       	pop	r2
    28f0:	08 95       	ret

000028f2 <tune_filter>:
	
void tune_filter(void) {
    28f2:	2f 92       	push	r2
    28f4:	3f 92       	push	r3
    28f6:	4f 92       	push	r4
    28f8:	5f 92       	push	r5
    28fa:	6f 92       	push	r6
    28fc:	7f 92       	push	r7
    28fe:	8f 92       	push	r8
    2900:	9f 92       	push	r9
    2902:	af 92       	push	r10
    2904:	bf 92       	push	r11
    2906:	cf 92       	push	r12
    2908:	df 92       	push	r13
    290a:	ef 92       	push	r14
    290c:	ff 92       	push	r15
    290e:	0f 93       	push	r16
    2910:	1f 93       	push	r17
    2912:	cf 93       	push	r28
    2914:	df 93       	push	r29
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	e9 97       	sbiw	r28, 0x39	; 57
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    2926:	de 01       	movw	r26, r28
    2928:	11 96       	adiw	r26, 0x01	; 1
    292a:	e0 e6       	ldi	r30, 0x60	; 96
    292c:	f2 e0       	ldi	r31, 0x02	; 2
    292e:	8d e2       	ldi	r24, 0x2D	; 45
    2930:	01 90       	ld	r0, Z+
    2932:	0d 92       	st	X+, r0
    2934:	81 50       	subi	r24, 0x01	; 1
    2936:	e1 f7       	brne	.-8      	; 0x2930 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2938:	88 ed       	ldi	r24, 0xD8	; 216
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	60 e0       	ldi	r22, 0x00	; 0
    293e:	70 e0       	ldi	r23, 0x00	; 0
    2940:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2944:	81 ee       	ldi	r24, 0xE1	; 225
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	60 e0       	ldi	r22, 0x00	; 0
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2950:	82 ee       	ldi	r24, 0xE2	; 226
    2952:	91 e0       	ldi	r25, 0x01	; 1
    2954:	60 e0       	ldi	r22, 0x00	; 0
    2956:	70 e0       	ldi	r23, 0x00	; 0
    2958:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    295c:	87 eb       	ldi	r24, 0xB7	; 183
    295e:	92 e0       	ldi	r25, 0x02	; 2
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2968:	8a ed       	ldi	r24, 0xDA	; 218
    296a:	91 e0       	ldi	r25, 0x01	; 1
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	70 e0       	ldi	r23, 0x00	; 0
    2970:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    2974:	8f ed       	ldi	r24, 0xDF	; 223
    2976:	91 e0       	ldi	r25, 0x01	; 1
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	70 e0       	ldi	r23, 0x00	; 0
    297c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2980:	80 ee       	ldi	r24, 0xE0	; 224
    2982:	91 e0       	ldi	r25, 0x01	; 1
    2984:	60 e0       	ldi	r22, 0x00	; 0
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    298c:	81 ed       	ldi	r24, 0xD1	; 209
    298e:	91 e0       	ldi	r25, 0x01	; 1
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2998:	86 ed       	ldi	r24, 0xD6	; 214
    299a:	91 e0       	ldi	r25, 0x01	; 1
    299c:	60 e0       	ldi	r22, 0x00	; 0
    299e:	70 e0       	ldi	r23, 0x00	; 0
    29a0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    29a4:	82 ed       	ldi	r24, 0xD2	; 210
    29a6:	91 e0       	ldi	r25, 0x01	; 1
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    29b0:	83 ed       	ldi	r24, 0xD3	; 211
    29b2:	91 e0       	ldi	r25, 0x01	; 1
    29b4:	60 e0       	ldi	r22, 0x00	; 0
    29b6:	70 e0       	ldi	r23, 0x00	; 0
    29b8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    29bc:	84 ed       	ldi	r24, 0xD4	; 212
    29be:	91 e0       	ldi	r25, 0x01	; 1
    29c0:	6f ef       	ldi	r22, 0xFF	; 255
    29c2:	7f e3       	ldi	r23, 0x3F	; 63
    29c4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    29c8:	85 ed       	ldi	r24, 0xD5	; 213
    29ca:	91 e0       	ldi	r25, 0x01	; 1
    29cc:	6f ef       	ldi	r22, 0xFF	; 255
    29ce:	7f e3       	ldi	r23, 0x3F	; 63
    29d0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    29d4:	89 ed       	ldi	r24, 0xD9	; 217
    29d6:	91 e0       	ldi	r25, 0x01	; 1
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	70 e0       	ldi	r23, 0x00	; 0
    29dc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    29e0:	8e ec       	ldi	r24, 0xCE	; 206
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    29ec:	8c ec       	ldi	r24, 0xCC	; 204
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	60 e0       	ldi	r22, 0x00	; 0
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    29f8:	8a ec       	ldi	r24, 0xCA	; 202
    29fa:	91 e0       	ldi	r25, 0x01	; 1
    29fc:	6f ef       	ldi	r22, 0xFF	; 255
    29fe:	7f e3       	ldi	r23, 0x3F	; 63
    2a00:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    2a10:	80 ed       	ldi	r24, 0xD0	; 208
    2a12:	91 e0       	ldi	r25, 0x01	; 1
    2a14:	60 e0       	ldi	r22, 0x00	; 0
    2a16:	70 e0       	ldi	r23, 0x00	; 0
    2a18:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2a1c:	83 ee       	ldi	r24, 0xE3	; 227
    2a1e:	91 e0       	ldi	r25, 0x01	; 1
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	70 e0       	ldi	r23, 0x00	; 0
    2a24:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2a28:	84 ee       	ldi	r24, 0xE4	; 228
    2a2a:	91 e0       	ldi	r25, 0x01	; 1
    2a2c:	60 e0       	ldi	r22, 0x00	; 0
    2a2e:	70 e0       	ldi	r23, 0x00	; 0
    2a30:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    2a34:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2a36:	ed ed       	ldi	r30, 0xDD	; 221
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	80 64       	ori	r24, 0x40	; 64
    2a3e:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2a40:	80 81       	ld	r24, Z
    2a42:	8f 7b       	andi	r24, 0xBF	; 191
    2a44:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	80 93 80 03 	sts	0x0380, r24
	PORTF |= (1<<GATE); //turn gate on
    2a4c:	89 9a       	sbi	0x11, 1	; 17
    2a4e:	9e 01       	movw	r18, r28
    2a50:	2f 5f       	subi	r18, 0xFF	; 255
    2a52:	3f 4f       	sbci	r19, 0xFF	; 255
    2a54:	3d ab       	sts	0x5d, r19
    2a56:	2c ab       	sts	0x5c, r18
    2a58:	85 e1       	ldi	r24, 0x15	; 21
    2a5a:	93 e0       	ldi	r25, 0x03	; 3
    2a5c:	99 af       	sts	0x79, r25
    2a5e:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2a60:	1f aa       	sts	0x9f, r17
    2a62:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    2a64:	0f 2e       	mov	r0, r31
    2a66:	f4 ed       	ldi	r31, 0xD4	; 212
    2a68:	af 2e       	mov	r10, r31
    2a6a:	f1 e0       	ldi	r31, 0x01	; 1
    2a6c:	bf 2e       	mov	r11, r31
    2a6e:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2a70:	0f 2e       	mov	r0, r31
    2a72:	f8 ed       	ldi	r31, 0xD8	; 216
    2a74:	6f 2e       	mov	r6, r31
    2a76:	f1 e0       	ldi	r31, 0x01	; 1
    2a78:	7f 2e       	mov	r7, r31
    2a7a:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2a7c:	0f 2e       	mov	r0, r31
    2a7e:	f5 ed       	ldi	r31, 0xD5	; 213
    2a80:	4f 2e       	mov	r4, r31
    2a82:	f1 e0       	ldi	r31, 0x01	; 1
    2a84:	5f 2e       	mov	r5, r31
    2a86:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    2a88:	0f 2e       	mov	r0, r31
    2a8a:	fa ec       	ldi	r31, 0xCA	; 202
    2a8c:	2f 2e       	mov	r2, r31
    2a8e:	f1 e0       	ldi	r31, 0x01	; 1
    2a90:	3f 2e       	mov	r3, r31
    2a92:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    2a94:	ac a9       	sts	0x4c, r26
    2a96:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    2a98:	8c 91       	ld	r24, X
    2a9a:	80 93 80 03 	sts	0x0380, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2a9e:	84 b5       	in	r24, 0x24	; 36
    2aa0:	8f 60       	ori	r24, 0x0F	; 15
    2aa2:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2aa8:	ee e6       	ldi	r30, 0x6E	; 110
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	82 60       	ori	r24, 0x02	; 2
    2ab0:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    2ab2:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    2ab4:	ee a9       	sts	0x4e, r30
    2ab6:	ff a9       	sts	0x4f, r31
    2ab8:	e2 30       	cpi	r30, 0x02	; 2
    2aba:	f1 05       	cpc	r31, r1
    2abc:	24 f4       	brge	.+8      	; 0x2ac6 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	80 93 7f 03 	sts	0x037F, r24
    2ac4:	03 c0       	rjmp	.+6      	; 0x2acc <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    2ac6:	82 e0       	ldi	r24, 0x02	; 2
    2ac8:	80 93 7f 03 	sts	0x037F, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    2acc:	11 96       	adiw	r26, 0x01	; 1
    2ace:	2d 91       	ld	r18, X+
    2ad0:	3c 91       	ld	r19, X
    2ad2:	12 97       	sbiw	r26, 0x02	; 2
    2ad4:	3b ab       	sts	0x5b, r19
    2ad6:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2ad8:	8d e0       	ldi	r24, 0x0D	; 13
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	9f a7       	lds	r25, 0x7f
    2ade:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2ae0:	ee 24       	eor	r14, r14
    2ae2:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2ae4:	0f 2e       	mov	r0, r31
    2ae6:	f1 ed       	ldi	r31, 0xD1	; 209
    2ae8:	cf 2e       	mov	r12, r31
    2aea:	f1 e0       	ldi	r31, 0x01	; 1
    2aec:	df 2e       	mov	r13, r31
    2aee:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2af0:	0f 2e       	mov	r0, r31
    2af2:	f6 ed       	ldi	r31, 0xD6	; 214
    2af4:	8f 2e       	mov	r8, r31
    2af6:	f1 e0       	ldi	r31, 0x01	; 1
    2af8:	9f 2e       	mov	r9, r31
    2afa:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	fc 01       	movw	r30, r24
    2b02:	0e a4       	lds	r16, 0xae
    2b04:	02 c0       	rjmp	.+4      	; 0x2b0a <tune_filter+0x218>
    2b06:	ee 0f       	add	r30, r30
    2b08:	ff 1f       	adc	r31, r31
    2b0a:	0a 94       	dec	r0
    2b0c:	e2 f7       	brpl	.-8      	; 0x2b06 <tune_filter+0x214>
    2b0e:	f9 ab       	sts	0x59, r31
    2b10:	e8 ab       	sts	0x58, r30
    2b12:	ee 2a       	or	r14, r30
    2b14:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2b16:	c5 01       	movw	r24, r10
    2b18:	b7 01       	movw	r22, r14
    2b1a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			count_finished = FALSE;
    2b1e:	10 92 7e 03 	sts	0x037E, r1
			period_counter = 0;
    2b22:	10 92 81 03 	sts	0x0381, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2b26:	8f e0       	ldi	r24, 0x0F	; 15
    2b28:	28 e1       	ldi	r18, 0x18	; 24
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	a8 95       	wdr
    2b32:	20 93 60 00 	sts	0x0060, r18
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2b3c:	80 91 7e 03 	lds	r24, 0x037E
    2b40:	88 23       	and	r24, r24
    2b42:	b1 f5       	brne	.+108    	; 0x2bb0 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    2b44:	02 ed       	ldi	r16, 0xD2	; 210
    2b46:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2b48:	80 91 80 03 	lds	r24, 0x0380
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	84 5d       	subi	r24, 0xD4	; 212
    2b50:	9e 4f       	sbci	r25, 0xFE	; 254
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	0e 94 38 03 	call	0x670	; 0x670 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2b58:	c5 01       	movw	r24, r10
    2b5a:	b7 01       	movw	r22, r14
    2b5c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2b60:	c3 01       	movw	r24, r6
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	70 e0       	ldi	r23, 0x00	; 0
    2b66:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2b6a:	c2 01       	movw	r24, r4
    2b6c:	6f ef       	ldi	r22, 0xFF	; 255
    2b6e:	7f e3       	ldi	r23, 0x3F	; 63
    2b70:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    2b74:	c1 01       	movw	r24, r2
    2b76:	6f ef       	ldi	r22, 0xFF	; 255
    2b78:	7f e3       	ldi	r23, 0x3F	; 63
    2b7a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    2b7e:	8e ec       	ldi	r24, 0xCE	; 206
    2b80:	91 e0       	ldi	r25, 0x01	; 1
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2b8a:	c6 01       	movw	r24, r12
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    2b94:	c4 01       	movw	r24, r8
    2b96:	60 e0       	ldi	r22, 0x00	; 0
    2b98:	70 e0       	ldi	r23, 0x00	; 0
    2b9a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    2b9e:	c8 01       	movw	r24, r16
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    2ba8:	80 91 7e 03 	lds	r24, 0x037E
    2bac:	88 23       	and	r24, r24
    2bae:	61 f2       	breq	.-104    	; 0x2b48 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    2bb0:	88 e1       	ldi	r24, 0x18	; 24
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	80 93 60 00 	sts	0x0060, r24
    2bba:	10 92 60 00 	sts	0x0060, r1
    2bbe:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    2bc0:	80 91 7c 03 	lds	r24, 0x037C
    2bc4:	90 91 7d 03 	lds	r25, 0x037D
    2bc8:	2a a9       	sts	0x4a, r18
    2bca:	3b a9       	sts	0x4b, r19
    2bcc:	28 17       	cp	r18, r24
    2bce:	39 07       	cpc	r19, r25
    2bd0:	50 f0       	brcs	.+20     	; 0x2be6 <tune_filter+0x2f4>
    2bd2:	80 91 af 02 	lds	r24, 0x02AF
    2bd6:	81 30       	cpi	r24, 0x01	; 1
    2bd8:	31 f4       	brne	.+12     	; 0x2be6 <tune_filter+0x2f4>
    2bda:	88 a9       	sts	0x48, r24
    2bdc:	99 a9       	sts	0x49, r25
    2bde:	80 95       	com	r24
    2be0:	90 95       	com	r25
    2be2:	e8 22       	and	r14, r24
    2be4:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2be6:	80 91 7c 03 	lds	r24, 0x037C
    2bea:	90 91 7d 03 	lds	r25, 0x037D
    2bee:	ea a9       	sts	0x4a, r30
    2bf0:	fb a9       	sts	0x4b, r31
    2bf2:	8e 17       	cp	r24, r30
    2bf4:	9f 07       	cpc	r25, r31
    2bf6:	21 f4       	brne	.+8      	; 0x2c00 <tune_filter+0x30e>
    2bf8:	80 91 af 02 	lds	r24, 0x02AF
    2bfc:	81 30       	cpi	r24, 0x01	; 1
    2bfe:	71 f0       	breq	.+28     	; 0x2c1c <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2c06:	2e a5       	lds	r18, 0x6e
    2c08:	3f a5       	lds	r19, 0x6f
    2c0a:	21 50       	subi	r18, 0x01	; 1
    2c0c:	30 40       	sbci	r19, 0x00	; 0
    2c0e:	3f a7       	lds	r19, 0x7f
    2c10:	2e a7       	lds	r18, 0x7e
    2c12:	8f ef       	ldi	r24, 0xFF	; 255
    2c14:	2f 3f       	cpi	r18, 0xFF	; 255
    2c16:	38 07       	cpc	r19, r24
    2c18:	09 f0       	breq	.+2      	; 0x2c1c <tune_filter+0x32a>
    2c1a:	70 cf       	rjmp	.-288    	; 0x2afc <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2c1c:	ee a9       	sts	0x4e, r30
    2c1e:	ff a9       	sts	0x4f, r31
    2c20:	31 96       	adiw	r30, 0x01	; 1
    2c22:	ff ab       	sts	0x5f, r31
    2c24:	ee ab       	sts	0x5e, r30
    2c26:	c7 01       	movw	r24, r14
    2c28:	80 96       	adiw	r24, 0x20	; 32
    2c2a:	e8 ad       	sts	0x68, r30
    2c2c:	f9 ad       	sts	0x69, r31
    2c2e:	81 93       	st	Z+, r24
    2c30:	91 93       	st	Z+, r25
    2c32:	f9 af       	sts	0x79, r31
    2c34:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2c36:	ee e6       	ldi	r30, 0x6E	; 110
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	8d 7f       	andi	r24, 0xFD	; 253
    2c3e:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2c40:	14 bc       	out	0x24, r1	; 36
    2c42:	2c a9       	sts	0x4c, r18
    2c44:	3d a9       	sts	0x4d, r19
    2c46:	2d 5f       	subi	r18, 0xFD	; 253
    2c48:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4a:	3d ab       	sts	0x5d, r19
    2c4c:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2c4e:	8e a9       	sts	0x4e, r24
    2c50:	9f a9       	sts	0x4f, r25
    2c52:	8f 30       	cpi	r24, 0x0F	; 15
    2c54:	91 05       	cpc	r25, r1
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <tune_filter+0x368>
    2c58:	1d cf       	rjmp	.-454    	; 0x2a94 <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2c5a:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2c5c:	e9 96       	adiw	r28, 0x39	; 57
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	ff 90       	pop	r15
    2c72:	ef 90       	pop	r14
    2c74:	df 90       	pop	r13
    2c76:	cf 90       	pop	r12
    2c78:	bf 90       	pop	r11
    2c7a:	af 90       	pop	r10
    2c7c:	9f 90       	pop	r9
    2c7e:	8f 90       	pop	r8
    2c80:	7f 90       	pop	r7
    2c82:	6f 90       	pop	r6
    2c84:	5f 90       	pop	r5
    2c86:	4f 90       	pop	r4
    2c88:	3f 90       	pop	r3
    2c8a:	2f 90       	pop	r2
    2c8c:	08 95       	ret

00002c8e <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2c8e:	83 e1       	ldi	r24, 0x13	; 19
    2c90:	93 e0       	ldi	r25, 0x03	; 3
    2c92:	6c e0       	ldi	r22, 0x0C	; 12
    2c94:	76 e0       	ldi	r23, 0x06	; 6
    2c96:	40 e2       	ldi	r20, 0x20	; 32
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2c9e:	85 e5       	ldi	r24, 0x55	; 85
    2ca0:	93 e0       	ldi	r25, 0x03	; 3
    2ca2:	6e e4       	ldi	r22, 0x4E	; 78
    2ca4:	76 e0       	ldi	r23, 0x06	; 6
    2ca6:	42 e2       	ldi	r20, 0x22	; 34
    2ca8:	50 e0       	ldi	r21, 0x00	; 0
    2caa:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2cae:	83 e3       	ldi	r24, 0x33	; 51
    2cb0:	93 e0       	ldi	r25, 0x03	; 3
    2cb2:	6c e2       	ldi	r22, 0x2C	; 44
    2cb4:	76 e0       	ldi	r23, 0x06	; 6
    2cb6:	42 e2       	ldi	r20, 0x22	; 34
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__eeupd_block_m6450a>
	
	
}
    2cbe:	08 95       	ret

00002cc0 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2cc0:	82 e7       	ldi	r24, 0x72	; 114
    2cc2:	96 e0       	ldi	r25, 0x06	; 6
    2cc4:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__eerd_word_m6450a>
    2cc8:	90 93 7a 03 	sts	0x037A, r25
    2ccc:	80 93 79 03 	sts	0x0379, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2cd0:	80 e7       	ldi	r24, 0x70	; 112
    2cd2:	96 e0       	ldi	r25, 0x06	; 6
    2cd4:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__eerd_word_m6450a>
    2cd8:	90 93 78 03 	sts	0x0378, r25
    2cdc:	80 93 77 03 	sts	0x0377, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2ce0:	85 e5       	ldi	r24, 0x55	; 85
    2ce2:	93 e0       	ldi	r25, 0x03	; 3
    2ce4:	6e e4       	ldi	r22, 0x4E	; 78
    2ce6:	76 e0       	ldi	r23, 0x06	; 6
    2ce8:	42 e2       	ldi	r20, 0x22	; 34
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2cf0:	83 e3       	ldi	r24, 0x33	; 51
    2cf2:	93 e0       	ldi	r25, 0x03	; 3
    2cf4:	6c e2       	ldi	r22, 0x2C	; 44
    2cf6:	76 e0       	ldi	r23, 0x06	; 6
    2cf8:	42 e2       	ldi	r20, 0x22	; 34
    2cfa:	50 e0       	ldi	r21, 0x00	; 0
    2cfc:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2d00:	83 e1       	ldi	r24, 0x13	; 19
    2d02:	93 e0       	ldi	r25, 0x03	; 3
    2d04:	6c e0       	ldi	r22, 0x0C	; 12
    2d06:	76 e0       	ldi	r23, 0x06	; 6
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	50 e0       	ldi	r21, 0x00	; 0
    2d0c:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2d10:	08 95       	ret

00002d12 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2d12:	98 2f       	mov	r25, r24
    2d14:	96 95       	lsr	r25
    2d16:	96 95       	lsr	r25
    2d18:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2d1a:	29 2f       	mov	r18, r25
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	f9 01       	movw	r30, r18
    2d20:	31 97       	sbiw	r30, 0x01	; 1
    2d22:	ee 0f       	add	r30, r30
    2d24:	ff 1f       	adc	r31, r31
    2d26:	e6 0f       	add	r30, r22
    2d28:	f7 1f       	adc	r31, r23
    2d2a:	01 90       	ld	r0, Z+
    2d2c:	f0 81       	ld	r31, Z
    2d2e:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2d30:	22 0f       	add	r18, r18
    2d32:	33 1f       	adc	r19, r19
    2d34:	26 0f       	add	r18, r22
    2d36:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2d38:	d9 01       	movw	r26, r18
    2d3a:	4d 91       	ld	r20, X+
    2d3c:	5c 91       	ld	r21, X
    2d3e:	11 97       	sbiw	r26, 0x01	; 1
    2d40:	4e 1b       	sub	r20, r30
    2d42:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2d44:	99 0f       	add	r25, r25
    2d46:	99 0f       	add	r25, r25
    2d48:	99 0f       	add	r25, r25
    2d4a:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	48 9f       	mul	r20, r24
    2d50:	90 01       	movw	r18, r0
    2d52:	49 9f       	mul	r20, r25
    2d54:	30 0d       	add	r19, r0
    2d56:	58 9f       	mul	r21, r24
    2d58:	30 0d       	add	r19, r0
    2d5a:	11 24       	eor	r1, r1
    2d5c:	36 95       	lsr	r19
    2d5e:	27 95       	ror	r18
    2d60:	36 95       	lsr	r19
    2d62:	27 95       	ror	r18
    2d64:	36 95       	lsr	r19
    2d66:	27 95       	ror	r18
    2d68:	e2 0f       	add	r30, r18
    2d6a:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2d6c:	8e 2f       	mov	r24, r30
    2d6e:	9f 2f       	mov	r25, r31
    2d70:	08 95       	ret

00002d72 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	a2 97       	sbiw	r28, 0x22	; 34
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2d86:	de 01       	movw	r26, r28
    2d88:	11 96       	adiw	r26, 0x01	; 1
    2d8a:	ed e8       	ldi	r30, 0x8D	; 141
    2d8c:	f2 e0       	ldi	r31, 0x02	; 2
    2d8e:	82 e2       	ldi	r24, 0x22	; 34
    2d90:	01 90       	ld	r0, Z+
    2d92:	0d 92       	st	X+, r0
    2d94:	81 50       	subi	r24, 0x01	; 1
    2d96:	e1 f7       	brne	.-8      	; 0x2d90 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2d98:	a5 e5       	ldi	r26, 0x55	; 85
    2d9a:	b3 e0       	ldi	r27, 0x03	; 3
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	31 96       	adiw	r30, 0x01	; 1
    2da0:	82 e2       	ldi	r24, 0x22	; 34
    2da2:	01 90       	ld	r0, Z+
    2da4:	0d 92       	st	X+, r0
    2da6:	81 50       	subi	r24, 0x01	; 1
    2da8:	e1 f7       	brne	.-8      	; 0x2da2 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2daa:	a3 e3       	ldi	r26, 0x33	; 51
    2dac:	b3 e0       	ldi	r27, 0x03	; 3
    2dae:	fe 01       	movw	r30, r28
    2db0:	31 96       	adiw	r30, 0x01	; 1
    2db2:	82 e2       	ldi	r24, 0x22	; 34
    2db4:	01 90       	ld	r0, Z+
    2db6:	0d 92       	st	X+, r0
    2db8:	81 50       	subi	r24, 0x01	; 1
    2dba:	e1 f7       	brne	.-8      	; 0x2db4 <set_one_volt_per_octave+0x42>
	
	
}
    2dbc:	a2 96       	adiw	r28, 0x22	; 34
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	08 95       	ret

00002dce <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2dce:	ef e6       	ldi	r30, 0x6F	; 111
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	82 70       	andi	r24, 0x02	; 2
    2dd6:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2dd8:	e1 e8       	ldi	r30, 0x81	; 129
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	87 7f       	andi	r24, 0xF7	; 247
    2de0:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2de2:	8f e0       	ldi	r24, 0x0F	; 15
    2de4:	6f e0       	ldi	r22, 0x0F	; 15
    2de6:	7e e5       	ldi	r23, 0x5E	; 94
    2de8:	0e 94 75 11 	call	0x22ea	; 0x22ea <set_vco_init_cv>
    2dec:	90 93 7a 03 	sts	0x037A, r25
    2df0:	80 93 79 03 	sts	0x0379, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2df4:	80 ef       	ldi	r24, 0xF0	; 240
    2df6:	6f e0       	ldi	r22, 0x0F	; 15
    2df8:	7e e5       	ldi	r23, 0x5E	; 94
    2dfa:	0e 94 75 11 	call	0x22ea	; 0x22ea <set_vco_init_cv>
    2dfe:	90 93 78 03 	sts	0x0378, r25
    2e02:	80 93 77 03 	sts	0x0377, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2e06:	8f e0       	ldi	r24, 0x0F	; 15
    2e08:	0e 94 d7 12 	call	0x25ae	; 0x25ae <tune_8ths>
			tune_8ths(VCO2);
    2e0c:	80 ef       	ldi	r24, 0xF0	; 240
    2e0e:	0e 94 d7 12 	call	0x25ae	; 0x25ae <tune_8ths>
			tune_filter();
    2e12:	0e 94 79 14 	call	0x28f2	; 0x28f2 <tune_filter>
			save_tuning_tables();
    2e16:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <save_tuning_tables>
    2e1a:	8f e4       	ldi	r24, 0x4F	; 79
    2e1c:	93 ec       	ldi	r25, 0xC3	; 195
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	f1 f7       	brne	.-4      	; 0x2e1e <tune+0x50>
    2e22:	00 c0       	rjmp	.+0      	; 0x2e24 <tune+0x56>
    2e24:	00 00       	nop
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2e26:	08 95       	ret

00002e28 <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2e28:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2e2a:	98 2f       	mov	r25, r24
    2e2c:	9c 70       	andi	r25, 0x0C	; 12
    2e2e:	20 91 c5 02 	lds	r18, 0x02C5
    2e32:	92 2b       	or	r25, r18
    2e34:	90 93 c5 02 	sts	0x02C5, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2e38:	98 2f       	mov	r25, r24
    2e3a:	92 95       	swap	r25
    2e3c:	96 95       	lsr	r25
    2e3e:	97 70       	andi	r25, 0x07	; 7
    2e40:	90 ff       	sbrs	r25, 0
    2e42:	16 c0       	rjmp	.+44     	; 0x2e70 <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2e44:	20 91 85 03 	lds	r18, 0x0385
    2e48:	30 91 86 03 	lds	r19, 0x0386
    2e4c:	2f 5f       	subi	r18, 0xFF	; 255
    2e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e50:	30 93 86 03 	sts	0x0386, r19
    2e54:	20 93 85 03 	sts	0x0385, r18
    2e58:	92 e0       	ldi	r25, 0x02	; 2
    2e5a:	28 35       	cpi	r18, 0x58	; 88
    2e5c:	39 07       	cpc	r19, r25
    2e5e:	61 f4       	brne	.+24     	; 0x2e78 <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2e60:	10 92 86 03 	sts	0x0386, r1
    2e64:	10 92 85 03 	sts	0x0385, r1
			current_patch.mode = CAL;
    2e68:	95 e0       	ldi	r25, 0x05	; 5
    2e6a:	90 93 0b 03 	sts	0x030B, r25
    2e6e:	04 c0       	rjmp	.+8      	; 0x2e78 <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2e70:	10 92 86 03 	sts	0x0386, r1
    2e74:	10 92 85 03 	sts	0x0385, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2e78:	90 91 87 03 	lds	r25, 0x0387
    2e7c:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2e7e:	98 27       	eor	r25, r24
    2e80:	90 93 87 03 	sts	0x0387, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2e84:	89 23       	and	r24, r25
    2e86:	08 95       	ret

00002e88 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2e88:	ed ed       	ldi	r30, 0xDD	; 221
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	90 81       	ld	r25, Z
    2e8e:	9f 7b       	andi	r25, 0xBF	; 191
    2e90:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2e92:	28 2f       	mov	r18, r24
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	21 70       	andi	r18, 0x01	; 1
    2e98:	30 70       	andi	r19, 0x00	; 0
    2e9a:	22 0f       	add	r18, r18
    2e9c:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2e9e:	68 2f       	mov	r22, r24
    2ea0:	62 95       	swap	r22
    2ea2:	66 95       	lsr	r22
    2ea4:	67 70       	andi	r22, 0x07	; 7
    2ea6:	67 95       	ror	r22
    2ea8:	66 27       	eor	r22, r22
    2eaa:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2eac:	26 2b       	or	r18, r22
    2eae:	98 2f       	mov	r25, r24
    2eb0:	96 95       	lsr	r25
    2eb2:	96 95       	lsr	r25
    2eb4:	91 70       	andi	r25, 0x01	; 1
    2eb6:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2eb8:	68 2f       	mov	r22, r24
    2eba:	66 1f       	adc	r22, r22
    2ebc:	66 27       	eor	r22, r22
    2ebe:	66 1f       	adc	r22, r22
    2ec0:	66 0f       	add	r22, r22
    2ec2:	66 0f       	add	r22, r22
    2ec4:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2ec6:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2ec8:	a8 2f       	mov	r26, r24
    2eca:	a6 95       	lsr	r26
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	a1 70       	andi	r26, 0x01	; 1
    2ed0:	b0 70       	andi	r27, 0x00	; 0
    2ed2:	bd 01       	movw	r22, r26
    2ed4:	66 0f       	add	r22, r22
    2ed6:	77 1f       	adc	r23, r23
    2ed8:	66 0f       	add	r22, r22
    2eda:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2edc:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2ede:	68 2f       	mov	r22, r24
    2ee0:	62 95       	swap	r22
    2ee2:	6f 70       	andi	r22, 0x0F	; 15
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	61 70       	andi	r22, 0x01	; 1
    2ee8:	70 70       	andi	r23, 0x00	; 0
    2eea:	ab 01       	movw	r20, r22
    2eec:	00 24       	eor	r0, r0
    2eee:	56 95       	lsr	r21
    2ef0:	47 95       	ror	r20
    2ef2:	07 94       	ror	r0
    2ef4:	56 95       	lsr	r21
    2ef6:	47 95       	ror	r20
    2ef8:	07 94       	ror	r0
    2efa:	54 2f       	mov	r21, r20
    2efc:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2efe:	62 2f       	mov	r22, r18
    2f00:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2f02:	48 2f       	mov	r20, r24
    2f04:	42 95       	swap	r20
    2f06:	46 95       	lsr	r20
    2f08:	46 95       	lsr	r20
    2f0a:	43 70       	andi	r20, 0x03	; 3
    2f0c:	50 e0       	ldi	r21, 0x00	; 0
    2f0e:	41 70       	andi	r20, 0x01	; 1
    2f10:	50 70       	andi	r21, 0x00	; 0
    2f12:	9a 01       	movw	r18, r20
    2f14:	22 0f       	add	r18, r18
    2f16:	33 1f       	adc	r19, r19
    2f18:	22 95       	swap	r18
    2f1a:	32 95       	swap	r19
    2f1c:	30 7f       	andi	r19, 0xF0	; 240
    2f1e:	32 27       	eor	r19, r18
    2f20:	20 7f       	andi	r18, 0xF0	; 240
    2f22:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2f24:	46 2f       	mov	r20, r22
    2f26:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2f28:	86 95       	lsr	r24
    2f2a:	86 95       	lsr	r24
    2f2c:	86 95       	lsr	r24
    2f2e:	28 2f       	mov	r18, r24
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	21 70       	andi	r18, 0x01	; 1
    2f34:	30 70       	andi	r19, 0x00	; 0
    2f36:	c9 01       	movw	r24, r18
    2f38:	82 95       	swap	r24
    2f3a:	92 95       	swap	r25
    2f3c:	90 7f       	andi	r25, 0xF0	; 240
    2f3e:	98 27       	eor	r25, r24
    2f40:	80 7f       	andi	r24, 0xF0	; 240
    2f42:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2f44:	84 2b       	or	r24, r20
    2f46:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2f48:	80 81       	ld	r24, Z
    2f4a:	80 64       	ori	r24, 0x40	; 64
    2f4c:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2f4e:	80 81       	ld	r24, Z
    2f50:	8f 7b       	andi	r24, 0xBF	; 191
    2f52:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2f54:	12 b8       	out	0x02, r1	; 2
	
	
    2f56:	08 95       	ret

00002f58 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2f58:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2f5a:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2f5c:	74 83       	std	Z+4, r23	; 0x04
    2f5e:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2f60:	11 82       	std	Z+1, r1	; 0x01
    2f62:	10 82       	st	Z, r1
}
    2f64:	08 95       	ret

00002f66 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2f66:	1f 93       	push	r17
    2f68:	cf 93       	push	r28
    2f6a:	df 93       	push	r29
    2f6c:	ec 01       	movw	r28, r24
    2f6e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2f70:	0e 94 22 18 	call	0x3044	; 0x3044 <store_and_clear_interrupt>
    2f74:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2f76:	39 81       	ldd	r19, Y+1	; 0x01
    2f78:	83 2f       	mov	r24, r19
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	6a 81       	ldd	r22, Y+2	; 0x02
    2f80:	70 e0       	ldi	r23, 0x00	; 0
    2f82:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__divmodhi4>
    2f86:	48 81       	ld	r20, Y
    2f88:	50 e0       	ldi	r21, 0x00	; 0
    2f8a:	84 17       	cp	r24, r20
    2f8c:	95 07       	cpc	r25, r21
    2f8e:	29 f4       	brne	.+10     	; 0x2f9a <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2f90:	82 2f       	mov	r24, r18
    2f92:	0e 94 25 18 	call	0x304a	; 0x304a <restore_interrupt_setting>
      return false;
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	11 c0       	rjmp	.+34     	; 0x2fbc <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2f9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f9e:	e3 0f       	add	r30, r19
    2fa0:	f1 1d       	adc	r31, r1
    2fa2:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	01 96       	adiw	r24, 0x01	; 1
    2faa:	6a 81       	ldd	r22, Y+2	; 0x02
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__divmodhi4>
    2fb2:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2fb4:	82 2f       	mov	r24, r18
    2fb6:	0e 94 25 18 	call	0x304a	; 0x304a <restore_interrupt_setting>
      return true;
    2fba:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	1f 91       	pop	r17
    2fc2:	08 95       	ret

00002fc4 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2fca:	0e 94 22 18 	call	0x3044	; 0x3044 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2fce:	29 81       	ldd	r18, Y+1	; 0x01
    2fd0:	98 81       	ld	r25, Y
    2fd2:	29 17       	cp	r18, r25
    2fd4:	18 f0       	brcs	.+6      	; 0x2fdc <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2fd6:	c2 2f       	mov	r28, r18
    2fd8:	c9 1b       	sub	r28, r25
    2fda:	03 c0       	rjmp	.+6      	; 0x2fe2 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2fdc:	ca 81       	ldd	r28, Y+2	; 0x02
    2fde:	c2 0f       	add	r28, r18
    2fe0:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2fe2:	0e 94 25 18 	call	0x304a	; 0x304a <restore_interrupt_setting>
   return len;
}
    2fe6:	8c 2f       	mov	r24, r28
    2fe8:	df 91       	pop	r29
    2fea:	cf 91       	pop	r28
    2fec:	08 95       	ret

00002fee <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2fee:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2ff0:	20 81       	ld	r18, Z
    2ff2:	86 2f       	mov	r24, r22
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	82 0f       	add	r24, r18
    2ff8:	91 1d       	adc	r25, r1
    2ffa:	62 81       	ldd	r22, Z+2	; 0x02
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__divmodhi4>
    3002:	03 80       	ldd	r0, Z+3	; 0x03
    3004:	f4 81       	ldd	r31, Z+4	; 0x04
    3006:	e0 2d       	mov	r30, r0
    3008:	e8 0f       	add	r30, r24
    300a:	f9 1f       	adc	r31, r25
}
    300c:	80 81       	ld	r24, Z
    300e:	08 95       	ret

00003010 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    3010:	1f 93       	push	r17
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	ec 01       	movw	r28, r24
    3018:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    301a:	0e 94 22 18 	call	0x3044	; 0x3044 <store_and_clear_interrupt>
    301e:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    3020:	88 81       	ld	r24, Y
    3022:	21 2f       	mov	r18, r17
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	28 0f       	add	r18, r24
    3028:	31 1d       	adc	r19, r1
    302a:	6a 81       	ldd	r22, Y+2	; 0x02
    302c:	c9 01       	movw	r24, r18
    302e:	70 e0       	ldi	r23, 0x00	; 0
    3030:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__divmodhi4>
    3034:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    3036:	84 2f       	mov	r24, r20
    3038:	0e 94 25 18 	call	0x304a	; 0x304a <restore_interrupt_setting>
}
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	1f 91       	pop	r17
    3042:	08 95       	ret

00003044 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    3044:	8f b7       	in	r24, 0x3f	; 63
   cli();
    3046:	f8 94       	cli
   return sreg;
}
    3048:	08 95       	ret

0000304a <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    304a:	8f bf       	out	0x3f, r24	; 63
}
    304c:	08 95       	ret

0000304e <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    304e:	88 1f       	adc	r24, r24
    3050:	88 27       	eor	r24, r24
    3052:	88 1f       	adc	r24, r24
    3054:	08 95       	ret

00003056 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    3056:	91 e0       	ldi	r25, 0x01	; 1
    3058:	88 3f       	cpi	r24, 0xF8	; 248
    305a:	08 f4       	brcc	.+2      	; 0x305e <midi_is_realtime+0x8>
    305c:	90 e0       	ldi	r25, 0x00	; 0
}
    305e:	89 2f       	mov	r24, r25
    3060:	08 95       	ret

00003062 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    3062:	28 2f       	mov	r18, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	20 7f       	andi	r18, 0xF0	; 240
    3068:	30 70       	andi	r19, 0x00	; 0
    306a:	20 3c       	cpi	r18, 0xC0	; 192
    306c:	31 05       	cpc	r19, r1
    306e:	e9 f1       	breq	.+122    	; 0x30ea <midi_packet_length+0x88>
    3070:	21 3c       	cpi	r18, 0xC1	; 193
    3072:	31 05       	cpc	r19, r1
    3074:	8c f4       	brge	.+34     	; 0x3098 <midi_packet_length+0x36>
    3076:	20 39       	cpi	r18, 0x90	; 144
    3078:	31 05       	cpc	r19, r1
    307a:	e1 f0       	breq	.+56     	; 0x30b4 <midi_packet_length+0x52>
    307c:	21 39       	cpi	r18, 0x91	; 145
    307e:	31 05       	cpc	r19, r1
    3080:	24 f4       	brge	.+8      	; 0x308a <midi_packet_length+0x28>
    3082:	20 38       	cpi	r18, 0x80	; 128
    3084:	31 05       	cpc	r19, r1
    3086:	79 f5       	brne	.+94     	; 0x30e6 <midi_packet_length+0x84>
    3088:	15 c0       	rjmp	.+42     	; 0x30b4 <midi_packet_length+0x52>
    308a:	20 3a       	cpi	r18, 0xA0	; 160
    308c:	31 05       	cpc	r19, r1
    308e:	91 f0       	breq	.+36     	; 0x30b4 <midi_packet_length+0x52>
    3090:	20 3b       	cpi	r18, 0xB0	; 176
    3092:	31 05       	cpc	r19, r1
    3094:	41 f5       	brne	.+80     	; 0x30e6 <midi_packet_length+0x84>
    3096:	0e c0       	rjmp	.+28     	; 0x30b4 <midi_packet_length+0x52>
    3098:	20 3e       	cpi	r18, 0xE0	; 224
    309a:	31 05       	cpc	r19, r1
    309c:	59 f0       	breq	.+22     	; 0x30b4 <midi_packet_length+0x52>
    309e:	21 3e       	cpi	r18, 0xE1	; 225
    30a0:	31 05       	cpc	r19, r1
    30a2:	24 f4       	brge	.+8      	; 0x30ac <midi_packet_length+0x4a>
    30a4:	20 3d       	cpi	r18, 0xD0	; 208
    30a6:	31 05       	cpc	r19, r1
    30a8:	f1 f4       	brne	.+60     	; 0x30e6 <midi_packet_length+0x84>
    30aa:	1f c0       	rjmp	.+62     	; 0x30ea <midi_packet_length+0x88>
    30ac:	20 3f       	cpi	r18, 0xF0	; 240
    30ae:	31 05       	cpc	r19, r1
    30b0:	d1 f4       	brne	.+52     	; 0x30e6 <midi_packet_length+0x84>
    30b2:	02 c0       	rjmp	.+4      	; 0x30b8 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    30b4:	83 e0       	ldi	r24, 0x03	; 3
    30b6:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    30b8:	86 3f       	cpi	r24, 0xF6	; 246
    30ba:	79 f0       	breq	.+30     	; 0x30da <midi_packet_length+0x78>
    30bc:	87 3f       	cpi	r24, 0xF7	; 247
    30be:	38 f4       	brcc	.+14     	; 0x30ce <midi_packet_length+0x6c>
    30c0:	82 3f       	cpi	r24, 0xF2	; 242
    30c2:	a9 f0       	breq	.+42     	; 0x30ee <midi_packet_length+0x8c>
    30c4:	83 3f       	cpi	r24, 0xF3	; 243
    30c6:	59 f0       	breq	.+22     	; 0x30de <midi_packet_length+0x7c>
    30c8:	81 3f       	cpi	r24, 0xF1	; 241
    30ca:	59 f4       	brne	.+22     	; 0x30e2 <midi_packet_length+0x80>
    30cc:	08 c0       	rjmp	.+16     	; 0x30de <midi_packet_length+0x7c>
    30ce:	88 3f       	cpi	r24, 0xF8	; 248
    30d0:	40 f0       	brcs	.+16     	; 0x30e2 <midi_packet_length+0x80>
    30d2:	8d 3f       	cpi	r24, 0xFD	; 253
    30d4:	10 f0       	brcs	.+4      	; 0x30da <midi_packet_length+0x78>
    30d6:	8e 3f       	cpi	r24, 0xFE	; 254
    30d8:	20 f0       	brcs	.+8      	; 0x30e2 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    30de:	82 e0       	ldi	r24, 0x02	; 2
    30e0:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	08 95       	ret
         }
      default:
         return UNDEFINED;
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    30ea:	82 e0       	ldi	r24, 0x02	; 2
    30ec:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    30ee:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    30f0:	08 95       	ret

000030f2 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    30f2:	0f 93       	push	r16
    30f4:	34 2f       	mov	r19, r20
    30f6:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    30f8:	46 2f       	mov	r20, r22
    30fa:	4f 70       	andi	r20, 0x0F	; 15
    30fc:	40 6b       	ori	r20, 0xB0	; 176
    30fe:	23 2f       	mov	r18, r19
    3100:	2f 77       	andi	r18, 0x7F	; 127
    3102:	0f 77       	andi	r16, 0x7F	; 127
    3104:	dc 01       	movw	r26, r24
    3106:	ed 91       	ld	r30, X+
    3108:	fc 91       	ld	r31, X
    310a:	63 e0       	ldi	r22, 0x03	; 3
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    3110:	0f 91       	pop	r16
    3112:	08 95       	ret

00003114 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    3114:	0f 93       	push	r16
    3116:	34 2f       	mov	r19, r20
    3118:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    311a:	46 2f       	mov	r20, r22
    311c:	4f 70       	andi	r20, 0x0F	; 15
    311e:	40 69       	ori	r20, 0x90	; 144
    3120:	23 2f       	mov	r18, r19
    3122:	2f 77       	andi	r18, 0x7F	; 127
    3124:	0f 77       	andi	r16, 0x7F	; 127
    3126:	dc 01       	movw	r26, r24
    3128:	ed 91       	ld	r30, X+
    312a:	fc 91       	ld	r31, X
    312c:	63 e0       	ldi	r22, 0x03	; 3
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    3132:	0f 91       	pop	r16
    3134:	08 95       	ret

00003136 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    3136:	0f 93       	push	r16
    3138:	34 2f       	mov	r19, r20
    313a:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    313c:	46 2f       	mov	r20, r22
    313e:	4f 70       	andi	r20, 0x0F	; 15
    3140:	40 68       	ori	r20, 0x80	; 128
    3142:	23 2f       	mov	r18, r19
    3144:	2f 77       	andi	r18, 0x7F	; 127
    3146:	0f 77       	andi	r16, 0x7F	; 127
    3148:	dc 01       	movw	r26, r24
    314a:	ed 91       	ld	r30, X+
    314c:	fc 91       	ld	r31, X
    314e:	63 e0       	ldi	r22, 0x03	; 3
    3150:	70 e0       	ldi	r23, 0x00	; 0
    3152:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    3154:	0f 91       	pop	r16
    3156:	08 95       	ret

00003158 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    3158:	0f 93       	push	r16
    315a:	34 2f       	mov	r19, r20
    315c:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    315e:	46 2f       	mov	r20, r22
    3160:	4f 70       	andi	r20, 0x0F	; 15
    3162:	40 6a       	ori	r20, 0xA0	; 160
    3164:	23 2f       	mov	r18, r19
    3166:	2f 77       	andi	r18, 0x7F	; 127
    3168:	0f 77       	andi	r16, 0x7F	; 127
    316a:	dc 01       	movw	r26, r24
    316c:	ed 91       	ld	r30, X+
    316e:	fc 91       	ld	r31, X
    3170:	63 e0       	ldi	r22, 0x03	; 3
    3172:	70 e0       	ldi	r23, 0x00	; 0
    3174:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    3176:	0f 91       	pop	r16
    3178:	08 95       	ret

0000317a <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    317a:	0f 93       	push	r16
    317c:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    317e:	20 e2       	ldi	r18, 0x20	; 32
    3180:	40 30       	cpi	r20, 0x00	; 0
    3182:	52 07       	cpc	r21, r18
    3184:	44 f4       	brge	.+16     	; 0x3196 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    3186:	a0 ee       	ldi	r26, 0xE0	; 224
    3188:	40 30       	cpi	r20, 0x00	; 0
    318a:	5a 07       	cpc	r21, r26
    318c:	3c f0       	brlt	.+14     	; 0x319c <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    318e:	8a 01       	movw	r16, r20
    3190:	00 50       	subi	r16, 0x00	; 0
    3192:	10 4e       	sbci	r17, 0xE0	; 224
    3194:	05 c0       	rjmp	.+10     	; 0x31a0 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    3196:	0f ef       	ldi	r16, 0xFF	; 255
    3198:	1f e3       	ldi	r17, 0x3F	; 63
    319a:	02 c0       	rjmp	.+4      	; 0x31a0 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    319c:	00 e0       	ldi	r16, 0x00	; 0
    319e:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    31a0:	46 2f       	mov	r20, r22
    31a2:	4f 70       	andi	r20, 0x0F	; 15
    31a4:	40 6e       	ori	r20, 0xE0	; 224
    31a6:	20 2f       	mov	r18, r16
    31a8:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    31aa:	00 0f       	add	r16, r16
    31ac:	01 2f       	mov	r16, r17
    31ae:	00 1f       	adc	r16, r16
    31b0:	11 0b       	sbc	r17, r17
    31b2:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    31b4:	0f 77       	andi	r16, 0x7F	; 127
    31b6:	dc 01       	movw	r26, r24
    31b8:	ed 91       	ld	r30, X+
    31ba:	fc 91       	ld	r31, X
    31bc:	63 e0       	ldi	r22, 0x03	; 3
    31be:	70 e0       	ldi	r23, 0x00	; 0
    31c0:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    31c2:	1f 91       	pop	r17
    31c4:	0f 91       	pop	r16
    31c6:	08 95       	ret

000031c8 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    31c8:	0f 93       	push	r16
    31ca:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    31cc:	46 2f       	mov	r20, r22
    31ce:	4f 70       	andi	r20, 0x0F	; 15
    31d0:	40 6c       	ori	r20, 0xC0	; 192
    31d2:	2f 77       	andi	r18, 0x7F	; 127
    31d4:	dc 01       	movw	r26, r24
    31d6:	ed 91       	ld	r30, X+
    31d8:	fc 91       	ld	r31, X
    31da:	62 e0       	ldi	r22, 0x02	; 2
    31dc:	70 e0       	ldi	r23, 0x00	; 0
    31de:	00 e0       	ldi	r16, 0x00	; 0
    31e0:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    31e2:	0f 91       	pop	r16
    31e4:	08 95       	ret

000031e6 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    31e6:	0f 93       	push	r16
    31e8:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    31ea:	46 2f       	mov	r20, r22
    31ec:	4f 70       	andi	r20, 0x0F	; 15
    31ee:	40 6d       	ori	r20, 0xD0	; 208
    31f0:	2f 77       	andi	r18, 0x7F	; 127
    31f2:	dc 01       	movw	r26, r24
    31f4:	ed 91       	ld	r30, X+
    31f6:	fc 91       	ld	r31, X
    31f8:	62 e0       	ldi	r22, 0x02	; 2
    31fa:	70 e0       	ldi	r23, 0x00	; 0
    31fc:	00 e0       	ldi	r16, 0x00	; 0
    31fe:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    3200:	0f 91       	pop	r16
    3202:	08 95       	ret

00003204 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    3204:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    3206:	dc 01       	movw	r26, r24
    3208:	ed 91       	ld	r30, X+
    320a:	fc 91       	ld	r31, X
    320c:	61 e0       	ldi	r22, 0x01	; 1
    320e:	70 e0       	ldi	r23, 0x00	; 0
    3210:	48 ef       	ldi	r20, 0xF8	; 248
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	00 e0       	ldi	r16, 0x00	; 0
    3216:	09 95       	icall
}
    3218:	0f 91       	pop	r16
    321a:	08 95       	ret

0000321c <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    321c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    321e:	dc 01       	movw	r26, r24
    3220:	ed 91       	ld	r30, X+
    3222:	fc 91       	ld	r31, X
    3224:	61 e0       	ldi	r22, 0x01	; 1
    3226:	70 e0       	ldi	r23, 0x00	; 0
    3228:	49 ef       	ldi	r20, 0xF9	; 249
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	00 e0       	ldi	r16, 0x00	; 0
    322e:	09 95       	icall
}
    3230:	0f 91       	pop	r16
    3232:	08 95       	ret

00003234 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    3234:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    3236:	dc 01       	movw	r26, r24
    3238:	ed 91       	ld	r30, X+
    323a:	fc 91       	ld	r31, X
    323c:	61 e0       	ldi	r22, 0x01	; 1
    323e:	70 e0       	ldi	r23, 0x00	; 0
    3240:	4a ef       	ldi	r20, 0xFA	; 250
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	00 e0       	ldi	r16, 0x00	; 0
    3246:	09 95       	icall
}
    3248:	0f 91       	pop	r16
    324a:	08 95       	ret

0000324c <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    324c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    324e:	dc 01       	movw	r26, r24
    3250:	ed 91       	ld	r30, X+
    3252:	fc 91       	ld	r31, X
    3254:	61 e0       	ldi	r22, 0x01	; 1
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	4b ef       	ldi	r20, 0xFB	; 251
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	00 e0       	ldi	r16, 0x00	; 0
    325e:	09 95       	icall
}
    3260:	0f 91       	pop	r16
    3262:	08 95       	ret

00003264 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    3264:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    3266:	dc 01       	movw	r26, r24
    3268:	ed 91       	ld	r30, X+
    326a:	fc 91       	ld	r31, X
    326c:	61 e0       	ldi	r22, 0x01	; 1
    326e:	70 e0       	ldi	r23, 0x00	; 0
    3270:	4c ef       	ldi	r20, 0xFC	; 252
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	00 e0       	ldi	r16, 0x00	; 0
    3276:	09 95       	icall
}
    3278:	0f 91       	pop	r16
    327a:	08 95       	ret

0000327c <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    327c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    327e:	dc 01       	movw	r26, r24
    3280:	ed 91       	ld	r30, X+
    3282:	fc 91       	ld	r31, X
    3284:	61 e0       	ldi	r22, 0x01	; 1
    3286:	70 e0       	ldi	r23, 0x00	; 0
    3288:	4e ef       	ldi	r20, 0xFE	; 254
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	00 e0       	ldi	r16, 0x00	; 0
    328e:	09 95       	icall
}
    3290:	0f 91       	pop	r16
    3292:	08 95       	ret

00003294 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    3294:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    3296:	dc 01       	movw	r26, r24
    3298:	ed 91       	ld	r30, X+
    329a:	fc 91       	ld	r31, X
    329c:	61 e0       	ldi	r22, 0x01	; 1
    329e:	70 e0       	ldi	r23, 0x00	; 0
    32a0:	4f ef       	ldi	r20, 0xFF	; 255
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	00 e0       	ldi	r16, 0x00	; 0
    32a6:	09 95       	icall
}
    32a8:	0f 91       	pop	r16
    32aa:	08 95       	ret

000032ac <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    32ac:	0f 93       	push	r16
   device->send_func(device, 2,
    32ae:	26 2f       	mov	r18, r22
    32b0:	2f 77       	andi	r18, 0x7F	; 127
    32b2:	dc 01       	movw	r26, r24
    32b4:	ed 91       	ld	r30, X+
    32b6:	fc 91       	ld	r31, X
    32b8:	62 e0       	ldi	r22, 0x02	; 2
    32ba:	70 e0       	ldi	r23, 0x00	; 0
    32bc:	41 ef       	ldi	r20, 0xF1	; 241
    32be:	00 e0       	ldi	r16, 0x00	; 0
    32c0:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    32c2:	0f 91       	pop	r16
    32c4:	08 95       	ret

000032c6 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    32c6:	0f 93       	push	r16
    32c8:	1f 93       	push	r17
   device->send_func(device, 3,
    32ca:	26 2f       	mov	r18, r22
    32cc:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    32ce:	8b 01       	movw	r16, r22
    32d0:	00 0f       	add	r16, r16
    32d2:	01 2f       	mov	r16, r17
    32d4:	00 1f       	adc	r16, r16
    32d6:	11 0b       	sbc	r17, r17
    32d8:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    32da:	0f 77       	andi	r16, 0x7F	; 127
    32dc:	dc 01       	movw	r26, r24
    32de:	ed 91       	ld	r30, X+
    32e0:	fc 91       	ld	r31, X
    32e2:	63 e0       	ldi	r22, 0x03	; 3
    32e4:	70 e0       	ldi	r23, 0x00	; 0
    32e6:	42 ef       	ldi	r20, 0xF2	; 242
    32e8:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
    32ee:	08 95       	ret

000032f0 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    32f0:	0f 93       	push	r16
   device->send_func(device, 2,
    32f2:	26 2f       	mov	r18, r22
    32f4:	2f 77       	andi	r18, 0x7F	; 127
    32f6:	dc 01       	movw	r26, r24
    32f8:	ed 91       	ld	r30, X+
    32fa:	fc 91       	ld	r31, X
    32fc:	62 e0       	ldi	r22, 0x02	; 2
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	43 ef       	ldi	r20, 0xF3	; 243
    3302:	00 e0       	ldi	r16, 0x00	; 0
    3304:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    3306:	0f 91       	pop	r16
    3308:	08 95       	ret

0000330a <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    330a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    330c:	dc 01       	movw	r26, r24
    330e:	ed 91       	ld	r30, X+
    3310:	fc 91       	ld	r31, X
    3312:	61 e0       	ldi	r22, 0x01	; 1
    3314:	70 e0       	ldi	r23, 0x00	; 0
    3316:	46 ef       	ldi	r20, 0xF6	; 246
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	00 e0       	ldi	r16, 0x00	; 0
    331c:	09 95       	icall
}
    331e:	0f 91       	pop	r16
    3320:	08 95       	ret

00003322 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    3322:	0f 93       	push	r16
    3324:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    3326:	dc 01       	movw	r26, r24
    3328:	ed 91       	ld	r30, X+
    332a:	fc 91       	ld	r31, X
    332c:	61 e0       	ldi	r22, 0x01	; 1
    332e:	70 e0       	ldi	r23, 0x00	; 0
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	00 e0       	ldi	r16, 0x00	; 0
    3334:	09 95       	icall
}
    3336:	0f 91       	pop	r16
    3338:	08 95       	ret

0000333a <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    333a:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    333c:	dc 01       	movw	r26, r24
    333e:	ed 91       	ld	r30, X+
    3340:	fc 91       	ld	r31, X
    3342:	09 95       	icall
}
    3344:	0f 91       	pop	r16
    3346:	08 95       	ret

00003348 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    3348:	6f 92       	push	r6
    334a:	7f 92       	push	r7
    334c:	8f 92       	push	r8
    334e:	9f 92       	push	r9
    3350:	af 92       	push	r10
    3352:	bf 92       	push	r11
    3354:	cf 92       	push	r12
    3356:	df 92       	push	r13
    3358:	ef 92       	push	r14
    335a:	ff 92       	push	r15
    335c:	0f 93       	push	r16
    335e:	1f 93       	push	r17
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	00 d0       	rcall	.+0      	; 0x3366 <midi_send_array+0x1e>
    3366:	0f 92       	push	r0
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	4c 01       	movw	r8, r24
    336e:	6b 01       	movw	r12, r22
    3370:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    3372:	61 15       	cp	r22, r1
    3374:	71 05       	cpc	r23, r1
    3376:	41 f1       	breq	.+80     	; 0x33c8 <midi_send_array+0x80>
    3378:	ee 24       	eor	r14, r14
    337a:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    337c:	0f 2e       	mov	r0, r31
    337e:	f3 e0       	ldi	r31, 0x03	; 3
    3380:	6f 2e       	mov	r6, r31
    3382:	77 24       	eor	r7, r7
    3384:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    3386:	19 82       	std	Y+1, r1	; 0x01
    3388:	1a 82       	std	Y+2, r1	; 0x02
    338a:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    338c:	86 01       	movw	r16, r12
    338e:	0e 19       	sub	r16, r14
    3390:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    3392:	04 30       	cpi	r16, 0x04	; 4
    3394:	11 05       	cpc	r17, r1
    3396:	08 f0       	brcs	.+2      	; 0x339a <midi_send_array+0x52>
    3398:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    339a:	b5 01       	movw	r22, r10
    339c:	6e 0d       	add	r22, r14
    339e:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    33a0:	ce 01       	movw	r24, r28
    33a2:	01 96       	adiw	r24, 0x01	; 1
    33a4:	40 2f       	mov	r20, r16
    33a6:	51 2f       	mov	r21, r17
    33a8:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    33ac:	c4 01       	movw	r24, r8
    33ae:	b8 01       	movw	r22, r16
    33b0:	49 81       	ldd	r20, Y+1	; 0x01
    33b2:	2a 81       	ldd	r18, Y+2	; 0x02
    33b4:	0b 81       	ldd	r16, Y+3	; 0x03
    33b6:	0e 94 9d 19 	call	0x333a	; 0x333a <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    33ba:	83 e0       	ldi	r24, 0x03	; 3
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	e8 0e       	add	r14, r24
    33c0:	f9 1e       	adc	r15, r25
    33c2:	ec 14       	cp	r14, r12
    33c4:	fd 04       	cpc	r15, r13
    33c6:	f8 f2       	brcs	.-66     	; 0x3386 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	df 91       	pop	r29
    33d0:	cf 91       	pop	r28
    33d2:	1f 91       	pop	r17
    33d4:	0f 91       	pop	r16
    33d6:	ff 90       	pop	r15
    33d8:	ef 90       	pop	r14
    33da:	df 90       	pop	r13
    33dc:	cf 90       	pop	r12
    33de:	bf 90       	pop	r11
    33e0:	af 90       	pop	r10
    33e2:	9f 90       	pop	r9
    33e4:	8f 90       	pop	r8
    33e6:	7f 90       	pop	r7
    33e8:	6f 90       	pop	r6
    33ea:	08 95       	ret

000033ec <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    33ec:	fc 01       	movw	r30, r24
    33ee:	73 83       	std	Z+3, r23	; 0x03
    33f0:	62 83       	std	Z+2, r22	; 0x02
}
    33f2:	08 95       	ret

000033f4 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    33f4:	fc 01       	movw	r30, r24
    33f6:	75 83       	std	Z+5, r23	; 0x05
    33f8:	64 83       	std	Z+4, r22	; 0x04
}
    33fa:	08 95       	ret

000033fc <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    33fc:	fc 01       	movw	r30, r24
    33fe:	77 83       	std	Z+7, r23	; 0x07
    3400:	66 83       	std	Z+6, r22	; 0x06
}
    3402:	08 95       	ret

00003404 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    3404:	fc 01       	movw	r30, r24
    3406:	71 87       	std	Z+9, r23	; 0x09
    3408:	60 87       	std	Z+8, r22	; 0x08
}
    340a:	08 95       	ret

0000340c <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    340c:	fc 01       	movw	r30, r24
    340e:	73 87       	std	Z+11, r23	; 0x0b
    3410:	62 87       	std	Z+10, r22	; 0x0a
}
    3412:	08 95       	ret

00003414 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    3414:	fc 01       	movw	r30, r24
    3416:	75 87       	std	Z+13, r23	; 0x0d
    3418:	64 87       	std	Z+12, r22	; 0x0c
}
    341a:	08 95       	ret

0000341c <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    341c:	fc 01       	movw	r30, r24
    341e:	77 87       	std	Z+15, r23	; 0x0f
    3420:	66 87       	std	Z+14, r22	; 0x0e
}
    3422:	08 95       	ret

00003424 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    3424:	fc 01       	movw	r30, r24
    3426:	71 8b       	std	Z+17, r23	; 0x11
    3428:	60 8b       	std	Z+16, r22	; 0x10
}
    342a:	08 95       	ret

0000342c <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    342c:	fc 01       	movw	r30, r24
    342e:	73 8b       	std	Z+19, r23	; 0x13
    3430:	62 8b       	std	Z+18, r22	; 0x12
}
    3432:	08 95       	ret

00003434 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    3434:	fc 01       	movw	r30, r24
    3436:	75 8b       	std	Z+21, r23	; 0x15
    3438:	64 8b       	std	Z+20, r22	; 0x14
}
    343a:	08 95       	ret

0000343c <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    343c:	fc 01       	movw	r30, r24
    343e:	77 8b       	std	Z+23, r23	; 0x17
    3440:	66 8b       	std	Z+22, r22	; 0x16
}
    3442:	08 95       	ret

00003444 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    3444:	fc 01       	movw	r30, r24
    3446:	71 8f       	std	Z+25, r23	; 0x19
    3448:	60 8f       	std	Z+24, r22	; 0x18
}
    344a:	08 95       	ret

0000344c <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    344c:	fc 01       	movw	r30, r24
    344e:	73 8f       	std	Z+27, r23	; 0x1b
    3450:	62 8f       	std	Z+26, r22	; 0x1a
}
    3452:	08 95       	ret

00003454 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    3454:	fc 01       	movw	r30, r24
    3456:	75 8f       	std	Z+29, r23	; 0x1d
    3458:	64 8f       	std	Z+28, r22	; 0x1c
}
    345a:	08 95       	ret

0000345c <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    345c:	fc 01       	movw	r30, r24
    345e:	77 8f       	std	Z+31, r23	; 0x1f
    3460:	66 8f       	std	Z+30, r22	; 0x1e
}
    3462:	08 95       	ret

00003464 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    3464:	cf 93       	push	r28
    3466:	df 93       	push	r29
    3468:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    346a:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    346c:	1f a2       	lds	r17, 0x9f
    346e:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    3470:	bc 01       	movw	r22, r24
    3472:	68 5d       	subi	r22, 0xD8	; 216
    3474:	7f 4f       	sbci	r23, 0xFF	; 255
    3476:	88 51       	subi	r24, 0x18	; 24
    3478:	9f 4f       	sbci	r25, 0xFF	; 255
    347a:	40 ec       	ldi	r20, 0xC0	; 192
    347c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    3480:	1b 82       	std	Y+3, r1	; 0x03
    3482:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    3484:	1d 82       	std	Y+5, r1	; 0x05
    3486:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    3488:	1f 82       	std	Y+7, r1	; 0x07
    348a:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    348c:	19 86       	std	Y+9, r1	; 0x09
    348e:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    3490:	1b 86       	std	Y+11, r1	; 0x0b
    3492:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    3494:	1d 86       	std	Y+13, r1	; 0x0d
    3496:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    3498:	1f 86       	std	Y+15, r1	; 0x0f
    349a:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    349c:	19 8a       	std	Y+17, r1	; 0x11
    349e:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    34a0:	1b 8a       	std	Y+19, r1	; 0x13
    34a2:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    34a4:	1d 8a       	std	Y+21, r1	; 0x15
    34a6:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    34a8:	1f 8a       	std	Y+23, r1	; 0x17
    34aa:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    34ac:	19 8e       	std	Y+25, r1	; 0x19
    34ae:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    34b0:	1b 8e       	std	Y+27, r1	; 0x1b
    34b2:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    34b4:	1d 8e       	std	Y+29, r1	; 0x1d
    34b6:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    34b8:	1f 8e       	std	Y+31, r1	; 0x1f
    34ba:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    34bc:	19 a2       	lds	r17, 0x99
    34be:	18 a2       	lds	r17, 0x98
}
    34c0:	df 91       	pop	r29
    34c2:	cf 91       	pop	r28
    34c4:	08 95       	ret

000034c6 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    34c6:	ef 92       	push	r14
    34c8:	ff 92       	push	r15
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    34d4:	66 23       	and	r22, r22
    34d6:	99 f0       	breq	.+38     	; 0x34fe <midi_device_input+0x38>
    34d8:	04 2f       	mov	r16, r20
    34da:	15 2f       	mov	r17, r21
    34dc:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    34de:	0f 2e       	mov	r0, r31
    34e0:	f8 ee       	ldi	r31, 0xE8	; 232
    34e2:	ef 2e       	mov	r14, r31
    34e4:	ff 24       	eor	r15, r15
    34e6:	f0 2d       	mov	r31, r0
    34e8:	e8 0e       	add	r14, r24
    34ea:	f9 1e       	adc	r15, r25
    34ec:	f8 01       	movw	r30, r16
    34ee:	61 91       	ld	r22, Z+
    34f0:	8f 01       	movw	r16, r30
    34f2:	c7 01       	movw	r24, r14
    34f4:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    34f8:	cf 5f       	subi	r28, 0xFF	; 255
    34fa:	cd 17       	cp	r28, r29
    34fc:	b9 f7       	brne	.-18     	; 0x34ec <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    34fe:	df 91       	pop	r29
    3500:	cf 91       	pop	r28
    3502:	1f 91       	pop	r17
    3504:	0f 91       	pop	r16
    3506:	ff 90       	pop	r15
    3508:	ef 90       	pop	r14
    350a:	08 95       	ret

0000350c <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    350c:	fc 01       	movw	r30, r24
    350e:	71 83       	std	Z+1, r23	; 0x01
    3510:	60 83       	st	Z, r22
}
    3512:	08 95       	ret

00003514 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    3514:	fc 01       	movw	r30, r24
    3516:	71 a3       	lds	r23, 0x51
    3518:	60 a3       	lds	r22, 0x50
}
    351a:	08 95       	ret

0000351c <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    351c:	af 92       	push	r10
    351e:	bf 92       	push	r11
    3520:	cf 92       	push	r12
    3522:	df 92       	push	r13
    3524:	ef 92       	push	r14
    3526:	ff 92       	push	r15
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	00 d0       	rcall	.+0      	; 0x3532 <midi_input_callbacks+0x16>
    3532:	0f 92       	push	r0
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	6c 01       	movw	r12, r24
    353a:	5b 01       	movw	r10, r22
    353c:	f4 2e       	mov	r15, r20
    353e:	e2 2e       	mov	r14, r18
    3540:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    3542:	dc 01       	movw	r26, r24
    3544:	95 96       	adiw	r26, 0x25	; 37
    3546:	8c 91       	ld	r24, X
    3548:	95 97       	sbiw	r26, 0x25	; 37
    354a:	84 30       	cpi	r24, 0x04	; 4
    354c:	e9 f4       	brne	.+58     	; 0x3588 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    354e:	5a 96       	adiw	r26, 0x1a	; 26
    3550:	ed 91       	ld	r30, X+
    3552:	fc 91       	ld	r31, X
    3554:	5b 97       	sbiw	r26, 0x1b	; 27
    3556:	30 97       	sbiw	r30, 0x00	; 0
    3558:	09 f4       	brne	.+2      	; 0x355c <midi_input_callbacks+0x40>
    355a:	ee c0       	rjmp	.+476    	; 0x3738 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    355c:	cb 01       	movw	r24, r22
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	63 e0       	ldi	r22, 0x03	; 3
    3562:	70 e0       	ldi	r23, 0x00	; 0
    3564:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodhi4>
    3568:	cb 01       	movw	r24, r22
    356a:	88 0f       	add	r24, r24
    356c:	99 1f       	adc	r25, r25
    356e:	68 0f       	add	r22, r24
    3570:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    3572:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    3574:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    3576:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    3578:	4a 2d       	mov	r20, r10
    357a:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    357c:	c6 01       	movw	r24, r12
    357e:	9e 01       	movw	r18, r28
    3580:	2f 5f       	subi	r18, 0xFF	; 255
    3582:	3f 4f       	sbci	r19, 0xFF	; 255
    3584:	09 95       	icall
    3586:	c8 c0       	rjmp	.+400    	; 0x3718 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    3588:	62 30       	cpi	r22, 0x02	; 2
    358a:	71 05       	cpc	r23, r1
    358c:	09 f4       	brne	.+2      	; 0x3590 <midi_input_callbacks+0x74>
    358e:	5f c0       	rjmp	.+190    	; 0x364e <midi_input_callbacks+0x132>
    3590:	63 30       	cpi	r22, 0x03	; 3
    3592:	71 05       	cpc	r23, r1
    3594:	29 f0       	breq	.+10     	; 0x35a0 <midi_input_callbacks+0x84>
    3596:	61 30       	cpi	r22, 0x01	; 1
    3598:	71 05       	cpc	r23, r1
    359a:	09 f0       	breq	.+2      	; 0x359e <midi_input_callbacks+0x82>
    359c:	b3 c0       	rjmp	.+358    	; 0x3704 <midi_input_callbacks+0x1e8>
    359e:	99 c0       	rjmp	.+306    	; 0x36d2 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    35a0:	84 2f       	mov	r24, r20
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	80 7f       	andi	r24, 0xF0	; 240
    35a6:	90 70       	andi	r25, 0x00	; 0
    35a8:	80 3a       	cpi	r24, 0xA0	; 160
    35aa:	91 05       	cpc	r25, r1
    35ac:	29 f1       	breq	.+74     	; 0x35f8 <midi_input_callbacks+0xdc>
    35ae:	81 3a       	cpi	r24, 0xA1	; 161
    35b0:	91 05       	cpc	r25, r1
    35b2:	3c f4       	brge	.+14     	; 0x35c2 <midi_input_callbacks+0xa6>
    35b4:	80 38       	cpi	r24, 0x80	; 128
    35b6:	91 05       	cpc	r25, r1
    35b8:	c9 f0       	breq	.+50     	; 0x35ec <midi_input_callbacks+0xd0>
    35ba:	80 39       	cpi	r24, 0x90	; 144
    35bc:	91 05       	cpc	r25, r1
    35be:	91 f5       	brne	.+100    	; 0x3624 <midi_input_callbacks+0x108>
    35c0:	0f c0       	rjmp	.+30     	; 0x35e0 <midi_input_callbacks+0xc4>
    35c2:	80 3e       	cpi	r24, 0xE0	; 224
    35c4:	91 05       	cpc	r25, r1
    35c6:	f1 f0       	breq	.+60     	; 0x3604 <midi_input_callbacks+0xe8>
    35c8:	80 3f       	cpi	r24, 0xF0	; 240
    35ca:	91 05       	cpc	r25, r1
    35cc:	09 f1       	breq	.+66     	; 0x3610 <midi_input_callbacks+0xf4>
    35ce:	80 3b       	cpi	r24, 0xB0	; 176
    35d0:	91 05       	cpc	r25, r1
    35d2:	41 f5       	brne	.+80     	; 0x3624 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    35d4:	d6 01       	movw	r26, r12
    35d6:	12 96       	adiw	r26, 0x02	; 2
    35d8:	ed 91       	ld	r30, X+
    35da:	fc 91       	ld	r31, X
    35dc:	13 97       	sbiw	r26, 0x03	; 3
              break;
    35de:	24 c0       	rjmp	.+72     	; 0x3628 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    35e0:	d6 01       	movw	r26, r12
    35e2:	14 96       	adiw	r26, 0x04	; 4
    35e4:	ed 91       	ld	r30, X+
    35e6:	fc 91       	ld	r31, X
    35e8:	15 97       	sbiw	r26, 0x05	; 5
              break;
    35ea:	1e c0       	rjmp	.+60     	; 0x3628 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    35ec:	d6 01       	movw	r26, r12
    35ee:	16 96       	adiw	r26, 0x06	; 6
    35f0:	ed 91       	ld	r30, X+
    35f2:	fc 91       	ld	r31, X
    35f4:	17 97       	sbiw	r26, 0x07	; 7
              break;
    35f6:	18 c0       	rjmp	.+48     	; 0x3628 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    35f8:	d6 01       	movw	r26, r12
    35fa:	18 96       	adiw	r26, 0x08	; 8
    35fc:	ed 91       	ld	r30, X+
    35fe:	fc 91       	ld	r31, X
    3600:	19 97       	sbiw	r26, 0x09	; 9
              break;
    3602:	12 c0       	rjmp	.+36     	; 0x3628 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    3604:	d6 01       	movw	r26, r12
    3606:	1a 96       	adiw	r26, 0x0a	; 10
    3608:	ed 91       	ld	r30, X+
    360a:	fc 91       	ld	r31, X
    360c:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    360e:	0c c0       	rjmp	.+24     	; 0x3628 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    3610:	b2 ef       	ldi	r27, 0xF2	; 242
    3612:	4b 17       	cp	r20, r27
    3614:	09 f0       	breq	.+2      	; 0x3618 <midi_input_callbacks+0xfc>
    3616:	90 c0       	rjmp	.+288    	; 0x3738 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    3618:	d6 01       	movw	r26, r12
    361a:	1c 96       	adiw	r26, 0x0c	; 12
    361c:	ed 91       	ld	r30, X+
    361e:	fc 91       	ld	r31, X
    3620:	1d 97       	sbiw	r26, 0x0d	; 13
    3622:	02 c0       	rjmp	.+4      	; 0x3628 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    3624:	e0 e0       	ldi	r30, 0x00	; 0
    3626:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    3628:	30 97       	sbiw	r30, 0x00	; 0
    362a:	09 f4       	brne	.+2      	; 0x362e <midi_input_callbacks+0x112>
    362c:	85 c0       	rjmp	.+266    	; 0x3738 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    362e:	b2 ef       	ldi	r27, 0xF2	; 242
    3630:	fb 16       	cp	r15, r27
    3632:	31 f4       	brne	.+12     	; 0x3640 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    3634:	c6 01       	movw	r24, r12
    3636:	62 ef       	ldi	r22, 0xF2	; 242
    3638:	4e 2d       	mov	r20, r14
    363a:	21 2f       	mov	r18, r17
    363c:	09 95       	icall
    363e:	6c c0       	rjmp	.+216    	; 0x3718 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    3640:	6f 2d       	mov	r22, r15
    3642:	6f 70       	andi	r22, 0x0F	; 15
    3644:	c6 01       	movw	r24, r12
    3646:	4e 2d       	mov	r20, r14
    3648:	21 2f       	mov	r18, r17
    364a:	09 95       	icall
    364c:	65 c0       	rjmp	.+202    	; 0x3718 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    364e:	84 2f       	mov	r24, r20
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	80 7f       	andi	r24, 0xF0	; 240
    3654:	90 70       	andi	r25, 0x00	; 0
    3656:	80 3d       	cpi	r24, 0xD0	; 208
    3658:	91 05       	cpc	r25, r1
    365a:	61 f0       	breq	.+24     	; 0x3674 <midi_input_callbacks+0x158>
    365c:	80 3f       	cpi	r24, 0xF0	; 240
    365e:	91 05       	cpc	r25, r1
    3660:	79 f0       	breq	.+30     	; 0x3680 <midi_input_callbacks+0x164>
    3662:	80 3c       	cpi	r24, 0xC0	; 192
    3664:	91 05       	cpc	r25, r1
    3666:	f9 f4       	brne	.+62     	; 0x36a6 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    3668:	d6 01       	movw	r26, r12
    366a:	1e 96       	adiw	r26, 0x0e	; 14
    366c:	ed 91       	ld	r30, X+
    366e:	fc 91       	ld	r31, X
    3670:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    3672:	1b c0       	rjmp	.+54     	; 0x36aa <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    3674:	d6 01       	movw	r26, r12
    3676:	50 96       	adiw	r26, 0x10	; 16
    3678:	ed 91       	ld	r30, X+
    367a:	fc 91       	ld	r31, X
    367c:	51 97       	sbiw	r26, 0x11	; 17
              break;
    367e:	15 c0       	rjmp	.+42     	; 0x36aa <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    3680:	b3 ef       	ldi	r27, 0xF3	; 243
    3682:	4b 17       	cp	r20, r27
    3684:	31 f4       	brne	.+12     	; 0x3692 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    3686:	d6 01       	movw	r26, r12
    3688:	52 96       	adiw	r26, 0x12	; 18
    368a:	ed 91       	ld	r30, X+
    368c:	fc 91       	ld	r31, X
    368e:	53 97       	sbiw	r26, 0x13	; 19
    3690:	0c c0       	rjmp	.+24     	; 0x36aa <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    3692:	b1 ef       	ldi	r27, 0xF1	; 241
    3694:	4b 17       	cp	r20, r27
    3696:	09 f0       	breq	.+2      	; 0x369a <midi_input_callbacks+0x17e>
    3698:	4f c0       	rjmp	.+158    	; 0x3738 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    369a:	d6 01       	movw	r26, r12
    369c:	54 96       	adiw	r26, 0x14	; 20
    369e:	ed 91       	ld	r30, X+
    36a0:	fc 91       	ld	r31, X
    36a2:	55 97       	sbiw	r26, 0x15	; 21
    36a4:	02 c0       	rjmp	.+4      	; 0x36aa <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    36a6:	e0 e0       	ldi	r30, 0x00	; 0
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    36aa:	30 97       	sbiw	r30, 0x00	; 0
    36ac:	09 f4       	brne	.+2      	; 0x36b0 <midi_input_callbacks+0x194>
    36ae:	44 c0       	rjmp	.+136    	; 0x3738 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    36b0:	b3 ef       	ldi	r27, 0xF3	; 243
    36b2:	fb 16       	cp	r15, r27
    36b4:	19 f0       	breq	.+6      	; 0x36bc <midi_input_callbacks+0x1a0>
    36b6:	81 ef       	ldi	r24, 0xF1	; 241
    36b8:	f8 16       	cp	r15, r24
    36ba:	29 f4       	brne	.+10     	; 0x36c6 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    36bc:	c6 01       	movw	r24, r12
    36be:	6f 2d       	mov	r22, r15
    36c0:	4e 2d       	mov	r20, r14
    36c2:	09 95       	icall
    36c4:	29 c0       	rjmp	.+82     	; 0x3718 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    36c6:	6f 2d       	mov	r22, r15
    36c8:	6f 70       	andi	r22, 0x0F	; 15
    36ca:	c6 01       	movw	r24, r12
    36cc:	4e 2d       	mov	r20, r14
    36ce:	09 95       	icall
    36d0:	23 c0       	rjmp	.+70     	; 0x3718 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    36d2:	84 2f       	mov	r24, r20
    36d4:	0e 94 2b 18 	call	0x3056	; 0x3056 <midi_is_realtime>
    36d8:	88 23       	and	r24, r24
    36da:	31 f0       	breq	.+12     	; 0x36e8 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    36dc:	d6 01       	movw	r26, r12
    36de:	56 96       	adiw	r26, 0x16	; 22
    36e0:	ed 91       	ld	r30, X+
    36e2:	fc 91       	ld	r31, X
    36e4:	57 97       	sbiw	r26, 0x17	; 23
    36e6:	08 c0       	rjmp	.+16     	; 0x36f8 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    36e8:	b6 ef       	ldi	r27, 0xF6	; 246
    36ea:	fb 16       	cp	r15, r27
    36ec:	29 f5       	brne	.+74     	; 0x3738 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    36ee:	d6 01       	movw	r26, r12
    36f0:	58 96       	adiw	r26, 0x18	; 24
    36f2:	ed 91       	ld	r30, X+
    36f4:	fc 91       	ld	r31, X
    36f6:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    36f8:	30 97       	sbiw	r30, 0x00	; 0
    36fa:	f1 f0       	breq	.+60     	; 0x3738 <midi_input_callbacks+0x21c>
            func(device, byte0);
    36fc:	c6 01       	movw	r24, r12
    36fe:	6f 2d       	mov	r22, r15
    3700:	09 95       	icall
    3702:	0a c0       	rjmp	.+20     	; 0x3718 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    3704:	64 30       	cpi	r22, 0x04	; 4
    3706:	71 05       	cpc	r23, r1
    3708:	a8 f4       	brcc	.+42     	; 0x3734 <midi_input_callbacks+0x218>
    370a:	16 c0       	rjmp	.+44     	; 0x3738 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    370c:	c6 01       	movw	r24, r12
    370e:	b5 01       	movw	r22, r10
    3710:	4f 2d       	mov	r20, r15
    3712:	2e 2d       	mov	r18, r14
    3714:	01 2f       	mov	r16, r17
    3716:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    3718:	d6 01       	movw	r26, r12
    371a:	5e 96       	adiw	r26, 0x1e	; 30
    371c:	ed 91       	ld	r30, X+
    371e:	fc 91       	ld	r31, X
    3720:	5f 97       	sbiw	r26, 0x1f	; 31
    3722:	30 97       	sbiw	r30, 0x00	; 0
    3724:	89 f0       	breq	.+34     	; 0x3748 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    3726:	c6 01       	movw	r24, r12
    3728:	b5 01       	movw	r22, r10
    372a:	4f 2d       	mov	r20, r15
    372c:	2e 2d       	mov	r18, r14
    372e:	01 2f       	mov	r16, r17
    3730:	09 95       	icall
    3732:	0a c0       	rjmp	.+20     	; 0x3748 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    3734:	aa 24       	eor	r10, r10
    3736:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    3738:	d6 01       	movw	r26, r12
    373a:	5c 96       	adiw	r26, 0x1c	; 28
    373c:	ed 91       	ld	r30, X+
    373e:	fc 91       	ld	r31, X
    3740:	5d 97       	sbiw	r26, 0x1d	; 29
    3742:	30 97       	sbiw	r30, 0x00	; 0
    3744:	19 f7       	brne	.-58     	; 0x370c <midi_input_callbacks+0x1f0>
    3746:	e8 cf       	rjmp	.-48     	; 0x3718 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	df 91       	pop	r29
    3750:	cf 91       	pop	r28
    3752:	1f 91       	pop	r17
    3754:	0f 91       	pop	r16
    3756:	ff 90       	pop	r15
    3758:	ef 90       	pop	r14
    375a:	df 90       	pop	r13
    375c:	cf 90       	pop	r12
    375e:	bf 90       	pop	r11
    3760:	af 90       	pop	r10
    3762:	08 95       	ret

00003764 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    3764:	ef 92       	push	r14
    3766:	ff 92       	push	r15
    3768:	0f 93       	push	r16
    376a:	cf 93       	push	r28
    376c:	df 93       	push	r29
    376e:	7c 01       	movw	r14, r24
    3770:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    3772:	86 2f       	mov	r24, r22
    3774:	0e 94 2b 18 	call	0x3056	; 0x3056 <midi_is_realtime>
    3778:	88 23       	and	r24, r24
    377a:	91 f0       	breq	.+36     	; 0x37a0 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    377c:	d7 01       	movw	r26, r14
    377e:	95 96       	adiw	r26, 0x25	; 37
    3780:	dc 91       	ld	r29, X
    3782:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	95 96       	adiw	r26, 0x25	; 37
    3788:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    378a:	c7 01       	movw	r24, r14
    378c:	61 e0       	ldi	r22, 0x01	; 1
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	4c 2f       	mov	r20, r28
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	00 e0       	ldi	r16, 0x00	; 0
    3796:	0e 94 8e 1a 	call	0x351c	; 0x351c <midi_input_callbacks>
    device->input_state = state;
    379a:	f7 01       	movw	r30, r14
    379c:	d5 a3       	lds	r29, 0x55
    379e:	b7 c0       	rjmp	.+366    	; 0x390e <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    37a0:	8c 2f       	mov	r24, r28
    37a2:	0e 94 27 18 	call	0x304e	; 0x304e <midi_is_statusbyte>
    37a6:	88 23       	and	r24, r24
    37a8:	09 f4       	brne	.+2      	; 0x37ac <midi_process_byte+0x48>
    37aa:	73 c0       	rjmp	.+230    	; 0x3892 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    37ac:	d7 01       	movw	r26, r14
    37ae:	95 96       	adiw	r26, 0x25	; 37
    37b0:	8c 91       	ld	r24, X
    37b2:	95 97       	sbiw	r26, 0x25	; 37
    37b4:	84 30       	cpi	r24, 0x04	; 4
    37b6:	49 f0       	breq	.+18     	; 0x37ca <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    37b8:	92 96       	adiw	r26, 0x22	; 34
    37ba:	cc 93       	st	X, r28
    37bc:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	97 96       	adiw	r26, 0x27	; 39
    37c4:	9c 93       	st	X, r25
    37c6:	8e 93       	st	-X, r24
    37c8:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    37ca:	8c 2f       	mov	r24, r28
    37cc:	0e 94 31 18 	call	0x3062	; 0x3062 <midi_packet_length>
    37d0:	81 30       	cpi	r24, 0x01	; 1
    37d2:	41 f0       	breq	.+16     	; 0x37e4 <midi_process_byte+0x80>
    37d4:	81 30       	cpi	r24, 0x01	; 1
    37d6:	00 f1       	brcs	.+64     	; 0x3818 <midi_process_byte+0xb4>
    37d8:	82 30       	cpi	r24, 0x02	; 2
    37da:	a1 f0       	breq	.+40     	; 0x3804 <midi_process_byte+0xa0>
    37dc:	83 30       	cpi	r24, 0x03	; 3
    37de:	09 f0       	breq	.+2      	; 0x37e2 <midi_process_byte+0x7e>
    37e0:	4f c0       	rjmp	.+158    	; 0x3880 <midi_process_byte+0x11c>
    37e2:	14 c0       	rjmp	.+40     	; 0x380c <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	f7 01       	movw	r30, r14
    37e8:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    37ea:	c7 01       	movw	r24, r14
    37ec:	61 e0       	ldi	r22, 0x01	; 1
    37ee:	70 e0       	ldi	r23, 0x00	; 0
    37f0:	4c 2f       	mov	r20, r28
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	00 e0       	ldi	r16, 0x00	; 0
    37f6:	0e 94 8e 1a 	call	0x351c	; 0x351c <midi_input_callbacks>
        device->input_state = IDLE;
    37fa:	d7 01       	movw	r26, r14
    37fc:	95 96       	adiw	r26, 0x25	; 37
    37fe:	1c 92       	st	X, r1
    3800:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3802:	85 c0       	rjmp	.+266    	; 0x390e <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    3804:	82 e0       	ldi	r24, 0x02	; 2
    3806:	f7 01       	movw	r30, r14
    3808:	85 a3       	lds	r24, 0x55
        break;
    380a:	81 c0       	rjmp	.+258    	; 0x390e <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    380c:	83 e0       	ldi	r24, 0x03	; 3
    380e:	d7 01       	movw	r26, r14
    3810:	95 96       	adiw	r26, 0x25	; 37
    3812:	8c 93       	st	X, r24
    3814:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3816:	7b c0       	rjmp	.+246    	; 0x390e <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    3818:	c0 3f       	cpi	r28, 0xF0	; 240
    381a:	19 f0       	breq	.+6      	; 0x3822 <midi_process_byte+0xbe>
    381c:	c7 3f       	cpi	r28, 0xF7	; 247
    381e:	59 f5       	brne	.+86     	; 0x3876 <midi_process_byte+0x112>
    3820:	0a c0       	rjmp	.+20     	; 0x3836 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    3822:	84 e0       	ldi	r24, 0x04	; 4
    3824:	f7 01       	movw	r30, r14
    3826:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    3828:	80 ef       	ldi	r24, 0xF0	; 240
    382a:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	97 a3       	lds	r25, 0x57
    3832:	86 a3       	lds	r24, 0x56
            break;
    3834:	6c c0       	rjmp	.+216    	; 0x390e <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    3836:	d7 01       	movw	r26, r14
    3838:	96 96       	adiw	r26, 0x26	; 38
    383a:	2d 91       	ld	r18, X+
    383c:	3c 91       	ld	r19, X
    383e:	97 97       	sbiw	r26, 0x27	; 39
    3840:	c9 01       	movw	r24, r18
    3842:	63 e0       	ldi	r22, 0x03	; 3
    3844:	70 e0       	ldi	r23, 0x00	; 0
    3846:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodhi4>
    384a:	f7 01       	movw	r30, r14
    384c:	e8 0f       	add	r30, r24
    384e:	f9 1f       	adc	r31, r25
    3850:	87 ef       	ldi	r24, 0xF7	; 247
    3852:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    3854:	b9 01       	movw	r22, r18
    3856:	6f 5f       	subi	r22, 0xFF	; 255
    3858:	7f 4f       	sbci	r23, 0xFF	; 255
    385a:	f7 01       	movw	r30, r14
    385c:	77 a3       	lds	r23, 0x57
    385e:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3860:	c7 01       	movw	r24, r14
    3862:	42 a1       	lds	r20, 0x42
    3864:	23 a1       	lds	r18, 0x43
    3866:	04 a1       	lds	r16, 0x44
    3868:	0e 94 8e 1a 	call	0x351c	; 0x351c <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    386c:	d7 01       	movw	r26, r14
    386e:	95 96       	adiw	r26, 0x25	; 37
    3870:	1c 92       	st	X, r1
    3872:	95 97       	sbiw	r26, 0x25	; 37
            break;
    3874:	4c c0       	rjmp	.+152    	; 0x390e <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    3876:	f7 01       	movw	r30, r14
    3878:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    387a:	17 a2       	lds	r17, 0x97
    387c:	16 a2       	lds	r17, 0x96
    387e:	47 c0       	rjmp	.+142    	; 0x390e <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    3880:	d7 01       	movw	r26, r14
    3882:	95 96       	adiw	r26, 0x25	; 37
    3884:	1c 92       	st	X, r1
    3886:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    3888:	97 96       	adiw	r26, 0x27	; 39
    388a:	1c 92       	st	X, r1
    388c:	1e 92       	st	-X, r1
    388e:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3890:	3e c0       	rjmp	.+124    	; 0x390e <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    3892:	f7 01       	movw	r30, r14
    3894:	25 a1       	lds	r18, 0x45
    3896:	22 23       	and	r18, r18
    3898:	d1 f1       	breq	.+116    	; 0x390e <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    389a:	06 a0       	lds	r16, 0x86
    389c:	f7 a1       	lds	r31, 0x47
    389e:	e0 2d       	mov	r30, r0
    38a0:	cf 01       	movw	r24, r30
    38a2:	63 e0       	ldi	r22, 0x03	; 3
    38a4:	70 e0       	ldi	r23, 0x00	; 0
    38a6:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodhi4>
    38aa:	ac 01       	movw	r20, r24
    38ac:	8e 0d       	add	r24, r14
    38ae:	9f 1d       	adc	r25, r15
    38b0:	dc 01       	movw	r26, r24
    38b2:	92 96       	adiw	r26, 0x22	; 34
    38b4:	cc 93       	st	X, r28
    38b6:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    38b8:	bf 01       	movw	r22, r30
    38ba:	6f 5f       	subi	r22, 0xFF	; 255
    38bc:	7f 4f       	sbci	r23, 0xFF	; 255
    38be:	f7 01       	movw	r30, r14
    38c0:	77 a3       	lds	r23, 0x57
    38c2:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    38c4:	41 30       	cpi	r20, 0x01	; 1
    38c6:	51 05       	cpc	r21, r1
    38c8:	91 f0       	breq	.+36     	; 0x38ee <midi_process_byte+0x18a>
    38ca:	42 30       	cpi	r20, 0x02	; 2
    38cc:	51 05       	cpc	r21, r1
    38ce:	f9 f4       	brne	.+62     	; 0x390e <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    38d0:	c7 01       	movw	r24, r14
    38d2:	42 a1       	lds	r20, 0x42
    38d4:	23 a1       	lds	r18, 0x43
    38d6:	04 a1       	lds	r16, 0x44
    38d8:	0e 94 8e 1a 	call	0x351c	; 0x351c <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    38dc:	f7 01       	movw	r30, r14
    38de:	85 a1       	lds	r24, 0x45
    38e0:	84 30       	cpi	r24, 0x04	; 4
    38e2:	a9 f0       	breq	.+42     	; 0x390e <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	97 a3       	lds	r25, 0x57
    38ea:	86 a3       	lds	r24, 0x56
    38ec:	10 c0       	rjmp	.+32     	; 0x390e <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    38ee:	22 30       	cpi	r18, 0x02	; 2
    38f0:	71 f4       	brne	.+28     	; 0x390e <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    38f2:	c7 01       	movw	r24, r14
    38f4:	42 a1       	lds	r20, 0x42
    38f6:	23 a1       	lds	r18, 0x43
    38f8:	00 e0       	ldi	r16, 0x00	; 0
    38fa:	0e 94 8e 1a 	call	0x351c	; 0x351c <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    38fe:	f7 01       	movw	r30, r14
    3900:	85 a1       	lds	r24, 0x45
    3902:	84 30       	cpi	r24, 0x04	; 4
    3904:	21 f0       	breq	.+8      	; 0x390e <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	97 a3       	lds	r25, 0x57
    390c:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	0f 91       	pop	r16
    3914:	ff 90       	pop	r15
    3916:	ef 90       	pop	r14
    3918:	08 95       	ret

0000391a <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    391a:	cf 92       	push	r12
    391c:	df 92       	push	r13
    391e:	ef 92       	push	r14
    3920:	ff 92       	push	r15
    3922:	0f 93       	push	r16
    3924:	1f 93       	push	r17
    3926:	cf 93       	push	r28
    3928:	df 93       	push	r29
    392a:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    392c:	dc 01       	movw	r26, r24
    392e:	90 96       	adiw	r26, 0x20	; 32
    3930:	ed 91       	ld	r30, X+
    3932:	fc 91       	ld	r31, X
    3934:	91 97       	sbiw	r26, 0x21	; 33
    3936:	30 97       	sbiw	r30, 0x00	; 0
    3938:	09 f0       	breq	.+2      	; 0x393c <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    393a:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    393c:	0f 2e       	mov	r0, r31
    393e:	f8 ee       	ldi	r31, 0xE8	; 232
    3940:	ef 2e       	mov	r14, r31
    3942:	ff 24       	eor	r15, r15
    3944:	f0 2d       	mov	r31, r0
    3946:	ec 0c       	add	r14, r12
    3948:	fd 1c       	adc	r15, r13
    394a:	c7 01       	movw	r24, r14
    394c:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3950:	c8 2f       	mov	r28, r24
    3952:	d0 e0       	ldi	r29, 0x00	; 0
    3954:	20 97       	sbiw	r28, 0x00	; 0
    3956:	99 f0       	breq	.+38     	; 0x397e <midi_device_process+0x64>
    3958:	00 e0       	ldi	r16, 0x00	; 0
    395a:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    395c:	c7 01       	movw	r24, r14
    395e:	60 e0       	ldi	r22, 0x00	; 0
    3960:	0e 94 f7 17 	call	0x2fee	; 0x2fee <bytequeue_get>
    3964:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    3966:	c6 01       	movw	r24, r12
    3968:	0e 94 b2 1b 	call	0x3764	; 0x3764 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    396c:	c7 01       	movw	r24, r14
    396e:	61 e0       	ldi	r22, 0x01	; 1
    3970:	0e 94 08 18 	call	0x3010	; 0x3010 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3974:	0f 5f       	subi	r16, 0xFF	; 255
    3976:	1f 4f       	sbci	r17, 0xFF	; 255
    3978:	0c 17       	cp	r16, r28
    397a:	1d 07       	cpc	r17, r29
    397c:	78 f3       	brcs	.-34     	; 0x395c <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    397e:	df 91       	pop	r29
    3980:	cf 91       	pop	r28
    3982:	1f 91       	pop	r17
    3984:	0f 91       	pop	r16
    3986:	ff 90       	pop	r15
    3988:	ef 90       	pop	r14
    398a:	df 90       	pop	r13
    398c:	cf 90       	pop	r12
    398e:	08 95       	ret

00003990 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3990:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    3992:	67 e0       	ldi	r22, 0x07	; 7
    3994:	70 e0       	ldi	r23, 0x00	; 0
    3996:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodhi4>
    399a:	48 2f       	mov	r20, r24
   if (remainder)
    399c:	88 23       	and	r24, r24
    399e:	81 f0       	breq	.+32     	; 0x39c0 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    39a0:	c9 01       	movw	r24, r18
    39a2:	67 e0       	ldi	r22, 0x07	; 7
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodhi4>
    39aa:	cb 01       	movw	r24, r22
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	88 0f       	add	r24, r24
    39b2:	99 1f       	adc	r25, r25
    39b4:	88 0f       	add	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	01 96       	adiw	r24, 0x01	; 1
    39ba:	84 0f       	add	r24, r20
    39bc:	91 1d       	adc	r25, r1
    39be:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    39c0:	c9 01       	movw	r24, r18
    39c2:	67 e0       	ldi	r22, 0x07	; 7
    39c4:	70 e0       	ldi	r23, 0x00	; 0
    39c6:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodhi4>
    39ca:	cb 01       	movw	r24, r22
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	88 0f       	add	r24, r24
    39d2:	99 1f       	adc	r25, r25
    39d4:	88 0f       	add	r24, r24
    39d6:	99 1f       	adc	r25, r25
}
    39d8:	08 95       	ret

000039da <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    39da:	48 2f       	mov	r20, r24
    39dc:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    39de:	a1 f0       	breq	.+40     	; 0x3a08 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    39e0:	9c 01       	movw	r18, r24
    39e2:	36 95       	lsr	r19
    39e4:	27 95       	ror	r18
    39e6:	36 95       	lsr	r19
    39e8:	27 95       	ror	r18
    39ea:	36 95       	lsr	r19
    39ec:	27 95       	ror	r18
    39ee:	c9 01       	movw	r24, r18
    39f0:	88 0f       	add	r24, r24
    39f2:	99 1f       	adc	r25, r25
    39f4:	88 0f       	add	r24, r24
    39f6:	99 1f       	adc	r25, r25
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	82 1b       	sub	r24, r18
    39fe:	93 0b       	sbc	r25, r19
    3a00:	01 97       	sbiw	r24, 0x01	; 1
    3a02:	84 0f       	add	r24, r20
    3a04:	91 1d       	adc	r25, r1
    3a06:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    3a08:	9c 01       	movw	r18, r24
    3a0a:	36 95       	lsr	r19
    3a0c:	27 95       	ror	r18
    3a0e:	36 95       	lsr	r19
    3a10:	27 95       	ror	r18
    3a12:	36 95       	lsr	r19
    3a14:	27 95       	ror	r18
    3a16:	c9 01       	movw	r24, r18
    3a18:	88 0f       	add	r24, r24
    3a1a:	99 1f       	adc	r25, r25
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	88 0f       	add	r24, r24
    3a22:	99 1f       	adc	r25, r25
    3a24:	82 1b       	sub	r24, r18
    3a26:	93 0b       	sbc	r25, r19
}
    3a28:	08 95       	ret

00003a2a <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3a2a:	2f 92       	push	r2
    3a2c:	3f 92       	push	r3
    3a2e:	4f 92       	push	r4
    3a30:	5f 92       	push	r5
    3a32:	6f 92       	push	r6
    3a34:	7f 92       	push	r7
    3a36:	8f 92       	push	r8
    3a38:	9f 92       	push	r9
    3a3a:	af 92       	push	r10
    3a3c:	bf 92       	push	r11
    3a3e:	cf 92       	push	r12
    3a40:	df 92       	push	r13
    3a42:	ef 92       	push	r14
    3a44:	ff 92       	push	r15
    3a46:	0f 93       	push	r16
    3a48:	1f 93       	push	r17
    3a4a:	cf 93       	push	r28
    3a4c:	df 93       	push	r29
    3a4e:	00 d0       	rcall	.+0      	; 0x3a50 <sysex_encode+0x26>
    3a50:	00 d0       	rcall	.+0      	; 0x3a52 <sysex_encode+0x28>
    3a52:	00 d0       	rcall	.+0      	; 0x3a54 <sysex_encode+0x2a>
    3a54:	cd b7       	in	r28, 0x3d	; 61
    3a56:	de b7       	in	r29, 0x3e	; 62
    3a58:	1c 01       	movw	r2, r24
    3a5a:	7a 83       	std	Y+2, r23	; 0x02
    3a5c:	69 83       	std	Y+1, r22	; 0x01
    3a5e:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3a60:	ca 01       	movw	r24, r20
    3a62:	67 e0       	ldi	r22, 0x07	; 7
    3a64:	70 e0       	ldi	r23, 0x00	; 0
    3a66:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodhi4>
    3a6a:	2b 01       	movw	r4, r22
    3a6c:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3a6e:	61 15       	cp	r22, r1
    3a70:	71 05       	cpc	r23, r1
    3a72:	b1 f1       	breq	.+108    	; 0x3ae0 <sysex_encode+0xb6>
    3a74:	81 01       	movw	r16, r2
    3a76:	e9 80       	ldd	r14, Y+1	; 0x01
    3a78:	fa 80       	ldd	r15, Y+2	; 0x02
    3a7a:	cc 24       	eor	r12, r12
    3a7c:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3a7e:	88 24       	eor	r8, r8
    3a80:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3a82:	1e 83       	std	Y+6, r17	; 0x06
    3a84:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    3a86:	f8 01       	movw	r30, r16
    3a88:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3a8a:	fc 82       	std	Y+4, r15	; 0x04
    3a8c:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3a8e:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3a90:	ab 81       	ldd	r26, Y+3	; 0x03
    3a92:	bc 81       	ldd	r27, Y+4	; 0x04
    3a94:	2d 91       	ld	r18, X+
    3a96:	bc 83       	std	Y+4, r27	; 0x04
    3a98:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3a9a:	4f 5f       	subi	r20, 0xFF	; 255
    3a9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a9e:	82 2f       	mov	r24, r18
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	80 78       	andi	r24, 0x80	; 128
    3aa4:	90 70       	andi	r25, 0x00	; 0
    3aa6:	bc 01       	movw	r22, r24
    3aa8:	04 2e       	mov	r0, r20
    3aaa:	02 c0       	rjmp	.+4      	; 0x3ab0 <sysex_encode+0x86>
    3aac:	75 95       	asr	r23
    3aae:	67 95       	ror	r22
    3ab0:	0a 94       	dec	r0
    3ab2:	e2 f7       	brpl	.-8      	; 0x3aac <sysex_encode+0x82>
    3ab4:	ad 81       	ldd	r26, Y+5	; 0x05
    3ab6:	be 81       	ldd	r27, Y+6	; 0x06
    3ab8:	8c 91       	ld	r24, X
    3aba:	86 2b       	or	r24, r22
    3abc:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3abe:	2f 77       	andi	r18, 0x7F	; 127
    3ac0:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3ac2:	47 30       	cpi	r20, 0x07	; 7
    3ac4:	51 05       	cpc	r21, r1
    3ac6:	21 f7       	brne	.-56     	; 0x3a90 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3ac8:	08 94       	sec
    3aca:	c1 1c       	adc	r12, r1
    3acc:	d1 1c       	adc	r13, r1
    3ace:	08 5f       	subi	r16, 0xF8	; 248
    3ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad2:	e7 e0       	ldi	r30, 0x07	; 7
    3ad4:	f0 e0       	ldi	r31, 0x00	; 0
    3ad6:	ee 0e       	add	r14, r30
    3ad8:	ff 1e       	adc	r15, r31
    3ada:	ca 14       	cp	r12, r10
    3adc:	db 04       	cpc	r13, r11
    3ade:	89 f6       	brne	.-94     	; 0x3a82 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3ae0:	c3 01       	movw	r24, r6
    3ae2:	67 e0       	ldi	r22, 0x07	; 7
    3ae4:	70 e0       	ldi	r23, 0x00	; 0
    3ae6:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodhi4>
   if (remainder) {
    3aea:	88 23       	and	r24, r24
    3aec:	d9 f1       	breq	.+118    	; 0x3b64 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3aee:	82 01       	movw	r16, r4
    3af0:	00 0f       	add	r16, r16
    3af2:	11 1f       	adc	r17, r17
    3af4:	00 0f       	add	r16, r16
    3af6:	11 1f       	adc	r17, r17
    3af8:	00 0f       	add	r16, r16
    3afa:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3afc:	78 01       	movw	r14, r16
    3afe:	e4 18       	sub	r14, r4
    3b00:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3b02:	d1 01       	movw	r26, r2
    3b04:	a0 0f       	add	r26, r16
    3b06:	b1 1f       	adc	r27, r17
    3b08:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3b0a:	68 2f       	mov	r22, r24
    3b0c:	70 e0       	ldi	r23, 0x00	; 0
    3b0e:	61 15       	cp	r22, r1
    3b10:	71 05       	cpc	r23, r1
    3b12:	19 f1       	breq	.+70     	; 0x3b5a <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3b14:	e9 81       	ldd	r30, Y+1	; 0x01
    3b16:	fa 81       	ldd	r31, Y+2	; 0x02
    3b18:	ee 0e       	add	r14, r30
    3b1a:	ff 1e       	adc	r15, r31
    3b1c:	c8 01       	movw	r24, r16
    3b1e:	01 96       	adiw	r24, 0x01	; 1
    3b20:	28 0e       	add	r2, r24
    3b22:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    3b28:	f7 01       	movw	r30, r14
    3b2a:	41 91       	ld	r20, Z+
    3b2c:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3b2e:	2f 5f       	subi	r18, 0xFF	; 255
    3b30:	3f 4f       	sbci	r19, 0xFF	; 255
    3b32:	84 2f       	mov	r24, r20
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	80 78       	andi	r24, 0x80	; 128
    3b38:	90 70       	andi	r25, 0x00	; 0
    3b3a:	02 2e       	mov	r0, r18
    3b3c:	02 c0       	rjmp	.+4      	; 0x3b42 <sysex_encode+0x118>
    3b3e:	95 95       	asr	r25
    3b40:	87 95       	ror	r24
    3b42:	0a 94       	dec	r0
    3b44:	e2 f7       	brpl	.-8      	; 0x3b3e <sysex_encode+0x114>
    3b46:	9c 91       	ld	r25, X
    3b48:	89 2b       	or	r24, r25
    3b4a:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3b4c:	4f 77       	andi	r20, 0x7F	; 127
    3b4e:	f1 01       	movw	r30, r2
    3b50:	41 93       	st	Z+, r20
    3b52:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3b54:	26 17       	cp	r18, r22
    3b56:	37 07       	cpc	r19, r23
    3b58:	38 f3       	brcs	.-50     	; 0x3b28 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3b5a:	c8 01       	movw	r24, r16
    3b5c:	01 96       	adiw	r24, 0x01	; 1
    3b5e:	86 0f       	add	r24, r22
    3b60:	97 1f       	adc	r25, r23
    3b62:	07 c0       	rjmp	.+14     	; 0x3b72 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    3b64:	c2 01       	movw	r24, r4
    3b66:	88 0f       	add	r24, r24
    3b68:	99 1f       	adc	r25, r25
    3b6a:	88 0f       	add	r24, r24
    3b6c:	99 1f       	adc	r25, r25
    3b6e:	88 0f       	add	r24, r24
    3b70:	99 1f       	adc	r25, r25
   }
}
    3b72:	26 96       	adiw	r28, 0x06	; 6
    3b74:	0f b6       	in	r0, 0x3f	; 63
    3b76:	f8 94       	cli
    3b78:	de bf       	out	0x3e, r29	; 62
    3b7a:	0f be       	out	0x3f, r0	; 63
    3b7c:	cd bf       	out	0x3d, r28	; 61
    3b7e:	df 91       	pop	r29
    3b80:	cf 91       	pop	r28
    3b82:	1f 91       	pop	r17
    3b84:	0f 91       	pop	r16
    3b86:	ff 90       	pop	r15
    3b88:	ef 90       	pop	r14
    3b8a:	df 90       	pop	r13
    3b8c:	cf 90       	pop	r12
    3b8e:	bf 90       	pop	r11
    3b90:	af 90       	pop	r10
    3b92:	9f 90       	pop	r9
    3b94:	8f 90       	pop	r8
    3b96:	7f 90       	pop	r7
    3b98:	6f 90       	pop	r6
    3b9a:	5f 90       	pop	r5
    3b9c:	4f 90       	pop	r4
    3b9e:	3f 90       	pop	r3
    3ba0:	2f 90       	pop	r2
    3ba2:	08 95       	ret

00003ba4 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3ba4:	6f 92       	push	r6
    3ba6:	7f 92       	push	r7
    3ba8:	8f 92       	push	r8
    3baa:	9f 92       	push	r9
    3bac:	af 92       	push	r10
    3bae:	bf 92       	push	r11
    3bb0:	cf 92       	push	r12
    3bb2:	df 92       	push	r13
    3bb4:	ef 92       	push	r14
    3bb6:	ff 92       	push	r15
    3bb8:	0f 93       	push	r16
    3bba:	1f 93       	push	r17
    3bbc:	cf 93       	push	r28
    3bbe:	df 93       	push	r29
    3bc0:	3c 01       	movw	r6, r24
    3bc2:	4b 01       	movw	r8, r22
    3bc4:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3bc6:	42 30       	cpi	r20, 0x02	; 2
    3bc8:	51 05       	cpc	r21, r1
    3bca:	08 f4       	brcc	.+2      	; 0x3bce <sysex_decode+0x2a>
    3bcc:	6f c0       	rjmp	.+222    	; 0x3cac <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3bce:	7a 01       	movw	r14, r20
    3bd0:	f6 94       	lsr	r15
    3bd2:	e7 94       	ror	r14
    3bd4:	f6 94       	lsr	r15
    3bd6:	e7 94       	ror	r14
    3bd8:	f6 94       	lsr	r15
    3bda:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3bdc:	e1 14       	cp	r14, r1
    3bde:	f1 04       	cpc	r15, r1
    3be0:	29 f1       	breq	.+74     	; 0x3c2c <sysex_decode+0x88>
    3be2:	eb 01       	movw	r28, r22
    3be4:	b3 01       	movw	r22, r6
    3be6:	00 e0       	ldi	r16, 0x00	; 0
    3be8:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3bea:	cc 24       	eor	r12, r12
    3bec:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3bee:	de 01       	movw	r26, r28
    3bf0:	11 96       	adiw	r26, 0x01	; 1
    3bf2:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3bf4:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3bf6:	2d 91       	ld	r18, X+
    3bf8:	2f 77       	andi	r18, 0x7F	; 127
    3bfa:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3bfc:	4f 5f       	subi	r20, 0xFF	; 255
    3bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    3c00:	88 81       	ld	r24, Y
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	04 2e       	mov	r0, r20
    3c06:	02 c0       	rjmp	.+4      	; 0x3c0c <sysex_decode+0x68>
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 1f       	adc	r25, r25
    3c0c:	0a 94       	dec	r0
    3c0e:	e2 f7       	brpl	.-8      	; 0x3c08 <sysex_decode+0x64>
    3c10:	80 78       	andi	r24, 0x80	; 128
    3c12:	28 2b       	or	r18, r24
    3c14:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3c16:	47 30       	cpi	r20, 0x07	; 7
    3c18:	51 05       	cpc	r21, r1
    3c1a:	69 f7       	brne	.-38     	; 0x3bf6 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3c1c:	0f 5f       	subi	r16, 0xFF	; 255
    3c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c20:	28 96       	adiw	r28, 0x08	; 8
    3c22:	69 5f       	subi	r22, 0xF9	; 249
    3c24:	7f 4f       	sbci	r23, 0xFF	; 255
    3c26:	0e 15       	cp	r16, r14
    3c28:	1f 05       	cpc	r17, r15
    3c2a:	09 f7       	brne	.-62     	; 0x3bee <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3c2c:	5a 2d       	mov	r21, r10
    3c2e:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3c30:	99 f1       	breq	.+102    	; 0x3c98 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3c32:	e7 01       	movw	r28, r14
    3c34:	cc 0f       	add	r28, r28
    3c36:	dd 1f       	adc	r29, r29
    3c38:	cc 0f       	add	r28, r28
    3c3a:	dd 1f       	adc	r29, r29
    3c3c:	cc 0f       	add	r28, r28
    3c3e:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3c40:	8e 01       	movw	r16, r28
    3c42:	0e 19       	sub	r16, r14
    3c44:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3c46:	65 2f       	mov	r22, r21
    3c48:	70 e0       	ldi	r23, 0x00	; 0
    3c4a:	61 50       	subi	r22, 0x01	; 1
    3c4c:	70 40       	sbci	r23, 0x00	; 0
    3c4e:	f9 f0       	breq	.+62     	; 0x3c8e <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3c50:	ce 01       	movw	r24, r28
    3c52:	01 96       	adiw	r24, 0x01	; 1
    3c54:	d4 01       	movw	r26, r8
    3c56:	a8 0f       	add	r26, r24
    3c58:	b9 1f       	adc	r27, r25
    3c5a:	f3 01       	movw	r30, r6
    3c5c:	e0 0f       	add	r30, r16
    3c5e:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3c64:	c8 0d       	add	r28, r8
    3c66:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3c68:	4d 91       	ld	r20, X+
    3c6a:	4f 77       	andi	r20, 0x7F	; 127
    3c6c:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3c6e:	2f 5f       	subi	r18, 0xFF	; 255
    3c70:	3f 4f       	sbci	r19, 0xFF	; 255
    3c72:	88 81       	ld	r24, Y
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	02 2e       	mov	r0, r18
    3c78:	02 c0       	rjmp	.+4      	; 0x3c7e <sysex_decode+0xda>
    3c7a:	88 0f       	add	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	0a 94       	dec	r0
    3c80:	e2 f7       	brpl	.-8      	; 0x3c7a <sysex_decode+0xd6>
    3c82:	80 78       	andi	r24, 0x80	; 128
    3c84:	48 2b       	or	r20, r24
    3c86:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3c88:	26 17       	cp	r18, r22
    3c8a:	37 07       	cpc	r19, r23
    3c8c:	68 f3       	brcs	.-38     	; 0x3c68 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3c8e:	c8 01       	movw	r24, r16
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	85 0f       	add	r24, r21
    3c94:	91 1d       	adc	r25, r1
    3c96:	0c c0       	rjmp	.+24     	; 0x3cb0 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3c98:	c7 01       	movw	r24, r14
    3c9a:	88 0f       	add	r24, r24
    3c9c:	99 1f       	adc	r25, r25
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	88 0f       	add	r24, r24
    3ca4:	99 1f       	adc	r25, r25
    3ca6:	8e 19       	sub	r24, r14
    3ca8:	9f 09       	sbc	r25, r15
    3caa:	02 c0       	rjmp	.+4      	; 0x3cb0 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3cb0:	df 91       	pop	r29
    3cb2:	cf 91       	pop	r28
    3cb4:	1f 91       	pop	r17
    3cb6:	0f 91       	pop	r16
    3cb8:	ff 90       	pop	r15
    3cba:	ef 90       	pop	r14
    3cbc:	df 90       	pop	r13
    3cbe:	cf 90       	pop	r12
    3cc0:	bf 90       	pop	r11
    3cc2:	af 90       	pop	r10
    3cc4:	9f 90       	pop	r9
    3cc6:	8f 90       	pop	r8
    3cc8:	7f 90       	pop	r7
    3cca:	6f 90       	pop	r6
    3ccc:	08 95       	ret

00003cce <__mulsi3>:
    3cce:	62 9f       	mul	r22, r18
    3cd0:	d0 01       	movw	r26, r0
    3cd2:	73 9f       	mul	r23, r19
    3cd4:	f0 01       	movw	r30, r0
    3cd6:	82 9f       	mul	r24, r18
    3cd8:	e0 0d       	add	r30, r0
    3cda:	f1 1d       	adc	r31, r1
    3cdc:	64 9f       	mul	r22, r20
    3cde:	e0 0d       	add	r30, r0
    3ce0:	f1 1d       	adc	r31, r1
    3ce2:	92 9f       	mul	r25, r18
    3ce4:	f0 0d       	add	r31, r0
    3ce6:	83 9f       	mul	r24, r19
    3ce8:	f0 0d       	add	r31, r0
    3cea:	74 9f       	mul	r23, r20
    3cec:	f0 0d       	add	r31, r0
    3cee:	65 9f       	mul	r22, r21
    3cf0:	f0 0d       	add	r31, r0
    3cf2:	99 27       	eor	r25, r25
    3cf4:	72 9f       	mul	r23, r18
    3cf6:	b0 0d       	add	r27, r0
    3cf8:	e1 1d       	adc	r30, r1
    3cfa:	f9 1f       	adc	r31, r25
    3cfc:	63 9f       	mul	r22, r19
    3cfe:	b0 0d       	add	r27, r0
    3d00:	e1 1d       	adc	r30, r1
    3d02:	f9 1f       	adc	r31, r25
    3d04:	bd 01       	movw	r22, r26
    3d06:	cf 01       	movw	r24, r30
    3d08:	11 24       	eor	r1, r1
    3d0a:	08 95       	ret

00003d0c <__udivmodhi4>:
    3d0c:	aa 1b       	sub	r26, r26
    3d0e:	bb 1b       	sub	r27, r27
    3d10:	51 e1       	ldi	r21, 0x11	; 17
    3d12:	07 c0       	rjmp	.+14     	; 0x3d22 <__udivmodhi4_ep>

00003d14 <__udivmodhi4_loop>:
    3d14:	aa 1f       	adc	r26, r26
    3d16:	bb 1f       	adc	r27, r27
    3d18:	a6 17       	cp	r26, r22
    3d1a:	b7 07       	cpc	r27, r23
    3d1c:	10 f0       	brcs	.+4      	; 0x3d22 <__udivmodhi4_ep>
    3d1e:	a6 1b       	sub	r26, r22
    3d20:	b7 0b       	sbc	r27, r23

00003d22 <__udivmodhi4_ep>:
    3d22:	88 1f       	adc	r24, r24
    3d24:	99 1f       	adc	r25, r25
    3d26:	5a 95       	dec	r21
    3d28:	a9 f7       	brne	.-22     	; 0x3d14 <__udivmodhi4_loop>
    3d2a:	80 95       	com	r24
    3d2c:	90 95       	com	r25
    3d2e:	bc 01       	movw	r22, r24
    3d30:	cd 01       	movw	r24, r26
    3d32:	08 95       	ret

00003d34 <__divmodhi4>:
    3d34:	97 fb       	bst	r25, 7
    3d36:	09 2e       	mov	r0, r25
    3d38:	07 26       	eor	r0, r23
    3d3a:	0a d0       	rcall	.+20     	; 0x3d50 <__divmodhi4_neg1>
    3d3c:	77 fd       	sbrc	r23, 7
    3d3e:	04 d0       	rcall	.+8      	; 0x3d48 <__divmodhi4_neg2>
    3d40:	e5 df       	rcall	.-54     	; 0x3d0c <__udivmodhi4>
    3d42:	06 d0       	rcall	.+12     	; 0x3d50 <__divmodhi4_neg1>
    3d44:	00 20       	and	r0, r0
    3d46:	1a f4       	brpl	.+6      	; 0x3d4e <__divmodhi4_exit>

00003d48 <__divmodhi4_neg2>:
    3d48:	70 95       	com	r23
    3d4a:	61 95       	neg	r22
    3d4c:	7f 4f       	sbci	r23, 0xFF	; 255

00003d4e <__divmodhi4_exit>:
    3d4e:	08 95       	ret

00003d50 <__divmodhi4_neg1>:
    3d50:	f6 f7       	brtc	.-4      	; 0x3d4e <__divmodhi4_exit>
    3d52:	90 95       	com	r25
    3d54:	81 95       	neg	r24
    3d56:	9f 4f       	sbci	r25, 0xFF	; 255
    3d58:	08 95       	ret

00003d5a <do_random>:
    3d5a:	a0 e0       	ldi	r26, 0x00	; 0
    3d5c:	b0 e0       	ldi	r27, 0x00	; 0
    3d5e:	e3 eb       	ldi	r30, 0xB3	; 179
    3d60:	fe e1       	ldi	r31, 0x1E	; 30
    3d62:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__prologue_saves__+0xc>
    3d66:	ec 01       	movw	r28, r24
    3d68:	88 81       	ld	r24, Y
    3d6a:	99 81       	ldd	r25, Y+1	; 0x01
    3d6c:	aa 81       	ldd	r26, Y+2	; 0x02
    3d6e:	bb 81       	ldd	r27, Y+3	; 0x03
    3d70:	00 97       	sbiw	r24, 0x00	; 0
    3d72:	a1 05       	cpc	r26, r1
    3d74:	b1 05       	cpc	r27, r1
    3d76:	21 f4       	brne	.+8      	; 0x3d80 <do_random+0x26>
    3d78:	84 e2       	ldi	r24, 0x24	; 36
    3d7a:	99 ed       	ldi	r25, 0xD9	; 217
    3d7c:	ab e5       	ldi	r26, 0x5B	; 91
    3d7e:	b7 e0       	ldi	r27, 0x07	; 7
    3d80:	bc 01       	movw	r22, r24
    3d82:	cd 01       	movw	r24, r26
    3d84:	2d e1       	ldi	r18, 0x1D	; 29
    3d86:	33 ef       	ldi	r19, 0xF3	; 243
    3d88:	41 e0       	ldi	r20, 0x01	; 1
    3d8a:	50 e0       	ldi	r21, 0x00	; 0
    3d8c:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__divmodsi4>
    3d90:	49 01       	movw	r8, r18
    3d92:	5a 01       	movw	r10, r20
    3d94:	27 ea       	ldi	r18, 0xA7	; 167
    3d96:	31 e4       	ldi	r19, 0x41	; 65
    3d98:	40 e0       	ldi	r20, 0x00	; 0
    3d9a:	50 e0       	ldi	r21, 0x00	; 0
    3d9c:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__mulsi3>
    3da0:	6b 01       	movw	r12, r22
    3da2:	7c 01       	movw	r14, r24
    3da4:	c5 01       	movw	r24, r10
    3da6:	b4 01       	movw	r22, r8
    3da8:	2c ee       	ldi	r18, 0xEC	; 236
    3daa:	34 ef       	ldi	r19, 0xF4	; 244
    3dac:	4f ef       	ldi	r20, 0xFF	; 255
    3dae:	5f ef       	ldi	r21, 0xFF	; 255
    3db0:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__mulsi3>
    3db4:	dc 01       	movw	r26, r24
    3db6:	cb 01       	movw	r24, r22
    3db8:	c8 0e       	add	r12, r24
    3dba:	d9 1e       	adc	r13, r25
    3dbc:	ea 1e       	adc	r14, r26
    3dbe:	fb 1e       	adc	r15, r27
    3dc0:	f7 fe       	sbrs	r15, 7
    3dc2:	08 c0       	rjmp	.+16     	; 0x3dd4 <do_random+0x7a>
    3dc4:	8f ef       	ldi	r24, 0xFF	; 255
    3dc6:	9f ef       	ldi	r25, 0xFF	; 255
    3dc8:	af ef       	ldi	r26, 0xFF	; 255
    3dca:	bf e7       	ldi	r27, 0x7F	; 127
    3dcc:	c8 0e       	add	r12, r24
    3dce:	d9 1e       	adc	r13, r25
    3dd0:	ea 1e       	adc	r14, r26
    3dd2:	fb 1e       	adc	r15, r27
    3dd4:	c8 82       	st	Y, r12
    3dd6:	d9 82       	std	Y+1, r13	; 0x01
    3dd8:	ea 82       	std	Y+2, r14	; 0x02
    3dda:	fb 82       	std	Y+3, r15	; 0x03
    3ddc:	97 01       	movw	r18, r14
    3dde:	86 01       	movw	r16, r12
    3de0:	3f 77       	andi	r19, 0x7F	; 127
    3de2:	b8 01       	movw	r22, r16
    3de4:	c9 01       	movw	r24, r18
    3de6:	cd b7       	in	r28, 0x3d	; 61
    3de8:	de b7       	in	r29, 0x3e	; 62
    3dea:	ec e0       	ldi	r30, 0x0C	; 12
    3dec:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__epilogue_restores__+0xc>

00003df0 <random_r>:
    3df0:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <do_random>
    3df4:	08 95       	ret

00003df6 <random>:
    3df6:	80 eb       	ldi	r24, 0xB0	; 176
    3df8:	92 e0       	ldi	r25, 0x02	; 2
    3dfa:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <do_random>
    3dfe:	08 95       	ret

00003e00 <srandom>:
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	80 93 b0 02 	sts	0x02B0, r24
    3e08:	90 93 b1 02 	sts	0x02B1, r25
    3e0c:	a0 93 b2 02 	sts	0x02B2, r26
    3e10:	b0 93 b3 02 	sts	0x02B3, r27
    3e14:	08 95       	ret

00003e16 <memcpy>:
    3e16:	fb 01       	movw	r30, r22
    3e18:	dc 01       	movw	r26, r24
    3e1a:	02 c0       	rjmp	.+4      	; 0x3e20 <memcpy+0xa>
    3e1c:	01 90       	ld	r0, Z+
    3e1e:	0d 92       	st	X+, r0
    3e20:	41 50       	subi	r20, 0x01	; 1
    3e22:	50 40       	sbci	r21, 0x00	; 0
    3e24:	d8 f7       	brcc	.-10     	; 0x3e1c <memcpy+0x6>
    3e26:	08 95       	ret

00003e28 <memmove>:
    3e28:	68 17       	cp	r22, r24
    3e2a:	79 07       	cpc	r23, r25
    3e2c:	68 f4       	brcc	.+26     	; 0x3e48 <memmove+0x20>
    3e2e:	fb 01       	movw	r30, r22
    3e30:	dc 01       	movw	r26, r24
    3e32:	e4 0f       	add	r30, r20
    3e34:	f5 1f       	adc	r31, r21
    3e36:	a4 0f       	add	r26, r20
    3e38:	b5 1f       	adc	r27, r21
    3e3a:	02 c0       	rjmp	.+4      	; 0x3e40 <memmove+0x18>
    3e3c:	02 90       	ld	r0, -Z
    3e3e:	0e 92       	st	-X, r0
    3e40:	41 50       	subi	r20, 0x01	; 1
    3e42:	50 40       	sbci	r21, 0x00	; 0
    3e44:	d8 f7       	brcc	.-10     	; 0x3e3c <memmove+0x14>
    3e46:	08 95       	ret
    3e48:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <memcpy>

00003e4c <__eerd_block_m6450a>:
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22

00003e50 <__eerd_blraw_m6450a>:
    3e50:	fc 01       	movw	r30, r24
    3e52:	f9 99       	sbic	0x1f, 1	; 31
    3e54:	fe cf       	rjmp	.-4      	; 0x3e52 <__eerd_blraw_m6450a+0x2>
    3e56:	06 c0       	rjmp	.+12     	; 0x3e64 <__eerd_blraw_m6450a+0x14>
    3e58:	f2 bd       	out	0x22, r31	; 34
    3e5a:	e1 bd       	out	0x21, r30	; 33
    3e5c:	f8 9a       	sbi	0x1f, 0	; 31
    3e5e:	31 96       	adiw	r30, 0x01	; 1
    3e60:	00 b4       	in	r0, 0x20	; 32
    3e62:	0d 92       	st	X+, r0
    3e64:	41 50       	subi	r20, 0x01	; 1
    3e66:	50 40       	sbci	r21, 0x00	; 0
    3e68:	b8 f7       	brcc	.-18     	; 0x3e58 <__eerd_blraw_m6450a+0x8>
    3e6a:	08 95       	ret

00003e6c <__eerd_word_m6450a>:
    3e6c:	a8 e1       	ldi	r26, 0x18	; 24
    3e6e:	b0 e0       	ldi	r27, 0x00	; 0
    3e70:	42 e0       	ldi	r20, 0x02	; 2
    3e72:	50 e0       	ldi	r21, 0x00	; 0
    3e74:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__eerd_blraw_m6450a>

00003e78 <__eeupd_block_m6450a>:
    3e78:	dc 01       	movw	r26, r24
    3e7a:	a4 0f       	add	r26, r20
    3e7c:	b5 1f       	adc	r27, r21
    3e7e:	41 50       	subi	r20, 0x01	; 1
    3e80:	50 40       	sbci	r21, 0x00	; 0
    3e82:	48 f0       	brcs	.+18     	; 0x3e96 <__eeupd_block_m6450a+0x1e>
    3e84:	cb 01       	movw	r24, r22
    3e86:	84 0f       	add	r24, r20
    3e88:	95 1f       	adc	r25, r21
    3e8a:	2e 91       	ld	r18, -X
    3e8c:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__eeupd_r18_m6450a>
    3e90:	41 50       	subi	r20, 0x01	; 1
    3e92:	50 40       	sbci	r21, 0x00	; 0
    3e94:	d0 f7       	brcc	.-12     	; 0x3e8a <__eeupd_block_m6450a+0x12>
    3e96:	08 95       	ret

00003e98 <__eeupd_byte_m6450a>:
    3e98:	26 2f       	mov	r18, r22

00003e9a <__eeupd_r18_m6450a>:
    3e9a:	f9 99       	sbic	0x1f, 1	; 31
    3e9c:	fe cf       	rjmp	.-4      	; 0x3e9a <__eeupd_r18_m6450a>
    3e9e:	92 bd       	out	0x22, r25	; 34
    3ea0:	81 bd       	out	0x21, r24	; 33
    3ea2:	f8 9a       	sbi	0x1f, 0	; 31
    3ea4:	01 97       	sbiw	r24, 0x01	; 1
    3ea6:	00 b4       	in	r0, 0x20	; 32
    3ea8:	02 16       	cp	r0, r18
    3eaa:	31 f0       	breq	.+12     	; 0x3eb8 <__eeupd_r18_m6450a+0x1e>
    3eac:	20 bd       	out	0x20, r18	; 32
    3eae:	0f b6       	in	r0, 0x3f	; 63
    3eb0:	f8 94       	cli
    3eb2:	fa 9a       	sbi	0x1f, 2	; 31
    3eb4:	f9 9a       	sbi	0x1f, 1	; 31
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	08 95       	ret

00003eba <__eeupd_word_m6450a>:
    3eba:	01 96       	adiw	r24, 0x01	; 1
    3ebc:	27 2f       	mov	r18, r23
    3ebe:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__eeupd_r18_m6450a>
    3ec2:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__eeupd_byte_m6450a>

00003ec6 <__divmodsi4>:
    3ec6:	97 fb       	bst	r25, 7
    3ec8:	09 2e       	mov	r0, r25
    3eca:	05 26       	eor	r0, r21
    3ecc:	0e d0       	rcall	.+28     	; 0x3eea <__divmodsi4_neg1>
    3ece:	57 fd       	sbrc	r21, 7
    3ed0:	04 d0       	rcall	.+8      	; 0x3eda <__divmodsi4_neg2>
    3ed2:	4b d0       	rcall	.+150    	; 0x3f6a <__udivmodsi4>
    3ed4:	0a d0       	rcall	.+20     	; 0x3eea <__divmodsi4_neg1>
    3ed6:	00 1c       	adc	r0, r0
    3ed8:	38 f4       	brcc	.+14     	; 0x3ee8 <__divmodsi4_exit>

00003eda <__divmodsi4_neg2>:
    3eda:	50 95       	com	r21
    3edc:	40 95       	com	r20
    3ede:	30 95       	com	r19
    3ee0:	21 95       	neg	r18
    3ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee4:	4f 4f       	sbci	r20, 0xFF	; 255
    3ee6:	5f 4f       	sbci	r21, 0xFF	; 255

00003ee8 <__divmodsi4_exit>:
    3ee8:	08 95       	ret

00003eea <__divmodsi4_neg1>:
    3eea:	f6 f7       	brtc	.-4      	; 0x3ee8 <__divmodsi4_exit>
    3eec:	90 95       	com	r25
    3eee:	80 95       	com	r24
    3ef0:	70 95       	com	r23
    3ef2:	61 95       	neg	r22
    3ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    3efa:	08 95       	ret

00003efc <__prologue_saves__>:
    3efc:	2f 92       	push	r2
    3efe:	3f 92       	push	r3
    3f00:	4f 92       	push	r4
    3f02:	5f 92       	push	r5
    3f04:	6f 92       	push	r6
    3f06:	7f 92       	push	r7
    3f08:	8f 92       	push	r8
    3f0a:	9f 92       	push	r9
    3f0c:	af 92       	push	r10
    3f0e:	bf 92       	push	r11
    3f10:	cf 92       	push	r12
    3f12:	df 92       	push	r13
    3f14:	ef 92       	push	r14
    3f16:	ff 92       	push	r15
    3f18:	0f 93       	push	r16
    3f1a:	1f 93       	push	r17
    3f1c:	cf 93       	push	r28
    3f1e:	df 93       	push	r29
    3f20:	cd b7       	in	r28, 0x3d	; 61
    3f22:	de b7       	in	r29, 0x3e	; 62
    3f24:	ca 1b       	sub	r28, r26
    3f26:	db 0b       	sbc	r29, r27
    3f28:	0f b6       	in	r0, 0x3f	; 63
    3f2a:	f8 94       	cli
    3f2c:	de bf       	out	0x3e, r29	; 62
    3f2e:	0f be       	out	0x3f, r0	; 63
    3f30:	cd bf       	out	0x3d, r28	; 61
    3f32:	09 94       	ijmp

00003f34 <__epilogue_restores__>:
    3f34:	2a 88       	ldd	r2, Y+18	; 0x12
    3f36:	39 88       	ldd	r3, Y+17	; 0x11
    3f38:	48 88       	ldd	r4, Y+16	; 0x10
    3f3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f40:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f42:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f44:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f46:	b9 84       	ldd	r11, Y+9	; 0x09
    3f48:	c8 84       	ldd	r12, Y+8	; 0x08
    3f4a:	df 80       	ldd	r13, Y+7	; 0x07
    3f4c:	ee 80       	ldd	r14, Y+6	; 0x06
    3f4e:	fd 80       	ldd	r15, Y+5	; 0x05
    3f50:	0c 81       	ldd	r16, Y+4	; 0x04
    3f52:	1b 81       	ldd	r17, Y+3	; 0x03
    3f54:	aa 81       	ldd	r26, Y+2	; 0x02
    3f56:	b9 81       	ldd	r27, Y+1	; 0x01
    3f58:	ce 0f       	add	r28, r30
    3f5a:	d1 1d       	adc	r29, r1
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	f8 94       	cli
    3f60:	de bf       	out	0x3e, r29	; 62
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	cd bf       	out	0x3d, r28	; 61
    3f66:	ed 01       	movw	r28, r26
    3f68:	08 95       	ret

00003f6a <__udivmodsi4>:
    3f6a:	a1 e2       	ldi	r26, 0x21	; 33
    3f6c:	1a 2e       	mov	r1, r26
    3f6e:	aa 1b       	sub	r26, r26
    3f70:	bb 1b       	sub	r27, r27
    3f72:	fd 01       	movw	r30, r26
    3f74:	0d c0       	rjmp	.+26     	; 0x3f90 <__udivmodsi4_ep>

00003f76 <__udivmodsi4_loop>:
    3f76:	aa 1f       	adc	r26, r26
    3f78:	bb 1f       	adc	r27, r27
    3f7a:	ee 1f       	adc	r30, r30
    3f7c:	ff 1f       	adc	r31, r31
    3f7e:	a2 17       	cp	r26, r18
    3f80:	b3 07       	cpc	r27, r19
    3f82:	e4 07       	cpc	r30, r20
    3f84:	f5 07       	cpc	r31, r21
    3f86:	20 f0       	brcs	.+8      	; 0x3f90 <__udivmodsi4_ep>
    3f88:	a2 1b       	sub	r26, r18
    3f8a:	b3 0b       	sbc	r27, r19
    3f8c:	e4 0b       	sbc	r30, r20
    3f8e:	f5 0b       	sbc	r31, r21

00003f90 <__udivmodsi4_ep>:
    3f90:	66 1f       	adc	r22, r22
    3f92:	77 1f       	adc	r23, r23
    3f94:	88 1f       	adc	r24, r24
    3f96:	99 1f       	adc	r25, r25
    3f98:	1a 94       	dec	r1
    3f9a:	69 f7       	brne	.-38     	; 0x3f76 <__udivmodsi4_loop>
    3f9c:	60 95       	com	r22
    3f9e:	70 95       	com	r23
    3fa0:	80 95       	com	r24
    3fa2:	90 95       	com	r25
    3fa4:	9b 01       	movw	r18, r22
    3fa6:	ac 01       	movw	r20, r24
    3fa8:	bd 01       	movw	r22, r26
    3faa:	cf 01       	movw	r24, r30
    3fac:	08 95       	ret

00003fae <_exit>:
    3fae:	f8 94       	cli

00003fb0 <__stop_program>:
    3fb0:	ff cf       	rjmp	.-2      	; 0x3fb0 <__stop_program>
