
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  00002520  000025b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002520  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000195  008001ec  008001ec  000026a0  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  000026a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014a  00000000  00000000  00002ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00003020  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003fa7  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100b  00000000  00000000  00007247  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001891  00000000  00000000  00008252  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b0c  00000000  00000000  00009ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000124a  00000000  00000000  0000a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a06  00000000  00000000  0000b83a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000e240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_9>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e0 e2       	ldi	r30, 0x20	; 32
      78:	f5 e2       	ldi	r31, 0x25	; 37
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	13 e0       	ldi	r17, 0x03	; 3
      88:	ac ee       	ldi	r26, 0xEC	; 236
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a1 38       	cpi	r26, 0x81	; 129
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 ad 02 	call	0x55a	; 0x55a <main>
      9a:	0c 94 8e 12 	jmp	0x251c	; 0x251c <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     120:	80 91 ec 01 	lds	r24, 0x01EC
     124:	08 95       	ret

00000126 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	18 2f       	mov	r17, r24
     130:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	ec 01       	movw	r28, r24
     138:	22 97       	sbiw	r28, 0x02	; 2
     13a:	be 01       	movw	r22, r28
     13c:	4e e0       	ldi	r20, 0x0E	; 14
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     144:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     146:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     148:	10 93 ec 01 	sts	0x01EC, r17
	
} 
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	08 95       	ret

00000156 <remove_note>:
void remove_note(uint8_t note){
     156:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     158:	c0 91 00 01 	lds	r28, 0x0100
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     15c:	c8 17       	cp	r28, r24
     15e:	41 f0       	breq	.+16     	; 0x170 <remove_note+0x1a>
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     168:	90 81       	ld	r25, Z
     16a:	98 17       	cp	r25, r24
     16c:	59 f4       	brne	.+22     	; 0x184 <remove_note+0x2e>
     16e:	02 c0       	rjmp	.+4      	; 0x174 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     174:	fa 01       	movw	r30, r20
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	e0 50       	subi	r30, 0x00	; 0
     17c:	ff 4f       	sbci	r31, 0xFF	; 255
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	80 83       	st	Z, r24
			free_slot = i;
			break;
     182:	07 c0       	rjmp	.+14     	; 0x192 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     184:	4f 5f       	subi	r20, 0xFF	; 255
     186:	5f 4f       	sbci	r21, 0xFF	; 255
     188:	32 96       	adiw	r30, 0x02	; 2
     18a:	48 30       	cpi	r20, 0x08	; 8
     18c:	51 05       	cpc	r21, r1
     18e:	61 f7       	brne	.-40     	; 0x168 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     190:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	ca 01       	movw	r24, r20
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	bc 01       	movw	r22, r24
     19c:	6e 5f       	subi	r22, 0xFE	; 254
     19e:	7e 4f       	sbci	r23, 0xFE	; 254
     1a0:	40 95       	com	r20
     1a2:	50 95       	com	r21
     1a4:	48 5f       	subi	r20, 0xF8	; 248
     1a6:	5f 4f       	sbci	r21, 0xFF	; 255
     1a8:	44 0f       	add	r20, r20
     1aa:	55 1f       	adc	r21, r21
     1ac:	80 50       	subi	r24, 0x00	; 0
     1ae:	9f 4f       	sbci	r25, 0xFF	; 255
     1b0:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <memmove>
	note_pool[7].note = EMPTY;	
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	80 93 0e 01 	sts	0x010E, r24
	
	//check to see if this is the last note released
	if (note_pool[0].note == EMPTY) {
     1ba:	80 91 00 01 	lds	r24, 0x0100
     1be:	8f 3f       	cpi	r24, 0xFF	; 255
     1c0:	19 f4       	brne	.+6      	; 0x1c8 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1c2:	c0 93 ec 01 	sts	0x01EC, r28
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1c8:	80 93 ec 01 	sts	0x01EC, r24

	}	
	
}
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1d0:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1d2:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1d4:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1d6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1d8:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     1da:	8c 91       	ld	r24, X
     1dc:	82 b9       	out	0x02, r24	; 2
     1de:	8d e0       	ldi	r24, 0x0D	; 13
     1e0:	8a 95       	dec	r24
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <set_control_voltage+0x10>
     1e4:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     1e6:	ea ed       	ldi	r30, 0xDA	; 218
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	40 81       	ld	r20, Z
     1ec:	21 e0       	ldi	r18, 0x01	; 1
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	c9 01       	movw	r24, r18
     1f2:	11 96       	adiw	r26, 0x01	; 1
     1f4:	0c 90       	ld	r0, X
     1f6:	11 97       	sbiw	r26, 0x01	; 1
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_control_voltage+0x2e>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <set_control_voltage+0x2a>
     202:	84 2b       	or	r24, r20
     204:	80 83       	st	Z, r24
     206:	82 e4       	ldi	r24, 0x42	; 66
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x38>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x3e>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     20e:	80 81       	ld	r24, Z
     210:	11 96       	adiw	r26, 0x01	; 1
     212:	0c 90       	ld	r0, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	02 c0       	rjmp	.+4      	; 0x21c <set_control_voltage+0x4c>
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <set_control_voltage+0x48>
     220:	20 95       	com	r18
     222:	28 23       	and	r18, r24
     224:	20 83       	st	Z, r18
	
}	
     226:	08 95       	ret

00000228 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     228:	83 b3       	in	r24, 0x13	; 19
     22a:	83 60       	ori	r24, 0x03	; 3
     22c:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     232:	97 b1       	in	r25, 0x07	; 7
     234:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     236:	e9 ed       	ldi	r30, 0xD9	; 217
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8f 60       	ori	r24, 0x0F	; 15
     23e:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     240:	ea ed       	ldi	r30, 0xDA	; 218
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     24a:	84 b3       	in	r24, 0x14	; 20
     24c:	83 60       	ori	r24, 0x03	; 3
     24e:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     250:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     252:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     254:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     256:	a0 9a       	sbi	0x14, 0	; 20
}
     258:	08 95       	ret

0000025a <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     25a:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     25c:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     25e:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     260:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     262:	62 b9       	out	0x02, r22	; 2
     264:	2d e0       	ldi	r18, 0x0D	; 13
     266:	2a 95       	dec	r18
     268:	f1 f7       	brne	.-4      	; 0x266 <set_dac+0xc>
     26a:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     26c:	ea ed       	ldi	r30, 0xDA	; 218
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	40 81       	ld	r20, Z
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	b9 01       	movw	r22, r18
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_dac+0x24>
     27a:	66 0f       	add	r22, r22
     27c:	77 1f       	adc	r23, r23
     27e:	8a 95       	dec	r24
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_dac+0x20>
     282:	cb 01       	movw	r24, r22
     284:	94 2f       	mov	r25, r20
     286:	98 2b       	or	r25, r24
     288:	90 83       	st	Z, r25
     28a:	72 e4       	ldi	r23, 0x42	; 66
     28c:	7a 95       	dec	r23
     28e:	f1 f7       	brne	.-4      	; 0x28c <set_dac+0x32>
     290:	00 c0       	rjmp	.+0      	; 0x292 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     292:	90 81       	ld	r25, Z
     294:	80 95       	com	r24
     296:	89 23       	and	r24, r25
     298:	80 83       	st	Z, r24
	
}
     29a:	08 95       	ret

0000029c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t digit)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	2a 97       	sbiw	r28, 0x0a	; 10
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     2b0:	de 01       	movw	r26, r28
     2b2:	11 96       	adiw	r26, 0x01	; 1
     2b4:	ee e4       	ldi	r30, 0x4E	; 78
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	3a e0       	ldi	r19, 0x0A	; 10
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	31 50       	subi	r19, 0x01	; 1
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2c6:	ea ed       	ldi	r30, 0xDA	; 218
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	30 81       	ld	r19, Z
     2cc:	30 61       	ori	r19, 0x10	; 16
     2ce:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d0:	30 81       	ld	r19, Z
     2d2:	3f 7e       	andi	r19, 0xEF	; 239
     2d4:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     2d6:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2d8:	30 81       	ld	r19, Z
     2da:	30 62       	ori	r19, 0x20	; 32
     2dc:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2de:	30 81       	ld	r19, Z
     2e0:	3f 7d       	andi	r19, 0xDF	; 223
     2e2:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
     2e4:	62 30       	cpi	r22, 0x02	; 2
     2e6:	f9 f0       	breq	.+62     	; 0x326 <display_dec+0x8a>
     2e8:	63 30       	cpi	r22, 0x03	; 3
     2ea:	18 f4       	brcc	.+6      	; 0x2f2 <display_dec+0x56>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	a1 f5       	brne	.+104    	; 0x358 <display_dec+0xbc>
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <display_dec+0x70>
     2f2:	64 30       	cpi	r22, 0x04	; 4
     2f4:	29 f1       	breq	.+74     	; 0x340 <display_dec+0xa4>
     2f6:	68 30       	cpi	r22, 0x08	; 8
     2f8:	79 f5       	brne	.+94     	; 0x358 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     2fa:	6a e0       	ldi	r22, 0x0A	; 10
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
     302:	fe 01       	movw	r30, r28
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     30a:	26 c0       	rjmp	.+76     	; 0x358 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     30c:	64 e6       	ldi	r22, 0x64	; 100
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
     314:	6a e0       	ldi	r22, 0x0A	; 10
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
     31c:	fe 01       	movw	r30, r28
     31e:	e6 0f       	add	r30, r22
     320:	f7 1f       	adc	r31, r23
     322:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     324:	19 c0       	rjmp	.+50     	; 0x358 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     326:	68 ee       	ldi	r22, 0xE8	; 232
     328:	73 e0       	ldi	r23, 0x03	; 3
     32a:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
     32e:	64 e6       	ldi	r22, 0x64	; 100
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
     336:	fe 01       	movw	r30, r28
     338:	e6 0f       	add	r30, r22
     33a:	f7 1f       	adc	r31, r23
     33c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     33e:	0c c0       	rjmp	.+24     	; 0x358 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     340:	60 e1       	ldi	r22, 0x10	; 16
     342:	77 e2       	ldi	r23, 0x27	; 39
     344:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
     348:	68 ee       	ldi	r22, 0xE8	; 232
     34a:	73 e0       	ldi	r23, 0x03	; 3
     34c:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
     350:	fe 01       	movw	r30, r28
     352:	e6 0f       	add	r30, r22
     354:	f7 1f       	adc	r31, r23
     356:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     358:	20 95       	com	r18
     35a:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     35c:	ea ed       	ldi	r30, 0xDA	; 218
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     366:	80 81       	ld	r24, Z
     368:	8f 7e       	andi	r24, 0xEF	; 239
     36a:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     36c:	2a 96       	adiw	r28, 0x0a	; 10
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <update_display+0x8>
     386:	00 d0       	rcall	.+0      	; 0x388 <update_display+0xa>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t place = 0;
	
	uint8_t digit[] = {
     38c:	28 e0       	ldi	r18, 0x08	; 8
     38e:	29 83       	std	Y+1, r18	; 0x01
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	2a 83       	std	Y+2, r18	; 0x02
     394:	22 e0       	ldi	r18, 0x02	; 2
     396:	2b 83       	std	Y+3, r18	; 0x03
     398:	24 e0       	ldi	r18, 0x04	; 4
     39a:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	if (type == DEC) {
     39c:	66 23       	and	r22, r22
     39e:	81 f4       	brne	.+32     	; 0x3c0 <update_display+0x42>

		
			
		display_dec(number, digit[place]);
     3a0:	10 91 f1 01 	lds	r17, 0x01F1
     3a4:	fe 01       	movw	r30, r28
     3a6:	e1 0f       	add	r30, r17
     3a8:	f1 1d       	adc	r31, r1
     3aa:	61 81       	ldd	r22, Z+1	; 0x01
     3ac:	0e 94 4e 01 	call	0x29c	; 0x29c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     3b0:	81 2f       	mov	r24, r17
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	80 93 f1 01 	sts	0x01F1, r24
     3b8:	13 30       	cpi	r17, 0x03	; 3
     3ba:	11 f4       	brne	.+4      	; 0x3c0 <update_display+0x42>
		{
			place = 0;
     3bc:	10 92 f1 01 	sts	0x01F1, r1
		
		
	}
	
	
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
	compare_match_counter++;
     3e2:	80 91 8c 02 	lds	r24, 0x028C
     3e6:	8f 5f       	subi	r24, 0xFF	; 255
     3e8:	80 93 8c 02 	sts	0x028C, r24
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     3ec:	80 91 91 02 	lds	r24, 0x0291
     3f0:	81 50       	subi	r24, 0x01	; 1
     3f2:	87 bd       	out	0x27, r24	; 39
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
     3f4:	85 b1       	in	r24, 0x05	; 5
     3f6:	80 58       	subi	r24, 0x80	; 128
     3f8:	85 b9       	out	0x05, r24	; 5
	if (period_counter == 0) {
     3fa:	80 91 92 02 	lds	r24, 0x0292
     3fe:	88 23       	and	r24, r24
     400:	a1 f4       	brne	.+40     	; 0x42a <__vector_10+0x5a>
		count_finished = FALSE;
     402:	10 92 8f 02 	sts	0x028F, r1
		no_overflow = TRUE;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 ea 01 	sts	0x01EA, r24
		period_counter = 1; //set period counter to 1
     40c:	80 93 92 02 	sts	0x0292, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     410:	e1 e8       	ldi	r30, 0x81	; 129
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	90 91 90 02 	lds	r25, 0x0290
     41a:	89 2b       	or	r24, r25
     41c:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     41e:	ef e6       	ldi	r30, 0x6F	; 111
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	81 60       	ori	r24, 0x01	; 1
     426:	80 83       	st	Z, r24
     428:	18 c0       	rjmp	.+48     	; 0x45a <__vector_10+0x8a>
	} else {
		
		osc_count = TCNT1;
     42a:	e4 e8       	ldi	r30, 0x84	; 132
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	91 81       	ldd	r25, Z+1	; 0x01
     432:	90 93 8e 02 	sts	0x028E, r25
     436:	80 93 8d 02 	sts	0x028D, r24
		value_to_display = compare_match_counter;//osc_count;
     43a:	80 91 8c 02 	lds	r24, 0x028C
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	90 93 97 01 	sts	0x0197, r25
     444:	80 93 96 01 	sts	0x0196, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     448:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	80 93 8f 02 	sts	0x028F, r24
		period_counter = 0;
     452:	10 92 92 02 	sts	0x0292, r1
		TCNT1 = 0; //reset timer/counter 1
     456:	11 82       	std	Z+1, r1	; 0x01
     458:	10 82       	st	Z, r1
	}
	
	
	
	
}
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	9f 91       	pop	r25
     460:	8f 91       	pop	r24
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_9>:



ISR (TIMER1_OVF_vect) {
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     476:	10 92 ea 01 	sts	0x01EA, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     484:	84 2f       	mov	r24, r20
	remove_note(note);
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
	gate_buffer--;
     48c:	80 91 f3 01 	lds	r24, 0x01F3
     490:	81 50       	subi	r24, 0x01	; 1
     492:	80 93 f3 01 	sts	0x01F3, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     496:	88 23       	and	r24, r24
     498:	09 f4       	brne	.+2      	; 0x49c <note_off_event+0x18>
     49a:	89 98       	cbi	0x11, 1	; 17
     49c:	08 95       	ret

0000049e <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     49e:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     4a0:	40 93 32 02 	sts	0x0232, r20
	if (velocity == 0) {
     4a4:	22 23       	and	r18, r18
     4a6:	61 f4       	brne	.+24     	; 0x4c0 <note_on_event+0x22>
		remove_note(note);
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
		gate_buffer--;
     4ae:	80 91 f3 01 	lds	r24, 0x01F3
     4b2:	81 50       	subi	r24, 0x01	; 1
     4b4:	80 93 f3 01 	sts	0x01F3, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     4b8:	88 23       	and	r24, r24
     4ba:	69 f4       	brne	.+26     	; 0x4d6 <note_on_event+0x38>
     4bc:	89 98       	cbi	0x11, 1	; 17
     4be:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	62 2f       	mov	r22, r18
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	0e 94 93 00 	call	0x126	; 0x126 <new_note>
		gate_buffer++; //increment gate_buffer
     4ca:	80 91 f3 01 	lds	r24, 0x01F3
     4ce:	8f 5f       	subi	r24, 0xFF	; 255
     4d0:	80 93 f3 01 	sts	0x01F3, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     4d4:	89 9a       	sbi	0x11, 1	; 17
     4d6:	08 95       	ret

000004d8 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     4d8:	87 e2       	ldi	r24, 0x27	; 39
     4da:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     4de:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     4e2:	88 e9       	ldi	r24, 0x98	; 152
     4e4:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     4e8:	08 95       	ret

000004ea <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     4ea:	1f 92       	push	r1
     4ec:	0f 92       	push	r0
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	0f 92       	push	r0
     4f2:	11 24       	eor	r1, r1
     4f4:	2f 93       	push	r18
     4f6:	3f 93       	push	r19
     4f8:	4f 93       	push	r20
     4fa:	5f 93       	push	r21
     4fc:	6f 93       	push	r22
     4fe:	7f 93       	push	r23
     500:	8f 93       	push	r24
     502:	9f 93       	push	r25
     504:	af 93       	push	r26
     506:	bf 93       	push	r27
     508:	ef 93       	push	r30
     50a:	ff 93       	push	r31
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	0f 92       	push	r0
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
     516:	85 b1       	in	r24, 0x05	; 5
     518:	80 58       	subi	r24, 0x80	; 128
     51a:	85 b9       	out	0x05, r24	; 5
	uint8_t inByte = UDR0;
     51c:	80 91 c6 00 	lds	r24, 0x00C6
     520:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     522:	84 e9       	ldi	r24, 0x94	; 148
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	ae 01       	movw	r20, r28
     52a:	4f 5f       	subi	r20, 0xFF	; 255
     52c:	5f 4f       	sbci	r21, 0xFF	; 255
     52e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     532:	0f 90       	pop	r0
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	ff 91       	pop	r31
     53a:	ef 91       	pop	r30
     53c:	bf 91       	pop	r27
     53e:	af 91       	pop	r26
     540:	9f 91       	pop	r25
     542:	8f 91       	pop	r24
     544:	7f 91       	pop	r23
     546:	6f 91       	pop	r22
     548:	5f 91       	pop	r21
     54a:	4f 91       	pop	r20
     54c:	3f 91       	pop	r19
     54e:	2f 91       	pop	r18
     550:	0f 90       	pop	r0
     552:	0f be       	out	0x3f, r0	; 63
     554:	0f 90       	pop	r0
     556:	1f 90       	pop	r1
     558:	18 95       	reti

0000055a <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     55a:	80 e8       	ldi	r24, 0x80	; 128
     55c:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     55e:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     560:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     562:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     564:	9a 9a       	sbi	0x13, 2	; 19
	//PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
	PORTG |= (1<<TUNE_SELECT);
     566:	a2 9a       	sbi	0x14, 2	; 20
	
	setup_spi(); 
     568:	0e 94 65 04 	call	0x8ca	; 0x8ca <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     56c:	a9 ed       	ldi	r26, 0xD9	; 217
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	8c 91       	ld	r24, X
     572:	80 6c       	ori	r24, 0xC0	; 192
     574:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     576:	ea ed       	ldi	r30, 0xDA	; 218
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	80 6c       	ori	r24, 0xC0	; 192
     57e:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     580:	81 b1       	in	r24, 0x01	; 1
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     586:	92 b1       	in	r25, 0x02	; 2
     588:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     58a:	8c 91       	ld	r24, X
     58c:	80 63       	ori	r24, 0x30	; 48
     58e:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     590:	80 81       	ld	r24, Z
     592:	8f 7c       	andi	r24, 0xCF	; 207
     594:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     596:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     598:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     59c:	0e 94 14 01 	call	0x228	; 0x228 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     5a0:	c4 e9       	ldi	r28, 0x94	; 148
     5a2:	d2 e0       	ldi	r29, 0x02	; 2
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     5aa:	ce 01       	movw	r24, r28
     5ac:	6f e4       	ldi	r22, 0x4F	; 79
     5ae:	72 e0       	ldi	r23, 0x02	; 2
     5b0:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     5b4:	ce 01       	movw	r24, r28
     5b6:	62 e4       	ldi	r22, 0x42	; 66
     5b8:	72 e0       	ldi	r23, 0x02	; 2
     5ba:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     5be:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     5c2:	0e 94 8a 04 	call	0x914	; 0x914 <update_spi>
	//TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
	//TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms
	

		
	sei(); //enable global interrupts
     5c6:	78 94       	sei
	
	////set initial pitch offset CVs
	vco1_init_cv = set_vco_init_cv(VCO1, 24079);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	6f e0       	ldi	r22, 0x0F	; 15
     5cc:	7e e5       	ldi	r23, 0x5E	; 94
     5ce:	0e 94 64 05 	call	0xac8	; 0xac8 <set_vco_init_cv>
     5d2:	90 93 8b 02 	sts	0x028B, r25
     5d6:	80 93 8a 02 	sts	0x028A, r24
	vco2_init_cv = set_vco_init_cv(VCO2, 24079);
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	6f e0       	ldi	r22, 0x0F	; 15
     5de:	7e e5       	ldi	r23, 0x5E	; 94
     5e0:	0e 94 64 05 	call	0xac8	; 0xac8 <set_vco_init_cv>
     5e4:	90 93 89 02 	sts	0x0289, r25
     5e8:	80 93 88 02 	sts	0x0288, r24
	value_to_display = compare_match_counter;//vco1_init_cv;
     5ec:	80 91 8c 02 	lds	r24, 0x028C
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	90 93 97 01 	sts	0x0197, r25
     5f6:	80 93 96 01 	sts	0x0196, r24
	
	

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     5fa:	ce 01       	movw	r24, r28
     5fc:	0e 94 72 10 	call	0x20e4	; 0x20e4 <midi_device_process>
	
		update_display(value_to_display, DEC);
     600:	80 91 96 01 	lds	r24, 0x0196
     604:	90 91 97 01 	lds	r25, 0x0197
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
			
		scan_pots_and_update_control_voltages();
     60e:	0e 94 16 03 	call	0x62c	; 0x62c <scan_pots_and_update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     612:	80 91 f2 01 	lds	r24, 0x01F2
     616:	98 2f       	mov	r25, r24
     618:	9f 5f       	subi	r25, 0xFF	; 255
     61a:	90 93 f2 01 	sts	0x01F2, r25
     61e:	85 30       	cpi	r24, 0x05	; 5
     620:	61 f7       	brne	.-40     	; 0x5fa <main+0xa0>
		{
			switch_timer = 0;
     622:	10 92 f2 01 	sts	0x01F2, r1
			update_spi();
     626:	0e 94 8a 04 	call	0x914	; 0x914 <update_spi>
     62a:	e7 cf       	rjmp	.-50     	; 0x5fa <main+0xa0>

0000062c <scan_pots_and_update_control_voltages>:
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     62c:	4f 92       	push	r4
     62e:	5f 92       	push	r5
     630:	6f 92       	push	r6
     632:	7f 92       	push	r7
     634:	8f 92       	push	r8
     636:	9f 92       	push	r9
     638:	af 92       	push	r10
     63a:	bf 92       	push	r11
     63c:	cf 92       	push	r12
     63e:	df 92       	push	r13
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     64c:	02 e1       	ldi	r16, 0x12	; 18
     64e:	12 e0       	ldi	r17, 0x02	; 2
     650:	0f 2e       	mov	r0, r31
     652:	f6 e7       	ldi	r31, 0x76	; 118
     654:	cf 2e       	mov	r12, r31
     656:	f1 e0       	ldi	r31, 0x01	; 1
     658:	df 2e       	mov	r13, r31
     65a:	f0 2d       	mov	r31, r0
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     65c:	ee 24       	eor	r14, r14
     65e:	ff 24       	eor	r15, r15
     660:	e3 94       	inc	r14
     662:	c0 e0       	ldi	r28, 0x00	; 0
     664:	d0 e0       	ldi	r29, 0x00	; 0
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     666:	0f 2e       	mov	r0, r31
     668:	fa e3       	ldi	r31, 0x3A	; 58
     66a:	8f 2e       	mov	r8, r31
     66c:	f1 e0       	ldi	r31, 0x01	; 1
     66e:	9f 2e       	mov	r9, r31
     670:	f0 2d       	mov	r31, r0
				
				break;
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     672:	aa 24       	eor	r10, r10
     674:	bb 24       	eor	r11, r11
     676:	68 94       	set
     678:	b1 f8       	bld	r11, 1
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     67a:	0f 2e       	mov	r0, r31
     67c:	f8 e3       	ldi	r31, 0x38	; 56
     67e:	6f 2e       	mov	r6, r31
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	7f 2e       	mov	r7, r31
     684:	f0 2d       	mov	r31, r0
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     686:	0f 2e       	mov	r0, r31
     688:	f2 e4       	ldi	r31, 0x42	; 66
     68a:	4f 2e       	mov	r4, r31
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	5f 2e       	mov	r5, r31
     690:	f0 2d       	mov	r31, r0
     692:	08 c0       	rjmp	.+16     	; 0x6a4 <scan_pots_and_update_control_voltages+0x78>
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     694:	21 96       	adiw	r28, 0x01	; 1
     696:	08 94       	sec
     698:	e1 1c       	adc	r14, r1
     69a:	f1 1c       	adc	r15, r1
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	c8 0e       	add	r12, r24
     6a2:	d9 1e       	adc	r13, r25

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{

		adc_value = read_pot(POTMUX_EN0, i);
     6a4:	86 e0       	ldi	r24, 0x06	; 6
     6a6:	6c 2f       	mov	r22, r28
     6a8:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     6ac:	90 93 38 02 	sts	0x0238, r25
     6b0:	80 93 37 02 	sts	0x0237, r24
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
     6b4:	80 91 37 02 	lds	r24, 0x0237
     6b8:	90 91 38 02 	lds	r25, 0x0238
     6bc:	d8 01       	movw	r26, r16
     6be:	6d 91       	ld	r22, X+
     6c0:	7c 91       	ld	r23, X
     6c2:	11 97       	sbiw	r26, 0x01	; 1
     6c4:	86 1b       	sub	r24, r22
     6c6:	97 0b       	sbc	r25, r23
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
     6c8:	95 95       	asr	r25
     6ca:	87 95       	ror	r24
     6cc:	95 95       	asr	r25
     6ce:	87 95       	ror	r24
     6d0:	9c 01       	movw	r18, r24
     6d2:	26 0f       	add	r18, r22
     6d4:	37 1f       	adc	r19, r23
     6d6:	f8 01       	movw	r30, r16
     6d8:	21 93       	st	Z+, r18
     6da:	31 93       	st	Z+, r19
     6dc:	8f 01       	movw	r16, r30
		int fine_offset = 0;
		
		switch (i)
     6de:	c8 30       	cpi	r28, 0x08	; 8
     6e0:	d1 05       	cpc	r29, r1
     6e2:	71 f0       	breq	.+28     	; 0x700 <scan_pots_and_update_control_voltages+0xd4>
     6e4:	c9 30       	cpi	r28, 0x09	; 9
     6e6:	d1 05       	cpc	r29, r1
     6e8:	24 f4       	brge	.+8      	; 0x6f2 <scan_pots_and_update_control_voltages+0xc6>
     6ea:	c4 30       	cpi	r28, 0x04	; 4
     6ec:	d1 05       	cpc	r29, r1
     6ee:	b1 f5       	brne	.+108    	; 0x75c <scan_pots_and_update_control_voltages+0x130>
     6f0:	2a c0       	rjmp	.+84     	; 0x746 <scan_pots_and_update_control_voltages+0x11a>
     6f2:	c9 30       	cpi	r28, 0x09	; 9
     6f4:	d1 05       	cpc	r29, r1
     6f6:	b1 f0       	breq	.+44     	; 0x724 <scan_pots_and_update_control_voltages+0xf8>
     6f8:	cb 30       	cpi	r28, 0x0B	; 11
     6fa:	d1 05       	cpc	r29, r1
     6fc:	79 f5       	brne	.+94     	; 0x75c <scan_pots_and_update_control_voltages+0x130>
     6fe:	3a c0       	rjmp	.+116    	; 0x774 <scan_pots_and_update_control_voltages+0x148>
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     700:	60 91 88 02 	lds	r22, 0x0288
     704:	70 91 89 02 	lds	r23, 0x0289
		switch (i)
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
     708:	60 50       	subi	r22, 0x00	; 0
     70a:	7e 4f       	sbci	r23, 0xFE	; 254
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     70c:	80 91 33 02 	lds	r24, 0x0233
     710:	90 91 34 02 	lds	r25, 0x0234
     714:	68 0f       	add	r22, r24
     716:	79 1f       	adc	r23, r25
     718:	62 1b       	sub	r22, r18
     71a:	73 0b       	sbc	r23, r19
     71c:	c4 01       	movw	r24, r8
     71e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				
				break;
     722:	b8 cf       	rjmp	.-144    	; 0x694 <scan_pots_and_update_control_voltages+0x68>
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     724:	b5 01       	movw	r22, r10
     726:	62 1b       	sub	r22, r18
     728:	73 0b       	sbc	r23, r19
     72a:	70 93 34 02 	sts	0x0234, r23
     72e:	60 93 33 02 	sts	0x0233, r22
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     732:	80 91 8a 02 	lds	r24, 0x028A
     736:	90 91 8b 02 	lds	r25, 0x028B
     73a:	68 0f       	add	r22, r24
     73c:	79 1f       	adc	r23, r25
     73e:	c3 01       	movw	r24, r6
     740:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     744:	a7 cf       	rjmp	.-178    	; 0x694 <scan_pots_and_update_control_voltages+0x68>
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     746:	b9 01       	movw	r22, r18
     748:	66 0f       	add	r22, r22
     74a:	77 1f       	adc	r23, r23
     74c:	66 0f       	add	r22, r22
     74e:	77 1f       	adc	r23, r23
     750:	66 0f       	add	r22, r22
     752:	77 1f       	adc	r23, r23
     754:	c2 01       	movw	r24, r4
     756:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     75a:	9c cf       	rjmp	.-200    	; 0x694 <scan_pots_and_update_control_voltages+0x68>
			
			default: //set control voltage full-scale
				set_control_voltage(pot_decoder_0[i], pot_group_0[i] << 4);
     75c:	b9 01       	movw	r22, r18
     75e:	62 95       	swap	r22
     760:	72 95       	swap	r23
     762:	70 7f       	andi	r23, 0xF0	; 240
     764:	76 27       	eor	r23, r22
     766:	60 7f       	andi	r22, 0xF0	; 240
     768:	76 27       	eor	r23, r22
     76a:	d6 01       	movw	r26, r12
     76c:	8d 91       	ld	r24, X+
     76e:	9c 91       	ld	r25, X
     770:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	}; 
	
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     774:	b0 e1       	ldi	r27, 0x10	; 16
     776:	eb 16       	cp	r14, r27
     778:	f1 04       	cpc	r15, r1
     77a:	0c f4       	brge	.+2      	; 0x77e <scan_pots_and_update_control_voltages+0x152>
     77c:	8b cf       	rjmp	.-234    	; 0x694 <scan_pots_and_update_control_voltages+0x68>
     77e:	04 ef       	ldi	r16, 0xF4	; 244
     780:	11 e0       	ldi	r17, 0x01	; 1
     782:	0f 2e       	mov	r0, r31
     784:	f8 e5       	ldi	r31, 0x58	; 88
     786:	ef 2e       	mov	r14, r31
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	ff 2e       	mov	r15, r31
     78c:	f0 2d       	mov	r31, r0
     78e:	c1 e0       	ldi	r28, 0x01	; 1
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     790:	87 e0       	ldi	r24, 0x07	; 7
     792:	6c 2f       	mov	r22, r28
     794:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     798:	90 93 38 02 	sts	0x0238, r25
     79c:	80 93 37 02 	sts	0x0237, r24
		int adc_change = adc_value - pot_group_1[i];
     7a0:	60 91 37 02 	lds	r22, 0x0237
     7a4:	70 91 38 02 	lds	r23, 0x0238
     7a8:	f8 01       	movw	r30, r16
     7aa:	80 81       	ld	r24, Z
     7ac:	91 81       	ldd	r25, Z+1	; 0x01
     7ae:	68 1b       	sub	r22, r24
     7b0:	79 0b       	sbc	r23, r25
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);		
     7b2:	75 95       	asr	r23
     7b4:	67 95       	ror	r22
     7b6:	75 95       	asr	r23
     7b8:	67 95       	ror	r22
     7ba:	68 0f       	add	r22, r24
     7bc:	79 1f       	adc	r23, r25
     7be:	d8 01       	movw	r26, r16
     7c0:	6d 93       	st	X+, r22
     7c2:	7d 93       	st	X+, r23
     7c4:	8d 01       	movw	r16, r26
		
		set_control_voltage(pot_decoder_1[i], pot_group_1[i] <<4);
     7c6:	62 95       	swap	r22
     7c8:	72 95       	swap	r23
     7ca:	70 7f       	andi	r23, 0xF0	; 240
     7cc:	76 27       	eor	r23, r22
     7ce:	60 7f       	andi	r22, 0xF0	; 240
     7d0:	76 27       	eor	r23, r22
     7d2:	f7 01       	movw	r30, r14
     7d4:	81 91       	ld	r24, Z+
     7d6:	91 91       	ld	r25, Z+
     7d8:	7f 01       	movw	r14, r30
     7da:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
     7de:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
	}
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     7e0:	c0 31       	cpi	r28, 0x10	; 16
     7e2:	b1 f6       	brne	.-84     	; 0x790 <scan_pots_and_update_control_voltages+0x164>
	}
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
     7e4:	0e 94 90 00 	call	0x120	; 0x120 <get_current_note>
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     7e8:	88 30       	cpi	r24, 0x08	; 8
     7ea:	08 f4       	brcc	.+2      	; 0x7ee <scan_pots_and_update_control_voltages+0x1c2>
     7ec:	88 e0       	ldi	r24, 0x08	; 8
	value_to_display = note;
     7ee:	28 2f       	mov	r18, r24
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	30 93 97 01 	sts	0x0197, r19
     7f6:	20 93 96 01 	sts	0x0196, r18
	uint8_t pitch_index = note>>3;
     7fa:	98 2f       	mov	r25, r24
     7fc:	96 95       	lsr	r25
     7fe:	96 95       	lsr	r25
     800:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
     802:	29 2f       	mov	r18, r25
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	e9 01       	movw	r28, r18
     808:	21 97       	sbiw	r28, 0x01	; 1
     80a:	46 e6       	ldi	r20, 0x66	; 102
     80c:	52 e0       	ldi	r21, 0x02	; 2
     80e:	cc 0f       	add	r28, r28
     810:	dd 1f       	adc	r29, r29
     812:	fa 01       	movw	r30, r20
     814:	ec 0f       	add	r30, r28
     816:	fd 1f       	adc	r31, r29
     818:	01 90       	ld	r0, Z+
     81a:	f0 81       	ld	r31, Z
     81c:	e0 2d       	mov	r30, r0
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	value_to_display = note;
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
     81e:	99 0f       	add	r25, r25
     820:	99 0f       	add	r25, r25
     822:	99 0f       	add	r25, r25
     824:	89 1b       	sub	r24, r25
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
	uint16_t y1 = vco1_pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>
     826:	e8 2e       	mov	r14, r24
     828:	ff 24       	eor	r15, r15
	value_to_display = note;
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
	uint16_t y1 = vco1_pitch_table[pitch_index];
     82a:	89 01       	movw	r16, r18
     82c:	00 0f       	add	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	40 0f       	add	r20, r16
     832:	51 1f       	adc	r21, r17
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>
     834:	da 01       	movw	r26, r20
     836:	8d 91       	ld	r24, X+
     838:	9c 91       	ld	r25, X
     83a:	8e 1b       	sub	r24, r30
     83c:	9f 0b       	sbc	r25, r31
     83e:	8e 9d       	mul	r24, r14
     840:	b0 01       	movw	r22, r0
     842:	8f 9d       	mul	r24, r15
     844:	70 0d       	add	r23, r0
     846:	9e 9d       	mul	r25, r14
     848:	70 0d       	add	r23, r0
     84a:	11 24       	eor	r1, r1
     84c:	76 95       	lsr	r23
     84e:	67 95       	ror	r22
     850:	76 95       	lsr	r23
     852:	67 95       	ror	r22
     854:	76 95       	lsr	r23
     856:	67 95       	ror	r22
     858:	6e 0f       	add	r22, r30
     85a:	7f 1f       	adc	r23, r31
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     85c:	8c e4       	ldi	r24, 0x4C	; 76
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	y0 = vco2_pitch_table[pitch_index - 1];
     864:	84 e4       	ldi	r24, 0x44	; 68
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	c8 0f       	add	r28, r24
     86a:	d9 1f       	adc	r29, r25
     86c:	48 81       	ld	r20, Y
     86e:	59 81       	ldd	r21, Y+1	; 0x01
	y1 = vco2_pitch_table[pitch_index];
     870:	80 0f       	add	r24, r16
     872:	91 1f       	adc	r25, r17
	
	interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3);
     874:	fc 01       	movw	r30, r24
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	84 1b       	sub	r24, r20
     87c:	95 0b       	sbc	r25, r21
     87e:	8e 9d       	mul	r24, r14
     880:	b0 01       	movw	r22, r0
     882:	8f 9d       	mul	r24, r15
     884:	70 0d       	add	r23, r0
     886:	9e 9d       	mul	r25, r14
     888:	70 0d       	add	r23, r0
     88a:	11 24       	eor	r1, r1
     88c:	76 95       	lsr	r23
     88e:	67 95       	ror	r22
     890:	76 95       	lsr	r23
     892:	67 95       	ror	r22
     894:	76 95       	lsr	r23
     896:	67 95       	ror	r22
     898:	64 0f       	add	r22, r20
     89a:	75 1f       	adc	r23, r21
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv); 
     89c:	8a e4       	ldi	r24, 0x4A	; 74
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     8a4:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     8a6:	a1 9a       	sbi	0x14, 1	; 20
	
	
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	9f 90       	pop	r9
     8be:	8f 90       	pop	r8
     8c0:	7f 90       	pop	r7
     8c2:	6f 90       	pop	r6
     8c4:	5f 90       	pop	r5
     8c6:	4f 90       	pop	r4
     8c8:	08 95       	ret

000008ca <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     8ca:	84 b1       	in	r24, 0x04	; 4
     8cc:	87 62       	ori	r24, 0x27	; 39
     8ce:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     8d0:	ec ed       	ldi	r30, 0xDC	; 220
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	8c 65       	ori	r24, 0x5C	; 92
     8d8:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     8da:	85 b1       	in	r24, 0x05	; 5
     8dc:	89 7d       	andi	r24, 0xD9	; 217
     8de:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     8e0:	ed ed       	ldi	r30, 0xDD	; 221
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	83 7f       	andi	r24, 0xF3	; 243
     8e8:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     8ea:	80 e5       	ldi	r24, 0x50	; 80
     8ec:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     8ee:	80 81       	ld	r24, Z
     8f0:	87 7f       	andi	r24, 0xF7	; 247
     8f2:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     8f4:	80 81       	ld	r24, Z
     8f6:	87 7f       	andi	r24, 0xF7	; 247
     8f8:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     8fa:	80 81       	ld	r24, Z
     8fc:	88 60       	ori	r24, 0x08	; 8
     8fe:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     900:	80 81       	ld	r24, Z
     902:	8f 7e       	andi	r24, 0xEF	; 239
     904:	80 83       	st	Z, r24
	
}
     906:	08 95       	ret

00000908 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     908:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     90a:	0d b4       	in	r0, 0x2d	; 45
     90c:	07 fe       	sbrs	r0, 7
     90e:	fd cf       	rjmp	.-6      	; 0x90a <spi_shift_byte+0x2>
	return SPDR;
     910:	8e b5       	in	r24, 0x2e	; 46
	
}
     912:	08 95       	ret

00000914 <update_spi>:

void update_spi(void) {
     914:	cf 93       	push	r28
	
			SPI_PORT |= SPI_SW_LATCH;
     916:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
     918:	c0 91 3b 02 	lds	r28, 0x023B
			((switch_state_byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_state_byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_state_byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
			((switch_state_byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
			((switch_state_byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
			BMOD_SW_ON << BMOD;
     91c:	90 91 3c 02 	lds	r25, 0x023C
     920:	97 95       	ror	r25
     922:	99 27       	eor	r25, r25
     924:	97 95       	ror	r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     926:	2c 2f       	mov	r18, r28
     928:	21 70       	andi	r18, 0x01	; 1
     92a:	92 2b       	or	r25, r18
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
     92c:	8c 2f       	mov	r24, r28
     92e:	88 1f       	adc	r24, r24
     930:	88 27       	eor	r24, r24
     932:	88 1f       	adc	r24, r24
     934:	88 0f       	add	r24, r24
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     936:	89 2b       	or	r24, r25
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_state_byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
     938:	ec 2f       	mov	r30, r28
     93a:	e6 95       	lsr	r30
     93c:	e6 95       	lsr	r30
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	e1 70       	andi	r30, 0x01	; 1
     942:	f0 70       	andi	r31, 0x00	; 0
     944:	bf 01       	movw	r22, r30
     946:	66 0f       	add	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	66 0f       	add	r22, r22
     94c:	77 1f       	adc	r23, r23
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     94e:	86 2b       	or	r24, r22
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_state_byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_state_byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
     950:	6c 2f       	mov	r22, r28
     952:	66 95       	lsr	r22
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	61 70       	andi	r22, 0x01	; 1
     958:	70 70       	andi	r23, 0x00	; 0
     95a:	ab 01       	movw	r20, r22
     95c:	44 0f       	add	r20, r20
     95e:	55 1f       	adc	r21, r21
     960:	44 0f       	add	r20, r20
     962:	55 1f       	adc	r21, r21
     964:	44 0f       	add	r20, r20
     966:	55 1f       	adc	r21, r21
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     968:	68 2f       	mov	r22, r24
     96a:	64 2b       	or	r22, r20
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_state_byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_state_byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_state_byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_state_byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
     96c:	4c 2f       	mov	r20, r28
     96e:	42 95       	swap	r20
     970:	4f 70       	andi	r20, 0x0F	; 15
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	41 70       	andi	r20, 0x01	; 1
     976:	50 70       	andi	r21, 0x00	; 0
     978:	9a 01       	movw	r18, r20
     97a:	22 95       	swap	r18
     97c:	32 95       	swap	r19
     97e:	30 7f       	andi	r19, 0xF0	; 240
     980:	32 27       	eor	r19, r18
     982:	20 7f       	andi	r18, 0xF0	; 240
     984:	32 27       	eor	r19, r18
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     986:	46 2f       	mov	r20, r22
     988:	42 2b       	or	r20, r18
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_state_byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_state_byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_state_byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_state_byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
			((switch_state_byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
     98a:	2c 2f       	mov	r18, r28
     98c:	22 95       	swap	r18
     98e:	26 95       	lsr	r18
     990:	27 70       	andi	r18, 0x07	; 7
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	21 70       	andi	r18, 0x01	; 1
     996:	30 70       	andi	r19, 0x00	; 0
     998:	c9 01       	movw	r24, r18
     99a:	88 0f       	add	r24, r24
     99c:	99 1f       	adc	r25, r25
     99e:	82 95       	swap	r24
     9a0:	92 95       	swap	r25
     9a2:	90 7f       	andi	r25, 0xF0	; 240
     9a4:	98 27       	eor	r25, r24
     9a6:	80 7f       	andi	r24, 0xF0	; 240
     9a8:	98 27       	eor	r25, r24
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     9aa:	84 2b       	or	r24, r20
			((switch_state_byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_state_byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_state_byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_state_byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
			((switch_state_byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
			((switch_state_byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
     9ac:	2c 2f       	mov	r18, r28
     9ae:	22 95       	swap	r18
     9b0:	26 95       	lsr	r18
     9b2:	26 95       	lsr	r18
     9b4:	23 70       	andi	r18, 0x03	; 3
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	21 70       	andi	r18, 0x01	; 1
     9ba:	30 70       	andi	r19, 0x00	; 0
     9bc:	00 24       	eor	r0, r0
     9be:	36 95       	lsr	r19
     9c0:	27 95       	ror	r18
     9c2:	07 94       	ror	r0
     9c4:	36 95       	lsr	r19
     9c6:	27 95       	ror	r18
     9c8:	07 94       	ror	r0
     9ca:	32 2f       	mov	r19, r18
     9cc:	20 2d       	mov	r18, r0
			BMOD_SW_ON << BMOD;
			
					
			//Now read SPDR for switch data shifted in from 74XX165 U14
			spi_sw_byte0_current_state = spi_shift_byte(spi_data);
     9ce:	82 2b       	or	r24, r18
     9d0:	0e 94 84 04 	call	0x908	; 0x908 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     9d4:	90 91 3e 02 	lds	r25, 0x023E
     9d8:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     9da:	98 27       	eor	r25, r24
     9dc:	90 93 3e 02 	sts	0x023E, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     9e0:	98 23       	and	r25, r24
     9e2:	90 93 3d 02 	sts	0x023D, r25
			
			//toggle switch state		
			switch_state_byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     9e6:	9c 27       	eor	r25, r28
     9e8:	90 93 3b 02 	sts	0x023B, r25
			
			//SHIFT 4th BYTE
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			switch_state_byte1 = spi_shift_byte(spi_data);
     9ec:	82 e2       	ldi	r24, 0x22	; 34
     9ee:	0e 94 84 04 	call	0x908	; 0x908 <spi_shift_byte>
     9f2:	80 93 3f 02 	sts	0x023F, r24
			//toggling not implemented here yet.
			ARP_MODE_SW_ON = (switch_state_byte1 >> ARP_MODE_SW) & 1;
     9f6:	c8 2f       	mov	r28, r24
     9f8:	c2 95       	swap	r28
     9fa:	c6 95       	lsr	r28
     9fc:	c7 70       	andi	r28, 0x07	; 7
     9fe:	c1 70       	andi	r28, 0x01	; 1
     a00:	c0 93 40 02 	sts	0x0240, r28
			//check if ARP_SYNC_SW bit is set
			ARP_SYNC_SW_ON = (switch_state_byte1 >> ARP_SYNC_SW) & 1;
     a04:	82 95       	swap	r24
     a06:	86 95       	lsr	r24
     a08:	86 95       	lsr	r24
     a0a:	83 70       	andi	r24, 0x03	; 3
     a0c:	81 70       	andi	r24, 0x01	; 1
     a0e:	80 93 41 02 	sts	0x0241, r24

			
			//SHIFT 3th BYTE
			spi_shift_byte(0);
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 84 04 	call	0x908	; 0x908 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(0);
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 84 04 	call	0x908	; 0x908 <spi_shift_byte>
			
			//SHIFT 1st BYTE			
			spi_data = (ARP_MODE_SW_ON << ARP_MODE) | (PROG_WRITE_ON << PROG_WRITE) | (EG2_INV_ON << EG2_INV); 
     a1e:	80 91 42 02 	lds	r24, 0x0242
     a22:	87 95       	ror	r24
     a24:	88 27       	eor	r24, r24
     a26:	87 95       	ror	r24
     a28:	90 91 43 02 	lds	r25, 0x0243
     a2c:	89 2b       	or	r24, r25
     a2e:	cc 0f       	add	r28, r28
     a30:	cc 0f       	add	r28, r28
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     a32:	8c 2b       	or	r24, r28
     a34:	0e 94 84 04 	call	0x908	; 0x908 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     a38:	ed ed       	ldi	r30, 0xDD	; 221
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	87 7f       	andi	r24, 0xF7	; 247
     a40:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     a42:	80 81       	ld	r24, Z
     a44:	88 60       	ori	r24, 0x08	; 8
     a46:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     a48:	2d 98       	cbi	0x05, 5	; 5
			
			//EVERYTHING BELOW NEEDS TO BE MOVED OUT OF SPI FUNCTION//
			
			//now read switches directly connected to MCU
			uint8_t current_sw_state = read_switch_port();
     a4a:	0e 94 20 0b 	call	0x1640	; 0x1640 <read_switch_port>
			
			if (current_sw_state & (1<<BMOD_SW))
     a4e:	82 ff       	sbrs	r24, 2
     a50:	06 c0       	rjmp	.+12     	; 0xa5e <update_spi+0x14a>
			{
				BMOD_SW_ON ^= 1 << 0; //toggle switch state
     a52:	30 91 3c 02 	lds	r19, 0x023C
     a56:	21 e0       	ldi	r18, 0x01	; 1
     a58:	23 27       	eor	r18, r19
     a5a:	20 93 3c 02 	sts	0x023C, r18
			}
			
			if (current_sw_state & (1<<PROG_WRITE_SW)) {
     a5e:	84 ff       	sbrs	r24, 4
     a60:	06 c0       	rjmp	.+12     	; 0xa6e <update_spi+0x15a>
				
				PROG_WRITE_ON ^= 1 << 0; //toggle switch state
     a62:	30 91 42 02 	lds	r19, 0x0242
     a66:	21 e0       	ldi	r18, 0x01	; 1
     a68:	23 27       	eor	r18, r19
     a6a:	20 93 42 02 	sts	0x0242, r18
			}
			
			if (current_sw_state & (1<<EG2_INV_SW)) {
     a6e:	83 ff       	sbrs	r24, 3
     a70:	06 c0       	rjmp	.+12     	; 0xa7e <update_spi+0x16a>
				
				EG2_INV_ON ^= 1 << 0; //toggle switch state
     a72:	90 91 43 02 	lds	r25, 0x0243
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	89 27       	eor	r24, r25
     a7a:	80 93 43 02 	sts	0x0243, r24
			
			//update analog switch latch:
			//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
			//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
			uint8_t switch_state_byte = switch_state_byte0;
			switch_state_byte ^= (-BMOD_SW_ON ^ switch_state_byte) & (1<<3);//set third bit dependent on 
     a7e:	90 91 3b 02 	lds	r25, 0x023B
     a82:	80 91 3c 02 	lds	r24, 0x023C
     a86:	81 95       	neg	r24
     a88:	89 27       	eor	r24, r25
     a8a:	88 70       	andi	r24, 0x08	; 8
			update_analog_switch_latch(switch_state_byte);
     a8c:	89 27       	eor	r24, r25
     a8e:	0e 94 29 0b 	call	0x1652	; 0x1652 <update_analog_switch_latch>

			
			//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
			//need to make sure this doesn't interfere with anything else on this port
			EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     a92:	ed ed       	ldi	r30, 0xDD	; 221
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	90 81       	ld	r25, Z
     a98:	20 81       	ld	r18, Z
     a9a:	80 91 43 02 	lds	r24, 0x0243
     a9e:	81 95       	neg	r24
     aa0:	82 27       	eor	r24, r18
     aa2:	80 71       	andi	r24, 0x10	; 16
     aa4:	89 27       	eor	r24, r25
     aa6:	80 83       	st	Z, r24
			
			if (PROG_WRITE_ON) { //temporary tune button hack
     aa8:	80 91 42 02 	lds	r24, 0x0242
     aac:	88 23       	and	r24, r24
     aae:	51 f0       	breq	.+20     	; 0xac4 <update_spi+0x1b0>
				
				PROG_WRITE_ON ^= 1<<0; //toggle switch state
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	89 27       	eor	r24, r25
     ab4:	80 93 42 02 	sts	0x0242, r24
				current_sw_state ^= (1<<PROG_WRITE_SW); //toggle read switch state
				//vco1_init_cv = set_vco_init_cv(VCO1, 24079);
				//vco2_init_cv = set_vco_init_cv(VCO2, 24079);
				tune_8ths(VCO1); //first VCO tuned will occassionally mess up the tuning of its first note. Issue still not resolved
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0e 94 36 09 	call	0x126c	; 0x126c <tune_8ths>
				tune_8ths(VCO2);
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	0e 94 36 09 	call	0x126c	; 0x126c <tune_8ths>
				//tune_8ths(VCO1); //retune VCO1 to test first VCO tuned bug
				
			}
	
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <set_vco_init_cv>:
volatile uint16_t vco2_init_cv = 0;

uint16_t vco1_pitch_table[17] = {0};
uint16_t vco2_pitch_table[17] = {0};
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { //should add extra argument here to set reference count for base frequency
     ac8:	2f 92       	push	r2
     aca:	3f 92       	push	r3
     acc:	4f 92       	push	r4
     ace:	5f 92       	push	r5
     ad0:	6f 92       	push	r6
     ad2:	7f 92       	push	r7
     ad4:	8f 92       	push	r8
     ad6:	9f 92       	push	r9
     ad8:	af 92       	push	r10
     ada:	bf 92       	push	r11
     adc:	cf 92       	push	r12
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	2a 97       	sbiw	r28, 0x0a	; 10
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	08 2f       	mov	r16, r24
     afe:	78 87       	std	Y+8, r23	; 0x08
     b00:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	 timer1_clock |= (1<<CS11) | (1<<CS10);
     b02:	80 91 90 02 	lds	r24, 0x0290
     b06:	83 60       	ori	r24, 0x03	; 3
     b08:	80 93 90 02 	sts	0x0290, r24
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     b0c:	80 e3       	ldi	r24, 0x30	; 48
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     b18:	82 e4       	ldi	r24, 0x42	; 66
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     b24:	84 e4       	ldi	r24, 0x44	; 68
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     b30:	8f ee       	ldi	r24, 0xEF	; 239
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     b3c:	84 e3       	ldi	r24, 0x34	; 52
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     b48:	8e e3       	ldi	r24, 0x3E	; 62
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     b54:	80 e4       	ldi	r24, 0x40	; 64
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     b60:	82 e2       	ldi	r24, 0x22	; 34
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     b6c:	8c e2       	ldi	r24, 0x2C	; 44
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     b78:	84 e2       	ldi	r24, 0x24	; 36
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     b84:	86 e2       	ldi	r24, 0x26	; 38
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     b90:	88 e2       	ldi	r24, 0x28	; 40
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	6f ef       	ldi	r22, 0xFF	; 255
     b96:	7f e3       	ldi	r23, 0x3F	; 63
     b98:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     b9c:	8a e2       	ldi	r24, 0x2A	; 42
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     ba8:	82 e3       	ldi	r24, 0x32	; 50
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     bb4:	8c e1       	ldi	r24, 0x1C	; 28
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     bc0:	88 e1       	ldi	r24, 0x18	; 24
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     bcc:	84 e1       	ldi	r24, 0x14	; 20
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	6f ef       	ldi	r22, 0xFF	; 255
     bd2:	7f e3       	ldi	r23, 0x3F	; 63
     bd4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     bd8:	80 e1       	ldi	r24, 0x10	; 16
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
     bf0:	10 92 8f 02 	sts	0x028F, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
     bf4:	00 23       	and	r16, r16
     bf6:	c1 f4       	brne	.+48     	; 0xc28 <set_vco_init_cv+0x160>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     bf8:	0f 2e       	mov	r0, r31
     bfa:	fc e4       	ldi	r31, 0x4C	; 76
     bfc:	4f 2e       	mov	r4, r31
     bfe:	f1 e0       	ldi	r31, 0x01	; 1
     c00:	5f 2e       	mov	r5, r31
     c02:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     c04:	0f 2e       	mov	r0, r31
     c06:	fc e3       	ldi	r31, 0x3C	; 60
     c08:	2f 2e       	mov	r2, r31
     c0a:	f1 e0       	ldi	r31, 0x01	; 1
     c0c:	3f 2e       	mov	r3, r31
     c0e:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     c10:	26 e4       	ldi	r18, 0x46	; 70
     c12:	31 e0       	ldi	r19, 0x01	; 1
     c14:	3a 83       	std	Y+2, r19	; 0x02
     c16:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     c18:	0f 2e       	mov	r0, r31
     c1a:	f8 e3       	ldi	r31, 0x38	; 56
     c1c:	8f 2e       	mov	r8, r31
     c1e:	f1 e0       	ldi	r31, 0x01	; 1
     c20:	9f 2e       	mov	r9, r31
     c22:	f0 2d       	mov	r31, r0

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	17 c0       	rjmp	.+46     	; 0xc56 <set_vco_init_cv+0x18e>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     c28:	0f 2e       	mov	r0, r31
     c2a:	fa e4       	ldi	r31, 0x4A	; 74
     c2c:	4f 2e       	mov	r4, r31
     c2e:	f1 e0       	ldi	r31, 0x01	; 1
     c30:	5f 2e       	mov	r5, r31
     c32:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     c34:	0f 2e       	mov	r0, r31
     c36:	fe e2       	ldi	r31, 0x2E	; 46
     c38:	2f 2e       	mov	r2, r31
     c3a:	f1 e0       	ldi	r31, 0x01	; 1
     c3c:	3f 2e       	mov	r3, r31
     c3e:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     c40:	88 e4       	ldi	r24, 0x48	; 72
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     c48:	0f 2e       	mov	r0, r31
     c4a:	fa e3       	ldi	r31, 0x3A	; 58
     c4c:	8f 2e       	mov	r8, r31
     c4e:	f1 e0       	ldi	r31, 0x01	; 1
     c50:	9f 2e       	mov	r9, r31
     c52:	f0 2d       	mov	r31, r0
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
     c54:	80 e4       	ldi	r24, 0x40	; 64
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
     c56:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     c58:	ed ed       	ldi	r30, 0xDD	; 221
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	80 64       	ori	r24, 0x40	; 64
     c60:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     c62:	80 81       	ld	r24, Z
     c64:	8f 7b       	andi	r24, 0xBF	; 191
     c66:	80 83       	st	Z, r24
	DATA_BUS = 0;
     c68:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
     c6a:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
     c6c:	84 b5       	in	r24, 0x24	; 36
     c6e:	8f 60       	ori	r24, 0x0F	; 15
     c70:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
     c76:	ee e6       	ldi	r30, 0x6E	; 110
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	90 81       	ld	r25, Z
     c7c:	92 60       	ori	r25, 0x02	; 2
     c7e:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
     c80:	80 93 91 02 	sts	0x0291, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     c84:	ed e0       	ldi	r30, 0x0D	; 13
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	fc 83       	std	Y+4, r31	; 0x04
     c8a:	eb 83       	std	Y+3, r30	; 0x03
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
     c8c:	80 2f       	mov	r24, r16
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	8c 01       	movw	r16, r24
     c92:	0f 5f       	subi	r16, 0xFF	; 255
     c94:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
     c96:	0f 2e       	mov	r0, r31
     c98:	f0 e3       	ldi	r31, 0x30	; 48
     c9a:	ef 2e       	mov	r14, r31
     c9c:	f1 e0       	ldi	r31, 0x01	; 1
     c9e:	ff 2e       	mov	r15, r31
     ca0:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
     ca2:	0f 2e       	mov	r0, r31
     ca4:	f8 e2       	ldi	r31, 0x28	; 40
     ca6:	cf 2e       	mov	r12, r31
     ca8:	f1 e0       	ldi	r31, 0x01	; 1
     caa:	df 2e       	mov	r13, r31
     cac:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
     cae:	0f 2e       	mov	r0, r31
     cb0:	f4 e1       	ldi	r31, 0x14	; 20
     cb2:	af 2e       	mov	r10, r31
     cb4:	f1 e0       	ldi	r31, 0x01	; 1
     cb6:	bf 2e       	mov	r11, r31
     cb8:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     cba:	0f 2e       	mov	r0, r31
     cbc:	f6 e1       	ldi	r31, 0x16	; 22
     cbe:	6f 2e       	mov	r6, r31
     cc0:	f1 e0       	ldi	r31, 0x01	; 1
     cc2:	7f 2e       	mov	r7, r31
     cc4:	f0 2d       	mov	r31, r0
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	3a 87       	std	Y+10, r19	; 0x0a
     ccc:	29 87       	std	Y+9, r18	; 0x09
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0b 80       	ldd	r0, Y+3	; 0x03
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <set_vco_init_cv+0x212>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <set_vco_init_cv+0x20e>
     cde:	9e 83       	std	Y+6, r25	; 0x06
     ce0:	8d 83       	std	Y+5, r24	; 0x05
     ce2:	e9 85       	ldd	r30, Y+9	; 0x09
     ce4:	fa 85       	ldd	r31, Y+10	; 0x0a
     ce6:	e8 2b       	or	r30, r24
     ce8:	f9 2b       	or	r31, r25
     cea:	fa 87       	std	Y+10, r31	; 0x0a
     cec:	e9 87       	std	Y+9, r30	; 0x09
		
		set_control_voltage(vco_init_cv, init_cv);
     cee:	c4 01       	movw	r24, r8
     cf0:	bf 01       	movw	r22, r30
     cf2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		
		count_finished = FALSE;
     cf6:	10 92 8f 02 	sts	0x028F, r1
		period_counter = 0;
     cfa:	10 92 92 02 	sts	0x0292, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     cfe:	80 91 8f 02 	lds	r24, 0x028F
     d02:	88 23       	and	r24, r24
     d04:	89 f5       	brne	.+98     	; 0xd68 <set_vco_init_cv+0x2a0>
			
			update_display(vco + 1, DEC);
     d06:	c8 01       	movw	r24, r16
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
     d0e:	c4 01       	movw	r24, r8
     d10:	69 85       	ldd	r22, Y+9	; 0x09
     d12:	7a 85       	ldd	r23, Y+10	; 0x0a
     d14:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
     d18:	c1 01       	movw	r24, r2
     d1a:	6f ef       	ldi	r22, 0xFF	; 255
     d1c:	7f e3       	ldi	r23, 0x3F	; 63
     d1e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
     d22:	c7 01       	movw	r24, r14
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
     d2c:	c6 01       	movw	r24, r12
     d2e:	6f ef       	ldi	r22, 0xFF	; 255
     d30:	7f e3       	ldi	r23, 0x3F	; 63
     d32:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
     d36:	c5 01       	movw	r24, r10
     d38:	6f ef       	ldi	r22, 0xFF	; 255
     d3a:	7f e3       	ldi	r23, 0x3F	; 63
     d3c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     d40:	c3 01       	movw	r24, r6
     d42:	6f ef       	ldi	r22, 0xFF	; 255
     d44:	7f e3       	ldi	r23, 0x3F	; 63
     d46:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	6f ef       	ldi	r22, 0xFF	; 255
     d50:	7f e3       	ldi	r23, 0x3F	; 63
     d52:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
     d56:	c2 01       	movw	r24, r4
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		count_finished = FALSE;
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     d60:	80 91 8f 02 	lds	r24, 0x028F
     d64:	88 23       	and	r24, r24
     d66:	79 f2       	breq	.-98     	; 0xd06 <set_vco_init_cv+0x23e>
			set_control_voltage(vco_pitch_cv, 0);	
			
		}
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE not AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
     d68:	80 91 8d 02 	lds	r24, 0x028D
     d6c:	90 91 8e 02 	lds	r25, 0x028E
     d70:	ef 81       	ldd	r30, Y+7	; 0x07
     d72:	f8 85       	ldd	r31, Y+8	; 0x08
     d74:	e8 17       	cp	r30, r24
     d76:	f9 07       	cpc	r31, r25
     d78:	20 f0       	brcs	.+8      	; 0xd82 <set_vco_init_cv+0x2ba>
     d7a:	80 91 ea 01 	lds	r24, 0x01EA
     d7e:	88 23       	and	r24, r24
     d80:	51 f4       	brne	.+20     	; 0xd96 <set_vco_init_cv+0x2ce>
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	9e 81       	ldd	r25, Y+6	; 0x06
     d86:	80 95       	com	r24
     d88:	90 95       	com	r25
     d8a:	29 85       	ldd	r18, Y+9	; 0x09
     d8c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d8e:	28 23       	and	r18, r24
     d90:	39 23       	and	r19, r25
     d92:	3a 87       	std	Y+10, r19	; 0x0a
     d94:	29 87       	std	Y+9, r18	; 0x09
		no_overflow = TRUE;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	80 93 ea 01 	sts	0x01EA, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	9c 83       	std	Y+4, r25	; 0x04
     da4:	8b 83       	std	Y+3, r24	; 0x03
     da6:	ef ef       	ldi	r30, 0xFF	; 255
     da8:	8f 3f       	cpi	r24, 0xFF	; 255
     daa:	9e 07       	cpc	r25, r30
     dac:	09 f0       	breq	.+2      	; 0xdb0 <set_vco_init_cv+0x2e8>
     dae:	8f cf       	rjmp	.-226    	; 0xcce <set_vco_init_cv+0x206>
     db0:	29 85       	ldd	r18, Y+9	; 0x09
     db2:	3a 85       	ldd	r19, Y+10	; 0x0a
     db4:	3e 83       	std	Y+6, r19	; 0x06
     db6:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
     db8:	80 e1       	ldi	r24, 0x10	; 16
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
     dc4:	82 e1       	ldi	r24, 0x12	; 18
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
     dd0:	88 e2       	ldi	r24, 0x28	; 40
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
     ddc:	80 e3       	ldi	r24, 0x30	; 48
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
     de8:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
     dea:	ee e6       	ldi	r30, 0x6E	; 110
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	8d 7f       	andi	r24, 0xFD	; 253
     df2:	80 83       	st	Z, r24
	
	return init_cv;
	
}
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	9e 81       	ldd	r25, Y+6	; 0x06
     df8:	2a 96       	adiw	r28, 0x0a	; 10
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	bf 90       	pop	r11
     e16:	af 90       	pop	r10
     e18:	9f 90       	pop	r9
     e1a:	8f 90       	pop	r8
     e1c:	7f 90       	pop	r7
     e1e:	6f 90       	pop	r6
     e20:	5f 90       	pop	r5
     e22:	4f 90       	pop	r4
     e24:	3f 90       	pop	r3
     e26:	2f 90       	pop	r2
     e28:	08 95       	ret

00000e2a <tune_octave>:

void tune_octave(uint8_t octave, uint8_t vco) {
     e2a:	2f 92       	push	r2
     e2c:	3f 92       	push	r3
     e2e:	4f 92       	push	r4
     e30:	5f 92       	push	r5
     e32:	6f 92       	push	r6
     e34:	7f 92       	push	r7
     e36:	8f 92       	push	r8
     e38:	9f 92       	push	r9
     e3a:	af 92       	push	r10
     e3c:	bf 92       	push	r11
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	e6 97       	sbiw	r28, 0x36	; 54
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	f8 2e       	mov	r15, r24
     e60:	06 2f       	mov	r16, r22

	uint16_t pitch_reference[12] = { //holds the 16 bit timer counts for each note within an octave independent of octave # being tuned
     e62:	de 01       	movw	r26, r28
     e64:	11 96       	adiw	r26, 0x01	; 1
     e66:	e8 e9       	ldi	r30, 0x98	; 152
     e68:	f1 e0       	ldi	r31, 0x01	; 1
     e6a:	88 e1       	ldi	r24, 0x18	; 24
     e6c:	01 90       	ld	r0, Z+
     e6e:	0d 92       	st	X+, r0
     e70:	81 50       	subi	r24, 0x01	; 1
     e72:	e1 f7       	brne	.-8      	; 0xe6c <tune_octave+0x42>
	PITCH_Ab,
	PITCH_B
	    
    };
	
	uint8_t period_table[10] = {1, 2, 4, 1, 2, 4, 8, 16, 32, 64}; //the number of  periods that need to be counted for octaves 0-9
     e74:	de 01       	movw	r26, r28
     e76:	59 96       	adiw	r26, 0x19	; 25
     e78:	e0 eb       	ldi	r30, 0xB0	; 176
     e7a:	f1 e0       	ldi	r31, 0x01	; 1
     e7c:	8a e0       	ldi	r24, 0x0A	; 10
     e7e:	01 90       	ld	r0, Z+
     e80:	0d 92       	st	X+, r0
     e82:	81 50       	subi	r24, 0x01	; 1
     e84:	e1 f7       	brne	.-8      	; 0xe7e <tune_octave+0x54>
	//octaves 0-2 use /64 0.312500 MHz timer/counter1 clock rate
	//octaves 3-9 use /8 2.5 MHz timer/counter1 clock rate
	
	period = period_table[octave]; //set period number to be counted
     e86:	af 2c       	mov	r10, r15
     e88:	bb 24       	eor	r11, r11
     e8a:	fe 01       	movw	r30, r28
     e8c:	ea 0d       	add	r30, r10
     e8e:	fb 1d       	adc	r31, r11
     e90:	81 8d       	ldd	r24, Z+25	; 0x19
     e92:	80 93 91 02 	sts	0x0291, r24
	
	//to do:
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     e96:	80 e3       	ldi	r24, 0x30	; 48
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     ea2:	82 e4       	ldi	r24, 0x42	; 66
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     eae:	84 e4       	ldi	r24, 0x44	; 68
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     eba:	8f ee       	ldi	r24, 0xEF	; 239
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     ec6:	84 e3       	ldi	r24, 0x34	; 52
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     ed2:	8e e3       	ldi	r24, 0x3E	; 62
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     ede:	80 e4       	ldi	r24, 0x40	; 64
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     eea:	82 e2       	ldi	r24, 0x22	; 34
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     ef6:	8c e2       	ldi	r24, 0x2C	; 44
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     f02:	84 e2       	ldi	r24, 0x24	; 36
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     f0e:	86 e2       	ldi	r24, 0x26	; 38
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     f1a:	88 e2       	ldi	r24, 0x28	; 40
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	6f ef       	ldi	r22, 0xFF	; 255
     f20:	7f e3       	ldi	r23, 0x3F	; 63
     f22:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     f26:	8a e2       	ldi	r24, 0x2A	; 42
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     f32:	82 e3       	ldi	r24, 0x32	; 50
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     f3e:	8c e1       	ldi	r24, 0x1C	; 28
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     f4a:	88 e1       	ldi	r24, 0x18	; 24
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     f56:	84 e1       	ldi	r24, 0x14	; 20
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	6f ef       	ldi	r22, 0xFF	; 255
     f5c:	7f e3       	ldi	r23, 0x3F	; 63
     f5e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     f62:	80 e1       	ldi	r24, 0x10	; 16
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     f6e:	80 e2       	ldi	r24, 0x20	; 32
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;	

	if (vco == VCO1) { //set up parameters for VCO1 tuning
     f7a:	00 23       	and	r16, r16
     f7c:	09 f5       	brne	.+66     	; 0xfc0 <tune_octave+0x196>
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
		init_cv = vco1_init_cv;
     f7e:	20 91 8a 02 	lds	r18, 0x028A
     f82:	30 91 8b 02 	lds	r19, 0x028B
     f86:	3e a3       	lds	r19, 0x5e
     f88:	2d a3       	lds	r18, 0x5d
		//turn on VCO1 SAW, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     f8a:	0f 2e       	mov	r0, r31
     f8c:	fc e4       	ldi	r31, 0x4C	; 76
     f8e:	2f 2e       	mov	r2, r31
     f90:	f1 e0       	ldi	r31, 0x01	; 1
     f92:	3f 2e       	mov	r3, r31
     f94:	f0 2d       	mov	r31, r0

		//turn on VCO1 SAW, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     f96:	8c e3       	ldi	r24, 0x3C	; 60
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	9c a7       	lds	r25, 0x7c
     f9c:	8b a7       	lds	r24, 0x7b
	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     f9e:	e6 e4       	ldi	r30, 0x46	; 70
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	fa a7       	lds	r31, 0x7a
     fa4:	e9 a7       	lds	r30, 0x79

	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     fa6:	28 e3       	ldi	r18, 0x38	; 56
     fa8:	31 e0       	ldi	r19, 0x01	; 1
     faa:	38 a7       	lds	r19, 0x78
     fac:	2f a3       	lds	r18, 0x5f
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
		init_cv = vco1_init_cv;
		vco_pitch_table = vco1_pitch_table;
     fae:	06 e6       	ldi	r16, 0x66	; 102
     fb0:	12 e0       	ldi	r17, 0x02	; 2
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
     fb2:	0f 2e       	mov	r0, r31
     fb4:	fa e0       	ldi	r31, 0x0A	; 10
     fb6:	cf 2e       	mov	r12, r31
     fb8:	f0 2d       	mov	r31, r0
	struct control_voltage *vco_pitch_cv;	

	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
     fba:	ee 24       	eor	r14, r14
     fbc:	e3 94       	inc	r14
     fbe:	21 c0       	rjmp	.+66     	; 0x1002 <tune_octave+0x1d8>
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
     fc0:	80 91 88 02 	lds	r24, 0x0288
     fc4:	90 91 89 02 	lds	r25, 0x0289
     fc8:	9e a3       	lds	r25, 0x5e
     fca:	8d a3       	lds	r24, 0x5d
		//turn on VCO2 SAW, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     fcc:	0f 2e       	mov	r0, r31
     fce:	fa e4       	ldi	r31, 0x4A	; 74
     fd0:	2f 2e       	mov	r2, r31
     fd2:	f1 e0       	ldi	r31, 0x01	; 1
     fd4:	3f 2e       	mov	r3, r31
     fd6:	f0 2d       	mov	r31, r0
		
		//turn on VCO2 SAW, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     fd8:	ee e2       	ldi	r30, 0x2E	; 46
     fda:	f1 e0       	ldi	r31, 0x01	; 1
     fdc:	fc a7       	lds	r31, 0x7c
     fde:	eb a7       	lds	r30, 0x7b
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     fe0:	28 e4       	ldi	r18, 0x48	; 72
     fe2:	31 e0       	ldi	r19, 0x01	; 1
     fe4:	3a a7       	lds	r19, 0x7a
     fe6:	29 a7       	lds	r18, 0x79
		
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     fe8:	8a e3       	ldi	r24, 0x3A	; 58
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	98 a7       	lds	r25, 0x78
     fee:	8f a3       	lds	r24, 0x5f
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
		vco_pitch_table = vco2_pitch_table;
     ff0:	04 e4       	ldi	r16, 0x44	; 68
     ff2:	12 e0       	ldi	r17, 0x02	; 2
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
     ff4:	0f 2e       	mov	r0, r31
     ff6:	f4 e1       	ldi	r31, 0x14	; 20
     ff8:	cf 2e       	mov	r12, r31
     ffa:	f0 2d       	mov	r31, r0
		
		
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
     ffc:	ee 24       	eor	r14, r14
     ffe:	68 94       	set
    1000:	e6 f8       	bld	r14, 6
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
		vco_pitch_table = vco2_pitch_table;
	}
	
	if (octave <= 2) {
    1002:	92 e0       	ldi	r25, 0x02	; 2
    1004:	9f 15       	cp	r25, r15
    1006:	20 f0       	brcs	.+8      	; 0x1010 <tune_octave+0x1e6>
		
		//set timer/counter1 to /64 0.3125 MHz
		timer1_clock = (1<<CS11) | (1<<CS10);
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	80 93 90 02 	sts	0x0290, r24
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <tune_octave+0x1ec>
		
	} else {
		
		//set timer/counter1 to /8 2.5 MHz
		timer1_clock = (1<<CS11);
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	80 93 90 02 	sts	0x0290, r24
		
	}

	//set VCO init offset CV
	set_control_voltage(vco_init_cv, init_cv);
    1016:	8f a1       	lds	r24, 0x4f
    1018:	98 a5       	lds	r25, 0x68
    101a:	6d a1       	lds	r22, 0x4d
    101c:	7e a1       	lds	r23, 0x4e
    101e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	//latch switch data
	DATA_BUS = switch_byte;
    1022:	e2 b8       	out	0x02, r14	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1024:	ed ed       	ldi	r30, 0xDD	; 221
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	80 64       	ori	r24, 0x40	; 64
    102c:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    102e:	80 81       	ld	r24, Z
    1030:	8f 7b       	andi	r24, 0xBF	; 191
    1032:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1034:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1036:	89 9a       	sbi	0x11, 1	; 17
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1038:	84 b5       	in	r24, 0x24	; 36
    103a:	8f 60       	ori	r24, 0x0F	; 15
    103c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1042:	ee e6       	ldi	r30, 0x6E	; 110
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	82 60       	ori	r24, 0x02	; 2
    104a:	80 83       	st	Z, r24
	compare_match_counter = 0;	
    104c:	10 92 8c 02 	sts	0x028C, r1
    1050:	fe 01       	movw	r30, r28
    1052:	31 96       	adiw	r30, 0x01	; 1
    1054:	fc ab       	sts	0x5c, r31
    1056:	eb ab       	sts	0x5b, r30
	for (int note_number = 0; note_number <= 11; note_number++) 
		{
		
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
    1058:	c5 01       	movw	r24, r10
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	8a 0d       	add	r24, r10
    1060:	9b 1d       	adc	r25, r11
	
	return init_cv;
	
}

void tune_octave(uint8_t octave, uint8_t vco) {
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	02 97       	sbiw	r24, 0x02	; 2
    1070:	98 01       	movw	r18, r16
    1072:	28 0f       	add	r18, r24
    1074:	39 1f       	adc	r19, r25
    1076:	3e ab       	sts	0x5e, r19
    1078:	2d ab       	sts	0x5d, r18
    107a:	ce 01       	movw	r24, r28
    107c:	49 96       	adiw	r24, 0x19	; 25
    107e:	9c a3       	lds	r25, 0x5c
    1080:	8b a3       	lds	r24, 0x5b
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    1082:	ac 0c       	add	r10, r12
    1084:	b1 1c       	adc	r11, r1
				
				//not sure what's really necessary here - definitely pitch and init_cv, but what else?
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
				set_control_voltage(vco_init_cv, init_cv);
				set_control_voltage(vco_pw_cv, MAX);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1086:	0f 2e       	mov	r0, r31
    1088:	f0 e3       	ldi	r31, 0x30	; 48
    108a:	8f 2e       	mov	r8, r31
    108c:	f1 e0       	ldi	r31, 0x01	; 1
    108e:	9f 2e       	mov	r9, r31
    1090:	f0 2d       	mov	r31, r0
				set_control_voltage(&cutoff_cv, MAX);
    1092:	0f 2e       	mov	r0, r31
    1094:	f8 e2       	ldi	r31, 0x28	; 40
    1096:	6f 2e       	mov	r6, r31
    1098:	f1 e0       	ldi	r31, 0x01	; 1
    109a:	7f 2e       	mov	r7, r31
    109c:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    109e:	0f 2e       	mov	r0, r31
    10a0:	f4 e1       	ldi	r31, 0x14	; 20
    10a2:	4f 2e       	mov	r4, r31
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	5f 2e       	mov	r5, r31
    10a8:	f0 2d       	mov	r31, r0
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
	compare_match_counter = 0;	
	for (int note_number = 0; note_number <= 11; note_number++) 
		{
		
		uint16_t reference_count = pitch_reference[note_number];
    10aa:	eb a9       	sts	0x4b, r30
    10ac:	fc a9       	sts	0x4c, r31
    10ae:	21 91       	ld	r18, Z+
    10b0:	31 91       	ld	r19, Z+
    10b2:	fc ab       	sts	0x5c, r31
    10b4:	eb ab       	sts	0x5b, r30
    10b6:	38 ab       	sts	0x58, r19
    10b8:	2f a7       	lds	r18, 0x7f
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
    10ba:	ed a9       	sts	0x4d, r30
    10bc:	fe a9       	sts	0x4e, r31
    10be:	81 91       	ld	r24, Z+
    10c0:	91 91       	ld	r25, Z+
    10c2:	fe ab       	sts	0x5e, r31
    10c4:	ed ab       	sts	0x5d, r30
    10c6:	8c 01       	movw	r16, r24
    10c8:	08 57       	subi	r16, 0x78	; 120
    10ca:	1f 4f       	sbci	r17, 0xFF	; 255
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
    10cc:	26 e0       	ldi	r18, 0x06	; 6
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3e a7       	lds	r19, 0x7e
    10d2:	2d a7       	lds	r18, 0x7d
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    10d4:	0f 2e       	mov	r0, r31
    10d6:	f4 e6       	ldi	r31, 0x64	; 100
    10d8:	cf 2e       	mov	r12, r31
    10da:	dd 24       	eor	r13, r13
    10dc:	f0 2d       	mov	r31, r0
				set_control_voltage(vco_init_cv, init_cv);
				set_control_voltage(vco_pw_cv, MAX);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&cutoff_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    10de:	86 e1       	ldi	r24, 0x16	; 22
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	f8 2e       	mov	r15, r24
    10e4:	e9 2e       	mov	r14, r25
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
			osc_pitch_cv = (osc_pitch_cv >> dac_bit) << dac_bit; //clear bits to be set. Omar scoffed at this line as if it didn't need to be done. Why?
    10e6:	c8 01       	movw	r24, r16
    10e8:	0d a4       	lds	r16, 0xad
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <tune_octave+0x2c6>
    10ec:	96 95       	lsr	r25
    10ee:	87 95       	ror	r24
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <tune_octave+0x2c2>
    10f4:	8c 01       	movw	r16, r24
    10f6:	0d a4       	lds	r16, 0xad
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <tune_octave+0x2d4>
    10fa:	00 0f       	add	r16, r16
    10fc:	11 1f       	adc	r17, r17
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <tune_octave+0x2d0>
			//oh, maybe because it should just be done once before loop. Doing it for each iteration after bit 7 is redundant
			osc_pitch_cv |= (1<<dac_bit);
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	fc 01       	movw	r30, r24
    1108:	0d a4       	lds	r16, 0xad
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <__stack+0x11>
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <__stack+0xd>
    1114:	fa ab       	sts	0x5a, r31
    1116:	e9 ab       	sts	0x59, r30
    1118:	0e 2b       	or	r16, r30
    111a:	1f 2b       	or	r17, r31

			set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    111c:	c1 01       	movw	r24, r2
    111e:	b8 01       	movw	r22, r16
    1120:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			count_finished = FALSE;
    1124:	10 92 8f 02 	sts	0x028F, r1
			period_counter = 0;
    1128:	10 92 92 02 	sts	0x0292, r1
			

			while (count_finished == FALSE) {
    112c:	80 91 8f 02 	lds	r24, 0x028F
    1130:	88 23       	and	r24, r24
    1132:	09 f0       	breq	.+2      	; 0x1136 <__stack+0x37>
    1134:	42 c0       	rjmp	.+132    	; 0x11ba <__stack+0xbb>
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    1136:	80 91 8c 02 	lds	r24, 0x028C
    113a:	82 95       	swap	r24
    113c:	8f 70       	andi	r24, 0x0F	; 15
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	2c 9d       	mul	r18, r12
    1144:	c0 01       	movw	r24, r0
    1146:	2d 9d       	mul	r18, r13
    1148:	90 0d       	add	r25, r0
    114a:	3c 9d       	mul	r19, r12
    114c:	90 0d       	add	r25, r0
    114e:	11 24       	eor	r1, r1
    1150:	8a 0d       	add	r24, r10
    1152:	9b 1d       	adc	r25, r11
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
				//need to have a watchdog timer here to escape while loop if it takes too long
				
				//not sure what's really necessary here - definitely pitch and init_cv, but what else?
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    115a:	c1 01       	movw	r24, r2
    115c:	b8 01       	movw	r22, r16
    115e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_init_cv, init_cv);
    1162:	8f a1       	lds	r24, 0x4f
    1164:	98 a5       	lds	r25, 0x68
    1166:	6d a1       	lds	r22, 0x4d
    1168:	7e a1       	lds	r23, 0x4e
    116a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_pw_cv, MAX);
    116e:	8b a5       	lds	r24, 0x6b
    1170:	9c a5       	lds	r25, 0x6c
    1172:	6f ef       	ldi	r22, 0xFF	; 255
    1174:	7f e3       	ldi	r23, 0x3F	; 63
    1176:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    117a:	c4 01       	movw	r24, r8
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&cutoff_cv, MAX);
    1184:	c3 01       	movw	r24, r6
    1186:	6f ef       	ldi	r22, 0xFF	; 255
    1188:	7f e3       	ldi	r23, 0x3F	; 63
    118a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    118e:	c2 01       	movw	r24, r4
    1190:	6f ef       	ldi	r22, 0xFF	; 255
    1192:	7f e3       	ldi	r23, 0x3F	; 63
    1194:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1198:	8f 2d       	mov	r24, r15
    119a:	9e 2d       	mov	r25, r14
    119c:	6f ef       	ldi	r22, 0xFF	; 255
    119e:	7f e3       	ldi	r23, 0x3F	; 63
    11a0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_mix_cv, MAX);
    11a4:	89 a5       	lds	r24, 0x69
    11a6:	9a a5       	lds	r25, 0x6a
    11a8:	6f ef       	ldi	r22, 0xFF	; 255
    11aa:	7f e3       	ldi	r23, 0x3F	; 63
    11ac:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, osc_pitch_cv);
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
    11b0:	80 91 8f 02 	lds	r24, 0x028F
    11b4:	88 23       	and	r24, r24
    11b6:	09 f4       	brne	.+2      	; 0x11ba <__stack+0xbb>
    11b8:	be cf       	rjmp	.-132    	; 0x1136 <__stack+0x37>
			
			
			}							
				
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    11ba:	80 91 8d 02 	lds	r24, 0x028D
    11be:	90 91 8e 02 	lds	r25, 0x028E
    11c2:	2f a5       	lds	r18, 0x6f
    11c4:	38 a9       	sts	0x48, r19
    11c6:	28 17       	cp	r18, r24
    11c8:	39 07       	cpc	r19, r25
    11ca:	50 f0       	brcs	.+20     	; 0x11e0 <__stack+0xe1>
    11cc:	80 91 ea 01 	lds	r24, 0x01EA
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	31 f4       	brne	.+12     	; 0x11e0 <__stack+0xe1>
    11d4:	89 a9       	sts	0x49, r24
    11d6:	9a a9       	sts	0x4a, r25
    11d8:	80 95       	com	r24
    11da:	90 95       	com	r25
    11dc:	08 23       	and	r16, r24
    11de:	19 23       	and	r17, r25
				
			if (osc_count == reference_count && no_overflow == TRUE) {
    11e0:	80 91 8d 02 	lds	r24, 0x028D
    11e4:	90 91 8e 02 	lds	r25, 0x028E
    11e8:	ef a5       	lds	r30, 0x6f
    11ea:	f8 a9       	sts	0x48, r31
    11ec:	8e 17       	cp	r24, r30
    11ee:	9f 07       	cpc	r25, r31
    11f0:	21 f4       	brne	.+8      	; 0x11fa <__stack+0xfb>
    11f2:	80 91 ea 01 	lds	r24, 0x01EA
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	71 f0       	breq	.+28     	; 0x1216 <__stack+0x117>
				break;	//if you hit the reference count then get out of here		
			}				
			no_overflow = TRUE;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 93 ea 01 	sts	0x01EA, r24
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
    1200:	2d a5       	lds	r18, 0x6d
    1202:	3e a5       	lds	r19, 0x6e
    1204:	21 50       	subi	r18, 0x01	; 1
    1206:	30 40       	sbci	r19, 0x00	; 0
    1208:	3e a7       	lds	r19, 0x7e
    120a:	2d a7       	lds	r18, 0x7d
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	2f 3f       	cpi	r18, 0xFF	; 255
    1210:	38 07       	cpc	r19, r24
    1212:	09 f0       	breq	.+2      	; 0x1216 <__stack+0x117>
    1214:	68 cf       	rjmp	.-304    	; 0x10e6 <tune_octave+0x2bc>
		}
		
		//will need to make an excpetion for C0 here as its pitch has already been determined by set_vco_init_cv() and so C0 will be 0V
		//for now maybe just start tuning octaves 1 and up
		//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
		*(vco_pitch_table + (octave*12 + note_number)) = osc_pitch_cv;		
    1216:	ed a9       	sts	0x4d, r30
    1218:	fe a9       	sts	0x4e, r31
    121a:	11 83       	std	Z+1, r17	; 0x01
    121c:	00 83       	st	Z, r16
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
	compare_match_counter = 0;	
	for (int note_number = 0; note_number <= 11; note_number++) 
    121e:	2b a9       	sts	0x4b, r18
    1220:	3c a9       	sts	0x4c, r19
    1222:	8b a1       	lds	r24, 0x4b
    1224:	9c a1       	lds	r25, 0x4c
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	09 f0       	breq	.+2      	; 0x122e <__stack+0x12f>
    122c:	3e cf       	rjmp	.-388    	; 0x10aa <tune_octave+0x280>
		
	}
	

	
	PORTF &= ~(1<<GATE); //turn gate off
    122e:	89 98       	cbi	0x11, 1	; 17
		
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1230:	ee e6       	ldi	r30, 0x6E	; 110
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8d 7f       	andi	r24, 0xFD	; 253
    1238:	80 83       	st	Z, r24
	
	
}
    123a:	e6 96       	adiw	r28, 0x36	; 54
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	cf 90       	pop	r12
    1256:	bf 90       	pop	r11
    1258:	af 90       	pop	r10
    125a:	9f 90       	pop	r9
    125c:	8f 90       	pop	r8
    125e:	7f 90       	pop	r7
    1260:	6f 90       	pop	r6
    1262:	5f 90       	pop	r5
    1264:	4f 90       	pop	r4
    1266:	3f 90       	pop	r3
    1268:	2f 90       	pop	r2
    126a:	08 95       	ret

0000126c <tune_8ths>:

void tune_8ths(uint8_t vco) {
    126c:	2f 92       	push	r2
    126e:	3f 92       	push	r3
    1270:	4f 92       	push	r4
    1272:	5f 92       	push	r5
    1274:	6f 92       	push	r6
    1276:	7f 92       	push	r7
    1278:	8f 92       	push	r8
    127a:	9f 92       	push	r9
    127c:	af 92       	push	r10
    127e:	bf 92       	push	r11
    1280:	cf 92       	push	r12
    1282:	df 92       	push	r13
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	c0 54       	subi	r28, 0x40	; 64
    1296:	d0 40       	sbci	r29, 0x00	; 0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    12a4:	de 01       	movw	r26, r28
    12a6:	11 96       	adiw	r26, 0x01	; 1
    12a8:	ea eb       	ldi	r30, 0xBA	; 186
    12aa:	f1 e0       	ldi	r31, 0x01	; 1
    12ac:	80 e3       	ldi	r24, 0x30	; 48
    12ae:	01 90       	ld	r0, Z+
    12b0:	0d 92       	st	X+, r0
    12b2:	81 50       	subi	r24, 0x01	; 1
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    12b6:	80 e3       	ldi	r24, 0x30	; 48
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all pitch modulation
		set_control_voltage(&pitch_lfo_cv, MIN);
    12c2:	82 e4       	ldi	r24, 0x42	; 66
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pitch_eg2_cv, MIN);
    12ce:	84 e4       	ldi	r24, 0x44	; 68
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pitch_vco2_cv, MIN);
    12da:	8f ee       	ldi	r24, 0xEF	; 239
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off glide
		set_control_voltage(&glide_cv, MIN);
    12e6:	84 e3       	ldi	r24, 0x34	; 52
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all pulse width modulation
		set_control_voltage(&pwm_eg2_cv, MIN);
    12f2:	8e e3       	ldi	r24, 0x3E	; 62
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pwm_lfo_cv, MIN);
    12fe:	80 e4       	ldi	r24, 0x40	; 64
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all filter modulation
		set_control_voltage(&fil_lfo_cv, MIN);
    130a:	82 e2       	ldi	r24, 0x22	; 34
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&fil_eg2_cv, MIN);
    1316:	8c e2       	ldi	r24, 0x2C	; 44
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&fil_vco2_cv, MIN);
    1322:	84 e2       	ldi	r24, 0x24	; 36
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&key_track_cv, MIN);
    132e:	86 e2       	ldi	r24, 0x26	; 38
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//open filter with no resonance
		set_control_voltage(&cutoff_cv, MAX);
    133a:	88 e2       	ldi	r24, 0x28	; 40
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	6f ef       	ldi	r22, 0xFF	; 255
    1340:	7f e3       	ldi	r23, 0x3F	; 63
    1342:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&res_cv, MIN);
    1346:	8a e2       	ldi	r24, 0x2A	; 42
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off VCA LFO modulation
		set_control_voltage(&amp_lfo_cv, MIN);
    1352:	82 e3       	ldi	r24, 0x32	; 50
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//initialize VCA envelope
		set_control_voltage(&attack_1_cv, MIN);
    135e:	8c e1       	ldi	r24, 0x1C	; 28
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&decay_1_cv, MIN);
    136a:	88 e1       	ldi	r24, 0x18	; 24
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&sustain_1_cv, MAX);
    1376:	84 e1       	ldi	r24, 0x14	; 20
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	6f ef       	ldi	r22, 0xFF	; 255
    137c:	7f e3       	ldi	r23, 0x3F	; 63
    137e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&release_1_cv, MIN);
    1382:	80 e1       	ldi	r24, 0x10	; 16
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off noise
		set_control_voltage(&noise_mix_cv, MIN);
    138e:	80 e2       	ldi	r24, 0x20	; 32
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    139a:	00 23       	and	r16, r16
    139c:	e9 f4       	brne	.+58     	; 0x13d8 <tune_8ths+0x16c>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    139e:	20 90 8a 02 	lds	r2, 0x028A
    13a2:	30 90 8b 02 	lds	r3, 0x028B
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    13a6:	0f 2e       	mov	r0, r31
    13a8:	fc e4       	ldi	r31, 0x4C	; 76
    13aa:	6f 2e       	mov	r6, r31
    13ac:	f1 e0       	ldi	r31, 0x01	; 1
    13ae:	7f 2e       	mov	r7, r31
    13b0:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    13b2:	26 e4       	ldi	r18, 0x46	; 70
    13b4:	31 e0       	ldi	r19, 0x01	; 1
    13b6:	3a ab       	sts	0x5a, r19
    13b8:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    13ba:	0f 2e       	mov	r0, r31
    13bc:	f8 e3       	ldi	r31, 0x38	; 56
    13be:	4f 2e       	mov	r4, r31
    13c0:	f1 e0       	ldi	r31, 0x01	; 1
    13c2:	5f 2e       	mov	r5, r31
    13c4:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    13c6:	06 e6       	ldi	r16, 0x66	; 102
    13c8:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
    13ca:	0f 2e       	mov	r0, r31
    13cc:	fa e0       	ldi	r31, 0x0A	; 10
    13ce:	cf 2e       	mov	r12, r31
    13d0:	f0 2d       	mov	r31, r0
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    13d2:	ee 24       	eor	r14, r14
    13d4:	e3 94       	inc	r14
    13d6:	1d c0       	rjmp	.+58     	; 0x1412 <tune_8ths+0x1a6>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    13d8:	20 90 88 02 	lds	r2, 0x0288
    13dc:	30 90 89 02 	lds	r3, 0x0289
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    13e0:	0f 2e       	mov	r0, r31
    13e2:	fa e4       	ldi	r31, 0x4A	; 74
    13e4:	6f 2e       	mov	r6, r31
    13e6:	f1 e0       	ldi	r31, 0x01	; 1
    13e8:	7f 2e       	mov	r7, r31
    13ea:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    13ec:	48 e4       	ldi	r20, 0x48	; 72
    13ee:	51 e0       	ldi	r21, 0x01	; 1
    13f0:	5a ab       	sts	0x5a, r21
    13f2:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    13f4:	0f 2e       	mov	r0, r31
    13f6:	fa e3       	ldi	r31, 0x3A	; 58
    13f8:	4f 2e       	mov	r4, r31
    13fa:	f1 e0       	ldi	r31, 0x01	; 1
    13fc:	5f 2e       	mov	r5, r31
    13fe:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    1400:	04 e4       	ldi	r16, 0x44	; 68
    1402:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
    1404:	0f 2e       	mov	r0, r31
    1406:	f4 e1       	ldi	r31, 0x14	; 20
    1408:	cf 2e       	mov	r12, r31
    140a:	f0 2d       	mov	r31, r0
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    140c:	ee 24       	eor	r14, r14
    140e:	68 94       	set
    1410:	e6 f8       	bld	r14, 6
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    1412:	c2 01       	movw	r24, r4
    1414:	b1 01       	movw	r22, r2
    1416:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//set_control_voltage(vco_pitch_cv, 8192);
	
		//latch switch data
		DATA_BUS = switch_byte;
    141a:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    141c:	ed ed       	ldi	r30, 0xDD	; 221
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	80 64       	ori	r24, 0x40	; 64
    1424:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1426:	80 81       	ld	r24, Z
    1428:	8f 7b       	andi	r24, 0xBF	; 191
    142a:	80 83       	st	Z, r24
		DATA_BUS = 0;
    142c:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    142e:	89 9a       	sbi	0x11, 1	; 17
		TCNT0 = 0; //make sure timer/counter0 is actually 0
    1430:	16 bc       	out	0x26, r1	; 38
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1432:	84 b5       	in	r24, 0x24	; 36
    1434:	8f 60       	ori	r24, 0x0F	; 15
    1436:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	87 bd       	out	0x27, r24	; 39
		//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
		//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    143c:	ee e6       	ldi	r30, 0x6E	; 110
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	82 60       	ori	r24, 0x02	; 2
    1444:	80 83       	st	Z, r24
		compare_match_counter = 0;	
    1446:	10 92 8c 02 	sts	0x028C, r1
				period_counter = 0;
			

				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);	
    144a:	8c 2d       	mov	r24, r12
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	24 e6       	ldi	r18, 0x64	; 100
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	82 9f       	mul	r24, r18
    1454:	d0 01       	movw	r26, r0
    1456:	83 9f       	mul	r24, r19
    1458:	b0 0d       	add	r27, r0
    145a:	92 9f       	mul	r25, r18
    145c:	b0 0d       	add	r27, r0
    145e:	11 24       	eor	r1, r1
    1460:	bc ab       	sts	0x5c, r27
    1462:	ab ab       	sts	0x5b, r26
    1464:	fe 01       	movw	r30, r28
    1466:	31 96       	adiw	r30, 0x01	; 1
    1468:	fc af       	sts	0x7c, r31
    146a:	eb af       	sts	0x7b, r30
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
	
	
}

void tune_8ths(uint8_t vco) {
    146c:	98 01       	movw	r18, r16
    146e:	2e 5f       	subi	r18, 0xFE	; 254
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	21 96       	adiw	r28, 0x01	; 1
    1474:	3f af       	sts	0x7f, r19
    1476:	2e af       	sts	0x7e, r18
    1478:	21 97       	sbiw	r28, 0x01	; 1
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
		//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
		//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    147a:	1e ae       	sts	0xbe, r17
    147c:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    147e:	0f 2e       	mov	r0, r31
    1480:	f0 e3       	ldi	r31, 0x30	; 48
    1482:	ef 2e       	mov	r14, r31
    1484:	f1 e0       	ldi	r31, 0x01	; 1
    1486:	ff 2e       	mov	r15, r31
    1488:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    148a:	0f 2e       	mov	r0, r31
    148c:	f8 e2       	ldi	r31, 0x28	; 40
    148e:	cf 2e       	mov	r12, r31
    1490:	f1 e0       	ldi	r31, 0x01	; 1
    1492:	df 2e       	mov	r13, r31
    1494:	f0 2d       	mov	r31, r0
					set_control_voltage(&sustain_1_cv, MAX);
    1496:	0f 2e       	mov	r0, r31
    1498:	f4 e1       	ldi	r31, 0x14	; 20
    149a:	af 2e       	mov	r10, r31
    149c:	f1 e0       	ldi	r31, 0x01	; 1
    149e:	bf 2e       	mov	r11, r31
    14a0:	f0 2d       	mov	r31, r0
					set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    14a2:	0f 2e       	mov	r0, r31
    14a4:	fc e1       	ldi	r31, 0x1C	; 28
    14a6:	8f 2e       	mov	r8, r31
    14a8:	f1 e0       	ldi	r31, 0x01	; 1
    14aa:	9f 2e       	mov	r9, r31
    14ac:	f0 2d       	mov	r31, r0
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
	
	
}

void tune_8ths(uint8_t vco) {
    14ae:	eb ad       	sts	0x6b, r30
    14b0:	fc ad       	sts	0x6c, r31
		//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    14b2:	80 81       	ld	r24, Z
    14b4:	80 93 91 02 	sts	0x0291, r24
		
			if (note_number <= 2) {
    14b8:	4d ad       	sts	0x6d, r20
    14ba:	5e ad       	sts	0x6e, r21
    14bc:	43 30       	cpi	r20, 0x03	; 3
    14be:	51 05       	cpc	r21, r1
    14c0:	24 f4       	brge	.+8      	; 0x14ca <tune_8ths+0x25e>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    14c2:	83 e0       	ldi	r24, 0x03	; 3
    14c4:	80 93 90 02 	sts	0x0290, r24
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <tune_8ths+0x264>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    14ca:	52 e0       	ldi	r21, 0x02	; 2
    14cc:	50 93 90 02 	sts	0x0290, r21
	
			}		
			uint16_t reference_count = reference[note_number].count;
    14d0:	81 81       	ldd	r24, Z+1	; 0x01
    14d2:	92 81       	ldd	r25, Z+2	; 0x02
    14d4:	9a af       	sts	0x7a, r25
    14d6:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    14d8:	ad e0       	ldi	r26, 0x0D	; 13
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	be ab       	sts	0x5e, r27
    14de:	ad ab       	sts	0x5d, r26
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
	
			}		
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    14e0:	00 e0       	ldi	r16, 0x00	; 0
    14e2:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation

				osc_pitch_cv |= (1<<dac_bit);
    14e4:	e1 e0       	ldi	r30, 0x01	; 1
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	0d a8       	sts	0x8d, r16
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <tune_8ths+0x284>
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <tune_8ths+0x280>
    14f4:	f8 af       	sts	0x78, r31
    14f6:	ef ab       	sts	0x5f, r30
    14f8:	0e 2b       	or	r16, r30
    14fa:	1f 2b       	or	r17, r31

				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    14fc:	c3 01       	movw	r24, r6
    14fe:	b8 01       	movw	r22, r16
    1500:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				count_finished = FALSE;
    1504:	10 92 8f 02 	sts	0x028F, r1
				period_counter = 0;
    1508:	10 92 92 02 	sts	0x0292, r1
			

				while (count_finished == FALSE) {
    150c:	80 91 8f 02 	lds	r24, 0x028F
    1510:	88 23       	and	r24, r24
    1512:	81 f5       	brne	.+96     	; 0x1574 <tune_8ths+0x308>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);	
    1514:	80 91 91 02 	lds	r24, 0x0291
    1518:	2b a9       	sts	0x4b, r18
    151a:	3c a9       	sts	0x4c, r19
    151c:	28 0f       	add	r18, r24
    151e:	31 1d       	adc	r19, r1
    1520:	c9 01       	movw	r24, r18
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    1528:	c2 01       	movw	r24, r4
    152a:	b1 01       	movw	r22, r2
    152c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1530:	c3 01       	movw	r24, r6
    1532:	b8 01       	movw	r22, r16
    1534:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1538:	c7 01       	movw	r24, r14
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    1542:	c6 01       	movw	r24, r12
    1544:	6f ef       	ldi	r22, 0xFF	; 255
    1546:	7f e3       	ldi	r23, 0x3F	; 63
    1548:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&sustain_1_cv, MAX);
    154c:	c5 01       	movw	r24, r10
    154e:	6f ef       	ldi	r22, 0xFF	; 255
    1550:	7f e3       	ldi	r23, 0x3F	; 63
    1552:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    1556:	c4 01       	movw	r24, r8
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					//set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
					set_control_voltage(vco_mix_cv, MAX);
    1560:	89 a9       	sts	0x49, r24
    1562:	9a a9       	sts	0x4a, r25
    1564:	6f ef       	ldi	r22, 0xFF	; 255
    1566:	7f e3       	ldi	r23, 0x3F	; 63
    1568:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
				count_finished = FALSE;
				period_counter = 0;
			

				while (count_finished == FALSE) {
    156c:	80 91 8f 02 	lds	r24, 0x028F
    1570:	88 23       	and	r24, r24
    1572:	81 f2       	breq	.-96     	; 0x1514 <tune_8ths+0x2a8>
			
			
				}							
				
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    1574:	80 91 8d 02 	lds	r24, 0x028D
    1578:	90 91 8e 02 	lds	r25, 0x028E
    157c:	49 ad       	sts	0x69, r20
    157e:	5a ad       	sts	0x6a, r21
    1580:	48 17       	cp	r20, r24
    1582:	59 07       	cpc	r21, r25
    1584:	50 f0       	brcs	.+20     	; 0x159a <tune_8ths+0x32e>
    1586:	80 91 ea 01 	lds	r24, 0x01EA
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	31 f4       	brne	.+12     	; 0x159a <tune_8ths+0x32e>
    158e:	8f a9       	sts	0x4f, r24
    1590:	98 ad       	sts	0x68, r25
    1592:	80 95       	com	r24
    1594:	90 95       	com	r25
    1596:	08 23       	and	r16, r24
    1598:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    159a:	80 91 8d 02 	lds	r24, 0x028D
    159e:	90 91 8e 02 	lds	r25, 0x028E
    15a2:	a9 ad       	sts	0x69, r26
    15a4:	ba ad       	sts	0x6a, r27
    15a6:	8a 17       	cp	r24, r26
    15a8:	9b 07       	cpc	r25, r27
    15aa:	21 f4       	brne	.+8      	; 0x15b4 <tune_8ths+0x348>
    15ac:	80 91 ea 01 	lds	r24, 0x01EA
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	69 f0       	breq	.+26     	; 0x15ce <tune_8ths+0x362>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    15b4:	b1 e0       	ldi	r27, 0x01	; 1
    15b6:	b0 93 ea 01 	sts	0x01EA, r27
				timer1_clock = (1<<CS11);
	
			}		
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    15ba:	ed a9       	sts	0x4d, r30
    15bc:	fe a9       	sts	0x4e, r31
    15be:	31 97       	sbiw	r30, 0x01	; 1
    15c0:	fe ab       	sts	0x5e, r31
    15c2:	ed ab       	sts	0x5d, r30
    15c4:	2f ef       	ldi	r18, 0xFF	; 255
    15c6:	ef 3f       	cpi	r30, 0xFF	; 255
    15c8:	f2 07       	cpc	r31, r18
    15ca:	09 f0       	breq	.+2      	; 0x15ce <tune_8ths+0x362>
    15cc:	8b cf       	rjmp	.-234    	; 0x14e4 <tune_8ths+0x278>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    15ce:	21 96       	adiw	r28, 0x01	; 1
    15d0:	ae ad       	sts	0x6e, r26
    15d2:	bf ad       	sts	0x6f, r27
    15d4:	21 97       	sbiw	r28, 0x01	; 1
    15d6:	0d 93       	st	X+, r16
    15d8:	1d 93       	st	X+, r17
    15da:	21 96       	adiw	r28, 0x01	; 1
    15dc:	bf af       	sts	0x7f, r27
    15de:	ae af       	sts	0x7e, r26
    15e0:	21 97       	sbiw	r28, 0x01	; 1
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
		//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
		//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    15e2:	ed ad       	sts	0x6d, r30
    15e4:	fe ad       	sts	0x6e, r31
    15e6:	31 96       	adiw	r30, 0x01	; 1
    15e8:	fe af       	sts	0x7e, r31
    15ea:	ed af       	sts	0x7d, r30
    15ec:	2b ad       	sts	0x6b, r18
    15ee:	3c ad       	sts	0x6c, r19
    15f0:	2d 5f       	subi	r18, 0xFD	; 253
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	3c af       	sts	0x7c, r19
    15f6:	2b af       	sts	0x7b, r18
    15f8:	e0 31       	cpi	r30, 0x10	; 16
    15fa:	f1 05       	cpc	r31, r1
    15fc:	09 f0       	breq	.+2      	; 0x1600 <tune_8ths+0x394>
    15fe:	57 cf       	rjmp	.-338    	; 0x14ae <tune_8ths+0x242>
		
		}
	

	
		PORTF &= ~(1<<GATE); //turn gate off
    1600:	89 98       	cbi	0x11, 1	; 17
		
		TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1602:	ee e6       	ldi	r30, 0x6E	; 110
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8d 7f       	andi	r24, 0xFD	; 253
    160a:	80 83       	st	Z, r24
	
	
	}	
    160c:	c0 5c       	subi	r28, 0xC0	; 192
    160e:	df 4f       	sbci	r29, 0xFF	; 255
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	df 90       	pop	r13
    1628:	cf 90       	pop	r12
    162a:	bf 90       	pop	r11
    162c:	af 90       	pop	r10
    162e:	9f 90       	pop	r9
    1630:	8f 90       	pop	r8
    1632:	7f 90       	pop	r7
    1634:	6f 90       	pop	r6
    1636:	5f 90       	pop	r5
    1638:	4f 90       	pop	r4
    163a:	3f 90       	pop	r3
    163c:	2f 90       	pop	r2
    163e:	08 95       	ret

00001640 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    1640:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    1642:	80 91 93 02 	lds	r24, 0x0293
    1646:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    1648:	89 27       	eor	r24, r25
    164a:	80 93 93 02 	sts	0x0293, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    164e:	89 23       	and	r24, r25
    1650:	08 95       	ret

00001652 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1652:	ed ed       	ldi	r30, 0xDD	; 221
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	90 81       	ld	r25, Z
    1658:	9f 7b       	andi	r25, 0xBF	; 191
    165a:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	21 70       	andi	r18, 0x01	; 1
    1662:	30 70       	andi	r19, 0x00	; 0
    1664:	22 0f       	add	r18, r18
    1666:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    1668:	68 2f       	mov	r22, r24
    166a:	62 95       	swap	r22
    166c:	66 95       	lsr	r22
    166e:	67 70       	andi	r22, 0x07	; 7
    1670:	67 95       	ror	r22
    1672:	66 27       	eor	r22, r22
    1674:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1676:	26 2b       	or	r18, r22
    1678:	98 2f       	mov	r25, r24
    167a:	96 95       	lsr	r25
    167c:	96 95       	lsr	r25
    167e:	91 70       	andi	r25, 0x01	; 1
    1680:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    1682:	68 2f       	mov	r22, r24
    1684:	66 1f       	adc	r22, r22
    1686:	66 27       	eor	r22, r22
    1688:	66 1f       	adc	r22, r22
    168a:	66 0f       	add	r22, r22
    168c:	66 0f       	add	r22, r22
    168e:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1690:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    1692:	a8 2f       	mov	r26, r24
    1694:	a6 95       	lsr	r26
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	a1 70       	andi	r26, 0x01	; 1
    169a:	b0 70       	andi	r27, 0x00	; 0
    169c:	bd 01       	movw	r22, r26
    169e:	66 0f       	add	r22, r22
    16a0:	77 1f       	adc	r23, r23
    16a2:	66 0f       	add	r22, r22
    16a4:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    16a6:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    16a8:	68 2f       	mov	r22, r24
    16aa:	62 95       	swap	r22
    16ac:	6f 70       	andi	r22, 0x0F	; 15
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	61 70       	andi	r22, 0x01	; 1
    16b2:	70 70       	andi	r23, 0x00	; 0
    16b4:	ab 01       	movw	r20, r22
    16b6:	00 24       	eor	r0, r0
    16b8:	56 95       	lsr	r21
    16ba:	47 95       	ror	r20
    16bc:	07 94       	ror	r0
    16be:	56 95       	lsr	r21
    16c0:	47 95       	ror	r20
    16c2:	07 94       	ror	r0
    16c4:	54 2f       	mov	r21, r20
    16c6:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    16c8:	62 2f       	mov	r22, r18
    16ca:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    16cc:	48 2f       	mov	r20, r24
    16ce:	42 95       	swap	r20
    16d0:	46 95       	lsr	r20
    16d2:	46 95       	lsr	r20
    16d4:	43 70       	andi	r20, 0x03	; 3
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	41 70       	andi	r20, 0x01	; 1
    16da:	50 70       	andi	r21, 0x00	; 0
    16dc:	9a 01       	movw	r18, r20
    16de:	22 0f       	add	r18, r18
    16e0:	33 1f       	adc	r19, r19
    16e2:	22 95       	swap	r18
    16e4:	32 95       	swap	r19
    16e6:	30 7f       	andi	r19, 0xF0	; 240
    16e8:	32 27       	eor	r19, r18
    16ea:	20 7f       	andi	r18, 0xF0	; 240
    16ec:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    16ee:	46 2f       	mov	r20, r22
    16f0:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    16f2:	86 95       	lsr	r24
    16f4:	86 95       	lsr	r24
    16f6:	86 95       	lsr	r24
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	21 70       	andi	r18, 0x01	; 1
    16fe:	30 70       	andi	r19, 0x00	; 0
    1700:	c9 01       	movw	r24, r18
    1702:	82 95       	swap	r24
    1704:	92 95       	swap	r25
    1706:	90 7f       	andi	r25, 0xF0	; 240
    1708:	98 27       	eor	r25, r24
    170a:	80 7f       	andi	r24, 0xF0	; 240
    170c:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    170e:	84 2b       	or	r24, r20
    1710:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1712:	80 81       	ld	r24, Z
    1714:	80 64       	ori	r24, 0x40	; 64
    1716:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1718:	80 81       	ld	r24, Z
    171a:	8f 7b       	andi	r24, 0xBF	; 191
    171c:	80 83       	st	Z, r24
	DATA_BUS = 0;
    171e:	12 b8       	out	0x02, r1	; 2
	
	
    1720:	08 95       	ret

00001722 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1722:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1724:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1726:	74 83       	std	Z+4, r23	; 0x04
    1728:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    172a:	11 82       	std	Z+1, r1	; 0x01
    172c:	10 82       	st	Z, r1
}
    172e:	08 95       	ret

00001730 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	ec 01       	movw	r28, r24
    1738:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    173a:	0e 94 07 0c 	call	0x180e	; 0x180e <store_and_clear_interrupt>
    173e:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1740:	39 81       	ldd	r19, Y+1	; 0x01
    1742:	83 2f       	mov	r24, r19
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	6a 81       	ldd	r22, Y+2	; 0x02
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__divmodhi4>
    1750:	48 81       	ld	r20, Y
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	84 17       	cp	r24, r20
    1756:	95 07       	cpc	r25, r21
    1758:	29 f4       	brne	.+10     	; 0x1764 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    175a:	82 2f       	mov	r24, r18
    175c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <restore_interrupt_setting>
      return false;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	11 c0       	rjmp	.+34     	; 0x1786 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    1764:	eb 81       	ldd	r30, Y+3	; 0x03
    1766:	fc 81       	ldd	r31, Y+4	; 0x04
    1768:	e3 0f       	add	r30, r19
    176a:	f1 1d       	adc	r31, r1
    176c:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	6a 81       	ldd	r22, Y+2	; 0x02
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__divmodhi4>
    177c:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    177e:	82 2f       	mov	r24, r18
    1780:	0e 94 0a 0c 	call	0x1814	; 0x1814 <restore_interrupt_setting>
      return true;
    1784:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	08 95       	ret

0000178e <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1794:	0e 94 07 0c 	call	0x180e	; 0x180e <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1798:	29 81       	ldd	r18, Y+1	; 0x01
    179a:	98 81       	ld	r25, Y
    179c:	29 17       	cp	r18, r25
    179e:	18 f0       	brcs	.+6      	; 0x17a6 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    17a0:	c2 2f       	mov	r28, r18
    17a2:	c9 1b       	sub	r28, r25
    17a4:	03 c0       	rjmp	.+6      	; 0x17ac <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    17a6:	ca 81       	ldd	r28, Y+2	; 0x02
    17a8:	c2 0f       	add	r28, r18
    17aa:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    17ac:	0e 94 0a 0c 	call	0x1814	; 0x1814 <restore_interrupt_setting>
   return len;
}
    17b0:	8c 2f       	mov	r24, r28
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	08 95       	ret

000017b8 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    17b8:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    17ba:	20 81       	ld	r18, Z
    17bc:	86 2f       	mov	r24, r22
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	82 0f       	add	r24, r18
    17c2:	91 1d       	adc	r25, r1
    17c4:	62 81       	ldd	r22, Z+2	; 0x02
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__divmodhi4>
    17cc:	03 80       	ldd	r0, Z+3	; 0x03
    17ce:	f4 81       	ldd	r31, Z+4	; 0x04
    17d0:	e0 2d       	mov	r30, r0
    17d2:	e8 0f       	add	r30, r24
    17d4:	f9 1f       	adc	r31, r25
}
    17d6:	80 81       	ld	r24, Z
    17d8:	08 95       	ret

000017da <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	ec 01       	movw	r28, r24
    17e2:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    17e4:	0e 94 07 0c 	call	0x180e	; 0x180e <store_and_clear_interrupt>
    17e8:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    17ea:	88 81       	ld	r24, Y
    17ec:	21 2f       	mov	r18, r17
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	28 0f       	add	r18, r24
    17f2:	31 1d       	adc	r19, r1
    17f4:	6a 81       	ldd	r22, Y+2	; 0x02
    17f6:	c9 01       	movw	r24, r18
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__divmodhi4>
    17fe:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1800:	84 2f       	mov	r24, r20
    1802:	0e 94 0a 0c 	call	0x1814	; 0x1814 <restore_interrupt_setting>
}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	08 95       	ret

0000180e <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    180e:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1810:	f8 94       	cli
   return sreg;
}
    1812:	08 95       	ret

00001814 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1814:	8f bf       	out	0x3f, r24	; 63
}
    1816:	08 95       	ret

00001818 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1818:	88 1f       	adc	r24, r24
    181a:	88 27       	eor	r24, r24
    181c:	88 1f       	adc	r24, r24
    181e:	08 95       	ret

00001820 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	88 3f       	cpi	r24, 0xF8	; 248
    1824:	08 f4       	brcc	.+2      	; 0x1828 <midi_is_realtime+0x8>
    1826:	90 e0       	ldi	r25, 0x00	; 0
}
    1828:	89 2f       	mov	r24, r25
    182a:	08 95       	ret

0000182c <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	20 7f       	andi	r18, 0xF0	; 240
    1832:	30 70       	andi	r19, 0x00	; 0
    1834:	20 3c       	cpi	r18, 0xC0	; 192
    1836:	31 05       	cpc	r19, r1
    1838:	e9 f1       	breq	.+122    	; 0x18b4 <midi_packet_length+0x88>
    183a:	21 3c       	cpi	r18, 0xC1	; 193
    183c:	31 05       	cpc	r19, r1
    183e:	8c f4       	brge	.+34     	; 0x1862 <midi_packet_length+0x36>
    1840:	20 39       	cpi	r18, 0x90	; 144
    1842:	31 05       	cpc	r19, r1
    1844:	e1 f0       	breq	.+56     	; 0x187e <midi_packet_length+0x52>
    1846:	21 39       	cpi	r18, 0x91	; 145
    1848:	31 05       	cpc	r19, r1
    184a:	24 f4       	brge	.+8      	; 0x1854 <midi_packet_length+0x28>
    184c:	20 38       	cpi	r18, 0x80	; 128
    184e:	31 05       	cpc	r19, r1
    1850:	79 f5       	brne	.+94     	; 0x18b0 <midi_packet_length+0x84>
    1852:	15 c0       	rjmp	.+42     	; 0x187e <midi_packet_length+0x52>
    1854:	20 3a       	cpi	r18, 0xA0	; 160
    1856:	31 05       	cpc	r19, r1
    1858:	91 f0       	breq	.+36     	; 0x187e <midi_packet_length+0x52>
    185a:	20 3b       	cpi	r18, 0xB0	; 176
    185c:	31 05       	cpc	r19, r1
    185e:	41 f5       	brne	.+80     	; 0x18b0 <midi_packet_length+0x84>
    1860:	0e c0       	rjmp	.+28     	; 0x187e <midi_packet_length+0x52>
    1862:	20 3e       	cpi	r18, 0xE0	; 224
    1864:	31 05       	cpc	r19, r1
    1866:	59 f0       	breq	.+22     	; 0x187e <midi_packet_length+0x52>
    1868:	21 3e       	cpi	r18, 0xE1	; 225
    186a:	31 05       	cpc	r19, r1
    186c:	24 f4       	brge	.+8      	; 0x1876 <midi_packet_length+0x4a>
    186e:	20 3d       	cpi	r18, 0xD0	; 208
    1870:	31 05       	cpc	r19, r1
    1872:	f1 f4       	brne	.+60     	; 0x18b0 <midi_packet_length+0x84>
    1874:	1f c0       	rjmp	.+62     	; 0x18b4 <midi_packet_length+0x88>
    1876:	20 3f       	cpi	r18, 0xF0	; 240
    1878:	31 05       	cpc	r19, r1
    187a:	d1 f4       	brne	.+52     	; 0x18b0 <midi_packet_length+0x84>
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    1882:	86 3f       	cpi	r24, 0xF6	; 246
    1884:	79 f0       	breq	.+30     	; 0x18a4 <midi_packet_length+0x78>
    1886:	87 3f       	cpi	r24, 0xF7	; 247
    1888:	38 f4       	brcc	.+14     	; 0x1898 <midi_packet_length+0x6c>
    188a:	82 3f       	cpi	r24, 0xF2	; 242
    188c:	a9 f0       	breq	.+42     	; 0x18b8 <midi_packet_length+0x8c>
    188e:	83 3f       	cpi	r24, 0xF3	; 243
    1890:	59 f0       	breq	.+22     	; 0x18a8 <midi_packet_length+0x7c>
    1892:	81 3f       	cpi	r24, 0xF1	; 241
    1894:	59 f4       	brne	.+22     	; 0x18ac <midi_packet_length+0x80>
    1896:	08 c0       	rjmp	.+16     	; 0x18a8 <midi_packet_length+0x7c>
    1898:	88 3f       	cpi	r24, 0xF8	; 248
    189a:	40 f0       	brcs	.+16     	; 0x18ac <midi_packet_length+0x80>
    189c:	8d 3f       	cpi	r24, 0xFD	; 253
    189e:	10 f0       	brcs	.+4      	; 0x18a4 <midi_packet_length+0x78>
    18a0:	8e 3f       	cpi	r24, 0xFE	; 254
    18a2:	20 f0       	brcs	.+8      	; 0x18ac <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	08 95       	ret
         }
      default:
         return UNDEFINED;
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    18b4:	82 e0       	ldi	r24, 0x02	; 2
    18b6:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    18b8:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    18ba:	08 95       	ret

000018bc <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    18bc:	0f 93       	push	r16
    18be:	34 2f       	mov	r19, r20
    18c0:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    18c2:	46 2f       	mov	r20, r22
    18c4:	4f 70       	andi	r20, 0x0F	; 15
    18c6:	40 6b       	ori	r20, 0xB0	; 176
    18c8:	23 2f       	mov	r18, r19
    18ca:	2f 77       	andi	r18, 0x7F	; 127
    18cc:	0f 77       	andi	r16, 0x7F	; 127
    18ce:	dc 01       	movw	r26, r24
    18d0:	ed 91       	ld	r30, X+
    18d2:	fc 91       	ld	r31, X
    18d4:	63 e0       	ldi	r22, 0x03	; 3
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    18da:	0f 91       	pop	r16
    18dc:	08 95       	ret

000018de <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    18de:	0f 93       	push	r16
    18e0:	34 2f       	mov	r19, r20
    18e2:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    18e4:	46 2f       	mov	r20, r22
    18e6:	4f 70       	andi	r20, 0x0F	; 15
    18e8:	40 69       	ori	r20, 0x90	; 144
    18ea:	23 2f       	mov	r18, r19
    18ec:	2f 77       	andi	r18, 0x7F	; 127
    18ee:	0f 77       	andi	r16, 0x7F	; 127
    18f0:	dc 01       	movw	r26, r24
    18f2:	ed 91       	ld	r30, X+
    18f4:	fc 91       	ld	r31, X
    18f6:	63 e0       	ldi	r22, 0x03	; 3
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    18fc:	0f 91       	pop	r16
    18fe:	08 95       	ret

00001900 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1900:	0f 93       	push	r16
    1902:	34 2f       	mov	r19, r20
    1904:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1906:	46 2f       	mov	r20, r22
    1908:	4f 70       	andi	r20, 0x0F	; 15
    190a:	40 68       	ori	r20, 0x80	; 128
    190c:	23 2f       	mov	r18, r19
    190e:	2f 77       	andi	r18, 0x7F	; 127
    1910:	0f 77       	andi	r16, 0x7F	; 127
    1912:	dc 01       	movw	r26, r24
    1914:	ed 91       	ld	r30, X+
    1916:	fc 91       	ld	r31, X
    1918:	63 e0       	ldi	r22, 0x03	; 3
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    191e:	0f 91       	pop	r16
    1920:	08 95       	ret

00001922 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1922:	0f 93       	push	r16
    1924:	34 2f       	mov	r19, r20
    1926:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    1928:	46 2f       	mov	r20, r22
    192a:	4f 70       	andi	r20, 0x0F	; 15
    192c:	40 6a       	ori	r20, 0xA0	; 160
    192e:	23 2f       	mov	r18, r19
    1930:	2f 77       	andi	r18, 0x7F	; 127
    1932:	0f 77       	andi	r16, 0x7F	; 127
    1934:	dc 01       	movw	r26, r24
    1936:	ed 91       	ld	r30, X+
    1938:	fc 91       	ld	r31, X
    193a:	63 e0       	ldi	r22, 0x03	; 3
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    1940:	0f 91       	pop	r16
    1942:	08 95       	ret

00001944 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1948:	20 e2       	ldi	r18, 0x20	; 32
    194a:	40 30       	cpi	r20, 0x00	; 0
    194c:	52 07       	cpc	r21, r18
    194e:	44 f4       	brge	.+16     	; 0x1960 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    1950:	a0 ee       	ldi	r26, 0xE0	; 224
    1952:	40 30       	cpi	r20, 0x00	; 0
    1954:	5a 07       	cpc	r21, r26
    1956:	3c f0       	brlt	.+14     	; 0x1966 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1958:	8a 01       	movw	r16, r20
    195a:	00 50       	subi	r16, 0x00	; 0
    195c:	10 4e       	sbci	r17, 0xE0	; 224
    195e:	05 c0       	rjmp	.+10     	; 0x196a <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1960:	0f ef       	ldi	r16, 0xFF	; 255
    1962:	1f e3       	ldi	r17, 0x3F	; 63
    1964:	02 c0       	rjmp	.+4      	; 0x196a <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    1966:	00 e0       	ldi	r16, 0x00	; 0
    1968:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    196a:	46 2f       	mov	r20, r22
    196c:	4f 70       	andi	r20, 0x0F	; 15
    196e:	40 6e       	ori	r20, 0xE0	; 224
    1970:	20 2f       	mov	r18, r16
    1972:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1974:	00 0f       	add	r16, r16
    1976:	01 2f       	mov	r16, r17
    1978:	00 1f       	adc	r16, r16
    197a:	11 0b       	sbc	r17, r17
    197c:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    197e:	0f 77       	andi	r16, 0x7F	; 127
    1980:	dc 01       	movw	r26, r24
    1982:	ed 91       	ld	r30, X+
    1984:	fc 91       	ld	r31, X
    1986:	63 e0       	ldi	r22, 0x03	; 3
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	08 95       	ret

00001992 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1992:	0f 93       	push	r16
    1994:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1996:	46 2f       	mov	r20, r22
    1998:	4f 70       	andi	r20, 0x0F	; 15
    199a:	40 6c       	ori	r20, 0xC0	; 192
    199c:	2f 77       	andi	r18, 0x7F	; 127
    199e:	dc 01       	movw	r26, r24
    19a0:	ed 91       	ld	r30, X+
    19a2:	fc 91       	ld	r31, X
    19a4:	62 e0       	ldi	r22, 0x02	; 2
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	00 e0       	ldi	r16, 0x00	; 0
    19aa:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    19ac:	0f 91       	pop	r16
    19ae:	08 95       	ret

000019b0 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    19b0:	0f 93       	push	r16
    19b2:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    19b4:	46 2f       	mov	r20, r22
    19b6:	4f 70       	andi	r20, 0x0F	; 15
    19b8:	40 6d       	ori	r20, 0xD0	; 208
    19ba:	2f 77       	andi	r18, 0x7F	; 127
    19bc:	dc 01       	movw	r26, r24
    19be:	ed 91       	ld	r30, X+
    19c0:	fc 91       	ld	r31, X
    19c2:	62 e0       	ldi	r22, 0x02	; 2
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	00 e0       	ldi	r16, 0x00	; 0
    19c8:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    19ca:	0f 91       	pop	r16
    19cc:	08 95       	ret

000019ce <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    19ce:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    19d0:	dc 01       	movw	r26, r24
    19d2:	ed 91       	ld	r30, X+
    19d4:	fc 91       	ld	r31, X
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	48 ef       	ldi	r20, 0xF8	; 248
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	00 e0       	ldi	r16, 0x00	; 0
    19e0:	09 95       	icall
}
    19e2:	0f 91       	pop	r16
    19e4:	08 95       	ret

000019e6 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    19e6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    19e8:	dc 01       	movw	r26, r24
    19ea:	ed 91       	ld	r30, X+
    19ec:	fc 91       	ld	r31, X
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	49 ef       	ldi	r20, 0xF9	; 249
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	00 e0       	ldi	r16, 0x00	; 0
    19f8:	09 95       	icall
}
    19fa:	0f 91       	pop	r16
    19fc:	08 95       	ret

000019fe <midi_send_start>:

void midi_send_start(MidiDevice * device){
    19fe:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1a00:	dc 01       	movw	r26, r24
    1a02:	ed 91       	ld	r30, X+
    1a04:	fc 91       	ld	r31, X
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	4a ef       	ldi	r20, 0xFA	; 250
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	00 e0       	ldi	r16, 0x00	; 0
    1a10:	09 95       	icall
}
    1a12:	0f 91       	pop	r16
    1a14:	08 95       	ret

00001a16 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1a16:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1a18:	dc 01       	movw	r26, r24
    1a1a:	ed 91       	ld	r30, X+
    1a1c:	fc 91       	ld	r31, X
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	4b ef       	ldi	r20, 0xFB	; 251
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	00 e0       	ldi	r16, 0x00	; 0
    1a28:	09 95       	icall
}
    1a2a:	0f 91       	pop	r16
    1a2c:	08 95       	ret

00001a2e <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1a2e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1a30:	dc 01       	movw	r26, r24
    1a32:	ed 91       	ld	r30, X+
    1a34:	fc 91       	ld	r31, X
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	4c ef       	ldi	r20, 0xFC	; 252
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	00 e0       	ldi	r16, 0x00	; 0
    1a40:	09 95       	icall
}
    1a42:	0f 91       	pop	r16
    1a44:	08 95       	ret

00001a46 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1a46:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1a48:	dc 01       	movw	r26, r24
    1a4a:	ed 91       	ld	r30, X+
    1a4c:	fc 91       	ld	r31, X
    1a4e:	61 e0       	ldi	r22, 0x01	; 1
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	4e ef       	ldi	r20, 0xFE	; 254
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	00 e0       	ldi	r16, 0x00	; 0
    1a58:	09 95       	icall
}
    1a5a:	0f 91       	pop	r16
    1a5c:	08 95       	ret

00001a5e <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1a5e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1a60:	dc 01       	movw	r26, r24
    1a62:	ed 91       	ld	r30, X+
    1a64:	fc 91       	ld	r31, X
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	4f ef       	ldi	r20, 0xFF	; 255
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	00 e0       	ldi	r16, 0x00	; 0
    1a70:	09 95       	icall
}
    1a72:	0f 91       	pop	r16
    1a74:	08 95       	ret

00001a76 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1a76:	0f 93       	push	r16
   device->send_func(device, 2,
    1a78:	26 2f       	mov	r18, r22
    1a7a:	2f 77       	andi	r18, 0x7F	; 127
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	ed 91       	ld	r30, X+
    1a80:	fc 91       	ld	r31, X
    1a82:	62 e0       	ldi	r22, 0x02	; 2
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	41 ef       	ldi	r20, 0xF1	; 241
    1a88:	00 e0       	ldi	r16, 0x00	; 0
    1a8a:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
   device->send_func(device, 3,
    1a94:	26 2f       	mov	r18, r22
    1a96:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1a98:	8b 01       	movw	r16, r22
    1a9a:	00 0f       	add	r16, r16
    1a9c:	01 2f       	mov	r16, r17
    1a9e:	00 1f       	adc	r16, r16
    1aa0:	11 0b       	sbc	r17, r17
    1aa2:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1aa4:	0f 77       	andi	r16, 0x7F	; 127
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	ed 91       	ld	r30, X+
    1aaa:	fc 91       	ld	r31, X
    1aac:	63 e0       	ldi	r22, 0x03	; 3
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	42 ef       	ldi	r20, 0xF2	; 242
    1ab2:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	08 95       	ret

00001aba <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1aba:	0f 93       	push	r16
   device->send_func(device, 2,
    1abc:	26 2f       	mov	r18, r22
    1abe:	2f 77       	andi	r18, 0x7F	; 127
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	ed 91       	ld	r30, X+
    1ac4:	fc 91       	ld	r31, X
    1ac6:	62 e0       	ldi	r22, 0x02	; 2
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	43 ef       	ldi	r20, 0xF3	; 243
    1acc:	00 e0       	ldi	r16, 0x00	; 0
    1ace:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1ad0:	0f 91       	pop	r16
    1ad2:	08 95       	ret

00001ad4 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1ad4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	ed 91       	ld	r30, X+
    1ada:	fc 91       	ld	r31, X
    1adc:	61 e0       	ldi	r22, 0x01	; 1
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	46 ef       	ldi	r20, 0xF6	; 246
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	00 e0       	ldi	r16, 0x00	; 0
    1ae6:	09 95       	icall
}
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret

00001aec <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1aec:	0f 93       	push	r16
    1aee:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1af0:	dc 01       	movw	r26, r24
    1af2:	ed 91       	ld	r30, X+
    1af4:	fc 91       	ld	r31, X
    1af6:	61 e0       	ldi	r22, 0x01	; 1
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	00 e0       	ldi	r16, 0x00	; 0
    1afe:	09 95       	icall
}
    1b00:	0f 91       	pop	r16
    1b02:	08 95       	ret

00001b04 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1b04:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1b06:	dc 01       	movw	r26, r24
    1b08:	ed 91       	ld	r30, X+
    1b0a:	fc 91       	ld	r31, X
    1b0c:	09 95       	icall
}
    1b0e:	0f 91       	pop	r16
    1b10:	08 95       	ret

00001b12 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1b12:	6f 92       	push	r6
    1b14:	7f 92       	push	r7
    1b16:	8f 92       	push	r8
    1b18:	9f 92       	push	r9
    1b1a:	af 92       	push	r10
    1b1c:	bf 92       	push	r11
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <midi_send_array+0x1e>
    1b30:	0f 92       	push	r0
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	4c 01       	movw	r8, r24
    1b38:	6b 01       	movw	r12, r22
    1b3a:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1b3c:	61 15       	cp	r22, r1
    1b3e:	71 05       	cpc	r23, r1
    1b40:	41 f1       	breq	.+80     	; 0x1b92 <midi_send_array+0x80>
    1b42:	ee 24       	eor	r14, r14
    1b44:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    1b46:	0f 2e       	mov	r0, r31
    1b48:	f3 e0       	ldi	r31, 0x03	; 3
    1b4a:	6f 2e       	mov	r6, r31
    1b4c:	77 24       	eor	r7, r7
    1b4e:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    1b50:	19 82       	std	Y+1, r1	; 0x01
    1b52:	1a 82       	std	Y+2, r1	; 0x02
    1b54:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    1b56:	86 01       	movw	r16, r12
    1b58:	0e 19       	sub	r16, r14
    1b5a:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    1b5c:	04 30       	cpi	r16, 0x04	; 4
    1b5e:	11 05       	cpc	r17, r1
    1b60:	08 f0       	brcs	.+2      	; 0x1b64 <midi_send_array+0x52>
    1b62:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1b64:	b5 01       	movw	r22, r10
    1b66:	6e 0d       	add	r22, r14
    1b68:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	40 2f       	mov	r20, r16
    1b70:	51 2f       	mov	r21, r17
    1b72:	0e 94 73 12 	call	0x24e6	; 0x24e6 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    1b76:	c4 01       	movw	r24, r8
    1b78:	b8 01       	movw	r22, r16
    1b7a:	49 81       	ldd	r20, Y+1	; 0x01
    1b7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b7e:	0b 81       	ldd	r16, Y+3	; 0x03
    1b80:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1b84:	83 e0       	ldi	r24, 0x03	; 3
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	e8 0e       	add	r14, r24
    1b8a:	f9 1e       	adc	r15, r25
    1b8c:	ec 14       	cp	r14, r12
    1b8e:	fd 04       	cpc	r15, r13
    1b90:	f8 f2       	brcs	.-66     	; 0x1b50 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	ff 90       	pop	r15
    1ba2:	ef 90       	pop	r14
    1ba4:	df 90       	pop	r13
    1ba6:	cf 90       	pop	r12
    1ba8:	bf 90       	pop	r11
    1baa:	af 90       	pop	r10
    1bac:	9f 90       	pop	r9
    1bae:	8f 90       	pop	r8
    1bb0:	7f 90       	pop	r7
    1bb2:	6f 90       	pop	r6
    1bb4:	08 95       	ret

00001bb6 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	73 83       	std	Z+3, r23	; 0x03
    1bba:	62 83       	std	Z+2, r22	; 0x02
}
    1bbc:	08 95       	ret

00001bbe <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	75 83       	std	Z+5, r23	; 0x05
    1bc2:	64 83       	std	Z+4, r22	; 0x04
}
    1bc4:	08 95       	ret

00001bc6 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	77 83       	std	Z+7, r23	; 0x07
    1bca:	66 83       	std	Z+6, r22	; 0x06
}
    1bcc:	08 95       	ret

00001bce <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1bce:	fc 01       	movw	r30, r24
    1bd0:	71 87       	std	Z+9, r23	; 0x09
    1bd2:	60 87       	std	Z+8, r22	; 0x08
}
    1bd4:	08 95       	ret

00001bd6 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	73 87       	std	Z+11, r23	; 0x0b
    1bda:	62 87       	std	Z+10, r22	; 0x0a
}
    1bdc:	08 95       	ret

00001bde <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1bde:	fc 01       	movw	r30, r24
    1be0:	75 87       	std	Z+13, r23	; 0x0d
    1be2:	64 87       	std	Z+12, r22	; 0x0c
}
    1be4:	08 95       	ret

00001be6 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1be6:	fc 01       	movw	r30, r24
    1be8:	77 87       	std	Z+15, r23	; 0x0f
    1bea:	66 87       	std	Z+14, r22	; 0x0e
}
    1bec:	08 95       	ret

00001bee <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1bee:	fc 01       	movw	r30, r24
    1bf0:	71 8b       	std	Z+17, r23	; 0x11
    1bf2:	60 8b       	std	Z+16, r22	; 0x10
}
    1bf4:	08 95       	ret

00001bf6 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	73 8b       	std	Z+19, r23	; 0x13
    1bfa:	62 8b       	std	Z+18, r22	; 0x12
}
    1bfc:	08 95       	ret

00001bfe <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1bfe:	fc 01       	movw	r30, r24
    1c00:	75 8b       	std	Z+21, r23	; 0x15
    1c02:	64 8b       	std	Z+20, r22	; 0x14
}
    1c04:	08 95       	ret

00001c06 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1c06:	fc 01       	movw	r30, r24
    1c08:	77 8b       	std	Z+23, r23	; 0x17
    1c0a:	66 8b       	std	Z+22, r22	; 0x16
}
    1c0c:	08 95       	ret

00001c0e <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1c0e:	fc 01       	movw	r30, r24
    1c10:	71 8f       	std	Z+25, r23	; 0x19
    1c12:	60 8f       	std	Z+24, r22	; 0x18
}
    1c14:	08 95       	ret

00001c16 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    1c16:	fc 01       	movw	r30, r24
    1c18:	73 8f       	std	Z+27, r23	; 0x1b
    1c1a:	62 8f       	std	Z+26, r22	; 0x1a
}
    1c1c:	08 95       	ret

00001c1e <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1c1e:	fc 01       	movw	r30, r24
    1c20:	75 8f       	std	Z+29, r23	; 0x1d
    1c22:	64 8f       	std	Z+28, r22	; 0x1c
}
    1c24:	08 95       	ret

00001c26 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1c26:	fc 01       	movw	r30, r24
    1c28:	77 8f       	std	Z+31, r23	; 0x1f
    1c2a:	66 8f       	std	Z+30, r22	; 0x1e
}
    1c2c:	08 95       	ret

00001c2e <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1c34:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    1c36:	1f a2       	lds	r17, 0x9f
    1c38:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	68 5d       	subi	r22, 0xD8	; 216
    1c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c40:	88 51       	subi	r24, 0x18	; 24
    1c42:	9f 4f       	sbci	r25, 0xFF	; 255
    1c44:	40 ec       	ldi	r20, 0xC0	; 192
    1c46:	0e 94 91 0b 	call	0x1722	; 0x1722 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1c4a:	1b 82       	std	Y+3, r1	; 0x03
    1c4c:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1c4e:	1d 82       	std	Y+5, r1	; 0x05
    1c50:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1c52:	1f 82       	std	Y+7, r1	; 0x07
    1c54:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1c56:	19 86       	std	Y+9, r1	; 0x09
    1c58:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1c5a:	1b 86       	std	Y+11, r1	; 0x0b
    1c5c:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1c5e:	1d 86       	std	Y+13, r1	; 0x0d
    1c60:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1c62:	1f 86       	std	Y+15, r1	; 0x0f
    1c64:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1c66:	19 8a       	std	Y+17, r1	; 0x11
    1c68:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1c6a:	1b 8a       	std	Y+19, r1	; 0x13
    1c6c:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1c6e:	1d 8a       	std	Y+21, r1	; 0x15
    1c70:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1c72:	1f 8a       	std	Y+23, r1	; 0x17
    1c74:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1c76:	19 8e       	std	Y+25, r1	; 0x19
    1c78:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1c7a:	1b 8e       	std	Y+27, r1	; 0x1b
    1c7c:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1c7e:	1d 8e       	std	Y+29, r1	; 0x1d
    1c80:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1c82:	1f 8e       	std	Y+31, r1	; 0x1f
    1c84:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1c86:	19 a2       	lds	r17, 0x99
    1c88:	18 a2       	lds	r17, 0x98
}
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	08 95       	ret

00001c90 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1c90:	ef 92       	push	r14
    1c92:	ff 92       	push	r15
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1c9e:	66 23       	and	r22, r22
    1ca0:	99 f0       	breq	.+38     	; 0x1cc8 <midi_device_input+0x38>
    1ca2:	04 2f       	mov	r16, r20
    1ca4:	15 2f       	mov	r17, r21
    1ca6:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    1ca8:	0f 2e       	mov	r0, r31
    1caa:	f8 ee       	ldi	r31, 0xE8	; 232
    1cac:	ef 2e       	mov	r14, r31
    1cae:	ff 24       	eor	r15, r15
    1cb0:	f0 2d       	mov	r31, r0
    1cb2:	e8 0e       	add	r14, r24
    1cb4:	f9 1e       	adc	r15, r25
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	61 91       	ld	r22, Z+
    1cba:	8f 01       	movw	r16, r30
    1cbc:	c7 01       	movw	r24, r14
    1cbe:	0e 94 98 0b 	call	0x1730	; 0x1730 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1cc2:	cf 5f       	subi	r28, 0xFF	; 255
    1cc4:	cd 17       	cp	r28, r29
    1cc6:	b9 f7       	brne	.-18     	; 0x1cb6 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	ff 90       	pop	r15
    1cd2:	ef 90       	pop	r14
    1cd4:	08 95       	ret

00001cd6 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	71 83       	std	Z+1, r23	; 0x01
    1cda:	60 83       	st	Z, r22
}
    1cdc:	08 95       	ret

00001cde <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    1cde:	fc 01       	movw	r30, r24
    1ce0:	71 a3       	lds	r23, 0x51
    1ce2:	60 a3       	lds	r22, 0x50
}
    1ce4:	08 95       	ret

00001ce6 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1ce6:	af 92       	push	r10
    1ce8:	bf 92       	push	r11
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <midi_input_callbacks+0x16>
    1cfc:	0f 92       	push	r0
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	6c 01       	movw	r12, r24
    1d04:	5b 01       	movw	r10, r22
    1d06:	f4 2e       	mov	r15, r20
    1d08:	e2 2e       	mov	r14, r18
    1d0a:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	95 96       	adiw	r26, 0x25	; 37
    1d10:	8c 91       	ld	r24, X
    1d12:	95 97       	sbiw	r26, 0x25	; 37
    1d14:	84 30       	cpi	r24, 0x04	; 4
    1d16:	e9 f4       	brne	.+58     	; 0x1d52 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    1d18:	5a 96       	adiw	r26, 0x1a	; 26
    1d1a:	ed 91       	ld	r30, X+
    1d1c:	fc 91       	ld	r31, X
    1d1e:	5b 97       	sbiw	r26, 0x1b	; 27
    1d20:	30 97       	sbiw	r30, 0x00	; 0
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <midi_input_callbacks+0x40>
    1d24:	ee c0       	rjmp	.+476    	; 0x1f02 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1d26:	cb 01       	movw	r24, r22
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	63 e0       	ldi	r22, 0x03	; 3
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
    1d32:	cb 01       	movw	r24, r22
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	68 0f       	add	r22, r24
    1d3a:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1d3c:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1d3e:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    1d40:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1d42:	4a 2d       	mov	r20, r10
    1d44:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1d46:	c6 01       	movw	r24, r12
    1d48:	9e 01       	movw	r18, r28
    1d4a:	2f 5f       	subi	r18, 0xFF	; 255
    1d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4e:	09 95       	icall
    1d50:	c8 c0       	rjmp	.+400    	; 0x1ee2 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    1d52:	62 30       	cpi	r22, 0x02	; 2
    1d54:	71 05       	cpc	r23, r1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <midi_input_callbacks+0x74>
    1d58:	5f c0       	rjmp	.+190    	; 0x1e18 <midi_input_callbacks+0x132>
    1d5a:	63 30       	cpi	r22, 0x03	; 3
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	29 f0       	breq	.+10     	; 0x1d6a <midi_input_callbacks+0x84>
    1d60:	61 30       	cpi	r22, 0x01	; 1
    1d62:	71 05       	cpc	r23, r1
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <midi_input_callbacks+0x82>
    1d66:	b3 c0       	rjmp	.+358    	; 0x1ece <midi_input_callbacks+0x1e8>
    1d68:	99 c0       	rjmp	.+306    	; 0x1e9c <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1d6a:	84 2f       	mov	r24, r20
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	80 7f       	andi	r24, 0xF0	; 240
    1d70:	90 70       	andi	r25, 0x00	; 0
    1d72:	80 3a       	cpi	r24, 0xA0	; 160
    1d74:	91 05       	cpc	r25, r1
    1d76:	29 f1       	breq	.+74     	; 0x1dc2 <midi_input_callbacks+0xdc>
    1d78:	81 3a       	cpi	r24, 0xA1	; 161
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	3c f4       	brge	.+14     	; 0x1d8c <midi_input_callbacks+0xa6>
    1d7e:	80 38       	cpi	r24, 0x80	; 128
    1d80:	91 05       	cpc	r25, r1
    1d82:	c9 f0       	breq	.+50     	; 0x1db6 <midi_input_callbacks+0xd0>
    1d84:	80 39       	cpi	r24, 0x90	; 144
    1d86:	91 05       	cpc	r25, r1
    1d88:	91 f5       	brne	.+100    	; 0x1dee <midi_input_callbacks+0x108>
    1d8a:	0f c0       	rjmp	.+30     	; 0x1daa <midi_input_callbacks+0xc4>
    1d8c:	80 3e       	cpi	r24, 0xE0	; 224
    1d8e:	91 05       	cpc	r25, r1
    1d90:	f1 f0       	breq	.+60     	; 0x1dce <midi_input_callbacks+0xe8>
    1d92:	80 3f       	cpi	r24, 0xF0	; 240
    1d94:	91 05       	cpc	r25, r1
    1d96:	09 f1       	breq	.+66     	; 0x1dda <midi_input_callbacks+0xf4>
    1d98:	80 3b       	cpi	r24, 0xB0	; 176
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	41 f5       	brne	.+80     	; 0x1dee <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    1d9e:	d6 01       	movw	r26, r12
    1da0:	12 96       	adiw	r26, 0x02	; 2
    1da2:	ed 91       	ld	r30, X+
    1da4:	fc 91       	ld	r31, X
    1da6:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1da8:	24 c0       	rjmp	.+72     	; 0x1df2 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1daa:	d6 01       	movw	r26, r12
    1dac:	14 96       	adiw	r26, 0x04	; 4
    1dae:	ed 91       	ld	r30, X+
    1db0:	fc 91       	ld	r31, X
    1db2:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1db4:	1e c0       	rjmp	.+60     	; 0x1df2 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1db6:	d6 01       	movw	r26, r12
    1db8:	16 96       	adiw	r26, 0x06	; 6
    1dba:	ed 91       	ld	r30, X+
    1dbc:	fc 91       	ld	r31, X
    1dbe:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1dc0:	18 c0       	rjmp	.+48     	; 0x1df2 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1dc2:	d6 01       	movw	r26, r12
    1dc4:	18 96       	adiw	r26, 0x08	; 8
    1dc6:	ed 91       	ld	r30, X+
    1dc8:	fc 91       	ld	r31, X
    1dca:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1dcc:	12 c0       	rjmp	.+36     	; 0x1df2 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1dce:	d6 01       	movw	r26, r12
    1dd0:	1a 96       	adiw	r26, 0x0a	; 10
    1dd2:	ed 91       	ld	r30, X+
    1dd4:	fc 91       	ld	r31, X
    1dd6:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1dd8:	0c c0       	rjmp	.+24     	; 0x1df2 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1dda:	b2 ef       	ldi	r27, 0xF2	; 242
    1ddc:	4b 17       	cp	r20, r27
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <midi_input_callbacks+0xfc>
    1de0:	90 c0       	rjmp	.+288    	; 0x1f02 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    1de2:	d6 01       	movw	r26, r12
    1de4:	1c 96       	adiw	r26, 0x0c	; 12
    1de6:	ed 91       	ld	r30, X+
    1de8:	fc 91       	ld	r31, X
    1dea:	1d 97       	sbiw	r26, 0x0d	; 13
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1dee:	e0 e0       	ldi	r30, 0x00	; 0
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1df2:	30 97       	sbiw	r30, 0x00	; 0
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <midi_input_callbacks+0x112>
    1df6:	85 c0       	rjmp	.+266    	; 0x1f02 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1df8:	b2 ef       	ldi	r27, 0xF2	; 242
    1dfa:	fb 16       	cp	r15, r27
    1dfc:	31 f4       	brne	.+12     	; 0x1e0a <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    1dfe:	c6 01       	movw	r24, r12
    1e00:	62 ef       	ldi	r22, 0xF2	; 242
    1e02:	4e 2d       	mov	r20, r14
    1e04:	21 2f       	mov	r18, r17
    1e06:	09 95       	icall
    1e08:	6c c0       	rjmp	.+216    	; 0x1ee2 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1e0a:	6f 2d       	mov	r22, r15
    1e0c:	6f 70       	andi	r22, 0x0F	; 15
    1e0e:	c6 01       	movw	r24, r12
    1e10:	4e 2d       	mov	r20, r14
    1e12:	21 2f       	mov	r18, r17
    1e14:	09 95       	icall
    1e16:	65 c0       	rjmp	.+202    	; 0x1ee2 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1e18:	84 2f       	mov	r24, r20
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	80 7f       	andi	r24, 0xF0	; 240
    1e1e:	90 70       	andi	r25, 0x00	; 0
    1e20:	80 3d       	cpi	r24, 0xD0	; 208
    1e22:	91 05       	cpc	r25, r1
    1e24:	61 f0       	breq	.+24     	; 0x1e3e <midi_input_callbacks+0x158>
    1e26:	80 3f       	cpi	r24, 0xF0	; 240
    1e28:	91 05       	cpc	r25, r1
    1e2a:	79 f0       	breq	.+30     	; 0x1e4a <midi_input_callbacks+0x164>
    1e2c:	80 3c       	cpi	r24, 0xC0	; 192
    1e2e:	91 05       	cpc	r25, r1
    1e30:	f9 f4       	brne	.+62     	; 0x1e70 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1e32:	d6 01       	movw	r26, r12
    1e34:	1e 96       	adiw	r26, 0x0e	; 14
    1e36:	ed 91       	ld	r30, X+
    1e38:	fc 91       	ld	r31, X
    1e3a:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1e3c:	1b c0       	rjmp	.+54     	; 0x1e74 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1e3e:	d6 01       	movw	r26, r12
    1e40:	50 96       	adiw	r26, 0x10	; 16
    1e42:	ed 91       	ld	r30, X+
    1e44:	fc 91       	ld	r31, X
    1e46:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1e48:	15 c0       	rjmp	.+42     	; 0x1e74 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1e4a:	b3 ef       	ldi	r27, 0xF3	; 243
    1e4c:	4b 17       	cp	r20, r27
    1e4e:	31 f4       	brne	.+12     	; 0x1e5c <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    1e50:	d6 01       	movw	r26, r12
    1e52:	52 96       	adiw	r26, 0x12	; 18
    1e54:	ed 91       	ld	r30, X+
    1e56:	fc 91       	ld	r31, X
    1e58:	53 97       	sbiw	r26, 0x13	; 19
    1e5a:	0c c0       	rjmp	.+24     	; 0x1e74 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1e5c:	b1 ef       	ldi	r27, 0xF1	; 241
    1e5e:	4b 17       	cp	r20, r27
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <midi_input_callbacks+0x17e>
    1e62:	4f c0       	rjmp	.+158    	; 0x1f02 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    1e64:	d6 01       	movw	r26, r12
    1e66:	54 96       	adiw	r26, 0x14	; 20
    1e68:	ed 91       	ld	r30, X+
    1e6a:	fc 91       	ld	r31, X
    1e6c:	55 97       	sbiw	r26, 0x15	; 21
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1e70:	e0 e0       	ldi	r30, 0x00	; 0
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1e74:	30 97       	sbiw	r30, 0x00	; 0
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <midi_input_callbacks+0x194>
    1e78:	44 c0       	rjmp	.+136    	; 0x1f02 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1e7a:	b3 ef       	ldi	r27, 0xF3	; 243
    1e7c:	fb 16       	cp	r15, r27
    1e7e:	19 f0       	breq	.+6      	; 0x1e86 <midi_input_callbacks+0x1a0>
    1e80:	81 ef       	ldi	r24, 0xF1	; 241
    1e82:	f8 16       	cp	r15, r24
    1e84:	29 f4       	brne	.+10     	; 0x1e90 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1e86:	c6 01       	movw	r24, r12
    1e88:	6f 2d       	mov	r22, r15
    1e8a:	4e 2d       	mov	r20, r14
    1e8c:	09 95       	icall
    1e8e:	29 c0       	rjmp	.+82     	; 0x1ee2 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    1e90:	6f 2d       	mov	r22, r15
    1e92:	6f 70       	andi	r22, 0x0F	; 15
    1e94:	c6 01       	movw	r24, r12
    1e96:	4e 2d       	mov	r20, r14
    1e98:	09 95       	icall
    1e9a:	23 c0       	rjmp	.+70     	; 0x1ee2 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1e9c:	84 2f       	mov	r24, r20
    1e9e:	0e 94 10 0c 	call	0x1820	; 0x1820 <midi_is_realtime>
    1ea2:	88 23       	and	r24, r24
    1ea4:	31 f0       	breq	.+12     	; 0x1eb2 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    1ea6:	d6 01       	movw	r26, r12
    1ea8:	56 96       	adiw	r26, 0x16	; 22
    1eaa:	ed 91       	ld	r30, X+
    1eac:	fc 91       	ld	r31, X
    1eae:	57 97       	sbiw	r26, 0x17	; 23
    1eb0:	08 c0       	rjmp	.+16     	; 0x1ec2 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    1eb2:	b6 ef       	ldi	r27, 0xF6	; 246
    1eb4:	fb 16       	cp	r15, r27
    1eb6:	29 f5       	brne	.+74     	; 0x1f02 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    1eb8:	d6 01       	movw	r26, r12
    1eba:	58 96       	adiw	r26, 0x18	; 24
    1ebc:	ed 91       	ld	r30, X+
    1ebe:	fc 91       	ld	r31, X
    1ec0:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1ec2:	30 97       	sbiw	r30, 0x00	; 0
    1ec4:	f1 f0       	breq	.+60     	; 0x1f02 <midi_input_callbacks+0x21c>
            func(device, byte0);
    1ec6:	c6 01       	movw	r24, r12
    1ec8:	6f 2d       	mov	r22, r15
    1eca:	09 95       	icall
    1ecc:	0a c0       	rjmp	.+20     	; 0x1ee2 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1ece:	64 30       	cpi	r22, 0x04	; 4
    1ed0:	71 05       	cpc	r23, r1
    1ed2:	a8 f4       	brcc	.+42     	; 0x1efe <midi_input_callbacks+0x218>
    1ed4:	16 c0       	rjmp	.+44     	; 0x1f02 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1ed6:	c6 01       	movw	r24, r12
    1ed8:	b5 01       	movw	r22, r10
    1eda:	4f 2d       	mov	r20, r15
    1edc:	2e 2d       	mov	r18, r14
    1ede:	01 2f       	mov	r16, r17
    1ee0:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1ee2:	d6 01       	movw	r26, r12
    1ee4:	5e 96       	adiw	r26, 0x1e	; 30
    1ee6:	ed 91       	ld	r30, X+
    1ee8:	fc 91       	ld	r31, X
    1eea:	5f 97       	sbiw	r26, 0x1f	; 31
    1eec:	30 97       	sbiw	r30, 0x00	; 0
    1eee:	89 f0       	breq	.+34     	; 0x1f12 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1ef0:	c6 01       	movw	r24, r12
    1ef2:	b5 01       	movw	r22, r10
    1ef4:	4f 2d       	mov	r20, r15
    1ef6:	2e 2d       	mov	r18, r14
    1ef8:	01 2f       	mov	r16, r17
    1efa:	09 95       	icall
    1efc:	0a c0       	rjmp	.+20     	; 0x1f12 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    1efe:	aa 24       	eor	r10, r10
    1f00:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1f02:	d6 01       	movw	r26, r12
    1f04:	5c 96       	adiw	r26, 0x1c	; 28
    1f06:	ed 91       	ld	r30, X+
    1f08:	fc 91       	ld	r31, X
    1f0a:	5d 97       	sbiw	r26, 0x1d	; 29
    1f0c:	30 97       	sbiw	r30, 0x00	; 0
    1f0e:	19 f7       	brne	.-58     	; 0x1ed6 <midi_input_callbacks+0x1f0>
    1f10:	e8 cf       	rjmp	.-48     	; 0x1ee2 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	ff 90       	pop	r15
    1f22:	ef 90       	pop	r14
    1f24:	df 90       	pop	r13
    1f26:	cf 90       	pop	r12
    1f28:	bf 90       	pop	r11
    1f2a:	af 90       	pop	r10
    1f2c:	08 95       	ret

00001f2e <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1f2e:	ef 92       	push	r14
    1f30:	ff 92       	push	r15
    1f32:	0f 93       	push	r16
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	7c 01       	movw	r14, r24
    1f3a:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    1f3c:	86 2f       	mov	r24, r22
    1f3e:	0e 94 10 0c 	call	0x1820	; 0x1820 <midi_is_realtime>
    1f42:	88 23       	and	r24, r24
    1f44:	91 f0       	breq	.+36     	; 0x1f6a <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1f46:	d7 01       	movw	r26, r14
    1f48:	95 96       	adiw	r26, 0x25	; 37
    1f4a:	dc 91       	ld	r29, X
    1f4c:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	95 96       	adiw	r26, 0x25	; 37
    1f52:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    1f54:	c7 01       	movw	r24, r14
    1f56:	61 e0       	ldi	r22, 0x01	; 1
    1f58:	70 e0       	ldi	r23, 0x00	; 0
    1f5a:	4c 2f       	mov	r20, r28
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	00 e0       	ldi	r16, 0x00	; 0
    1f60:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <midi_input_callbacks>
    device->input_state = state;
    1f64:	f7 01       	movw	r30, r14
    1f66:	d5 a3       	lds	r29, 0x55
    1f68:	b7 c0       	rjmp	.+366    	; 0x20d8 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    1f6a:	8c 2f       	mov	r24, r28
    1f6c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <midi_is_statusbyte>
    1f70:	88 23       	and	r24, r24
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <midi_process_byte+0x48>
    1f74:	73 c0       	rjmp	.+230    	; 0x205c <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1f76:	d7 01       	movw	r26, r14
    1f78:	95 96       	adiw	r26, 0x25	; 37
    1f7a:	8c 91       	ld	r24, X
    1f7c:	95 97       	sbiw	r26, 0x25	; 37
    1f7e:	84 30       	cpi	r24, 0x04	; 4
    1f80:	49 f0       	breq	.+18     	; 0x1f94 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    1f82:	92 96       	adiw	r26, 0x22	; 34
    1f84:	cc 93       	st	X, r28
    1f86:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	97 96       	adiw	r26, 0x27	; 39
    1f8e:	9c 93       	st	X, r25
    1f90:	8e 93       	st	-X, r24
    1f92:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    1f94:	8c 2f       	mov	r24, r28
    1f96:	0e 94 16 0c 	call	0x182c	; 0x182c <midi_packet_length>
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	41 f0       	breq	.+16     	; 0x1fae <midi_process_byte+0x80>
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	00 f1       	brcs	.+64     	; 0x1fe2 <midi_process_byte+0xb4>
    1fa2:	82 30       	cpi	r24, 0x02	; 2
    1fa4:	a1 f0       	breq	.+40     	; 0x1fce <midi_process_byte+0xa0>
    1fa6:	83 30       	cpi	r24, 0x03	; 3
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <midi_process_byte+0x7e>
    1faa:	4f c0       	rjmp	.+158    	; 0x204a <midi_process_byte+0x11c>
    1fac:	14 c0       	rjmp	.+40     	; 0x1fd6 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	f7 01       	movw	r30, r14
    1fb2:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    1fb4:	c7 01       	movw	r24, r14
    1fb6:	61 e0       	ldi	r22, 0x01	; 1
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	4c 2f       	mov	r20, r28
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	00 e0       	ldi	r16, 0x00	; 0
    1fc0:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <midi_input_callbacks>
        device->input_state = IDLE;
    1fc4:	d7 01       	movw	r26, r14
    1fc6:	95 96       	adiw	r26, 0x25	; 37
    1fc8:	1c 92       	st	X, r1
    1fca:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1fcc:	85 c0       	rjmp	.+266    	; 0x20d8 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	f7 01       	movw	r30, r14
    1fd2:	85 a3       	lds	r24, 0x55
        break;
    1fd4:	81 c0       	rjmp	.+258    	; 0x20d8 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	d7 01       	movw	r26, r14
    1fda:	95 96       	adiw	r26, 0x25	; 37
    1fdc:	8c 93       	st	X, r24
    1fde:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1fe0:	7b c0       	rjmp	.+246    	; 0x20d8 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    1fe2:	c0 3f       	cpi	r28, 0xF0	; 240
    1fe4:	19 f0       	breq	.+6      	; 0x1fec <midi_process_byte+0xbe>
    1fe6:	c7 3f       	cpi	r28, 0xF7	; 247
    1fe8:	59 f5       	brne	.+86     	; 0x2040 <midi_process_byte+0x112>
    1fea:	0a c0       	rjmp	.+20     	; 0x2000 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1fec:	84 e0       	ldi	r24, 0x04	; 4
    1fee:	f7 01       	movw	r30, r14
    1ff0:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    1ff2:	80 ef       	ldi	r24, 0xF0	; 240
    1ff4:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	97 a3       	lds	r25, 0x57
    1ffc:	86 a3       	lds	r24, 0x56
            break;
    1ffe:	6c c0       	rjmp	.+216    	; 0x20d8 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    2000:	d7 01       	movw	r26, r14
    2002:	96 96       	adiw	r26, 0x26	; 38
    2004:	2d 91       	ld	r18, X+
    2006:	3c 91       	ld	r19, X
    2008:	97 97       	sbiw	r26, 0x27	; 39
    200a:	c9 01       	movw	r24, r18
    200c:	63 e0       	ldi	r22, 0x03	; 3
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
    2014:	f7 01       	movw	r30, r14
    2016:	e8 0f       	add	r30, r24
    2018:	f9 1f       	adc	r31, r25
    201a:	87 ef       	ldi	r24, 0xF7	; 247
    201c:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    201e:	b9 01       	movw	r22, r18
    2020:	6f 5f       	subi	r22, 0xFF	; 255
    2022:	7f 4f       	sbci	r23, 0xFF	; 255
    2024:	f7 01       	movw	r30, r14
    2026:	77 a3       	lds	r23, 0x57
    2028:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    202a:	c7 01       	movw	r24, r14
    202c:	42 a1       	lds	r20, 0x42
    202e:	23 a1       	lds	r18, 0x43
    2030:	04 a1       	lds	r16, 0x44
    2032:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    2036:	d7 01       	movw	r26, r14
    2038:	95 96       	adiw	r26, 0x25	; 37
    203a:	1c 92       	st	X, r1
    203c:	95 97       	sbiw	r26, 0x25	; 37
            break;
    203e:	4c c0       	rjmp	.+152    	; 0x20d8 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    2040:	f7 01       	movw	r30, r14
    2042:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    2044:	17 a2       	lds	r17, 0x97
    2046:	16 a2       	lds	r17, 0x96
    2048:	47 c0       	rjmp	.+142    	; 0x20d8 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    204a:	d7 01       	movw	r26, r14
    204c:	95 96       	adiw	r26, 0x25	; 37
    204e:	1c 92       	st	X, r1
    2050:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    2052:	97 96       	adiw	r26, 0x27	; 39
    2054:	1c 92       	st	X, r1
    2056:	1e 92       	st	-X, r1
    2058:	96 97       	sbiw	r26, 0x26	; 38
        break;
    205a:	3e c0       	rjmp	.+124    	; 0x20d8 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    205c:	f7 01       	movw	r30, r14
    205e:	25 a1       	lds	r18, 0x45
    2060:	22 23       	and	r18, r18
    2062:	d1 f1       	breq	.+116    	; 0x20d8 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    2064:	06 a0       	lds	r16, 0x86
    2066:	f7 a1       	lds	r31, 0x47
    2068:	e0 2d       	mov	r30, r0
    206a:	cf 01       	movw	r24, r30
    206c:	63 e0       	ldi	r22, 0x03	; 3
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
    2074:	ac 01       	movw	r20, r24
    2076:	8e 0d       	add	r24, r14
    2078:	9f 1d       	adc	r25, r15
    207a:	dc 01       	movw	r26, r24
    207c:	92 96       	adiw	r26, 0x22	; 34
    207e:	cc 93       	st	X, r28
    2080:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    2082:	bf 01       	movw	r22, r30
    2084:	6f 5f       	subi	r22, 0xFF	; 255
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	f7 01       	movw	r30, r14
    208a:	77 a3       	lds	r23, 0x57
    208c:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    208e:	41 30       	cpi	r20, 0x01	; 1
    2090:	51 05       	cpc	r21, r1
    2092:	91 f0       	breq	.+36     	; 0x20b8 <midi_process_byte+0x18a>
    2094:	42 30       	cpi	r20, 0x02	; 2
    2096:	51 05       	cpc	r21, r1
    2098:	f9 f4       	brne	.+62     	; 0x20d8 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    209a:	c7 01       	movw	r24, r14
    209c:	42 a1       	lds	r20, 0x42
    209e:	23 a1       	lds	r18, 0x43
    20a0:	04 a1       	lds	r16, 0x44
    20a2:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    20a6:	f7 01       	movw	r30, r14
    20a8:	85 a1       	lds	r24, 0x45
    20aa:	84 30       	cpi	r24, 0x04	; 4
    20ac:	a9 f0       	breq	.+42     	; 0x20d8 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	97 a3       	lds	r25, 0x57
    20b4:	86 a3       	lds	r24, 0x56
    20b6:	10 c0       	rjmp	.+32     	; 0x20d8 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	71 f4       	brne	.+28     	; 0x20d8 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    20bc:	c7 01       	movw	r24, r14
    20be:	42 a1       	lds	r20, 0x42
    20c0:	23 a1       	lds	r18, 0x43
    20c2:	00 e0       	ldi	r16, 0x00	; 0
    20c4:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    20c8:	f7 01       	movw	r30, r14
    20ca:	85 a1       	lds	r24, 0x45
    20cc:	84 30       	cpi	r24, 0x04	; 4
    20ce:	21 f0       	breq	.+8      	; 0x20d8 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	97 a3       	lds	r25, 0x57
    20d6:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	08 95       	ret

000020e4 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    20e4:	cf 92       	push	r12
    20e6:	df 92       	push	r13
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    20f6:	dc 01       	movw	r26, r24
    20f8:	90 96       	adiw	r26, 0x20	; 32
    20fa:	ed 91       	ld	r30, X+
    20fc:	fc 91       	ld	r31, X
    20fe:	91 97       	sbiw	r26, 0x21	; 33
    2100:	30 97       	sbiw	r30, 0x00	; 0
    2102:	09 f0       	breq	.+2      	; 0x2106 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    2104:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    2106:	0f 2e       	mov	r0, r31
    2108:	f8 ee       	ldi	r31, 0xE8	; 232
    210a:	ef 2e       	mov	r14, r31
    210c:	ff 24       	eor	r15, r15
    210e:	f0 2d       	mov	r31, r0
    2110:	ec 0c       	add	r14, r12
    2112:	fd 1c       	adc	r15, r13
    2114:	c7 01       	movw	r24, r14
    2116:	0e 94 c7 0b 	call	0x178e	; 0x178e <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    211a:	c8 2f       	mov	r28, r24
    211c:	d0 e0       	ldi	r29, 0x00	; 0
    211e:	20 97       	sbiw	r28, 0x00	; 0
    2120:	99 f0       	breq	.+38     	; 0x2148 <midi_device_process+0x64>
    2122:	00 e0       	ldi	r16, 0x00	; 0
    2124:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    2126:	c7 01       	movw	r24, r14
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <bytequeue_get>
    212e:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    2130:	c6 01       	movw	r24, r12
    2132:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    2136:	c7 01       	movw	r24, r14
    2138:	61 e0       	ldi	r22, 0x01	; 1
    213a:	0e 94 ed 0b 	call	0x17da	; 0x17da <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    213e:	0f 5f       	subi	r16, 0xFF	; 255
    2140:	1f 4f       	sbci	r17, 0xFF	; 255
    2142:	0c 17       	cp	r16, r28
    2144:	1d 07       	cpc	r17, r29
    2146:	78 f3       	brcs	.-34     	; 0x2126 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	ff 90       	pop	r15
    2152:	ef 90       	pop	r14
    2154:	df 90       	pop	r13
    2156:	cf 90       	pop	r12
    2158:	08 95       	ret

0000215a <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    215a:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    215c:	67 e0       	ldi	r22, 0x07	; 7
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
    2164:	48 2f       	mov	r20, r24
   if (remainder)
    2166:	88 23       	and	r24, r24
    2168:	81 f0       	breq	.+32     	; 0x218a <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    216a:	c9 01       	movw	r24, r18
    216c:	67 e0       	ldi	r22, 0x07	; 7
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
    2174:	cb 01       	movw	r24, r22
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	84 0f       	add	r24, r20
    2186:	91 1d       	adc	r25, r1
    2188:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    218a:	c9 01       	movw	r24, r18
    218c:	67 e0       	ldi	r22, 0x07	; 7
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
    2194:	cb 01       	movw	r24, r22
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
}
    21a2:	08 95       	ret

000021a4 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    21a4:	48 2f       	mov	r20, r24
    21a6:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    21a8:	a1 f0       	breq	.+40     	; 0x21d2 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    21aa:	9c 01       	movw	r18, r24
    21ac:	36 95       	lsr	r19
    21ae:	27 95       	ror	r18
    21b0:	36 95       	lsr	r19
    21b2:	27 95       	ror	r18
    21b4:	36 95       	lsr	r19
    21b6:	27 95       	ror	r18
    21b8:	c9 01       	movw	r24, r18
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	82 1b       	sub	r24, r18
    21c8:	93 0b       	sbc	r25, r19
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	84 0f       	add	r24, r20
    21ce:	91 1d       	adc	r25, r1
    21d0:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    21d2:	9c 01       	movw	r18, r24
    21d4:	36 95       	lsr	r19
    21d6:	27 95       	ror	r18
    21d8:	36 95       	lsr	r19
    21da:	27 95       	ror	r18
    21dc:	36 95       	lsr	r19
    21de:	27 95       	ror	r18
    21e0:	c9 01       	movw	r24, r18
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	82 1b       	sub	r24, r18
    21f0:	93 0b       	sbc	r25, r19
}
    21f2:	08 95       	ret

000021f4 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    21f4:	2f 92       	push	r2
    21f6:	3f 92       	push	r3
    21f8:	4f 92       	push	r4
    21fa:	5f 92       	push	r5
    21fc:	6f 92       	push	r6
    21fe:	7f 92       	push	r7
    2200:	8f 92       	push	r8
    2202:	9f 92       	push	r9
    2204:	af 92       	push	r10
    2206:	bf 92       	push	r11
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	00 d0       	rcall	.+0      	; 0x221a <sysex_encode+0x26>
    221a:	00 d0       	rcall	.+0      	; 0x221c <sysex_encode+0x28>
    221c:	00 d0       	rcall	.+0      	; 0x221e <sysex_encode+0x2a>
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	1c 01       	movw	r2, r24
    2224:	7a 83       	std	Y+2, r23	; 0x02
    2226:	69 83       	std	Y+1, r22	; 0x01
    2228:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    222a:	ca 01       	movw	r24, r20
    222c:	67 e0       	ldi	r22, 0x07	; 7
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
    2234:	2b 01       	movw	r4, r22
    2236:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2238:	61 15       	cp	r22, r1
    223a:	71 05       	cpc	r23, r1
    223c:	b1 f1       	breq	.+108    	; 0x22aa <sysex_encode+0xb6>
    223e:	81 01       	movw	r16, r2
    2240:	e9 80       	ldd	r14, Y+1	; 0x01
    2242:	fa 80       	ldd	r15, Y+2	; 0x02
    2244:	cc 24       	eor	r12, r12
    2246:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2248:	88 24       	eor	r8, r8
    224a:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    224c:	1e 83       	std	Y+6, r17	; 0x06
    224e:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    2250:	f8 01       	movw	r30, r16
    2252:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2254:	fc 82       	std	Y+4, r15	; 0x04
    2256:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2258:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    225a:	ab 81       	ldd	r26, Y+3	; 0x03
    225c:	bc 81       	ldd	r27, Y+4	; 0x04
    225e:	2d 91       	ld	r18, X+
    2260:	bc 83       	std	Y+4, r27	; 0x04
    2262:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    2264:	4f 5f       	subi	r20, 0xFF	; 255
    2266:	5f 4f       	sbci	r21, 0xFF	; 255
    2268:	82 2f       	mov	r24, r18
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	80 78       	andi	r24, 0x80	; 128
    226e:	90 70       	andi	r25, 0x00	; 0
    2270:	bc 01       	movw	r22, r24
    2272:	04 2e       	mov	r0, r20
    2274:	02 c0       	rjmp	.+4      	; 0x227a <sysex_encode+0x86>
    2276:	75 95       	asr	r23
    2278:	67 95       	ror	r22
    227a:	0a 94       	dec	r0
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <sysex_encode+0x82>
    227e:	ad 81       	ldd	r26, Y+5	; 0x05
    2280:	be 81       	ldd	r27, Y+6	; 0x06
    2282:	8c 91       	ld	r24, X
    2284:	86 2b       	or	r24, r22
    2286:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    2288:	2f 77       	andi	r18, 0x7F	; 127
    228a:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    228c:	47 30       	cpi	r20, 0x07	; 7
    228e:	51 05       	cpc	r21, r1
    2290:	21 f7       	brne	.-56     	; 0x225a <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2292:	08 94       	sec
    2294:	c1 1c       	adc	r12, r1
    2296:	d1 1c       	adc	r13, r1
    2298:	08 5f       	subi	r16, 0xF8	; 248
    229a:	1f 4f       	sbci	r17, 0xFF	; 255
    229c:	e7 e0       	ldi	r30, 0x07	; 7
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	ee 0e       	add	r14, r30
    22a2:	ff 1e       	adc	r15, r31
    22a4:	ca 14       	cp	r12, r10
    22a6:	db 04       	cpc	r13, r11
    22a8:	89 f6       	brne	.-94     	; 0x224c <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    22aa:	c3 01       	movw	r24, r6
    22ac:	67 e0       	ldi	r22, 0x07	; 7
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
   if (remainder) {
    22b4:	88 23       	and	r24, r24
    22b6:	d9 f1       	breq	.+118    	; 0x232e <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    22b8:	82 01       	movw	r16, r4
    22ba:	00 0f       	add	r16, r16
    22bc:	11 1f       	adc	r17, r17
    22be:	00 0f       	add	r16, r16
    22c0:	11 1f       	adc	r17, r17
    22c2:	00 0f       	add	r16, r16
    22c4:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    22c6:	78 01       	movw	r14, r16
    22c8:	e4 18       	sub	r14, r4
    22ca:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    22cc:	d1 01       	movw	r26, r2
    22ce:	a0 0f       	add	r26, r16
    22d0:	b1 1f       	adc	r27, r17
    22d2:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    22d4:	68 2f       	mov	r22, r24
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	61 15       	cp	r22, r1
    22da:	71 05       	cpc	r23, r1
    22dc:	19 f1       	breq	.+70     	; 0x2324 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    22de:	e9 81       	ldd	r30, Y+1	; 0x01
    22e0:	fa 81       	ldd	r31, Y+2	; 0x02
    22e2:	ee 0e       	add	r14, r30
    22e4:	ff 1e       	adc	r15, r31
    22e6:	c8 01       	movw	r24, r16
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	28 0e       	add	r2, r24
    22ec:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    22f2:	f7 01       	movw	r30, r14
    22f4:	41 91       	ld	r20, Z+
    22f6:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    22f8:	2f 5f       	subi	r18, 0xFF	; 255
    22fa:	3f 4f       	sbci	r19, 0xFF	; 255
    22fc:	84 2f       	mov	r24, r20
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	80 78       	andi	r24, 0x80	; 128
    2302:	90 70       	andi	r25, 0x00	; 0
    2304:	02 2e       	mov	r0, r18
    2306:	02 c0       	rjmp	.+4      	; 0x230c <sysex_encode+0x118>
    2308:	95 95       	asr	r25
    230a:	87 95       	ror	r24
    230c:	0a 94       	dec	r0
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <sysex_encode+0x114>
    2310:	9c 91       	ld	r25, X
    2312:	89 2b       	or	r24, r25
    2314:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    2316:	4f 77       	andi	r20, 0x7F	; 127
    2318:	f1 01       	movw	r30, r2
    231a:	41 93       	st	Z+, r20
    231c:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    231e:	26 17       	cp	r18, r22
    2320:	37 07       	cpc	r19, r23
    2322:	38 f3       	brcs	.-50     	; 0x22f2 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    2324:	c8 01       	movw	r24, r16
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	86 0f       	add	r24, r22
    232a:	97 1f       	adc	r25, r23
    232c:	07 c0       	rjmp	.+14     	; 0x233c <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    232e:	c2 01       	movw	r24, r4
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
   }
}
    233c:	26 96       	adiw	r28, 0x06	; 6
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	ff 90       	pop	r15
    2352:	ef 90       	pop	r14
    2354:	df 90       	pop	r13
    2356:	cf 90       	pop	r12
    2358:	bf 90       	pop	r11
    235a:	af 90       	pop	r10
    235c:	9f 90       	pop	r9
    235e:	8f 90       	pop	r8
    2360:	7f 90       	pop	r7
    2362:	6f 90       	pop	r6
    2364:	5f 90       	pop	r5
    2366:	4f 90       	pop	r4
    2368:	3f 90       	pop	r3
    236a:	2f 90       	pop	r2
    236c:	08 95       	ret

0000236e <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    236e:	6f 92       	push	r6
    2370:	7f 92       	push	r7
    2372:	8f 92       	push	r8
    2374:	9f 92       	push	r9
    2376:	af 92       	push	r10
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	3c 01       	movw	r6, r24
    238c:	4b 01       	movw	r8, r22
    238e:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    2390:	42 30       	cpi	r20, 0x02	; 2
    2392:	51 05       	cpc	r21, r1
    2394:	08 f4       	brcc	.+2      	; 0x2398 <sysex_decode+0x2a>
    2396:	6f c0       	rjmp	.+222    	; 0x2476 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    2398:	7a 01       	movw	r14, r20
    239a:	f6 94       	lsr	r15
    239c:	e7 94       	ror	r14
    239e:	f6 94       	lsr	r15
    23a0:	e7 94       	ror	r14
    23a2:	f6 94       	lsr	r15
    23a4:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    23a6:	e1 14       	cp	r14, r1
    23a8:	f1 04       	cpc	r15, r1
    23aa:	29 f1       	breq	.+74     	; 0x23f6 <sysex_decode+0x88>
    23ac:	eb 01       	movw	r28, r22
    23ae:	b3 01       	movw	r22, r6
    23b0:	00 e0       	ldi	r16, 0x00	; 0
    23b2:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    23b4:	cc 24       	eor	r12, r12
    23b6:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    23b8:	de 01       	movw	r26, r28
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    23be:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    23c0:	2d 91       	ld	r18, X+
    23c2:	2f 77       	andi	r18, 0x7F	; 127
    23c4:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    23c6:	4f 5f       	subi	r20, 0xFF	; 255
    23c8:	5f 4f       	sbci	r21, 0xFF	; 255
    23ca:	88 81       	ld	r24, Y
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	04 2e       	mov	r0, r20
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <sysex_decode+0x68>
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	0a 94       	dec	r0
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <sysex_decode+0x64>
    23da:	80 78       	andi	r24, 0x80	; 128
    23dc:	28 2b       	or	r18, r24
    23de:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    23e0:	47 30       	cpi	r20, 0x07	; 7
    23e2:	51 05       	cpc	r21, r1
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    23e6:	0f 5f       	subi	r16, 0xFF	; 255
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ea:	28 96       	adiw	r28, 0x08	; 8
    23ec:	69 5f       	subi	r22, 0xF9	; 249
    23ee:	7f 4f       	sbci	r23, 0xFF	; 255
    23f0:	0e 15       	cp	r16, r14
    23f2:	1f 05       	cpc	r17, r15
    23f4:	09 f7       	brne	.-62     	; 0x23b8 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    23f6:	5a 2d       	mov	r21, r10
    23f8:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    23fa:	99 f1       	breq	.+102    	; 0x2462 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    23fc:	e7 01       	movw	r28, r14
    23fe:	cc 0f       	add	r28, r28
    2400:	dd 1f       	adc	r29, r29
    2402:	cc 0f       	add	r28, r28
    2404:	dd 1f       	adc	r29, r29
    2406:	cc 0f       	add	r28, r28
    2408:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    240a:	8e 01       	movw	r16, r28
    240c:	0e 19       	sub	r16, r14
    240e:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    2410:	65 2f       	mov	r22, r21
    2412:	70 e0       	ldi	r23, 0x00	; 0
    2414:	61 50       	subi	r22, 0x01	; 1
    2416:	70 40       	sbci	r23, 0x00	; 0
    2418:	f9 f0       	breq	.+62     	; 0x2458 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    241a:	ce 01       	movw	r24, r28
    241c:	01 96       	adiw	r24, 0x01	; 1
    241e:	d4 01       	movw	r26, r8
    2420:	a8 0f       	add	r26, r24
    2422:	b9 1f       	adc	r27, r25
    2424:	f3 01       	movw	r30, r6
    2426:	e0 0f       	add	r30, r16
    2428:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    242e:	c8 0d       	add	r28, r8
    2430:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    2432:	4d 91       	ld	r20, X+
    2434:	4f 77       	andi	r20, 0x7F	; 127
    2436:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2438:	2f 5f       	subi	r18, 0xFF	; 255
    243a:	3f 4f       	sbci	r19, 0xFF	; 255
    243c:	88 81       	ld	r24, Y
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	02 2e       	mov	r0, r18
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <sysex_decode+0xda>
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	0a 94       	dec	r0
    244a:	e2 f7       	brpl	.-8      	; 0x2444 <sysex_decode+0xd6>
    244c:	80 78       	andi	r24, 0x80	; 128
    244e:	48 2b       	or	r20, r24
    2450:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2452:	26 17       	cp	r18, r22
    2454:	37 07       	cpc	r19, r23
    2456:	68 f3       	brcs	.-38     	; 0x2432 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    2458:	c8 01       	movw	r24, r16
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	85 0f       	add	r24, r21
    245e:	91 1d       	adc	r25, r1
    2460:	0c c0       	rjmp	.+24     	; 0x247a <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    2462:	c7 01       	movw	r24, r14
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	8e 19       	sub	r24, r14
    2472:	9f 09       	sbc	r25, r15
    2474:	02 c0       	rjmp	.+4      	; 0x247a <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
    2482:	ff 90       	pop	r15
    2484:	ef 90       	pop	r14
    2486:	df 90       	pop	r13
    2488:	cf 90       	pop	r12
    248a:	bf 90       	pop	r11
    248c:	af 90       	pop	r10
    248e:	9f 90       	pop	r9
    2490:	8f 90       	pop	r8
    2492:	7f 90       	pop	r7
    2494:	6f 90       	pop	r6
    2496:	08 95       	ret

00002498 <__udivmodhi4>:
    2498:	aa 1b       	sub	r26, r26
    249a:	bb 1b       	sub	r27, r27
    249c:	51 e1       	ldi	r21, 0x11	; 17
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <__udivmodhi4_ep>

000024a0 <__udivmodhi4_loop>:
    24a0:	aa 1f       	adc	r26, r26
    24a2:	bb 1f       	adc	r27, r27
    24a4:	a6 17       	cp	r26, r22
    24a6:	b7 07       	cpc	r27, r23
    24a8:	10 f0       	brcs	.+4      	; 0x24ae <__udivmodhi4_ep>
    24aa:	a6 1b       	sub	r26, r22
    24ac:	b7 0b       	sbc	r27, r23

000024ae <__udivmodhi4_ep>:
    24ae:	88 1f       	adc	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	5a 95       	dec	r21
    24b4:	a9 f7       	brne	.-22     	; 0x24a0 <__udivmodhi4_loop>
    24b6:	80 95       	com	r24
    24b8:	90 95       	com	r25
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	08 95       	ret

000024c0 <__divmodhi4>:
    24c0:	97 fb       	bst	r25, 7
    24c2:	09 2e       	mov	r0, r25
    24c4:	07 26       	eor	r0, r23
    24c6:	0a d0       	rcall	.+20     	; 0x24dc <__divmodhi4_neg1>
    24c8:	77 fd       	sbrc	r23, 7
    24ca:	04 d0       	rcall	.+8      	; 0x24d4 <__divmodhi4_neg2>
    24cc:	e5 df       	rcall	.-54     	; 0x2498 <__udivmodhi4>
    24ce:	06 d0       	rcall	.+12     	; 0x24dc <__divmodhi4_neg1>
    24d0:	00 20       	and	r0, r0
    24d2:	1a f4       	brpl	.+6      	; 0x24da <__divmodhi4_exit>

000024d4 <__divmodhi4_neg2>:
    24d4:	70 95       	com	r23
    24d6:	61 95       	neg	r22
    24d8:	7f 4f       	sbci	r23, 0xFF	; 255

000024da <__divmodhi4_exit>:
    24da:	08 95       	ret

000024dc <__divmodhi4_neg1>:
    24dc:	f6 f7       	brtc	.-4      	; 0x24da <__divmodhi4_exit>
    24de:	90 95       	com	r25
    24e0:	81 95       	neg	r24
    24e2:	9f 4f       	sbci	r25, 0xFF	; 255
    24e4:	08 95       	ret

000024e6 <memcpy>:
    24e6:	fb 01       	movw	r30, r22
    24e8:	dc 01       	movw	r26, r24
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <memcpy+0xa>
    24ec:	01 90       	ld	r0, Z+
    24ee:	0d 92       	st	X+, r0
    24f0:	41 50       	subi	r20, 0x01	; 1
    24f2:	50 40       	sbci	r21, 0x00	; 0
    24f4:	d8 f7       	brcc	.-10     	; 0x24ec <memcpy+0x6>
    24f6:	08 95       	ret

000024f8 <memmove>:
    24f8:	68 17       	cp	r22, r24
    24fa:	79 07       	cpc	r23, r25
    24fc:	68 f4       	brcc	.+26     	; 0x2518 <memmove+0x20>
    24fe:	fb 01       	movw	r30, r22
    2500:	dc 01       	movw	r26, r24
    2502:	e4 0f       	add	r30, r20
    2504:	f5 1f       	adc	r31, r21
    2506:	a4 0f       	add	r26, r20
    2508:	b5 1f       	adc	r27, r21
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <memmove+0x18>
    250c:	02 90       	ld	r0, -Z
    250e:	0e 92       	st	-X, r0
    2510:	41 50       	subi	r20, 0x01	; 1
    2512:	50 40       	sbci	r21, 0x00	; 0
    2514:	d8 f7       	brcc	.-10     	; 0x250c <memmove+0x14>
    2516:	08 95       	ret
    2518:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <memcpy>

0000251c <_exit>:
    251c:	f8 94       	cli

0000251e <__stop_program>:
    251e:	ff cf       	rjmp	.-2      	; 0x251e <__stop_program>
