
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00001e8c  00001f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000313  008001b0  008001b0  00001fd0  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00002808  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003aca  00000000  00000000  00002a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e44  00000000  00000000  00006512  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016ac  00000000  00000000  00007356  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c8  00000000  00000000  00008a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010d4  00000000  00000000  000093cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002095  00000000  00000000  0000a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000c535  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_9>
      28:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ec e8       	ldi	r30, 0x8C	; 140
      78:	fe e1       	ldi	r31, 0x1E	; 30
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a3 3c       	cpi	r26, 0xC3	; 195
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 15 02 	call	0x42a	; 0x42a <main>
      9a:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     120:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     122:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     124:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     126:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     128:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     12a:	8c 91       	ld	r24, X
     12c:	82 b9       	out	0x02, r24	; 2
     12e:	8d e0       	ldi	r24, 0x0D	; 13
     130:	8a 95       	dec	r24
     132:	f1 f7       	brne	.-4      	; 0x130 <set_control_voltage+0x10>
     134:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     136:	ea ed       	ldi	r30, 0xDA	; 218
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	40 81       	ld	r20, Z
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	c9 01       	movw	r24, r18
     142:	11 96       	adiw	r26, 0x01	; 1
     144:	0c 90       	ld	r0, X
     146:	11 97       	sbiw	r26, 0x01	; 1
     148:	02 c0       	rjmp	.+4      	; 0x14e <set_control_voltage+0x2e>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	0a 94       	dec	r0
     150:	e2 f7       	brpl	.-8      	; 0x14a <set_control_voltage+0x2a>
     152:	84 2b       	or	r24, r20
     154:	80 83       	st	Z, r24
     156:	82 e4       	ldi	r24, 0x42	; 66
     158:	8a 95       	dec	r24
     15a:	f1 f7       	brne	.-4      	; 0x158 <set_control_voltage+0x38>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <set_control_voltage+0x3e>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     15e:	80 81       	ld	r24, Z
     160:	11 96       	adiw	r26, 0x01	; 1
     162:	0c 90       	ld	r0, X
     164:	11 97       	sbiw	r26, 0x01	; 1
     166:	02 c0       	rjmp	.+4      	; 0x16c <set_control_voltage+0x4c>
     168:	22 0f       	add	r18, r18
     16a:	33 1f       	adc	r19, r19
     16c:	0a 94       	dec	r0
     16e:	e2 f7       	brpl	.-8      	; 0x168 <set_control_voltage+0x48>
     170:	20 95       	com	r18
     172:	28 23       	and	r18, r24
     174:	20 83       	st	Z, r18
	
}	
     176:	08 95       	ret

00000178 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     178:	83 b3       	in	r24, 0x13	; 19
     17a:	83 60       	ori	r24, 0x03	; 3
     17c:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     182:	97 b1       	in	r25, 0x07	; 7
     184:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     186:	e9 ed       	ldi	r30, 0xD9	; 217
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	8f 60       	ori	r24, 0x0F	; 15
     18e:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     190:	ea ed       	ldi	r30, 0xDA	; 218
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	80 7f       	andi	r24, 0xF0	; 240
     198:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     19a:	84 b3       	in	r24, 0x14	; 20
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     1a0:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     1a2:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     1a4:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     1a6:	a0 9a       	sbi	0x14, 0	; 20
}
     1a8:	08 95       	ret

000001aa <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1aa:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1ac:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1ae:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     1b0:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     1b2:	62 b9       	out	0x02, r22	; 2
     1b4:	2d e0       	ldi	r18, 0x0D	; 13
     1b6:	2a 95       	dec	r18
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <set_dac+0xc>
     1ba:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     1bc:	ea ed       	ldi	r30, 0xDA	; 218
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	40 81       	ld	r20, Z
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	b9 01       	movw	r22, r18
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <set_dac+0x24>
     1ca:	66 0f       	add	r22, r22
     1cc:	77 1f       	adc	r23, r23
     1ce:	8a 95       	dec	r24
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <set_dac+0x20>
     1d2:	cb 01       	movw	r24, r22
     1d4:	94 2f       	mov	r25, r20
     1d6:	98 2b       	or	r25, r24
     1d8:	90 83       	st	Z, r25
     1da:	72 e4       	ldi	r23, 0x42	; 66
     1dc:	7a 95       	dec	r23
     1de:	f1 f7       	brne	.-4      	; 0x1dc <set_dac+0x32>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     1e2:	90 81       	ld	r25, Z
     1e4:	80 95       	com	r24
     1e6:	89 23       	and	r24, r25
     1e8:	80 83       	st	Z, r24
	
}
     1ea:	08 95       	ret

000001ec <display_dec>:
#include "display.h"
#include "hardware.h"
#include "display_map.h"

void display_dec(uint16_t number, uint8_t digit)
{
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	2a 97       	sbiw	r28, 0x0a	; 10
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	f8 94       	cli
     1fa:	de bf       	out	0x3e, r29	; 62
     1fc:	0f be       	out	0x3f, r0	; 63
     1fe:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     200:	de 01       	movw	r26, r28
     202:	11 96       	adiw	r26, 0x01	; 1
     204:	ee e3       	ldi	r30, 0x3E	; 62
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	3a e0       	ldi	r19, 0x0A	; 10
     20a:	01 90       	ld	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	31 50       	subi	r19, 0x01	; 1
     210:	e1 f7       	brne	.-8      	; 0x20a <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     212:	3f ef       	ldi	r19, 0xFF	; 255
     214:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     216:	ea ed       	ldi	r30, 0xDA	; 218
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	30 81       	ld	r19, Z
     21c:	30 61       	ori	r19, 0x10	; 16
     21e:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     220:	30 81       	ld	r19, Z
     222:	3f 7e       	andi	r19, 0xEF	; 239
     224:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     226:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     228:	30 81       	ld	r19, Z
     22a:	30 62       	ori	r19, 0x20	; 32
     22c:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     22e:	30 81       	ld	r19, Z
     230:	3f 7d       	andi	r19, 0xDF	; 223
     232:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
     234:	62 30       	cpi	r22, 0x02	; 2
     236:	f9 f0       	breq	.+62     	; 0x276 <display_dec+0x8a>
     238:	63 30       	cpi	r22, 0x03	; 3
     23a:	18 f4       	brcc	.+6      	; 0x242 <display_dec+0x56>
     23c:	61 30       	cpi	r22, 0x01	; 1
     23e:	a1 f5       	brne	.+104    	; 0x2a8 <display_dec+0xbc>
     240:	0d c0       	rjmp	.+26     	; 0x25c <display_dec+0x70>
     242:	64 30       	cpi	r22, 0x04	; 4
     244:	29 f1       	breq	.+74     	; 0x290 <display_dec+0xa4>
     246:	68 30       	cpi	r22, 0x08	; 8
     248:	79 f5       	brne	.+94     	; 0x2a8 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     24a:	6a e0       	ldi	r22, 0x0A	; 10
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
     252:	fe 01       	movw	r30, r28
     254:	e8 0f       	add	r30, r24
     256:	f9 1f       	adc	r31, r25
     258:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     25a:	26 c0       	rjmp	.+76     	; 0x2a8 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     25c:	64 e6       	ldi	r22, 0x64	; 100
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
     264:	6a e0       	ldi	r22, 0x0A	; 10
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
     26c:	fe 01       	movw	r30, r28
     26e:	e6 0f       	add	r30, r22
     270:	f7 1f       	adc	r31, r23
     272:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     274:	19 c0       	rjmp	.+50     	; 0x2a8 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     276:	68 ee       	ldi	r22, 0xE8	; 232
     278:	73 e0       	ldi	r23, 0x03	; 3
     27a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
     27e:	64 e6       	ldi	r22, 0x64	; 100
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
     286:	fe 01       	movw	r30, r28
     288:	e6 0f       	add	r30, r22
     28a:	f7 1f       	adc	r31, r23
     28c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     28e:	0c c0       	rjmp	.+24     	; 0x2a8 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     290:	60 e1       	ldi	r22, 0x10	; 16
     292:	77 e2       	ldi	r23, 0x27	; 39
     294:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
     298:	68 ee       	ldi	r22, 0xE8	; 232
     29a:	73 e0       	ldi	r23, 0x03	; 3
     29c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
     2a0:	fe 01       	movw	r30, r28
     2a2:	e6 0f       	add	r30, r22
     2a4:	f7 1f       	adc	r31, r23
     2a6:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     2a8:	20 95       	com	r18
     2aa:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2ac:	ea ed       	ldi	r30, 0xDA	; 218
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	80 61       	ori	r24, 0x10	; 16
     2b4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2b6:	80 81       	ld	r24, Z
     2b8:	8f 7e       	andi	r24, 0xEF	; 239
     2ba:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
     2bc:	2a 96       	adiw	r28, 0x0a	; 10
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	ef 93       	push	r30
     2de:	ff 93       	push	r31
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     2e0:	80 91 d4 03 	lds	r24, 0x03D4
     2e4:	81 50       	subi	r24, 0x01	; 1
     2e6:	87 bd       	out	0x27, r24	; 39
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp sync LED
     2e8:	85 b1       	in	r24, 0x05	; 5
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	85 b9       	out	0x05, r24	; 5
	if (period_counter == 0) {
     2ee:	80 91 d5 03 	lds	r24, 0x03D5
     2f2:	88 23       	and	r24, r24
     2f4:	a1 f4       	brne	.+40     	; 0x31e <__vector_10+0x50>
		count_finished = FALSE;
     2f6:	10 92 d2 03 	sts	0x03D2, r1
		no_overflow = TRUE;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	80 93 ae 01 	sts	0x01AE, r24
		period_counter = 1; //set period counter to 1
     300:	80 93 d5 03 	sts	0x03D5, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     304:	e1 e8       	ldi	r30, 0x81	; 129
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	90 91 d3 03 	lds	r25, 0x03D3
     30e:	89 2b       	or	r24, r25
     310:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     312:	ef e6       	ldi	r30, 0x6F	; 111
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	80 81       	ld	r24, Z
     318:	81 60       	ori	r24, 0x01	; 1
     31a:	80 83       	st	Z, r24
     31c:	19 c0       	rjmp	.+50     	; 0x350 <__vector_10+0x82>
	} else {
		
		osc_count = TCNT1;
     31e:	e4 e8       	ldi	r30, 0x84	; 132
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	90 93 d1 03 	sts	0x03D1, r25
     32a:	80 93 d0 03 	sts	0x03D0, r24
		value_to_display = osc_count;
     32e:	80 91 d0 03 	lds	r24, 0x03D0
     332:	90 91 d1 03 	lds	r25, 0x03D1
     336:	90 93 4d 01 	sts	0x014D, r25
     33a:	80 93 4c 01 	sts	0x014C, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     33e:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 d2 03 	sts	0x03D2, r24
		period_counter = 0;
     348:	10 92 d5 03 	sts	0x03D5, r1
		TCNT1 = 0; //reset timer/counter 1
     34c:	11 82       	std	Z+1, r1	; 0x01
     34e:	10 82       	st	Z, r1
	}
	
	
	
	
}
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	9f 91       	pop	r25
     356:	8f 91       	pop	r24
     358:	0f 90       	pop	r0
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	0f 90       	pop	r0
     35e:	1f 90       	pop	r1
     360:	18 95       	reti

00000362 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     362:	1f 92       	push	r1
     364:	0f 92       	push	r0
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	0f 92       	push	r0
     36a:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     36c:	10 92 ae 01 	sts	0x01AE, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp sync LED
	
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <note_on_event>:



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	value_to_display = note;
     37a:	84 2f       	mov	r24, r20
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	90 93 4d 01 	sts	0x014D, r25
     382:	80 93 4c 01 	sts	0x014C, r24
	midi_note_number = note;
     386:	40 93 b6 01 	sts	0x01B6, r20
	if (velocity == 0) {
     38a:	22 23       	and	r18, r18
     38c:	11 f4       	brne	.+4      	; 0x392 <note_on_event+0x18>
		
		PORTF &= ~(1<<GATE);
     38e:	89 98       	cbi	0x11, 1	; 17
     390:	08 95       	ret
	} else {
		PORTF |= (1<<GATE);
     392:	89 9a       	sbi	0x11, 1	; 17
     394:	08 95       	ret

00000396 <note_off_event>:
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	PORTF &= ~(1<<GATE);
     396:	89 98       	cbi	0x11, 1	; 17
}
     398:	08 95       	ret

0000039a <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     39a:	87 e2       	ldi	r24, 0x27	; 39
     39c:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     3a0:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     3a4:	88 e9       	ldi	r24, 0x98	; 152
     3a6:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     3aa:	08 95       	ret

000003ac <__vector_13>:
	THOUS,
};



ISR (USART_RX_vect) { // USART receive interrupt
     3ac:	1f 92       	push	r1
     3ae:	0f 92       	push	r0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	0f 92       	push	r0
     3b4:	11 24       	eor	r1, r1
     3b6:	2f 93       	push	r18
     3b8:	3f 93       	push	r19
     3ba:	4f 93       	push	r20
     3bc:	5f 93       	push	r21
     3be:	6f 93       	push	r22
     3c0:	7f 93       	push	r23
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
     3c6:	af 93       	push	r26
     3c8:	bf 93       	push	r27
     3ca:	ef 93       	push	r30
     3cc:	ff 93       	push	r31
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	0f 92       	push	r0
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
	 
	uint8_t inByte = UDR0;
     3d8:	80 91 c6 00 	lds	r24, 0x00C6
     3dc:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);	
     3de:	86 ed       	ldi	r24, 0xD6	; 214
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	ae 01       	movw	r20, r28
     3e6:	4f 5f       	subi	r20, 0xFF	; 255
     3e8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ea:	0e 94 10 0b 	call	0x1620	; 0x1620 <midi_device_input>
	  	
}
     3ee:	0f 90       	pop	r0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
		//place = 0;
	//}
	

	
}	
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     42a:	80 e8       	ldi	r24, 0x80	; 128
     42c:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     42e:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     430:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     432:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     434:	9a 9a       	sbi	0x13, 2	; 19
	//PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
	PORTG |= (1<<TUNE_SELECT);
     436:	a2 9a       	sbi	0x14, 2	; 20
	
	setup_spi(); 
     438:	0e 94 75 03 	call	0x6ea	; 0x6ea <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     43c:	a9 ed       	ldi	r26, 0xD9	; 217
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	8c 91       	ld	r24, X
     442:	80 6c       	ori	r24, 0xC0	; 192
     444:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     446:	ea ed       	ldi	r30, 0xDA	; 218
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	80 6c       	ori	r24, 0xC0	; 192
     44e:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     450:	81 b1       	in	r24, 0x01	; 1
     452:	8f ef       	ldi	r24, 0xFF	; 255
     454:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     456:	92 b1       	in	r25, 0x02	; 2
     458:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     45a:	8c 91       	ld	r24, X
     45c:	80 63       	ori	r24, 0x30	; 48
     45e:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     460:	80 81       	ld	r24, Z
     462:	8f 7c       	andi	r24, 0xCF	; 207
     464:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<ISW8_SW); //set ISW8_SW pin as input
     466:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     468:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     46c:	0e 94 bc 00 	call	0x178	; 0x178 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     470:	c6 ed       	ldi	r28, 0xD6	; 214
     472:	d3 e0       	ldi	r29, 0x03	; 3
     474:	ce 01       	movw	r24, r28
     476:	0e 94 df 0a 	call	0x15be	; 0x15be <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     47a:	ce 01       	movw	r24, r28
     47c:	6d eb       	ldi	r22, 0xBD	; 189
     47e:	71 e0       	ldi	r23, 0x01	; 1
     480:	0e 94 a7 0a 	call	0x154e	; 0x154e <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     484:	ce 01       	movw	r24, r28
     486:	6b ec       	ldi	r22, 0xCB	; 203
     488:	71 e0       	ldi	r23, 0x01	; 1
     48a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     48e:	0e 94 cd 01 	call	0x39a	; 0x39a <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     492:	0e 94 94 03 	call	0x728	; 0x728 <update_spi>
	//TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
	//TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms
	

		
	sei(); //enable global interrupts
     496:	78 94       	sei
	
	////set initial pitch offset CVs
	vco1_init_cv = set_vco_init_cv(VCO1);
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <set_vco_init_cv>
     49e:	90 93 cf 03 	sts	0x03CF, r25
     4a2:	80 93 ce 03 	sts	0x03CE, r24
	//vco2_init_cv = set_vco_init_cv(VCO2);
	value_to_display = vco1_init_cv;
     4a6:	80 91 ce 03 	lds	r24, 0x03CE
     4aa:	90 91 cf 03 	lds	r25, 0x03CF
     4ae:	90 93 4d 01 	sts	0x014D, r25
     4b2:	80 93 4c 01 	sts	0x014C, r24
	
	tune_octave(1);
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <tune_octave>
	tune_octave(2);
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	0e 94 a5 06 	call	0xd4a	; 0xd4a <tune_octave>
	tune_octave(3);
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <tune_octave>
	tune_octave(4);
     4c8:	84 e0       	ldi	r24, 0x04	; 4
     4ca:	0e 94 a5 06 	call	0xd4a	; 0xd4a <tune_octave>
	tune_octave(5);
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <tune_octave>
	tune_octave(6);
     4d4:	86 e0       	ldi	r24, 0x06	; 6
     4d6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <tune_octave>
	tune_octave(7);
     4da:	87 e0       	ldi	r24, 0x07	; 7
     4dc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <tune_octave>
	tune_octave(8);
     4e0:	88 e0       	ldi	r24, 0x08	; 8
     4e2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <tune_octave>
	//tune_octave(9);
	//fill in remaining MIDI notes from 107 to 127
	uint16_t delta_semitone = vco1_pitch_table[107] - vco1_pitch_table[106];
     4e6:	20 91 a2 03 	lds	r18, 0x03A2
     4ea:	30 91 a3 03 	lds	r19, 0x03A3
     4ee:	80 91 a0 03 	lds	r24, 0x03A0
     4f2:	90 91 a1 03 	lds	r25, 0x03A1
     4f6:	28 1b       	sub	r18, r24
     4f8:	39 0b       	sbc	r19, r25
	value_to_display = delta_semitone;
     4fa:	30 93 4d 01 	sts	0x014D, r19
     4fe:	20 93 4c 01 	sts	0x014C, r18
     502:	e4 ea       	ldi	r30, 0xA4	; 164
     504:	f3 e0       	ldi	r31, 0x03	; 3
//}
//



int main(void)
     506:	6c ec       	ldi	r22, 0xCC	; 204
     508:	73 e0       	ldi	r23, 0x03	; 3
     50a:	a9 01       	movw	r20, r18
	//fill in remaining MIDI notes from 107 to 127
	uint16_t delta_semitone = vco1_pitch_table[107] - vco1_pitch_table[106];
	value_to_display = delta_semitone;
	for (int i = 1; i <= 20; i++) {
		
		vco1_pitch_table[i+107]= vco1_pitch_table[107] + (delta_semitone*i);
     50c:	a2 ea       	ldi	r26, 0xA2	; 162
     50e:	b3 e0       	ldi	r27, 0x03	; 3
     510:	8d 91       	ld	r24, X+
     512:	9c 91       	ld	r25, X
     514:	11 97       	sbiw	r26, 0x01	; 1
     516:	84 0f       	add	r24, r20
     518:	95 1f       	adc	r25, r21
     51a:	81 93       	st	Z+, r24
     51c:	91 93       	st	Z+, r25
     51e:	42 0f       	add	r20, r18
     520:	53 1f       	adc	r21, r19
	tune_octave(8);
	//tune_octave(9);
	//fill in remaining MIDI notes from 107 to 127
	uint16_t delta_semitone = vco1_pitch_table[107] - vco1_pitch_table[106];
	value_to_display = delta_semitone;
	for (int i = 1; i <= 20; i++) {
     522:	e6 17       	cp	r30, r22
     524:	f7 07       	cpc	r31, r23
     526:	a1 f7       	brne	.-24     	; 0x510 <main+0xe6>
	
	}		

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     528:	06 ed       	ldi	r16, 0xD6	; 214
     52a:	13 e0       	ldi	r17, 0x03	; 3
	
		display_dec(value_to_display, digit[place]);
     52c:	c8 e4       	ldi	r28, 0x48	; 72
     52e:	d1 e0       	ldi	r29, 0x01	; 1
	
	}		

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     530:	c8 01       	movw	r24, r16
     532:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <midi_device_process>
	
		display_dec(value_to_display, digit[place]);
     536:	80 91 4c 01 	lds	r24, 0x014C
     53a:	90 91 4d 01 	lds	r25, 0x014D
     53e:	20 91 b4 01 	lds	r18, 0x01B4
     542:	fe 01       	movw	r30, r28
     544:	e2 0f       	add	r30, r18
     546:	f1 1d       	adc	r31, r1
     548:	60 81       	ld	r22, Z
     54a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <display_dec>
			
		scan_pots_and_update_control_voltages();
     54e:	0e 94 c0 02 	call	0x580	; 0x580 <scan_pots_and_update_control_voltages>

			
		//do SPI read/write every 5 interrupts (16.5 ms)
		if (switch_timer++ == 5)
     552:	80 91 b5 01 	lds	r24, 0x01B5
     556:	98 2f       	mov	r25, r24
     558:	9f 5f       	subi	r25, 0xFF	; 255
     55a:	90 93 b5 01 	sts	0x01B5, r25
     55e:	85 30       	cpi	r24, 0x05	; 5
     560:	21 f4       	brne	.+8      	; 0x56a <main+0x140>
		{
			switch_timer = 0;
     562:	10 92 b5 01 	sts	0x01B5, r1
			update_spi();
     566:	0e 94 94 03 	call	0x728	; 0x728 <update_spi>
				
		}
			
		//increment digit display place
		if (place++ == 3) //post increment
     56a:	80 91 b4 01 	lds	r24, 0x01B4
     56e:	98 2f       	mov	r25, r24
     570:	9f 5f       	subi	r25, 0xFF	; 255
     572:	90 93 b4 01 	sts	0x01B4, r25
     576:	83 30       	cpi	r24, 0x03	; 3
     578:	d9 f6       	brne	.-74     	; 0x530 <main+0x106>
		{
			place = 0;
     57a:	10 92 b4 01 	sts	0x01B4, r1
     57e:	d8 cf       	rjmp	.-80     	; 0x530 <main+0x106>

00000580 <scan_pots_and_update_control_voltages>:
	&sustain_2_cv,
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
void scan_pots_and_update_control_voltages(void) {
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     58c:	0c e6       	ldi	r16, 0x6C	; 108
     58e:	11 e0       	ldi	r17, 0x01	; 1
	&sustain_2_cv,
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
void scan_pots_and_update_control_voltages(void) {
     590:	ee 24       	eor	r14, r14
     592:	ff 24       	eor	r15, r15
     594:	e3 94       	inc	r14
     596:	c0 e0       	ldi	r28, 0x00	; 0
     598:	d0 e0       	ldi	r29, 0x00	; 0
     59a:	06 c0       	rjmp	.+12     	; 0x5a8 <scan_pots_and_update_control_voltages+0x28>

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     59c:	21 96       	adiw	r28, 0x01	; 1
     59e:	08 94       	sec
     5a0:	e1 1c       	adc	r14, r1
     5a2:	f1 1c       	adc	r15, r1
     5a4:	0e 5f       	subi	r16, 0xFE	; 254
     5a6:	1f 4f       	sbci	r17, 0xFF	; 255
	{

		adc_value = read_pot(POTMUX_EN0, i);
     5a8:	86 e0       	ldi	r24, 0x06	; 6
     5aa:	6c 2f       	mov	r22, r28
     5ac:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     5b0:	90 93 ba 01 	sts	0x01BA, r25
     5b4:	80 93 b9 01 	sts	0x01B9, r24
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
     5b8:	ce 01       	movw	r24, r28
     5ba:	08 97       	sbiw	r24, 0x08	; 8
     5bc:	82 30       	cpi	r24, 0x02	; 2
     5be:	91 05       	cpc	r25, r1
     5c0:	08 f0       	brcs	.+2      	; 0x5c4 <scan_pots_and_update_control_voltages+0x44>
     5c2:	41 c0       	rjmp	.+130    	; 0x646 <scan_pots_and_update_control_voltages+0xc6>
		{
			uint16_t tune_value = vco2_init_cv;//6303;//9759; //init CV offset of about -5.8V
     5c4:	20 91 cc 03 	lds	r18, 0x03CC
     5c8:	30 91 cd 03 	lds	r19, 0x03CD
			if (i == 9) tune_value = vco1_init_cv;//-= 1638; //add an octave (1V) to VCO2 pitch
     5cc:	c9 30       	cpi	r28, 0x09	; 9
     5ce:	d1 05       	cpc	r29, r1
     5d0:	21 f4       	brne	.+8      	; 0x5da <scan_pots_and_update_control_voltages+0x5a>
     5d2:	20 91 ce 03 	lds	r18, 0x03CE
     5d6:	30 91 cf 03 	lds	r19, 0x03CF
			if (adc_value >= 512) {
     5da:	80 91 b9 01 	lds	r24, 0x01B9
     5de:	90 91 ba 01 	lds	r25, 0x01BA
     5e2:	42 e0       	ldi	r20, 0x02	; 2
     5e4:	80 30       	cpi	r24, 0x00	; 0
     5e6:	94 07       	cpc	r25, r20
     5e8:	c0 f0       	brcs	.+48     	; 0x61a <scan_pots_and_update_control_voltages+0x9a>
				set_control_voltage(pot_decoder_0[i],(tune_value + (adc_value - 512)));
     5ea:	60 91 b9 01 	lds	r22, 0x01B9
     5ee:	70 91 ba 01 	lds	r23, 0x01BA
     5f2:	60 50       	subi	r22, 0x00	; 0
     5f4:	72 40       	sbci	r23, 0x02	; 2
     5f6:	62 0f       	add	r22, r18
     5f8:	73 1f       	adc	r23, r19
     5fa:	f8 01       	movw	r30, r16
     5fc:	80 81       	ld	r24, Z
     5fe:	91 81       	ldd	r25, Z+1	; 0x01
     600:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				tune_offset = adc_value - 512;
     604:	80 91 b9 01 	lds	r24, 0x01B9
     608:	90 91 ba 01 	lds	r25, 0x01BA
     60c:	80 50       	subi	r24, 0x00	; 0
     60e:	92 40       	sbci	r25, 0x02	; 2
     610:	90 93 b8 01 	sts	0x01B8, r25
     614:	80 93 b7 01 	sts	0x01B7, r24
     618:	29 c0       	rjmp	.+82     	; 0x66c <scan_pots_and_update_control_voltages+0xec>
			} else {
				set_control_voltage(pot_decoder_0[i],(tune_value - (512- adc_value)));
     61a:	60 91 b9 01 	lds	r22, 0x01B9
     61e:	70 91 ba 01 	lds	r23, 0x01BA
     622:	60 50       	subi	r22, 0x00	; 0
     624:	72 40       	sbci	r23, 0x02	; 2
     626:	62 0f       	add	r22, r18
     628:	73 1f       	adc	r23, r19
     62a:	f8 01       	movw	r30, r16
     62c:	80 81       	ld	r24, Z
     62e:	91 81       	ldd	r25, Z+1	; 0x01
     630:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				tune_offset = adc_value;
     634:	80 91 b9 01 	lds	r24, 0x01B9
     638:	90 91 ba 01 	lds	r25, 0x01BA
     63c:	90 93 b8 01 	sts	0x01B8, r25
     640:	80 93 b7 01 	sts	0x01B7, r24
     644:	13 c0       	rjmp	.+38     	; 0x66c <scan_pots_and_update_control_voltages+0xec>
			}

		} else if (i == 11) //exception to handle ARP_RATE pot
     646:	cb 30       	cpi	r28, 0x0B	; 11
     648:	d1 05       	cpc	r29, r1
     64a:	09 f4       	brne	.+2      	; 0x64e <scan_pots_and_update_control_voltages+0xce>
     64c:	a7 cf       	rjmp	.-178    	; 0x59c <scan_pots_and_update_control_voltages+0x1c>
		{
			//store ARP pot value, but don't set DAC
			
		} else {
			set_control_voltage(pot_decoder_0[i], adc_value << 4);
     64e:	60 91 b9 01 	lds	r22, 0x01B9
     652:	70 91 ba 01 	lds	r23, 0x01BA
     656:	62 95       	swap	r22
     658:	72 95       	swap	r23
     65a:	70 7f       	andi	r23, 0xF0	; 240
     65c:	76 27       	eor	r23, r22
     65e:	60 7f       	andi	r22, 0xF0	; 240
     660:	76 27       	eor	r23, r22
     662:	f8 01       	movw	r30, r16
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	&release_1_cv
	}; 
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     66c:	f0 e1       	ldi	r31, 0x10	; 16
     66e:	ef 16       	cp	r14, r31
     670:	f1 04       	cpc	r15, r1
     672:	0c f4       	brge	.+2      	; 0x676 <scan_pots_and_update_control_voltages+0xf6>
     674:	93 cf       	rjmp	.-218    	; 0x59c <scan_pots_and_update_control_voltages+0x1c>
     676:	0e e4       	ldi	r16, 0x4E	; 78
     678:	11 e0       	ldi	r17, 0x01	; 1
     67a:	c1 e0       	ldi	r28, 0x01	; 1
	
	//now read second set of pots form U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     67c:	87 e0       	ldi	r24, 0x07	; 7
     67e:	6c 2f       	mov	r22, r28
     680:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     684:	90 93 ba 01 	sts	0x01BA, r25
     688:	80 93 b9 01 	sts	0x01B9, r24
		set_control_voltage(pot_decoder_1[i], adc_value <<4);
     68c:	60 91 b9 01 	lds	r22, 0x01B9
     690:	70 91 ba 01 	lds	r23, 0x01BA
     694:	62 95       	swap	r22
     696:	72 95       	swap	r23
     698:	70 7f       	andi	r23, 0xF0	; 240
     69a:	76 27       	eor	r23, r22
     69c:	60 7f       	andi	r22, 0xF0	; 240
     69e:	76 27       	eor	r23, r22
     6a0:	f8 01       	movw	r30, r16
     6a2:	81 91       	ld	r24, Z+
     6a4:	91 91       	ld	r25, Z+
     6a6:	8f 01       	movw	r16, r30
     6a8:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
     6ac:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
	}
	
	//now read second set of pots form U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     6ae:	c0 31       	cpi	r28, 0x10	; 16
     6b0:	29 f7       	brne	.-54     	; 0x67c <scan_pots_and_update_control_voltages+0xfc>

	}
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	set_control_voltage(&vco1_pitch_cv, vco1_pitch_table[midi_note_number]);
     6b2:	e0 91 b6 01 	lds	r30, 0x01B6
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	ee 0f       	add	r30, r30
     6ba:	ff 1f       	adc	r31, r31
     6bc:	e4 53       	subi	r30, 0x34	; 52
     6be:	fd 4f       	sbci	r31, 0xFD	; 253
     6c0:	60 81       	ld	r22, Z
     6c2:	71 81       	ldd	r23, Z+1	; 0x01
     6c4:	8c e3       	ldi	r24, 0x3C	; 60
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	
	set_control_voltage(&vco2_pitch_cv, 0);
     6cc:	8a e3       	ldi	r24, 0x3A	; 58
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     6d8:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     6da:	a1 9a       	sbi	0x14, 1	; 20
	
	
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	08 95       	ret

000006ea <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     6ea:	84 b1       	in	r24, 0x04	; 4
     6ec:	87 62       	ori	r24, 0x27	; 39
     6ee:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     6f0:	ec ed       	ldi	r30, 0xDC	; 220
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	80 81       	ld	r24, Z
     6f6:	8c 65       	ori	r24, 0x5C	; 92
     6f8:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     6fa:	85 b1       	in	r24, 0x05	; 5
     6fc:	89 7d       	andi	r24, 0xD9	; 217
     6fe:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     700:	ed ed       	ldi	r30, 0xDD	; 221
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	83 7f       	andi	r24, 0xF3	; 243
     708:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     70a:	80 e5       	ldi	r24, 0x50	; 80
     70c:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     70e:	80 81       	ld	r24, Z
     710:	87 7f       	andi	r24, 0xF7	; 247
     712:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     714:	80 81       	ld	r24, Z
     716:	87 7f       	andi	r24, 0xF7	; 247
     718:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     71a:	80 81       	ld	r24, Z
     71c:	88 60       	ori	r24, 0x08	; 8
     71e:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     720:	80 81       	ld	r24, Z
     722:	8f 7e       	andi	r24, 0xEF	; 239
     724:	80 83       	st	Z, r24
	
}
     726:	08 95       	ret

00000728 <update_spi>:

void update_spi(void) {
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
	
			SPI_PORT |= SPI_SW_LATCH;
     730:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE
			SPDR =
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     732:	c0 91 c1 01 	lds	r28, 0x01C1
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     736:	40 91 c1 01 	lds	r20, 0x01C1
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     73a:	00 91 c1 01 	lds	r16, 0x01C1
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     73e:	80 91 c1 01 	lds	r24, 0x01C1
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     742:	a0 91 c1 01 	lds	r26, 0x01C1
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     746:	60 91 c1 01 	lds	r22, 0x01C1
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     74a:	20 91 c1 01 	lds	r18, 0x01C1
			ISW8_SW_ON << ISW8_LED;
     74e:	90 91 c6 01 	lds	r25, 0x01C6
     752:	97 95       	ror	r25
     754:	99 27       	eor	r25, r25
     756:	97 95       	ror	r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     758:	81 70       	andi	r24, 0x01	; 1
     75a:	98 2b       	or	r25, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     75c:	cc 1f       	adc	r28, r28
     75e:	cc 27       	eor	r28, r28
     760:	cc 1f       	adc	r28, r28
     762:	cc 0f       	add	r28, r28
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     764:	c9 2b       	or	r28, r25
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     766:	46 95       	lsr	r20
     768:	46 95       	lsr	r20
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	41 70       	andi	r20, 0x01	; 1
     76e:	50 70       	andi	r21, 0x00	; 0
     770:	ca 01       	movw	r24, r20
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     77a:	8c 2b       	or	r24, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     77c:	06 95       	lsr	r16
     77e:	10 e0       	ldi	r17, 0x00	; 0
     780:	01 70       	andi	r16, 0x01	; 1
     782:	10 70       	andi	r17, 0x00	; 0
     784:	e8 01       	movw	r28, r16
     786:	cc 0f       	add	r28, r28
     788:	dd 1f       	adc	r29, r29
     78a:	cc 0f       	add	r28, r28
     78c:	dd 1f       	adc	r29, r29
     78e:	cc 0f       	add	r28, r28
     790:	dd 1f       	adc	r29, r29
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     792:	c8 2b       	or	r28, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     794:	a2 95       	swap	r26
     796:	af 70       	andi	r26, 0x0F	; 15
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	a1 70       	andi	r26, 0x01	; 1
     79c:	b0 70       	andi	r27, 0x00	; 0
     79e:	fd 01       	movw	r30, r26
     7a0:	e2 95       	swap	r30
     7a2:	f2 95       	swap	r31
     7a4:	f0 7f       	andi	r31, 0xF0	; 240
     7a6:	fe 27       	eor	r31, r30
     7a8:	e0 7f       	andi	r30, 0xF0	; 240
     7aa:	fe 27       	eor	r31, r30
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     7ac:	ec 2b       	or	r30, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     7ae:	62 95       	swap	r22
     7b0:	66 95       	lsr	r22
     7b2:	67 70       	andi	r22, 0x07	; 7
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	61 70       	andi	r22, 0x01	; 1
     7b8:	70 70       	andi	r23, 0x00	; 0
     7ba:	ab 01       	movw	r20, r22
     7bc:	44 0f       	add	r20, r20
     7be:	55 1f       	adc	r21, r21
     7c0:	42 95       	swap	r20
     7c2:	52 95       	swap	r21
     7c4:	50 7f       	andi	r21, 0xF0	; 240
     7c6:	54 27       	eor	r21, r20
     7c8:	40 7f       	andi	r20, 0xF0	; 240
     7ca:	54 27       	eor	r21, r20
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     7cc:	4e 2b       	or	r20, r30
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     7ce:	22 95       	swap	r18
     7d0:	26 95       	lsr	r18
     7d2:	26 95       	lsr	r18
     7d4:	23 70       	andi	r18, 0x03	; 3
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	21 70       	andi	r18, 0x01	; 1
     7da:	30 70       	andi	r19, 0x00	; 0
     7dc:	c9 01       	movw	r24, r18
     7de:	00 24       	eor	r0, r0
     7e0:	96 95       	lsr	r25
     7e2:	87 95       	ror	r24
     7e4:	07 94       	ror	r0
     7e6:	96 95       	lsr	r25
     7e8:	87 95       	ror	r24
     7ea:	07 94       	ror	r0
     7ec:	98 2f       	mov	r25, r24
     7ee:	80 2d       	mov	r24, r0
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     7f0:	84 2b       	or	r24, r20
     7f2:	8e bd       	out	0x2e, r24	; 46
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
			ISW8_SW_ON << ISW8_LED;
			
			while (!(SPSR & (1<<SPIF)));
     7f4:	0d b4       	in	r0, 0x2d	; 45
     7f6:	07 fe       	sbrs	r0, 7
     7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <update_spi+0xcc>
			
			//Now read SPDR for switch data shifted in from 74XX165 U14
			spi_sw_current_state = SPDR;
     7fa:	8e b5       	in	r24, 0x2e	; 46
     7fc:	80 93 c3 01 	sts	0x01C3, r24
			
			spi_sw_current_state ^= spi_sw_previous_state;
     800:	80 91 c3 01 	lds	r24, 0x01C3
     804:	90 91 c2 01 	lds	r25, 0x01C2
     808:	89 27       	eor	r24, r25
     80a:	80 93 c3 01 	sts	0x01C3, r24
			spi_sw_previous_state ^= spi_sw_current_state;
     80e:	80 91 c2 01 	lds	r24, 0x01C2
     812:	90 91 c3 01 	lds	r25, 0x01C3
     816:	89 27       	eor	r24, r25
     818:	80 93 c2 01 	sts	0x01C2, r24
			spi_sw_current_state &= spi_sw_previous_state;
     81c:	80 91 c3 01 	lds	r24, 0x01C3
     820:	90 91 c2 01 	lds	r25, 0x01C2
     824:	89 23       	and	r24, r25
     826:	80 93 c3 01 	sts	0x01C3, r24
			
			//toggle switch state		
			sw_latch_five ^= spi_sw_current_state; //Omar's solution.
     82a:	80 91 c1 01 	lds	r24, 0x01C1
     82e:	90 91 c3 01 	lds	r25, 0x01C3
     832:	89 27       	eor	r24, r25
     834:	80 93 c1 01 	sts	0x01C1, r24
			
			//SHIFT 4th BYTE
			SPDR = 0; //no LEDs connected in current test set up
     838:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     83a:	0d b4       	in	r0, 0x2d	; 45
     83c:	07 fe       	sbrs	r0, 7
     83e:	fd cf       	rjmp	.-6      	; 0x83a <update_spi+0x112>
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			sw_latch_four = SPDR;
     840:	8e b5       	in	r24, 0x2e	; 46
     842:	80 93 c0 01 	sts	0x01C0, r24
			//toggling not implemented here yet.
			ISW12_SW_ON = (sw_latch_four >> ISW12_SW) & 1;
     846:	80 91 c0 01 	lds	r24, 0x01C0
     84a:	82 95       	swap	r24
     84c:	86 95       	lsr	r24
     84e:	87 70       	andi	r24, 0x07	; 7
     850:	81 70       	andi	r24, 0x01	; 1
     852:	80 93 c9 01 	sts	0x01C9, r24
			//check if ISW13_SW bit is set
			ISW13_SW_ON = (sw_latch_four >> ISW13_SW) & 1;
     856:	80 91 c0 01 	lds	r24, 0x01C0
     85a:	82 95       	swap	r24
     85c:	86 95       	lsr	r24
     85e:	86 95       	lsr	r24
     860:	83 70       	andi	r24, 0x03	; 3
     862:	81 70       	andi	r24, 0x01	; 1
     864:	80 93 c8 01 	sts	0x01C8, r24

			
			//SHIFT 3th BYTE
			SPDR = 0;
     868:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     86a:	0d b4       	in	r0, 0x2d	; 45
     86c:	07 fe       	sbrs	r0, 7
     86e:	fd cf       	rjmp	.-6      	; 0x86a <update_spi+0x142>

			//SHIFT 2th BYTE
			SPDR = 0;
     870:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     872:	0d b4       	in	r0, 0x2d	; 45
     874:	07 fe       	sbrs	r0, 7
     876:	fd cf       	rjmp	.-6      	; 0x872 <update_spi+0x14a>
			
			//SHIFT 1st BYTE
			
			SPDR = (ISW12_SW_ON << ISW12_LED) | (ISW11_SW_ON << ISW11_LED) | (ISW9_SW_ON << ISW9_LED); 
     878:	20 91 c9 01 	lds	r18, 0x01C9
     87c:	80 91 ca 01 	lds	r24, 0x01CA
     880:	90 91 cb 01 	lds	r25, 0x01CB
     884:	22 0f       	add	r18, r18
     886:	22 0f       	add	r18, r18
     888:	87 95       	ror	r24
     88a:	88 27       	eor	r24, r24
     88c:	87 95       	ror	r24
     88e:	82 2b       	or	r24, r18
     890:	89 2b       	or	r24, r25
     892:	8e bd       	out	0x2e, r24	; 46
			//Wait for SPI shift to complete
			while (!(SPSR & (1<<SPIF)));
     894:	0d b4       	in	r0, 0x2d	; 45
     896:	07 fe       	sbrs	r0, 7
     898:	fd cf       	rjmp	.-6      	; 0x894 <update_spi+0x16c>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     89a:	ed ed       	ldi	r30, 0xDD	; 221
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	87 7f       	andi	r24, 0xF7	; 247
     8a2:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     8a4:	80 81       	ld	r24, Z
     8a6:	88 60       	ori	r24, 0x08	; 8
     8a8:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     8aa:	2d 98       	cbi	0x05, 5	; 5
			
			//now read switches directly connected to MCU
			//this toggle code works, but I haven't figured out how it works
			//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
			current_sw_state = SWITCH_PORT;
     8ac:	8f b1       	in	r24, 0x0f	; 15
     8ae:	80 93 c4 01 	sts	0x01C4, r24
			current_sw_state ^= previous_sw_state;
     8b2:	80 91 c4 01 	lds	r24, 0x01C4
     8b6:	90 91 c5 01 	lds	r25, 0x01C5
     8ba:	89 27       	eor	r24, r25
     8bc:	80 93 c4 01 	sts	0x01C4, r24
			previous_sw_state ^= current_sw_state;
     8c0:	80 91 c5 01 	lds	r24, 0x01C5
     8c4:	90 91 c4 01 	lds	r25, 0x01C4
     8c8:	89 27       	eor	r24, r25
     8ca:	80 93 c5 01 	sts	0x01C5, r24
			current_sw_state &= previous_sw_state;
     8ce:	80 91 c4 01 	lds	r24, 0x01C4
     8d2:	90 91 c5 01 	lds	r25, 0x01C5
     8d6:	89 23       	and	r24, r25
     8d8:	80 93 c4 01 	sts	0x01C4, r24
			
			if (current_sw_state & (1<<ISW8_SW))
     8dc:	80 91 c4 01 	lds	r24, 0x01C4
     8e0:	82 ff       	sbrs	r24, 2
     8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <update_spi+0x1c8>
			{
				ISW8_SW_ON ^= 1 << 0; //toggle switch state
     8e4:	90 91 c6 01 	lds	r25, 0x01C6
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	89 27       	eor	r24, r25
     8ec:	80 93 c6 01 	sts	0x01C6, r24
			}
			
			if (current_sw_state & (1<<ISW11_SW)) {
     8f0:	80 91 c4 01 	lds	r24, 0x01C4
     8f4:	84 ff       	sbrs	r24, 4
     8f6:	06 c0       	rjmp	.+12     	; 0x904 <update_spi+0x1dc>
				
				ISW11_SW_ON ^= 1 << 0; //toggle switch state
     8f8:	90 91 ca 01 	lds	r25, 0x01CA
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	89 27       	eor	r24, r25
     900:	80 93 ca 01 	sts	0x01CA, r24
			}
			
			if (current_sw_state & (1<<ISW9_SW)) {
     904:	80 91 c4 01 	lds	r24, 0x01C4
     908:	83 ff       	sbrs	r24, 3
     90a:	06 c0       	rjmp	.+12     	; 0x918 <update_spi+0x1f0>
				
				ISW9_SW_ON ^= 1 << 0; //toggle switch state
     90c:	90 91 cb 01 	lds	r25, 0x01CB
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	89 27       	eor	r24, r25
     914:	80 93 cb 01 	sts	0x01CB, r24
			}
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     918:	ed ed       	ldi	r30, 0xDD	; 221
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	8f 7b       	andi	r24, 0xBF	; 191
     920:	80 83       	st	Z, r24
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
     922:	40 91 c1 01 	lds	r20, 0x01C1
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     926:	30 91 c1 01 	lds	r19, 0x01C1
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
     92a:	c0 91 c1 01 	lds	r28, 0x01C1
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
     92e:	00 91 c1 01 	lds	r16, 0x01C1
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
     932:	60 91 c1 01 	lds	r22, 0x01C1
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
     936:	a0 91 c1 01 	lds	r26, 0x01C1
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
     93a:	20 91 c1 01 	lds	r18, 0x01C1
			ISW8_SW_ON << BMOD;
     93e:	80 91 c6 01 	lds	r24, 0x01C6
     942:	82 95       	swap	r24
     944:	80 7f       	andi	r24, 0xF0	; 240
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     946:	36 95       	lsr	r19
     948:	36 95       	lsr	r19
     94a:	31 70       	andi	r19, 0x01	; 1
     94c:	38 2b       	or	r19, r24
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
     94e:	10 e0       	ldi	r17, 0x00	; 0
     950:	01 70       	andi	r16, 0x01	; 1
     952:	10 70       	andi	r17, 0x00	; 0
     954:	c8 01       	movw	r24, r16
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     95a:	83 2b       	or	r24, r19
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
     95c:	a2 95       	swap	r26
     95e:	a6 95       	lsr	r26
     960:	a7 70       	andi	r26, 0x07	; 7
     962:	a7 95       	ror	r26
     964:	aa 27       	eor	r26, r26
     966:	a7 95       	ror	r26
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     968:	8a 2b       	or	r24, r26
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
     96a:	44 1f       	adc	r20, r20
     96c:	44 27       	eor	r20, r20
     96e:	44 1f       	adc	r20, r20
     970:	44 0f       	add	r20, r20
     972:	44 0f       	add	r20, r20
     974:	44 0f       	add	r20, r20
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     976:	48 2b       	or	r20, r24
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
     978:	c6 95       	lsr	r28
     97a:	d0 e0       	ldi	r29, 0x00	; 0
     97c:	c1 70       	andi	r28, 0x01	; 1
     97e:	d0 70       	andi	r29, 0x00	; 0
     980:	de 01       	movw	r26, r28
     982:	aa 0f       	add	r26, r26
     984:	bb 1f       	adc	r27, r27
     986:	aa 0f       	add	r26, r26
     988:	bb 1f       	adc	r27, r27
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     98a:	a4 2b       	or	r26, r20
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
     98c:	62 95       	swap	r22
     98e:	6f 70       	andi	r22, 0x0F	; 15
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	61 70       	andi	r22, 0x01	; 1
     994:	70 70       	andi	r23, 0x00	; 0
     996:	ab 01       	movw	r20, r22
     998:	00 24       	eor	r0, r0
     99a:	56 95       	lsr	r21
     99c:	47 95       	ror	r20
     99e:	07 94       	ror	r0
     9a0:	56 95       	lsr	r21
     9a2:	47 95       	ror	r20
     9a4:	07 94       	ror	r0
     9a6:	54 2f       	mov	r21, r20
     9a8:	40 2d       	mov	r20, r0
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     9aa:	4a 2b       	or	r20, r26
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
     9ac:	22 95       	swap	r18
     9ae:	26 95       	lsr	r18
     9b0:	26 95       	lsr	r18
     9b2:	23 70       	andi	r18, 0x03	; 3
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	21 70       	andi	r18, 0x01	; 1
     9b8:	30 70       	andi	r19, 0x00	; 0
     9ba:	c9 01       	movw	r24, r18
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	82 95       	swap	r24
     9c2:	92 95       	swap	r25
     9c4:	90 7f       	andi	r25, 0xF0	; 240
     9c6:	98 27       	eor	r25, r24
     9c8:	80 7f       	andi	r24, 0xF0	; 240
     9ca:	98 27       	eor	r25, r24
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     9cc:	84 2b       	or	r24, r20
     9ce:	82 b9       	out	0x02, r24	; 2
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
			ISW8_SW_ON << BMOD;
			VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     9d0:	80 81       	ld	r24, Z
     9d2:	80 64       	ori	r24, 0x40	; 64
     9d4:	80 83       	st	Z, r24
     9d6:	00 00       	nop
			_delay_us(1); //why is this delay here????
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     9d8:	80 81       	ld	r24, Z
     9da:	8f 7b       	andi	r24, 0xBF	; 191
     9dc:	80 83       	st	Z, r24
			DATA_BUS = 0;
     9de:	12 b8       	out	0x02, r1	; 2
			
			//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
			//need to make sure this doesn't interfere with anything else on this port
			EG2_POL_PORT ^= (-ISW9_SW_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     9e0:	90 81       	ld	r25, Z
     9e2:	80 91 cb 01 	lds	r24, 0x01CB
     9e6:	20 81       	ld	r18, Z
     9e8:	81 95       	neg	r24
     9ea:	82 27       	eor	r24, r18
     9ec:	80 71       	andi	r24, 0x10	; 16
     9ee:	89 27       	eor	r24, r25
     9f0:	80 83       	st	Z, r24
	
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	08 95       	ret

000009fc <set_vco_init_cv>:
volatile uint16_t vco2_init_cv = 0;

uint16_t vco1_pitch_table[128] = {0};
uint16_t vco2_pitch_table[128] = {0};
	
uint16_t set_vco_init_cv(uint8_t vco) {
     9fc:	2f 92       	push	r2
     9fe:	3f 92       	push	r3
     a00:	4f 92       	push	r4
     a02:	5f 92       	push	r5
     a04:	6f 92       	push	r6
     a06:	7f 92       	push	r7
     a08:	8f 92       	push	r8
     a0a:	9f 92       	push	r9
     a0c:	af 92       	push	r10
     a0e:	bf 92       	push	r11
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	28 97       	sbiw	r28, 0x08	; 8
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
     a30:	08 2f       	mov	r16, r24
	
	display_dec(vco, ONES);
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	68 e0       	ldi	r22, 0x08	; 8
     a36:	0e 94 f6 00 	call	0x1ec	; 0x1ec <display_dec>
	//display_dec(vco, THOUS);
	
	
	
	uint16_t init_cv = 0;
	 timer1_clock |= (1<<CS11) | (1<<CS10);
     a3a:	80 91 d3 03 	lds	r24, 0x03D3
     a3e:	83 60       	ori	r24, 0x03	; 3
     a40:	80 93 d3 03 	sts	0x03D3, r24
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     a44:	80 e2       	ldi	r24, 0x20	; 32
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     a50:	82 e3       	ldi	r24, 0x32	; 50
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     a5c:	84 e3       	ldi	r24, 0x34	; 52
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     a68:	82 eb       	ldi	r24, 0xB2	; 178
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     a74:	84 e2       	ldi	r24, 0x24	; 36
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     a80:	8e e2       	ldi	r24, 0x2E	; 46
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     a8c:	80 e3       	ldi	r24, 0x30	; 48
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     a98:	82 e1       	ldi	r24, 0x12	; 18
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     aa4:	8c e1       	ldi	r24, 0x1C	; 28
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     ab0:	84 e1       	ldi	r24, 0x14	; 20
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     abc:	86 e1       	ldi	r24, 0x16	; 22
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     ac8:	88 e1       	ldi	r24, 0x18	; 24
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	6f ef       	ldi	r22, 0xFF	; 255
     ace:	7f e3       	ldi	r23, 0x3F	; 63
     ad0:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     ad4:	8a e1       	ldi	r24, 0x1A	; 26
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     ae0:	82 e2       	ldi	r24, 0x22	; 34
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     aec:	8c e0       	ldi	r24, 0x0C	; 12
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     af8:	88 e0       	ldi	r24, 0x08	; 8
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     b04:	84 e0       	ldi	r24, 0x04	; 4
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	6f ef       	ldi	r22, 0xFF	; 255
     b0a:	7f e3       	ldi	r23, 0x3F	; 63
     b0c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     b1c:	80 e1       	ldi	r24, 0x10	; 16
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;
	
	
	
	count_finished = FALSE;
     b28:	10 92 d2 03 	sts	0x03D2, r1
	if (vco == VCO1) { //turn on VCO1 pulse
     b2c:	00 23       	and	r16, r16
     b2e:	d1 f4       	brne	.+52     	; 0xb64 <set_vco_init_cv+0x168>
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_PULSE);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     b30:	0f 2e       	mov	r0, r31
     b32:	fc e3       	ldi	r31, 0x3C	; 60
     b34:	6f 2e       	mov	r6, r31
     b36:	f1 e0       	ldi	r31, 0x01	; 1
     b38:	7f 2e       	mov	r7, r31
     b3a:	f0 2d       	mov	r31, r0
		//this will change in v1.1 of analog board when comparator is used to generate pulse for T0 pin
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_PULSE);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     b3c:	0f 2e       	mov	r0, r31
     b3e:	fc e2       	ldi	r31, 0x2C	; 44
     b40:	4f 2e       	mov	r4, r31
     b42:	f1 e0       	ldi	r31, 0x01	; 1
     b44:	5f 2e       	mov	r5, r31
     b46:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//this will change in v1.1 of analog board when comparator is used to generate pulse for T0 pin
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_PULSE);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     b48:	0f 2e       	mov	r0, r31
     b4a:	f6 e3       	ldi	r31, 0x36	; 54
     b4c:	2f 2e       	mov	r2, r31
     b4e:	f1 e0       	ldi	r31, 0x01	; 1
     b50:	3f 2e       	mov	r3, r31
     b52:	f0 2d       	mov	r31, r0
	count_finished = FALSE;
	if (vco == VCO1) { //turn on VCO1 pulse
		//this will change in v1.1 of analog board when comparator is used to generate pulse for T0 pin
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_PULSE);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     b54:	08 e2       	ldi	r16, 0x28	; 40
     b56:	11 e0       	ldi	r17, 0x01	; 1
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = 38222;//38222; //MIDI note C0
     b58:	2e e4       	ldi	r18, 0x4E	; 78
     b5a:	35 e9       	ldi	r19, 0x95	; 149
     b5c:	3e 83       	std	Y+6, r19	; 0x06
     b5e:	2d 83       	std	Y+5, r18	; 0x05
	
	count_finished = FALSE;
	if (vco == VCO1) { //turn on VCO1 pulse
		//this will change in v1.1 of analog board when comparator is used to generate pulse for T0 pin
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_PULSE);
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	19 c0       	rjmp	.+50     	; 0xb96 <set_vco_init_cv+0x19a>
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_PULSE);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     b64:	0f 2e       	mov	r0, r31
     b66:	fa e3       	ldi	r31, 0x3A	; 58
     b68:	6f 2e       	mov	r6, r31
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	7f 2e       	mov	r7, r31
     b6e:	f0 2d       	mov	r31, r0
		
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_PULSE);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     b70:	0f 2e       	mov	r0, r31
     b72:	fe e1       	ldi	r31, 0x1E	; 30
     b74:	4f 2e       	mov	r4, r31
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	5f 2e       	mov	r5, r31
     b7a:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse
		
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_PULSE);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     b7c:	0f 2e       	mov	r0, r31
     b7e:	f8 e3       	ldi	r31, 0x38	; 56
     b80:	2f 2e       	mov	r2, r31
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	3f 2e       	mov	r3, r31
     b86:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse
		
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_PULSE);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     b88:	0a e2       	ldi	r16, 0x2A	; 42
     b8a:	11 e0       	ldi	r17, 0x01	; 1
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = 19111;
     b8c:	87 ea       	ldi	r24, 0xA7	; 167
     b8e:	9a e4       	ldi	r25, 0x4A	; 74
     b90:	9e 83       	std	Y+6, r25	; 0x06
     b92:	8d 83       	std	Y+5, r24	; 0x05
		reference_count = 38222;//38222; //MIDI note C0
		
	} else { //turn on VCO2 pulse
		
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_PULSE);
     b94:	80 e2       	ldi	r24, 0x20	; 32
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = 19111;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
     b96:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     b98:	ed ed       	ldi	r30, 0xDD	; 221
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 64       	ori	r24, 0x40	; 64
     ba0:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     ba2:	80 81       	ld	r24, Z
     ba4:	8f 7b       	andi	r24, 0xBF	; 191
     ba6:	80 83       	st	Z, r24
	DATA_BUS = 0;
     ba8:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
     baa:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
     bac:	84 b5       	in	r24, 0x24	; 36
     bae:	8f 60       	ori	r24, 0x0F	; 15
     bb0:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
     bb6:	ee e6       	ldi	r30, 0x6E	; 110
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	90 81       	ld	r25, Z
     bbc:	92 60       	ori	r25, 0x02	; 2
     bbe:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
     bc0:	80 93 d4 03 	sts	0x03D4, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     bc4:	ed e0       	ldi	r30, 0x0D	; 13
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	fa 83       	std	Y+2, r31	; 0x02
     bca:	e9 83       	std	Y+1, r30	; 0x01
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
     bcc:	0f 2e       	mov	r0, r31
     bce:	f0 e2       	ldi	r31, 0x20	; 32
     bd0:	ef 2e       	mov	r14, r31
     bd2:	f1 e0       	ldi	r31, 0x01	; 1
     bd4:	ff 2e       	mov	r15, r31
     bd6:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
     bd8:	0f 2e       	mov	r0, r31
     bda:	f8 e1       	ldi	r31, 0x18	; 24
     bdc:	cf 2e       	mov	r12, r31
     bde:	f1 e0       	ldi	r31, 0x01	; 1
     be0:	df 2e       	mov	r13, r31
     be2:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
     be4:	0f 2e       	mov	r0, r31
     be6:	f4 e0       	ldi	r31, 0x04	; 4
     be8:	af 2e       	mov	r10, r31
     bea:	f1 e0       	ldi	r31, 0x01	; 1
     bec:	bf 2e       	mov	r11, r31
     bee:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     bf0:	0f 2e       	mov	r0, r31
     bf2:	f6 e0       	ldi	r31, 0x06	; 6
     bf4:	8f 2e       	mov	r8, r31
     bf6:	f1 e0       	ldi	r31, 0x01	; 1
     bf8:	9f 2e       	mov	r9, r31
     bfa:	f0 2d       	mov	r31, r0
			
		}
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE not AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count >= reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
		no_overflow = TRUE;
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	38 87       	std	Y+8, r19	; 0x08
     c02:	2f 83       	std	Y+7, r18	; 0x07
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	09 80       	ldd	r0, Y+1	; 0x01
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <set_vco_init_cv+0x214>
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	0a 94       	dec	r0
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <set_vco_init_cv+0x210>
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	8b 83       	std	Y+3, r24	; 0x03
     c18:	ef 81       	ldd	r30, Y+7	; 0x07
     c1a:	f8 85       	ldd	r31, Y+8	; 0x08
     c1c:	e8 2b       	or	r30, r24
     c1e:	f9 2b       	or	r31, r25
     c20:	f8 87       	std	Y+8, r31	; 0x08
     c22:	ef 83       	std	Y+7, r30	; 0x07
		
		set_control_voltage(vco_init_cv, init_cv);
     c24:	c8 01       	movw	r24, r16
     c26:	bf 01       	movw	r22, r30
     c28:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
		
		
		count_finished = FALSE;
     c2c:	10 92 d2 03 	sts	0x03D2, r1
		period_counter = 0;
     c30:	10 92 d5 03 	sts	0x03D5, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     c34:	80 91 d2 03 	lds	r24, 0x03D2
     c38:	88 23       	and	r24, r24
     c3a:	61 f5       	brne	.+88     	; 0xc94 <set_vco_init_cv+0x298>
			
			set_control_voltage(vco_init_cv, init_cv);
     c3c:	c8 01       	movw	r24, r16
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
     c46:	c2 01       	movw	r24, r4
     c48:	6f ef       	ldi	r22, 0xFF	; 255
     c4a:	7f e3       	ldi	r23, 0x3F	; 63
     c4c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
     c50:	c7 01       	movw	r24, r14
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
     c5a:	c6 01       	movw	r24, r12
     c5c:	6f ef       	ldi	r22, 0xFF	; 255
     c5e:	7f e3       	ldi	r23, 0x3F	; 63
     c60:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
     c64:	c5 01       	movw	r24, r10
     c66:	6f ef       	ldi	r22, 0xFF	; 255
     c68:	7f e3       	ldi	r23, 0x3F	; 63
     c6a:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     c6e:	c4 01       	movw	r24, r8
     c70:	6f ef       	ldi	r22, 0xFF	; 255
     c72:	7f e3       	ldi	r23, 0x3F	; 63
     c74:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
     c78:	c1 01       	movw	r24, r2
     c7a:	6f ef       	ldi	r22, 0xFF	; 255
     c7c:	7f e3       	ldi	r23, 0x3F	; 63
     c7e:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
     c82:	c3 01       	movw	r24, r6
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
		
		count_finished = FALSE;
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     c8c:	80 91 d2 03 	lds	r24, 0x03D2
     c90:	88 23       	and	r24, r24
     c92:	a1 f2       	breq	.-88     	; 0xc3c <set_vco_init_cv+0x240>
			set_control_voltage(vco_pitch_cv, 0);	
			
		}
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE not AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count >= reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
     c94:	80 91 d0 03 	lds	r24, 0x03D0
     c98:	90 91 d1 03 	lds	r25, 0x03D1
     c9c:	ed 81       	ldd	r30, Y+5	; 0x05
     c9e:	fe 81       	ldd	r31, Y+6	; 0x06
     ca0:	8e 17       	cp	r24, r30
     ca2:	9f 07       	cpc	r25, r31
     ca4:	20 f4       	brcc	.+8      	; 0xcae <set_vco_init_cv+0x2b2>
     ca6:	80 91 ae 01 	lds	r24, 0x01AE
     caa:	88 23       	and	r24, r24
     cac:	51 f4       	brne	.+20     	; 0xcc2 <set_vco_init_cv+0x2c6>
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	80 95       	com	r24
     cb4:	90 95       	com	r25
     cb6:	2f 81       	ldd	r18, Y+7	; 0x07
     cb8:	38 85       	ldd	r19, Y+8	; 0x08
     cba:	28 23       	and	r18, r24
     cbc:	39 23       	and	r19, r25
     cbe:	38 87       	std	Y+8, r19	; 0x08
     cc0:	2f 83       	std	Y+7, r18	; 0x07
		no_overflow = TRUE;
     cc2:	31 e0       	ldi	r19, 0x01	; 1
     cc4:	30 93 ae 01 	sts	0x01AE, r19
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	ef ef       	ldi	r30, 0xFF	; 255
     cd4:	8f 3f       	cpi	r24, 0xFF	; 255
     cd6:	9e 07       	cpc	r25, r30
     cd8:	09 f0       	breq	.+2      	; 0xcdc <set_vco_init_cv+0x2e0>
     cda:	94 cf       	rjmp	.-216    	; 0xc04 <set_vco_init_cv+0x208>
     cdc:	2f 81       	ldd	r18, Y+7	; 0x07
     cde:	38 85       	ldd	r19, Y+8	; 0x08
     ce0:	3c 83       	std	Y+4, r19	; 0x04
     ce2:	2b 83       	std	Y+3, r18	; 0x03
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
     cfc:	88 e1       	ldi	r24, 0x18	; 24
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
     d08:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
     d0a:	ee e6       	ldi	r30, 0x6E	; 110
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8d 7f       	andi	r24, 0xFD	; 253
     d12:	80 83       	st	Z, r24
	
	return init_cv;
	
}
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	28 96       	adiw	r28, 0x08	; 8
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	bf 90       	pop	r11
     d36:	af 90       	pop	r10
     d38:	9f 90       	pop	r9
     d3a:	8f 90       	pop	r8
     d3c:	7f 90       	pop	r7
     d3e:	6f 90       	pop	r6
     d40:	5f 90       	pop	r5
     d42:	4f 90       	pop	r4
     d44:	3f 90       	pop	r3
     d46:	2f 90       	pop	r2
     d48:	08 95       	ret

00000d4a <tune_octave>:

void tune_octave(uint8_t octave) {
     d4a:	2f 92       	push	r2
     d4c:	3f 92       	push	r3
     d4e:	4f 92       	push	r4
     d50:	5f 92       	push	r5
     d52:	6f 92       	push	r6
     d54:	7f 92       	push	r7
     d56:	8f 92       	push	r8
     d58:	9f 92       	push	r9
     d5a:	af 92       	push	r10
     d5c:	bf 92       	push	r11
     d5e:	cf 92       	push	r12
     d60:	df 92       	push	r13
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	ae 97       	sbiw	r28, 0x2e	; 46
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	e8 2e       	mov	r14, r24
	
	display_dec(octave, ONES);
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	68 e0       	ldi	r22, 0x08	; 8
     d84:	0e 94 f6 00 	call	0x1ec	; 0x1ec <display_dec>
	//display_dec(octave, TENS);
	//display_dec(octave, HUNDS);
	//display_dec(octave, THOUS);
	
	uint16_t pitch_reference[12] = { //holds the 2.5MHz counts for each note within an octave independent of octave # being tuned
     d88:	de 01       	movw	r26, r28
     d8a:	11 96       	adiw	r26, 0x01	; 1
     d8c:	ec e8       	ldi	r30, 0x8C	; 140
     d8e:	f1 e0       	ldi	r31, 0x01	; 1
     d90:	88 e1       	ldi	r24, 0x18	; 24
     d92:	01 90       	ld	r0, Z+
     d94:	0d 92       	st	X+, r0
     d96:	81 50       	subi	r24, 0x01	; 1
     d98:	e1 f7       	brne	.-8      	; 0xd92 <tune_octave+0x48>
	PITCH_Ab,
	PITCH_B
	    
    };
	
	uint8_t period_table[10] = {1, 2, 4, 1, 2, 4, 8, 16, 32, 32}; //the number of  periods that need to be counted for octaves 0-9
     d9a:	de 01       	movw	r26, r28
     d9c:	59 96       	adiw	r26, 0x19	; 25
     d9e:	e4 ea       	ldi	r30, 0xA4	; 164
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	8a e0       	ldi	r24, 0x0A	; 10
     da4:	01 90       	ld	r0, Z+
     da6:	0d 92       	st	X+, r0
     da8:	81 50       	subi	r24, 0x01	; 1
     daa:	e1 f7       	brne	.-8      	; 0xda4 <tune_octave+0x5a>
	//ocatves 0-2 use /64 0.312500 MHz timer/counter1 clock rate
	//ocataves 3-8 use /8 2.5 MHz timer/counter1 clock rate
	
	period = period_table[octave]; //set period number to be counted
     dac:	0e 2d       	mov	r16, r14
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	fe 01       	movw	r30, r28
     db2:	e0 0f       	add	r30, r16
     db4:	f1 1f       	adc	r31, r17
     db6:	81 8d       	ldd	r24, Z+25	; 0x19
     db8:	80 93 d4 03 	sts	0x03D4, r24
	
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     dbc:	80 e2       	ldi	r24, 0x20	; 32
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     dc8:	82 e3       	ldi	r24, 0x32	; 50
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     dd4:	84 e3       	ldi	r24, 0x34	; 52
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     de0:	82 eb       	ldi	r24, 0xB2	; 178
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     dec:	84 e2       	ldi	r24, 0x24	; 36
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     df8:	8e e2       	ldi	r24, 0x2E	; 46
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     e04:	80 e3       	ldi	r24, 0x30	; 48
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     e10:	82 e1       	ldi	r24, 0x12	; 18
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     e1c:	8c e1       	ldi	r24, 0x1C	; 28
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     e28:	84 e1       	ldi	r24, 0x14	; 20
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     e34:	86 e1       	ldi	r24, 0x16	; 22
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     e40:	88 e1       	ldi	r24, 0x18	; 24
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	6f ef       	ldi	r22, 0xFF	; 255
     e46:	7f e3       	ldi	r23, 0x3F	; 63
     e48:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     e4c:	8a e1       	ldi	r24, 0x1A	; 26
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     e58:	82 e2       	ldi	r24, 0x22	; 34
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     e64:	8c e0       	ldi	r24, 0x0C	; 12
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     e70:	88 e0       	ldi	r24, 0x08	; 8
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	6f ef       	ldi	r22, 0xFF	; 255
     e82:	7f e3       	ldi	r23, 0x3F	; 63
     e84:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     e94:	80 e1       	ldi	r24, 0x10	; 16
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	

	
	if (octave <= 2) {
     ea0:	22 e0       	ldi	r18, 0x02	; 2
     ea2:	2e 15       	cp	r18, r14
     ea4:	20 f0       	brcs	.+8      	; 0xeae <tune_octave+0x164>
		
		//set timer/counter1 to /64 0.3125 MHz
		timer1_clock = (1<<CS11) | (1<<CS10);
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	80 93 d3 03 	sts	0x03D3, r24
     eac:	03 c0       	rjmp	.+6      	; 0xeb4 <tune_octave+0x16a>
		
	} else {
		
		//set timer/counter1 to /8 2.5 MHz
		timer1_clock = (1<<CS11);
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	80 93 d3 03 	sts	0x03D3, r24
		
	}

	//start with VCO1
	set_control_voltage(&tune_cv, vco1_init_cv);
     eb4:	60 91 ce 03 	lds	r22, 0x03CE
     eb8:	70 91 cf 03 	lds	r23, 0x03CF
     ebc:	88 e2       	ldi	r24, 0x28	; 40
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	
	//latch switch data
	DATA_BUS = (1<<VCO1_PULSE);
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     ec8:	ed ed       	ldi	r30, 0xDD	; 221
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 64       	ori	r24, 0x40	; 64
     ed0:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     ed2:	80 81       	ld	r24, Z
     ed4:	8f 7b       	andi	r24, 0xBF	; 191
     ed6:	80 83       	st	Z, r24
	DATA_BUS = 0;
     ed8:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
     eda:	89 9a       	sbi	0x11, 1	; 17
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
     edc:	84 b5       	in	r24, 0x24	; 36
     ede:	8f 60       	ori	r24, 0x0F	; 15
     ee0:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
     ee6:	ee e6       	ldi	r30, 0x6E	; 110
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	80 83       	st	Z, r24
     ef0:	ce 01       	movw	r24, r28
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	9c a7       	lds	r25, 0x7c
     ef6:	8b a7       	lds	r24, 0x7b
			
		}
		
		//will need to make an excpetion for C0 here as its pitch has already been determined by set_vco_init_cv() and so C0 will be 0V
		//for now maybe just start tuning octaves 1 and up
		vco1_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table			
     ef8:	c8 01       	movw	r24, r16
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	80 0f       	add	r24, r16
     f00:	91 1f       	adc	r25, r17
	
	return init_cv;
	
}

void tune_octave(uint8_t octave) {
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	fc 01       	movw	r30, r24
     f10:	e4 53       	subi	r30, 0x34	; 52
     f12:	fd 4f       	sbci	r31, 0xFD	; 253
     f14:	fe a7       	lds	r31, 0x7e
     f16:	ed a7       	lds	r30, 0x7d
     f18:	9e 01       	movw	r18, r28
     f1a:	27 5e       	subi	r18, 0xE7	; 231
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	3c a3       	lds	r19, 0x5c
     f20:	2b a3       	lds	r18, 0x5b
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
			
			osc_pitch_cv |= (1<<dac_bit);
			set_control_voltage(&vco1_pitch_cv, osc_pitch_cv);
     f22:	0f 2e       	mov	r0, r31
     f24:	fc e3       	ldi	r31, 0x3C	; 60
     f26:	cf 2e       	mov	r12, r31
     f28:	f1 e0       	ldi	r31, 0x01	; 1
     f2a:	df 2e       	mov	r13, r31
     f2c:	f0 2d       	mov	r31, r0
			//} else { //need to update control voltages in busy wait loop

				while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
				set_control_voltage(&vco1_pitch_cv, osc_pitch_cv);
				set_control_voltage(&tune_cv, vco1_init_cv);
     f2e:	0f 2e       	mov	r0, r31
     f30:	f8 e2       	ldi	r31, 0x28	; 40
     f32:	6f 2e       	mov	r6, r31
     f34:	f1 e0       	ldi	r31, 0x01	; 1
     f36:	7f 2e       	mov	r7, r31
     f38:	f0 2d       	mov	r31, r0
				set_control_voltage(&vco1_pw_cv, MAX);
     f3a:	0f 2e       	mov	r0, r31
     f3c:	fc e2       	ldi	r31, 0x2C	; 44
     f3e:	4f 2e       	mov	r4, r31
     f40:	f1 e0       	ldi	r31, 0x01	; 1
     f42:	5f 2e       	mov	r5, r31
     f44:	f0 2d       	mov	r31, r0
				set_control_voltage(&volume_cv, MIN);
     f46:	0f 2e       	mov	r0, r31
     f48:	f0 e2       	ldi	r31, 0x20	; 32
     f4a:	2f 2e       	mov	r2, r31
     f4c:	f1 e0       	ldi	r31, 0x01	; 1
     f4e:	3f 2e       	mov	r3, r31
     f50:	f0 2d       	mov	r31, r0
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
	for (int note_number = 0; note_number <= 11; note_number++) 
		{
		
		uint16_t reference_count = pitch_reference[note_number];
     f52:	eb a5       	lds	r30, 0x6b
     f54:	fc a5       	lds	r31, 0x6c
     f56:	21 91       	ld	r18, Z+
     f58:	31 91       	ld	r19, Z+
     f5a:	fc a7       	lds	r31, 0x7c
     f5c:	eb a7       	lds	r30, 0x7b
     f5e:	3a a7       	lds	r19, 0x7a
     f60:	29 a7       	lds	r18, 0x79
		uint16_t osc_pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     f62:	8d e0       	ldi	r24, 0x0D	; 13
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9e a3       	lds	r25, 0x5e
     f68:	8d a3       	lds	r24, 0x5d
		
	for (int note_number = 0; note_number <= 11; note_number++) 
		{
		
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 0;
     f6a:	ee 24       	eor	r14, r14
     f6c:	ff 24       	eor	r15, r15
				set_control_voltage(&vco1_pitch_cv, osc_pitch_cv);
				set_control_voltage(&tune_cv, vco1_init_cv);
				set_control_voltage(&vco1_pw_cv, MAX);
				set_control_voltage(&volume_cv, MIN);
				set_control_voltage(&cutoff_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
     f6e:	0f 2e       	mov	r0, r31
     f70:	f4 e0       	ldi	r31, 0x04	; 4
     f72:	af 2e       	mov	r10, r31
     f74:	f1 e0       	ldi	r31, 0x01	; 1
     f76:	bf 2e       	mov	r11, r31
     f78:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     f7a:	0f 2e       	mov	r0, r31
     f7c:	f6 e0       	ldi	r31, 0x06	; 6
     f7e:	8f 2e       	mov	r8, r31
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	9f 2e       	mov	r9, r31
     f84:	f0 2d       	mov	r31, r0
		
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
			
			osc_pitch_cv |= (1<<dac_bit);
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	fc 01       	movw	r30, r24
     f8c:	0d a0       	lds	r16, 0x8d
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <tune_octave+0x24a>
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <tune_octave+0x246>
     f98:	f8 a7       	lds	r31, 0x78
     f9a:	ef a3       	lds	r30, 0x5f
     f9c:	ee 2a       	or	r14, r30
     f9e:	ff 2a       	or	r15, r31
			set_control_voltage(&vco1_pitch_cv, osc_pitch_cv);
     fa0:	c6 01       	movw	r24, r12
     fa2:	b7 01       	movw	r22, r14
     fa4:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
			count_finished = FALSE;
     fa8:	10 92 d2 03 	sts	0x03D2, r1
			period_counter = 0;
     fac:	10 92 d5 03 	sts	0x03D5, r1
				//
				//while (count_finished == FALSE) {}
				//
			//} else { //need to update control voltages in busy wait loop

				while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     fb0:	80 91 d2 03 	lds	r24, 0x03D2
     fb4:	88 23       	and	r24, r24
     fb6:	81 f5       	brne	.+96     	; 0x1018 <tune_octave+0x2ce>
				set_control_voltage(&vco1_pw_cv, MAX);
				set_control_voltage(&volume_cv, MIN);
				set_control_voltage(&cutoff_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
				set_control_voltage(&vco1_mix_cv, MAX);
     fb8:	06 e3       	ldi	r16, 0x36	; 54
     fba:	11 e0       	ldi	r17, 0x01	; 1
				//
			//} else { //need to update control voltages in busy wait loop

				while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
				set_control_voltage(&vco1_pitch_cv, osc_pitch_cv);
     fbc:	c6 01       	movw	r24, r12
     fbe:	b7 01       	movw	r22, r14
     fc0:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				set_control_voltage(&tune_cv, vco1_init_cv);
     fc4:	60 91 ce 03 	lds	r22, 0x03CE
     fc8:	70 91 cf 03 	lds	r23, 0x03CF
     fcc:	c3 01       	movw	r24, r6
     fce:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				set_control_voltage(&vco1_pw_cv, MAX);
     fd2:	c2 01       	movw	r24, r4
     fd4:	6f ef       	ldi	r22, 0xFF	; 255
     fd6:	7f e3       	ldi	r23, 0x3F	; 63
     fd8:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);
     fdc:	c1 01       	movw	r24, r2
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				set_control_voltage(&cutoff_cv, MAX);
     fe6:	88 e1       	ldi	r24, 0x18	; 24
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	6f ef       	ldi	r22, 0xFF	; 255
     fec:	7f e3       	ldi	r23, 0x3F	; 63
     fee:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
     ff2:	c5 01       	movw	r24, r10
     ff4:	6f ef       	ldi	r22, 0xFF	; 255
     ff6:	7f e3       	ldi	r23, 0x3F	; 63
     ff8:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     ffc:	c4 01       	movw	r24, r8
     ffe:	6f ef       	ldi	r22, 0xFF	; 255
    1000:	7f e3       	ldi	r23, 0x3F	; 63
    1002:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				set_control_voltage(&vco1_mix_cv, MAX);
    1006:	c8 01       	movw	r24, r16
    1008:	6f ef       	ldi	r22, 0xFF	; 255
    100a:	7f e3       	ldi	r23, 0x3F	; 63
    100c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				//
				//while (count_finished == FALSE) {}
				//
			//} else { //need to update control voltages in busy wait loop

				while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1010:	80 91 d2 03 	lds	r24, 0x03D2
    1014:	88 23       	and	r24, r24
    1016:	91 f2       	breq	.-92     	; 0xfbc <tune_octave+0x272>
				}					
				
			//}

			//if the period timer is less than the reference count and an overflow did not occur then the pitch is too high so clear last bit set
			if ((osc_count <= reference_count)  && (no_overflow == TRUE)) osc_pitch_cv &= ~(1 << dac_bit);
    1018:	80 91 d0 03 	lds	r24, 0x03D0
    101c:	90 91 d1 03 	lds	r25, 0x03D1
    1020:	29 a5       	lds	r18, 0x69
    1022:	3a a5       	lds	r19, 0x6a
    1024:	28 17       	cp	r18, r24
    1026:	39 07       	cpc	r19, r25
    1028:	50 f0       	brcs	.+20     	; 0x103e <tune_octave+0x2f4>
    102a:	80 91 ae 01 	lds	r24, 0x01AE
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	31 f4       	brne	.+12     	; 0x103e <tune_octave+0x2f4>
    1032:	8f a1       	lds	r24, 0x4f
    1034:	98 a5       	lds	r25, 0x68
    1036:	80 95       	com	r24
    1038:	90 95       	com	r25
    103a:	e8 22       	and	r14, r24
    103c:	f9 22       	and	r15, r25
			no_overflow = TRUE;			
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	80 93 ae 01 	sts	0x01AE, r24
	for (int note_number = 0; note_number <= 11; note_number++) 
		{
		
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1044:	8d a1       	lds	r24, 0x4d
    1046:	9e a1       	lds	r25, 0x4e
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	9e a3       	lds	r25, 0x5e
    104c:	8d a3       	lds	r24, 0x5d
    104e:	ef ef       	ldi	r30, 0xFF	; 255
    1050:	8f 3f       	cpi	r24, 0xFF	; 255
    1052:	9e 07       	cpc	r25, r30
    1054:	09 f0       	breq	.+2      	; 0x1058 <tune_octave+0x30e>
    1056:	97 cf       	rjmp	.-210    	; 0xf86 <tune_octave+0x23c>
			
		}
		
		//will need to make an excpetion for C0 here as its pitch has already been determined by set_vco_init_cv() and so C0 will be 0V
		//for now maybe just start tuning octaves 1 and up
		vco1_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table			
    1058:	ed a5       	lds	r30, 0x6d
    105a:	fe a5       	lds	r31, 0x6e
    105c:	e1 92       	st	Z+, r14
    105e:	f1 92       	st	Z+, r15
    1060:	fe a7       	lds	r31, 0x7e
    1062:	ed a7       	lds	r30, 0x7d
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
	for (int note_number = 0; note_number <= 11; note_number++) 
    1064:	2b a5       	lds	r18, 0x6b
    1066:	3c a5       	lds	r19, 0x6c
    1068:	8b a1       	lds	r24, 0x4b
    106a:	9c a1       	lds	r25, 0x4c
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	09 f0       	breq	.+2      	; 0x1074 <tune_octave+0x32a>
    1072:	6f cf       	rjmp	.-290    	; 0xf52 <tune_octave+0x208>
		vco1_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table			
		
		
	}
	
	PORTF &= ~(1<<GATE); //turn gate off
    1074:	89 98       	cbi	0x11, 1	; 17
		
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1076:	ee e6       	ldi	r30, 0x6E	; 110
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8d 7f       	andi	r24, 0xFD	; 253
    107e:	80 83       	st	Z, r24
	
	
    1080:	ae 96       	adiw	r28, 0x2e	; 46
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	df 90       	pop	r13
    109a:	cf 90       	pop	r12
    109c:	bf 90       	pop	r11
    109e:	af 90       	pop	r10
    10a0:	9f 90       	pop	r9
    10a2:	8f 90       	pop	r8
    10a4:	7f 90       	pop	r7
    10a6:	6f 90       	pop	r6
    10a8:	5f 90       	pop	r5
    10aa:	4f 90       	pop	r4
    10ac:	3f 90       	pop	r3
    10ae:	2f 90       	pop	r2
    10b0:	08 95       	ret

000010b2 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    10b2:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    10b4:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    10b6:	74 83       	std	Z+4, r23	; 0x04
    10b8:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    10ba:	11 82       	std	Z+1, r1	; 0x01
    10bc:	10 82       	st	Z, r1
}
    10be:	08 95       	ret

000010c0 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ec 01       	movw	r28, r24
    10c8:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    10ca:	0e 94 cf 08 	call	0x119e	; 0x119e <store_and_clear_interrupt>
    10ce:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    10d0:	39 81       	ldd	r19, Y+1	; 0x01
    10d2:	83 2f       	mov	r24, r19
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	6a 81       	ldd	r22, Y+2	; 0x02
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divmodhi4>
    10e0:	48 81       	ld	r20, Y
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	84 17       	cp	r24, r20
    10e6:	95 07       	cpc	r25, r21
    10e8:	29 f4       	brne	.+10     	; 0x10f4 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    10ea:	82 2f       	mov	r24, r18
    10ec:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <restore_interrupt_setting>
      return false;
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	11 c0       	rjmp	.+34     	; 0x1116 <__stack+0x17>
   } else {
      queue->data[queue->end] = item;
    10f4:	eb 81       	ldd	r30, Y+3	; 0x03
    10f6:	fc 81       	ldd	r31, Y+4	; 0x04
    10f8:	e3 0f       	add	r30, r19
    10fa:	f1 1d       	adc	r31, r1
    10fc:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	6a 81       	ldd	r22, Y+2	; 0x02
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divmodhi4>
    110c:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    110e:	82 2f       	mov	r24, r18
    1110:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <restore_interrupt_setting>
      return true;
    1114:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	08 95       	ret

0000111e <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1124:	0e 94 cf 08 	call	0x119e	; 0x119e <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1128:	29 81       	ldd	r18, Y+1	; 0x01
    112a:	98 81       	ld	r25, Y
    112c:	29 17       	cp	r18, r25
    112e:	18 f0       	brcs	.+6      	; 0x1136 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1130:	c2 2f       	mov	r28, r18
    1132:	c9 1b       	sub	r28, r25
    1134:	03 c0       	rjmp	.+6      	; 0x113c <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    1136:	ca 81       	ldd	r28, Y+2	; 0x02
    1138:	c2 0f       	add	r28, r18
    113a:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    113c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <restore_interrupt_setting>
   return len;
}
    1140:	8c 2f       	mov	r24, r28
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1148:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    114a:	20 81       	ld	r18, Z
    114c:	86 2f       	mov	r24, r22
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	82 0f       	add	r24, r18
    1152:	91 1d       	adc	r25, r1
    1154:	62 81       	ldd	r22, Z+2	; 0x02
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divmodhi4>
    115c:	03 80       	ldd	r0, Z+3	; 0x03
    115e:	f4 81       	ldd	r31, Z+4	; 0x04
    1160:	e0 2d       	mov	r30, r0
    1162:	e8 0f       	add	r30, r24
    1164:	f9 1f       	adc	r31, r25
}
    1166:	80 81       	ld	r24, Z
    1168:	08 95       	ret

0000116a <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
    1172:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1174:	0e 94 cf 08 	call	0x119e	; 0x119e <store_and_clear_interrupt>
    1178:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    117a:	88 81       	ld	r24, Y
    117c:	21 2f       	mov	r18, r17
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	28 0f       	add	r18, r24
    1182:	31 1d       	adc	r19, r1
    1184:	6a 81       	ldd	r22, Y+2	; 0x02
    1186:	c9 01       	movw	r24, r18
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__divmodhi4>
    118e:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1190:	84 2f       	mov	r24, r20
    1192:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <restore_interrupt_setting>
}
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	08 95       	ret

0000119e <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    119e:	8f b7       	in	r24, 0x3f	; 63
   cli();
    11a0:	f8 94       	cli
   return sreg;
}
    11a2:	08 95       	ret

000011a4 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    11a4:	8f bf       	out	0x3f, r24	; 63
}
    11a6:	08 95       	ret

000011a8 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    11a8:	88 1f       	adc	r24, r24
    11aa:	88 27       	eor	r24, r24
    11ac:	88 1f       	adc	r24, r24
    11ae:	08 95       	ret

000011b0 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	88 3f       	cpi	r24, 0xF8	; 248
    11b4:	08 f4       	brcc	.+2      	; 0x11b8 <midi_is_realtime+0x8>
    11b6:	90 e0       	ldi	r25, 0x00	; 0
}
    11b8:	89 2f       	mov	r24, r25
    11ba:	08 95       	ret

000011bc <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	20 7f       	andi	r18, 0xF0	; 240
    11c2:	30 70       	andi	r19, 0x00	; 0
    11c4:	20 3c       	cpi	r18, 0xC0	; 192
    11c6:	31 05       	cpc	r19, r1
    11c8:	e9 f1       	breq	.+122    	; 0x1244 <midi_packet_length+0x88>
    11ca:	21 3c       	cpi	r18, 0xC1	; 193
    11cc:	31 05       	cpc	r19, r1
    11ce:	8c f4       	brge	.+34     	; 0x11f2 <midi_packet_length+0x36>
    11d0:	20 39       	cpi	r18, 0x90	; 144
    11d2:	31 05       	cpc	r19, r1
    11d4:	e1 f0       	breq	.+56     	; 0x120e <midi_packet_length+0x52>
    11d6:	21 39       	cpi	r18, 0x91	; 145
    11d8:	31 05       	cpc	r19, r1
    11da:	24 f4       	brge	.+8      	; 0x11e4 <midi_packet_length+0x28>
    11dc:	20 38       	cpi	r18, 0x80	; 128
    11de:	31 05       	cpc	r19, r1
    11e0:	79 f5       	brne	.+94     	; 0x1240 <midi_packet_length+0x84>
    11e2:	15 c0       	rjmp	.+42     	; 0x120e <midi_packet_length+0x52>
    11e4:	20 3a       	cpi	r18, 0xA0	; 160
    11e6:	31 05       	cpc	r19, r1
    11e8:	91 f0       	breq	.+36     	; 0x120e <midi_packet_length+0x52>
    11ea:	20 3b       	cpi	r18, 0xB0	; 176
    11ec:	31 05       	cpc	r19, r1
    11ee:	41 f5       	brne	.+80     	; 0x1240 <midi_packet_length+0x84>
    11f0:	0e c0       	rjmp	.+28     	; 0x120e <midi_packet_length+0x52>
    11f2:	20 3e       	cpi	r18, 0xE0	; 224
    11f4:	31 05       	cpc	r19, r1
    11f6:	59 f0       	breq	.+22     	; 0x120e <midi_packet_length+0x52>
    11f8:	21 3e       	cpi	r18, 0xE1	; 225
    11fa:	31 05       	cpc	r19, r1
    11fc:	24 f4       	brge	.+8      	; 0x1206 <midi_packet_length+0x4a>
    11fe:	20 3d       	cpi	r18, 0xD0	; 208
    1200:	31 05       	cpc	r19, r1
    1202:	f1 f4       	brne	.+60     	; 0x1240 <midi_packet_length+0x84>
    1204:	1f c0       	rjmp	.+62     	; 0x1244 <midi_packet_length+0x88>
    1206:	20 3f       	cpi	r18, 0xF0	; 240
    1208:	31 05       	cpc	r19, r1
    120a:	d1 f4       	brne	.+52     	; 0x1240 <midi_packet_length+0x84>
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    1212:	86 3f       	cpi	r24, 0xF6	; 246
    1214:	79 f0       	breq	.+30     	; 0x1234 <midi_packet_length+0x78>
    1216:	87 3f       	cpi	r24, 0xF7	; 247
    1218:	38 f4       	brcc	.+14     	; 0x1228 <midi_packet_length+0x6c>
    121a:	82 3f       	cpi	r24, 0xF2	; 242
    121c:	a9 f0       	breq	.+42     	; 0x1248 <midi_packet_length+0x8c>
    121e:	83 3f       	cpi	r24, 0xF3	; 243
    1220:	59 f0       	breq	.+22     	; 0x1238 <midi_packet_length+0x7c>
    1222:	81 3f       	cpi	r24, 0xF1	; 241
    1224:	59 f4       	brne	.+22     	; 0x123c <midi_packet_length+0x80>
    1226:	08 c0       	rjmp	.+16     	; 0x1238 <midi_packet_length+0x7c>
    1228:	88 3f       	cpi	r24, 0xF8	; 248
    122a:	40 f0       	brcs	.+16     	; 0x123c <midi_packet_length+0x80>
    122c:	8d 3f       	cpi	r24, 0xFD	; 253
    122e:	10 f0       	brcs	.+4      	; 0x1234 <midi_packet_length+0x78>
    1230:	8e 3f       	cpi	r24, 0xFE	; 254
    1232:	20 f0       	brcs	.+8      	; 0x123c <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1248:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    124a:	08 95       	ret

0000124c <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    124c:	0f 93       	push	r16
    124e:	34 2f       	mov	r19, r20
    1250:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1252:	46 2f       	mov	r20, r22
    1254:	4f 70       	andi	r20, 0x0F	; 15
    1256:	40 6b       	ori	r20, 0xB0	; 176
    1258:	23 2f       	mov	r18, r19
    125a:	2f 77       	andi	r18, 0x7F	; 127
    125c:	0f 77       	andi	r16, 0x7F	; 127
    125e:	dc 01       	movw	r26, r24
    1260:	ed 91       	ld	r30, X+
    1262:	fc 91       	ld	r31, X
    1264:	63 e0       	ldi	r22, 0x03	; 3
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    126a:	0f 91       	pop	r16
    126c:	08 95       	ret

0000126e <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    126e:	0f 93       	push	r16
    1270:	34 2f       	mov	r19, r20
    1272:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1274:	46 2f       	mov	r20, r22
    1276:	4f 70       	andi	r20, 0x0F	; 15
    1278:	40 69       	ori	r20, 0x90	; 144
    127a:	23 2f       	mov	r18, r19
    127c:	2f 77       	andi	r18, 0x7F	; 127
    127e:	0f 77       	andi	r16, 0x7F	; 127
    1280:	dc 01       	movw	r26, r24
    1282:	ed 91       	ld	r30, X+
    1284:	fc 91       	ld	r31, X
    1286:	63 e0       	ldi	r22, 0x03	; 3
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1290:	0f 93       	push	r16
    1292:	34 2f       	mov	r19, r20
    1294:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1296:	46 2f       	mov	r20, r22
    1298:	4f 70       	andi	r20, 0x0F	; 15
    129a:	40 68       	ori	r20, 0x80	; 128
    129c:	23 2f       	mov	r18, r19
    129e:	2f 77       	andi	r18, 0x7F	; 127
    12a0:	0f 77       	andi	r16, 0x7F	; 127
    12a2:	dc 01       	movw	r26, r24
    12a4:	ed 91       	ld	r30, X+
    12a6:	fc 91       	ld	r31, X
    12a8:	63 e0       	ldi	r22, 0x03	; 3
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    12ae:	0f 91       	pop	r16
    12b0:	08 95       	ret

000012b2 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    12b2:	0f 93       	push	r16
    12b4:	34 2f       	mov	r19, r20
    12b6:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    12b8:	46 2f       	mov	r20, r22
    12ba:	4f 70       	andi	r20, 0x0F	; 15
    12bc:	40 6a       	ori	r20, 0xA0	; 160
    12be:	23 2f       	mov	r18, r19
    12c0:	2f 77       	andi	r18, 0x7F	; 127
    12c2:	0f 77       	andi	r16, 0x7F	; 127
    12c4:	dc 01       	movw	r26, r24
    12c6:	ed 91       	ld	r30, X+
    12c8:	fc 91       	ld	r31, X
    12ca:	63 e0       	ldi	r22, 0x03	; 3
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    12d0:	0f 91       	pop	r16
    12d2:	08 95       	ret

000012d4 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    12d8:	20 e2       	ldi	r18, 0x20	; 32
    12da:	40 30       	cpi	r20, 0x00	; 0
    12dc:	52 07       	cpc	r21, r18
    12de:	44 f4       	brge	.+16     	; 0x12f0 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    12e0:	a0 ee       	ldi	r26, 0xE0	; 224
    12e2:	40 30       	cpi	r20, 0x00	; 0
    12e4:	5a 07       	cpc	r21, r26
    12e6:	3c f0       	brlt	.+14     	; 0x12f6 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    12e8:	8a 01       	movw	r16, r20
    12ea:	00 50       	subi	r16, 0x00	; 0
    12ec:	10 4e       	sbci	r17, 0xE0	; 224
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    12f0:	0f ef       	ldi	r16, 0xFF	; 255
    12f2:	1f e3       	ldi	r17, 0x3F	; 63
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    12f6:	00 e0       	ldi	r16, 0x00	; 0
    12f8:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    12fa:	46 2f       	mov	r20, r22
    12fc:	4f 70       	andi	r20, 0x0F	; 15
    12fe:	40 6e       	ori	r20, 0xE0	; 224
    1300:	20 2f       	mov	r18, r16
    1302:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1304:	00 0f       	add	r16, r16
    1306:	01 2f       	mov	r16, r17
    1308:	00 1f       	adc	r16, r16
    130a:	11 0b       	sbc	r17, r17
    130c:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    130e:	0f 77       	andi	r16, 0x7F	; 127
    1310:	dc 01       	movw	r26, r24
    1312:	ed 91       	ld	r30, X+
    1314:	fc 91       	ld	r31, X
    1316:	63 e0       	ldi	r22, 0x03	; 3
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	08 95       	ret

00001322 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1322:	0f 93       	push	r16
    1324:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1326:	46 2f       	mov	r20, r22
    1328:	4f 70       	andi	r20, 0x0F	; 15
    132a:	40 6c       	ori	r20, 0xC0	; 192
    132c:	2f 77       	andi	r18, 0x7F	; 127
    132e:	dc 01       	movw	r26, r24
    1330:	ed 91       	ld	r30, X+
    1332:	fc 91       	ld	r31, X
    1334:	62 e0       	ldi	r22, 0x02	; 2
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	00 e0       	ldi	r16, 0x00	; 0
    133a:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    133c:	0f 91       	pop	r16
    133e:	08 95       	ret

00001340 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1340:	0f 93       	push	r16
    1342:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1344:	46 2f       	mov	r20, r22
    1346:	4f 70       	andi	r20, 0x0F	; 15
    1348:	40 6d       	ori	r20, 0xD0	; 208
    134a:	2f 77       	andi	r18, 0x7F	; 127
    134c:	dc 01       	movw	r26, r24
    134e:	ed 91       	ld	r30, X+
    1350:	fc 91       	ld	r31, X
    1352:	62 e0       	ldi	r22, 0x02	; 2
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	00 e0       	ldi	r16, 0x00	; 0
    1358:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    135a:	0f 91       	pop	r16
    135c:	08 95       	ret

0000135e <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    135e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1360:	dc 01       	movw	r26, r24
    1362:	ed 91       	ld	r30, X+
    1364:	fc 91       	ld	r31, X
    1366:	61 e0       	ldi	r22, 0x01	; 1
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	48 ef       	ldi	r20, 0xF8	; 248
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	00 e0       	ldi	r16, 0x00	; 0
    1370:	09 95       	icall
}
    1372:	0f 91       	pop	r16
    1374:	08 95       	ret

00001376 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1376:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1378:	dc 01       	movw	r26, r24
    137a:	ed 91       	ld	r30, X+
    137c:	fc 91       	ld	r31, X
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	49 ef       	ldi	r20, 0xF9	; 249
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	00 e0       	ldi	r16, 0x00	; 0
    1388:	09 95       	icall
}
    138a:	0f 91       	pop	r16
    138c:	08 95       	ret

0000138e <midi_send_start>:

void midi_send_start(MidiDevice * device){
    138e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1390:	dc 01       	movw	r26, r24
    1392:	ed 91       	ld	r30, X+
    1394:	fc 91       	ld	r31, X
    1396:	61 e0       	ldi	r22, 0x01	; 1
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	4a ef       	ldi	r20, 0xFA	; 250
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	00 e0       	ldi	r16, 0x00	; 0
    13a0:	09 95       	icall
}
    13a2:	0f 91       	pop	r16
    13a4:	08 95       	ret

000013a6 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    13a6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    13a8:	dc 01       	movw	r26, r24
    13aa:	ed 91       	ld	r30, X+
    13ac:	fc 91       	ld	r31, X
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	4b ef       	ldi	r20, 0xFB	; 251
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	00 e0       	ldi	r16, 0x00	; 0
    13b8:	09 95       	icall
}
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    13be:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    13c0:	dc 01       	movw	r26, r24
    13c2:	ed 91       	ld	r30, X+
    13c4:	fc 91       	ld	r31, X
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	4c ef       	ldi	r20, 0xFC	; 252
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	00 e0       	ldi	r16, 0x00	; 0
    13d0:	09 95       	icall
}
    13d2:	0f 91       	pop	r16
    13d4:	08 95       	ret

000013d6 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    13d6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    13d8:	dc 01       	movw	r26, r24
    13da:	ed 91       	ld	r30, X+
    13dc:	fc 91       	ld	r31, X
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	4e ef       	ldi	r20, 0xFE	; 254
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	00 e0       	ldi	r16, 0x00	; 0
    13e8:	09 95       	icall
}
    13ea:	0f 91       	pop	r16
    13ec:	08 95       	ret

000013ee <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    13ee:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    13f0:	dc 01       	movw	r26, r24
    13f2:	ed 91       	ld	r30, X+
    13f4:	fc 91       	ld	r31, X
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	4f ef       	ldi	r20, 0xFF	; 255
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	00 e0       	ldi	r16, 0x00	; 0
    1400:	09 95       	icall
}
    1402:	0f 91       	pop	r16
    1404:	08 95       	ret

00001406 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1406:	0f 93       	push	r16
   device->send_func(device, 2,
    1408:	26 2f       	mov	r18, r22
    140a:	2f 77       	andi	r18, 0x7F	; 127
    140c:	dc 01       	movw	r26, r24
    140e:	ed 91       	ld	r30, X+
    1410:	fc 91       	ld	r31, X
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	41 ef       	ldi	r20, 0xF1	; 241
    1418:	00 e0       	ldi	r16, 0x00	; 0
    141a:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
   device->send_func(device, 3,
    1424:	26 2f       	mov	r18, r22
    1426:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1428:	8b 01       	movw	r16, r22
    142a:	00 0f       	add	r16, r16
    142c:	01 2f       	mov	r16, r17
    142e:	00 1f       	adc	r16, r16
    1430:	11 0b       	sbc	r17, r17
    1432:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1434:	0f 77       	andi	r16, 0x7F	; 127
    1436:	dc 01       	movw	r26, r24
    1438:	ed 91       	ld	r30, X+
    143a:	fc 91       	ld	r31, X
    143c:	63 e0       	ldi	r22, 0x03	; 3
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	42 ef       	ldi	r20, 0xF2	; 242
    1442:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	08 95       	ret

0000144a <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    144a:	0f 93       	push	r16
   device->send_func(device, 2,
    144c:	26 2f       	mov	r18, r22
    144e:	2f 77       	andi	r18, 0x7F	; 127
    1450:	dc 01       	movw	r26, r24
    1452:	ed 91       	ld	r30, X+
    1454:	fc 91       	ld	r31, X
    1456:	62 e0       	ldi	r22, 0x02	; 2
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	43 ef       	ldi	r20, 0xF3	; 243
    145c:	00 e0       	ldi	r16, 0x00	; 0
    145e:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1460:	0f 91       	pop	r16
    1462:	08 95       	ret

00001464 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1464:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1466:	dc 01       	movw	r26, r24
    1468:	ed 91       	ld	r30, X+
    146a:	fc 91       	ld	r31, X
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	46 ef       	ldi	r20, 0xF6	; 246
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	00 e0       	ldi	r16, 0x00	; 0
    1476:	09 95       	icall
}
    1478:	0f 91       	pop	r16
    147a:	08 95       	ret

0000147c <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    147c:	0f 93       	push	r16
    147e:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1480:	dc 01       	movw	r26, r24
    1482:	ed 91       	ld	r30, X+
    1484:	fc 91       	ld	r31, X
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	00 e0       	ldi	r16, 0x00	; 0
    148e:	09 95       	icall
}
    1490:	0f 91       	pop	r16
    1492:	08 95       	ret

00001494 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1494:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1496:	dc 01       	movw	r26, r24
    1498:	ed 91       	ld	r30, X+
    149a:	fc 91       	ld	r31, X
    149c:	09 95       	icall
}
    149e:	0f 91       	pop	r16
    14a0:	08 95       	ret

000014a2 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    14a2:	6f 92       	push	r6
    14a4:	7f 92       	push	r7
    14a6:	8f 92       	push	r8
    14a8:	9f 92       	push	r9
    14aa:	af 92       	push	r10
    14ac:	bf 92       	push	r11
    14ae:	cf 92       	push	r12
    14b0:	df 92       	push	r13
    14b2:	ef 92       	push	r14
    14b4:	ff 92       	push	r15
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <midi_send_array+0x1e>
    14c0:	0f 92       	push	r0
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	4c 01       	movw	r8, r24
    14c8:	6b 01       	movw	r12, r22
    14ca:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    14cc:	61 15       	cp	r22, r1
    14ce:	71 05       	cpc	r23, r1
    14d0:	41 f1       	breq	.+80     	; 0x1522 <midi_send_array+0x80>
    14d2:	ee 24       	eor	r14, r14
    14d4:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    14d6:	0f 2e       	mov	r0, r31
    14d8:	f3 e0       	ldi	r31, 0x03	; 3
    14da:	6f 2e       	mov	r6, r31
    14dc:	77 24       	eor	r7, r7
    14de:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    14e0:	19 82       	std	Y+1, r1	; 0x01
    14e2:	1a 82       	std	Y+2, r1	; 0x02
    14e4:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    14e6:	86 01       	movw	r16, r12
    14e8:	0e 19       	sub	r16, r14
    14ea:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    14ec:	04 30       	cpi	r16, 0x04	; 4
    14ee:	11 05       	cpc	r17, r1
    14f0:	08 f0       	brcs	.+2      	; 0x14f4 <midi_send_array+0x52>
    14f2:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    14f4:	b5 01       	movw	r22, r10
    14f6:	6e 0d       	add	r22, r14
    14f8:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    14fa:	ce 01       	movw	r24, r28
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	40 2f       	mov	r20, r16
    1500:	51 2f       	mov	r21, r17
    1502:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    1506:	c4 01       	movw	r24, r8
    1508:	b8 01       	movw	r22, r16
    150a:	49 81       	ldd	r20, Y+1	; 0x01
    150c:	2a 81       	ldd	r18, Y+2	; 0x02
    150e:	0b 81       	ldd	r16, Y+3	; 0x03
    1510:	0e 94 4a 0a 	call	0x1494	; 0x1494 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1514:	83 e0       	ldi	r24, 0x03	; 3
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	e8 0e       	add	r14, r24
    151a:	f9 1e       	adc	r15, r25
    151c:	ec 14       	cp	r14, r12
    151e:	fd 04       	cpc	r15, r13
    1520:	f8 f2       	brcs	.-66     	; 0x14e0 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	9f 90       	pop	r9
    153e:	8f 90       	pop	r8
    1540:	7f 90       	pop	r7
    1542:	6f 90       	pop	r6
    1544:	08 95       	ret

00001546 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1546:	fc 01       	movw	r30, r24
    1548:	73 83       	std	Z+3, r23	; 0x03
    154a:	62 83       	std	Z+2, r22	; 0x02
}
    154c:	08 95       	ret

0000154e <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    154e:	fc 01       	movw	r30, r24
    1550:	75 83       	std	Z+5, r23	; 0x05
    1552:	64 83       	std	Z+4, r22	; 0x04
}
    1554:	08 95       	ret

00001556 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1556:	fc 01       	movw	r30, r24
    1558:	77 83       	std	Z+7, r23	; 0x07
    155a:	66 83       	std	Z+6, r22	; 0x06
}
    155c:	08 95       	ret

0000155e <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    155e:	fc 01       	movw	r30, r24
    1560:	71 87       	std	Z+9, r23	; 0x09
    1562:	60 87       	std	Z+8, r22	; 0x08
}
    1564:	08 95       	ret

00001566 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1566:	fc 01       	movw	r30, r24
    1568:	73 87       	std	Z+11, r23	; 0x0b
    156a:	62 87       	std	Z+10, r22	; 0x0a
}
    156c:	08 95       	ret

0000156e <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    156e:	fc 01       	movw	r30, r24
    1570:	75 87       	std	Z+13, r23	; 0x0d
    1572:	64 87       	std	Z+12, r22	; 0x0c
}
    1574:	08 95       	ret

00001576 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1576:	fc 01       	movw	r30, r24
    1578:	77 87       	std	Z+15, r23	; 0x0f
    157a:	66 87       	std	Z+14, r22	; 0x0e
}
    157c:	08 95       	ret

0000157e <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    157e:	fc 01       	movw	r30, r24
    1580:	71 8b       	std	Z+17, r23	; 0x11
    1582:	60 8b       	std	Z+16, r22	; 0x10
}
    1584:	08 95       	ret

00001586 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1586:	fc 01       	movw	r30, r24
    1588:	73 8b       	std	Z+19, r23	; 0x13
    158a:	62 8b       	std	Z+18, r22	; 0x12
}
    158c:	08 95       	ret

0000158e <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    158e:	fc 01       	movw	r30, r24
    1590:	75 8b       	std	Z+21, r23	; 0x15
    1592:	64 8b       	std	Z+20, r22	; 0x14
}
    1594:	08 95       	ret

00001596 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1596:	fc 01       	movw	r30, r24
    1598:	77 8b       	std	Z+23, r23	; 0x17
    159a:	66 8b       	std	Z+22, r22	; 0x16
}
    159c:	08 95       	ret

0000159e <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    159e:	fc 01       	movw	r30, r24
    15a0:	71 8f       	std	Z+25, r23	; 0x19
    15a2:	60 8f       	std	Z+24, r22	; 0x18
}
    15a4:	08 95       	ret

000015a6 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    15a6:	fc 01       	movw	r30, r24
    15a8:	73 8f       	std	Z+27, r23	; 0x1b
    15aa:	62 8f       	std	Z+26, r22	; 0x1a
}
    15ac:	08 95       	ret

000015ae <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    15ae:	fc 01       	movw	r30, r24
    15b0:	75 8f       	std	Z+29, r23	; 0x1d
    15b2:	64 8f       	std	Z+28, r22	; 0x1c
}
    15b4:	08 95       	ret

000015b6 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    15b6:	fc 01       	movw	r30, r24
    15b8:	77 8f       	std	Z+31, r23	; 0x1f
    15ba:	66 8f       	std	Z+30, r22	; 0x1e
}
    15bc:	08 95       	ret

000015be <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    15c4:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    15c6:	1f a2       	lds	r17, 0x9f
    15c8:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    15ca:	bc 01       	movw	r22, r24
    15cc:	68 5d       	subi	r22, 0xD8	; 216
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	88 51       	subi	r24, 0x18	; 24
    15d2:	9f 4f       	sbci	r25, 0xFF	; 255
    15d4:	40 ec       	ldi	r20, 0xC0	; 192
    15d6:	0e 94 59 08 	call	0x10b2	; 0x10b2 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    15da:	1b 82       	std	Y+3, r1	; 0x03
    15dc:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    15de:	1d 82       	std	Y+5, r1	; 0x05
    15e0:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    15e2:	1f 82       	std	Y+7, r1	; 0x07
    15e4:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    15e6:	19 86       	std	Y+9, r1	; 0x09
    15e8:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    15ea:	1b 86       	std	Y+11, r1	; 0x0b
    15ec:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    15ee:	1d 86       	std	Y+13, r1	; 0x0d
    15f0:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    15f2:	1f 86       	std	Y+15, r1	; 0x0f
    15f4:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    15f6:	19 8a       	std	Y+17, r1	; 0x11
    15f8:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    15fa:	1b 8a       	std	Y+19, r1	; 0x13
    15fc:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    15fe:	1d 8a       	std	Y+21, r1	; 0x15
    1600:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1602:	1f 8a       	std	Y+23, r1	; 0x17
    1604:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1606:	19 8e       	std	Y+25, r1	; 0x19
    1608:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    160a:	1b 8e       	std	Y+27, r1	; 0x1b
    160c:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    160e:	1d 8e       	std	Y+29, r1	; 0x1d
    1610:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1612:	1f 8e       	std	Y+31, r1	; 0x1f
    1614:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1616:	19 a2       	lds	r17, 0x99
    1618:	18 a2       	lds	r17, 0x98
}
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    162e:	66 23       	and	r22, r22
    1630:	99 f0       	breq	.+38     	; 0x1658 <midi_device_input+0x38>
    1632:	04 2f       	mov	r16, r20
    1634:	15 2f       	mov	r17, r21
    1636:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    1638:	0f 2e       	mov	r0, r31
    163a:	f8 ee       	ldi	r31, 0xE8	; 232
    163c:	ef 2e       	mov	r14, r31
    163e:	ff 24       	eor	r15, r15
    1640:	f0 2d       	mov	r31, r0
    1642:	e8 0e       	add	r14, r24
    1644:	f9 1e       	adc	r15, r25
    1646:	f8 01       	movw	r30, r16
    1648:	61 91       	ld	r22, Z+
    164a:	8f 01       	movw	r16, r30
    164c:	c7 01       	movw	r24, r14
    164e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1652:	cf 5f       	subi	r28, 0xFF	; 255
    1654:	cd 17       	cp	r28, r29
    1656:	b9 f7       	brne	.-18     	; 0x1646 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	08 95       	ret

00001666 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    1666:	fc 01       	movw	r30, r24
    1668:	71 83       	std	Z+1, r23	; 0x01
    166a:	60 83       	st	Z, r22
}
    166c:	08 95       	ret

0000166e <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    166e:	fc 01       	movw	r30, r24
    1670:	71 a3       	lds	r23, 0x51
    1672:	60 a3       	lds	r22, 0x50
}
    1674:	08 95       	ret

00001676 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1676:	af 92       	push	r10
    1678:	bf 92       	push	r11
    167a:	cf 92       	push	r12
    167c:	df 92       	push	r13
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	00 d0       	rcall	.+0      	; 0x168c <midi_input_callbacks+0x16>
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	6c 01       	movw	r12, r24
    1694:	5b 01       	movw	r10, r22
    1696:	f4 2e       	mov	r15, r20
    1698:	e2 2e       	mov	r14, r18
    169a:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    169c:	dc 01       	movw	r26, r24
    169e:	95 96       	adiw	r26, 0x25	; 37
    16a0:	8c 91       	ld	r24, X
    16a2:	95 97       	sbiw	r26, 0x25	; 37
    16a4:	84 30       	cpi	r24, 0x04	; 4
    16a6:	e9 f4       	brne	.+58     	; 0x16e2 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    16a8:	5a 96       	adiw	r26, 0x1a	; 26
    16aa:	ed 91       	ld	r30, X+
    16ac:	fc 91       	ld	r31, X
    16ae:	5b 97       	sbiw	r26, 0x1b	; 27
    16b0:	30 97       	sbiw	r30, 0x00	; 0
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <midi_input_callbacks+0x40>
    16b4:	ee c0       	rjmp	.+476    	; 0x1892 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    16b6:	cb 01       	movw	r24, r22
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	63 e0       	ldi	r22, 0x03	; 3
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
    16c2:	cb 01       	movw	r24, r22
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	68 0f       	add	r22, r24
    16ca:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    16cc:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    16ce:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    16d0:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    16d2:	4a 2d       	mov	r20, r10
    16d4:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    16d6:	c6 01       	movw	r24, r12
    16d8:	9e 01       	movw	r18, r28
    16da:	2f 5f       	subi	r18, 0xFF	; 255
    16dc:	3f 4f       	sbci	r19, 0xFF	; 255
    16de:	09 95       	icall
    16e0:	c8 c0       	rjmp	.+400    	; 0x1872 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    16e2:	62 30       	cpi	r22, 0x02	; 2
    16e4:	71 05       	cpc	r23, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <midi_input_callbacks+0x74>
    16e8:	5f c0       	rjmp	.+190    	; 0x17a8 <midi_input_callbacks+0x132>
    16ea:	63 30       	cpi	r22, 0x03	; 3
    16ec:	71 05       	cpc	r23, r1
    16ee:	29 f0       	breq	.+10     	; 0x16fa <midi_input_callbacks+0x84>
    16f0:	61 30       	cpi	r22, 0x01	; 1
    16f2:	71 05       	cpc	r23, r1
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <midi_input_callbacks+0x82>
    16f6:	b3 c0       	rjmp	.+358    	; 0x185e <midi_input_callbacks+0x1e8>
    16f8:	99 c0       	rjmp	.+306    	; 0x182c <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    16fa:	84 2f       	mov	r24, r20
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	80 7f       	andi	r24, 0xF0	; 240
    1700:	90 70       	andi	r25, 0x00	; 0
    1702:	80 3a       	cpi	r24, 0xA0	; 160
    1704:	91 05       	cpc	r25, r1
    1706:	29 f1       	breq	.+74     	; 0x1752 <midi_input_callbacks+0xdc>
    1708:	81 3a       	cpi	r24, 0xA1	; 161
    170a:	91 05       	cpc	r25, r1
    170c:	3c f4       	brge	.+14     	; 0x171c <midi_input_callbacks+0xa6>
    170e:	80 38       	cpi	r24, 0x80	; 128
    1710:	91 05       	cpc	r25, r1
    1712:	c9 f0       	breq	.+50     	; 0x1746 <midi_input_callbacks+0xd0>
    1714:	80 39       	cpi	r24, 0x90	; 144
    1716:	91 05       	cpc	r25, r1
    1718:	91 f5       	brne	.+100    	; 0x177e <midi_input_callbacks+0x108>
    171a:	0f c0       	rjmp	.+30     	; 0x173a <midi_input_callbacks+0xc4>
    171c:	80 3e       	cpi	r24, 0xE0	; 224
    171e:	91 05       	cpc	r25, r1
    1720:	f1 f0       	breq	.+60     	; 0x175e <midi_input_callbacks+0xe8>
    1722:	80 3f       	cpi	r24, 0xF0	; 240
    1724:	91 05       	cpc	r25, r1
    1726:	09 f1       	breq	.+66     	; 0x176a <midi_input_callbacks+0xf4>
    1728:	80 3b       	cpi	r24, 0xB0	; 176
    172a:	91 05       	cpc	r25, r1
    172c:	41 f5       	brne	.+80     	; 0x177e <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    172e:	d6 01       	movw	r26, r12
    1730:	12 96       	adiw	r26, 0x02	; 2
    1732:	ed 91       	ld	r30, X+
    1734:	fc 91       	ld	r31, X
    1736:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1738:	24 c0       	rjmp	.+72     	; 0x1782 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    173a:	d6 01       	movw	r26, r12
    173c:	14 96       	adiw	r26, 0x04	; 4
    173e:	ed 91       	ld	r30, X+
    1740:	fc 91       	ld	r31, X
    1742:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1744:	1e c0       	rjmp	.+60     	; 0x1782 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1746:	d6 01       	movw	r26, r12
    1748:	16 96       	adiw	r26, 0x06	; 6
    174a:	ed 91       	ld	r30, X+
    174c:	fc 91       	ld	r31, X
    174e:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1750:	18 c0       	rjmp	.+48     	; 0x1782 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1752:	d6 01       	movw	r26, r12
    1754:	18 96       	adiw	r26, 0x08	; 8
    1756:	ed 91       	ld	r30, X+
    1758:	fc 91       	ld	r31, X
    175a:	19 97       	sbiw	r26, 0x09	; 9
              break;
    175c:	12 c0       	rjmp	.+36     	; 0x1782 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    175e:	d6 01       	movw	r26, r12
    1760:	1a 96       	adiw	r26, 0x0a	; 10
    1762:	ed 91       	ld	r30, X+
    1764:	fc 91       	ld	r31, X
    1766:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1768:	0c c0       	rjmp	.+24     	; 0x1782 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    176a:	b2 ef       	ldi	r27, 0xF2	; 242
    176c:	4b 17       	cp	r20, r27
    176e:	09 f0       	breq	.+2      	; 0x1772 <midi_input_callbacks+0xfc>
    1770:	90 c0       	rjmp	.+288    	; 0x1892 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    1772:	d6 01       	movw	r26, r12
    1774:	1c 96       	adiw	r26, 0x0c	; 12
    1776:	ed 91       	ld	r30, X+
    1778:	fc 91       	ld	r31, X
    177a:	1d 97       	sbiw	r26, 0x0d	; 13
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    177e:	e0 e0       	ldi	r30, 0x00	; 0
    1780:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1782:	30 97       	sbiw	r30, 0x00	; 0
    1784:	09 f4       	brne	.+2      	; 0x1788 <midi_input_callbacks+0x112>
    1786:	85 c0       	rjmp	.+266    	; 0x1892 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1788:	b2 ef       	ldi	r27, 0xF2	; 242
    178a:	fb 16       	cp	r15, r27
    178c:	31 f4       	brne	.+12     	; 0x179a <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    178e:	c6 01       	movw	r24, r12
    1790:	62 ef       	ldi	r22, 0xF2	; 242
    1792:	4e 2d       	mov	r20, r14
    1794:	21 2f       	mov	r18, r17
    1796:	09 95       	icall
    1798:	6c c0       	rjmp	.+216    	; 0x1872 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    179a:	6f 2d       	mov	r22, r15
    179c:	6f 70       	andi	r22, 0x0F	; 15
    179e:	c6 01       	movw	r24, r12
    17a0:	4e 2d       	mov	r20, r14
    17a2:	21 2f       	mov	r18, r17
    17a4:	09 95       	icall
    17a6:	65 c0       	rjmp	.+202    	; 0x1872 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    17a8:	84 2f       	mov	r24, r20
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	80 7f       	andi	r24, 0xF0	; 240
    17ae:	90 70       	andi	r25, 0x00	; 0
    17b0:	80 3d       	cpi	r24, 0xD0	; 208
    17b2:	91 05       	cpc	r25, r1
    17b4:	61 f0       	breq	.+24     	; 0x17ce <midi_input_callbacks+0x158>
    17b6:	80 3f       	cpi	r24, 0xF0	; 240
    17b8:	91 05       	cpc	r25, r1
    17ba:	79 f0       	breq	.+30     	; 0x17da <midi_input_callbacks+0x164>
    17bc:	80 3c       	cpi	r24, 0xC0	; 192
    17be:	91 05       	cpc	r25, r1
    17c0:	f9 f4       	brne	.+62     	; 0x1800 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    17c2:	d6 01       	movw	r26, r12
    17c4:	1e 96       	adiw	r26, 0x0e	; 14
    17c6:	ed 91       	ld	r30, X+
    17c8:	fc 91       	ld	r31, X
    17ca:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    17cc:	1b c0       	rjmp	.+54     	; 0x1804 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    17ce:	d6 01       	movw	r26, r12
    17d0:	50 96       	adiw	r26, 0x10	; 16
    17d2:	ed 91       	ld	r30, X+
    17d4:	fc 91       	ld	r31, X
    17d6:	51 97       	sbiw	r26, 0x11	; 17
              break;
    17d8:	15 c0       	rjmp	.+42     	; 0x1804 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    17da:	b3 ef       	ldi	r27, 0xF3	; 243
    17dc:	4b 17       	cp	r20, r27
    17de:	31 f4       	brne	.+12     	; 0x17ec <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    17e0:	d6 01       	movw	r26, r12
    17e2:	52 96       	adiw	r26, 0x12	; 18
    17e4:	ed 91       	ld	r30, X+
    17e6:	fc 91       	ld	r31, X
    17e8:	53 97       	sbiw	r26, 0x13	; 19
    17ea:	0c c0       	rjmp	.+24     	; 0x1804 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    17ec:	b1 ef       	ldi	r27, 0xF1	; 241
    17ee:	4b 17       	cp	r20, r27
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <midi_input_callbacks+0x17e>
    17f2:	4f c0       	rjmp	.+158    	; 0x1892 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    17f4:	d6 01       	movw	r26, r12
    17f6:	54 96       	adiw	r26, 0x14	; 20
    17f8:	ed 91       	ld	r30, X+
    17fa:	fc 91       	ld	r31, X
    17fc:	55 97       	sbiw	r26, 0x15	; 21
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1800:	e0 e0       	ldi	r30, 0x00	; 0
    1802:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1804:	30 97       	sbiw	r30, 0x00	; 0
    1806:	09 f4       	brne	.+2      	; 0x180a <midi_input_callbacks+0x194>
    1808:	44 c0       	rjmp	.+136    	; 0x1892 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    180a:	b3 ef       	ldi	r27, 0xF3	; 243
    180c:	fb 16       	cp	r15, r27
    180e:	19 f0       	breq	.+6      	; 0x1816 <midi_input_callbacks+0x1a0>
    1810:	81 ef       	ldi	r24, 0xF1	; 241
    1812:	f8 16       	cp	r15, r24
    1814:	29 f4       	brne	.+10     	; 0x1820 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1816:	c6 01       	movw	r24, r12
    1818:	6f 2d       	mov	r22, r15
    181a:	4e 2d       	mov	r20, r14
    181c:	09 95       	icall
    181e:	29 c0       	rjmp	.+82     	; 0x1872 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    1820:	6f 2d       	mov	r22, r15
    1822:	6f 70       	andi	r22, 0x0F	; 15
    1824:	c6 01       	movw	r24, r12
    1826:	4e 2d       	mov	r20, r14
    1828:	09 95       	icall
    182a:	23 c0       	rjmp	.+70     	; 0x1872 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    182c:	84 2f       	mov	r24, r20
    182e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <midi_is_realtime>
    1832:	88 23       	and	r24, r24
    1834:	31 f0       	breq	.+12     	; 0x1842 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    1836:	d6 01       	movw	r26, r12
    1838:	56 96       	adiw	r26, 0x16	; 22
    183a:	ed 91       	ld	r30, X+
    183c:	fc 91       	ld	r31, X
    183e:	57 97       	sbiw	r26, 0x17	; 23
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    1842:	b6 ef       	ldi	r27, 0xF6	; 246
    1844:	fb 16       	cp	r15, r27
    1846:	29 f5       	brne	.+74     	; 0x1892 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    1848:	d6 01       	movw	r26, r12
    184a:	58 96       	adiw	r26, 0x18	; 24
    184c:	ed 91       	ld	r30, X+
    184e:	fc 91       	ld	r31, X
    1850:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1852:	30 97       	sbiw	r30, 0x00	; 0
    1854:	f1 f0       	breq	.+60     	; 0x1892 <midi_input_callbacks+0x21c>
            func(device, byte0);
    1856:	c6 01       	movw	r24, r12
    1858:	6f 2d       	mov	r22, r15
    185a:	09 95       	icall
    185c:	0a c0       	rjmp	.+20     	; 0x1872 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    185e:	64 30       	cpi	r22, 0x04	; 4
    1860:	71 05       	cpc	r23, r1
    1862:	a8 f4       	brcc	.+42     	; 0x188e <midi_input_callbacks+0x218>
    1864:	16 c0       	rjmp	.+44     	; 0x1892 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1866:	c6 01       	movw	r24, r12
    1868:	b5 01       	movw	r22, r10
    186a:	4f 2d       	mov	r20, r15
    186c:	2e 2d       	mov	r18, r14
    186e:	01 2f       	mov	r16, r17
    1870:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1872:	d6 01       	movw	r26, r12
    1874:	5e 96       	adiw	r26, 0x1e	; 30
    1876:	ed 91       	ld	r30, X+
    1878:	fc 91       	ld	r31, X
    187a:	5f 97       	sbiw	r26, 0x1f	; 31
    187c:	30 97       	sbiw	r30, 0x00	; 0
    187e:	89 f0       	breq	.+34     	; 0x18a2 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1880:	c6 01       	movw	r24, r12
    1882:	b5 01       	movw	r22, r10
    1884:	4f 2d       	mov	r20, r15
    1886:	2e 2d       	mov	r18, r14
    1888:	01 2f       	mov	r16, r17
    188a:	09 95       	icall
    188c:	0a c0       	rjmp	.+20     	; 0x18a2 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    188e:	aa 24       	eor	r10, r10
    1890:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1892:	d6 01       	movw	r26, r12
    1894:	5c 96       	adiw	r26, 0x1c	; 28
    1896:	ed 91       	ld	r30, X+
    1898:	fc 91       	ld	r31, X
    189a:	5d 97       	sbiw	r26, 0x1d	; 29
    189c:	30 97       	sbiw	r30, 0x00	; 0
    189e:	19 f7       	brne	.-58     	; 0x1866 <midi_input_callbacks+0x1f0>
    18a0:	e8 cf       	rjmp	.-48     	; 0x1872 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	ef 90       	pop	r14
    18b4:	df 90       	pop	r13
    18b6:	cf 90       	pop	r12
    18b8:	bf 90       	pop	r11
    18ba:	af 90       	pop	r10
    18bc:	08 95       	ret

000018be <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	7c 01       	movw	r14, r24
    18ca:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    18cc:	86 2f       	mov	r24, r22
    18ce:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <midi_is_realtime>
    18d2:	88 23       	and	r24, r24
    18d4:	91 f0       	breq	.+36     	; 0x18fa <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    18d6:	d7 01       	movw	r26, r14
    18d8:	95 96       	adiw	r26, 0x25	; 37
    18da:	dc 91       	ld	r29, X
    18dc:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	95 96       	adiw	r26, 0x25	; 37
    18e2:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    18e4:	c7 01       	movw	r24, r14
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	4c 2f       	mov	r20, r28
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	00 e0       	ldi	r16, 0x00	; 0
    18f0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <midi_input_callbacks>
    device->input_state = state;
    18f4:	f7 01       	movw	r30, r14
    18f6:	d5 a3       	lds	r29, 0x55
    18f8:	b7 c0       	rjmp	.+366    	; 0x1a68 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    18fa:	8c 2f       	mov	r24, r28
    18fc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <midi_is_statusbyte>
    1900:	88 23       	and	r24, r24
    1902:	09 f4       	brne	.+2      	; 0x1906 <midi_process_byte+0x48>
    1904:	73 c0       	rjmp	.+230    	; 0x19ec <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1906:	d7 01       	movw	r26, r14
    1908:	95 96       	adiw	r26, 0x25	; 37
    190a:	8c 91       	ld	r24, X
    190c:	95 97       	sbiw	r26, 0x25	; 37
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	49 f0       	breq	.+18     	; 0x1924 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    1912:	92 96       	adiw	r26, 0x22	; 34
    1914:	cc 93       	st	X, r28
    1916:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	97 96       	adiw	r26, 0x27	; 39
    191e:	9c 93       	st	X, r25
    1920:	8e 93       	st	-X, r24
    1922:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    1924:	8c 2f       	mov	r24, r28
    1926:	0e 94 de 08 	call	0x11bc	; 0x11bc <midi_packet_length>
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	41 f0       	breq	.+16     	; 0x193e <midi_process_byte+0x80>
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	00 f1       	brcs	.+64     	; 0x1972 <midi_process_byte+0xb4>
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	a1 f0       	breq	.+40     	; 0x195e <midi_process_byte+0xa0>
    1936:	83 30       	cpi	r24, 0x03	; 3
    1938:	09 f0       	breq	.+2      	; 0x193c <midi_process_byte+0x7e>
    193a:	4f c0       	rjmp	.+158    	; 0x19da <midi_process_byte+0x11c>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	f7 01       	movw	r30, r14
    1942:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    1944:	c7 01       	movw	r24, r14
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	4c 2f       	mov	r20, r28
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	00 e0       	ldi	r16, 0x00	; 0
    1950:	0e 94 3b 0b 	call	0x1676	; 0x1676 <midi_input_callbacks>
        device->input_state = IDLE;
    1954:	d7 01       	movw	r26, r14
    1956:	95 96       	adiw	r26, 0x25	; 37
    1958:	1c 92       	st	X, r1
    195a:	95 97       	sbiw	r26, 0x25	; 37
        break;
    195c:	85 c0       	rjmp	.+266    	; 0x1a68 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	f7 01       	movw	r30, r14
    1962:	85 a3       	lds	r24, 0x55
        break;
    1964:	81 c0       	rjmp	.+258    	; 0x1a68 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	d7 01       	movw	r26, r14
    196a:	95 96       	adiw	r26, 0x25	; 37
    196c:	8c 93       	st	X, r24
    196e:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1970:	7b c0       	rjmp	.+246    	; 0x1a68 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    1972:	c0 3f       	cpi	r28, 0xF0	; 240
    1974:	19 f0       	breq	.+6      	; 0x197c <midi_process_byte+0xbe>
    1976:	c7 3f       	cpi	r28, 0xF7	; 247
    1978:	59 f5       	brne	.+86     	; 0x19d0 <midi_process_byte+0x112>
    197a:	0a c0       	rjmp	.+20     	; 0x1990 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    197c:	84 e0       	ldi	r24, 0x04	; 4
    197e:	f7 01       	movw	r30, r14
    1980:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    1982:	80 ef       	ldi	r24, 0xF0	; 240
    1984:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	97 a3       	lds	r25, 0x57
    198c:	86 a3       	lds	r24, 0x56
            break;
    198e:	6c c0       	rjmp	.+216    	; 0x1a68 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1990:	d7 01       	movw	r26, r14
    1992:	96 96       	adiw	r26, 0x26	; 38
    1994:	2d 91       	ld	r18, X+
    1996:	3c 91       	ld	r19, X
    1998:	97 97       	sbiw	r26, 0x27	; 39
    199a:	c9 01       	movw	r24, r18
    199c:	63 e0       	ldi	r22, 0x03	; 3
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
    19a4:	f7 01       	movw	r30, r14
    19a6:	e8 0f       	add	r30, r24
    19a8:	f9 1f       	adc	r31, r25
    19aa:	87 ef       	ldi	r24, 0xF7	; 247
    19ac:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    19ae:	b9 01       	movw	r22, r18
    19b0:	6f 5f       	subi	r22, 0xFF	; 255
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	f7 01       	movw	r30, r14
    19b6:	77 a3       	lds	r23, 0x57
    19b8:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    19ba:	c7 01       	movw	r24, r14
    19bc:	42 a1       	lds	r20, 0x42
    19be:	23 a1       	lds	r18, 0x43
    19c0:	04 a1       	lds	r16, 0x44
    19c2:	0e 94 3b 0b 	call	0x1676	; 0x1676 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    19c6:	d7 01       	movw	r26, r14
    19c8:	95 96       	adiw	r26, 0x25	; 37
    19ca:	1c 92       	st	X, r1
    19cc:	95 97       	sbiw	r26, 0x25	; 37
            break;
    19ce:	4c c0       	rjmp	.+152    	; 0x1a68 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    19d0:	f7 01       	movw	r30, r14
    19d2:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    19d4:	17 a2       	lds	r17, 0x97
    19d6:	16 a2       	lds	r17, 0x96
    19d8:	47 c0       	rjmp	.+142    	; 0x1a68 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    19da:	d7 01       	movw	r26, r14
    19dc:	95 96       	adiw	r26, 0x25	; 37
    19de:	1c 92       	st	X, r1
    19e0:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    19e2:	97 96       	adiw	r26, 0x27	; 39
    19e4:	1c 92       	st	X, r1
    19e6:	1e 92       	st	-X, r1
    19e8:	96 97       	sbiw	r26, 0x26	; 38
        break;
    19ea:	3e c0       	rjmp	.+124    	; 0x1a68 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    19ec:	f7 01       	movw	r30, r14
    19ee:	25 a1       	lds	r18, 0x45
    19f0:	22 23       	and	r18, r18
    19f2:	d1 f1       	breq	.+116    	; 0x1a68 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    19f4:	06 a0       	lds	r16, 0x86
    19f6:	f7 a1       	lds	r31, 0x47
    19f8:	e0 2d       	mov	r30, r0
    19fa:	cf 01       	movw	r24, r30
    19fc:	63 e0       	ldi	r22, 0x03	; 3
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
    1a04:	ac 01       	movw	r20, r24
    1a06:	8e 0d       	add	r24, r14
    1a08:	9f 1d       	adc	r25, r15
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	92 96       	adiw	r26, 0x22	; 34
    1a0e:	cc 93       	st	X, r28
    1a10:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1a12:	bf 01       	movw	r22, r30
    1a14:	6f 5f       	subi	r22, 0xFF	; 255
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	f7 01       	movw	r30, r14
    1a1a:	77 a3       	lds	r23, 0x57
    1a1c:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    1a1e:	41 30       	cpi	r20, 0x01	; 1
    1a20:	51 05       	cpc	r21, r1
    1a22:	91 f0       	breq	.+36     	; 0x1a48 <midi_process_byte+0x18a>
    1a24:	42 30       	cpi	r20, 0x02	; 2
    1a26:	51 05       	cpc	r21, r1
    1a28:	f9 f4       	brne	.+62     	; 0x1a68 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1a2a:	c7 01       	movw	r24, r14
    1a2c:	42 a1       	lds	r20, 0x42
    1a2e:	23 a1       	lds	r18, 0x43
    1a30:	04 a1       	lds	r16, 0x44
    1a32:	0e 94 3b 0b 	call	0x1676	; 0x1676 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1a36:	f7 01       	movw	r30, r14
    1a38:	85 a1       	lds	r24, 0x45
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	a9 f0       	breq	.+42     	; 0x1a68 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	97 a3       	lds	r25, 0x57
    1a44:	86 a3       	lds	r24, 0x56
    1a46:	10 c0       	rjmp	.+32     	; 0x1a68 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1a48:	22 30       	cpi	r18, 0x02	; 2
    1a4a:	71 f4       	brne	.+28     	; 0x1a68 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1a4c:	c7 01       	movw	r24, r14
    1a4e:	42 a1       	lds	r20, 0x42
    1a50:	23 a1       	lds	r18, 0x43
    1a52:	00 e0       	ldi	r16, 0x00	; 0
    1a54:	0e 94 3b 0b 	call	0x1676	; 0x1676 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1a58:	f7 01       	movw	r30, r14
    1a5a:	85 a1       	lds	r24, 0x45
    1a5c:	84 30       	cpi	r24, 0x04	; 4
    1a5e:	21 f0       	breq	.+8      	; 0x1a68 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	97 a3       	lds	r25, 0x57
    1a66:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	ef 90       	pop	r14
    1a72:	08 95       	ret

00001a74 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    1a74:	cf 92       	push	r12
    1a76:	df 92       	push	r13
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    1a86:	dc 01       	movw	r26, r24
    1a88:	90 96       	adiw	r26, 0x20	; 32
    1a8a:	ed 91       	ld	r30, X+
    1a8c:	fc 91       	ld	r31, X
    1a8e:	91 97       	sbiw	r26, 0x21	; 33
    1a90:	30 97       	sbiw	r30, 0x00	; 0
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1a94:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1a96:	0f 2e       	mov	r0, r31
    1a98:	f8 ee       	ldi	r31, 0xE8	; 232
    1a9a:	ef 2e       	mov	r14, r31
    1a9c:	ff 24       	eor	r15, r15
    1a9e:	f0 2d       	mov	r31, r0
    1aa0:	ec 0c       	add	r14, r12
    1aa2:	fd 1c       	adc	r15, r13
    1aa4:	c7 01       	movw	r24, r14
    1aa6:	0e 94 8f 08 	call	0x111e	; 0x111e <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1aaa:	c8 2f       	mov	r28, r24
    1aac:	d0 e0       	ldi	r29, 0x00	; 0
    1aae:	20 97       	sbiw	r28, 0x00	; 0
    1ab0:	99 f0       	breq	.+38     	; 0x1ad8 <midi_device_process+0x64>
    1ab2:	00 e0       	ldi	r16, 0x00	; 0
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	0e 94 a4 08 	call	0x1148	; 0x1148 <bytequeue_get>
    1abe:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1ac0:	c6 01       	movw	r24, r12
    1ac2:	0e 94 5f 0c 	call	0x18be	; 0x18be <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	0e 94 b5 08 	call	0x116a	; 0x116a <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1ace:	0f 5f       	subi	r16, 0xFF	; 255
    1ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad2:	0c 17       	cp	r16, r28
    1ad4:	1d 07       	cpc	r17, r29
    1ad6:	78 f3       	brcs	.-34     	; 0x1ab6 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	08 95       	ret

00001aea <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    1aea:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    1aec:	67 e0       	ldi	r22, 0x07	; 7
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
    1af4:	48 2f       	mov	r20, r24
   if (remainder)
    1af6:	88 23       	and	r24, r24
    1af8:	81 f0       	breq	.+32     	; 0x1b1a <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    1afa:	c9 01       	movw	r24, r18
    1afc:	67 e0       	ldi	r22, 0x07	; 7
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
    1b04:	cb 01       	movw	r24, r22
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	84 0f       	add	r24, r20
    1b16:	91 1d       	adc	r25, r1
    1b18:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    1b1a:	c9 01       	movw	r24, r18
    1b1c:	67 e0       	ldi	r22, 0x07	; 7
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
    1b24:	cb 01       	movw	r24, r22
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
}
    1b32:	08 95       	ret

00001b34 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    1b34:	48 2f       	mov	r20, r24
    1b36:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    1b38:	a1 f0       	breq	.+40     	; 0x1b62 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    1b3a:	9c 01       	movw	r18, r24
    1b3c:	36 95       	lsr	r19
    1b3e:	27 95       	ror	r18
    1b40:	36 95       	lsr	r19
    1b42:	27 95       	ror	r18
    1b44:	36 95       	lsr	r19
    1b46:	27 95       	ror	r18
    1b48:	c9 01       	movw	r24, r18
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	82 1b       	sub	r24, r18
    1b58:	93 0b       	sbc	r25, r19
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	84 0f       	add	r24, r20
    1b5e:	91 1d       	adc	r25, r1
    1b60:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    1b62:	9c 01       	movw	r18, r24
    1b64:	36 95       	lsr	r19
    1b66:	27 95       	ror	r18
    1b68:	36 95       	lsr	r19
    1b6a:	27 95       	ror	r18
    1b6c:	36 95       	lsr	r19
    1b6e:	27 95       	ror	r18
    1b70:	c9 01       	movw	r24, r18
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	82 1b       	sub	r24, r18
    1b80:	93 0b       	sbc	r25, r19
}
    1b82:	08 95       	ret

00001b84 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1b84:	2f 92       	push	r2
    1b86:	3f 92       	push	r3
    1b88:	4f 92       	push	r4
    1b8a:	5f 92       	push	r5
    1b8c:	6f 92       	push	r6
    1b8e:	7f 92       	push	r7
    1b90:	8f 92       	push	r8
    1b92:	9f 92       	push	r9
    1b94:	af 92       	push	r10
    1b96:	bf 92       	push	r11
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <sysex_encode+0x26>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <sysex_encode+0x28>
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <sysex_encode+0x2a>
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	1c 01       	movw	r2, r24
    1bb4:	7a 83       	std	Y+2, r23	; 0x02
    1bb6:	69 83       	std	Y+1, r22	; 0x01
    1bb8:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    1bba:	ca 01       	movw	r24, r20
    1bbc:	67 e0       	ldi	r22, 0x07	; 7
    1bbe:	70 e0       	ldi	r23, 0x00	; 0
    1bc0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
    1bc4:	2b 01       	movw	r4, r22
    1bc6:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    1bc8:	61 15       	cp	r22, r1
    1bca:	71 05       	cpc	r23, r1
    1bcc:	b1 f1       	breq	.+108    	; 0x1c3a <sysex_encode+0xb6>
    1bce:	81 01       	movw	r16, r2
    1bd0:	e9 80       	ldd	r14, Y+1	; 0x01
    1bd2:	fa 80       	ldd	r15, Y+2	; 0x02
    1bd4:	cc 24       	eor	r12, r12
    1bd6:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1bd8:	88 24       	eor	r8, r8
    1bda:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1bdc:	1e 83       	std	Y+6, r17	; 0x06
    1bde:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    1be0:	f8 01       	movw	r30, r16
    1be2:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1be4:	fc 82       	std	Y+4, r15	; 0x04
    1be6:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1be8:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    1bea:	ab 81       	ldd	r26, Y+3	; 0x03
    1bec:	bc 81       	ldd	r27, Y+4	; 0x04
    1bee:	2d 91       	ld	r18, X+
    1bf0:	bc 83       	std	Y+4, r27	; 0x04
    1bf2:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    1bf4:	4f 5f       	subi	r20, 0xFF	; 255
    1bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf8:	82 2f       	mov	r24, r18
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	80 78       	andi	r24, 0x80	; 128
    1bfe:	90 70       	andi	r25, 0x00	; 0
    1c00:	bc 01       	movw	r22, r24
    1c02:	04 2e       	mov	r0, r20
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <sysex_encode+0x86>
    1c06:	75 95       	asr	r23
    1c08:	67 95       	ror	r22
    1c0a:	0a 94       	dec	r0
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <sysex_encode+0x82>
    1c0e:	ad 81       	ldd	r26, Y+5	; 0x05
    1c10:	be 81       	ldd	r27, Y+6	; 0x06
    1c12:	8c 91       	ld	r24, X
    1c14:	86 2b       	or	r24, r22
    1c16:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1c18:	2f 77       	andi	r18, 0x7F	; 127
    1c1a:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1c1c:	47 30       	cpi	r20, 0x07	; 7
    1c1e:	51 05       	cpc	r21, r1
    1c20:	21 f7       	brne	.-56     	; 0x1bea <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    1c22:	08 94       	sec
    1c24:	c1 1c       	adc	r12, r1
    1c26:	d1 1c       	adc	r13, r1
    1c28:	08 5f       	subi	r16, 0xF8	; 248
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2c:	e7 e0       	ldi	r30, 0x07	; 7
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	ee 0e       	add	r14, r30
    1c32:	ff 1e       	adc	r15, r31
    1c34:	ca 14       	cp	r12, r10
    1c36:	db 04       	cpc	r13, r11
    1c38:	89 f6       	brne	.-94     	; 0x1bdc <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    1c3a:	c3 01       	movw	r24, r6
    1c3c:	67 e0       	ldi	r22, 0x07	; 7
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
   if (remainder) {
    1c44:	88 23       	and	r24, r24
    1c46:	d9 f1       	breq	.+118    	; 0x1cbe <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    1c48:	82 01       	movw	r16, r4
    1c4a:	00 0f       	add	r16, r16
    1c4c:	11 1f       	adc	r17, r17
    1c4e:	00 0f       	add	r16, r16
    1c50:	11 1f       	adc	r17, r17
    1c52:	00 0f       	add	r16, r16
    1c54:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    1c56:	78 01       	movw	r14, r16
    1c58:	e4 18       	sub	r14, r4
    1c5a:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    1c5c:	d1 01       	movw	r26, r2
    1c5e:	a0 0f       	add	r26, r16
    1c60:	b1 1f       	adc	r27, r17
    1c62:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    1c64:	68 2f       	mov	r22, r24
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	61 15       	cp	r22, r1
    1c6a:	71 05       	cpc	r23, r1
    1c6c:	19 f1       	breq	.+70     	; 0x1cb4 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c70:	fa 81       	ldd	r31, Y+2	; 0x02
    1c72:	ee 0e       	add	r14, r30
    1c74:	ff 1e       	adc	r15, r31
    1c76:	c8 01       	movw	r24, r16
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	28 0e       	add	r2, r24
    1c7c:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    1c82:	f7 01       	movw	r30, r14
    1c84:	41 91       	ld	r20, Z+
    1c86:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    1c88:	2f 5f       	subi	r18, 0xFF	; 255
    1c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8c:	84 2f       	mov	r24, r20
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	80 78       	andi	r24, 0x80	; 128
    1c92:	90 70       	andi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <sysex_encode+0x118>
    1c98:	95 95       	asr	r25
    1c9a:	87 95       	ror	r24
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <sysex_encode+0x114>
    1ca0:	9c 91       	ld	r25, X
    1ca2:	89 2b       	or	r24, r25
    1ca4:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1ca6:	4f 77       	andi	r20, 0x7F	; 127
    1ca8:	f1 01       	movw	r30, r2
    1caa:	41 93       	st	Z+, r20
    1cac:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    1cae:	26 17       	cp	r18, r22
    1cb0:	37 07       	cpc	r19, r23
    1cb2:	38 f3       	brcs	.-50     	; 0x1c82 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	01 96       	adiw	r24, 0x01	; 1
    1cb8:	86 0f       	add	r24, r22
    1cba:	97 1f       	adc	r25, r23
    1cbc:	07 c0       	rjmp	.+14     	; 0x1ccc <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    1cbe:	c2 01       	movw	r24, r4
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
   }
}
    1ccc:	26 96       	adiw	r28, 0x06	; 6
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	ff 90       	pop	r15
    1ce2:	ef 90       	pop	r14
    1ce4:	df 90       	pop	r13
    1ce6:	cf 90       	pop	r12
    1ce8:	bf 90       	pop	r11
    1cea:	af 90       	pop	r10
    1cec:	9f 90       	pop	r9
    1cee:	8f 90       	pop	r8
    1cf0:	7f 90       	pop	r7
    1cf2:	6f 90       	pop	r6
    1cf4:	5f 90       	pop	r5
    1cf6:	4f 90       	pop	r4
    1cf8:	3f 90       	pop	r3
    1cfa:	2f 90       	pop	r2
    1cfc:	08 95       	ret

00001cfe <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1cfe:	6f 92       	push	r6
    1d00:	7f 92       	push	r7
    1d02:	8f 92       	push	r8
    1d04:	9f 92       	push	r9
    1d06:	af 92       	push	r10
    1d08:	bf 92       	push	r11
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	3c 01       	movw	r6, r24
    1d1c:	4b 01       	movw	r8, r22
    1d1e:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    1d20:	42 30       	cpi	r20, 0x02	; 2
    1d22:	51 05       	cpc	r21, r1
    1d24:	08 f4       	brcc	.+2      	; 0x1d28 <sysex_decode+0x2a>
    1d26:	6f c0       	rjmp	.+222    	; 0x1e06 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    1d28:	7a 01       	movw	r14, r20
    1d2a:	f6 94       	lsr	r15
    1d2c:	e7 94       	ror	r14
    1d2e:	f6 94       	lsr	r15
    1d30:	e7 94       	ror	r14
    1d32:	f6 94       	lsr	r15
    1d34:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    1d36:	e1 14       	cp	r14, r1
    1d38:	f1 04       	cpc	r15, r1
    1d3a:	29 f1       	breq	.+74     	; 0x1d86 <sysex_decode+0x88>
    1d3c:	eb 01       	movw	r28, r22
    1d3e:	b3 01       	movw	r22, r6
    1d40:	00 e0       	ldi	r16, 0x00	; 0
    1d42:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    1d44:	cc 24       	eor	r12, r12
    1d46:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1d48:	de 01       	movw	r26, r28
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    1d4e:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    1d50:	2d 91       	ld	r18, X+
    1d52:	2f 77       	andi	r18, 0x7F	; 127
    1d54:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    1d56:	4f 5f       	subi	r20, 0xFF	; 255
    1d58:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5a:	88 81       	ld	r24, Y
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	04 2e       	mov	r0, r20
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <sysex_decode+0x68>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <sysex_decode+0x64>
    1d6a:	80 78       	andi	r24, 0x80	; 128
    1d6c:	28 2b       	or	r18, r24
    1d6e:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    1d70:	47 30       	cpi	r20, 0x07	; 7
    1d72:	51 05       	cpc	r21, r1
    1d74:	69 f7       	brne	.-38     	; 0x1d50 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    1d76:	0f 5f       	subi	r16, 0xFF	; 255
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	28 96       	adiw	r28, 0x08	; 8
    1d7c:	69 5f       	subi	r22, 0xF9	; 249
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	0e 15       	cp	r16, r14
    1d82:	1f 05       	cpc	r17, r15
    1d84:	09 f7       	brne	.-62     	; 0x1d48 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    1d86:	5a 2d       	mov	r21, r10
    1d88:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    1d8a:	99 f1       	breq	.+102    	; 0x1df2 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    1d8c:	e7 01       	movw	r28, r14
    1d8e:	cc 0f       	add	r28, r28
    1d90:	dd 1f       	adc	r29, r29
    1d92:	cc 0f       	add	r28, r28
    1d94:	dd 1f       	adc	r29, r29
    1d96:	cc 0f       	add	r28, r28
    1d98:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    1d9a:	8e 01       	movw	r16, r28
    1d9c:	0e 19       	sub	r16, r14
    1d9e:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    1da0:	65 2f       	mov	r22, r21
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	61 50       	subi	r22, 0x01	; 1
    1da6:	70 40       	sbci	r23, 0x00	; 0
    1da8:	f9 f0       	breq	.+62     	; 0x1de8 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1daa:	ce 01       	movw	r24, r28
    1dac:	01 96       	adiw	r24, 0x01	; 1
    1dae:	d4 01       	movw	r26, r8
    1db0:	a8 0f       	add	r26, r24
    1db2:	b9 1f       	adc	r27, r25
    1db4:	f3 01       	movw	r30, r6
    1db6:	e0 0f       	add	r30, r16
    1db8:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    1dbe:	c8 0d       	add	r28, r8
    1dc0:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    1dc2:	4d 91       	ld	r20, X+
    1dc4:	4f 77       	andi	r20, 0x7F	; 127
    1dc6:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    1dc8:	2f 5f       	subi	r18, 0xFF	; 255
    1dca:	3f 4f       	sbci	r19, 0xFF	; 255
    1dcc:	88 81       	ld	r24, Y
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <sysex_decode+0xda>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <sysex_decode+0xd6>
    1ddc:	80 78       	andi	r24, 0x80	; 128
    1dde:	48 2b       	or	r20, r24
    1de0:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    1de2:	26 17       	cp	r18, r22
    1de4:	37 07       	cpc	r19, r23
    1de6:	68 f3       	brcs	.-38     	; 0x1dc2 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    1de8:	c8 01       	movw	r24, r16
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	85 0f       	add	r24, r21
    1dee:	91 1d       	adc	r25, r1
    1df0:	0c c0       	rjmp	.+24     	; 0x1e0a <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    1df2:	c7 01       	movw	r24, r14
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	8e 19       	sub	r24, r14
    1e02:	9f 09       	sbc	r25, r15
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	ff 90       	pop	r15
    1e14:	ef 90       	pop	r14
    1e16:	df 90       	pop	r13
    1e18:	cf 90       	pop	r12
    1e1a:	bf 90       	pop	r11
    1e1c:	af 90       	pop	r10
    1e1e:	9f 90       	pop	r9
    1e20:	8f 90       	pop	r8
    1e22:	7f 90       	pop	r7
    1e24:	6f 90       	pop	r6
    1e26:	08 95       	ret

00001e28 <__udivmodhi4>:
    1e28:	aa 1b       	sub	r26, r26
    1e2a:	bb 1b       	sub	r27, r27
    1e2c:	51 e1       	ldi	r21, 0x11	; 17
    1e2e:	07 c0       	rjmp	.+14     	; 0x1e3e <__udivmodhi4_ep>

00001e30 <__udivmodhi4_loop>:
    1e30:	aa 1f       	adc	r26, r26
    1e32:	bb 1f       	adc	r27, r27
    1e34:	a6 17       	cp	r26, r22
    1e36:	b7 07       	cpc	r27, r23
    1e38:	10 f0       	brcs	.+4      	; 0x1e3e <__udivmodhi4_ep>
    1e3a:	a6 1b       	sub	r26, r22
    1e3c:	b7 0b       	sbc	r27, r23

00001e3e <__udivmodhi4_ep>:
    1e3e:	88 1f       	adc	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	5a 95       	dec	r21
    1e44:	a9 f7       	brne	.-22     	; 0x1e30 <__udivmodhi4_loop>
    1e46:	80 95       	com	r24
    1e48:	90 95       	com	r25
    1e4a:	bc 01       	movw	r22, r24
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	08 95       	ret

00001e50 <__divmodhi4>:
    1e50:	97 fb       	bst	r25, 7
    1e52:	09 2e       	mov	r0, r25
    1e54:	07 26       	eor	r0, r23
    1e56:	0a d0       	rcall	.+20     	; 0x1e6c <__divmodhi4_neg1>
    1e58:	77 fd       	sbrc	r23, 7
    1e5a:	04 d0       	rcall	.+8      	; 0x1e64 <__divmodhi4_neg2>
    1e5c:	e5 df       	rcall	.-54     	; 0x1e28 <__udivmodhi4>
    1e5e:	06 d0       	rcall	.+12     	; 0x1e6c <__divmodhi4_neg1>
    1e60:	00 20       	and	r0, r0
    1e62:	1a f4       	brpl	.+6      	; 0x1e6a <__divmodhi4_exit>

00001e64 <__divmodhi4_neg2>:
    1e64:	70 95       	com	r23
    1e66:	61 95       	neg	r22
    1e68:	7f 4f       	sbci	r23, 0xFF	; 255

00001e6a <__divmodhi4_exit>:
    1e6a:	08 95       	ret

00001e6c <__divmodhi4_neg1>:
    1e6c:	f6 f7       	brtc	.-4      	; 0x1e6a <__divmodhi4_exit>
    1e6e:	90 95       	com	r25
    1e70:	81 95       	neg	r24
    1e72:	9f 4f       	sbci	r25, 0xFF	; 255
    1e74:	08 95       	ret

00001e76 <memcpy>:
    1e76:	fb 01       	movw	r30, r22
    1e78:	dc 01       	movw	r26, r24
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <memcpy+0xa>
    1e7c:	01 90       	ld	r0, Z+
    1e7e:	0d 92       	st	X+, r0
    1e80:	41 50       	subi	r20, 0x01	; 1
    1e82:	50 40       	sbci	r21, 0x00	; 0
    1e84:	d8 f7       	brcc	.-10     	; 0x1e7c <memcpy+0x6>
    1e86:	08 95       	ret

00001e88 <_exit>:
    1e88:	f8 94       	cli

00001e8a <__stop_program>:
    1e8a:	ff cf       	rjmp	.-2      	; 0x1e8a <__stop_program>
