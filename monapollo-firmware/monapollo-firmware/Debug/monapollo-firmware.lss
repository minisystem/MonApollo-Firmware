
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003bc0  00003c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003bc0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000213  008002b0  008002b0  00003e24  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00004498  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000300  00000000  00000000  000053d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000690a  00000000  00000000  000056d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001881  00000000  00000000  0000bfda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000213a  00000000  00000000  0000d85b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d84  00000000  00000000  0000f998  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000198a  00000000  00000000  0001071c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002e53  00000000  00000000  000120a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000118  00000000  00000000  00014ef9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_9>
      28:	0c 94 cc 02 	jmp	0x598	; 0x598 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e0 ec       	ldi	r30, 0xC0	; 192
      78:	fb e3       	ldi	r31, 0x3B	; 59
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a3 3c       	cpi	r26, 0xC3	; 195
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <main>
      9a:	0c 94 de 1d 	jmp	0x3bbc	; 0x3bbc <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:

struct arp arp;

//static struct midi_note arp_sequence[24] = {0,0};

void update_arp_sequence(void) {
     146:	af 92       	push	r10
     148:	bf 92       	push	r11
     14a:	cf 92       	push	r12
     14c:	df 92       	push	r13
     14e:	ef 92       	push	r14
     150:	ff 92       	push	r15
     152:	0f 93       	push	r16
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
	
	arp.step_number = gate_buffer + arp.range * gate_buffer; //gate buffer is the number of currently held notes
     15a:	90 91 84 03 	lds	r25, 0x0384
     15e:	9f 5f       	subi	r25, 0xFF	; 255
     160:	80 91 b0 02 	lds	r24, 0x02B0
     164:	98 9f       	mul	r25, r24
     166:	90 2d       	mov	r25, r0
     168:	11 24       	eor	r1, r1
     16a:	90 93 85 03 	sts	0x0385, r25
	
	//set root notes
	for (int step = 0; step < gate_buffer; step++) {
     16e:	88 23       	and	r24, r24
     170:	c1 f4       	brne	.+48     	; 0x1a2 <update_arp_sequence+0x5c>
     172:	2c c0       	rjmp	.+88     	; 0x1cc <update_arp_sequence+0x86>
		
		
		for (int range = 0; range < arp.range; range++) {
			
			uint8_t root_note = get_indexed_note(step);
     174:	8c 2d       	mov	r24, r12
     176:	0e 94 07 01 	call	0x20e	; 0x20e <get_indexed_note>
			arp.sequence[step + range].note = root_note;
     17a:	88 83       	st	Y, r24
	
	//set root notes
	for (int step = 0; step < gate_buffer; step++) {
		
		
		for (int range = 0; range < arp.range; range++) {
     17c:	0f 5f       	subi	r16, 0xFF	; 255
     17e:	1f 4f       	sbci	r17, 0xFF	; 255
     180:	22 96       	adiw	r28, 0x02	; 2
     182:	f7 01       	movw	r30, r14
     184:	80 81       	ld	r24, Z
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	08 17       	cp	r16, r24
     18a:	19 07       	cpc	r17, r25
     18c:	9c f3       	brlt	.-26     	; 0x174 <update_arp_sequence+0x2e>
void update_arp_sequence(void) {
	
	arp.step_number = gate_buffer + arp.range * gate_buffer; //gate buffer is the number of currently held notes
	
	//set root notes
	for (int step = 0; step < gate_buffer; step++) {
     18e:	08 94       	sec
     190:	c1 1c       	adc	r12, r1
     192:	d1 1c       	adc	r13, r1
     194:	80 91 b0 02 	lds	r24, 0x02B0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	c8 16       	cp	r12, r24
     19c:	d9 06       	cpc	r13, r25
     19e:	5c f0       	brlt	.+22     	; 0x1b6 <update_arp_sequence+0x70>
     1a0:	15 c0       	rjmp	.+42     	; 0x1cc <update_arp_sequence+0x86>
     1a2:	cc 24       	eor	r12, r12
     1a4:	dd 24       	eor	r13, r13
		
		
		for (int range = 0; range < arp.range; range++) {
     1a6:	0f 2e       	mov	r0, r31
     1a8:	f4 e8       	ldi	r31, 0x84	; 132
     1aa:	ef 2e       	mov	r14, r31
     1ac:	f3 e0       	ldi	r31, 0x03	; 3
     1ae:	ff 2e       	mov	r15, r31
     1b0:	f0 2d       	mov	r31, r0

struct arp arp;

//static struct midi_note arp_sequence[24] = {0,0};

void update_arp_sequence(void) {
     1b2:	aa 24       	eor	r10, r10
     1b4:	bb 24       	eor	r11, r11
	
	//set root notes
	for (int step = 0; step < gate_buffer; step++) {
		
		
		for (int range = 0; range < arp.range; range++) {
     1b6:	f7 01       	movw	r30, r14
     1b8:	80 81       	ld	r24, Z
     1ba:	88 23       	and	r24, r24
     1bc:	41 f3       	breq	.-48     	; 0x18e <update_arp_sequence+0x48>

struct arp arp;

//static struct midi_note arp_sequence[24] = {0,0};

void update_arp_sequence(void) {
     1be:	e6 01       	movw	r28, r12
     1c0:	cc 0f       	add	r28, r28
     1c2:	dd 1f       	adc	r29, r29
     1c4:	c6 57       	subi	r28, 0x76	; 118
     1c6:	dc 4f       	sbci	r29, 0xFC	; 252
     1c8:	85 01       	movw	r16, r10
     1ca:	d4 cf       	rjmp	.-88     	; 0x174 <update_arp_sequence+0x2e>
		
	}
		
	
	
}
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	ff 90       	pop	r15
     1d6:	ef 90       	pop	r14
     1d8:	df 90       	pop	r13
     1da:	cf 90       	pop	r12
     1dc:	bf 90       	pop	r11
     1de:	af 90       	pop	r10
     1e0:	08 95       	ret

000001e2 <step_arp_note>:

void step_arp_note(void) { //updates arp note according to range, mode and keys held
	
	
	if (++arp.step_position > arp.step_number) arp.step_position  = 0; //reset step position when at end of sequence 
     1e2:	80 91 86 03 	lds	r24, 0x0386
     1e6:	8f 5f       	subi	r24, 0xFF	; 255
     1e8:	80 93 86 03 	sts	0x0386, r24
     1ec:	90 91 85 03 	lds	r25, 0x0385
     1f0:	98 17       	cp	r25, r24
     1f2:	10 f4       	brcc	.+4      	; 0x1f8 <step_arp_note+0x16>
     1f4:	10 92 86 03 	sts	0x0386, r1
	
	arp.current_note = arp.sequence[arp.step_position].note;
     1f8:	e0 91 86 03 	lds	r30, 0x0386
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	ee 0f       	add	r30, r30
     200:	ff 1f       	adc	r31, r31
     202:	e6 57       	subi	r30, 0x76	; 118
     204:	fc 4f       	sbci	r31, 0xFC	; 252
     206:	80 81       	ld	r24, Z
     208:	80 93 87 03 	sts	0x0387, r24
	

     20c:	08 95       	ret

0000020e <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     20e:	e8 2f       	mov	r30, r24
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	e8 54       	subi	r30, 0x48	; 72
     218:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     21a:	80 81       	ld	r24, Z
     21c:	08 95       	ret

0000021e <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.clock_source == OFF) {
     21e:	80 91 88 03 	lds	r24, 0x0388
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	19 f4       	brne	.+6      	; 0x22c <get_current_note+0xe>
		
		note = current_note;
     226:	80 91 b1 02 	lds	r24, 0x02B1
     22a:	08 95       	ret

		
	} else {
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     22c:	80 91 87 03 	lds	r24, 0x0387
		
		
	}
	return note;
	
}
     230:	08 95       	ret

00000232 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	18 2f       	mov	r17, r24
     23c:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     23e:	8a eb       	ldi	r24, 0xBA	; 186
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	ec 01       	movw	r28, r24
     244:	22 97       	sbiw	r28, 0x02	; 2
     246:	be 01       	movw	r22, r28
     248:	4e e0       	ldi	r20, 0x0E	; 14
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     250:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     252:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     254:	10 93 b1 02 	sts	0x02B1, r17
	
} 
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	0f 91       	pop	r16
     260:	08 95       	ret

00000262 <remove_note>:
void remove_note(uint8_t note){
     262:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     264:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     268:	c8 17       	cp	r28, r24
     26a:	41 f0       	breq	.+16     	; 0x27c <remove_note+0x1a>
     26c:	ea eb       	ldi	r30, 0xBA	; 186
     26e:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     270:	41 e0       	ldi	r20, 0x01	; 1
     272:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     274:	90 81       	ld	r25, Z
     276:	98 17       	cp	r25, r24
     278:	59 f4       	brne	.+22     	; 0x290 <remove_note+0x2e>
     27a:	02 c0       	rjmp	.+4      	; 0x280 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     280:	fa 01       	movw	r30, r20
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	e8 54       	subi	r30, 0x48	; 72
     288:	fe 4f       	sbci	r31, 0xFE	; 254
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	80 83       	st	Z, r24
			free_slot = i;
			break;
     28e:	07 c0       	rjmp	.+14     	; 0x29e <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     290:	4f 5f       	subi	r20, 0xFF	; 255
     292:	5f 4f       	sbci	r21, 0xFF	; 255
     294:	32 96       	adiw	r30, 0x02	; 2
     296:	48 30       	cpi	r20, 0x08	; 8
     298:	51 05       	cpc	r21, r1
     29a:	61 f7       	brne	.-40     	; 0x274 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     29c:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	ca 01       	movw	r24, r20
     2a2:	88 0f       	add	r24, r24
     2a4:	99 1f       	adc	r25, r25
     2a6:	bc 01       	movw	r22, r24
     2a8:	66 54       	subi	r22, 0x46	; 70
     2aa:	7e 4f       	sbci	r23, 0xFE	; 254
     2ac:	40 95       	com	r20
     2ae:	50 95       	com	r21
     2b0:	48 5f       	subi	r20, 0xF8	; 248
     2b2:	5f 4f       	sbci	r21, 0xFF	; 255
     2b4:	44 0f       	add	r20, r20
     2b6:	55 1f       	adc	r21, r21
     2b8:	88 54       	subi	r24, 0x48	; 72
     2ba:	9e 4f       	sbci	r25, 0xFE	; 254
     2bc:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <memmove>
	note_pool[7].note = EMPTY;	
     2c0:	8f ef       	ldi	r24, 0xFF	; 255
     2c2:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     2c6:	80 91 b8 01 	lds	r24, 0x01B8
     2ca:	8f 3f       	cpi	r24, 0xFF	; 255
     2cc:	19 f4       	brne	.+6      	; 0x2d4 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     2ce:	c0 93 b1 02 	sts	0x02B1, r28
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     2d4:	80 93 b1 02 	sts	0x02B1, r24

	}	
	
}
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     2dc:	8d e0       	ldi	r24, 0x0D	; 13
     2de:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     2e2:	82 e0       	ldi	r24, 0x02	; 2
     2e4:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     2e8:	08 95       	ret

000002ea <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     2ea:	90 93 89 00 	sts	0x0089, r25
     2ee:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     2f2:	20 91 84 00 	lds	r18, 0x0084
     2f6:	30 91 85 00 	lds	r19, 0x0085
     2fa:	82 17       	cp	r24, r18
     2fc:	93 07       	cpc	r25, r19
     2fe:	28 f4       	brcc	.+10     	; 0x30a <update_clock_rate+0x20>
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	90 93 85 00 	sts	0x0085, r25
     306:	80 93 84 00 	sts	0x0084, r24
     30a:	08 95       	ret

0000030c <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     30c:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     30e:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     310:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     312:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     314:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     316:	8c 91       	ld	r24, X
     318:	87 70       	andi	r24, 0x07	; 7
     31a:	82 b9       	out	0x02, r24	; 2
     31c:	66 e0       	ldi	r22, 0x06	; 6
     31e:	6a 95       	dec	r22
     320:	f1 f7       	brne	.-4      	; 0x31e <set_control_voltage+0x12>
     322:	00 c0       	rjmp	.+0      	; 0x324 <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     324:	ea ed       	ldi	r30, 0xDA	; 218
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	40 81       	ld	r20, Z
     32a:	8c 91       	ld	r24, X
     32c:	86 95       	lsr	r24
     32e:	86 95       	lsr	r24
     330:	86 95       	lsr	r24
     332:	87 70       	andi	r24, 0x07	; 7
     334:	21 e0       	ldi	r18, 0x01	; 1
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	b9 01       	movw	r22, r18
     33a:	02 c0       	rjmp	.+4      	; 0x340 <set_control_voltage+0x34>
     33c:	66 0f       	add	r22, r22
     33e:	77 1f       	adc	r23, r23
     340:	8a 95       	dec	r24
     342:	e2 f7       	brpl	.-8      	; 0x33c <set_control_voltage+0x30>
     344:	cb 01       	movw	r24, r22
     346:	84 2b       	or	r24, r20
     348:	80 83       	st	Z, r24
     34a:	76 e0       	ldi	r23, 0x06	; 6
     34c:	7a 95       	dec	r23
     34e:	f1 f7       	brne	.-4      	; 0x34c <set_control_voltage+0x40>
     350:	00 c0       	rjmp	.+0      	; 0x352 <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     352:	80 81       	ld	r24, Z
     354:	9c 91       	ld	r25, X
     356:	96 95       	lsr	r25
     358:	96 95       	lsr	r25
     35a:	96 95       	lsr	r25
     35c:	97 70       	andi	r25, 0x07	; 7
     35e:	02 c0       	rjmp	.+4      	; 0x364 <set_control_voltage+0x58>
     360:	22 0f       	add	r18, r18
     362:	33 1f       	adc	r19, r19
     364:	9a 95       	dec	r25
     366:	e2 f7       	brpl	.-8      	; 0x360 <set_control_voltage+0x54>
     368:	20 95       	com	r18
     36a:	28 23       	and	r18, r24
     36c:	20 83       	st	Z, r18
	
}	
     36e:	08 95       	ret

00000370 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     370:	83 b3       	in	r24, 0x13	; 19
     372:	83 60       	ori	r24, 0x03	; 3
     374:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     37a:	97 b1       	in	r25, 0x07	; 7
     37c:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     37e:	e9 ed       	ldi	r30, 0xD9	; 217
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	8f 60       	ori	r24, 0x0F	; 15
     386:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     388:	ea ed       	ldi	r30, 0xDA	; 218
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	80 7f       	andi	r24, 0xF0	; 240
     390:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     392:	84 b3       	in	r24, 0x14	; 20
     394:	83 60       	ori	r24, 0x03	; 3
     396:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     398:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     39a:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     39c:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     39e:	a0 9a       	sbi	0x14, 0	; 20
}
     3a0:	08 95       	ret

000003a2 <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	2e 97       	sbiw	r28, 0x0e	; 14
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     3ba:	28 e0       	ldi	r18, 0x08	; 8
     3bc:	29 83       	std	Y+1, r18	; 0x01
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	2a 83       	std	Y+2, r18	; 0x02
     3c2:	22 e0       	ldi	r18, 0x02	; 2
     3c4:	2b 83       	std	Y+3, r18	; 0x03
     3c6:	24 e0       	ldi	r18, 0x04	; 4
     3c8:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     3ca:	de 01       	movw	r26, r28
     3cc:	15 96       	adiw	r26, 0x05	; 5
     3ce:	e7 ee       	ldi	r30, 0xE7	; 231
     3d0:	f1 e0       	ldi	r31, 0x01	; 1
     3d2:	2a e0       	ldi	r18, 0x0A	; 10
     3d4:	01 90       	ld	r0, Z+
     3d6:	0d 92       	st	X+, r0
     3d8:	21 50       	subi	r18, 0x01	; 1
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     3dc:	2f ef       	ldi	r18, 0xFF	; 255
     3de:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     3e0:	ea ed       	ldi	r30, 0xDA	; 218
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	20 81       	ld	r18, Z
     3e6:	20 61       	ori	r18, 0x10	; 16
     3e8:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     3ea:	20 81       	ld	r18, Z
     3ec:	2f 7e       	andi	r18, 0xEF	; 239
     3ee:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     3f0:	06 2f       	mov	r16, r22
     3f2:	10 e0       	ldi	r17, 0x00	; 0
     3f4:	de 01       	movw	r26, r28
     3f6:	a0 0f       	add	r26, r16
     3f8:	b1 1f       	adc	r27, r17
     3fa:	11 96       	adiw	r26, 0x01	; 1
     3fc:	2c 91       	ld	r18, X
     3fe:	11 97       	sbiw	r26, 0x01	; 1
     400:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     402:	20 81       	ld	r18, Z
     404:	20 62       	ori	r18, 0x20	; 32
     406:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     408:	20 81       	ld	r18, Z
     40a:	2f 7d       	andi	r18, 0xDF	; 223
     40c:	20 83       	st	Z, r18
     40e:	48 2f       	mov	r20, r24
     410:	59 2f       	mov	r21, r25
     412:	87 e2       	ldi	r24, 0x27	; 39
     414:	40 31       	cpi	r20, 0x10	; 16
     416:	58 07       	cpc	r21, r24
     418:	10 f0       	brcs	.+4      	; 0x41e <display_dec+0x7c>
     41a:	4f e0       	ldi	r20, 0x0F	; 15
     41c:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     41e:	ca 01       	movw	r24, r20
     420:	96 95       	lsr	r25
     422:	87 95       	ror	r24
     424:	96 95       	lsr	r25
     426:	87 95       	ror	r24
     428:	9a 01       	movw	r18, r20
     42a:	36 95       	lsr	r19
     42c:	27 95       	ror	r18
     42e:	28 0f       	add	r18, r24
     430:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     432:	c9 01       	movw	r24, r18
     434:	92 95       	swap	r25
     436:	82 95       	swap	r24
     438:	8f 70       	andi	r24, 0x0F	; 15
     43a:	89 27       	eor	r24, r25
     43c:	9f 70       	andi	r25, 0x0F	; 15
     43e:	89 27       	eor	r24, r25
     440:	82 0f       	add	r24, r18
     442:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     444:	29 2f       	mov	r18, r25
     446:	33 27       	eor	r19, r19
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     44c:	96 95       	lsr	r25
     44e:	87 95       	ror	r24
     450:	96 95       	lsr	r25
     452:	87 95       	ror	r24
     454:	96 95       	lsr	r25
     456:	87 95       	ror	r24
	r = number - q2 * 10;
     458:	28 2f       	mov	r18, r24
     45a:	22 0f       	add	r18, r18
     45c:	32 2f       	mov	r19, r18
     45e:	33 0f       	add	r19, r19
     460:	33 0f       	add	r19, r19
     462:	23 0f       	add	r18, r19
     464:	e4 2f       	mov	r30, r20
     466:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	ea 30       	cpi	r30, 0x0A	; 10
     46e:	10 f4       	brcc	.+4      	; 0x474 <display_dec+0xd2>
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	68 0f       	add	r22, r24
     476:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     478:	9b 01       	movw	r18, r22
     47a:	36 95       	lsr	r19
     47c:	27 95       	ror	r18
     47e:	36 95       	lsr	r19
     480:	27 95       	ror	r18
     482:	ab 01       	movw	r20, r22
     484:	56 95       	lsr	r21
     486:	47 95       	ror	r20
     488:	24 0f       	add	r18, r20
     48a:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     48c:	c9 01       	movw	r24, r18
     48e:	92 95       	swap	r25
     490:	82 95       	swap	r24
     492:	8f 70       	andi	r24, 0x0F	; 15
     494:	89 27       	eor	r24, r25
     496:	9f 70       	andi	r25, 0x0F	; 15
     498:	89 27       	eor	r24, r25
     49a:	82 0f       	add	r24, r18
     49c:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     49e:	29 2f       	mov	r18, r25
     4a0:	33 27       	eor	r19, r19
     4a2:	82 0f       	add	r24, r18
     4a4:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     4a6:	96 95       	lsr	r25
     4a8:	87 95       	ror	r24
     4aa:	96 95       	lsr	r25
     4ac:	87 95       	ror	r24
     4ae:	96 95       	lsr	r25
     4b0:	87 95       	ror	r24
	r = qa - q3 * 10;
     4b2:	98 2f       	mov	r25, r24
     4b4:	99 0f       	add	r25, r25
     4b6:	29 2f       	mov	r18, r25
     4b8:	22 0f       	add	r18, r18
     4ba:	22 0f       	add	r18, r18
     4bc:	92 0f       	add	r25, r18
     4be:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	6a 30       	cpi	r22, 0x0A	; 10
     4c4:	08 f4       	brcc	.+2      	; 0x4c8 <display_dec+0x126>
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	89 0f       	add	r24, r25
	tens_place = rem[r];
     4ca:	41 ef       	ldi	r20, 0xF1	; 241
     4cc:	51 e0       	ldi	r21, 0x01	; 1
     4ce:	da 01       	movw	r26, r20
     4d0:	a6 0f       	add	r26, r22
     4d2:	b1 1d       	adc	r27, r1
     4d4:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     4d6:	28 2f       	mov	r18, r24
     4d8:	26 95       	lsr	r18
     4da:	26 95       	lsr	r18
     4dc:	98 2f       	mov	r25, r24
     4de:	96 95       	lsr	r25
     4e0:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     4e2:	29 2f       	mov	r18, r25
     4e4:	22 95       	swap	r18
     4e6:	2f 70       	andi	r18, 0x0F	; 15
     4e8:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     4ea:	96 95       	lsr	r25
     4ec:	96 95       	lsr	r25
     4ee:	96 95       	lsr	r25
	r = qb - q4 * 10;
     4f0:	29 2f       	mov	r18, r25
     4f2:	22 0f       	add	r18, r18
     4f4:	62 2f       	mov	r22, r18
     4f6:	66 0f       	add	r22, r22
     4f8:	66 0f       	add	r22, r22
     4fa:	26 0f       	add	r18, r22
     4fc:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     4fe:	da 01       	movw	r26, r20
     500:	a8 0f       	add	r26, r24
     502:	b1 1d       	adc	r27, r1
     504:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     506:	4e 0f       	add	r20, r30
     508:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     50a:	fa 01       	movw	r30, r20
     50c:	40 81       	ld	r20, Z
     50e:	40 93 b4 02 	sts	0x02B4, r20
	digit_index[1] = tens_place;
     512:	30 93 b5 02 	sts	0x02B5, r19
	digit_index[2] = hunds_place;
     516:	20 93 b6 02 	sts	0x02B6, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     51a:	21 e0       	ldi	r18, 0x01	; 1
     51c:	8a 30       	cpi	r24, 0x0A	; 10
     51e:	08 f4       	brcc	.+2      	; 0x522 <display_dec+0x180>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     524:	90 93 b7 02 	sts	0x02B7, r25

	cathode_byte = dec[digit_index[place]];
     528:	f8 01       	movw	r30, r16
     52a:	ec 54       	subi	r30, 0x4C	; 76
     52c:	fd 4f       	sbci	r31, 0xFD	; 253
     52e:	80 81       	ld	r24, Z
     530:	fe 01       	movw	r30, r28
     532:	e8 0f       	add	r30, r24
     534:	f1 1d       	adc	r31, r1
     536:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     538:	90 91 07 03 	lds	r25, 0x0307
     53c:	92 30       	cpi	r25, 0x02	; 2
     53e:	11 f4       	brne	.+4      	; 0x544 <display_dec+0x1a2>
     540:	80 62       	ori	r24, 0x20	; 32
     542:	03 c0       	rjmp	.+6      	; 0x54a <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     544:	91 30       	cpi	r25, 0x01	; 1
     546:	09 f4       	brne	.+2      	; 0x54a <display_dec+0x1a8>
     548:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     54a:	80 95       	com	r24
     54c:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     54e:	ea ed       	ldi	r30, 0xDA	; 218
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	80 81       	ld	r24, Z
     554:	80 61       	ori	r24, 0x10	; 16
     556:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     558:	80 81       	ld	r24, Z
     55a:	8f 7e       	andi	r24, 0xEF	; 239
     55c:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     55e:	2e 96       	adiw	r28, 0x0e	; 14
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	08 95       	ret

00000574 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     574:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     576:	66 23       	and	r22, r22
     578:	69 f4       	brne	.+26     	; 0x594 <update_display+0x20>

		
			
		display_dec(number, place);
     57a:	c0 91 b8 02 	lds	r28, 0x02B8
     57e:	6c 2f       	mov	r22, r28
     580:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     584:	8c 2f       	mov	r24, r28
     586:	8f 5f       	subi	r24, 0xFF	; 255
     588:	80 93 b8 02 	sts	0x02B8, r24
     58c:	c3 30       	cpi	r28, 0x03	; 3
     58e:	11 f4       	brne	.+4      	; 0x594 <update_display+0x20>
		{
			place = 0;
     590:	10 92 b8 02 	sts	0x02B8, r1
		
		
	}
	
	
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     598:	1f 92       	push	r1
     59a:	0f 92       	push	r0
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	0f 92       	push	r0
     5a0:	11 24       	eor	r1, r1
     5a2:	8f 93       	push	r24
     5a4:	9f 93       	push	r25
     5a6:	ef 93       	push	r30
     5a8:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     5aa:	80 91 7c 03 	lds	r24, 0x037C
     5ae:	81 50       	subi	r24, 0x01	; 1
     5b0:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     5b2:	80 91 7d 03 	lds	r24, 0x037D
     5b6:	88 23       	and	r24, r24
     5b8:	a1 f4       	brne	.+40     	; 0x5e2 <__vector_10+0x4a>
		count_finished = FALSE;
     5ba:	10 92 7a 03 	sts	0x037A, r1
		no_overflow = TRUE;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     5c4:	80 93 7d 03 	sts	0x037D, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     5c8:	e1 e8       	ldi	r30, 0x81	; 129
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	90 91 7b 03 	lds	r25, 0x037B
     5d2:	89 2b       	or	r24, r25
     5d4:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     5d6:	ef e6       	ldi	r30, 0x6F	; 111
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	81 60       	ori	r24, 0x01	; 1
     5de:	80 83       	st	Z, r24
     5e0:	11 c0       	rjmp	.+34     	; 0x604 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     5e2:	e4 e8       	ldi	r30, 0x84	; 132
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	91 81       	ldd	r25, Z+1	; 0x01
     5ea:	90 93 79 03 	sts	0x0379, r25
     5ee:	80 93 78 03 	sts	0x0378, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     5f2:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 7a 03 	sts	0x037A, r24
		period_counter = 0;
     5fc:	10 92 7d 03 	sts	0x037D, r1
		TCNT1 = 0; //reset timer/counter 1
     600:	11 82       	std	Z+1, r1	; 0x01
     602:	10 82       	st	Z, r1
	}
	
	
	
	
}
     604:	ff 91       	pop	r31
     606:	ef 91       	pop	r30
     608:	9f 91       	pop	r25
     60a:	8f 91       	pop	r24
     60c:	0f 90       	pop	r0
     60e:	0f be       	out	0x3f, r0	; 63
     610:	0f 90       	pop	r0
     612:	1f 90       	pop	r1
     614:	18 95       	reti

00000616 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     616:	1f 92       	push	r1
     618:	0f 92       	push	r0
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	0f 92       	push	r0
     61e:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     620:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     624:	0f 90       	pop	r0
     626:	0f be       	out	0x3f, r0	; 63
     628:	0f 90       	pop	r0
     62a:	1f 90       	pop	r1
     62c:	18 95       	reti

0000062e <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	6f 93       	push	r22
     642:	7f 93       	push	r23
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     650:	80 91 ca 03 	lds	r24, 0x03CA
     654:	86 95       	lsr	r24
     656:	90 91 cb 03 	lds	r25, 0x03CB
     65a:	98 17       	cp	r25, r24
     65c:	31 f4       	brne	.+12     	; 0x66a <__vector_7+0x3c>
				
		PORTB &= ~ (1<<ARP_SYNC_LED);
     65e:	2f 98       	cbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     660:	80 91 88 03 	lds	r24, 0x0388
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	09 f4       	brne	.+2      	; 0x66a <__vector_7+0x3c>
     668:	89 98       	cbi	0x11, 1	; 17
	}	
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     66a:	80 91 cb 03 	lds	r24, 0x03CB
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	80 93 cb 03 	sts	0x03CB, r24
     674:	90 91 ca 03 	lds	r25, 0x03CA
     678:	89 17       	cp	r24, r25
     67a:	69 f4       	brne	.+26     	; 0x696 <__vector_7+0x68>
		
		system_clock.ppqn_counter = 0;
     67c:	10 92 cb 03 	sts	0x03CB, r1
		PORTB |= (1<<ARP_SYNC_LED);
     680:	2f 9a       	sbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) {
     682:	80 91 88 03 	lds	r24, 0x0388
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	31 f4       	brne	.+12     	; 0x696 <__vector_7+0x68>
			
			//step arp note here based on range and note sequence from assigner	
			step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
     68a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <step_arp_note>
			if (gate_buffer != 0) PORTF |= (1<<GATE); //if arp is running and there are notes to be played, turn gate ON
     68e:	80 91 b0 02 	lds	r24, 0x02B0
     692:	81 11       	cpse	r24, r1
     694:	89 9a       	sbi	0x11, 1	; 17
		}			
	}
	
     696:	ff 91       	pop	r31
     698:	ef 91       	pop	r30
     69a:	bf 91       	pop	r27
     69c:	af 91       	pop	r26
     69e:	9f 91       	pop	r25
     6a0:	8f 91       	pop	r24
     6a2:	7f 91       	pop	r23
     6a4:	6f 91       	pop	r22
     6a6:	5f 91       	pop	r21
     6a8:	4f 91       	pop	r20
     6aa:	3f 91       	pop	r19
     6ac:	2f 91       	pop	r18
     6ae:	0f 90       	pop	r0
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	0f 90       	pop	r0
     6b4:	1f 90       	pop	r1
     6b6:	18 95       	reti

000006b8 <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     6b8:	68 3f       	cpi	r22, 0xF8	; 248
     6ba:	19 f0       	breq	.+6      	; 0x6c2 <real_time_event+0xa>
     6bc:	6a 3f       	cpi	r22, 0xFA	; 250
     6be:	c1 f4       	brne	.+48     	; 0x6f0 <real_time_event+0x38>
     6c0:	15 c0       	rjmp	.+42     	; 0x6ec <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     6c2:	80 91 d1 03 	lds	r24, 0x03D1
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	80 93 d1 03 	sts	0x03D1, r24
     6cc:	90 91 d0 03 	lds	r25, 0x03D0
     6d0:	89 17       	cp	r24, r25
     6d2:	71 f4       	brne	.+28     	; 0x6f0 <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     6d4:	2c 9a       	sbi	0x05, 4	; 5
     6d6:	86 e0       	ldi	r24, 0x06	; 6
     6d8:	8a 95       	dec	r24
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <real_time_event+0x20>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     6de:	85 b1       	in	r24, 0x05	; 5
     6e0:	80 58       	subi	r24, 0x80	; 128
     6e2:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     6e4:	10 92 d1 03 	sts	0x03D1, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     6e8:	2c 98       	cbi	0x05, 4	; 5
     6ea:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     6ec:	10 92 d1 03 	sts	0x03D1, r1
     6f0:	08 95       	ret

000006f2 <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     6f2:	84 2f       	mov	r24, r20
	
	remove_note(note);
     6f4:	0e 94 31 01 	call	0x262	; 0x262 <remove_note>
	gate_buffer--;
     6f8:	80 91 b0 02 	lds	r24, 0x02B0
     6fc:	81 50       	subi	r24, 0x01	; 1
     6fe:	80 93 b0 02 	sts	0x02B0, r24
	if (arp.clock_source == OFF) {	//if arp is off handle gate
     702:	90 91 88 03 	lds	r25, 0x0388
     706:	92 30       	cpi	r25, 0x02	; 2
     708:	21 f4       	brne	.+8      	; 0x712 <note_off_event+0x20>
		//gate_buffer--;
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     70a:	88 23       	and	r24, r24
     70c:	21 f4       	brne	.+8      	; 0x716 <note_off_event+0x24>
     70e:	89 98       	cbi	0x11, 1	; 17
     710:	08 95       	ret
	} else {
		
		update_arp_sequence();
     712:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     716:	08 95       	ret

00000718 <note_on_event>:





void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     718:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     71a:	90 91 ff 02 	lds	r25, 0x02FF
     71e:	90 ff       	sbrs	r25, 0
     720:	06 c0       	rjmp	.+12     	; 0x72e <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     722:	2c 9a       	sbi	0x05, 4	; 5
     724:	96 e0       	ldi	r25, 0x06	; 6
     726:	9a 95       	dec	r25
     728:	f1 f7       	brne	.-4      	; 0x726 <note_on_event+0xe>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     72c:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     72e:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     732:	22 23       	and	r18, r18
     734:	59 f4       	brne	.+22     	; 0x74c <note_on_event+0x34>
		remove_note(note);
     736:	0e 94 31 01 	call	0x262	; 0x262 <remove_note>
		gate_buffer--;
     73a:	80 91 b0 02 	lds	r24, 0x02B0
     73e:	81 50       	subi	r24, 0x01	; 1
     740:	80 93 b0 02 	sts	0x02B0, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     744:	88 23       	and	r24, r24
     746:	79 f4       	brne	.+30     	; 0x766 <note_on_event+0x4e>
     748:	89 98       	cbi	0x11, 1	; 17
     74a:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);
     74c:	62 2f       	mov	r22, r18
     74e:	0e 94 19 01 	call	0x232	; 0x232 <new_note>
		
		gate_buffer++;
     752:	80 91 b0 02 	lds	r24, 0x02B0
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	80 93 b0 02 	sts	0x02B0, r24
		if (arp.clock_source == OFF) { //if arp is off, handle gate
     75c:	80 91 88 03 	lds	r24, 0x0388
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	09 f4       	brne	.+2      	; 0x766 <note_on_event+0x4e>
			//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
			//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
			//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
			//could implement this with timers. MIDI Implant is 0.5 ms. Could maybe use Timer1 here to generate 0.3-0.5 ms gate retrigger
			
			PORTF |= (1<<GATE); //if arp is OFF then turn on gate. Otherwise arpeggiator handles GATE
     764:	89 9a       	sbi	0x11, 1	; 17
     766:	08 95       	ret

00000768 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     768:	87 e2       	ldi	r24, 0x27	; 39
     76a:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     76e:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     772:	88 e9       	ldi	r24, 0x98	; 152
     774:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     778:	08 95       	ret

0000077a <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	4f 93       	push	r20
     78a:	5f 93       	push	r21
     78c:	6f 93       	push	r22
     78e:	7f 93       	push	r23
     790:	8f 93       	push	r24
     792:	9f 93       	push	r25
     794:	af 93       	push	r26
     796:	bf 93       	push	r27
     798:	ef 93       	push	r30
     79a:	ff 93       	push	r31
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	0f 92       	push	r0
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     7a6:	80 91 c6 00 	lds	r24, 0x00C6
     7aa:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     7ac:	86 ed       	ldi	r24, 0xD6	; 214
     7ae:	93 e0       	ldi	r25, 0x03	; 3
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	ae 01       	movw	r20, r28
     7b4:	4f 5f       	subi	r20, 0xFF	; 255
     7b6:	5f 4f       	sbci	r21, 0xFF	; 255
     7b8:	0e 94 3c 19 	call	0x3278	; 0x3278 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     7bc:	0f 90       	pop	r0
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	ff 91       	pop	r31
     7c4:	ef 91       	pop	r30
     7c6:	bf 91       	pop	r27
     7c8:	af 91       	pop	r26
     7ca:	9f 91       	pop	r25
     7cc:	8f 91       	pop	r24
     7ce:	7f 91       	pop	r23
     7d0:	6f 91       	pop	r22
     7d2:	5f 91       	pop	r21
     7d4:	4f 91       	pop	r20
     7d6:	3f 91       	pop	r19
     7d8:	2f 91       	pop	r18
     7da:	0f 90       	pop	r0
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	0f 90       	pop	r0
     7e0:	1f 90       	pop	r1
     7e2:	18 95       	reti

000007e4 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     7e4:	c0 e8       	ldi	r28, 0x80	; 128
     7e6:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     7e8:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     7ea:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     7ec:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     7ee:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     7f0:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     7f2:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     7f4:	0e 94 43 07 	call	0xe86	; 0xe86 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     7f8:	a9 ed       	ldi	r26, 0xD9	; 217
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	8c 91       	ld	r24, X
     7fe:	80 6c       	ori	r24, 0xC0	; 192
     800:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     802:	ea ed       	ldi	r30, 0xDA	; 218
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	80 6c       	ori	r24, 0xC0	; 192
     80a:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     80c:	81 b1       	in	r24, 0x01	; 1
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     812:	92 b1       	in	r25, 0x02	; 2
     814:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     816:	8c 91       	ld	r24, X
     818:	80 63       	ori	r24, 0x30	; 48
     81a:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     81c:	80 81       	ld	r24, Z
     81e:	8f 7c       	andi	r24, 0xCF	; 207
     820:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     822:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     824:	ec ed       	ldi	r30, 0xDC	; 220
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	80 62       	ori	r24, 0x20	; 32
     82c:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     82e:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     830:	ed ed       	ldi	r30, 0xDD	; 221
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	80 62       	ori	r24, 0x20	; 32
     838:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     83a:	80 81       	ld	r24, Z
     83c:	8f 7d       	andi	r24, 0xDF	; 223
     83e:	80 83       	st	Z, r24
	DATA_BUS = 0;
     840:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     842:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     846:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     84a:	0e 94 b8 01 	call	0x370	; 0x370 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     84e:	c6 ed       	ldi	r28, 0xD6	; 214
     850:	d3 e0       	ldi	r29, 0x03	; 3
     852:	ce 01       	movw	r24, r28
     854:	0e 94 0b 19 	call	0x3216	; 0x3216 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     858:	ce 01       	movw	r24, r28
     85a:	6c e8       	ldi	r22, 0x8C	; 140
     85c:	73 e0       	ldi	r23, 0x03	; 3
     85e:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     862:	ce 01       	movw	r24, r28
     864:	69 e7       	ldi	r22, 0x79	; 121
     866:	73 e0       	ldi	r23, 0x03	; 3
     868:	0e 94 d7 18 	call	0x31ae	; 0x31ae <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     86c:	ce 01       	movw	r24, r28
     86e:	6c e5       	ldi	r22, 0x5C	; 92
     870:	73 e0       	ldi	r23, 0x03	; 3
     872:	0e 94 f7 18 	call	0x31ee	; 0x31ee <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     876:	0e 94 b4 03 	call	0x768	; 0x768 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     87a:	0e 94 68 07 	call	0xed0	; 0xed0 <update_spi>
	
	
	current_patch.number = 1;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     884:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     886:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <load_patch>
	
	setup_system_clock();
     890:	0e 94 6e 01 	call	0x2dc	; 0x2dc <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     894:	88 e1       	ldi	r24, 0x18	; 24
     896:	80 93 ca 03 	sts	0x03CA, r24

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     89a:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     89c:	0f 2e       	mov	r0, r31
     89e:	f0 e8       	ldi	r31, 0x80	; 128
     8a0:	ef 2e       	mov	r14, r31
     8a2:	f3 e0       	ldi	r31, 0x03	; 3
     8a4:	ff 2e       	mov	r15, r31
     8a6:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     8a8:	0f 2e       	mov	r0, r31
     8aa:	f7 e0       	ldi	r31, 0x07	; 7
     8ac:	cf 2e       	mov	r12, r31
     8ae:	f3 e0       	ldi	r31, 0x03	; 3
     8b0:	df 2e       	mov	r13, r31
     8b2:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     8b4:	bb 24       	eor	r11, r11
     8b6:	68 94       	set
     8b8:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     8ba:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     8bc:	c8 01       	movw	r24, r16
     8be:	0e 94 66 1b 	call	0x36cc	; 0x36cc <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     8c2:	80 91 fd 01 	lds	r24, 0x01FD
     8c6:	90 91 fe 01 	lds	r25, 0x01FE
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	0e 94 ba 02 	call	0x574	; 0x574 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     8d0:	0e 94 97 04 	call	0x92e	; 0x92e <scan_pots>
		update_control_voltages();
     8d4:	0e 94 24 05 	call	0xa48	; 0xa48 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     8d8:	80 91 b9 02 	lds	r24, 0x02B9
     8dc:	98 2f       	mov	r25, r24
     8de:	9f 5f       	subi	r25, 0xFF	; 255
     8e0:	90 93 b9 02 	sts	0x02B9, r25
     8e4:	85 30       	cpi	r24, 0x05	; 5
     8e6:	51 f7       	brne	.-44     	; 0x8bc <main+0xd8>
		{
			switch_timer = 0;
     8e8:	10 92 b9 02 	sts	0x02B9, r1
			switch_press = 0; //reset global switch press flag
     8ec:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     8f0:	f7 01       	movw	r30, r14
     8f2:	c0 81       	ld	r28, Z
     8f4:	0e 94 ed 15 	call	0x2bda	; 0x2bda <read_switch_port>
     8f8:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     8fa:	f6 01       	movw	r30, r12
     8fc:	90 81       	ld	r25, Z
     8fe:	91 30       	cpi	r25, 0x01	; 1
     900:	11 f4       	brne	.+4      	; 0x906 <main+0x122>
     902:	cd 2f       	mov	r28, r29
     904:	01 c0       	rjmp	.+2      	; 0x908 <main+0x124>
     906:	c0 e0       	ldi	r28, 0x00	; 0
     908:	c8 2b       	or	r28, r24
     90a:	f7 01       	movw	r30, r14
     90c:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     90e:	0e 94 68 07 	call	0xed0	; 0xed0 <update_spi>
			if (switch_press) { 
     912:	80 91 c1 02 	lds	r24, 0x02C1
     916:	88 23       	and	r24, r24
     918:	39 f0       	breq	.+14     	; 0x928 <main+0x144>
				update_patch();
     91a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     91e:	f6 01       	movw	r30, r12
     920:	80 81       	ld	r24, Z
     922:	88 23       	and	r24, r24
     924:	09 f4       	brne	.+2      	; 0x928 <main+0x144>
     926:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     928:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <update_patch_programmer>
     92c:	c7 cf       	rjmp	.-114    	; 0x8bc <main+0xd8>

0000092e <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	c0 e0       	ldi	r28, 0x00	; 0
     942:	d1 e0       	ldi	r29, 0x01	; 1
     944:	02 ec       	ldi	r16, 0xC2	; 194
     946:	12 e0       	ldi	r17, 0x02	; 2
     948:	0f 2e       	mov	r0, r31
     94a:	fc e3       	ldi	r31, 0x3C	; 60
     94c:	cf 2e       	mov	r12, r31
     94e:	dd 24       	eor	r13, r13
     950:	f0 2d       	mov	r31, r0
     952:	cc 0e       	add	r12, r28
     954:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     956:	0f 2e       	mov	r0, r31
     958:	f7 e0       	ldi	r31, 0x07	; 7
     95a:	ef 2e       	mov	r14, r31
     95c:	f3 e0       	ldi	r31, 0x03	; 3
     95e:	ff 2e       	mov	r15, r31
     960:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     962:	bb 24       	eor	r11, r11
     964:	68 94       	set
     966:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     968:	88 81       	ld	r24, Y
     96a:	99 81       	ldd	r25, Y+1	; 0x01
     96c:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     970:	90 93 bc 02 	sts	0x02BC, r25
     974:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     978:	e8 81       	ld	r30, Y
     97a:	f9 81       	ldd	r31, Y+1	; 0x01
     97c:	40 81       	ld	r20, Z
     97e:	21 81       	ldd	r18, Z+1	; 0x01
     980:	52 2f       	mov	r21, r18
     982:	53 70       	andi	r21, 0x03	; 3
     984:	84 1b       	sub	r24, r20
     986:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     988:	95 95       	asr	r25
     98a:	87 95       	ror	r24
     98c:	95 95       	asr	r25
     98e:	87 95       	ror	r24
     990:	84 0f       	add	r24, r20
     992:	95 1f       	adc	r25, r21
     994:	80 83       	st	Z, r24
     996:	89 2f       	mov	r24, r25
     998:	83 70       	andi	r24, 0x03	; 3
     99a:	2c 7f       	andi	r18, 0xFC	; 252
     99c:	28 2b       	or	r18, r24
     99e:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     9a0:	e9 91       	ld	r30, Y+
     9a2:	f9 91       	ld	r31, Y+
     9a4:	92 81       	ldd	r25, Z+2	; 0x02
     9a6:	20 81       	ld	r18, Z
     9a8:	81 81       	ldd	r24, Z+1	; 0x01
     9aa:	38 2f       	mov	r19, r24
     9ac:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     9ae:	d7 01       	movw	r26, r14
     9b0:	8c 91       	ld	r24, X
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	19 f0       	breq	.+6      	; 0x9bc <scan_pots+0x8e>
     9b6:	83 81       	ldd	r24, Z+3	; 0x03
     9b8:	88 23       	and	r24, r24
     9ba:	24 f0       	brlt	.+8      	; 0x9c4 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     9bc:	f8 01       	movw	r30, r16
     9be:	31 83       	std	Z+1, r19	; 0x01
     9c0:	20 83       	st	Z, r18
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     9c4:	49 2f       	mov	r20, r25
     9c6:	43 50       	subi	r20, 0x03	; 3
     9c8:	c9 01       	movw	r24, r18
     9ca:	95 95       	asr	r25
     9cc:	87 95       	ror	r24
     9ce:	95 95       	asr	r25
     9d0:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     9d2:	94 2f       	mov	r25, r20
     9d4:	98 1b       	sub	r25, r24
     9d6:	9a 3f       	cpi	r25, 0xFA	; 250
     9d8:	48 f4       	brcc	.+18     	; 0x9ec <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     9da:	d8 01       	movw	r26, r16
     9dc:	11 96       	adiw	r26, 0x01	; 1
     9de:	3c 93       	st	X, r19
     9e0:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     9e2:	83 81       	ldd	r24, Z+3	; 0x03
     9e4:	8f 77       	andi	r24, 0x7F	; 127
     9e6:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     9e8:	f7 01       	movw	r30, r14
     9ea:	b0 82       	st	Z, r11
     9ec:	0e 5f       	subi	r16, 0xFE	; 254
     9ee:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     9f0:	cc 15       	cp	r28, r12
     9f2:	dd 05       	cpc	r29, r13
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <scan_pots+0xca>
     9f6:	b8 cf       	rjmp	.-144    	; 0x968 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     9f8:	8c e7       	ldi	r24, 0x7C	; 124
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     a00:	90 93 bc 02 	sts	0x02BC, r25
     a04:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     a08:	20 91 7c 01 	lds	r18, 0x017C
     a0c:	40 91 7d 01 	lds	r20, 0x017D
     a10:	34 2f       	mov	r19, r20
     a12:	33 70       	andi	r19, 0x03	; 3
     a14:	82 1b       	sub	r24, r18
     a16:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     a18:	95 95       	asr	r25
     a1a:	87 95       	ror	r24
     a1c:	95 95       	asr	r25
     a1e:	87 95       	ror	r24
     a20:	28 0f       	add	r18, r24
     a22:	39 1f       	adc	r19, r25
     a24:	20 93 7c 01 	sts	0x017C, r18
     a28:	83 2f       	mov	r24, r19
     a2a:	83 70       	andi	r24, 0x03	; 3
     a2c:	4c 7f       	andi	r20, 0xFC	; 252
     a2e:	48 2b       	or	r20, r24
     a30:	40 93 7d 01 	sts	0x017D, r20
	
}
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	08 95       	ret

00000a48 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     a4c:	60 91 c2 02 	lds	r22, 0x02C2
     a50:	70 91 c3 02 	lds	r23, 0x02C3
     a54:	62 95       	swap	r22
     a56:	72 95       	swap	r23
     a58:	70 7f       	andi	r23, 0xF0	; 240
     a5a:	76 27       	eor	r23, r22
     a5c:	60 7f       	andi	r22, 0xF0	; 240
     a5e:	76 27       	eor	r23, r22
     a60:	84 ee       	ldi	r24, 0xE4	; 228
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     a68:	60 91 c4 02 	lds	r22, 0x02C4
     a6c:	70 91 c5 02 	lds	r23, 0x02C5
     a70:	62 95       	swap	r22
     a72:	72 95       	swap	r23
     a74:	70 7f       	andi	r23, 0xF0	; 240
     a76:	76 27       	eor	r23, r22
     a78:	60 7f       	andi	r22, 0xF0	; 240
     a7a:	76 27       	eor	r23, r22
     a7c:	83 ee       	ldi	r24, 0xE3	; 227
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     a84:	60 91 c6 02 	lds	r22, 0x02C6
     a88:	70 91 c7 02 	lds	r23, 0x02C7
     a8c:	66 0f       	add	r22, r22
     a8e:	77 1f       	adc	r23, r23
     a90:	66 0f       	add	r22, r22
     a92:	77 1f       	adc	r23, r23
     a94:	66 0f       	add	r22, r22
     a96:	77 1f       	adc	r23, r23
     a98:	82 ee       	ldi	r24, 0xE2	; 226
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     aa0:	60 91 c8 02 	lds	r22, 0x02C8
     aa4:	70 91 c9 02 	lds	r23, 0x02C9
     aa8:	62 95       	swap	r22
     aaa:	72 95       	swap	r23
     aac:	70 7f       	andi	r23, 0xF0	; 240
     aae:	76 27       	eor	r23, r22
     ab0:	60 7f       	andi	r22, 0xF0	; 240
     ab2:	76 27       	eor	r23, r22
     ab4:	83 eb       	ldi	r24, 0xB3	; 179
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     abc:	60 91 ca 02 	lds	r22, 0x02CA
     ac0:	70 91 cb 02 	lds	r23, 0x02CB
     ac4:	66 0f       	add	r22, r22
     ac6:	77 1f       	adc	r23, r23
     ac8:	66 0f       	add	r22, r22
     aca:	77 1f       	adc	r23, r23
     acc:	66 0f       	add	r22, r22
     ace:	77 1f       	adc	r23, r23
     ad0:	81 ee       	ldi	r24, 0xE1	; 225
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     ad8:	60 91 cc 02 	lds	r22, 0x02CC
     adc:	70 91 cd 02 	lds	r23, 0x02CD
     ae0:	62 95       	swap	r22
     ae2:	72 95       	swap	r23
     ae4:	70 7f       	andi	r23, 0xF0	; 240
     ae6:	76 27       	eor	r23, r22
     ae8:	60 7f       	andi	r22, 0xF0	; 240
     aea:	76 27       	eor	r23, r22
     aec:	80 ee       	ldi	r24, 0xE0	; 224
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     af4:	60 91 ce 02 	lds	r22, 0x02CE
     af8:	70 91 cf 02 	lds	r23, 0x02CF
     afc:	62 95       	swap	r22
     afe:	72 95       	swap	r23
     b00:	70 7f       	andi	r23, 0xF0	; 240
     b02:	76 27       	eor	r23, r22
     b04:	60 7f       	andi	r22, 0xF0	; 240
     b06:	76 27       	eor	r23, r22
     b08:	8f ed       	ldi	r24, 0xDF	; 223
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     b10:	60 91 d0 02 	lds	r22, 0x02D0
     b14:	70 91 d1 02 	lds	r23, 0x02D1
     b18:	62 95       	swap	r22
     b1a:	72 95       	swap	r23
     b1c:	70 7f       	andi	r23, 0xF0	; 240
     b1e:	76 27       	eor	r23, r22
     b20:	60 7f       	andi	r22, 0xF0	; 240
     b22:	76 27       	eor	r23, r22
     b24:	8e ed       	ldi	r24, 0xDE	; 222
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     b2c:	80 91 d4 02 	lds	r24, 0x02D4
     b30:	90 91 d5 02 	lds	r25, 0x02D5
     b34:	c0 e0       	ldi	r28, 0x00	; 0
     b36:	d2 e0       	ldi	r29, 0x02	; 2
     b38:	c8 1b       	sub	r28, r24
     b3a:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     b3c:	60 91 73 03 	lds	r22, 0x0373
     b40:	70 91 74 03 	lds	r23, 0x0374
     b44:	60 50       	subi	r22, 0x00	; 0
     b46:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     b48:	80 91 d2 02 	lds	r24, 0x02D2
     b4c:	90 91 d3 02 	lds	r25, 0x02D3
     b50:	68 1b       	sub	r22, r24
     b52:	79 0b       	sbc	r23, r25
     b54:	6c 0f       	add	r22, r28
     b56:	7d 1f       	adc	r23, r29
     b58:	8d ed       	ldi	r24, 0xDD	; 221
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     b60:	60 91 75 03 	lds	r22, 0x0375
     b64:	70 91 76 03 	lds	r23, 0x0376
     b68:	6c 0f       	add	r22, r28
     b6a:	7d 1f       	adc	r23, r29
     b6c:	8c ed       	ldi	r24, 0xDC	; 220
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     b74:	60 91 d6 02 	lds	r22, 0x02D6
     b78:	70 91 d7 02 	lds	r23, 0x02D7
     b7c:	62 95       	swap	r22
     b7e:	72 95       	swap	r23
     b80:	70 7f       	andi	r23, 0xF0	; 240
     b82:	76 27       	eor	r23, r22
     b84:	60 7f       	andi	r22, 0xF0	; 240
     b86:	76 27       	eor	r23, r22
     b88:	8b ed       	ldi	r24, 0xDB	; 219
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     b90:	60 91 da 02 	lds	r22, 0x02DA
     b94:	70 91 db 02 	lds	r23, 0x02DB
     b98:	62 95       	swap	r22
     b9a:	72 95       	swap	r23
     b9c:	70 7f       	andi	r23, 0xF0	; 240
     b9e:	76 27       	eor	r23, r22
     ba0:	60 7f       	andi	r22, 0xF0	; 240
     ba2:	76 27       	eor	r23, r22
     ba4:	8a ed       	ldi	r24, 0xDA	; 218
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     bac:	60 91 dc 02 	lds	r22, 0x02DC
     bb0:	70 91 dd 02 	lds	r23, 0x02DD
     bb4:	62 95       	swap	r22
     bb6:	72 95       	swap	r23
     bb8:	70 7f       	andi	r23, 0xF0	; 240
     bba:	76 27       	eor	r23, r22
     bbc:	60 7f       	andi	r22, 0xF0	; 240
     bbe:	76 27       	eor	r23, r22
     bc0:	89 ed       	ldi	r24, 0xD9	; 217
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     bc8:	60 91 7c 01 	lds	r22, 0x017C
     bcc:	80 91 7d 01 	lds	r24, 0x017D
     bd0:	78 2f       	mov	r23, r24
     bd2:	73 70       	andi	r23, 0x03	; 3
     bd4:	62 95       	swap	r22
     bd6:	72 95       	swap	r23
     bd8:	70 7f       	andi	r23, 0xF0	; 240
     bda:	76 27       	eor	r23, r22
     bdc:	60 7f       	andi	r22, 0xF0	; 240
     bde:	76 27       	eor	r23, r22
     be0:	88 ed       	ldi	r24, 0xD8	; 216
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     be8:	60 91 de 02 	lds	r22, 0x02DE
     bec:	70 91 df 02 	lds	r23, 0x02DF
     bf0:	62 95       	swap	r22
     bf2:	72 95       	swap	r23
     bf4:	70 7f       	andi	r23, 0xF0	; 240
     bf6:	76 27       	eor	r23, r22
     bf8:	60 7f       	andi	r22, 0xF0	; 240
     bfa:	76 27       	eor	r23, r22
     bfc:	87 ed       	ldi	r24, 0xD7	; 215
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     c04:	60 91 e0 02 	lds	r22, 0x02E0
     c08:	70 91 e1 02 	lds	r23, 0x02E1
     c0c:	62 95       	swap	r22
     c0e:	72 95       	swap	r23
     c10:	70 7f       	andi	r23, 0xF0	; 240
     c12:	76 27       	eor	r23, r22
     c14:	60 7f       	andi	r22, 0xF0	; 240
     c16:	76 27       	eor	r23, r22
     c18:	86 ed       	ldi	r24, 0xD6	; 214
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     c20:	60 91 e2 02 	lds	r22, 0x02E2
     c24:	70 91 e3 02 	lds	r23, 0x02E3
     c28:	62 95       	swap	r22
     c2a:	72 95       	swap	r23
     c2c:	70 7f       	andi	r23, 0xF0	; 240
     c2e:	76 27       	eor	r23, r22
     c30:	60 7f       	andi	r22, 0xF0	; 240
     c32:	76 27       	eor	r23, r22
     c34:	85 ed       	ldi	r24, 0xD5	; 213
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     c3c:	0e 94 0f 01 	call	0x21e	; 0x21e <get_current_note>
     c40:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     c42:	88 30       	cpi	r24, 0x08	; 8
     c44:	08 f4       	brcc	.+2      	; 0xc48 <update_control_voltages+0x200>
     c46:	c8 e0       	ldi	r28, 0x08	; 8
	value_to_display = current_patch.number + 100*midi_clock.divider; //100*note;
     c48:	60 91 03 03 	lds	r22, 0x0303
     c4c:	40 91 d0 03 	lds	r20, 0x03D0
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	24 e6       	ldi	r18, 0x64	; 100
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	42 9f       	mul	r20, r18
     c58:	c0 01       	movw	r24, r0
     c5a:	43 9f       	mul	r20, r19
     c5c:	90 0d       	add	r25, r0
     c5e:	52 9f       	mul	r21, r18
     c60:	90 0d       	add	r25, r0
     c62:	11 24       	eor	r1, r1
     c64:	86 0f       	add	r24, r22
     c66:	91 1d       	adc	r25, r1
     c68:	90 93 fe 01 	sts	0x01FE, r25
     c6c:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     c70:	8c 2f       	mov	r24, r28
     c72:	88 50       	subi	r24, 0x08	; 8
     c74:	6f e0       	ldi	r22, 0x0F	; 15
     c76:	73 e0       	ldi	r23, 0x03	; 3
     c78:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     c7c:	bc 01       	movw	r22, r24
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	20 91 e6 02 	lds	r18, 0x02E6
     c86:	30 91 e7 02 	lds	r19, 0x02E7
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <__mulsi3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	07 2e       	mov	r0, r23
     c98:	7a e0       	ldi	r23, 0x0A	; 10
     c9a:	b6 95       	lsr	r27
     c9c:	a7 95       	ror	r26
     c9e:	97 95       	ror	r25
     ca0:	87 95       	ror	r24
     ca2:	7a 95       	dec	r23
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <update_control_voltages+0x252>
     ca6:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     ca8:	60 91 e4 02 	lds	r22, 0x02E4
     cac:	70 91 e5 02 	lds	r23, 0x02E5
     cb0:	62 95       	swap	r22
     cb2:	72 95       	swap	r23
     cb4:	70 7f       	andi	r23, 0xF0	; 240
     cb6:	76 27       	eor	r23, r22
     cb8:	60 7f       	andi	r22, 0xF0	; 240
     cba:	76 27       	eor	r23, r22
     cbc:	86 0f       	add	r24, r22
     cbe:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     cc0:	bc 01       	movw	r22, r24
     cc2:	80 e4       	ldi	r24, 0x40	; 64
     cc4:	60 30       	cpi	r22, 0x00	; 0
     cc6:	78 07       	cpc	r23, r24
     cc8:	10 f0       	brcs	.+4      	; 0xcce <update_control_voltages+0x286>
     cca:	6f ef       	ldi	r22, 0xFF	; 255
     ccc:	7f e3       	ldi	r23, 0x3F	; 63
     cce:	84 ed       	ldi	r24, 0xD4	; 212
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     cd6:	60 91 e8 02 	lds	r22, 0x02E8
     cda:	70 91 e9 02 	lds	r23, 0x02E9
     cde:	62 95       	swap	r22
     ce0:	72 95       	swap	r23
     ce2:	70 7f       	andi	r23, 0xF0	; 240
     ce4:	76 27       	eor	r23, r22
     ce6:	60 7f       	andi	r22, 0xF0	; 240
     ce8:	76 27       	eor	r23, r22
     cea:	82 ed       	ldi	r24, 0xD2	; 210
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     cf2:	60 91 ea 02 	lds	r22, 0x02EA
     cf6:	70 91 eb 02 	lds	r23, 0x02EB
     cfa:	62 95       	swap	r22
     cfc:	72 95       	swap	r23
     cfe:	70 7f       	andi	r23, 0xF0	; 240
     d00:	76 27       	eor	r23, r22
     d02:	60 7f       	andi	r22, 0xF0	; 240
     d04:	76 27       	eor	r23, r22
     d06:	81 ed       	ldi	r24, 0xD1	; 209
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     d0e:	60 91 ec 02 	lds	r22, 0x02EC
     d12:	70 91 ed 02 	lds	r23, 0x02ED
     d16:	62 95       	swap	r22
     d18:	72 95       	swap	r23
     d1a:	70 7f       	andi	r23, 0xF0	; 240
     d1c:	76 27       	eor	r23, r22
     d1e:	60 7f       	andi	r22, 0xF0	; 240
     d20:	76 27       	eor	r23, r22
     d22:	80 ed       	ldi	r24, 0xD0	; 208
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     d2a:	60 91 ee 02 	lds	r22, 0x02EE
     d2e:	70 91 ef 02 	lds	r23, 0x02EF
     d32:	62 95       	swap	r22
     d34:	72 95       	swap	r23
     d36:	70 7f       	andi	r23, 0xF0	; 240
     d38:	76 27       	eor	r23, r22
     d3a:	60 7f       	andi	r22, 0xF0	; 240
     d3c:	76 27       	eor	r23, r22
     d3e:	8f ec       	ldi	r24, 0xCF	; 207
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     d46:	60 91 f0 02 	lds	r22, 0x02F0
     d4a:	70 91 f1 02 	lds	r23, 0x02F1
     d4e:	62 95       	swap	r22
     d50:	72 95       	swap	r23
     d52:	70 7f       	andi	r23, 0xF0	; 240
     d54:	76 27       	eor	r23, r22
     d56:	60 7f       	andi	r22, 0xF0	; 240
     d58:	76 27       	eor	r23, r22
     d5a:	8e ec       	ldi	r24, 0xCE	; 206
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     d62:	60 91 f2 02 	lds	r22, 0x02F2
     d66:	70 91 f3 02 	lds	r23, 0x02F3
     d6a:	62 95       	swap	r22
     d6c:	72 95       	swap	r23
     d6e:	70 7f       	andi	r23, 0xF0	; 240
     d70:	76 27       	eor	r23, r22
     d72:	60 7f       	andi	r22, 0xF0	; 240
     d74:	76 27       	eor	r23, r22
     d76:	8d ec       	ldi	r24, 0xCD	; 205
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     d7e:	60 91 f4 02 	lds	r22, 0x02F4
     d82:	70 91 f5 02 	lds	r23, 0x02F5
     d86:	62 95       	swap	r22
     d88:	72 95       	swap	r23
     d8a:	70 7f       	andi	r23, 0xF0	; 240
     d8c:	76 27       	eor	r23, r22
     d8e:	60 7f       	andi	r22, 0xF0	; 240
     d90:	76 27       	eor	r23, r22
     d92:	8c ec       	ldi	r24, 0xCC	; 204
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     d9a:	60 91 f8 02 	lds	r22, 0x02F8
     d9e:	70 91 f9 02 	lds	r23, 0x02F9
     da2:	62 95       	swap	r22
     da4:	72 95       	swap	r23
     da6:	70 7f       	andi	r23, 0xF0	; 240
     da8:	76 27       	eor	r23, r22
     daa:	60 7f       	andi	r22, 0xF0	; 240
     dac:	76 27       	eor	r23, r22
     dae:	8a ec       	ldi	r24, 0xCA	; 202
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     db6:	60 91 f6 02 	lds	r22, 0x02F6
     dba:	70 91 f7 02 	lds	r23, 0x02F7
     dbe:	62 95       	swap	r22
     dc0:	72 95       	swap	r23
     dc2:	70 7f       	andi	r23, 0xF0	; 240
     dc4:	76 27       	eor	r23, r22
     dc6:	60 7f       	andi	r22, 0xF0	; 240
     dc8:	76 27       	eor	r23, r22
     dca:	8b ec       	ldi	r24, 0xCB	; 203
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     dd2:	60 91 fc 02 	lds	r22, 0x02FC
     dd6:	70 91 fd 02 	lds	r23, 0x02FD
     dda:	62 95       	swap	r22
     ddc:	72 95       	swap	r23
     dde:	70 7f       	andi	r23, 0xF0	; 240
     de0:	76 27       	eor	r23, r22
     de2:	60 7f       	andi	r22, 0xF0	; 240
     de4:	76 27       	eor	r23, r22
     de6:	88 ec       	ldi	r24, 0xC8	; 200
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     dee:	60 91 fa 02 	lds	r22, 0x02FA
     df2:	70 91 fb 02 	lds	r23, 0x02FB
     df6:	62 95       	swap	r22
     df8:	72 95       	swap	r23
     dfa:	70 7f       	andi	r23, 0xF0	; 240
     dfc:	76 27       	eor	r23, r22
     dfe:	60 7f       	andi	r22, 0xF0	; 240
     e00:	76 27       	eor	r23, r22
     e02:	89 ec       	ldi	r24, 0xC9	; 201
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     e0a:	8c 2f       	mov	r24, r28
     e0c:	6f e0       	ldi	r22, 0x0F	; 15
     e0e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     e12:	61 e5       	ldi	r22, 0x51	; 81
     e14:	73 e0       	ldi	r23, 0x03	; 3
     e16:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <interpolate_pitch_cv>
     e1a:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     e1c:	86 ee       	ldi	r24, 0xE6	; 230
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     e24:	8c 2f       	mov	r24, r28
     e26:	60 ef       	ldi	r22, 0xF0	; 240
     e28:	0e 94 c1 0c 	call	0x1982	; 0x1982 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     e2c:	6f e2       	ldi	r22, 0x2F	; 47
     e2e:	73 e0       	ldi	r23, 0x03	; 3
     e30:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <interpolate_pitch_cv>
     e34:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     e36:	85 ee       	ldi	r24, 0xE5	; 229
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     e3e:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     e40:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     e42:	20 91 88 01 	lds	r18, 0x0188
     e46:	80 91 89 01 	lds	r24, 0x0189
     e4a:	38 2f       	mov	r19, r24
     e4c:	33 70       	andi	r19, 0x03	; 3
     e4e:	83 ef       	ldi	r24, 0xF3	; 243
     e50:	94 e0       	ldi	r25, 0x04	; 4
     e52:	82 1b       	sub	r24, r18
     e54:	93 0b       	sbc	r25, r19
     e56:	90 93 cd 03 	sts	0x03CD, r25
     e5a:	80 93 cc 03 	sts	0x03CC, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     e5e:	20 91 ce 03 	lds	r18, 0x03CE
     e62:	30 91 cf 03 	lds	r19, 0x03CF
     e66:	82 17       	cp	r24, r18
     e68:	93 07       	cpc	r25, r19
     e6a:	11 f0       	breq	.+4      	; 0xe70 <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
     e6c:	0e 94 75 01 	call	0x2ea	; 0x2ea <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     e70:	80 91 cc 03 	lds	r24, 0x03CC
     e74:	90 91 cd 03 	lds	r25, 0x03CD
     e78:	90 93 cf 03 	sts	0x03CF, r25
     e7c:	80 93 ce 03 	sts	0x03CE, r24
	
}			
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     e86:	84 b1       	in	r24, 0x04	; 4
     e88:	87 62       	ori	r24, 0x27	; 39
     e8a:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     e8c:	ec ed       	ldi	r30, 0xDC	; 220
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8c 65       	ori	r24, 0x5C	; 92
     e94:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     e96:	85 b1       	in	r24, 0x05	; 5
     e98:	89 7d       	andi	r24, 0xD9	; 217
     e9a:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     e9c:	ed ed       	ldi	r30, 0xDD	; 221
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	83 7f       	andi	r24, 0xF3	; 243
     ea4:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     ea6:	80 e5       	ldi	r24, 0x50	; 80
     ea8:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     eaa:	80 81       	ld	r24, Z
     eac:	87 7f       	andi	r24, 0xF7	; 247
     eae:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     eb0:	80 81       	ld	r24, Z
     eb2:	87 7f       	andi	r24, 0xF7	; 247
     eb4:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     eb6:	80 81       	ld	r24, Z
     eb8:	88 60       	ori	r24, 0x08	; 8
     eba:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 7e       	andi	r24, 0xEF	; 239
     ec0:	80 83       	st	Z, r24
	
}
     ec2:	08 95       	ret

00000ec4 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     ec4:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     ec6:	0d b4       	in	r0, 0x2d	; 45
     ec8:	07 fe       	sbrs	r0, 7
     eca:	fd cf       	rjmp	.-6      	; 0xec6 <spi_shift_byte+0x2>
	return SPDR;
     ecc:	8e b5       	in	r24, 0x2e	; 46
	
}
     ece:	08 95       	ret

00000ed0 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     ed0:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     ed2:	80 91 02 03 	lds	r24, 0x0302
     ed6:	0e 94 62 07 	call	0xec4	; 0xec4 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     eda:	90 91 c1 02 	lds	r25, 0x02C1
     ede:	98 2b       	or	r25, r24
     ee0:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     ee4:	20 91 bf 02 	lds	r18, 0x02BF
     ee8:	98 2f       	mov	r25, r24
     eea:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     eec:	89 2f       	mov	r24, r25
     eee:	82 27       	eor	r24, r18
     ef0:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     ef4:	89 23       	and	r24, r25
     ef6:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     efa:	90 91 7e 03 	lds	r25, 0x037E
     efe:	89 27       	eor	r24, r25
     f00:	80 93 7e 03 	sts	0x037E, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     f04:	80 91 01 03 	lds	r24, 0x0301
     f08:	0e 94 62 07 	call	0xec4	; 0xec4 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     f0c:	90 91 c1 02 	lds	r25, 0x02C1
     f10:	98 2b       	or	r25, r24
     f12:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     f16:	20 91 bd 02 	lds	r18, 0x02BD
     f1a:	98 2f       	mov	r25, r24
     f1c:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     f1e:	89 2f       	mov	r24, r25
     f20:	82 27       	eor	r24, r18
     f22:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     f26:	89 23       	and	r24, r25
     f28:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     f2c:	90 91 7f 03 	lds	r25, 0x037F
     f30:	89 27       	eor	r24, r25
     f32:	80 93 7f 03 	sts	0x037F, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     f36:	80 91 00 03 	lds	r24, 0x0300
     f3a:	0e 94 62 07 	call	0xec4	; 0xec4 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     f3e:	80 91 ff 02 	lds	r24, 0x02FF
     f42:	0e 94 62 07 	call	0xec4	; 0xec4 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     f46:	80 91 07 03 	lds	r24, 0x0307
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	11 f4       	brne	.+4      	; 0xf52 <update_spi+0x82>
     f4e:	20 e8       	ldi	r18, 0x80	; 128
     f50:	01 c0       	rjmp	.+2      	; 0xf54 <update_spi+0x84>
     f52:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
     f54:	80 91 80 03 	lds	r24, 0x0380
     f58:	88 1f       	adc	r24, r24
     f5a:	88 27       	eor	r24, r24
     f5c:	88 1f       	adc	r24, r24
     f5e:	82 95       	swap	r24
     f60:	88 0f       	add	r24, r24
     f62:	88 0f       	add	r24, r24
     f64:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     f66:	90 91 fe 02 	lds	r25, 0x02FE
     f6a:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     f6c:	82 2b       	or	r24, r18
     f6e:	0e 94 62 07 	call	0xec4	; 0xec4 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     f72:	ed ed       	ldi	r30, 0xDD	; 221
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	87 7f       	andi	r24, 0xF7	; 247
     f7a:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     f7c:	80 81       	ld	r24, Z
     f7e:	88 60       	ori	r24, 0x08	; 8
     f80:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     f82:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     f84:	08 95       	ret

00000f86 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     f86:	a0 e0       	ldi	r26, 0x00	; 0
     f88:	b1 e0       	ldi	r27, 0x01	; 1
     f8a:	9d 01       	movw	r18, r26
     f8c:	24 5c       	subi	r18, 0xC4	; 196
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     f90:	ed 91       	ld	r30, X+
     f92:	fc 91       	ld	r31, X
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	80 81       	ld	r24, Z
     f98:	41 81       	ldd	r20, Z+1	; 0x01
     f9a:	94 2f       	mov	r25, r20
     f9c:	93 70       	andi	r25, 0x03	; 3
     f9e:	95 95       	asr	r25
     fa0:	87 95       	ror	r24
     fa2:	95 95       	asr	r25
     fa4:	87 95       	ror	r24
     fa6:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     fa8:	ed 91       	ld	r30, X+
     faa:	fd 91       	ld	r31, X+
     fac:	83 81       	ldd	r24, Z+3	; 0x03
     fae:	80 68       	ori	r24, 0x80	; 128
     fb0:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
     fb2:	a2 17       	cp	r26, r18
     fb4:	b3 07       	cpc	r27, r19
     fb6:	61 f7       	brne	.-40     	; 0xf90 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     fb8:	08 95       	ret

00000fba <unlock_pots>:

void unlock_pots(void) {
     fba:	e0 e0       	ldi	r30, 0x00	; 0
     fbc:	f1 e0       	ldi	r31, 0x01	; 1
     fbe:	cf 01       	movw	r24, r30
     fc0:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
     fc2:	a1 91       	ld	r26, Z+
     fc4:	b1 91       	ld	r27, Z+
     fc6:	13 96       	adiw	r26, 0x03	; 3
     fc8:	2c 91       	ld	r18, X
     fca:	13 97       	sbiw	r26, 0x03	; 3
     fcc:	2f 77       	andi	r18, 0x7F	; 127
     fce:	13 96       	adiw	r26, 0x03	; 3
     fd0:	2c 93       	st	X, r18
     fd2:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
     fd4:	e8 17       	cp	r30, r24
     fd6:	f9 07       	cpc	r31, r25
     fd8:	a1 f7       	brne	.-24     	; 0xfc2 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
     fda:	08 95       	ret

00000fdc <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	ab 97       	sbiw	r28, 0x2b	; 43
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     ff4:	ee ed       	ldi	r30, 0xDE	; 222
     ff6:	f2 e0       	ldi	r31, 0x02	; 2
     ff8:	20 91 de 02 	lds	r18, 0x02DE
     ffc:	82 2f       	mov	r24, r18
     ffe:	82 95       	swap	r24
    1000:	80 7f       	andi	r24, 0xF0	; 240
    1002:	22 95       	swap	r18
    1004:	2f 70       	andi	r18, 0x0F	; 15
    1006:	90 91 df 02 	lds	r25, 0x02DF
    100a:	93 70       	andi	r25, 0x03	; 3
    100c:	92 95       	swap	r25
    100e:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
    1010:	df 01       	movw	r26, r30
    1012:	5a 97       	sbiw	r26, 0x1a	; 26
    1014:	3c 91       	ld	r19, X
    1016:	53 2f       	mov	r21, r19
    1018:	55 0f       	add	r21, r21
    101a:	55 0f       	add	r21, r21
    101c:	4a 81       	ldd	r20, Y+2	; 0x02
    101e:	43 70       	andi	r20, 0x03	; 3
    1020:	45 2b       	or	r20, r21
    1022:	4a 83       	std	Y+2, r20	; 0x02
    1024:	63 2f       	mov	r22, r19
    1026:	62 95       	swap	r22
    1028:	66 95       	lsr	r22
    102a:	66 95       	lsr	r22
    102c:	63 70       	andi	r22, 0x03	; 3
    102e:	11 96       	adiw	r26, 0x01	; 1
    1030:	4c 91       	ld	r20, X
    1032:	43 70       	andi	r20, 0x03	; 3
    1034:	44 0f       	add	r20, r20
    1036:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    1038:	df 01       	movw	r26, r30
    103a:	58 97       	sbiw	r26, 0x18	; 24
    103c:	3c 91       	ld	r19, X
    103e:	53 2f       	mov	r21, r19
    1040:	52 95       	swap	r21
    1042:	50 7f       	andi	r21, 0xF0	; 240
    1044:	46 2b       	or	r20, r22
    1046:	45 2b       	or	r20, r21
    1048:	4b 83       	std	Y+3, r20	; 0x03
    104a:	63 2f       	mov	r22, r19
    104c:	62 95       	swap	r22
    104e:	6f 70       	andi	r22, 0x0F	; 15
    1050:	11 96       	adiw	r26, 0x01	; 1
    1052:	4c 91       	ld	r20, X
    1054:	43 70       	andi	r20, 0x03	; 3
    1056:	42 95       	swap	r20
    1058:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    105a:	df 01       	movw	r26, r30
    105c:	56 97       	sbiw	r26, 0x16	; 22
    105e:	3c 91       	ld	r19, X
    1060:	53 2f       	mov	r21, r19
    1062:	52 95       	swap	r21
    1064:	55 0f       	add	r21, r21
    1066:	55 0f       	add	r21, r21
    1068:	50 7c       	andi	r21, 0xC0	; 192
    106a:	46 2b       	or	r20, r22
    106c:	45 2b       	or	r20, r21
    106e:	4c 83       	std	Y+4, r20	; 0x04
    1070:	11 96       	adiw	r26, 0x01	; 1
    1072:	4c 91       	ld	r20, X
    1074:	42 95       	swap	r20
    1076:	44 0f       	add	r20, r20
    1078:	44 0f       	add	r20, r20
    107a:	40 7c       	andi	r20, 0xC0	; 192
    107c:	36 95       	lsr	r19
    107e:	36 95       	lsr	r19
    1080:	34 2b       	or	r19, r20
    1082:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    1084:	df 01       	movw	r26, r30
    1086:	54 97       	sbiw	r26, 0x14	; 20
    1088:	3c 91       	ld	r19, X
    108a:	3e 83       	std	Y+6, r19	; 0x06
    108c:	11 96       	adiw	r26, 0x01	; 1
    108e:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    1090:	df 01       	movw	r26, r30
    1092:	52 97       	sbiw	r26, 0x12	; 18
    1094:	3c 91       	ld	r19, X
    1096:	53 2f       	mov	r21, r19
    1098:	55 0f       	add	r21, r21
    109a:	55 0f       	add	r21, r21
    109c:	43 70       	andi	r20, 0x03	; 3
    109e:	45 2b       	or	r20, r21
    10a0:	4f 83       	std	Y+7, r20	; 0x07
    10a2:	63 2f       	mov	r22, r19
    10a4:	62 95       	swap	r22
    10a6:	66 95       	lsr	r22
    10a8:	66 95       	lsr	r22
    10aa:	63 70       	andi	r22, 0x03	; 3
    10ac:	11 96       	adiw	r26, 0x01	; 1
    10ae:	4c 91       	ld	r20, X
    10b0:	43 70       	andi	r20, 0x03	; 3
    10b2:	44 0f       	add	r20, r20
    10b4:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    10b6:	df 01       	movw	r26, r30
    10b8:	50 97       	sbiw	r26, 0x10	; 16
    10ba:	3c 91       	ld	r19, X
    10bc:	53 2f       	mov	r21, r19
    10be:	52 95       	swap	r21
    10c0:	50 7f       	andi	r21, 0xF0	; 240
    10c2:	46 2b       	or	r20, r22
    10c4:	45 2b       	or	r20, r21
    10c6:	48 87       	std	Y+8, r20	; 0x08
    10c8:	63 2f       	mov	r22, r19
    10ca:	62 95       	swap	r22
    10cc:	6f 70       	andi	r22, 0x0F	; 15
    10ce:	11 96       	adiw	r26, 0x01	; 1
    10d0:	4c 91       	ld	r20, X
    10d2:	43 70       	andi	r20, 0x03	; 3
    10d4:	42 95       	swap	r20
    10d6:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    10d8:	df 01       	movw	r26, r30
    10da:	1e 97       	sbiw	r26, 0x0e	; 14
    10dc:	3c 91       	ld	r19, X
    10de:	53 2f       	mov	r21, r19
    10e0:	52 95       	swap	r21
    10e2:	55 0f       	add	r21, r21
    10e4:	55 0f       	add	r21, r21
    10e6:	50 7c       	andi	r21, 0xC0	; 192
    10e8:	46 2b       	or	r20, r22
    10ea:	45 2b       	or	r20, r21
    10ec:	49 87       	std	Y+9, r20	; 0x09
    10ee:	11 96       	adiw	r26, 0x01	; 1
    10f0:	4c 91       	ld	r20, X
    10f2:	42 95       	swap	r20
    10f4:	44 0f       	add	r20, r20
    10f6:	44 0f       	add	r20, r20
    10f8:	40 7c       	andi	r20, 0xC0	; 192
    10fa:	36 95       	lsr	r19
    10fc:	36 95       	lsr	r19
    10fe:	34 2b       	or	r19, r20
    1100:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    1102:	df 01       	movw	r26, r30
    1104:	1c 97       	sbiw	r26, 0x0c	; 12
    1106:	3c 91       	ld	r19, X
    1108:	3b 87       	std	Y+11, r19	; 0x0b
    110a:	11 96       	adiw	r26, 0x01	; 1
    110c:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    110e:	df 01       	movw	r26, r30
    1110:	1a 97       	sbiw	r26, 0x0a	; 10
    1112:	3c 91       	ld	r19, X
    1114:	53 2f       	mov	r21, r19
    1116:	55 0f       	add	r21, r21
    1118:	55 0f       	add	r21, r21
    111a:	43 70       	andi	r20, 0x03	; 3
    111c:	45 2b       	or	r20, r21
    111e:	4c 87       	std	Y+12, r20	; 0x0c
    1120:	63 2f       	mov	r22, r19
    1122:	62 95       	swap	r22
    1124:	66 95       	lsr	r22
    1126:	66 95       	lsr	r22
    1128:	63 70       	andi	r22, 0x03	; 3
    112a:	11 96       	adiw	r26, 0x01	; 1
    112c:	4c 91       	ld	r20, X
    112e:	43 70       	andi	r20, 0x03	; 3
    1130:	44 0f       	add	r20, r20
    1132:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    1134:	df 01       	movw	r26, r30
    1136:	18 97       	sbiw	r26, 0x08	; 8
    1138:	3c 91       	ld	r19, X
    113a:	53 2f       	mov	r21, r19
    113c:	52 95       	swap	r21
    113e:	50 7f       	andi	r21, 0xF0	; 240
    1140:	46 2b       	or	r20, r22
    1142:	45 2b       	or	r20, r21
    1144:	4d 87       	std	Y+13, r20	; 0x0d
    1146:	63 2f       	mov	r22, r19
    1148:	62 95       	swap	r22
    114a:	6f 70       	andi	r22, 0x0F	; 15
    114c:	11 96       	adiw	r26, 0x01	; 1
    114e:	4c 91       	ld	r20, X
    1150:	43 70       	andi	r20, 0x03	; 3
    1152:	42 95       	swap	r20
    1154:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    1156:	df 01       	movw	r26, r30
    1158:	16 97       	sbiw	r26, 0x06	; 6
    115a:	3c 91       	ld	r19, X
    115c:	53 2f       	mov	r21, r19
    115e:	52 95       	swap	r21
    1160:	55 0f       	add	r21, r21
    1162:	55 0f       	add	r21, r21
    1164:	50 7c       	andi	r21, 0xC0	; 192
    1166:	46 2b       	or	r20, r22
    1168:	45 2b       	or	r20, r21
    116a:	4e 87       	std	Y+14, r20	; 0x0e
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	4c 91       	ld	r20, X
    1170:	42 95       	swap	r20
    1172:	44 0f       	add	r20, r20
    1174:	44 0f       	add	r20, r20
    1176:	40 7c       	andi	r20, 0xC0	; 192
    1178:	36 95       	lsr	r19
    117a:	36 95       	lsr	r19
    117c:	34 2b       	or	r19, r20
    117e:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    1180:	df 01       	movw	r26, r30
    1182:	14 97       	sbiw	r26, 0x04	; 4
    1184:	3c 91       	ld	r19, X
    1186:	38 8b       	std	Y+16, r19	; 0x10
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    118c:	df 01       	movw	r26, r30
    118e:	12 97       	sbiw	r26, 0x02	; 2
    1190:	3c 91       	ld	r19, X
    1192:	53 2f       	mov	r21, r19
    1194:	55 0f       	add	r21, r21
    1196:	55 0f       	add	r21, r21
    1198:	43 70       	andi	r20, 0x03	; 3
    119a:	45 2b       	or	r20, r21
    119c:	49 8b       	std	Y+17, r20	; 0x11
    119e:	32 95       	swap	r19
    11a0:	36 95       	lsr	r19
    11a2:	36 95       	lsr	r19
    11a4:	33 70       	andi	r19, 0x03	; 3
    11a6:	11 96       	adiw	r26, 0x01	; 1
    11a8:	4c 91       	ld	r20, X
    11aa:	43 70       	andi	r20, 0x03	; 3
    11ac:	44 0f       	add	r20, r20
    11ae:	44 0f       	add	r20, r20
    11b0:	83 2b       	or	r24, r19
    11b2:	84 2b       	or	r24, r20
    11b4:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    11b6:	80 91 e0 02 	lds	r24, 0x02E0
    11ba:	38 2f       	mov	r19, r24
    11bc:	32 95       	swap	r19
    11be:	33 0f       	add	r19, r19
    11c0:	33 0f       	add	r19, r19
    11c2:	30 7c       	andi	r19, 0xC0	; 192
    11c4:	92 2b       	or	r25, r18
    11c6:	93 2b       	or	r25, r19
    11c8:	9b 8b       	std	Y+19, r25	; 0x13
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	92 95       	swap	r25
    11ce:	99 0f       	add	r25, r25
    11d0:	99 0f       	add	r25, r25
    11d2:	90 7c       	andi	r25, 0xC0	; 192
    11d4:	86 95       	lsr	r24
    11d6:	86 95       	lsr	r24
    11d8:	89 2b       	or	r24, r25
    11da:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    11dc:	80 91 e2 02 	lds	r24, 0x02E2
    11e0:	8d 8b       	std	Y+21, r24	; 0x15
    11e2:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    11e4:	80 91 e4 02 	lds	r24, 0x02E4
    11e8:	28 2f       	mov	r18, r24
    11ea:	22 0f       	add	r18, r18
    11ec:	22 0f       	add	r18, r18
    11ee:	93 70       	andi	r25, 0x03	; 3
    11f0:	92 2b       	or	r25, r18
    11f2:	9e 8b       	std	Y+22, r25	; 0x16
    11f4:	38 2f       	mov	r19, r24
    11f6:	32 95       	swap	r19
    11f8:	36 95       	lsr	r19
    11fa:	36 95       	lsr	r19
    11fc:	33 70       	andi	r19, 0x03	; 3
    11fe:	97 81       	ldd	r25, Z+7	; 0x07
    1200:	93 70       	andi	r25, 0x03	; 3
    1202:	99 0f       	add	r25, r25
    1204:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    1206:	80 91 e6 02 	lds	r24, 0x02E6
    120a:	28 2f       	mov	r18, r24
    120c:	22 95       	swap	r18
    120e:	20 7f       	andi	r18, 0xF0	; 240
    1210:	93 2b       	or	r25, r19
    1212:	92 2b       	or	r25, r18
    1214:	9f 8b       	std	Y+23, r25	; 0x17
    1216:	38 2f       	mov	r19, r24
    1218:	32 95       	swap	r19
    121a:	3f 70       	andi	r19, 0x0F	; 15
    121c:	91 85       	ldd	r25, Z+9	; 0x09
    121e:	93 70       	andi	r25, 0x03	; 3
    1220:	92 95       	swap	r25
    1222:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    1224:	80 91 e8 02 	lds	r24, 0x02E8
    1228:	28 2f       	mov	r18, r24
    122a:	22 95       	swap	r18
    122c:	22 0f       	add	r18, r18
    122e:	22 0f       	add	r18, r18
    1230:	20 7c       	andi	r18, 0xC0	; 192
    1232:	93 2b       	or	r25, r19
    1234:	92 2b       	or	r25, r18
    1236:	98 8f       	std	Y+24, r25	; 0x18
    1238:	93 85       	ldd	r25, Z+11	; 0x0b
    123a:	92 95       	swap	r25
    123c:	99 0f       	add	r25, r25
    123e:	99 0f       	add	r25, r25
    1240:	90 7c       	andi	r25, 0xC0	; 192
    1242:	86 95       	lsr	r24
    1244:	86 95       	lsr	r24
    1246:	89 2b       	or	r24, r25
    1248:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    124a:	80 91 ea 02 	lds	r24, 0x02EA
    124e:	8a 8f       	std	Y+26, r24	; 0x1a
    1250:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    1252:	80 91 ec 02 	lds	r24, 0x02EC
    1256:	28 2f       	mov	r18, r24
    1258:	22 0f       	add	r18, r18
    125a:	22 0f       	add	r18, r18
    125c:	93 70       	andi	r25, 0x03	; 3
    125e:	92 2b       	or	r25, r18
    1260:	9b 8f       	std	Y+27, r25	; 0x1b
    1262:	38 2f       	mov	r19, r24
    1264:	32 95       	swap	r19
    1266:	36 95       	lsr	r19
    1268:	36 95       	lsr	r19
    126a:	33 70       	andi	r19, 0x03	; 3
    126c:	97 85       	ldd	r25, Z+15	; 0x0f
    126e:	93 70       	andi	r25, 0x03	; 3
    1270:	99 0f       	add	r25, r25
    1272:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    1274:	80 91 ee 02 	lds	r24, 0x02EE
    1278:	28 2f       	mov	r18, r24
    127a:	22 95       	swap	r18
    127c:	20 7f       	andi	r18, 0xF0	; 240
    127e:	93 2b       	or	r25, r19
    1280:	92 2b       	or	r25, r18
    1282:	9c 8f       	std	Y+28, r25	; 0x1c
    1284:	38 2f       	mov	r19, r24
    1286:	32 95       	swap	r19
    1288:	3f 70       	andi	r19, 0x0F	; 15
    128a:	91 89       	ldd	r25, Z+17	; 0x11
    128c:	93 70       	andi	r25, 0x03	; 3
    128e:	92 95       	swap	r25
    1290:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    1292:	80 91 f0 02 	lds	r24, 0x02F0
    1296:	28 2f       	mov	r18, r24
    1298:	22 95       	swap	r18
    129a:	22 0f       	add	r18, r18
    129c:	22 0f       	add	r18, r18
    129e:	20 7c       	andi	r18, 0xC0	; 192
    12a0:	93 2b       	or	r25, r19
    12a2:	92 2b       	or	r25, r18
    12a4:	9d 8f       	std	Y+29, r25	; 0x1d
    12a6:	93 89       	ldd	r25, Z+19	; 0x13
    12a8:	92 95       	swap	r25
    12aa:	99 0f       	add	r25, r25
    12ac:	99 0f       	add	r25, r25
    12ae:	90 7c       	andi	r25, 0xC0	; 192
    12b0:	86 95       	lsr	r24
    12b2:	86 95       	lsr	r24
    12b4:	89 2b       	or	r24, r25
    12b6:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    12b8:	80 91 f2 02 	lds	r24, 0x02F2
    12bc:	8f 8f       	std	Y+31, r24	; 0x1f
    12be:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    12c0:	80 91 f4 02 	lds	r24, 0x02F4
    12c4:	28 2f       	mov	r18, r24
    12c6:	22 0f       	add	r18, r18
    12c8:	22 0f       	add	r18, r18
    12ca:	93 70       	andi	r25, 0x03	; 3
    12cc:	92 2b       	or	r25, r18
    12ce:	98 a3       	lds	r25, 0x58
    12d0:	38 2f       	mov	r19, r24
    12d2:	32 95       	swap	r19
    12d4:	36 95       	lsr	r19
    12d6:	36 95       	lsr	r19
    12d8:	33 70       	andi	r19, 0x03	; 3
    12da:	97 89       	ldd	r25, Z+23	; 0x17
    12dc:	93 70       	andi	r25, 0x03	; 3
    12de:	99 0f       	add	r25, r25
    12e0:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    12e2:	80 91 f6 02 	lds	r24, 0x02F6
    12e6:	28 2f       	mov	r18, r24
    12e8:	22 95       	swap	r18
    12ea:	20 7f       	andi	r18, 0xF0	; 240
    12ec:	93 2b       	or	r25, r19
    12ee:	92 2b       	or	r25, r18
    12f0:	99 a3       	lds	r25, 0x59
    12f2:	38 2f       	mov	r19, r24
    12f4:	32 95       	swap	r19
    12f6:	3f 70       	andi	r19, 0x0F	; 15
    12f8:	91 8d       	ldd	r25, Z+25	; 0x19
    12fa:	93 70       	andi	r25, 0x03	; 3
    12fc:	92 95       	swap	r25
    12fe:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    1300:	80 91 f8 02 	lds	r24, 0x02F8
    1304:	28 2f       	mov	r18, r24
    1306:	22 95       	swap	r18
    1308:	22 0f       	add	r18, r18
    130a:	22 0f       	add	r18, r18
    130c:	20 7c       	andi	r18, 0xC0	; 192
    130e:	93 2b       	or	r25, r19
    1310:	92 2b       	or	r25, r18
    1312:	9a a3       	lds	r25, 0x5a
    1314:	93 8d       	ldd	r25, Z+27	; 0x1b
    1316:	92 95       	swap	r25
    1318:	99 0f       	add	r25, r25
    131a:	99 0f       	add	r25, r25
    131c:	90 7c       	andi	r25, 0xC0	; 192
    131e:	86 95       	lsr	r24
    1320:	86 95       	lsr	r24
    1322:	89 2b       	or	r24, r25
    1324:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    1326:	80 91 fa 02 	lds	r24, 0x02FA
    132a:	8c a3       	lds	r24, 0x5c
    132c:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    132e:	80 91 fc 02 	lds	r24, 0x02FC
    1332:	28 2f       	mov	r18, r24
    1334:	22 0f       	add	r18, r18
    1336:	22 0f       	add	r18, r18
    1338:	93 70       	andi	r25, 0x03	; 3
    133a:	92 2b       	or	r25, r18
    133c:	9d a3       	lds	r25, 0x5d
    133e:	82 95       	swap	r24
    1340:	86 95       	lsr	r24
    1342:	86 95       	lsr	r24
    1344:	83 70       	andi	r24, 0x03	; 3
    1346:	2e a1       	lds	r18, 0x4e
    1348:	20 7f       	andi	r18, 0xF0	; 240
    134a:	97 8d       	ldd	r25, Z+31	; 0x1f
    134c:	93 70       	andi	r25, 0x03	; 3
    134e:	99 0f       	add	r25, r25
    1350:	99 0f       	add	r25, r25
    1352:	82 2b       	or	r24, r18
    1354:	89 2b       	or	r24, r25
    1356:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    1358:	80 91 fe 02 	lds	r24, 0x02FE
    135c:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    135e:	80 91 ff 02 	lds	r24, 0x02FF
    1362:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    1364:	80 91 00 03 	lds	r24, 0x0300
    1368:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    136a:	80 91 01 03 	lds	r24, 0x0301
    136e:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    1370:	80 91 02 03 	lds	r24, 0x0302
    1374:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    1376:	0e 94 c3 07 	call	0xf86	; 0xf86 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    137a:	80 91 80 03 	lds	r24, 0x0380
    137e:	8f 77       	andi	r24, 0x7F	; 127
    1380:	80 93 80 03 	sts	0x0380, r24
	current_patch.mode = MEMORY;
    1384:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    1388:	21 2f       	mov	r18, r17
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	8b e2       	ldi	r24, 0x2B	; 43
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	28 9f       	mul	r18, r24
    1392:	b0 01       	movw	r22, r0
    1394:	29 9f       	mul	r18, r25
    1396:	70 0d       	add	r23, r0
    1398:	38 9f       	mul	r19, r24
    139a:	70 0d       	add	r23, r0
    139c:	11 24       	eor	r1, r1
    139e:	60 50       	subi	r22, 0x00	; 0
    13a0:	70 40       	sbci	r23, 0x00	; 0
    13a2:	ce 01       	movw	r24, r28
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	4b e2       	ldi	r20, 0x2B	; 43
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <__eeupd_block_m6450a>
}	
    13ae:	ab 96       	adiw	r28, 0x2b	; 43
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	08 95       	ret

000013c2 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	c3 54       	subi	r28, 0x43	; 67
    13ce:	d0 40       	sbci	r29, 0x00	; 0
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	2b e2       	ldi	r18, 0x2B	; 43
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	82 9f       	mul	r24, r18
    13e2:	b0 01       	movw	r22, r0
    13e4:	83 9f       	mul	r24, r19
    13e6:	70 0d       	add	r23, r0
    13e8:	92 9f       	mul	r25, r18
    13ea:	70 0d       	add	r23, r0
    13ec:	11 24       	eor	r1, r1
    13ee:	60 50       	subi	r22, 0x00	; 0
    13f0:	70 40       	sbci	r23, 0x00	; 0
    13f2:	ce 01       	movw	r24, r28
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	4b e2       	ldi	r20, 0x2B	; 43
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    13fe:	ee ed       	ldi	r30, 0xDE	; 222
    1400:	f2 e0       	ldi	r31, 0x02	; 2
    1402:	8a 89       	ldd	r24, Y+18	; 0x12
    1404:	28 2f       	mov	r18, r24
    1406:	22 95       	swap	r18
    1408:	2f 70       	andi	r18, 0x0F	; 15
    140a:	9b 89       	ldd	r25, Y+19	; 0x13
    140c:	39 2f       	mov	r19, r25
    140e:	32 95       	swap	r19
    1410:	30 7f       	andi	r19, 0xF0	; 240
    1412:	32 2b       	or	r19, r18
    1414:	29 2f       	mov	r18, r25
    1416:	22 95       	swap	r18
    1418:	2f 70       	andi	r18, 0x0F	; 15
    141a:	23 70       	andi	r18, 0x03	; 3
    141c:	30 93 de 02 	sts	0x02DE, r19
    1420:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    1424:	df 01       	movw	r26, r30
    1426:	5a 97       	sbiw	r26, 0x1a	; 26
    1428:	4a 81       	ldd	r20, Y+2	; 0x02
    142a:	46 95       	lsr	r20
    142c:	46 95       	lsr	r20
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	32 2f       	mov	r19, r18
    1432:	32 95       	swap	r19
    1434:	33 0f       	add	r19, r19
    1436:	33 0f       	add	r19, r19
    1438:	30 7c       	andi	r19, 0xC0	; 192
    143a:	43 2b       	or	r20, r19
    143c:	32 2f       	mov	r19, r18
    143e:	36 95       	lsr	r19
    1440:	36 95       	lsr	r19
    1442:	33 70       	andi	r19, 0x03	; 3
    1444:	4c 93       	st	X, r20
    1446:	11 96       	adiw	r26, 0x01	; 1
    1448:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    144a:	df 01       	movw	r26, r30
    144c:	58 97       	sbiw	r26, 0x18	; 24
    144e:	32 2f       	mov	r19, r18
    1450:	32 95       	swap	r19
    1452:	3f 70       	andi	r19, 0x0F	; 15
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	42 2f       	mov	r20, r18
    1458:	42 95       	swap	r20
    145a:	40 7f       	andi	r20, 0xF0	; 240
    145c:	43 2b       	or	r20, r19
    145e:	32 2f       	mov	r19, r18
    1460:	32 95       	swap	r19
    1462:	3f 70       	andi	r19, 0x0F	; 15
    1464:	33 70       	andi	r19, 0x03	; 3
    1466:	4c 93       	st	X, r20
    1468:	11 96       	adiw	r26, 0x01	; 1
    146a:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    146c:	df 01       	movw	r26, r30
    146e:	56 97       	sbiw	r26, 0x16	; 22
    1470:	22 95       	swap	r18
    1472:	26 95       	lsr	r18
    1474:	26 95       	lsr	r18
    1476:	23 70       	andi	r18, 0x03	; 3
    1478:	3d 81       	ldd	r19, Y+5	; 0x05
    147a:	43 2f       	mov	r20, r19
    147c:	44 0f       	add	r20, r20
    147e:	44 0f       	add	r20, r20
    1480:	24 2b       	or	r18, r20
    1482:	32 95       	swap	r19
    1484:	36 95       	lsr	r19
    1486:	36 95       	lsr	r19
    1488:	33 70       	andi	r19, 0x03	; 3
    148a:	2c 93       	st	X, r18
    148c:	11 96       	adiw	r26, 0x01	; 1
    148e:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    1490:	df 01       	movw	r26, r30
    1492:	54 97       	sbiw	r26, 0x14	; 20
    1494:	4e 81       	ldd	r20, Y+6	; 0x06
    1496:	2f 81       	ldd	r18, Y+7	; 0x07
    1498:	32 2f       	mov	r19, r18
    149a:	33 70       	andi	r19, 0x03	; 3
    149c:	4c 93       	st	X, r20
    149e:	11 96       	adiw	r26, 0x01	; 1
    14a0:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    14a2:	df 01       	movw	r26, r30
    14a4:	52 97       	sbiw	r26, 0x12	; 18
    14a6:	32 2f       	mov	r19, r18
    14a8:	36 95       	lsr	r19
    14aa:	36 95       	lsr	r19
    14ac:	28 85       	ldd	r18, Y+8	; 0x08
    14ae:	42 2f       	mov	r20, r18
    14b0:	42 95       	swap	r20
    14b2:	44 0f       	add	r20, r20
    14b4:	44 0f       	add	r20, r20
    14b6:	40 7c       	andi	r20, 0xC0	; 192
    14b8:	43 2b       	or	r20, r19
    14ba:	32 2f       	mov	r19, r18
    14bc:	36 95       	lsr	r19
    14be:	36 95       	lsr	r19
    14c0:	33 70       	andi	r19, 0x03	; 3
    14c2:	4c 93       	st	X, r20
    14c4:	11 96       	adiw	r26, 0x01	; 1
    14c6:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    14c8:	df 01       	movw	r26, r30
    14ca:	50 97       	sbiw	r26, 0x10	; 16
    14cc:	32 2f       	mov	r19, r18
    14ce:	32 95       	swap	r19
    14d0:	3f 70       	andi	r19, 0x0F	; 15
    14d2:	29 85       	ldd	r18, Y+9	; 0x09
    14d4:	42 2f       	mov	r20, r18
    14d6:	42 95       	swap	r20
    14d8:	40 7f       	andi	r20, 0xF0	; 240
    14da:	43 2b       	or	r20, r19
    14dc:	32 2f       	mov	r19, r18
    14de:	32 95       	swap	r19
    14e0:	3f 70       	andi	r19, 0x0F	; 15
    14e2:	33 70       	andi	r19, 0x03	; 3
    14e4:	4c 93       	st	X, r20
    14e6:	11 96       	adiw	r26, 0x01	; 1
    14e8:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    14ea:	df 01       	movw	r26, r30
    14ec:	1e 97       	sbiw	r26, 0x0e	; 14
    14ee:	22 95       	swap	r18
    14f0:	26 95       	lsr	r18
    14f2:	26 95       	lsr	r18
    14f4:	23 70       	andi	r18, 0x03	; 3
    14f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    14f8:	43 2f       	mov	r20, r19
    14fa:	44 0f       	add	r20, r20
    14fc:	44 0f       	add	r20, r20
    14fe:	24 2b       	or	r18, r20
    1500:	32 95       	swap	r19
    1502:	36 95       	lsr	r19
    1504:	36 95       	lsr	r19
    1506:	33 70       	andi	r19, 0x03	; 3
    1508:	2c 93       	st	X, r18
    150a:	11 96       	adiw	r26, 0x01	; 1
    150c:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    150e:	df 01       	movw	r26, r30
    1510:	1c 97       	sbiw	r26, 0x0c	; 12
    1512:	4b 85       	ldd	r20, Y+11	; 0x0b
    1514:	2c 85       	ldd	r18, Y+12	; 0x0c
    1516:	32 2f       	mov	r19, r18
    1518:	33 70       	andi	r19, 0x03	; 3
    151a:	4c 93       	st	X, r20
    151c:	11 96       	adiw	r26, 0x01	; 1
    151e:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1520:	df 01       	movw	r26, r30
    1522:	1a 97       	sbiw	r26, 0x0a	; 10
    1524:	32 2f       	mov	r19, r18
    1526:	36 95       	lsr	r19
    1528:	36 95       	lsr	r19
    152a:	2d 85       	ldd	r18, Y+13	; 0x0d
    152c:	42 2f       	mov	r20, r18
    152e:	42 95       	swap	r20
    1530:	44 0f       	add	r20, r20
    1532:	44 0f       	add	r20, r20
    1534:	40 7c       	andi	r20, 0xC0	; 192
    1536:	43 2b       	or	r20, r19
    1538:	32 2f       	mov	r19, r18
    153a:	36 95       	lsr	r19
    153c:	36 95       	lsr	r19
    153e:	33 70       	andi	r19, 0x03	; 3
    1540:	4c 93       	st	X, r20
    1542:	11 96       	adiw	r26, 0x01	; 1
    1544:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    1546:	df 01       	movw	r26, r30
    1548:	18 97       	sbiw	r26, 0x08	; 8
    154a:	32 2f       	mov	r19, r18
    154c:	32 95       	swap	r19
    154e:	3f 70       	andi	r19, 0x0F	; 15
    1550:	2e 85       	ldd	r18, Y+14	; 0x0e
    1552:	42 2f       	mov	r20, r18
    1554:	42 95       	swap	r20
    1556:	40 7f       	andi	r20, 0xF0	; 240
    1558:	43 2b       	or	r20, r19
    155a:	32 2f       	mov	r19, r18
    155c:	32 95       	swap	r19
    155e:	3f 70       	andi	r19, 0x0F	; 15
    1560:	33 70       	andi	r19, 0x03	; 3
    1562:	4c 93       	st	X, r20
    1564:	11 96       	adiw	r26, 0x01	; 1
    1566:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    1568:	df 01       	movw	r26, r30
    156a:	16 97       	sbiw	r26, 0x06	; 6
    156c:	22 95       	swap	r18
    156e:	26 95       	lsr	r18
    1570:	26 95       	lsr	r18
    1572:	23 70       	andi	r18, 0x03	; 3
    1574:	3f 85       	ldd	r19, Y+15	; 0x0f
    1576:	43 2f       	mov	r20, r19
    1578:	44 0f       	add	r20, r20
    157a:	44 0f       	add	r20, r20
    157c:	24 2b       	or	r18, r20
    157e:	32 95       	swap	r19
    1580:	36 95       	lsr	r19
    1582:	36 95       	lsr	r19
    1584:	33 70       	andi	r19, 0x03	; 3
    1586:	2c 93       	st	X, r18
    1588:	11 96       	adiw	r26, 0x01	; 1
    158a:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    158c:	df 01       	movw	r26, r30
    158e:	14 97       	sbiw	r26, 0x04	; 4
    1590:	48 89       	ldd	r20, Y+16	; 0x10
    1592:	29 89       	ldd	r18, Y+17	; 0x11
    1594:	32 2f       	mov	r19, r18
    1596:	33 70       	andi	r19, 0x03	; 3
    1598:	4c 93       	st	X, r20
    159a:	11 96       	adiw	r26, 0x01	; 1
    159c:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    159e:	df 01       	movw	r26, r30
    15a0:	12 97       	sbiw	r26, 0x02	; 2
    15a2:	26 95       	lsr	r18
    15a4:	26 95       	lsr	r18
    15a6:	38 2f       	mov	r19, r24
    15a8:	32 95       	swap	r19
    15aa:	33 0f       	add	r19, r19
    15ac:	33 0f       	add	r19, r19
    15ae:	30 7c       	andi	r19, 0xC0	; 192
    15b0:	23 2b       	or	r18, r19
    15b2:	86 95       	lsr	r24
    15b4:	86 95       	lsr	r24
    15b6:	83 70       	andi	r24, 0x03	; 3
    15b8:	2c 93       	st	X, r18
    15ba:	11 96       	adiw	r26, 0x01	; 1
    15bc:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    15be:	92 95       	swap	r25
    15c0:	96 95       	lsr	r25
    15c2:	96 95       	lsr	r25
    15c4:	93 70       	andi	r25, 0x03	; 3
    15c6:	8c 89       	ldd	r24, Y+20	; 0x14
    15c8:	28 2f       	mov	r18, r24
    15ca:	22 0f       	add	r18, r18
    15cc:	22 0f       	add	r18, r18
    15ce:	92 2b       	or	r25, r18
    15d0:	82 95       	swap	r24
    15d2:	86 95       	lsr	r24
    15d4:	86 95       	lsr	r24
    15d6:	83 70       	andi	r24, 0x03	; 3
    15d8:	90 93 e0 02 	sts	0x02E0, r25
    15dc:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    15de:	2d 89       	ldd	r18, Y+21	; 0x15
    15e0:	8e 89       	ldd	r24, Y+22	; 0x16
    15e2:	98 2f       	mov	r25, r24
    15e4:	93 70       	andi	r25, 0x03	; 3
    15e6:	20 93 e2 02 	sts	0x02E2, r18
    15ea:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    15ec:	98 2f       	mov	r25, r24
    15ee:	96 95       	lsr	r25
    15f0:	96 95       	lsr	r25
    15f2:	8f 89       	ldd	r24, Y+23	; 0x17
    15f4:	28 2f       	mov	r18, r24
    15f6:	22 95       	swap	r18
    15f8:	22 0f       	add	r18, r18
    15fa:	22 0f       	add	r18, r18
    15fc:	20 7c       	andi	r18, 0xC0	; 192
    15fe:	29 2b       	or	r18, r25
    1600:	98 2f       	mov	r25, r24
    1602:	96 95       	lsr	r25
    1604:	96 95       	lsr	r25
    1606:	93 70       	andi	r25, 0x03	; 3
    1608:	20 93 e4 02 	sts	0x02E4, r18
    160c:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    160e:	98 2f       	mov	r25, r24
    1610:	92 95       	swap	r25
    1612:	9f 70       	andi	r25, 0x0F	; 15
    1614:	88 8d       	ldd	r24, Y+24	; 0x18
    1616:	28 2f       	mov	r18, r24
    1618:	22 95       	swap	r18
    161a:	20 7f       	andi	r18, 0xF0	; 240
    161c:	29 2b       	or	r18, r25
    161e:	98 2f       	mov	r25, r24
    1620:	92 95       	swap	r25
    1622:	9f 70       	andi	r25, 0x0F	; 15
    1624:	93 70       	andi	r25, 0x03	; 3
    1626:	20 93 e6 02 	sts	0x02E6, r18
    162a:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    162c:	82 95       	swap	r24
    162e:	86 95       	lsr	r24
    1630:	86 95       	lsr	r24
    1632:	83 70       	andi	r24, 0x03	; 3
    1634:	99 8d       	ldd	r25, Y+25	; 0x19
    1636:	29 2f       	mov	r18, r25
    1638:	22 0f       	add	r18, r18
    163a:	22 0f       	add	r18, r18
    163c:	82 2b       	or	r24, r18
    163e:	92 95       	swap	r25
    1640:	96 95       	lsr	r25
    1642:	96 95       	lsr	r25
    1644:	93 70       	andi	r25, 0x03	; 3
    1646:	80 93 e8 02 	sts	0x02E8, r24
    164a:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    164c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    164e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1650:	98 2f       	mov	r25, r24
    1652:	93 70       	andi	r25, 0x03	; 3
    1654:	20 93 ea 02 	sts	0x02EA, r18
    1658:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    165a:	98 2f       	mov	r25, r24
    165c:	96 95       	lsr	r25
    165e:	96 95       	lsr	r25
    1660:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1662:	28 2f       	mov	r18, r24
    1664:	22 95       	swap	r18
    1666:	22 0f       	add	r18, r18
    1668:	22 0f       	add	r18, r18
    166a:	20 7c       	andi	r18, 0xC0	; 192
    166c:	29 2b       	or	r18, r25
    166e:	98 2f       	mov	r25, r24
    1670:	96 95       	lsr	r25
    1672:	96 95       	lsr	r25
    1674:	93 70       	andi	r25, 0x03	; 3
    1676:	20 93 ec 02 	sts	0x02EC, r18
    167a:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    167c:	98 2f       	mov	r25, r24
    167e:	92 95       	swap	r25
    1680:	9f 70       	andi	r25, 0x0F	; 15
    1682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1684:	28 2f       	mov	r18, r24
    1686:	22 95       	swap	r18
    1688:	20 7f       	andi	r18, 0xF0	; 240
    168a:	29 2b       	or	r18, r25
    168c:	98 2f       	mov	r25, r24
    168e:	92 95       	swap	r25
    1690:	9f 70       	andi	r25, 0x0F	; 15
    1692:	93 70       	andi	r25, 0x03	; 3
    1694:	20 93 ee 02 	sts	0x02EE, r18
    1698:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    169a:	82 95       	swap	r24
    169c:	86 95       	lsr	r24
    169e:	86 95       	lsr	r24
    16a0:	83 70       	andi	r24, 0x03	; 3
    16a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16a4:	29 2f       	mov	r18, r25
    16a6:	22 0f       	add	r18, r18
    16a8:	22 0f       	add	r18, r18
    16aa:	82 2b       	or	r24, r18
    16ac:	92 95       	swap	r25
    16ae:	96 95       	lsr	r25
    16b0:	96 95       	lsr	r25
    16b2:	93 70       	andi	r25, 0x03	; 3
    16b4:	80 93 f0 02 	sts	0x02F0, r24
    16b8:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    16ba:	2f 8d       	ldd	r18, Y+31	; 0x1f
    16bc:	88 a1       	lds	r24, 0x48
    16be:	98 2f       	mov	r25, r24
    16c0:	93 70       	andi	r25, 0x03	; 3
    16c2:	20 93 f2 02 	sts	0x02F2, r18
    16c6:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    16c8:	98 2f       	mov	r25, r24
    16ca:	96 95       	lsr	r25
    16cc:	96 95       	lsr	r25
    16ce:	89 a1       	lds	r24, 0x49
    16d0:	28 2f       	mov	r18, r24
    16d2:	22 95       	swap	r18
    16d4:	22 0f       	add	r18, r18
    16d6:	22 0f       	add	r18, r18
    16d8:	20 7c       	andi	r18, 0xC0	; 192
    16da:	29 2b       	or	r18, r25
    16dc:	98 2f       	mov	r25, r24
    16de:	96 95       	lsr	r25
    16e0:	96 95       	lsr	r25
    16e2:	93 70       	andi	r25, 0x03	; 3
    16e4:	20 93 f4 02 	sts	0x02F4, r18
    16e8:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    16ea:	98 2f       	mov	r25, r24
    16ec:	92 95       	swap	r25
    16ee:	9f 70       	andi	r25, 0x0F	; 15
    16f0:	8a a1       	lds	r24, 0x4a
    16f2:	28 2f       	mov	r18, r24
    16f4:	22 95       	swap	r18
    16f6:	20 7f       	andi	r18, 0xF0	; 240
    16f8:	29 2b       	or	r18, r25
    16fa:	98 2f       	mov	r25, r24
    16fc:	92 95       	swap	r25
    16fe:	9f 70       	andi	r25, 0x0F	; 15
    1700:	93 70       	andi	r25, 0x03	; 3
    1702:	20 93 f6 02 	sts	0x02F6, r18
    1706:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1708:	82 95       	swap	r24
    170a:	86 95       	lsr	r24
    170c:	86 95       	lsr	r24
    170e:	83 70       	andi	r24, 0x03	; 3
    1710:	9b a1       	lds	r25, 0x4b
    1712:	29 2f       	mov	r18, r25
    1714:	22 0f       	add	r18, r18
    1716:	22 0f       	add	r18, r18
    1718:	82 2b       	or	r24, r18
    171a:	92 95       	swap	r25
    171c:	96 95       	lsr	r25
    171e:	96 95       	lsr	r25
    1720:	93 70       	andi	r25, 0x03	; 3
    1722:	80 93 f8 02 	sts	0x02F8, r24
    1726:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1728:	2c a1       	lds	r18, 0x4c
    172a:	8d a1       	lds	r24, 0x4d
    172c:	98 2f       	mov	r25, r24
    172e:	93 70       	andi	r25, 0x03	; 3
    1730:	20 93 fa 02 	sts	0x02FA, r18
    1734:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1736:	98 2f       	mov	r25, r24
    1738:	96 95       	lsr	r25
    173a:	96 95       	lsr	r25
    173c:	8e a1       	lds	r24, 0x4e
    173e:	28 2f       	mov	r18, r24
    1740:	22 95       	swap	r18
    1742:	22 0f       	add	r18, r18
    1744:	22 0f       	add	r18, r18
    1746:	20 7c       	andi	r18, 0xC0	; 192
    1748:	29 2b       	or	r18, r25
    174a:	86 95       	lsr	r24
    174c:	86 95       	lsr	r24
    174e:	98 2f       	mov	r25, r24
    1750:	93 70       	andi	r25, 0x03	; 3
    1752:	20 93 fc 02 	sts	0x02FC, r18
    1756:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    1758:	7f a1       	lds	r23, 0x4f
    175a:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    175e:	68 a5       	lds	r22, 0x68
    1760:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    1764:	89 a5       	lds	r24, 0x69
    1766:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    176a:	9a a5       	lds	r25, 0x6a
    176c:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    1770:	1b a5       	lds	r17, 0x6b
    1772:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1776:	de 01       	movw	r26, r28
    1778:	9c 96       	adiw	r26, 0x2c	; 44
    177a:	ef ef       	ldi	r30, 0xFF	; 255
    177c:	f1 e0       	ldi	r31, 0x01	; 1
    177e:	28 e0       	ldi	r18, 0x08	; 8
    1780:	01 90       	ld	r0, Z+
    1782:	0d 92       	st	X+, r0
    1784:	21 50       	subi	r18, 0x01	; 1
    1786:	e1 f7       	brne	.-8      	; 0x1780 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    1788:	e9 2f       	mov	r30, r25
    178a:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	9f 01       	movw	r18, r30
    1790:	22 0f       	add	r18, r18
    1792:	33 1f       	adc	r19, r19
    1794:	22 0f       	add	r18, r18
    1796:	33 1f       	adc	r19, r19
    1798:	a9 01       	movw	r20, r18
    179a:	44 0f       	add	r20, r20
    179c:	55 1f       	adc	r21, r21
    179e:	44 0f       	add	r20, r20
    17a0:	55 1f       	adc	r21, r21
    17a2:	44 0f       	add	r20, r20
    17a4:	55 1f       	adc	r21, r21
    17a6:	42 1b       	sub	r20, r18
    17a8:	53 0b       	sbc	r21, r19
    17aa:	4e 0f       	add	r20, r30
    17ac:	5f 1f       	adc	r21, r31
    17ae:	55 95       	asr	r21
    17b0:	47 95       	ror	r20
    17b2:	55 95       	asr	r21
    17b4:	47 95       	ror	r20
    17b6:	55 95       	asr	r21
    17b8:	47 95       	ror	r20
    17ba:	55 95       	asr	r21
    17bc:	47 95       	ror	r20
    17be:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    17c0:	fe 01       	movw	r30, r28
    17c2:	e4 0f       	add	r30, r20
    17c4:	f1 1d       	adc	r31, r1
    17c6:	24 a5       	lds	r18, 0x64
    17c8:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    17cc:	de 01       	movw	r26, r28
    17ce:	d4 96       	adiw	r26, 0x34	; 52
    17d0:	e7 e0       	ldi	r30, 0x07	; 7
    17d2:	f2 e0       	ldi	r31, 0x02	; 2
    17d4:	28 e0       	ldi	r18, 0x08	; 8
    17d6:	01 90       	ld	r0, Z+
    17d8:	0d 92       	st	X+, r0
    17da:	21 50       	subi	r18, 0x01	; 1
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    17de:	29 2f       	mov	r18, r25
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	20 7e       	andi	r18, 0xE0	; 224
    17e4:	30 70       	andi	r19, 0x00	; 0
    17e6:	35 95       	asr	r19
    17e8:	27 95       	ror	r18
    17ea:	35 95       	asr	r19
    17ec:	27 95       	ror	r18
    17ee:	35 95       	asr	r19
    17f0:	27 95       	ror	r18
    17f2:	83 70       	andi	r24, 0x03	; 3
    17f4:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    17f6:	42 2f       	mov	r20, r18
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	ca 01       	movw	r24, r20
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	9c 01       	movw	r18, r24
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
    180e:	22 0f       	add	r18, r18
    1810:	33 1f       	adc	r19, r19
    1812:	28 1b       	sub	r18, r24
    1814:	39 0b       	sbc	r19, r25
    1816:	42 0f       	add	r20, r18
    1818:	53 1f       	adc	r21, r19
    181a:	ca 01       	movw	r24, r20
    181c:	95 95       	asr	r25
    181e:	87 95       	ror	r24
    1820:	95 95       	asr	r25
    1822:	87 95       	ror	r24
    1824:	95 95       	asr	r25
    1826:	87 95       	ror	r24
    1828:	95 95       	asr	r25
    182a:	87 95       	ror	r24
    182c:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    182e:	fe 01       	movw	r30, r28
    1830:	e8 0f       	add	r30, r24
    1832:	f1 1d       	adc	r31, r1
    1834:	84 a9       	sts	0x44, r24
    1836:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    183a:	de 01       	movw	r26, r28
    183c:	dc 96       	adiw	r26, 0x3c	; 60
    183e:	ef e0       	ldi	r30, 0x0F	; 15
    1840:	f2 e0       	ldi	r31, 0x02	; 2
    1842:	88 e0       	ldi	r24, 0x08	; 8
    1844:	01 90       	ld	r0, Z+
    1846:	0d 92       	st	X+, r0
    1848:	81 50       	subi	r24, 0x01	; 1
    184a:	e1 f7       	brne	.-8      	; 0x1844 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    184c:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    184e:	46 2f       	mov	r20, r22
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	ca 01       	movw	r24, r20
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	9c 01       	movw	r18, r24
    185e:	22 0f       	add	r18, r18
    1860:	33 1f       	adc	r19, r19
    1862:	22 0f       	add	r18, r18
    1864:	33 1f       	adc	r19, r19
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	28 1b       	sub	r18, r24
    186c:	39 0b       	sbc	r19, r25
    186e:	42 0f       	add	r20, r18
    1870:	53 1f       	adc	r21, r19
    1872:	ca 01       	movw	r24, r20
    1874:	95 95       	asr	r25
    1876:	87 95       	ror	r24
    1878:	95 95       	asr	r25
    187a:	87 95       	ror	r24
    187c:	95 95       	asr	r25
    187e:	87 95       	ror	r24
    1880:	95 95       	asr	r25
    1882:	87 95       	ror	r24
    1884:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1886:	fe 01       	movw	r30, r28
    1888:	e8 0f       	add	r30, r24
    188a:	f1 1d       	adc	r31, r1
    188c:	84 ad       	sts	0x64, r24
    188e:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1892:	21 2f       	mov	r18, r17
    1894:	26 95       	lsr	r18
    1896:	27 95       	ror	r18
    1898:	22 27       	eor	r18, r18
    189a:	27 95       	ror	r18
    189c:	81 2f       	mov	r24, r17
    189e:	81 70       	andi	r24, 0x01	; 1
    18a0:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    18a2:	81 2f       	mov	r24, r17
    18a4:	86 95       	lsr	r24
    18a6:	86 95       	lsr	r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	81 70       	andi	r24, 0x01	; 1
    18ac:	90 70       	andi	r25, 0x00	; 0
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    18b6:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    18b8:	81 2f       	mov	r24, r17
    18ba:	86 95       	lsr	r24
    18bc:	86 95       	lsr	r24
    18be:	86 95       	lsr	r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	81 70       	andi	r24, 0x01	; 1
    18c4:	90 70       	andi	r25, 0x00	; 0
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    18ca:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    18cc:	81 2f       	mov	r24, r17
    18ce:	82 95       	swap	r24
    18d0:	8f 70       	andi	r24, 0x0F	; 15
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	81 70       	andi	r24, 0x01	; 1
    18d6:	90 70       	andi	r25, 0x00	; 0
    18d8:	82 95       	swap	r24
    18da:	92 95       	swap	r25
    18dc:	90 7f       	andi	r25, 0xF0	; 240
    18de:	98 27       	eor	r25, r24
    18e0:	80 7f       	andi	r24, 0xF0	; 240
    18e2:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    18e4:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    18e6:	81 2f       	mov	r24, r17
    18e8:	82 95       	swap	r24
    18ea:	86 95       	lsr	r24
    18ec:	87 70       	andi	r24, 0x07	; 7
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	81 70       	andi	r24, 0x01	; 1
    18f2:	90 70       	andi	r25, 0x00	; 0
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	82 95       	swap	r24
    18fa:	92 95       	swap	r25
    18fc:	90 7f       	andi	r25, 0xF0	; 240
    18fe:	98 27       	eor	r25, r24
    1900:	80 7f       	andi	r24, 0xF0	; 240
    1902:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1904:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1906:	81 2f       	mov	r24, r17
    1908:	82 95       	swap	r24
    190a:	86 95       	lsr	r24
    190c:	86 95       	lsr	r24
    190e:	83 70       	andi	r24, 0x03	; 3
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	81 70       	andi	r24, 0x01	; 1
    1914:	90 70       	andi	r25, 0x00	; 0
    1916:	00 24       	eor	r0, r0
    1918:	96 95       	lsr	r25
    191a:	87 95       	ror	r24
    191c:	07 94       	ror	r0
    191e:	96 95       	lsr	r25
    1920:	87 95       	ror	r24
    1922:	07 94       	ror	r0
    1924:	98 2f       	mov	r25, r24
    1926:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1928:	82 2b       	or	r24, r18
    192a:	80 93 7e 03 	sts	0x037E, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    192e:	87 2f       	mov	r24, r23
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	81 70       	andi	r24, 0x01	; 1
    1934:	90 70       	andi	r25, 0x00	; 0
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1942:	90 91 80 03 	lds	r25, 0x0380
    1946:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1948:	89 2b       	or	r24, r25
    194a:	11 1f       	adc	r17, r17
    194c:	11 27       	eor	r17, r17
    194e:	11 1f       	adc	r17, r17
    1950:	11 0f       	add	r17, r17
    1952:	11 0f       	add	r17, r17
    1954:	81 2b       	or	r24, r17
    1956:	80 93 80 03 	sts	0x0380, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    195a:	0e 94 c3 07 	call	0xf86	; 0xf86 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    195e:	80 91 80 03 	lds	r24, 0x0380
    1962:	8f 77       	andi	r24, 0x7F	; 127
    1964:	80 93 80 03 	sts	0x0380, r24
	
	current_patch.mode = MEMORY;
    1968:	10 92 07 03 	sts	0x0307, r1
	
}
    196c:	cd 5b       	subi	r28, 0xBD	; 189
    196e:	df 4f       	sbci	r29, 0xFF	; 255
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	08 95       	ret

00001982 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1982:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    1986:	60 3f       	cpi	r22, 0xF0	; 240
    1988:	11 f4       	brne	.+4      	; 0x198e <transpose_note+0xc>
    198a:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    198e:	29 2f       	mov	r18, r25
    1990:	22 0f       	add	r18, r18
    1992:	92 0f       	add	r25, r18
    1994:	99 0f       	add	r25, r25
    1996:	99 0f       	add	r25, r25
    1998:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    199a:	89 38       	cpi	r24, 0x89	; 137
    199c:	08 f0       	brcs	.+2      	; 0x19a0 <transpose_note+0x1e>
    199e:	88 e8       	ldi	r24, 0x88	; 136
	
}
    19a0:	08 95       	ret

000019a2 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    19a2:	80 91 7e 03 	lds	r24, 0x037E
    19a6:	98 2f       	mov	r25, r24
    19a8:	96 95       	lsr	r25
    19aa:	96 95       	lsr	r25
    19ac:	96 95       	lsr	r25
    19ae:	90 ff       	sbrs	r25, 0
    19b0:	0e c0       	rjmp	.+28     	; 0x19ce <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    19b2:	90 91 08 03 	lds	r25, 0x0308
    19b6:	9f 5f       	subi	r25, 0xFF	; 255
    19b8:	90 93 08 03 	sts	0x0308, r25
    19bc:	95 30       	cpi	r25, 0x05	; 5
    19be:	19 f4       	brne	.+6      	; 0x19c6 <update_octave_range+0x24>
    19c0:	94 e0       	ldi	r25, 0x04	; 4
    19c2:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    19c6:	98 e0       	ldi	r25, 0x08	; 8
    19c8:	89 27       	eor	r24, r25
    19ca:	80 93 7e 03 	sts	0x037E, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    19ce:	80 91 7f 03 	lds	r24, 0x037F
    19d2:	98 2f       	mov	r25, r24
    19d4:	96 95       	lsr	r25
    19d6:	96 95       	lsr	r25
    19d8:	96 95       	lsr	r25
    19da:	90 ff       	sbrs	r25, 0
    19dc:	0b c0       	rjmp	.+22     	; 0x19f4 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    19de:	90 91 08 03 	lds	r25, 0x0308
    19e2:	99 23       	and	r25, r25
    19e4:	19 f0       	breq	.+6      	; 0x19ec <update_octave_range+0x4a>
    19e6:	91 50       	subi	r25, 0x01	; 1
    19e8:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    19ec:	98 e0       	ldi	r25, 0x08	; 8
    19ee:	89 27       	eor	r24, r25
    19f0:	80 93 7f 03 	sts	0x037F, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    19f4:	80 91 08 03 	lds	r24, 0x0308
    19f8:	e1 e2       	ldi	r30, 0x21	; 33
    19fa:	f2 e0       	ldi	r31, 0x02	; 2
    19fc:	e8 0f       	add	r30, r24
    19fe:	f1 1d       	adc	r31, r1
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	00 80       	ld	r0, Z
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <update_octave_range+0x6a>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <update_octave_range+0x66>
    1a10:	58 2f       	mov	r21, r24
    1a12:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1a16:	90 91 7f 03 	lds	r25, 0x037F
    1a1a:	29 2f       	mov	r18, r25
    1a1c:	26 95       	lsr	r18
    1a1e:	26 95       	lsr	r18
    1a20:	20 ff       	sbrs	r18, 0
    1a22:	0e c0       	rjmp	.+28     	; 0x1a40 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1a24:	80 91 09 03 	lds	r24, 0x0309
    1a28:	8f 5f       	subi	r24, 0xFF	; 255
    1a2a:	80 93 09 03 	sts	0x0309, r24
    1a2e:	85 30       	cpi	r24, 0x05	; 5
    1a30:	19 f4       	brne	.+6      	; 0x1a38 <update_octave_range+0x96>
    1a32:	84 e0       	ldi	r24, 0x04	; 4
    1a34:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1a38:	84 e0       	ldi	r24, 0x04	; 4
    1a3a:	98 27       	eor	r25, r24
    1a3c:	90 93 7f 03 	sts	0x037F, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1a40:	90 91 7f 03 	lds	r25, 0x037F
    1a44:	29 2f       	mov	r18, r25
    1a46:	26 95       	lsr	r18
    1a48:	20 ff       	sbrs	r18, 0
    1a4a:	0b c0       	rjmp	.+22     	; 0x1a62 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1a4c:	80 91 09 03 	lds	r24, 0x0309
    1a50:	88 23       	and	r24, r24
    1a52:	19 f0       	breq	.+6      	; 0x1a5a <update_octave_range+0xb8>
    1a54:	81 50       	subi	r24, 0x01	; 1
    1a56:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
    1a5c:	98 27       	eor	r25, r24
    1a5e:	90 93 7f 03 	sts	0x037F, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1a62:	40 91 00 03 	lds	r20, 0x0300
    1a66:	4c 7f       	andi	r20, 0xFC	; 252
    1a68:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1a6c:	90 91 09 03 	lds	r25, 0x0309
    1a70:	93 30       	cpi	r25, 0x03	; 3
    1a72:	88 f0       	brcs	.+34     	; 0x1a96 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1a74:	ec e1       	ldi	r30, 0x1C	; 28
    1a76:	f2 e0       	ldi	r31, 0x02	; 2
    1a78:	e9 0f       	add	r30, r25
    1a7a:	f1 1d       	adc	r31, r1
    1a7c:	21 e0       	ldi	r18, 0x01	; 1
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	c9 01       	movw	r24, r18
    1a82:	00 80       	ld	r0, Z
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <update_octave_range+0xe8>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <update_octave_range+0xe4>
    1a8e:	84 2b       	or	r24, r20
    1a90:	80 93 00 03 	sts	0x0300, r24
    1a94:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1a96:	ec e1       	ldi	r30, 0x1C	; 28
    1a98:	f2 e0       	ldi	r31, 0x02	; 2
    1a9a:	e9 0f       	add	r30, r25
    1a9c:	f1 1d       	adc	r31, r1
    1a9e:	21 e0       	ldi	r18, 0x01	; 1
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	00 80       	ld	r0, Z
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <update_octave_range+0x10a>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	0a 94       	dec	r0
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <update_octave_range+0x106>
    1ab0:	85 2b       	or	r24, r21
    1ab2:	80 93 01 03 	sts	0x0301, r24
    1ab6:	08 95       	ret

00001ab8 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1ab8:	80 91 7f 03 	lds	r24, 0x037F
    1abc:	88 23       	and	r24, r24
    1abe:	64 f4       	brge	.+24     	; 0x1ad8 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1ac0:	80 58       	subi	r24, 0x80	; 128
    1ac2:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1ac6:	80 91 0a 03 	lds	r24, 0x030A
    1aca:	8f 5f       	subi	r24, 0xFF	; 255
    1acc:	80 93 0a 03 	sts	0x030A, r24
    1ad0:	85 30       	cpi	r24, 0x05	; 5
    1ad2:	11 f4       	brne	.+4      	; 0x1ad8 <update_lfo_shape+0x20>
    1ad4:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1ad8:	e0 91 0a 03 	lds	r30, 0x030A
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	ea 5d       	subi	r30, 0xDA	; 218
    1ae4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	01 80       	ldd	r0, Z+1	; 0x01
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <update_lfo_shape+0x3a>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	0a 94       	dec	r0
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1af6:	90 91 ff 02 	lds	r25, 0x02FF
    1afa:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1afc:	89 2b       	or	r24, r25
    1afe:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1b02:	80 81       	ld	r24, Z
    1b04:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1b06:	ed ed       	ldi	r30, 0xDD	; 221
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	80 62       	ori	r24, 0x20	; 32
    1b0e:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1b10:	80 81       	ld	r24, Z
    1b12:	8f 7d       	andi	r24, 0xDF	; 223
    1b14:	80 83       	st	Z, r24
	
}		
    1b16:	08 95       	ret

00001b18 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1b18:	80 91 7f 03 	lds	r24, 0x037F
    1b1c:	80 ff       	sbrs	r24, 0
    1b1e:	0f c0       	rjmp	.+30     	; 0x1b3e <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	89 27       	eor	r24, r25
    1b24:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1b28:	80 91 0b 03 	lds	r24, 0x030B
    1b2c:	8f 5f       	subi	r24, 0xFF	; 255
    1b2e:	80 93 0b 03 	sts	0x030B, r24
    1b32:	85 30       	cpi	r24, 0x05	; 5
    1b34:	11 f4       	brne	.+4      	; 0x1b3a <update_lfo_sync+0x22>
    1b36:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1b3a:	10 92 d1 03 	sts	0x03D1, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1b3e:	60 91 ff 02 	lds	r22, 0x02FF
    1b42:	60 7f       	andi	r22, 0xF0	; 240
    1b44:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1b48:	20 91 0b 03 	lds	r18, 0x030B
    1b4c:	22 23       	and	r18, r18
    1b4e:	71 f0       	breq	.+28     	; 0x1b6c <update_lfo_sync+0x54>
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	21 50       	subi	r18, 0x01	; 1
    1b54:	30 40       	sbci	r19, 0x00	; 0
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	ca 01       	movw	r24, r20
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <update_lfo_sync+0x4a>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	2a 95       	dec	r18
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <update_lfo_sync+0x46>
    1b66:	86 2b       	or	r24, r22
    1b68:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1b6c:	80 91 ff 02 	lds	r24, 0x02FF
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	8f 70       	andi	r24, 0x0F	; 15
    1b74:	90 70       	andi	r25, 0x00	; 0
    1b76:	82 30       	cpi	r24, 0x02	; 2
    1b78:	91 05       	cpc	r25, r1
    1b7a:	89 f0       	breq	.+34     	; 0x1b9e <update_lfo_sync+0x86>
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	91 05       	cpc	r25, r1
    1b80:	24 f4       	brge	.+8      	; 0x1b8a <update_lfo_sync+0x72>
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	91 05       	cpc	r25, r1
    1b86:	b9 f4       	brne	.+46     	; 0x1bb6 <update_lfo_sync+0x9e>
    1b88:	07 c0       	rjmp	.+14     	; 0x1b98 <update_lfo_sync+0x80>
    1b8a:	84 30       	cpi	r24, 0x04	; 4
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	59 f0       	breq	.+22     	; 0x1ba6 <update_lfo_sync+0x8e>
    1b90:	88 30       	cpi	r24, 0x08	; 8
    1b92:	91 05       	cpc	r25, r1
    1b94:	81 f4       	brne	.+32     	; 0x1bb6 <update_lfo_sync+0x9e>
    1b96:	0b c0       	rjmp	.+22     	; 0x1bae <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1b98:	10 92 d0 03 	sts	0x03D0, r1
			
			break;
    1b9c:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			midi_clock.divider = 24; //1:4
    1b9e:	88 e1       	ldi	r24, 0x18	; 24
    1ba0:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1ba4:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1ba6:	8c e0       	ldi	r24, 0x0C	; 12
    1ba8:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1bac:	08 95       	ret
			
		case 0b1000:
			midi_clock.divider = 6; //1:16	 		
    1bae:	86 e0       	ldi	r24, 0x06	; 6
    1bb0:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1bb4:	08 95       	ret
		
		default:
			midi_clock.divider = 0; //need to turn midi sync off here. How?
    1bb6:	10 92 d0 03 	sts	0x03D0, r1
    1bba:	08 95       	ret

00001bbc <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1bbc:	80 91 7f 03 	lds	r24, 0x037F
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	92 95       	swap	r25
    1bc4:	96 95       	lsr	r25
    1bc6:	96 95       	lsr	r25
    1bc8:	93 70       	andi	r25, 0x03	; 3
    1bca:	90 ff       	sbrs	r25, 0
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <update_arp_sync+0x30>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1bce:	90 e4       	ldi	r25, 0x40	; 64
    1bd0:	89 27       	eor	r24, r25
    1bd2:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1bd6:	80 91 0c 03 	lds	r24, 0x030C
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	80 93 0c 03 	sts	0x030C, r24
    1be0:	85 30       	cpi	r24, 0x05	; 5
    1be2:	11 f4       	brne	.+4      	; 0x1be8 <update_arp_sync+0x2c>
    1be4:	10 92 0c 03 	sts	0x030C, r1
		system_clock.ppqn_counter = 0; //reset counter
    1be8:	10 92 cb 03 	sts	0x03CB, r1
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1bec:	60 91 00 03 	lds	r22, 0x0300
    1bf0:	63 7c       	andi	r22, 0xC3	; 195
    1bf2:	60 93 00 03 	sts	0x0300, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1bf6:	20 91 0c 03 	lds	r18, 0x030C
    1bfa:	22 23       	and	r18, r18
    1bfc:	71 f0       	breq	.+28     	; 0x1c1a <update_arp_sync+0x5e>
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	2f 5f       	subi	r18, 0xFF	; 255
    1c02:	3f 4f       	sbci	r19, 0xFF	; 255
    1c04:	41 e0       	ldi	r20, 0x01	; 1
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	ca 01       	movw	r24, r20
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <update_arp_sync+0x54>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	2a 95       	dec	r18
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <update_arp_sync+0x50>
    1c14:	86 2b       	or	r24, r22
    1c16:	80 93 00 03 	sts	0x0300, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1c1a:	80 91 00 03 	lds	r24, 0x0300
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	8c 73       	andi	r24, 0x3C	; 60
    1c22:	90 70       	andi	r25, 0x00	; 0
    1c24:	88 30       	cpi	r24, 0x08	; 8
    1c26:	91 05       	cpc	r25, r1
    1c28:	91 f0       	breq	.+36     	; 0x1c4e <update_arp_sync+0x92>
    1c2a:	89 30       	cpi	r24, 0x09	; 9
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	24 f4       	brge	.+8      	; 0x1c38 <update_arp_sync+0x7c>
    1c30:	84 30       	cpi	r24, 0x04	; 4
    1c32:	91 05       	cpc	r25, r1
    1c34:	c1 f4       	brne	.+48     	; 0x1c66 <update_arp_sync+0xaa>
    1c36:	07 c0       	rjmp	.+14     	; 0x1c46 <update_arp_sync+0x8a>
    1c38:	80 31       	cpi	r24, 0x10	; 16
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	61 f0       	breq	.+24     	; 0x1c56 <update_arp_sync+0x9a>
    1c3e:	80 32       	cpi	r24, 0x20	; 32
    1c40:	91 05       	cpc	r25, r1
    1c42:	89 f4       	brne	.+34     	; 0x1c66 <update_arp_sync+0xaa>
    1c44:	0c c0       	rjmp	.+24     	; 0x1c5e <update_arp_sync+0xa2>
			
		case 0b00000100:
			system_clock.divider = 48; //1:2
    1c46:	80 e3       	ldi	r24, 0x30	; 48
    1c48:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1c4c:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = 24; //1:4
    1c4e:	88 e1       	ldi	r24, 0x18	; 24
    1c50:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1c54:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = 12; //1:8
    1c56:	8c e0       	ldi	r24, 0x0C	; 12
    1c58:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1c5c:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = 6; //1:16	
    1c5e:	86 e0       	ldi	r24, 0x06	; 6
    1c60:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1c64:	08 95       	ret
			
		default:
			system_clock.divider = 2; //should be 1 but this never turns arp_sync_led off - need to fix this	
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	80 93 ca 03 	sts	0x03CA, r24
    1c6c:	08 95       	ret

00001c6e <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1c6e:	80 91 7f 03 	lds	r24, 0x037F
    1c72:	80 31       	cpi	r24, 0x10	; 16
    1c74:	69 f4       	brne	.+26     	; 0x1c90 <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1c76:	10 92 7f 03 	sts	0x037F, r1
		
		if (++arp_range == 4) arp_range = 0;
    1c7a:	80 91 0d 03 	lds	r24, 0x030D
    1c7e:	8f 5f       	subi	r24, 0xFF	; 255
    1c80:	80 93 0d 03 	sts	0x030D, r24
    1c84:	84 30       	cpi	r24, 0x04	; 4
    1c86:	11 f4       	brne	.+4      	; 0x1c8c <update_arp_range+0x1e>
    1c88:	10 92 0d 03 	sts	0x030D, r1
		arp.step_position = 0; //reset step position if range changes
    1c8c:	10 92 86 03 	sts	0x0386, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1c90:	20 91 fe 02 	lds	r18, 0x02FE
    1c94:	2d 7f       	andi	r18, 0xFD	; 253
    1c96:	20 93 fe 02 	sts	0x02FE, r18
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1c9a:	90 91 00 03 	lds	r25, 0x0300
    1c9e:	9f 73       	andi	r25, 0x3F	; 63
    1ca0:	90 93 00 03 	sts	0x0300, r25
	
	arp.range = arp_range;
    1ca4:	80 91 0d 03 	lds	r24, 0x030D
    1ca8:	80 93 84 03 	sts	0x0384, r24
	
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1cac:	82 30       	cpi	r24, 0x02	; 2
    1cae:	41 f0       	breq	.+16     	; 0x1cc0 <update_arp_range+0x52>
    1cb0:	83 30       	cpi	r24, 0x03	; 3
    1cb2:	51 f0       	breq	.+20     	; 0x1cc8 <update_arp_range+0x5a>
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	59 f4       	brne	.+22     	; 0x1cce <update_arp_range+0x60>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1cb8:	22 60       	ori	r18, 0x02	; 2
    1cba:	20 93 fe 02 	sts	0x02FE, r18
			break;
    1cbe:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1cc0:	90 64       	ori	r25, 0x40	; 64
    1cc2:	90 93 00 03 	sts	0x0300, r25
			break;
    1cc6:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1cc8:	90 68       	ori	r25, 0x80	; 128
    1cca:	90 93 00 03 	sts	0x0300, r25
    1cce:	08 95       	ret

00001cd0 <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1cd0:	80 91 7f 03 	lds	r24, 0x037F
    1cd4:	98 2f       	mov	r25, r24
    1cd6:	92 95       	swap	r25
    1cd8:	96 95       	lsr	r25
    1cda:	97 70       	andi	r25, 0x07	; 7
    1cdc:	90 ff       	sbrs	r25, 0
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <update_arp_mode+0x2e>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1ce0:	90 e2       	ldi	r25, 0x20	; 32
    1ce2:	89 27       	eor	r24, r25
    1ce4:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_mode == 5) arp_mode = 0;
    1ce8:	80 91 0e 03 	lds	r24, 0x030E
    1cec:	8f 5f       	subi	r24, 0xFF	; 255
    1cee:	80 93 0e 03 	sts	0x030E, r24
    1cf2:	85 30       	cpi	r24, 0x05	; 5
    1cf4:	11 f4       	brne	.+4      	; 0x1cfa <update_arp_mode+0x2a>
    1cf6:	10 92 0e 03 	sts	0x030E, r1
		arp.step_position = 0; //reset step position if mode changes
    1cfa:	10 92 86 03 	sts	0x0386, r1
		
	}

	arp.clock_source = INTERNAL_CLOCK;	
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	80 93 88 03 	sts	0x0388, r24

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1d04:	90 91 fe 02 	lds	r25, 0x02FE
    1d08:	93 7c       	andi	r25, 0xC3	; 195
    1d0a:	90 93 fe 02 	sts	0x02FE, r25
	
	switch(arp_mode) {
    1d0e:	80 91 0e 03 	lds	r24, 0x030E
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	81 f0       	breq	.+32     	; 0x1d36 <update_arp_mode+0x66>
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	28 f0       	brcs	.+10     	; 0x1d24 <update_arp_mode+0x54>
    1d1a:	82 30       	cpi	r24, 0x02	; 2
    1d1c:	91 f0       	breq	.+36     	; 0x1d42 <update_arp_mode+0x72>
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	f1 f4       	brne	.+60     	; 0x1d5e <update_arp_mode+0x8e>
    1d22:	16 c0       	rjmp	.+44     	; 0x1d50 <update_arp_mode+0x80>
		
		case 0:
		
			//turn arp off
			arp.clock_source = OFF;
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	80 93 88 03 	sts	0x0388, r24
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    1d2a:	80 91 b0 02 	lds	r24, 0x02B0
    1d2e:	88 23       	and	r24, r24
    1d30:	e1 f4       	brne	.+56     	; 0x1d6a <update_arp_mode+0x9a>
    1d32:	89 98       	cbi	0x11, 1	; 17
    1d34:	08 95       	ret
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1d36:	94 62       	ori	r25, 0x24	; 36
    1d38:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP;
    1d3c:	10 92 89 03 	sts	0x0389, r1
			break;	
    1d40:	08 95       	ret
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1d42:	94 61       	ori	r25, 0x14	; 20
    1d44:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = DOWN;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	80 93 89 03 	sts	0x0389, r24
			break;
    1d4e:	08 95       	ret
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1d50:	94 63       	ori	r25, 0x34	; 52
    1d52:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP_DOWN;
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	80 93 89 03 	sts	0x0389, r24
			break;
    1d5c:	08 95       	ret
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1d5e:	9c 60       	ori	r25, 0x0C	; 12
    1d60:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = RANDOM;
    1d64:	84 e0       	ldi	r24, 0x04	; 4
    1d66:	80 93 89 03 	sts	0x0389, r24
    1d6a:	08 95       	ret

00001d6c <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1d6c:	90 91 7e 03 	lds	r25, 0x037E
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1d70:	80 91 80 03 	lds	r24, 0x0380
    1d74:	86 95       	lsr	r24
    1d76:	86 95       	lsr	r24
    1d78:	68 2f       	mov	r22, r24
    1d7a:	67 95       	ror	r22
    1d7c:	66 27       	eor	r22, r22
    1d7e:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1d80:	29 2f       	mov	r18, r25
    1d82:	21 70       	andi	r18, 0x01	; 1
    1d84:	26 2b       	or	r18, r22
    1d86:	69 2f       	mov	r22, r25
    1d88:	66 1f       	adc	r22, r22
    1d8a:	66 27       	eor	r22, r22
    1d8c:	66 1f       	adc	r22, r22
    1d8e:	66 0f       	add	r22, r22
    1d90:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1d92:	29 2f       	mov	r18, r25
    1d94:	26 95       	lsr	r18
    1d96:	26 95       	lsr	r18
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	21 70       	andi	r18, 0x01	; 1
    1d9c:	30 70       	andi	r19, 0x00	; 0
    1d9e:	d9 01       	movw	r26, r18
    1da0:	aa 0f       	add	r26, r26
    1da2:	bb 1f       	adc	r27, r27
    1da4:	aa 0f       	add	r26, r26
    1da6:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1da8:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1daa:	a9 2f       	mov	r26, r25
    1dac:	a6 95       	lsr	r26
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	a1 70       	andi	r26, 0x01	; 1
    1db2:	b0 70       	andi	r27, 0x00	; 0
    1db4:	fd 01       	movw	r30, r26
    1db6:	ee 0f       	add	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	ee 0f       	add	r30, r30
    1dbc:	ff 1f       	adc	r31, r31
    1dbe:	ee 0f       	add	r30, r30
    1dc0:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1dc2:	a6 2f       	mov	r26, r22
    1dc4:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1dc6:	e9 2f       	mov	r30, r25
    1dc8:	e2 95       	swap	r30
    1dca:	ef 70       	andi	r30, 0x0F	; 15
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	e1 70       	andi	r30, 0x01	; 1
    1dd0:	f0 70       	andi	r31, 0x00	; 0
    1dd2:	bf 01       	movw	r22, r30
    1dd4:	62 95       	swap	r22
    1dd6:	72 95       	swap	r23
    1dd8:	70 7f       	andi	r23, 0xF0	; 240
    1dda:	76 27       	eor	r23, r22
    1ddc:	60 7f       	andi	r22, 0xF0	; 240
    1dde:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1de0:	ea 2f       	mov	r30, r26
    1de2:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1de4:	69 2f       	mov	r22, r25
    1de6:	62 95       	swap	r22
    1de8:	66 95       	lsr	r22
    1dea:	67 70       	andi	r22, 0x07	; 7
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	61 70       	andi	r22, 0x01	; 1
    1df0:	70 70       	andi	r23, 0x00	; 0
    1df2:	ab 01       	movw	r20, r22
    1df4:	44 0f       	add	r20, r20
    1df6:	55 1f       	adc	r21, r21
    1df8:	42 95       	swap	r20
    1dfa:	52 95       	swap	r21
    1dfc:	50 7f       	andi	r21, 0xF0	; 240
    1dfe:	54 27       	eor	r21, r20
    1e00:	40 7f       	andi	r20, 0xF0	; 240
    1e02:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e04:	6e 2f       	mov	r22, r30
    1e06:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1e08:	49 2f       	mov	r20, r25
    1e0a:	42 95       	swap	r20
    1e0c:	46 95       	lsr	r20
    1e0e:	46 95       	lsr	r20
    1e10:	43 70       	andi	r20, 0x03	; 3
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	41 70       	andi	r20, 0x01	; 1
    1e16:	50 70       	andi	r21, 0x00	; 0
    1e18:	9a 01       	movw	r18, r20
    1e1a:	00 24       	eor	r0, r0
    1e1c:	36 95       	lsr	r19
    1e1e:	27 95       	ror	r18
    1e20:	07 94       	ror	r0
    1e22:	36 95       	lsr	r19
    1e24:	27 95       	ror	r18
    1e26:	07 94       	ror	r0
    1e28:	32 2f       	mov	r19, r18
    1e2a:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e2c:	26 2b       	or	r18, r22
    1e2e:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1e32:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1e34:	81 95       	neg	r24
    1e36:	89 27       	eor	r24, r25
    1e38:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1e3a:	89 27       	eor	r24, r25
    1e3c:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1e40:	ed ed       	ldi	r30, 0xDD	; 221
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1e46:	90 91 80 03 	lds	r25, 0x0380
    1e4a:	96 95       	lsr	r25
    1e4c:	96 95       	lsr	r25
    1e4e:	96 95       	lsr	r25
    1e50:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1e52:	91 95       	neg	r25
    1e54:	80 81       	ld	r24, Z
    1e56:	89 27       	eor	r24, r25
    1e58:	80 71       	andi	r24, 0x10	; 16
    1e5a:	82 27       	eor	r24, r18
    1e5c:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1e5e:	ee ef       	ldi	r30, 0xFE	; 254
    1e60:	f2 e0       	ldi	r31, 0x02	; 2
    1e62:	80 81       	ld	r24, Z
    1e64:	98 27       	eor	r25, r24
    1e66:	91 70       	andi	r25, 0x01	; 1
    1e68:	89 27       	eor	r24, r25
    1e6a:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1e6c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1e70:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1e74:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    1e78:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <update_arp_sync>
	update_arp_range();
    1e7c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <update_arp_range>
	update_arp_mode();
    1e80:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    1e84:	08 95       	ret

00001e86 <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1e8a:	90 91 07 03 	lds	r25, 0x0307
    1e8e:	95 30       	cpi	r25, 0x05	; 5
    1e90:	01 f5       	brne	.+64     	; 0x1ed2 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1e92:	87 e0       	ldi	r24, 0x07	; 7
    1e94:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1e96:	cd ed       	ldi	r28, 0xDD	; 221
    1e98:	d0 e0       	ldi	r29, 0x00	; 0
    1e9a:	88 81       	ld	r24, Y
    1e9c:	80 62       	ori	r24, 0x20	; 32
    1e9e:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1ea0:	88 81       	ld	r24, Y
    1ea2:	8f 7d       	andi	r24, 0xDF	; 223
    1ea4:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1ea6:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1ea8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1eac:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1eae:	88 81       	ld	r24, Y
    1eb0:	80 62       	ori	r24, 0x20	; 32
    1eb2:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1eb4:	88 81       	ld	r24, Y
    1eb6:	8f 7d       	andi	r24, 0xDF	; 223
    1eb8:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1eba:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1ebc:	80 91 ff 02 	lds	r24, 0x02FF
    1ec0:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1ec2:	80 68       	ori	r24, 0x80	; 128
    1ec4:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1ec8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <setup_system_clock>

		current_patch.mode = MEMORY;
    1ecc:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1ed0:	63 c0       	rjmp	.+198    	; 0x1f98 <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1ed2:	80 91 80 03 	lds	r24, 0x0380
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	22 95       	swap	r18
    1eda:	26 95       	lsr	r18
    1edc:	26 95       	lsr	r18
    1ede:	23 70       	andi	r18, 0x03	; 3
    1ee0:	20 ff       	sbrs	r18, 0
    1ee2:	15 c0       	rjmp	.+42     	; 0x1f0e <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1ee4:	20 e4       	ldi	r18, 0x40	; 64
    1ee6:	82 27       	eor	r24, r18
    1ee8:	80 93 80 03 	sts	0x0380, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1eec:	80 91 03 03 	lds	r24, 0x0303
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
    1ef2:	80 93 03 03 	sts	0x0303, r24
    1ef6:	85 32       	cpi	r24, 0x25	; 37
    1ef8:	21 f4       	brne	.+8      	; 0x1f02 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1efa:	84 e2       	ldi	r24, 0x24	; 36
    1efc:	80 93 03 03 	sts	0x0303, r24
    1f00:	06 c0       	rjmp	.+12     	; 0x1f0e <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1f02:	93 30       	cpi	r25, 0x03	; 3
    1f04:	21 f0       	breq	.+8      	; 0x1f0e <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1f06:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <load_patch>
			update_patch();
    1f0a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1f0e:	80 91 80 03 	lds	r24, 0x0380
    1f12:	98 2f       	mov	r25, r24
    1f14:	92 95       	swap	r25
    1f16:	96 95       	lsr	r25
    1f18:	97 70       	andi	r25, 0x07	; 7
    1f1a:	90 ff       	sbrs	r25, 0
    1f1c:	15 c0       	rjmp	.+42     	; 0x1f48 <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1f1e:	90 e2       	ldi	r25, 0x20	; 32
    1f20:	89 27       	eor	r24, r25
    1f22:	80 93 80 03 	sts	0x0380, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1f26:	80 91 03 03 	lds	r24, 0x0303
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	19 f0       	breq	.+6      	; 0x1f34 <update_patch_programmer+0xae>
    1f2e:	81 50       	subi	r24, 0x01	; 1
    1f30:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1f34:	80 91 07 03 	lds	r24, 0x0307
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	31 f0       	breq	.+12     	; 0x1f48 <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    1f3c:	80 91 03 03 	lds	r24, 0x0303
    1f40:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <load_patch>
			update_patch();
    1f44:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1f48:	80 91 80 03 	lds	r24, 0x0380
    1f4c:	98 2f       	mov	r25, r24
    1f4e:	92 95       	swap	r25
    1f50:	9f 70       	andi	r25, 0x0F	; 15
    1f52:	90 ff       	sbrs	r25, 0
    1f54:	15 c0       	rjmp	.+42     	; 0x1f80 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1f56:	90 e1       	ldi	r25, 0x10	; 16
    1f58:	89 27       	eor	r24, r25
    1f5a:	80 93 80 03 	sts	0x0380, r24
		if (current_patch.mode != WRITE) {
    1f5e:	90 91 07 03 	lds	r25, 0x0307
    1f62:	93 30       	cpi	r25, 0x03	; 3
    1f64:	49 f0       	breq	.+18     	; 0x1f78 <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1f66:	8f 77       	andi	r24, 0x7F	; 127
    1f68:	80 93 80 03 	sts	0x0380, r24
			current_patch.mode = WRITE;
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1f72:	0e 94 c3 07 	call	0xf86	; 0xf86 <lock_pots>
    1f76:	04 c0       	rjmp	.+8      	; 0x1f80 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1f78:	80 91 03 03 	lds	r24, 0x0303
    1f7c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1f80:	80 91 80 03 	lds	r24, 0x0380
    1f84:	88 23       	and	r24, r24
    1f86:	44 f4       	brge	.+16     	; 0x1f98 <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1f88:	80 68       	ori	r24, 0x80	; 128
    1f8a:	80 93 80 03 	sts	0x0380, r24
		current_patch.mode = MANUAL;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    1f94:	0e 94 dd 07 	call	0xfba	; 0xfba <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1f9e:	88 ed       	ldi	r24, 0xD8	; 216
    1fa0:	91 e0       	ldi	r25, 0x01	; 1
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1faa:	81 ee       	ldi	r24, 0xE1	; 225
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1fb6:	82 ee       	ldi	r24, 0xE2	; 226
    1fb8:	91 e0       	ldi	r25, 0x01	; 1
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1fc2:	83 eb       	ldi	r24, 0xB3	; 179
    1fc4:	92 e0       	ldi	r25, 0x02	; 2
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1fce:	8a ed       	ldi	r24, 0xDA	; 218
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1fda:	8f ed       	ldi	r24, 0xDF	; 223
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1fe6:	80 ee       	ldi	r24, 0xE0	; 224
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1ff2:	81 ed       	ldi	r24, 0xD1	; 209
    1ff4:	91 e0       	ldi	r25, 0x01	; 1
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1ffe:	86 ed       	ldi	r24, 0xD6	; 214
    2000:	91 e0       	ldi	r25, 0x01	; 1
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	70 e0       	ldi	r23, 0x00	; 0
    2006:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    200a:	82 ed       	ldi	r24, 0xD2	; 210
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2016:	83 ed       	ldi	r24, 0xD3	; 211
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    2022:	84 ed       	ldi	r24, 0xD4	; 212
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	6f ef       	ldi	r22, 0xFF	; 255
    2028:	7f e3       	ldi	r23, 0x3F	; 63
    202a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    202e:	85 ed       	ldi	r24, 0xD5	; 213
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    203a:	89 ed       	ldi	r24, 0xD9	; 217
    203c:	91 e0       	ldi	r25, 0x01	; 1
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2046:	8e ec       	ldi	r24, 0xCE	; 206
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2052:	8c ec       	ldi	r24, 0xCC	; 204
    2054:	91 e0       	ldi	r25, 0x01	; 1
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    205e:	8a ec       	ldi	r24, 0xCA	; 202
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	6f ef       	ldi	r22, 0xFF	; 255
    2064:	7f e3       	ldi	r23, 0x3F	; 63
    2066:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    206a:	88 ec       	ldi	r24, 0xC8	; 200
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    2076:	80 ed       	ldi	r24, 0xD0	; 208
    2078:	91 e0       	ldi	r25, 0x01	; 1
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2082:	83 ee       	ldi	r24, 0xE3	; 227
    2084:	91 e0       	ldi	r25, 0x01	; 1
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    208e:	84 ee       	ldi	r24, 0xE4	; 228
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
}	
    209a:	08 95       	ret

0000209c <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    209c:	2f 92       	push	r2
    209e:	3f 92       	push	r3
    20a0:	4f 92       	push	r4
    20a2:	5f 92       	push	r5
    20a4:	6f 92       	push	r6
    20a6:	7f 92       	push	r7
    20a8:	8f 92       	push	r8
    20aa:	9f 92       	push	r9
    20ac:	af 92       	push	r10
    20ae:	bf 92       	push	r11
    20b0:	cf 92       	push	r12
    20b2:	df 92       	push	r13
    20b4:	ef 92       	push	r14
    20b6:	ff 92       	push	r15
    20b8:	0f 93       	push	r16
    20ba:	1f 93       	push	r17
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	2c 97       	sbiw	r28, 0x0c	; 12
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	08 2f       	mov	r16, r24
    20d2:	78 87       	std	Y+8, r23	; 0x08
    20d4:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    20d6:	80 91 7b 03 	lds	r24, 0x037B
    20da:	83 60       	ori	r24, 0x03	; 3
    20dc:	80 93 7b 03 	sts	0x037B, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    20e0:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    20e4:	10 92 7a 03 	sts	0x037A, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    20e8:	0f 30       	cpi	r16, 0x0F	; 15
    20ea:	e1 f4       	brne	.+56     	; 0x2124 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    20ec:	0f 2e       	mov	r0, r31
    20ee:	f6 ee       	ldi	r31, 0xE6	; 230
    20f0:	4f 2e       	mov	r4, r31
    20f2:	f1 e0       	ldi	r31, 0x01	; 1
    20f4:	5f 2e       	mov	r5, r31
    20f6:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    20f8:	0f 2e       	mov	r0, r31
    20fa:	fe ed       	ldi	r31, 0xDE	; 222
    20fc:	2f 2e       	mov	r2, r31
    20fe:	f1 e0       	ldi	r31, 0x01	; 1
    2100:	3f 2e       	mov	r3, r31
    2102:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    2104:	23 ee       	ldi	r18, 0xE3	; 227
    2106:	31 e0       	ldi	r19, 0x01	; 1
    2108:	3a 83       	std	Y+2, r19	; 0x02
    210a:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    210c:	0f 2e       	mov	r0, r31
    210e:	fc ed       	ldi	r31, 0xDC	; 220
    2110:	8f 2e       	mov	r8, r31
    2112:	f1 e0       	ldi	r31, 0x01	; 1
    2114:	9f 2e       	mov	r9, r31
    2116:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    2118:	82 e7       	ldi	r24, 0x72	; 114
    211a:	96 e0       	ldi	r25, 0x06	; 6
    211c:	9a 87       	std	Y+10, r25	; 0x0a
    211e:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	1b c0       	rjmp	.+54     	; 0x215a <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2124:	0f 2e       	mov	r0, r31
    2126:	f5 ee       	ldi	r31, 0xE5	; 229
    2128:	4f 2e       	mov	r4, r31
    212a:	f1 e0       	ldi	r31, 0x01	; 1
    212c:	5f 2e       	mov	r5, r31
    212e:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    2130:	0f 2e       	mov	r0, r31
    2132:	f7 ed       	ldi	r31, 0xD7	; 215
    2134:	2f 2e       	mov	r2, r31
    2136:	f1 e0       	ldi	r31, 0x01	; 1
    2138:	3f 2e       	mov	r3, r31
    213a:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    213c:	e4 ee       	ldi	r30, 0xE4	; 228
    213e:	f1 e0       	ldi	r31, 0x01	; 1
    2140:	fa 83       	std	Y+2, r31	; 0x02
    2142:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2144:	0f 2e       	mov	r0, r31
    2146:	fd ed       	ldi	r31, 0xDD	; 221
    2148:	8f 2e       	mov	r8, r31
    214a:	f1 e0       	ldi	r31, 0x01	; 1
    214c:	9f 2e       	mov	r9, r31
    214e:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    2150:	20 e7       	ldi	r18, 0x70	; 112
    2152:	36 e0       	ldi	r19, 0x06	; 6
    2154:	3a 87       	std	Y+10, r19	; 0x0a
    2156:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    2158:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    215a:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    215c:	ed ed       	ldi	r30, 0xDD	; 221
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	80 64       	ori	r24, 0x40	; 64
    2164:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2166:	80 81       	ld	r24, Z
    2168:	8f 7b       	andi	r24, 0xBF	; 191
    216a:	80 83       	st	Z, r24
	DATA_BUS = 0;
    216c:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    216e:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2170:	84 b5       	in	r24, 0x24	; 36
    2172:	8f 60       	ori	r24, 0x0F	; 15
    2174:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    217a:	ee e6       	ldi	r30, 0x6E	; 110
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	90 81       	ld	r25, Z
    2180:	92 60       	ori	r25, 0x02	; 2
    2182:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    2184:	80 93 7c 03 	sts	0x037C, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    2188:	8d e0       	ldi	r24, 0x0D	; 13
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9c 83       	std	Y+4, r25	; 0x04
    218e:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    2190:	80 2f       	mov	r24, r16
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	8c 01       	movw	r16, r24
    2196:	0f 5f       	subi	r16, 0xFF	; 255
    2198:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    219a:	0f 2e       	mov	r0, r31
    219c:	f8 ed       	ldi	r31, 0xD8	; 216
    219e:	ef 2e       	mov	r14, r31
    21a0:	f1 e0       	ldi	r31, 0x01	; 1
    21a2:	ff 2e       	mov	r15, r31
    21a4:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    21a6:	0f 2e       	mov	r0, r31
    21a8:	f4 ed       	ldi	r31, 0xD4	; 212
    21aa:	cf 2e       	mov	r12, r31
    21ac:	f1 e0       	ldi	r31, 0x01	; 1
    21ae:	df 2e       	mov	r13, r31
    21b0:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    21b2:	0f 2e       	mov	r0, r31
    21b4:	fa ec       	ldi	r31, 0xCA	; 202
    21b6:	af 2e       	mov	r10, r31
    21b8:	f1 e0       	ldi	r31, 0x01	; 1
    21ba:	bf 2e       	mov	r11, r31
    21bc:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    21be:	0f 2e       	mov	r0, r31
    21c0:	fb ec       	ldi	r31, 0xCB	; 203
    21c2:	6f 2e       	mov	r6, r31
    21c4:	f1 e0       	ldi	r31, 0x01	; 1
    21c6:	7f 2e       	mov	r7, r31
    21c8:	f0 2d       	mov	r31, r0
    21ca:	e0 e0       	ldi	r30, 0x00	; 0
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	fc 87       	std	Y+12, r31	; 0x0c
    21d0:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    21d2:	21 e0       	ldi	r18, 0x01	; 1
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	0b 80       	ldd	r0, Y+3	; 0x03
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <set_vco_init_cv+0x142>
    21da:	22 0f       	add	r18, r18
    21dc:	33 1f       	adc	r19, r19
    21de:	0a 94       	dec	r0
    21e0:	e2 f7       	brpl	.-8      	; 0x21da <set_vco_init_cv+0x13e>
    21e2:	3e 83       	std	Y+6, r19	; 0x06
    21e4:	2d 83       	std	Y+5, r18	; 0x05
    21e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    21e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    21ea:	82 2b       	or	r24, r18
    21ec:	93 2b       	or	r25, r19
    21ee:	9c 87       	std	Y+12, r25	; 0x0c
    21f0:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    21f2:	c4 01       	movw	r24, r8
    21f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f8:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
		
		
		count_finished = FALSE;
    21fc:	10 92 7a 03 	sts	0x037A, r1
		period_counter = 0;
    2200:	10 92 7d 03 	sts	0x037D, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    2204:	8f e0       	ldi	r24, 0x0F	; 15
    2206:	e8 e1       	ldi	r30, 0x18	; 24
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	a8 95       	wdr
    2210:	e0 93 60 00 	sts	0x0060, r30
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    221a:	80 91 7a 03 	lds	r24, 0x037A
    221e:	88 23       	and	r24, r24
    2220:	89 f5       	brne	.+98     	; 0x2284 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    2222:	c8 01       	movw	r24, r16
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	0e 94 ba 02 	call	0x574	; 0x574 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    222a:	c4 01       	movw	r24, r8
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    2234:	c1 01       	movw	r24, r2
    2236:	6f ef       	ldi	r22, 0xFF	; 255
    2238:	7f e3       	ldi	r23, 0x3F	; 63
    223a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    223e:	c7 01       	movw	r24, r14
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    2248:	c6 01       	movw	r24, r12
    224a:	6f ef       	ldi	r22, 0xFF	; 255
    224c:	7f e3       	ldi	r23, 0x3F	; 63
    224e:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    2252:	c5 01       	movw	r24, r10
    2254:	6f ef       	ldi	r22, 0xFF	; 255
    2256:	7f e3       	ldi	r23, 0x3F	; 63
    2258:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    225c:	c3 01       	movw	r24, r6
    225e:	6f ef       	ldi	r22, 0xFF	; 255
    2260:	7f e3       	ldi	r23, 0x3F	; 63
    2262:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	6f ef       	ldi	r22, 0xFF	; 255
    226c:	7f e3       	ldi	r23, 0x3F	; 63
    226e:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    2272:	c2 01       	movw	r24, r4
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    227c:	80 91 7a 03 	lds	r24, 0x037A
    2280:	88 23       	and	r24, r24
    2282:	79 f2       	breq	.-98     	; 0x2222 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    2284:	88 e1       	ldi	r24, 0x18	; 24
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	80 93 60 00 	sts	0x0060, r24
    228e:	10 92 60 00 	sts	0x0060, r1
    2292:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    2294:	80 91 78 03 	lds	r24, 0x0378
    2298:	90 91 79 03 	lds	r25, 0x0379
    229c:	ef 81       	ldd	r30, Y+7	; 0x07
    229e:	f8 85       	ldd	r31, Y+8	; 0x08
    22a0:	e8 17       	cp	r30, r24
    22a2:	f9 07       	cpc	r31, r25
    22a4:	20 f0       	brcs	.+8      	; 0x22ae <set_vco_init_cv+0x212>
    22a6:	80 91 af 02 	lds	r24, 0x02AF
    22aa:	88 23       	and	r24, r24
    22ac:	51 f4       	brne	.+20     	; 0x22c2 <set_vco_init_cv+0x226>
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	80 95       	com	r24
    22b4:	90 95       	com	r25
    22b6:	2b 85       	ldd	r18, Y+11	; 0x0b
    22b8:	3c 85       	ldd	r19, Y+12	; 0x0c
    22ba:	28 23       	and	r18, r24
    22bc:	39 23       	and	r19, r25
    22be:	3c 87       	std	Y+12, r19	; 0x0c
    22c0:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	9c 83       	std	Y+4, r25	; 0x04
    22d0:	8b 83       	std	Y+3, r24	; 0x03
    22d2:	ef ef       	ldi	r30, 0xFF	; 255
    22d4:	8f 3f       	cpi	r24, 0xFF	; 255
    22d6:	9e 07       	cpc	r25, r30
    22d8:	09 f0       	breq	.+2      	; 0x22dc <set_vco_init_cv+0x240>
    22da:	7b cf       	rjmp	.-266    	; 0x21d2 <set_vco_init_cv+0x136>
    22dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    22de:	3c 85       	ldd	r19, Y+12	; 0x0c
    22e0:	3e 83       	std	Y+6, r19	; 0x06
    22e2:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    22e4:	88 ec       	ldi	r24, 0xC8	; 200
    22e6:	91 e0       	ldi	r25, 0x01	; 1
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    22f0:	89 ec       	ldi	r24, 0xC9	; 201
    22f2:	91 e0       	ldi	r25, 0x01	; 1
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	70 e0       	ldi	r23, 0x00	; 0
    22f8:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    22fc:	84 ed       	ldi	r24, 0xD4	; 212
    22fe:	91 e0       	ldi	r25, 0x01	; 1
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    2308:	88 ed       	ldi	r24, 0xD8	; 216
    230a:	91 e0       	ldi	r25, 0x01	; 1
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	70 e0       	ldi	r23, 0x00	; 0
    2310:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    2314:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    2316:	ee e6       	ldi	r30, 0x6E	; 110
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	8d 7f       	andi	r24, 0xFD	; 253
    231e:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2320:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	6d 81       	ldd	r22, Y+5	; 0x05
    2328:	7e 81       	ldd	r23, Y+6	; 0x06
    232a:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	2c 96       	adiw	r28, 0x0c	; 12
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	df 90       	pop	r13
    234c:	cf 90       	pop	r12
    234e:	bf 90       	pop	r11
    2350:	af 90       	pop	r10
    2352:	9f 90       	pop	r9
    2354:	8f 90       	pop	r8
    2356:	7f 90       	pop	r7
    2358:	6f 90       	pop	r6
    235a:	5f 90       	pop	r5
    235c:	4f 90       	pop	r4
    235e:	3f 90       	pop	r3
    2360:	2f 90       	pop	r2
    2362:	08 95       	ret

00002364 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    2364:	2f 92       	push	r2
    2366:	3f 92       	push	r3
    2368:	4f 92       	push	r4
    236a:	5f 92       	push	r5
    236c:	6f 92       	push	r6
    236e:	7f 92       	push	r7
    2370:	8f 92       	push	r8
    2372:	9f 92       	push	r9
    2374:	af 92       	push	r10
    2376:	bf 92       	push	r11
    2378:	cf 92       	push	r12
    237a:	df 92       	push	r13
    237c:	ef 92       	push	r14
    237e:	ff 92       	push	r15
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	c0 54       	subi	r28, 0x40	; 64
    238e:	d0 40       	sbci	r29, 0x00	; 0
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    239c:	de 01       	movw	r26, r28
    239e:	11 96       	adiw	r26, 0x01	; 1
    23a0:	e0 e3       	ldi	r30, 0x30	; 48
    23a2:	f2 e0       	ldi	r31, 0x02	; 2
    23a4:	80 e3       	ldi	r24, 0x30	; 48
    23a6:	01 90       	ld	r0, Z+
    23a8:	0d 92       	st	X+, r0
    23aa:	81 50       	subi	r24, 0x01	; 1
    23ac:	e1 f7       	brne	.-8      	; 0x23a6 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    23ae:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    23b2:	0f 30       	cpi	r16, 0x0F	; 15
    23b4:	11 f5       	brne	.+68     	; 0x23fa <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    23b6:	40 90 75 03 	lds	r4, 0x0375
    23ba:	50 90 76 03 	lds	r5, 0x0376
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    23be:	0f 2e       	mov	r0, r31
    23c0:	f6 ee       	ldi	r31, 0xE6	; 230
    23c2:	8f 2e       	mov	r8, r31
    23c4:	f1 e0       	ldi	r31, 0x01	; 1
    23c6:	9f 2e       	mov	r9, r31
    23c8:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    23ca:	0f 2e       	mov	r0, r31
    23cc:	fe ed       	ldi	r31, 0xDE	; 222
    23ce:	2f 2e       	mov	r2, r31
    23d0:	f1 e0       	ldi	r31, 0x01	; 1
    23d2:	3f 2e       	mov	r3, r31
    23d4:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    23d6:	23 ee       	ldi	r18, 0xE3	; 227
    23d8:	31 e0       	ldi	r19, 0x01	; 1
    23da:	3a ab       	sts	0x5a, r19
    23dc:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    23de:	0f 2e       	mov	r0, r31
    23e0:	fc ed       	ldi	r31, 0xDC	; 220
    23e2:	6f 2e       	mov	r6, r31
    23e4:	f1 e0       	ldi	r31, 0x01	; 1
    23e6:	7f 2e       	mov	r7, r31
    23e8:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    23ea:	01 e5       	ldi	r16, 0x51	; 81
    23ec:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    23ee:	cc 24       	eor	r12, r12
    23f0:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    23f2:	ee 24       	eor	r14, r14
    23f4:	68 94       	set
    23f6:	e1 f8       	bld	r14, 1
    23f8:	22 c0       	rjmp	.+68     	; 0x243e <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    23fa:	40 90 73 03 	lds	r4, 0x0373
    23fe:	50 90 74 03 	lds	r5, 0x0374
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2402:	0f 2e       	mov	r0, r31
    2404:	f5 ee       	ldi	r31, 0xE5	; 229
    2406:	8f 2e       	mov	r8, r31
    2408:	f1 e0       	ldi	r31, 0x01	; 1
    240a:	9f 2e       	mov	r9, r31
    240c:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    240e:	0f 2e       	mov	r0, r31
    2410:	f7 ed       	ldi	r31, 0xD7	; 215
    2412:	2f 2e       	mov	r2, r31
    2414:	f1 e0       	ldi	r31, 0x01	; 1
    2416:	3f 2e       	mov	r3, r31
    2418:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    241a:	44 ee       	ldi	r20, 0xE4	; 228
    241c:	51 e0       	ldi	r21, 0x01	; 1
    241e:	5a ab       	sts	0x5a, r21
    2420:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2422:	0f 2e       	mov	r0, r31
    2424:	fd ed       	ldi	r31, 0xDD	; 221
    2426:	6f 2e       	mov	r6, r31
    2428:	f1 e0       	ldi	r31, 0x01	; 1
    242a:	7f 2e       	mov	r7, r31
    242c:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    242e:	0f e2       	ldi	r16, 0x2F	; 47
    2430:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    2432:	cc 24       	eor	r12, r12
    2434:	68 94       	set
    2436:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    2438:	ee 24       	eor	r14, r14
    243a:	68 94       	set
    243c:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    243e:	c3 01       	movw	r24, r6
    2440:	b2 01       	movw	r22, r4
    2442:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    2446:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2448:	ed ed       	ldi	r30, 0xDD	; 221
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	80 64       	ori	r24, 0x40	; 64
    2450:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2452:	80 81       	ld	r24, Z
    2454:	8f 7b       	andi	r24, 0xBF	; 191
    2456:	80 83       	st	Z, r24
		DATA_BUS = 0;
    2458:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    245a:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	80 93 7c 03 	sts	0x037C, r24
		
		compare_match_counter = 0;	
    2462:	10 92 77 03 	sts	0x0377, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    2466:	8c 2d       	mov	r24, r12
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	24 e6       	ldi	r18, 0x64	; 100
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	82 9f       	mul	r24, r18
    2470:	d0 01       	movw	r26, r0
    2472:	83 9f       	mul	r24, r19
    2474:	b0 0d       	add	r27, r0
    2476:	92 9f       	mul	r25, r18
    2478:	b0 0d       	add	r27, r0
    247a:	11 24       	eor	r1, r1
    247c:	bc ab       	sts	0x5c, r27
    247e:	ab ab       	sts	0x5b, r26
    2480:	fe 01       	movw	r30, r28
    2482:	31 96       	adiw	r30, 0x01	; 1
    2484:	fc af       	sts	0x7c, r31
    2486:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    2488:	98 01       	movw	r18, r16
    248a:	2e 5f       	subi	r18, 0xFE	; 254
    248c:	3f 4f       	sbci	r19, 0xFF	; 255
    248e:	21 96       	adiw	r28, 0x01	; 1
    2490:	3f af       	sts	0x7f, r19
    2492:	2e af       	sts	0x7e, r18
    2494:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2496:	1e ae       	sts	0xbe, r17
    2498:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    249a:	0f 2e       	mov	r0, r31
    249c:	f8 ed       	ldi	r31, 0xD8	; 216
    249e:	ef 2e       	mov	r14, r31
    24a0:	f1 e0       	ldi	r31, 0x01	; 1
    24a2:	ff 2e       	mov	r15, r31
    24a4:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    24a6:	0f 2e       	mov	r0, r31
    24a8:	f4 ed       	ldi	r31, 0xD4	; 212
    24aa:	cf 2e       	mov	r12, r31
    24ac:	f1 e0       	ldi	r31, 0x01	; 1
    24ae:	df 2e       	mov	r13, r31
    24b0:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    24b2:	0f 2e       	mov	r0, r31
    24b4:	fa ec       	ldi	r31, 0xCA	; 202
    24b6:	af 2e       	mov	r10, r31
    24b8:	f1 e0       	ldi	r31, 0x01	; 1
    24ba:	bf 2e       	mov	r11, r31
    24bc:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    24be:	eb ad       	sts	0x6b, r30
    24c0:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    24c2:	80 81       	ld	r24, Z
    24c4:	80 93 7c 03 	sts	0x037C, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    24c8:	84 b5       	in	r24, 0x24	; 36
    24ca:	8f 60       	ori	r24, 0x0F	; 15
    24cc:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    24d2:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    24d4:	4d ad       	sts	0x6d, r20
    24d6:	5e ad       	sts	0x6e, r21
    24d8:	43 30       	cpi	r20, 0x03	; 3
    24da:	51 05       	cpc	r21, r1
    24dc:	24 f4       	brge	.+8      	; 0x24e6 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	80 93 7b 03 	sts	0x037B, r24
    24e4:	03 c0       	rjmp	.+6      	; 0x24ec <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    24e6:	82 e0       	ldi	r24, 0x02	; 2
    24e8:	80 93 7b 03 	sts	0x037B, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    24ec:	81 81       	ldd	r24, Z+1	; 0x01
    24ee:	92 81       	ldd	r25, Z+2	; 0x02
    24f0:	9a af       	sts	0x7a, r25
    24f2:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    24f4:	ad e0       	ldi	r26, 0x0D	; 13
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	be ab       	sts	0x5e, r27
    24fa:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    24fc:	00 e0       	ldi	r16, 0x00	; 0
    24fe:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2500:	e1 e0       	ldi	r30, 0x01	; 1
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	0d a8       	sts	0x8d, r16
    2506:	02 c0       	rjmp	.+4      	; 0x250c <tune_8ths+0x1a8>
    2508:	ee 0f       	add	r30, r30
    250a:	ff 1f       	adc	r31, r31
    250c:	0a 94       	dec	r0
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <tune_8ths+0x1a4>
    2510:	f8 af       	sts	0x78, r31
    2512:	ef ab       	sts	0x5f, r30
    2514:	0e 2b       	or	r16, r30
    2516:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    2518:	ae e6       	ldi	r26, 0x6E	; 110
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	8c 91       	ld	r24, X
    251e:	8d 7f       	andi	r24, 0xFD	; 253
    2520:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2522:	c4 01       	movw	r24, r8
    2524:	b8 01       	movw	r22, r16
    2526:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    252a:	e3 ef       	ldi	r30, 0xF3	; 243
    252c:	f1 e0       	ldi	r31, 0x01	; 1
    252e:	31 97       	sbiw	r30, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <tune_8ths+0x1ca>
    2532:	00 c0       	rjmp	.+0      	; 0x2534 <tune_8ths+0x1d0>
    2534:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2536:	ae e6       	ldi	r26, 0x6E	; 110
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	8c 91       	ld	r24, X
    253c:	82 60       	ori	r24, 0x02	; 2
    253e:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    2540:	10 92 7a 03 	sts	0x037A, r1
				period_counter = 0;
    2544:	10 92 7d 03 	sts	0x037D, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    2548:	e8 e1       	ldi	r30, 0x18	; 24
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	2f e0       	ldi	r18, 0x0F	; 15
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	a8 95       	wdr
    2554:	e0 93 60 00 	sts	0x0060, r30
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    255e:	80 91 7a 03 	lds	r24, 0x037A
    2562:	88 23       	and	r24, r24
    2564:	81 f5       	brne	.+96     	; 0x25c6 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    2566:	80 91 7c 03 	lds	r24, 0x037C
    256a:	4b a9       	sts	0x4b, r20
    256c:	5c a9       	sts	0x4c, r21
    256e:	48 0f       	add	r20, r24
    2570:	51 1d       	adc	r21, r1
    2572:	ca 01       	movw	r24, r20
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	0e 94 ba 02 	call	0x574	; 0x574 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    257a:	c3 01       	movw	r24, r6
    257c:	b2 01       	movw	r22, r4
    257e:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2582:	c4 01       	movw	r24, r8
    2584:	b8 01       	movw	r22, r16
    2586:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    258a:	c7 01       	movw	r24, r14
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    2594:	c6 01       	movw	r24, r12
    2596:	6f ef       	ldi	r22, 0xFF	; 255
    2598:	7f e3       	ldi	r23, 0x3F	; 63
    259a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    259e:	c5 01       	movw	r24, r10
    25a0:	6f ef       	ldi	r22, 0xFF	; 255
    25a2:	7f e3       	ldi	r23, 0x3F	; 63
    25a4:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    25a8:	c1 01       	movw	r24, r2
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	70 e2       	ldi	r23, 0x20	; 32
    25ae:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    25b2:	89 a9       	sts	0x49, r24
    25b4:	9a a9       	sts	0x4a, r25
    25b6:	6f ef       	ldi	r22, 0xFF	; 255
    25b8:	7f e3       	ldi	r23, 0x3F	; 63
    25ba:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    25be:	80 91 7a 03 	lds	r24, 0x037A
    25c2:	88 23       	and	r24, r24
    25c4:	81 f2       	breq	.-96     	; 0x2566 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    25c6:	58 e1       	ldi	r21, 0x18	; 24
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	50 93 60 00 	sts	0x0060, r21
    25d0:	10 92 60 00 	sts	0x0060, r1
    25d4:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    25d6:	80 91 78 03 	lds	r24, 0x0378
    25da:	90 91 79 03 	lds	r25, 0x0379
    25de:	a9 ad       	sts	0x69, r26
    25e0:	ba ad       	sts	0x6a, r27
    25e2:	a8 17       	cp	r26, r24
    25e4:	b9 07       	cpc	r27, r25
    25e6:	50 f0       	brcs	.+20     	; 0x25fc <tune_8ths+0x298>
    25e8:	80 91 af 02 	lds	r24, 0x02AF
    25ec:	81 30       	cpi	r24, 0x01	; 1
    25ee:	31 f4       	brne	.+12     	; 0x25fc <tune_8ths+0x298>
    25f0:	8f a9       	sts	0x4f, r24
    25f2:	98 ad       	sts	0x68, r25
    25f4:	80 95       	com	r24
    25f6:	90 95       	com	r25
    25f8:	08 23       	and	r16, r24
    25fa:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    25fc:	80 91 78 03 	lds	r24, 0x0378
    2600:	90 91 79 03 	lds	r25, 0x0379
    2604:	e9 ad       	sts	0x69, r30
    2606:	fa ad       	sts	0x6a, r31
    2608:	8e 17       	cp	r24, r30
    260a:	9f 07       	cpc	r25, r31
    260c:	21 f4       	brne	.+8      	; 0x2616 <tune_8ths+0x2b2>
    260e:	80 91 af 02 	lds	r24, 0x02AF
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	71 f0       	breq	.+28     	; 0x2632 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    2616:	f1 e0       	ldi	r31, 0x01	; 1
    2618:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    261c:	2d a9       	sts	0x4d, r18
    261e:	3e a9       	sts	0x4e, r19
    2620:	21 50       	subi	r18, 0x01	; 1
    2622:	30 40       	sbci	r19, 0x00	; 0
    2624:	3e ab       	sts	0x5e, r19
    2626:	2d ab       	sts	0x5d, r18
    2628:	4f ef       	ldi	r20, 0xFF	; 255
    262a:	2f 3f       	cpi	r18, 0xFF	; 255
    262c:	34 07       	cpc	r19, r20
    262e:	09 f0       	breq	.+2      	; 0x2632 <tune_8ths+0x2ce>
    2630:	67 cf       	rjmp	.-306    	; 0x2500 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    2632:	21 96       	adiw	r28, 0x01	; 1
    2634:	ae ad       	sts	0x6e, r26
    2636:	bf ad       	sts	0x6f, r27
    2638:	21 97       	sbiw	r28, 0x01	; 1
    263a:	0d 93       	st	X+, r16
    263c:	1d 93       	st	X+, r17
    263e:	21 96       	adiw	r28, 0x01	; 1
    2640:	bf af       	sts	0x7f, r27
    2642:	ae af       	sts	0x7e, r26
    2644:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2646:	ee e6       	ldi	r30, 0x6E	; 110
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	8d 7f       	andi	r24, 0xFD	; 253
    264e:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    2650:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2652:	2d ad       	sts	0x6d, r18
    2654:	3e ad       	sts	0x6e, r19
    2656:	2f 5f       	subi	r18, 0xFF	; 255
    2658:	3f 4f       	sbci	r19, 0xFF	; 255
    265a:	3e af       	sts	0x7e, r19
    265c:	2d af       	sts	0x7d, r18
    265e:	4b ad       	sts	0x6b, r20
    2660:	5c ad       	sts	0x6c, r21
    2662:	4d 5f       	subi	r20, 0xFD	; 253
    2664:	5f 4f       	sbci	r21, 0xFF	; 255
    2666:	5c af       	sts	0x7c, r21
    2668:	4b af       	sts	0x7b, r20
    266a:	20 31       	cpi	r18, 0x10	; 16
    266c:	31 05       	cpc	r19, r1
    266e:	09 f0       	breq	.+2      	; 0x2672 <tune_8ths+0x30e>
    2670:	26 cf       	rjmp	.-436    	; 0x24be <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    2672:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    2674:	c0 5c       	subi	r28, 0xC0	; 192
    2676:	df 4f       	sbci	r29, 0xFF	; 255
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	1f 91       	pop	r17
    2688:	0f 91       	pop	r16
    268a:	ff 90       	pop	r15
    268c:	ef 90       	pop	r14
    268e:	df 90       	pop	r13
    2690:	cf 90       	pop	r12
    2692:	bf 90       	pop	r11
    2694:	af 90       	pop	r10
    2696:	9f 90       	pop	r9
    2698:	8f 90       	pop	r8
    269a:	7f 90       	pop	r7
    269c:	6f 90       	pop	r6
    269e:	5f 90       	pop	r5
    26a0:	4f 90       	pop	r4
    26a2:	3f 90       	pop	r3
    26a4:	2f 90       	pop	r2
    26a6:	08 95       	ret

000026a8 <tune_filter>:
	
void tune_filter(void) {
    26a8:	2f 92       	push	r2
    26aa:	3f 92       	push	r3
    26ac:	4f 92       	push	r4
    26ae:	5f 92       	push	r5
    26b0:	6f 92       	push	r6
    26b2:	7f 92       	push	r7
    26b4:	8f 92       	push	r8
    26b6:	9f 92       	push	r9
    26b8:	af 92       	push	r10
    26ba:	bf 92       	push	r11
    26bc:	cf 92       	push	r12
    26be:	df 92       	push	r13
    26c0:	ef 92       	push	r14
    26c2:	ff 92       	push	r15
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	e9 97       	sbiw	r28, 0x39	; 57
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    26dc:	de 01       	movw	r26, r28
    26de:	11 96       	adiw	r26, 0x01	; 1
    26e0:	e0 e6       	ldi	r30, 0x60	; 96
    26e2:	f2 e0       	ldi	r31, 0x02	; 2
    26e4:	8d e2       	ldi	r24, 0x2D	; 45
    26e6:	01 90       	ld	r0, Z+
    26e8:	0d 92       	st	X+, r0
    26ea:	81 50       	subi	r24, 0x01	; 1
    26ec:	e1 f7       	brne	.-8      	; 0x26e6 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    26ee:	88 ed       	ldi	r24, 0xD8	; 216
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	70 e0       	ldi	r23, 0x00	; 0
    26f6:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    26fa:	81 ee       	ldi	r24, 0xE1	; 225
    26fc:	91 e0       	ldi	r25, 0x01	; 1
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2706:	82 ee       	ldi	r24, 0xE2	; 226
    2708:	91 e0       	ldi	r25, 0x01	; 1
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2712:	83 eb       	ldi	r24, 0xB3	; 179
    2714:	92 e0       	ldi	r25, 0x02	; 2
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	70 e0       	ldi	r23, 0x00	; 0
    271a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    271e:	8a ed       	ldi	r24, 0xDA	; 218
    2720:	91 e0       	ldi	r25, 0x01	; 1
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    272a:	8f ed       	ldi	r24, 0xDF	; 223
    272c:	91 e0       	ldi	r25, 0x01	; 1
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2736:	80 ee       	ldi	r24, 0xE0	; 224
    2738:	91 e0       	ldi	r25, 0x01	; 1
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2742:	81 ed       	ldi	r24, 0xD1	; 209
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    274e:	86 ed       	ldi	r24, 0xD6	; 214
    2750:	91 e0       	ldi	r25, 0x01	; 1
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    275a:	82 ed       	ldi	r24, 0xD2	; 210
    275c:	91 e0       	ldi	r25, 0x01	; 1
    275e:	60 e0       	ldi	r22, 0x00	; 0
    2760:	70 e0       	ldi	r23, 0x00	; 0
    2762:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2766:	83 ed       	ldi	r24, 0xD3	; 211
    2768:	91 e0       	ldi	r25, 0x01	; 1
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    2772:	84 ed       	ldi	r24, 0xD4	; 212
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	6f ef       	ldi	r22, 0xFF	; 255
    2778:	7f e3       	ldi	r23, 0x3F	; 63
    277a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    277e:	85 ed       	ldi	r24, 0xD5	; 213
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	6f ef       	ldi	r22, 0xFF	; 255
    2784:	7f e3       	ldi	r23, 0x3F	; 63
    2786:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    278a:	89 ed       	ldi	r24, 0xD9	; 217
    278c:	91 e0       	ldi	r25, 0x01	; 1
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2796:	8e ec       	ldi	r24, 0xCE	; 206
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    27a2:	8c ec       	ldi	r24, 0xCC	; 204
    27a4:	91 e0       	ldi	r25, 0x01	; 1
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	70 e0       	ldi	r23, 0x00	; 0
    27aa:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    27ae:	8a ec       	ldi	r24, 0xCA	; 202
    27b0:	91 e0       	ldi	r25, 0x01	; 1
    27b2:	6f ef       	ldi	r22, 0xFF	; 255
    27b4:	7f e3       	ldi	r23, 0x3F	; 63
    27b6:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    27ba:	88 ec       	ldi	r24, 0xC8	; 200
    27bc:	91 e0       	ldi	r25, 0x01	; 1
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	70 e0       	ldi	r23, 0x00	; 0
    27c2:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    27c6:	80 ed       	ldi	r24, 0xD0	; 208
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    27d2:	83 ee       	ldi	r24, 0xE3	; 227
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	60 e0       	ldi	r22, 0x00	; 0
    27d8:	70 e0       	ldi	r23, 0x00	; 0
    27da:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    27de:	84 ee       	ldi	r24, 0xE4	; 228
    27e0:	91 e0       	ldi	r25, 0x01	; 1
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    27ea:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    27ec:	ed ed       	ldi	r30, 0xDD	; 221
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	80 64       	ori	r24, 0x40	; 64
    27f4:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    27f6:	80 81       	ld	r24, Z
    27f8:	8f 7b       	andi	r24, 0xBF	; 191
    27fa:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	80 93 7c 03 	sts	0x037C, r24
	PORTF |= (1<<GATE); //turn gate on
    2802:	89 9a       	sbi	0x11, 1	; 17
    2804:	9e 01       	movw	r18, r28
    2806:	2f 5f       	subi	r18, 0xFF	; 255
    2808:	3f 4f       	sbci	r19, 0xFF	; 255
    280a:	3d ab       	sts	0x5d, r19
    280c:	2c ab       	sts	0x5c, r18
    280e:	81 e1       	ldi	r24, 0x11	; 17
    2810:	93 e0       	ldi	r25, 0x03	; 3
    2812:	99 af       	sts	0x79, r25
    2814:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2816:	1f aa       	sts	0x9f, r17
    2818:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    281a:	0f 2e       	mov	r0, r31
    281c:	f4 ed       	ldi	r31, 0xD4	; 212
    281e:	af 2e       	mov	r10, r31
    2820:	f1 e0       	ldi	r31, 0x01	; 1
    2822:	bf 2e       	mov	r11, r31
    2824:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2826:	0f 2e       	mov	r0, r31
    2828:	f8 ed       	ldi	r31, 0xD8	; 216
    282a:	6f 2e       	mov	r6, r31
    282c:	f1 e0       	ldi	r31, 0x01	; 1
    282e:	7f 2e       	mov	r7, r31
    2830:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2832:	0f 2e       	mov	r0, r31
    2834:	f5 ed       	ldi	r31, 0xD5	; 213
    2836:	4f 2e       	mov	r4, r31
    2838:	f1 e0       	ldi	r31, 0x01	; 1
    283a:	5f 2e       	mov	r5, r31
    283c:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    283e:	0f 2e       	mov	r0, r31
    2840:	fa ec       	ldi	r31, 0xCA	; 202
    2842:	2f 2e       	mov	r2, r31
    2844:	f1 e0       	ldi	r31, 0x01	; 1
    2846:	3f 2e       	mov	r3, r31
    2848:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    284a:	ac a9       	sts	0x4c, r26
    284c:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    284e:	8c 91       	ld	r24, X
    2850:	80 93 7c 03 	sts	0x037C, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2854:	84 b5       	in	r24, 0x24	; 36
    2856:	8f 60       	ori	r24, 0x0F	; 15
    2858:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    285e:	ee e6       	ldi	r30, 0x6E	; 110
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	82 60       	ori	r24, 0x02	; 2
    2866:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    2868:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    286a:	ee a9       	sts	0x4e, r30
    286c:	ff a9       	sts	0x4f, r31
    286e:	e2 30       	cpi	r30, 0x02	; 2
    2870:	f1 05       	cpc	r31, r1
    2872:	24 f4       	brge	.+8      	; 0x287c <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    2874:	83 e0       	ldi	r24, 0x03	; 3
    2876:	80 93 7b 03 	sts	0x037B, r24
    287a:	03 c0       	rjmp	.+6      	; 0x2882 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    287c:	82 e0       	ldi	r24, 0x02	; 2
    287e:	80 93 7b 03 	sts	0x037B, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    2882:	11 96       	adiw	r26, 0x01	; 1
    2884:	2d 91       	ld	r18, X+
    2886:	3c 91       	ld	r19, X
    2888:	12 97       	sbiw	r26, 0x02	; 2
    288a:	3b ab       	sts	0x5b, r19
    288c:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    288e:	8d e0       	ldi	r24, 0x0D	; 13
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	9f a7       	lds	r25, 0x7f
    2894:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2896:	ee 24       	eor	r14, r14
    2898:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    289a:	0f 2e       	mov	r0, r31
    289c:	f1 ed       	ldi	r31, 0xD1	; 209
    289e:	cf 2e       	mov	r12, r31
    28a0:	f1 e0       	ldi	r31, 0x01	; 1
    28a2:	df 2e       	mov	r13, r31
    28a4:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    28a6:	0f 2e       	mov	r0, r31
    28a8:	f6 ed       	ldi	r31, 0xD6	; 214
    28aa:	8f 2e       	mov	r8, r31
    28ac:	f1 e0       	ldi	r31, 0x01	; 1
    28ae:	9f 2e       	mov	r9, r31
    28b0:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	fc 01       	movw	r30, r24
    28b8:	0e a4       	lds	r16, 0xae
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <tune_filter+0x218>
    28bc:	ee 0f       	add	r30, r30
    28be:	ff 1f       	adc	r31, r31
    28c0:	0a 94       	dec	r0
    28c2:	e2 f7       	brpl	.-8      	; 0x28bc <tune_filter+0x214>
    28c4:	f9 ab       	sts	0x59, r31
    28c6:	e8 ab       	sts	0x58, r30
    28c8:	ee 2a       	or	r14, r30
    28ca:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    28cc:	c5 01       	movw	r24, r10
    28ce:	b7 01       	movw	r22, r14
    28d0:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
			count_finished = FALSE;
    28d4:	10 92 7a 03 	sts	0x037A, r1
			period_counter = 0;
    28d8:	10 92 7d 03 	sts	0x037D, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    28dc:	8f e0       	ldi	r24, 0x0F	; 15
    28de:	28 e1       	ldi	r18, 0x18	; 24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	a8 95       	wdr
    28e8:	20 93 60 00 	sts	0x0060, r18
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    28f2:	80 91 7a 03 	lds	r24, 0x037A
    28f6:	88 23       	and	r24, r24
    28f8:	b1 f5       	brne	.+108    	; 0x2966 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    28fa:	02 ed       	ldi	r16, 0xD2	; 210
    28fc:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    28fe:	80 91 7c 03 	lds	r24, 0x037C
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	84 5d       	subi	r24, 0xD4	; 212
    2906:	9e 4f       	sbci	r25, 0xFE	; 254
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	0e 94 ba 02 	call	0x574	; 0x574 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    290e:	c5 01       	movw	r24, r10
    2910:	b7 01       	movw	r22, r14
    2912:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2916:	c3 01       	movw	r24, r6
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	70 e0       	ldi	r23, 0x00	; 0
    291c:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2920:	c2 01       	movw	r24, r4
    2922:	6f ef       	ldi	r22, 0xFF	; 255
    2924:	7f e3       	ldi	r23, 0x3F	; 63
    2926:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    292a:	c1 01       	movw	r24, r2
    292c:	6f ef       	ldi	r22, 0xFF	; 255
    292e:	7f e3       	ldi	r23, 0x3F	; 63
    2930:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    2934:	8e ec       	ldi	r24, 0xCE	; 206
    2936:	91 e0       	ldi	r25, 0x01	; 1
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2940:	c6 01       	movw	r24, r12
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    294a:	c4 01       	movw	r24, r8
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    2954:	c8 01       	movw	r24, r16
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	0e 94 86 01 	call	0x30c	; 0x30c <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    295e:	80 91 7a 03 	lds	r24, 0x037A
    2962:	88 23       	and	r24, r24
    2964:	61 f2       	breq	.-104    	; 0x28fe <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    2966:	88 e1       	ldi	r24, 0x18	; 24
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	80 93 60 00 	sts	0x0060, r24
    2970:	10 92 60 00 	sts	0x0060, r1
    2974:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    2976:	80 91 78 03 	lds	r24, 0x0378
    297a:	90 91 79 03 	lds	r25, 0x0379
    297e:	2a a9       	sts	0x4a, r18
    2980:	3b a9       	sts	0x4b, r19
    2982:	28 17       	cp	r18, r24
    2984:	39 07       	cpc	r19, r25
    2986:	50 f0       	brcs	.+20     	; 0x299c <tune_filter+0x2f4>
    2988:	80 91 af 02 	lds	r24, 0x02AF
    298c:	81 30       	cpi	r24, 0x01	; 1
    298e:	31 f4       	brne	.+12     	; 0x299c <tune_filter+0x2f4>
    2990:	88 a9       	sts	0x48, r24
    2992:	99 a9       	sts	0x49, r25
    2994:	80 95       	com	r24
    2996:	90 95       	com	r25
    2998:	e8 22       	and	r14, r24
    299a:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    299c:	80 91 78 03 	lds	r24, 0x0378
    29a0:	90 91 79 03 	lds	r25, 0x0379
    29a4:	ea a9       	sts	0x4a, r30
    29a6:	fb a9       	sts	0x4b, r31
    29a8:	8e 17       	cp	r24, r30
    29aa:	9f 07       	cpc	r25, r31
    29ac:	21 f4       	brne	.+8      	; 0x29b6 <tune_filter+0x30e>
    29ae:	80 91 af 02 	lds	r24, 0x02AF
    29b2:	81 30       	cpi	r24, 0x01	; 1
    29b4:	71 f0       	breq	.+28     	; 0x29d2 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    29bc:	2e a5       	lds	r18, 0x6e
    29be:	3f a5       	lds	r19, 0x6f
    29c0:	21 50       	subi	r18, 0x01	; 1
    29c2:	30 40       	sbci	r19, 0x00	; 0
    29c4:	3f a7       	lds	r19, 0x7f
    29c6:	2e a7       	lds	r18, 0x7e
    29c8:	8f ef       	ldi	r24, 0xFF	; 255
    29ca:	2f 3f       	cpi	r18, 0xFF	; 255
    29cc:	38 07       	cpc	r19, r24
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <tune_filter+0x32a>
    29d0:	70 cf       	rjmp	.-288    	; 0x28b2 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    29d2:	ee a9       	sts	0x4e, r30
    29d4:	ff a9       	sts	0x4f, r31
    29d6:	31 96       	adiw	r30, 0x01	; 1
    29d8:	ff ab       	sts	0x5f, r31
    29da:	ee ab       	sts	0x5e, r30
    29dc:	c7 01       	movw	r24, r14
    29de:	80 96       	adiw	r24, 0x20	; 32
    29e0:	e8 ad       	sts	0x68, r30
    29e2:	f9 ad       	sts	0x69, r31
    29e4:	81 93       	st	Z+, r24
    29e6:	91 93       	st	Z+, r25
    29e8:	f9 af       	sts	0x79, r31
    29ea:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    29ec:	ee e6       	ldi	r30, 0x6E	; 110
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	8d 7f       	andi	r24, 0xFD	; 253
    29f4:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    29f6:	14 bc       	out	0x24, r1	; 36
    29f8:	2c a9       	sts	0x4c, r18
    29fa:	3d a9       	sts	0x4d, r19
    29fc:	2d 5f       	subi	r18, 0xFD	; 253
    29fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2a00:	3d ab       	sts	0x5d, r19
    2a02:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2a04:	8e a9       	sts	0x4e, r24
    2a06:	9f a9       	sts	0x4f, r25
    2a08:	8f 30       	cpi	r24, 0x0F	; 15
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <tune_filter+0x368>
    2a0e:	1d cf       	rjmp	.-454    	; 0x284a <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2a10:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2a12:	e9 96       	adiw	r28, 0x39	; 57
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	df 91       	pop	r29
    2a20:	cf 91       	pop	r28
    2a22:	1f 91       	pop	r17
    2a24:	0f 91       	pop	r16
    2a26:	ff 90       	pop	r15
    2a28:	ef 90       	pop	r14
    2a2a:	df 90       	pop	r13
    2a2c:	cf 90       	pop	r12
    2a2e:	bf 90       	pop	r11
    2a30:	af 90       	pop	r10
    2a32:	9f 90       	pop	r9
    2a34:	8f 90       	pop	r8
    2a36:	7f 90       	pop	r7
    2a38:	6f 90       	pop	r6
    2a3a:	5f 90       	pop	r5
    2a3c:	4f 90       	pop	r4
    2a3e:	3f 90       	pop	r3
    2a40:	2f 90       	pop	r2
    2a42:	08 95       	ret

00002a44 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2a44:	8f e0       	ldi	r24, 0x0F	; 15
    2a46:	93 e0       	ldi	r25, 0x03	; 3
    2a48:	6c e0       	ldi	r22, 0x0C	; 12
    2a4a:	76 e0       	ldi	r23, 0x06	; 6
    2a4c:	40 e2       	ldi	r20, 0x20	; 32
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2a54:	81 e5       	ldi	r24, 0x51	; 81
    2a56:	93 e0       	ldi	r25, 0x03	; 3
    2a58:	6e e4       	ldi	r22, 0x4E	; 78
    2a5a:	76 e0       	ldi	r23, 0x06	; 6
    2a5c:	42 e2       	ldi	r20, 0x22	; 34
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2a64:	8f e2       	ldi	r24, 0x2F	; 47
    2a66:	93 e0       	ldi	r25, 0x03	; 3
    2a68:	6c e2       	ldi	r22, 0x2C	; 44
    2a6a:	76 e0       	ldi	r23, 0x06	; 6
    2a6c:	42 e2       	ldi	r20, 0x22	; 34
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <__eeupd_block_m6450a>
	
	
}
    2a74:	08 95       	ret

00002a76 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2a76:	82 e7       	ldi	r24, 0x72	; 114
    2a78:	96 e0       	ldi	r25, 0x06	; 6
    2a7a:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__eerd_word_m6450a>
    2a7e:	90 93 76 03 	sts	0x0376, r25
    2a82:	80 93 75 03 	sts	0x0375, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2a86:	80 e7       	ldi	r24, 0x70	; 112
    2a88:	96 e0       	ldi	r25, 0x06	; 6
    2a8a:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__eerd_word_m6450a>
    2a8e:	90 93 74 03 	sts	0x0374, r25
    2a92:	80 93 73 03 	sts	0x0373, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2a96:	81 e5       	ldi	r24, 0x51	; 81
    2a98:	93 e0       	ldi	r25, 0x03	; 3
    2a9a:	6e e4       	ldi	r22, 0x4E	; 78
    2a9c:	76 e0       	ldi	r23, 0x06	; 6
    2a9e:	42 e2       	ldi	r20, 0x22	; 34
    2aa0:	50 e0       	ldi	r21, 0x00	; 0
    2aa2:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2aa6:	8f e2       	ldi	r24, 0x2F	; 47
    2aa8:	93 e0       	ldi	r25, 0x03	; 3
    2aaa:	6c e2       	ldi	r22, 0x2C	; 44
    2aac:	76 e0       	ldi	r23, 0x06	; 6
    2aae:	42 e2       	ldi	r20, 0x22	; 34
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2ab6:	8f e0       	ldi	r24, 0x0F	; 15
    2ab8:	93 e0       	ldi	r25, 0x03	; 3
    2aba:	6c e0       	ldi	r22, 0x0C	; 12
    2abc:	76 e0       	ldi	r23, 0x06	; 6
    2abe:	40 e2       	ldi	r20, 0x20	; 32
    2ac0:	50 e0       	ldi	r21, 0x00	; 0
    2ac2:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2ac6:	08 95       	ret

00002ac8 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2ac8:	98 2f       	mov	r25, r24
    2aca:	96 95       	lsr	r25
    2acc:	96 95       	lsr	r25
    2ace:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2ad0:	29 2f       	mov	r18, r25
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	f9 01       	movw	r30, r18
    2ad6:	31 97       	sbiw	r30, 0x01	; 1
    2ad8:	ee 0f       	add	r30, r30
    2ada:	ff 1f       	adc	r31, r31
    2adc:	e6 0f       	add	r30, r22
    2ade:	f7 1f       	adc	r31, r23
    2ae0:	01 90       	ld	r0, Z+
    2ae2:	f0 81       	ld	r31, Z
    2ae4:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2ae6:	22 0f       	add	r18, r18
    2ae8:	33 1f       	adc	r19, r19
    2aea:	26 0f       	add	r18, r22
    2aec:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2aee:	d9 01       	movw	r26, r18
    2af0:	4d 91       	ld	r20, X+
    2af2:	5c 91       	ld	r21, X
    2af4:	11 97       	sbiw	r26, 0x01	; 1
    2af6:	4e 1b       	sub	r20, r30
    2af8:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2afa:	99 0f       	add	r25, r25
    2afc:	99 0f       	add	r25, r25
    2afe:	99 0f       	add	r25, r25
    2b00:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	48 9f       	mul	r20, r24
    2b06:	90 01       	movw	r18, r0
    2b08:	49 9f       	mul	r20, r25
    2b0a:	30 0d       	add	r19, r0
    2b0c:	58 9f       	mul	r21, r24
    2b0e:	30 0d       	add	r19, r0
    2b10:	11 24       	eor	r1, r1
    2b12:	36 95       	lsr	r19
    2b14:	27 95       	ror	r18
    2b16:	36 95       	lsr	r19
    2b18:	27 95       	ror	r18
    2b1a:	36 95       	lsr	r19
    2b1c:	27 95       	ror	r18
    2b1e:	e2 0f       	add	r30, r18
    2b20:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2b22:	8e 2f       	mov	r24, r30
    2b24:	9f 2f       	mov	r25, r31
    2b26:	08 95       	ret

00002b28 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	a2 97       	sbiw	r28, 0x22	; 34
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2b3c:	de 01       	movw	r26, r28
    2b3e:	11 96       	adiw	r26, 0x01	; 1
    2b40:	ed e8       	ldi	r30, 0x8D	; 141
    2b42:	f2 e0       	ldi	r31, 0x02	; 2
    2b44:	82 e2       	ldi	r24, 0x22	; 34
    2b46:	01 90       	ld	r0, Z+
    2b48:	0d 92       	st	X+, r0
    2b4a:	81 50       	subi	r24, 0x01	; 1
    2b4c:	e1 f7       	brne	.-8      	; 0x2b46 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2b4e:	a1 e5       	ldi	r26, 0x51	; 81
    2b50:	b3 e0       	ldi	r27, 0x03	; 3
    2b52:	fe 01       	movw	r30, r28
    2b54:	31 96       	adiw	r30, 0x01	; 1
    2b56:	82 e2       	ldi	r24, 0x22	; 34
    2b58:	01 90       	ld	r0, Z+
    2b5a:	0d 92       	st	X+, r0
    2b5c:	81 50       	subi	r24, 0x01	; 1
    2b5e:	e1 f7       	brne	.-8      	; 0x2b58 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2b60:	af e2       	ldi	r26, 0x2F	; 47
    2b62:	b3 e0       	ldi	r27, 0x03	; 3
    2b64:	fe 01       	movw	r30, r28
    2b66:	31 96       	adiw	r30, 0x01	; 1
    2b68:	82 e2       	ldi	r24, 0x22	; 34
    2b6a:	01 90       	ld	r0, Z+
    2b6c:	0d 92       	st	X+, r0
    2b6e:	81 50       	subi	r24, 0x01	; 1
    2b70:	e1 f7       	brne	.-8      	; 0x2b6a <set_one_volt_per_octave+0x42>
	
	
}
    2b72:	a2 96       	adiw	r28, 0x22	; 34
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	08 95       	ret

00002b84 <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2b84:	ef e6       	ldi	r30, 0x6F	; 111
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	82 70       	andi	r24, 0x02	; 2
    2b8c:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2b8e:	e1 e8       	ldi	r30, 0x81	; 129
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	87 7f       	andi	r24, 0xF7	; 247
    2b96:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2b98:	8f e0       	ldi	r24, 0x0F	; 15
    2b9a:	6f e0       	ldi	r22, 0x0F	; 15
    2b9c:	7e e5       	ldi	r23, 0x5E	; 94
    2b9e:	0e 94 4e 10 	call	0x209c	; 0x209c <set_vco_init_cv>
    2ba2:	90 93 76 03 	sts	0x0376, r25
    2ba6:	80 93 75 03 	sts	0x0375, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2baa:	80 ef       	ldi	r24, 0xF0	; 240
    2bac:	6f e0       	ldi	r22, 0x0F	; 15
    2bae:	7e e5       	ldi	r23, 0x5E	; 94
    2bb0:	0e 94 4e 10 	call	0x209c	; 0x209c <set_vco_init_cv>
    2bb4:	90 93 74 03 	sts	0x0374, r25
    2bb8:	80 93 73 03 	sts	0x0373, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2bbc:	8f e0       	ldi	r24, 0x0F	; 15
    2bbe:	0e 94 b2 11 	call	0x2364	; 0x2364 <tune_8ths>
			tune_8ths(VCO2);
    2bc2:	80 ef       	ldi	r24, 0xF0	; 240
    2bc4:	0e 94 b2 11 	call	0x2364	; 0x2364 <tune_8ths>
			tune_filter();
    2bc8:	0e 94 54 13 	call	0x26a8	; 0x26a8 <tune_filter>
    2bcc:	8f e4       	ldi	r24, 0x4F	; 79
    2bce:	93 ec       	ldi	r25, 0xC3	; 195
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	f1 f7       	brne	.-4      	; 0x2bd0 <tune+0x4c>
    2bd4:	00 c0       	rjmp	.+0      	; 0x2bd6 <tune+0x52>
    2bd6:	00 00       	nop
			//save_tuning_tables();
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2bd8:	08 95       	ret

00002bda <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2bda:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2bdc:	98 2f       	mov	r25, r24
    2bde:	9c 70       	andi	r25, 0x0C	; 12
    2be0:	20 91 c1 02 	lds	r18, 0x02C1
    2be4:	92 2b       	or	r25, r18
    2be6:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2bea:	98 2f       	mov	r25, r24
    2bec:	92 95       	swap	r25
    2bee:	96 95       	lsr	r25
    2bf0:	97 70       	andi	r25, 0x07	; 7
    2bf2:	90 ff       	sbrs	r25, 0
    2bf4:	16 c0       	rjmp	.+44     	; 0x2c22 <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2bf6:	20 91 81 03 	lds	r18, 0x0381
    2bfa:	30 91 82 03 	lds	r19, 0x0382
    2bfe:	2f 5f       	subi	r18, 0xFF	; 255
    2c00:	3f 4f       	sbci	r19, 0xFF	; 255
    2c02:	30 93 82 03 	sts	0x0382, r19
    2c06:	20 93 81 03 	sts	0x0381, r18
    2c0a:	92 e0       	ldi	r25, 0x02	; 2
    2c0c:	28 35       	cpi	r18, 0x58	; 88
    2c0e:	39 07       	cpc	r19, r25
    2c10:	61 f4       	brne	.+24     	; 0x2c2a <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2c12:	10 92 82 03 	sts	0x0382, r1
    2c16:	10 92 81 03 	sts	0x0381, r1
			current_patch.mode = CAL;
    2c1a:	95 e0       	ldi	r25, 0x05	; 5
    2c1c:	90 93 07 03 	sts	0x0307, r25
    2c20:	04 c0       	rjmp	.+8      	; 0x2c2a <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2c22:	10 92 82 03 	sts	0x0382, r1
    2c26:	10 92 81 03 	sts	0x0381, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2c2a:	90 91 83 03 	lds	r25, 0x0383
    2c2e:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2c30:	98 27       	eor	r25, r24
    2c32:	90 93 83 03 	sts	0x0383, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2c36:	89 23       	and	r24, r25
    2c38:	08 95       	ret

00002c3a <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2c3a:	ed ed       	ldi	r30, 0xDD	; 221
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	90 81       	ld	r25, Z
    2c40:	9f 7b       	andi	r25, 0xBF	; 191
    2c42:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	21 70       	andi	r18, 0x01	; 1
    2c4a:	30 70       	andi	r19, 0x00	; 0
    2c4c:	22 0f       	add	r18, r18
    2c4e:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2c50:	68 2f       	mov	r22, r24
    2c52:	62 95       	swap	r22
    2c54:	66 95       	lsr	r22
    2c56:	67 70       	andi	r22, 0x07	; 7
    2c58:	67 95       	ror	r22
    2c5a:	66 27       	eor	r22, r22
    2c5c:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2c5e:	26 2b       	or	r18, r22
    2c60:	98 2f       	mov	r25, r24
    2c62:	96 95       	lsr	r25
    2c64:	96 95       	lsr	r25
    2c66:	91 70       	andi	r25, 0x01	; 1
    2c68:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2c6a:	68 2f       	mov	r22, r24
    2c6c:	66 1f       	adc	r22, r22
    2c6e:	66 27       	eor	r22, r22
    2c70:	66 1f       	adc	r22, r22
    2c72:	66 0f       	add	r22, r22
    2c74:	66 0f       	add	r22, r22
    2c76:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2c78:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2c7a:	a8 2f       	mov	r26, r24
    2c7c:	a6 95       	lsr	r26
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	a1 70       	andi	r26, 0x01	; 1
    2c82:	b0 70       	andi	r27, 0x00	; 0
    2c84:	bd 01       	movw	r22, r26
    2c86:	66 0f       	add	r22, r22
    2c88:	77 1f       	adc	r23, r23
    2c8a:	66 0f       	add	r22, r22
    2c8c:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2c8e:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2c90:	68 2f       	mov	r22, r24
    2c92:	62 95       	swap	r22
    2c94:	6f 70       	andi	r22, 0x0F	; 15
    2c96:	70 e0       	ldi	r23, 0x00	; 0
    2c98:	61 70       	andi	r22, 0x01	; 1
    2c9a:	70 70       	andi	r23, 0x00	; 0
    2c9c:	ab 01       	movw	r20, r22
    2c9e:	00 24       	eor	r0, r0
    2ca0:	56 95       	lsr	r21
    2ca2:	47 95       	ror	r20
    2ca4:	07 94       	ror	r0
    2ca6:	56 95       	lsr	r21
    2ca8:	47 95       	ror	r20
    2caa:	07 94       	ror	r0
    2cac:	54 2f       	mov	r21, r20
    2cae:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cb0:	62 2f       	mov	r22, r18
    2cb2:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2cb4:	48 2f       	mov	r20, r24
    2cb6:	42 95       	swap	r20
    2cb8:	46 95       	lsr	r20
    2cba:	46 95       	lsr	r20
    2cbc:	43 70       	andi	r20, 0x03	; 3
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	41 70       	andi	r20, 0x01	; 1
    2cc2:	50 70       	andi	r21, 0x00	; 0
    2cc4:	9a 01       	movw	r18, r20
    2cc6:	22 0f       	add	r18, r18
    2cc8:	33 1f       	adc	r19, r19
    2cca:	22 95       	swap	r18
    2ccc:	32 95       	swap	r19
    2cce:	30 7f       	andi	r19, 0xF0	; 240
    2cd0:	32 27       	eor	r19, r18
    2cd2:	20 7f       	andi	r18, 0xF0	; 240
    2cd4:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cd6:	46 2f       	mov	r20, r22
    2cd8:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2cda:	86 95       	lsr	r24
    2cdc:	86 95       	lsr	r24
    2cde:	86 95       	lsr	r24
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	21 70       	andi	r18, 0x01	; 1
    2ce6:	30 70       	andi	r19, 0x00	; 0
    2ce8:	c9 01       	movw	r24, r18
    2cea:	82 95       	swap	r24
    2cec:	92 95       	swap	r25
    2cee:	90 7f       	andi	r25, 0xF0	; 240
    2cf0:	98 27       	eor	r25, r24
    2cf2:	80 7f       	andi	r24, 0xF0	; 240
    2cf4:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cf6:	84 2b       	or	r24, r20
    2cf8:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2cfa:	80 81       	ld	r24, Z
    2cfc:	80 64       	ori	r24, 0x40	; 64
    2cfe:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2d00:	80 81       	ld	r24, Z
    2d02:	8f 7b       	andi	r24, 0xBF	; 191
    2d04:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2d06:	12 b8       	out	0x02, r1	; 2
	
	
    2d08:	08 95       	ret

00002d0a <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2d0a:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2d0c:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2d0e:	74 83       	std	Z+4, r23	; 0x04
    2d10:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2d12:	11 82       	std	Z+1, r1	; 0x01
    2d14:	10 82       	st	Z, r1
}
    2d16:	08 95       	ret

00002d18 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2d18:	1f 93       	push	r17
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	ec 01       	movw	r28, r24
    2d20:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2d22:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <store_and_clear_interrupt>
    2d26:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2d28:	39 81       	ldd	r19, Y+1	; 0x01
    2d2a:	83 2f       	mov	r24, r19
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	01 96       	adiw	r24, 0x01	; 1
    2d30:	6a 81       	ldd	r22, Y+2	; 0x02
    2d32:	70 e0       	ldi	r23, 0x00	; 0
    2d34:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__divmodhi4>
    2d38:	48 81       	ld	r20, Y
    2d3a:	50 e0       	ldi	r21, 0x00	; 0
    2d3c:	84 17       	cp	r24, r20
    2d3e:	95 07       	cpc	r25, r21
    2d40:	29 f4       	brne	.+10     	; 0x2d4c <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2d42:	82 2f       	mov	r24, r18
    2d44:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <restore_interrupt_setting>
      return false;
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	11 c0       	rjmp	.+34     	; 0x2d6e <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2d4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d50:	e3 0f       	add	r30, r19
    2d52:	f1 1d       	adc	r31, r1
    2d54:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	01 96       	adiw	r24, 0x01	; 1
    2d5c:	6a 81       	ldd	r22, Y+2	; 0x02
    2d5e:	70 e0       	ldi	r23, 0x00	; 0
    2d60:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__divmodhi4>
    2d64:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2d66:	82 2f       	mov	r24, r18
    2d68:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <restore_interrupt_setting>
      return true;
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	1f 91       	pop	r17
    2d74:	08 95       	ret

00002d76 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2d7c:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2d80:	29 81       	ldd	r18, Y+1	; 0x01
    2d82:	98 81       	ld	r25, Y
    2d84:	29 17       	cp	r18, r25
    2d86:	18 f0       	brcs	.+6      	; 0x2d8e <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2d88:	c2 2f       	mov	r28, r18
    2d8a:	c9 1b       	sub	r28, r25
    2d8c:	03 c0       	rjmp	.+6      	; 0x2d94 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2d8e:	ca 81       	ldd	r28, Y+2	; 0x02
    2d90:	c2 0f       	add	r28, r18
    2d92:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2d94:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <restore_interrupt_setting>
   return len;
}
    2d98:	8c 2f       	mov	r24, r28
    2d9a:	df 91       	pop	r29
    2d9c:	cf 91       	pop	r28
    2d9e:	08 95       	ret

00002da0 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2da0:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2da2:	20 81       	ld	r18, Z
    2da4:	86 2f       	mov	r24, r22
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	82 0f       	add	r24, r18
    2daa:	91 1d       	adc	r25, r1
    2dac:	62 81       	ldd	r22, Z+2	; 0x02
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__divmodhi4>
    2db4:	03 80       	ldd	r0, Z+3	; 0x03
    2db6:	f4 81       	ldd	r31, Z+4	; 0x04
    2db8:	e0 2d       	mov	r30, r0
    2dba:	e8 0f       	add	r30, r24
    2dbc:	f9 1f       	adc	r31, r25
}
    2dbe:	80 81       	ld	r24, Z
    2dc0:	08 95       	ret

00002dc2 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2dc2:	1f 93       	push	r17
    2dc4:	cf 93       	push	r28
    2dc6:	df 93       	push	r29
    2dc8:	ec 01       	movw	r28, r24
    2dca:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2dcc:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <store_and_clear_interrupt>
    2dd0:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2dd2:	88 81       	ld	r24, Y
    2dd4:	21 2f       	mov	r18, r17
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	28 0f       	add	r18, r24
    2dda:	31 1d       	adc	r19, r1
    2ddc:	6a 81       	ldd	r22, Y+2	; 0x02
    2dde:	c9 01       	movw	r24, r18
    2de0:	70 e0       	ldi	r23, 0x00	; 0
    2de2:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__divmodhi4>
    2de6:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2de8:	84 2f       	mov	r24, r20
    2dea:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <restore_interrupt_setting>
}
    2dee:	df 91       	pop	r29
    2df0:	cf 91       	pop	r28
    2df2:	1f 91       	pop	r17
    2df4:	08 95       	ret

00002df6 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2df6:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2df8:	f8 94       	cli
   return sreg;
}
    2dfa:	08 95       	ret

00002dfc <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2dfc:	8f bf       	out	0x3f, r24	; 63
}
    2dfe:	08 95       	ret

00002e00 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2e00:	88 1f       	adc	r24, r24
    2e02:	88 27       	eor	r24, r24
    2e04:	88 1f       	adc	r24, r24
    2e06:	08 95       	ret

00002e08 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2e08:	91 e0       	ldi	r25, 0x01	; 1
    2e0a:	88 3f       	cpi	r24, 0xF8	; 248
    2e0c:	08 f4       	brcc	.+2      	; 0x2e10 <midi_is_realtime+0x8>
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
}
    2e10:	89 2f       	mov	r24, r25
    2e12:	08 95       	ret

00002e14 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	20 7f       	andi	r18, 0xF0	; 240
    2e1a:	30 70       	andi	r19, 0x00	; 0
    2e1c:	20 3c       	cpi	r18, 0xC0	; 192
    2e1e:	31 05       	cpc	r19, r1
    2e20:	e9 f1       	breq	.+122    	; 0x2e9c <midi_packet_length+0x88>
    2e22:	21 3c       	cpi	r18, 0xC1	; 193
    2e24:	31 05       	cpc	r19, r1
    2e26:	8c f4       	brge	.+34     	; 0x2e4a <midi_packet_length+0x36>
    2e28:	20 39       	cpi	r18, 0x90	; 144
    2e2a:	31 05       	cpc	r19, r1
    2e2c:	e1 f0       	breq	.+56     	; 0x2e66 <midi_packet_length+0x52>
    2e2e:	21 39       	cpi	r18, 0x91	; 145
    2e30:	31 05       	cpc	r19, r1
    2e32:	24 f4       	brge	.+8      	; 0x2e3c <midi_packet_length+0x28>
    2e34:	20 38       	cpi	r18, 0x80	; 128
    2e36:	31 05       	cpc	r19, r1
    2e38:	79 f5       	brne	.+94     	; 0x2e98 <midi_packet_length+0x84>
    2e3a:	15 c0       	rjmp	.+42     	; 0x2e66 <midi_packet_length+0x52>
    2e3c:	20 3a       	cpi	r18, 0xA0	; 160
    2e3e:	31 05       	cpc	r19, r1
    2e40:	91 f0       	breq	.+36     	; 0x2e66 <midi_packet_length+0x52>
    2e42:	20 3b       	cpi	r18, 0xB0	; 176
    2e44:	31 05       	cpc	r19, r1
    2e46:	41 f5       	brne	.+80     	; 0x2e98 <midi_packet_length+0x84>
    2e48:	0e c0       	rjmp	.+28     	; 0x2e66 <midi_packet_length+0x52>
    2e4a:	20 3e       	cpi	r18, 0xE0	; 224
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	59 f0       	breq	.+22     	; 0x2e66 <midi_packet_length+0x52>
    2e50:	21 3e       	cpi	r18, 0xE1	; 225
    2e52:	31 05       	cpc	r19, r1
    2e54:	24 f4       	brge	.+8      	; 0x2e5e <midi_packet_length+0x4a>
    2e56:	20 3d       	cpi	r18, 0xD0	; 208
    2e58:	31 05       	cpc	r19, r1
    2e5a:	f1 f4       	brne	.+60     	; 0x2e98 <midi_packet_length+0x84>
    2e5c:	1f c0       	rjmp	.+62     	; 0x2e9c <midi_packet_length+0x88>
    2e5e:	20 3f       	cpi	r18, 0xF0	; 240
    2e60:	31 05       	cpc	r19, r1
    2e62:	d1 f4       	brne	.+52     	; 0x2e98 <midi_packet_length+0x84>
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2e66:	83 e0       	ldi	r24, 0x03	; 3
    2e68:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2e6a:	86 3f       	cpi	r24, 0xF6	; 246
    2e6c:	79 f0       	breq	.+30     	; 0x2e8c <midi_packet_length+0x78>
    2e6e:	87 3f       	cpi	r24, 0xF7	; 247
    2e70:	38 f4       	brcc	.+14     	; 0x2e80 <midi_packet_length+0x6c>
    2e72:	82 3f       	cpi	r24, 0xF2	; 242
    2e74:	a9 f0       	breq	.+42     	; 0x2ea0 <midi_packet_length+0x8c>
    2e76:	83 3f       	cpi	r24, 0xF3	; 243
    2e78:	59 f0       	breq	.+22     	; 0x2e90 <midi_packet_length+0x7c>
    2e7a:	81 3f       	cpi	r24, 0xF1	; 241
    2e7c:	59 f4       	brne	.+22     	; 0x2e94 <midi_packet_length+0x80>
    2e7e:	08 c0       	rjmp	.+16     	; 0x2e90 <midi_packet_length+0x7c>
    2e80:	88 3f       	cpi	r24, 0xF8	; 248
    2e82:	40 f0       	brcs	.+16     	; 0x2e94 <midi_packet_length+0x80>
    2e84:	8d 3f       	cpi	r24, 0xFD	; 253
    2e86:	10 f0       	brcs	.+4      	; 0x2e8c <midi_packet_length+0x78>
    2e88:	8e 3f       	cpi	r24, 0xFE	; 254
    2e8a:	20 f0       	brcs	.+8      	; 0x2e94 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2e90:	82 e0       	ldi	r24, 0x02	; 2
    2e92:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2e9c:	82 e0       	ldi	r24, 0x02	; 2
    2e9e:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2ea0:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2ea2:	08 95       	ret

00002ea4 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2ea4:	0f 93       	push	r16
    2ea6:	34 2f       	mov	r19, r20
    2ea8:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2eaa:	46 2f       	mov	r20, r22
    2eac:	4f 70       	andi	r20, 0x0F	; 15
    2eae:	40 6b       	ori	r20, 0xB0	; 176
    2eb0:	23 2f       	mov	r18, r19
    2eb2:	2f 77       	andi	r18, 0x7F	; 127
    2eb4:	0f 77       	andi	r16, 0x7F	; 127
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	ed 91       	ld	r30, X+
    2eba:	fc 91       	ld	r31, X
    2ebc:	63 e0       	ldi	r22, 0x03	; 3
    2ebe:	70 e0       	ldi	r23, 0x00	; 0
    2ec0:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2ec2:	0f 91       	pop	r16
    2ec4:	08 95       	ret

00002ec6 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2ec6:	0f 93       	push	r16
    2ec8:	34 2f       	mov	r19, r20
    2eca:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2ecc:	46 2f       	mov	r20, r22
    2ece:	4f 70       	andi	r20, 0x0F	; 15
    2ed0:	40 69       	ori	r20, 0x90	; 144
    2ed2:	23 2f       	mov	r18, r19
    2ed4:	2f 77       	andi	r18, 0x7F	; 127
    2ed6:	0f 77       	andi	r16, 0x7F	; 127
    2ed8:	dc 01       	movw	r26, r24
    2eda:	ed 91       	ld	r30, X+
    2edc:	fc 91       	ld	r31, X
    2ede:	63 e0       	ldi	r22, 0x03	; 3
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2ee4:	0f 91       	pop	r16
    2ee6:	08 95       	ret

00002ee8 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2ee8:	0f 93       	push	r16
    2eea:	34 2f       	mov	r19, r20
    2eec:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2eee:	46 2f       	mov	r20, r22
    2ef0:	4f 70       	andi	r20, 0x0F	; 15
    2ef2:	40 68       	ori	r20, 0x80	; 128
    2ef4:	23 2f       	mov	r18, r19
    2ef6:	2f 77       	andi	r18, 0x7F	; 127
    2ef8:	0f 77       	andi	r16, 0x7F	; 127
    2efa:	dc 01       	movw	r26, r24
    2efc:	ed 91       	ld	r30, X+
    2efe:	fc 91       	ld	r31, X
    2f00:	63 e0       	ldi	r22, 0x03	; 3
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2f06:	0f 91       	pop	r16
    2f08:	08 95       	ret

00002f0a <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2f0a:	0f 93       	push	r16
    2f0c:	34 2f       	mov	r19, r20
    2f0e:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2f10:	46 2f       	mov	r20, r22
    2f12:	4f 70       	andi	r20, 0x0F	; 15
    2f14:	40 6a       	ori	r20, 0xA0	; 160
    2f16:	23 2f       	mov	r18, r19
    2f18:	2f 77       	andi	r18, 0x7F	; 127
    2f1a:	0f 77       	andi	r16, 0x7F	; 127
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	ed 91       	ld	r30, X+
    2f20:	fc 91       	ld	r31, X
    2f22:	63 e0       	ldi	r22, 0x03	; 3
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2f28:	0f 91       	pop	r16
    2f2a:	08 95       	ret

00002f2c <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2f30:	20 e2       	ldi	r18, 0x20	; 32
    2f32:	40 30       	cpi	r20, 0x00	; 0
    2f34:	52 07       	cpc	r21, r18
    2f36:	44 f4       	brge	.+16     	; 0x2f48 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2f38:	a0 ee       	ldi	r26, 0xE0	; 224
    2f3a:	40 30       	cpi	r20, 0x00	; 0
    2f3c:	5a 07       	cpc	r21, r26
    2f3e:	3c f0       	brlt	.+14     	; 0x2f4e <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2f40:	8a 01       	movw	r16, r20
    2f42:	00 50       	subi	r16, 0x00	; 0
    2f44:	10 4e       	sbci	r17, 0xE0	; 224
    2f46:	05 c0       	rjmp	.+10     	; 0x2f52 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2f48:	0f ef       	ldi	r16, 0xFF	; 255
    2f4a:	1f e3       	ldi	r17, 0x3F	; 63
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2f4e:	00 e0       	ldi	r16, 0x00	; 0
    2f50:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2f52:	46 2f       	mov	r20, r22
    2f54:	4f 70       	andi	r20, 0x0F	; 15
    2f56:	40 6e       	ori	r20, 0xE0	; 224
    2f58:	20 2f       	mov	r18, r16
    2f5a:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2f5c:	00 0f       	add	r16, r16
    2f5e:	01 2f       	mov	r16, r17
    2f60:	00 1f       	adc	r16, r16
    2f62:	11 0b       	sbc	r17, r17
    2f64:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2f66:	0f 77       	andi	r16, 0x7F	; 127
    2f68:	dc 01       	movw	r26, r24
    2f6a:	ed 91       	ld	r30, X+
    2f6c:	fc 91       	ld	r31, X
    2f6e:	63 e0       	ldi	r22, 0x03	; 3
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2f74:	1f 91       	pop	r17
    2f76:	0f 91       	pop	r16
    2f78:	08 95       	ret

00002f7a <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2f7a:	0f 93       	push	r16
    2f7c:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2f7e:	46 2f       	mov	r20, r22
    2f80:	4f 70       	andi	r20, 0x0F	; 15
    2f82:	40 6c       	ori	r20, 0xC0	; 192
    2f84:	2f 77       	andi	r18, 0x7F	; 127
    2f86:	dc 01       	movw	r26, r24
    2f88:	ed 91       	ld	r30, X+
    2f8a:	fc 91       	ld	r31, X
    2f8c:	62 e0       	ldi	r22, 0x02	; 2
    2f8e:	70 e0       	ldi	r23, 0x00	; 0
    2f90:	00 e0       	ldi	r16, 0x00	; 0
    2f92:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2f94:	0f 91       	pop	r16
    2f96:	08 95       	ret

00002f98 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2f98:	0f 93       	push	r16
    2f9a:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2f9c:	46 2f       	mov	r20, r22
    2f9e:	4f 70       	andi	r20, 0x0F	; 15
    2fa0:	40 6d       	ori	r20, 0xD0	; 208
    2fa2:	2f 77       	andi	r18, 0x7F	; 127
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	ed 91       	ld	r30, X+
    2fa8:	fc 91       	ld	r31, X
    2faa:	62 e0       	ldi	r22, 0x02	; 2
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	00 e0       	ldi	r16, 0x00	; 0
    2fb0:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2fb2:	0f 91       	pop	r16
    2fb4:	08 95       	ret

00002fb6 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2fb6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2fb8:	dc 01       	movw	r26, r24
    2fba:	ed 91       	ld	r30, X+
    2fbc:	fc 91       	ld	r31, X
    2fbe:	61 e0       	ldi	r22, 0x01	; 1
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
    2fc2:	48 ef       	ldi	r20, 0xF8	; 248
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	00 e0       	ldi	r16, 0x00	; 0
    2fc8:	09 95       	icall
}
    2fca:	0f 91       	pop	r16
    2fcc:	08 95       	ret

00002fce <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    2fce:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	ed 91       	ld	r30, X+
    2fd4:	fc 91       	ld	r31, X
    2fd6:	61 e0       	ldi	r22, 0x01	; 1
    2fd8:	70 e0       	ldi	r23, 0x00	; 0
    2fda:	49 ef       	ldi	r20, 0xF9	; 249
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	00 e0       	ldi	r16, 0x00	; 0
    2fe0:	09 95       	icall
}
    2fe2:	0f 91       	pop	r16
    2fe4:	08 95       	ret

00002fe6 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2fe6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2fe8:	dc 01       	movw	r26, r24
    2fea:	ed 91       	ld	r30, X+
    2fec:	fc 91       	ld	r31, X
    2fee:	61 e0       	ldi	r22, 0x01	; 1
    2ff0:	70 e0       	ldi	r23, 0x00	; 0
    2ff2:	4a ef       	ldi	r20, 0xFA	; 250
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	00 e0       	ldi	r16, 0x00	; 0
    2ff8:	09 95       	icall
}
    2ffa:	0f 91       	pop	r16
    2ffc:	08 95       	ret

00002ffe <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    2ffe:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    3000:	dc 01       	movw	r26, r24
    3002:	ed 91       	ld	r30, X+
    3004:	fc 91       	ld	r31, X
    3006:	61 e0       	ldi	r22, 0x01	; 1
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	4b ef       	ldi	r20, 0xFB	; 251
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	00 e0       	ldi	r16, 0x00	; 0
    3010:	09 95       	icall
}
    3012:	0f 91       	pop	r16
    3014:	08 95       	ret

00003016 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    3016:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    3018:	dc 01       	movw	r26, r24
    301a:	ed 91       	ld	r30, X+
    301c:	fc 91       	ld	r31, X
    301e:	61 e0       	ldi	r22, 0x01	; 1
    3020:	70 e0       	ldi	r23, 0x00	; 0
    3022:	4c ef       	ldi	r20, 0xFC	; 252
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	00 e0       	ldi	r16, 0x00	; 0
    3028:	09 95       	icall
}
    302a:	0f 91       	pop	r16
    302c:	08 95       	ret

0000302e <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    302e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    3030:	dc 01       	movw	r26, r24
    3032:	ed 91       	ld	r30, X+
    3034:	fc 91       	ld	r31, X
    3036:	61 e0       	ldi	r22, 0x01	; 1
    3038:	70 e0       	ldi	r23, 0x00	; 0
    303a:	4e ef       	ldi	r20, 0xFE	; 254
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	00 e0       	ldi	r16, 0x00	; 0
    3040:	09 95       	icall
}
    3042:	0f 91       	pop	r16
    3044:	08 95       	ret

00003046 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    3046:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    3048:	dc 01       	movw	r26, r24
    304a:	ed 91       	ld	r30, X+
    304c:	fc 91       	ld	r31, X
    304e:	61 e0       	ldi	r22, 0x01	; 1
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	4f ef       	ldi	r20, 0xFF	; 255
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	00 e0       	ldi	r16, 0x00	; 0
    3058:	09 95       	icall
}
    305a:	0f 91       	pop	r16
    305c:	08 95       	ret

0000305e <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    305e:	0f 93       	push	r16
   device->send_func(device, 2,
    3060:	26 2f       	mov	r18, r22
    3062:	2f 77       	andi	r18, 0x7F	; 127
    3064:	dc 01       	movw	r26, r24
    3066:	ed 91       	ld	r30, X+
    3068:	fc 91       	ld	r31, X
    306a:	62 e0       	ldi	r22, 0x02	; 2
    306c:	70 e0       	ldi	r23, 0x00	; 0
    306e:	41 ef       	ldi	r20, 0xF1	; 241
    3070:	00 e0       	ldi	r16, 0x00	; 0
    3072:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    3074:	0f 91       	pop	r16
    3076:	08 95       	ret

00003078 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    3078:	0f 93       	push	r16
    307a:	1f 93       	push	r17
   device->send_func(device, 3,
    307c:	26 2f       	mov	r18, r22
    307e:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    3080:	8b 01       	movw	r16, r22
    3082:	00 0f       	add	r16, r16
    3084:	01 2f       	mov	r16, r17
    3086:	00 1f       	adc	r16, r16
    3088:	11 0b       	sbc	r17, r17
    308a:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    308c:	0f 77       	andi	r16, 0x7F	; 127
    308e:	dc 01       	movw	r26, r24
    3090:	ed 91       	ld	r30, X+
    3092:	fc 91       	ld	r31, X
    3094:	63 e0       	ldi	r22, 0x03	; 3
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	42 ef       	ldi	r20, 0xF2	; 242
    309a:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	08 95       	ret

000030a2 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    30a2:	0f 93       	push	r16
   device->send_func(device, 2,
    30a4:	26 2f       	mov	r18, r22
    30a6:	2f 77       	andi	r18, 0x7F	; 127
    30a8:	dc 01       	movw	r26, r24
    30aa:	ed 91       	ld	r30, X+
    30ac:	fc 91       	ld	r31, X
    30ae:	62 e0       	ldi	r22, 0x02	; 2
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	43 ef       	ldi	r20, 0xF3	; 243
    30b4:	00 e0       	ldi	r16, 0x00	; 0
    30b6:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    30b8:	0f 91       	pop	r16
    30ba:	08 95       	ret

000030bc <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    30bc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    30be:	dc 01       	movw	r26, r24
    30c0:	ed 91       	ld	r30, X+
    30c2:	fc 91       	ld	r31, X
    30c4:	61 e0       	ldi	r22, 0x01	; 1
    30c6:	70 e0       	ldi	r23, 0x00	; 0
    30c8:	46 ef       	ldi	r20, 0xF6	; 246
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	00 e0       	ldi	r16, 0x00	; 0
    30ce:	09 95       	icall
}
    30d0:	0f 91       	pop	r16
    30d2:	08 95       	ret

000030d4 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    30d4:	0f 93       	push	r16
    30d6:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    30d8:	dc 01       	movw	r26, r24
    30da:	ed 91       	ld	r30, X+
    30dc:	fc 91       	ld	r31, X
    30de:	61 e0       	ldi	r22, 0x01	; 1
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	00 e0       	ldi	r16, 0x00	; 0
    30e6:	09 95       	icall
}
    30e8:	0f 91       	pop	r16
    30ea:	08 95       	ret

000030ec <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    30ec:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    30ee:	dc 01       	movw	r26, r24
    30f0:	ed 91       	ld	r30, X+
    30f2:	fc 91       	ld	r31, X
    30f4:	09 95       	icall
}
    30f6:	0f 91       	pop	r16
    30f8:	08 95       	ret

000030fa <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    30fa:	6f 92       	push	r6
    30fc:	7f 92       	push	r7
    30fe:	8f 92       	push	r8
    3100:	9f 92       	push	r9
    3102:	af 92       	push	r10
    3104:	bf 92       	push	r11
    3106:	cf 92       	push	r12
    3108:	df 92       	push	r13
    310a:	ef 92       	push	r14
    310c:	ff 92       	push	r15
    310e:	0f 93       	push	r16
    3110:	1f 93       	push	r17
    3112:	cf 93       	push	r28
    3114:	df 93       	push	r29
    3116:	00 d0       	rcall	.+0      	; 0x3118 <midi_send_array+0x1e>
    3118:	0f 92       	push	r0
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
    311e:	4c 01       	movw	r8, r24
    3120:	6b 01       	movw	r12, r22
    3122:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    3124:	61 15       	cp	r22, r1
    3126:	71 05       	cpc	r23, r1
    3128:	41 f1       	breq	.+80     	; 0x317a <midi_send_array+0x80>
    312a:	ee 24       	eor	r14, r14
    312c:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    312e:	0f 2e       	mov	r0, r31
    3130:	f3 e0       	ldi	r31, 0x03	; 3
    3132:	6f 2e       	mov	r6, r31
    3134:	77 24       	eor	r7, r7
    3136:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    3138:	19 82       	std	Y+1, r1	; 0x01
    313a:	1a 82       	std	Y+2, r1	; 0x02
    313c:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    313e:	86 01       	movw	r16, r12
    3140:	0e 19       	sub	r16, r14
    3142:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    3144:	04 30       	cpi	r16, 0x04	; 4
    3146:	11 05       	cpc	r17, r1
    3148:	08 f0       	brcs	.+2      	; 0x314c <midi_send_array+0x52>
    314a:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    314c:	b5 01       	movw	r22, r10
    314e:	6e 0d       	add	r22, r14
    3150:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    3152:	ce 01       	movw	r24, r28
    3154:	01 96       	adiw	r24, 0x01	; 1
    3156:	40 2f       	mov	r20, r16
    3158:	51 2f       	mov	r21, r17
    315a:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    315e:	c4 01       	movw	r24, r8
    3160:	b8 01       	movw	r22, r16
    3162:	49 81       	ldd	r20, Y+1	; 0x01
    3164:	2a 81       	ldd	r18, Y+2	; 0x02
    3166:	0b 81       	ldd	r16, Y+3	; 0x03
    3168:	0e 94 76 18 	call	0x30ec	; 0x30ec <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    316c:	83 e0       	ldi	r24, 0x03	; 3
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	e8 0e       	add	r14, r24
    3172:	f9 1e       	adc	r15, r25
    3174:	ec 14       	cp	r14, r12
    3176:	fd 04       	cpc	r15, r13
    3178:	f8 f2       	brcs	.-66     	; 0x3138 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    317a:	0f 90       	pop	r0
    317c:	0f 90       	pop	r0
    317e:	0f 90       	pop	r0
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	1f 91       	pop	r17
    3186:	0f 91       	pop	r16
    3188:	ff 90       	pop	r15
    318a:	ef 90       	pop	r14
    318c:	df 90       	pop	r13
    318e:	cf 90       	pop	r12
    3190:	bf 90       	pop	r11
    3192:	af 90       	pop	r10
    3194:	9f 90       	pop	r9
    3196:	8f 90       	pop	r8
    3198:	7f 90       	pop	r7
    319a:	6f 90       	pop	r6
    319c:	08 95       	ret

0000319e <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    319e:	fc 01       	movw	r30, r24
    31a0:	73 83       	std	Z+3, r23	; 0x03
    31a2:	62 83       	std	Z+2, r22	; 0x02
}
    31a4:	08 95       	ret

000031a6 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    31a6:	fc 01       	movw	r30, r24
    31a8:	75 83       	std	Z+5, r23	; 0x05
    31aa:	64 83       	std	Z+4, r22	; 0x04
}
    31ac:	08 95       	ret

000031ae <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    31ae:	fc 01       	movw	r30, r24
    31b0:	77 83       	std	Z+7, r23	; 0x07
    31b2:	66 83       	std	Z+6, r22	; 0x06
}
    31b4:	08 95       	ret

000031b6 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    31b6:	fc 01       	movw	r30, r24
    31b8:	71 87       	std	Z+9, r23	; 0x09
    31ba:	60 87       	std	Z+8, r22	; 0x08
}
    31bc:	08 95       	ret

000031be <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    31be:	fc 01       	movw	r30, r24
    31c0:	73 87       	std	Z+11, r23	; 0x0b
    31c2:	62 87       	std	Z+10, r22	; 0x0a
}
    31c4:	08 95       	ret

000031c6 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    31c6:	fc 01       	movw	r30, r24
    31c8:	75 87       	std	Z+13, r23	; 0x0d
    31ca:	64 87       	std	Z+12, r22	; 0x0c
}
    31cc:	08 95       	ret

000031ce <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    31ce:	fc 01       	movw	r30, r24
    31d0:	77 87       	std	Z+15, r23	; 0x0f
    31d2:	66 87       	std	Z+14, r22	; 0x0e
}
    31d4:	08 95       	ret

000031d6 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    31d6:	fc 01       	movw	r30, r24
    31d8:	71 8b       	std	Z+17, r23	; 0x11
    31da:	60 8b       	std	Z+16, r22	; 0x10
}
    31dc:	08 95       	ret

000031de <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    31de:	fc 01       	movw	r30, r24
    31e0:	73 8b       	std	Z+19, r23	; 0x13
    31e2:	62 8b       	std	Z+18, r22	; 0x12
}
    31e4:	08 95       	ret

000031e6 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    31e6:	fc 01       	movw	r30, r24
    31e8:	75 8b       	std	Z+21, r23	; 0x15
    31ea:	64 8b       	std	Z+20, r22	; 0x14
}
    31ec:	08 95       	ret

000031ee <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    31ee:	fc 01       	movw	r30, r24
    31f0:	77 8b       	std	Z+23, r23	; 0x17
    31f2:	66 8b       	std	Z+22, r22	; 0x16
}
    31f4:	08 95       	ret

000031f6 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    31f6:	fc 01       	movw	r30, r24
    31f8:	71 8f       	std	Z+25, r23	; 0x19
    31fa:	60 8f       	std	Z+24, r22	; 0x18
}
    31fc:	08 95       	ret

000031fe <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    31fe:	fc 01       	movw	r30, r24
    3200:	73 8f       	std	Z+27, r23	; 0x1b
    3202:	62 8f       	std	Z+26, r22	; 0x1a
}
    3204:	08 95       	ret

00003206 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    3206:	fc 01       	movw	r30, r24
    3208:	75 8f       	std	Z+29, r23	; 0x1d
    320a:	64 8f       	std	Z+28, r22	; 0x1c
}
    320c:	08 95       	ret

0000320e <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    320e:	fc 01       	movw	r30, r24
    3210:	77 8f       	std	Z+31, r23	; 0x1f
    3212:	66 8f       	std	Z+30, r22	; 0x1e
}
    3214:	08 95       	ret

00003216 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    3216:	cf 93       	push	r28
    3218:	df 93       	push	r29
    321a:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    321c:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    321e:	1f a2       	lds	r17, 0x9f
    3220:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    3222:	bc 01       	movw	r22, r24
    3224:	68 5d       	subi	r22, 0xD8	; 216
    3226:	7f 4f       	sbci	r23, 0xFF	; 255
    3228:	88 51       	subi	r24, 0x18	; 24
    322a:	9f 4f       	sbci	r25, 0xFF	; 255
    322c:	40 ec       	ldi	r20, 0xC0	; 192
    322e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    3232:	1b 82       	std	Y+3, r1	; 0x03
    3234:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    3236:	1d 82       	std	Y+5, r1	; 0x05
    3238:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    323a:	1f 82       	std	Y+7, r1	; 0x07
    323c:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    323e:	19 86       	std	Y+9, r1	; 0x09
    3240:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    3242:	1b 86       	std	Y+11, r1	; 0x0b
    3244:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    3246:	1d 86       	std	Y+13, r1	; 0x0d
    3248:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    324a:	1f 86       	std	Y+15, r1	; 0x0f
    324c:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    324e:	19 8a       	std	Y+17, r1	; 0x11
    3250:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    3252:	1b 8a       	std	Y+19, r1	; 0x13
    3254:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    3256:	1d 8a       	std	Y+21, r1	; 0x15
    3258:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    325a:	1f 8a       	std	Y+23, r1	; 0x17
    325c:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    325e:	19 8e       	std	Y+25, r1	; 0x19
    3260:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    3262:	1b 8e       	std	Y+27, r1	; 0x1b
    3264:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    3266:	1d 8e       	std	Y+29, r1	; 0x1d
    3268:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    326a:	1f 8e       	std	Y+31, r1	; 0x1f
    326c:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    326e:	19 a2       	lds	r17, 0x99
    3270:	18 a2       	lds	r17, 0x98
}
    3272:	df 91       	pop	r29
    3274:	cf 91       	pop	r28
    3276:	08 95       	ret

00003278 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    3278:	ef 92       	push	r14
    327a:	ff 92       	push	r15
    327c:	0f 93       	push	r16
    327e:	1f 93       	push	r17
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
    3284:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3286:	66 23       	and	r22, r22
    3288:	99 f0       	breq	.+38     	; 0x32b0 <midi_device_input+0x38>
    328a:	04 2f       	mov	r16, r20
    328c:	15 2f       	mov	r17, r21
    328e:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    3290:	0f 2e       	mov	r0, r31
    3292:	f8 ee       	ldi	r31, 0xE8	; 232
    3294:	ef 2e       	mov	r14, r31
    3296:	ff 24       	eor	r15, r15
    3298:	f0 2d       	mov	r31, r0
    329a:	e8 0e       	add	r14, r24
    329c:	f9 1e       	adc	r15, r25
    329e:	f8 01       	movw	r30, r16
    32a0:	61 91       	ld	r22, Z+
    32a2:	8f 01       	movw	r16, r30
    32a4:	c7 01       	movw	r24, r14
    32a6:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    32aa:	cf 5f       	subi	r28, 0xFF	; 255
    32ac:	cd 17       	cp	r28, r29
    32ae:	b9 f7       	brne	.-18     	; 0x329e <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	1f 91       	pop	r17
    32b6:	0f 91       	pop	r16
    32b8:	ff 90       	pop	r15
    32ba:	ef 90       	pop	r14
    32bc:	08 95       	ret

000032be <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    32be:	fc 01       	movw	r30, r24
    32c0:	71 83       	std	Z+1, r23	; 0x01
    32c2:	60 83       	st	Z, r22
}
    32c4:	08 95       	ret

000032c6 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    32c6:	fc 01       	movw	r30, r24
    32c8:	71 a3       	lds	r23, 0x51
    32ca:	60 a3       	lds	r22, 0x50
}
    32cc:	08 95       	ret

000032ce <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    32ce:	af 92       	push	r10
    32d0:	bf 92       	push	r11
    32d2:	cf 92       	push	r12
    32d4:	df 92       	push	r13
    32d6:	ef 92       	push	r14
    32d8:	ff 92       	push	r15
    32da:	0f 93       	push	r16
    32dc:	1f 93       	push	r17
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	00 d0       	rcall	.+0      	; 0x32e4 <midi_input_callbacks+0x16>
    32e4:	0f 92       	push	r0
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	6c 01       	movw	r12, r24
    32ec:	5b 01       	movw	r10, r22
    32ee:	f4 2e       	mov	r15, r20
    32f0:	e2 2e       	mov	r14, r18
    32f2:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    32f4:	dc 01       	movw	r26, r24
    32f6:	95 96       	adiw	r26, 0x25	; 37
    32f8:	8c 91       	ld	r24, X
    32fa:	95 97       	sbiw	r26, 0x25	; 37
    32fc:	84 30       	cpi	r24, 0x04	; 4
    32fe:	e9 f4       	brne	.+58     	; 0x333a <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    3300:	5a 96       	adiw	r26, 0x1a	; 26
    3302:	ed 91       	ld	r30, X+
    3304:	fc 91       	ld	r31, X
    3306:	5b 97       	sbiw	r26, 0x1b	; 27
    3308:	30 97       	sbiw	r30, 0x00	; 0
    330a:	09 f4       	brne	.+2      	; 0x330e <midi_input_callbacks+0x40>
    330c:	ee c0       	rjmp	.+476    	; 0x34ea <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    330e:	cb 01       	movw	r24, r22
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	63 e0       	ldi	r22, 0x03	; 3
    3314:	70 e0       	ldi	r23, 0x00	; 0
    3316:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__udivmodhi4>
    331a:	cb 01       	movw	r24, r22
    331c:	88 0f       	add	r24, r24
    331e:	99 1f       	adc	r25, r25
    3320:	68 0f       	add	r22, r24
    3322:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    3324:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    3326:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    3328:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    332a:	4a 2d       	mov	r20, r10
    332c:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    332e:	c6 01       	movw	r24, r12
    3330:	9e 01       	movw	r18, r28
    3332:	2f 5f       	subi	r18, 0xFF	; 255
    3334:	3f 4f       	sbci	r19, 0xFF	; 255
    3336:	09 95       	icall
    3338:	c8 c0       	rjmp	.+400    	; 0x34ca <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    333a:	62 30       	cpi	r22, 0x02	; 2
    333c:	71 05       	cpc	r23, r1
    333e:	09 f4       	brne	.+2      	; 0x3342 <midi_input_callbacks+0x74>
    3340:	5f c0       	rjmp	.+190    	; 0x3400 <midi_input_callbacks+0x132>
    3342:	63 30       	cpi	r22, 0x03	; 3
    3344:	71 05       	cpc	r23, r1
    3346:	29 f0       	breq	.+10     	; 0x3352 <midi_input_callbacks+0x84>
    3348:	61 30       	cpi	r22, 0x01	; 1
    334a:	71 05       	cpc	r23, r1
    334c:	09 f0       	breq	.+2      	; 0x3350 <midi_input_callbacks+0x82>
    334e:	b3 c0       	rjmp	.+358    	; 0x34b6 <midi_input_callbacks+0x1e8>
    3350:	99 c0       	rjmp	.+306    	; 0x3484 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3352:	84 2f       	mov	r24, r20
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	80 7f       	andi	r24, 0xF0	; 240
    3358:	90 70       	andi	r25, 0x00	; 0
    335a:	80 3a       	cpi	r24, 0xA0	; 160
    335c:	91 05       	cpc	r25, r1
    335e:	29 f1       	breq	.+74     	; 0x33aa <midi_input_callbacks+0xdc>
    3360:	81 3a       	cpi	r24, 0xA1	; 161
    3362:	91 05       	cpc	r25, r1
    3364:	3c f4       	brge	.+14     	; 0x3374 <midi_input_callbacks+0xa6>
    3366:	80 38       	cpi	r24, 0x80	; 128
    3368:	91 05       	cpc	r25, r1
    336a:	c9 f0       	breq	.+50     	; 0x339e <midi_input_callbacks+0xd0>
    336c:	80 39       	cpi	r24, 0x90	; 144
    336e:	91 05       	cpc	r25, r1
    3370:	91 f5       	brne	.+100    	; 0x33d6 <midi_input_callbacks+0x108>
    3372:	0f c0       	rjmp	.+30     	; 0x3392 <midi_input_callbacks+0xc4>
    3374:	80 3e       	cpi	r24, 0xE0	; 224
    3376:	91 05       	cpc	r25, r1
    3378:	f1 f0       	breq	.+60     	; 0x33b6 <midi_input_callbacks+0xe8>
    337a:	80 3f       	cpi	r24, 0xF0	; 240
    337c:	91 05       	cpc	r25, r1
    337e:	09 f1       	breq	.+66     	; 0x33c2 <midi_input_callbacks+0xf4>
    3380:	80 3b       	cpi	r24, 0xB0	; 176
    3382:	91 05       	cpc	r25, r1
    3384:	41 f5       	brne	.+80     	; 0x33d6 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    3386:	d6 01       	movw	r26, r12
    3388:	12 96       	adiw	r26, 0x02	; 2
    338a:	ed 91       	ld	r30, X+
    338c:	fc 91       	ld	r31, X
    338e:	13 97       	sbiw	r26, 0x03	; 3
              break;
    3390:	24 c0       	rjmp	.+72     	; 0x33da <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    3392:	d6 01       	movw	r26, r12
    3394:	14 96       	adiw	r26, 0x04	; 4
    3396:	ed 91       	ld	r30, X+
    3398:	fc 91       	ld	r31, X
    339a:	15 97       	sbiw	r26, 0x05	; 5
              break;
    339c:	1e c0       	rjmp	.+60     	; 0x33da <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    339e:	d6 01       	movw	r26, r12
    33a0:	16 96       	adiw	r26, 0x06	; 6
    33a2:	ed 91       	ld	r30, X+
    33a4:	fc 91       	ld	r31, X
    33a6:	17 97       	sbiw	r26, 0x07	; 7
              break;
    33a8:	18 c0       	rjmp	.+48     	; 0x33da <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    33aa:	d6 01       	movw	r26, r12
    33ac:	18 96       	adiw	r26, 0x08	; 8
    33ae:	ed 91       	ld	r30, X+
    33b0:	fc 91       	ld	r31, X
    33b2:	19 97       	sbiw	r26, 0x09	; 9
              break;
    33b4:	12 c0       	rjmp	.+36     	; 0x33da <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    33b6:	d6 01       	movw	r26, r12
    33b8:	1a 96       	adiw	r26, 0x0a	; 10
    33ba:	ed 91       	ld	r30, X+
    33bc:	fc 91       	ld	r31, X
    33be:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    33c0:	0c c0       	rjmp	.+24     	; 0x33da <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    33c2:	b2 ef       	ldi	r27, 0xF2	; 242
    33c4:	4b 17       	cp	r20, r27
    33c6:	09 f0       	breq	.+2      	; 0x33ca <midi_input_callbacks+0xfc>
    33c8:	90 c0       	rjmp	.+288    	; 0x34ea <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    33ca:	d6 01       	movw	r26, r12
    33cc:	1c 96       	adiw	r26, 0x0c	; 12
    33ce:	ed 91       	ld	r30, X+
    33d0:	fc 91       	ld	r31, X
    33d2:	1d 97       	sbiw	r26, 0x0d	; 13
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    33d6:	e0 e0       	ldi	r30, 0x00	; 0
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    33da:	30 97       	sbiw	r30, 0x00	; 0
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <midi_input_callbacks+0x112>
    33de:	85 c0       	rjmp	.+266    	; 0x34ea <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    33e0:	b2 ef       	ldi	r27, 0xF2	; 242
    33e2:	fb 16       	cp	r15, r27
    33e4:	31 f4       	brne	.+12     	; 0x33f2 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    33e6:	c6 01       	movw	r24, r12
    33e8:	62 ef       	ldi	r22, 0xF2	; 242
    33ea:	4e 2d       	mov	r20, r14
    33ec:	21 2f       	mov	r18, r17
    33ee:	09 95       	icall
    33f0:	6c c0       	rjmp	.+216    	; 0x34ca <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    33f2:	6f 2d       	mov	r22, r15
    33f4:	6f 70       	andi	r22, 0x0F	; 15
    33f6:	c6 01       	movw	r24, r12
    33f8:	4e 2d       	mov	r20, r14
    33fa:	21 2f       	mov	r18, r17
    33fc:	09 95       	icall
    33fe:	65 c0       	rjmp	.+202    	; 0x34ca <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3400:	84 2f       	mov	r24, r20
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	80 7f       	andi	r24, 0xF0	; 240
    3406:	90 70       	andi	r25, 0x00	; 0
    3408:	80 3d       	cpi	r24, 0xD0	; 208
    340a:	91 05       	cpc	r25, r1
    340c:	61 f0       	breq	.+24     	; 0x3426 <midi_input_callbacks+0x158>
    340e:	80 3f       	cpi	r24, 0xF0	; 240
    3410:	91 05       	cpc	r25, r1
    3412:	79 f0       	breq	.+30     	; 0x3432 <midi_input_callbacks+0x164>
    3414:	80 3c       	cpi	r24, 0xC0	; 192
    3416:	91 05       	cpc	r25, r1
    3418:	f9 f4       	brne	.+62     	; 0x3458 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    341a:	d6 01       	movw	r26, r12
    341c:	1e 96       	adiw	r26, 0x0e	; 14
    341e:	ed 91       	ld	r30, X+
    3420:	fc 91       	ld	r31, X
    3422:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    3424:	1b c0       	rjmp	.+54     	; 0x345c <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    3426:	d6 01       	movw	r26, r12
    3428:	50 96       	adiw	r26, 0x10	; 16
    342a:	ed 91       	ld	r30, X+
    342c:	fc 91       	ld	r31, X
    342e:	51 97       	sbiw	r26, 0x11	; 17
              break;
    3430:	15 c0       	rjmp	.+42     	; 0x345c <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    3432:	b3 ef       	ldi	r27, 0xF3	; 243
    3434:	4b 17       	cp	r20, r27
    3436:	31 f4       	brne	.+12     	; 0x3444 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    3438:	d6 01       	movw	r26, r12
    343a:	52 96       	adiw	r26, 0x12	; 18
    343c:	ed 91       	ld	r30, X+
    343e:	fc 91       	ld	r31, X
    3440:	53 97       	sbiw	r26, 0x13	; 19
    3442:	0c c0       	rjmp	.+24     	; 0x345c <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    3444:	b1 ef       	ldi	r27, 0xF1	; 241
    3446:	4b 17       	cp	r20, r27
    3448:	09 f0       	breq	.+2      	; 0x344c <midi_input_callbacks+0x17e>
    344a:	4f c0       	rjmp	.+158    	; 0x34ea <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    344c:	d6 01       	movw	r26, r12
    344e:	54 96       	adiw	r26, 0x14	; 20
    3450:	ed 91       	ld	r30, X+
    3452:	fc 91       	ld	r31, X
    3454:	55 97       	sbiw	r26, 0x15	; 21
    3456:	02 c0       	rjmp	.+4      	; 0x345c <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    3458:	e0 e0       	ldi	r30, 0x00	; 0
    345a:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    345c:	30 97       	sbiw	r30, 0x00	; 0
    345e:	09 f4       	brne	.+2      	; 0x3462 <midi_input_callbacks+0x194>
    3460:	44 c0       	rjmp	.+136    	; 0x34ea <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    3462:	b3 ef       	ldi	r27, 0xF3	; 243
    3464:	fb 16       	cp	r15, r27
    3466:	19 f0       	breq	.+6      	; 0x346e <midi_input_callbacks+0x1a0>
    3468:	81 ef       	ldi	r24, 0xF1	; 241
    346a:	f8 16       	cp	r15, r24
    346c:	29 f4       	brne	.+10     	; 0x3478 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    346e:	c6 01       	movw	r24, r12
    3470:	6f 2d       	mov	r22, r15
    3472:	4e 2d       	mov	r20, r14
    3474:	09 95       	icall
    3476:	29 c0       	rjmp	.+82     	; 0x34ca <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    3478:	6f 2d       	mov	r22, r15
    347a:	6f 70       	andi	r22, 0x0F	; 15
    347c:	c6 01       	movw	r24, r12
    347e:	4e 2d       	mov	r20, r14
    3480:	09 95       	icall
    3482:	23 c0       	rjmp	.+70     	; 0x34ca <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    3484:	84 2f       	mov	r24, r20
    3486:	0e 94 04 17 	call	0x2e08	; 0x2e08 <midi_is_realtime>
    348a:	88 23       	and	r24, r24
    348c:	31 f0       	breq	.+12     	; 0x349a <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    348e:	d6 01       	movw	r26, r12
    3490:	56 96       	adiw	r26, 0x16	; 22
    3492:	ed 91       	ld	r30, X+
    3494:	fc 91       	ld	r31, X
    3496:	57 97       	sbiw	r26, 0x17	; 23
    3498:	08 c0       	rjmp	.+16     	; 0x34aa <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    349a:	b6 ef       	ldi	r27, 0xF6	; 246
    349c:	fb 16       	cp	r15, r27
    349e:	29 f5       	brne	.+74     	; 0x34ea <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    34a0:	d6 01       	movw	r26, r12
    34a2:	58 96       	adiw	r26, 0x18	; 24
    34a4:	ed 91       	ld	r30, X+
    34a6:	fc 91       	ld	r31, X
    34a8:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    34aa:	30 97       	sbiw	r30, 0x00	; 0
    34ac:	f1 f0       	breq	.+60     	; 0x34ea <midi_input_callbacks+0x21c>
            func(device, byte0);
    34ae:	c6 01       	movw	r24, r12
    34b0:	6f 2d       	mov	r22, r15
    34b2:	09 95       	icall
    34b4:	0a c0       	rjmp	.+20     	; 0x34ca <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    34b6:	64 30       	cpi	r22, 0x04	; 4
    34b8:	71 05       	cpc	r23, r1
    34ba:	a8 f4       	brcc	.+42     	; 0x34e6 <midi_input_callbacks+0x218>
    34bc:	16 c0       	rjmp	.+44     	; 0x34ea <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    34be:	c6 01       	movw	r24, r12
    34c0:	b5 01       	movw	r22, r10
    34c2:	4f 2d       	mov	r20, r15
    34c4:	2e 2d       	mov	r18, r14
    34c6:	01 2f       	mov	r16, r17
    34c8:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    34ca:	d6 01       	movw	r26, r12
    34cc:	5e 96       	adiw	r26, 0x1e	; 30
    34ce:	ed 91       	ld	r30, X+
    34d0:	fc 91       	ld	r31, X
    34d2:	5f 97       	sbiw	r26, 0x1f	; 31
    34d4:	30 97       	sbiw	r30, 0x00	; 0
    34d6:	89 f0       	breq	.+34     	; 0x34fa <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    34d8:	c6 01       	movw	r24, r12
    34da:	b5 01       	movw	r22, r10
    34dc:	4f 2d       	mov	r20, r15
    34de:	2e 2d       	mov	r18, r14
    34e0:	01 2f       	mov	r16, r17
    34e2:	09 95       	icall
    34e4:	0a c0       	rjmp	.+20     	; 0x34fa <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    34e6:	aa 24       	eor	r10, r10
    34e8:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    34ea:	d6 01       	movw	r26, r12
    34ec:	5c 96       	adiw	r26, 0x1c	; 28
    34ee:	ed 91       	ld	r30, X+
    34f0:	fc 91       	ld	r31, X
    34f2:	5d 97       	sbiw	r26, 0x1d	; 29
    34f4:	30 97       	sbiw	r30, 0x00	; 0
    34f6:	19 f7       	brne	.-58     	; 0x34be <midi_input_callbacks+0x1f0>
    34f8:	e8 cf       	rjmp	.-48     	; 0x34ca <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	df 91       	pop	r29
    3502:	cf 91       	pop	r28
    3504:	1f 91       	pop	r17
    3506:	0f 91       	pop	r16
    3508:	ff 90       	pop	r15
    350a:	ef 90       	pop	r14
    350c:	df 90       	pop	r13
    350e:	cf 90       	pop	r12
    3510:	bf 90       	pop	r11
    3512:	af 90       	pop	r10
    3514:	08 95       	ret

00003516 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    3516:	ef 92       	push	r14
    3518:	ff 92       	push	r15
    351a:	0f 93       	push	r16
    351c:	cf 93       	push	r28
    351e:	df 93       	push	r29
    3520:	7c 01       	movw	r14, r24
    3522:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    3524:	86 2f       	mov	r24, r22
    3526:	0e 94 04 17 	call	0x2e08	; 0x2e08 <midi_is_realtime>
    352a:	88 23       	and	r24, r24
    352c:	91 f0       	breq	.+36     	; 0x3552 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    352e:	d7 01       	movw	r26, r14
    3530:	95 96       	adiw	r26, 0x25	; 37
    3532:	dc 91       	ld	r29, X
    3534:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	95 96       	adiw	r26, 0x25	; 37
    353a:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    353c:	c7 01       	movw	r24, r14
    353e:	61 e0       	ldi	r22, 0x01	; 1
    3540:	70 e0       	ldi	r23, 0x00	; 0
    3542:	4c 2f       	mov	r20, r28
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	00 e0       	ldi	r16, 0x00	; 0
    3548:	0e 94 67 19 	call	0x32ce	; 0x32ce <midi_input_callbacks>
    device->input_state = state;
    354c:	f7 01       	movw	r30, r14
    354e:	d5 a3       	lds	r29, 0x55
    3550:	b7 c0       	rjmp	.+366    	; 0x36c0 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    3552:	8c 2f       	mov	r24, r28
    3554:	0e 94 00 17 	call	0x2e00	; 0x2e00 <midi_is_statusbyte>
    3558:	88 23       	and	r24, r24
    355a:	09 f4       	brne	.+2      	; 0x355e <midi_process_byte+0x48>
    355c:	73 c0       	rjmp	.+230    	; 0x3644 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    355e:	d7 01       	movw	r26, r14
    3560:	95 96       	adiw	r26, 0x25	; 37
    3562:	8c 91       	ld	r24, X
    3564:	95 97       	sbiw	r26, 0x25	; 37
    3566:	84 30       	cpi	r24, 0x04	; 4
    3568:	49 f0       	breq	.+18     	; 0x357c <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    356a:	92 96       	adiw	r26, 0x22	; 34
    356c:	cc 93       	st	X, r28
    356e:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	97 96       	adiw	r26, 0x27	; 39
    3576:	9c 93       	st	X, r25
    3578:	8e 93       	st	-X, r24
    357a:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    357c:	8c 2f       	mov	r24, r28
    357e:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <midi_packet_length>
    3582:	81 30       	cpi	r24, 0x01	; 1
    3584:	41 f0       	breq	.+16     	; 0x3596 <midi_process_byte+0x80>
    3586:	81 30       	cpi	r24, 0x01	; 1
    3588:	00 f1       	brcs	.+64     	; 0x35ca <midi_process_byte+0xb4>
    358a:	82 30       	cpi	r24, 0x02	; 2
    358c:	a1 f0       	breq	.+40     	; 0x35b6 <midi_process_byte+0xa0>
    358e:	83 30       	cpi	r24, 0x03	; 3
    3590:	09 f0       	breq	.+2      	; 0x3594 <midi_process_byte+0x7e>
    3592:	4f c0       	rjmp	.+158    	; 0x3632 <midi_process_byte+0x11c>
    3594:	14 c0       	rjmp	.+40     	; 0x35be <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	f7 01       	movw	r30, r14
    359a:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    359c:	c7 01       	movw	r24, r14
    359e:	61 e0       	ldi	r22, 0x01	; 1
    35a0:	70 e0       	ldi	r23, 0x00	; 0
    35a2:	4c 2f       	mov	r20, r28
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	00 e0       	ldi	r16, 0x00	; 0
    35a8:	0e 94 67 19 	call	0x32ce	; 0x32ce <midi_input_callbacks>
        device->input_state = IDLE;
    35ac:	d7 01       	movw	r26, r14
    35ae:	95 96       	adiw	r26, 0x25	; 37
    35b0:	1c 92       	st	X, r1
    35b2:	95 97       	sbiw	r26, 0x25	; 37
        break;
    35b4:	85 c0       	rjmp	.+266    	; 0x36c0 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    35b6:	82 e0       	ldi	r24, 0x02	; 2
    35b8:	f7 01       	movw	r30, r14
    35ba:	85 a3       	lds	r24, 0x55
        break;
    35bc:	81 c0       	rjmp	.+258    	; 0x36c0 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    35be:	83 e0       	ldi	r24, 0x03	; 3
    35c0:	d7 01       	movw	r26, r14
    35c2:	95 96       	adiw	r26, 0x25	; 37
    35c4:	8c 93       	st	X, r24
    35c6:	95 97       	sbiw	r26, 0x25	; 37
        break;
    35c8:	7b c0       	rjmp	.+246    	; 0x36c0 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    35ca:	c0 3f       	cpi	r28, 0xF0	; 240
    35cc:	19 f0       	breq	.+6      	; 0x35d4 <midi_process_byte+0xbe>
    35ce:	c7 3f       	cpi	r28, 0xF7	; 247
    35d0:	59 f5       	brne	.+86     	; 0x3628 <midi_process_byte+0x112>
    35d2:	0a c0       	rjmp	.+20     	; 0x35e8 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    35d4:	84 e0       	ldi	r24, 0x04	; 4
    35d6:	f7 01       	movw	r30, r14
    35d8:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    35da:	80 ef       	ldi	r24, 0xF0	; 240
    35dc:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	97 a3       	lds	r25, 0x57
    35e4:	86 a3       	lds	r24, 0x56
            break;
    35e6:	6c c0       	rjmp	.+216    	; 0x36c0 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    35e8:	d7 01       	movw	r26, r14
    35ea:	96 96       	adiw	r26, 0x26	; 38
    35ec:	2d 91       	ld	r18, X+
    35ee:	3c 91       	ld	r19, X
    35f0:	97 97       	sbiw	r26, 0x27	; 39
    35f2:	c9 01       	movw	r24, r18
    35f4:	63 e0       	ldi	r22, 0x03	; 3
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__udivmodhi4>
    35fc:	f7 01       	movw	r30, r14
    35fe:	e8 0f       	add	r30, r24
    3600:	f9 1f       	adc	r31, r25
    3602:	87 ef       	ldi	r24, 0xF7	; 247
    3604:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    3606:	b9 01       	movw	r22, r18
    3608:	6f 5f       	subi	r22, 0xFF	; 255
    360a:	7f 4f       	sbci	r23, 0xFF	; 255
    360c:	f7 01       	movw	r30, r14
    360e:	77 a3       	lds	r23, 0x57
    3610:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3612:	c7 01       	movw	r24, r14
    3614:	42 a1       	lds	r20, 0x42
    3616:	23 a1       	lds	r18, 0x43
    3618:	04 a1       	lds	r16, 0x44
    361a:	0e 94 67 19 	call	0x32ce	; 0x32ce <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    361e:	d7 01       	movw	r26, r14
    3620:	95 96       	adiw	r26, 0x25	; 37
    3622:	1c 92       	st	X, r1
    3624:	95 97       	sbiw	r26, 0x25	; 37
            break;
    3626:	4c c0       	rjmp	.+152    	; 0x36c0 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    3628:	f7 01       	movw	r30, r14
    362a:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    362c:	17 a2       	lds	r17, 0x97
    362e:	16 a2       	lds	r17, 0x96
    3630:	47 c0       	rjmp	.+142    	; 0x36c0 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    3632:	d7 01       	movw	r26, r14
    3634:	95 96       	adiw	r26, 0x25	; 37
    3636:	1c 92       	st	X, r1
    3638:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    363a:	97 96       	adiw	r26, 0x27	; 39
    363c:	1c 92       	st	X, r1
    363e:	1e 92       	st	-X, r1
    3640:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3642:	3e c0       	rjmp	.+124    	; 0x36c0 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    3644:	f7 01       	movw	r30, r14
    3646:	25 a1       	lds	r18, 0x45
    3648:	22 23       	and	r18, r18
    364a:	d1 f1       	breq	.+116    	; 0x36c0 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    364c:	06 a0       	lds	r16, 0x86
    364e:	f7 a1       	lds	r31, 0x47
    3650:	e0 2d       	mov	r30, r0
    3652:	cf 01       	movw	r24, r30
    3654:	63 e0       	ldi	r22, 0x03	; 3
    3656:	70 e0       	ldi	r23, 0x00	; 0
    3658:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__udivmodhi4>
    365c:	ac 01       	movw	r20, r24
    365e:	8e 0d       	add	r24, r14
    3660:	9f 1d       	adc	r25, r15
    3662:	dc 01       	movw	r26, r24
    3664:	92 96       	adiw	r26, 0x22	; 34
    3666:	cc 93       	st	X, r28
    3668:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    366a:	bf 01       	movw	r22, r30
    366c:	6f 5f       	subi	r22, 0xFF	; 255
    366e:	7f 4f       	sbci	r23, 0xFF	; 255
    3670:	f7 01       	movw	r30, r14
    3672:	77 a3       	lds	r23, 0x57
    3674:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    3676:	41 30       	cpi	r20, 0x01	; 1
    3678:	51 05       	cpc	r21, r1
    367a:	91 f0       	breq	.+36     	; 0x36a0 <midi_process_byte+0x18a>
    367c:	42 30       	cpi	r20, 0x02	; 2
    367e:	51 05       	cpc	r21, r1
    3680:	f9 f4       	brne	.+62     	; 0x36c0 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    3682:	c7 01       	movw	r24, r14
    3684:	42 a1       	lds	r20, 0x42
    3686:	23 a1       	lds	r18, 0x43
    3688:	04 a1       	lds	r16, 0x44
    368a:	0e 94 67 19 	call	0x32ce	; 0x32ce <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    368e:	f7 01       	movw	r30, r14
    3690:	85 a1       	lds	r24, 0x45
    3692:	84 30       	cpi	r24, 0x04	; 4
    3694:	a9 f0       	breq	.+42     	; 0x36c0 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	97 a3       	lds	r25, 0x57
    369c:	86 a3       	lds	r24, 0x56
    369e:	10 c0       	rjmp	.+32     	; 0x36c0 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    36a0:	22 30       	cpi	r18, 0x02	; 2
    36a2:	71 f4       	brne	.+28     	; 0x36c0 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    36a4:	c7 01       	movw	r24, r14
    36a6:	42 a1       	lds	r20, 0x42
    36a8:	23 a1       	lds	r18, 0x43
    36aa:	00 e0       	ldi	r16, 0x00	; 0
    36ac:	0e 94 67 19 	call	0x32ce	; 0x32ce <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    36b0:	f7 01       	movw	r30, r14
    36b2:	85 a1       	lds	r24, 0x45
    36b4:	84 30       	cpi	r24, 0x04	; 4
    36b6:	21 f0       	breq	.+8      	; 0x36c0 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	97 a3       	lds	r25, 0x57
    36be:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    36c0:	df 91       	pop	r29
    36c2:	cf 91       	pop	r28
    36c4:	0f 91       	pop	r16
    36c6:	ff 90       	pop	r15
    36c8:	ef 90       	pop	r14
    36ca:	08 95       	ret

000036cc <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    36cc:	cf 92       	push	r12
    36ce:	df 92       	push	r13
    36d0:	ef 92       	push	r14
    36d2:	ff 92       	push	r15
    36d4:	0f 93       	push	r16
    36d6:	1f 93       	push	r17
    36d8:	cf 93       	push	r28
    36da:	df 93       	push	r29
    36dc:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    36de:	dc 01       	movw	r26, r24
    36e0:	90 96       	adiw	r26, 0x20	; 32
    36e2:	ed 91       	ld	r30, X+
    36e4:	fc 91       	ld	r31, X
    36e6:	91 97       	sbiw	r26, 0x21	; 33
    36e8:	30 97       	sbiw	r30, 0x00	; 0
    36ea:	09 f0       	breq	.+2      	; 0x36ee <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    36ec:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    36ee:	0f 2e       	mov	r0, r31
    36f0:	f8 ee       	ldi	r31, 0xE8	; 232
    36f2:	ef 2e       	mov	r14, r31
    36f4:	ff 24       	eor	r15, r15
    36f6:	f0 2d       	mov	r31, r0
    36f8:	ec 0c       	add	r14, r12
    36fa:	fd 1c       	adc	r15, r13
    36fc:	c7 01       	movw	r24, r14
    36fe:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3702:	c8 2f       	mov	r28, r24
    3704:	d0 e0       	ldi	r29, 0x00	; 0
    3706:	20 97       	sbiw	r28, 0x00	; 0
    3708:	99 f0       	breq	.+38     	; 0x3730 <midi_device_process+0x64>
    370a:	00 e0       	ldi	r16, 0x00	; 0
    370c:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    370e:	c7 01       	movw	r24, r14
    3710:	60 e0       	ldi	r22, 0x00	; 0
    3712:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <bytequeue_get>
    3716:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    3718:	c6 01       	movw	r24, r12
    371a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    371e:	c7 01       	movw	r24, r14
    3720:	61 e0       	ldi	r22, 0x01	; 1
    3722:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3726:	0f 5f       	subi	r16, 0xFF	; 255
    3728:	1f 4f       	sbci	r17, 0xFF	; 255
    372a:	0c 17       	cp	r16, r28
    372c:	1d 07       	cpc	r17, r29
    372e:	78 f3       	brcs	.-34     	; 0x370e <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    3730:	df 91       	pop	r29
    3732:	cf 91       	pop	r28
    3734:	1f 91       	pop	r17
    3736:	0f 91       	pop	r16
    3738:	ff 90       	pop	r15
    373a:	ef 90       	pop	r14
    373c:	df 90       	pop	r13
    373e:	cf 90       	pop	r12
    3740:	08 95       	ret

00003742 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3742:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    3744:	67 e0       	ldi	r22, 0x07	; 7
    3746:	70 e0       	ldi	r23, 0x00	; 0
    3748:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__udivmodhi4>
    374c:	48 2f       	mov	r20, r24
   if (remainder)
    374e:	88 23       	and	r24, r24
    3750:	81 f0       	breq	.+32     	; 0x3772 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    3752:	c9 01       	movw	r24, r18
    3754:	67 e0       	ldi	r22, 0x07	; 7
    3756:	70 e0       	ldi	r23, 0x00	; 0
    3758:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__udivmodhi4>
    375c:	cb 01       	movw	r24, r22
    375e:	88 0f       	add	r24, r24
    3760:	99 1f       	adc	r25, r25
    3762:	88 0f       	add	r24, r24
    3764:	99 1f       	adc	r25, r25
    3766:	88 0f       	add	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	01 96       	adiw	r24, 0x01	; 1
    376c:	84 0f       	add	r24, r20
    376e:	91 1d       	adc	r25, r1
    3770:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3772:	c9 01       	movw	r24, r18
    3774:	67 e0       	ldi	r22, 0x07	; 7
    3776:	70 e0       	ldi	r23, 0x00	; 0
    3778:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__udivmodhi4>
    377c:	cb 01       	movw	r24, r22
    377e:	88 0f       	add	r24, r24
    3780:	99 1f       	adc	r25, r25
    3782:	88 0f       	add	r24, r24
    3784:	99 1f       	adc	r25, r25
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
}
    378a:	08 95       	ret

0000378c <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    378c:	48 2f       	mov	r20, r24
    378e:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3790:	a1 f0       	breq	.+40     	; 0x37ba <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3792:	9c 01       	movw	r18, r24
    3794:	36 95       	lsr	r19
    3796:	27 95       	ror	r18
    3798:	36 95       	lsr	r19
    379a:	27 95       	ror	r18
    379c:	36 95       	lsr	r19
    379e:	27 95       	ror	r18
    37a0:	c9 01       	movw	r24, r18
    37a2:	88 0f       	add	r24, r24
    37a4:	99 1f       	adc	r25, r25
    37a6:	88 0f       	add	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	82 1b       	sub	r24, r18
    37b0:	93 0b       	sbc	r25, r19
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	84 0f       	add	r24, r20
    37b6:	91 1d       	adc	r25, r1
    37b8:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    37ba:	9c 01       	movw	r18, r24
    37bc:	36 95       	lsr	r19
    37be:	27 95       	ror	r18
    37c0:	36 95       	lsr	r19
    37c2:	27 95       	ror	r18
    37c4:	36 95       	lsr	r19
    37c6:	27 95       	ror	r18
    37c8:	c9 01       	movw	r24, r18
    37ca:	88 0f       	add	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	82 1b       	sub	r24, r18
    37d8:	93 0b       	sbc	r25, r19
}
    37da:	08 95       	ret

000037dc <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    37dc:	2f 92       	push	r2
    37de:	3f 92       	push	r3
    37e0:	4f 92       	push	r4
    37e2:	5f 92       	push	r5
    37e4:	6f 92       	push	r6
    37e6:	7f 92       	push	r7
    37e8:	8f 92       	push	r8
    37ea:	9f 92       	push	r9
    37ec:	af 92       	push	r10
    37ee:	bf 92       	push	r11
    37f0:	cf 92       	push	r12
    37f2:	df 92       	push	r13
    37f4:	ef 92       	push	r14
    37f6:	ff 92       	push	r15
    37f8:	0f 93       	push	r16
    37fa:	1f 93       	push	r17
    37fc:	cf 93       	push	r28
    37fe:	df 93       	push	r29
    3800:	00 d0       	rcall	.+0      	; 0x3802 <sysex_encode+0x26>
    3802:	00 d0       	rcall	.+0      	; 0x3804 <sysex_encode+0x28>
    3804:	00 d0       	rcall	.+0      	; 0x3806 <sysex_encode+0x2a>
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	1c 01       	movw	r2, r24
    380c:	7a 83       	std	Y+2, r23	; 0x02
    380e:	69 83       	std	Y+1, r22	; 0x01
    3810:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3812:	ca 01       	movw	r24, r20
    3814:	67 e0       	ldi	r22, 0x07	; 7
    3816:	70 e0       	ldi	r23, 0x00	; 0
    3818:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__udivmodhi4>
    381c:	2b 01       	movw	r4, r22
    381e:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3820:	61 15       	cp	r22, r1
    3822:	71 05       	cpc	r23, r1
    3824:	b1 f1       	breq	.+108    	; 0x3892 <sysex_encode+0xb6>
    3826:	81 01       	movw	r16, r2
    3828:	e9 80       	ldd	r14, Y+1	; 0x01
    382a:	fa 80       	ldd	r15, Y+2	; 0x02
    382c:	cc 24       	eor	r12, r12
    382e:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3830:	88 24       	eor	r8, r8
    3832:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3834:	1e 83       	std	Y+6, r17	; 0x06
    3836:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    3838:	f8 01       	movw	r30, r16
    383a:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    383c:	fc 82       	std	Y+4, r15	; 0x04
    383e:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3840:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3842:	ab 81       	ldd	r26, Y+3	; 0x03
    3844:	bc 81       	ldd	r27, Y+4	; 0x04
    3846:	2d 91       	ld	r18, X+
    3848:	bc 83       	std	Y+4, r27	; 0x04
    384a:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    384c:	4f 5f       	subi	r20, 0xFF	; 255
    384e:	5f 4f       	sbci	r21, 0xFF	; 255
    3850:	82 2f       	mov	r24, r18
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	80 78       	andi	r24, 0x80	; 128
    3856:	90 70       	andi	r25, 0x00	; 0
    3858:	bc 01       	movw	r22, r24
    385a:	04 2e       	mov	r0, r20
    385c:	02 c0       	rjmp	.+4      	; 0x3862 <sysex_encode+0x86>
    385e:	75 95       	asr	r23
    3860:	67 95       	ror	r22
    3862:	0a 94       	dec	r0
    3864:	e2 f7       	brpl	.-8      	; 0x385e <sysex_encode+0x82>
    3866:	ad 81       	ldd	r26, Y+5	; 0x05
    3868:	be 81       	ldd	r27, Y+6	; 0x06
    386a:	8c 91       	ld	r24, X
    386c:	86 2b       	or	r24, r22
    386e:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3870:	2f 77       	andi	r18, 0x7F	; 127
    3872:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3874:	47 30       	cpi	r20, 0x07	; 7
    3876:	51 05       	cpc	r21, r1
    3878:	21 f7       	brne	.-56     	; 0x3842 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    387a:	08 94       	sec
    387c:	c1 1c       	adc	r12, r1
    387e:	d1 1c       	adc	r13, r1
    3880:	08 5f       	subi	r16, 0xF8	; 248
    3882:	1f 4f       	sbci	r17, 0xFF	; 255
    3884:	e7 e0       	ldi	r30, 0x07	; 7
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	ee 0e       	add	r14, r30
    388a:	ff 1e       	adc	r15, r31
    388c:	ca 14       	cp	r12, r10
    388e:	db 04       	cpc	r13, r11
    3890:	89 f6       	brne	.-94     	; 0x3834 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3892:	c3 01       	movw	r24, r6
    3894:	67 e0       	ldi	r22, 0x07	; 7
    3896:	70 e0       	ldi	r23, 0x00	; 0
    3898:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__udivmodhi4>
   if (remainder) {
    389c:	88 23       	and	r24, r24
    389e:	d9 f1       	breq	.+118    	; 0x3916 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    38a0:	82 01       	movw	r16, r4
    38a2:	00 0f       	add	r16, r16
    38a4:	11 1f       	adc	r17, r17
    38a6:	00 0f       	add	r16, r16
    38a8:	11 1f       	adc	r17, r17
    38aa:	00 0f       	add	r16, r16
    38ac:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    38ae:	78 01       	movw	r14, r16
    38b0:	e4 18       	sub	r14, r4
    38b2:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    38b4:	d1 01       	movw	r26, r2
    38b6:	a0 0f       	add	r26, r16
    38b8:	b1 1f       	adc	r27, r17
    38ba:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    38bc:	68 2f       	mov	r22, r24
    38be:	70 e0       	ldi	r23, 0x00	; 0
    38c0:	61 15       	cp	r22, r1
    38c2:	71 05       	cpc	r23, r1
    38c4:	19 f1       	breq	.+70     	; 0x390c <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    38c6:	e9 81       	ldd	r30, Y+1	; 0x01
    38c8:	fa 81       	ldd	r31, Y+2	; 0x02
    38ca:	ee 0e       	add	r14, r30
    38cc:	ff 1e       	adc	r15, r31
    38ce:	c8 01       	movw	r24, r16
    38d0:	01 96       	adiw	r24, 0x01	; 1
    38d2:	28 0e       	add	r2, r24
    38d4:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    38da:	f7 01       	movw	r30, r14
    38dc:	41 91       	ld	r20, Z+
    38de:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    38e0:	2f 5f       	subi	r18, 0xFF	; 255
    38e2:	3f 4f       	sbci	r19, 0xFF	; 255
    38e4:	84 2f       	mov	r24, r20
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	80 78       	andi	r24, 0x80	; 128
    38ea:	90 70       	andi	r25, 0x00	; 0
    38ec:	02 2e       	mov	r0, r18
    38ee:	02 c0       	rjmp	.+4      	; 0x38f4 <sysex_encode+0x118>
    38f0:	95 95       	asr	r25
    38f2:	87 95       	ror	r24
    38f4:	0a 94       	dec	r0
    38f6:	e2 f7       	brpl	.-8      	; 0x38f0 <sysex_encode+0x114>
    38f8:	9c 91       	ld	r25, X
    38fa:	89 2b       	or	r24, r25
    38fc:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    38fe:	4f 77       	andi	r20, 0x7F	; 127
    3900:	f1 01       	movw	r30, r2
    3902:	41 93       	st	Z+, r20
    3904:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3906:	26 17       	cp	r18, r22
    3908:	37 07       	cpc	r19, r23
    390a:	38 f3       	brcs	.-50     	; 0x38da <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    390c:	c8 01       	movw	r24, r16
    390e:	01 96       	adiw	r24, 0x01	; 1
    3910:	86 0f       	add	r24, r22
    3912:	97 1f       	adc	r25, r23
    3914:	07 c0       	rjmp	.+14     	; 0x3924 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    3916:	c2 01       	movw	r24, r4
    3918:	88 0f       	add	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	88 0f       	add	r24, r24
    391e:	99 1f       	adc	r25, r25
    3920:	88 0f       	add	r24, r24
    3922:	99 1f       	adc	r25, r25
   }
}
    3924:	26 96       	adiw	r28, 0x06	; 6
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	df 91       	pop	r29
    3932:	cf 91       	pop	r28
    3934:	1f 91       	pop	r17
    3936:	0f 91       	pop	r16
    3938:	ff 90       	pop	r15
    393a:	ef 90       	pop	r14
    393c:	df 90       	pop	r13
    393e:	cf 90       	pop	r12
    3940:	bf 90       	pop	r11
    3942:	af 90       	pop	r10
    3944:	9f 90       	pop	r9
    3946:	8f 90       	pop	r8
    3948:	7f 90       	pop	r7
    394a:	6f 90       	pop	r6
    394c:	5f 90       	pop	r5
    394e:	4f 90       	pop	r4
    3950:	3f 90       	pop	r3
    3952:	2f 90       	pop	r2
    3954:	08 95       	ret

00003956 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3956:	6f 92       	push	r6
    3958:	7f 92       	push	r7
    395a:	8f 92       	push	r8
    395c:	9f 92       	push	r9
    395e:	af 92       	push	r10
    3960:	bf 92       	push	r11
    3962:	cf 92       	push	r12
    3964:	df 92       	push	r13
    3966:	ef 92       	push	r14
    3968:	ff 92       	push	r15
    396a:	0f 93       	push	r16
    396c:	1f 93       	push	r17
    396e:	cf 93       	push	r28
    3970:	df 93       	push	r29
    3972:	3c 01       	movw	r6, r24
    3974:	4b 01       	movw	r8, r22
    3976:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3978:	42 30       	cpi	r20, 0x02	; 2
    397a:	51 05       	cpc	r21, r1
    397c:	08 f4       	brcc	.+2      	; 0x3980 <sysex_decode+0x2a>
    397e:	6f c0       	rjmp	.+222    	; 0x3a5e <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3980:	7a 01       	movw	r14, r20
    3982:	f6 94       	lsr	r15
    3984:	e7 94       	ror	r14
    3986:	f6 94       	lsr	r15
    3988:	e7 94       	ror	r14
    398a:	f6 94       	lsr	r15
    398c:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    398e:	e1 14       	cp	r14, r1
    3990:	f1 04       	cpc	r15, r1
    3992:	29 f1       	breq	.+74     	; 0x39de <sysex_decode+0x88>
    3994:	eb 01       	movw	r28, r22
    3996:	b3 01       	movw	r22, r6
    3998:	00 e0       	ldi	r16, 0x00	; 0
    399a:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    399c:	cc 24       	eor	r12, r12
    399e:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    39a0:	de 01       	movw	r26, r28
    39a2:	11 96       	adiw	r26, 0x01	; 1
    39a4:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    39a6:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    39a8:	2d 91       	ld	r18, X+
    39aa:	2f 77       	andi	r18, 0x7F	; 127
    39ac:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    39ae:	4f 5f       	subi	r20, 0xFF	; 255
    39b0:	5f 4f       	sbci	r21, 0xFF	; 255
    39b2:	88 81       	ld	r24, Y
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	04 2e       	mov	r0, r20
    39b8:	02 c0       	rjmp	.+4      	; 0x39be <sysex_decode+0x68>
    39ba:	88 0f       	add	r24, r24
    39bc:	99 1f       	adc	r25, r25
    39be:	0a 94       	dec	r0
    39c0:	e2 f7       	brpl	.-8      	; 0x39ba <sysex_decode+0x64>
    39c2:	80 78       	andi	r24, 0x80	; 128
    39c4:	28 2b       	or	r18, r24
    39c6:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    39c8:	47 30       	cpi	r20, 0x07	; 7
    39ca:	51 05       	cpc	r21, r1
    39cc:	69 f7       	brne	.-38     	; 0x39a8 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    39ce:	0f 5f       	subi	r16, 0xFF	; 255
    39d0:	1f 4f       	sbci	r17, 0xFF	; 255
    39d2:	28 96       	adiw	r28, 0x08	; 8
    39d4:	69 5f       	subi	r22, 0xF9	; 249
    39d6:	7f 4f       	sbci	r23, 0xFF	; 255
    39d8:	0e 15       	cp	r16, r14
    39da:	1f 05       	cpc	r17, r15
    39dc:	09 f7       	brne	.-62     	; 0x39a0 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    39de:	5a 2d       	mov	r21, r10
    39e0:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    39e2:	99 f1       	breq	.+102    	; 0x3a4a <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    39e4:	e7 01       	movw	r28, r14
    39e6:	cc 0f       	add	r28, r28
    39e8:	dd 1f       	adc	r29, r29
    39ea:	cc 0f       	add	r28, r28
    39ec:	dd 1f       	adc	r29, r29
    39ee:	cc 0f       	add	r28, r28
    39f0:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    39f2:	8e 01       	movw	r16, r28
    39f4:	0e 19       	sub	r16, r14
    39f6:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    39f8:	65 2f       	mov	r22, r21
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	61 50       	subi	r22, 0x01	; 1
    39fe:	70 40       	sbci	r23, 0x00	; 0
    3a00:	f9 f0       	breq	.+62     	; 0x3a40 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a02:	ce 01       	movw	r24, r28
    3a04:	01 96       	adiw	r24, 0x01	; 1
    3a06:	d4 01       	movw	r26, r8
    3a08:	a8 0f       	add	r26, r24
    3a0a:	b9 1f       	adc	r27, r25
    3a0c:	f3 01       	movw	r30, r6
    3a0e:	e0 0f       	add	r30, r16
    3a10:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a16:	c8 0d       	add	r28, r8
    3a18:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3a1a:	4d 91       	ld	r20, X+
    3a1c:	4f 77       	andi	r20, 0x7F	; 127
    3a1e:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a20:	2f 5f       	subi	r18, 0xFF	; 255
    3a22:	3f 4f       	sbci	r19, 0xFF	; 255
    3a24:	88 81       	ld	r24, Y
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	02 2e       	mov	r0, r18
    3a2a:	02 c0       	rjmp	.+4      	; 0x3a30 <sysex_decode+0xda>
    3a2c:	88 0f       	add	r24, r24
    3a2e:	99 1f       	adc	r25, r25
    3a30:	0a 94       	dec	r0
    3a32:	e2 f7       	brpl	.-8      	; 0x3a2c <sysex_decode+0xd6>
    3a34:	80 78       	andi	r24, 0x80	; 128
    3a36:	48 2b       	or	r20, r24
    3a38:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3a3a:	26 17       	cp	r18, r22
    3a3c:	37 07       	cpc	r19, r23
    3a3e:	68 f3       	brcs	.-38     	; 0x3a1a <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3a40:	c8 01       	movw	r24, r16
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	85 0f       	add	r24, r21
    3a46:	91 1d       	adc	r25, r1
    3a48:	0c c0       	rjmp	.+24     	; 0x3a62 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3a4a:	c7 01       	movw	r24, r14
    3a4c:	88 0f       	add	r24, r24
    3a4e:	99 1f       	adc	r25, r25
    3a50:	88 0f       	add	r24, r24
    3a52:	99 1f       	adc	r25, r25
    3a54:	88 0f       	add	r24, r24
    3a56:	99 1f       	adc	r25, r25
    3a58:	8e 19       	sub	r24, r14
    3a5a:	9f 09       	sbc	r25, r15
    3a5c:	02 c0       	rjmp	.+4      	; 0x3a62 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3a62:	df 91       	pop	r29
    3a64:	cf 91       	pop	r28
    3a66:	1f 91       	pop	r17
    3a68:	0f 91       	pop	r16
    3a6a:	ff 90       	pop	r15
    3a6c:	ef 90       	pop	r14
    3a6e:	df 90       	pop	r13
    3a70:	cf 90       	pop	r12
    3a72:	bf 90       	pop	r11
    3a74:	af 90       	pop	r10
    3a76:	9f 90       	pop	r9
    3a78:	8f 90       	pop	r8
    3a7a:	7f 90       	pop	r7
    3a7c:	6f 90       	pop	r6
    3a7e:	08 95       	ret

00003a80 <__mulsi3>:
    3a80:	62 9f       	mul	r22, r18
    3a82:	d0 01       	movw	r26, r0
    3a84:	73 9f       	mul	r23, r19
    3a86:	f0 01       	movw	r30, r0
    3a88:	82 9f       	mul	r24, r18
    3a8a:	e0 0d       	add	r30, r0
    3a8c:	f1 1d       	adc	r31, r1
    3a8e:	64 9f       	mul	r22, r20
    3a90:	e0 0d       	add	r30, r0
    3a92:	f1 1d       	adc	r31, r1
    3a94:	92 9f       	mul	r25, r18
    3a96:	f0 0d       	add	r31, r0
    3a98:	83 9f       	mul	r24, r19
    3a9a:	f0 0d       	add	r31, r0
    3a9c:	74 9f       	mul	r23, r20
    3a9e:	f0 0d       	add	r31, r0
    3aa0:	65 9f       	mul	r22, r21
    3aa2:	f0 0d       	add	r31, r0
    3aa4:	99 27       	eor	r25, r25
    3aa6:	72 9f       	mul	r23, r18
    3aa8:	b0 0d       	add	r27, r0
    3aaa:	e1 1d       	adc	r30, r1
    3aac:	f9 1f       	adc	r31, r25
    3aae:	63 9f       	mul	r22, r19
    3ab0:	b0 0d       	add	r27, r0
    3ab2:	e1 1d       	adc	r30, r1
    3ab4:	f9 1f       	adc	r31, r25
    3ab6:	bd 01       	movw	r22, r26
    3ab8:	cf 01       	movw	r24, r30
    3aba:	11 24       	eor	r1, r1
    3abc:	08 95       	ret

00003abe <__udivmodhi4>:
    3abe:	aa 1b       	sub	r26, r26
    3ac0:	bb 1b       	sub	r27, r27
    3ac2:	51 e1       	ldi	r21, 0x11	; 17
    3ac4:	07 c0       	rjmp	.+14     	; 0x3ad4 <__udivmodhi4_ep>

00003ac6 <__udivmodhi4_loop>:
    3ac6:	aa 1f       	adc	r26, r26
    3ac8:	bb 1f       	adc	r27, r27
    3aca:	a6 17       	cp	r26, r22
    3acc:	b7 07       	cpc	r27, r23
    3ace:	10 f0       	brcs	.+4      	; 0x3ad4 <__udivmodhi4_ep>
    3ad0:	a6 1b       	sub	r26, r22
    3ad2:	b7 0b       	sbc	r27, r23

00003ad4 <__udivmodhi4_ep>:
    3ad4:	88 1f       	adc	r24, r24
    3ad6:	99 1f       	adc	r25, r25
    3ad8:	5a 95       	dec	r21
    3ada:	a9 f7       	brne	.-22     	; 0x3ac6 <__udivmodhi4_loop>
    3adc:	80 95       	com	r24
    3ade:	90 95       	com	r25
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	08 95       	ret

00003ae6 <__divmodhi4>:
    3ae6:	97 fb       	bst	r25, 7
    3ae8:	09 2e       	mov	r0, r25
    3aea:	07 26       	eor	r0, r23
    3aec:	0a d0       	rcall	.+20     	; 0x3b02 <__divmodhi4_neg1>
    3aee:	77 fd       	sbrc	r23, 7
    3af0:	04 d0       	rcall	.+8      	; 0x3afa <__divmodhi4_neg2>
    3af2:	e5 df       	rcall	.-54     	; 0x3abe <__udivmodhi4>
    3af4:	06 d0       	rcall	.+12     	; 0x3b02 <__divmodhi4_neg1>
    3af6:	00 20       	and	r0, r0
    3af8:	1a f4       	brpl	.+6      	; 0x3b00 <__divmodhi4_exit>

00003afa <__divmodhi4_neg2>:
    3afa:	70 95       	com	r23
    3afc:	61 95       	neg	r22
    3afe:	7f 4f       	sbci	r23, 0xFF	; 255

00003b00 <__divmodhi4_exit>:
    3b00:	08 95       	ret

00003b02 <__divmodhi4_neg1>:
    3b02:	f6 f7       	brtc	.-4      	; 0x3b00 <__divmodhi4_exit>
    3b04:	90 95       	com	r25
    3b06:	81 95       	neg	r24
    3b08:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0a:	08 95       	ret

00003b0c <memcpy>:
    3b0c:	fb 01       	movw	r30, r22
    3b0e:	dc 01       	movw	r26, r24
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <memcpy+0xa>
    3b12:	01 90       	ld	r0, Z+
    3b14:	0d 92       	st	X+, r0
    3b16:	41 50       	subi	r20, 0x01	; 1
    3b18:	50 40       	sbci	r21, 0x00	; 0
    3b1a:	d8 f7       	brcc	.-10     	; 0x3b12 <memcpy+0x6>
    3b1c:	08 95       	ret

00003b1e <memmove>:
    3b1e:	68 17       	cp	r22, r24
    3b20:	79 07       	cpc	r23, r25
    3b22:	68 f4       	brcc	.+26     	; 0x3b3e <memmove+0x20>
    3b24:	fb 01       	movw	r30, r22
    3b26:	dc 01       	movw	r26, r24
    3b28:	e4 0f       	add	r30, r20
    3b2a:	f5 1f       	adc	r31, r21
    3b2c:	a4 0f       	add	r26, r20
    3b2e:	b5 1f       	adc	r27, r21
    3b30:	02 c0       	rjmp	.+4      	; 0x3b36 <memmove+0x18>
    3b32:	02 90       	ld	r0, -Z
    3b34:	0e 92       	st	-X, r0
    3b36:	41 50       	subi	r20, 0x01	; 1
    3b38:	50 40       	sbci	r21, 0x00	; 0
    3b3a:	d8 f7       	brcc	.-10     	; 0x3b32 <memmove+0x14>
    3b3c:	08 95       	ret
    3b3e:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <memcpy>

00003b42 <__eerd_block_m6450a>:
    3b42:	dc 01       	movw	r26, r24
    3b44:	cb 01       	movw	r24, r22

00003b46 <__eerd_blraw_m6450a>:
    3b46:	fc 01       	movw	r30, r24
    3b48:	f9 99       	sbic	0x1f, 1	; 31
    3b4a:	fe cf       	rjmp	.-4      	; 0x3b48 <__eerd_blraw_m6450a+0x2>
    3b4c:	06 c0       	rjmp	.+12     	; 0x3b5a <__eerd_blraw_m6450a+0x14>
    3b4e:	f2 bd       	out	0x22, r31	; 34
    3b50:	e1 bd       	out	0x21, r30	; 33
    3b52:	f8 9a       	sbi	0x1f, 0	; 31
    3b54:	31 96       	adiw	r30, 0x01	; 1
    3b56:	00 b4       	in	r0, 0x20	; 32
    3b58:	0d 92       	st	X+, r0
    3b5a:	41 50       	subi	r20, 0x01	; 1
    3b5c:	50 40       	sbci	r21, 0x00	; 0
    3b5e:	b8 f7       	brcc	.-18     	; 0x3b4e <__eerd_blraw_m6450a+0x8>
    3b60:	08 95       	ret

00003b62 <__eerd_word_m6450a>:
    3b62:	a8 e1       	ldi	r26, 0x18	; 24
    3b64:	b0 e0       	ldi	r27, 0x00	; 0
    3b66:	42 e0       	ldi	r20, 0x02	; 2
    3b68:	50 e0       	ldi	r21, 0x00	; 0
    3b6a:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <__eerd_blraw_m6450a>

00003b6e <__eeupd_block_m6450a>:
    3b6e:	dc 01       	movw	r26, r24
    3b70:	a4 0f       	add	r26, r20
    3b72:	b5 1f       	adc	r27, r21
    3b74:	41 50       	subi	r20, 0x01	; 1
    3b76:	50 40       	sbci	r21, 0x00	; 0
    3b78:	48 f0       	brcs	.+18     	; 0x3b8c <__eeupd_block_m6450a+0x1e>
    3b7a:	cb 01       	movw	r24, r22
    3b7c:	84 0f       	add	r24, r20
    3b7e:	95 1f       	adc	r25, r21
    3b80:	2e 91       	ld	r18, -X
    3b82:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <__eeupd_r18_m6450a>
    3b86:	41 50       	subi	r20, 0x01	; 1
    3b88:	50 40       	sbci	r21, 0x00	; 0
    3b8a:	d0 f7       	brcc	.-12     	; 0x3b80 <__eeupd_block_m6450a+0x12>
    3b8c:	08 95       	ret

00003b8e <__eeupd_byte_m6450a>:
    3b8e:	26 2f       	mov	r18, r22

00003b90 <__eeupd_r18_m6450a>:
    3b90:	f9 99       	sbic	0x1f, 1	; 31
    3b92:	fe cf       	rjmp	.-4      	; 0x3b90 <__eeupd_r18_m6450a>
    3b94:	92 bd       	out	0x22, r25	; 34
    3b96:	81 bd       	out	0x21, r24	; 33
    3b98:	f8 9a       	sbi	0x1f, 0	; 31
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	00 b4       	in	r0, 0x20	; 32
    3b9e:	02 16       	cp	r0, r18
    3ba0:	31 f0       	breq	.+12     	; 0x3bae <__eeupd_r18_m6450a+0x1e>
    3ba2:	20 bd       	out	0x20, r18	; 32
    3ba4:	0f b6       	in	r0, 0x3f	; 63
    3ba6:	f8 94       	cli
    3ba8:	fa 9a       	sbi	0x1f, 2	; 31
    3baa:	f9 9a       	sbi	0x1f, 1	; 31
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	08 95       	ret

00003bb0 <__eeupd_word_m6450a>:
    3bb0:	01 96       	adiw	r24, 0x01	; 1
    3bb2:	27 2f       	mov	r18, r23
    3bb4:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <__eeupd_r18_m6450a>
    3bb8:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__eeupd_byte_m6450a>

00003bbc <_exit>:
    3bbc:	f8 94       	cli

00003bbe <__stop_program>:
    3bbe:	ff cf       	rjmp	.-2      	; 0x3bbe <__stop_program>
