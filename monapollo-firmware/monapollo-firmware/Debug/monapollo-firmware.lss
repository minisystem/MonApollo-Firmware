
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  000024c4  00002558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000195  008001ec  008001ec  00002644  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00002644  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014a  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00002fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f61  00000000  00000000  00003248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100b  00000000  00000000  000071a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000188f  00000000  00000000  000081b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b0c  00000000  00000000  00009a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000124a  00000000  00000000  0000a550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029e8  00000000  00000000  0000b79a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000e182  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_9>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e4 ec       	ldi	r30, 0xC4	; 196
      78:	f4 e2       	ldi	r31, 0x24	; 36
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	13 e0       	ldi	r17, 0x03	; 3
      88:	ac ee       	ldi	r26, 0xEC	; 236
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a1 38       	cpi	r26, 0x81	; 129
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 a1 02 	call	0x542	; 0x542 <main>
      9a:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     120:	80 91 ec 01 	lds	r24, 0x01EC
     124:	08 95       	ret

00000126 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	18 2f       	mov	r17, r24
     130:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	ec 01       	movw	r28, r24
     138:	22 97       	sbiw	r28, 0x02	; 2
     13a:	be 01       	movw	r22, r28
     13c:	4e e0       	ldi	r20, 0x0E	; 14
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	0e 94 4e 12 	call	0x249c	; 0x249c <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     144:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     146:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     148:	10 93 ec 01 	sts	0x01EC, r17
	
} 
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	08 95       	ret

00000156 <remove_note>:
void remove_note(uint8_t note){
     156:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     158:	c0 91 00 01 	lds	r28, 0x0100
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     15c:	c8 17       	cp	r28, r24
     15e:	41 f0       	breq	.+16     	; 0x170 <remove_note+0x1a>
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     168:	90 81       	ld	r25, Z
     16a:	98 17       	cp	r25, r24
     16c:	59 f4       	brne	.+22     	; 0x184 <remove_note+0x2e>
     16e:	02 c0       	rjmp	.+4      	; 0x174 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     174:	fa 01       	movw	r30, r20
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	e0 50       	subi	r30, 0x00	; 0
     17c:	ff 4f       	sbci	r31, 0xFF	; 255
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	80 83       	st	Z, r24
			free_slot = i;
			break;
     182:	07 c0       	rjmp	.+14     	; 0x192 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     184:	4f 5f       	subi	r20, 0xFF	; 255
     186:	5f 4f       	sbci	r21, 0xFF	; 255
     188:	32 96       	adiw	r30, 0x02	; 2
     18a:	48 30       	cpi	r20, 0x08	; 8
     18c:	51 05       	cpc	r21, r1
     18e:	61 f7       	brne	.-40     	; 0x168 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     190:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	ca 01       	movw	r24, r20
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	bc 01       	movw	r22, r24
     19c:	6e 5f       	subi	r22, 0xFE	; 254
     19e:	7e 4f       	sbci	r23, 0xFE	; 254
     1a0:	40 95       	com	r20
     1a2:	50 95       	com	r21
     1a4:	48 5f       	subi	r20, 0xF8	; 248
     1a6:	5f 4f       	sbci	r21, 0xFF	; 255
     1a8:	44 0f       	add	r20, r20
     1aa:	55 1f       	adc	r21, r21
     1ac:	80 50       	subi	r24, 0x00	; 0
     1ae:	9f 4f       	sbci	r25, 0xFF	; 255
     1b0:	0e 94 4e 12 	call	0x249c	; 0x249c <memmove>
	note_pool[7].note = EMPTY;	
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	80 93 0e 01 	sts	0x010E, r24
	
	//check to see if this is the last note released
	if (note_pool[0].note == EMPTY) {
     1ba:	80 91 00 01 	lds	r24, 0x0100
     1be:	8f 3f       	cpi	r24, 0xFF	; 255
     1c0:	19 f4       	brne	.+6      	; 0x1c8 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1c2:	c0 93 ec 01 	sts	0x01EC, r28
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1c8:	80 93 ec 01 	sts	0x01EC, r24

	}	
	
}
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1d0:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1d2:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1d4:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1d6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1d8:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     1da:	8c 91       	ld	r24, X
     1dc:	82 b9       	out	0x02, r24	; 2
     1de:	8d e0       	ldi	r24, 0x0D	; 13
     1e0:	8a 95       	dec	r24
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <set_control_voltage+0x10>
     1e4:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     1e6:	ea ed       	ldi	r30, 0xDA	; 218
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	40 81       	ld	r20, Z
     1ec:	21 e0       	ldi	r18, 0x01	; 1
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	c9 01       	movw	r24, r18
     1f2:	11 96       	adiw	r26, 0x01	; 1
     1f4:	0c 90       	ld	r0, X
     1f6:	11 97       	sbiw	r26, 0x01	; 1
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_control_voltage+0x2e>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <set_control_voltage+0x2a>
     202:	84 2b       	or	r24, r20
     204:	80 83       	st	Z, r24
     206:	82 e4       	ldi	r24, 0x42	; 66
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x38>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x3e>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     20e:	80 81       	ld	r24, Z
     210:	11 96       	adiw	r26, 0x01	; 1
     212:	0c 90       	ld	r0, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	02 c0       	rjmp	.+4      	; 0x21c <set_control_voltage+0x4c>
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <set_control_voltage+0x48>
     220:	20 95       	com	r18
     222:	28 23       	and	r18, r24
     224:	20 83       	st	Z, r18
	
}	
     226:	08 95       	ret

00000228 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     228:	83 b3       	in	r24, 0x13	; 19
     22a:	83 60       	ori	r24, 0x03	; 3
     22c:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     232:	97 b1       	in	r25, 0x07	; 7
     234:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     236:	e9 ed       	ldi	r30, 0xD9	; 217
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8f 60       	ori	r24, 0x0F	; 15
     23e:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     240:	ea ed       	ldi	r30, 0xDA	; 218
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     24a:	84 b3       	in	r24, 0x14	; 20
     24c:	83 60       	ori	r24, 0x03	; 3
     24e:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     250:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     252:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     254:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     256:	a0 9a       	sbi	0x14, 0	; 20
}
     258:	08 95       	ret

0000025a <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     25a:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     25c:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     25e:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     260:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     262:	62 b9       	out	0x02, r22	; 2
     264:	2d e0       	ldi	r18, 0x0D	; 13
     266:	2a 95       	dec	r18
     268:	f1 f7       	brne	.-4      	; 0x266 <set_dac+0xc>
     26a:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     26c:	ea ed       	ldi	r30, 0xDA	; 218
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	40 81       	ld	r20, Z
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	b9 01       	movw	r22, r18
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_dac+0x24>
     27a:	66 0f       	add	r22, r22
     27c:	77 1f       	adc	r23, r23
     27e:	8a 95       	dec	r24
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_dac+0x20>
     282:	cb 01       	movw	r24, r22
     284:	94 2f       	mov	r25, r20
     286:	98 2b       	or	r25, r24
     288:	90 83       	st	Z, r25
     28a:	72 e4       	ldi	r23, 0x42	; 66
     28c:	7a 95       	dec	r23
     28e:	f1 f7       	brne	.-4      	; 0x28c <set_dac+0x32>
     290:	00 c0       	rjmp	.+0      	; 0x292 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     292:	90 81       	ld	r25, Z
     294:	80 95       	com	r24
     296:	89 23       	and	r24, r25
     298:	80 83       	st	Z, r24
	
}
     29a:	08 95       	ret

0000029c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t digit)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	2a 97       	sbiw	r28, 0x0a	; 10
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     2b0:	de 01       	movw	r26, r28
     2b2:	11 96       	adiw	r26, 0x01	; 1
     2b4:	ee e4       	ldi	r30, 0x4E	; 78
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	3a e0       	ldi	r19, 0x0A	; 10
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	31 50       	subi	r19, 0x01	; 1
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2c6:	ea ed       	ldi	r30, 0xDA	; 218
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	30 81       	ld	r19, Z
     2cc:	30 61       	ori	r19, 0x10	; 16
     2ce:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d0:	30 81       	ld	r19, Z
     2d2:	3f 7e       	andi	r19, 0xEF	; 239
     2d4:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     2d6:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2d8:	30 81       	ld	r19, Z
     2da:	30 62       	ori	r19, 0x20	; 32
     2dc:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2de:	30 81       	ld	r19, Z
     2e0:	3f 7d       	andi	r19, 0xDF	; 223
     2e2:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
     2e4:	62 30       	cpi	r22, 0x02	; 2
     2e6:	f9 f0       	breq	.+62     	; 0x326 <display_dec+0x8a>
     2e8:	63 30       	cpi	r22, 0x03	; 3
     2ea:	18 f4       	brcc	.+6      	; 0x2f2 <display_dec+0x56>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	a1 f5       	brne	.+104    	; 0x358 <display_dec+0xbc>
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <display_dec+0x70>
     2f2:	64 30       	cpi	r22, 0x04	; 4
     2f4:	29 f1       	breq	.+74     	; 0x340 <display_dec+0xa4>
     2f6:	68 30       	cpi	r22, 0x08	; 8
     2f8:	79 f5       	brne	.+94     	; 0x358 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     2fa:	6a e0       	ldi	r22, 0x0A	; 10
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
     302:	fe 01       	movw	r30, r28
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     30a:	26 c0       	rjmp	.+76     	; 0x358 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     30c:	64 e6       	ldi	r22, 0x64	; 100
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
     314:	6a e0       	ldi	r22, 0x0A	; 10
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
     31c:	fe 01       	movw	r30, r28
     31e:	e6 0f       	add	r30, r22
     320:	f7 1f       	adc	r31, r23
     322:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     324:	19 c0       	rjmp	.+50     	; 0x358 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     326:	68 ee       	ldi	r22, 0xE8	; 232
     328:	73 e0       	ldi	r23, 0x03	; 3
     32a:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
     32e:	64 e6       	ldi	r22, 0x64	; 100
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
     336:	fe 01       	movw	r30, r28
     338:	e6 0f       	add	r30, r22
     33a:	f7 1f       	adc	r31, r23
     33c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     33e:	0c c0       	rjmp	.+24     	; 0x358 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     340:	60 e1       	ldi	r22, 0x10	; 16
     342:	77 e2       	ldi	r23, 0x27	; 39
     344:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
     348:	68 ee       	ldi	r22, 0xE8	; 232
     34a:	73 e0       	ldi	r23, 0x03	; 3
     34c:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
     350:	fe 01       	movw	r30, r28
     352:	e6 0f       	add	r30, r22
     354:	f7 1f       	adc	r31, r23
     356:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     358:	20 95       	com	r18
     35a:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     35c:	ea ed       	ldi	r30, 0xDA	; 218
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     366:	80 81       	ld	r24, Z
     368:	8f 7e       	andi	r24, 0xEF	; 239
     36a:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     36c:	2a 96       	adiw	r28, 0x0a	; 10
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <update_display+0x8>
     386:	00 d0       	rcall	.+0      	; 0x388 <update_display+0xa>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t place = 0;
	
	uint8_t digit[] = {
     38c:	28 e0       	ldi	r18, 0x08	; 8
     38e:	29 83       	std	Y+1, r18	; 0x01
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	2a 83       	std	Y+2, r18	; 0x02
     394:	22 e0       	ldi	r18, 0x02	; 2
     396:	2b 83       	std	Y+3, r18	; 0x03
     398:	24 e0       	ldi	r18, 0x04	; 4
     39a:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	if (type == DEC) {
     39c:	66 23       	and	r22, r22
     39e:	81 f4       	brne	.+32     	; 0x3c0 <update_display+0x42>

		
			
		display_dec(number, digit[place]);
     3a0:	10 91 f1 01 	lds	r17, 0x01F1
     3a4:	fe 01       	movw	r30, r28
     3a6:	e1 0f       	add	r30, r17
     3a8:	f1 1d       	adc	r31, r1
     3aa:	61 81       	ldd	r22, Z+1	; 0x01
     3ac:	0e 94 4e 01 	call	0x29c	; 0x29c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     3b0:	81 2f       	mov	r24, r17
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	80 93 f1 01 	sts	0x01F1, r24
     3b8:	13 30       	cpi	r17, 0x03	; 3
     3ba:	11 f4       	brne	.+4      	; 0x3c0 <update_display+0x42>
		{
			place = 0;
     3bc:	10 92 f1 01 	sts	0x01F1, r1
		
		
	}
	
	
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     3e2:	80 91 91 02 	lds	r24, 0x0291
     3e6:	81 50       	subi	r24, 0x01	; 1
     3e8:	87 bd       	out	0x27, r24	; 39
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
     3ea:	85 b1       	in	r24, 0x05	; 5
     3ec:	80 58       	subi	r24, 0x80	; 128
     3ee:	85 b9       	out	0x05, r24	; 5
	if (period_counter == 0) {
     3f0:	80 91 92 02 	lds	r24, 0x0292
     3f4:	88 23       	and	r24, r24
     3f6:	a1 f4       	brne	.+40     	; 0x420 <__vector_10+0x50>
		count_finished = FALSE;
     3f8:	10 92 8f 02 	sts	0x028F, r1
		no_overflow = TRUE;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 ea 01 	sts	0x01EA, r24
		period_counter = 1; //set period counter to 1
     402:	80 93 92 02 	sts	0x0292, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     406:	e1 e8       	ldi	r30, 0x81	; 129
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	90 91 90 02 	lds	r25, 0x0290
     410:	89 2b       	or	r24, r25
     412:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     414:	ef e6       	ldi	r30, 0x6F	; 111
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	81 60       	ori	r24, 0x01	; 1
     41c:	80 83       	st	Z, r24
     41e:	11 c0       	rjmp	.+34     	; 0x442 <__vector_10+0x72>
		
	} else {
		
		osc_count = TCNT1;		
     420:	e4 e8       	ldi	r30, 0x84	; 132
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	90 93 8e 02 	sts	0x028E, r25
     42c:	80 93 8d 02 	sts	0x028D, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     430:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 8f 02 	sts	0x028F, r24
		period_counter = 0;
     43a:	10 92 92 02 	sts	0x0292, r1
		TCNT1 = 0; //reset timer/counter 1
     43e:	11 82       	std	Z+1, r1	; 0x01
     440:	10 82       	st	Z, r1
	}
	
	
	
	
}
     442:	ff 91       	pop	r31
     444:	ef 91       	pop	r30
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     45e:	10 92 ea 01 	sts	0x01EA, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     46c:	84 2f       	mov	r24, r20
	remove_note(note);
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
	gate_buffer--;
     474:	80 91 f3 01 	lds	r24, 0x01F3
     478:	81 50       	subi	r24, 0x01	; 1
     47a:	80 93 f3 01 	sts	0x01F3, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     47e:	88 23       	and	r24, r24
     480:	09 f4       	brne	.+2      	; 0x484 <note_off_event+0x18>
     482:	89 98       	cbi	0x11, 1	; 17
     484:	08 95       	ret

00000486 <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     486:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     488:	40 93 32 02 	sts	0x0232, r20
	if (velocity == 0) {
     48c:	22 23       	and	r18, r18
     48e:	61 f4       	brne	.+24     	; 0x4a8 <note_on_event+0x22>
		remove_note(note);
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
		gate_buffer--;
     496:	80 91 f3 01 	lds	r24, 0x01F3
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	80 93 f3 01 	sts	0x01F3, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     4a0:	88 23       	and	r24, r24
     4a2:	69 f4       	brne	.+26     	; 0x4be <note_on_event+0x38>
     4a4:	89 98       	cbi	0x11, 1	; 17
     4a6:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	62 2f       	mov	r22, r18
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	0e 94 93 00 	call	0x126	; 0x126 <new_note>
		gate_buffer++; //increment gate_buffer
     4b2:	80 91 f3 01 	lds	r24, 0x01F3
     4b6:	8f 5f       	subi	r24, 0xFF	; 255
     4b8:	80 93 f3 01 	sts	0x01F3, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     4bc:	89 9a       	sbi	0x11, 1	; 17
     4be:	08 95       	ret

000004c0 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     4c0:	87 e2       	ldi	r24, 0x27	; 39
     4c2:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     4c6:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     4ca:	88 e9       	ldi	r24, 0x98	; 152
     4cc:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     4d0:	08 95       	ret

000004d2 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	2f 93       	push	r18
     4de:	3f 93       	push	r19
     4e0:	4f 93       	push	r20
     4e2:	5f 93       	push	r21
     4e4:	6f 93       	push	r22
     4e6:	7f 93       	push	r23
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	af 93       	push	r26
     4ee:	bf 93       	push	r27
     4f0:	ef 93       	push	r30
     4f2:	ff 93       	push	r31
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	0f 92       	push	r0
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
     4fe:	85 b1       	in	r24, 0x05	; 5
     500:	80 58       	subi	r24, 0x80	; 128
     502:	85 b9       	out	0x05, r24	; 5
	uint8_t inByte = UDR0;
     504:	80 91 c6 00 	lds	r24, 0x00C6
     508:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     50a:	84 e9       	ldi	r24, 0x94	; 148
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	ae 01       	movw	r20, r28
     512:	4f 5f       	subi	r20, 0xFF	; 255
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	bf 91       	pop	r27
     526:	af 91       	pop	r26
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	7f 91       	pop	r23
     52e:	6f 91       	pop	r22
     530:	5f 91       	pop	r21
     532:	4f 91       	pop	r20
     534:	3f 91       	pop	r19
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     542:	80 e8       	ldi	r24, 0x80	; 128
     544:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     546:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     548:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     54a:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     54c:	9a 9a       	sbi	0x13, 2	; 19
	//PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
	PORTG |= (1<<TUNE_SELECT);
     54e:	a2 9a       	sbi	0x14, 2	; 20
	
	setup_spi(); 
     550:	0e 94 4c 04 	call	0x898	; 0x898 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     554:	a9 ed       	ldi	r26, 0xD9	; 217
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	8c 91       	ld	r24, X
     55a:	80 6c       	ori	r24, 0xC0	; 192
     55c:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     55e:	ea ed       	ldi	r30, 0xDA	; 218
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	80 81       	ld	r24, Z
     564:	80 6c       	ori	r24, 0xC0	; 192
     566:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     568:	81 b1       	in	r24, 0x01	; 1
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     56e:	92 b1       	in	r25, 0x02	; 2
     570:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     572:	8c 91       	ld	r24, X
     574:	80 63       	ori	r24, 0x30	; 48
     576:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     578:	80 81       	ld	r24, Z
     57a:	8f 7c       	andi	r24, 0xCF	; 207
     57c:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     57e:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     580:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     584:	0e 94 14 01 	call	0x228	; 0x228 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     588:	c4 e9       	ldi	r28, 0x94	; 148
     58a:	d2 e0       	ldi	r29, 0x02	; 2
     58c:	ce 01       	movw	r24, r28
     58e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     592:	ce 01       	movw	r24, r28
     594:	63 e4       	ldi	r22, 0x43	; 67
     596:	72 e0       	ldi	r23, 0x02	; 2
     598:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     59c:	ce 01       	movw	r24, r28
     59e:	66 e3       	ldi	r22, 0x36	; 54
     5a0:	72 e0       	ldi	r23, 0x02	; 2
     5a2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     5a6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     5aa:	0e 94 71 04 	call	0x8e2	; 0x8e2 <update_spi>
	//TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
	//TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms
	

		
	sei(); //enable global interrupts
     5ae:	78 94       	sei
	
	////set initial pitch offset CVs
	vco1_init_cv = set_vco_init_cv(VCO1, 24079);
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	6f e0       	ldi	r22, 0x0F	; 15
     5b4:	7e e5       	ldi	r23, 0x5E	; 94
     5b6:	0e 94 4b 05 	call	0xa96	; 0xa96 <set_vco_init_cv>
     5ba:	90 93 8b 02 	sts	0x028B, r25
     5be:	80 93 8a 02 	sts	0x028A, r24
	vco2_init_cv = set_vco_init_cv(VCO2, 24079);
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	6f e0       	ldi	r22, 0x0F	; 15
     5c6:	7e e5       	ldi	r23, 0x5E	; 94
     5c8:	0e 94 4b 05 	call	0xa96	; 0xa96 <set_vco_init_cv>
     5cc:	90 93 89 02 	sts	0x0289, r25
     5d0:	80 93 88 02 	sts	0x0288, r24
	
	

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     5d4:	ce 01       	movw	r24, r28
     5d6:	0e 94 44 10 	call	0x2088	; 0x2088 <midi_device_process>
	
		update_display(value_to_display, DEC);
     5da:	80 91 96 01 	lds	r24, 0x0196
     5de:	90 91 97 01 	lds	r25, 0x0197
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
			
		scan_pots_and_update_control_voltages();
     5e8:	0e 94 03 03 	call	0x606	; 0x606 <scan_pots_and_update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     5ec:	80 91 f2 01 	lds	r24, 0x01F2
     5f0:	98 2f       	mov	r25, r24
     5f2:	9f 5f       	subi	r25, 0xFF	; 255
     5f4:	90 93 f2 01 	sts	0x01F2, r25
     5f8:	85 30       	cpi	r24, 0x05	; 5
     5fa:	61 f7       	brne	.-40     	; 0x5d4 <main+0x92>
		{
			switch_timer = 0;
     5fc:	10 92 f2 01 	sts	0x01F2, r1
			update_spi();
     600:	0e 94 71 04 	call	0x8e2	; 0x8e2 <update_spi>
     604:	e7 cf       	rjmp	.-50     	; 0x5d4 <main+0x92>

00000606 <scan_pots_and_update_control_voltages>:
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     606:	4f 92       	push	r4
     608:	5f 92       	push	r5
     60a:	6f 92       	push	r6
     60c:	7f 92       	push	r7
     60e:	8f 92       	push	r8
     610:	9f 92       	push	r9
     612:	af 92       	push	r10
     614:	bf 92       	push	r11
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     626:	02 e1       	ldi	r16, 0x12	; 18
     628:	12 e0       	ldi	r17, 0x02	; 2
     62a:	0f 2e       	mov	r0, r31
     62c:	f6 e7       	ldi	r31, 0x76	; 118
     62e:	cf 2e       	mov	r12, r31
     630:	f1 e0       	ldi	r31, 0x01	; 1
     632:	df 2e       	mov	r13, r31
     634:	f0 2d       	mov	r31, r0
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     636:	ee 24       	eor	r14, r14
     638:	ff 24       	eor	r15, r15
     63a:	e3 94       	inc	r14
     63c:	c0 e0       	ldi	r28, 0x00	; 0
     63e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     640:	0f 2e       	mov	r0, r31
     642:	fa e3       	ldi	r31, 0x3A	; 58
     644:	8f 2e       	mov	r8, r31
     646:	f1 e0       	ldi	r31, 0x01	; 1
     648:	9f 2e       	mov	r9, r31
     64a:	f0 2d       	mov	r31, r0
				
				break;
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     64c:	aa 24       	eor	r10, r10
     64e:	bb 24       	eor	r11, r11
     650:	68 94       	set
     652:	b1 f8       	bld	r11, 1
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     654:	0f 2e       	mov	r0, r31
     656:	f8 e3       	ldi	r31, 0x38	; 56
     658:	6f 2e       	mov	r6, r31
     65a:	f1 e0       	ldi	r31, 0x01	; 1
     65c:	7f 2e       	mov	r7, r31
     65e:	f0 2d       	mov	r31, r0
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     660:	0f 2e       	mov	r0, r31
     662:	f2 e4       	ldi	r31, 0x42	; 66
     664:	4f 2e       	mov	r4, r31
     666:	f1 e0       	ldi	r31, 0x01	; 1
     668:	5f 2e       	mov	r5, r31
     66a:	f0 2d       	mov	r31, r0
     66c:	08 c0       	rjmp	.+16     	; 0x67e <scan_pots_and_update_control_voltages+0x78>
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     66e:	21 96       	adiw	r28, 0x01	; 1
     670:	08 94       	sec
     672:	e1 1c       	adc	r14, r1
     674:	f1 1c       	adc	r15, r1
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	c8 0e       	add	r12, r24
     67c:	d9 1e       	adc	r13, r25

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{

		adc_value = read_pot(POTMUX_EN0, i);
     67e:	86 e0       	ldi	r24, 0x06	; 6
     680:	6c 2f       	mov	r22, r28
     682:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     686:	90 93 38 02 	sts	0x0238, r25
     68a:	80 93 37 02 	sts	0x0237, r24
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
     68e:	80 91 37 02 	lds	r24, 0x0237
     692:	90 91 38 02 	lds	r25, 0x0238
     696:	d8 01       	movw	r26, r16
     698:	6d 91       	ld	r22, X+
     69a:	7c 91       	ld	r23, X
     69c:	11 97       	sbiw	r26, 0x01	; 1
     69e:	86 1b       	sub	r24, r22
     6a0:	97 0b       	sbc	r25, r23
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
     6a2:	95 95       	asr	r25
     6a4:	87 95       	ror	r24
     6a6:	95 95       	asr	r25
     6a8:	87 95       	ror	r24
     6aa:	9c 01       	movw	r18, r24
     6ac:	26 0f       	add	r18, r22
     6ae:	37 1f       	adc	r19, r23
     6b0:	f8 01       	movw	r30, r16
     6b2:	21 93       	st	Z+, r18
     6b4:	31 93       	st	Z+, r19
     6b6:	8f 01       	movw	r16, r30
		int fine_offset = 0;
		
		switch (i)
     6b8:	c8 30       	cpi	r28, 0x08	; 8
     6ba:	d1 05       	cpc	r29, r1
     6bc:	71 f0       	breq	.+28     	; 0x6da <scan_pots_and_update_control_voltages+0xd4>
     6be:	c9 30       	cpi	r28, 0x09	; 9
     6c0:	d1 05       	cpc	r29, r1
     6c2:	24 f4       	brge	.+8      	; 0x6cc <scan_pots_and_update_control_voltages+0xc6>
     6c4:	c4 30       	cpi	r28, 0x04	; 4
     6c6:	d1 05       	cpc	r29, r1
     6c8:	b1 f5       	brne	.+108    	; 0x736 <scan_pots_and_update_control_voltages+0x130>
     6ca:	2a c0       	rjmp	.+84     	; 0x720 <scan_pots_and_update_control_voltages+0x11a>
     6cc:	c9 30       	cpi	r28, 0x09	; 9
     6ce:	d1 05       	cpc	r29, r1
     6d0:	b1 f0       	breq	.+44     	; 0x6fe <scan_pots_and_update_control_voltages+0xf8>
     6d2:	cb 30       	cpi	r28, 0x0B	; 11
     6d4:	d1 05       	cpc	r29, r1
     6d6:	79 f5       	brne	.+94     	; 0x736 <scan_pots_and_update_control_voltages+0x130>
     6d8:	3a c0       	rjmp	.+116    	; 0x74e <scan_pots_and_update_control_voltages+0x148>
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     6da:	60 91 88 02 	lds	r22, 0x0288
     6de:	70 91 89 02 	lds	r23, 0x0289
		switch (i)
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
     6e2:	60 50       	subi	r22, 0x00	; 0
     6e4:	7e 4f       	sbci	r23, 0xFE	; 254
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     6e6:	80 91 33 02 	lds	r24, 0x0233
     6ea:	90 91 34 02 	lds	r25, 0x0234
     6ee:	68 0f       	add	r22, r24
     6f0:	79 1f       	adc	r23, r25
     6f2:	62 1b       	sub	r22, r18
     6f4:	73 0b       	sbc	r23, r19
     6f6:	c4 01       	movw	r24, r8
     6f8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				
				break;
     6fc:	b8 cf       	rjmp	.-144    	; 0x66e <scan_pots_and_update_control_voltages+0x68>
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     6fe:	b5 01       	movw	r22, r10
     700:	62 1b       	sub	r22, r18
     702:	73 0b       	sbc	r23, r19
     704:	70 93 34 02 	sts	0x0234, r23
     708:	60 93 33 02 	sts	0x0233, r22
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     70c:	80 91 8a 02 	lds	r24, 0x028A
     710:	90 91 8b 02 	lds	r25, 0x028B
     714:	68 0f       	add	r22, r24
     716:	79 1f       	adc	r23, r25
     718:	c3 01       	movw	r24, r6
     71a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     71e:	a7 cf       	rjmp	.-178    	; 0x66e <scan_pots_and_update_control_voltages+0x68>
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     720:	b9 01       	movw	r22, r18
     722:	66 0f       	add	r22, r22
     724:	77 1f       	adc	r23, r23
     726:	66 0f       	add	r22, r22
     728:	77 1f       	adc	r23, r23
     72a:	66 0f       	add	r22, r22
     72c:	77 1f       	adc	r23, r23
     72e:	c2 01       	movw	r24, r4
     730:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     734:	9c cf       	rjmp	.-200    	; 0x66e <scan_pots_and_update_control_voltages+0x68>
			
			default: //set control voltage full-scale
				set_control_voltage(pot_decoder_0[i], pot_group_0[i] << 4);
     736:	b9 01       	movw	r22, r18
     738:	62 95       	swap	r22
     73a:	72 95       	swap	r23
     73c:	70 7f       	andi	r23, 0xF0	; 240
     73e:	76 27       	eor	r23, r22
     740:	60 7f       	andi	r22, 0xF0	; 240
     742:	76 27       	eor	r23, r22
     744:	d6 01       	movw	r26, r12
     746:	8d 91       	ld	r24, X+
     748:	9c 91       	ld	r25, X
     74a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	}; 
	
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     74e:	b0 e1       	ldi	r27, 0x10	; 16
     750:	eb 16       	cp	r14, r27
     752:	f1 04       	cpc	r15, r1
     754:	0c f4       	brge	.+2      	; 0x758 <scan_pots_and_update_control_voltages+0x152>
     756:	8b cf       	rjmp	.-234    	; 0x66e <scan_pots_and_update_control_voltages+0x68>
     758:	04 ef       	ldi	r16, 0xF4	; 244
     75a:	11 e0       	ldi	r17, 0x01	; 1
     75c:	0f 2e       	mov	r0, r31
     75e:	f8 e5       	ldi	r31, 0x58	; 88
     760:	ef 2e       	mov	r14, r31
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	ff 2e       	mov	r15, r31
     766:	f0 2d       	mov	r31, r0
     768:	c1 e0       	ldi	r28, 0x01	; 1
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     76a:	87 e0       	ldi	r24, 0x07	; 7
     76c:	6c 2f       	mov	r22, r28
     76e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     772:	90 93 38 02 	sts	0x0238, r25
     776:	80 93 37 02 	sts	0x0237, r24
		int adc_change = adc_value - pot_group_1[i];
     77a:	60 91 37 02 	lds	r22, 0x0237
     77e:	70 91 38 02 	lds	r23, 0x0238
     782:	f8 01       	movw	r30, r16
     784:	80 81       	ld	r24, Z
     786:	91 81       	ldd	r25, Z+1	; 0x01
     788:	68 1b       	sub	r22, r24
     78a:	79 0b       	sbc	r23, r25
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);		
     78c:	75 95       	asr	r23
     78e:	67 95       	ror	r22
     790:	75 95       	asr	r23
     792:	67 95       	ror	r22
     794:	68 0f       	add	r22, r24
     796:	79 1f       	adc	r23, r25
     798:	d8 01       	movw	r26, r16
     79a:	6d 93       	st	X+, r22
     79c:	7d 93       	st	X+, r23
     79e:	8d 01       	movw	r16, r26
		
		set_control_voltage(pot_decoder_1[i], pot_group_1[i] <<4);
     7a0:	62 95       	swap	r22
     7a2:	72 95       	swap	r23
     7a4:	70 7f       	andi	r23, 0xF0	; 240
     7a6:	76 27       	eor	r23, r22
     7a8:	60 7f       	andi	r22, 0xF0	; 240
     7aa:	76 27       	eor	r23, r22
     7ac:	f7 01       	movw	r30, r14
     7ae:	81 91       	ld	r24, Z+
     7b0:	91 91       	ld	r25, Z+
     7b2:	7f 01       	movw	r14, r30
     7b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
     7b8:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
	}
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     7ba:	c0 31       	cpi	r28, 0x10	; 16
     7bc:	b1 f6       	brne	.-84     	; 0x76a <scan_pots_and_update_control_voltages+0x164>
	}
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
     7be:	0e 94 90 00 	call	0x120	; 0x120 <get_current_note>
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     7c2:	88 30       	cpi	r24, 0x08	; 8
     7c4:	08 f4       	brcc	.+2      	; 0x7c8 <scan_pots_and_update_control_voltages+0x1c2>
     7c6:	88 e0       	ldi	r24, 0x08	; 8
	//value_to_display = note;
	uint8_t pitch_index = note>>3;
     7c8:	98 2f       	mov	r25, r24
     7ca:	96 95       	lsr	r25
     7cc:	96 95       	lsr	r25
     7ce:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
     7d0:	29 2f       	mov	r18, r25
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	e9 01       	movw	r28, r18
     7d6:	21 97       	sbiw	r28, 0x01	; 1
     7d8:	46 e6       	ldi	r20, 0x66	; 102
     7da:	52 e0       	ldi	r21, 0x02	; 2
     7dc:	cc 0f       	add	r28, r28
     7de:	dd 1f       	adc	r29, r29
     7e0:	fa 01       	movw	r30, r20
     7e2:	ec 0f       	add	r30, r28
     7e4:	fd 1f       	adc	r31, r29
     7e6:	01 90       	ld	r0, Z+
     7e8:	f0 81       	ld	r31, Z
     7ea:	e0 2d       	mov	r30, r0
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	//value_to_display = note;
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
     7ec:	99 0f       	add	r25, r25
     7ee:	99 0f       	add	r25, r25
     7f0:	99 0f       	add	r25, r25
     7f2:	89 1b       	sub	r24, r25
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
	uint16_t y1 = vco1_pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>
     7f4:	e8 2e       	mov	r14, r24
     7f6:	ff 24       	eor	r15, r15
	//value_to_display = note;
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
	uint16_t y1 = vco1_pitch_table[pitch_index];
     7f8:	89 01       	movw	r16, r18
     7fa:	00 0f       	add	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	40 0f       	add	r20, r16
     800:	51 1f       	adc	r21, r17
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>
     802:	da 01       	movw	r26, r20
     804:	8d 91       	ld	r24, X+
     806:	9c 91       	ld	r25, X
     808:	8e 1b       	sub	r24, r30
     80a:	9f 0b       	sbc	r25, r31
     80c:	8e 9d       	mul	r24, r14
     80e:	b0 01       	movw	r22, r0
     810:	8f 9d       	mul	r24, r15
     812:	70 0d       	add	r23, r0
     814:	9e 9d       	mul	r25, r14
     816:	70 0d       	add	r23, r0
     818:	11 24       	eor	r1, r1
     81a:	76 95       	lsr	r23
     81c:	67 95       	ror	r22
     81e:	76 95       	lsr	r23
     820:	67 95       	ror	r22
     822:	76 95       	lsr	r23
     824:	67 95       	ror	r22
     826:	6e 0f       	add	r22, r30
     828:	7f 1f       	adc	r23, r31
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     82a:	8c e4       	ldi	r24, 0x4C	; 76
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	y0 = vco2_pitch_table[pitch_index - 1];
     832:	84 e4       	ldi	r24, 0x44	; 68
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	c8 0f       	add	r28, r24
     838:	d9 1f       	adc	r29, r25
     83a:	48 81       	ld	r20, Y
     83c:	59 81       	ldd	r21, Y+1	; 0x01
	y1 = vco2_pitch_table[pitch_index];
     83e:	80 0f       	add	r24, r16
     840:	91 1f       	adc	r25, r17
	
	interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3);
     842:	fc 01       	movw	r30, r24
     844:	80 81       	ld	r24, Z
     846:	91 81       	ldd	r25, Z+1	; 0x01
     848:	84 1b       	sub	r24, r20
     84a:	95 0b       	sbc	r25, r21
     84c:	8e 9d       	mul	r24, r14
     84e:	b0 01       	movw	r22, r0
     850:	8f 9d       	mul	r24, r15
     852:	70 0d       	add	r23, r0
     854:	9e 9d       	mul	r25, r14
     856:	70 0d       	add	r23, r0
     858:	11 24       	eor	r1, r1
     85a:	76 95       	lsr	r23
     85c:	67 95       	ror	r22
     85e:	76 95       	lsr	r23
     860:	67 95       	ror	r22
     862:	76 95       	lsr	r23
     864:	67 95       	ror	r22
     866:	64 0f       	add	r22, r20
     868:	75 1f       	adc	r23, r21
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv); 
     86a:	8a e4       	ldi	r24, 0x4A	; 74
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     872:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     874:	a1 9a       	sbi	0x14, 1	; 20
	
	
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	bf 90       	pop	r11
     888:	af 90       	pop	r10
     88a:	9f 90       	pop	r9
     88c:	8f 90       	pop	r8
     88e:	7f 90       	pop	r7
     890:	6f 90       	pop	r6
     892:	5f 90       	pop	r5
     894:	4f 90       	pop	r4
     896:	08 95       	ret

00000898 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     898:	84 b1       	in	r24, 0x04	; 4
     89a:	87 62       	ori	r24, 0x27	; 39
     89c:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     89e:	ec ed       	ldi	r30, 0xDC	; 220
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	8c 65       	ori	r24, 0x5C	; 92
     8a6:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     8a8:	85 b1       	in	r24, 0x05	; 5
     8aa:	89 7d       	andi	r24, 0xD9	; 217
     8ac:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     8ae:	ed ed       	ldi	r30, 0xDD	; 221
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	83 7f       	andi	r24, 0xF3	; 243
     8b6:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     8b8:	80 e5       	ldi	r24, 0x50	; 80
     8ba:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     8bc:	80 81       	ld	r24, Z
     8be:	87 7f       	andi	r24, 0xF7	; 247
     8c0:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     8c2:	80 81       	ld	r24, Z
     8c4:	87 7f       	andi	r24, 0xF7	; 247
     8c6:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     8c8:	80 81       	ld	r24, Z
     8ca:	88 60       	ori	r24, 0x08	; 8
     8cc:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     8ce:	80 81       	ld	r24, Z
     8d0:	8f 7e       	andi	r24, 0xEF	; 239
     8d2:	80 83       	st	Z, r24
	
}
     8d4:	08 95       	ret

000008d6 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     8d6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     8d8:	0d b4       	in	r0, 0x2d	; 45
     8da:	07 fe       	sbrs	r0, 7
     8dc:	fd cf       	rjmp	.-6      	; 0x8d8 <spi_shift_byte+0x2>
	return SPDR;
     8de:	8e b5       	in	r24, 0x2e	; 46
	
}
     8e0:	08 95       	ret

000008e2 <update_spi>:

void update_spi(void) {
     8e2:	cf 93       	push	r28
	
			SPI_PORT |= SPI_SW_LATCH;
     8e4:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
     8e6:	c0 91 3b 02 	lds	r28, 0x023B
			((switch_state_byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_state_byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_state_byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
			((switch_state_byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
			((switch_state_byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
			BMOD_SW_ON << BMOD;
     8ea:	90 91 3c 02 	lds	r25, 0x023C
     8ee:	97 95       	ror	r25
     8f0:	99 27       	eor	r25, r25
     8f2:	97 95       	ror	r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     8f4:	2c 2f       	mov	r18, r28
     8f6:	21 70       	andi	r18, 0x01	; 1
     8f8:	92 2b       	or	r25, r18
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
     8fa:	8c 2f       	mov	r24, r28
     8fc:	88 1f       	adc	r24, r24
     8fe:	88 27       	eor	r24, r24
     900:	88 1f       	adc	r24, r24
     902:	88 0f       	add	r24, r24
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     904:	89 2b       	or	r24, r25
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_state_byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
     906:	ec 2f       	mov	r30, r28
     908:	e6 95       	lsr	r30
     90a:	e6 95       	lsr	r30
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	e1 70       	andi	r30, 0x01	; 1
     910:	f0 70       	andi	r31, 0x00	; 0
     912:	bf 01       	movw	r22, r30
     914:	66 0f       	add	r22, r22
     916:	77 1f       	adc	r23, r23
     918:	66 0f       	add	r22, r22
     91a:	77 1f       	adc	r23, r23
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     91c:	86 2b       	or	r24, r22
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_state_byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_state_byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
     91e:	6c 2f       	mov	r22, r28
     920:	66 95       	lsr	r22
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	61 70       	andi	r22, 0x01	; 1
     926:	70 70       	andi	r23, 0x00	; 0
     928:	ab 01       	movw	r20, r22
     92a:	44 0f       	add	r20, r20
     92c:	55 1f       	adc	r21, r21
     92e:	44 0f       	add	r20, r20
     930:	55 1f       	adc	r21, r21
     932:	44 0f       	add	r20, r20
     934:	55 1f       	adc	r21, r21
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     936:	68 2f       	mov	r22, r24
     938:	64 2b       	or	r22, r20
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_state_byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_state_byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_state_byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_state_byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
     93a:	4c 2f       	mov	r20, r28
     93c:	42 95       	swap	r20
     93e:	4f 70       	andi	r20, 0x0F	; 15
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	41 70       	andi	r20, 0x01	; 1
     944:	50 70       	andi	r21, 0x00	; 0
     946:	9a 01       	movw	r18, r20
     948:	22 95       	swap	r18
     94a:	32 95       	swap	r19
     94c:	30 7f       	andi	r19, 0xF0	; 240
     94e:	32 27       	eor	r19, r18
     950:	20 7f       	andi	r18, 0xF0	; 240
     952:	32 27       	eor	r19, r18
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     954:	46 2f       	mov	r20, r22
     956:	42 2b       	or	r20, r18
			((switch_state_byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |
			((switch_state_byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_state_byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_state_byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_state_byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
			((switch_state_byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
     958:	2c 2f       	mov	r18, r28
     95a:	22 95       	swap	r18
     95c:	26 95       	lsr	r18
     95e:	27 70       	andi	r18, 0x07	; 7
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	21 70       	andi	r18, 0x01	; 1
     964:	30 70       	andi	r19, 0x00	; 0
     966:	c9 01       	movw	r24, r18
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	82 95       	swap	r24
     96e:	92 95       	swap	r25
     970:	90 7f       	andi	r25, 0xF0	; 240
     972:	98 27       	eor	r25, r24
     974:	80 7f       	andi	r24, 0xF0	; 240
     976:	98 27       	eor	r25, r24
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = //Need to farm this out to some kind of switch/LED data parser that preps LED SPI outgoing bytes
     978:	84 2b       	or	r24, r20
			((switch_state_byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
			((switch_state_byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
			((switch_state_byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
			((switch_state_byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
			((switch_state_byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
			((switch_state_byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
     97a:	2c 2f       	mov	r18, r28
     97c:	22 95       	swap	r18
     97e:	26 95       	lsr	r18
     980:	26 95       	lsr	r18
     982:	23 70       	andi	r18, 0x03	; 3
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	21 70       	andi	r18, 0x01	; 1
     988:	30 70       	andi	r19, 0x00	; 0
     98a:	00 24       	eor	r0, r0
     98c:	36 95       	lsr	r19
     98e:	27 95       	ror	r18
     990:	07 94       	ror	r0
     992:	36 95       	lsr	r19
     994:	27 95       	ror	r18
     996:	07 94       	ror	r0
     998:	32 2f       	mov	r19, r18
     99a:	20 2d       	mov	r18, r0
			BMOD_SW_ON << BMOD;
			
					
			//Now read SPDR for switch data shifted in from 74XX165 U14
			spi_sw_byte0_current_state = spi_shift_byte(spi_data);
     99c:	82 2b       	or	r24, r18
     99e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     9a2:	90 91 3e 02 	lds	r25, 0x023E
     9a6:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     9a8:	98 27       	eor	r25, r24
     9aa:	90 93 3e 02 	sts	0x023E, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     9ae:	98 23       	and	r25, r24
     9b0:	90 93 3d 02 	sts	0x023D, r25
			
			//toggle switch state		
			switch_state_byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     9b4:	9c 27       	eor	r25, r28
     9b6:	90 93 3b 02 	sts	0x023B, r25
			
			//SHIFT 4th BYTE
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			switch_state_byte1 = spi_shift_byte(spi_data);
     9ba:	82 e2       	ldi	r24, 0x22	; 34
     9bc:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <spi_shift_byte>
     9c0:	80 93 3f 02 	sts	0x023F, r24
			//toggling not implemented here yet.
			ARP_MODE_SW_ON = (switch_state_byte1 >> ARP_MODE_SW) & 1;
     9c4:	c8 2f       	mov	r28, r24
     9c6:	c2 95       	swap	r28
     9c8:	c6 95       	lsr	r28
     9ca:	c7 70       	andi	r28, 0x07	; 7
     9cc:	c1 70       	andi	r28, 0x01	; 1
     9ce:	c0 93 40 02 	sts	0x0240, r28
			//check if ARP_SYNC_SW bit is set
			ARP_SYNC_SW_ON = (switch_state_byte1 >> ARP_SYNC_SW) & 1;
     9d2:	82 95       	swap	r24
     9d4:	86 95       	lsr	r24
     9d6:	86 95       	lsr	r24
     9d8:	83 70       	andi	r24, 0x03	; 3
     9da:	81 70       	andi	r24, 0x01	; 1
     9dc:	80 93 41 02 	sts	0x0241, r24

			
			//SHIFT 3th BYTE
			spi_shift_byte(0);
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(0);
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <spi_shift_byte>
			
			//SHIFT 1st BYTE			
			spi_data = (ARP_MODE_SW_ON << ARP_MODE) | (PROG_WRITE_ON << PROG_WRITE) | (EG2_INV_ON << EG2_INV); 
     9ec:	80 91 42 02 	lds	r24, 0x0242
     9f0:	87 95       	ror	r24
     9f2:	88 27       	eor	r24, r24
     9f4:	87 95       	ror	r24
     9f6:	90 91 43 02 	lds	r25, 0x0243
     9fa:	89 2b       	or	r24, r25
     9fc:	cc 0f       	add	r28, r28
     9fe:	cc 0f       	add	r28, r28
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     a00:	8c 2b       	or	r24, r28
     a02:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     a06:	ed ed       	ldi	r30, 0xDD	; 221
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	87 7f       	andi	r24, 0xF7	; 247
     a0e:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     a10:	80 81       	ld	r24, Z
     a12:	88 60       	ori	r24, 0x08	; 8
     a14:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     a16:	2d 98       	cbi	0x05, 5	; 5
			
			//EVERYTHING BELOW NEEDS TO BE MOVED OUT OF SPI FUNCTION//
			
			//now read switches directly connected to MCU
			uint8_t current_sw_state = read_switch_port();
     a18:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <read_switch_port>
			
			if (current_sw_state & (1<<BMOD_SW))
     a1c:	82 ff       	sbrs	r24, 2
     a1e:	06 c0       	rjmp	.+12     	; 0xa2c <update_spi+0x14a>
			{
				BMOD_SW_ON ^= 1 << 0; //toggle switch state
     a20:	30 91 3c 02 	lds	r19, 0x023C
     a24:	21 e0       	ldi	r18, 0x01	; 1
     a26:	23 27       	eor	r18, r19
     a28:	20 93 3c 02 	sts	0x023C, r18
			}
			
			if (current_sw_state & (1<<PROG_WRITE_SW)) {
     a2c:	84 ff       	sbrs	r24, 4
     a2e:	06 c0       	rjmp	.+12     	; 0xa3c <update_spi+0x15a>
				
				PROG_WRITE_ON ^= 1 << 0; //toggle switch state
     a30:	30 91 42 02 	lds	r19, 0x0242
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	23 27       	eor	r18, r19
     a38:	20 93 42 02 	sts	0x0242, r18
			}
			
			if (current_sw_state & (1<<EG2_INV_SW)) {
     a3c:	83 ff       	sbrs	r24, 3
     a3e:	06 c0       	rjmp	.+12     	; 0xa4c <update_spi+0x16a>
				
				EG2_INV_ON ^= 1 << 0; //toggle switch state
     a40:	90 91 43 02 	lds	r25, 0x0243
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	89 27       	eor	r24, r25
     a48:	80 93 43 02 	sts	0x0243, r24
			
			//update analog switch latch:
			//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
			//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
			uint8_t switch_state_byte = switch_state_byte0;
			switch_state_byte ^= (-BMOD_SW_ON ^ switch_state_byte) & (1<<3);//set third bit dependent on 
     a4c:	90 91 3b 02 	lds	r25, 0x023B
     a50:	80 91 3c 02 	lds	r24, 0x023C
     a54:	81 95       	neg	r24
     a56:	89 27       	eor	r24, r25
     a58:	88 70       	andi	r24, 0x08	; 8
			update_analog_switch_latch(switch_state_byte);
     a5a:	89 27       	eor	r24, r25
     a5c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <update_analog_switch_latch>

			
			//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
			//need to make sure this doesn't interfere with anything else on this port
			EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     a60:	ed ed       	ldi	r30, 0xDD	; 221
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	90 81       	ld	r25, Z
     a66:	20 81       	ld	r18, Z
     a68:	80 91 43 02 	lds	r24, 0x0243
     a6c:	81 95       	neg	r24
     a6e:	82 27       	eor	r24, r18
     a70:	80 71       	andi	r24, 0x10	; 16
     a72:	89 27       	eor	r24, r25
     a74:	80 83       	st	Z, r24
			
			if (PROG_WRITE_ON) { //temporary tune button hack
     a76:	80 91 42 02 	lds	r24, 0x0242
     a7a:	88 23       	and	r24, r24
     a7c:	51 f0       	breq	.+20     	; 0xa92 <update_spi+0x1b0>
				
				PROG_WRITE_ON ^= 1<<0; //toggle switch state
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	89 27       	eor	r24, r25
     a82:	80 93 42 02 	sts	0x0242, r24
				current_sw_state ^= (1<<PROG_WRITE_SW); //toggle read switch state
				//vco1_init_cv = set_vco_init_cv(VCO1, 24079);
				//vco2_init_cv = set_vco_init_cv(VCO2, 24079);
				tune_8ths(VCO1); //first VCO tuned will occassionally mess up the tuning of its first note. Issue still not resolved
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 1d 09 	call	0x123a	; 0x123a <tune_8ths>
				tune_8ths(VCO2);
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	0e 94 1d 09 	call	0x123a	; 0x123a <tune_8ths>
				//tune_8ths(VCO1); //retune VCO1 to test first VCO tuned bug
				
			}
	
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <set_vco_init_cv>:
volatile uint16_t vco2_init_cv = 0;

uint16_t vco1_pitch_table[17] = {0};
uint16_t vco2_pitch_table[17] = {0};
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { //should add extra argument here to set reference count for base frequency
     a96:	2f 92       	push	r2
     a98:	3f 92       	push	r3
     a9a:	4f 92       	push	r4
     a9c:	5f 92       	push	r5
     a9e:	6f 92       	push	r6
     aa0:	7f 92       	push	r7
     aa2:	8f 92       	push	r8
     aa4:	9f 92       	push	r9
     aa6:	af 92       	push	r10
     aa8:	bf 92       	push	r11
     aaa:	cf 92       	push	r12
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	2a 97       	sbiw	r28, 0x0a	; 10
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	08 2f       	mov	r16, r24
     acc:	78 87       	std	Y+8, r23	; 0x08
     ace:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	 timer1_clock |= (1<<CS11) | (1<<CS10);
     ad0:	80 91 90 02 	lds	r24, 0x0290
     ad4:	83 60       	ori	r24, 0x03	; 3
     ad6:	80 93 90 02 	sts	0x0290, r24
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     ada:	80 e3       	ldi	r24, 0x30	; 48
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     ae6:	82 e4       	ldi	r24, 0x42	; 66
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     af2:	84 e4       	ldi	r24, 0x44	; 68
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     afe:	8f ee       	ldi	r24, 0xEF	; 239
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     b0a:	84 e3       	ldi	r24, 0x34	; 52
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     b16:	8e e3       	ldi	r24, 0x3E	; 62
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     b22:	80 e4       	ldi	r24, 0x40	; 64
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     b2e:	82 e2       	ldi	r24, 0x22	; 34
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     b3a:	8c e2       	ldi	r24, 0x2C	; 44
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     b46:	84 e2       	ldi	r24, 0x24	; 36
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     b52:	86 e2       	ldi	r24, 0x26	; 38
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     b5e:	88 e2       	ldi	r24, 0x28	; 40
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	6f ef       	ldi	r22, 0xFF	; 255
     b64:	7f e3       	ldi	r23, 0x3F	; 63
     b66:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     b6a:	8a e2       	ldi	r24, 0x2A	; 42
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     b76:	82 e3       	ldi	r24, 0x32	; 50
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     b82:	8c e1       	ldi	r24, 0x1C	; 28
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     b8e:	88 e1       	ldi	r24, 0x18	; 24
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     b9a:	84 e1       	ldi	r24, 0x14	; 20
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	6f ef       	ldi	r22, 0xFF	; 255
     ba0:	7f e3       	ldi	r23, 0x3F	; 63
     ba2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     ba6:	80 e1       	ldi	r24, 0x10	; 16
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     bb2:	80 e2       	ldi	r24, 0x20	; 32
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
     bbe:	10 92 8f 02 	sts	0x028F, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
     bc2:	00 23       	and	r16, r16
     bc4:	c1 f4       	brne	.+48     	; 0xbf6 <set_vco_init_cv+0x160>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     bc6:	0f 2e       	mov	r0, r31
     bc8:	fc e4       	ldi	r31, 0x4C	; 76
     bca:	4f 2e       	mov	r4, r31
     bcc:	f1 e0       	ldi	r31, 0x01	; 1
     bce:	5f 2e       	mov	r5, r31
     bd0:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     bd2:	0f 2e       	mov	r0, r31
     bd4:	fc e3       	ldi	r31, 0x3C	; 60
     bd6:	2f 2e       	mov	r2, r31
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
     bda:	3f 2e       	mov	r3, r31
     bdc:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     bde:	26 e4       	ldi	r18, 0x46	; 70
     be0:	31 e0       	ldi	r19, 0x01	; 1
     be2:	3a 83       	std	Y+2, r19	; 0x02
     be4:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     be6:	0f 2e       	mov	r0, r31
     be8:	f8 e3       	ldi	r31, 0x38	; 56
     bea:	8f 2e       	mov	r8, r31
     bec:	f1 e0       	ldi	r31, 0x01	; 1
     bee:	9f 2e       	mov	r9, r31
     bf0:	f0 2d       	mov	r31, r0

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	17 c0       	rjmp	.+46     	; 0xc24 <set_vco_init_cv+0x18e>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     bf6:	0f 2e       	mov	r0, r31
     bf8:	fa e4       	ldi	r31, 0x4A	; 74
     bfa:	4f 2e       	mov	r4, r31
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	5f 2e       	mov	r5, r31
     c00:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     c02:	0f 2e       	mov	r0, r31
     c04:	fe e2       	ldi	r31, 0x2E	; 46
     c06:	2f 2e       	mov	r2, r31
     c08:	f1 e0       	ldi	r31, 0x01	; 1
     c0a:	3f 2e       	mov	r3, r31
     c0c:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     c0e:	88 e4       	ldi	r24, 0x48	; 72
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	9a 83       	std	Y+2, r25	; 0x02
     c14:	89 83       	std	Y+1, r24	; 0x01
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     c16:	0f 2e       	mov	r0, r31
     c18:	fa e3       	ldi	r31, 0x3A	; 58
     c1a:	8f 2e       	mov	r8, r31
     c1c:	f1 e0       	ldi	r31, 0x01	; 1
     c1e:	9f 2e       	mov	r9, r31
     c20:	f0 2d       	mov	r31, r0
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
     c22:	80 e4       	ldi	r24, 0x40	; 64
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
     c24:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     c26:	ed ed       	ldi	r30, 0xDD	; 221
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	80 64       	ori	r24, 0x40	; 64
     c2e:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     c30:	80 81       	ld	r24, Z
     c32:	8f 7b       	andi	r24, 0xBF	; 191
     c34:	80 83       	st	Z, r24
	DATA_BUS = 0;
     c36:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
     c38:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
     c3a:	84 b5       	in	r24, 0x24	; 36
     c3c:	8f 60       	ori	r24, 0x0F	; 15
     c3e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
     c44:	ee e6       	ldi	r30, 0x6E	; 110
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	90 81       	ld	r25, Z
     c4a:	92 60       	ori	r25, 0x02	; 2
     c4c:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
     c4e:	80 93 91 02 	sts	0x0291, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     c52:	ed e0       	ldi	r30, 0x0D	; 13
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	fc 83       	std	Y+4, r31	; 0x04
     c58:	eb 83       	std	Y+3, r30	; 0x03
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
     c5a:	80 2f       	mov	r24, r16
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	8c 01       	movw	r16, r24
     c60:	0f 5f       	subi	r16, 0xFF	; 255
     c62:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
     c64:	0f 2e       	mov	r0, r31
     c66:	f0 e3       	ldi	r31, 0x30	; 48
     c68:	ef 2e       	mov	r14, r31
     c6a:	f1 e0       	ldi	r31, 0x01	; 1
     c6c:	ff 2e       	mov	r15, r31
     c6e:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
     c70:	0f 2e       	mov	r0, r31
     c72:	f8 e2       	ldi	r31, 0x28	; 40
     c74:	cf 2e       	mov	r12, r31
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	df 2e       	mov	r13, r31
     c7a:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
     c7c:	0f 2e       	mov	r0, r31
     c7e:	f4 e1       	ldi	r31, 0x14	; 20
     c80:	af 2e       	mov	r10, r31
     c82:	f1 e0       	ldi	r31, 0x01	; 1
     c84:	bf 2e       	mov	r11, r31
     c86:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     c88:	0f 2e       	mov	r0, r31
     c8a:	f6 e1       	ldi	r31, 0x16	; 22
     c8c:	6f 2e       	mov	r6, r31
     c8e:	f1 e0       	ldi	r31, 0x01	; 1
     c90:	7f 2e       	mov	r7, r31
     c92:	f0 2d       	mov	r31, r0
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	3a 87       	std	Y+10, r19	; 0x0a
     c9a:	29 87       	std	Y+9, r18	; 0x09
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0b 80       	ldd	r0, Y+3	; 0x03
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <set_vco_init_cv+0x212>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <set_vco_init_cv+0x20e>
     cac:	9e 83       	std	Y+6, r25	; 0x06
     cae:	8d 83       	std	Y+5, r24	; 0x05
     cb0:	e9 85       	ldd	r30, Y+9	; 0x09
     cb2:	fa 85       	ldd	r31, Y+10	; 0x0a
     cb4:	e8 2b       	or	r30, r24
     cb6:	f9 2b       	or	r31, r25
     cb8:	fa 87       	std	Y+10, r31	; 0x0a
     cba:	e9 87       	std	Y+9, r30	; 0x09
		
		set_control_voltage(vco_init_cv, init_cv);
     cbc:	c4 01       	movw	r24, r8
     cbe:	bf 01       	movw	r22, r30
     cc0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		
		count_finished = FALSE;
     cc4:	10 92 8f 02 	sts	0x028F, r1
		period_counter = 0;
     cc8:	10 92 92 02 	sts	0x0292, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     ccc:	80 91 8f 02 	lds	r24, 0x028F
     cd0:	88 23       	and	r24, r24
     cd2:	89 f5       	brne	.+98     	; 0xd36 <set_vco_init_cv+0x2a0>
			
			update_display(vco + 1, DEC);
     cd4:	c8 01       	movw	r24, r16
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
     cdc:	c4 01       	movw	r24, r8
     cde:	69 85       	ldd	r22, Y+9	; 0x09
     ce0:	7a 85       	ldd	r23, Y+10	; 0x0a
     ce2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
     ce6:	c1 01       	movw	r24, r2
     ce8:	6f ef       	ldi	r22, 0xFF	; 255
     cea:	7f e3       	ldi	r23, 0x3F	; 63
     cec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
     cf0:	c7 01       	movw	r24, r14
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
     cfa:	c6 01       	movw	r24, r12
     cfc:	6f ef       	ldi	r22, 0xFF	; 255
     cfe:	7f e3       	ldi	r23, 0x3F	; 63
     d00:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
     d04:	c5 01       	movw	r24, r10
     d06:	6f ef       	ldi	r22, 0xFF	; 255
     d08:	7f e3       	ldi	r23, 0x3F	; 63
     d0a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     d0e:	c3 01       	movw	r24, r6
     d10:	6f ef       	ldi	r22, 0xFF	; 255
     d12:	7f e3       	ldi	r23, 0x3F	; 63
     d14:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	9a 81       	ldd	r25, Y+2	; 0x02
     d1c:	6f ef       	ldi	r22, 0xFF	; 255
     d1e:	7f e3       	ldi	r23, 0x3F	; 63
     d20:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
     d24:	c2 01       	movw	r24, r4
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		count_finished = FALSE;
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     d2e:	80 91 8f 02 	lds	r24, 0x028F
     d32:	88 23       	and	r24, r24
     d34:	79 f2       	breq	.-98     	; 0xcd4 <set_vco_init_cv+0x23e>
			set_control_voltage(vco_pitch_cv, 0);	
			
		}
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE not AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
     d36:	80 91 8d 02 	lds	r24, 0x028D
     d3a:	90 91 8e 02 	lds	r25, 0x028E
     d3e:	ef 81       	ldd	r30, Y+7	; 0x07
     d40:	f8 85       	ldd	r31, Y+8	; 0x08
     d42:	e8 17       	cp	r30, r24
     d44:	f9 07       	cpc	r31, r25
     d46:	20 f0       	brcs	.+8      	; 0xd50 <set_vco_init_cv+0x2ba>
     d48:	80 91 ea 01 	lds	r24, 0x01EA
     d4c:	88 23       	and	r24, r24
     d4e:	51 f4       	brne	.+20     	; 0xd64 <set_vco_init_cv+0x2ce>
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	9e 81       	ldd	r25, Y+6	; 0x06
     d54:	80 95       	com	r24
     d56:	90 95       	com	r25
     d58:	29 85       	ldd	r18, Y+9	; 0x09
     d5a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d5c:	28 23       	and	r18, r24
     d5e:	39 23       	and	r19, r25
     d60:	3a 87       	std	Y+10, r19	; 0x0a
     d62:	29 87       	std	Y+9, r18	; 0x09
		no_overflow = TRUE;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	80 93 ea 01 	sts	0x01EA, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	9c 83       	std	Y+4, r25	; 0x04
     d72:	8b 83       	std	Y+3, r24	; 0x03
     d74:	ef ef       	ldi	r30, 0xFF	; 255
     d76:	8f 3f       	cpi	r24, 0xFF	; 255
     d78:	9e 07       	cpc	r25, r30
     d7a:	09 f0       	breq	.+2      	; 0xd7e <set_vco_init_cv+0x2e8>
     d7c:	8f cf       	rjmp	.-226    	; 0xc9c <set_vco_init_cv+0x206>
     d7e:	29 85       	ldd	r18, Y+9	; 0x09
     d80:	3a 85       	ldd	r19, Y+10	; 0x0a
     d82:	3e 83       	std	Y+6, r19	; 0x06
     d84:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
     d86:	80 e1       	ldi	r24, 0x10	; 16
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
     d92:	82 e1       	ldi	r24, 0x12	; 18
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
     d9e:	88 e2       	ldi	r24, 0x28	; 40
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
     daa:	80 e3       	ldi	r24, 0x30	; 48
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
     db6:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
     db8:	ee e6       	ldi	r30, 0x6E	; 110
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8d 7f       	andi	r24, 0xFD	; 253
     dc0:	80 83       	st	Z, r24
	
	return init_cv;
	
}
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	2a 96       	adiw	r28, 0x0a	; 10
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	bf 90       	pop	r11
     de4:	af 90       	pop	r10
     de6:	9f 90       	pop	r9
     de8:	8f 90       	pop	r8
     dea:	7f 90       	pop	r7
     dec:	6f 90       	pop	r6
     dee:	5f 90       	pop	r5
     df0:	4f 90       	pop	r4
     df2:	3f 90       	pop	r3
     df4:	2f 90       	pop	r2
     df6:	08 95       	ret

00000df8 <tune_octave>:

void tune_octave(uint8_t octave, uint8_t vco) {
     df8:	2f 92       	push	r2
     dfa:	3f 92       	push	r3
     dfc:	4f 92       	push	r4
     dfe:	5f 92       	push	r5
     e00:	6f 92       	push	r6
     e02:	7f 92       	push	r7
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	e6 97       	sbiw	r28, 0x36	; 54
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	f8 2e       	mov	r15, r24
     e2e:	06 2f       	mov	r16, r22

	uint16_t pitch_reference[12] = { //holds the 16 bit timer counts for each note within an octave independent of octave # being tuned
     e30:	de 01       	movw	r26, r28
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	e8 e9       	ldi	r30, 0x98	; 152
     e36:	f1 e0       	ldi	r31, 0x01	; 1
     e38:	88 e1       	ldi	r24, 0x18	; 24
     e3a:	01 90       	ld	r0, Z+
     e3c:	0d 92       	st	X+, r0
     e3e:	81 50       	subi	r24, 0x01	; 1
     e40:	e1 f7       	brne	.-8      	; 0xe3a <tune_octave+0x42>
	PITCH_Ab,
	PITCH_B
	    
    };
	
	uint8_t period_table[10] = {1, 2, 4, 1, 2, 4, 8, 16, 32, 64}; //the number of  periods that need to be counted for octaves 0-9
     e42:	de 01       	movw	r26, r28
     e44:	59 96       	adiw	r26, 0x19	; 25
     e46:	e0 eb       	ldi	r30, 0xB0	; 176
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	8a e0       	ldi	r24, 0x0A	; 10
     e4c:	01 90       	ld	r0, Z+
     e4e:	0d 92       	st	X+, r0
     e50:	81 50       	subi	r24, 0x01	; 1
     e52:	e1 f7       	brne	.-8      	; 0xe4c <tune_octave+0x54>
	//octaves 0-2 use /64 0.312500 MHz timer/counter1 clock rate
	//octaves 3-9 use /8 2.5 MHz timer/counter1 clock rate
	
	period = period_table[octave]; //set period number to be counted
     e54:	af 2c       	mov	r10, r15
     e56:	bb 24       	eor	r11, r11
     e58:	fe 01       	movw	r30, r28
     e5a:	ea 0d       	add	r30, r10
     e5c:	fb 1d       	adc	r31, r11
     e5e:	81 8d       	ldd	r24, Z+25	; 0x19
     e60:	80 93 91 02 	sts	0x0291, r24
	
	//to do:
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     e64:	80 e3       	ldi	r24, 0x30	; 48
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     e70:	82 e4       	ldi	r24, 0x42	; 66
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     e7c:	84 e4       	ldi	r24, 0x44	; 68
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     e88:	8f ee       	ldi	r24, 0xEF	; 239
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     e94:	84 e3       	ldi	r24, 0x34	; 52
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     ea0:	8e e3       	ldi	r24, 0x3E	; 62
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     eac:	80 e4       	ldi	r24, 0x40	; 64
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     eb8:	82 e2       	ldi	r24, 0x22	; 34
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     ec4:	8c e2       	ldi	r24, 0x2C	; 44
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     ed0:	84 e2       	ldi	r24, 0x24	; 36
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     edc:	86 e2       	ldi	r24, 0x26	; 38
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     ee8:	88 e2       	ldi	r24, 0x28	; 40
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	6f ef       	ldi	r22, 0xFF	; 255
     eee:	7f e3       	ldi	r23, 0x3F	; 63
     ef0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     ef4:	8a e2       	ldi	r24, 0x2A	; 42
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     f00:	82 e3       	ldi	r24, 0x32	; 50
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     f0c:	8c e1       	ldi	r24, 0x1C	; 28
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     f18:	88 e1       	ldi	r24, 0x18	; 24
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     f24:	84 e1       	ldi	r24, 0x14	; 20
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	6f ef       	ldi	r22, 0xFF	; 255
     f2a:	7f e3       	ldi	r23, 0x3F	; 63
     f2c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     f30:	80 e1       	ldi	r24, 0x10	; 16
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     f3c:	80 e2       	ldi	r24, 0x20	; 32
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;	

	if (vco == VCO1) { //set up parameters for VCO1 tuning
     f48:	00 23       	and	r16, r16
     f4a:	09 f5       	brne	.+66     	; 0xf8e <tune_octave+0x196>
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
		init_cv = vco1_init_cv;
     f4c:	20 91 8a 02 	lds	r18, 0x028A
     f50:	30 91 8b 02 	lds	r19, 0x028B
     f54:	3e a3       	lds	r19, 0x5e
     f56:	2d a3       	lds	r18, 0x5d
		//turn on VCO1 SAW, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     f58:	0f 2e       	mov	r0, r31
     f5a:	fc e4       	ldi	r31, 0x4C	; 76
     f5c:	2f 2e       	mov	r2, r31
     f5e:	f1 e0       	ldi	r31, 0x01	; 1
     f60:	3f 2e       	mov	r3, r31
     f62:	f0 2d       	mov	r31, r0

		//turn on VCO1 SAW, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     f64:	8c e3       	ldi	r24, 0x3C	; 60
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	9c a7       	lds	r25, 0x7c
     f6a:	8b a7       	lds	r24, 0x7b
	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     f6c:	e6 e4       	ldi	r30, 0x46	; 70
     f6e:	f1 e0       	ldi	r31, 0x01	; 1
     f70:	fa a7       	lds	r31, 0x7a
     f72:	e9 a7       	lds	r30, 0x79

	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     f74:	28 e3       	ldi	r18, 0x38	; 56
     f76:	31 e0       	ldi	r19, 0x01	; 1
     f78:	38 a7       	lds	r19, 0x78
     f7a:	2f a3       	lds	r18, 0x5f
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
		init_cv = vco1_init_cv;
		vco_pitch_table = vco1_pitch_table;
     f7c:	06 e6       	ldi	r16, 0x66	; 102
     f7e:	12 e0       	ldi	r17, 0x02	; 2
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
     f80:	0f 2e       	mov	r0, r31
     f82:	fa e0       	ldi	r31, 0x0A	; 10
     f84:	cf 2e       	mov	r12, r31
     f86:	f0 2d       	mov	r31, r0
	struct control_voltage *vco_pitch_cv;	

	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
     f88:	ee 24       	eor	r14, r14
     f8a:	e3 94       	inc	r14
     f8c:	21 c0       	rjmp	.+66     	; 0xfd0 <tune_octave+0x1d8>
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
     f8e:	80 91 88 02 	lds	r24, 0x0288
     f92:	90 91 89 02 	lds	r25, 0x0289
     f96:	9e a3       	lds	r25, 0x5e
     f98:	8d a3       	lds	r24, 0x5d
		//turn on VCO2 SAW, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     f9a:	0f 2e       	mov	r0, r31
     f9c:	fa e4       	ldi	r31, 0x4A	; 74
     f9e:	2f 2e       	mov	r2, r31
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	3f 2e       	mov	r3, r31
     fa4:	f0 2d       	mov	r31, r0
		
		//turn on VCO2 SAW, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     fa6:	ee e2       	ldi	r30, 0x2E	; 46
     fa8:	f1 e0       	ldi	r31, 0x01	; 1
     faa:	fc a7       	lds	r31, 0x7c
     fac:	eb a7       	lds	r30, 0x7b
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     fae:	28 e4       	ldi	r18, 0x48	; 72
     fb0:	31 e0       	ldi	r19, 0x01	; 1
     fb2:	3a a7       	lds	r19, 0x7a
     fb4:	29 a7       	lds	r18, 0x79
		
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     fb6:	8a e3       	ldi	r24, 0x3A	; 58
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	98 a7       	lds	r25, 0x78
     fbc:	8f a3       	lds	r24, 0x5f
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
		vco_pitch_table = vco2_pitch_table;
     fbe:	04 e4       	ldi	r16, 0x44	; 68
     fc0:	12 e0       	ldi	r17, 0x02	; 2
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
     fc2:	0f 2e       	mov	r0, r31
     fc4:	f4 e1       	ldi	r31, 0x14	; 20
     fc6:	cf 2e       	mov	r12, r31
     fc8:	f0 2d       	mov	r31, r0
		
		
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
     fca:	ee 24       	eor	r14, r14
     fcc:	68 94       	set
     fce:	e6 f8       	bld	r14, 6
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
		vco_pitch_table = vco2_pitch_table;
	}
	
	if (octave <= 2) {
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	9f 15       	cp	r25, r15
     fd4:	20 f0       	brcs	.+8      	; 0xfde <tune_octave+0x1e6>
		
		//set timer/counter1 to /64 0.3125 MHz
		timer1_clock = (1<<CS11) | (1<<CS10);
     fd6:	83 e0       	ldi	r24, 0x03	; 3
     fd8:	80 93 90 02 	sts	0x0290, r24
     fdc:	03 c0       	rjmp	.+6      	; 0xfe4 <tune_octave+0x1ec>
		
	} else {
		
		//set timer/counter1 to /8 2.5 MHz
		timer1_clock = (1<<CS11);
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	80 93 90 02 	sts	0x0290, r24
		
	}

	//set VCO init offset CV
	set_control_voltage(vco_init_cv, init_cv);
     fe4:	8f a1       	lds	r24, 0x4f
     fe6:	98 a5       	lds	r25, 0x68
     fe8:	6d a1       	lds	r22, 0x4d
     fea:	7e a1       	lds	r23, 0x4e
     fec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	//latch switch data
	DATA_BUS = switch_byte;
     ff0:	e2 b8       	out	0x02, r14	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     ff2:	ed ed       	ldi	r30, 0xDD	; 221
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 64       	ori	r24, 0x40	; 64
     ffa:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     ffc:	80 81       	ld	r24, Z
     ffe:	8f 7b       	andi	r24, 0xBF	; 191
    1000:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1002:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1004:	89 9a       	sbi	0x11, 1	; 17
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1006:	84 b5       	in	r24, 0x24	; 36
    1008:	8f 60       	ori	r24, 0x0F	; 15
    100a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1010:	ee e6       	ldi	r30, 0x6E	; 110
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	82 60       	ori	r24, 0x02	; 2
    1018:	80 83       	st	Z, r24
	compare_match_counter = 0;	
    101a:	10 92 8c 02 	sts	0x028C, r1
    101e:	fe 01       	movw	r30, r28
    1020:	31 96       	adiw	r30, 0x01	; 1
    1022:	fc ab       	sts	0x5c, r31
    1024:	eb ab       	sts	0x5b, r30
	for (int note_number = 0; note_number <= 11; note_number++) 
		{
		
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
    1026:	c5 01       	movw	r24, r10
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	8a 0d       	add	r24, r10
    102e:	9b 1d       	adc	r25, r11
	
	return init_cv;
	
}

void tune_octave(uint8_t octave, uint8_t vco) {
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	02 97       	sbiw	r24, 0x02	; 2
    103e:	98 01       	movw	r18, r16
    1040:	28 0f       	add	r18, r24
    1042:	39 1f       	adc	r19, r25
    1044:	3e ab       	sts	0x5e, r19
    1046:	2d ab       	sts	0x5d, r18
    1048:	ce 01       	movw	r24, r28
    104a:	49 96       	adiw	r24, 0x19	; 25
    104c:	9c a3       	lds	r25, 0x5c
    104e:	8b a3       	lds	r24, 0x5b
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    1050:	ac 0c       	add	r10, r12
    1052:	b1 1c       	adc	r11, r1
				
				//not sure what's really necessary here - definitely pitch and init_cv, but what else?
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
				set_control_voltage(vco_init_cv, init_cv);
				set_control_voltage(vco_pw_cv, MAX);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1054:	0f 2e       	mov	r0, r31
    1056:	f0 e3       	ldi	r31, 0x30	; 48
    1058:	8f 2e       	mov	r8, r31
    105a:	f1 e0       	ldi	r31, 0x01	; 1
    105c:	9f 2e       	mov	r9, r31
    105e:	f0 2d       	mov	r31, r0
				set_control_voltage(&cutoff_cv, MAX);
    1060:	0f 2e       	mov	r0, r31
    1062:	f8 e2       	ldi	r31, 0x28	; 40
    1064:	6f 2e       	mov	r6, r31
    1066:	f1 e0       	ldi	r31, 0x01	; 1
    1068:	7f 2e       	mov	r7, r31
    106a:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    106c:	0f 2e       	mov	r0, r31
    106e:	f4 e1       	ldi	r31, 0x14	; 20
    1070:	4f 2e       	mov	r4, r31
    1072:	f1 e0       	ldi	r31, 0x01	; 1
    1074:	5f 2e       	mov	r5, r31
    1076:	f0 2d       	mov	r31, r0
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
	compare_match_counter = 0;	
	for (int note_number = 0; note_number <= 11; note_number++) 
		{
		
		uint16_t reference_count = pitch_reference[note_number];
    1078:	eb a9       	sts	0x4b, r30
    107a:	fc a9       	sts	0x4c, r31
    107c:	21 91       	ld	r18, Z+
    107e:	31 91       	ld	r19, Z+
    1080:	fc ab       	sts	0x5c, r31
    1082:	eb ab       	sts	0x5b, r30
    1084:	38 ab       	sts	0x58, r19
    1086:	2f a7       	lds	r18, 0x7f
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
    1088:	ed a9       	sts	0x4d, r30
    108a:	fe a9       	sts	0x4e, r31
    108c:	81 91       	ld	r24, Z+
    108e:	91 91       	ld	r25, Z+
    1090:	fe ab       	sts	0x5e, r31
    1092:	ed ab       	sts	0x5d, r30
    1094:	8c 01       	movw	r16, r24
    1096:	08 57       	subi	r16, 0x78	; 120
    1098:	1f 4f       	sbci	r17, 0xFF	; 255
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
    109a:	26 e0       	ldi	r18, 0x06	; 6
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3e a7       	lds	r19, 0x7e
    10a0:	2d a7       	lds	r18, 0x7d
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    10a2:	0f 2e       	mov	r0, r31
    10a4:	f4 e6       	ldi	r31, 0x64	; 100
    10a6:	cf 2e       	mov	r12, r31
    10a8:	dd 24       	eor	r13, r13
    10aa:	f0 2d       	mov	r31, r0
				set_control_voltage(vco_init_cv, init_cv);
				set_control_voltage(vco_pw_cv, MAX);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&cutoff_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    10ac:	86 e1       	ldi	r24, 0x16	; 22
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	f8 2e       	mov	r15, r24
    10b2:	e9 2e       	mov	r14, r25
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
			osc_pitch_cv = (osc_pitch_cv >> dac_bit) << dac_bit; //clear bits to be set. Omar scoffed at this line as if it didn't need to be done. Why?
    10b4:	c8 01       	movw	r24, r16
    10b6:	0d a4       	lds	r16, 0xad
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <tune_octave+0x2c6>
    10ba:	96 95       	lsr	r25
    10bc:	87 95       	ror	r24
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <tune_octave+0x2c2>
    10c2:	8c 01       	movw	r16, r24
    10c4:	0d a4       	lds	r16, 0xad
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <tune_octave+0x2d4>
    10c8:	00 0f       	add	r16, r16
    10ca:	11 1f       	adc	r17, r17
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <tune_octave+0x2d0>
			//oh, maybe because it should just be done once before loop. Doing it for each iteration after bit 7 is redundant
			osc_pitch_cv |= (1<<dac_bit);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	fc 01       	movw	r30, r24
    10d6:	0d a4       	lds	r16, 0xad
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <tune_octave+0x2e6>
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <tune_octave+0x2e2>
    10e2:	fa ab       	sts	0x5a, r31
    10e4:	e9 ab       	sts	0x59, r30
    10e6:	0e 2b       	or	r16, r30
    10e8:	1f 2b       	or	r17, r31

			set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    10ea:	c1 01       	movw	r24, r2
    10ec:	b8 01       	movw	r22, r16
    10ee:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			count_finished = FALSE;
    10f2:	10 92 8f 02 	sts	0x028F, r1
			period_counter = 0;
    10f6:	10 92 92 02 	sts	0x0292, r1
			

			while (count_finished == FALSE) {
    10fa:	80 91 8f 02 	lds	r24, 0x028F
    10fe:	88 23       	and	r24, r24
    1100:	09 f0       	breq	.+2      	; 0x1104 <__stack+0x5>
    1102:	42 c0       	rjmp	.+132    	; 0x1188 <__stack+0x89>
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    1104:	80 91 8c 02 	lds	r24, 0x028C
    1108:	82 95       	swap	r24
    110a:	8f 70       	andi	r24, 0x0F	; 15
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	2c 9d       	mul	r18, r12
    1112:	c0 01       	movw	r24, r0
    1114:	2d 9d       	mul	r18, r13
    1116:	90 0d       	add	r25, r0
    1118:	3c 9d       	mul	r19, r12
    111a:	90 0d       	add	r25, r0
    111c:	11 24       	eor	r1, r1
    111e:	8a 0d       	add	r24, r10
    1120:	9b 1d       	adc	r25, r11
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
				//need to have a watchdog timer here to escape while loop if it takes too long
				
				//not sure what's really necessary here - definitely pitch and init_cv, but what else?
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1128:	c1 01       	movw	r24, r2
    112a:	b8 01       	movw	r22, r16
    112c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_init_cv, init_cv);
    1130:	8f a1       	lds	r24, 0x4f
    1132:	98 a5       	lds	r25, 0x68
    1134:	6d a1       	lds	r22, 0x4d
    1136:	7e a1       	lds	r23, 0x4e
    1138:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_pw_cv, MAX);
    113c:	8b a5       	lds	r24, 0x6b
    113e:	9c a5       	lds	r25, 0x6c
    1140:	6f ef       	ldi	r22, 0xFF	; 255
    1142:	7f e3       	ldi	r23, 0x3F	; 63
    1144:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1148:	c4 01       	movw	r24, r8
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&cutoff_cv, MAX);
    1152:	c3 01       	movw	r24, r6
    1154:	6f ef       	ldi	r22, 0xFF	; 255
    1156:	7f e3       	ldi	r23, 0x3F	; 63
    1158:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    115c:	c2 01       	movw	r24, r4
    115e:	6f ef       	ldi	r22, 0xFF	; 255
    1160:	7f e3       	ldi	r23, 0x3F	; 63
    1162:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1166:	8f 2d       	mov	r24, r15
    1168:	9e 2d       	mov	r25, r14
    116a:	6f ef       	ldi	r22, 0xFF	; 255
    116c:	7f e3       	ldi	r23, 0x3F	; 63
    116e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_mix_cv, MAX);
    1172:	89 a5       	lds	r24, 0x69
    1174:	9a a5       	lds	r25, 0x6a
    1176:	6f ef       	ldi	r22, 0xFF	; 255
    1178:	7f e3       	ldi	r23, 0x3F	; 63
    117a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, osc_pitch_cv);
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
    117e:	80 91 8f 02 	lds	r24, 0x028F
    1182:	88 23       	and	r24, r24
    1184:	09 f4       	brne	.+2      	; 0x1188 <__stack+0x89>
    1186:	be cf       	rjmp	.-132    	; 0x1104 <__stack+0x5>
			
			
			}							
				
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    1188:	80 91 8d 02 	lds	r24, 0x028D
    118c:	90 91 8e 02 	lds	r25, 0x028E
    1190:	2f a5       	lds	r18, 0x6f
    1192:	38 a9       	sts	0x48, r19
    1194:	28 17       	cp	r18, r24
    1196:	39 07       	cpc	r19, r25
    1198:	50 f0       	brcs	.+20     	; 0x11ae <__stack+0xaf>
    119a:	80 91 ea 01 	lds	r24, 0x01EA
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	31 f4       	brne	.+12     	; 0x11ae <__stack+0xaf>
    11a2:	89 a9       	sts	0x49, r24
    11a4:	9a a9       	sts	0x4a, r25
    11a6:	80 95       	com	r24
    11a8:	90 95       	com	r25
    11aa:	08 23       	and	r16, r24
    11ac:	19 23       	and	r17, r25
				
			if (osc_count == reference_count && no_overflow == TRUE) {
    11ae:	80 91 8d 02 	lds	r24, 0x028D
    11b2:	90 91 8e 02 	lds	r25, 0x028E
    11b6:	ef a5       	lds	r30, 0x6f
    11b8:	f8 a9       	sts	0x48, r31
    11ba:	8e 17       	cp	r24, r30
    11bc:	9f 07       	cpc	r25, r31
    11be:	21 f4       	brne	.+8      	; 0x11c8 <__stack+0xc9>
    11c0:	80 91 ea 01 	lds	r24, 0x01EA
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	71 f0       	breq	.+28     	; 0x11e4 <__stack+0xe5>
				break;	//if you hit the reference count then get out of here		
			}				
			no_overflow = TRUE;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	80 93 ea 01 	sts	0x01EA, r24
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
    11ce:	2d a5       	lds	r18, 0x6d
    11d0:	3e a5       	lds	r19, 0x6e
    11d2:	21 50       	subi	r18, 0x01	; 1
    11d4:	30 40       	sbci	r19, 0x00	; 0
    11d6:	3e a7       	lds	r19, 0x7e
    11d8:	2d a7       	lds	r18, 0x7d
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	2f 3f       	cpi	r18, 0xFF	; 255
    11de:	38 07       	cpc	r19, r24
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <__stack+0xe5>
    11e2:	68 cf       	rjmp	.-304    	; 0x10b4 <tune_octave+0x2bc>
		}
		
		//will need to make an excpetion for C0 here as its pitch has already been determined by set_vco_init_cv() and so C0 will be 0V
		//for now maybe just start tuning octaves 1 and up
		//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
		*(vco_pitch_table + (octave*12 + note_number)) = osc_pitch_cv;		
    11e4:	ed a9       	sts	0x4d, r30
    11e6:	fe a9       	sts	0x4e, r31
    11e8:	11 83       	std	Z+1, r17	; 0x01
    11ea:	00 83       	st	Z, r16
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
	compare_match_counter = 0;	
	for (int note_number = 0; note_number <= 11; note_number++) 
    11ec:	2b a9       	sts	0x4b, r18
    11ee:	3c a9       	sts	0x4c, r19
    11f0:	8b a1       	lds	r24, 0x4b
    11f2:	9c a1       	lds	r25, 0x4c
    11f4:	28 17       	cp	r18, r24
    11f6:	39 07       	cpc	r19, r25
    11f8:	09 f0       	breq	.+2      	; 0x11fc <__stack+0xfd>
    11fa:	3e cf       	rjmp	.-388    	; 0x1078 <tune_octave+0x280>
		
	}
	

	
	PORTF &= ~(1<<GATE); //turn gate off
    11fc:	89 98       	cbi	0x11, 1	; 17
		
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    11fe:	ee e6       	ldi	r30, 0x6E	; 110
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8d 7f       	andi	r24, 0xFD	; 253
    1206:	80 83       	st	Z, r24
	
	
}
    1208:	e6 96       	adiw	r28, 0x36	; 54
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	9f 90       	pop	r9
    122a:	8f 90       	pop	r8
    122c:	7f 90       	pop	r7
    122e:	6f 90       	pop	r6
    1230:	5f 90       	pop	r5
    1232:	4f 90       	pop	r4
    1234:	3f 90       	pop	r3
    1236:	2f 90       	pop	r2
    1238:	08 95       	ret

0000123a <tune_8ths>:

void tune_8ths(uint8_t vco) {
    123a:	2f 92       	push	r2
    123c:	3f 92       	push	r3
    123e:	4f 92       	push	r4
    1240:	5f 92       	push	r5
    1242:	6f 92       	push	r6
    1244:	7f 92       	push	r7
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	ec 97       	sbiw	r28, 0x3c	; 60
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    1270:	de 01       	movw	r26, r28
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	ea eb       	ldi	r30, 0xBA	; 186
    1276:	f1 e0       	ldi	r31, 0x01	; 1
    1278:	80 e3       	ldi	r24, 0x30	; 48
    127a:	01 90       	ld	r0, Z+
    127c:	0d 92       	st	X+, r0
    127e:	81 50       	subi	r24, 0x01	; 1
    1280:	e1 f7       	brne	.-8      	; 0x127a <tune_8ths+0x40>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1282:	80 e3       	ldi	r24, 0x30	; 48
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all pitch modulation
		set_control_voltage(&pitch_lfo_cv, MIN);
    128e:	82 e4       	ldi	r24, 0x42	; 66
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pitch_eg2_cv, MIN);
    129a:	84 e4       	ldi	r24, 0x44	; 68
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pitch_vco2_cv, MIN);
    12a6:	8f ee       	ldi	r24, 0xEF	; 239
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off glide
		set_control_voltage(&glide_cv, MIN);
    12b2:	84 e3       	ldi	r24, 0x34	; 52
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all pulse width modulation
		set_control_voltage(&pwm_eg2_cv, MIN);
    12be:	8e e3       	ldi	r24, 0x3E	; 62
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pwm_lfo_cv, MIN);
    12ca:	80 e4       	ldi	r24, 0x40	; 64
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all filter modulation
		set_control_voltage(&fil_lfo_cv, MIN);
    12d6:	82 e2       	ldi	r24, 0x22	; 34
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&fil_eg2_cv, MIN);
    12e2:	8c e2       	ldi	r24, 0x2C	; 44
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&fil_vco2_cv, MIN);
    12ee:	84 e2       	ldi	r24, 0x24	; 36
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&key_track_cv, MIN);
    12fa:	86 e2       	ldi	r24, 0x26	; 38
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//open filter with no resonance
		set_control_voltage(&cutoff_cv, MAX);
    1306:	88 e2       	ldi	r24, 0x28	; 40
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	6f ef       	ldi	r22, 0xFF	; 255
    130c:	7f e3       	ldi	r23, 0x3F	; 63
    130e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&res_cv, MIN);
    1312:	8a e2       	ldi	r24, 0x2A	; 42
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off VCA LFO modulation
		set_control_voltage(&amp_lfo_cv, MIN);
    131e:	82 e3       	ldi	r24, 0x32	; 50
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//initialize VCA envelope
		set_control_voltage(&attack_1_cv, MIN);
    132a:	8c e1       	ldi	r24, 0x1C	; 28
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&decay_1_cv, MIN);
    1336:	88 e1       	ldi	r24, 0x18	; 24
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&sustain_1_cv, MAX);
    1342:	84 e1       	ldi	r24, 0x14	; 20
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	6f ef       	ldi	r22, 0xFF	; 255
    1348:	7f e3       	ldi	r23, 0x3F	; 63
    134a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&release_1_cv, MIN);
    134e:	80 e1       	ldi	r24, 0x10	; 16
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off noise
		set_control_voltage(&noise_mix_cv, MIN);
    135a:	80 e2       	ldi	r24, 0x20	; 32
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1366:	00 23       	and	r16, r16
    1368:	d9 f4       	brne	.+54     	; 0x13a0 <tune_8ths+0x166>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    136a:	40 90 8a 02 	lds	r4, 0x028A
    136e:	50 90 8b 02 	lds	r5, 0x028B
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1372:	0f 2e       	mov	r0, r31
    1374:	fc e4       	ldi	r31, 0x4C	; 76
    1376:	ef 2e       	mov	r14, r31
    1378:	f1 e0       	ldi	r31, 0x01	; 1
    137a:	ff 2e       	mov	r15, r31
    137c:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    137e:	0f 2e       	mov	r0, r31
    1380:	f6 e4       	ldi	r31, 0x46	; 70
    1382:	2f 2e       	mov	r2, r31
    1384:	f1 e0       	ldi	r31, 0x01	; 1
    1386:	3f 2e       	mov	r3, r31
    1388:	f0 2d       	mov	r31, r0

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    138a:	0f 2e       	mov	r0, r31
    138c:	f8 e3       	ldi	r31, 0x38	; 56
    138e:	af 2e       	mov	r10, r31
    1390:	f1 e0       	ldi	r31, 0x01	; 1
    1392:	bf 2e       	mov	r11, r31
    1394:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    1396:	06 e6       	ldi	r16, 0x66	; 102
    1398:	12 e0       	ldi	r17, 0x02	; 2
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    139a:	cc 24       	eor	r12, r12
    139c:	c3 94       	inc	r12
    139e:	1b c0       	rjmp	.+54     	; 0x13d6 <tune_8ths+0x19c>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    13a0:	40 90 88 02 	lds	r4, 0x0288
    13a4:	50 90 89 02 	lds	r5, 0x0289
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    13a8:	0f 2e       	mov	r0, r31
    13aa:	fa e4       	ldi	r31, 0x4A	; 74
    13ac:	ef 2e       	mov	r14, r31
    13ae:	f1 e0       	ldi	r31, 0x01	; 1
    13b0:	ff 2e       	mov	r15, r31
    13b2:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    13b4:	0f 2e       	mov	r0, r31
    13b6:	f8 e4       	ldi	r31, 0x48	; 72
    13b8:	2f 2e       	mov	r2, r31
    13ba:	f1 e0       	ldi	r31, 0x01	; 1
    13bc:	3f 2e       	mov	r3, r31
    13be:	f0 2d       	mov	r31, r0
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    13c0:	0f 2e       	mov	r0, r31
    13c2:	fa e3       	ldi	r31, 0x3A	; 58
    13c4:	af 2e       	mov	r10, r31
    13c6:	f1 e0       	ldi	r31, 0x01	; 1
    13c8:	bf 2e       	mov	r11, r31
    13ca:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    13cc:	04 e4       	ldi	r16, 0x44	; 68
    13ce:	12 e0       	ldi	r17, 0x02	; 2
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    13d0:	cc 24       	eor	r12, r12
    13d2:	68 94       	set
    13d4:	c6 f8       	bld	r12, 6
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    13d6:	c5 01       	movw	r24, r10
    13d8:	b2 01       	movw	r22, r4
    13da:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//set_control_voltage(vco_pitch_cv, 8192);
	
		//latch switch data
		DATA_BUS = switch_byte;
    13de:	c2 b8       	out	0x02, r12	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    13e0:	ed ed       	ldi	r30, 0xDD	; 221
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	80 64       	ori	r24, 0x40	; 64
    13e8:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    13ea:	80 81       	ld	r24, Z
    13ec:	8f 7b       	andi	r24, 0xBF	; 191
    13ee:	80 83       	st	Z, r24
		DATA_BUS = 0;
    13f0:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    13f2:	89 9a       	sbi	0x11, 1	; 17
		
		//TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
		//OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
		period = 1; //need to initialize to minimum period number here
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	80 93 91 02 	sts	0x0291, r24
		//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
		//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//TCNT0 = 0; //make sure timer/counter0 is actually 0. This actually doesn't fix the first VCO tuning glitch
		compare_match_counter = 0;	
    13fa:	10 92 8c 02 	sts	0x028C, r1
    13fe:	9e 01       	movw	r18, r28
    1400:	2f 5f       	subi	r18, 0xFF	; 255
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	38 af       	sts	0x78, r19
    1406:	2f ab       	sts	0x5f, r18
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
	
	
}

void tune_8ths(uint8_t vco) {
    1408:	c8 01       	movw	r24, r16
    140a:	02 96       	adiw	r24, 0x02	; 2
    140c:	9c af       	sts	0x7c, r25
    140e:	8b af       	sts	0x7b, r24
		//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
		//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//TCNT0 = 0; //make sure timer/counter0 is actually 0. This actually doesn't fix the first VCO tuning glitch
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1410:	1a ae       	sts	0xba, r17
    1412:	19 ae       	sts	0xb9, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1414:	0f 2e       	mov	r0, r31
    1416:	f0 e3       	ldi	r31, 0x30	; 48
    1418:	cf 2e       	mov	r12, r31
    141a:	f1 e0       	ldi	r31, 0x01	; 1
    141c:	df 2e       	mov	r13, r31
    141e:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    1420:	0f 2e       	mov	r0, r31
    1422:	f8 e2       	ldi	r31, 0x28	; 40
    1424:	8f 2e       	mov	r8, r31
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	9f 2e       	mov	r9, r31
    142a:	f0 2d       	mov	r31, r0
					set_control_voltage(&sustain_1_cv, MAX);
    142c:	0f 2e       	mov	r0, r31
    142e:	f4 e1       	ldi	r31, 0x14	; 20
    1430:	6f 2e       	mov	r6, r31
    1432:	f1 e0       	ldi	r31, 0x01	; 1
    1434:	7f 2e       	mov	r7, r31
    1436:	f0 2d       	mov	r31, r0
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
	
	
}

void tune_8ths(uint8_t vco) {
    1438:	af a9       	sts	0x4f, r26
    143a:	b8 ad       	sts	0x68, r27
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//TCNT0 = 0; //make sure timer/counter0 is actually 0. This actually doesn't fix the first VCO tuning glitch
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    143c:	8c 91       	ld	r24, X
    143e:	80 93 91 02 	sts	0x0291, r24
			
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1442:	84 b5       	in	r24, 0x24	; 36
    1444:	8f 60       	ori	r24, 0x0F	; 15
    1446:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1448:	91 e0       	ldi	r25, 0x01	; 1
    144a:	97 bd       	out	0x27, r25	; 39
			TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    144c:	ee e6       	ldi	r30, 0x6E	; 110
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	82 60       	ori	r24, 0x02	; 2
    1454:	80 83       	st	Z, r24
			TCNT0 = 0; //make sure timer/counter0 is actually 0. This actually doesn't fix the first VCO tuning glitch
    1456:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    1458:	e9 ad       	sts	0x69, r30
    145a:	fa ad       	sts	0x6a, r31
    145c:	e3 30       	cpi	r30, 0x03	; 3
    145e:	f1 05       	cpc	r31, r1
    1460:	24 f4       	brge	.+8      	; 0x146a <tune_8ths+0x230>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	80 93 90 02 	sts	0x0290, r24
    1468:	03 c0       	rjmp	.+6      	; 0x1470 <tune_8ths+0x236>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	80 93 90 02 	sts	0x0290, r24
	
			}		
			uint16_t reference_count = reference[note_number].count;
    1470:	11 96       	adiw	r26, 0x01	; 1
    1472:	2d 91       	ld	r18, X+
    1474:	3c 91       	ld	r19, X
    1476:	12 97       	sbiw	r26, 0x02	; 2
    1478:	3e ab       	sts	0x5e, r19
    147a:	2d ab       	sts	0x5d, r18
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    147c:	8d e0       	ldi	r24, 0x0D	; 13
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9a ab       	sts	0x5a, r25
    1482:	89 ab       	sts	0x59, r24
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
	
			}		
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    1484:	00 e0       	ldi	r16, 0x00	; 0
    1486:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    1488:	e1 e0       	ldi	r30, 0x01	; 1
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	09 a8       	sts	0x89, r16
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <tune_8ths+0x25a>
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <tune_8ths+0x256>
    1498:	fc ab       	sts	0x5c, r31
    149a:	eb ab       	sts	0x5b, r30
    149c:	0e 2b       	or	r16, r30
    149e:	1f 2b       	or	r17, r31

				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    14a0:	c7 01       	movw	r24, r14
    14a2:	b8 01       	movw	r22, r16
    14a4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				count_finished = FALSE;
    14a8:	10 92 8f 02 	sts	0x028F, r1
				period_counter = 0;
    14ac:	10 92 92 02 	sts	0x0292, r1
			
				
				while (count_finished == FALSE) {
    14b0:	80 91 8f 02 	lds	r24, 0x028F
    14b4:	88 23       	and	r24, r24
    14b6:	99 f5       	brne	.+102    	; 0x151e <tune_8ths+0x2e4>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					//update_display(vco_number*100 + period, DEC);//
					value_to_display = TCNT0;
    14b8:	86 b5       	in	r24, 0x26	; 38
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	90 93 97 01 	sts	0x0197, r25
    14c0:	80 93 96 01 	sts	0x0196, r24
					update_display(value_to_display, DEC);	
    14c4:	80 91 96 01 	lds	r24, 0x0196
    14c8:	90 91 97 01 	lds	r25, 0x0197
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    14d2:	c5 01       	movw	r24, r10
    14d4:	b2 01       	movw	r22, r4
    14d6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    14da:	c7 01       	movw	r24, r14
    14dc:	b8 01       	movw	r22, r16
    14de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    14e2:	c6 01       	movw	r24, r12
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    14ec:	c4 01       	movw	r24, r8
    14ee:	6f ef       	ldi	r22, 0xFF	; 255
    14f0:	7f e3       	ldi	r23, 0x3F	; 63
    14f2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&sustain_1_cv, MAX);
    14f6:	c3 01       	movw	r24, r6
    14f8:	6f ef       	ldi	r22, 0xFF	; 255
    14fa:	7f e3       	ldi	r23, 0x3F	; 63
    14fc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    1500:	8c e1       	ldi	r24, 0x1C	; 28
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					//set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
					set_control_voltage(vco_mix_cv, MAX);
    150c:	c1 01       	movw	r24, r2
    150e:	6f ef       	ldi	r22, 0xFF	; 255
    1510:	7f e3       	ldi	r23, 0x3F	; 63
    1512:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
				count_finished = FALSE;
				period_counter = 0;
			
				
				while (count_finished == FALSE) {
    1516:	80 91 8f 02 	lds	r24, 0x028F
    151a:	88 23       	and	r24, r24
    151c:	69 f2       	breq	.-102    	; 0x14b8 <tune_8ths+0x27e>
			
			
				}							
				
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    151e:	80 91 8d 02 	lds	r24, 0x028D
    1522:	90 91 8e 02 	lds	r25, 0x028E
    1526:	2d a9       	sts	0x4d, r18
    1528:	3e a9       	sts	0x4e, r19
    152a:	28 17       	cp	r18, r24
    152c:	39 07       	cpc	r19, r25
    152e:	50 f0       	brcs	.+20     	; 0x1544 <tune_8ths+0x30a>
    1530:	80 91 ea 01 	lds	r24, 0x01EA
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	31 f4       	brne	.+12     	; 0x1544 <tune_8ths+0x30a>
    1538:	8b a9       	sts	0x4b, r24
    153a:	9c a9       	sts	0x4c, r25
    153c:	80 95       	com	r24
    153e:	90 95       	com	r25
    1540:	08 23       	and	r16, r24
    1542:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    1544:	80 91 8d 02 	lds	r24, 0x028D
    1548:	90 91 8e 02 	lds	r25, 0x028E
    154c:	ed a9       	sts	0x4d, r30
    154e:	fe a9       	sts	0x4e, r31
    1550:	8e 17       	cp	r24, r30
    1552:	9f 07       	cpc	r25, r31
    1554:	21 f4       	brne	.+8      	; 0x155e <tune_8ths+0x324>
    1556:	80 91 ea 01 	lds	r24, 0x01EA
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	71 f0       	breq	.+28     	; 0x157a <tune_8ths+0x340>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    155e:	f1 e0       	ldi	r31, 0x01	; 1
    1560:	f0 93 ea 01 	sts	0x01EA, r31
				timer1_clock = (1<<CS11);
	
			}		
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1564:	29 a9       	sts	0x49, r18
    1566:	3a a9       	sts	0x4a, r19
    1568:	21 50       	subi	r18, 0x01	; 1
    156a:	30 40       	sbci	r19, 0x00	; 0
    156c:	3a ab       	sts	0x5a, r19
    156e:	29 ab       	sts	0x59, r18
    1570:	8f ef       	ldi	r24, 0xFF	; 255
    1572:	2f 3f       	cpi	r18, 0xFF	; 255
    1574:	38 07       	cpc	r19, r24
    1576:	09 f0       	breq	.+2      	; 0x157a <tune_8ths+0x340>
    1578:	87 cf       	rjmp	.-242    	; 0x1488 <tune_8ths+0x24e>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    157a:	eb ad       	sts	0x6b, r30
    157c:	fc ad       	sts	0x6c, r31
    157e:	01 93       	st	Z+, r16
    1580:	11 93       	st	Z+, r17
    1582:	fc af       	sts	0x7c, r31
    1584:	eb af       	sts	0x7b, r30
		
			TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1586:	ee e6       	ldi	r30, 0x6E	; 110
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8d 7f       	andi	r24, 0xFD	; 253
    158e:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer
    1590:	14 bc       	out	0x24, r1	; 36
		//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
		//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//TCNT0 = 0; //make sure timer/counter0 is actually 0. This actually doesn't fix the first VCO tuning glitch
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1592:	29 ad       	sts	0x69, r18
    1594:	3a ad       	sts	0x6a, r19
    1596:	2f 5f       	subi	r18, 0xFF	; 255
    1598:	3f 4f       	sbci	r19, 0xFF	; 255
    159a:	3a af       	sts	0x7a, r19
    159c:	29 af       	sts	0x79, r18
    159e:	8f a9       	sts	0x4f, r24
    15a0:	98 ad       	sts	0x68, r25
    15a2:	03 96       	adiw	r24, 0x03	; 3
    15a4:	98 af       	sts	0x78, r25
    15a6:	8f ab       	sts	0x5f, r24
    15a8:	20 31       	cpi	r18, 0x10	; 16
    15aa:	31 05       	cpc	r19, r1
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <tune_8ths+0x376>
    15ae:	44 cf       	rjmp	.-376    	; 0x1438 <tune_8ths+0x1fe>
			TCCR0A = 0; //turn off timer
		}
	

	
		PORTF &= ~(1<<GATE); //turn gate off
    15b0:	89 98       	cbi	0x11, 1	; 17
		
		//TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
	
	
	}	
    15b2:	ec 96       	adiw	r28, 0x3c	; 60
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	df 90       	pop	r13
    15cc:	cf 90       	pop	r12
    15ce:	bf 90       	pop	r11
    15d0:	af 90       	pop	r10
    15d2:	9f 90       	pop	r9
    15d4:	8f 90       	pop	r8
    15d6:	7f 90       	pop	r7
    15d8:	6f 90       	pop	r6
    15da:	5f 90       	pop	r5
    15dc:	4f 90       	pop	r4
    15de:	3f 90       	pop	r3
    15e0:	2f 90       	pop	r2
    15e2:	08 95       	ret

000015e4 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    15e4:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    15e6:	80 91 93 02 	lds	r24, 0x0293
    15ea:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    15ec:	89 27       	eor	r24, r25
    15ee:	80 93 93 02 	sts	0x0293, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    15f2:	89 23       	and	r24, r25
    15f4:	08 95       	ret

000015f6 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    15f6:	ed ed       	ldi	r30, 0xDD	; 221
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	90 81       	ld	r25, Z
    15fc:	9f 7b       	andi	r25, 0xBF	; 191
    15fe:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	21 70       	andi	r18, 0x01	; 1
    1606:	30 70       	andi	r19, 0x00	; 0
    1608:	22 0f       	add	r18, r18
    160a:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    160c:	68 2f       	mov	r22, r24
    160e:	62 95       	swap	r22
    1610:	66 95       	lsr	r22
    1612:	67 70       	andi	r22, 0x07	; 7
    1614:	67 95       	ror	r22
    1616:	66 27       	eor	r22, r22
    1618:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    161a:	26 2b       	or	r18, r22
    161c:	98 2f       	mov	r25, r24
    161e:	96 95       	lsr	r25
    1620:	96 95       	lsr	r25
    1622:	91 70       	andi	r25, 0x01	; 1
    1624:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    1626:	68 2f       	mov	r22, r24
    1628:	66 1f       	adc	r22, r22
    162a:	66 27       	eor	r22, r22
    162c:	66 1f       	adc	r22, r22
    162e:	66 0f       	add	r22, r22
    1630:	66 0f       	add	r22, r22
    1632:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1634:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    1636:	a8 2f       	mov	r26, r24
    1638:	a6 95       	lsr	r26
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	a1 70       	andi	r26, 0x01	; 1
    163e:	b0 70       	andi	r27, 0x00	; 0
    1640:	bd 01       	movw	r22, r26
    1642:	66 0f       	add	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	66 0f       	add	r22, r22
    1648:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    164a:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    164c:	68 2f       	mov	r22, r24
    164e:	62 95       	swap	r22
    1650:	6f 70       	andi	r22, 0x0F	; 15
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	61 70       	andi	r22, 0x01	; 1
    1656:	70 70       	andi	r23, 0x00	; 0
    1658:	ab 01       	movw	r20, r22
    165a:	00 24       	eor	r0, r0
    165c:	56 95       	lsr	r21
    165e:	47 95       	ror	r20
    1660:	07 94       	ror	r0
    1662:	56 95       	lsr	r21
    1664:	47 95       	ror	r20
    1666:	07 94       	ror	r0
    1668:	54 2f       	mov	r21, r20
    166a:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    166c:	62 2f       	mov	r22, r18
    166e:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    1670:	48 2f       	mov	r20, r24
    1672:	42 95       	swap	r20
    1674:	46 95       	lsr	r20
    1676:	46 95       	lsr	r20
    1678:	43 70       	andi	r20, 0x03	; 3
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	41 70       	andi	r20, 0x01	; 1
    167e:	50 70       	andi	r21, 0x00	; 0
    1680:	9a 01       	movw	r18, r20
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	22 95       	swap	r18
    1688:	32 95       	swap	r19
    168a:	30 7f       	andi	r19, 0xF0	; 240
    168c:	32 27       	eor	r19, r18
    168e:	20 7f       	andi	r18, 0xF0	; 240
    1690:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1692:	46 2f       	mov	r20, r22
    1694:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    1696:	86 95       	lsr	r24
    1698:	86 95       	lsr	r24
    169a:	86 95       	lsr	r24
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	21 70       	andi	r18, 0x01	; 1
    16a2:	30 70       	andi	r19, 0x00	; 0
    16a4:	c9 01       	movw	r24, r18
    16a6:	82 95       	swap	r24
    16a8:	92 95       	swap	r25
    16aa:	90 7f       	andi	r25, 0xF0	; 240
    16ac:	98 27       	eor	r25, r24
    16ae:	80 7f       	andi	r24, 0xF0	; 240
    16b0:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    16b2:	84 2b       	or	r24, r20
    16b4:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    16b6:	80 81       	ld	r24, Z
    16b8:	80 64       	ori	r24, 0x40	; 64
    16ba:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    16bc:	80 81       	ld	r24, Z
    16be:	8f 7b       	andi	r24, 0xBF	; 191
    16c0:	80 83       	st	Z, r24
	DATA_BUS = 0;
    16c2:	12 b8       	out	0x02, r1	; 2
	
	
    16c4:	08 95       	ret

000016c6 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    16c6:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    16c8:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    16ca:	74 83       	std	Z+4, r23	; 0x04
    16cc:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    16ce:	11 82       	std	Z+1, r1	; 0x01
    16d0:	10 82       	st	Z, r1
}
    16d2:	08 95       	ret

000016d4 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	ec 01       	movw	r28, r24
    16dc:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    16de:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <store_and_clear_interrupt>
    16e2:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    16e4:	39 81       	ldd	r19, Y+1	; 0x01
    16e6:	83 2f       	mov	r24, r19
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	6a 81       	ldd	r22, Y+2	; 0x02
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	0e 94 32 12 	call	0x2464	; 0x2464 <__divmodhi4>
    16f4:	48 81       	ld	r20, Y
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	84 17       	cp	r24, r20
    16fa:	95 07       	cpc	r25, r21
    16fc:	29 f4       	brne	.+10     	; 0x1708 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    16fe:	82 2f       	mov	r24, r18
    1700:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <restore_interrupt_setting>
      return false;
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	11 c0       	rjmp	.+34     	; 0x172a <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    1708:	eb 81       	ldd	r30, Y+3	; 0x03
    170a:	fc 81       	ldd	r31, Y+4	; 0x04
    170c:	e3 0f       	add	r30, r19
    170e:	f1 1d       	adc	r31, r1
    1710:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	6a 81       	ldd	r22, Y+2	; 0x02
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	0e 94 32 12 	call	0x2464	; 0x2464 <__divmodhi4>
    1720:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1722:	82 2f       	mov	r24, r18
    1724:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <restore_interrupt_setting>
      return true;
    1728:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	08 95       	ret

00001732 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1738:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    173c:	29 81       	ldd	r18, Y+1	; 0x01
    173e:	98 81       	ld	r25, Y
    1740:	29 17       	cp	r18, r25
    1742:	18 f0       	brcs	.+6      	; 0x174a <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1744:	c2 2f       	mov	r28, r18
    1746:	c9 1b       	sub	r28, r25
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    174a:	ca 81       	ldd	r28, Y+2	; 0x02
    174c:	c2 0f       	add	r28, r18
    174e:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    1750:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <restore_interrupt_setting>
   return len;
}
    1754:	8c 2f       	mov	r24, r28
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    175c:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    175e:	20 81       	ld	r18, Z
    1760:	86 2f       	mov	r24, r22
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	82 0f       	add	r24, r18
    1766:	91 1d       	adc	r25, r1
    1768:	62 81       	ldd	r22, Z+2	; 0x02
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	0e 94 32 12 	call	0x2464	; 0x2464 <__divmodhi4>
    1770:	03 80       	ldd	r0, Z+3	; 0x03
    1772:	f4 81       	ldd	r31, Z+4	; 0x04
    1774:	e0 2d       	mov	r30, r0
    1776:	e8 0f       	add	r30, r24
    1778:	f9 1f       	adc	r31, r25
}
    177a:	80 81       	ld	r24, Z
    177c:	08 95       	ret

0000177e <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	ec 01       	movw	r28, r24
    1786:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1788:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <store_and_clear_interrupt>
    178c:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    178e:	88 81       	ld	r24, Y
    1790:	21 2f       	mov	r18, r17
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	28 0f       	add	r18, r24
    1796:	31 1d       	adc	r19, r1
    1798:	6a 81       	ldd	r22, Y+2	; 0x02
    179a:	c9 01       	movw	r24, r18
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	0e 94 32 12 	call	0x2464	; 0x2464 <__divmodhi4>
    17a2:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    17a4:	84 2f       	mov	r24, r20
    17a6:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <restore_interrupt_setting>
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	08 95       	ret

000017b2 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    17b2:	8f b7       	in	r24, 0x3f	; 63
   cli();
    17b4:	f8 94       	cli
   return sreg;
}
    17b6:	08 95       	ret

000017b8 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    17b8:	8f bf       	out	0x3f, r24	; 63
}
    17ba:	08 95       	ret

000017bc <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    17bc:	88 1f       	adc	r24, r24
    17be:	88 27       	eor	r24, r24
    17c0:	88 1f       	adc	r24, r24
    17c2:	08 95       	ret

000017c4 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	88 3f       	cpi	r24, 0xF8	; 248
    17c8:	08 f4       	brcc	.+2      	; 0x17cc <midi_is_realtime+0x8>
    17ca:	90 e0       	ldi	r25, 0x00	; 0
}
    17cc:	89 2f       	mov	r24, r25
    17ce:	08 95       	ret

000017d0 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	20 7f       	andi	r18, 0xF0	; 240
    17d6:	30 70       	andi	r19, 0x00	; 0
    17d8:	20 3c       	cpi	r18, 0xC0	; 192
    17da:	31 05       	cpc	r19, r1
    17dc:	e9 f1       	breq	.+122    	; 0x1858 <midi_packet_length+0x88>
    17de:	21 3c       	cpi	r18, 0xC1	; 193
    17e0:	31 05       	cpc	r19, r1
    17e2:	8c f4       	brge	.+34     	; 0x1806 <midi_packet_length+0x36>
    17e4:	20 39       	cpi	r18, 0x90	; 144
    17e6:	31 05       	cpc	r19, r1
    17e8:	e1 f0       	breq	.+56     	; 0x1822 <midi_packet_length+0x52>
    17ea:	21 39       	cpi	r18, 0x91	; 145
    17ec:	31 05       	cpc	r19, r1
    17ee:	24 f4       	brge	.+8      	; 0x17f8 <midi_packet_length+0x28>
    17f0:	20 38       	cpi	r18, 0x80	; 128
    17f2:	31 05       	cpc	r19, r1
    17f4:	79 f5       	brne	.+94     	; 0x1854 <midi_packet_length+0x84>
    17f6:	15 c0       	rjmp	.+42     	; 0x1822 <midi_packet_length+0x52>
    17f8:	20 3a       	cpi	r18, 0xA0	; 160
    17fa:	31 05       	cpc	r19, r1
    17fc:	91 f0       	breq	.+36     	; 0x1822 <midi_packet_length+0x52>
    17fe:	20 3b       	cpi	r18, 0xB0	; 176
    1800:	31 05       	cpc	r19, r1
    1802:	41 f5       	brne	.+80     	; 0x1854 <midi_packet_length+0x84>
    1804:	0e c0       	rjmp	.+28     	; 0x1822 <midi_packet_length+0x52>
    1806:	20 3e       	cpi	r18, 0xE0	; 224
    1808:	31 05       	cpc	r19, r1
    180a:	59 f0       	breq	.+22     	; 0x1822 <midi_packet_length+0x52>
    180c:	21 3e       	cpi	r18, 0xE1	; 225
    180e:	31 05       	cpc	r19, r1
    1810:	24 f4       	brge	.+8      	; 0x181a <midi_packet_length+0x4a>
    1812:	20 3d       	cpi	r18, 0xD0	; 208
    1814:	31 05       	cpc	r19, r1
    1816:	f1 f4       	brne	.+60     	; 0x1854 <midi_packet_length+0x84>
    1818:	1f c0       	rjmp	.+62     	; 0x1858 <midi_packet_length+0x88>
    181a:	20 3f       	cpi	r18, 0xF0	; 240
    181c:	31 05       	cpc	r19, r1
    181e:	d1 f4       	brne	.+52     	; 0x1854 <midi_packet_length+0x84>
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1822:	83 e0       	ldi	r24, 0x03	; 3
    1824:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    1826:	86 3f       	cpi	r24, 0xF6	; 246
    1828:	79 f0       	breq	.+30     	; 0x1848 <midi_packet_length+0x78>
    182a:	87 3f       	cpi	r24, 0xF7	; 247
    182c:	38 f4       	brcc	.+14     	; 0x183c <midi_packet_length+0x6c>
    182e:	82 3f       	cpi	r24, 0xF2	; 242
    1830:	a9 f0       	breq	.+42     	; 0x185c <midi_packet_length+0x8c>
    1832:	83 3f       	cpi	r24, 0xF3	; 243
    1834:	59 f0       	breq	.+22     	; 0x184c <midi_packet_length+0x7c>
    1836:	81 3f       	cpi	r24, 0xF1	; 241
    1838:	59 f4       	brne	.+22     	; 0x1850 <midi_packet_length+0x80>
    183a:	08 c0       	rjmp	.+16     	; 0x184c <midi_packet_length+0x7c>
    183c:	88 3f       	cpi	r24, 0xF8	; 248
    183e:	40 f0       	brcs	.+16     	; 0x1850 <midi_packet_length+0x80>
    1840:	8d 3f       	cpi	r24, 0xFD	; 253
    1842:	10 f0       	brcs	.+4      	; 0x1848 <midi_packet_length+0x78>
    1844:	8e 3f       	cpi	r24, 0xFE	; 254
    1846:	20 f0       	brcs	.+8      	; 0x1850 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    185c:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    185e:	08 95       	ret

00001860 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1860:	0f 93       	push	r16
    1862:	34 2f       	mov	r19, r20
    1864:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1866:	46 2f       	mov	r20, r22
    1868:	4f 70       	andi	r20, 0x0F	; 15
    186a:	40 6b       	ori	r20, 0xB0	; 176
    186c:	23 2f       	mov	r18, r19
    186e:	2f 77       	andi	r18, 0x7F	; 127
    1870:	0f 77       	andi	r16, 0x7F	; 127
    1872:	dc 01       	movw	r26, r24
    1874:	ed 91       	ld	r30, X+
    1876:	fc 91       	ld	r31, X
    1878:	63 e0       	ldi	r22, 0x03	; 3
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    187e:	0f 91       	pop	r16
    1880:	08 95       	ret

00001882 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1882:	0f 93       	push	r16
    1884:	34 2f       	mov	r19, r20
    1886:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1888:	46 2f       	mov	r20, r22
    188a:	4f 70       	andi	r20, 0x0F	; 15
    188c:	40 69       	ori	r20, 0x90	; 144
    188e:	23 2f       	mov	r18, r19
    1890:	2f 77       	andi	r18, 0x7F	; 127
    1892:	0f 77       	andi	r16, 0x7F	; 127
    1894:	dc 01       	movw	r26, r24
    1896:	ed 91       	ld	r30, X+
    1898:	fc 91       	ld	r31, X
    189a:	63 e0       	ldi	r22, 0x03	; 3
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    18a0:	0f 91       	pop	r16
    18a2:	08 95       	ret

000018a4 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    18a4:	0f 93       	push	r16
    18a6:	34 2f       	mov	r19, r20
    18a8:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    18aa:	46 2f       	mov	r20, r22
    18ac:	4f 70       	andi	r20, 0x0F	; 15
    18ae:	40 68       	ori	r20, 0x80	; 128
    18b0:	23 2f       	mov	r18, r19
    18b2:	2f 77       	andi	r18, 0x7F	; 127
    18b4:	0f 77       	andi	r16, 0x7F	; 127
    18b6:	dc 01       	movw	r26, r24
    18b8:	ed 91       	ld	r30, X+
    18ba:	fc 91       	ld	r31, X
    18bc:	63 e0       	ldi	r22, 0x03	; 3
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    18c2:	0f 91       	pop	r16
    18c4:	08 95       	ret

000018c6 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    18c6:	0f 93       	push	r16
    18c8:	34 2f       	mov	r19, r20
    18ca:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    18cc:	46 2f       	mov	r20, r22
    18ce:	4f 70       	andi	r20, 0x0F	; 15
    18d0:	40 6a       	ori	r20, 0xA0	; 160
    18d2:	23 2f       	mov	r18, r19
    18d4:	2f 77       	andi	r18, 0x7F	; 127
    18d6:	0f 77       	andi	r16, 0x7F	; 127
    18d8:	dc 01       	movw	r26, r24
    18da:	ed 91       	ld	r30, X+
    18dc:	fc 91       	ld	r31, X
    18de:	63 e0       	ldi	r22, 0x03	; 3
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    18e4:	0f 91       	pop	r16
    18e6:	08 95       	ret

000018e8 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    18ec:	20 e2       	ldi	r18, 0x20	; 32
    18ee:	40 30       	cpi	r20, 0x00	; 0
    18f0:	52 07       	cpc	r21, r18
    18f2:	44 f4       	brge	.+16     	; 0x1904 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    18f4:	a0 ee       	ldi	r26, 0xE0	; 224
    18f6:	40 30       	cpi	r20, 0x00	; 0
    18f8:	5a 07       	cpc	r21, r26
    18fa:	3c f0       	brlt	.+14     	; 0x190a <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    18fc:	8a 01       	movw	r16, r20
    18fe:	00 50       	subi	r16, 0x00	; 0
    1900:	10 4e       	sbci	r17, 0xE0	; 224
    1902:	05 c0       	rjmp	.+10     	; 0x190e <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1904:	0f ef       	ldi	r16, 0xFF	; 255
    1906:	1f e3       	ldi	r17, 0x3F	; 63
    1908:	02 c0       	rjmp	.+4      	; 0x190e <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    190a:	00 e0       	ldi	r16, 0x00	; 0
    190c:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    190e:	46 2f       	mov	r20, r22
    1910:	4f 70       	andi	r20, 0x0F	; 15
    1912:	40 6e       	ori	r20, 0xE0	; 224
    1914:	20 2f       	mov	r18, r16
    1916:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1918:	00 0f       	add	r16, r16
    191a:	01 2f       	mov	r16, r17
    191c:	00 1f       	adc	r16, r16
    191e:	11 0b       	sbc	r17, r17
    1920:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1922:	0f 77       	andi	r16, 0x7F	; 127
    1924:	dc 01       	movw	r26, r24
    1926:	ed 91       	ld	r30, X+
    1928:	fc 91       	ld	r31, X
    192a:	63 e0       	ldi	r22, 0x03	; 3
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1936:	0f 93       	push	r16
    1938:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    193a:	46 2f       	mov	r20, r22
    193c:	4f 70       	andi	r20, 0x0F	; 15
    193e:	40 6c       	ori	r20, 0xC0	; 192
    1940:	2f 77       	andi	r18, 0x7F	; 127
    1942:	dc 01       	movw	r26, r24
    1944:	ed 91       	ld	r30, X+
    1946:	fc 91       	ld	r31, X
    1948:	62 e0       	ldi	r22, 0x02	; 2
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	00 e0       	ldi	r16, 0x00	; 0
    194e:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1950:	0f 91       	pop	r16
    1952:	08 95       	ret

00001954 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1954:	0f 93       	push	r16
    1956:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1958:	46 2f       	mov	r20, r22
    195a:	4f 70       	andi	r20, 0x0F	; 15
    195c:	40 6d       	ori	r20, 0xD0	; 208
    195e:	2f 77       	andi	r18, 0x7F	; 127
    1960:	dc 01       	movw	r26, r24
    1962:	ed 91       	ld	r30, X+
    1964:	fc 91       	ld	r31, X
    1966:	62 e0       	ldi	r22, 0x02	; 2
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	00 e0       	ldi	r16, 0x00	; 0
    196c:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    196e:	0f 91       	pop	r16
    1970:	08 95       	ret

00001972 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1972:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1974:	dc 01       	movw	r26, r24
    1976:	ed 91       	ld	r30, X+
    1978:	fc 91       	ld	r31, X
    197a:	61 e0       	ldi	r22, 0x01	; 1
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	48 ef       	ldi	r20, 0xF8	; 248
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	00 e0       	ldi	r16, 0x00	; 0
    1984:	09 95       	icall
}
    1986:	0f 91       	pop	r16
    1988:	08 95       	ret

0000198a <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    198a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    198c:	dc 01       	movw	r26, r24
    198e:	ed 91       	ld	r30, X+
    1990:	fc 91       	ld	r31, X
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	49 ef       	ldi	r20, 0xF9	; 249
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	00 e0       	ldi	r16, 0x00	; 0
    199c:	09 95       	icall
}
    199e:	0f 91       	pop	r16
    19a0:	08 95       	ret

000019a2 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    19a2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    19a4:	dc 01       	movw	r26, r24
    19a6:	ed 91       	ld	r30, X+
    19a8:	fc 91       	ld	r31, X
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	4a ef       	ldi	r20, 0xFA	; 250
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	00 e0       	ldi	r16, 0x00	; 0
    19b4:	09 95       	icall
}
    19b6:	0f 91       	pop	r16
    19b8:	08 95       	ret

000019ba <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    19ba:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    19bc:	dc 01       	movw	r26, r24
    19be:	ed 91       	ld	r30, X+
    19c0:	fc 91       	ld	r31, X
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	4b ef       	ldi	r20, 0xFB	; 251
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	00 e0       	ldi	r16, 0x00	; 0
    19cc:	09 95       	icall
}
    19ce:	0f 91       	pop	r16
    19d0:	08 95       	ret

000019d2 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    19d2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    19d4:	dc 01       	movw	r26, r24
    19d6:	ed 91       	ld	r30, X+
    19d8:	fc 91       	ld	r31, X
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	4c ef       	ldi	r20, 0xFC	; 252
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	00 e0       	ldi	r16, 0x00	; 0
    19e4:	09 95       	icall
}
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    19ea:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    19ec:	dc 01       	movw	r26, r24
    19ee:	ed 91       	ld	r30, X+
    19f0:	fc 91       	ld	r31, X
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	4e ef       	ldi	r20, 0xFE	; 254
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	00 e0       	ldi	r16, 0x00	; 0
    19fc:	09 95       	icall
}
    19fe:	0f 91       	pop	r16
    1a00:	08 95       	ret

00001a02 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1a02:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1a04:	dc 01       	movw	r26, r24
    1a06:	ed 91       	ld	r30, X+
    1a08:	fc 91       	ld	r31, X
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	4f ef       	ldi	r20, 0xFF	; 255
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	00 e0       	ldi	r16, 0x00	; 0
    1a14:	09 95       	icall
}
    1a16:	0f 91       	pop	r16
    1a18:	08 95       	ret

00001a1a <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1a1a:	0f 93       	push	r16
   device->send_func(device, 2,
    1a1c:	26 2f       	mov	r18, r22
    1a1e:	2f 77       	andi	r18, 0x7F	; 127
    1a20:	dc 01       	movw	r26, r24
    1a22:	ed 91       	ld	r30, X+
    1a24:	fc 91       	ld	r31, X
    1a26:	62 e0       	ldi	r22, 0x02	; 2
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	41 ef       	ldi	r20, 0xF1	; 241
    1a2c:	00 e0       	ldi	r16, 0x00	; 0
    1a2e:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
   device->send_func(device, 3,
    1a38:	26 2f       	mov	r18, r22
    1a3a:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1a3c:	8b 01       	movw	r16, r22
    1a3e:	00 0f       	add	r16, r16
    1a40:	01 2f       	mov	r16, r17
    1a42:	00 1f       	adc	r16, r16
    1a44:	11 0b       	sbc	r17, r17
    1a46:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1a48:	0f 77       	andi	r16, 0x7F	; 127
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	ed 91       	ld	r30, X+
    1a4e:	fc 91       	ld	r31, X
    1a50:	63 e0       	ldi	r22, 0x03	; 3
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	42 ef       	ldi	r20, 0xF2	; 242
    1a56:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	08 95       	ret

00001a5e <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1a5e:	0f 93       	push	r16
   device->send_func(device, 2,
    1a60:	26 2f       	mov	r18, r22
    1a62:	2f 77       	andi	r18, 0x7F	; 127
    1a64:	dc 01       	movw	r26, r24
    1a66:	ed 91       	ld	r30, X+
    1a68:	fc 91       	ld	r31, X
    1a6a:	62 e0       	ldi	r22, 0x02	; 2
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	43 ef       	ldi	r20, 0xF3	; 243
    1a70:	00 e0       	ldi	r16, 0x00	; 0
    1a72:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1a74:	0f 91       	pop	r16
    1a76:	08 95       	ret

00001a78 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1a78:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	ed 91       	ld	r30, X+
    1a7e:	fc 91       	ld	r31, X
    1a80:	61 e0       	ldi	r22, 0x01	; 1
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	46 ef       	ldi	r20, 0xF6	; 246
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	00 e0       	ldi	r16, 0x00	; 0
    1a8a:	09 95       	icall
}
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1a90:	0f 93       	push	r16
    1a92:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1a94:	dc 01       	movw	r26, r24
    1a96:	ed 91       	ld	r30, X+
    1a98:	fc 91       	ld	r31, X
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	00 e0       	ldi	r16, 0x00	; 0
    1aa2:	09 95       	icall
}
    1aa4:	0f 91       	pop	r16
    1aa6:	08 95       	ret

00001aa8 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1aa8:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1aaa:	dc 01       	movw	r26, r24
    1aac:	ed 91       	ld	r30, X+
    1aae:	fc 91       	ld	r31, X
    1ab0:	09 95       	icall
}
    1ab2:	0f 91       	pop	r16
    1ab4:	08 95       	ret

00001ab6 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1ab6:	6f 92       	push	r6
    1ab8:	7f 92       	push	r7
    1aba:	8f 92       	push	r8
    1abc:	9f 92       	push	r9
    1abe:	af 92       	push	r10
    1ac0:	bf 92       	push	r11
    1ac2:	cf 92       	push	r12
    1ac4:	df 92       	push	r13
    1ac6:	ef 92       	push	r14
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <midi_send_array+0x1e>
    1ad4:	0f 92       	push	r0
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	4c 01       	movw	r8, r24
    1adc:	6b 01       	movw	r12, r22
    1ade:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1ae0:	61 15       	cp	r22, r1
    1ae2:	71 05       	cpc	r23, r1
    1ae4:	41 f1       	breq	.+80     	; 0x1b36 <midi_send_array+0x80>
    1ae6:	ee 24       	eor	r14, r14
    1ae8:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    1aea:	0f 2e       	mov	r0, r31
    1aec:	f3 e0       	ldi	r31, 0x03	; 3
    1aee:	6f 2e       	mov	r6, r31
    1af0:	77 24       	eor	r7, r7
    1af2:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    1af4:	19 82       	std	Y+1, r1	; 0x01
    1af6:	1a 82       	std	Y+2, r1	; 0x02
    1af8:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    1afa:	86 01       	movw	r16, r12
    1afc:	0e 19       	sub	r16, r14
    1afe:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    1b00:	04 30       	cpi	r16, 0x04	; 4
    1b02:	11 05       	cpc	r17, r1
    1b04:	08 f0       	brcs	.+2      	; 0x1b08 <midi_send_array+0x52>
    1b06:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1b08:	b5 01       	movw	r22, r10
    1b0a:	6e 0d       	add	r22, r14
    1b0c:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    1b0e:	ce 01       	movw	r24, r28
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	40 2f       	mov	r20, r16
    1b14:	51 2f       	mov	r21, r17
    1b16:	0e 94 45 12 	call	0x248a	; 0x248a <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    1b1a:	c4 01       	movw	r24, r8
    1b1c:	b8 01       	movw	r22, r16
    1b1e:	49 81       	ldd	r20, Y+1	; 0x01
    1b20:	2a 81       	ldd	r18, Y+2	; 0x02
    1b22:	0b 81       	ldd	r16, Y+3	; 0x03
    1b24:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	e8 0e       	add	r14, r24
    1b2e:	f9 1e       	adc	r15, r25
    1b30:	ec 14       	cp	r14, r12
    1b32:	fd 04       	cpc	r15, r13
    1b34:	f8 f2       	brcs	.-66     	; 0x1af4 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	df 90       	pop	r13
    1b4a:	cf 90       	pop	r12
    1b4c:	bf 90       	pop	r11
    1b4e:	af 90       	pop	r10
    1b50:	9f 90       	pop	r9
    1b52:	8f 90       	pop	r8
    1b54:	7f 90       	pop	r7
    1b56:	6f 90       	pop	r6
    1b58:	08 95       	ret

00001b5a <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	73 83       	std	Z+3, r23	; 0x03
    1b5e:	62 83       	std	Z+2, r22	; 0x02
}
    1b60:	08 95       	ret

00001b62 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1b62:	fc 01       	movw	r30, r24
    1b64:	75 83       	std	Z+5, r23	; 0x05
    1b66:	64 83       	std	Z+4, r22	; 0x04
}
    1b68:	08 95       	ret

00001b6a <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	77 83       	std	Z+7, r23	; 0x07
    1b6e:	66 83       	std	Z+6, r22	; 0x06
}
    1b70:	08 95       	ret

00001b72 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1b72:	fc 01       	movw	r30, r24
    1b74:	71 87       	std	Z+9, r23	; 0x09
    1b76:	60 87       	std	Z+8, r22	; 0x08
}
    1b78:	08 95       	ret

00001b7a <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	73 87       	std	Z+11, r23	; 0x0b
    1b7e:	62 87       	std	Z+10, r22	; 0x0a
}
    1b80:	08 95       	ret

00001b82 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1b82:	fc 01       	movw	r30, r24
    1b84:	75 87       	std	Z+13, r23	; 0x0d
    1b86:	64 87       	std	Z+12, r22	; 0x0c
}
    1b88:	08 95       	ret

00001b8a <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	77 87       	std	Z+15, r23	; 0x0f
    1b8e:	66 87       	std	Z+14, r22	; 0x0e
}
    1b90:	08 95       	ret

00001b92 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1b92:	fc 01       	movw	r30, r24
    1b94:	71 8b       	std	Z+17, r23	; 0x11
    1b96:	60 8b       	std	Z+16, r22	; 0x10
}
    1b98:	08 95       	ret

00001b9a <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	73 8b       	std	Z+19, r23	; 0x13
    1b9e:	62 8b       	std	Z+18, r22	; 0x12
}
    1ba0:	08 95       	ret

00001ba2 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	75 8b       	std	Z+21, r23	; 0x15
    1ba6:	64 8b       	std	Z+20, r22	; 0x14
}
    1ba8:	08 95       	ret

00001baa <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1baa:	fc 01       	movw	r30, r24
    1bac:	77 8b       	std	Z+23, r23	; 0x17
    1bae:	66 8b       	std	Z+22, r22	; 0x16
}
    1bb0:	08 95       	ret

00001bb2 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	71 8f       	std	Z+25, r23	; 0x19
    1bb6:	60 8f       	std	Z+24, r22	; 0x18
}
    1bb8:	08 95       	ret

00001bba <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    1bba:	fc 01       	movw	r30, r24
    1bbc:	73 8f       	std	Z+27, r23	; 0x1b
    1bbe:	62 8f       	std	Z+26, r22	; 0x1a
}
    1bc0:	08 95       	ret

00001bc2 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	75 8f       	std	Z+29, r23	; 0x1d
    1bc6:	64 8f       	std	Z+28, r22	; 0x1c
}
    1bc8:	08 95       	ret

00001bca <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1bca:	fc 01       	movw	r30, r24
    1bcc:	77 8f       	std	Z+31, r23	; 0x1f
    1bce:	66 8f       	std	Z+30, r22	; 0x1e
}
    1bd0:	08 95       	ret

00001bd2 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1bd8:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    1bda:	1f a2       	lds	r17, 0x9f
    1bdc:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1bde:	bc 01       	movw	r22, r24
    1be0:	68 5d       	subi	r22, 0xD8	; 216
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	88 51       	subi	r24, 0x18	; 24
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	40 ec       	ldi	r20, 0xC0	; 192
    1bea:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1bee:	1b 82       	std	Y+3, r1	; 0x03
    1bf0:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1bf2:	1d 82       	std	Y+5, r1	; 0x05
    1bf4:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1bf6:	1f 82       	std	Y+7, r1	; 0x07
    1bf8:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1bfa:	19 86       	std	Y+9, r1	; 0x09
    1bfc:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1bfe:	1b 86       	std	Y+11, r1	; 0x0b
    1c00:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1c02:	1d 86       	std	Y+13, r1	; 0x0d
    1c04:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1c06:	1f 86       	std	Y+15, r1	; 0x0f
    1c08:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1c0a:	19 8a       	std	Y+17, r1	; 0x11
    1c0c:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1c0e:	1b 8a       	std	Y+19, r1	; 0x13
    1c10:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1c12:	1d 8a       	std	Y+21, r1	; 0x15
    1c14:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1c16:	1f 8a       	std	Y+23, r1	; 0x17
    1c18:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1c1a:	19 8e       	std	Y+25, r1	; 0x19
    1c1c:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1c1e:	1b 8e       	std	Y+27, r1	; 0x1b
    1c20:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1c22:	1d 8e       	std	Y+29, r1	; 0x1d
    1c24:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1c26:	1f 8e       	std	Y+31, r1	; 0x1f
    1c28:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1c2a:	19 a2       	lds	r17, 0x99
    1c2c:	18 a2       	lds	r17, 0x98
}
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1c42:	66 23       	and	r22, r22
    1c44:	99 f0       	breq	.+38     	; 0x1c6c <midi_device_input+0x38>
    1c46:	04 2f       	mov	r16, r20
    1c48:	15 2f       	mov	r17, r21
    1c4a:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    1c4c:	0f 2e       	mov	r0, r31
    1c4e:	f8 ee       	ldi	r31, 0xE8	; 232
    1c50:	ef 2e       	mov	r14, r31
    1c52:	ff 24       	eor	r15, r15
    1c54:	f0 2d       	mov	r31, r0
    1c56:	e8 0e       	add	r14, r24
    1c58:	f9 1e       	adc	r15, r25
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	61 91       	ld	r22, Z+
    1c5e:	8f 01       	movw	r16, r30
    1c60:	c7 01       	movw	r24, r14
    1c62:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1c66:	cf 5f       	subi	r28, 0xFF	; 255
    1c68:	cd 17       	cp	r28, r29
    1c6a:	b9 f7       	brne	.-18     	; 0x1c5a <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	08 95       	ret

00001c7a <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	71 83       	std	Z+1, r23	; 0x01
    1c7e:	60 83       	st	Z, r22
}
    1c80:	08 95       	ret

00001c82 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    1c82:	fc 01       	movw	r30, r24
    1c84:	71 a3       	lds	r23, 0x51
    1c86:	60 a3       	lds	r22, 0x50
}
    1c88:	08 95       	ret

00001c8a <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1c8a:	af 92       	push	r10
    1c8c:	bf 92       	push	r11
    1c8e:	cf 92       	push	r12
    1c90:	df 92       	push	r13
    1c92:	ef 92       	push	r14
    1c94:	ff 92       	push	r15
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <midi_input_callbacks+0x16>
    1ca0:	0f 92       	push	r0
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	6c 01       	movw	r12, r24
    1ca8:	5b 01       	movw	r10, r22
    1caa:	f4 2e       	mov	r15, r20
    1cac:	e2 2e       	mov	r14, r18
    1cae:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	95 96       	adiw	r26, 0x25	; 37
    1cb4:	8c 91       	ld	r24, X
    1cb6:	95 97       	sbiw	r26, 0x25	; 37
    1cb8:	84 30       	cpi	r24, 0x04	; 4
    1cba:	e9 f4       	brne	.+58     	; 0x1cf6 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    1cbc:	5a 96       	adiw	r26, 0x1a	; 26
    1cbe:	ed 91       	ld	r30, X+
    1cc0:	fc 91       	ld	r31, X
    1cc2:	5b 97       	sbiw	r26, 0x1b	; 27
    1cc4:	30 97       	sbiw	r30, 0x00	; 0
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <midi_input_callbacks+0x40>
    1cc8:	ee c0       	rjmp	.+476    	; 0x1ea6 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1cca:	cb 01       	movw	r24, r22
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	63 e0       	ldi	r22, 0x03	; 3
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	68 0f       	add	r22, r24
    1cde:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1ce0:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1ce2:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    1ce4:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1ce6:	4a 2d       	mov	r20, r10
    1ce8:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1cea:	c6 01       	movw	r24, r12
    1cec:	9e 01       	movw	r18, r28
    1cee:	2f 5f       	subi	r18, 0xFF	; 255
    1cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf2:	09 95       	icall
    1cf4:	c8 c0       	rjmp	.+400    	; 0x1e86 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    1cf6:	62 30       	cpi	r22, 0x02	; 2
    1cf8:	71 05       	cpc	r23, r1
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <midi_input_callbacks+0x74>
    1cfc:	5f c0       	rjmp	.+190    	; 0x1dbc <midi_input_callbacks+0x132>
    1cfe:	63 30       	cpi	r22, 0x03	; 3
    1d00:	71 05       	cpc	r23, r1
    1d02:	29 f0       	breq	.+10     	; 0x1d0e <midi_input_callbacks+0x84>
    1d04:	61 30       	cpi	r22, 0x01	; 1
    1d06:	71 05       	cpc	r23, r1
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <midi_input_callbacks+0x82>
    1d0a:	b3 c0       	rjmp	.+358    	; 0x1e72 <midi_input_callbacks+0x1e8>
    1d0c:	99 c0       	rjmp	.+306    	; 0x1e40 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1d0e:	84 2f       	mov	r24, r20
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	80 7f       	andi	r24, 0xF0	; 240
    1d14:	90 70       	andi	r25, 0x00	; 0
    1d16:	80 3a       	cpi	r24, 0xA0	; 160
    1d18:	91 05       	cpc	r25, r1
    1d1a:	29 f1       	breq	.+74     	; 0x1d66 <midi_input_callbacks+0xdc>
    1d1c:	81 3a       	cpi	r24, 0xA1	; 161
    1d1e:	91 05       	cpc	r25, r1
    1d20:	3c f4       	brge	.+14     	; 0x1d30 <midi_input_callbacks+0xa6>
    1d22:	80 38       	cpi	r24, 0x80	; 128
    1d24:	91 05       	cpc	r25, r1
    1d26:	c9 f0       	breq	.+50     	; 0x1d5a <midi_input_callbacks+0xd0>
    1d28:	80 39       	cpi	r24, 0x90	; 144
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	91 f5       	brne	.+100    	; 0x1d92 <midi_input_callbacks+0x108>
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <midi_input_callbacks+0xc4>
    1d30:	80 3e       	cpi	r24, 0xE0	; 224
    1d32:	91 05       	cpc	r25, r1
    1d34:	f1 f0       	breq	.+60     	; 0x1d72 <midi_input_callbacks+0xe8>
    1d36:	80 3f       	cpi	r24, 0xF0	; 240
    1d38:	91 05       	cpc	r25, r1
    1d3a:	09 f1       	breq	.+66     	; 0x1d7e <midi_input_callbacks+0xf4>
    1d3c:	80 3b       	cpi	r24, 0xB0	; 176
    1d3e:	91 05       	cpc	r25, r1
    1d40:	41 f5       	brne	.+80     	; 0x1d92 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    1d42:	d6 01       	movw	r26, r12
    1d44:	12 96       	adiw	r26, 0x02	; 2
    1d46:	ed 91       	ld	r30, X+
    1d48:	fc 91       	ld	r31, X
    1d4a:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1d4c:	24 c0       	rjmp	.+72     	; 0x1d96 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1d4e:	d6 01       	movw	r26, r12
    1d50:	14 96       	adiw	r26, 0x04	; 4
    1d52:	ed 91       	ld	r30, X+
    1d54:	fc 91       	ld	r31, X
    1d56:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1d58:	1e c0       	rjmp	.+60     	; 0x1d96 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1d5a:	d6 01       	movw	r26, r12
    1d5c:	16 96       	adiw	r26, 0x06	; 6
    1d5e:	ed 91       	ld	r30, X+
    1d60:	fc 91       	ld	r31, X
    1d62:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1d64:	18 c0       	rjmp	.+48     	; 0x1d96 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1d66:	d6 01       	movw	r26, r12
    1d68:	18 96       	adiw	r26, 0x08	; 8
    1d6a:	ed 91       	ld	r30, X+
    1d6c:	fc 91       	ld	r31, X
    1d6e:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1d70:	12 c0       	rjmp	.+36     	; 0x1d96 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1d72:	d6 01       	movw	r26, r12
    1d74:	1a 96       	adiw	r26, 0x0a	; 10
    1d76:	ed 91       	ld	r30, X+
    1d78:	fc 91       	ld	r31, X
    1d7a:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1d7c:	0c c0       	rjmp	.+24     	; 0x1d96 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1d7e:	b2 ef       	ldi	r27, 0xF2	; 242
    1d80:	4b 17       	cp	r20, r27
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <midi_input_callbacks+0xfc>
    1d84:	90 c0       	rjmp	.+288    	; 0x1ea6 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    1d86:	d6 01       	movw	r26, r12
    1d88:	1c 96       	adiw	r26, 0x0c	; 12
    1d8a:	ed 91       	ld	r30, X+
    1d8c:	fc 91       	ld	r31, X
    1d8e:	1d 97       	sbiw	r26, 0x0d	; 13
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1d92:	e0 e0       	ldi	r30, 0x00	; 0
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1d96:	30 97       	sbiw	r30, 0x00	; 0
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <midi_input_callbacks+0x112>
    1d9a:	85 c0       	rjmp	.+266    	; 0x1ea6 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1d9c:	b2 ef       	ldi	r27, 0xF2	; 242
    1d9e:	fb 16       	cp	r15, r27
    1da0:	31 f4       	brne	.+12     	; 0x1dae <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    1da2:	c6 01       	movw	r24, r12
    1da4:	62 ef       	ldi	r22, 0xF2	; 242
    1da6:	4e 2d       	mov	r20, r14
    1da8:	21 2f       	mov	r18, r17
    1daa:	09 95       	icall
    1dac:	6c c0       	rjmp	.+216    	; 0x1e86 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1dae:	6f 2d       	mov	r22, r15
    1db0:	6f 70       	andi	r22, 0x0F	; 15
    1db2:	c6 01       	movw	r24, r12
    1db4:	4e 2d       	mov	r20, r14
    1db6:	21 2f       	mov	r18, r17
    1db8:	09 95       	icall
    1dba:	65 c0       	rjmp	.+202    	; 0x1e86 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1dbc:	84 2f       	mov	r24, r20
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	80 7f       	andi	r24, 0xF0	; 240
    1dc2:	90 70       	andi	r25, 0x00	; 0
    1dc4:	80 3d       	cpi	r24, 0xD0	; 208
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	61 f0       	breq	.+24     	; 0x1de2 <midi_input_callbacks+0x158>
    1dca:	80 3f       	cpi	r24, 0xF0	; 240
    1dcc:	91 05       	cpc	r25, r1
    1dce:	79 f0       	breq	.+30     	; 0x1dee <midi_input_callbacks+0x164>
    1dd0:	80 3c       	cpi	r24, 0xC0	; 192
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	f9 f4       	brne	.+62     	; 0x1e14 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1dd6:	d6 01       	movw	r26, r12
    1dd8:	1e 96       	adiw	r26, 0x0e	; 14
    1dda:	ed 91       	ld	r30, X+
    1ddc:	fc 91       	ld	r31, X
    1dde:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1de0:	1b c0       	rjmp	.+54     	; 0x1e18 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1de2:	d6 01       	movw	r26, r12
    1de4:	50 96       	adiw	r26, 0x10	; 16
    1de6:	ed 91       	ld	r30, X+
    1de8:	fc 91       	ld	r31, X
    1dea:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1dec:	15 c0       	rjmp	.+42     	; 0x1e18 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1dee:	b3 ef       	ldi	r27, 0xF3	; 243
    1df0:	4b 17       	cp	r20, r27
    1df2:	31 f4       	brne	.+12     	; 0x1e00 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    1df4:	d6 01       	movw	r26, r12
    1df6:	52 96       	adiw	r26, 0x12	; 18
    1df8:	ed 91       	ld	r30, X+
    1dfa:	fc 91       	ld	r31, X
    1dfc:	53 97       	sbiw	r26, 0x13	; 19
    1dfe:	0c c0       	rjmp	.+24     	; 0x1e18 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1e00:	b1 ef       	ldi	r27, 0xF1	; 241
    1e02:	4b 17       	cp	r20, r27
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <midi_input_callbacks+0x17e>
    1e06:	4f c0       	rjmp	.+158    	; 0x1ea6 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    1e08:	d6 01       	movw	r26, r12
    1e0a:	54 96       	adiw	r26, 0x14	; 20
    1e0c:	ed 91       	ld	r30, X+
    1e0e:	fc 91       	ld	r31, X
    1e10:	55 97       	sbiw	r26, 0x15	; 21
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1e14:	e0 e0       	ldi	r30, 0x00	; 0
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1e18:	30 97       	sbiw	r30, 0x00	; 0
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <midi_input_callbacks+0x194>
    1e1c:	44 c0       	rjmp	.+136    	; 0x1ea6 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1e1e:	b3 ef       	ldi	r27, 0xF3	; 243
    1e20:	fb 16       	cp	r15, r27
    1e22:	19 f0       	breq	.+6      	; 0x1e2a <midi_input_callbacks+0x1a0>
    1e24:	81 ef       	ldi	r24, 0xF1	; 241
    1e26:	f8 16       	cp	r15, r24
    1e28:	29 f4       	brne	.+10     	; 0x1e34 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1e2a:	c6 01       	movw	r24, r12
    1e2c:	6f 2d       	mov	r22, r15
    1e2e:	4e 2d       	mov	r20, r14
    1e30:	09 95       	icall
    1e32:	29 c0       	rjmp	.+82     	; 0x1e86 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    1e34:	6f 2d       	mov	r22, r15
    1e36:	6f 70       	andi	r22, 0x0F	; 15
    1e38:	c6 01       	movw	r24, r12
    1e3a:	4e 2d       	mov	r20, r14
    1e3c:	09 95       	icall
    1e3e:	23 c0       	rjmp	.+70     	; 0x1e86 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1e40:	84 2f       	mov	r24, r20
    1e42:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <midi_is_realtime>
    1e46:	88 23       	and	r24, r24
    1e48:	31 f0       	breq	.+12     	; 0x1e56 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    1e4a:	d6 01       	movw	r26, r12
    1e4c:	56 96       	adiw	r26, 0x16	; 22
    1e4e:	ed 91       	ld	r30, X+
    1e50:	fc 91       	ld	r31, X
    1e52:	57 97       	sbiw	r26, 0x17	; 23
    1e54:	08 c0       	rjmp	.+16     	; 0x1e66 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    1e56:	b6 ef       	ldi	r27, 0xF6	; 246
    1e58:	fb 16       	cp	r15, r27
    1e5a:	29 f5       	brne	.+74     	; 0x1ea6 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    1e5c:	d6 01       	movw	r26, r12
    1e5e:	58 96       	adiw	r26, 0x18	; 24
    1e60:	ed 91       	ld	r30, X+
    1e62:	fc 91       	ld	r31, X
    1e64:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1e66:	30 97       	sbiw	r30, 0x00	; 0
    1e68:	f1 f0       	breq	.+60     	; 0x1ea6 <midi_input_callbacks+0x21c>
            func(device, byte0);
    1e6a:	c6 01       	movw	r24, r12
    1e6c:	6f 2d       	mov	r22, r15
    1e6e:	09 95       	icall
    1e70:	0a c0       	rjmp	.+20     	; 0x1e86 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1e72:	64 30       	cpi	r22, 0x04	; 4
    1e74:	71 05       	cpc	r23, r1
    1e76:	a8 f4       	brcc	.+42     	; 0x1ea2 <midi_input_callbacks+0x218>
    1e78:	16 c0       	rjmp	.+44     	; 0x1ea6 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1e7a:	c6 01       	movw	r24, r12
    1e7c:	b5 01       	movw	r22, r10
    1e7e:	4f 2d       	mov	r20, r15
    1e80:	2e 2d       	mov	r18, r14
    1e82:	01 2f       	mov	r16, r17
    1e84:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1e86:	d6 01       	movw	r26, r12
    1e88:	5e 96       	adiw	r26, 0x1e	; 30
    1e8a:	ed 91       	ld	r30, X+
    1e8c:	fc 91       	ld	r31, X
    1e8e:	5f 97       	sbiw	r26, 0x1f	; 31
    1e90:	30 97       	sbiw	r30, 0x00	; 0
    1e92:	89 f0       	breq	.+34     	; 0x1eb6 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1e94:	c6 01       	movw	r24, r12
    1e96:	b5 01       	movw	r22, r10
    1e98:	4f 2d       	mov	r20, r15
    1e9a:	2e 2d       	mov	r18, r14
    1e9c:	01 2f       	mov	r16, r17
    1e9e:	09 95       	icall
    1ea0:	0a c0       	rjmp	.+20     	; 0x1eb6 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    1ea2:	aa 24       	eor	r10, r10
    1ea4:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1ea6:	d6 01       	movw	r26, r12
    1ea8:	5c 96       	adiw	r26, 0x1c	; 28
    1eaa:	ed 91       	ld	r30, X+
    1eac:	fc 91       	ld	r31, X
    1eae:	5d 97       	sbiw	r26, 0x1d	; 29
    1eb0:	30 97       	sbiw	r30, 0x00	; 0
    1eb2:	19 f7       	brne	.-58     	; 0x1e7a <midi_input_callbacks+0x1f0>
    1eb4:	e8 cf       	rjmp	.-48     	; 0x1e86 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	ff 90       	pop	r15
    1ec6:	ef 90       	pop	r14
    1ec8:	df 90       	pop	r13
    1eca:	cf 90       	pop	r12
    1ecc:	bf 90       	pop	r11
    1ece:	af 90       	pop	r10
    1ed0:	08 95       	ret

00001ed2 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1ed2:	ef 92       	push	r14
    1ed4:	ff 92       	push	r15
    1ed6:	0f 93       	push	r16
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	7c 01       	movw	r14, r24
    1ede:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    1ee0:	86 2f       	mov	r24, r22
    1ee2:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <midi_is_realtime>
    1ee6:	88 23       	and	r24, r24
    1ee8:	91 f0       	breq	.+36     	; 0x1f0e <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1eea:	d7 01       	movw	r26, r14
    1eec:	95 96       	adiw	r26, 0x25	; 37
    1eee:	dc 91       	ld	r29, X
    1ef0:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	95 96       	adiw	r26, 0x25	; 37
    1ef6:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    1ef8:	c7 01       	movw	r24, r14
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	4c 2f       	mov	r20, r28
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	00 e0       	ldi	r16, 0x00	; 0
    1f04:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <midi_input_callbacks>
    device->input_state = state;
    1f08:	f7 01       	movw	r30, r14
    1f0a:	d5 a3       	lds	r29, 0x55
    1f0c:	b7 c0       	rjmp	.+366    	; 0x207c <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    1f0e:	8c 2f       	mov	r24, r28
    1f10:	0e 94 de 0b 	call	0x17bc	; 0x17bc <midi_is_statusbyte>
    1f14:	88 23       	and	r24, r24
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <midi_process_byte+0x48>
    1f18:	73 c0       	rjmp	.+230    	; 0x2000 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1f1a:	d7 01       	movw	r26, r14
    1f1c:	95 96       	adiw	r26, 0x25	; 37
    1f1e:	8c 91       	ld	r24, X
    1f20:	95 97       	sbiw	r26, 0x25	; 37
    1f22:	84 30       	cpi	r24, 0x04	; 4
    1f24:	49 f0       	breq	.+18     	; 0x1f38 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    1f26:	92 96       	adiw	r26, 0x22	; 34
    1f28:	cc 93       	st	X, r28
    1f2a:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	97 96       	adiw	r26, 0x27	; 39
    1f32:	9c 93       	st	X, r25
    1f34:	8e 93       	st	-X, r24
    1f36:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    1f38:	8c 2f       	mov	r24, r28
    1f3a:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <midi_packet_length>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	41 f0       	breq	.+16     	; 0x1f52 <midi_process_byte+0x80>
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	00 f1       	brcs	.+64     	; 0x1f86 <midi_process_byte+0xb4>
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	a1 f0       	breq	.+40     	; 0x1f72 <midi_process_byte+0xa0>
    1f4a:	83 30       	cpi	r24, 0x03	; 3
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <midi_process_byte+0x7e>
    1f4e:	4f c0       	rjmp	.+158    	; 0x1fee <midi_process_byte+0x11c>
    1f50:	14 c0       	rjmp	.+40     	; 0x1f7a <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	f7 01       	movw	r30, r14
    1f56:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    1f58:	c7 01       	movw	r24, r14
    1f5a:	61 e0       	ldi	r22, 0x01	; 1
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	4c 2f       	mov	r20, r28
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	00 e0       	ldi	r16, 0x00	; 0
    1f64:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <midi_input_callbacks>
        device->input_state = IDLE;
    1f68:	d7 01       	movw	r26, r14
    1f6a:	95 96       	adiw	r26, 0x25	; 37
    1f6c:	1c 92       	st	X, r1
    1f6e:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1f70:	85 c0       	rjmp	.+266    	; 0x207c <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	f7 01       	movw	r30, r14
    1f76:	85 a3       	lds	r24, 0x55
        break;
    1f78:	81 c0       	rjmp	.+258    	; 0x207c <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	d7 01       	movw	r26, r14
    1f7e:	95 96       	adiw	r26, 0x25	; 37
    1f80:	8c 93       	st	X, r24
    1f82:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1f84:	7b c0       	rjmp	.+246    	; 0x207c <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    1f86:	c0 3f       	cpi	r28, 0xF0	; 240
    1f88:	19 f0       	breq	.+6      	; 0x1f90 <midi_process_byte+0xbe>
    1f8a:	c7 3f       	cpi	r28, 0xF7	; 247
    1f8c:	59 f5       	brne	.+86     	; 0x1fe4 <midi_process_byte+0x112>
    1f8e:	0a c0       	rjmp	.+20     	; 0x1fa4 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1f90:	84 e0       	ldi	r24, 0x04	; 4
    1f92:	f7 01       	movw	r30, r14
    1f94:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    1f96:	80 ef       	ldi	r24, 0xF0	; 240
    1f98:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	97 a3       	lds	r25, 0x57
    1fa0:	86 a3       	lds	r24, 0x56
            break;
    1fa2:	6c c0       	rjmp	.+216    	; 0x207c <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    1fa4:	d7 01       	movw	r26, r14
    1fa6:	96 96       	adiw	r26, 0x26	; 38
    1fa8:	2d 91       	ld	r18, X+
    1faa:	3c 91       	ld	r19, X
    1fac:	97 97       	sbiw	r26, 0x27	; 39
    1fae:	c9 01       	movw	r24, r18
    1fb0:	63 e0       	ldi	r22, 0x03	; 3
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
    1fb8:	f7 01       	movw	r30, r14
    1fba:	e8 0f       	add	r30, r24
    1fbc:	f9 1f       	adc	r31, r25
    1fbe:	87 ef       	ldi	r24, 0xF7	; 247
    1fc0:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    1fc2:	b9 01       	movw	r22, r18
    1fc4:	6f 5f       	subi	r22, 0xFF	; 255
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	f7 01       	movw	r30, r14
    1fca:	77 a3       	lds	r23, 0x57
    1fcc:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1fce:	c7 01       	movw	r24, r14
    1fd0:	42 a1       	lds	r20, 0x42
    1fd2:	23 a1       	lds	r18, 0x43
    1fd4:	04 a1       	lds	r16, 0x44
    1fd6:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1fda:	d7 01       	movw	r26, r14
    1fdc:	95 96       	adiw	r26, 0x25	; 37
    1fde:	1c 92       	st	X, r1
    1fe0:	95 97       	sbiw	r26, 0x25	; 37
            break;
    1fe2:	4c c0       	rjmp	.+152    	; 0x207c <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    1fe4:	f7 01       	movw	r30, r14
    1fe6:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    1fe8:	17 a2       	lds	r17, 0x97
    1fea:	16 a2       	lds	r17, 0x96
    1fec:	47 c0       	rjmp	.+142    	; 0x207c <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    1fee:	d7 01       	movw	r26, r14
    1ff0:	95 96       	adiw	r26, 0x25	; 37
    1ff2:	1c 92       	st	X, r1
    1ff4:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    1ff6:	97 96       	adiw	r26, 0x27	; 39
    1ff8:	1c 92       	st	X, r1
    1ffa:	1e 92       	st	-X, r1
    1ffc:	96 97       	sbiw	r26, 0x26	; 38
        break;
    1ffe:	3e c0       	rjmp	.+124    	; 0x207c <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    2000:	f7 01       	movw	r30, r14
    2002:	25 a1       	lds	r18, 0x45
    2004:	22 23       	and	r18, r18
    2006:	d1 f1       	breq	.+116    	; 0x207c <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    2008:	06 a0       	lds	r16, 0x86
    200a:	f7 a1       	lds	r31, 0x47
    200c:	e0 2d       	mov	r30, r0
    200e:	cf 01       	movw	r24, r30
    2010:	63 e0       	ldi	r22, 0x03	; 3
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
    2018:	ac 01       	movw	r20, r24
    201a:	8e 0d       	add	r24, r14
    201c:	9f 1d       	adc	r25, r15
    201e:	dc 01       	movw	r26, r24
    2020:	92 96       	adiw	r26, 0x22	; 34
    2022:	cc 93       	st	X, r28
    2024:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    2026:	bf 01       	movw	r22, r30
    2028:	6f 5f       	subi	r22, 0xFF	; 255
    202a:	7f 4f       	sbci	r23, 0xFF	; 255
    202c:	f7 01       	movw	r30, r14
    202e:	77 a3       	lds	r23, 0x57
    2030:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    2032:	41 30       	cpi	r20, 0x01	; 1
    2034:	51 05       	cpc	r21, r1
    2036:	91 f0       	breq	.+36     	; 0x205c <midi_process_byte+0x18a>
    2038:	42 30       	cpi	r20, 0x02	; 2
    203a:	51 05       	cpc	r21, r1
    203c:	f9 f4       	brne	.+62     	; 0x207c <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    203e:	c7 01       	movw	r24, r14
    2040:	42 a1       	lds	r20, 0x42
    2042:	23 a1       	lds	r18, 0x43
    2044:	04 a1       	lds	r16, 0x44
    2046:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    204a:	f7 01       	movw	r30, r14
    204c:	85 a1       	lds	r24, 0x45
    204e:	84 30       	cpi	r24, 0x04	; 4
    2050:	a9 f0       	breq	.+42     	; 0x207c <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	97 a3       	lds	r25, 0x57
    2058:	86 a3       	lds	r24, 0x56
    205a:	10 c0       	rjmp	.+32     	; 0x207c <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    205c:	22 30       	cpi	r18, 0x02	; 2
    205e:	71 f4       	brne	.+28     	; 0x207c <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    2060:	c7 01       	movw	r24, r14
    2062:	42 a1       	lds	r20, 0x42
    2064:	23 a1       	lds	r18, 0x43
    2066:	00 e0       	ldi	r16, 0x00	; 0
    2068:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    206c:	f7 01       	movw	r30, r14
    206e:	85 a1       	lds	r24, 0x45
    2070:	84 30       	cpi	r24, 0x04	; 4
    2072:	21 f0       	breq	.+8      	; 0x207c <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	97 a3       	lds	r25, 0x57
    207a:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	0f 91       	pop	r16
    2082:	ff 90       	pop	r15
    2084:	ef 90       	pop	r14
    2086:	08 95       	ret

00002088 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    2088:	cf 92       	push	r12
    208a:	df 92       	push	r13
    208c:	ef 92       	push	r14
    208e:	ff 92       	push	r15
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    209a:	dc 01       	movw	r26, r24
    209c:	90 96       	adiw	r26, 0x20	; 32
    209e:	ed 91       	ld	r30, X+
    20a0:	fc 91       	ld	r31, X
    20a2:	91 97       	sbiw	r26, 0x21	; 33
    20a4:	30 97       	sbiw	r30, 0x00	; 0
    20a6:	09 f0       	breq	.+2      	; 0x20aa <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    20a8:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    20aa:	0f 2e       	mov	r0, r31
    20ac:	f8 ee       	ldi	r31, 0xE8	; 232
    20ae:	ef 2e       	mov	r14, r31
    20b0:	ff 24       	eor	r15, r15
    20b2:	f0 2d       	mov	r31, r0
    20b4:	ec 0c       	add	r14, r12
    20b6:	fd 1c       	adc	r15, r13
    20b8:	c7 01       	movw	r24, r14
    20ba:	0e 94 99 0b 	call	0x1732	; 0x1732 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    20be:	c8 2f       	mov	r28, r24
    20c0:	d0 e0       	ldi	r29, 0x00	; 0
    20c2:	20 97       	sbiw	r28, 0x00	; 0
    20c4:	99 f0       	breq	.+38     	; 0x20ec <midi_device_process+0x64>
    20c6:	00 e0       	ldi	r16, 0x00	; 0
    20c8:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    20ca:	c7 01       	movw	r24, r14
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	0e 94 ae 0b 	call	0x175c	; 0x175c <bytequeue_get>
    20d2:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    20d4:	c6 01       	movw	r24, r12
    20d6:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    20da:	c7 01       	movw	r24, r14
    20dc:	61 e0       	ldi	r22, 0x01	; 1
    20de:	0e 94 bf 0b 	call	0x177e	; 0x177e <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    20e2:	0f 5f       	subi	r16, 0xFF	; 255
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	0c 17       	cp	r16, r28
    20e8:	1d 07       	cpc	r17, r29
    20ea:	78 f3       	brcs	.-34     	; 0x20ca <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	ef 90       	pop	r14
    20f8:	df 90       	pop	r13
    20fa:	cf 90       	pop	r12
    20fc:	08 95       	ret

000020fe <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    20fe:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    2100:	67 e0       	ldi	r22, 0x07	; 7
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
    2108:	48 2f       	mov	r20, r24
   if (remainder)
    210a:	88 23       	and	r24, r24
    210c:	81 f0       	breq	.+32     	; 0x212e <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    210e:	c9 01       	movw	r24, r18
    2110:	67 e0       	ldi	r22, 0x07	; 7
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
    2118:	cb 01       	movw	r24, r22
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	84 0f       	add	r24, r20
    212a:	91 1d       	adc	r25, r1
    212c:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    212e:	c9 01       	movw	r24, r18
    2130:	67 e0       	ldi	r22, 0x07	; 7
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
    2138:	cb 01       	movw	r24, r22
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
}
    2146:	08 95       	ret

00002148 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    2148:	48 2f       	mov	r20, r24
    214a:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    214c:	a1 f0       	breq	.+40     	; 0x2176 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    214e:	9c 01       	movw	r18, r24
    2150:	36 95       	lsr	r19
    2152:	27 95       	ror	r18
    2154:	36 95       	lsr	r19
    2156:	27 95       	ror	r18
    2158:	36 95       	lsr	r19
    215a:	27 95       	ror	r18
    215c:	c9 01       	movw	r24, r18
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	82 1b       	sub	r24, r18
    216c:	93 0b       	sbc	r25, r19
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	84 0f       	add	r24, r20
    2172:	91 1d       	adc	r25, r1
    2174:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    2176:	9c 01       	movw	r18, r24
    2178:	36 95       	lsr	r19
    217a:	27 95       	ror	r18
    217c:	36 95       	lsr	r19
    217e:	27 95       	ror	r18
    2180:	36 95       	lsr	r19
    2182:	27 95       	ror	r18
    2184:	c9 01       	movw	r24, r18
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	82 1b       	sub	r24, r18
    2194:	93 0b       	sbc	r25, r19
}
    2196:	08 95       	ret

00002198 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2198:	2f 92       	push	r2
    219a:	3f 92       	push	r3
    219c:	4f 92       	push	r4
    219e:	5f 92       	push	r5
    21a0:	6f 92       	push	r6
    21a2:	7f 92       	push	r7
    21a4:	8f 92       	push	r8
    21a6:	9f 92       	push	r9
    21a8:	af 92       	push	r10
    21aa:	bf 92       	push	r11
    21ac:	cf 92       	push	r12
    21ae:	df 92       	push	r13
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	00 d0       	rcall	.+0      	; 0x21be <sysex_encode+0x26>
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <sysex_encode+0x28>
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <sysex_encode+0x2a>
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	1c 01       	movw	r2, r24
    21c8:	7a 83       	std	Y+2, r23	; 0x02
    21ca:	69 83       	std	Y+1, r22	; 0x01
    21cc:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    21ce:	ca 01       	movw	r24, r20
    21d0:	67 e0       	ldi	r22, 0x07	; 7
    21d2:	70 e0       	ldi	r23, 0x00	; 0
    21d4:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
    21d8:	2b 01       	movw	r4, r22
    21da:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    21dc:	61 15       	cp	r22, r1
    21de:	71 05       	cpc	r23, r1
    21e0:	b1 f1       	breq	.+108    	; 0x224e <sysex_encode+0xb6>
    21e2:	81 01       	movw	r16, r2
    21e4:	e9 80       	ldd	r14, Y+1	; 0x01
    21e6:	fa 80       	ldd	r15, Y+2	; 0x02
    21e8:	cc 24       	eor	r12, r12
    21ea:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    21ec:	88 24       	eor	r8, r8
    21ee:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    21f0:	1e 83       	std	Y+6, r17	; 0x06
    21f2:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    21f4:	f8 01       	movw	r30, r16
    21f6:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    21f8:	fc 82       	std	Y+4, r15	; 0x04
    21fa:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    21fc:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    21fe:	ab 81       	ldd	r26, Y+3	; 0x03
    2200:	bc 81       	ldd	r27, Y+4	; 0x04
    2202:	2d 91       	ld	r18, X+
    2204:	bc 83       	std	Y+4, r27	; 0x04
    2206:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    2208:	4f 5f       	subi	r20, 0xFF	; 255
    220a:	5f 4f       	sbci	r21, 0xFF	; 255
    220c:	82 2f       	mov	r24, r18
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	80 78       	andi	r24, 0x80	; 128
    2212:	90 70       	andi	r25, 0x00	; 0
    2214:	bc 01       	movw	r22, r24
    2216:	04 2e       	mov	r0, r20
    2218:	02 c0       	rjmp	.+4      	; 0x221e <sysex_encode+0x86>
    221a:	75 95       	asr	r23
    221c:	67 95       	ror	r22
    221e:	0a 94       	dec	r0
    2220:	e2 f7       	brpl	.-8      	; 0x221a <sysex_encode+0x82>
    2222:	ad 81       	ldd	r26, Y+5	; 0x05
    2224:	be 81       	ldd	r27, Y+6	; 0x06
    2226:	8c 91       	ld	r24, X
    2228:	86 2b       	or	r24, r22
    222a:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    222c:	2f 77       	andi	r18, 0x7F	; 127
    222e:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2230:	47 30       	cpi	r20, 0x07	; 7
    2232:	51 05       	cpc	r21, r1
    2234:	21 f7       	brne	.-56     	; 0x21fe <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2236:	08 94       	sec
    2238:	c1 1c       	adc	r12, r1
    223a:	d1 1c       	adc	r13, r1
    223c:	08 5f       	subi	r16, 0xF8	; 248
    223e:	1f 4f       	sbci	r17, 0xFF	; 255
    2240:	e7 e0       	ldi	r30, 0x07	; 7
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	ee 0e       	add	r14, r30
    2246:	ff 1e       	adc	r15, r31
    2248:	ca 14       	cp	r12, r10
    224a:	db 04       	cpc	r13, r11
    224c:	89 f6       	brne	.-94     	; 0x21f0 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    224e:	c3 01       	movw	r24, r6
    2250:	67 e0       	ldi	r22, 0x07	; 7
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodhi4>
   if (remainder) {
    2258:	88 23       	and	r24, r24
    225a:	d9 f1       	breq	.+118    	; 0x22d2 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    225c:	82 01       	movw	r16, r4
    225e:	00 0f       	add	r16, r16
    2260:	11 1f       	adc	r17, r17
    2262:	00 0f       	add	r16, r16
    2264:	11 1f       	adc	r17, r17
    2266:	00 0f       	add	r16, r16
    2268:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    226a:	78 01       	movw	r14, r16
    226c:	e4 18       	sub	r14, r4
    226e:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    2270:	d1 01       	movw	r26, r2
    2272:	a0 0f       	add	r26, r16
    2274:	b1 1f       	adc	r27, r17
    2276:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    2278:	68 2f       	mov	r22, r24
    227a:	70 e0       	ldi	r23, 0x00	; 0
    227c:	61 15       	cp	r22, r1
    227e:	71 05       	cpc	r23, r1
    2280:	19 f1       	breq	.+70     	; 0x22c8 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2282:	e9 81       	ldd	r30, Y+1	; 0x01
    2284:	fa 81       	ldd	r31, Y+2	; 0x02
    2286:	ee 0e       	add	r14, r30
    2288:	ff 1e       	adc	r15, r31
    228a:	c8 01       	movw	r24, r16
    228c:	01 96       	adiw	r24, 0x01	; 1
    228e:	28 0e       	add	r2, r24
    2290:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    2296:	f7 01       	movw	r30, r14
    2298:	41 91       	ld	r20, Z+
    229a:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    229c:	2f 5f       	subi	r18, 0xFF	; 255
    229e:	3f 4f       	sbci	r19, 0xFF	; 255
    22a0:	84 2f       	mov	r24, r20
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	80 78       	andi	r24, 0x80	; 128
    22a6:	90 70       	andi	r25, 0x00	; 0
    22a8:	02 2e       	mov	r0, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <sysex_encode+0x118>
    22ac:	95 95       	asr	r25
    22ae:	87 95       	ror	r24
    22b0:	0a 94       	dec	r0
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <sysex_encode+0x114>
    22b4:	9c 91       	ld	r25, X
    22b6:	89 2b       	or	r24, r25
    22b8:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    22ba:	4f 77       	andi	r20, 0x7F	; 127
    22bc:	f1 01       	movw	r30, r2
    22be:	41 93       	st	Z+, r20
    22c0:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    22c2:	26 17       	cp	r18, r22
    22c4:	37 07       	cpc	r19, r23
    22c6:	38 f3       	brcs	.-50     	; 0x2296 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    22c8:	c8 01       	movw	r24, r16
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	86 0f       	add	r24, r22
    22ce:	97 1f       	adc	r25, r23
    22d0:	07 c0       	rjmp	.+14     	; 0x22e0 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    22d2:	c2 01       	movw	r24, r4
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
   }
}
    22e0:	26 96       	adiw	r28, 0x06	; 6
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	ff 90       	pop	r15
    22f6:	ef 90       	pop	r14
    22f8:	df 90       	pop	r13
    22fa:	cf 90       	pop	r12
    22fc:	bf 90       	pop	r11
    22fe:	af 90       	pop	r10
    2300:	9f 90       	pop	r9
    2302:	8f 90       	pop	r8
    2304:	7f 90       	pop	r7
    2306:	6f 90       	pop	r6
    2308:	5f 90       	pop	r5
    230a:	4f 90       	pop	r4
    230c:	3f 90       	pop	r3
    230e:	2f 90       	pop	r2
    2310:	08 95       	ret

00002312 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2312:	6f 92       	push	r6
    2314:	7f 92       	push	r7
    2316:	8f 92       	push	r8
    2318:	9f 92       	push	r9
    231a:	af 92       	push	r10
    231c:	bf 92       	push	r11
    231e:	cf 92       	push	r12
    2320:	df 92       	push	r13
    2322:	ef 92       	push	r14
    2324:	ff 92       	push	r15
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	3c 01       	movw	r6, r24
    2330:	4b 01       	movw	r8, r22
    2332:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    2334:	42 30       	cpi	r20, 0x02	; 2
    2336:	51 05       	cpc	r21, r1
    2338:	08 f4       	brcc	.+2      	; 0x233c <sysex_decode+0x2a>
    233a:	6f c0       	rjmp	.+222    	; 0x241a <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    233c:	7a 01       	movw	r14, r20
    233e:	f6 94       	lsr	r15
    2340:	e7 94       	ror	r14
    2342:	f6 94       	lsr	r15
    2344:	e7 94       	ror	r14
    2346:	f6 94       	lsr	r15
    2348:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    234a:	e1 14       	cp	r14, r1
    234c:	f1 04       	cpc	r15, r1
    234e:	29 f1       	breq	.+74     	; 0x239a <sysex_decode+0x88>
    2350:	eb 01       	movw	r28, r22
    2352:	b3 01       	movw	r22, r6
    2354:	00 e0       	ldi	r16, 0x00	; 0
    2356:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2358:	cc 24       	eor	r12, r12
    235a:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    235c:	de 01       	movw	r26, r28
    235e:	11 96       	adiw	r26, 0x01	; 1
    2360:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2362:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    2364:	2d 91       	ld	r18, X+
    2366:	2f 77       	andi	r18, 0x7F	; 127
    2368:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    236a:	4f 5f       	subi	r20, 0xFF	; 255
    236c:	5f 4f       	sbci	r21, 0xFF	; 255
    236e:	88 81       	ld	r24, Y
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	04 2e       	mov	r0, r20
    2374:	02 c0       	rjmp	.+4      	; 0x237a <sysex_decode+0x68>
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	0a 94       	dec	r0
    237c:	e2 f7       	brpl	.-8      	; 0x2376 <sysex_decode+0x64>
    237e:	80 78       	andi	r24, 0x80	; 128
    2380:	28 2b       	or	r18, r24
    2382:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2384:	47 30       	cpi	r20, 0x07	; 7
    2386:	51 05       	cpc	r21, r1
    2388:	69 f7       	brne	.-38     	; 0x2364 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    238a:	0f 5f       	subi	r16, 0xFF	; 255
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	28 96       	adiw	r28, 0x08	; 8
    2390:	69 5f       	subi	r22, 0xF9	; 249
    2392:	7f 4f       	sbci	r23, 0xFF	; 255
    2394:	0e 15       	cp	r16, r14
    2396:	1f 05       	cpc	r17, r15
    2398:	09 f7       	brne	.-62     	; 0x235c <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    239a:	5a 2d       	mov	r21, r10
    239c:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    239e:	99 f1       	breq	.+102    	; 0x2406 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    23a0:	e7 01       	movw	r28, r14
    23a2:	cc 0f       	add	r28, r28
    23a4:	dd 1f       	adc	r29, r29
    23a6:	cc 0f       	add	r28, r28
    23a8:	dd 1f       	adc	r29, r29
    23aa:	cc 0f       	add	r28, r28
    23ac:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    23ae:	8e 01       	movw	r16, r28
    23b0:	0e 19       	sub	r16, r14
    23b2:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    23b4:	65 2f       	mov	r22, r21
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	61 50       	subi	r22, 0x01	; 1
    23ba:	70 40       	sbci	r23, 0x00	; 0
    23bc:	f9 f0       	breq	.+62     	; 0x23fc <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    23be:	ce 01       	movw	r24, r28
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	d4 01       	movw	r26, r8
    23c4:	a8 0f       	add	r26, r24
    23c6:	b9 1f       	adc	r27, r25
    23c8:	f3 01       	movw	r30, r6
    23ca:	e0 0f       	add	r30, r16
    23cc:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    23d2:	c8 0d       	add	r28, r8
    23d4:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    23d6:	4d 91       	ld	r20, X+
    23d8:	4f 77       	andi	r20, 0x7F	; 127
    23da:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    23dc:	2f 5f       	subi	r18, 0xFF	; 255
    23de:	3f 4f       	sbci	r19, 0xFF	; 255
    23e0:	88 81       	ld	r24, Y
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	02 2e       	mov	r0, r18
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <sysex_decode+0xda>
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	0a 94       	dec	r0
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <sysex_decode+0xd6>
    23f0:	80 78       	andi	r24, 0x80	; 128
    23f2:	48 2b       	or	r20, r24
    23f4:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    23f6:	26 17       	cp	r18, r22
    23f8:	37 07       	cpc	r19, r23
    23fa:	68 f3       	brcs	.-38     	; 0x23d6 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    23fc:	c8 01       	movw	r24, r16
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	85 0f       	add	r24, r21
    2402:	91 1d       	adc	r25, r1
    2404:	0c c0       	rjmp	.+24     	; 0x241e <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    2406:	c7 01       	movw	r24, r14
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	8e 19       	sub	r24, r14
    2416:	9f 09       	sbc	r25, r15
    2418:	02 c0       	rjmp	.+4      	; 0x241e <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	ff 90       	pop	r15
    2428:	ef 90       	pop	r14
    242a:	df 90       	pop	r13
    242c:	cf 90       	pop	r12
    242e:	bf 90       	pop	r11
    2430:	af 90       	pop	r10
    2432:	9f 90       	pop	r9
    2434:	8f 90       	pop	r8
    2436:	7f 90       	pop	r7
    2438:	6f 90       	pop	r6
    243a:	08 95       	ret

0000243c <__udivmodhi4>:
    243c:	aa 1b       	sub	r26, r26
    243e:	bb 1b       	sub	r27, r27
    2440:	51 e1       	ldi	r21, 0x11	; 17
    2442:	07 c0       	rjmp	.+14     	; 0x2452 <__udivmodhi4_ep>

00002444 <__udivmodhi4_loop>:
    2444:	aa 1f       	adc	r26, r26
    2446:	bb 1f       	adc	r27, r27
    2448:	a6 17       	cp	r26, r22
    244a:	b7 07       	cpc	r27, r23
    244c:	10 f0       	brcs	.+4      	; 0x2452 <__udivmodhi4_ep>
    244e:	a6 1b       	sub	r26, r22
    2450:	b7 0b       	sbc	r27, r23

00002452 <__udivmodhi4_ep>:
    2452:	88 1f       	adc	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	5a 95       	dec	r21
    2458:	a9 f7       	brne	.-22     	; 0x2444 <__udivmodhi4_loop>
    245a:	80 95       	com	r24
    245c:	90 95       	com	r25
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	08 95       	ret

00002464 <__divmodhi4>:
    2464:	97 fb       	bst	r25, 7
    2466:	09 2e       	mov	r0, r25
    2468:	07 26       	eor	r0, r23
    246a:	0a d0       	rcall	.+20     	; 0x2480 <__divmodhi4_neg1>
    246c:	77 fd       	sbrc	r23, 7
    246e:	04 d0       	rcall	.+8      	; 0x2478 <__divmodhi4_neg2>
    2470:	e5 df       	rcall	.-54     	; 0x243c <__udivmodhi4>
    2472:	06 d0       	rcall	.+12     	; 0x2480 <__divmodhi4_neg1>
    2474:	00 20       	and	r0, r0
    2476:	1a f4       	brpl	.+6      	; 0x247e <__divmodhi4_exit>

00002478 <__divmodhi4_neg2>:
    2478:	70 95       	com	r23
    247a:	61 95       	neg	r22
    247c:	7f 4f       	sbci	r23, 0xFF	; 255

0000247e <__divmodhi4_exit>:
    247e:	08 95       	ret

00002480 <__divmodhi4_neg1>:
    2480:	f6 f7       	brtc	.-4      	; 0x247e <__divmodhi4_exit>
    2482:	90 95       	com	r25
    2484:	81 95       	neg	r24
    2486:	9f 4f       	sbci	r25, 0xFF	; 255
    2488:	08 95       	ret

0000248a <memcpy>:
    248a:	fb 01       	movw	r30, r22
    248c:	dc 01       	movw	r26, r24
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <memcpy+0xa>
    2490:	01 90       	ld	r0, Z+
    2492:	0d 92       	st	X+, r0
    2494:	41 50       	subi	r20, 0x01	; 1
    2496:	50 40       	sbci	r21, 0x00	; 0
    2498:	d8 f7       	brcc	.-10     	; 0x2490 <memcpy+0x6>
    249a:	08 95       	ret

0000249c <memmove>:
    249c:	68 17       	cp	r22, r24
    249e:	79 07       	cpc	r23, r25
    24a0:	68 f4       	brcc	.+26     	; 0x24bc <memmove+0x20>
    24a2:	fb 01       	movw	r30, r22
    24a4:	dc 01       	movw	r26, r24
    24a6:	e4 0f       	add	r30, r20
    24a8:	f5 1f       	adc	r31, r21
    24aa:	a4 0f       	add	r26, r20
    24ac:	b5 1f       	adc	r27, r21
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <memmove+0x18>
    24b0:	02 90       	ld	r0, -Z
    24b2:	0e 92       	st	-X, r0
    24b4:	41 50       	subi	r20, 0x01	; 1
    24b6:	50 40       	sbci	r21, 0x00	; 0
    24b8:	d8 f7       	brcc	.-10     	; 0x24b0 <memmove+0x14>
    24ba:	08 95       	ret
    24bc:	0c 94 45 12 	jmp	0x248a	; 0x248a <memcpy>

000024c0 <_exit>:
    24c0:	f8 94       	cli

000024c2 <__stop_program>:
    24c2:	ff cf       	rjmp	.-2      	; 0x24c2 <__stop_program>
