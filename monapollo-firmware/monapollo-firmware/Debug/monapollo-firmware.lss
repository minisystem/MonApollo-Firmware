
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000008c0  00000954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080014e  0080014e  000009a2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  000010f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b31  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000038a  00000000  00000000  00001d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000756  00000000  00000000  00002093  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000027ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030a  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046a  00000000  00000000  00002c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000030e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_5>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_13>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d0 e1       	ldi	r29, 0x10	; 16
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	e0 ec       	ldi	r30, 0xC0	; 192
  78:	f8 e0       	ldi	r31, 0x08	; 8
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ae 34       	cpi	r26, 0x4E	; 78
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	ae e4       	ldi	r26, 0x4E	; 78
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a3 37       	cpi	r26, 0x73	; 115
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 ff 03 	call	0x7fe	; 0x7fe <main>
  9a:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_dac>:
#include "port_map.h"
#include "dac.h"

void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
  a2:	83 b3       	in	r24, 0x13	; 19
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
  ac:	97 b1       	in	r25, 0x07	; 7
  ae:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
  b0:	e9 ed       	ldi	r30, 0xD9	; 217
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
  ba:	ea ed       	ldi	r30, 0xDA	; 218
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
  c4:	84 b3       	in	r24, 0x14	; 20
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
  ca:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
  cc:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
  ce:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
  d0:	a0 9a       	sbi	0x14, 0	; 20
}
  d2:	08 95       	ret

000000d4 <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
  d4:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
  d6:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
  d8:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
  da:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
  dc:	62 b9       	out	0x02, r22	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	00 c0       	rjmp	.+0      	; 0xe0 <set_dac+0xc>

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
  e0:	ea ed       	ldi	r30, 0xDA	; 218
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	40 81       	ld	r20, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	b9 01       	movw	r22, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <set_dac+0x1e>
  ee:	66 0f       	add	r22, r22
  f0:	77 1f       	adc	r23, r23
  f2:	8a 95       	dec	r24
  f4:	e2 f7       	brpl	.-8      	; 0xee <set_dac+0x1a>
  f6:	cb 01       	movw	r24, r22
  f8:	94 2f       	mov	r25, r20
  fa:	98 2b       	or	r25, r24
  fc:	90 83       	st	Z, r25
  fe:	73 e0       	ldi	r23, 0x03	; 3
 100:	7a 95       	dec	r23
 102:	f1 f7       	brne	.-4      	; 0x100 <set_dac+0x2c>
 104:	00 00       	nop
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
 106:	90 81       	ld	r25, Z
 108:	80 95       	com	r24
 10a:	89 23       	and	r24, r25
 10c:	80 83       	st	Z, r24
	
}
 10e:	08 95       	ret

00000110 <display_dec>:
#include "display.h"
#include "port_map.h"
#include "display_map.h"

void display_dec(uint16_t number, uint8_t digit)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	2a 97       	sbiw	r28, 0x0a	; 10
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
 124:	de 01       	movw	r26, r28
 126:	11 96       	adiw	r26, 0x01	; 1
 128:	e0 e0       	ldi	r30, 0x00	; 0
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	3a e0       	ldi	r19, 0x0A	; 10
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	31 50       	subi	r19, 0x01	; 1
 134:	e1 f7       	brne	.-8      	; 0x12e <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 13a:	ea ed       	ldi	r30, 0xDA	; 218
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	30 81       	ld	r19, Z
 140:	30 61       	ori	r19, 0x10	; 16
 142:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 144:	30 81       	ld	r19, Z
 146:	3f 7e       	andi	r19, 0xEF	; 239
 148:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
 14a:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
 14c:	30 81       	ld	r19, Z
 14e:	30 62       	ori	r19, 0x20	; 32
 150:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
 152:	30 81       	ld	r19, Z
 154:	3f 7d       	andi	r19, 0xDF	; 223
 156:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
 158:	62 30       	cpi	r22, 0x02	; 2
 15a:	f9 f0       	breq	.+62     	; 0x19a <display_dec+0x8a>
 15c:	63 30       	cpi	r22, 0x03	; 3
 15e:	18 f4       	brcc	.+6      	; 0x166 <display_dec+0x56>
 160:	61 30       	cpi	r22, 0x01	; 1
 162:	a1 f5       	brne	.+104    	; 0x1cc <display_dec+0xbc>
 164:	0d c0       	rjmp	.+26     	; 0x180 <display_dec+0x70>
 166:	64 30       	cpi	r22, 0x04	; 4
 168:	29 f1       	breq	.+74     	; 0x1b4 <display_dec+0xa4>
 16a:	68 30       	cpi	r22, 0x08	; 8
 16c:	79 f5       	brne	.+94     	; 0x1cc <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodhi4>
 176:	fe 01       	movw	r30, r28
 178:	e8 0f       	add	r30, r24
 17a:	f9 1f       	adc	r31, r25
 17c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 17e:	26 c0       	rjmp	.+76     	; 0x1cc <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
 180:	64 e6       	ldi	r22, 0x64	; 100
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodhi4>
 188:	6a e0       	ldi	r22, 0x0A	; 10
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodhi4>
 190:	fe 01       	movw	r30, r28
 192:	e6 0f       	add	r30, r22
 194:	f7 1f       	adc	r31, r23
 196:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 198:	19 c0       	rjmp	.+50     	; 0x1cc <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
 19a:	68 ee       	ldi	r22, 0xE8	; 232
 19c:	73 e0       	ldi	r23, 0x03	; 3
 19e:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodhi4>
 1a2:	64 e6       	ldi	r22, 0x64	; 100
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodhi4>
 1aa:	fe 01       	movw	r30, r28
 1ac:	e6 0f       	add	r30, r22
 1ae:	f7 1f       	adc	r31, r23
 1b0:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 1b2:	0c c0       	rjmp	.+24     	; 0x1cc <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
 1b4:	60 e1       	ldi	r22, 0x10	; 16
 1b6:	77 e2       	ldi	r23, 0x27	; 39
 1b8:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodhi4>
 1bc:	68 ee       	ldi	r22, 0xE8	; 232
 1be:	73 e0       	ldi	r23, 0x03	; 3
 1c0:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodhi4>
 1c4:	fe 01       	movw	r30, r28
 1c6:	e6 0f       	add	r30, r22
 1c8:	f7 1f       	adc	r31, r23
 1ca:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
 1cc:	20 95       	com	r18
 1ce:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 1d0:	ea ed       	ldi	r30, 0xDA	; 218
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 1da:	80 81       	ld	r24, Z
 1dc:	8f 7e       	andi	r24, 0xEF	; 239
 1de:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
 1e0:	2a 96       	adiw	r28, 0x0a	; 10
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
 1f2:	87 e2       	ldi	r24, 0x27	; 39
 1f4:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
 1f8:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
 1fc:	88 e9       	ldi	r24, 0x98	; 152
 1fe:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
 202:	08 95       	ret

00000204 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
 204:	ea e7       	ldi	r30, 0x7A	; 122
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)	
 20e:	ac e7       	ldi	r26, 0x7C	; 124
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	8c 91       	ld	r24, X
 214:	80 64       	ori	r24, 0x40	; 64
 216:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
 218:	ae e7       	ldi	r26, 0x7E	; 126
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	8c 91       	ld	r24, X
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
 222:	80 81       	ld	r24, Z
 224:	80 68       	ori	r24, 0x80	; 128
 226:	80 83       	st	Z, r24

	
}
 228:	08 95       	ret

0000022a <__vector_13>:

ISR (USART_RX_vect) { // USART receive interrupt
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
	 
	 //if (UDR0 == 248) {
		 //PORTB ^= (1<<ARP_SYNC_LED);
		 //return;
	 //}		  
	 value_to_display = UDR0;
 238:	80 91 c6 00 	lds	r24, 0x00C6
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 4d 01 	sts	0x014D, r25
 242:	80 93 4c 01 	sts	0x014C, r24
	 uint8_t status_byte = value_to_display >> 4;
 246:	80 91 4c 01 	lds	r24, 0x014C
 24a:	90 91 4d 01 	lds	r25, 0x014D
 24e:	92 95       	swap	r25
 250:	82 95       	swap	r24
 252:	8f 70       	andi	r24, 0x0F	; 15
 254:	89 27       	eor	r24, r25
 256:	9f 70       	andi	r25, 0x0F	; 15
 258:	89 27       	eor	r24, r25
	 
	 if ((status_byte >> 3) == 1) //if it's a note on or off event, handle it:
 25a:	98 2f       	mov	r25, r24
 25c:	96 95       	lsr	r25
 25e:	96 95       	lsr	r25
 260:	96 95       	lsr	r25
 262:	91 30       	cpi	r25, 0x01	; 1
 264:	31 f4       	brne	.+12     	; 0x272 <__vector_13+0x48>
	 { 
		 if ((status_byte >> 0) & 1) {PORTF |= (1<<GATE);} else {PORTF &= ~(1<<GATE);}
 266:	80 ff       	sbrs	r24, 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <__vector_13+0x44>
 26a:	89 9a       	sbi	0x11, 1	; 17
 26c:	09 c0       	rjmp	.+18     	; 0x280 <__vector_13+0x56>
 26e:	89 98       	cbi	0x11, 1	; 17
 270:	07 c0       	rjmp	.+14     	; 0x280 <__vector_13+0x56>
		//PORTF ^= (1<<GATE);	 
     }	else if (value_to_display == 0) {PORTF &= ~(1<<GATE);}
 272:	80 91 4c 01 	lds	r24, 0x014C
 276:	90 91 4d 01 	lds	r25, 0x014D
 27a:	00 97       	sbiw	r24, 0x00	; 0
 27c:	09 f4       	brne	.+2      	; 0x280 <__vector_13+0x56>
 27e:	89 98       	cbi	0x11, 1	; 17
	  
	
}
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 92       	push	r2
 29a:	3f 92       	push	r3
 29c:	4f 92       	push	r4
 29e:	5f 92       	push	r5
 2a0:	6f 92       	push	r6
 2a2:	7f 92       	push	r7
 2a4:	8f 92       	push	r8
 2a6:	9f 92       	push	r9
 2a8:	af 92       	push	r10
 2aa:	bf 92       	push	r11
 2ac:	cf 92       	push	r12
 2ae:	df 92       	push	r13
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
	
	display_dec(value_to_display, digit[place]);
 2d4:	80 91 4c 01 	lds	r24, 0x014C
 2d8:	90 91 4d 01 	lds	r25, 0x014D
 2dc:	20 91 64 01 	lds	r18, 0x0164
 2e0:	ea e0       	ldi	r30, 0x0A	; 10
 2e2:	f1 e0       	ldi	r31, 0x01	; 1
 2e4:	e2 0f       	add	r30, r18
 2e6:	f1 1d       	adc	r31, r1
 2e8:	60 81       	ld	r22, Z
 2ea:	0e 94 88 00 	call	0x110	; 0x110 <display_dec>
 2ee:	cc 24       	eor	r12, r12
 2f0:	dd 24       	eor	r13, r13
 2f2:	c3 94       	inc	r12
 2f4:	00 e0       	ldi	r16, 0x00	; 0
 2f6:	10 e0       	ldi	r17, 0x00	; 0
			
	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{
		DATA_BUS = i;
		POT_MUX &= ~(1<<POTMUX_EN0);
 2f8:	0f 2e       	mov	r0, r31
 2fa:	fa ed       	ldi	r31, 0xDA	; 218
 2fc:	ef 2e       	mov	r14, r31
 2fe:	ff 24       	eor	r15, r15
 300:	f0 2d       	mov	r31, r0
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.	
		ADCSRA |= (1<<ADSC); //start ADC conversion
 302:	ca e7       	ldi	r28, 0x7A	; 122
 304:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
		POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
		//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
								
		//adc_previous = adc_value;
		adc_value = ADCL;
 306:	0f 2e       	mov	r0, r31
 308:	f8 e7       	ldi	r31, 0x78	; 120
 30a:	8f 2e       	mov	r8, r31
 30c:	99 24       	eor	r9, r9
 30e:	f0 2d       	mov	r31, r0
		adc_value = adc_value | (ADCH <<8);
 310:	0f 2e       	mov	r0, r31
 312:	f9 e7       	ldi	r31, 0x79	; 121
 314:	4f 2e       	mov	r4, r31
 316:	55 24       	eor	r5, r5
 318:	f0 2d       	mov	r31, r0
		} else if (i == 11) //exception to handle ARP_RATE pot
		{
			//store ARP pot value, but don't set DAC
									
		} else {
			set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
 31a:	0f 2e       	mov	r0, r31
 31c:	fc e2       	ldi	r31, 0x2C	; 44
 31e:	2f 2e       	mov	r2, r31
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	3f 2e       	mov	r3, r31
 324:	f0 2d       	mov	r31, r0
 326:	05 c0       	rjmp	.+10     	; 0x332 <__vector_5+0xa4>
	
}

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
	
	display_dec(value_to_display, digit[place]);
 328:	0f 5f       	subi	r16, 0xFF	; 255
 32a:	1f 4f       	sbci	r17, 0xFF	; 255
 32c:	08 94       	sec
 32e:	c1 1c       	adc	r12, r1
 330:	d1 1c       	adc	r13, r1
 332:	f8 01       	movw	r30, r16
	
			
	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{
		DATA_BUS = i;
 334:	02 b9       	out	0x02, r16	; 2
		POT_MUX &= ~(1<<POTMUX_EN0);
 336:	d7 01       	movw	r26, r14
 338:	8c 91       	ld	r24, X
 33a:	8f 7b       	andi	r24, 0xBF	; 191
 33c:	8c 93       	st	X, r24
 33e:	bd e0       	ldi	r27, 0x0D	; 13
 340:	ba 95       	dec	r27
 342:	f1 f7       	brne	.-4      	; 0x340 <__vector_5+0xb2>
 344:	00 00       	nop
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.	
		ADCSRA |= (1<<ADSC); //start ADC conversion
 346:	88 81       	ld	r24, Y
 348:	80 64       	ori	r24, 0x40	; 64
 34a:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
 34c:	88 81       	ld	r24, Y
 34e:	86 fd       	sbrc	r24, 6
 350:	fd cf       	rjmp	.-6      	; 0x34c <__vector_5+0xbe>
		POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
 352:	d7 01       	movw	r26, r14
 354:	8c 91       	ld	r24, X
 356:	80 64       	ori	r24, 0x40	; 64
 358:	8c 93       	st	X, r24
		//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
								
		//adc_previous = adc_value;
		adc_value = ADCL;
 35a:	d4 01       	movw	r26, r8
 35c:	8c 91       	ld	r24, X
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	90 93 61 01 	sts	0x0161, r25
 364:	80 93 60 01 	sts	0x0160, r24
		adc_value = adc_value | (ADCH <<8);
 368:	d2 01       	movw	r26, r4
 36a:	2c 91       	ld	r18, X
 36c:	80 91 60 01 	lds	r24, 0x0160
 370:	90 91 61 01 	lds	r25, 0x0161
 374:	b2 2e       	mov	r11, r18
 376:	aa 24       	eor	r10, r10
 378:	8a 29       	or	r24, r10
 37a:	9b 29       	or	r25, r11
 37c:	90 93 61 01 	sts	0x0161, r25
 380:	80 93 60 01 	sts	0x0160, r24
													
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
 384:	c8 01       	movw	r24, r16
 386:	08 97       	sbiw	r24, 0x08	; 8
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	91 05       	cpc	r25, r1
 38c:	08 f0       	brcs	.+2      	; 0x390 <__vector_5+0x102>
 38e:	44 c0       	rjmp	.+136    	; 0x418 <__vector_5+0x18a>
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
 390:	e9 30       	cpi	r30, 0x09	; 9
 392:	f1 05       	cpc	r31, r1
 394:	19 f0       	breq	.+6      	; 0x39c <__vector_5+0x10e>
		adc_value = ADCL;
		adc_value = adc_value | (ADCH <<8);
													
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
 396:	2f e9       	ldi	r18, 0x9F	; 159
 398:	38 e1       	ldi	r19, 0x18	; 24
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <__vector_5+0x112>
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
 39c:	25 e0       	ldi	r18, 0x05	; 5
 39e:	3f e1       	ldi	r19, 0x1F	; 31
			if (adc_value >= 512) {
 3a0:	80 91 60 01 	lds	r24, 0x0160
 3a4:	90 91 61 01 	lds	r25, 0x0161
 3a8:	b2 e0       	ldi	r27, 0x02	; 2
 3aa:	80 30       	cpi	r24, 0x00	; 0
 3ac:	9b 07       	cpc	r25, r27
 3ae:	d8 f0       	brcs	.+54     	; 0x3e6 <__vector_5+0x158>
				set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value + (adc_value - 512)));
 3b0:	ee 0f       	add	r30, r30
 3b2:	ff 1f       	adc	r31, r31
 3b4:	e2 0d       	add	r30, r2
 3b6:	f3 1d       	adc	r31, r3
 3b8:	81 81       	ldd	r24, Z+1	; 0x01
 3ba:	60 81       	ld	r22, Z
 3bc:	40 91 60 01 	lds	r20, 0x0160
 3c0:	50 91 61 01 	lds	r21, 0x0161
 3c4:	40 50       	subi	r20, 0x00	; 0
 3c6:	52 40       	sbci	r21, 0x02	; 2
 3c8:	42 0f       	add	r20, r18
 3ca:	53 1f       	adc	r21, r19
 3cc:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_dac>
				tune_offset = adc_value - 512;
 3d0:	80 91 60 01 	lds	r24, 0x0160
 3d4:	90 91 61 01 	lds	r25, 0x0161
 3d8:	80 50       	subi	r24, 0x00	; 0
 3da:	92 40       	sbci	r25, 0x02	; 2
 3dc:	90 93 5f 01 	sts	0x015F, r25
 3e0:	80 93 5e 01 	sts	0x015E, r24
 3e4:	2f c0       	rjmp	.+94     	; 0x444 <__vector_5+0x1b6>
			} else {
				set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value - (512- adc_value))); 
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	e2 0d       	add	r30, r2
 3ec:	f3 1d       	adc	r31, r3
 3ee:	81 81       	ldd	r24, Z+1	; 0x01
 3f0:	60 81       	ld	r22, Z
 3f2:	40 91 60 01 	lds	r20, 0x0160
 3f6:	50 91 61 01 	lds	r21, 0x0161
 3fa:	40 50       	subi	r20, 0x00	; 0
 3fc:	52 40       	sbci	r21, 0x02	; 2
 3fe:	42 0f       	add	r20, r18
 400:	53 1f       	adc	r21, r19
 402:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_dac>
				tune_offset = adc_value;
 406:	80 91 60 01 	lds	r24, 0x0160
 40a:	90 91 61 01 	lds	r25, 0x0161
 40e:	90 93 5f 01 	sts	0x015F, r25
 412:	80 93 5e 01 	sts	0x015E, r24
 416:	16 c0       	rjmp	.+44     	; 0x444 <__vector_5+0x1b6>
			}

		} else if (i == 11) //exception to handle ARP_RATE pot
 418:	eb 30       	cpi	r30, 0x0B	; 11
 41a:	f1 05       	cpc	r31, r1
 41c:	09 f4       	brne	.+2      	; 0x420 <__vector_5+0x192>
 41e:	84 cf       	rjmp	.-248    	; 0x328 <__vector_5+0x9a>
		{
			//store ARP pot value, but don't set DAC
									
		} else {
			set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
 420:	ee 0f       	add	r30, r30
 422:	ff 1f       	adc	r31, r31
 424:	e2 0d       	add	r30, r2
 426:	f3 1d       	adc	r31, r3
 428:	81 81       	ldd	r24, Z+1	; 0x01
 42a:	60 81       	ld	r22, Z
 42c:	40 91 60 01 	lds	r20, 0x0160
 430:	50 91 61 01 	lds	r21, 0x0161
 434:	42 95       	swap	r20
 436:	52 95       	swap	r21
 438:	50 7f       	andi	r21, 0xF0	; 240
 43a:	54 27       	eor	r21, r20
 43c:	40 7f       	andi	r20, 0xF0	; 240
 43e:	54 27       	eor	r21, r20
 440:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_dac>
	
	display_dec(value_to_display, digit[place]);
	
			
	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
 444:	e0 e1       	ldi	r30, 0x10	; 16
 446:	ce 16       	cp	r12, r30
 448:	d1 04       	cpc	r13, r1
 44a:	0c f4       	brge	.+2      	; 0x44e <__vector_5+0x1c0>
 44c:	6d cf       	rjmp	.-294    	; 0x328 <__vector_5+0x9a>
 44e:	00 e0       	ldi	r16, 0x00	; 0
 450:	10 e0       	ldi	r17, 0x00	; 0
    //now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
				
		DATA_BUS = i+1; //U4 input 0 is not used (grounded)
		POT_MUX &= ~(1<<POTMUX_EN1);
 452:	0f 2e       	mov	r0, r31
 454:	fa ed       	ldi	r31, 0xDA	; 218
 456:	ef 2e       	mov	r14, r31
 458:	ff 24       	eor	r15, r15
 45a:	f0 2d       	mov	r31, r0
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
 45c:	ca e7       	ldi	r28, 0x7A	; 122
 45e:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
		POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2		
		//adc_previous = adc_value;
		adc_value = ADCL;
 460:	0f 2e       	mov	r0, r31
 462:	f8 e7       	ldi	r31, 0x78	; 120
 464:	cf 2e       	mov	r12, r31
 466:	dd 24       	eor	r13, r13
 468:	f0 2d       	mov	r31, r0
		adc_value = adc_value | (ADCH <<8);				
 46a:	0f 2e       	mov	r0, r31
 46c:	f9 e7       	ldi	r31, 0x79	; 121
 46e:	af 2e       	mov	r10, r31
 470:	bb 24       	eor	r11, r11
 472:	f0 2d       	mov	r31, r0

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
 474:	0f 2e       	mov	r0, r31
 476:	fe e0       	ldi	r31, 0x0E	; 14
 478:	8f 2e       	mov	r8, r31
 47a:	f1 e0       	ldi	r31, 0x01	; 1
 47c:	9f 2e       	mov	r9, r31
 47e:	f0 2d       	mov	r31, r0
     }	else if (value_to_display == 0) {PORTF &= ~(1<<GATE);}
	  
	
}

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
 480:	80 2f       	mov	r24, r16
 482:	8f 5f       	subi	r24, 0xFF	; 255
	
    //now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
				
		DATA_BUS = i+1; //U4 input 0 is not used (grounded)
 484:	82 b9       	out	0x02, r24	; 2
		POT_MUX &= ~(1<<POTMUX_EN1);
 486:	d7 01       	movw	r26, r14
 488:	8c 91       	ld	r24, X
 48a:	8f 77       	andi	r24, 0x7F	; 127
 48c:	8c 93       	st	X, r24
 48e:	bd e0       	ldi	r27, 0x0D	; 13
 490:	ba 95       	dec	r27
 492:	f1 f7       	brne	.-4      	; 0x490 <__vector_5+0x202>
 494:	00 00       	nop
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
 496:	88 81       	ld	r24, Y
 498:	80 64       	ori	r24, 0x40	; 64
 49a:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
 49c:	88 81       	ld	r24, Y
 49e:	86 fd       	sbrc	r24, 6
 4a0:	fd cf       	rjmp	.-6      	; 0x49c <__vector_5+0x20e>
		POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2		
 4a2:	f7 01       	movw	r30, r14
 4a4:	80 81       	ld	r24, Z
 4a6:	80 68       	ori	r24, 0x80	; 128
 4a8:	80 83       	st	Z, r24
		//adc_previous = adc_value;
		adc_value = ADCL;
 4aa:	d6 01       	movw	r26, r12
 4ac:	8c 91       	ld	r24, X
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	90 93 61 01 	sts	0x0161, r25
 4b4:	80 93 60 01 	sts	0x0160, r24
		adc_value = adc_value | (ADCH <<8);				
 4b8:	f5 01       	movw	r30, r10
 4ba:	20 81       	ld	r18, Z
 4bc:	80 91 60 01 	lds	r24, 0x0160
 4c0:	90 91 61 01 	lds	r25, 0x0161
 4c4:	72 2e       	mov	r7, r18
 4c6:	66 24       	eor	r6, r6
 4c8:	86 29       	or	r24, r6
 4ca:	97 29       	or	r25, r7
 4cc:	90 93 61 01 	sts	0x0161, r25
 4d0:	80 93 60 01 	sts	0x0160, r24

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
 4d4:	f8 01       	movw	r30, r16
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	e8 0d       	add	r30, r8
 4dc:	f9 1d       	adc	r31, r9
 4de:	81 81       	ldd	r24, Z+1	; 0x01
 4e0:	60 81       	ld	r22, Z
 4e2:	40 91 60 01 	lds	r20, 0x0160
 4e6:	50 91 61 01 	lds	r21, 0x0161
 4ea:	42 95       	swap	r20
 4ec:	52 95       	swap	r21
 4ee:	50 7f       	andi	r21, 0xF0	; 240
 4f0:	54 27       	eor	r21, r20
 4f2:	40 7f       	andi	r20, 0xF0	; 240
 4f4:	54 27       	eor	r21, r20
 4f6:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_dac>
		}
						
	}						
	
    //now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
 4fa:	0f 5f       	subi	r16, 0xFF	; 255
 4fc:	1f 4f       	sbci	r17, 0xFF	; 255
 4fe:	0f 30       	cpi	r16, 0x0F	; 15
 500:	11 05       	cpc	r17, r1
 502:	09 f0       	breq	.+2      	; 0x506 <__vector_5+0x278>
 504:	bd cf       	rjmp	.-134    	; 0x480 <__vector_5+0x1f2>

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);

	}

	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
 506:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
 508:	a1 9a       	sbi	0x14, 1	; 20
		
	//do SPI read/write every 5 interrupts (16.5 ms)
	if (switch_timer++ == 5)
 50a:	80 91 65 01 	lds	r24, 0x0165
 50e:	98 2f       	mov	r25, r24
 510:	9f 5f       	subi	r25, 0xFF	; 255
 512:	90 93 65 01 	sts	0x0165, r25
 516:	85 30       	cpi	r24, 0x05	; 5
 518:	09 f0       	breq	.+2      	; 0x51c <__vector_5+0x28e>
 51a:	44 c1       	rjmp	.+648    	; 0x7a4 <__vector_5+0x516>
	{
		switch_timer = 0;
 51c:	10 92 65 01 	sts	0x0165, r1
		
		
		SPI_PORT |= SPI_SW_LATCH;
 520:	2d 9a       	sbi	0x05, 5	; 5
		
		//SHIFT 5th BYTE
		SPDR =  
		((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
 522:	50 91 6a 01 	lds	r21, 0x016A
		((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
 526:	20 91 6a 01 	lds	r18, 0x016A
		((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
 52a:	60 91 6a 01 	lds	r22, 0x016A
		
		
		SPI_PORT |= SPI_SW_LATCH;
		
		//SHIFT 5th BYTE
		SPDR =  
 52e:	30 91 6a 01 	lds	r19, 0x016A
		((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
		((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
		((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
		((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
		((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
 532:	40 91 6a 01 	lds	r20, 0x016A
		((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
 536:	90 91 6a 01 	lds	r25, 0x016A
		((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
 53a:	80 91 6a 01 	lds	r24, 0x016A
		ISW8_SW_ON << ISW8_LED; 
 53e:	70 91 6f 01 	lds	r23, 0x016F
 542:	77 95       	ror	r23
 544:	77 27       	eor	r23, r23
 546:	77 95       	ror	r23
		
		
		SPI_PORT |= SPI_SW_LATCH;
		
		//SHIFT 5th BYTE
		SPDR =  
 548:	31 70       	andi	r19, 0x01	; 1
 54a:	37 2b       	or	r19, r23
		((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
 54c:	55 1f       	adc	r21, r21
 54e:	55 27       	eor	r21, r21
 550:	55 1f       	adc	r21, r21
 552:	55 0f       	add	r21, r21
		
		
		SPI_PORT |= SPI_SW_LATCH;
		
		//SHIFT 5th BYTE
		SPDR =  
 554:	53 2b       	or	r21, r19
		((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
		((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
 556:	26 95       	lsr	r18
 558:	26 95       	lsr	r18
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	21 70       	andi	r18, 0x01	; 1
 55e:	30 70       	andi	r19, 0x00	; 0
 560:	22 0f       	add	r18, r18
 562:	33 1f       	adc	r19, r19
 564:	22 0f       	add	r18, r18
 566:	33 1f       	adc	r19, r19
		
		
		SPI_PORT |= SPI_SW_LATCH;
		
		//SHIFT 5th BYTE
		SPDR =  
 568:	25 2b       	or	r18, r21
		((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
		((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
		((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
 56a:	66 95       	lsr	r22
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	61 70       	andi	r22, 0x01	; 1
 570:	70 70       	andi	r23, 0x00	; 0
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	66 0f       	add	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	66 0f       	add	r22, r22
 57c:	77 1f       	adc	r23, r23
		
		
		SPI_PORT |= SPI_SW_LATCH;
		
		//SHIFT 5th BYTE
		SPDR =  
 57e:	62 2b       	or	r22, r18
		((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
		((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
		((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
		((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
		((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
 580:	42 95       	swap	r20
 582:	4f 70       	andi	r20, 0x0F	; 15
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	41 70       	andi	r20, 0x01	; 1
 588:	50 70       	andi	r21, 0x00	; 0
 58a:	42 95       	swap	r20
 58c:	52 95       	swap	r21
 58e:	50 7f       	andi	r21, 0xF0	; 240
 590:	54 27       	eor	r21, r20
 592:	40 7f       	andi	r20, 0xF0	; 240
 594:	54 27       	eor	r21, r20
		
		
		SPI_PORT |= SPI_SW_LATCH;
		
		//SHIFT 5th BYTE
		SPDR =  
 596:	46 2b       	or	r20, r22
		((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
		((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
		((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
		((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
		((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
		((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
 598:	92 95       	swap	r25
 59a:	96 95       	lsr	r25
 59c:	97 70       	andi	r25, 0x07	; 7
 59e:	29 2f       	mov	r18, r25
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	21 70       	andi	r18, 0x01	; 1
 5a4:	30 70       	andi	r19, 0x00	; 0
 5a6:	22 0f       	add	r18, r18
 5a8:	33 1f       	adc	r19, r19
 5aa:	22 95       	swap	r18
 5ac:	32 95       	swap	r19
 5ae:	30 7f       	andi	r19, 0xF0	; 240
 5b0:	32 27       	eor	r19, r18
 5b2:	20 7f       	andi	r18, 0xF0	; 240
 5b4:	32 27       	eor	r19, r18
		
		
		SPI_PORT |= SPI_SW_LATCH;
		
		//SHIFT 5th BYTE
		SPDR =  
 5b6:	24 2b       	or	r18, r20
		((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
		((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
		((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
		((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
		((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
		((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
 5b8:	82 95       	swap	r24
 5ba:	86 95       	lsr	r24
 5bc:	86 95       	lsr	r24
 5be:	83 70       	andi	r24, 0x03	; 3
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	81 70       	andi	r24, 0x01	; 1
 5c4:	90 70       	andi	r25, 0x00	; 0
 5c6:	00 24       	eor	r0, r0
 5c8:	96 95       	lsr	r25
 5ca:	87 95       	ror	r24
 5cc:	07 94       	ror	r0
 5ce:	96 95       	lsr	r25
 5d0:	87 95       	ror	r24
 5d2:	07 94       	ror	r0
 5d4:	98 2f       	mov	r25, r24
 5d6:	80 2d       	mov	r24, r0
		
		
		SPI_PORT |= SPI_SW_LATCH;
		
		//SHIFT 5th BYTE
		SPDR =  
 5d8:	82 2b       	or	r24, r18
 5da:	8e bd       	out	0x2e, r24	; 46
		((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
		((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
		((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
		ISW8_SW_ON << ISW8_LED; 
		
		while (!(SPSR & (1<<SPIF)));
 5dc:	0d b4       	in	r0, 0x2d	; 45
 5de:	07 fe       	sbrs	r0, 7
 5e0:	fd cf       	rjmp	.-6      	; 0x5dc <__vector_5+0x34e>
		
		//Now read SPDR for switch data shifted in from 74XX165 U14
		spi_sw_current_state = SPDR;
 5e2:	8e b5       	in	r24, 0x2e	; 46
 5e4:	80 93 6c 01 	sts	0x016C, r24
		
		spi_sw_current_state ^= spi_sw_previous_state;
 5e8:	80 91 6c 01 	lds	r24, 0x016C
 5ec:	90 91 6b 01 	lds	r25, 0x016B
 5f0:	89 27       	eor	r24, r25
 5f2:	80 93 6c 01 	sts	0x016C, r24
		spi_sw_previous_state ^= spi_sw_current_state;
 5f6:	80 91 6b 01 	lds	r24, 0x016B
 5fa:	90 91 6c 01 	lds	r25, 0x016C
 5fe:	89 27       	eor	r24, r25
 600:	80 93 6b 01 	sts	0x016B, r24
		spi_sw_current_state &= spi_sw_previous_state;
 604:	80 91 6c 01 	lds	r24, 0x016C
 608:	90 91 6b 01 	lds	r25, 0x016B
 60c:	89 23       	and	r24, r25
 60e:	80 93 6c 01 	sts	0x016C, r24
		//if (spi_sw_current_state & (1<<ISW4_SW)) sw_latch_five ^= (1 << ISW4_SW);	
		//if (spi_sw_current_state & (1<<ISW5_SW)) sw_latch_five ^= (1 << ISW5_SW);
		//if (spi_sw_current_state & (1<<ISW6_SW)) sw_latch_five ^= (1 << ISW6_SW);
		//if (spi_sw_current_state & (1<<ISW7_SW)) sw_latch_five ^= (1 << ISW7_SW);
		
		sw_latch_five ^= spi_sw_current_state;
 612:	80 91 6a 01 	lds	r24, 0x016A
 616:	90 91 6c 01 	lds	r25, 0x016C
 61a:	89 27       	eor	r24, r25
 61c:	80 93 6a 01 	sts	0x016A, r24
		
		//SHIFT 4th BYTE
		SPDR = 0; //no LEDs connected in current test set up
 620:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 622:	0d b4       	in	r0, 0x2d	; 45
 624:	07 fe       	sbrs	r0, 7
 626:	fd cf       	rjmp	.-6      	; 0x622 <__vector_5+0x394>
		//Now read SPDR for switch data shifted in from 74XX165 (U9)
		//check if ISW12_SW bit is set
		if (SPDR >> 5 & 1)
 628:	8e b5       	in	r24, 0x2e	; 46
 62a:	82 95       	swap	r24
 62c:	86 95       	lsr	r24
 62e:	87 70       	andi	r24, 0x07	; 7
 630:	80 ff       	sbrs	r24, 0
 632:	04 c0       	rjmp	.+8      	; 0x63c <__vector_5+0x3ae>
		{
			ISW12_SW_ON = 1;
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	80 93 72 01 	sts	0x0172, r24
 63a:	02 c0       	rjmp	.+4      	; 0x640 <__vector_5+0x3b2>
		}
		else
		{
			ISW12_SW_ON = 0;
 63c:	10 92 72 01 	sts	0x0172, r1
		}
		//check if ISW13_SW bit is set
		if (SPDR >> 6 & 1)
 640:	8e b5       	in	r24, 0x2e	; 46
 642:	82 95       	swap	r24
 644:	86 95       	lsr	r24
 646:	86 95       	lsr	r24
 648:	83 70       	andi	r24, 0x03	; 3
 64a:	80 ff       	sbrs	r24, 0
 64c:	04 c0       	rjmp	.+8      	; 0x656 <__vector_5+0x3c8>
		{
			ISW13_SW_ON = 1;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	80 93 71 01 	sts	0x0171, r24
 654:	02 c0       	rjmp	.+4      	; 0x65a <__vector_5+0x3cc>
		}
		else
		{
			ISW13_SW_ON = 0;
 656:	10 92 71 01 	sts	0x0171, r1
		}
		
		//SHIFT 3th BYTE
		SPDR = 0;
 65a:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 65c:	0d b4       	in	r0, 0x2d	; 45
 65e:	07 fe       	sbrs	r0, 7
 660:	fd cf       	rjmp	.-6      	; 0x65c <__vector_5+0x3ce>

		//SHIFT 2th BYTE
		SPDR = 0;
 662:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
 664:	0d b4       	in	r0, 0x2d	; 45
 666:	07 fe       	sbrs	r0, 7
 668:	fd cf       	rjmp	.-6      	; 0x664 <__vector_5+0x3d6>
		
		//SHIFT 1st BYTE
		//SPDR = (ISW12_SW_ON << 2) | ISW11_LED; //TURN ON ISW12 (if ISW12_SW is ON) and ISW11 LEDs, both on 74XX595 U8, first shift register in chain
		SPDR = (ISW12_SW_ON <<2) | (ISW13_SW_ON << 7); //turn on ISW12 if ISW12_SW is ON, turn ISW11 (MSB of first shift register chain) if ISW13_SW is ON
 66a:	80 91 72 01 	lds	r24, 0x0172
 66e:	90 91 71 01 	lds	r25, 0x0171
 672:	97 95       	ror	r25
 674:	99 27       	eor	r25, r25
 676:	97 95       	ror	r25
 678:	88 0f       	add	r24, r24
 67a:	88 0f       	add	r24, r24
 67c:	89 2b       	or	r24, r25
 67e:	8e bd       	out	0x2e, r24	; 46
		//Wait for SPI shift to complete
		while (!(SPSR & (1<<SPIF)));
 680:	0d b4       	in	r0, 0x2d	; 45
 682:	07 fe       	sbrs	r0, 7
 684:	fd cf       	rjmp	.-6      	; 0x680 <__vector_5+0x3f2>
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
 686:	ed ed       	ldi	r30, 0xDD	; 221
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	87 7f       	andi	r24, 0xF7	; 247
 68e:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
 690:	80 81       	ld	r24, Z
 692:	88 60       	ori	r24, 0x08	; 8
 694:	80 83       	st	Z, r24
		
		//clear SPI_SW_LATCH
		SPI_PORT &= ~SPI_SW_LATCH;	
 696:	2d 98       	cbi	0x05, 5	; 5
		//this toggle code works, but I haven't figured out how it works
		//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
		current_sw_state = SWITCH_PORT;
 698:	8f b1       	in	r24, 0x0f	; 15
 69a:	80 93 6d 01 	sts	0x016D, r24
		current_sw_state ^= previous_sw_state;
 69e:	80 91 6d 01 	lds	r24, 0x016D
 6a2:	90 91 6e 01 	lds	r25, 0x016E
 6a6:	89 27       	eor	r24, r25
 6a8:	80 93 6d 01 	sts	0x016D, r24
		previous_sw_state ^= current_sw_state;
 6ac:	80 91 6e 01 	lds	r24, 0x016E
 6b0:	90 91 6d 01 	lds	r25, 0x016D
 6b4:	89 27       	eor	r24, r25
 6b6:	80 93 6e 01 	sts	0x016E, r24
		current_sw_state &= previous_sw_state;
 6ba:	80 91 6d 01 	lds	r24, 0x016D
 6be:	90 91 6e 01 	lds	r25, 0x016E
 6c2:	89 23       	and	r24, r25
 6c4:	80 93 6d 01 	sts	0x016D, r24
		
		if (current_sw_state & (1<<ISW8_SW)) 
 6c8:	80 91 6d 01 	lds	r24, 0x016D
 6cc:	82 ff       	sbrs	r24, 2
 6ce:	06 c0       	rjmp	.+12     	; 0x6dc <__vector_5+0x44e>
		{
			ISW8_SW_ON ^= 1 << 0; //toggle switch state
 6d0:	90 91 6f 01 	lds	r25, 0x016F
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	89 27       	eor	r24, r25
 6d8:	80 93 6f 01 	sts	0x016F, r24
		}
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
 6dc:	ed ed       	ldi	r30, 0xDD	; 221
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	8f 7b       	andi	r24, 0xBF	; 191
 6e4:	80 83       	st	Z, r24
		//enable output on VCO analog switch latch:
		//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
		DATA_BUS =
		((sw_latch_five >> ISW4_SW) & 1) << 3 |
 6e6:	20 91 6a 01 	lds	r18, 0x016A
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
		//enable output on VCO analog switch latch:
		//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
		DATA_BUS =
 6ea:	50 91 6a 01 	lds	r21, 0x016A
		((sw_latch_five >> ISW4_SW) & 1) << 3 |
		((sw_latch_five >> ISW1_SW) & 1) << 0 |
		((sw_latch_five >> ISW2_SW) & 1) << 2 |
 6ee:	40 91 6a 01 	lds	r20, 0x016A
		((sw_latch_five >> ISW3_SW) & 1) << 1 |
 6f2:	60 91 6a 01 	lds	r22, 0x016A
		((sw_latch_five >> ISW5_SW) & 1) << 6 |
 6f6:	90 91 6a 01 	lds	r25, 0x016A
		((sw_latch_five >> ISW6_SW) & 1) << 7 |
 6fa:	30 91 6a 01 	lds	r19, 0x016A
		((sw_latch_five >> ISW7_SW) & 1) << 5 |
 6fe:	80 91 6a 01 	lds	r24, 0x016A
		ISW8_SW_ON << 4;
 702:	70 91 6f 01 	lds	r23, 0x016F
 706:	72 95       	swap	r23
 708:	70 7f       	andi	r23, 0xF0	; 240
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
		//enable output on VCO analog switch latch:
		//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
		DATA_BUS =
 70a:	56 95       	lsr	r21
 70c:	56 95       	lsr	r21
 70e:	51 70       	andi	r21, 0x01	; 1
 710:	57 2b       	or	r21, r23
		((sw_latch_five >> ISW4_SW) & 1) << 3 |
		((sw_latch_five >> ISW1_SW) & 1) << 0 |
		((sw_latch_five >> ISW2_SW) & 1) << 2 |
		((sw_latch_five >> ISW3_SW) & 1) << 1 |
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	61 70       	andi	r22, 0x01	; 1
 716:	70 70       	andi	r23, 0x00	; 0
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
		//enable output on VCO analog switch latch:
		//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
		DATA_BUS =
 71c:	65 2b       	or	r22, r21
		((sw_latch_five >> ISW4_SW) & 1) << 3 |
		((sw_latch_five >> ISW1_SW) & 1) << 0 |
		((sw_latch_five >> ISW2_SW) & 1) << 2 |
		((sw_latch_five >> ISW3_SW) & 1) << 1 |
		((sw_latch_five >> ISW5_SW) & 1) << 6 |
		((sw_latch_five >> ISW6_SW) & 1) << 7 |
 71e:	32 95       	swap	r19
 720:	36 95       	lsr	r19
 722:	37 70       	andi	r19, 0x07	; 7
 724:	37 95       	ror	r19
 726:	33 27       	eor	r19, r19
 728:	37 95       	ror	r19
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
		//enable output on VCO analog switch latch:
		//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
		DATA_BUS =
 72a:	63 2b       	or	r22, r19
		((sw_latch_five >> ISW4_SW) & 1) << 3 |
 72c:	22 1f       	adc	r18, r18
 72e:	22 27       	eor	r18, r18
 730:	22 1f       	adc	r18, r18
 732:	22 0f       	add	r18, r18
 734:	22 0f       	add	r18, r18
 736:	22 0f       	add	r18, r18
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
		//enable output on VCO analog switch latch:
		//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
		DATA_BUS =
 738:	26 2b       	or	r18, r22
		((sw_latch_five >> ISW4_SW) & 1) << 3 |
		((sw_latch_five >> ISW1_SW) & 1) << 0 |
		((sw_latch_five >> ISW2_SW) & 1) << 2 |
 73a:	46 95       	lsr	r20
 73c:	50 e0       	ldi	r21, 0x00	; 0
 73e:	41 70       	andi	r20, 0x01	; 1
 740:	50 70       	andi	r21, 0x00	; 0
 742:	44 0f       	add	r20, r20
 744:	55 1f       	adc	r21, r21
 746:	44 0f       	add	r20, r20
 748:	55 1f       	adc	r21, r21
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
		//enable output on VCO analog switch latch:
		//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
		DATA_BUS =
 74a:	42 2b       	or	r20, r18
		((sw_latch_five >> ISW4_SW) & 1) << 3 |
		((sw_latch_five >> ISW1_SW) & 1) << 0 |
		((sw_latch_five >> ISW2_SW) & 1) << 2 |
		((sw_latch_five >> ISW3_SW) & 1) << 1 |
		((sw_latch_five >> ISW5_SW) & 1) << 6 |
 74c:	92 95       	swap	r25
 74e:	9f 70       	andi	r25, 0x0F	; 15
 750:	29 2f       	mov	r18, r25
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	21 70       	andi	r18, 0x01	; 1
 756:	30 70       	andi	r19, 0x00	; 0
 758:	00 24       	eor	r0, r0
 75a:	36 95       	lsr	r19
 75c:	27 95       	ror	r18
 75e:	07 94       	ror	r0
 760:	36 95       	lsr	r19
 762:	27 95       	ror	r18
 764:	07 94       	ror	r0
 766:	32 2f       	mov	r19, r18
 768:	20 2d       	mov	r18, r0
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
		//enable output on VCO analog switch latch:
		//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
		DATA_BUS =
 76a:	24 2b       	or	r18, r20
		((sw_latch_five >> ISW1_SW) & 1) << 0 |
		((sw_latch_five >> ISW2_SW) & 1) << 2 |
		((sw_latch_five >> ISW3_SW) & 1) << 1 |
		((sw_latch_five >> ISW5_SW) & 1) << 6 |
		((sw_latch_five >> ISW6_SW) & 1) << 7 |
		((sw_latch_five >> ISW7_SW) & 1) << 5 |
 76c:	82 95       	swap	r24
 76e:	86 95       	lsr	r24
 770:	86 95       	lsr	r24
 772:	83 70       	andi	r24, 0x03	; 3
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	81 70       	andi	r24, 0x01	; 1
 778:	90 70       	andi	r25, 0x00	; 0
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	82 95       	swap	r24
 780:	92 95       	swap	r25
 782:	90 7f       	andi	r25, 0xF0	; 240
 784:	98 27       	eor	r25, r24
 786:	80 7f       	andi	r24, 0xF0	; 240
 788:	98 27       	eor	r25, r24
		
		//update analog switch latch:
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
		//enable output on VCO analog switch latch:
		//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
		DATA_BUS =
 78a:	82 2b       	or	r24, r18
 78c:	82 b9       	out	0x02, r24	; 2
		((sw_latch_five >> ISW3_SW) & 1) << 1 |
		((sw_latch_five >> ISW5_SW) & 1) << 6 |
		((sw_latch_five >> ISW6_SW) & 1) << 7 |
		((sw_latch_five >> ISW7_SW) & 1) << 5 |
		ISW8_SW_ON << 4;
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
 78e:	80 81       	ld	r24, Z
 790:	80 64       	ori	r24, 0x40	; 64
 792:	80 83       	st	Z, r24
 794:	46 e0       	ldi	r20, 0x06	; 6
 796:	4a 95       	dec	r20
 798:	f1 f7       	brne	.-4      	; 0x796 <__vector_5+0x508>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <__vector_5+0x50e>
		_delay_us(1);
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
 79c:	80 81       	ld	r24, Z
 79e:	8f 7b       	andi	r24, 0xBF	; 191
 7a0:	80 83       	st	Z, r24
		DATA_BUS = 0;			  	
 7a2:	12 b8       	out	0x02, r1	; 2
	}
	
	

	//increment digit display place
	if (place++ == 3) //post increment
 7a4:	80 91 64 01 	lds	r24, 0x0164
 7a8:	98 2f       	mov	r25, r24
 7aa:	9f 5f       	subi	r25, 0xFF	; 255
 7ac:	90 93 64 01 	sts	0x0164, r25
 7b0:	83 30       	cpi	r24, 0x03	; 3
 7b2:	11 f4       	brne	.+4      	; 0x7b8 <__vector_5+0x52a>
	{
		place = 0;
 7b4:	10 92 64 01 	sts	0x0164, r1
	}
	

	
}	
 7b8:	ff 91       	pop	r31
 7ba:	ef 91       	pop	r30
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	bf 91       	pop	r27
 7c2:	af 91       	pop	r26
 7c4:	9f 91       	pop	r25
 7c6:	8f 91       	pop	r24
 7c8:	7f 91       	pop	r23
 7ca:	6f 91       	pop	r22
 7cc:	5f 91       	pop	r21
 7ce:	4f 91       	pop	r20
 7d0:	3f 91       	pop	r19
 7d2:	2f 91       	pop	r18
 7d4:	1f 91       	pop	r17
 7d6:	0f 91       	pop	r16
 7d8:	ff 90       	pop	r15
 7da:	ef 90       	pop	r14
 7dc:	df 90       	pop	r13
 7de:	cf 90       	pop	r12
 7e0:	bf 90       	pop	r11
 7e2:	af 90       	pop	r10
 7e4:	9f 90       	pop	r9
 7e6:	8f 90       	pop	r8
 7e8:	7f 90       	pop	r7
 7ea:	6f 90       	pop	r6
 7ec:	5f 90       	pop	r5
 7ee:	4f 90       	pop	r4
 7f0:	3f 90       	pop	r3
 7f2:	2f 90       	pop	r2
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
 7fe:	80 e8       	ldi	r24, 0x80	; 128
 800:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
 802:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
 804:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
 806:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
	//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
	//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
	DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
 808:	84 b1       	in	r24, 0x04	; 4
 80a:	87 62       	ori	r24, 0x27	; 39
 80c:	84 b9       	out	0x04, r24	; 4
	
	//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
	DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
 80e:	ec ed       	ldi	r30, 0xDC	; 220
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	8c 65       	ori	r24, 0x5C	; 92
 816:	80 83       	st	Z, r24
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
	SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
 818:	85 b1       	in	r24, 0x05	; 5
 81a:	89 7d       	andi	r24, 0xD9	; 217
 81c:	85 b9       	out	0x05, r24	; 5
	
	//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
	SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
 81e:	ed ed       	ldi	r30, 0xDD	; 221
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	83 7f       	andi	r24, 0xF3	; 243
 826:	80 83       	st	Z, r24
	
	//SET UP SPI
	SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
 828:	80 e5       	ldi	r24, 0x50	; 80
 82a:	8c bd       	out	0x2c, r24	; 44
	
	//Pull LED_LATCH LOW
	SPI_LATCH_PORT &= ~LED_LATCH;
 82c:	80 81       	ld	r24, Z
 82e:	87 7f       	andi	r24, 0xF7	; 247
 830:	80 83       	st	Z, r24
	
	
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
	
	SPI_LATCH_PORT &= ~LED_LATCH;
 832:	80 81       	ld	r24, Z
 834:	87 7f       	andi	r24, 0xF7	; 247
 836:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 838:	80 81       	ld	r24, Z
 83a:	88 60       	ori	r24, 0x08	; 8
 83c:	80 83       	st	Z, r24
	
	//set EG2 POL
	EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
 83e:	80 81       	ld	r24, Z
 840:	8f 7e       	andi	r24, 0xEF	; 239
 842:	80 83       	st	Z, r24
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
 844:	a9 ed       	ldi	r26, 0xD9	; 217
 846:	b0 e0       	ldi	r27, 0x00	; 0
 848:	8c 91       	ld	r24, X
 84a:	80 6c       	ori	r24, 0xC0	; 192
 84c:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
 84e:	ea ed       	ldi	r30, 0xDA	; 218
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	80 81       	ld	r24, Z
 854:	80 6c       	ori	r24, 0xC0	; 192
 856:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
 858:	81 b1       	in	r24, 0x01	; 1
 85a:	8f ef       	ldi	r24, 0xFF	; 255
 85c:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
 85e:	92 b1       	in	r25, 0x02	; 2
 860:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
 862:	8c 91       	ld	r24, X
 864:	80 63       	ori	r24, 0x30	; 48
 866:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
 868:	80 81       	ld	r24, Z
 86a:	8f 7c       	andi	r24, 0xCF	; 207
 86c:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<ISW8_SW); //set ISW8_SW pin as input
 86e:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
 870:	0e 94 02 01 	call	0x204	; 0x204 <setup_adc>
	//setup DAC
	setup_dac();
 874:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_dac>
	//setup MIDI USART
	setup_midi_usart();
 878:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <setup_midi_usart>
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
 87c:	e0 eb       	ldi	r30, 0xB0	; 176
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	86 60       	ori	r24, 0x06	; 6
 884:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
 886:	e0 e7       	ldi	r30, 0x70	; 112
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 81       	ld	r24, Z
 88c:	81 60       	ori	r24, 0x01	; 1
 88e:	80 83       	st	Z, r24
	sei(); //enable global interrupts
 890:	78 94       	sei
 892:	ff cf       	rjmp	.-2      	; 0x892 <main+0x94>

00000894 <__udivmodhi4>:
 894:	aa 1b       	sub	r26, r26
 896:	bb 1b       	sub	r27, r27
 898:	51 e1       	ldi	r21, 0x11	; 17
 89a:	07 c0       	rjmp	.+14     	; 0x8aa <__udivmodhi4_ep>

0000089c <__udivmodhi4_loop>:
 89c:	aa 1f       	adc	r26, r26
 89e:	bb 1f       	adc	r27, r27
 8a0:	a6 17       	cp	r26, r22
 8a2:	b7 07       	cpc	r27, r23
 8a4:	10 f0       	brcs	.+4      	; 0x8aa <__udivmodhi4_ep>
 8a6:	a6 1b       	sub	r26, r22
 8a8:	b7 0b       	sbc	r27, r23

000008aa <__udivmodhi4_ep>:
 8aa:	88 1f       	adc	r24, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	5a 95       	dec	r21
 8b0:	a9 f7       	brne	.-22     	; 0x89c <__udivmodhi4_loop>
 8b2:	80 95       	com	r24
 8b4:	90 95       	com	r25
 8b6:	bc 01       	movw	r22, r24
 8b8:	cd 01       	movw	r24, r26
 8ba:	08 95       	ret

000008bc <_exit>:
 8bc:	f8 94       	cli

000008be <__stop_program>:
 8be:	ff cf       	rjmp	.-2      	; 0x8be <__stop_program>
