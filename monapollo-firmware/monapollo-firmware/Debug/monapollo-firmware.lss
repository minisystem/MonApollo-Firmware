
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b4  00800100  00003f8a  0000403e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f8a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000220  008002b4  008002b4  000041f2  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  000041f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00004868  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  0000545c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000003b8  00000000  00000000  000057a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007137  00000000  00000000  00005b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019e5  00000000  00000000  0000cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024cc  00000000  00000000  0000e674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e20  00000000  00000000  00010b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a4d  00000000  00000000  00011960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003025  00000000  00000000  000133ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  000163d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 89 03 	jmp	0x712	; 0x712 <__vector_9>
      28:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ea e8       	ldi	r30, 0x8A	; 138
      78:	ff e3       	ldi	r31, 0x3F	; 63
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a4 eb       	ldi	r26, 0xB4	; 180
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a4 3d       	cpi	r26, 0xD4	; 212
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 de 04 	call	0x9bc	; 0x9bc <main>
      9a:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:
//#include "display.h"

struct arp arp;


void update_arp_sequence(void) {
     146:	4f 92       	push	r4
     148:	5f 92       	push	r5
     14a:	6f 92       	push	r6
     14c:	7f 92       	push	r7
     14e:	8f 92       	push	r8
     150:	9f 92       	push	r9
     152:	af 92       	push	r10
     154:	bf 92       	push	r11
     156:	cf 92       	push	r12
     158:	df 92       	push	r13
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
	


	arp.step_number = gate_buffer*(arp.range + 1);
     166:	90 91 88 03 	lds	r25, 0x0388
     16a:	9f 5f       	subi	r25, 0xFF	; 255
     16c:	80 91 b4 02 	lds	r24, 0x02B4
     170:	98 9f       	mul	r25, r24
     172:	80 2d       	mov	r24, r0
     174:	11 24       	eor	r1, r1
     176:	80 93 89 03 	sts	0x0389, r24
     17a:	88 24       	eor	r8, r8
     17c:	99 24       	eor	r9, r9
	//arp.step_position = 0; //would use this if note retrigger feature was added
	
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
     17e:	66 24       	eor	r6, r6
     180:	77 24       	eor	r7, r7


	arp.step_number = gate_buffer*(arp.range + 1);
	//arp.step_position = 0; //would use this if note retrigger feature was added
	
	uint8_t step = 0;
     182:	ff 24       	eor	r15, r15
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     184:	44 24       	eor	r4, r4
     186:	55 24       	eor	r5, r5
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     188:	0f 2e       	mov	r0, r31
     18a:	f4 e9       	ldi	r31, 0x94	; 148
     18c:	cf 2e       	mov	r12, r31
     18e:	f3 e0       	ldi	r31, 0x03	; 3
     190:	df 2e       	mov	r13, r31
     192:	f0 2d       	mov	r31, r0
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
						
						root_note += 12;
						
					}
					arp.sequence[step++].note = root_note - (range*12);
     194:	0f 2e       	mov	r0, r31
     196:	f8 e8       	ldi	r31, 0x88	; 136
     198:	af 2e       	mov	r10, r31
     19a:	f3 e0       	ldi	r31, 0x03	; 3
     19c:	bf 2e       	mov	r11, r31
     19e:	f0 2d       	mov	r31, r0
     1a0:	4a c0       	rjmp	.+148    	; 0x236 <update_arp_sequence+0xf0>
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
     1a2:	81 50       	subi	r24, 0x01	; 1
     1a4:	80 1b       	sub	r24, r16
     1a6:	0e 94 85 01 	call	0x30a	; 0x30a <get_indexed_note>
     1aa:	28 2f       	mov	r18, r24
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     1ac:	f6 01       	movw	r30, r12
     1ae:	80 81       	ld	r24, Z
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	41 f0       	breq	.+16     	; 0x1c4 <update_arp_sequence+0x7e>
     1b4:	83 30       	cpi	r24, 0x03	; 3
     1b6:	18 f4       	brcc	.+6      	; 0x1be <update_arp_sequence+0x78>
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	39 f5       	brne	.+78     	; 0x20a <update_arp_sequence+0xc4>
     1bc:	0a c0       	rjmp	.+20     	; 0x1d2 <update_arp_sequence+0x8c>
     1be:	85 30       	cpi	r24, 0x05	; 5
     1c0:	20 f5       	brcc	.+72     	; 0x20a <update_arp_sequence+0xc4>
     1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <update_arp_sequence+0x8c>
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     1c4:	ce 01       	movw	r24, r28
     1c6:	82 0f       	add	r24, r18
     1c8:	91 1d       	adc	r25, r1
     1ca:	88 30       	cpi	r24, 0x08	; 8
     1cc:	91 05       	cpc	r25, r1
     1ce:	64 f0       	brlt	.+24     	; 0x1e8 <update_arp_sequence+0xa2>
     1d0:	12 c0       	rjmp	.+36     	; 0x1f6 <update_arp_sequence+0xb0>
			switch(arp.mode) {
				
				case UP:
				case UP_DOWN:
				case RANDOM:
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1d2:	8f 2d       	mov	r24, r15
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	8a 0d       	add	r24, r10
     1dc:	9b 1d       	adc	r25, r11
     1de:	2e 19       	sub	r18, r14
     1e0:	fc 01       	movw	r30, r24
     1e2:	25 87       	std	Z+13, r18	; 0x0d
     1e4:	f3 94       	inc	r15
				
					break;
     1e6:	11 c0       	rjmp	.+34     	; 0x20a <update_arp_sequence+0xc4>
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
						
						root_note += 12;
     1e8:	24 5f       	subi	r18, 0xF4	; 244
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     1ea:	ce 01       	movw	r24, r28
     1ec:	82 0f       	add	r24, r18
     1ee:	91 1d       	adc	r25, r1
     1f0:	88 30       	cpi	r24, 0x08	; 8
     1f2:	91 05       	cpc	r25, r1
     1f4:	cc f3       	brlt	.-14     	; 0x1e8 <update_arp_sequence+0xa2>
						
						root_note += 12;
						
					}
					arp.sequence[step++].note = root_note - (range*12);
     1f6:	8f 2d       	mov	r24, r15
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	8a 0d       	add	r24, r10
     200:	9b 1d       	adc	r25, r11
     202:	2e 0d       	add	r18, r14
     204:	fc 01       	movw	r30, r24
     206:	25 87       	std	Z+13, r18	; 0x0d
     208:	f3 94       	inc	r15
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     20a:	0f 5f       	subi	r16, 0xFF	; 255
     20c:	1f 4f       	sbci	r17, 0xFF	; 255
     20e:	80 91 b4 02 	lds	r24, 0x02B4
     212:	28 2f       	mov	r18, r24
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	02 17       	cp	r16, r18
     218:	13 07       	cpc	r17, r19
     21a:	1c f2       	brlt	.-122    	; 0x1a2 <update_arp_sequence+0x5c>
	//arp.step_position = 0; //would use this if note retrigger feature was added
	
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
     21c:	08 94       	sec
     21e:	61 1c       	adc	r6, r1
     220:	71 1c       	adc	r7, r1
     222:	84 ef       	ldi	r24, 0xF4	; 244
     224:	9f ef       	ldi	r25, 0xFF	; 255
     226:	88 0e       	add	r8, r24
     228:	99 1e       	adc	r9, r25
     22a:	f5 01       	movw	r30, r10
     22c:	80 81       	ld	r24, Z
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	86 15       	cp	r24, r6
     232:	97 05       	cpc	r25, r7
     234:	44 f0       	brlt	.+16     	; 0x246 <update_arp_sequence+0x100>
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     236:	80 91 b4 02 	lds	r24, 0x02B4
     23a:	88 23       	and	r24, r24
     23c:	79 f3       	breq	.-34     	; 0x21c <update_arp_sequence+0xd6>
//#include "display.h"

struct arp arp;


void update_arp_sequence(void) {
     23e:	e8 2c       	mov	r14, r8
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     240:	e4 01       	movw	r28, r8
     242:	82 01       	movw	r16, r4
     244:	ae cf       	rjmp	.-164    	; 0x1a2 <update_arp_sequence+0x5c>
		//value_to_display = step;

	}
	
	
}
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	1f 91       	pop	r17
     24c:	0f 91       	pop	r16
     24e:	ff 90       	pop	r15
     250:	ef 90       	pop	r14
     252:	df 90       	pop	r13
     254:	cf 90       	pop	r12
     256:	bf 90       	pop	r11
     258:	af 90       	pop	r10
     25a:	9f 90       	pop	r9
     25c:	8f 90       	pop	r8
     25e:	7f 90       	pop	r7
     260:	6f 90       	pop	r6
     262:	5f 90       	pop	r5
     264:	4f 90       	pop	r4
     266:	08 95       	ret

00000268 <step_arp_note>:

void step_arp_note(void) { //updates arp note according to step position in sequence
	
	arp.current_note = arp.sequence[arp.step_position].note;
     268:	90 91 8a 03 	lds	r25, 0x038A
     26c:	a9 2f       	mov	r26, r25
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	e8 e8       	ldi	r30, 0x88	; 136
     272:	f3 e0       	ldi	r31, 0x03	; 3
     274:	aa 0f       	add	r26, r26
     276:	bb 1f       	adc	r27, r27
     278:	ae 0f       	add	r26, r30
     27a:	bf 1f       	adc	r27, r31
     27c:	1d 96       	adiw	r26, 0x0d	; 13
     27e:	8c 91       	ld	r24, X
     280:	1d 97       	sbiw	r26, 0x0d	; 13
     282:	85 83       	std	Z+5, r24	; 0x05
	arp.previous_note = arp.current_note;
     284:	84 83       	std	Z+4, r24	; 0x04
	
	switch (arp.mode) {
     286:	84 85       	ldd	r24, Z+12	; 0x0c
     288:	83 30       	cpi	r24, 0x03	; 3
     28a:	19 f0       	breq	.+6      	; 0x292 <step_arp_note+0x2a>
     28c:	84 30       	cpi	r24, 0x04	; 4
     28e:	99 f5       	brne	.+102    	; 0x2f6 <step_arp_note+0x8e>
     290:	28 c0       	rjmp	.+80     	; 0x2e2 <step_arp_note+0x7a>
		
		case UP_DOWN:
			
			if (arp.direction == UP) {
     292:	80 91 8b 03 	lds	r24, 0x038B
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	91 f4       	brne	.+36     	; 0x2be <step_arp_note+0x56>
				arp.step_position++;	
     29a:	9f 5f       	subi	r25, 0xFF	; 255
     29c:	90 93 8a 03 	sts	0x038A, r25
				
				if (arp.step_position >= arp.step_number) {
     2a0:	80 91 89 03 	lds	r24, 0x0389
     2a4:	98 17       	cp	r25, r24
     2a6:	80 f1       	brcs	.+96     	; 0x308 <step_arp_note+0xa0>
					arp.step_position = arp.step_number == 1 ? 0 : arp.step_number - 2; //Omar handles edge case here
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	11 f0       	breq	.+4      	; 0x2b0 <step_arp_note+0x48>
     2ac:	82 50       	subi	r24, 0x02	; 2
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <step_arp_note+0x4a>
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	80 93 8a 03 	sts	0x038A, r24
					arp.direction = DOWN;
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	80 93 8b 03 	sts	0x038B, r24
     2bc:	08 95       	ret
				}				
				
			} else {
				if (arp.step_position <= 0) {
     2be:	99 23       	and	r25, r25
     2c0:	61 f4       	brne	.+24     	; 0x2da <step_arp_note+0x72>
					
					arp.step_position = arp.step_number == 1 ? 0 : 1; //Omar handles edge case here
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	90 91 89 03 	lds	r25, 0x0389
     2c8:	91 30       	cpi	r25, 0x01	; 1
     2ca:	09 f4       	brne	.+2      	; 0x2ce <step_arp_note+0x66>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	80 93 8a 03 	sts	0x038A, r24
					arp.direction = UP;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 8b 03 	sts	0x038B, r24
     2d8:	08 95       	ret
					
				} else {
					arp.step_position--;
     2da:	91 50       	subi	r25, 0x01	; 1
     2dc:	90 93 8a 03 	sts	0x038A, r25
     2e0:	08 95       	ret
			
			break;
			
		case RANDOM:
		
			arp.step_position = random() % arp.step_number;
     2e2:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <random>
     2e6:	60 91 89 03 	lds	r22, 0x0389
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__divmodhi4>
     2f0:	80 93 8a 03 	sts	0x038A, r24
		
			break;
     2f4:	08 95       	ret
			
		default:
		
			if (++arp.step_position >= arp.step_number) arp.step_position  = 0;//reset step position when at end of sequence 
     2f6:	9f 5f       	subi	r25, 0xFF	; 255
     2f8:	90 93 8a 03 	sts	0x038A, r25
     2fc:	80 91 89 03 	lds	r24, 0x0389
     300:	98 17       	cp	r25, r24
     302:	10 f0       	brcs	.+4      	; 0x308 <step_arp_note+0xa0>
     304:	10 92 8a 03 	sts	0x038A, r1
     308:	08 95       	ret

0000030a <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     30a:	e8 2f       	mov	r30, r24
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	ee 0f       	add	r30, r30
     310:	ff 1f       	adc	r31, r31
     312:	e8 54       	subi	r30, 0x48	; 72
     314:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     316:	80 81       	ld	r24, Z
     318:	08 95       	ret

0000031a <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.mode) {
     31a:	80 91 94 03 	lds	r24, 0x0394
     31e:	88 23       	and	r24, r24
     320:	19 f0       	breq	.+6      	; 0x328 <get_current_note+0xe>
		
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     322:	80 91 8d 03 	lds	r24, 0x038D
     326:	08 95       	ret
		

		
	} else {
		
		note = current_note;
     328:	80 91 b5 02 	lds	r24, 0x02B5
				
	}
	return note;
	
}
     32c:	08 95       	ret

0000032e <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	18 2f       	mov	r17, r24
     338:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     33a:	8a eb       	ldi	r24, 0xBA	; 186
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	ec 01       	movw	r28, r24
     340:	22 97       	sbiw	r28, 0x02	; 2
     342:	be 01       	movw	r22, r28
     344:	4e e0       	ldi	r20, 0x0E	; 14
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     34c:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     34e:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     350:	10 93 b5 02 	sts	0x02B5, r17
	
} 
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	08 95       	ret

0000035e <remove_note>:
void remove_note(uint8_t note){
     35e:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     360:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     364:	c8 17       	cp	r28, r24
     366:	41 f0       	breq	.+16     	; 0x378 <remove_note+0x1a>
     368:	ea eb       	ldi	r30, 0xBA	; 186
     36a:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     36c:	41 e0       	ldi	r20, 0x01	; 1
     36e:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     370:	90 81       	ld	r25, Z
     372:	98 17       	cp	r25, r24
     374:	59 f4       	brne	.+22     	; 0x38c <remove_note+0x2e>
     376:	02 c0       	rjmp	.+4      	; 0x37c <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     37c:	fa 01       	movw	r30, r20
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	e8 54       	subi	r30, 0x48	; 72
     384:	fe 4f       	sbci	r31, 0xFE	; 254
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	80 83       	st	Z, r24
			free_slot = i;
			break;
     38a:	07 c0       	rjmp	.+14     	; 0x39a <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     38c:	4f 5f       	subi	r20, 0xFF	; 255
     38e:	5f 4f       	sbci	r21, 0xFF	; 255
     390:	32 96       	adiw	r30, 0x02	; 2
     392:	48 30       	cpi	r20, 0x08	; 8
     394:	51 05       	cpc	r21, r1
     396:	61 f7       	brne	.-40     	; 0x370 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     398:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	ca 01       	movw	r24, r20
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	bc 01       	movw	r22, r24
     3a4:	66 54       	subi	r22, 0x46	; 70
     3a6:	7e 4f       	sbci	r23, 0xFE	; 254
     3a8:	40 95       	com	r20
     3aa:	50 95       	com	r21
     3ac:	48 5f       	subi	r20, 0xF8	; 248
     3ae:	5f 4f       	sbci	r21, 0xFF	; 255
     3b0:	44 0f       	add	r20, r20
     3b2:	55 1f       	adc	r21, r21
     3b4:	88 54       	subi	r24, 0x48	; 72
     3b6:	9e 4f       	sbci	r25, 0xFE	; 254
     3b8:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <memmove>
	note_pool[7].note = EMPTY;	
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     3c2:	80 91 b8 01 	lds	r24, 0x01B8
     3c6:	8f 3f       	cpi	r24, 0xFF	; 255
     3c8:	19 f4       	brne	.+6      	; 0x3d0 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     3ca:	c0 93 b5 02 	sts	0x02B5, r28
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     3d0:	80 93 b5 02 	sts	0x02B5, r24

	}	
	
}
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <setup_system_clock>:
struct clock lfo_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     3d8:	8d e0       	ldi	r24, 0x0D	; 13
     3da:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     3e4:	08 95       	ret

000003e6 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     3e6:	90 93 89 00 	sts	0x0089, r25
     3ea:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     3ee:	20 91 84 00 	lds	r18, 0x0084
     3f2:	30 91 85 00 	lds	r19, 0x0085
     3f6:	82 17       	cp	r24, r18
     3f8:	93 07       	cpc	r25, r19
     3fa:	28 f4       	brcc	.+10     	; 0x406 <update_clock_rate+0x20>
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	90 93 85 00 	sts	0x0085, r25
     402:	80 93 84 00 	sts	0x0084, r24
     406:	08 95       	ret

00000408 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     408:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     40a:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     40c:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     40e:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     410:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     412:	8c 91       	ld	r24, X
     414:	87 70       	andi	r24, 0x07	; 7
     416:	82 b9       	out	0x02, r24	; 2
     418:	66 e0       	ldi	r22, 0x06	; 6
     41a:	6a 95       	dec	r22
     41c:	f1 f7       	brne	.-4      	; 0x41a <set_control_voltage+0x12>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     420:	ea ed       	ldi	r30, 0xDA	; 218
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	40 81       	ld	r20, Z
     426:	8c 91       	ld	r24, X
     428:	86 95       	lsr	r24
     42a:	86 95       	lsr	r24
     42c:	86 95       	lsr	r24
     42e:	87 70       	andi	r24, 0x07	; 7
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	b9 01       	movw	r22, r18
     436:	02 c0       	rjmp	.+4      	; 0x43c <set_control_voltage+0x34>
     438:	66 0f       	add	r22, r22
     43a:	77 1f       	adc	r23, r23
     43c:	8a 95       	dec	r24
     43e:	e2 f7       	brpl	.-8      	; 0x438 <set_control_voltage+0x30>
     440:	cb 01       	movw	r24, r22
     442:	84 2b       	or	r24, r20
     444:	80 83       	st	Z, r24
     446:	76 e0       	ldi	r23, 0x06	; 6
     448:	7a 95       	dec	r23
     44a:	f1 f7       	brne	.-4      	; 0x448 <set_control_voltage+0x40>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     44e:	80 81       	ld	r24, Z
     450:	9c 91       	ld	r25, X
     452:	96 95       	lsr	r25
     454:	96 95       	lsr	r25
     456:	96 95       	lsr	r25
     458:	97 70       	andi	r25, 0x07	; 7
     45a:	02 c0       	rjmp	.+4      	; 0x460 <set_control_voltage+0x58>
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	9a 95       	dec	r25
     462:	e2 f7       	brpl	.-8      	; 0x45c <set_control_voltage+0x54>
     464:	20 95       	com	r18
     466:	28 23       	and	r18, r24
     468:	20 83       	st	Z, r18
	
}	
     46a:	08 95       	ret

0000046c <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     46c:	83 b3       	in	r24, 0x13	; 19
     46e:	83 60       	ori	r24, 0x03	; 3
     470:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     472:	8f ef       	ldi	r24, 0xFF	; 255
     474:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     476:	97 b1       	in	r25, 0x07	; 7
     478:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     47a:	e9 ed       	ldi	r30, 0xD9	; 217
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	8f 60       	ori	r24, 0x0F	; 15
     482:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     484:	ea ed       	ldi	r30, 0xDA	; 218
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	80 7f       	andi	r24, 0xF0	; 240
     48c:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     48e:	84 b3       	in	r24, 0x14	; 20
     490:	83 60       	ori	r24, 0x03	; 3
     492:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     494:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     496:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     498:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     49a:	a0 9a       	sbi	0x14, 0	; 20
}
     49c:	08 95       	ret

0000049e <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	2e 97       	sbiw	r28, 0x0e	; 14
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     4b6:	28 e0       	ldi	r18, 0x08	; 8
     4b8:	29 83       	std	Y+1, r18	; 0x01
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	2a 83       	std	Y+2, r18	; 0x02
     4be:	22 e0       	ldi	r18, 0x02	; 2
     4c0:	2b 83       	std	Y+3, r18	; 0x03
     4c2:	24 e0       	ldi	r18, 0x04	; 4
     4c4:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     4c6:	de 01       	movw	r26, r28
     4c8:	15 96       	adiw	r26, 0x05	; 5
     4ca:	e7 ee       	ldi	r30, 0xE7	; 231
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	2a e0       	ldi	r18, 0x0A	; 10
     4d0:	01 90       	ld	r0, Z+
     4d2:	0d 92       	st	X+, r0
     4d4:	21 50       	subi	r18, 0x01	; 1
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     4d8:	2f ef       	ldi	r18, 0xFF	; 255
     4da:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     4dc:	ea ed       	ldi	r30, 0xDA	; 218
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	20 81       	ld	r18, Z
     4e2:	20 61       	ori	r18, 0x10	; 16
     4e4:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     4e6:	20 81       	ld	r18, Z
     4e8:	2f 7e       	andi	r18, 0xEF	; 239
     4ea:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     4ec:	06 2f       	mov	r16, r22
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	de 01       	movw	r26, r28
     4f2:	a0 0f       	add	r26, r16
     4f4:	b1 1f       	adc	r27, r17
     4f6:	11 96       	adiw	r26, 0x01	; 1
     4f8:	2c 91       	ld	r18, X
     4fa:	11 97       	sbiw	r26, 0x01	; 1
     4fc:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     4fe:	20 81       	ld	r18, Z
     500:	20 62       	ori	r18, 0x20	; 32
     502:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     504:	20 81       	ld	r18, Z
     506:	2f 7d       	andi	r18, 0xDF	; 223
     508:	20 83       	st	Z, r18
     50a:	48 2f       	mov	r20, r24
     50c:	59 2f       	mov	r21, r25
     50e:	87 e2       	ldi	r24, 0x27	; 39
     510:	40 31       	cpi	r20, 0x10	; 16
     512:	58 07       	cpc	r21, r24
     514:	10 f0       	brcs	.+4      	; 0x51a <display_dec+0x7c>
     516:	4f e0       	ldi	r20, 0x0F	; 15
     518:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     51a:	ca 01       	movw	r24, r20
     51c:	96 95       	lsr	r25
     51e:	87 95       	ror	r24
     520:	96 95       	lsr	r25
     522:	87 95       	ror	r24
     524:	9a 01       	movw	r18, r20
     526:	36 95       	lsr	r19
     528:	27 95       	ror	r18
     52a:	28 0f       	add	r18, r24
     52c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     52e:	c9 01       	movw	r24, r18
     530:	92 95       	swap	r25
     532:	82 95       	swap	r24
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	89 27       	eor	r24, r25
     538:	9f 70       	andi	r25, 0x0F	; 15
     53a:	89 27       	eor	r24, r25
     53c:	82 0f       	add	r24, r18
     53e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     540:	29 2f       	mov	r18, r25
     542:	33 27       	eor	r19, r19
     544:	82 0f       	add	r24, r18
     546:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     548:	96 95       	lsr	r25
     54a:	87 95       	ror	r24
     54c:	96 95       	lsr	r25
     54e:	87 95       	ror	r24
     550:	96 95       	lsr	r25
     552:	87 95       	ror	r24
	r = number - q2 * 10;
     554:	28 2f       	mov	r18, r24
     556:	22 0f       	add	r18, r18
     558:	32 2f       	mov	r19, r18
     55a:	33 0f       	add	r19, r19
     55c:	33 0f       	add	r19, r19
     55e:	23 0f       	add	r18, r19
     560:	e4 2f       	mov	r30, r20
     562:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	ea 30       	cpi	r30, 0x0A	; 10
     56a:	10 f4       	brcc	.+4      	; 0x570 <display_dec+0xd2>
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	68 0f       	add	r22, r24
     572:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     574:	9b 01       	movw	r18, r22
     576:	36 95       	lsr	r19
     578:	27 95       	ror	r18
     57a:	36 95       	lsr	r19
     57c:	27 95       	ror	r18
     57e:	ab 01       	movw	r20, r22
     580:	56 95       	lsr	r21
     582:	47 95       	ror	r20
     584:	24 0f       	add	r18, r20
     586:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     588:	c9 01       	movw	r24, r18
     58a:	92 95       	swap	r25
     58c:	82 95       	swap	r24
     58e:	8f 70       	andi	r24, 0x0F	; 15
     590:	89 27       	eor	r24, r25
     592:	9f 70       	andi	r25, 0x0F	; 15
     594:	89 27       	eor	r24, r25
     596:	82 0f       	add	r24, r18
     598:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     59a:	29 2f       	mov	r18, r25
     59c:	33 27       	eor	r19, r19
     59e:	82 0f       	add	r24, r18
     5a0:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     5a2:	96 95       	lsr	r25
     5a4:	87 95       	ror	r24
     5a6:	96 95       	lsr	r25
     5a8:	87 95       	ror	r24
     5aa:	96 95       	lsr	r25
     5ac:	87 95       	ror	r24
	r = qa - q3 * 10;
     5ae:	98 2f       	mov	r25, r24
     5b0:	99 0f       	add	r25, r25
     5b2:	29 2f       	mov	r18, r25
     5b4:	22 0f       	add	r18, r18
     5b6:	22 0f       	add	r18, r18
     5b8:	92 0f       	add	r25, r18
     5ba:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	6a 30       	cpi	r22, 0x0A	; 10
     5c0:	08 f4       	brcc	.+2      	; 0x5c4 <display_dec+0x126>
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     5c6:	41 ef       	ldi	r20, 0xF1	; 241
     5c8:	51 e0       	ldi	r21, 0x01	; 1
     5ca:	da 01       	movw	r26, r20
     5cc:	a6 0f       	add	r26, r22
     5ce:	b1 1d       	adc	r27, r1
     5d0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     5d2:	28 2f       	mov	r18, r24
     5d4:	26 95       	lsr	r18
     5d6:	26 95       	lsr	r18
     5d8:	98 2f       	mov	r25, r24
     5da:	96 95       	lsr	r25
     5dc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     5de:	29 2f       	mov	r18, r25
     5e0:	22 95       	swap	r18
     5e2:	2f 70       	andi	r18, 0x0F	; 15
     5e4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     5e6:	96 95       	lsr	r25
     5e8:	96 95       	lsr	r25
     5ea:	96 95       	lsr	r25
	r = qb - q4 * 10;
     5ec:	29 2f       	mov	r18, r25
     5ee:	22 0f       	add	r18, r18
     5f0:	62 2f       	mov	r22, r18
     5f2:	66 0f       	add	r22, r22
     5f4:	66 0f       	add	r22, r22
     5f6:	26 0f       	add	r18, r22
     5f8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     5fa:	da 01       	movw	r26, r20
     5fc:	a8 0f       	add	r26, r24
     5fe:	b1 1d       	adc	r27, r1
     600:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     602:	4e 0f       	add	r20, r30
     604:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     606:	fa 01       	movw	r30, r20
     608:	40 81       	ld	r20, Z
     60a:	40 93 b8 02 	sts	0x02B8, r20
	digit_index[1] = tens_place;
     60e:	30 93 b9 02 	sts	0x02B9, r19
	digit_index[2] = hunds_place;
     612:	20 93 ba 02 	sts	0x02BA, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	8a 30       	cpi	r24, 0x0A	; 10
     61a:	08 f4       	brcc	.+2      	; 0x61e <display_dec+0x180>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     620:	90 93 bb 02 	sts	0x02BB, r25

	cathode_byte = dec[digit_index[place]];
     624:	f8 01       	movw	r30, r16
     626:	e8 54       	subi	r30, 0x48	; 72
     628:	fd 4f       	sbci	r31, 0xFD	; 253
     62a:	80 81       	ld	r24, Z
     62c:	fe 01       	movw	r30, r28
     62e:	e8 0f       	add	r30, r24
     630:	f1 1d       	adc	r31, r1
     632:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     634:	90 91 0b 03 	lds	r25, 0x030B
     638:	92 30       	cpi	r25, 0x02	; 2
     63a:	11 f4       	brne	.+4      	; 0x640 <display_dec+0x1a2>
     63c:	80 62       	ori	r24, 0x20	; 32
     63e:	03 c0       	rjmp	.+6      	; 0x646 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     640:	91 30       	cpi	r25, 0x01	; 1
     642:	09 f4       	brne	.+2      	; 0x646 <display_dec+0x1a8>
     644:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     646:	80 95       	com	r24
     648:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     64a:	ea ed       	ldi	r30, 0xDA	; 218
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	80 61       	ori	r24, 0x10	; 16
     652:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     654:	80 81       	ld	r24, Z
     656:	8f 7e       	andi	r24, 0xEF	; 239
     658:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     65a:	2e 96       	adiw	r28, 0x0e	; 14
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret

00000670 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     670:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     672:	66 23       	and	r22, r22
     674:	69 f4       	brne	.+26     	; 0x690 <update_display+0x20>

		
			
		display_dec(number, place);
     676:	c0 91 bc 02 	lds	r28, 0x02BC
     67a:	6c 2f       	mov	r22, r28
     67c:	0e 94 4f 02 	call	0x49e	; 0x49e <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     680:	8c 2f       	mov	r24, r28
     682:	8f 5f       	subi	r24, 0xFF	; 255
     684:	80 93 bc 02 	sts	0x02BC, r24
     688:	c3 30       	cpi	r28, 0x03	; 3
     68a:	11 f4       	brne	.+4      	; 0x690 <update_display+0x20>
		{
			place = 0;
     68c:	10 92 bc 02 	sts	0x02BC, r1
		
		
	}
	
	
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	0f 92       	push	r0
     69c:	11 24       	eor	r1, r1
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	ef 93       	push	r30
     6a4:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     6a6:	80 91 80 03 	lds	r24, 0x0380
     6aa:	81 50       	subi	r24, 0x01	; 1
     6ac:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     6ae:	80 91 81 03 	lds	r24, 0x0381
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <__vector_10+0x4a>
		count_finished = FALSE;
     6b6:	10 92 7e 03 	sts	0x037E, r1
		no_overflow = TRUE;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     6c0:	80 93 81 03 	sts	0x0381, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     6c4:	e1 e8       	ldi	r30, 0x81	; 129
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	90 91 7f 03 	lds	r25, 0x037F
     6ce:	89 2b       	or	r24, r25
     6d0:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     6d2:	ef e6       	ldi	r30, 0x6F	; 111
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	81 60       	ori	r24, 0x01	; 1
     6da:	80 83       	st	Z, r24
     6dc:	11 c0       	rjmp	.+34     	; 0x700 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     6de:	e4 e8       	ldi	r30, 0x84	; 132
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	91 81       	ldd	r25, Z+1	; 0x01
     6e6:	90 93 7d 03 	sts	0x037D, r25
     6ea:	80 93 7c 03 	sts	0x037C, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     6ee:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 7e 03 	sts	0x037E, r24
		period_counter = 0;
     6f8:	10 92 81 03 	sts	0x0381, r1
		TCNT1 = 0; //reset timer/counter 1
     6fc:	11 82       	std	Z+1, r1	; 0x01
     6fe:	10 82       	st	Z, r1
	}
	
	
	
	
}
     700:	ff 91       	pop	r31
     702:	ef 91       	pop	r30
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	0f 90       	pop	r0
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	0f 90       	pop	r0
     70e:	1f 90       	pop	r1
     710:	18 95       	reti

00000712 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     712:	1f 92       	push	r1
     714:	0f 92       	push	r0
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	0f 92       	push	r0
     71a:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     71c:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	2f 93       	push	r18
     736:	3f 93       	push	r19
     738:	4f 93       	push	r20
     73a:	5f 93       	push	r21
     73c:	6f 93       	push	r22
     73e:	7f 93       	push	r23
     740:	8f 93       	push	r24
     742:	9f 93       	push	r25
     744:	af 93       	push	r26
     746:	bf 93       	push	r27
     748:	ef 93       	push	r30
     74a:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     74c:	80 91 d5 03 	lds	r24, 0x03D5
     750:	86 95       	lsr	r24
     752:	90 91 d6 03 	lds	r25, 0x03D6
     756:	98 17       	cp	r25, r24
     758:	51 f4       	brne	.+20     	; 0x76e <__vector_7+0x44>
				
		
		if ((arp.clock_source == INTERNAL_CLOCK) && (arp.mode)) {
     75a:	80 91 93 03 	lds	r24, 0x0393
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	31 f4       	brne	.+12     	; 0x76e <__vector_7+0x44>
     762:	80 91 94 03 	lds	r24, 0x0394
     766:	88 23       	and	r24, r24
     768:	11 f0       	breq	.+4      	; 0x76e <__vector_7+0x44>
			
			PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     76a:	89 98       	cbi	0x11, 1	; 17
			PORTB &= ~ (1<<ARP_SYNC_LED); //turn off arp sync LED
     76c:	2f 98       	cbi	0x05, 7	; 5
			
		}
	}			
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     76e:	80 91 d6 03 	lds	r24, 0x03D6
     772:	8f 5f       	subi	r24, 0xFF	; 255
     774:	80 93 d6 03 	sts	0x03D6, r24
     778:	90 91 d5 03 	lds	r25, 0x03D5
     77c:	89 17       	cp	r24, r25
     77e:	91 f4       	brne	.+36     	; 0x7a4 <__vector_7+0x7a>
		
		system_clock.ppqn_counter = 0;
     780:	10 92 d6 03 	sts	0x03D6, r1
		
		if ((arp.clock_source == INTERNAL_CLOCK) && (arp.mode)) {
     784:	80 91 93 03 	lds	r24, 0x0393
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	61 f4       	brne	.+24     	; 0x7a4 <__vector_7+0x7a>
     78c:	80 91 94 03 	lds	r24, 0x0394
     790:	88 23       	and	r24, r24
     792:	41 f0       	breq	.+16     	; 0x7a4 <__vector_7+0x7a>
			
			//step arp note here based on range and note sequence from assigner	
			
			if (gate_buffer) { //if there are still notes in gate buffer
     794:	80 91 b4 02 	lds	r24, 0x02B4
     798:	88 23       	and	r24, r24
     79a:	21 f0       	breq	.+8      	; 0x7a4 <__vector_7+0x7a>
				step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
     79c:	0e 94 34 01 	call	0x268	; 0x268 <step_arp_note>
				PORTF |= (1<<GATE);
     7a0:	89 9a       	sbi	0x11, 1	; 17
				PORTB |= (1<<ARP_SYNC_LED);
     7a2:	2f 9a       	sbi	0x05, 7	; 5
			} 
		}			
	}
	
     7a4:	ff 91       	pop	r31
     7a6:	ef 91       	pop	r30
     7a8:	bf 91       	pop	r27
     7aa:	af 91       	pop	r26
     7ac:	9f 91       	pop	r25
     7ae:	8f 91       	pop	r24
     7b0:	7f 91       	pop	r23
     7b2:	6f 91       	pop	r22
     7b4:	5f 91       	pop	r21
     7b6:	4f 91       	pop	r20
     7b8:	3f 91       	pop	r19
     7ba:	2f 91       	pop	r18
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <song_position_event>:
uint8_t switch_timer = 0;


void song_position_event(MidiDevice * device, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
	
	arp.display = 42;
     7c6:	8a e2       	ldi	r24, 0x2A	; 42
     7c8:	80 93 92 03 	sts	0x0392, r24
	
}
     7cc:	08 95       	ret

000007ce <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     7ce:	6a 3f       	cpi	r22, 0xFA	; 250
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <real_time_event+0x6>
     7d2:	56 c0       	rjmp	.+172    	; 0x880 <real_time_event+0xb2>
     7d4:	6c 3f       	cpi	r22, 0xFC	; 252
     7d6:	09 f4       	brne	.+2      	; 0x7da <real_time_event+0xc>
     7d8:	66 c0       	rjmp	.+204    	; 0x8a6 <real_time_event+0xd8>
     7da:	68 3f       	cpi	r22, 0xF8	; 248
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <real_time_event+0x12>
     7de:	66 c0       	rjmp	.+204    	; 0x8ac <real_time_event+0xde>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     7e0:	80 91 e2 03 	lds	r24, 0x03E2
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	80 93 e2 03 	sts	0x03E2, r24
     7ea:	90 91 e1 03 	lds	r25, 0x03E1
     7ee:	89 17       	cp	r24, r25
     7f0:	69 f4       	brne	.+26     	; 0x80c <real_time_event+0x3e>
				
				++arp.song_position;
     7f2:	80 91 90 03 	lds	r24, 0x0390
     7f6:	90 91 91 03 	lds	r25, 0x0391
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	90 93 91 03 	sts	0x0391, r25
     800:	80 93 90 03 	sts	0x0390, r24
				midi_clock.ppqn_counter = 0;
     804:	10 92 e2 03 	sts	0x03E2, r1
				arp.display = arp.song_position;
     808:	80 93 92 03 	sts	0x0392, r24
			}						
		
			if (++lfo_clock.ppqn_counter == lfo_clock.divider) {
     80c:	80 91 dc 03 	lds	r24, 0x03DC
     810:	8f 5f       	subi	r24, 0xFF	; 255
     812:	80 93 dc 03 	sts	0x03DC, r24
     816:	90 91 db 03 	lds	r25, 0x03DB
     81a:	89 17       	cp	r24, r25
     81c:	41 f4       	brne	.+16     	; 0x82e <real_time_event+0x60>
				PORTB |= (1<< LFO_RESET);
     81e:	2c 9a       	sbi	0x05, 4	; 5
     820:	86 e0       	ldi	r24, 0x06	; 6
     822:	8a 95       	dec	r24
     824:	f1 f7       	brne	.-4      	; 0x822 <real_time_event+0x54>
     826:	00 c0       	rjmp	.+0      	; 0x828 <real_time_event+0x5a>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				//PORTB ^= (1<<ARP_SYNC_LED);
				//register clock event - this will do something  - reset LFO or initiate LFO
				lfo_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     828:	10 92 dc 03 	sts	0x03DC, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     82c:	2c 98       	cbi	0x05, 4	; 5
			}
			
			if (arp.mode) { //if arp is running
     82e:	80 91 94 03 	lds	r24, 0x0394
     832:	88 23       	and	r24, r24
     834:	d9 f1       	breq	.+118    	; 0x8ac <real_time_event+0xde>
				
				//arp.ppqn_counter++;
			
				if (arp.ppqn_counter == arp.divider) {
     836:	90 91 8e 03 	lds	r25, 0x038E
     83a:	80 91 8f 03 	lds	r24, 0x038F
     83e:	98 17       	cp	r25, r24
     840:	51 f4       	brne	.+20     	; 0x856 <real_time_event+0x88>
				
				
					arp.ppqn_counter = 0;
     842:	10 92 8e 03 	sts	0x038E, r1
					if (gate_buffer) { //if there are still notes in gate buffer
     846:	80 91 b4 02 	lds	r24, 0x02B4
     84a:	88 23       	and	r24, r24
     84c:	21 f0       	breq	.+8      	; 0x856 <real_time_event+0x88>
						
						step_arp_note(); //should force inline this function.
     84e:	0e 94 34 01 	call	0x268	; 0x268 <step_arp_note>
						PORTF |= (1<<GATE);
     852:	89 9a       	sbi	0x11, 1	; 17
						PORTB |= (1<<ARP_SYNC_LED);
     854:	2f 9a       	sbi	0x05, 7	; 5
					}	
				
				}
				
				if (arp.ppqn_counter == arp.divider - (arp.divider >> 1)) { //50% gate width
     856:	40 91 8f 03 	lds	r20, 0x038F
     85a:	20 91 8e 03 	lds	r18, 0x038E
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	84 2f       	mov	r24, r20
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	46 95       	lsr	r20
     866:	84 1b       	sub	r24, r20
     868:	91 09       	sbc	r25, r1
     86a:	28 17       	cp	r18, r24
     86c:	39 07       	cpc	r19, r25
     86e:	11 f4       	brne	.+4      	; 0x874 <real_time_event+0xa6>
								
					PORTF &= ~(1<<GATE);
     870:	89 98       	cbi	0x11, 1	; 17
					PORTB &= ~ (1<<ARP_SYNC_LED); //turn off arp sync LED
     872:	2f 98       	cbi	0x05, 7	; 5
								
				}
				arp.ppqn_counter++; //post increment means ppqn_counter is never 0, lowest is 1. Does this make sense for counting from 1 to arp.divide?
     874:	80 91 8e 03 	lds	r24, 0x038E
     878:	8f 5f       	subi	r24, 0xFF	; 255
     87a:	80 93 8e 03 	sts	0x038E, r24
     87e:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			lfo_clock.ppqn_counter = 0;
     880:	10 92 dc 03 	sts	0x03DC, r1
			midi_clock.ppqn_counter = 0;
     884:	10 92 e2 03 	sts	0x03E2, r1
			arp.ppqn_counter = arp.divider-1; //trigger arp step on next MIDI clock tick. This -1 here is key to getting proper sync to beat clock behavior
     888:	80 91 8f 03 	lds	r24, 0x038F
     88c:	81 50       	subi	r24, 0x01	; 1
     88e:	80 93 8e 03 	sts	0x038E, r24
			arp.clock_source = MIDI_CLOCK;
     892:	88 ef       	ldi	r24, 0xF8	; 248
     894:	80 93 93 03 	sts	0x0393, r24
			arp.step_position = 0; 
     898:	10 92 8a 03 	sts	0x038A, r1
			arp.song_position = 0; //reset master song position counter
     89c:	10 92 91 03 	sts	0x0391, r1
     8a0:	10 92 90 03 	sts	0x0390, r1
			break;
     8a4:	08 95       	ret
			
		case MIDI_STOP:
		
			arp.clock_source = INTERNAL_CLOCK; //revert to internal clock when MIDI STOP message received
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 93 03 	sts	0x0393, r24
     8ac:	08 95       	ret

000008ae <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     8ae:	84 2f       	mov	r24, r20
	
	remove_note(note);
     8b0:	0e 94 af 01 	call	0x35e	; 0x35e <remove_note>
	gate_buffer--;
     8b4:	80 91 b4 02 	lds	r24, 0x02B4
     8b8:	81 50       	subi	r24, 0x01	; 1
     8ba:	80 93 b4 02 	sts	0x02B4, r24
	//
	if (arp.mode) {	//if arp on, update arp sequence
     8be:	90 91 94 03 	lds	r25, 0x0394
     8c2:	99 23       	and	r25, r25
     8c4:	71 f0       	breq	.+28     	; 0x8e2 <note_off_event+0x34>
		//gate_buffer--;
		if (gate_buffer == 0) {
     8c6:	88 23       	and	r24, r24
     8c8:	49 f4       	brne	.+18     	; 0x8dc <note_off_event+0x2e>
			arp.current_note = arp.previous_note; //handle last note prevservation for release phase
     8ca:	80 91 8c 03 	lds	r24, 0x038C
     8ce:	80 93 8d 03 	sts	0x038D, r24
			//if (arp.clock_source == INTERNAL_CLOCK) arp.step_position = 0; //if arp is synced to MIDI clock, then step position is reset when MIDI START message received
			arp.step_position = 0;
     8d2:	10 92 8a 03 	sts	0x038A, r1
			arp.direction = UP; //this is to initialize UP/DOWN mode
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 8b 03 	sts	0x038B, r24
		}			
		update_arp_sequence();
     8dc:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     8e0:	08 95       	ret
	} else {
		
		//update_arp_sequence();
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     8e2:	88 23       	and	r24, r24
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <note_off_event+0x3a>
     8e6:	89 98       	cbi	0x11, 1	; 17
     8e8:	08 95       	ret

000008ea <note_on_event>:
	
}



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     8ea:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     8ec:	90 91 03 03 	lds	r25, 0x0303
     8f0:	90 ff       	sbrs	r25, 0
     8f2:	06 c0       	rjmp	.+12     	; 0x900 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     8f4:	2c 9a       	sbi	0x05, 4	; 5
     8f6:	96 e0       	ldi	r25, 0x06	; 6
     8f8:	9a 95       	dec	r25
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <note_on_event+0xe>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     8fe:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     900:	80 93 be 02 	sts	0x02BE, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     904:	22 23       	and	r18, r18
     906:	59 f4       	brne	.+22     	; 0x91e <note_on_event+0x34>
		remove_note(note);
     908:	0e 94 af 01 	call	0x35e	; 0x35e <remove_note>
		gate_buffer--;
     90c:	80 91 b4 02 	lds	r24, 0x02B4
     910:	81 50       	subi	r24, 0x01	; 1
     912:	80 93 b4 02 	sts	0x02B4, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     916:	88 23       	and	r24, r24
     918:	91 f4       	brne	.+36     	; 0x93e <note_on_event+0x54>
     91a:	89 98       	cbi	0x11, 1	; 17
     91c:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);
     91e:	62 2f       	mov	r22, r18
     920:	0e 94 97 01 	call	0x32e	; 0x32e <new_note>
		
		gate_buffer++;
     924:	80 91 b4 02 	lds	r24, 0x02B4
     928:	8f 5f       	subi	r24, 0xFF	; 255
     92a:	80 93 b4 02 	sts	0x02B4, r24
		if (arp.mode) { //if arp is off, handle gate
     92e:	80 91 94 03 	lds	r24, 0x0394
     932:	88 23       	and	r24, r24
     934:	19 f0       	breq	.+6      	; 0x93c <note_on_event+0x52>
			//new_note(note, velocity);
			//gate_buffer++; //increment gate_buffer
			//arp.display = arp.ppqn_counter;
			update_arp_sequence();
     936:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     93a:	08 95       	ret
				//arp.ppqn_counter = arp.divider; //reset ppqn counter to trigger arp step. This should implement KEY SYNC but messes up over all beat sync to master
				//ok, if note on comes on an arp divider beat, then it needs to be triggered, but if it isn't on a divider beat, then it shouldn't be triggered, right?	
				//arp.step_position = 0; //reset step position when new note arrives? Have a look here to get into nitty gritty details of arp sync behaviour: http://lauterzeit.com/arp_lfo_seq_sync/
			//}			
		} else {
			PORTF |= (1<<GATE); //if arp is OFF then turn on gate. Otherwise arpeggiator handles GATE
     93c:	89 9a       	sbi	0x11, 1	; 17
     93e:	08 95       	ret

00000940 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     940:	87 e2       	ldi	r24, 0x27	; 39
     942:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     946:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     94a:	88 e9       	ldi	r24, 0x98	; 152
     94c:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     950:	08 95       	ret

00000952 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	ef 93       	push	r30
     972:	ff 93       	push	r31
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	0f 92       	push	r0
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     97e:	80 91 c6 00 	lds	r24, 0x00C6
     982:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     984:	87 ee       	ldi	r24, 0xE7	; 231
     986:	93 e0       	ldi	r25, 0x03	; 3
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	ae 01       	movw	r20, r28
     98c:	4f 5f       	subi	r20, 0xFF	; 255
     98e:	5f 4f       	sbci	r21, 0xFF	; 255
     990:	0e 94 4f 1a 	call	0x349e	; 0x349e <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     9bc:	c0 e8       	ldi	r28, 0x80	; 128
     9be:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     9c0:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     9c2:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     9c4:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     9c6:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     9c8:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     9ca:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     9cc:	0e 94 40 08 	call	0x1080	; 0x1080 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     9d0:	a9 ed       	ldi	r26, 0xD9	; 217
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	8c 91       	ld	r24, X
     9d6:	80 6c       	ori	r24, 0xC0	; 192
     9d8:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     9da:	ea ed       	ldi	r30, 0xDA	; 218
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	80 6c       	ori	r24, 0xC0	; 192
     9e2:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     9e4:	81 b1       	in	r24, 0x01	; 1
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     9ea:	92 b1       	in	r25, 0x02	; 2
     9ec:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     9ee:	8c 91       	ld	r24, X
     9f0:	80 63       	ori	r24, 0x30	; 48
     9f2:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     9f4:	80 81       	ld	r24, Z
     9f6:	8f 7c       	andi	r24, 0xCF	; 207
     9f8:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     9fa:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     9fc:	ec ed       	ldi	r30, 0xDC	; 220
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	80 62       	ori	r24, 0x20	; 32
     a04:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     a06:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     a08:	ed ed       	ldi	r30, 0xDD	; 221
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	80 62       	ori	r24, 0x20	; 32
     a10:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     a12:	80 81       	ld	r24, Z
     a14:	8f 7d       	andi	r24, 0xDF	; 223
     a16:	80 83       	st	Z, r24
	DATA_BUS = 0;
     a18:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     a1a:	c0 93 03 03 	sts	0x0303, r28
	
	//setup ADC
    setup_adc();		
     a1e:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     a22:	0e 94 36 02 	call	0x46c	; 0x46c <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     a26:	c7 ee       	ldi	r28, 0xE7	; 231
     a28:	d3 e0       	ldi	r29, 0x03	; 3
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 1e 1a 	call	0x343c	; 0x343c <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     a30:	ce 01       	movw	r24, r28
     a32:	65 e7       	ldi	r22, 0x75	; 117
     a34:	74 e0       	ldi	r23, 0x04	; 4
     a36:	0e 94 e6 19 	call	0x33cc	; 0x33cc <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     a3a:	ce 01       	movw	r24, r28
     a3c:	67 e5       	ldi	r22, 0x57	; 87
     a3e:	74 e0       	ldi	r23, 0x04	; 4
     a40:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     a44:	ce 01       	movw	r24, r28
     a46:	67 ee       	ldi	r22, 0xE7	; 231
     a48:	73 e0       	ldi	r23, 0x03	; 3
     a4a:	0e 94 0a 1a 	call	0x3414	; 0x3414 <midi_register_realtime_callback>
	midi_register_songposition_callback(&midi_device, song_position_event);
     a4e:	ce 01       	movw	r24, r28
     a50:	63 ee       	ldi	r22, 0xE3	; 227
     a52:	73 e0       	ldi	r23, 0x03	; 3
     a54:	0e 94 f6 19 	call	0x33ec	; 0x33ec <midi_register_songposition_callback>
	//setup MIDI USART
	setup_midi_usart();
     a58:	0e 94 a0 04 	call	0x940	; 0x940 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     a5c:	0e 94 65 08 	call	0x10ca	; 0x10ca <update_spi>
	
	
	current_patch.number = 1;
     a60:	c1 e0       	ldi	r28, 0x01	; 1
     a62:	c0 93 07 03 	sts	0x0307, r28
		
	sei(); //enable global interrupts
     a66:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     a68:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <load_patch>
	
	setup_system_clock();
     a72:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     a76:	88 e1       	ldi	r24, 0x18	; 24
     a78:	80 93 d5 03 	sts	0x03D5, r24
	midi_clock.divider = 6;//this is for MIDI beat clock which is /6 MIDI ppqn clock or 16th notes
     a7c:	86 e0       	ldi	r24, 0x06	; 6
     a7e:	80 93 e1 03 	sts	0x03E1, r24
	arp.step_position = 0; //initialize step position
     a82:	10 92 8a 03 	sts	0x038A, r1
	arp.clock_source = INTERNAL_CLOCK;
     a86:	c0 93 93 03 	sts	0x0393, r28
	arp.mode = OFF;
     a8a:	10 92 94 03 	sts	0x0394, r1
	arp.ppqn_counter = 1;
     a8e:	c0 93 8e 03 	sts	0x038E, r28

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     a92:	07 ee       	ldi	r16, 0xE7	; 231
     a94:	13 e0       	ldi	r17, 0x03	; 3
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     a96:	0f 2e       	mov	r0, r31
     a98:	f4 e8       	ldi	r31, 0x84	; 132
     a9a:	ef 2e       	mov	r14, r31
     a9c:	f3 e0       	ldi	r31, 0x03	; 3
     a9e:	ff 2e       	mov	r15, r31
     aa0:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     aa2:	0f 2e       	mov	r0, r31
     aa4:	fb e0       	ldi	r31, 0x0B	; 11
     aa6:	cf 2e       	mov	r12, r31
     aa8:	f3 e0       	ldi	r31, 0x03	; 3
     aaa:	df 2e       	mov	r13, r31
     aac:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     aae:	bb 24       	eor	r11, r11
     ab0:	68 94       	set
     ab2:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     ab4:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     ab6:	c8 01       	movw	r24, r16
     ab8:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     abc:	80 91 fd 01 	lds	r24, 0x01FD
     ac0:	90 91 fe 01 	lds	r25, 0x01FE
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	0e 94 38 03 	call	0x670	; 0x670 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     aca:	0e 94 94 05 	call	0xb28	; 0xb28 <scan_pots>
		update_control_voltages();
     ace:	0e 94 21 06 	call	0xc42	; 0xc42 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     ad2:	80 91 bd 02 	lds	r24, 0x02BD
     ad6:	98 2f       	mov	r25, r24
     ad8:	9f 5f       	subi	r25, 0xFF	; 255
     ada:	90 93 bd 02 	sts	0x02BD, r25
     ade:	85 30       	cpi	r24, 0x05	; 5
     ae0:	51 f7       	brne	.-44     	; 0xab6 <main+0xfa>
		{
			switch_timer = 0;
     ae2:	10 92 bd 02 	sts	0x02BD, r1
			switch_press = 0; //reset global switch press flag
     ae6:	10 92 c5 02 	sts	0x02C5, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     aea:	f7 01       	movw	r30, r14
     aec:	c0 81       	ld	r28, Z
     aee:	0e 94 00 17 	call	0x2e00	; 0x2e00 <read_switch_port>
     af2:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     af4:	f6 01       	movw	r30, r12
     af6:	90 81       	ld	r25, Z
     af8:	91 30       	cpi	r25, 0x01	; 1
     afa:	11 f4       	brne	.+4      	; 0xb00 <main+0x144>
     afc:	cd 2f       	mov	r28, r29
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <main+0x146>
     b00:	c0 e0       	ldi	r28, 0x00	; 0
     b02:	c8 2b       	or	r28, r24
     b04:	f7 01       	movw	r30, r14
     b06:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     b08:	0e 94 65 08 	call	0x10ca	; 0x10ca <update_spi>
			if (switch_press) { 
     b0c:	80 91 c5 02 	lds	r24, 0x02C5
     b10:	88 23       	and	r24, r24
     b12:	39 f0       	breq	.+14     	; 0xb22 <main+0x166>
				update_patch();
     b14:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     b18:	f6 01       	movw	r30, r12
     b1a:	80 81       	ld	r24, Z
     b1c:	88 23       	and	r24, r24
     b1e:	09 f4       	brne	.+2      	; 0xb22 <main+0x166>
     b20:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     b22:	0e 94 56 10 	call	0x20ac	; 0x20ac <update_patch_programmer>
     b26:	c7 cf       	rjmp	.-114    	; 0xab6 <main+0xfa>

00000b28 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	c0 e0       	ldi	r28, 0x00	; 0
     b3c:	d1 e0       	ldi	r29, 0x01	; 1
     b3e:	06 ec       	ldi	r16, 0xC6	; 198
     b40:	12 e0       	ldi	r17, 0x02	; 2
     b42:	0f 2e       	mov	r0, r31
     b44:	fc e3       	ldi	r31, 0x3C	; 60
     b46:	cf 2e       	mov	r12, r31
     b48:	dd 24       	eor	r13, r13
     b4a:	f0 2d       	mov	r31, r0
     b4c:	cc 0e       	add	r12, r28
     b4e:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     b50:	0f 2e       	mov	r0, r31
     b52:	fb e0       	ldi	r31, 0x0B	; 11
     b54:	ef 2e       	mov	r14, r31
     b56:	f3 e0       	ldi	r31, 0x03	; 3
     b58:	ff 2e       	mov	r15, r31
     b5a:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     b5c:	bb 24       	eor	r11, r11
     b5e:	68 94       	set
     b60:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     b62:	88 81       	ld	r24, Y
     b64:	99 81       	ldd	r25, Y+1	; 0x01
     b66:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     b6a:	90 93 c0 02 	sts	0x02C0, r25
     b6e:	80 93 bf 02 	sts	0x02BF, r24
		adc_change = adc_value - pot_id[i]->value;
     b72:	e8 81       	ld	r30, Y
     b74:	f9 81       	ldd	r31, Y+1	; 0x01
     b76:	40 81       	ld	r20, Z
     b78:	21 81       	ldd	r18, Z+1	; 0x01
     b7a:	52 2f       	mov	r21, r18
     b7c:	53 70       	andi	r21, 0x03	; 3
     b7e:	84 1b       	sub	r24, r20
     b80:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     b82:	95 95       	asr	r25
     b84:	87 95       	ror	r24
     b86:	95 95       	asr	r25
     b88:	87 95       	ror	r24
     b8a:	84 0f       	add	r24, r20
     b8c:	95 1f       	adc	r25, r21
     b8e:	80 83       	st	Z, r24
     b90:	89 2f       	mov	r24, r25
     b92:	83 70       	andi	r24, 0x03	; 3
     b94:	2c 7f       	andi	r18, 0xFC	; 252
     b96:	28 2b       	or	r18, r24
     b98:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     b9a:	e9 91       	ld	r30, Y+
     b9c:	f9 91       	ld	r31, Y+
     b9e:	92 81       	ldd	r25, Z+2	; 0x02
     ba0:	20 81       	ld	r18, Z
     ba2:	81 81       	ldd	r24, Z+1	; 0x01
     ba4:	38 2f       	mov	r19, r24
     ba6:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     ba8:	d7 01       	movw	r26, r14
     baa:	8c 91       	ld	r24, X
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	19 f0       	breq	.+6      	; 0xbb6 <scan_pots+0x8e>
     bb0:	83 81       	ldd	r24, Z+3	; 0x03
     bb2:	88 23       	and	r24, r24
     bb4:	24 f0       	brlt	.+8      	; 0xbbe <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     bb6:	f8 01       	movw	r30, r16
     bb8:	31 83       	std	Z+1, r19	; 0x01
     bba:	20 83       	st	Z, r18
     bbc:	14 c0       	rjmp	.+40     	; 0xbe6 <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     bbe:	49 2f       	mov	r20, r25
     bc0:	43 50       	subi	r20, 0x03	; 3
     bc2:	c9 01       	movw	r24, r18
     bc4:	95 95       	asr	r25
     bc6:	87 95       	ror	r24
     bc8:	95 95       	asr	r25
     bca:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     bcc:	94 2f       	mov	r25, r20
     bce:	98 1b       	sub	r25, r24
     bd0:	9a 3f       	cpi	r25, 0xFA	; 250
     bd2:	48 f4       	brcc	.+18     	; 0xbe6 <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     bd4:	d8 01       	movw	r26, r16
     bd6:	11 96       	adiw	r26, 0x01	; 1
     bd8:	3c 93       	st	X, r19
     bda:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     bdc:	83 81       	ldd	r24, Z+3	; 0x03
     bde:	8f 77       	andi	r24, 0x7F	; 127
     be0:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     be2:	f7 01       	movw	r30, r14
     be4:	b0 82       	st	Z, r11
     be6:	0e 5f       	subi	r16, 0xFE	; 254
     be8:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     bea:	cc 15       	cp	r28, r12
     bec:	dd 05       	cpc	r29, r13
     bee:	09 f0       	breq	.+2      	; 0xbf2 <scan_pots+0xca>
     bf0:	b8 cf       	rjmp	.-144    	; 0xb62 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     bf2:	8c e7       	ldi	r24, 0x7C	; 124
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     bfa:	90 93 c0 02 	sts	0x02C0, r25
     bfe:	80 93 bf 02 	sts	0x02BF, r24
	adc_change = adc_value - volume_pot.value;
     c02:	20 91 7c 01 	lds	r18, 0x017C
     c06:	40 91 7d 01 	lds	r20, 0x017D
     c0a:	34 2f       	mov	r19, r20
     c0c:	33 70       	andi	r19, 0x03	; 3
     c0e:	82 1b       	sub	r24, r18
     c10:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     c12:	95 95       	asr	r25
     c14:	87 95       	ror	r24
     c16:	95 95       	asr	r25
     c18:	87 95       	ror	r24
     c1a:	28 0f       	add	r18, r24
     c1c:	39 1f       	adc	r19, r25
     c1e:	20 93 7c 01 	sts	0x017C, r18
     c22:	83 2f       	mov	r24, r19
     c24:	83 70       	andi	r24, 0x03	; 3
     c26:	4c 7f       	andi	r20, 0xFC	; 252
     c28:	48 2b       	or	r20, r24
     c2a:	40 93 7d 01 	sts	0x017D, r20
	
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	08 95       	ret

00000c42 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     c46:	60 91 c6 02 	lds	r22, 0x02C6
     c4a:	70 91 c7 02 	lds	r23, 0x02C7
     c4e:	62 95       	swap	r22
     c50:	72 95       	swap	r23
     c52:	70 7f       	andi	r23, 0xF0	; 240
     c54:	76 27       	eor	r23, r22
     c56:	60 7f       	andi	r22, 0xF0	; 240
     c58:	76 27       	eor	r23, r22
     c5a:	84 ee       	ldi	r24, 0xE4	; 228
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     c62:	60 91 c8 02 	lds	r22, 0x02C8
     c66:	70 91 c9 02 	lds	r23, 0x02C9
     c6a:	62 95       	swap	r22
     c6c:	72 95       	swap	r23
     c6e:	70 7f       	andi	r23, 0xF0	; 240
     c70:	76 27       	eor	r23, r22
     c72:	60 7f       	andi	r22, 0xF0	; 240
     c74:	76 27       	eor	r23, r22
     c76:	83 ee       	ldi	r24, 0xE3	; 227
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     c7e:	60 91 ca 02 	lds	r22, 0x02CA
     c82:	70 91 cb 02 	lds	r23, 0x02CB
     c86:	66 0f       	add	r22, r22
     c88:	77 1f       	adc	r23, r23
     c8a:	66 0f       	add	r22, r22
     c8c:	77 1f       	adc	r23, r23
     c8e:	66 0f       	add	r22, r22
     c90:	77 1f       	adc	r23, r23
     c92:	82 ee       	ldi	r24, 0xE2	; 226
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     c9a:	60 91 cc 02 	lds	r22, 0x02CC
     c9e:	70 91 cd 02 	lds	r23, 0x02CD
     ca2:	62 95       	swap	r22
     ca4:	72 95       	swap	r23
     ca6:	70 7f       	andi	r23, 0xF0	; 240
     ca8:	76 27       	eor	r23, r22
     caa:	60 7f       	andi	r22, 0xF0	; 240
     cac:	76 27       	eor	r23, r22
     cae:	87 eb       	ldi	r24, 0xB7	; 183
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     cb6:	60 91 ce 02 	lds	r22, 0x02CE
     cba:	70 91 cf 02 	lds	r23, 0x02CF
     cbe:	66 0f       	add	r22, r22
     cc0:	77 1f       	adc	r23, r23
     cc2:	66 0f       	add	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	66 0f       	add	r22, r22
     cc8:	77 1f       	adc	r23, r23
     cca:	81 ee       	ldi	r24, 0xE1	; 225
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     cd2:	60 91 d0 02 	lds	r22, 0x02D0
     cd6:	70 91 d1 02 	lds	r23, 0x02D1
     cda:	62 95       	swap	r22
     cdc:	72 95       	swap	r23
     cde:	70 7f       	andi	r23, 0xF0	; 240
     ce0:	76 27       	eor	r23, r22
     ce2:	60 7f       	andi	r22, 0xF0	; 240
     ce4:	76 27       	eor	r23, r22
     ce6:	80 ee       	ldi	r24, 0xE0	; 224
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     cee:	60 91 d2 02 	lds	r22, 0x02D2
     cf2:	70 91 d3 02 	lds	r23, 0x02D3
     cf6:	62 95       	swap	r22
     cf8:	72 95       	swap	r23
     cfa:	70 7f       	andi	r23, 0xF0	; 240
     cfc:	76 27       	eor	r23, r22
     cfe:	60 7f       	andi	r22, 0xF0	; 240
     d00:	76 27       	eor	r23, r22
     d02:	8f ed       	ldi	r24, 0xDF	; 223
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     d0a:	60 91 d4 02 	lds	r22, 0x02D4
     d0e:	70 91 d5 02 	lds	r23, 0x02D5
     d12:	62 95       	swap	r22
     d14:	72 95       	swap	r23
     d16:	70 7f       	andi	r23, 0xF0	; 240
     d18:	76 27       	eor	r23, r22
     d1a:	60 7f       	andi	r22, 0xF0	; 240
     d1c:	76 27       	eor	r23, r22
     d1e:	8e ed       	ldi	r24, 0xDE	; 222
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     d26:	80 91 d8 02 	lds	r24, 0x02D8
     d2a:	90 91 d9 02 	lds	r25, 0x02D9
     d2e:	c0 e0       	ldi	r28, 0x00	; 0
     d30:	d2 e0       	ldi	r29, 0x02	; 2
     d32:	c8 1b       	sub	r28, r24
     d34:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     d36:	60 91 77 03 	lds	r22, 0x0377
     d3a:	70 91 78 03 	lds	r23, 0x0378
     d3e:	60 50       	subi	r22, 0x00	; 0
     d40:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     d42:	80 91 d6 02 	lds	r24, 0x02D6
     d46:	90 91 d7 02 	lds	r25, 0x02D7
     d4a:	68 1b       	sub	r22, r24
     d4c:	79 0b       	sbc	r23, r25
     d4e:	6c 0f       	add	r22, r28
     d50:	7d 1f       	adc	r23, r29
     d52:	8d ed       	ldi	r24, 0xDD	; 221
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     d5a:	60 91 79 03 	lds	r22, 0x0379
     d5e:	70 91 7a 03 	lds	r23, 0x037A
     d62:	6c 0f       	add	r22, r28
     d64:	7d 1f       	adc	r23, r29
     d66:	8c ed       	ldi	r24, 0xDC	; 220
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     d6e:	60 91 da 02 	lds	r22, 0x02DA
     d72:	70 91 db 02 	lds	r23, 0x02DB
     d76:	62 95       	swap	r22
     d78:	72 95       	swap	r23
     d7a:	70 7f       	andi	r23, 0xF0	; 240
     d7c:	76 27       	eor	r23, r22
     d7e:	60 7f       	andi	r22, 0xF0	; 240
     d80:	76 27       	eor	r23, r22
     d82:	8b ed       	ldi	r24, 0xDB	; 219
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     d8a:	60 91 de 02 	lds	r22, 0x02DE
     d8e:	70 91 df 02 	lds	r23, 0x02DF
     d92:	62 95       	swap	r22
     d94:	72 95       	swap	r23
     d96:	70 7f       	andi	r23, 0xF0	; 240
     d98:	76 27       	eor	r23, r22
     d9a:	60 7f       	andi	r22, 0xF0	; 240
     d9c:	76 27       	eor	r23, r22
     d9e:	8a ed       	ldi	r24, 0xDA	; 218
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     da6:	60 91 e0 02 	lds	r22, 0x02E0
     daa:	70 91 e1 02 	lds	r23, 0x02E1
     dae:	62 95       	swap	r22
     db0:	72 95       	swap	r23
     db2:	70 7f       	andi	r23, 0xF0	; 240
     db4:	76 27       	eor	r23, r22
     db6:	60 7f       	andi	r22, 0xF0	; 240
     db8:	76 27       	eor	r23, r22
     dba:	89 ed       	ldi	r24, 0xD9	; 217
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     dc2:	60 91 7c 01 	lds	r22, 0x017C
     dc6:	80 91 7d 01 	lds	r24, 0x017D
     dca:	78 2f       	mov	r23, r24
     dcc:	73 70       	andi	r23, 0x03	; 3
     dce:	62 95       	swap	r22
     dd0:	72 95       	swap	r23
     dd2:	70 7f       	andi	r23, 0xF0	; 240
     dd4:	76 27       	eor	r23, r22
     dd6:	60 7f       	andi	r22, 0xF0	; 240
     dd8:	76 27       	eor	r23, r22
     dda:	88 ed       	ldi	r24, 0xD8	; 216
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     de2:	60 91 e2 02 	lds	r22, 0x02E2
     de6:	70 91 e3 02 	lds	r23, 0x02E3
     dea:	62 95       	swap	r22
     dec:	72 95       	swap	r23
     dee:	70 7f       	andi	r23, 0xF0	; 240
     df0:	76 27       	eor	r23, r22
     df2:	60 7f       	andi	r22, 0xF0	; 240
     df4:	76 27       	eor	r23, r22
     df6:	87 ed       	ldi	r24, 0xD7	; 215
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     dfe:	60 91 e4 02 	lds	r22, 0x02E4
     e02:	70 91 e5 02 	lds	r23, 0x02E5
     e06:	62 95       	swap	r22
     e08:	72 95       	swap	r23
     e0a:	70 7f       	andi	r23, 0xF0	; 240
     e0c:	76 27       	eor	r23, r22
     e0e:	60 7f       	andi	r22, 0xF0	; 240
     e10:	76 27       	eor	r23, r22
     e12:	86 ed       	ldi	r24, 0xD6	; 214
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     e1a:	60 91 e6 02 	lds	r22, 0x02E6
     e1e:	70 91 e7 02 	lds	r23, 0x02E7
     e22:	62 95       	swap	r22
     e24:	72 95       	swap	r23
     e26:	70 7f       	andi	r23, 0xF0	; 240
     e28:	76 27       	eor	r23, r22
     e2a:	60 7f       	andi	r22, 0xF0	; 240
     e2c:	76 27       	eor	r23, r22
     e2e:	85 ed       	ldi	r24, 0xD5	; 213
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     e36:	0e 94 8d 01 	call	0x31a	; 0x31a <get_current_note>
     e3a:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     e3c:	88 30       	cpi	r24, 0x08	; 8
     e3e:	08 f4       	brcc	.+2      	; 0xe42 <update_control_voltages+0x200>
     e40:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = current_patch.number + 100*(arp.sequence[arp.step_position].note); //100*note;
	//value_to_display = arp.sequence[arp.step_position].note;
	//uint8_t arp_note = arp.sequence[arp.step_position].note;
	//if (arp_note == EMPTY) arp_note = 0;
	value_to_display = current_patch.number + 100*arp.display;
     e42:	60 91 07 03 	lds	r22, 0x0307
     e46:	40 91 92 03 	lds	r20, 0x0392
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	24 e6       	ldi	r18, 0x64	; 100
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	42 9f       	mul	r20, r18
     e52:	c0 01       	movw	r24, r0
     e54:	43 9f       	mul	r20, r19
     e56:	90 0d       	add	r25, r0
     e58:	52 9f       	mul	r21, r18
     e5a:	90 0d       	add	r25, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	86 0f       	add	r24, r22
     e60:	91 1d       	adc	r25, r1
     e62:	90 93 fe 01 	sts	0x01FE, r25
     e66:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     e6a:	8c 2f       	mov	r24, r28
     e6c:	88 50       	subi	r24, 0x08	; 8
     e6e:	63 e1       	ldi	r22, 0x13	; 19
     e70:	73 e0       	ldi	r23, 0x03	; 3
     e72:	0e 94 75 16 	call	0x2cea	; 0x2cea <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     e76:	bc 01       	movw	r22, r24
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	20 91 ea 02 	lds	r18, 0x02EA
     e80:	30 91 eb 02 	lds	r19, 0x02EB
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__mulsi3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	07 2e       	mov	r0, r23
     e92:	7a e0       	ldi	r23, 0x0A	; 10
     e94:	b6 95       	lsr	r27
     e96:	a7 95       	ror	r26
     e98:	97 95       	ror	r25
     e9a:	87 95       	ror	r24
     e9c:	7a 95       	dec	r23
     e9e:	d1 f7       	brne	.-12     	; 0xe94 <update_control_voltages+0x252>
     ea0:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     ea2:	60 91 e8 02 	lds	r22, 0x02E8
     ea6:	70 91 e9 02 	lds	r23, 0x02E9
     eaa:	62 95       	swap	r22
     eac:	72 95       	swap	r23
     eae:	70 7f       	andi	r23, 0xF0	; 240
     eb0:	76 27       	eor	r23, r22
     eb2:	60 7f       	andi	r22, 0xF0	; 240
     eb4:	76 27       	eor	r23, r22
     eb6:	86 0f       	add	r24, r22
     eb8:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     eba:	bc 01       	movw	r22, r24
     ebc:	80 e4       	ldi	r24, 0x40	; 64
     ebe:	60 30       	cpi	r22, 0x00	; 0
     ec0:	78 07       	cpc	r23, r24
     ec2:	10 f0       	brcs	.+4      	; 0xec8 <update_control_voltages+0x286>
     ec4:	6f ef       	ldi	r22, 0xFF	; 255
     ec6:	7f e3       	ldi	r23, 0x3F	; 63
     ec8:	84 ed       	ldi	r24, 0xD4	; 212
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     ed0:	60 91 ec 02 	lds	r22, 0x02EC
     ed4:	70 91 ed 02 	lds	r23, 0x02ED
     ed8:	62 95       	swap	r22
     eda:	72 95       	swap	r23
     edc:	70 7f       	andi	r23, 0xF0	; 240
     ede:	76 27       	eor	r23, r22
     ee0:	60 7f       	andi	r22, 0xF0	; 240
     ee2:	76 27       	eor	r23, r22
     ee4:	82 ed       	ldi	r24, 0xD2	; 210
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     eec:	60 91 ee 02 	lds	r22, 0x02EE
     ef0:	70 91 ef 02 	lds	r23, 0x02EF
     ef4:	62 95       	swap	r22
     ef6:	72 95       	swap	r23
     ef8:	70 7f       	andi	r23, 0xF0	; 240
     efa:	76 27       	eor	r23, r22
     efc:	60 7f       	andi	r22, 0xF0	; 240
     efe:	76 27       	eor	r23, r22
     f00:	81 ed       	ldi	r24, 0xD1	; 209
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     f08:	60 91 f0 02 	lds	r22, 0x02F0
     f0c:	70 91 f1 02 	lds	r23, 0x02F1
     f10:	62 95       	swap	r22
     f12:	72 95       	swap	r23
     f14:	70 7f       	andi	r23, 0xF0	; 240
     f16:	76 27       	eor	r23, r22
     f18:	60 7f       	andi	r22, 0xF0	; 240
     f1a:	76 27       	eor	r23, r22
     f1c:	80 ed       	ldi	r24, 0xD0	; 208
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     f24:	60 91 f2 02 	lds	r22, 0x02F2
     f28:	70 91 f3 02 	lds	r23, 0x02F3
     f2c:	62 95       	swap	r22
     f2e:	72 95       	swap	r23
     f30:	70 7f       	andi	r23, 0xF0	; 240
     f32:	76 27       	eor	r23, r22
     f34:	60 7f       	andi	r22, 0xF0	; 240
     f36:	76 27       	eor	r23, r22
     f38:	8f ec       	ldi	r24, 0xCF	; 207
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     f40:	60 91 f4 02 	lds	r22, 0x02F4
     f44:	70 91 f5 02 	lds	r23, 0x02F5
     f48:	62 95       	swap	r22
     f4a:	72 95       	swap	r23
     f4c:	70 7f       	andi	r23, 0xF0	; 240
     f4e:	76 27       	eor	r23, r22
     f50:	60 7f       	andi	r22, 0xF0	; 240
     f52:	76 27       	eor	r23, r22
     f54:	8e ec       	ldi	r24, 0xCE	; 206
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     f5c:	60 91 f6 02 	lds	r22, 0x02F6
     f60:	70 91 f7 02 	lds	r23, 0x02F7
     f64:	62 95       	swap	r22
     f66:	72 95       	swap	r23
     f68:	70 7f       	andi	r23, 0xF0	; 240
     f6a:	76 27       	eor	r23, r22
     f6c:	60 7f       	andi	r22, 0xF0	; 240
     f6e:	76 27       	eor	r23, r22
     f70:	8d ec       	ldi	r24, 0xCD	; 205
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     f78:	60 91 f8 02 	lds	r22, 0x02F8
     f7c:	70 91 f9 02 	lds	r23, 0x02F9
     f80:	62 95       	swap	r22
     f82:	72 95       	swap	r23
     f84:	70 7f       	andi	r23, 0xF0	; 240
     f86:	76 27       	eor	r23, r22
     f88:	60 7f       	andi	r22, 0xF0	; 240
     f8a:	76 27       	eor	r23, r22
     f8c:	8c ec       	ldi	r24, 0xCC	; 204
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     f94:	60 91 fc 02 	lds	r22, 0x02FC
     f98:	70 91 fd 02 	lds	r23, 0x02FD
     f9c:	62 95       	swap	r22
     f9e:	72 95       	swap	r23
     fa0:	70 7f       	andi	r23, 0xF0	; 240
     fa2:	76 27       	eor	r23, r22
     fa4:	60 7f       	andi	r22, 0xF0	; 240
     fa6:	76 27       	eor	r23, r22
     fa8:	8a ec       	ldi	r24, 0xCA	; 202
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     fb0:	60 91 fa 02 	lds	r22, 0x02FA
     fb4:	70 91 fb 02 	lds	r23, 0x02FB
     fb8:	62 95       	swap	r22
     fba:	72 95       	swap	r23
     fbc:	70 7f       	andi	r23, 0xF0	; 240
     fbe:	76 27       	eor	r23, r22
     fc0:	60 7f       	andi	r22, 0xF0	; 240
     fc2:	76 27       	eor	r23, r22
     fc4:	8b ec       	ldi	r24, 0xCB	; 203
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     fcc:	60 91 00 03 	lds	r22, 0x0300
     fd0:	70 91 01 03 	lds	r23, 0x0301
     fd4:	62 95       	swap	r22
     fd6:	72 95       	swap	r23
     fd8:	70 7f       	andi	r23, 0xF0	; 240
     fda:	76 27       	eor	r23, r22
     fdc:	60 7f       	andi	r22, 0xF0	; 240
     fde:	76 27       	eor	r23, r22
     fe0:	88 ec       	ldi	r24, 0xC8	; 200
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     fe8:	60 91 fe 02 	lds	r22, 0x02FE
     fec:	70 91 ff 02 	lds	r23, 0x02FF
     ff0:	62 95       	swap	r22
     ff2:	72 95       	swap	r23
     ff4:	70 7f       	andi	r23, 0xF0	; 240
     ff6:	76 27       	eor	r23, r22
     ff8:	60 7f       	andi	r22, 0xF0	; 240
     ffa:	76 27       	eor	r23, r22
     ffc:	89 ec       	ldi	r24, 0xC9	; 201
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
    1004:	8c 2f       	mov	r24, r28
    1006:	6f e0       	ldi	r22, 0x0F	; 15
    1008:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
    100c:	65 e5       	ldi	r22, 0x55	; 85
    100e:	73 e0       	ldi	r23, 0x03	; 3
    1010:	0e 94 75 16 	call	0x2cea	; 0x2cea <interpolate_pitch_cv>
    1014:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
    1016:	86 ee       	ldi	r24, 0xE6	; 230
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
    101e:	8c 2f       	mov	r24, r28
    1020:	60 ef       	ldi	r22, 0xF0	; 240
    1022:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
    1026:	63 e3       	ldi	r22, 0x33	; 51
    1028:	73 e0       	ldi	r23, 0x03	; 3
    102a:	0e 94 75 16 	call	0x2cea	; 0x2cea <interpolate_pitch_cv>
    102e:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
    1030:	85 ee       	ldi	r24, 0xE5	; 229
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
    1038:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
    103a:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
    103c:	20 91 88 01 	lds	r18, 0x0188
    1040:	80 91 89 01 	lds	r24, 0x0189
    1044:	38 2f       	mov	r19, r24
    1046:	33 70       	andi	r19, 0x03	; 3
    1048:	83 ef       	ldi	r24, 0xF3	; 243
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	82 1b       	sub	r24, r18
    104e:	93 0b       	sbc	r25, r19
    1050:	90 93 d8 03 	sts	0x03D8, r25
    1054:	80 93 d7 03 	sts	0x03D7, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
    1058:	20 91 d9 03 	lds	r18, 0x03D9
    105c:	30 91 da 03 	lds	r19, 0x03DA
    1060:	82 17       	cp	r24, r18
    1062:	93 07       	cpc	r25, r19
    1064:	11 f0       	breq	.+4      	; 0x106a <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
    1066:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
    106a:	80 91 d7 03 	lds	r24, 0x03D7
    106e:	90 91 d8 03 	lds	r25, 0x03D8
    1072:	90 93 da 03 	sts	0x03DA, r25
    1076:	80 93 d9 03 	sts	0x03D9, r24
	
}			
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
    1080:	84 b1       	in	r24, 0x04	; 4
    1082:	87 62       	ori	r24, 0x27	; 39
    1084:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
    1086:	ec ed       	ldi	r30, 0xDC	; 220
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8c 65       	ori	r24, 0x5C	; 92
    108e:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
    1090:	85 b1       	in	r24, 0x05	; 5
    1092:	89 7d       	andi	r24, 0xD9	; 217
    1094:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
    1096:	ed ed       	ldi	r30, 0xDD	; 221
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	83 7f       	andi	r24, 0xF3	; 243
    109e:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
    10a0:	80 e5       	ldi	r24, 0x50	; 80
    10a2:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
    10a4:	80 81       	ld	r24, Z
    10a6:	87 7f       	andi	r24, 0xF7	; 247
    10a8:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
    10aa:	80 81       	ld	r24, Z
    10ac:	87 7f       	andi	r24, 0xF7	; 247
    10ae:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
    10b0:	80 81       	ld	r24, Z
    10b2:	88 60       	ori	r24, 0x08	; 8
    10b4:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 7e       	andi	r24, 0xEF	; 239
    10ba:	80 83       	st	Z, r24
	
}
    10bc:	08 95       	ret

000010be <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
    10be:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    10c0:	0d b4       	in	r0, 0x2d	; 45
    10c2:	07 fe       	sbrs	r0, 7
    10c4:	fd cf       	rjmp	.-6      	; 0x10c0 <spi_shift_byte+0x2>
	return SPDR;
    10c6:	8e b5       	in	r24, 0x2e	; 46
	
}
    10c8:	08 95       	ret

000010ca <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
    10ca:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
    10cc:	80 91 06 03 	lds	r24, 0x0306
    10d0:	0e 94 5f 08 	call	0x10be	; 0x10be <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
    10d4:	90 91 c5 02 	lds	r25, 0x02C5
    10d8:	98 2b       	or	r25, r24
    10da:	90 93 c5 02 	sts	0x02C5, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
    10de:	20 91 c3 02 	lds	r18, 0x02C3
    10e2:	98 2f       	mov	r25, r24
    10e4:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
    10e6:	89 2f       	mov	r24, r25
    10e8:	82 27       	eor	r24, r18
    10ea:	80 93 c3 02 	sts	0x02C3, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
    10ee:	89 23       	and	r24, r25
    10f0:	80 93 c4 02 	sts	0x02C4, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
    10f4:	90 91 82 03 	lds	r25, 0x0382
    10f8:	89 27       	eor	r24, r25
    10fa:	80 93 82 03 	sts	0x0382, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
    10fe:	80 91 05 03 	lds	r24, 0x0305
    1102:	0e 94 5f 08 	call	0x10be	; 0x10be <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
    1106:	90 91 c5 02 	lds	r25, 0x02C5
    110a:	98 2b       	or	r25, r24
    110c:	90 93 c5 02 	sts	0x02C5, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
    1110:	20 91 c1 02 	lds	r18, 0x02C1
    1114:	98 2f       	mov	r25, r24
    1116:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
    1118:	89 2f       	mov	r24, r25
    111a:	82 27       	eor	r24, r18
    111c:	80 93 c1 02 	sts	0x02C1, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
    1120:	89 23       	and	r24, r25
    1122:	80 93 c2 02 	sts	0x02C2, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
    1126:	90 91 83 03 	lds	r25, 0x0383
    112a:	89 27       	eor	r24, r25
    112c:	80 93 83 03 	sts	0x0383, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
    1130:	80 91 04 03 	lds	r24, 0x0304
    1134:	0e 94 5f 08 	call	0x10be	; 0x10be <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
    1138:	80 91 03 03 	lds	r24, 0x0303
    113c:	0e 94 5f 08 	call	0x10be	; 0x10be <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    1140:	80 91 0b 03 	lds	r24, 0x030B
    1144:	83 30       	cpi	r24, 0x03	; 3
    1146:	11 f4       	brne	.+4      	; 0x114c <__stack+0x4d>
    1148:	20 e8       	ldi	r18, 0x80	; 128
    114a:	01 c0       	rjmp	.+2      	; 0x114e <__stack+0x4f>
    114c:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
    114e:	80 91 84 03 	lds	r24, 0x0384
    1152:	88 1f       	adc	r24, r24
    1154:	88 27       	eor	r24, r24
    1156:	88 1f       	adc	r24, r24
    1158:	82 95       	swap	r24
    115a:	88 0f       	add	r24, r24
    115c:	88 0f       	add	r24, r24
    115e:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    1160:	90 91 02 03 	lds	r25, 0x0302
    1164:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
    1166:	82 2b       	or	r24, r18
    1168:	0e 94 5f 08 	call	0x10be	; 0x10be <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
    116c:	ed ed       	ldi	r30, 0xDD	; 221
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	87 7f       	andi	r24, 0xF7	; 247
    1174:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
    1176:	80 81       	ld	r24, Z
    1178:	88 60       	ori	r24, 0x08	; 8
    117a:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
    117c:	2d 98       	cbi	0x05, 5	; 5
			
			

	
    117e:	08 95       	ret

00001180 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
    1180:	a0 e0       	ldi	r26, 0x00	; 0
    1182:	b1 e0       	ldi	r27, 0x01	; 1
    1184:	9d 01       	movw	r18, r26
    1186:	24 5c       	subi	r18, 0xC4	; 196
    1188:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
    118a:	ed 91       	ld	r30, X+
    118c:	fc 91       	ld	r31, X
    118e:	11 97       	sbiw	r26, 0x01	; 1
    1190:	80 81       	ld	r24, Z
    1192:	41 81       	ldd	r20, Z+1	; 0x01
    1194:	94 2f       	mov	r25, r20
    1196:	93 70       	andi	r25, 0x03	; 3
    1198:	95 95       	asr	r25
    119a:	87 95       	ror	r24
    119c:	95 95       	asr	r25
    119e:	87 95       	ror	r24
    11a0:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
    11a2:	ed 91       	ld	r30, X+
    11a4:	fd 91       	ld	r31, X+
    11a6:	83 81       	ldd	r24, Z+3	; 0x03
    11a8:	80 68       	ori	r24, 0x80	; 128
    11aa:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
    11ac:	a2 17       	cp	r26, r18
    11ae:	b3 07       	cpc	r27, r19
    11b0:	61 f7       	brne	.-40     	; 0x118a <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
    11b2:	08 95       	ret

000011b4 <unlock_pots>:

void unlock_pots(void) {
    11b4:	e0 e0       	ldi	r30, 0x00	; 0
    11b6:	f1 e0       	ldi	r31, 0x01	; 1
    11b8:	cf 01       	movw	r24, r30
    11ba:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
    11bc:	a1 91       	ld	r26, Z+
    11be:	b1 91       	ld	r27, Z+
    11c0:	13 96       	adiw	r26, 0x03	; 3
    11c2:	2c 91       	ld	r18, X
    11c4:	13 97       	sbiw	r26, 0x03	; 3
    11c6:	2f 77       	andi	r18, 0x7F	; 127
    11c8:	13 96       	adiw	r26, 0x03	; 3
    11ca:	2c 93       	st	X, r18
    11cc:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
    11ce:	e8 17       	cp	r30, r24
    11d0:	f9 07       	cpc	r31, r25
    11d2:	a1 f7       	brne	.-24     	; 0x11bc <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
    11d4:	08 95       	ret

000011d6 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	ab 97       	sbiw	r28, 0x2b	; 43
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
    11ee:	e2 ee       	ldi	r30, 0xE2	; 226
    11f0:	f2 e0       	ldi	r31, 0x02	; 2
    11f2:	20 91 e2 02 	lds	r18, 0x02E2
    11f6:	82 2f       	mov	r24, r18
    11f8:	82 95       	swap	r24
    11fa:	80 7f       	andi	r24, 0xF0	; 240
    11fc:	22 95       	swap	r18
    11fe:	2f 70       	andi	r18, 0x0F	; 15
    1200:	90 91 e3 02 	lds	r25, 0x02E3
    1204:	93 70       	andi	r25, 0x03	; 3
    1206:	92 95       	swap	r25
    1208:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
    120a:	df 01       	movw	r26, r30
    120c:	5a 97       	sbiw	r26, 0x1a	; 26
    120e:	3c 91       	ld	r19, X
    1210:	53 2f       	mov	r21, r19
    1212:	55 0f       	add	r21, r21
    1214:	55 0f       	add	r21, r21
    1216:	4a 81       	ldd	r20, Y+2	; 0x02
    1218:	43 70       	andi	r20, 0x03	; 3
    121a:	45 2b       	or	r20, r21
    121c:	4a 83       	std	Y+2, r20	; 0x02
    121e:	63 2f       	mov	r22, r19
    1220:	62 95       	swap	r22
    1222:	66 95       	lsr	r22
    1224:	66 95       	lsr	r22
    1226:	63 70       	andi	r22, 0x03	; 3
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	4c 91       	ld	r20, X
    122c:	43 70       	andi	r20, 0x03	; 3
    122e:	44 0f       	add	r20, r20
    1230:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    1232:	df 01       	movw	r26, r30
    1234:	58 97       	sbiw	r26, 0x18	; 24
    1236:	3c 91       	ld	r19, X
    1238:	53 2f       	mov	r21, r19
    123a:	52 95       	swap	r21
    123c:	50 7f       	andi	r21, 0xF0	; 240
    123e:	46 2b       	or	r20, r22
    1240:	45 2b       	or	r20, r21
    1242:	4b 83       	std	Y+3, r20	; 0x03
    1244:	63 2f       	mov	r22, r19
    1246:	62 95       	swap	r22
    1248:	6f 70       	andi	r22, 0x0F	; 15
    124a:	11 96       	adiw	r26, 0x01	; 1
    124c:	4c 91       	ld	r20, X
    124e:	43 70       	andi	r20, 0x03	; 3
    1250:	42 95       	swap	r20
    1252:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    1254:	df 01       	movw	r26, r30
    1256:	56 97       	sbiw	r26, 0x16	; 22
    1258:	3c 91       	ld	r19, X
    125a:	53 2f       	mov	r21, r19
    125c:	52 95       	swap	r21
    125e:	55 0f       	add	r21, r21
    1260:	55 0f       	add	r21, r21
    1262:	50 7c       	andi	r21, 0xC0	; 192
    1264:	46 2b       	or	r20, r22
    1266:	45 2b       	or	r20, r21
    1268:	4c 83       	std	Y+4, r20	; 0x04
    126a:	11 96       	adiw	r26, 0x01	; 1
    126c:	4c 91       	ld	r20, X
    126e:	42 95       	swap	r20
    1270:	44 0f       	add	r20, r20
    1272:	44 0f       	add	r20, r20
    1274:	40 7c       	andi	r20, 0xC0	; 192
    1276:	36 95       	lsr	r19
    1278:	36 95       	lsr	r19
    127a:	34 2b       	or	r19, r20
    127c:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    127e:	df 01       	movw	r26, r30
    1280:	54 97       	sbiw	r26, 0x14	; 20
    1282:	3c 91       	ld	r19, X
    1284:	3e 83       	std	Y+6, r19	; 0x06
    1286:	11 96       	adiw	r26, 0x01	; 1
    1288:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    128a:	df 01       	movw	r26, r30
    128c:	52 97       	sbiw	r26, 0x12	; 18
    128e:	3c 91       	ld	r19, X
    1290:	53 2f       	mov	r21, r19
    1292:	55 0f       	add	r21, r21
    1294:	55 0f       	add	r21, r21
    1296:	43 70       	andi	r20, 0x03	; 3
    1298:	45 2b       	or	r20, r21
    129a:	4f 83       	std	Y+7, r20	; 0x07
    129c:	63 2f       	mov	r22, r19
    129e:	62 95       	swap	r22
    12a0:	66 95       	lsr	r22
    12a2:	66 95       	lsr	r22
    12a4:	63 70       	andi	r22, 0x03	; 3
    12a6:	11 96       	adiw	r26, 0x01	; 1
    12a8:	4c 91       	ld	r20, X
    12aa:	43 70       	andi	r20, 0x03	; 3
    12ac:	44 0f       	add	r20, r20
    12ae:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    12b0:	df 01       	movw	r26, r30
    12b2:	50 97       	sbiw	r26, 0x10	; 16
    12b4:	3c 91       	ld	r19, X
    12b6:	53 2f       	mov	r21, r19
    12b8:	52 95       	swap	r21
    12ba:	50 7f       	andi	r21, 0xF0	; 240
    12bc:	46 2b       	or	r20, r22
    12be:	45 2b       	or	r20, r21
    12c0:	48 87       	std	Y+8, r20	; 0x08
    12c2:	63 2f       	mov	r22, r19
    12c4:	62 95       	swap	r22
    12c6:	6f 70       	andi	r22, 0x0F	; 15
    12c8:	11 96       	adiw	r26, 0x01	; 1
    12ca:	4c 91       	ld	r20, X
    12cc:	43 70       	andi	r20, 0x03	; 3
    12ce:	42 95       	swap	r20
    12d0:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    12d2:	df 01       	movw	r26, r30
    12d4:	1e 97       	sbiw	r26, 0x0e	; 14
    12d6:	3c 91       	ld	r19, X
    12d8:	53 2f       	mov	r21, r19
    12da:	52 95       	swap	r21
    12dc:	55 0f       	add	r21, r21
    12de:	55 0f       	add	r21, r21
    12e0:	50 7c       	andi	r21, 0xC0	; 192
    12e2:	46 2b       	or	r20, r22
    12e4:	45 2b       	or	r20, r21
    12e6:	49 87       	std	Y+9, r20	; 0x09
    12e8:	11 96       	adiw	r26, 0x01	; 1
    12ea:	4c 91       	ld	r20, X
    12ec:	42 95       	swap	r20
    12ee:	44 0f       	add	r20, r20
    12f0:	44 0f       	add	r20, r20
    12f2:	40 7c       	andi	r20, 0xC0	; 192
    12f4:	36 95       	lsr	r19
    12f6:	36 95       	lsr	r19
    12f8:	34 2b       	or	r19, r20
    12fa:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    12fc:	df 01       	movw	r26, r30
    12fe:	1c 97       	sbiw	r26, 0x0c	; 12
    1300:	3c 91       	ld	r19, X
    1302:	3b 87       	std	Y+11, r19	; 0x0b
    1304:	11 96       	adiw	r26, 0x01	; 1
    1306:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1308:	df 01       	movw	r26, r30
    130a:	1a 97       	sbiw	r26, 0x0a	; 10
    130c:	3c 91       	ld	r19, X
    130e:	53 2f       	mov	r21, r19
    1310:	55 0f       	add	r21, r21
    1312:	55 0f       	add	r21, r21
    1314:	43 70       	andi	r20, 0x03	; 3
    1316:	45 2b       	or	r20, r21
    1318:	4c 87       	std	Y+12, r20	; 0x0c
    131a:	63 2f       	mov	r22, r19
    131c:	62 95       	swap	r22
    131e:	66 95       	lsr	r22
    1320:	66 95       	lsr	r22
    1322:	63 70       	andi	r22, 0x03	; 3
    1324:	11 96       	adiw	r26, 0x01	; 1
    1326:	4c 91       	ld	r20, X
    1328:	43 70       	andi	r20, 0x03	; 3
    132a:	44 0f       	add	r20, r20
    132c:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    132e:	df 01       	movw	r26, r30
    1330:	18 97       	sbiw	r26, 0x08	; 8
    1332:	3c 91       	ld	r19, X
    1334:	53 2f       	mov	r21, r19
    1336:	52 95       	swap	r21
    1338:	50 7f       	andi	r21, 0xF0	; 240
    133a:	46 2b       	or	r20, r22
    133c:	45 2b       	or	r20, r21
    133e:	4d 87       	std	Y+13, r20	; 0x0d
    1340:	63 2f       	mov	r22, r19
    1342:	62 95       	swap	r22
    1344:	6f 70       	andi	r22, 0x0F	; 15
    1346:	11 96       	adiw	r26, 0x01	; 1
    1348:	4c 91       	ld	r20, X
    134a:	43 70       	andi	r20, 0x03	; 3
    134c:	42 95       	swap	r20
    134e:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    1350:	df 01       	movw	r26, r30
    1352:	16 97       	sbiw	r26, 0x06	; 6
    1354:	3c 91       	ld	r19, X
    1356:	53 2f       	mov	r21, r19
    1358:	52 95       	swap	r21
    135a:	55 0f       	add	r21, r21
    135c:	55 0f       	add	r21, r21
    135e:	50 7c       	andi	r21, 0xC0	; 192
    1360:	46 2b       	or	r20, r22
    1362:	45 2b       	or	r20, r21
    1364:	4e 87       	std	Y+14, r20	; 0x0e
    1366:	11 96       	adiw	r26, 0x01	; 1
    1368:	4c 91       	ld	r20, X
    136a:	42 95       	swap	r20
    136c:	44 0f       	add	r20, r20
    136e:	44 0f       	add	r20, r20
    1370:	40 7c       	andi	r20, 0xC0	; 192
    1372:	36 95       	lsr	r19
    1374:	36 95       	lsr	r19
    1376:	34 2b       	or	r19, r20
    1378:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    137a:	df 01       	movw	r26, r30
    137c:	14 97       	sbiw	r26, 0x04	; 4
    137e:	3c 91       	ld	r19, X
    1380:	38 8b       	std	Y+16, r19	; 0x10
    1382:	11 96       	adiw	r26, 0x01	; 1
    1384:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    1386:	df 01       	movw	r26, r30
    1388:	12 97       	sbiw	r26, 0x02	; 2
    138a:	3c 91       	ld	r19, X
    138c:	53 2f       	mov	r21, r19
    138e:	55 0f       	add	r21, r21
    1390:	55 0f       	add	r21, r21
    1392:	43 70       	andi	r20, 0x03	; 3
    1394:	45 2b       	or	r20, r21
    1396:	49 8b       	std	Y+17, r20	; 0x11
    1398:	32 95       	swap	r19
    139a:	36 95       	lsr	r19
    139c:	36 95       	lsr	r19
    139e:	33 70       	andi	r19, 0x03	; 3
    13a0:	11 96       	adiw	r26, 0x01	; 1
    13a2:	4c 91       	ld	r20, X
    13a4:	43 70       	andi	r20, 0x03	; 3
    13a6:	44 0f       	add	r20, r20
    13a8:	44 0f       	add	r20, r20
    13aa:	83 2b       	or	r24, r19
    13ac:	84 2b       	or	r24, r20
    13ae:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    13b0:	80 91 e4 02 	lds	r24, 0x02E4
    13b4:	38 2f       	mov	r19, r24
    13b6:	32 95       	swap	r19
    13b8:	33 0f       	add	r19, r19
    13ba:	33 0f       	add	r19, r19
    13bc:	30 7c       	andi	r19, 0xC0	; 192
    13be:	92 2b       	or	r25, r18
    13c0:	93 2b       	or	r25, r19
    13c2:	9b 8b       	std	Y+19, r25	; 0x13
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	92 95       	swap	r25
    13c8:	99 0f       	add	r25, r25
    13ca:	99 0f       	add	r25, r25
    13cc:	90 7c       	andi	r25, 0xC0	; 192
    13ce:	86 95       	lsr	r24
    13d0:	86 95       	lsr	r24
    13d2:	89 2b       	or	r24, r25
    13d4:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    13d6:	80 91 e6 02 	lds	r24, 0x02E6
    13da:	8d 8b       	std	Y+21, r24	; 0x15
    13dc:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    13de:	80 91 e8 02 	lds	r24, 0x02E8
    13e2:	28 2f       	mov	r18, r24
    13e4:	22 0f       	add	r18, r18
    13e6:	22 0f       	add	r18, r18
    13e8:	93 70       	andi	r25, 0x03	; 3
    13ea:	92 2b       	or	r25, r18
    13ec:	9e 8b       	std	Y+22, r25	; 0x16
    13ee:	38 2f       	mov	r19, r24
    13f0:	32 95       	swap	r19
    13f2:	36 95       	lsr	r19
    13f4:	36 95       	lsr	r19
    13f6:	33 70       	andi	r19, 0x03	; 3
    13f8:	97 81       	ldd	r25, Z+7	; 0x07
    13fa:	93 70       	andi	r25, 0x03	; 3
    13fc:	99 0f       	add	r25, r25
    13fe:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    1400:	80 91 ea 02 	lds	r24, 0x02EA
    1404:	28 2f       	mov	r18, r24
    1406:	22 95       	swap	r18
    1408:	20 7f       	andi	r18, 0xF0	; 240
    140a:	93 2b       	or	r25, r19
    140c:	92 2b       	or	r25, r18
    140e:	9f 8b       	std	Y+23, r25	; 0x17
    1410:	38 2f       	mov	r19, r24
    1412:	32 95       	swap	r19
    1414:	3f 70       	andi	r19, 0x0F	; 15
    1416:	91 85       	ldd	r25, Z+9	; 0x09
    1418:	93 70       	andi	r25, 0x03	; 3
    141a:	92 95       	swap	r25
    141c:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    141e:	80 91 ec 02 	lds	r24, 0x02EC
    1422:	28 2f       	mov	r18, r24
    1424:	22 95       	swap	r18
    1426:	22 0f       	add	r18, r18
    1428:	22 0f       	add	r18, r18
    142a:	20 7c       	andi	r18, 0xC0	; 192
    142c:	93 2b       	or	r25, r19
    142e:	92 2b       	or	r25, r18
    1430:	98 8f       	std	Y+24, r25	; 0x18
    1432:	93 85       	ldd	r25, Z+11	; 0x0b
    1434:	92 95       	swap	r25
    1436:	99 0f       	add	r25, r25
    1438:	99 0f       	add	r25, r25
    143a:	90 7c       	andi	r25, 0xC0	; 192
    143c:	86 95       	lsr	r24
    143e:	86 95       	lsr	r24
    1440:	89 2b       	or	r24, r25
    1442:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    1444:	80 91 ee 02 	lds	r24, 0x02EE
    1448:	8a 8f       	std	Y+26, r24	; 0x1a
    144a:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    144c:	80 91 f0 02 	lds	r24, 0x02F0
    1450:	28 2f       	mov	r18, r24
    1452:	22 0f       	add	r18, r18
    1454:	22 0f       	add	r18, r18
    1456:	93 70       	andi	r25, 0x03	; 3
    1458:	92 2b       	or	r25, r18
    145a:	9b 8f       	std	Y+27, r25	; 0x1b
    145c:	38 2f       	mov	r19, r24
    145e:	32 95       	swap	r19
    1460:	36 95       	lsr	r19
    1462:	36 95       	lsr	r19
    1464:	33 70       	andi	r19, 0x03	; 3
    1466:	97 85       	ldd	r25, Z+15	; 0x0f
    1468:	93 70       	andi	r25, 0x03	; 3
    146a:	99 0f       	add	r25, r25
    146c:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    146e:	80 91 f2 02 	lds	r24, 0x02F2
    1472:	28 2f       	mov	r18, r24
    1474:	22 95       	swap	r18
    1476:	20 7f       	andi	r18, 0xF0	; 240
    1478:	93 2b       	or	r25, r19
    147a:	92 2b       	or	r25, r18
    147c:	9c 8f       	std	Y+28, r25	; 0x1c
    147e:	38 2f       	mov	r19, r24
    1480:	32 95       	swap	r19
    1482:	3f 70       	andi	r19, 0x0F	; 15
    1484:	91 89       	ldd	r25, Z+17	; 0x11
    1486:	93 70       	andi	r25, 0x03	; 3
    1488:	92 95       	swap	r25
    148a:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    148c:	80 91 f4 02 	lds	r24, 0x02F4
    1490:	28 2f       	mov	r18, r24
    1492:	22 95       	swap	r18
    1494:	22 0f       	add	r18, r18
    1496:	22 0f       	add	r18, r18
    1498:	20 7c       	andi	r18, 0xC0	; 192
    149a:	93 2b       	or	r25, r19
    149c:	92 2b       	or	r25, r18
    149e:	9d 8f       	std	Y+29, r25	; 0x1d
    14a0:	93 89       	ldd	r25, Z+19	; 0x13
    14a2:	92 95       	swap	r25
    14a4:	99 0f       	add	r25, r25
    14a6:	99 0f       	add	r25, r25
    14a8:	90 7c       	andi	r25, 0xC0	; 192
    14aa:	86 95       	lsr	r24
    14ac:	86 95       	lsr	r24
    14ae:	89 2b       	or	r24, r25
    14b0:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    14b2:	80 91 f6 02 	lds	r24, 0x02F6
    14b6:	8f 8f       	std	Y+31, r24	; 0x1f
    14b8:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    14ba:	80 91 f8 02 	lds	r24, 0x02F8
    14be:	28 2f       	mov	r18, r24
    14c0:	22 0f       	add	r18, r18
    14c2:	22 0f       	add	r18, r18
    14c4:	93 70       	andi	r25, 0x03	; 3
    14c6:	92 2b       	or	r25, r18
    14c8:	98 a3       	lds	r25, 0x58
    14ca:	38 2f       	mov	r19, r24
    14cc:	32 95       	swap	r19
    14ce:	36 95       	lsr	r19
    14d0:	36 95       	lsr	r19
    14d2:	33 70       	andi	r19, 0x03	; 3
    14d4:	97 89       	ldd	r25, Z+23	; 0x17
    14d6:	93 70       	andi	r25, 0x03	; 3
    14d8:	99 0f       	add	r25, r25
    14da:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    14dc:	80 91 fa 02 	lds	r24, 0x02FA
    14e0:	28 2f       	mov	r18, r24
    14e2:	22 95       	swap	r18
    14e4:	20 7f       	andi	r18, 0xF0	; 240
    14e6:	93 2b       	or	r25, r19
    14e8:	92 2b       	or	r25, r18
    14ea:	99 a3       	lds	r25, 0x59
    14ec:	38 2f       	mov	r19, r24
    14ee:	32 95       	swap	r19
    14f0:	3f 70       	andi	r19, 0x0F	; 15
    14f2:	91 8d       	ldd	r25, Z+25	; 0x19
    14f4:	93 70       	andi	r25, 0x03	; 3
    14f6:	92 95       	swap	r25
    14f8:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    14fa:	80 91 fc 02 	lds	r24, 0x02FC
    14fe:	28 2f       	mov	r18, r24
    1500:	22 95       	swap	r18
    1502:	22 0f       	add	r18, r18
    1504:	22 0f       	add	r18, r18
    1506:	20 7c       	andi	r18, 0xC0	; 192
    1508:	93 2b       	or	r25, r19
    150a:	92 2b       	or	r25, r18
    150c:	9a a3       	lds	r25, 0x5a
    150e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1510:	92 95       	swap	r25
    1512:	99 0f       	add	r25, r25
    1514:	99 0f       	add	r25, r25
    1516:	90 7c       	andi	r25, 0xC0	; 192
    1518:	86 95       	lsr	r24
    151a:	86 95       	lsr	r24
    151c:	89 2b       	or	r24, r25
    151e:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    1520:	80 91 fe 02 	lds	r24, 0x02FE
    1524:	8c a3       	lds	r24, 0x5c
    1526:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    1528:	80 91 00 03 	lds	r24, 0x0300
    152c:	28 2f       	mov	r18, r24
    152e:	22 0f       	add	r18, r18
    1530:	22 0f       	add	r18, r18
    1532:	93 70       	andi	r25, 0x03	; 3
    1534:	92 2b       	or	r25, r18
    1536:	9d a3       	lds	r25, 0x5d
    1538:	82 95       	swap	r24
    153a:	86 95       	lsr	r24
    153c:	86 95       	lsr	r24
    153e:	83 70       	andi	r24, 0x03	; 3
    1540:	2e a1       	lds	r18, 0x4e
    1542:	20 7f       	andi	r18, 0xF0	; 240
    1544:	97 8d       	ldd	r25, Z+31	; 0x1f
    1546:	93 70       	andi	r25, 0x03	; 3
    1548:	99 0f       	add	r25, r25
    154a:	99 0f       	add	r25, r25
    154c:	82 2b       	or	r24, r18
    154e:	89 2b       	or	r24, r25
    1550:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    1552:	80 91 02 03 	lds	r24, 0x0302
    1556:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    1558:	80 91 03 03 	lds	r24, 0x0303
    155c:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    155e:	80 91 04 03 	lds	r24, 0x0304
    1562:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    1564:	80 91 05 03 	lds	r24, 0x0305
    1568:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    156a:	80 91 06 03 	lds	r24, 0x0306
    156e:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    1570:	0e 94 c0 08 	call	0x1180	; 0x1180 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    1574:	80 91 84 03 	lds	r24, 0x0384
    1578:	8f 77       	andi	r24, 0x7F	; 127
    157a:	80 93 84 03 	sts	0x0384, r24
	current_patch.mode = MEMORY;
    157e:	10 92 0b 03 	sts	0x030B, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    1582:	21 2f       	mov	r18, r17
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	8b e2       	ldi	r24, 0x2B	; 43
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	28 9f       	mul	r18, r24
    158c:	b0 01       	movw	r22, r0
    158e:	29 9f       	mul	r18, r25
    1590:	70 0d       	add	r23, r0
    1592:	38 9f       	mul	r19, r24
    1594:	70 0d       	add	r23, r0
    1596:	11 24       	eor	r1, r1
    1598:	60 50       	subi	r22, 0x00	; 0
    159a:	70 40       	sbci	r23, 0x00	; 0
    159c:	ce 01       	movw	r24, r28
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	4b e2       	ldi	r20, 0x2B	; 43
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__eeupd_block_m6450a>
}	
    15a8:	ab 96       	adiw	r28, 0x2b	; 43
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	08 95       	ret

000015bc <load_patch>:
	
void load_patch(uint8_t patch_number) {
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	c3 54       	subi	r28, 0x43	; 67
    15c8:	d0 40       	sbci	r29, 0x00	; 0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	2b e2       	ldi	r18, 0x2B	; 43
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	82 9f       	mul	r24, r18
    15dc:	b0 01       	movw	r22, r0
    15de:	83 9f       	mul	r24, r19
    15e0:	70 0d       	add	r23, r0
    15e2:	92 9f       	mul	r25, r18
    15e4:	70 0d       	add	r23, r0
    15e6:	11 24       	eor	r1, r1
    15e8:	60 50       	subi	r22, 0x00	; 0
    15ea:	70 40       	sbci	r23, 0x00	; 0
    15ec:	ce 01       	movw	r24, r28
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	4b e2       	ldi	r20, 0x2B	; 43
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    15f8:	e2 ee       	ldi	r30, 0xE2	; 226
    15fa:	f2 e0       	ldi	r31, 0x02	; 2
    15fc:	8a 89       	ldd	r24, Y+18	; 0x12
    15fe:	28 2f       	mov	r18, r24
    1600:	22 95       	swap	r18
    1602:	2f 70       	andi	r18, 0x0F	; 15
    1604:	9b 89       	ldd	r25, Y+19	; 0x13
    1606:	39 2f       	mov	r19, r25
    1608:	32 95       	swap	r19
    160a:	30 7f       	andi	r19, 0xF0	; 240
    160c:	32 2b       	or	r19, r18
    160e:	29 2f       	mov	r18, r25
    1610:	22 95       	swap	r18
    1612:	2f 70       	andi	r18, 0x0F	; 15
    1614:	23 70       	andi	r18, 0x03	; 3
    1616:	30 93 e2 02 	sts	0x02E2, r19
    161a:	20 93 e3 02 	sts	0x02E3, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    161e:	df 01       	movw	r26, r30
    1620:	5a 97       	sbiw	r26, 0x1a	; 26
    1622:	4a 81       	ldd	r20, Y+2	; 0x02
    1624:	46 95       	lsr	r20
    1626:	46 95       	lsr	r20
    1628:	2b 81       	ldd	r18, Y+3	; 0x03
    162a:	32 2f       	mov	r19, r18
    162c:	32 95       	swap	r19
    162e:	33 0f       	add	r19, r19
    1630:	33 0f       	add	r19, r19
    1632:	30 7c       	andi	r19, 0xC0	; 192
    1634:	43 2b       	or	r20, r19
    1636:	32 2f       	mov	r19, r18
    1638:	36 95       	lsr	r19
    163a:	36 95       	lsr	r19
    163c:	33 70       	andi	r19, 0x03	; 3
    163e:	4c 93       	st	X, r20
    1640:	11 96       	adiw	r26, 0x01	; 1
    1642:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    1644:	df 01       	movw	r26, r30
    1646:	58 97       	sbiw	r26, 0x18	; 24
    1648:	32 2f       	mov	r19, r18
    164a:	32 95       	swap	r19
    164c:	3f 70       	andi	r19, 0x0F	; 15
    164e:	2c 81       	ldd	r18, Y+4	; 0x04
    1650:	42 2f       	mov	r20, r18
    1652:	42 95       	swap	r20
    1654:	40 7f       	andi	r20, 0xF0	; 240
    1656:	43 2b       	or	r20, r19
    1658:	32 2f       	mov	r19, r18
    165a:	32 95       	swap	r19
    165c:	3f 70       	andi	r19, 0x0F	; 15
    165e:	33 70       	andi	r19, 0x03	; 3
    1660:	4c 93       	st	X, r20
    1662:	11 96       	adiw	r26, 0x01	; 1
    1664:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    1666:	df 01       	movw	r26, r30
    1668:	56 97       	sbiw	r26, 0x16	; 22
    166a:	22 95       	swap	r18
    166c:	26 95       	lsr	r18
    166e:	26 95       	lsr	r18
    1670:	23 70       	andi	r18, 0x03	; 3
    1672:	3d 81       	ldd	r19, Y+5	; 0x05
    1674:	43 2f       	mov	r20, r19
    1676:	44 0f       	add	r20, r20
    1678:	44 0f       	add	r20, r20
    167a:	24 2b       	or	r18, r20
    167c:	32 95       	swap	r19
    167e:	36 95       	lsr	r19
    1680:	36 95       	lsr	r19
    1682:	33 70       	andi	r19, 0x03	; 3
    1684:	2c 93       	st	X, r18
    1686:	11 96       	adiw	r26, 0x01	; 1
    1688:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    168a:	df 01       	movw	r26, r30
    168c:	54 97       	sbiw	r26, 0x14	; 20
    168e:	4e 81       	ldd	r20, Y+6	; 0x06
    1690:	2f 81       	ldd	r18, Y+7	; 0x07
    1692:	32 2f       	mov	r19, r18
    1694:	33 70       	andi	r19, 0x03	; 3
    1696:	4c 93       	st	X, r20
    1698:	11 96       	adiw	r26, 0x01	; 1
    169a:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    169c:	df 01       	movw	r26, r30
    169e:	52 97       	sbiw	r26, 0x12	; 18
    16a0:	32 2f       	mov	r19, r18
    16a2:	36 95       	lsr	r19
    16a4:	36 95       	lsr	r19
    16a6:	28 85       	ldd	r18, Y+8	; 0x08
    16a8:	42 2f       	mov	r20, r18
    16aa:	42 95       	swap	r20
    16ac:	44 0f       	add	r20, r20
    16ae:	44 0f       	add	r20, r20
    16b0:	40 7c       	andi	r20, 0xC0	; 192
    16b2:	43 2b       	or	r20, r19
    16b4:	32 2f       	mov	r19, r18
    16b6:	36 95       	lsr	r19
    16b8:	36 95       	lsr	r19
    16ba:	33 70       	andi	r19, 0x03	; 3
    16bc:	4c 93       	st	X, r20
    16be:	11 96       	adiw	r26, 0x01	; 1
    16c0:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    16c2:	df 01       	movw	r26, r30
    16c4:	50 97       	sbiw	r26, 0x10	; 16
    16c6:	32 2f       	mov	r19, r18
    16c8:	32 95       	swap	r19
    16ca:	3f 70       	andi	r19, 0x0F	; 15
    16cc:	29 85       	ldd	r18, Y+9	; 0x09
    16ce:	42 2f       	mov	r20, r18
    16d0:	42 95       	swap	r20
    16d2:	40 7f       	andi	r20, 0xF0	; 240
    16d4:	43 2b       	or	r20, r19
    16d6:	32 2f       	mov	r19, r18
    16d8:	32 95       	swap	r19
    16da:	3f 70       	andi	r19, 0x0F	; 15
    16dc:	33 70       	andi	r19, 0x03	; 3
    16de:	4c 93       	st	X, r20
    16e0:	11 96       	adiw	r26, 0x01	; 1
    16e2:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    16e4:	df 01       	movw	r26, r30
    16e6:	1e 97       	sbiw	r26, 0x0e	; 14
    16e8:	22 95       	swap	r18
    16ea:	26 95       	lsr	r18
    16ec:	26 95       	lsr	r18
    16ee:	23 70       	andi	r18, 0x03	; 3
    16f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    16f2:	43 2f       	mov	r20, r19
    16f4:	44 0f       	add	r20, r20
    16f6:	44 0f       	add	r20, r20
    16f8:	24 2b       	or	r18, r20
    16fa:	32 95       	swap	r19
    16fc:	36 95       	lsr	r19
    16fe:	36 95       	lsr	r19
    1700:	33 70       	andi	r19, 0x03	; 3
    1702:	2c 93       	st	X, r18
    1704:	11 96       	adiw	r26, 0x01	; 1
    1706:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    1708:	df 01       	movw	r26, r30
    170a:	1c 97       	sbiw	r26, 0x0c	; 12
    170c:	4b 85       	ldd	r20, Y+11	; 0x0b
    170e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1710:	32 2f       	mov	r19, r18
    1712:	33 70       	andi	r19, 0x03	; 3
    1714:	4c 93       	st	X, r20
    1716:	11 96       	adiw	r26, 0x01	; 1
    1718:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    171a:	df 01       	movw	r26, r30
    171c:	1a 97       	sbiw	r26, 0x0a	; 10
    171e:	32 2f       	mov	r19, r18
    1720:	36 95       	lsr	r19
    1722:	36 95       	lsr	r19
    1724:	2d 85       	ldd	r18, Y+13	; 0x0d
    1726:	42 2f       	mov	r20, r18
    1728:	42 95       	swap	r20
    172a:	44 0f       	add	r20, r20
    172c:	44 0f       	add	r20, r20
    172e:	40 7c       	andi	r20, 0xC0	; 192
    1730:	43 2b       	or	r20, r19
    1732:	32 2f       	mov	r19, r18
    1734:	36 95       	lsr	r19
    1736:	36 95       	lsr	r19
    1738:	33 70       	andi	r19, 0x03	; 3
    173a:	4c 93       	st	X, r20
    173c:	11 96       	adiw	r26, 0x01	; 1
    173e:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    1740:	df 01       	movw	r26, r30
    1742:	18 97       	sbiw	r26, 0x08	; 8
    1744:	32 2f       	mov	r19, r18
    1746:	32 95       	swap	r19
    1748:	3f 70       	andi	r19, 0x0F	; 15
    174a:	2e 85       	ldd	r18, Y+14	; 0x0e
    174c:	42 2f       	mov	r20, r18
    174e:	42 95       	swap	r20
    1750:	40 7f       	andi	r20, 0xF0	; 240
    1752:	43 2b       	or	r20, r19
    1754:	32 2f       	mov	r19, r18
    1756:	32 95       	swap	r19
    1758:	3f 70       	andi	r19, 0x0F	; 15
    175a:	33 70       	andi	r19, 0x03	; 3
    175c:	4c 93       	st	X, r20
    175e:	11 96       	adiw	r26, 0x01	; 1
    1760:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    1762:	df 01       	movw	r26, r30
    1764:	16 97       	sbiw	r26, 0x06	; 6
    1766:	22 95       	swap	r18
    1768:	26 95       	lsr	r18
    176a:	26 95       	lsr	r18
    176c:	23 70       	andi	r18, 0x03	; 3
    176e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1770:	43 2f       	mov	r20, r19
    1772:	44 0f       	add	r20, r20
    1774:	44 0f       	add	r20, r20
    1776:	24 2b       	or	r18, r20
    1778:	32 95       	swap	r19
    177a:	36 95       	lsr	r19
    177c:	36 95       	lsr	r19
    177e:	33 70       	andi	r19, 0x03	; 3
    1780:	2c 93       	st	X, r18
    1782:	11 96       	adiw	r26, 0x01	; 1
    1784:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    1786:	df 01       	movw	r26, r30
    1788:	14 97       	sbiw	r26, 0x04	; 4
    178a:	48 89       	ldd	r20, Y+16	; 0x10
    178c:	29 89       	ldd	r18, Y+17	; 0x11
    178e:	32 2f       	mov	r19, r18
    1790:	33 70       	andi	r19, 0x03	; 3
    1792:	4c 93       	st	X, r20
    1794:	11 96       	adiw	r26, 0x01	; 1
    1796:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    1798:	df 01       	movw	r26, r30
    179a:	12 97       	sbiw	r26, 0x02	; 2
    179c:	26 95       	lsr	r18
    179e:	26 95       	lsr	r18
    17a0:	38 2f       	mov	r19, r24
    17a2:	32 95       	swap	r19
    17a4:	33 0f       	add	r19, r19
    17a6:	33 0f       	add	r19, r19
    17a8:	30 7c       	andi	r19, 0xC0	; 192
    17aa:	23 2b       	or	r18, r19
    17ac:	86 95       	lsr	r24
    17ae:	86 95       	lsr	r24
    17b0:	83 70       	andi	r24, 0x03	; 3
    17b2:	2c 93       	st	X, r18
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    17b8:	92 95       	swap	r25
    17ba:	96 95       	lsr	r25
    17bc:	96 95       	lsr	r25
    17be:	93 70       	andi	r25, 0x03	; 3
    17c0:	8c 89       	ldd	r24, Y+20	; 0x14
    17c2:	28 2f       	mov	r18, r24
    17c4:	22 0f       	add	r18, r18
    17c6:	22 0f       	add	r18, r18
    17c8:	92 2b       	or	r25, r18
    17ca:	82 95       	swap	r24
    17cc:	86 95       	lsr	r24
    17ce:	86 95       	lsr	r24
    17d0:	83 70       	andi	r24, 0x03	; 3
    17d2:	90 93 e4 02 	sts	0x02E4, r25
    17d6:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    17d8:	2d 89       	ldd	r18, Y+21	; 0x15
    17da:	8e 89       	ldd	r24, Y+22	; 0x16
    17dc:	98 2f       	mov	r25, r24
    17de:	93 70       	andi	r25, 0x03	; 3
    17e0:	20 93 e6 02 	sts	0x02E6, r18
    17e4:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    17e6:	98 2f       	mov	r25, r24
    17e8:	96 95       	lsr	r25
    17ea:	96 95       	lsr	r25
    17ec:	8f 89       	ldd	r24, Y+23	; 0x17
    17ee:	28 2f       	mov	r18, r24
    17f0:	22 95       	swap	r18
    17f2:	22 0f       	add	r18, r18
    17f4:	22 0f       	add	r18, r18
    17f6:	20 7c       	andi	r18, 0xC0	; 192
    17f8:	29 2b       	or	r18, r25
    17fa:	98 2f       	mov	r25, r24
    17fc:	96 95       	lsr	r25
    17fe:	96 95       	lsr	r25
    1800:	93 70       	andi	r25, 0x03	; 3
    1802:	20 93 e8 02 	sts	0x02E8, r18
    1806:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    1808:	98 2f       	mov	r25, r24
    180a:	92 95       	swap	r25
    180c:	9f 70       	andi	r25, 0x0F	; 15
    180e:	88 8d       	ldd	r24, Y+24	; 0x18
    1810:	28 2f       	mov	r18, r24
    1812:	22 95       	swap	r18
    1814:	20 7f       	andi	r18, 0xF0	; 240
    1816:	29 2b       	or	r18, r25
    1818:	98 2f       	mov	r25, r24
    181a:	92 95       	swap	r25
    181c:	9f 70       	andi	r25, 0x0F	; 15
    181e:	93 70       	andi	r25, 0x03	; 3
    1820:	20 93 ea 02 	sts	0x02EA, r18
    1824:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    1826:	82 95       	swap	r24
    1828:	86 95       	lsr	r24
    182a:	86 95       	lsr	r24
    182c:	83 70       	andi	r24, 0x03	; 3
    182e:	99 8d       	ldd	r25, Y+25	; 0x19
    1830:	29 2f       	mov	r18, r25
    1832:	22 0f       	add	r18, r18
    1834:	22 0f       	add	r18, r18
    1836:	82 2b       	or	r24, r18
    1838:	92 95       	swap	r25
    183a:	96 95       	lsr	r25
    183c:	96 95       	lsr	r25
    183e:	93 70       	andi	r25, 0x03	; 3
    1840:	80 93 ec 02 	sts	0x02EC, r24
    1844:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    1846:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    184a:	98 2f       	mov	r25, r24
    184c:	93 70       	andi	r25, 0x03	; 3
    184e:	20 93 ee 02 	sts	0x02EE, r18
    1852:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    1854:	98 2f       	mov	r25, r24
    1856:	96 95       	lsr	r25
    1858:	96 95       	lsr	r25
    185a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    185c:	28 2f       	mov	r18, r24
    185e:	22 95       	swap	r18
    1860:	22 0f       	add	r18, r18
    1862:	22 0f       	add	r18, r18
    1864:	20 7c       	andi	r18, 0xC0	; 192
    1866:	29 2b       	or	r18, r25
    1868:	98 2f       	mov	r25, r24
    186a:	96 95       	lsr	r25
    186c:	96 95       	lsr	r25
    186e:	93 70       	andi	r25, 0x03	; 3
    1870:	20 93 f0 02 	sts	0x02F0, r18
    1874:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    1876:	98 2f       	mov	r25, r24
    1878:	92 95       	swap	r25
    187a:	9f 70       	andi	r25, 0x0F	; 15
    187c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    187e:	28 2f       	mov	r18, r24
    1880:	22 95       	swap	r18
    1882:	20 7f       	andi	r18, 0xF0	; 240
    1884:	29 2b       	or	r18, r25
    1886:	98 2f       	mov	r25, r24
    1888:	92 95       	swap	r25
    188a:	9f 70       	andi	r25, 0x0F	; 15
    188c:	93 70       	andi	r25, 0x03	; 3
    188e:	20 93 f2 02 	sts	0x02F2, r18
    1892:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    1894:	82 95       	swap	r24
    1896:	86 95       	lsr	r24
    1898:	86 95       	lsr	r24
    189a:	83 70       	andi	r24, 0x03	; 3
    189c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    189e:	29 2f       	mov	r18, r25
    18a0:	22 0f       	add	r18, r18
    18a2:	22 0f       	add	r18, r18
    18a4:	82 2b       	or	r24, r18
    18a6:	92 95       	swap	r25
    18a8:	96 95       	lsr	r25
    18aa:	96 95       	lsr	r25
    18ac:	93 70       	andi	r25, 0x03	; 3
    18ae:	80 93 f4 02 	sts	0x02F4, r24
    18b2:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    18b4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    18b6:	88 a1       	lds	r24, 0x48
    18b8:	98 2f       	mov	r25, r24
    18ba:	93 70       	andi	r25, 0x03	; 3
    18bc:	20 93 f6 02 	sts	0x02F6, r18
    18c0:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    18c2:	98 2f       	mov	r25, r24
    18c4:	96 95       	lsr	r25
    18c6:	96 95       	lsr	r25
    18c8:	89 a1       	lds	r24, 0x49
    18ca:	28 2f       	mov	r18, r24
    18cc:	22 95       	swap	r18
    18ce:	22 0f       	add	r18, r18
    18d0:	22 0f       	add	r18, r18
    18d2:	20 7c       	andi	r18, 0xC0	; 192
    18d4:	29 2b       	or	r18, r25
    18d6:	98 2f       	mov	r25, r24
    18d8:	96 95       	lsr	r25
    18da:	96 95       	lsr	r25
    18dc:	93 70       	andi	r25, 0x03	; 3
    18de:	20 93 f8 02 	sts	0x02F8, r18
    18e2:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    18e4:	98 2f       	mov	r25, r24
    18e6:	92 95       	swap	r25
    18e8:	9f 70       	andi	r25, 0x0F	; 15
    18ea:	8a a1       	lds	r24, 0x4a
    18ec:	28 2f       	mov	r18, r24
    18ee:	22 95       	swap	r18
    18f0:	20 7f       	andi	r18, 0xF0	; 240
    18f2:	29 2b       	or	r18, r25
    18f4:	98 2f       	mov	r25, r24
    18f6:	92 95       	swap	r25
    18f8:	9f 70       	andi	r25, 0x0F	; 15
    18fa:	93 70       	andi	r25, 0x03	; 3
    18fc:	20 93 fa 02 	sts	0x02FA, r18
    1900:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1902:	82 95       	swap	r24
    1904:	86 95       	lsr	r24
    1906:	86 95       	lsr	r24
    1908:	83 70       	andi	r24, 0x03	; 3
    190a:	9b a1       	lds	r25, 0x4b
    190c:	29 2f       	mov	r18, r25
    190e:	22 0f       	add	r18, r18
    1910:	22 0f       	add	r18, r18
    1912:	82 2b       	or	r24, r18
    1914:	92 95       	swap	r25
    1916:	96 95       	lsr	r25
    1918:	96 95       	lsr	r25
    191a:	93 70       	andi	r25, 0x03	; 3
    191c:	80 93 fc 02 	sts	0x02FC, r24
    1920:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1922:	2c a1       	lds	r18, 0x4c
    1924:	8d a1       	lds	r24, 0x4d
    1926:	98 2f       	mov	r25, r24
    1928:	93 70       	andi	r25, 0x03	; 3
    192a:	20 93 fe 02 	sts	0x02FE, r18
    192e:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1930:	98 2f       	mov	r25, r24
    1932:	96 95       	lsr	r25
    1934:	96 95       	lsr	r25
    1936:	8e a1       	lds	r24, 0x4e
    1938:	28 2f       	mov	r18, r24
    193a:	22 95       	swap	r18
    193c:	22 0f       	add	r18, r18
    193e:	22 0f       	add	r18, r18
    1940:	20 7c       	andi	r18, 0xC0	; 192
    1942:	29 2b       	or	r18, r25
    1944:	86 95       	lsr	r24
    1946:	86 95       	lsr	r24
    1948:	98 2f       	mov	r25, r24
    194a:	93 70       	andi	r25, 0x03	; 3
    194c:	20 93 00 03 	sts	0x0300, r18
    1950:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    1952:	7f a1       	lds	r23, 0x4f
    1954:	70 93 02 03 	sts	0x0302, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    1958:	68 a5       	lds	r22, 0x68
    195a:	60 93 03 03 	sts	0x0303, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    195e:	89 a5       	lds	r24, 0x69
    1960:	80 93 04 03 	sts	0x0304, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    1964:	9a a5       	lds	r25, 0x6a
    1966:	90 93 05 03 	sts	0x0305, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    196a:	1b a5       	lds	r17, 0x6b
    196c:	10 93 06 03 	sts	0x0306, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1970:	de 01       	movw	r26, r28
    1972:	9c 96       	adiw	r26, 0x2c	; 44
    1974:	ef ef       	ldi	r30, 0xFF	; 255
    1976:	f1 e0       	ldi	r31, 0x01	; 1
    1978:	28 e0       	ldi	r18, 0x08	; 8
    197a:	01 90       	ld	r0, Z+
    197c:	0d 92       	st	X+, r0
    197e:	21 50       	subi	r18, 0x01	; 1
    1980:	e1 f7       	brne	.-8      	; 0x197a <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    1982:	e9 2f       	mov	r30, r25
    1984:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	9f 01       	movw	r18, r30
    198a:	22 0f       	add	r18, r18
    198c:	33 1f       	adc	r19, r19
    198e:	22 0f       	add	r18, r18
    1990:	33 1f       	adc	r19, r19
    1992:	a9 01       	movw	r20, r18
    1994:	44 0f       	add	r20, r20
    1996:	55 1f       	adc	r21, r21
    1998:	44 0f       	add	r20, r20
    199a:	55 1f       	adc	r21, r21
    199c:	44 0f       	add	r20, r20
    199e:	55 1f       	adc	r21, r21
    19a0:	42 1b       	sub	r20, r18
    19a2:	53 0b       	sbc	r21, r19
    19a4:	4e 0f       	add	r20, r30
    19a6:	5f 1f       	adc	r21, r31
    19a8:	55 95       	asr	r21
    19aa:	47 95       	ror	r20
    19ac:	55 95       	asr	r21
    19ae:	47 95       	ror	r20
    19b0:	55 95       	asr	r21
    19b2:	47 95       	ror	r20
    19b4:	55 95       	asr	r21
    19b6:	47 95       	ror	r20
    19b8:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    19ba:	fe 01       	movw	r30, r28
    19bc:	e4 0f       	add	r30, r20
    19be:	f1 1d       	adc	r31, r1
    19c0:	24 a5       	lds	r18, 0x64
    19c2:	20 93 0c 03 	sts	0x030C, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    19c6:	de 01       	movw	r26, r28
    19c8:	d4 96       	adiw	r26, 0x34	; 52
    19ca:	e7 e0       	ldi	r30, 0x07	; 7
    19cc:	f2 e0       	ldi	r31, 0x02	; 2
    19ce:	28 e0       	ldi	r18, 0x08	; 8
    19d0:	01 90       	ld	r0, Z+
    19d2:	0d 92       	st	X+, r0
    19d4:	21 50       	subi	r18, 0x01	; 1
    19d6:	e1 f7       	brne	.-8      	; 0x19d0 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    19d8:	29 2f       	mov	r18, r25
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	20 7e       	andi	r18, 0xE0	; 224
    19de:	30 70       	andi	r19, 0x00	; 0
    19e0:	35 95       	asr	r19
    19e2:	27 95       	ror	r18
    19e4:	35 95       	asr	r19
    19e6:	27 95       	ror	r18
    19e8:	35 95       	asr	r19
    19ea:	27 95       	ror	r18
    19ec:	83 70       	andi	r24, 0x03	; 3
    19ee:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    19f0:	42 2f       	mov	r20, r18
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	ca 01       	movw	r24, r20
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	9c 01       	movw	r18, r24
    1a00:	22 0f       	add	r18, r18
    1a02:	33 1f       	adc	r19, r19
    1a04:	22 0f       	add	r18, r18
    1a06:	33 1f       	adc	r19, r19
    1a08:	22 0f       	add	r18, r18
    1a0a:	33 1f       	adc	r19, r19
    1a0c:	28 1b       	sub	r18, r24
    1a0e:	39 0b       	sbc	r19, r25
    1a10:	42 0f       	add	r20, r18
    1a12:	53 1f       	adc	r21, r19
    1a14:	ca 01       	movw	r24, r20
    1a16:	95 95       	asr	r25
    1a18:	87 95       	ror	r24
    1a1a:	95 95       	asr	r25
    1a1c:	87 95       	ror	r24
    1a1e:	95 95       	asr	r25
    1a20:	87 95       	ror	r24
    1a22:	95 95       	asr	r25
    1a24:	87 95       	ror	r24
    1a26:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e8 0f       	add	r30, r24
    1a2c:	f1 1d       	adc	r31, r1
    1a2e:	84 a9       	sts	0x44, r24
    1a30:	80 93 0d 03 	sts	0x030D, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    1a34:	de 01       	movw	r26, r28
    1a36:	dc 96       	adiw	r26, 0x3c	; 60
    1a38:	ef e0       	ldi	r30, 0x0F	; 15
    1a3a:	f2 e0       	ldi	r31, 0x02	; 2
    1a3c:	88 e0       	ldi	r24, 0x08	; 8
    1a3e:	01 90       	ld	r0, Z+
    1a40:	0d 92       	st	X+, r0
    1a42:	81 50       	subi	r24, 0x01	; 1
    1a44:	e1 f7       	brne	.-8      	; 0x1a3e <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    1a46:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    1a48:	46 2f       	mov	r20, r22
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	ca 01       	movw	r24, r20
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	9c 01       	movw	r18, r24
    1a58:	22 0f       	add	r18, r18
    1a5a:	33 1f       	adc	r19, r19
    1a5c:	22 0f       	add	r18, r18
    1a5e:	33 1f       	adc	r19, r19
    1a60:	22 0f       	add	r18, r18
    1a62:	33 1f       	adc	r19, r19
    1a64:	28 1b       	sub	r18, r24
    1a66:	39 0b       	sbc	r19, r25
    1a68:	42 0f       	add	r20, r18
    1a6a:	53 1f       	adc	r21, r19
    1a6c:	ca 01       	movw	r24, r20
    1a6e:	95 95       	asr	r25
    1a70:	87 95       	ror	r24
    1a72:	95 95       	asr	r25
    1a74:	87 95       	ror	r24
    1a76:	95 95       	asr	r25
    1a78:	87 95       	ror	r24
    1a7a:	95 95       	asr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1a80:	fe 01       	movw	r30, r28
    1a82:	e8 0f       	add	r30, r24
    1a84:	f1 1d       	adc	r31, r1
    1a86:	84 ad       	sts	0x64, r24
    1a88:	80 93 0e 03 	sts	0x030E, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1a8c:	21 2f       	mov	r18, r17
    1a8e:	26 95       	lsr	r18
    1a90:	27 95       	ror	r18
    1a92:	22 27       	eor	r18, r18
    1a94:	27 95       	ror	r18
    1a96:	81 2f       	mov	r24, r17
    1a98:	81 70       	andi	r24, 0x01	; 1
    1a9a:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1a9c:	81 2f       	mov	r24, r17
    1a9e:	86 95       	lsr	r24
    1aa0:	86 95       	lsr	r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	81 70       	andi	r24, 0x01	; 1
    1aa6:	90 70       	andi	r25, 0x00	; 0
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1ab0:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1ab2:	81 2f       	mov	r24, r17
    1ab4:	86 95       	lsr	r24
    1ab6:	86 95       	lsr	r24
    1ab8:	86 95       	lsr	r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	81 70       	andi	r24, 0x01	; 1
    1abe:	90 70       	andi	r25, 0x00	; 0
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1ac4:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1ac6:	81 2f       	mov	r24, r17
    1ac8:	82 95       	swap	r24
    1aca:	8f 70       	andi	r24, 0x0F	; 15
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	81 70       	andi	r24, 0x01	; 1
    1ad0:	90 70       	andi	r25, 0x00	; 0
    1ad2:	82 95       	swap	r24
    1ad4:	92 95       	swap	r25
    1ad6:	90 7f       	andi	r25, 0xF0	; 240
    1ad8:	98 27       	eor	r25, r24
    1ada:	80 7f       	andi	r24, 0xF0	; 240
    1adc:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1ade:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    1ae0:	81 2f       	mov	r24, r17
    1ae2:	82 95       	swap	r24
    1ae4:	86 95       	lsr	r24
    1ae6:	87 70       	andi	r24, 0x07	; 7
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	81 70       	andi	r24, 0x01	; 1
    1aec:	90 70       	andi	r25, 0x00	; 0
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	82 95       	swap	r24
    1af4:	92 95       	swap	r25
    1af6:	90 7f       	andi	r25, 0xF0	; 240
    1af8:	98 27       	eor	r25, r24
    1afa:	80 7f       	andi	r24, 0xF0	; 240
    1afc:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1afe:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1b00:	81 2f       	mov	r24, r17
    1b02:	82 95       	swap	r24
    1b04:	86 95       	lsr	r24
    1b06:	86 95       	lsr	r24
    1b08:	83 70       	andi	r24, 0x03	; 3
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	81 70       	andi	r24, 0x01	; 1
    1b0e:	90 70       	andi	r25, 0x00	; 0
    1b10:	00 24       	eor	r0, r0
    1b12:	96 95       	lsr	r25
    1b14:	87 95       	ror	r24
    1b16:	07 94       	ror	r0
    1b18:	96 95       	lsr	r25
    1b1a:	87 95       	ror	r24
    1b1c:	07 94       	ror	r0
    1b1e:	98 2f       	mov	r25, r24
    1b20:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1b22:	82 2b       	or	r24, r18
    1b24:	80 93 82 03 	sts	0x0382, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    1b28:	87 2f       	mov	r24, r23
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	81 70       	andi	r24, 0x01	; 1
    1b2e:	90 70       	andi	r25, 0x00	; 0
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1b3c:	90 91 84 03 	lds	r25, 0x0384
    1b40:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1b42:	89 2b       	or	r24, r25
    1b44:	11 1f       	adc	r17, r17
    1b46:	11 27       	eor	r17, r17
    1b48:	11 1f       	adc	r17, r17
    1b4a:	11 0f       	add	r17, r17
    1b4c:	11 0f       	add	r17, r17
    1b4e:	81 2b       	or	r24, r17
    1b50:	80 93 84 03 	sts	0x0384, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1b54:	0e 94 c0 08 	call	0x1180	; 0x1180 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    1b58:	80 91 84 03 	lds	r24, 0x0384
    1b5c:	8f 77       	andi	r24, 0x7F	; 127
    1b5e:	80 93 84 03 	sts	0x0384, r24
	
	current_patch.mode = MEMORY;
    1b62:	10 92 0b 03 	sts	0x030B, r1
	
}
    1b66:	cd 5b       	subi	r28, 0xBD	; 189
    1b68:	df 4f       	sbci	r29, 0xFF	; 255
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	08 95       	ret

00001b7c <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1b7c:	90 91 0c 03 	lds	r25, 0x030C
	if (vco == VCO2) n = octave_index.vco2;
    1b80:	60 3f       	cpi	r22, 0xF0	; 240
    1b82:	11 f4       	brne	.+4      	; 0x1b88 <transpose_note+0xc>
    1b84:	90 91 0d 03 	lds	r25, 0x030D

	note = (n*12) + note; //calculate MIDI note after octave addition
    1b88:	29 2f       	mov	r18, r25
    1b8a:	22 0f       	add	r18, r18
    1b8c:	92 0f       	add	r25, r18
    1b8e:	99 0f       	add	r25, r25
    1b90:	99 0f       	add	r25, r25
    1b92:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1b94:	89 38       	cpi	r24, 0x89	; 137
    1b96:	08 f0       	brcs	.+2      	; 0x1b9a <transpose_note+0x1e>
    1b98:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1b9a:	08 95       	ret

00001b9c <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1b9c:	80 91 82 03 	lds	r24, 0x0382
    1ba0:	98 2f       	mov	r25, r24
    1ba2:	96 95       	lsr	r25
    1ba4:	96 95       	lsr	r25
    1ba6:	96 95       	lsr	r25
    1ba8:	90 ff       	sbrs	r25, 0
    1baa:	0e c0       	rjmp	.+28     	; 0x1bc8 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1bac:	90 91 0c 03 	lds	r25, 0x030C
    1bb0:	9f 5f       	subi	r25, 0xFF	; 255
    1bb2:	90 93 0c 03 	sts	0x030C, r25
    1bb6:	95 30       	cpi	r25, 0x05	; 5
    1bb8:	19 f4       	brne	.+6      	; 0x1bc0 <update_octave_range+0x24>
    1bba:	94 e0       	ldi	r25, 0x04	; 4
    1bbc:	90 93 0c 03 	sts	0x030C, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1bc0:	98 e0       	ldi	r25, 0x08	; 8
    1bc2:	89 27       	eor	r24, r25
    1bc4:	80 93 82 03 	sts	0x0382, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1bc8:	80 91 83 03 	lds	r24, 0x0383
    1bcc:	98 2f       	mov	r25, r24
    1bce:	96 95       	lsr	r25
    1bd0:	96 95       	lsr	r25
    1bd2:	96 95       	lsr	r25
    1bd4:	90 ff       	sbrs	r25, 0
    1bd6:	0b c0       	rjmp	.+22     	; 0x1bee <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1bd8:	90 91 0c 03 	lds	r25, 0x030C
    1bdc:	99 23       	and	r25, r25
    1bde:	19 f0       	breq	.+6      	; 0x1be6 <update_octave_range+0x4a>
    1be0:	91 50       	subi	r25, 0x01	; 1
    1be2:	90 93 0c 03 	sts	0x030C, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1be6:	98 e0       	ldi	r25, 0x08	; 8
    1be8:	89 27       	eor	r24, r25
    1bea:	80 93 83 03 	sts	0x0383, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1bee:	80 91 0c 03 	lds	r24, 0x030C
    1bf2:	e1 e2       	ldi	r30, 0x21	; 33
    1bf4:	f2 e0       	ldi	r31, 0x02	; 2
    1bf6:	e8 0f       	add	r30, r24
    1bf8:	f1 1d       	adc	r31, r1
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	00 80       	ld	r0, Z
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <update_octave_range+0x6a>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <update_octave_range+0x66>
    1c0a:	58 2f       	mov	r21, r24
    1c0c:	80 93 05 03 	sts	0x0305, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1c10:	90 91 83 03 	lds	r25, 0x0383
    1c14:	29 2f       	mov	r18, r25
    1c16:	26 95       	lsr	r18
    1c18:	26 95       	lsr	r18
    1c1a:	20 ff       	sbrs	r18, 0
    1c1c:	0e c0       	rjmp	.+28     	; 0x1c3a <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1c1e:	80 91 0d 03 	lds	r24, 0x030D
    1c22:	8f 5f       	subi	r24, 0xFF	; 255
    1c24:	80 93 0d 03 	sts	0x030D, r24
    1c28:	85 30       	cpi	r24, 0x05	; 5
    1c2a:	19 f4       	brne	.+6      	; 0x1c32 <update_octave_range+0x96>
    1c2c:	84 e0       	ldi	r24, 0x04	; 4
    1c2e:	80 93 0d 03 	sts	0x030D, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1c32:	84 e0       	ldi	r24, 0x04	; 4
    1c34:	98 27       	eor	r25, r24
    1c36:	90 93 83 03 	sts	0x0383, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1c3a:	90 91 83 03 	lds	r25, 0x0383
    1c3e:	29 2f       	mov	r18, r25
    1c40:	26 95       	lsr	r18
    1c42:	20 ff       	sbrs	r18, 0
    1c44:	0b c0       	rjmp	.+22     	; 0x1c5c <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1c46:	80 91 0d 03 	lds	r24, 0x030D
    1c4a:	88 23       	and	r24, r24
    1c4c:	19 f0       	breq	.+6      	; 0x1c54 <update_octave_range+0xb8>
    1c4e:	81 50       	subi	r24, 0x01	; 1
    1c50:	80 93 0d 03 	sts	0x030D, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	98 27       	eor	r25, r24
    1c58:	90 93 83 03 	sts	0x0383, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1c5c:	40 91 04 03 	lds	r20, 0x0304
    1c60:	4c 7f       	andi	r20, 0xFC	; 252
    1c62:	40 93 04 03 	sts	0x0304, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1c66:	90 91 0d 03 	lds	r25, 0x030D
    1c6a:	93 30       	cpi	r25, 0x03	; 3
    1c6c:	88 f0       	brcs	.+34     	; 0x1c90 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1c6e:	ec e1       	ldi	r30, 0x1C	; 28
    1c70:	f2 e0       	ldi	r31, 0x02	; 2
    1c72:	e9 0f       	add	r30, r25
    1c74:	f1 1d       	adc	r31, r1
    1c76:	21 e0       	ldi	r18, 0x01	; 1
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	c9 01       	movw	r24, r18
    1c7c:	00 80       	ld	r0, Z
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <update_octave_range+0xe8>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	0a 94       	dec	r0
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <update_octave_range+0xe4>
    1c88:	84 2b       	or	r24, r20
    1c8a:	80 93 04 03 	sts	0x0304, r24
    1c8e:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1c90:	ec e1       	ldi	r30, 0x1C	; 28
    1c92:	f2 e0       	ldi	r31, 0x02	; 2
    1c94:	e9 0f       	add	r30, r25
    1c96:	f1 1d       	adc	r31, r1
    1c98:	21 e0       	ldi	r18, 0x01	; 1
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	c9 01       	movw	r24, r18
    1c9e:	00 80       	ld	r0, Z
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <update_octave_range+0x10a>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <update_octave_range+0x106>
    1caa:	85 2b       	or	r24, r21
    1cac:	80 93 05 03 	sts	0x0305, r24
    1cb0:	08 95       	ret

00001cb2 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1cb2:	80 91 83 03 	lds	r24, 0x0383
    1cb6:	88 23       	and	r24, r24
    1cb8:	64 f4       	brge	.+24     	; 0x1cd2 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1cba:	80 58       	subi	r24, 0x80	; 128
    1cbc:	80 93 83 03 	sts	0x0383, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1cc0:	80 91 0e 03 	lds	r24, 0x030E
    1cc4:	8f 5f       	subi	r24, 0xFF	; 255
    1cc6:	80 93 0e 03 	sts	0x030E, r24
    1cca:	85 30       	cpi	r24, 0x05	; 5
    1ccc:	11 f4       	brne	.+4      	; 0x1cd2 <update_lfo_shape+0x20>
    1cce:	10 92 0e 03 	sts	0x030E, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1cd2:	e0 91 0e 03 	lds	r30, 0x030E
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	ea 5d       	subi	r30, 0xDA	; 218
    1cde:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	01 80       	ldd	r0, Z+1	; 0x01
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <update_lfo_shape+0x3a>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1cf0:	90 91 03 03 	lds	r25, 0x0303
    1cf4:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1cf6:	89 2b       	or	r24, r25
    1cf8:	80 93 03 03 	sts	0x0303, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1cfc:	80 81       	ld	r24, Z
    1cfe:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1d00:	ed ed       	ldi	r30, 0xDD	; 221
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	80 62       	ori	r24, 0x20	; 32
    1d08:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8f 7d       	andi	r24, 0xDF	; 223
    1d0e:	80 83       	st	Z, r24
	
}		
    1d10:	08 95       	ret

00001d12 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1d12:	80 91 83 03 	lds	r24, 0x0383
    1d16:	80 ff       	sbrs	r24, 0
    1d18:	0f c0       	rjmp	.+30     	; 0x1d38 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	89 27       	eor	r24, r25
    1d1e:	80 93 83 03 	sts	0x0383, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1d22:	80 91 0f 03 	lds	r24, 0x030F
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	80 93 0f 03 	sts	0x030F, r24
    1d2c:	85 30       	cpi	r24, 0x05	; 5
    1d2e:	11 f4       	brne	.+4      	; 0x1d34 <update_lfo_sync+0x22>
    1d30:	10 92 0f 03 	sts	0x030F, r1
		lfo_clock.ppqn_counter = 0; //reset counter
    1d34:	10 92 dc 03 	sts	0x03DC, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1d38:	60 91 03 03 	lds	r22, 0x0303
    1d3c:	60 7f       	andi	r22, 0xF0	; 240
    1d3e:	60 93 03 03 	sts	0x0303, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1d42:	20 91 0f 03 	lds	r18, 0x030F
    1d46:	22 23       	and	r18, r18
    1d48:	71 f0       	breq	.+28     	; 0x1d66 <update_lfo_sync+0x54>
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	21 50       	subi	r18, 0x01	; 1
    1d4e:	30 40       	sbci	r19, 0x00	; 0
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	ca 01       	movw	r24, r20
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <update_lfo_sync+0x4a>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	2a 95       	dec	r18
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <update_lfo_sync+0x46>
    1d60:	86 2b       	or	r24, r22
    1d62:	80 93 03 03 	sts	0x0303, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1d66:	80 91 03 03 	lds	r24, 0x0303
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	8f 70       	andi	r24, 0x0F	; 15
    1d6e:	90 70       	andi	r25, 0x00	; 0
    1d70:	82 30       	cpi	r24, 0x02	; 2
    1d72:	91 05       	cpc	r25, r1
    1d74:	89 f0       	breq	.+34     	; 0x1d98 <update_lfo_sync+0x86>
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	91 05       	cpc	r25, r1
    1d7a:	24 f4       	brge	.+8      	; 0x1d84 <update_lfo_sync+0x72>
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	91 05       	cpc	r25, r1
    1d80:	b9 f4       	brne	.+46     	; 0x1db0 <update_lfo_sync+0x9e>
    1d82:	07 c0       	rjmp	.+14     	; 0x1d92 <update_lfo_sync+0x80>
    1d84:	84 30       	cpi	r24, 0x04	; 4
    1d86:	91 05       	cpc	r25, r1
    1d88:	59 f0       	breq	.+22     	; 0x1da0 <update_lfo_sync+0x8e>
    1d8a:	88 30       	cpi	r24, 0x08	; 8
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	81 f4       	brne	.+32     	; 0x1db0 <update_lfo_sync+0x9e>
    1d90:	0b c0       	rjmp	.+22     	; 0x1da8 <update_lfo_sync+0x96>
		
		case 0b0001:
			lfo_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1d92:	10 92 db 03 	sts	0x03DB, r1
			
			break;
    1d96:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			lfo_clock.divider = 24; //1:4
    1d98:	88 e1       	ldi	r24, 0x18	; 24
    1d9a:	80 93 db 03 	sts	0x03DB, r24
			break;
    1d9e:	08 95       	ret
			
		case 0b0100:
			lfo_clock.divider = 12; //1:8
    1da0:	8c e0       	ldi	r24, 0x0C	; 12
    1da2:	80 93 db 03 	sts	0x03DB, r24
			break;
    1da6:	08 95       	ret
			
		case 0b1000:
			lfo_clock.divider = 6; //1:16	 		
    1da8:	86 e0       	ldi	r24, 0x06	; 6
    1daa:	80 93 db 03 	sts	0x03DB, r24
			break;
    1dae:	08 95       	ret
		
		default:
			lfo_clock.divider = 0; //need to turn midi sync off here. How?
    1db0:	10 92 db 03 	sts	0x03DB, r1
    1db4:	08 95       	ret

00001db6 <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1db6:	80 91 83 03 	lds	r24, 0x0383
    1dba:	98 2f       	mov	r25, r24
    1dbc:	92 95       	swap	r25
    1dbe:	96 95       	lsr	r25
    1dc0:	96 95       	lsr	r25
    1dc2:	93 70       	andi	r25, 0x03	; 3
    1dc4:	90 ff       	sbrs	r25, 0
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <update_arp_sync+0x3a>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1dc8:	90 e4       	ldi	r25, 0x40	; 64
    1dca:	89 27       	eor	r24, r25
    1dcc:	80 93 83 03 	sts	0x0383, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1dd0:	80 91 10 03 	lds	r24, 0x0310
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	80 93 10 03 	sts	0x0310, r24
    1dda:	85 30       	cpi	r24, 0x05	; 5
    1ddc:	11 f4       	brne	.+4      	; 0x1de2 <update_arp_sync+0x2c>
    1dde:	10 92 10 03 	sts	0x0310, r1
		//if (arp.clock_source == MIDI_CLOCK) arp.ppqn_counter = 0;//arp.ppqn_counter >> 1; //need to take into account current ppqn count and and new divider value.
		arp.ppqn_counter = arp.ppqn_counter >> 1;//0; //try this at least to get rid of weird ppqn counter overflow that occurs when changing sync modes. Maybe above line doesn't execute because arp.clock_source isn't set correctly?
    1de2:	80 91 8e 03 	lds	r24, 0x038E
    1de6:	86 95       	lsr	r24
    1de8:	80 93 8e 03 	sts	0x038E, r24
		//YES. No clock hanging when changing sync modes. But why isn't arp.clock_source == MIDI_CLOCK true????
		//OK, now need to modify this to 
		system_clock.ppqn_counter = 0;	//same applies to system clock ppqn counter
    1dec:	10 92 d6 03 	sts	0x03D6, r1
		
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1df0:	60 91 04 03 	lds	r22, 0x0304
    1df4:	63 7c       	andi	r22, 0xC3	; 195
    1df6:	60 93 04 03 	sts	0x0304, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1dfa:	20 91 10 03 	lds	r18, 0x0310
    1dfe:	22 23       	and	r18, r18
    1e00:	71 f0       	breq	.+28     	; 0x1e1e <update_arp_sync+0x68>
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	2f 5f       	subi	r18, 0xFF	; 255
    1e06:	3f 4f       	sbci	r19, 0xFF	; 255
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	ca 01       	movw	r24, r20
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <update_arp_sync+0x5e>
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	2a 95       	dec	r18
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <update_arp_sync+0x5a>
    1e18:	86 2b       	or	r24, r22
    1e1a:	80 93 04 03 	sts	0x0304, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1e1e:	80 91 04 03 	lds	r24, 0x0304
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	8c 73       	andi	r24, 0x3C	; 60
    1e26:	90 70       	andi	r25, 0x00	; 0
    1e28:	88 30       	cpi	r24, 0x08	; 8
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	a1 f0       	breq	.+40     	; 0x1e56 <update_arp_sync+0xa0>
    1e2e:	89 30       	cpi	r24, 0x09	; 9
    1e30:	91 05       	cpc	r25, r1
    1e32:	24 f4       	brge	.+8      	; 0x1e3c <update_arp_sync+0x86>
    1e34:	84 30       	cpi	r24, 0x04	; 4
    1e36:	91 05       	cpc	r25, r1
    1e38:	01 f5       	brne	.+64     	; 0x1e7a <update_arp_sync+0xc4>
    1e3a:	07 c0       	rjmp	.+14     	; 0x1e4a <update_arp_sync+0x94>
    1e3c:	80 31       	cpi	r24, 0x10	; 16
    1e3e:	91 05       	cpc	r25, r1
    1e40:	81 f0       	breq	.+32     	; 0x1e62 <update_arp_sync+0xac>
    1e42:	80 32       	cpi	r24, 0x20	; 32
    1e44:	91 05       	cpc	r25, r1
    1e46:	c9 f4       	brne	.+50     	; 0x1e7a <update_arp_sync+0xc4>
    1e48:	12 c0       	rjmp	.+36     	; 0x1e6e <update_arp_sync+0xb8>
			
		case 0b00000100:
			system_clock.divider = arp.divider = 48; //1:2
    1e4a:	80 e3       	ldi	r24, 0x30	; 48
    1e4c:	80 93 8f 03 	sts	0x038F, r24
    1e50:	80 93 d5 03 	sts	0x03D5, r24
			break;
    1e54:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = arp.divider = 24; //1:4
    1e56:	88 e1       	ldi	r24, 0x18	; 24
    1e58:	80 93 8f 03 	sts	0x038F, r24
    1e5c:	80 93 d5 03 	sts	0x03D5, r24
			
			break;
    1e60:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = arp.divider = 12; //1:8
    1e62:	8c e0       	ldi	r24, 0x0C	; 12
    1e64:	80 93 8f 03 	sts	0x038F, r24
    1e68:	80 93 d5 03 	sts	0x03D5, r24
			break;
    1e6c:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = arp.divider = 6; //1:16	
    1e6e:	86 e0       	ldi	r24, 0x06	; 6
    1e70:	80 93 8f 03 	sts	0x038F, r24
    1e74:	80 93 d5 03 	sts	0x03D5, r24
			break;
    1e78:	08 95       	ret
			
		default:
			system_clock.divider = arp.divider = 3; //1:32 - this is a hack - no LEDs lighted
    1e7a:	83 e0       	ldi	r24, 0x03	; 3
    1e7c:	80 93 8f 03 	sts	0x038F, r24
    1e80:	80 93 d5 03 	sts	0x03D5, r24
    1e84:	08 95       	ret

00001e86 <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1e86:	80 91 83 03 	lds	r24, 0x0383
    1e8a:	80 31       	cpi	r24, 0x10	; 16
    1e8c:	69 f4       	brne	.+26     	; 0x1ea8 <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1e8e:	10 92 83 03 	sts	0x0383, r1
		
		if (++arp_range == 4) arp_range = 0;
    1e92:	80 91 11 03 	lds	r24, 0x0311
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	80 93 11 03 	sts	0x0311, r24
    1e9c:	84 30       	cpi	r24, 0x04	; 4
    1e9e:	11 f4       	brne	.+4      	; 0x1ea4 <update_arp_range+0x1e>
    1ea0:	10 92 11 03 	sts	0x0311, r1
		arp.step_position = 0; //reset step position if range changes
    1ea4:	10 92 8a 03 	sts	0x038A, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1ea8:	80 91 02 03 	lds	r24, 0x0302
    1eac:	8d 7f       	andi	r24, 0xFD	; 253
    1eae:	80 93 02 03 	sts	0x0302, r24
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1eb2:	80 91 04 03 	lds	r24, 0x0304
    1eb6:	8f 73       	andi	r24, 0x3F	; 63
    1eb8:	80 93 04 03 	sts	0x0304, r24
	
	arp.range = arp_range;
    1ebc:	80 91 11 03 	lds	r24, 0x0311
    1ec0:	80 93 88 03 	sts	0x0388, r24
	
	update_arp_sequence(); //update sequence with new settings
    1ec4:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1ec8:	80 91 11 03 	lds	r24, 0x0311
    1ecc:	82 30       	cpi	r24, 0x02	; 2
    1ece:	51 f0       	breq	.+20     	; 0x1ee4 <update_arp_range+0x5e>
    1ed0:	83 30       	cpi	r24, 0x03	; 3
    1ed2:	71 f0       	breq	.+28     	; 0x1ef0 <update_arp_range+0x6a>
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	89 f4       	brne	.+34     	; 0x1efa <update_arp_range+0x74>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1ed8:	80 91 02 03 	lds	r24, 0x0302
    1edc:	82 60       	ori	r24, 0x02	; 2
    1ede:	80 93 02 03 	sts	0x0302, r24
			break;
    1ee2:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1ee4:	80 91 04 03 	lds	r24, 0x0304
    1ee8:	80 64       	ori	r24, 0x40	; 64
    1eea:	80 93 04 03 	sts	0x0304, r24
			break;
    1eee:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1ef0:	80 91 04 03 	lds	r24, 0x0304
    1ef4:	80 68       	ori	r24, 0x80	; 128
    1ef6:	80 93 04 03 	sts	0x0304, r24
    1efa:	08 95       	ret

00001efc <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1efc:	80 91 83 03 	lds	r24, 0x0383
    1f00:	98 2f       	mov	r25, r24
    1f02:	92 95       	swap	r25
    1f04:	96 95       	lsr	r25
    1f06:	97 70       	andi	r25, 0x07	; 7
    1f08:	90 ff       	sbrs	r25, 0
    1f0a:	0d c0       	rjmp	.+26     	; 0x1f26 <update_arp_mode+0x2a>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1f0c:	90 e2       	ldi	r25, 0x20	; 32
    1f0e:	89 27       	eor	r24, r25
    1f10:	80 93 83 03 	sts	0x0383, r24
		if (++arp_mode == 5) arp_mode = 0;
    1f14:	80 91 12 03 	lds	r24, 0x0312
    1f18:	8f 5f       	subi	r24, 0xFF	; 255
    1f1a:	80 93 12 03 	sts	0x0312, r24
    1f1e:	85 30       	cpi	r24, 0x05	; 5
    1f20:	11 f4       	brne	.+4      	; 0x1f26 <update_arp_mode+0x2a>
    1f22:	10 92 12 03 	sts	0x0312, r1
		
	}

	//if (arp.clock_source != MIDI_CLOCK) arp.clock_source = INTERNAL_CLOCK;	

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1f26:	90 91 02 03 	lds	r25, 0x0302
    1f2a:	93 7c       	andi	r25, 0xC3	; 195
    1f2c:	90 93 02 03 	sts	0x0302, r25
	
	switch(arp_mode) {
    1f30:	80 91 12 03 	lds	r24, 0x0312
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	79 f0       	breq	.+30     	; 0x1f56 <update_arp_mode+0x5a>
    1f38:	81 30       	cpi	r24, 0x01	; 1
    1f3a:	28 f0       	brcs	.+10     	; 0x1f46 <update_arp_mode+0x4a>
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	91 f0       	breq	.+36     	; 0x1f64 <update_arp_mode+0x68>
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	f1 f4       	brne	.+60     	; 0x1f80 <update_arp_mode+0x84>
    1f44:	16 c0       	rjmp	.+44     	; 0x1f72 <update_arp_mode+0x76>
		
		case 0:
		
			//turn arp off
			arp.mode = OFF;
    1f46:	10 92 94 03 	sts	0x0394, r1
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    1f4a:	80 91 b4 02 	lds	r24, 0x02B4
    1f4e:	88 23       	and	r24, r24
    1f50:	e9 f4       	brne	.+58     	; 0x1f8c <update_arp_mode+0x90>
    1f52:	89 98       	cbi	0x11, 1	; 17
    1f54:	1b c0       	rjmp	.+54     	; 0x1f8c <update_arp_mode+0x90>
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1f56:	94 62       	ori	r25, 0x24	; 36
    1f58:	90 93 02 03 	sts	0x0302, r25
			arp.mode = UP;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	80 93 94 03 	sts	0x0394, r24
			break;	
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <update_arp_mode+0x90>
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1f64:	94 61       	ori	r25, 0x14	; 20
    1f66:	90 93 02 03 	sts	0x0302, r25
			arp.mode = DOWN;
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
    1f6c:	80 93 94 03 	sts	0x0394, r24
			break;
    1f70:	0d c0       	rjmp	.+26     	; 0x1f8c <update_arp_mode+0x90>
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1f72:	94 63       	ori	r25, 0x34	; 52
    1f74:	90 93 02 03 	sts	0x0302, r25
			arp.mode = UP_DOWN;
    1f78:	83 e0       	ldi	r24, 0x03	; 3
    1f7a:	80 93 94 03 	sts	0x0394, r24
			break;
    1f7e:	06 c0       	rjmp	.+12     	; 0x1f8c <update_arp_mode+0x90>
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1f80:	9c 60       	ori	r25, 0x0C	; 12
    1f82:	90 93 02 03 	sts	0x0302, r25
			arp.mode = RANDOM;
    1f86:	84 e0       	ldi	r24, 0x04	; 4
    1f88:	80 93 94 03 	sts	0x0394, r24
			
					
		
	}
	
	update_arp_sequence(); //update arp sequence with new mode
    1f8c:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	



}
    1f90:	08 95       	ret

00001f92 <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1f92:	90 91 82 03 	lds	r25, 0x0382
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1f96:	80 91 84 03 	lds	r24, 0x0384
    1f9a:	86 95       	lsr	r24
    1f9c:	86 95       	lsr	r24
    1f9e:	68 2f       	mov	r22, r24
    1fa0:	67 95       	ror	r22
    1fa2:	66 27       	eor	r22, r22
    1fa4:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1fa6:	29 2f       	mov	r18, r25
    1fa8:	21 70       	andi	r18, 0x01	; 1
    1faa:	26 2b       	or	r18, r22
    1fac:	69 2f       	mov	r22, r25
    1fae:	66 1f       	adc	r22, r22
    1fb0:	66 27       	eor	r22, r22
    1fb2:	66 1f       	adc	r22, r22
    1fb4:	66 0f       	add	r22, r22
    1fb6:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1fb8:	29 2f       	mov	r18, r25
    1fba:	26 95       	lsr	r18
    1fbc:	26 95       	lsr	r18
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	21 70       	andi	r18, 0x01	; 1
    1fc2:	30 70       	andi	r19, 0x00	; 0
    1fc4:	d9 01       	movw	r26, r18
    1fc6:	aa 0f       	add	r26, r26
    1fc8:	bb 1f       	adc	r27, r27
    1fca:	aa 0f       	add	r26, r26
    1fcc:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1fce:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1fd0:	a9 2f       	mov	r26, r25
    1fd2:	a6 95       	lsr	r26
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	a1 70       	andi	r26, 0x01	; 1
    1fd8:	b0 70       	andi	r27, 0x00	; 0
    1fda:	fd 01       	movw	r30, r26
    1fdc:	ee 0f       	add	r30, r30
    1fde:	ff 1f       	adc	r31, r31
    1fe0:	ee 0f       	add	r30, r30
    1fe2:	ff 1f       	adc	r31, r31
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1fe8:	a6 2f       	mov	r26, r22
    1fea:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1fec:	e9 2f       	mov	r30, r25
    1fee:	e2 95       	swap	r30
    1ff0:	ef 70       	andi	r30, 0x0F	; 15
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	e1 70       	andi	r30, 0x01	; 1
    1ff6:	f0 70       	andi	r31, 0x00	; 0
    1ff8:	bf 01       	movw	r22, r30
    1ffa:	62 95       	swap	r22
    1ffc:	72 95       	swap	r23
    1ffe:	70 7f       	andi	r23, 0xF0	; 240
    2000:	76 27       	eor	r23, r22
    2002:	60 7f       	andi	r22, 0xF0	; 240
    2004:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    2006:	ea 2f       	mov	r30, r26
    2008:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    200a:	69 2f       	mov	r22, r25
    200c:	62 95       	swap	r22
    200e:	66 95       	lsr	r22
    2010:	67 70       	andi	r22, 0x07	; 7
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	61 70       	andi	r22, 0x01	; 1
    2016:	70 70       	andi	r23, 0x00	; 0
    2018:	ab 01       	movw	r20, r22
    201a:	44 0f       	add	r20, r20
    201c:	55 1f       	adc	r21, r21
    201e:	42 95       	swap	r20
    2020:	52 95       	swap	r21
    2022:	50 7f       	andi	r21, 0xF0	; 240
    2024:	54 27       	eor	r21, r20
    2026:	40 7f       	andi	r20, 0xF0	; 240
    2028:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    202a:	6e 2f       	mov	r22, r30
    202c:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    202e:	49 2f       	mov	r20, r25
    2030:	42 95       	swap	r20
    2032:	46 95       	lsr	r20
    2034:	46 95       	lsr	r20
    2036:	43 70       	andi	r20, 0x03	; 3
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	41 70       	andi	r20, 0x01	; 1
    203c:	50 70       	andi	r21, 0x00	; 0
    203e:	9a 01       	movw	r18, r20
    2040:	00 24       	eor	r0, r0
    2042:	36 95       	lsr	r19
    2044:	27 95       	ror	r18
    2046:	07 94       	ror	r0
    2048:	36 95       	lsr	r19
    204a:	27 95       	ror	r18
    204c:	07 94       	ror	r0
    204e:	32 2f       	mov	r19, r18
    2050:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    2052:	26 2b       	or	r18, r22
    2054:	20 93 06 03 	sts	0x0306, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    2058:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    205a:	81 95       	neg	r24
    205c:	89 27       	eor	r24, r25
    205e:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    2060:	89 27       	eor	r24, r25
    2062:	0e 94 30 17 	call	0x2e60	; 0x2e60 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    2066:	ed ed       	ldi	r30, 0xDD	; 221
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    206c:	90 91 84 03 	lds	r25, 0x0384
    2070:	96 95       	lsr	r25
    2072:	96 95       	lsr	r25
    2074:	96 95       	lsr	r25
    2076:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    2078:	91 95       	neg	r25
    207a:	80 81       	ld	r24, Z
    207c:	89 27       	eor	r24, r25
    207e:	80 71       	andi	r24, 0x10	; 16
    2080:	82 27       	eor	r24, r18
    2082:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    2084:	e2 e0       	ldi	r30, 0x02	; 2
    2086:	f3 e0       	ldi	r31, 0x03	; 3
    2088:	80 81       	ld	r24, Z
    208a:	98 27       	eor	r25, r24
    208c:	91 70       	andi	r25, 0x01	; 1
    208e:	89 27       	eor	r24, r25
    2090:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    2092:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    2096:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    209a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    209e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <update_arp_sync>
	update_arp_range();
    20a2:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <update_arp_range>
	update_arp_mode();
    20a6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    20aa:	08 95       	ret

000020ac <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    20b0:	90 91 0b 03 	lds	r25, 0x030B
    20b4:	95 30       	cpi	r25, 0x05	; 5
    20b6:	01 f5       	brne	.+64     	; 0x20f8 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    20b8:	87 e0       	ldi	r24, 0x07	; 7
    20ba:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    20bc:	cd ed       	ldi	r28, 0xDD	; 221
    20be:	d0 e0       	ldi	r29, 0x00	; 0
    20c0:	88 81       	ld	r24, Y
    20c2:	80 62       	ori	r24, 0x20	; 32
    20c4:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    20c6:	88 81       	ld	r24, Y
    20c8:	8f 7d       	andi	r24, 0xDF	; 223
    20ca:	88 83       	st	Y, r24
		DATA_BUS = 0;
    20cc:	12 b8       	out	0x02, r1	; 2
		
		tune();
    20ce:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    20d2:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    20d4:	88 81       	ld	r24, Y
    20d6:	80 62       	ori	r24, 0x20	; 32
    20d8:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    20da:	88 81       	ld	r24, Y
    20dc:	8f 7d       	andi	r24, 0xDF	; 223
    20de:	88 83       	st	Y, r24
		DATA_BUS = 0;
    20e0:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    20e2:	80 91 03 03 	lds	r24, 0x0303
    20e6:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    20e8:	80 68       	ori	r24, 0x80	; 128
    20ea:	80 93 03 03 	sts	0x0303, r24
		
		setup_system_clock(); //restore system clock settings
    20ee:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <setup_system_clock>

		current_patch.mode = MEMORY;
    20f2:	10 92 0b 03 	sts	0x030B, r1
		
		return;
    20f6:	63 c0       	rjmp	.+198    	; 0x21be <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    20f8:	80 91 84 03 	lds	r24, 0x0384
    20fc:	28 2f       	mov	r18, r24
    20fe:	22 95       	swap	r18
    2100:	26 95       	lsr	r18
    2102:	26 95       	lsr	r18
    2104:	23 70       	andi	r18, 0x03	; 3
    2106:	20 ff       	sbrs	r18, 0
    2108:	15 c0       	rjmp	.+42     	; 0x2134 <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    210a:	20 e4       	ldi	r18, 0x40	; 64
    210c:	82 27       	eor	r24, r18
    210e:	80 93 84 03 	sts	0x0384, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    2112:	80 91 07 03 	lds	r24, 0x0307
    2116:	8f 5f       	subi	r24, 0xFF	; 255
    2118:	80 93 07 03 	sts	0x0307, r24
    211c:	85 32       	cpi	r24, 0x25	; 37
    211e:	21 f4       	brne	.+8      	; 0x2128 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    2120:	84 e2       	ldi	r24, 0x24	; 36
    2122:	80 93 07 03 	sts	0x0307, r24
    2126:	06 c0       	rjmp	.+12     	; 0x2134 <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    2128:	93 30       	cpi	r25, 0x03	; 3
    212a:	21 f0       	breq	.+8      	; 0x2134 <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    212c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <load_patch>
			update_patch();
    2130:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    2134:	80 91 84 03 	lds	r24, 0x0384
    2138:	98 2f       	mov	r25, r24
    213a:	92 95       	swap	r25
    213c:	96 95       	lsr	r25
    213e:	97 70       	andi	r25, 0x07	; 7
    2140:	90 ff       	sbrs	r25, 0
    2142:	15 c0       	rjmp	.+42     	; 0x216e <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    2144:	90 e2       	ldi	r25, 0x20	; 32
    2146:	89 27       	eor	r24, r25
    2148:	80 93 84 03 	sts	0x0384, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    214c:	80 91 07 03 	lds	r24, 0x0307
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	19 f0       	breq	.+6      	; 0x215a <update_patch_programmer+0xae>
    2154:	81 50       	subi	r24, 0x01	; 1
    2156:	80 93 07 03 	sts	0x0307, r24
		
		if (current_patch.mode != WRITE) {
    215a:	80 91 0b 03 	lds	r24, 0x030B
    215e:	83 30       	cpi	r24, 0x03	; 3
    2160:	31 f0       	breq	.+12     	; 0x216e <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    2162:	80 91 07 03 	lds	r24, 0x0307
    2166:	0e 94 de 0a 	call	0x15bc	; 0x15bc <load_patch>
			update_patch();
    216a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    216e:	80 91 84 03 	lds	r24, 0x0384
    2172:	98 2f       	mov	r25, r24
    2174:	92 95       	swap	r25
    2176:	9f 70       	andi	r25, 0x0F	; 15
    2178:	90 ff       	sbrs	r25, 0
    217a:	15 c0       	rjmp	.+42     	; 0x21a6 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    217c:	90 e1       	ldi	r25, 0x10	; 16
    217e:	89 27       	eor	r24, r25
    2180:	80 93 84 03 	sts	0x0384, r24
		if (current_patch.mode != WRITE) {
    2184:	90 91 0b 03 	lds	r25, 0x030B
    2188:	93 30       	cpi	r25, 0x03	; 3
    218a:	49 f0       	breq	.+18     	; 0x219e <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    218c:	8f 77       	andi	r24, 0x7F	; 127
    218e:	80 93 84 03 	sts	0x0384, r24
			current_patch.mode = WRITE;
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	80 93 0b 03 	sts	0x030B, r24
			lock_pots();
    2198:	0e 94 c0 08 	call	0x1180	; 0x1180 <lock_pots>
    219c:	04 c0       	rjmp	.+8      	; 0x21a6 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    219e:	80 91 07 03 	lds	r24, 0x0307
    21a2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    21a6:	80 91 84 03 	lds	r24, 0x0384
    21aa:	88 23       	and	r24, r24
    21ac:	44 f4       	brge	.+16     	; 0x21be <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    21ae:	80 68       	ori	r24, 0x80	; 128
    21b0:	80 93 84 03 	sts	0x0384, r24
		current_patch.mode = MANUAL;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	80 93 0b 03 	sts	0x030B, r24
		unlock_pots();
    21ba:	0e 94 da 08 	call	0x11b4	; 0x11b4 <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	08 95       	ret

000021c4 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    21c4:	88 ed       	ldi	r24, 0xD8	; 216
    21c6:	91 e0       	ldi	r25, 0x01	; 1
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    21d0:	81 ee       	ldi	r24, 0xE1	; 225
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    21dc:	82 ee       	ldi	r24, 0xE2	; 226
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    21e8:	87 eb       	ldi	r24, 0xB7	; 183
    21ea:	92 e0       	ldi	r25, 0x02	; 2
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    21f4:	8a ed       	ldi	r24, 0xDA	; 218
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    2200:	8f ed       	ldi	r24, 0xDF	; 223
    2202:	91 e0       	ldi	r25, 0x01	; 1
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    220c:	80 ee       	ldi	r24, 0xE0	; 224
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2218:	81 ed       	ldi	r24, 0xD1	; 209
    221a:	91 e0       	ldi	r25, 0x01	; 1
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2224:	86 ed       	ldi	r24, 0xD6	; 214
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	70 e0       	ldi	r23, 0x00	; 0
    222c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    2230:	82 ed       	ldi	r24, 0xD2	; 210
    2232:	91 e0       	ldi	r25, 0x01	; 1
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	70 e0       	ldi	r23, 0x00	; 0
    2238:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    223c:	83 ed       	ldi	r24, 0xD3	; 211
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    2248:	84 ed       	ldi	r24, 0xD4	; 212
    224a:	91 e0       	ldi	r25, 0x01	; 1
    224c:	6f ef       	ldi	r22, 0xFF	; 255
    224e:	7f e3       	ldi	r23, 0x3F	; 63
    2250:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    2254:	85 ed       	ldi	r24, 0xD5	; 213
    2256:	91 e0       	ldi	r25, 0x01	; 1
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	70 e0       	ldi	r23, 0x00	; 0
    225c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    2260:	89 ed       	ldi	r24, 0xD9	; 217
    2262:	91 e0       	ldi	r25, 0x01	; 1
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    226c:	8e ec       	ldi	r24, 0xCE	; 206
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2278:	8c ec       	ldi	r24, 0xCC	; 204
    227a:	91 e0       	ldi	r25, 0x01	; 1
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	70 e0       	ldi	r23, 0x00	; 0
    2280:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2284:	8a ec       	ldi	r24, 0xCA	; 202
    2286:	91 e0       	ldi	r25, 0x01	; 1
    2288:	6f ef       	ldi	r22, 0xFF	; 255
    228a:	7f e3       	ldi	r23, 0x3F	; 63
    228c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    2290:	88 ec       	ldi	r24, 0xC8	; 200
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    229c:	80 ed       	ldi	r24, 0xD0	; 208
    229e:	91 e0       	ldi	r25, 0x01	; 1
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    22a8:	83 ee       	ldi	r24, 0xE3	; 227
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    22b4:	84 ee       	ldi	r24, 0xE4	; 228
    22b6:	91 e0       	ldi	r25, 0x01	; 1
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	70 e0       	ldi	r23, 0x00	; 0
    22bc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
}	
    22c0:	08 95       	ret

000022c2 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    22c2:	2f 92       	push	r2
    22c4:	3f 92       	push	r3
    22c6:	4f 92       	push	r4
    22c8:	5f 92       	push	r5
    22ca:	6f 92       	push	r6
    22cc:	7f 92       	push	r7
    22ce:	8f 92       	push	r8
    22d0:	9f 92       	push	r9
    22d2:	af 92       	push	r10
    22d4:	bf 92       	push	r11
    22d6:	cf 92       	push	r12
    22d8:	df 92       	push	r13
    22da:	ef 92       	push	r14
    22dc:	ff 92       	push	r15
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	2c 97       	sbiw	r28, 0x0c	; 12
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	18 2f       	mov	r17, r24
    22f8:	78 87       	std	Y+8, r23	; 0x08
    22fa:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    22fc:	80 91 7f 03 	lds	r24, 0x037F
    2300:	83 60       	ori	r24, 0x03	; 3
    2302:	80 93 7f 03 	sts	0x037F, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    2306:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    230a:	10 92 7e 03 	sts	0x037E, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    230e:	1f 30       	cpi	r17, 0x0F	; 15
    2310:	e9 f4       	brne	.+58     	; 0x234c <set_vco_init_cv+0x8a>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2312:	0f 2e       	mov	r0, r31
    2314:	f6 ee       	ldi	r31, 0xE6	; 230
    2316:	4f 2e       	mov	r4, r31
    2318:	f1 e0       	ldi	r31, 0x01	; 1
    231a:	5f 2e       	mov	r5, r31
    231c:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    231e:	0f 2e       	mov	r0, r31
    2320:	fe ed       	ldi	r31, 0xDE	; 222
    2322:	2f 2e       	mov	r2, r31
    2324:	f1 e0       	ldi	r31, 0x01	; 1
    2326:	3f 2e       	mov	r3, r31
    2328:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    232a:	23 ee       	ldi	r18, 0xE3	; 227
    232c:	31 e0       	ldi	r19, 0x01	; 1
    232e:	3a 83       	std	Y+2, r19	; 0x02
    2330:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2332:	0f 2e       	mov	r0, r31
    2334:	fc ed       	ldi	r31, 0xDC	; 220
    2336:	ef 2e       	mov	r14, r31
    2338:	f1 e0       	ldi	r31, 0x01	; 1
    233a:	ff 2e       	mov	r15, r31
    233c:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		vco_display_num = 1;
		eeprom_addr = &vco1_init_cv_eeprom;
    233e:	82 e7       	ldi	r24, 0x72	; 114
    2340:	96 e0       	ldi	r25, 0x06	; 6
    2342:	9a 87       	std	Y+10, r25	; 0x0a
    2344:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    2346:	81 e0       	ldi	r24, 0x01	; 1
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		vco_display_num = 1;
    2348:	11 e0       	ldi	r17, 0x01	; 1
    234a:	1c c0       	rjmp	.+56     	; 0x2384 <set_vco_init_cv+0xc2>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    234c:	0f 2e       	mov	r0, r31
    234e:	f5 ee       	ldi	r31, 0xE5	; 229
    2350:	4f 2e       	mov	r4, r31
    2352:	f1 e0       	ldi	r31, 0x01	; 1
    2354:	5f 2e       	mov	r5, r31
    2356:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    2358:	0f 2e       	mov	r0, r31
    235a:	f7 ed       	ldi	r31, 0xD7	; 215
    235c:	2f 2e       	mov	r2, r31
    235e:	f1 e0       	ldi	r31, 0x01	; 1
    2360:	3f 2e       	mov	r3, r31
    2362:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    2364:	e4 ee       	ldi	r30, 0xE4	; 228
    2366:	f1 e0       	ldi	r31, 0x01	; 1
    2368:	fa 83       	std	Y+2, r31	; 0x02
    236a:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    236c:	0f 2e       	mov	r0, r31
    236e:	fd ed       	ldi	r31, 0xDD	; 221
    2370:	ef 2e       	mov	r14, r31
    2372:	f1 e0       	ldi	r31, 0x01	; 1
    2374:	ff 2e       	mov	r15, r31
    2376:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		vco_display_num = 2;
		eeprom_addr = &vco2_init_cv_eeprom;
    2378:	20 e7       	ldi	r18, 0x70	; 112
    237a:	36 e0       	ldi	r19, 0x06	; 6
    237c:	3a 87       	std	Y+10, r19	; 0x0a
    237e:	29 87       	std	Y+9, r18	; 0x09
		vco_display_num = 1;
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    2380:	80 e4       	ldi	r24, 0x40	; 64
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		vco_display_num = 2;
    2382:	12 e0       	ldi	r17, 0x02	; 2
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    2384:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2386:	ed ed       	ldi	r30, 0xDD	; 221
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	80 64       	ori	r24, 0x40	; 64
    238e:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2390:	80 81       	ld	r24, Z
    2392:	8f 7b       	andi	r24, 0xBF	; 191
    2394:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2396:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    2398:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    239a:	84 b5       	in	r24, 0x24	; 36
    239c:	8f 60       	ori	r24, 0x0F	; 15
    239e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    23a4:	ee e6       	ldi	r30, 0x6E	; 110
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	90 81       	ld	r25, Z
    23aa:	92 60       	ori	r25, 0x02	; 2
    23ac:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    23ae:	80 93 80 03 	sts	0x0380, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    23b2:	8d e0       	ldi	r24, 0x0D	; 13
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
		count_finished = FALSE;
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    23ba:	0f e0       	ldi	r16, 0x0F	; 15
			
			update_display(vco_display_num, DEC);
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    23bc:	0f 2e       	mov	r0, r31
    23be:	f8 ed       	ldi	r31, 0xD8	; 216
    23c0:	cf 2e       	mov	r12, r31
    23c2:	f1 e0       	ldi	r31, 0x01	; 1
    23c4:	df 2e       	mov	r13, r31
    23c6:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    23c8:	0f 2e       	mov	r0, r31
    23ca:	f4 ed       	ldi	r31, 0xD4	; 212
    23cc:	af 2e       	mov	r10, r31
    23ce:	f1 e0       	ldi	r31, 0x01	; 1
    23d0:	bf 2e       	mov	r11, r31
    23d2:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    23d4:	0f 2e       	mov	r0, r31
    23d6:	fa ec       	ldi	r31, 0xCA	; 202
    23d8:	8f 2e       	mov	r8, r31
    23da:	f1 e0       	ldi	r31, 0x01	; 1
    23dc:	9f 2e       	mov	r9, r31
    23de:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    23e0:	0f 2e       	mov	r0, r31
    23e2:	fb ec       	ldi	r31, 0xCB	; 203
    23e4:	6f 2e       	mov	r6, r31
    23e6:	f1 e0       	ldi	r31, 0x01	; 1
    23e8:	7f 2e       	mov	r7, r31
    23ea:	f0 2d       	mov	r31, r0
		//WDTCR = 0x00;
		wdt_disable();
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
		no_overflow = TRUE;
    23ec:	e0 e0       	ldi	r30, 0x00	; 0
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	fc 87       	std	Y+12, r31	; 0x0c
    23f2:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    23f4:	21 e0       	ldi	r18, 0x01	; 1
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	0b 80       	ldd	r0, Y+3	; 0x03
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <set_vco_init_cv+0x13e>
    23fc:	22 0f       	add	r18, r18
    23fe:	33 1f       	adc	r19, r19
    2400:	0a 94       	dec	r0
    2402:	e2 f7       	brpl	.-8      	; 0x23fc <set_vco_init_cv+0x13a>
    2404:	3e 83       	std	Y+6, r19	; 0x06
    2406:	2d 83       	std	Y+5, r18	; 0x05
    2408:	8b 85       	ldd	r24, Y+11	; 0x0b
    240a:	9c 85       	ldd	r25, Y+12	; 0x0c
    240c:	82 2b       	or	r24, r18
    240e:	93 2b       	or	r25, r19
    2410:	9c 87       	std	Y+12, r25	; 0x0c
    2412:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    2414:	c7 01       	movw	r24, r14
    2416:	6b 85       	ldd	r22, Y+11	; 0x0b
    2418:	7c 85       	ldd	r23, Y+12	; 0x0c
    241a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
		
		
		count_finished = FALSE;
    241e:	10 92 7e 03 	sts	0x037E, r1
		period_counter = 0;
    2422:	10 92 81 03 	sts	0x0381, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    2426:	e8 e1       	ldi	r30, 0x18	; 24
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	a8 95       	wdr
    2430:	e0 93 60 00 	sts	0x0060, r30
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	00 93 60 00 	sts	0x0060, r16
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    243a:	80 91 7e 03 	lds	r24, 0x037E
    243e:	88 23       	and	r24, r24
    2440:	91 f5       	brne	.+100    	; 0x24a6 <set_vco_init_cv+0x1e4>
			
			update_display(vco_display_num, DEC);
    2442:	81 2f       	mov	r24, r17
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	60 e0       	ldi	r22, 0x00	; 0
    2448:	0e 94 38 03 	call	0x670	; 0x670 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    244c:	c7 01       	movw	r24, r14
    244e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2450:	7c 85       	ldd	r23, Y+12	; 0x0c
    2452:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    2456:	c1 01       	movw	r24, r2
    2458:	6f ef       	ldi	r22, 0xFF	; 255
    245a:	7f e3       	ldi	r23, 0x3F	; 63
    245c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    2460:	c6 01       	movw	r24, r12
    2462:	60 e0       	ldi	r22, 0x00	; 0
    2464:	70 e0       	ldi	r23, 0x00	; 0
    2466:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    246a:	c5 01       	movw	r24, r10
    246c:	6f ef       	ldi	r22, 0xFF	; 255
    246e:	7f e3       	ldi	r23, 0x3F	; 63
    2470:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    2474:	c4 01       	movw	r24, r8
    2476:	6f ef       	ldi	r22, 0xFF	; 255
    2478:	7f e3       	ldi	r23, 0x3F	; 63
    247a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    247e:	c3 01       	movw	r24, r6
    2480:	6f ef       	ldi	r22, 0xFF	; 255
    2482:	7f e3       	ldi	r23, 0x3F	; 63
    2484:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	6f ef       	ldi	r22, 0xFF	; 255
    248e:	7f e3       	ldi	r23, 0x3F	; 63
    2490:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    2494:	c2 01       	movw	r24, r4
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	70 e0       	ldi	r23, 0x00	; 0
    249a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    249e:	80 91 7e 03 	lds	r24, 0x037E
    24a2:	88 23       	and	r24, r24
    24a4:	71 f2       	breq	.-100    	; 0x2442 <set_vco_init_cv+0x180>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    24a6:	98 e1       	ldi	r25, 0x18	; 24
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	90 93 60 00 	sts	0x0060, r25
    24b0:	10 92 60 00 	sts	0x0060, r1
    24b4:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    24b6:	80 91 7c 03 	lds	r24, 0x037C
    24ba:	90 91 7d 03 	lds	r25, 0x037D
    24be:	ef 81       	ldd	r30, Y+7	; 0x07
    24c0:	f8 85       	ldd	r31, Y+8	; 0x08
    24c2:	e8 17       	cp	r30, r24
    24c4:	f9 07       	cpc	r31, r25
    24c6:	20 f0       	brcs	.+8      	; 0x24d0 <set_vco_init_cv+0x20e>
    24c8:	80 91 af 02 	lds	r24, 0x02AF
    24cc:	88 23       	and	r24, r24
    24ce:	51 f4       	brne	.+20     	; 0x24e4 <set_vco_init_cv+0x222>
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	80 95       	com	r24
    24d6:	90 95       	com	r25
    24d8:	2b 85       	ldd	r18, Y+11	; 0x0b
    24da:	3c 85       	ldd	r19, Y+12	; 0x0c
    24dc:	28 23       	and	r18, r24
    24de:	39 23       	and	r19, r25
    24e0:	3c 87       	std	Y+12, r19	; 0x0c
    24e2:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    24e4:	31 e0       	ldi	r19, 0x01	; 1
    24e6:	30 93 af 02 	sts	0x02AF, r19
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	9c 83       	std	Y+4, r25	; 0x04
    24f2:	8b 83       	std	Y+3, r24	; 0x03
    24f4:	ef ef       	ldi	r30, 0xFF	; 255
    24f6:	8f 3f       	cpi	r24, 0xFF	; 255
    24f8:	9e 07       	cpc	r25, r30
    24fa:	09 f0       	breq	.+2      	; 0x24fe <set_vco_init_cv+0x23c>
    24fc:	7b cf       	rjmp	.-266    	; 0x23f4 <set_vco_init_cv+0x132>
    24fe:	2b 85       	ldd	r18, Y+11	; 0x0b
    2500:	3c 85       	ldd	r19, Y+12	; 0x0c
    2502:	3e 83       	std	Y+6, r19	; 0x06
    2504:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    2506:	88 ec       	ldi	r24, 0xC8	; 200
    2508:	91 e0       	ldi	r25, 0x01	; 1
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    2512:	89 ec       	ldi	r24, 0xC9	; 201
    2514:	91 e0       	ldi	r25, 0x01	; 1
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    251e:	84 ed       	ldi	r24, 0xD4	; 212
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    252a:	88 ed       	ldi	r24, 0xD8	; 216
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	70 e0       	ldi	r23, 0x00	; 0
    2532:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    2536:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    2538:	ee e6       	ldi	r30, 0x6E	; 110
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	8d 7f       	andi	r24, 0xFD	; 253
    2540:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2542:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    2544:	89 85       	ldd	r24, Y+9	; 0x09
    2546:	9a 85       	ldd	r25, Y+10	; 0x0a
    2548:	6d 81       	ldd	r22, Y+5	; 0x05
    254a:	7e 81       	ldd	r23, Y+6	; 0x06
    254c:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	2c 96       	adiw	r28, 0x0c	; 12
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	ff 90       	pop	r15
    256a:	ef 90       	pop	r14
    256c:	df 90       	pop	r13
    256e:	cf 90       	pop	r12
    2570:	bf 90       	pop	r11
    2572:	af 90       	pop	r10
    2574:	9f 90       	pop	r9
    2576:	8f 90       	pop	r8
    2578:	7f 90       	pop	r7
    257a:	6f 90       	pop	r6
    257c:	5f 90       	pop	r5
    257e:	4f 90       	pop	r4
    2580:	3f 90       	pop	r3
    2582:	2f 90       	pop	r2
    2584:	08 95       	ret

00002586 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    2586:	2f 92       	push	r2
    2588:	3f 92       	push	r3
    258a:	4f 92       	push	r4
    258c:	5f 92       	push	r5
    258e:	6f 92       	push	r6
    2590:	7f 92       	push	r7
    2592:	8f 92       	push	r8
    2594:	9f 92       	push	r9
    2596:	af 92       	push	r10
    2598:	bf 92       	push	r11
    259a:	cf 92       	push	r12
    259c:	df 92       	push	r13
    259e:	ef 92       	push	r14
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	c0 54       	subi	r28, 0x40	; 64
    25b0:	d0 40       	sbci	r29, 0x00	; 0
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	f8 94       	cli
    25b6:	de bf       	out	0x3e, r29	; 62
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	cd bf       	out	0x3d, r28	; 61
    25bc:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    25be:	de 01       	movw	r26, r28
    25c0:	11 96       	adiw	r26, 0x01	; 1
    25c2:	e0 e3       	ldi	r30, 0x30	; 48
    25c4:	f2 e0       	ldi	r31, 0x02	; 2
    25c6:	80 e3       	ldi	r24, 0x30	; 48
    25c8:	01 90       	ld	r0, Z+
    25ca:	0d 92       	st	X+, r0
    25cc:	81 50       	subi	r24, 0x01	; 1
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    25d0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    25d4:	0f 30       	cpi	r16, 0x0F	; 15
    25d6:	11 f5       	brne	.+68     	; 0x261c <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    25d8:	40 90 79 03 	lds	r4, 0x0379
    25dc:	50 90 7a 03 	lds	r5, 0x037A
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    25e0:	0f 2e       	mov	r0, r31
    25e2:	f6 ee       	ldi	r31, 0xE6	; 230
    25e4:	8f 2e       	mov	r8, r31
    25e6:	f1 e0       	ldi	r31, 0x01	; 1
    25e8:	9f 2e       	mov	r9, r31
    25ea:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    25ec:	0f 2e       	mov	r0, r31
    25ee:	fe ed       	ldi	r31, 0xDE	; 222
    25f0:	2f 2e       	mov	r2, r31
    25f2:	f1 e0       	ldi	r31, 0x01	; 1
    25f4:	3f 2e       	mov	r3, r31
    25f6:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    25f8:	23 ee       	ldi	r18, 0xE3	; 227
    25fa:	31 e0       	ldi	r19, 0x01	; 1
    25fc:	3a ab       	sts	0x5a, r19
    25fe:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2600:	0f 2e       	mov	r0, r31
    2602:	fc ed       	ldi	r31, 0xDC	; 220
    2604:	6f 2e       	mov	r6, r31
    2606:	f1 e0       	ldi	r31, 0x01	; 1
    2608:	7f 2e       	mov	r7, r31
    260a:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    260c:	05 e5       	ldi	r16, 0x55	; 85
    260e:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2610:	cc 24       	eor	r12, r12
    2612:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    2614:	ee 24       	eor	r14, r14
    2616:	68 94       	set
    2618:	e1 f8       	bld	r14, 1
    261a:	22 c0       	rjmp	.+68     	; 0x2660 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    261c:	40 90 77 03 	lds	r4, 0x0377
    2620:	50 90 78 03 	lds	r5, 0x0378
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2624:	0f 2e       	mov	r0, r31
    2626:	f5 ee       	ldi	r31, 0xE5	; 229
    2628:	8f 2e       	mov	r8, r31
    262a:	f1 e0       	ldi	r31, 0x01	; 1
    262c:	9f 2e       	mov	r9, r31
    262e:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2630:	0f 2e       	mov	r0, r31
    2632:	f7 ed       	ldi	r31, 0xD7	; 215
    2634:	2f 2e       	mov	r2, r31
    2636:	f1 e0       	ldi	r31, 0x01	; 1
    2638:	3f 2e       	mov	r3, r31
    263a:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    263c:	44 ee       	ldi	r20, 0xE4	; 228
    263e:	51 e0       	ldi	r21, 0x01	; 1
    2640:	5a ab       	sts	0x5a, r21
    2642:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2644:	0f 2e       	mov	r0, r31
    2646:	fd ed       	ldi	r31, 0xDD	; 221
    2648:	6f 2e       	mov	r6, r31
    264a:	f1 e0       	ldi	r31, 0x01	; 1
    264c:	7f 2e       	mov	r7, r31
    264e:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    2650:	03 e3       	ldi	r16, 0x33	; 51
    2652:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    2654:	cc 24       	eor	r12, r12
    2656:	68 94       	set
    2658:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    265a:	ee 24       	eor	r14, r14
    265c:	68 94       	set
    265e:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    2660:	c3 01       	movw	r24, r6
    2662:	b2 01       	movw	r22, r4
    2664:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    2668:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    266a:	ed ed       	ldi	r30, 0xDD	; 221
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	80 64       	ori	r24, 0x40	; 64
    2672:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2674:	80 81       	ld	r24, Z
    2676:	8f 7b       	andi	r24, 0xBF	; 191
    2678:	80 83       	st	Z, r24
		DATA_BUS = 0;
    267a:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    267c:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	80 93 80 03 	sts	0x0380, r24
		
		compare_match_counter = 0;	
    2684:	10 92 7b 03 	sts	0x037B, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    2688:	8c 2d       	mov	r24, r12
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	24 e6       	ldi	r18, 0x64	; 100
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	82 9f       	mul	r24, r18
    2692:	d0 01       	movw	r26, r0
    2694:	83 9f       	mul	r24, r19
    2696:	b0 0d       	add	r27, r0
    2698:	92 9f       	mul	r25, r18
    269a:	b0 0d       	add	r27, r0
    269c:	11 24       	eor	r1, r1
    269e:	bc ab       	sts	0x5c, r27
    26a0:	ab ab       	sts	0x5b, r26
    26a2:	fe 01       	movw	r30, r28
    26a4:	31 96       	adiw	r30, 0x01	; 1
    26a6:	fc af       	sts	0x7c, r31
    26a8:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    26aa:	98 01       	movw	r18, r16
    26ac:	2e 5f       	subi	r18, 0xFE	; 254
    26ae:	3f 4f       	sbci	r19, 0xFF	; 255
    26b0:	21 96       	adiw	r28, 0x01	; 1
    26b2:	3f af       	sts	0x7f, r19
    26b4:	2e af       	sts	0x7e, r18
    26b6:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    26b8:	1e ae       	sts	0xbe, r17
    26ba:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    26bc:	0f 2e       	mov	r0, r31
    26be:	f8 ed       	ldi	r31, 0xD8	; 216
    26c0:	ef 2e       	mov	r14, r31
    26c2:	f1 e0       	ldi	r31, 0x01	; 1
    26c4:	ff 2e       	mov	r15, r31
    26c6:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    26c8:	0f 2e       	mov	r0, r31
    26ca:	f4 ed       	ldi	r31, 0xD4	; 212
    26cc:	cf 2e       	mov	r12, r31
    26ce:	f1 e0       	ldi	r31, 0x01	; 1
    26d0:	df 2e       	mov	r13, r31
    26d2:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    26d4:	0f 2e       	mov	r0, r31
    26d6:	fa ec       	ldi	r31, 0xCA	; 202
    26d8:	af 2e       	mov	r10, r31
    26da:	f1 e0       	ldi	r31, 0x01	; 1
    26dc:	bf 2e       	mov	r11, r31
    26de:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    26e0:	eb ad       	sts	0x6b, r30
    26e2:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    26e4:	80 81       	ld	r24, Z
    26e6:	80 93 80 03 	sts	0x0380, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    26ea:	84 b5       	in	r24, 0x24	; 36
    26ec:	8f 60       	ori	r24, 0x0F	; 15
    26ee:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    26f4:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    26f6:	4d ad       	sts	0x6d, r20
    26f8:	5e ad       	sts	0x6e, r21
    26fa:	43 30       	cpi	r20, 0x03	; 3
    26fc:	51 05       	cpc	r21, r1
    26fe:	24 f4       	brge	.+8      	; 0x2708 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2700:	83 e0       	ldi	r24, 0x03	; 3
    2702:	80 93 7f 03 	sts	0x037F, r24
    2706:	03 c0       	rjmp	.+6      	; 0x270e <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    2708:	82 e0       	ldi	r24, 0x02	; 2
    270a:	80 93 7f 03 	sts	0x037F, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    270e:	81 81       	ldd	r24, Z+1	; 0x01
    2710:	92 81       	ldd	r25, Z+2	; 0x02
    2712:	9a af       	sts	0x7a, r25
    2714:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2716:	ad e0       	ldi	r26, 0x0D	; 13
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	be ab       	sts	0x5e, r27
    271c:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    271e:	00 e0       	ldi	r16, 0x00	; 0
    2720:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2722:	e1 e0       	ldi	r30, 0x01	; 1
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	0d a8       	sts	0x8d, r16
    2728:	02 c0       	rjmp	.+4      	; 0x272e <tune_8ths+0x1a8>
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	0a 94       	dec	r0
    2730:	e2 f7       	brpl	.-8      	; 0x272a <tune_8ths+0x1a4>
    2732:	f8 af       	sts	0x78, r31
    2734:	ef ab       	sts	0x5f, r30
    2736:	0e 2b       	or	r16, r30
    2738:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    273a:	ae e6       	ldi	r26, 0x6E	; 110
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	8c 91       	ld	r24, X
    2740:	8d 7f       	andi	r24, 0xFD	; 253
    2742:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2744:	c4 01       	movw	r24, r8
    2746:	b8 01       	movw	r22, r16
    2748:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    274c:	e3 ef       	ldi	r30, 0xF3	; 243
    274e:	f1 e0       	ldi	r31, 0x01	; 1
    2750:	31 97       	sbiw	r30, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <tune_8ths+0x1ca>
    2754:	00 c0       	rjmp	.+0      	; 0x2756 <tune_8ths+0x1d0>
    2756:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2758:	ae e6       	ldi	r26, 0x6E	; 110
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	8c 91       	ld	r24, X
    275e:	82 60       	ori	r24, 0x02	; 2
    2760:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    2762:	10 92 7e 03 	sts	0x037E, r1
				period_counter = 0;
    2766:	10 92 81 03 	sts	0x0381, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    276a:	e8 e1       	ldi	r30, 0x18	; 24
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	2f e0       	ldi	r18, 0x0F	; 15
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	a8 95       	wdr
    2776:	e0 93 60 00 	sts	0x0060, r30
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    2780:	80 91 7e 03 	lds	r24, 0x037E
    2784:	88 23       	and	r24, r24
    2786:	81 f5       	brne	.+96     	; 0x27e8 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    2788:	80 91 80 03 	lds	r24, 0x0380
    278c:	4b a9       	sts	0x4b, r20
    278e:	5c a9       	sts	0x4c, r21
    2790:	48 0f       	add	r20, r24
    2792:	51 1d       	adc	r21, r1
    2794:	ca 01       	movw	r24, r20
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	0e 94 38 03 	call	0x670	; 0x670 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    279c:	c3 01       	movw	r24, r6
    279e:	b2 01       	movw	r22, r4
    27a0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    27a4:	c4 01       	movw	r24, r8
    27a6:	b8 01       	movw	r22, r16
    27a8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    27ac:	c7 01       	movw	r24, r14
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    27b6:	c6 01       	movw	r24, r12
    27b8:	6f ef       	ldi	r22, 0xFF	; 255
    27ba:	7f e3       	ldi	r23, 0x3F	; 63
    27bc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    27c0:	c5 01       	movw	r24, r10
    27c2:	6f ef       	ldi	r22, 0xFF	; 255
    27c4:	7f e3       	ldi	r23, 0x3F	; 63
    27c6:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    27ca:	c1 01       	movw	r24, r2
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	70 e2       	ldi	r23, 0x20	; 32
    27d0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    27d4:	89 a9       	sts	0x49, r24
    27d6:	9a a9       	sts	0x4a, r25
    27d8:	6f ef       	ldi	r22, 0xFF	; 255
    27da:	7f e3       	ldi	r23, 0x3F	; 63
    27dc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    27e0:	80 91 7e 03 	lds	r24, 0x037E
    27e4:	88 23       	and	r24, r24
    27e6:	81 f2       	breq	.-96     	; 0x2788 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    27e8:	58 e1       	ldi	r21, 0x18	; 24
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	50 93 60 00 	sts	0x0060, r21
    27f2:	10 92 60 00 	sts	0x0060, r1
    27f6:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    27f8:	80 91 7c 03 	lds	r24, 0x037C
    27fc:	90 91 7d 03 	lds	r25, 0x037D
    2800:	a9 ad       	sts	0x69, r26
    2802:	ba ad       	sts	0x6a, r27
    2804:	a8 17       	cp	r26, r24
    2806:	b9 07       	cpc	r27, r25
    2808:	50 f0       	brcs	.+20     	; 0x281e <tune_8ths+0x298>
    280a:	80 91 af 02 	lds	r24, 0x02AF
    280e:	81 30       	cpi	r24, 0x01	; 1
    2810:	31 f4       	brne	.+12     	; 0x281e <tune_8ths+0x298>
    2812:	8f a9       	sts	0x4f, r24
    2814:	98 ad       	sts	0x68, r25
    2816:	80 95       	com	r24
    2818:	90 95       	com	r25
    281a:	08 23       	and	r16, r24
    281c:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    281e:	80 91 7c 03 	lds	r24, 0x037C
    2822:	90 91 7d 03 	lds	r25, 0x037D
    2826:	e9 ad       	sts	0x69, r30
    2828:	fa ad       	sts	0x6a, r31
    282a:	8e 17       	cp	r24, r30
    282c:	9f 07       	cpc	r25, r31
    282e:	21 f4       	brne	.+8      	; 0x2838 <tune_8ths+0x2b2>
    2830:	80 91 af 02 	lds	r24, 0x02AF
    2834:	81 30       	cpi	r24, 0x01	; 1
    2836:	71 f0       	breq	.+28     	; 0x2854 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    2838:	f1 e0       	ldi	r31, 0x01	; 1
    283a:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    283e:	2d a9       	sts	0x4d, r18
    2840:	3e a9       	sts	0x4e, r19
    2842:	21 50       	subi	r18, 0x01	; 1
    2844:	30 40       	sbci	r19, 0x00	; 0
    2846:	3e ab       	sts	0x5e, r19
    2848:	2d ab       	sts	0x5d, r18
    284a:	4f ef       	ldi	r20, 0xFF	; 255
    284c:	2f 3f       	cpi	r18, 0xFF	; 255
    284e:	34 07       	cpc	r19, r20
    2850:	09 f0       	breq	.+2      	; 0x2854 <tune_8ths+0x2ce>
    2852:	67 cf       	rjmp	.-306    	; 0x2722 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    2854:	21 96       	adiw	r28, 0x01	; 1
    2856:	ae ad       	sts	0x6e, r26
    2858:	bf ad       	sts	0x6f, r27
    285a:	21 97       	sbiw	r28, 0x01	; 1
    285c:	0d 93       	st	X+, r16
    285e:	1d 93       	st	X+, r17
    2860:	21 96       	adiw	r28, 0x01	; 1
    2862:	bf af       	sts	0x7f, r27
    2864:	ae af       	sts	0x7e, r26
    2866:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2868:	ee e6       	ldi	r30, 0x6E	; 110
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	8d 7f       	andi	r24, 0xFD	; 253
    2870:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    2872:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2874:	2d ad       	sts	0x6d, r18
    2876:	3e ad       	sts	0x6e, r19
    2878:	2f 5f       	subi	r18, 0xFF	; 255
    287a:	3f 4f       	sbci	r19, 0xFF	; 255
    287c:	3e af       	sts	0x7e, r19
    287e:	2d af       	sts	0x7d, r18
    2880:	4b ad       	sts	0x6b, r20
    2882:	5c ad       	sts	0x6c, r21
    2884:	4d 5f       	subi	r20, 0xFD	; 253
    2886:	5f 4f       	sbci	r21, 0xFF	; 255
    2888:	5c af       	sts	0x7c, r21
    288a:	4b af       	sts	0x7b, r20
    288c:	20 31       	cpi	r18, 0x10	; 16
    288e:	31 05       	cpc	r19, r1
    2890:	09 f0       	breq	.+2      	; 0x2894 <tune_8ths+0x30e>
    2892:	26 cf       	rjmp	.-436    	; 0x26e0 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    2894:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    2896:	c0 5c       	subi	r28, 0xC0	; 192
    2898:	df 4f       	sbci	r29, 0xFF	; 255
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	ff 90       	pop	r15
    28ae:	ef 90       	pop	r14
    28b0:	df 90       	pop	r13
    28b2:	cf 90       	pop	r12
    28b4:	bf 90       	pop	r11
    28b6:	af 90       	pop	r10
    28b8:	9f 90       	pop	r9
    28ba:	8f 90       	pop	r8
    28bc:	7f 90       	pop	r7
    28be:	6f 90       	pop	r6
    28c0:	5f 90       	pop	r5
    28c2:	4f 90       	pop	r4
    28c4:	3f 90       	pop	r3
    28c6:	2f 90       	pop	r2
    28c8:	08 95       	ret

000028ca <tune_filter>:
	
void tune_filter(void) {
    28ca:	2f 92       	push	r2
    28cc:	3f 92       	push	r3
    28ce:	4f 92       	push	r4
    28d0:	5f 92       	push	r5
    28d2:	6f 92       	push	r6
    28d4:	7f 92       	push	r7
    28d6:	8f 92       	push	r8
    28d8:	9f 92       	push	r9
    28da:	af 92       	push	r10
    28dc:	bf 92       	push	r11
    28de:	cf 92       	push	r12
    28e0:	df 92       	push	r13
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
    28f2:	e9 97       	sbiw	r28, 0x39	; 57
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    28fe:	de 01       	movw	r26, r28
    2900:	11 96       	adiw	r26, 0x01	; 1
    2902:	e0 e6       	ldi	r30, 0x60	; 96
    2904:	f2 e0       	ldi	r31, 0x02	; 2
    2906:	8d e2       	ldi	r24, 0x2D	; 45
    2908:	01 90       	ld	r0, Z+
    290a:	0d 92       	st	X+, r0
    290c:	81 50       	subi	r24, 0x01	; 1
    290e:	e1 f7       	brne	.-8      	; 0x2908 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2910:	88 ed       	ldi	r24, 0xD8	; 216
    2912:	91 e0       	ldi	r25, 0x01	; 1
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    291c:	81 ee       	ldi	r24, 0xE1	; 225
    291e:	91 e0       	ldi	r25, 0x01	; 1
    2920:	60 e0       	ldi	r22, 0x00	; 0
    2922:	70 e0       	ldi	r23, 0x00	; 0
    2924:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2928:	82 ee       	ldi	r24, 0xE2	; 226
    292a:	91 e0       	ldi	r25, 0x01	; 1
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2934:	87 eb       	ldi	r24, 0xB7	; 183
    2936:	92 e0       	ldi	r25, 0x02	; 2
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2940:	8a ed       	ldi	r24, 0xDA	; 218
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	70 e0       	ldi	r23, 0x00	; 0
    2948:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    294c:	8f ed       	ldi	r24, 0xDF	; 223
    294e:	91 e0       	ldi	r25, 0x01	; 1
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2958:	80 ee       	ldi	r24, 0xE0	; 224
    295a:	91 e0       	ldi	r25, 0x01	; 1
    295c:	60 e0       	ldi	r22, 0x00	; 0
    295e:	70 e0       	ldi	r23, 0x00	; 0
    2960:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2964:	81 ed       	ldi	r24, 0xD1	; 209
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	70 e0       	ldi	r23, 0x00	; 0
    296c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2970:	86 ed       	ldi	r24, 0xD6	; 214
    2972:	91 e0       	ldi	r25, 0x01	; 1
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    297c:	82 ed       	ldi	r24, 0xD2	; 210
    297e:	91 e0       	ldi	r25, 0x01	; 1
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	70 e0       	ldi	r23, 0x00	; 0
    2984:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2988:	83 ed       	ldi	r24, 0xD3	; 211
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	60 e0       	ldi	r22, 0x00	; 0
    298e:	70 e0       	ldi	r23, 0x00	; 0
    2990:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    2994:	84 ed       	ldi	r24, 0xD4	; 212
    2996:	91 e0       	ldi	r25, 0x01	; 1
    2998:	6f ef       	ldi	r22, 0xFF	; 255
    299a:	7f e3       	ldi	r23, 0x3F	; 63
    299c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    29a0:	85 ed       	ldi	r24, 0xD5	; 213
    29a2:	91 e0       	ldi	r25, 0x01	; 1
    29a4:	6f ef       	ldi	r22, 0xFF	; 255
    29a6:	7f e3       	ldi	r23, 0x3F	; 63
    29a8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    29ac:	89 ed       	ldi	r24, 0xD9	; 217
    29ae:	91 e0       	ldi	r25, 0x01	; 1
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	70 e0       	ldi	r23, 0x00	; 0
    29b4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    29b8:	8e ec       	ldi	r24, 0xCE	; 206
    29ba:	91 e0       	ldi	r25, 0x01	; 1
    29bc:	60 e0       	ldi	r22, 0x00	; 0
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    29c4:	8c ec       	ldi	r24, 0xCC	; 204
    29c6:	91 e0       	ldi	r25, 0x01	; 1
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	70 e0       	ldi	r23, 0x00	; 0
    29cc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    29d0:	8a ec       	ldi	r24, 0xCA	; 202
    29d2:	91 e0       	ldi	r25, 0x01	; 1
    29d4:	6f ef       	ldi	r22, 0xFF	; 255
    29d6:	7f e3       	ldi	r23, 0x3F	; 63
    29d8:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    29dc:	88 ec       	ldi	r24, 0xC8	; 200
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    29e8:	80 ed       	ldi	r24, 0xD0	; 208
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    29f4:	83 ee       	ldi	r24, 0xE3	; 227
    29f6:	91 e0       	ldi	r25, 0x01	; 1
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2a00:	84 ee       	ldi	r24, 0xE4	; 228
    2a02:	91 e0       	ldi	r25, 0x01	; 1
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    2a0c:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2a0e:	ed ed       	ldi	r30, 0xDD	; 221
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	80 64       	ori	r24, 0x40	; 64
    2a16:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2a18:	80 81       	ld	r24, Z
    2a1a:	8f 7b       	andi	r24, 0xBF	; 191
    2a1c:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	80 93 80 03 	sts	0x0380, r24
	PORTF |= (1<<GATE); //turn gate on
    2a24:	89 9a       	sbi	0x11, 1	; 17
    2a26:	9e 01       	movw	r18, r28
    2a28:	2f 5f       	subi	r18, 0xFF	; 255
    2a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2c:	3d ab       	sts	0x5d, r19
    2a2e:	2c ab       	sts	0x5c, r18
    2a30:	85 e1       	ldi	r24, 0x15	; 21
    2a32:	93 e0       	ldi	r25, 0x03	; 3
    2a34:	99 af       	sts	0x79, r25
    2a36:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2a38:	1f aa       	sts	0x9f, r17
    2a3a:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    2a3c:	0f 2e       	mov	r0, r31
    2a3e:	f4 ed       	ldi	r31, 0xD4	; 212
    2a40:	af 2e       	mov	r10, r31
    2a42:	f1 e0       	ldi	r31, 0x01	; 1
    2a44:	bf 2e       	mov	r11, r31
    2a46:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2a48:	0f 2e       	mov	r0, r31
    2a4a:	f8 ed       	ldi	r31, 0xD8	; 216
    2a4c:	6f 2e       	mov	r6, r31
    2a4e:	f1 e0       	ldi	r31, 0x01	; 1
    2a50:	7f 2e       	mov	r7, r31
    2a52:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2a54:	0f 2e       	mov	r0, r31
    2a56:	f5 ed       	ldi	r31, 0xD5	; 213
    2a58:	4f 2e       	mov	r4, r31
    2a5a:	f1 e0       	ldi	r31, 0x01	; 1
    2a5c:	5f 2e       	mov	r5, r31
    2a5e:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    2a60:	0f 2e       	mov	r0, r31
    2a62:	fa ec       	ldi	r31, 0xCA	; 202
    2a64:	2f 2e       	mov	r2, r31
    2a66:	f1 e0       	ldi	r31, 0x01	; 1
    2a68:	3f 2e       	mov	r3, r31
    2a6a:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    2a6c:	ac a9       	sts	0x4c, r26
    2a6e:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    2a70:	8c 91       	ld	r24, X
    2a72:	80 93 80 03 	sts	0x0380, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2a76:	84 b5       	in	r24, 0x24	; 36
    2a78:	8f 60       	ori	r24, 0x0F	; 15
    2a7a:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2a80:	ee e6       	ldi	r30, 0x6E	; 110
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	82 60       	ori	r24, 0x02	; 2
    2a88:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    2a8a:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    2a8c:	ee a9       	sts	0x4e, r30
    2a8e:	ff a9       	sts	0x4f, r31
    2a90:	e2 30       	cpi	r30, 0x02	; 2
    2a92:	f1 05       	cpc	r31, r1
    2a94:	24 f4       	brge	.+8      	; 0x2a9e <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	80 93 7f 03 	sts	0x037F, r24
    2a9c:	03 c0       	rjmp	.+6      	; 0x2aa4 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    2a9e:	82 e0       	ldi	r24, 0x02	; 2
    2aa0:	80 93 7f 03 	sts	0x037F, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    2aa4:	11 96       	adiw	r26, 0x01	; 1
    2aa6:	2d 91       	ld	r18, X+
    2aa8:	3c 91       	ld	r19, X
    2aaa:	12 97       	sbiw	r26, 0x02	; 2
    2aac:	3b ab       	sts	0x5b, r19
    2aae:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2ab0:	8d e0       	ldi	r24, 0x0D	; 13
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9f a7       	lds	r25, 0x7f
    2ab6:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2ab8:	ee 24       	eor	r14, r14
    2aba:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2abc:	0f 2e       	mov	r0, r31
    2abe:	f1 ed       	ldi	r31, 0xD1	; 209
    2ac0:	cf 2e       	mov	r12, r31
    2ac2:	f1 e0       	ldi	r31, 0x01	; 1
    2ac4:	df 2e       	mov	r13, r31
    2ac6:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2ac8:	0f 2e       	mov	r0, r31
    2aca:	f6 ed       	ldi	r31, 0xD6	; 214
    2acc:	8f 2e       	mov	r8, r31
    2ace:	f1 e0       	ldi	r31, 0x01	; 1
    2ad0:	9f 2e       	mov	r9, r31
    2ad2:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	fc 01       	movw	r30, r24
    2ada:	0e a4       	lds	r16, 0xae
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <tune_filter+0x218>
    2ade:	ee 0f       	add	r30, r30
    2ae0:	ff 1f       	adc	r31, r31
    2ae2:	0a 94       	dec	r0
    2ae4:	e2 f7       	brpl	.-8      	; 0x2ade <tune_filter+0x214>
    2ae6:	f9 ab       	sts	0x59, r31
    2ae8:	e8 ab       	sts	0x58, r30
    2aea:	ee 2a       	or	r14, r30
    2aec:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2aee:	c5 01       	movw	r24, r10
    2af0:	b7 01       	movw	r22, r14
    2af2:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			count_finished = FALSE;
    2af6:	10 92 7e 03 	sts	0x037E, r1
			period_counter = 0;
    2afa:	10 92 81 03 	sts	0x0381, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2afe:	8f e0       	ldi	r24, 0x0F	; 15
    2b00:	28 e1       	ldi	r18, 0x18	; 24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	a8 95       	wdr
    2b0a:	20 93 60 00 	sts	0x0060, r18
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2b14:	80 91 7e 03 	lds	r24, 0x037E
    2b18:	88 23       	and	r24, r24
    2b1a:	b1 f5       	brne	.+108    	; 0x2b88 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    2b1c:	02 ed       	ldi	r16, 0xD2	; 210
    2b1e:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2b20:	80 91 80 03 	lds	r24, 0x0380
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	84 5d       	subi	r24, 0xD4	; 212
    2b28:	9e 4f       	sbci	r25, 0xFE	; 254
    2b2a:	60 e0       	ldi	r22, 0x00	; 0
    2b2c:	0e 94 38 03 	call	0x670	; 0x670 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2b30:	c5 01       	movw	r24, r10
    2b32:	b7 01       	movw	r22, r14
    2b34:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2b38:	c3 01       	movw	r24, r6
    2b3a:	60 e0       	ldi	r22, 0x00	; 0
    2b3c:	70 e0       	ldi	r23, 0x00	; 0
    2b3e:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2b42:	c2 01       	movw	r24, r4
    2b44:	6f ef       	ldi	r22, 0xFF	; 255
    2b46:	7f e3       	ldi	r23, 0x3F	; 63
    2b48:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    2b4c:	c1 01       	movw	r24, r2
    2b4e:	6f ef       	ldi	r22, 0xFF	; 255
    2b50:	7f e3       	ldi	r23, 0x3F	; 63
    2b52:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    2b56:	8e ec       	ldi	r24, 0xCE	; 206
    2b58:	91 e0       	ldi	r25, 0x01	; 1
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2b62:	c6 01       	movw	r24, r12
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	70 e0       	ldi	r23, 0x00	; 0
    2b68:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    2b6c:	c4 01       	movw	r24, r8
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	70 e0       	ldi	r23, 0x00	; 0
    2b72:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    2b76:	c8 01       	movw	r24, r16
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	0e 94 04 02 	call	0x408	; 0x408 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    2b80:	80 91 7e 03 	lds	r24, 0x037E
    2b84:	88 23       	and	r24, r24
    2b86:	61 f2       	breq	.-104    	; 0x2b20 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    2b88:	88 e1       	ldi	r24, 0x18	; 24
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	80 93 60 00 	sts	0x0060, r24
    2b92:	10 92 60 00 	sts	0x0060, r1
    2b96:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    2b98:	80 91 7c 03 	lds	r24, 0x037C
    2b9c:	90 91 7d 03 	lds	r25, 0x037D
    2ba0:	2a a9       	sts	0x4a, r18
    2ba2:	3b a9       	sts	0x4b, r19
    2ba4:	28 17       	cp	r18, r24
    2ba6:	39 07       	cpc	r19, r25
    2ba8:	50 f0       	brcs	.+20     	; 0x2bbe <tune_filter+0x2f4>
    2baa:	80 91 af 02 	lds	r24, 0x02AF
    2bae:	81 30       	cpi	r24, 0x01	; 1
    2bb0:	31 f4       	brne	.+12     	; 0x2bbe <tune_filter+0x2f4>
    2bb2:	88 a9       	sts	0x48, r24
    2bb4:	99 a9       	sts	0x49, r25
    2bb6:	80 95       	com	r24
    2bb8:	90 95       	com	r25
    2bba:	e8 22       	and	r14, r24
    2bbc:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2bbe:	80 91 7c 03 	lds	r24, 0x037C
    2bc2:	90 91 7d 03 	lds	r25, 0x037D
    2bc6:	ea a9       	sts	0x4a, r30
    2bc8:	fb a9       	sts	0x4b, r31
    2bca:	8e 17       	cp	r24, r30
    2bcc:	9f 07       	cpc	r25, r31
    2bce:	21 f4       	brne	.+8      	; 0x2bd8 <tune_filter+0x30e>
    2bd0:	80 91 af 02 	lds	r24, 0x02AF
    2bd4:	81 30       	cpi	r24, 0x01	; 1
    2bd6:	71 f0       	breq	.+28     	; 0x2bf4 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2bde:	2e a5       	lds	r18, 0x6e
    2be0:	3f a5       	lds	r19, 0x6f
    2be2:	21 50       	subi	r18, 0x01	; 1
    2be4:	30 40       	sbci	r19, 0x00	; 0
    2be6:	3f a7       	lds	r19, 0x7f
    2be8:	2e a7       	lds	r18, 0x7e
    2bea:	8f ef       	ldi	r24, 0xFF	; 255
    2bec:	2f 3f       	cpi	r18, 0xFF	; 255
    2bee:	38 07       	cpc	r19, r24
    2bf0:	09 f0       	breq	.+2      	; 0x2bf4 <tune_filter+0x32a>
    2bf2:	70 cf       	rjmp	.-288    	; 0x2ad4 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2bf4:	ee a9       	sts	0x4e, r30
    2bf6:	ff a9       	sts	0x4f, r31
    2bf8:	31 96       	adiw	r30, 0x01	; 1
    2bfa:	ff ab       	sts	0x5f, r31
    2bfc:	ee ab       	sts	0x5e, r30
    2bfe:	c7 01       	movw	r24, r14
    2c00:	80 96       	adiw	r24, 0x20	; 32
    2c02:	e8 ad       	sts	0x68, r30
    2c04:	f9 ad       	sts	0x69, r31
    2c06:	81 93       	st	Z+, r24
    2c08:	91 93       	st	Z+, r25
    2c0a:	f9 af       	sts	0x79, r31
    2c0c:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2c0e:	ee e6       	ldi	r30, 0x6E	; 110
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	8d 7f       	andi	r24, 0xFD	; 253
    2c16:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2c18:	14 bc       	out	0x24, r1	; 36
    2c1a:	2c a9       	sts	0x4c, r18
    2c1c:	3d a9       	sts	0x4d, r19
    2c1e:	2d 5f       	subi	r18, 0xFD	; 253
    2c20:	3f 4f       	sbci	r19, 0xFF	; 255
    2c22:	3d ab       	sts	0x5d, r19
    2c24:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2c26:	8e a9       	sts	0x4e, r24
    2c28:	9f a9       	sts	0x4f, r25
    2c2a:	8f 30       	cpi	r24, 0x0F	; 15
    2c2c:	91 05       	cpc	r25, r1
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <tune_filter+0x368>
    2c30:	1d cf       	rjmp	.-454    	; 0x2a6c <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2c32:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2c34:	e9 96       	adiw	r28, 0x39	; 57
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	df 91       	pop	r29
    2c42:	cf 91       	pop	r28
    2c44:	1f 91       	pop	r17
    2c46:	0f 91       	pop	r16
    2c48:	ff 90       	pop	r15
    2c4a:	ef 90       	pop	r14
    2c4c:	df 90       	pop	r13
    2c4e:	cf 90       	pop	r12
    2c50:	bf 90       	pop	r11
    2c52:	af 90       	pop	r10
    2c54:	9f 90       	pop	r9
    2c56:	8f 90       	pop	r8
    2c58:	7f 90       	pop	r7
    2c5a:	6f 90       	pop	r6
    2c5c:	5f 90       	pop	r5
    2c5e:	4f 90       	pop	r4
    2c60:	3f 90       	pop	r3
    2c62:	2f 90       	pop	r2
    2c64:	08 95       	ret

00002c66 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2c66:	83 e1       	ldi	r24, 0x13	; 19
    2c68:	93 e0       	ldi	r25, 0x03	; 3
    2c6a:	6c e0       	ldi	r22, 0x0C	; 12
    2c6c:	76 e0       	ldi	r23, 0x06	; 6
    2c6e:	40 e2       	ldi	r20, 0x20	; 32
    2c70:	50 e0       	ldi	r21, 0x00	; 0
    2c72:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2c76:	85 e5       	ldi	r24, 0x55	; 85
    2c78:	93 e0       	ldi	r25, 0x03	; 3
    2c7a:	6e e4       	ldi	r22, 0x4E	; 78
    2c7c:	76 e0       	ldi	r23, 0x06	; 6
    2c7e:	42 e2       	ldi	r20, 0x22	; 34
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2c86:	83 e3       	ldi	r24, 0x33	; 51
    2c88:	93 e0       	ldi	r25, 0x03	; 3
    2c8a:	6c e2       	ldi	r22, 0x2C	; 44
    2c8c:	76 e0       	ldi	r23, 0x06	; 6
    2c8e:	42 e2       	ldi	r20, 0x22	; 34
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__eeupd_block_m6450a>
	
	
}
    2c96:	08 95       	ret

00002c98 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2c98:	82 e7       	ldi	r24, 0x72	; 114
    2c9a:	96 e0       	ldi	r25, 0x06	; 6
    2c9c:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__eerd_word_m6450a>
    2ca0:	90 93 7a 03 	sts	0x037A, r25
    2ca4:	80 93 79 03 	sts	0x0379, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2ca8:	80 e7       	ldi	r24, 0x70	; 112
    2caa:	96 e0       	ldi	r25, 0x06	; 6
    2cac:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__eerd_word_m6450a>
    2cb0:	90 93 78 03 	sts	0x0378, r25
    2cb4:	80 93 77 03 	sts	0x0377, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2cb8:	85 e5       	ldi	r24, 0x55	; 85
    2cba:	93 e0       	ldi	r25, 0x03	; 3
    2cbc:	6e e4       	ldi	r22, 0x4E	; 78
    2cbe:	76 e0       	ldi	r23, 0x06	; 6
    2cc0:	42 e2       	ldi	r20, 0x22	; 34
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2cc8:	83 e3       	ldi	r24, 0x33	; 51
    2cca:	93 e0       	ldi	r25, 0x03	; 3
    2ccc:	6c e2       	ldi	r22, 0x2C	; 44
    2cce:	76 e0       	ldi	r23, 0x06	; 6
    2cd0:	42 e2       	ldi	r20, 0x22	; 34
    2cd2:	50 e0       	ldi	r21, 0x00	; 0
    2cd4:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2cd8:	83 e1       	ldi	r24, 0x13	; 19
    2cda:	93 e0       	ldi	r25, 0x03	; 3
    2cdc:	6c e0       	ldi	r22, 0x0C	; 12
    2cde:	76 e0       	ldi	r23, 0x06	; 6
    2ce0:	40 e2       	ldi	r20, 0x20	; 32
    2ce2:	50 e0       	ldi	r21, 0x00	; 0
    2ce4:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2ce8:	08 95       	ret

00002cea <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2cea:	98 2f       	mov	r25, r24
    2cec:	96 95       	lsr	r25
    2cee:	96 95       	lsr	r25
    2cf0:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2cf2:	29 2f       	mov	r18, r25
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	f9 01       	movw	r30, r18
    2cf8:	31 97       	sbiw	r30, 0x01	; 1
    2cfa:	ee 0f       	add	r30, r30
    2cfc:	ff 1f       	adc	r31, r31
    2cfe:	e6 0f       	add	r30, r22
    2d00:	f7 1f       	adc	r31, r23
    2d02:	01 90       	ld	r0, Z+
    2d04:	f0 81       	ld	r31, Z
    2d06:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2d08:	22 0f       	add	r18, r18
    2d0a:	33 1f       	adc	r19, r19
    2d0c:	26 0f       	add	r18, r22
    2d0e:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2d10:	d9 01       	movw	r26, r18
    2d12:	4d 91       	ld	r20, X+
    2d14:	5c 91       	ld	r21, X
    2d16:	11 97       	sbiw	r26, 0x01	; 1
    2d18:	4e 1b       	sub	r20, r30
    2d1a:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2d1c:	99 0f       	add	r25, r25
    2d1e:	99 0f       	add	r25, r25
    2d20:	99 0f       	add	r25, r25
    2d22:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	48 9f       	mul	r20, r24
    2d28:	90 01       	movw	r18, r0
    2d2a:	49 9f       	mul	r20, r25
    2d2c:	30 0d       	add	r19, r0
    2d2e:	58 9f       	mul	r21, r24
    2d30:	30 0d       	add	r19, r0
    2d32:	11 24       	eor	r1, r1
    2d34:	36 95       	lsr	r19
    2d36:	27 95       	ror	r18
    2d38:	36 95       	lsr	r19
    2d3a:	27 95       	ror	r18
    2d3c:	36 95       	lsr	r19
    2d3e:	27 95       	ror	r18
    2d40:	e2 0f       	add	r30, r18
    2d42:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2d44:	8e 2f       	mov	r24, r30
    2d46:	9f 2f       	mov	r25, r31
    2d48:	08 95       	ret

00002d4a <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	a2 97       	sbiw	r28, 0x22	; 34
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2d5e:	de 01       	movw	r26, r28
    2d60:	11 96       	adiw	r26, 0x01	; 1
    2d62:	ed e8       	ldi	r30, 0x8D	; 141
    2d64:	f2 e0       	ldi	r31, 0x02	; 2
    2d66:	82 e2       	ldi	r24, 0x22	; 34
    2d68:	01 90       	ld	r0, Z+
    2d6a:	0d 92       	st	X+, r0
    2d6c:	81 50       	subi	r24, 0x01	; 1
    2d6e:	e1 f7       	brne	.-8      	; 0x2d68 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2d70:	a5 e5       	ldi	r26, 0x55	; 85
    2d72:	b3 e0       	ldi	r27, 0x03	; 3
    2d74:	fe 01       	movw	r30, r28
    2d76:	31 96       	adiw	r30, 0x01	; 1
    2d78:	82 e2       	ldi	r24, 0x22	; 34
    2d7a:	01 90       	ld	r0, Z+
    2d7c:	0d 92       	st	X+, r0
    2d7e:	81 50       	subi	r24, 0x01	; 1
    2d80:	e1 f7       	brne	.-8      	; 0x2d7a <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2d82:	a3 e3       	ldi	r26, 0x33	; 51
    2d84:	b3 e0       	ldi	r27, 0x03	; 3
    2d86:	fe 01       	movw	r30, r28
    2d88:	31 96       	adiw	r30, 0x01	; 1
    2d8a:	82 e2       	ldi	r24, 0x22	; 34
    2d8c:	01 90       	ld	r0, Z+
    2d8e:	0d 92       	st	X+, r0
    2d90:	81 50       	subi	r24, 0x01	; 1
    2d92:	e1 f7       	brne	.-8      	; 0x2d8c <set_one_volt_per_octave+0x42>
	
	
}
    2d94:	a2 96       	adiw	r28, 0x22	; 34
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	08 95       	ret

00002da6 <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2da6:	ef e6       	ldi	r30, 0x6F	; 111
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	82 70       	andi	r24, 0x02	; 2
    2dae:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2db0:	e1 e8       	ldi	r30, 0x81	; 129
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	87 7f       	andi	r24, 0xF7	; 247
    2db8:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2dba:	8f e0       	ldi	r24, 0x0F	; 15
    2dbc:	6f e0       	ldi	r22, 0x0F	; 15
    2dbe:	7e e5       	ldi	r23, 0x5E	; 94
    2dc0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <set_vco_init_cv>
    2dc4:	90 93 7a 03 	sts	0x037A, r25
    2dc8:	80 93 79 03 	sts	0x0379, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2dcc:	80 ef       	ldi	r24, 0xF0	; 240
    2dce:	6f e0       	ldi	r22, 0x0F	; 15
    2dd0:	7e e5       	ldi	r23, 0x5E	; 94
    2dd2:	0e 94 61 11 	call	0x22c2	; 0x22c2 <set_vco_init_cv>
    2dd6:	90 93 78 03 	sts	0x0378, r25
    2dda:	80 93 77 03 	sts	0x0377, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2dde:	8f e0       	ldi	r24, 0x0F	; 15
    2de0:	0e 94 c3 12 	call	0x2586	; 0x2586 <tune_8ths>
			tune_8ths(VCO2);
    2de4:	80 ef       	ldi	r24, 0xF0	; 240
    2de6:	0e 94 c3 12 	call	0x2586	; 0x2586 <tune_8ths>
			tune_filter();
    2dea:	0e 94 65 14 	call	0x28ca	; 0x28ca <tune_filter>
			save_tuning_tables();
    2dee:	0e 94 33 16 	call	0x2c66	; 0x2c66 <save_tuning_tables>
    2df2:	8f e4       	ldi	r24, 0x4F	; 79
    2df4:	93 ec       	ldi	r25, 0xC3	; 195
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <tune+0x50>
    2dfa:	00 c0       	rjmp	.+0      	; 0x2dfc <tune+0x56>
    2dfc:	00 00       	nop
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2dfe:	08 95       	ret

00002e00 <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2e00:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2e02:	98 2f       	mov	r25, r24
    2e04:	9c 70       	andi	r25, 0x0C	; 12
    2e06:	20 91 c5 02 	lds	r18, 0x02C5
    2e0a:	92 2b       	or	r25, r18
    2e0c:	90 93 c5 02 	sts	0x02C5, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2e10:	98 2f       	mov	r25, r24
    2e12:	92 95       	swap	r25
    2e14:	96 95       	lsr	r25
    2e16:	97 70       	andi	r25, 0x07	; 7
    2e18:	90 ff       	sbrs	r25, 0
    2e1a:	16 c0       	rjmp	.+44     	; 0x2e48 <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2e1c:	20 91 85 03 	lds	r18, 0x0385
    2e20:	30 91 86 03 	lds	r19, 0x0386
    2e24:	2f 5f       	subi	r18, 0xFF	; 255
    2e26:	3f 4f       	sbci	r19, 0xFF	; 255
    2e28:	30 93 86 03 	sts	0x0386, r19
    2e2c:	20 93 85 03 	sts	0x0385, r18
    2e30:	92 e0       	ldi	r25, 0x02	; 2
    2e32:	28 35       	cpi	r18, 0x58	; 88
    2e34:	39 07       	cpc	r19, r25
    2e36:	61 f4       	brne	.+24     	; 0x2e50 <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2e38:	10 92 86 03 	sts	0x0386, r1
    2e3c:	10 92 85 03 	sts	0x0385, r1
			current_patch.mode = CAL;
    2e40:	95 e0       	ldi	r25, 0x05	; 5
    2e42:	90 93 0b 03 	sts	0x030B, r25
    2e46:	04 c0       	rjmp	.+8      	; 0x2e50 <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2e48:	10 92 86 03 	sts	0x0386, r1
    2e4c:	10 92 85 03 	sts	0x0385, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2e50:	90 91 87 03 	lds	r25, 0x0387
    2e54:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2e56:	98 27       	eor	r25, r24
    2e58:	90 93 87 03 	sts	0x0387, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2e5c:	89 23       	and	r24, r25
    2e5e:	08 95       	ret

00002e60 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2e60:	ed ed       	ldi	r30, 0xDD	; 221
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	90 81       	ld	r25, Z
    2e66:	9f 7b       	andi	r25, 0xBF	; 191
    2e68:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	21 70       	andi	r18, 0x01	; 1
    2e70:	30 70       	andi	r19, 0x00	; 0
    2e72:	22 0f       	add	r18, r18
    2e74:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2e76:	68 2f       	mov	r22, r24
    2e78:	62 95       	swap	r22
    2e7a:	66 95       	lsr	r22
    2e7c:	67 70       	andi	r22, 0x07	; 7
    2e7e:	67 95       	ror	r22
    2e80:	66 27       	eor	r22, r22
    2e82:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2e84:	26 2b       	or	r18, r22
    2e86:	98 2f       	mov	r25, r24
    2e88:	96 95       	lsr	r25
    2e8a:	96 95       	lsr	r25
    2e8c:	91 70       	andi	r25, 0x01	; 1
    2e8e:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2e90:	68 2f       	mov	r22, r24
    2e92:	66 1f       	adc	r22, r22
    2e94:	66 27       	eor	r22, r22
    2e96:	66 1f       	adc	r22, r22
    2e98:	66 0f       	add	r22, r22
    2e9a:	66 0f       	add	r22, r22
    2e9c:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2e9e:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2ea0:	a8 2f       	mov	r26, r24
    2ea2:	a6 95       	lsr	r26
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	a1 70       	andi	r26, 0x01	; 1
    2ea8:	b0 70       	andi	r27, 0x00	; 0
    2eaa:	bd 01       	movw	r22, r26
    2eac:	66 0f       	add	r22, r22
    2eae:	77 1f       	adc	r23, r23
    2eb0:	66 0f       	add	r22, r22
    2eb2:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2eb4:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2eb6:	68 2f       	mov	r22, r24
    2eb8:	62 95       	swap	r22
    2eba:	6f 70       	andi	r22, 0x0F	; 15
    2ebc:	70 e0       	ldi	r23, 0x00	; 0
    2ebe:	61 70       	andi	r22, 0x01	; 1
    2ec0:	70 70       	andi	r23, 0x00	; 0
    2ec2:	ab 01       	movw	r20, r22
    2ec4:	00 24       	eor	r0, r0
    2ec6:	56 95       	lsr	r21
    2ec8:	47 95       	ror	r20
    2eca:	07 94       	ror	r0
    2ecc:	56 95       	lsr	r21
    2ece:	47 95       	ror	r20
    2ed0:	07 94       	ror	r0
    2ed2:	54 2f       	mov	r21, r20
    2ed4:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2ed6:	62 2f       	mov	r22, r18
    2ed8:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2eda:	48 2f       	mov	r20, r24
    2edc:	42 95       	swap	r20
    2ede:	46 95       	lsr	r20
    2ee0:	46 95       	lsr	r20
    2ee2:	43 70       	andi	r20, 0x03	; 3
    2ee4:	50 e0       	ldi	r21, 0x00	; 0
    2ee6:	41 70       	andi	r20, 0x01	; 1
    2ee8:	50 70       	andi	r21, 0x00	; 0
    2eea:	9a 01       	movw	r18, r20
    2eec:	22 0f       	add	r18, r18
    2eee:	33 1f       	adc	r19, r19
    2ef0:	22 95       	swap	r18
    2ef2:	32 95       	swap	r19
    2ef4:	30 7f       	andi	r19, 0xF0	; 240
    2ef6:	32 27       	eor	r19, r18
    2ef8:	20 7f       	andi	r18, 0xF0	; 240
    2efa:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2efc:	46 2f       	mov	r20, r22
    2efe:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2f00:	86 95       	lsr	r24
    2f02:	86 95       	lsr	r24
    2f04:	86 95       	lsr	r24
    2f06:	28 2f       	mov	r18, r24
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	21 70       	andi	r18, 0x01	; 1
    2f0c:	30 70       	andi	r19, 0x00	; 0
    2f0e:	c9 01       	movw	r24, r18
    2f10:	82 95       	swap	r24
    2f12:	92 95       	swap	r25
    2f14:	90 7f       	andi	r25, 0xF0	; 240
    2f16:	98 27       	eor	r25, r24
    2f18:	80 7f       	andi	r24, 0xF0	; 240
    2f1a:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2f1c:	84 2b       	or	r24, r20
    2f1e:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2f20:	80 81       	ld	r24, Z
    2f22:	80 64       	ori	r24, 0x40	; 64
    2f24:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2f26:	80 81       	ld	r24, Z
    2f28:	8f 7b       	andi	r24, 0xBF	; 191
    2f2a:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2f2c:	12 b8       	out	0x02, r1	; 2
	
	
    2f2e:	08 95       	ret

00002f30 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2f30:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2f32:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2f34:	74 83       	std	Z+4, r23	; 0x04
    2f36:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2f38:	11 82       	std	Z+1, r1	; 0x01
    2f3a:	10 82       	st	Z, r1
}
    2f3c:	08 95       	ret

00002f3e <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2f3e:	1f 93       	push	r17
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	ec 01       	movw	r28, r24
    2f46:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2f48:	0e 94 0e 18 	call	0x301c	; 0x301c <store_and_clear_interrupt>
    2f4c:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2f4e:	39 81       	ldd	r19, Y+1	; 0x01
    2f50:	83 2f       	mov	r24, r19
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	01 96       	adiw	r24, 0x01	; 1
    2f56:	6a 81       	ldd	r22, Y+2	; 0x02
    2f58:	70 e0       	ldi	r23, 0x00	; 0
    2f5a:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__divmodhi4>
    2f5e:	48 81       	ld	r20, Y
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	84 17       	cp	r24, r20
    2f64:	95 07       	cpc	r25, r21
    2f66:	29 f4       	brne	.+10     	; 0x2f72 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2f68:	82 2f       	mov	r24, r18
    2f6a:	0e 94 11 18 	call	0x3022	; 0x3022 <restore_interrupt_setting>
      return false;
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	11 c0       	rjmp	.+34     	; 0x2f94 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2f72:	eb 81       	ldd	r30, Y+3	; 0x03
    2f74:	fc 81       	ldd	r31, Y+4	; 0x04
    2f76:	e3 0f       	add	r30, r19
    2f78:	f1 1d       	adc	r31, r1
    2f7a:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	01 96       	adiw	r24, 0x01	; 1
    2f82:	6a 81       	ldd	r22, Y+2	; 0x02
    2f84:	70 e0       	ldi	r23, 0x00	; 0
    2f86:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__divmodhi4>
    2f8a:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2f8c:	82 2f       	mov	r24, r18
    2f8e:	0e 94 11 18 	call	0x3022	; 0x3022 <restore_interrupt_setting>
      return true;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	08 95       	ret

00002f9c <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2fa2:	0e 94 0e 18 	call	0x301c	; 0x301c <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2fa6:	29 81       	ldd	r18, Y+1	; 0x01
    2fa8:	98 81       	ld	r25, Y
    2faa:	29 17       	cp	r18, r25
    2fac:	18 f0       	brcs	.+6      	; 0x2fb4 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2fae:	c2 2f       	mov	r28, r18
    2fb0:	c9 1b       	sub	r28, r25
    2fb2:	03 c0       	rjmp	.+6      	; 0x2fba <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2fb4:	ca 81       	ldd	r28, Y+2	; 0x02
    2fb6:	c2 0f       	add	r28, r18
    2fb8:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2fba:	0e 94 11 18 	call	0x3022	; 0x3022 <restore_interrupt_setting>
   return len;
}
    2fbe:	8c 2f       	mov	r24, r28
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	08 95       	ret

00002fc6 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2fc6:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2fc8:	20 81       	ld	r18, Z
    2fca:	86 2f       	mov	r24, r22
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	82 0f       	add	r24, r18
    2fd0:	91 1d       	adc	r25, r1
    2fd2:	62 81       	ldd	r22, Z+2	; 0x02
    2fd4:	70 e0       	ldi	r23, 0x00	; 0
    2fd6:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__divmodhi4>
    2fda:	03 80       	ldd	r0, Z+3	; 0x03
    2fdc:	f4 81       	ldd	r31, Z+4	; 0x04
    2fde:	e0 2d       	mov	r30, r0
    2fe0:	e8 0f       	add	r30, r24
    2fe2:	f9 1f       	adc	r31, r25
}
    2fe4:	80 81       	ld	r24, Z
    2fe6:	08 95       	ret

00002fe8 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2fe8:	1f 93       	push	r17
    2fea:	cf 93       	push	r28
    2fec:	df 93       	push	r29
    2fee:	ec 01       	movw	r28, r24
    2ff0:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2ff2:	0e 94 0e 18 	call	0x301c	; 0x301c <store_and_clear_interrupt>
    2ff6:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2ff8:	88 81       	ld	r24, Y
    2ffa:	21 2f       	mov	r18, r17
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	28 0f       	add	r18, r24
    3000:	31 1d       	adc	r19, r1
    3002:	6a 81       	ldd	r22, Y+2	; 0x02
    3004:	c9 01       	movw	r24, r18
    3006:	70 e0       	ldi	r23, 0x00	; 0
    3008:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__divmodhi4>
    300c:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    300e:	84 2f       	mov	r24, r20
    3010:	0e 94 11 18 	call	0x3022	; 0x3022 <restore_interrupt_setting>
}
    3014:	df 91       	pop	r29
    3016:	cf 91       	pop	r28
    3018:	1f 91       	pop	r17
    301a:	08 95       	ret

0000301c <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    301c:	8f b7       	in	r24, 0x3f	; 63
   cli();
    301e:	f8 94       	cli
   return sreg;
}
    3020:	08 95       	ret

00003022 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    3022:	8f bf       	out	0x3f, r24	; 63
}
    3024:	08 95       	ret

00003026 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    3026:	88 1f       	adc	r24, r24
    3028:	88 27       	eor	r24, r24
    302a:	88 1f       	adc	r24, r24
    302c:	08 95       	ret

0000302e <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    302e:	91 e0       	ldi	r25, 0x01	; 1
    3030:	88 3f       	cpi	r24, 0xF8	; 248
    3032:	08 f4       	brcc	.+2      	; 0x3036 <midi_is_realtime+0x8>
    3034:	90 e0       	ldi	r25, 0x00	; 0
}
    3036:	89 2f       	mov	r24, r25
    3038:	08 95       	ret

0000303a <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    303a:	28 2f       	mov	r18, r24
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	20 7f       	andi	r18, 0xF0	; 240
    3040:	30 70       	andi	r19, 0x00	; 0
    3042:	20 3c       	cpi	r18, 0xC0	; 192
    3044:	31 05       	cpc	r19, r1
    3046:	e9 f1       	breq	.+122    	; 0x30c2 <midi_packet_length+0x88>
    3048:	21 3c       	cpi	r18, 0xC1	; 193
    304a:	31 05       	cpc	r19, r1
    304c:	8c f4       	brge	.+34     	; 0x3070 <midi_packet_length+0x36>
    304e:	20 39       	cpi	r18, 0x90	; 144
    3050:	31 05       	cpc	r19, r1
    3052:	e1 f0       	breq	.+56     	; 0x308c <midi_packet_length+0x52>
    3054:	21 39       	cpi	r18, 0x91	; 145
    3056:	31 05       	cpc	r19, r1
    3058:	24 f4       	brge	.+8      	; 0x3062 <midi_packet_length+0x28>
    305a:	20 38       	cpi	r18, 0x80	; 128
    305c:	31 05       	cpc	r19, r1
    305e:	79 f5       	brne	.+94     	; 0x30be <midi_packet_length+0x84>
    3060:	15 c0       	rjmp	.+42     	; 0x308c <midi_packet_length+0x52>
    3062:	20 3a       	cpi	r18, 0xA0	; 160
    3064:	31 05       	cpc	r19, r1
    3066:	91 f0       	breq	.+36     	; 0x308c <midi_packet_length+0x52>
    3068:	20 3b       	cpi	r18, 0xB0	; 176
    306a:	31 05       	cpc	r19, r1
    306c:	41 f5       	brne	.+80     	; 0x30be <midi_packet_length+0x84>
    306e:	0e c0       	rjmp	.+28     	; 0x308c <midi_packet_length+0x52>
    3070:	20 3e       	cpi	r18, 0xE0	; 224
    3072:	31 05       	cpc	r19, r1
    3074:	59 f0       	breq	.+22     	; 0x308c <midi_packet_length+0x52>
    3076:	21 3e       	cpi	r18, 0xE1	; 225
    3078:	31 05       	cpc	r19, r1
    307a:	24 f4       	brge	.+8      	; 0x3084 <midi_packet_length+0x4a>
    307c:	20 3d       	cpi	r18, 0xD0	; 208
    307e:	31 05       	cpc	r19, r1
    3080:	f1 f4       	brne	.+60     	; 0x30be <midi_packet_length+0x84>
    3082:	1f c0       	rjmp	.+62     	; 0x30c2 <midi_packet_length+0x88>
    3084:	20 3f       	cpi	r18, 0xF0	; 240
    3086:	31 05       	cpc	r19, r1
    3088:	d1 f4       	brne	.+52     	; 0x30be <midi_packet_length+0x84>
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    308c:	83 e0       	ldi	r24, 0x03	; 3
    308e:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    3090:	86 3f       	cpi	r24, 0xF6	; 246
    3092:	79 f0       	breq	.+30     	; 0x30b2 <midi_packet_length+0x78>
    3094:	87 3f       	cpi	r24, 0xF7	; 247
    3096:	38 f4       	brcc	.+14     	; 0x30a6 <midi_packet_length+0x6c>
    3098:	82 3f       	cpi	r24, 0xF2	; 242
    309a:	a9 f0       	breq	.+42     	; 0x30c6 <midi_packet_length+0x8c>
    309c:	83 3f       	cpi	r24, 0xF3	; 243
    309e:	59 f0       	breq	.+22     	; 0x30b6 <midi_packet_length+0x7c>
    30a0:	81 3f       	cpi	r24, 0xF1	; 241
    30a2:	59 f4       	brne	.+22     	; 0x30ba <midi_packet_length+0x80>
    30a4:	08 c0       	rjmp	.+16     	; 0x30b6 <midi_packet_length+0x7c>
    30a6:	88 3f       	cpi	r24, 0xF8	; 248
    30a8:	40 f0       	brcs	.+16     	; 0x30ba <midi_packet_length+0x80>
    30aa:	8d 3f       	cpi	r24, 0xFD	; 253
    30ac:	10 f0       	brcs	.+4      	; 0x30b2 <midi_packet_length+0x78>
    30ae:	8e 3f       	cpi	r24, 0xFE	; 254
    30b0:	20 f0       	brcs	.+8      	; 0x30ba <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    30b6:	82 e0       	ldi	r24, 0x02	; 2
    30b8:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	08 95       	ret
         }
      default:
         return UNDEFINED;
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    30c2:	82 e0       	ldi	r24, 0x02	; 2
    30c4:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    30c6:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    30c8:	08 95       	ret

000030ca <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    30ca:	0f 93       	push	r16
    30cc:	34 2f       	mov	r19, r20
    30ce:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    30d0:	46 2f       	mov	r20, r22
    30d2:	4f 70       	andi	r20, 0x0F	; 15
    30d4:	40 6b       	ori	r20, 0xB0	; 176
    30d6:	23 2f       	mov	r18, r19
    30d8:	2f 77       	andi	r18, 0x7F	; 127
    30da:	0f 77       	andi	r16, 0x7F	; 127
    30dc:	dc 01       	movw	r26, r24
    30de:	ed 91       	ld	r30, X+
    30e0:	fc 91       	ld	r31, X
    30e2:	63 e0       	ldi	r22, 0x03	; 3
    30e4:	70 e0       	ldi	r23, 0x00	; 0
    30e6:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    30e8:	0f 91       	pop	r16
    30ea:	08 95       	ret

000030ec <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    30ec:	0f 93       	push	r16
    30ee:	34 2f       	mov	r19, r20
    30f0:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    30f2:	46 2f       	mov	r20, r22
    30f4:	4f 70       	andi	r20, 0x0F	; 15
    30f6:	40 69       	ori	r20, 0x90	; 144
    30f8:	23 2f       	mov	r18, r19
    30fa:	2f 77       	andi	r18, 0x7F	; 127
    30fc:	0f 77       	andi	r16, 0x7F	; 127
    30fe:	dc 01       	movw	r26, r24
    3100:	ed 91       	ld	r30, X+
    3102:	fc 91       	ld	r31, X
    3104:	63 e0       	ldi	r22, 0x03	; 3
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    310a:	0f 91       	pop	r16
    310c:	08 95       	ret

0000310e <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    310e:	0f 93       	push	r16
    3110:	34 2f       	mov	r19, r20
    3112:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    3114:	46 2f       	mov	r20, r22
    3116:	4f 70       	andi	r20, 0x0F	; 15
    3118:	40 68       	ori	r20, 0x80	; 128
    311a:	23 2f       	mov	r18, r19
    311c:	2f 77       	andi	r18, 0x7F	; 127
    311e:	0f 77       	andi	r16, 0x7F	; 127
    3120:	dc 01       	movw	r26, r24
    3122:	ed 91       	ld	r30, X+
    3124:	fc 91       	ld	r31, X
    3126:	63 e0       	ldi	r22, 0x03	; 3
    3128:	70 e0       	ldi	r23, 0x00	; 0
    312a:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    312c:	0f 91       	pop	r16
    312e:	08 95       	ret

00003130 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    3130:	0f 93       	push	r16
    3132:	34 2f       	mov	r19, r20
    3134:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    3136:	46 2f       	mov	r20, r22
    3138:	4f 70       	andi	r20, 0x0F	; 15
    313a:	40 6a       	ori	r20, 0xA0	; 160
    313c:	23 2f       	mov	r18, r19
    313e:	2f 77       	andi	r18, 0x7F	; 127
    3140:	0f 77       	andi	r16, 0x7F	; 127
    3142:	dc 01       	movw	r26, r24
    3144:	ed 91       	ld	r30, X+
    3146:	fc 91       	ld	r31, X
    3148:	63 e0       	ldi	r22, 0x03	; 3
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    314e:	0f 91       	pop	r16
    3150:	08 95       	ret

00003152 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    3156:	20 e2       	ldi	r18, 0x20	; 32
    3158:	40 30       	cpi	r20, 0x00	; 0
    315a:	52 07       	cpc	r21, r18
    315c:	44 f4       	brge	.+16     	; 0x316e <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    315e:	a0 ee       	ldi	r26, 0xE0	; 224
    3160:	40 30       	cpi	r20, 0x00	; 0
    3162:	5a 07       	cpc	r21, r26
    3164:	3c f0       	brlt	.+14     	; 0x3174 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    3166:	8a 01       	movw	r16, r20
    3168:	00 50       	subi	r16, 0x00	; 0
    316a:	10 4e       	sbci	r17, 0xE0	; 224
    316c:	05 c0       	rjmp	.+10     	; 0x3178 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    316e:	0f ef       	ldi	r16, 0xFF	; 255
    3170:	1f e3       	ldi	r17, 0x3F	; 63
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    3174:	00 e0       	ldi	r16, 0x00	; 0
    3176:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    3178:	46 2f       	mov	r20, r22
    317a:	4f 70       	andi	r20, 0x0F	; 15
    317c:	40 6e       	ori	r20, 0xE0	; 224
    317e:	20 2f       	mov	r18, r16
    3180:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    3182:	00 0f       	add	r16, r16
    3184:	01 2f       	mov	r16, r17
    3186:	00 1f       	adc	r16, r16
    3188:	11 0b       	sbc	r17, r17
    318a:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    318c:	0f 77       	andi	r16, 0x7F	; 127
    318e:	dc 01       	movw	r26, r24
    3190:	ed 91       	ld	r30, X+
    3192:	fc 91       	ld	r31, X
    3194:	63 e0       	ldi	r22, 0x03	; 3
    3196:	70 e0       	ldi	r23, 0x00	; 0
    3198:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	08 95       	ret

000031a0 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    31a0:	0f 93       	push	r16
    31a2:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    31a4:	46 2f       	mov	r20, r22
    31a6:	4f 70       	andi	r20, 0x0F	; 15
    31a8:	40 6c       	ori	r20, 0xC0	; 192
    31aa:	2f 77       	andi	r18, 0x7F	; 127
    31ac:	dc 01       	movw	r26, r24
    31ae:	ed 91       	ld	r30, X+
    31b0:	fc 91       	ld	r31, X
    31b2:	62 e0       	ldi	r22, 0x02	; 2
    31b4:	70 e0       	ldi	r23, 0x00	; 0
    31b6:	00 e0       	ldi	r16, 0x00	; 0
    31b8:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    31ba:	0f 91       	pop	r16
    31bc:	08 95       	ret

000031be <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    31be:	0f 93       	push	r16
    31c0:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    31c2:	46 2f       	mov	r20, r22
    31c4:	4f 70       	andi	r20, 0x0F	; 15
    31c6:	40 6d       	ori	r20, 0xD0	; 208
    31c8:	2f 77       	andi	r18, 0x7F	; 127
    31ca:	dc 01       	movw	r26, r24
    31cc:	ed 91       	ld	r30, X+
    31ce:	fc 91       	ld	r31, X
    31d0:	62 e0       	ldi	r22, 0x02	; 2
    31d2:	70 e0       	ldi	r23, 0x00	; 0
    31d4:	00 e0       	ldi	r16, 0x00	; 0
    31d6:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    31d8:	0f 91       	pop	r16
    31da:	08 95       	ret

000031dc <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    31dc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    31de:	dc 01       	movw	r26, r24
    31e0:	ed 91       	ld	r30, X+
    31e2:	fc 91       	ld	r31, X
    31e4:	61 e0       	ldi	r22, 0x01	; 1
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	48 ef       	ldi	r20, 0xF8	; 248
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	00 e0       	ldi	r16, 0x00	; 0
    31ee:	09 95       	icall
}
    31f0:	0f 91       	pop	r16
    31f2:	08 95       	ret

000031f4 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    31f4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    31f6:	dc 01       	movw	r26, r24
    31f8:	ed 91       	ld	r30, X+
    31fa:	fc 91       	ld	r31, X
    31fc:	61 e0       	ldi	r22, 0x01	; 1
    31fe:	70 e0       	ldi	r23, 0x00	; 0
    3200:	49 ef       	ldi	r20, 0xF9	; 249
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	00 e0       	ldi	r16, 0x00	; 0
    3206:	09 95       	icall
}
    3208:	0f 91       	pop	r16
    320a:	08 95       	ret

0000320c <midi_send_start>:

void midi_send_start(MidiDevice * device){
    320c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    320e:	dc 01       	movw	r26, r24
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	61 e0       	ldi	r22, 0x01	; 1
    3216:	70 e0       	ldi	r23, 0x00	; 0
    3218:	4a ef       	ldi	r20, 0xFA	; 250
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	00 e0       	ldi	r16, 0x00	; 0
    321e:	09 95       	icall
}
    3220:	0f 91       	pop	r16
    3222:	08 95       	ret

00003224 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    3224:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    3226:	dc 01       	movw	r26, r24
    3228:	ed 91       	ld	r30, X+
    322a:	fc 91       	ld	r31, X
    322c:	61 e0       	ldi	r22, 0x01	; 1
    322e:	70 e0       	ldi	r23, 0x00	; 0
    3230:	4b ef       	ldi	r20, 0xFB	; 251
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	00 e0       	ldi	r16, 0x00	; 0
    3236:	09 95       	icall
}
    3238:	0f 91       	pop	r16
    323a:	08 95       	ret

0000323c <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    323c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    323e:	dc 01       	movw	r26, r24
    3240:	ed 91       	ld	r30, X+
    3242:	fc 91       	ld	r31, X
    3244:	61 e0       	ldi	r22, 0x01	; 1
    3246:	70 e0       	ldi	r23, 0x00	; 0
    3248:	4c ef       	ldi	r20, 0xFC	; 252
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	00 e0       	ldi	r16, 0x00	; 0
    324e:	09 95       	icall
}
    3250:	0f 91       	pop	r16
    3252:	08 95       	ret

00003254 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    3254:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    3256:	dc 01       	movw	r26, r24
    3258:	ed 91       	ld	r30, X+
    325a:	fc 91       	ld	r31, X
    325c:	61 e0       	ldi	r22, 0x01	; 1
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	4e ef       	ldi	r20, 0xFE	; 254
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	00 e0       	ldi	r16, 0x00	; 0
    3266:	09 95       	icall
}
    3268:	0f 91       	pop	r16
    326a:	08 95       	ret

0000326c <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    326c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    326e:	dc 01       	movw	r26, r24
    3270:	ed 91       	ld	r30, X+
    3272:	fc 91       	ld	r31, X
    3274:	61 e0       	ldi	r22, 0x01	; 1
    3276:	70 e0       	ldi	r23, 0x00	; 0
    3278:	4f ef       	ldi	r20, 0xFF	; 255
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	00 e0       	ldi	r16, 0x00	; 0
    327e:	09 95       	icall
}
    3280:	0f 91       	pop	r16
    3282:	08 95       	ret

00003284 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    3284:	0f 93       	push	r16
   device->send_func(device, 2,
    3286:	26 2f       	mov	r18, r22
    3288:	2f 77       	andi	r18, 0x7F	; 127
    328a:	dc 01       	movw	r26, r24
    328c:	ed 91       	ld	r30, X+
    328e:	fc 91       	ld	r31, X
    3290:	62 e0       	ldi	r22, 0x02	; 2
    3292:	70 e0       	ldi	r23, 0x00	; 0
    3294:	41 ef       	ldi	r20, 0xF1	; 241
    3296:	00 e0       	ldi	r16, 0x00	; 0
    3298:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    329a:	0f 91       	pop	r16
    329c:	08 95       	ret

0000329e <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    329e:	0f 93       	push	r16
    32a0:	1f 93       	push	r17
   device->send_func(device, 3,
    32a2:	26 2f       	mov	r18, r22
    32a4:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    32a6:	8b 01       	movw	r16, r22
    32a8:	00 0f       	add	r16, r16
    32aa:	01 2f       	mov	r16, r17
    32ac:	00 1f       	adc	r16, r16
    32ae:	11 0b       	sbc	r17, r17
    32b0:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    32b2:	0f 77       	andi	r16, 0x7F	; 127
    32b4:	dc 01       	movw	r26, r24
    32b6:	ed 91       	ld	r30, X+
    32b8:	fc 91       	ld	r31, X
    32ba:	63 e0       	ldi	r22, 0x03	; 3
    32bc:	70 e0       	ldi	r23, 0x00	; 0
    32be:	42 ef       	ldi	r20, 0xF2	; 242
    32c0:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    32c2:	1f 91       	pop	r17
    32c4:	0f 91       	pop	r16
    32c6:	08 95       	ret

000032c8 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    32c8:	0f 93       	push	r16
   device->send_func(device, 2,
    32ca:	26 2f       	mov	r18, r22
    32cc:	2f 77       	andi	r18, 0x7F	; 127
    32ce:	dc 01       	movw	r26, r24
    32d0:	ed 91       	ld	r30, X+
    32d2:	fc 91       	ld	r31, X
    32d4:	62 e0       	ldi	r22, 0x02	; 2
    32d6:	70 e0       	ldi	r23, 0x00	; 0
    32d8:	43 ef       	ldi	r20, 0xF3	; 243
    32da:	00 e0       	ldi	r16, 0x00	; 0
    32dc:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    32de:	0f 91       	pop	r16
    32e0:	08 95       	ret

000032e2 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    32e2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    32e4:	dc 01       	movw	r26, r24
    32e6:	ed 91       	ld	r30, X+
    32e8:	fc 91       	ld	r31, X
    32ea:	61 e0       	ldi	r22, 0x01	; 1
    32ec:	70 e0       	ldi	r23, 0x00	; 0
    32ee:	46 ef       	ldi	r20, 0xF6	; 246
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	00 e0       	ldi	r16, 0x00	; 0
    32f4:	09 95       	icall
}
    32f6:	0f 91       	pop	r16
    32f8:	08 95       	ret

000032fa <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    32fa:	0f 93       	push	r16
    32fc:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    32fe:	dc 01       	movw	r26, r24
    3300:	ed 91       	ld	r30, X+
    3302:	fc 91       	ld	r31, X
    3304:	61 e0       	ldi	r22, 0x01	; 1
    3306:	70 e0       	ldi	r23, 0x00	; 0
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	00 e0       	ldi	r16, 0x00	; 0
    330c:	09 95       	icall
}
    330e:	0f 91       	pop	r16
    3310:	08 95       	ret

00003312 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    3312:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    3314:	dc 01       	movw	r26, r24
    3316:	ed 91       	ld	r30, X+
    3318:	fc 91       	ld	r31, X
    331a:	09 95       	icall
}
    331c:	0f 91       	pop	r16
    331e:	08 95       	ret

00003320 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    3320:	6f 92       	push	r6
    3322:	7f 92       	push	r7
    3324:	8f 92       	push	r8
    3326:	9f 92       	push	r9
    3328:	af 92       	push	r10
    332a:	bf 92       	push	r11
    332c:	cf 92       	push	r12
    332e:	df 92       	push	r13
    3330:	ef 92       	push	r14
    3332:	ff 92       	push	r15
    3334:	0f 93       	push	r16
    3336:	1f 93       	push	r17
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	00 d0       	rcall	.+0      	; 0x333e <midi_send_array+0x1e>
    333e:	0f 92       	push	r0
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	4c 01       	movw	r8, r24
    3346:	6b 01       	movw	r12, r22
    3348:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    334a:	61 15       	cp	r22, r1
    334c:	71 05       	cpc	r23, r1
    334e:	41 f1       	breq	.+80     	; 0x33a0 <midi_send_array+0x80>
    3350:	ee 24       	eor	r14, r14
    3352:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    3354:	0f 2e       	mov	r0, r31
    3356:	f3 e0       	ldi	r31, 0x03	; 3
    3358:	6f 2e       	mov	r6, r31
    335a:	77 24       	eor	r7, r7
    335c:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    335e:	19 82       	std	Y+1, r1	; 0x01
    3360:	1a 82       	std	Y+2, r1	; 0x02
    3362:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    3364:	86 01       	movw	r16, r12
    3366:	0e 19       	sub	r16, r14
    3368:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    336a:	04 30       	cpi	r16, 0x04	; 4
    336c:	11 05       	cpc	r17, r1
    336e:	08 f0       	brcs	.+2      	; 0x3372 <midi_send_array+0x52>
    3370:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    3372:	b5 01       	movw	r22, r10
    3374:	6e 0d       	add	r22, r14
    3376:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    3378:	ce 01       	movw	r24, r28
    337a:	01 96       	adiw	r24, 0x01	; 1
    337c:	40 2f       	mov	r20, r16
    337e:	51 2f       	mov	r21, r17
    3380:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    3384:	c4 01       	movw	r24, r8
    3386:	b8 01       	movw	r22, r16
    3388:	49 81       	ldd	r20, Y+1	; 0x01
    338a:	2a 81       	ldd	r18, Y+2	; 0x02
    338c:	0b 81       	ldd	r16, Y+3	; 0x03
    338e:	0e 94 89 19 	call	0x3312	; 0x3312 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    3392:	83 e0       	ldi	r24, 0x03	; 3
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	e8 0e       	add	r14, r24
    3398:	f9 1e       	adc	r15, r25
    339a:	ec 14       	cp	r14, r12
    339c:	fd 04       	cpc	r15, r13
    339e:	f8 f2       	brcs	.-66     	; 0x335e <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	df 91       	pop	r29
    33a8:	cf 91       	pop	r28
    33aa:	1f 91       	pop	r17
    33ac:	0f 91       	pop	r16
    33ae:	ff 90       	pop	r15
    33b0:	ef 90       	pop	r14
    33b2:	df 90       	pop	r13
    33b4:	cf 90       	pop	r12
    33b6:	bf 90       	pop	r11
    33b8:	af 90       	pop	r10
    33ba:	9f 90       	pop	r9
    33bc:	8f 90       	pop	r8
    33be:	7f 90       	pop	r7
    33c0:	6f 90       	pop	r6
    33c2:	08 95       	ret

000033c4 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    33c4:	fc 01       	movw	r30, r24
    33c6:	73 83       	std	Z+3, r23	; 0x03
    33c8:	62 83       	std	Z+2, r22	; 0x02
}
    33ca:	08 95       	ret

000033cc <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    33cc:	fc 01       	movw	r30, r24
    33ce:	75 83       	std	Z+5, r23	; 0x05
    33d0:	64 83       	std	Z+4, r22	; 0x04
}
    33d2:	08 95       	ret

000033d4 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    33d4:	fc 01       	movw	r30, r24
    33d6:	77 83       	std	Z+7, r23	; 0x07
    33d8:	66 83       	std	Z+6, r22	; 0x06
}
    33da:	08 95       	ret

000033dc <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    33dc:	fc 01       	movw	r30, r24
    33de:	71 87       	std	Z+9, r23	; 0x09
    33e0:	60 87       	std	Z+8, r22	; 0x08
}
    33e2:	08 95       	ret

000033e4 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    33e4:	fc 01       	movw	r30, r24
    33e6:	73 87       	std	Z+11, r23	; 0x0b
    33e8:	62 87       	std	Z+10, r22	; 0x0a
}
    33ea:	08 95       	ret

000033ec <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    33ec:	fc 01       	movw	r30, r24
    33ee:	75 87       	std	Z+13, r23	; 0x0d
    33f0:	64 87       	std	Z+12, r22	; 0x0c
}
    33f2:	08 95       	ret

000033f4 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    33f4:	fc 01       	movw	r30, r24
    33f6:	77 87       	std	Z+15, r23	; 0x0f
    33f8:	66 87       	std	Z+14, r22	; 0x0e
}
    33fa:	08 95       	ret

000033fc <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    33fc:	fc 01       	movw	r30, r24
    33fe:	71 8b       	std	Z+17, r23	; 0x11
    3400:	60 8b       	std	Z+16, r22	; 0x10
}
    3402:	08 95       	ret

00003404 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    3404:	fc 01       	movw	r30, r24
    3406:	73 8b       	std	Z+19, r23	; 0x13
    3408:	62 8b       	std	Z+18, r22	; 0x12
}
    340a:	08 95       	ret

0000340c <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    340c:	fc 01       	movw	r30, r24
    340e:	75 8b       	std	Z+21, r23	; 0x15
    3410:	64 8b       	std	Z+20, r22	; 0x14
}
    3412:	08 95       	ret

00003414 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    3414:	fc 01       	movw	r30, r24
    3416:	77 8b       	std	Z+23, r23	; 0x17
    3418:	66 8b       	std	Z+22, r22	; 0x16
}
    341a:	08 95       	ret

0000341c <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    341c:	fc 01       	movw	r30, r24
    341e:	71 8f       	std	Z+25, r23	; 0x19
    3420:	60 8f       	std	Z+24, r22	; 0x18
}
    3422:	08 95       	ret

00003424 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    3424:	fc 01       	movw	r30, r24
    3426:	73 8f       	std	Z+27, r23	; 0x1b
    3428:	62 8f       	std	Z+26, r22	; 0x1a
}
    342a:	08 95       	ret

0000342c <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    342c:	fc 01       	movw	r30, r24
    342e:	75 8f       	std	Z+29, r23	; 0x1d
    3430:	64 8f       	std	Z+28, r22	; 0x1c
}
    3432:	08 95       	ret

00003434 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    3434:	fc 01       	movw	r30, r24
    3436:	77 8f       	std	Z+31, r23	; 0x1f
    3438:	66 8f       	std	Z+30, r22	; 0x1e
}
    343a:	08 95       	ret

0000343c <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    343c:	cf 93       	push	r28
    343e:	df 93       	push	r29
    3440:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    3442:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    3444:	1f a2       	lds	r17, 0x9f
    3446:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    3448:	bc 01       	movw	r22, r24
    344a:	68 5d       	subi	r22, 0xD8	; 216
    344c:	7f 4f       	sbci	r23, 0xFF	; 255
    344e:	88 51       	subi	r24, 0x18	; 24
    3450:	9f 4f       	sbci	r25, 0xFF	; 255
    3452:	40 ec       	ldi	r20, 0xC0	; 192
    3454:	0e 94 98 17 	call	0x2f30	; 0x2f30 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    3458:	1b 82       	std	Y+3, r1	; 0x03
    345a:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    345c:	1d 82       	std	Y+5, r1	; 0x05
    345e:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    3460:	1f 82       	std	Y+7, r1	; 0x07
    3462:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    3464:	19 86       	std	Y+9, r1	; 0x09
    3466:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    3468:	1b 86       	std	Y+11, r1	; 0x0b
    346a:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    346c:	1d 86       	std	Y+13, r1	; 0x0d
    346e:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    3470:	1f 86       	std	Y+15, r1	; 0x0f
    3472:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    3474:	19 8a       	std	Y+17, r1	; 0x11
    3476:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    3478:	1b 8a       	std	Y+19, r1	; 0x13
    347a:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    347c:	1d 8a       	std	Y+21, r1	; 0x15
    347e:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    3480:	1f 8a       	std	Y+23, r1	; 0x17
    3482:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    3484:	19 8e       	std	Y+25, r1	; 0x19
    3486:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    3488:	1b 8e       	std	Y+27, r1	; 0x1b
    348a:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    348c:	1d 8e       	std	Y+29, r1	; 0x1d
    348e:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    3490:	1f 8e       	std	Y+31, r1	; 0x1f
    3492:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    3494:	19 a2       	lds	r17, 0x99
    3496:	18 a2       	lds	r17, 0x98
}
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	08 95       	ret

0000349e <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    349e:	ef 92       	push	r14
    34a0:	ff 92       	push	r15
    34a2:	0f 93       	push	r16
    34a4:	1f 93       	push	r17
    34a6:	cf 93       	push	r28
    34a8:	df 93       	push	r29
    34aa:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    34ac:	66 23       	and	r22, r22
    34ae:	99 f0       	breq	.+38     	; 0x34d6 <midi_device_input+0x38>
    34b0:	04 2f       	mov	r16, r20
    34b2:	15 2f       	mov	r17, r21
    34b4:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    34b6:	0f 2e       	mov	r0, r31
    34b8:	f8 ee       	ldi	r31, 0xE8	; 232
    34ba:	ef 2e       	mov	r14, r31
    34bc:	ff 24       	eor	r15, r15
    34be:	f0 2d       	mov	r31, r0
    34c0:	e8 0e       	add	r14, r24
    34c2:	f9 1e       	adc	r15, r25
    34c4:	f8 01       	movw	r30, r16
    34c6:	61 91       	ld	r22, Z+
    34c8:	8f 01       	movw	r16, r30
    34ca:	c7 01       	movw	r24, r14
    34cc:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    34d0:	cf 5f       	subi	r28, 0xFF	; 255
    34d2:	cd 17       	cp	r28, r29
    34d4:	b9 f7       	brne	.-18     	; 0x34c4 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	1f 91       	pop	r17
    34dc:	0f 91       	pop	r16
    34de:	ff 90       	pop	r15
    34e0:	ef 90       	pop	r14
    34e2:	08 95       	ret

000034e4 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    34e4:	fc 01       	movw	r30, r24
    34e6:	71 83       	std	Z+1, r23	; 0x01
    34e8:	60 83       	st	Z, r22
}
    34ea:	08 95       	ret

000034ec <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    34ec:	fc 01       	movw	r30, r24
    34ee:	71 a3       	lds	r23, 0x51
    34f0:	60 a3       	lds	r22, 0x50
}
    34f2:	08 95       	ret

000034f4 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    34f4:	af 92       	push	r10
    34f6:	bf 92       	push	r11
    34f8:	cf 92       	push	r12
    34fa:	df 92       	push	r13
    34fc:	ef 92       	push	r14
    34fe:	ff 92       	push	r15
    3500:	0f 93       	push	r16
    3502:	1f 93       	push	r17
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	00 d0       	rcall	.+0      	; 0x350a <midi_input_callbacks+0x16>
    350a:	0f 92       	push	r0
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
    3510:	6c 01       	movw	r12, r24
    3512:	5b 01       	movw	r10, r22
    3514:	f4 2e       	mov	r15, r20
    3516:	e2 2e       	mov	r14, r18
    3518:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    351a:	dc 01       	movw	r26, r24
    351c:	95 96       	adiw	r26, 0x25	; 37
    351e:	8c 91       	ld	r24, X
    3520:	95 97       	sbiw	r26, 0x25	; 37
    3522:	84 30       	cpi	r24, 0x04	; 4
    3524:	e9 f4       	brne	.+58     	; 0x3560 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    3526:	5a 96       	adiw	r26, 0x1a	; 26
    3528:	ed 91       	ld	r30, X+
    352a:	fc 91       	ld	r31, X
    352c:	5b 97       	sbiw	r26, 0x1b	; 27
    352e:	30 97       	sbiw	r30, 0x00	; 0
    3530:	09 f4       	brne	.+2      	; 0x3534 <midi_input_callbacks+0x40>
    3532:	ee c0       	rjmp	.+476    	; 0x3710 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    3534:	cb 01       	movw	r24, r22
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	63 e0       	ldi	r22, 0x03	; 3
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    3540:	cb 01       	movw	r24, r22
    3542:	88 0f       	add	r24, r24
    3544:	99 1f       	adc	r25, r25
    3546:	68 0f       	add	r22, r24
    3548:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    354a:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    354c:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    354e:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    3550:	4a 2d       	mov	r20, r10
    3552:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    3554:	c6 01       	movw	r24, r12
    3556:	9e 01       	movw	r18, r28
    3558:	2f 5f       	subi	r18, 0xFF	; 255
    355a:	3f 4f       	sbci	r19, 0xFF	; 255
    355c:	09 95       	icall
    355e:	c8 c0       	rjmp	.+400    	; 0x36f0 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    3560:	62 30       	cpi	r22, 0x02	; 2
    3562:	71 05       	cpc	r23, r1
    3564:	09 f4       	brne	.+2      	; 0x3568 <midi_input_callbacks+0x74>
    3566:	5f c0       	rjmp	.+190    	; 0x3626 <midi_input_callbacks+0x132>
    3568:	63 30       	cpi	r22, 0x03	; 3
    356a:	71 05       	cpc	r23, r1
    356c:	29 f0       	breq	.+10     	; 0x3578 <midi_input_callbacks+0x84>
    356e:	61 30       	cpi	r22, 0x01	; 1
    3570:	71 05       	cpc	r23, r1
    3572:	09 f0       	breq	.+2      	; 0x3576 <midi_input_callbacks+0x82>
    3574:	b3 c0       	rjmp	.+358    	; 0x36dc <midi_input_callbacks+0x1e8>
    3576:	99 c0       	rjmp	.+306    	; 0x36aa <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3578:	84 2f       	mov	r24, r20
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	80 7f       	andi	r24, 0xF0	; 240
    357e:	90 70       	andi	r25, 0x00	; 0
    3580:	80 3a       	cpi	r24, 0xA0	; 160
    3582:	91 05       	cpc	r25, r1
    3584:	29 f1       	breq	.+74     	; 0x35d0 <midi_input_callbacks+0xdc>
    3586:	81 3a       	cpi	r24, 0xA1	; 161
    3588:	91 05       	cpc	r25, r1
    358a:	3c f4       	brge	.+14     	; 0x359a <midi_input_callbacks+0xa6>
    358c:	80 38       	cpi	r24, 0x80	; 128
    358e:	91 05       	cpc	r25, r1
    3590:	c9 f0       	breq	.+50     	; 0x35c4 <midi_input_callbacks+0xd0>
    3592:	80 39       	cpi	r24, 0x90	; 144
    3594:	91 05       	cpc	r25, r1
    3596:	91 f5       	brne	.+100    	; 0x35fc <midi_input_callbacks+0x108>
    3598:	0f c0       	rjmp	.+30     	; 0x35b8 <midi_input_callbacks+0xc4>
    359a:	80 3e       	cpi	r24, 0xE0	; 224
    359c:	91 05       	cpc	r25, r1
    359e:	f1 f0       	breq	.+60     	; 0x35dc <midi_input_callbacks+0xe8>
    35a0:	80 3f       	cpi	r24, 0xF0	; 240
    35a2:	91 05       	cpc	r25, r1
    35a4:	09 f1       	breq	.+66     	; 0x35e8 <midi_input_callbacks+0xf4>
    35a6:	80 3b       	cpi	r24, 0xB0	; 176
    35a8:	91 05       	cpc	r25, r1
    35aa:	41 f5       	brne	.+80     	; 0x35fc <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    35ac:	d6 01       	movw	r26, r12
    35ae:	12 96       	adiw	r26, 0x02	; 2
    35b0:	ed 91       	ld	r30, X+
    35b2:	fc 91       	ld	r31, X
    35b4:	13 97       	sbiw	r26, 0x03	; 3
              break;
    35b6:	24 c0       	rjmp	.+72     	; 0x3600 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    35b8:	d6 01       	movw	r26, r12
    35ba:	14 96       	adiw	r26, 0x04	; 4
    35bc:	ed 91       	ld	r30, X+
    35be:	fc 91       	ld	r31, X
    35c0:	15 97       	sbiw	r26, 0x05	; 5
              break;
    35c2:	1e c0       	rjmp	.+60     	; 0x3600 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    35c4:	d6 01       	movw	r26, r12
    35c6:	16 96       	adiw	r26, 0x06	; 6
    35c8:	ed 91       	ld	r30, X+
    35ca:	fc 91       	ld	r31, X
    35cc:	17 97       	sbiw	r26, 0x07	; 7
              break;
    35ce:	18 c0       	rjmp	.+48     	; 0x3600 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    35d0:	d6 01       	movw	r26, r12
    35d2:	18 96       	adiw	r26, 0x08	; 8
    35d4:	ed 91       	ld	r30, X+
    35d6:	fc 91       	ld	r31, X
    35d8:	19 97       	sbiw	r26, 0x09	; 9
              break;
    35da:	12 c0       	rjmp	.+36     	; 0x3600 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    35dc:	d6 01       	movw	r26, r12
    35de:	1a 96       	adiw	r26, 0x0a	; 10
    35e0:	ed 91       	ld	r30, X+
    35e2:	fc 91       	ld	r31, X
    35e4:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    35e6:	0c c0       	rjmp	.+24     	; 0x3600 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    35e8:	b2 ef       	ldi	r27, 0xF2	; 242
    35ea:	4b 17       	cp	r20, r27
    35ec:	09 f0       	breq	.+2      	; 0x35f0 <midi_input_callbacks+0xfc>
    35ee:	90 c0       	rjmp	.+288    	; 0x3710 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    35f0:	d6 01       	movw	r26, r12
    35f2:	1c 96       	adiw	r26, 0x0c	; 12
    35f4:	ed 91       	ld	r30, X+
    35f6:	fc 91       	ld	r31, X
    35f8:	1d 97       	sbiw	r26, 0x0d	; 13
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    35fc:	e0 e0       	ldi	r30, 0x00	; 0
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    3600:	30 97       	sbiw	r30, 0x00	; 0
    3602:	09 f4       	brne	.+2      	; 0x3606 <midi_input_callbacks+0x112>
    3604:	85 c0       	rjmp	.+266    	; 0x3710 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    3606:	b2 ef       	ldi	r27, 0xF2	; 242
    3608:	fb 16       	cp	r15, r27
    360a:	31 f4       	brne	.+12     	; 0x3618 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    360c:	c6 01       	movw	r24, r12
    360e:	62 ef       	ldi	r22, 0xF2	; 242
    3610:	4e 2d       	mov	r20, r14
    3612:	21 2f       	mov	r18, r17
    3614:	09 95       	icall
    3616:	6c c0       	rjmp	.+216    	; 0x36f0 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    3618:	6f 2d       	mov	r22, r15
    361a:	6f 70       	andi	r22, 0x0F	; 15
    361c:	c6 01       	movw	r24, r12
    361e:	4e 2d       	mov	r20, r14
    3620:	21 2f       	mov	r18, r17
    3622:	09 95       	icall
    3624:	65 c0       	rjmp	.+202    	; 0x36f0 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3626:	84 2f       	mov	r24, r20
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	80 7f       	andi	r24, 0xF0	; 240
    362c:	90 70       	andi	r25, 0x00	; 0
    362e:	80 3d       	cpi	r24, 0xD0	; 208
    3630:	91 05       	cpc	r25, r1
    3632:	61 f0       	breq	.+24     	; 0x364c <midi_input_callbacks+0x158>
    3634:	80 3f       	cpi	r24, 0xF0	; 240
    3636:	91 05       	cpc	r25, r1
    3638:	79 f0       	breq	.+30     	; 0x3658 <midi_input_callbacks+0x164>
    363a:	80 3c       	cpi	r24, 0xC0	; 192
    363c:	91 05       	cpc	r25, r1
    363e:	f9 f4       	brne	.+62     	; 0x367e <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    3640:	d6 01       	movw	r26, r12
    3642:	1e 96       	adiw	r26, 0x0e	; 14
    3644:	ed 91       	ld	r30, X+
    3646:	fc 91       	ld	r31, X
    3648:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    364a:	1b c0       	rjmp	.+54     	; 0x3682 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    364c:	d6 01       	movw	r26, r12
    364e:	50 96       	adiw	r26, 0x10	; 16
    3650:	ed 91       	ld	r30, X+
    3652:	fc 91       	ld	r31, X
    3654:	51 97       	sbiw	r26, 0x11	; 17
              break;
    3656:	15 c0       	rjmp	.+42     	; 0x3682 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    3658:	b3 ef       	ldi	r27, 0xF3	; 243
    365a:	4b 17       	cp	r20, r27
    365c:	31 f4       	brne	.+12     	; 0x366a <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    365e:	d6 01       	movw	r26, r12
    3660:	52 96       	adiw	r26, 0x12	; 18
    3662:	ed 91       	ld	r30, X+
    3664:	fc 91       	ld	r31, X
    3666:	53 97       	sbiw	r26, 0x13	; 19
    3668:	0c c0       	rjmp	.+24     	; 0x3682 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    366a:	b1 ef       	ldi	r27, 0xF1	; 241
    366c:	4b 17       	cp	r20, r27
    366e:	09 f0       	breq	.+2      	; 0x3672 <midi_input_callbacks+0x17e>
    3670:	4f c0       	rjmp	.+158    	; 0x3710 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    3672:	d6 01       	movw	r26, r12
    3674:	54 96       	adiw	r26, 0x14	; 20
    3676:	ed 91       	ld	r30, X+
    3678:	fc 91       	ld	r31, X
    367a:	55 97       	sbiw	r26, 0x15	; 21
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    367e:	e0 e0       	ldi	r30, 0x00	; 0
    3680:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    3682:	30 97       	sbiw	r30, 0x00	; 0
    3684:	09 f4       	brne	.+2      	; 0x3688 <midi_input_callbacks+0x194>
    3686:	44 c0       	rjmp	.+136    	; 0x3710 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    3688:	b3 ef       	ldi	r27, 0xF3	; 243
    368a:	fb 16       	cp	r15, r27
    368c:	19 f0       	breq	.+6      	; 0x3694 <midi_input_callbacks+0x1a0>
    368e:	81 ef       	ldi	r24, 0xF1	; 241
    3690:	f8 16       	cp	r15, r24
    3692:	29 f4       	brne	.+10     	; 0x369e <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    3694:	c6 01       	movw	r24, r12
    3696:	6f 2d       	mov	r22, r15
    3698:	4e 2d       	mov	r20, r14
    369a:	09 95       	icall
    369c:	29 c0       	rjmp	.+82     	; 0x36f0 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    369e:	6f 2d       	mov	r22, r15
    36a0:	6f 70       	andi	r22, 0x0F	; 15
    36a2:	c6 01       	movw	r24, r12
    36a4:	4e 2d       	mov	r20, r14
    36a6:	09 95       	icall
    36a8:	23 c0       	rjmp	.+70     	; 0x36f0 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    36aa:	84 2f       	mov	r24, r20
    36ac:	0e 94 17 18 	call	0x302e	; 0x302e <midi_is_realtime>
    36b0:	88 23       	and	r24, r24
    36b2:	31 f0       	breq	.+12     	; 0x36c0 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    36b4:	d6 01       	movw	r26, r12
    36b6:	56 96       	adiw	r26, 0x16	; 22
    36b8:	ed 91       	ld	r30, X+
    36ba:	fc 91       	ld	r31, X
    36bc:	57 97       	sbiw	r26, 0x17	; 23
    36be:	08 c0       	rjmp	.+16     	; 0x36d0 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    36c0:	b6 ef       	ldi	r27, 0xF6	; 246
    36c2:	fb 16       	cp	r15, r27
    36c4:	29 f5       	brne	.+74     	; 0x3710 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    36c6:	d6 01       	movw	r26, r12
    36c8:	58 96       	adiw	r26, 0x18	; 24
    36ca:	ed 91       	ld	r30, X+
    36cc:	fc 91       	ld	r31, X
    36ce:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    36d0:	30 97       	sbiw	r30, 0x00	; 0
    36d2:	f1 f0       	breq	.+60     	; 0x3710 <midi_input_callbacks+0x21c>
            func(device, byte0);
    36d4:	c6 01       	movw	r24, r12
    36d6:	6f 2d       	mov	r22, r15
    36d8:	09 95       	icall
    36da:	0a c0       	rjmp	.+20     	; 0x36f0 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    36dc:	64 30       	cpi	r22, 0x04	; 4
    36de:	71 05       	cpc	r23, r1
    36e0:	a8 f4       	brcc	.+42     	; 0x370c <midi_input_callbacks+0x218>
    36e2:	16 c0       	rjmp	.+44     	; 0x3710 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    36e4:	c6 01       	movw	r24, r12
    36e6:	b5 01       	movw	r22, r10
    36e8:	4f 2d       	mov	r20, r15
    36ea:	2e 2d       	mov	r18, r14
    36ec:	01 2f       	mov	r16, r17
    36ee:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    36f0:	d6 01       	movw	r26, r12
    36f2:	5e 96       	adiw	r26, 0x1e	; 30
    36f4:	ed 91       	ld	r30, X+
    36f6:	fc 91       	ld	r31, X
    36f8:	5f 97       	sbiw	r26, 0x1f	; 31
    36fa:	30 97       	sbiw	r30, 0x00	; 0
    36fc:	89 f0       	breq	.+34     	; 0x3720 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    36fe:	c6 01       	movw	r24, r12
    3700:	b5 01       	movw	r22, r10
    3702:	4f 2d       	mov	r20, r15
    3704:	2e 2d       	mov	r18, r14
    3706:	01 2f       	mov	r16, r17
    3708:	09 95       	icall
    370a:	0a c0       	rjmp	.+20     	; 0x3720 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    370c:	aa 24       	eor	r10, r10
    370e:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    3710:	d6 01       	movw	r26, r12
    3712:	5c 96       	adiw	r26, 0x1c	; 28
    3714:	ed 91       	ld	r30, X+
    3716:	fc 91       	ld	r31, X
    3718:	5d 97       	sbiw	r26, 0x1d	; 29
    371a:	30 97       	sbiw	r30, 0x00	; 0
    371c:	19 f7       	brne	.-58     	; 0x36e4 <midi_input_callbacks+0x1f0>
    371e:	e8 cf       	rjmp	.-48     	; 0x36f0 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	df 91       	pop	r29
    3728:	cf 91       	pop	r28
    372a:	1f 91       	pop	r17
    372c:	0f 91       	pop	r16
    372e:	ff 90       	pop	r15
    3730:	ef 90       	pop	r14
    3732:	df 90       	pop	r13
    3734:	cf 90       	pop	r12
    3736:	bf 90       	pop	r11
    3738:	af 90       	pop	r10
    373a:	08 95       	ret

0000373c <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    373c:	ef 92       	push	r14
    373e:	ff 92       	push	r15
    3740:	0f 93       	push	r16
    3742:	cf 93       	push	r28
    3744:	df 93       	push	r29
    3746:	7c 01       	movw	r14, r24
    3748:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    374a:	86 2f       	mov	r24, r22
    374c:	0e 94 17 18 	call	0x302e	; 0x302e <midi_is_realtime>
    3750:	88 23       	and	r24, r24
    3752:	91 f0       	breq	.+36     	; 0x3778 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    3754:	d7 01       	movw	r26, r14
    3756:	95 96       	adiw	r26, 0x25	; 37
    3758:	dc 91       	ld	r29, X
    375a:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	95 96       	adiw	r26, 0x25	; 37
    3760:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    3762:	c7 01       	movw	r24, r14
    3764:	61 e0       	ldi	r22, 0x01	; 1
    3766:	70 e0       	ldi	r23, 0x00	; 0
    3768:	4c 2f       	mov	r20, r28
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	00 e0       	ldi	r16, 0x00	; 0
    376e:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <midi_input_callbacks>
    device->input_state = state;
    3772:	f7 01       	movw	r30, r14
    3774:	d5 a3       	lds	r29, 0x55
    3776:	b7 c0       	rjmp	.+366    	; 0x38e6 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    3778:	8c 2f       	mov	r24, r28
    377a:	0e 94 13 18 	call	0x3026	; 0x3026 <midi_is_statusbyte>
    377e:	88 23       	and	r24, r24
    3780:	09 f4       	brne	.+2      	; 0x3784 <midi_process_byte+0x48>
    3782:	73 c0       	rjmp	.+230    	; 0x386a <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    3784:	d7 01       	movw	r26, r14
    3786:	95 96       	adiw	r26, 0x25	; 37
    3788:	8c 91       	ld	r24, X
    378a:	95 97       	sbiw	r26, 0x25	; 37
    378c:	84 30       	cpi	r24, 0x04	; 4
    378e:	49 f0       	breq	.+18     	; 0x37a2 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    3790:	92 96       	adiw	r26, 0x22	; 34
    3792:	cc 93       	st	X, r28
    3794:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	97 96       	adiw	r26, 0x27	; 39
    379c:	9c 93       	st	X, r25
    379e:	8e 93       	st	-X, r24
    37a0:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    37a2:	8c 2f       	mov	r24, r28
    37a4:	0e 94 1d 18 	call	0x303a	; 0x303a <midi_packet_length>
    37a8:	81 30       	cpi	r24, 0x01	; 1
    37aa:	41 f0       	breq	.+16     	; 0x37bc <midi_process_byte+0x80>
    37ac:	81 30       	cpi	r24, 0x01	; 1
    37ae:	00 f1       	brcs	.+64     	; 0x37f0 <midi_process_byte+0xb4>
    37b0:	82 30       	cpi	r24, 0x02	; 2
    37b2:	a1 f0       	breq	.+40     	; 0x37dc <midi_process_byte+0xa0>
    37b4:	83 30       	cpi	r24, 0x03	; 3
    37b6:	09 f0       	breq	.+2      	; 0x37ba <midi_process_byte+0x7e>
    37b8:	4f c0       	rjmp	.+158    	; 0x3858 <midi_process_byte+0x11c>
    37ba:	14 c0       	rjmp	.+40     	; 0x37e4 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	f7 01       	movw	r30, r14
    37c0:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    37c2:	c7 01       	movw	r24, r14
    37c4:	61 e0       	ldi	r22, 0x01	; 1
    37c6:	70 e0       	ldi	r23, 0x00	; 0
    37c8:	4c 2f       	mov	r20, r28
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	00 e0       	ldi	r16, 0x00	; 0
    37ce:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <midi_input_callbacks>
        device->input_state = IDLE;
    37d2:	d7 01       	movw	r26, r14
    37d4:	95 96       	adiw	r26, 0x25	; 37
    37d6:	1c 92       	st	X, r1
    37d8:	95 97       	sbiw	r26, 0x25	; 37
        break;
    37da:	85 c0       	rjmp	.+266    	; 0x38e6 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    37dc:	82 e0       	ldi	r24, 0x02	; 2
    37de:	f7 01       	movw	r30, r14
    37e0:	85 a3       	lds	r24, 0x55
        break;
    37e2:	81 c0       	rjmp	.+258    	; 0x38e6 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    37e4:	83 e0       	ldi	r24, 0x03	; 3
    37e6:	d7 01       	movw	r26, r14
    37e8:	95 96       	adiw	r26, 0x25	; 37
    37ea:	8c 93       	st	X, r24
    37ec:	95 97       	sbiw	r26, 0x25	; 37
        break;
    37ee:	7b c0       	rjmp	.+246    	; 0x38e6 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    37f0:	c0 3f       	cpi	r28, 0xF0	; 240
    37f2:	19 f0       	breq	.+6      	; 0x37fa <midi_process_byte+0xbe>
    37f4:	c7 3f       	cpi	r28, 0xF7	; 247
    37f6:	59 f5       	brne	.+86     	; 0x384e <midi_process_byte+0x112>
    37f8:	0a c0       	rjmp	.+20     	; 0x380e <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    37fa:	84 e0       	ldi	r24, 0x04	; 4
    37fc:	f7 01       	movw	r30, r14
    37fe:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    3800:	80 ef       	ldi	r24, 0xF0	; 240
    3802:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	97 a3       	lds	r25, 0x57
    380a:	86 a3       	lds	r24, 0x56
            break;
    380c:	6c c0       	rjmp	.+216    	; 0x38e6 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    380e:	d7 01       	movw	r26, r14
    3810:	96 96       	adiw	r26, 0x26	; 38
    3812:	2d 91       	ld	r18, X+
    3814:	3c 91       	ld	r19, X
    3816:	97 97       	sbiw	r26, 0x27	; 39
    3818:	c9 01       	movw	r24, r18
    381a:	63 e0       	ldi	r22, 0x03	; 3
    381c:	70 e0       	ldi	r23, 0x00	; 0
    381e:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    3822:	f7 01       	movw	r30, r14
    3824:	e8 0f       	add	r30, r24
    3826:	f9 1f       	adc	r31, r25
    3828:	87 ef       	ldi	r24, 0xF7	; 247
    382a:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    382c:	b9 01       	movw	r22, r18
    382e:	6f 5f       	subi	r22, 0xFF	; 255
    3830:	7f 4f       	sbci	r23, 0xFF	; 255
    3832:	f7 01       	movw	r30, r14
    3834:	77 a3       	lds	r23, 0x57
    3836:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3838:	c7 01       	movw	r24, r14
    383a:	42 a1       	lds	r20, 0x42
    383c:	23 a1       	lds	r18, 0x43
    383e:	04 a1       	lds	r16, 0x44
    3840:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3844:	d7 01       	movw	r26, r14
    3846:	95 96       	adiw	r26, 0x25	; 37
    3848:	1c 92       	st	X, r1
    384a:	95 97       	sbiw	r26, 0x25	; 37
            break;
    384c:	4c c0       	rjmp	.+152    	; 0x38e6 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    384e:	f7 01       	movw	r30, r14
    3850:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    3852:	17 a2       	lds	r17, 0x97
    3854:	16 a2       	lds	r17, 0x96
    3856:	47 c0       	rjmp	.+142    	; 0x38e6 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    3858:	d7 01       	movw	r26, r14
    385a:	95 96       	adiw	r26, 0x25	; 37
    385c:	1c 92       	st	X, r1
    385e:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    3860:	97 96       	adiw	r26, 0x27	; 39
    3862:	1c 92       	st	X, r1
    3864:	1e 92       	st	-X, r1
    3866:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3868:	3e c0       	rjmp	.+124    	; 0x38e6 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    386a:	f7 01       	movw	r30, r14
    386c:	25 a1       	lds	r18, 0x45
    386e:	22 23       	and	r18, r18
    3870:	d1 f1       	breq	.+116    	; 0x38e6 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    3872:	06 a0       	lds	r16, 0x86
    3874:	f7 a1       	lds	r31, 0x47
    3876:	e0 2d       	mov	r30, r0
    3878:	cf 01       	movw	r24, r30
    387a:	63 e0       	ldi	r22, 0x03	; 3
    387c:	70 e0       	ldi	r23, 0x00	; 0
    387e:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    3882:	ac 01       	movw	r20, r24
    3884:	8e 0d       	add	r24, r14
    3886:	9f 1d       	adc	r25, r15
    3888:	dc 01       	movw	r26, r24
    388a:	92 96       	adiw	r26, 0x22	; 34
    388c:	cc 93       	st	X, r28
    388e:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    3890:	bf 01       	movw	r22, r30
    3892:	6f 5f       	subi	r22, 0xFF	; 255
    3894:	7f 4f       	sbci	r23, 0xFF	; 255
    3896:	f7 01       	movw	r30, r14
    3898:	77 a3       	lds	r23, 0x57
    389a:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    389c:	41 30       	cpi	r20, 0x01	; 1
    389e:	51 05       	cpc	r21, r1
    38a0:	91 f0       	breq	.+36     	; 0x38c6 <midi_process_byte+0x18a>
    38a2:	42 30       	cpi	r20, 0x02	; 2
    38a4:	51 05       	cpc	r21, r1
    38a6:	f9 f4       	brne	.+62     	; 0x38e6 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    38a8:	c7 01       	movw	r24, r14
    38aa:	42 a1       	lds	r20, 0x42
    38ac:	23 a1       	lds	r18, 0x43
    38ae:	04 a1       	lds	r16, 0x44
    38b0:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    38b4:	f7 01       	movw	r30, r14
    38b6:	85 a1       	lds	r24, 0x45
    38b8:	84 30       	cpi	r24, 0x04	; 4
    38ba:	a9 f0       	breq	.+42     	; 0x38e6 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	97 a3       	lds	r25, 0x57
    38c2:	86 a3       	lds	r24, 0x56
    38c4:	10 c0       	rjmp	.+32     	; 0x38e6 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    38c6:	22 30       	cpi	r18, 0x02	; 2
    38c8:	71 f4       	brne	.+28     	; 0x38e6 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    38ca:	c7 01       	movw	r24, r14
    38cc:	42 a1       	lds	r20, 0x42
    38ce:	23 a1       	lds	r18, 0x43
    38d0:	00 e0       	ldi	r16, 0x00	; 0
    38d2:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    38d6:	f7 01       	movw	r30, r14
    38d8:	85 a1       	lds	r24, 0x45
    38da:	84 30       	cpi	r24, 0x04	; 4
    38dc:	21 f0       	breq	.+8      	; 0x38e6 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	97 a3       	lds	r25, 0x57
    38e4:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    38e6:	df 91       	pop	r29
    38e8:	cf 91       	pop	r28
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	08 95       	ret

000038f2 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    38f2:	cf 92       	push	r12
    38f4:	df 92       	push	r13
    38f6:	ef 92       	push	r14
    38f8:	ff 92       	push	r15
    38fa:	0f 93       	push	r16
    38fc:	1f 93       	push	r17
    38fe:	cf 93       	push	r28
    3900:	df 93       	push	r29
    3902:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    3904:	dc 01       	movw	r26, r24
    3906:	90 96       	adiw	r26, 0x20	; 32
    3908:	ed 91       	ld	r30, X+
    390a:	fc 91       	ld	r31, X
    390c:	91 97       	sbiw	r26, 0x21	; 33
    390e:	30 97       	sbiw	r30, 0x00	; 0
    3910:	09 f0       	breq	.+2      	; 0x3914 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    3912:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    3914:	0f 2e       	mov	r0, r31
    3916:	f8 ee       	ldi	r31, 0xE8	; 232
    3918:	ef 2e       	mov	r14, r31
    391a:	ff 24       	eor	r15, r15
    391c:	f0 2d       	mov	r31, r0
    391e:	ec 0c       	add	r14, r12
    3920:	fd 1c       	adc	r15, r13
    3922:	c7 01       	movw	r24, r14
    3924:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3928:	c8 2f       	mov	r28, r24
    392a:	d0 e0       	ldi	r29, 0x00	; 0
    392c:	20 97       	sbiw	r28, 0x00	; 0
    392e:	99 f0       	breq	.+38     	; 0x3956 <midi_device_process+0x64>
    3930:	00 e0       	ldi	r16, 0x00	; 0
    3932:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    3934:	c7 01       	movw	r24, r14
    3936:	60 e0       	ldi	r22, 0x00	; 0
    3938:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <bytequeue_get>
    393c:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    393e:	c6 01       	movw	r24, r12
    3940:	0e 94 9e 1b 	call	0x373c	; 0x373c <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3944:	c7 01       	movw	r24, r14
    3946:	61 e0       	ldi	r22, 0x01	; 1
    3948:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    394c:	0f 5f       	subi	r16, 0xFF	; 255
    394e:	1f 4f       	sbci	r17, 0xFF	; 255
    3950:	0c 17       	cp	r16, r28
    3952:	1d 07       	cpc	r17, r29
    3954:	78 f3       	brcs	.-34     	; 0x3934 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    3956:	df 91       	pop	r29
    3958:	cf 91       	pop	r28
    395a:	1f 91       	pop	r17
    395c:	0f 91       	pop	r16
    395e:	ff 90       	pop	r15
    3960:	ef 90       	pop	r14
    3962:	df 90       	pop	r13
    3964:	cf 90       	pop	r12
    3966:	08 95       	ret

00003968 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3968:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    396a:	67 e0       	ldi	r22, 0x07	; 7
    396c:	70 e0       	ldi	r23, 0x00	; 0
    396e:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    3972:	48 2f       	mov	r20, r24
   if (remainder)
    3974:	88 23       	and	r24, r24
    3976:	81 f0       	breq	.+32     	; 0x3998 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    3978:	c9 01       	movw	r24, r18
    397a:	67 e0       	ldi	r22, 0x07	; 7
    397c:	70 e0       	ldi	r23, 0x00	; 0
    397e:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    3982:	cb 01       	movw	r24, r22
    3984:	88 0f       	add	r24, r24
    3986:	99 1f       	adc	r25, r25
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	01 96       	adiw	r24, 0x01	; 1
    3992:	84 0f       	add	r24, r20
    3994:	91 1d       	adc	r25, r1
    3996:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3998:	c9 01       	movw	r24, r18
    399a:	67 e0       	ldi	r22, 0x07	; 7
    399c:	70 e0       	ldi	r23, 0x00	; 0
    399e:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    39a2:	cb 01       	movw	r24, r22
    39a4:	88 0f       	add	r24, r24
    39a6:	99 1f       	adc	r25, r25
    39a8:	88 0f       	add	r24, r24
    39aa:	99 1f       	adc	r25, r25
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
}
    39b0:	08 95       	ret

000039b2 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    39b2:	48 2f       	mov	r20, r24
    39b4:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    39b6:	a1 f0       	breq	.+40     	; 0x39e0 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    39b8:	9c 01       	movw	r18, r24
    39ba:	36 95       	lsr	r19
    39bc:	27 95       	ror	r18
    39be:	36 95       	lsr	r19
    39c0:	27 95       	ror	r18
    39c2:	36 95       	lsr	r19
    39c4:	27 95       	ror	r18
    39c6:	c9 01       	movw	r24, r18
    39c8:	88 0f       	add	r24, r24
    39ca:	99 1f       	adc	r25, r25
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	88 0f       	add	r24, r24
    39d2:	99 1f       	adc	r25, r25
    39d4:	82 1b       	sub	r24, r18
    39d6:	93 0b       	sbc	r25, r19
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	84 0f       	add	r24, r20
    39dc:	91 1d       	adc	r25, r1
    39de:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    39e0:	9c 01       	movw	r18, r24
    39e2:	36 95       	lsr	r19
    39e4:	27 95       	ror	r18
    39e6:	36 95       	lsr	r19
    39e8:	27 95       	ror	r18
    39ea:	36 95       	lsr	r19
    39ec:	27 95       	ror	r18
    39ee:	c9 01       	movw	r24, r18
    39f0:	88 0f       	add	r24, r24
    39f2:	99 1f       	adc	r25, r25
    39f4:	88 0f       	add	r24, r24
    39f6:	99 1f       	adc	r25, r25
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	82 1b       	sub	r24, r18
    39fe:	93 0b       	sbc	r25, r19
}
    3a00:	08 95       	ret

00003a02 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3a02:	2f 92       	push	r2
    3a04:	3f 92       	push	r3
    3a06:	4f 92       	push	r4
    3a08:	5f 92       	push	r5
    3a0a:	6f 92       	push	r6
    3a0c:	7f 92       	push	r7
    3a0e:	8f 92       	push	r8
    3a10:	9f 92       	push	r9
    3a12:	af 92       	push	r10
    3a14:	bf 92       	push	r11
    3a16:	cf 92       	push	r12
    3a18:	df 92       	push	r13
    3a1a:	ef 92       	push	r14
    3a1c:	ff 92       	push	r15
    3a1e:	0f 93       	push	r16
    3a20:	1f 93       	push	r17
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <sysex_encode+0x26>
    3a28:	00 d0       	rcall	.+0      	; 0x3a2a <sysex_encode+0x28>
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <sysex_encode+0x2a>
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	1c 01       	movw	r2, r24
    3a32:	7a 83       	std	Y+2, r23	; 0x02
    3a34:	69 83       	std	Y+1, r22	; 0x01
    3a36:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3a38:	ca 01       	movw	r24, r20
    3a3a:	67 e0       	ldi	r22, 0x07	; 7
    3a3c:	70 e0       	ldi	r23, 0x00	; 0
    3a3e:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    3a42:	2b 01       	movw	r4, r22
    3a44:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3a46:	61 15       	cp	r22, r1
    3a48:	71 05       	cpc	r23, r1
    3a4a:	b1 f1       	breq	.+108    	; 0x3ab8 <sysex_encode+0xb6>
    3a4c:	81 01       	movw	r16, r2
    3a4e:	e9 80       	ldd	r14, Y+1	; 0x01
    3a50:	fa 80       	ldd	r15, Y+2	; 0x02
    3a52:	cc 24       	eor	r12, r12
    3a54:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3a56:	88 24       	eor	r8, r8
    3a58:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3a5a:	1e 83       	std	Y+6, r17	; 0x06
    3a5c:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    3a5e:	f8 01       	movw	r30, r16
    3a60:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3a62:	fc 82       	std	Y+4, r15	; 0x04
    3a64:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3a66:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3a68:	ab 81       	ldd	r26, Y+3	; 0x03
    3a6a:	bc 81       	ldd	r27, Y+4	; 0x04
    3a6c:	2d 91       	ld	r18, X+
    3a6e:	bc 83       	std	Y+4, r27	; 0x04
    3a70:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3a72:	4f 5f       	subi	r20, 0xFF	; 255
    3a74:	5f 4f       	sbci	r21, 0xFF	; 255
    3a76:	82 2f       	mov	r24, r18
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	80 78       	andi	r24, 0x80	; 128
    3a7c:	90 70       	andi	r25, 0x00	; 0
    3a7e:	bc 01       	movw	r22, r24
    3a80:	04 2e       	mov	r0, r20
    3a82:	02 c0       	rjmp	.+4      	; 0x3a88 <sysex_encode+0x86>
    3a84:	75 95       	asr	r23
    3a86:	67 95       	ror	r22
    3a88:	0a 94       	dec	r0
    3a8a:	e2 f7       	brpl	.-8      	; 0x3a84 <sysex_encode+0x82>
    3a8c:	ad 81       	ldd	r26, Y+5	; 0x05
    3a8e:	be 81       	ldd	r27, Y+6	; 0x06
    3a90:	8c 91       	ld	r24, X
    3a92:	86 2b       	or	r24, r22
    3a94:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3a96:	2f 77       	andi	r18, 0x7F	; 127
    3a98:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3a9a:	47 30       	cpi	r20, 0x07	; 7
    3a9c:	51 05       	cpc	r21, r1
    3a9e:	21 f7       	brne	.-56     	; 0x3a68 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3aa0:	08 94       	sec
    3aa2:	c1 1c       	adc	r12, r1
    3aa4:	d1 1c       	adc	r13, r1
    3aa6:	08 5f       	subi	r16, 0xF8	; 248
    3aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aaa:	e7 e0       	ldi	r30, 0x07	; 7
    3aac:	f0 e0       	ldi	r31, 0x00	; 0
    3aae:	ee 0e       	add	r14, r30
    3ab0:	ff 1e       	adc	r15, r31
    3ab2:	ca 14       	cp	r12, r10
    3ab4:	db 04       	cpc	r13, r11
    3ab6:	89 f6       	brne	.-94     	; 0x3a5a <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3ab8:	c3 01       	movw	r24, r6
    3aba:	67 e0       	ldi	r22, 0x07	; 7
    3abc:	70 e0       	ldi	r23, 0x00	; 0
    3abe:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
   if (remainder) {
    3ac2:	88 23       	and	r24, r24
    3ac4:	d9 f1       	breq	.+118    	; 0x3b3c <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3ac6:	82 01       	movw	r16, r4
    3ac8:	00 0f       	add	r16, r16
    3aca:	11 1f       	adc	r17, r17
    3acc:	00 0f       	add	r16, r16
    3ace:	11 1f       	adc	r17, r17
    3ad0:	00 0f       	add	r16, r16
    3ad2:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3ad4:	78 01       	movw	r14, r16
    3ad6:	e4 18       	sub	r14, r4
    3ad8:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3ada:	d1 01       	movw	r26, r2
    3adc:	a0 0f       	add	r26, r16
    3ade:	b1 1f       	adc	r27, r17
    3ae0:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3ae2:	68 2f       	mov	r22, r24
    3ae4:	70 e0       	ldi	r23, 0x00	; 0
    3ae6:	61 15       	cp	r22, r1
    3ae8:	71 05       	cpc	r23, r1
    3aea:	19 f1       	breq	.+70     	; 0x3b32 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3aec:	e9 81       	ldd	r30, Y+1	; 0x01
    3aee:	fa 81       	ldd	r31, Y+2	; 0x02
    3af0:	ee 0e       	add	r14, r30
    3af2:	ff 1e       	adc	r15, r31
    3af4:	c8 01       	movw	r24, r16
    3af6:	01 96       	adiw	r24, 0x01	; 1
    3af8:	28 0e       	add	r2, r24
    3afa:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    3b00:	f7 01       	movw	r30, r14
    3b02:	41 91       	ld	r20, Z+
    3b04:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3b06:	2f 5f       	subi	r18, 0xFF	; 255
    3b08:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0a:	84 2f       	mov	r24, r20
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	80 78       	andi	r24, 0x80	; 128
    3b10:	90 70       	andi	r25, 0x00	; 0
    3b12:	02 2e       	mov	r0, r18
    3b14:	02 c0       	rjmp	.+4      	; 0x3b1a <sysex_encode+0x118>
    3b16:	95 95       	asr	r25
    3b18:	87 95       	ror	r24
    3b1a:	0a 94       	dec	r0
    3b1c:	e2 f7       	brpl	.-8      	; 0x3b16 <sysex_encode+0x114>
    3b1e:	9c 91       	ld	r25, X
    3b20:	89 2b       	or	r24, r25
    3b22:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3b24:	4f 77       	andi	r20, 0x7F	; 127
    3b26:	f1 01       	movw	r30, r2
    3b28:	41 93       	st	Z+, r20
    3b2a:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3b2c:	26 17       	cp	r18, r22
    3b2e:	37 07       	cpc	r19, r23
    3b30:	38 f3       	brcs	.-50     	; 0x3b00 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3b32:	c8 01       	movw	r24, r16
    3b34:	01 96       	adiw	r24, 0x01	; 1
    3b36:	86 0f       	add	r24, r22
    3b38:	97 1f       	adc	r25, r23
    3b3a:	07 c0       	rjmp	.+14     	; 0x3b4a <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    3b3c:	c2 01       	movw	r24, r4
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	88 0f       	add	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	88 0f       	add	r24, r24
    3b48:	99 1f       	adc	r25, r25
   }
}
    3b4a:	26 96       	adiw	r28, 0x06	; 6
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	f8 94       	cli
    3b50:	de bf       	out	0x3e, r29	; 62
    3b52:	0f be       	out	0x3f, r0	; 63
    3b54:	cd bf       	out	0x3d, r28	; 61
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	0f 91       	pop	r16
    3b5e:	ff 90       	pop	r15
    3b60:	ef 90       	pop	r14
    3b62:	df 90       	pop	r13
    3b64:	cf 90       	pop	r12
    3b66:	bf 90       	pop	r11
    3b68:	af 90       	pop	r10
    3b6a:	9f 90       	pop	r9
    3b6c:	8f 90       	pop	r8
    3b6e:	7f 90       	pop	r7
    3b70:	6f 90       	pop	r6
    3b72:	5f 90       	pop	r5
    3b74:	4f 90       	pop	r4
    3b76:	3f 90       	pop	r3
    3b78:	2f 90       	pop	r2
    3b7a:	08 95       	ret

00003b7c <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3b7c:	6f 92       	push	r6
    3b7e:	7f 92       	push	r7
    3b80:	8f 92       	push	r8
    3b82:	9f 92       	push	r9
    3b84:	af 92       	push	r10
    3b86:	bf 92       	push	r11
    3b88:	cf 92       	push	r12
    3b8a:	df 92       	push	r13
    3b8c:	ef 92       	push	r14
    3b8e:	ff 92       	push	r15
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	3c 01       	movw	r6, r24
    3b9a:	4b 01       	movw	r8, r22
    3b9c:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3b9e:	42 30       	cpi	r20, 0x02	; 2
    3ba0:	51 05       	cpc	r21, r1
    3ba2:	08 f4       	brcc	.+2      	; 0x3ba6 <sysex_decode+0x2a>
    3ba4:	6f c0       	rjmp	.+222    	; 0x3c84 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3ba6:	7a 01       	movw	r14, r20
    3ba8:	f6 94       	lsr	r15
    3baa:	e7 94       	ror	r14
    3bac:	f6 94       	lsr	r15
    3bae:	e7 94       	ror	r14
    3bb0:	f6 94       	lsr	r15
    3bb2:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3bb4:	e1 14       	cp	r14, r1
    3bb6:	f1 04       	cpc	r15, r1
    3bb8:	29 f1       	breq	.+74     	; 0x3c04 <sysex_decode+0x88>
    3bba:	eb 01       	movw	r28, r22
    3bbc:	b3 01       	movw	r22, r6
    3bbe:	00 e0       	ldi	r16, 0x00	; 0
    3bc0:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3bc2:	cc 24       	eor	r12, r12
    3bc4:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3bc6:	de 01       	movw	r26, r28
    3bc8:	11 96       	adiw	r26, 0x01	; 1
    3bca:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3bcc:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3bce:	2d 91       	ld	r18, X+
    3bd0:	2f 77       	andi	r18, 0x7F	; 127
    3bd2:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3bd4:	4f 5f       	subi	r20, 0xFF	; 255
    3bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd8:	88 81       	ld	r24, Y
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	04 2e       	mov	r0, r20
    3bde:	02 c0       	rjmp	.+4      	; 0x3be4 <sysex_decode+0x68>
    3be0:	88 0f       	add	r24, r24
    3be2:	99 1f       	adc	r25, r25
    3be4:	0a 94       	dec	r0
    3be6:	e2 f7       	brpl	.-8      	; 0x3be0 <sysex_decode+0x64>
    3be8:	80 78       	andi	r24, 0x80	; 128
    3bea:	28 2b       	or	r18, r24
    3bec:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3bee:	47 30       	cpi	r20, 0x07	; 7
    3bf0:	51 05       	cpc	r21, r1
    3bf2:	69 f7       	brne	.-38     	; 0x3bce <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3bf4:	0f 5f       	subi	r16, 0xFF	; 255
    3bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf8:	28 96       	adiw	r28, 0x08	; 8
    3bfa:	69 5f       	subi	r22, 0xF9	; 249
    3bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfe:	0e 15       	cp	r16, r14
    3c00:	1f 05       	cpc	r17, r15
    3c02:	09 f7       	brne	.-62     	; 0x3bc6 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3c04:	5a 2d       	mov	r21, r10
    3c06:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3c08:	99 f1       	breq	.+102    	; 0x3c70 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3c0a:	e7 01       	movw	r28, r14
    3c0c:	cc 0f       	add	r28, r28
    3c0e:	dd 1f       	adc	r29, r29
    3c10:	cc 0f       	add	r28, r28
    3c12:	dd 1f       	adc	r29, r29
    3c14:	cc 0f       	add	r28, r28
    3c16:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3c18:	8e 01       	movw	r16, r28
    3c1a:	0e 19       	sub	r16, r14
    3c1c:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3c1e:	65 2f       	mov	r22, r21
    3c20:	70 e0       	ldi	r23, 0x00	; 0
    3c22:	61 50       	subi	r22, 0x01	; 1
    3c24:	70 40       	sbci	r23, 0x00	; 0
    3c26:	f9 f0       	breq	.+62     	; 0x3c66 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3c28:	ce 01       	movw	r24, r28
    3c2a:	01 96       	adiw	r24, 0x01	; 1
    3c2c:	d4 01       	movw	r26, r8
    3c2e:	a8 0f       	add	r26, r24
    3c30:	b9 1f       	adc	r27, r25
    3c32:	f3 01       	movw	r30, r6
    3c34:	e0 0f       	add	r30, r16
    3c36:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3c3c:	c8 0d       	add	r28, r8
    3c3e:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3c40:	4d 91       	ld	r20, X+
    3c42:	4f 77       	andi	r20, 0x7F	; 127
    3c44:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3c46:	2f 5f       	subi	r18, 0xFF	; 255
    3c48:	3f 4f       	sbci	r19, 0xFF	; 255
    3c4a:	88 81       	ld	r24, Y
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	02 2e       	mov	r0, r18
    3c50:	02 c0       	rjmp	.+4      	; 0x3c56 <sysex_decode+0xda>
    3c52:	88 0f       	add	r24, r24
    3c54:	99 1f       	adc	r25, r25
    3c56:	0a 94       	dec	r0
    3c58:	e2 f7       	brpl	.-8      	; 0x3c52 <sysex_decode+0xd6>
    3c5a:	80 78       	andi	r24, 0x80	; 128
    3c5c:	48 2b       	or	r20, r24
    3c5e:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3c60:	26 17       	cp	r18, r22
    3c62:	37 07       	cpc	r19, r23
    3c64:	68 f3       	brcs	.-38     	; 0x3c40 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3c66:	c8 01       	movw	r24, r16
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	85 0f       	add	r24, r21
    3c6c:	91 1d       	adc	r25, r1
    3c6e:	0c c0       	rjmp	.+24     	; 0x3c88 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3c70:	c7 01       	movw	r24, r14
    3c72:	88 0f       	add	r24, r24
    3c74:	99 1f       	adc	r25, r25
    3c76:	88 0f       	add	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	88 0f       	add	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	8e 19       	sub	r24, r14
    3c80:	9f 09       	sbc	r25, r15
    3c82:	02 c0       	rjmp	.+4      	; 0x3c88 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3c88:	df 91       	pop	r29
    3c8a:	cf 91       	pop	r28
    3c8c:	1f 91       	pop	r17
    3c8e:	0f 91       	pop	r16
    3c90:	ff 90       	pop	r15
    3c92:	ef 90       	pop	r14
    3c94:	df 90       	pop	r13
    3c96:	cf 90       	pop	r12
    3c98:	bf 90       	pop	r11
    3c9a:	af 90       	pop	r10
    3c9c:	9f 90       	pop	r9
    3c9e:	8f 90       	pop	r8
    3ca0:	7f 90       	pop	r7
    3ca2:	6f 90       	pop	r6
    3ca4:	08 95       	ret

00003ca6 <__mulsi3>:
    3ca6:	62 9f       	mul	r22, r18
    3ca8:	d0 01       	movw	r26, r0
    3caa:	73 9f       	mul	r23, r19
    3cac:	f0 01       	movw	r30, r0
    3cae:	82 9f       	mul	r24, r18
    3cb0:	e0 0d       	add	r30, r0
    3cb2:	f1 1d       	adc	r31, r1
    3cb4:	64 9f       	mul	r22, r20
    3cb6:	e0 0d       	add	r30, r0
    3cb8:	f1 1d       	adc	r31, r1
    3cba:	92 9f       	mul	r25, r18
    3cbc:	f0 0d       	add	r31, r0
    3cbe:	83 9f       	mul	r24, r19
    3cc0:	f0 0d       	add	r31, r0
    3cc2:	74 9f       	mul	r23, r20
    3cc4:	f0 0d       	add	r31, r0
    3cc6:	65 9f       	mul	r22, r21
    3cc8:	f0 0d       	add	r31, r0
    3cca:	99 27       	eor	r25, r25
    3ccc:	72 9f       	mul	r23, r18
    3cce:	b0 0d       	add	r27, r0
    3cd0:	e1 1d       	adc	r30, r1
    3cd2:	f9 1f       	adc	r31, r25
    3cd4:	63 9f       	mul	r22, r19
    3cd6:	b0 0d       	add	r27, r0
    3cd8:	e1 1d       	adc	r30, r1
    3cda:	f9 1f       	adc	r31, r25
    3cdc:	bd 01       	movw	r22, r26
    3cde:	cf 01       	movw	r24, r30
    3ce0:	11 24       	eor	r1, r1
    3ce2:	08 95       	ret

00003ce4 <__udivmodhi4>:
    3ce4:	aa 1b       	sub	r26, r26
    3ce6:	bb 1b       	sub	r27, r27
    3ce8:	51 e1       	ldi	r21, 0x11	; 17
    3cea:	07 c0       	rjmp	.+14     	; 0x3cfa <__udivmodhi4_ep>

00003cec <__udivmodhi4_loop>:
    3cec:	aa 1f       	adc	r26, r26
    3cee:	bb 1f       	adc	r27, r27
    3cf0:	a6 17       	cp	r26, r22
    3cf2:	b7 07       	cpc	r27, r23
    3cf4:	10 f0       	brcs	.+4      	; 0x3cfa <__udivmodhi4_ep>
    3cf6:	a6 1b       	sub	r26, r22
    3cf8:	b7 0b       	sbc	r27, r23

00003cfa <__udivmodhi4_ep>:
    3cfa:	88 1f       	adc	r24, r24
    3cfc:	99 1f       	adc	r25, r25
    3cfe:	5a 95       	dec	r21
    3d00:	a9 f7       	brne	.-22     	; 0x3cec <__udivmodhi4_loop>
    3d02:	80 95       	com	r24
    3d04:	90 95       	com	r25
    3d06:	bc 01       	movw	r22, r24
    3d08:	cd 01       	movw	r24, r26
    3d0a:	08 95       	ret

00003d0c <__divmodhi4>:
    3d0c:	97 fb       	bst	r25, 7
    3d0e:	09 2e       	mov	r0, r25
    3d10:	07 26       	eor	r0, r23
    3d12:	0a d0       	rcall	.+20     	; 0x3d28 <__divmodhi4_neg1>
    3d14:	77 fd       	sbrc	r23, 7
    3d16:	04 d0       	rcall	.+8      	; 0x3d20 <__divmodhi4_neg2>
    3d18:	e5 df       	rcall	.-54     	; 0x3ce4 <__udivmodhi4>
    3d1a:	06 d0       	rcall	.+12     	; 0x3d28 <__divmodhi4_neg1>
    3d1c:	00 20       	and	r0, r0
    3d1e:	1a f4       	brpl	.+6      	; 0x3d26 <__divmodhi4_exit>

00003d20 <__divmodhi4_neg2>:
    3d20:	70 95       	com	r23
    3d22:	61 95       	neg	r22
    3d24:	7f 4f       	sbci	r23, 0xFF	; 255

00003d26 <__divmodhi4_exit>:
    3d26:	08 95       	ret

00003d28 <__divmodhi4_neg1>:
    3d28:	f6 f7       	brtc	.-4      	; 0x3d26 <__divmodhi4_exit>
    3d2a:	90 95       	com	r25
    3d2c:	81 95       	neg	r24
    3d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d30:	08 95       	ret

00003d32 <do_random>:
    3d32:	a0 e0       	ldi	r26, 0x00	; 0
    3d34:	b0 e0       	ldi	r27, 0x00	; 0
    3d36:	ef e9       	ldi	r30, 0x9F	; 159
    3d38:	fe e1       	ldi	r31, 0x1E	; 30
    3d3a:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <__prologue_saves__+0xc>
    3d3e:	ec 01       	movw	r28, r24
    3d40:	88 81       	ld	r24, Y
    3d42:	99 81       	ldd	r25, Y+1	; 0x01
    3d44:	aa 81       	ldd	r26, Y+2	; 0x02
    3d46:	bb 81       	ldd	r27, Y+3	; 0x03
    3d48:	00 97       	sbiw	r24, 0x00	; 0
    3d4a:	a1 05       	cpc	r26, r1
    3d4c:	b1 05       	cpc	r27, r1
    3d4e:	21 f4       	brne	.+8      	; 0x3d58 <do_random+0x26>
    3d50:	84 e2       	ldi	r24, 0x24	; 36
    3d52:	99 ed       	ldi	r25, 0xD9	; 217
    3d54:	ab e5       	ldi	r26, 0x5B	; 91
    3d56:	b7 e0       	ldi	r27, 0x07	; 7
    3d58:	bc 01       	movw	r22, r24
    3d5a:	cd 01       	movw	r24, r26
    3d5c:	2d e1       	ldi	r18, 0x1D	; 29
    3d5e:	33 ef       	ldi	r19, 0xF3	; 243
    3d60:	41 e0       	ldi	r20, 0x01	; 1
    3d62:	50 e0       	ldi	r21, 0x00	; 0
    3d64:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divmodsi4>
    3d68:	49 01       	movw	r8, r18
    3d6a:	5a 01       	movw	r10, r20
    3d6c:	27 ea       	ldi	r18, 0xA7	; 167
    3d6e:	31 e4       	ldi	r19, 0x41	; 65
    3d70:	40 e0       	ldi	r20, 0x00	; 0
    3d72:	50 e0       	ldi	r21, 0x00	; 0
    3d74:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__mulsi3>
    3d78:	6b 01       	movw	r12, r22
    3d7a:	7c 01       	movw	r14, r24
    3d7c:	c5 01       	movw	r24, r10
    3d7e:	b4 01       	movw	r22, r8
    3d80:	2c ee       	ldi	r18, 0xEC	; 236
    3d82:	34 ef       	ldi	r19, 0xF4	; 244
    3d84:	4f ef       	ldi	r20, 0xFF	; 255
    3d86:	5f ef       	ldi	r21, 0xFF	; 255
    3d88:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__mulsi3>
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	cb 01       	movw	r24, r22
    3d90:	c8 0e       	add	r12, r24
    3d92:	d9 1e       	adc	r13, r25
    3d94:	ea 1e       	adc	r14, r26
    3d96:	fb 1e       	adc	r15, r27
    3d98:	f7 fe       	sbrs	r15, 7
    3d9a:	08 c0       	rjmp	.+16     	; 0x3dac <do_random+0x7a>
    3d9c:	8f ef       	ldi	r24, 0xFF	; 255
    3d9e:	9f ef       	ldi	r25, 0xFF	; 255
    3da0:	af ef       	ldi	r26, 0xFF	; 255
    3da2:	bf e7       	ldi	r27, 0x7F	; 127
    3da4:	c8 0e       	add	r12, r24
    3da6:	d9 1e       	adc	r13, r25
    3da8:	ea 1e       	adc	r14, r26
    3daa:	fb 1e       	adc	r15, r27
    3dac:	c8 82       	st	Y, r12
    3dae:	d9 82       	std	Y+1, r13	; 0x01
    3db0:	ea 82       	std	Y+2, r14	; 0x02
    3db2:	fb 82       	std	Y+3, r15	; 0x03
    3db4:	97 01       	movw	r18, r14
    3db6:	86 01       	movw	r16, r12
    3db8:	3f 77       	andi	r19, 0x7F	; 127
    3dba:	b8 01       	movw	r22, r16
    3dbc:	c9 01       	movw	r24, r18
    3dbe:	cd b7       	in	r28, 0x3d	; 61
    3dc0:	de b7       	in	r29, 0x3e	; 62
    3dc2:	ec e0       	ldi	r30, 0x0C	; 12
    3dc4:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <__epilogue_restores__+0xc>

00003dc8 <random_r>:
    3dc8:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <do_random>
    3dcc:	08 95       	ret

00003dce <random>:
    3dce:	80 eb       	ldi	r24, 0xB0	; 176
    3dd0:	92 e0       	ldi	r25, 0x02	; 2
    3dd2:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <do_random>
    3dd6:	08 95       	ret

00003dd8 <srandom>:
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	80 93 b0 02 	sts	0x02B0, r24
    3de0:	90 93 b1 02 	sts	0x02B1, r25
    3de4:	a0 93 b2 02 	sts	0x02B2, r26
    3de8:	b0 93 b3 02 	sts	0x02B3, r27
    3dec:	08 95       	ret

00003dee <memcpy>:
    3dee:	fb 01       	movw	r30, r22
    3df0:	dc 01       	movw	r26, r24
    3df2:	02 c0       	rjmp	.+4      	; 0x3df8 <memcpy+0xa>
    3df4:	01 90       	ld	r0, Z+
    3df6:	0d 92       	st	X+, r0
    3df8:	41 50       	subi	r20, 0x01	; 1
    3dfa:	50 40       	sbci	r21, 0x00	; 0
    3dfc:	d8 f7       	brcc	.-10     	; 0x3df4 <memcpy+0x6>
    3dfe:	08 95       	ret

00003e00 <memmove>:
    3e00:	68 17       	cp	r22, r24
    3e02:	79 07       	cpc	r23, r25
    3e04:	68 f4       	brcc	.+26     	; 0x3e20 <memmove+0x20>
    3e06:	fb 01       	movw	r30, r22
    3e08:	dc 01       	movw	r26, r24
    3e0a:	e4 0f       	add	r30, r20
    3e0c:	f5 1f       	adc	r31, r21
    3e0e:	a4 0f       	add	r26, r20
    3e10:	b5 1f       	adc	r27, r21
    3e12:	02 c0       	rjmp	.+4      	; 0x3e18 <memmove+0x18>
    3e14:	02 90       	ld	r0, -Z
    3e16:	0e 92       	st	-X, r0
    3e18:	41 50       	subi	r20, 0x01	; 1
    3e1a:	50 40       	sbci	r21, 0x00	; 0
    3e1c:	d8 f7       	brcc	.-10     	; 0x3e14 <memmove+0x14>
    3e1e:	08 95       	ret
    3e20:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <memcpy>

00003e24 <__eerd_block_m6450a>:
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22

00003e28 <__eerd_blraw_m6450a>:
    3e28:	fc 01       	movw	r30, r24
    3e2a:	f9 99       	sbic	0x1f, 1	; 31
    3e2c:	fe cf       	rjmp	.-4      	; 0x3e2a <__eerd_blraw_m6450a+0x2>
    3e2e:	06 c0       	rjmp	.+12     	; 0x3e3c <__eerd_blraw_m6450a+0x14>
    3e30:	f2 bd       	out	0x22, r31	; 34
    3e32:	e1 bd       	out	0x21, r30	; 33
    3e34:	f8 9a       	sbi	0x1f, 0	; 31
    3e36:	31 96       	adiw	r30, 0x01	; 1
    3e38:	00 b4       	in	r0, 0x20	; 32
    3e3a:	0d 92       	st	X+, r0
    3e3c:	41 50       	subi	r20, 0x01	; 1
    3e3e:	50 40       	sbci	r21, 0x00	; 0
    3e40:	b8 f7       	brcc	.-18     	; 0x3e30 <__eerd_blraw_m6450a+0x8>
    3e42:	08 95       	ret

00003e44 <__eerd_word_m6450a>:
    3e44:	a8 e1       	ldi	r26, 0x18	; 24
    3e46:	b0 e0       	ldi	r27, 0x00	; 0
    3e48:	42 e0       	ldi	r20, 0x02	; 2
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__eerd_blraw_m6450a>

00003e50 <__eeupd_block_m6450a>:
    3e50:	dc 01       	movw	r26, r24
    3e52:	a4 0f       	add	r26, r20
    3e54:	b5 1f       	adc	r27, r21
    3e56:	41 50       	subi	r20, 0x01	; 1
    3e58:	50 40       	sbci	r21, 0x00	; 0
    3e5a:	48 f0       	brcs	.+18     	; 0x3e6e <__eeupd_block_m6450a+0x1e>
    3e5c:	cb 01       	movw	r24, r22
    3e5e:	84 0f       	add	r24, r20
    3e60:	95 1f       	adc	r25, r21
    3e62:	2e 91       	ld	r18, -X
    3e64:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <__eeupd_r18_m6450a>
    3e68:	41 50       	subi	r20, 0x01	; 1
    3e6a:	50 40       	sbci	r21, 0x00	; 0
    3e6c:	d0 f7       	brcc	.-12     	; 0x3e62 <__eeupd_block_m6450a+0x12>
    3e6e:	08 95       	ret

00003e70 <__eeupd_byte_m6450a>:
    3e70:	26 2f       	mov	r18, r22

00003e72 <__eeupd_r18_m6450a>:
    3e72:	f9 99       	sbic	0x1f, 1	; 31
    3e74:	fe cf       	rjmp	.-4      	; 0x3e72 <__eeupd_r18_m6450a>
    3e76:	92 bd       	out	0x22, r25	; 34
    3e78:	81 bd       	out	0x21, r24	; 33
    3e7a:	f8 9a       	sbi	0x1f, 0	; 31
    3e7c:	01 97       	sbiw	r24, 0x01	; 1
    3e7e:	00 b4       	in	r0, 0x20	; 32
    3e80:	02 16       	cp	r0, r18
    3e82:	31 f0       	breq	.+12     	; 0x3e90 <__eeupd_r18_m6450a+0x1e>
    3e84:	20 bd       	out	0x20, r18	; 32
    3e86:	0f b6       	in	r0, 0x3f	; 63
    3e88:	f8 94       	cli
    3e8a:	fa 9a       	sbi	0x1f, 2	; 31
    3e8c:	f9 9a       	sbi	0x1f, 1	; 31
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	08 95       	ret

00003e92 <__eeupd_word_m6450a>:
    3e92:	01 96       	adiw	r24, 0x01	; 1
    3e94:	27 2f       	mov	r18, r23
    3e96:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <__eeupd_r18_m6450a>
    3e9a:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__eeupd_byte_m6450a>

00003e9e <__divmodsi4>:
    3e9e:	97 fb       	bst	r25, 7
    3ea0:	09 2e       	mov	r0, r25
    3ea2:	05 26       	eor	r0, r21
    3ea4:	0e d0       	rcall	.+28     	; 0x3ec2 <__divmodsi4_neg1>
    3ea6:	57 fd       	sbrc	r21, 7
    3ea8:	04 d0       	rcall	.+8      	; 0x3eb2 <__divmodsi4_neg2>
    3eaa:	4b d0       	rcall	.+150    	; 0x3f42 <__udivmodsi4>
    3eac:	0a d0       	rcall	.+20     	; 0x3ec2 <__divmodsi4_neg1>
    3eae:	00 1c       	adc	r0, r0
    3eb0:	38 f4       	brcc	.+14     	; 0x3ec0 <__divmodsi4_exit>

00003eb2 <__divmodsi4_neg2>:
    3eb2:	50 95       	com	r21
    3eb4:	40 95       	com	r20
    3eb6:	30 95       	com	r19
    3eb8:	21 95       	neg	r18
    3eba:	3f 4f       	sbci	r19, 0xFF	; 255
    3ebc:	4f 4f       	sbci	r20, 0xFF	; 255
    3ebe:	5f 4f       	sbci	r21, 0xFF	; 255

00003ec0 <__divmodsi4_exit>:
    3ec0:	08 95       	ret

00003ec2 <__divmodsi4_neg1>:
    3ec2:	f6 f7       	brtc	.-4      	; 0x3ec0 <__divmodsi4_exit>
    3ec4:	90 95       	com	r25
    3ec6:	80 95       	com	r24
    3ec8:	70 95       	com	r23
    3eca:	61 95       	neg	r22
    3ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ece:	8f 4f       	sbci	r24, 0xFF	; 255
    3ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed2:	08 95       	ret

00003ed4 <__prologue_saves__>:
    3ed4:	2f 92       	push	r2
    3ed6:	3f 92       	push	r3
    3ed8:	4f 92       	push	r4
    3eda:	5f 92       	push	r5
    3edc:	6f 92       	push	r6
    3ede:	7f 92       	push	r7
    3ee0:	8f 92       	push	r8
    3ee2:	9f 92       	push	r9
    3ee4:	af 92       	push	r10
    3ee6:	bf 92       	push	r11
    3ee8:	cf 92       	push	r12
    3eea:	df 92       	push	r13
    3eec:	ef 92       	push	r14
    3eee:	ff 92       	push	r15
    3ef0:	0f 93       	push	r16
    3ef2:	1f 93       	push	r17
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	ca 1b       	sub	r28, r26
    3efe:	db 0b       	sbc	r29, r27
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	09 94       	ijmp

00003f0c <__epilogue_restores__>:
    3f0c:	2a 88       	ldd	r2, Y+18	; 0x12
    3f0e:	39 88       	ldd	r3, Y+17	; 0x11
    3f10:	48 88       	ldd	r4, Y+16	; 0x10
    3f12:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f14:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f16:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f18:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f1e:	b9 84       	ldd	r11, Y+9	; 0x09
    3f20:	c8 84       	ldd	r12, Y+8	; 0x08
    3f22:	df 80       	ldd	r13, Y+7	; 0x07
    3f24:	ee 80       	ldd	r14, Y+6	; 0x06
    3f26:	fd 80       	ldd	r15, Y+5	; 0x05
    3f28:	0c 81       	ldd	r16, Y+4	; 0x04
    3f2a:	1b 81       	ldd	r17, Y+3	; 0x03
    3f2c:	aa 81       	ldd	r26, Y+2	; 0x02
    3f2e:	b9 81       	ldd	r27, Y+1	; 0x01
    3f30:	ce 0f       	add	r28, r30
    3f32:	d1 1d       	adc	r29, r1
    3f34:	0f b6       	in	r0, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	de bf       	out	0x3e, r29	; 62
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	cd bf       	out	0x3d, r28	; 61
    3f3e:	ed 01       	movw	r28, r26
    3f40:	08 95       	ret

00003f42 <__udivmodsi4>:
    3f42:	a1 e2       	ldi	r26, 0x21	; 33
    3f44:	1a 2e       	mov	r1, r26
    3f46:	aa 1b       	sub	r26, r26
    3f48:	bb 1b       	sub	r27, r27
    3f4a:	fd 01       	movw	r30, r26
    3f4c:	0d c0       	rjmp	.+26     	; 0x3f68 <__udivmodsi4_ep>

00003f4e <__udivmodsi4_loop>:
    3f4e:	aa 1f       	adc	r26, r26
    3f50:	bb 1f       	adc	r27, r27
    3f52:	ee 1f       	adc	r30, r30
    3f54:	ff 1f       	adc	r31, r31
    3f56:	a2 17       	cp	r26, r18
    3f58:	b3 07       	cpc	r27, r19
    3f5a:	e4 07       	cpc	r30, r20
    3f5c:	f5 07       	cpc	r31, r21
    3f5e:	20 f0       	brcs	.+8      	; 0x3f68 <__udivmodsi4_ep>
    3f60:	a2 1b       	sub	r26, r18
    3f62:	b3 0b       	sbc	r27, r19
    3f64:	e4 0b       	sbc	r30, r20
    3f66:	f5 0b       	sbc	r31, r21

00003f68 <__udivmodsi4_ep>:
    3f68:	66 1f       	adc	r22, r22
    3f6a:	77 1f       	adc	r23, r23
    3f6c:	88 1f       	adc	r24, r24
    3f6e:	99 1f       	adc	r25, r25
    3f70:	1a 94       	dec	r1
    3f72:	69 f7       	brne	.-38     	; 0x3f4e <__udivmodsi4_loop>
    3f74:	60 95       	com	r22
    3f76:	70 95       	com	r23
    3f78:	80 95       	com	r24
    3f7a:	90 95       	com	r25
    3f7c:	9b 01       	movw	r18, r22
    3f7e:	ac 01       	movw	r20, r24
    3f80:	bd 01       	movw	r22, r26
    3f82:	cf 01       	movw	r24, r30
    3f84:	08 95       	ret

00003f86 <_exit>:
    3f86:	f8 94       	cli

00003f88 <__stop_program>:
    3f88:	ff cf       	rjmp	.-2      	; 0x3f88 <__stop_program>
