
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003c4e  00003d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c4e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000213  008002b0  008002b0  00003eb2  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003eb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00004528  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  0000511c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000300  00000000  00000000  00005460  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a08  00000000  00000000  00005760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018b0  00000000  00000000  0000c168  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000214e  00000000  00000000  0000da18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d8c  00000000  00000000  0000fb68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000198a  00000000  00000000  000108f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002e96  00000000  00000000  0001227e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00015114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 47 03 	jmp	0x68e	; 0x68e <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 3b 03 	jmp	0x676	; 0x676 <__vector_9>
      28:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ee e4       	ldi	r30, 0x4E	; 78
      78:	fc e3       	ldi	r31, 0x3C	; 60
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a3 3c       	cpi	r26, 0xC3	; 195
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 29 04 	call	0x852	; 0x852 <main>
      9a:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:
struct arp arp;


//static struct midi_note arp_sequence[24] = {0,0};

void update_arp_sequence(void) {
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
	
	if (gate_buffer == 0) {
     15e:	80 91 b0 02 	lds	r24, 0x02B0
     162:	88 23       	and	r24, r24
     164:	59 f4       	brne	.+22     	; 0x17c <update_arp_sequence+0x36>
		
		arp.current_note = arp.sequence[arp.step_position].note; //temp note to store for release phase
     166:	e0 91 86 03 	lds	r30, 0x0386
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	ee 0f       	add	r30, r30
     16e:	ff 1f       	adc	r31, r31
     170:	e6 57       	subi	r30, 0x76	; 118
     172:	fc 4f       	sbci	r31, 0xFC	; 252
     174:	80 81       	ld	r24, Z
     176:	80 93 87 03 	sts	0x0387, r24
		return;
     17a:	56 c0       	rjmp	.+172    	; 0x228 <update_arp_sequence+0xe2>
	}

	arp.step_number = gate_buffer*(arp.range + 1);
     17c:	90 91 84 03 	lds	r25, 0x0384
     180:	9f 5f       	subi	r25, 0xFF	; 255
     182:	98 9f       	mul	r25, r24
     184:	80 2d       	mov	r24, r0
     186:	11 24       	eor	r1, r1
     188:	80 93 85 03 	sts	0x0385, r24
     18c:	00 e0       	ldi	r16, 0x00	; 0
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     18e:	aa 24       	eor	r10, r10
     190:	bb 24       	eor	r11, r11
	arp.step_number = gate_buffer*(arp.range + 1);
	
	
	
	//set arp sequence
	uint8_t step = 0;
     192:	10 e0       	ldi	r17, 0x00	; 0
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     194:	88 24       	eor	r8, r8
     196:	99 24       	eor	r9, r9
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     198:	0f 2e       	mov	r0, r31
     19a:	f9 e8       	ldi	r31, 0x89	; 137
     19c:	ef 2e       	mov	r14, r31
     19e:	f3 e0       	ldi	r31, 0x03	; 3
     1a0:	ff 2e       	mov	r15, r31
     1a2:	f0 2d       	mov	r31, r0
				
				case UP:
				
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1a4:	0f 2e       	mov	r0, r31
     1a6:	f4 e8       	ldi	r31, 0x84	; 132
     1a8:	cf 2e       	mov	r12, r31
     1aa:	f3 e0       	ldi	r31, 0x03	; 3
     1ac:	df 2e       	mov	r13, r31
     1ae:	f0 2d       	mov	r31, r0
     1b0:	36 c0       	rjmp	.+108    	; 0x21e <update_arp_sequence+0xd8>
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     1b2:	e4 01       	movw	r28, r8
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
     1b4:	81 50       	subi	r24, 0x01	; 1
     1b6:	8c 1b       	sub	r24, r28
     1b8:	0e 94 37 01 	call	0x26e	; 0x26e <get_indexed_note>
     1bc:	28 2f       	mov	r18, r24
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     1be:	f7 01       	movw	r30, r14
     1c0:	80 81       	ld	r24, Z
     1c2:	88 23       	and	r24, r24
     1c4:	19 f0       	breq	.+6      	; 0x1cc <update_arp_sequence+0x86>
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	c1 f4       	brne	.+48     	; 0x1fa <update_arp_sequence+0xb4>
     1ca:	0c c0       	rjmp	.+24     	; 0x1e4 <update_arp_sequence+0x9e>
				
				case UP:
				
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1cc:	81 2f       	mov	r24, r17
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	03 96       	adiw	r24, 0x03	; 3
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	8c 0d       	add	r24, r12
     1d8:	9d 1d       	adc	r25, r13
     1da:	20 0f       	add	r18, r16
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
     1e0:	1f 5f       	subi	r17, 0xFF	; 255
				
					break;
     1e2:	0b c0       	rjmp	.+22     	; 0x1fa <update_arp_sequence+0xb4>
					
				case DOWN:
				
					arp.sequence[step++].note = root_note - (range*12); //will need to handle min note out of range here
     1e4:	81 2f       	mov	r24, r17
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	03 96       	adiw	r24, 0x03	; 3
     1ea:	88 0f       	add	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	8c 0d       	add	r24, r12
     1f0:	9d 1d       	adc	r25, r13
     1f2:	20 1b       	sub	r18, r16
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 83       	st	Z, r18
     1f8:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     1fa:	21 96       	adiw	r28, 0x01	; 1
     1fc:	80 91 b0 02 	lds	r24, 0x02B0
     200:	28 2f       	mov	r18, r24
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	c2 17       	cp	r28, r18
     206:	d3 07       	cpc	r29, r19
     208:	ac f2       	brlt	.-86     	; 0x1b4 <update_arp_sequence+0x6e>
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     20a:	08 94       	sec
     20c:	a1 1c       	adc	r10, r1
     20e:	b1 1c       	adc	r11, r1
     210:	04 5f       	subi	r16, 0xF4	; 244
     212:	f6 01       	movw	r30, r12
     214:	80 81       	ld	r24, Z
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	8a 15       	cp	r24, r10
     21a:	9b 05       	cpc	r25, r11
     21c:	2c f0       	brlt	.+10     	; 0x228 <update_arp_sequence+0xe2>
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     21e:	80 91 b0 02 	lds	r24, 0x02B0
     222:	88 23       	and	r24, r24
     224:	31 f6       	brne	.-116    	; 0x1b2 <update_arp_sequence+0x6c>
     226:	f1 cf       	rjmp	.-30     	; 0x20a <update_arp_sequence+0xc4>
	

		
	
	
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	bf 90       	pop	r11
     23a:	af 90       	pop	r10
     23c:	9f 90       	pop	r9
     23e:	8f 90       	pop	r8
     240:	08 95       	ret

00000242 <step_arp_note>:

void step_arp_note(void) { //updates arp note according to range, mode and keys held
	
	
	if (++arp.step_position >= arp.step_number) arp.step_position  = 0; //reset step position when at end of sequence 
     242:	80 91 86 03 	lds	r24, 0x0386
     246:	8f 5f       	subi	r24, 0xFF	; 255
     248:	80 93 86 03 	sts	0x0386, r24
     24c:	90 91 85 03 	lds	r25, 0x0385
     250:	89 17       	cp	r24, r25
     252:	10 f0       	brcs	.+4      	; 0x258 <step_arp_note+0x16>
     254:	10 92 86 03 	sts	0x0386, r1
	
	arp.current_note = arp.sequence[arp.step_position].note;
     258:	e0 91 86 03 	lds	r30, 0x0386
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	ee 0f       	add	r30, r30
     260:	ff 1f       	adc	r31, r31
     262:	e6 57       	subi	r30, 0x76	; 118
     264:	fc 4f       	sbci	r31, 0xFC	; 252
     266:	80 81       	ld	r24, Z
     268:	80 93 87 03 	sts	0x0387, r24
	

     26c:	08 95       	ret

0000026e <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     26e:	e8 2f       	mov	r30, r24
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	ee 0f       	add	r30, r30
     274:	ff 1f       	adc	r31, r31
     276:	e8 54       	subi	r30, 0x48	; 72
     278:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     27a:	80 81       	ld	r24, Z
     27c:	08 95       	ret

0000027e <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.clock_source == OFF) {
     27e:	80 91 88 03 	lds	r24, 0x0388
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	19 f4       	brne	.+6      	; 0x28c <get_current_note+0xe>
		
		note = current_note;
     286:	80 91 b1 02 	lds	r24, 0x02B1
     28a:	08 95       	ret

		
	} else {
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     28c:	80 91 87 03 	lds	r24, 0x0387
		
		
	}
	return note;
	
}
     290:	08 95       	ret

00000292 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	18 2f       	mov	r17, r24
     29c:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     29e:	8a eb       	ldi	r24, 0xBA	; 186
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	ec 01       	movw	r28, r24
     2a4:	22 97       	sbiw	r28, 0x02	; 2
     2a6:	be 01       	movw	r22, r28
     2a8:	4e e0       	ldi	r20, 0x0E	; 14
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     2b0:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     2b2:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     2b4:	10 93 b1 02 	sts	0x02B1, r17
	
} 
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	08 95       	ret

000002c2 <remove_note>:
void remove_note(uint8_t note){
     2c2:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     2c4:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     2c8:	c8 17       	cp	r28, r24
     2ca:	41 f0       	breq	.+16     	; 0x2dc <remove_note+0x1a>
     2cc:	ea eb       	ldi	r30, 0xBA	; 186
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2d0:	41 e0       	ldi	r20, 0x01	; 1
     2d2:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     2d4:	90 81       	ld	r25, Z
     2d6:	98 17       	cp	r25, r24
     2d8:	59 f4       	brne	.+22     	; 0x2f0 <remove_note+0x2e>
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     2e0:	fa 01       	movw	r30, r20
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	e8 54       	subi	r30, 0x48	; 72
     2e8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ea:	8f ef       	ldi	r24, 0xFF	; 255
     2ec:	80 83       	st	Z, r24
			free_slot = i;
			break;
     2ee:	07 c0       	rjmp	.+14     	; 0x2fe <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2f0:	4f 5f       	subi	r20, 0xFF	; 255
     2f2:	5f 4f       	sbci	r21, 0xFF	; 255
     2f4:	32 96       	adiw	r30, 0x02	; 2
     2f6:	48 30       	cpi	r20, 0x08	; 8
     2f8:	51 05       	cpc	r21, r1
     2fa:	61 f7       	brne	.-40     	; 0x2d4 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     2fc:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	ca 01       	movw	r24, r20
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	bc 01       	movw	r22, r24
     308:	66 54       	subi	r22, 0x46	; 70
     30a:	7e 4f       	sbci	r23, 0xFE	; 254
     30c:	40 95       	com	r20
     30e:	50 95       	com	r21
     310:	48 5f       	subi	r20, 0xF8	; 248
     312:	5f 4f       	sbci	r21, 0xFF	; 255
     314:	44 0f       	add	r20, r20
     316:	55 1f       	adc	r21, r21
     318:	88 54       	subi	r24, 0x48	; 72
     31a:	9e 4f       	sbci	r25, 0xFE	; 254
     31c:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <memmove>
	note_pool[7].note = EMPTY;	
     320:	8f ef       	ldi	r24, 0xFF	; 255
     322:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     326:	80 91 b8 01 	lds	r24, 0x01B8
     32a:	8f 3f       	cpi	r24, 0xFF	; 255
     32c:	19 f4       	brne	.+6      	; 0x334 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     32e:	c0 93 b1 02 	sts	0x02B1, r28
     332:	02 c0       	rjmp	.+4      	; 0x338 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     334:	80 93 b1 02 	sts	0x02B1, r24

	}	
	
}
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     33c:	8d e0       	ldi	r24, 0x0D	; 13
     33e:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     348:	08 95       	ret

0000034a <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     34a:	90 93 89 00 	sts	0x0089, r25
     34e:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     352:	20 91 84 00 	lds	r18, 0x0084
     356:	30 91 85 00 	lds	r19, 0x0085
     35a:	82 17       	cp	r24, r18
     35c:	93 07       	cpc	r25, r19
     35e:	28 f4       	brcc	.+10     	; 0x36a <update_clock_rate+0x20>
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	90 93 85 00 	sts	0x0085, r25
     366:	80 93 84 00 	sts	0x0084, r24
     36a:	08 95       	ret

0000036c <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     36c:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     36e:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     370:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     372:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     374:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     376:	8c 91       	ld	r24, X
     378:	87 70       	andi	r24, 0x07	; 7
     37a:	82 b9       	out	0x02, r24	; 2
     37c:	66 e0       	ldi	r22, 0x06	; 6
     37e:	6a 95       	dec	r22
     380:	f1 f7       	brne	.-4      	; 0x37e <set_control_voltage+0x12>
     382:	00 c0       	rjmp	.+0      	; 0x384 <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     384:	ea ed       	ldi	r30, 0xDA	; 218
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	40 81       	ld	r20, Z
     38a:	8c 91       	ld	r24, X
     38c:	86 95       	lsr	r24
     38e:	86 95       	lsr	r24
     390:	86 95       	lsr	r24
     392:	87 70       	andi	r24, 0x07	; 7
     394:	21 e0       	ldi	r18, 0x01	; 1
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	b9 01       	movw	r22, r18
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <set_control_voltage+0x34>
     39c:	66 0f       	add	r22, r22
     39e:	77 1f       	adc	r23, r23
     3a0:	8a 95       	dec	r24
     3a2:	e2 f7       	brpl	.-8      	; 0x39c <set_control_voltage+0x30>
     3a4:	cb 01       	movw	r24, r22
     3a6:	84 2b       	or	r24, r20
     3a8:	80 83       	st	Z, r24
     3aa:	76 e0       	ldi	r23, 0x06	; 6
     3ac:	7a 95       	dec	r23
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <set_control_voltage+0x40>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     3b2:	80 81       	ld	r24, Z
     3b4:	9c 91       	ld	r25, X
     3b6:	96 95       	lsr	r25
     3b8:	96 95       	lsr	r25
     3ba:	96 95       	lsr	r25
     3bc:	97 70       	andi	r25, 0x07	; 7
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <set_control_voltage+0x58>
     3c0:	22 0f       	add	r18, r18
     3c2:	33 1f       	adc	r19, r19
     3c4:	9a 95       	dec	r25
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <set_control_voltage+0x54>
     3c8:	20 95       	com	r18
     3ca:	28 23       	and	r18, r24
     3cc:	20 83       	st	Z, r18
	
}	
     3ce:	08 95       	ret

000003d0 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     3d0:	83 b3       	in	r24, 0x13	; 19
     3d2:	83 60       	ori	r24, 0x03	; 3
     3d4:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     3da:	97 b1       	in	r25, 0x07	; 7
     3dc:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     3de:	e9 ed       	ldi	r30, 0xD9	; 217
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	8f 60       	ori	r24, 0x0F	; 15
     3e6:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     3e8:	ea ed       	ldi	r30, 0xDA	; 218
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	80 7f       	andi	r24, 0xF0	; 240
     3f0:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     3f2:	84 b3       	in	r24, 0x14	; 20
     3f4:	83 60       	ori	r24, 0x03	; 3
     3f6:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     3f8:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     3fa:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     3fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     3fe:	a0 9a       	sbi	0x14, 0	; 20
}
     400:	08 95       	ret

00000402 <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2e 97       	sbiw	r28, 0x0e	; 14
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     41a:	28 e0       	ldi	r18, 0x08	; 8
     41c:	29 83       	std	Y+1, r18	; 0x01
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	2a 83       	std	Y+2, r18	; 0x02
     422:	22 e0       	ldi	r18, 0x02	; 2
     424:	2b 83       	std	Y+3, r18	; 0x03
     426:	24 e0       	ldi	r18, 0x04	; 4
     428:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     42a:	de 01       	movw	r26, r28
     42c:	15 96       	adiw	r26, 0x05	; 5
     42e:	e7 ee       	ldi	r30, 0xE7	; 231
     430:	f1 e0       	ldi	r31, 0x01	; 1
     432:	2a e0       	ldi	r18, 0x0A	; 10
     434:	01 90       	ld	r0, Z+
     436:	0d 92       	st	X+, r0
     438:	21 50       	subi	r18, 0x01	; 1
     43a:	e1 f7       	brne	.-8      	; 0x434 <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     43c:	2f ef       	ldi	r18, 0xFF	; 255
     43e:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     440:	ea ed       	ldi	r30, 0xDA	; 218
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	20 81       	ld	r18, Z
     446:	20 61       	ori	r18, 0x10	; 16
     448:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     44a:	20 81       	ld	r18, Z
     44c:	2f 7e       	andi	r18, 0xEF	; 239
     44e:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     450:	06 2f       	mov	r16, r22
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	de 01       	movw	r26, r28
     456:	a0 0f       	add	r26, r16
     458:	b1 1f       	adc	r27, r17
     45a:	11 96       	adiw	r26, 0x01	; 1
     45c:	2c 91       	ld	r18, X
     45e:	11 97       	sbiw	r26, 0x01	; 1
     460:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     462:	20 81       	ld	r18, Z
     464:	20 62       	ori	r18, 0x20	; 32
     466:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     468:	20 81       	ld	r18, Z
     46a:	2f 7d       	andi	r18, 0xDF	; 223
     46c:	20 83       	st	Z, r18
     46e:	48 2f       	mov	r20, r24
     470:	59 2f       	mov	r21, r25
     472:	87 e2       	ldi	r24, 0x27	; 39
     474:	40 31       	cpi	r20, 0x10	; 16
     476:	58 07       	cpc	r21, r24
     478:	10 f0       	brcs	.+4      	; 0x47e <display_dec+0x7c>
     47a:	4f e0       	ldi	r20, 0x0F	; 15
     47c:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     47e:	ca 01       	movw	r24, r20
     480:	96 95       	lsr	r25
     482:	87 95       	ror	r24
     484:	96 95       	lsr	r25
     486:	87 95       	ror	r24
     488:	9a 01       	movw	r18, r20
     48a:	36 95       	lsr	r19
     48c:	27 95       	ror	r18
     48e:	28 0f       	add	r18, r24
     490:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     492:	c9 01       	movw	r24, r18
     494:	92 95       	swap	r25
     496:	82 95       	swap	r24
     498:	8f 70       	andi	r24, 0x0F	; 15
     49a:	89 27       	eor	r24, r25
     49c:	9f 70       	andi	r25, 0x0F	; 15
     49e:	89 27       	eor	r24, r25
     4a0:	82 0f       	add	r24, r18
     4a2:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     4a4:	29 2f       	mov	r18, r25
     4a6:	33 27       	eor	r19, r19
     4a8:	82 0f       	add	r24, r18
     4aa:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     4ac:	96 95       	lsr	r25
     4ae:	87 95       	ror	r24
     4b0:	96 95       	lsr	r25
     4b2:	87 95       	ror	r24
     4b4:	96 95       	lsr	r25
     4b6:	87 95       	ror	r24
	r = number - q2 * 10;
     4b8:	28 2f       	mov	r18, r24
     4ba:	22 0f       	add	r18, r18
     4bc:	32 2f       	mov	r19, r18
     4be:	33 0f       	add	r19, r19
     4c0:	33 0f       	add	r19, r19
     4c2:	23 0f       	add	r18, r19
     4c4:	e4 2f       	mov	r30, r20
     4c6:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	ea 30       	cpi	r30, 0x0A	; 10
     4ce:	10 f4       	brcc	.+4      	; 0x4d4 <display_dec+0xd2>
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	68 0f       	add	r22, r24
     4d6:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     4d8:	9b 01       	movw	r18, r22
     4da:	36 95       	lsr	r19
     4dc:	27 95       	ror	r18
     4de:	36 95       	lsr	r19
     4e0:	27 95       	ror	r18
     4e2:	ab 01       	movw	r20, r22
     4e4:	56 95       	lsr	r21
     4e6:	47 95       	ror	r20
     4e8:	24 0f       	add	r18, r20
     4ea:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     4ec:	c9 01       	movw	r24, r18
     4ee:	92 95       	swap	r25
     4f0:	82 95       	swap	r24
     4f2:	8f 70       	andi	r24, 0x0F	; 15
     4f4:	89 27       	eor	r24, r25
     4f6:	9f 70       	andi	r25, 0x0F	; 15
     4f8:	89 27       	eor	r24, r25
     4fa:	82 0f       	add	r24, r18
     4fc:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     4fe:	29 2f       	mov	r18, r25
     500:	33 27       	eor	r19, r19
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     506:	96 95       	lsr	r25
     508:	87 95       	ror	r24
     50a:	96 95       	lsr	r25
     50c:	87 95       	ror	r24
     50e:	96 95       	lsr	r25
     510:	87 95       	ror	r24
	r = qa - q3 * 10;
     512:	98 2f       	mov	r25, r24
     514:	99 0f       	add	r25, r25
     516:	29 2f       	mov	r18, r25
     518:	22 0f       	add	r18, r18
     51a:	22 0f       	add	r18, r18
     51c:	92 0f       	add	r25, r18
     51e:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	6a 30       	cpi	r22, 0x0A	; 10
     524:	08 f4       	brcc	.+2      	; 0x528 <display_dec+0x126>
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	89 0f       	add	r24, r25
	tens_place = rem[r];
     52a:	41 ef       	ldi	r20, 0xF1	; 241
     52c:	51 e0       	ldi	r21, 0x01	; 1
     52e:	da 01       	movw	r26, r20
     530:	a6 0f       	add	r26, r22
     532:	b1 1d       	adc	r27, r1
     534:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     536:	28 2f       	mov	r18, r24
     538:	26 95       	lsr	r18
     53a:	26 95       	lsr	r18
     53c:	98 2f       	mov	r25, r24
     53e:	96 95       	lsr	r25
     540:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     542:	29 2f       	mov	r18, r25
     544:	22 95       	swap	r18
     546:	2f 70       	andi	r18, 0x0F	; 15
     548:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     54a:	96 95       	lsr	r25
     54c:	96 95       	lsr	r25
     54e:	96 95       	lsr	r25
	r = qb - q4 * 10;
     550:	29 2f       	mov	r18, r25
     552:	22 0f       	add	r18, r18
     554:	62 2f       	mov	r22, r18
     556:	66 0f       	add	r22, r22
     558:	66 0f       	add	r22, r22
     55a:	26 0f       	add	r18, r22
     55c:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     55e:	da 01       	movw	r26, r20
     560:	a8 0f       	add	r26, r24
     562:	b1 1d       	adc	r27, r1
     564:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     566:	4e 0f       	add	r20, r30
     568:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     56a:	fa 01       	movw	r30, r20
     56c:	40 81       	ld	r20, Z
     56e:	40 93 b4 02 	sts	0x02B4, r20
	digit_index[1] = tens_place;
     572:	30 93 b5 02 	sts	0x02B5, r19
	digit_index[2] = hunds_place;
     576:	20 93 b6 02 	sts	0x02B6, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	8a 30       	cpi	r24, 0x0A	; 10
     57e:	08 f4       	brcc	.+2      	; 0x582 <display_dec+0x180>
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     584:	90 93 b7 02 	sts	0x02B7, r25

	cathode_byte = dec[digit_index[place]];
     588:	f8 01       	movw	r30, r16
     58a:	ec 54       	subi	r30, 0x4C	; 76
     58c:	fd 4f       	sbci	r31, 0xFD	; 253
     58e:	80 81       	ld	r24, Z
     590:	fe 01       	movw	r30, r28
     592:	e8 0f       	add	r30, r24
     594:	f1 1d       	adc	r31, r1
     596:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     598:	90 91 07 03 	lds	r25, 0x0307
     59c:	92 30       	cpi	r25, 0x02	; 2
     59e:	11 f4       	brne	.+4      	; 0x5a4 <display_dec+0x1a2>
     5a0:	80 62       	ori	r24, 0x20	; 32
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     5a4:	91 30       	cpi	r25, 0x01	; 1
     5a6:	09 f4       	brne	.+2      	; 0x5aa <display_dec+0x1a8>
     5a8:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     5aa:	80 95       	com	r24
     5ac:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     5ae:	ea ed       	ldi	r30, 0xDA	; 218
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	80 61       	ori	r24, 0x10	; 16
     5b6:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     5b8:	80 81       	ld	r24, Z
     5ba:	8f 7e       	andi	r24, 0xEF	; 239
     5bc:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     5be:	2e 96       	adiw	r28, 0x0e	; 14
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	08 95       	ret

000005d4 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     5d4:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     5d6:	66 23       	and	r22, r22
     5d8:	69 f4       	brne	.+26     	; 0x5f4 <update_display+0x20>

		
			
		display_dec(number, place);
     5da:	c0 91 b8 02 	lds	r28, 0x02B8
     5de:	6c 2f       	mov	r22, r28
     5e0:	0e 94 01 02 	call	0x402	; 0x402 <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     5e4:	8c 2f       	mov	r24, r28
     5e6:	8f 5f       	subi	r24, 0xFF	; 255
     5e8:	80 93 b8 02 	sts	0x02B8, r24
     5ec:	c3 30       	cpi	r28, 0x03	; 3
     5ee:	11 f4       	brne	.+4      	; 0x5f4 <update_display+0x20>
		{
			place = 0;
     5f0:	10 92 b8 02 	sts	0x02B8, r1
		
		
	}
	
	
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     5f8:	1f 92       	push	r1
     5fa:	0f 92       	push	r0
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	0f 92       	push	r0
     600:	11 24       	eor	r1, r1
     602:	8f 93       	push	r24
     604:	9f 93       	push	r25
     606:	ef 93       	push	r30
     608:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     60a:	80 91 7c 03 	lds	r24, 0x037C
     60e:	81 50       	subi	r24, 0x01	; 1
     610:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     612:	80 91 7d 03 	lds	r24, 0x037D
     616:	88 23       	and	r24, r24
     618:	a1 f4       	brne	.+40     	; 0x642 <__vector_10+0x4a>
		count_finished = FALSE;
     61a:	10 92 7a 03 	sts	0x037A, r1
		no_overflow = TRUE;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     624:	80 93 7d 03 	sts	0x037D, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     628:	e1 e8       	ldi	r30, 0x81	; 129
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	90 91 7b 03 	lds	r25, 0x037B
     632:	89 2b       	or	r24, r25
     634:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     636:	ef e6       	ldi	r30, 0x6F	; 111
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 81       	ld	r24, Z
     63c:	81 60       	ori	r24, 0x01	; 1
     63e:	80 83       	st	Z, r24
     640:	11 c0       	rjmp	.+34     	; 0x664 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     642:	e4 e8       	ldi	r30, 0x84	; 132
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	91 81       	ldd	r25, Z+1	; 0x01
     64a:	90 93 79 03 	sts	0x0379, r25
     64e:	80 93 78 03 	sts	0x0378, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     652:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 93 7a 03 	sts	0x037A, r24
		period_counter = 0;
     65c:	10 92 7d 03 	sts	0x037D, r1
		TCNT1 = 0; //reset timer/counter 1
     660:	11 82       	std	Z+1, r1	; 0x01
     662:	10 82       	st	Z, r1
	}
	
	
	
	
}
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	9f 91       	pop	r25
     66a:	8f 91       	pop	r24
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     680:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     684:	0f 90       	pop	r0
     686:	0f be       	out	0x3f, r0	; 63
     688:	0f 90       	pop	r0
     68a:	1f 90       	pop	r1
     68c:	18 95       	reti

0000068e <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     68e:	1f 92       	push	r1
     690:	0f 92       	push	r0
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	0f 92       	push	r0
     696:	11 24       	eor	r1, r1
     698:	2f 93       	push	r18
     69a:	3f 93       	push	r19
     69c:	4f 93       	push	r20
     69e:	5f 93       	push	r21
     6a0:	6f 93       	push	r22
     6a2:	7f 93       	push	r23
     6a4:	8f 93       	push	r24
     6a6:	9f 93       	push	r25
     6a8:	af 93       	push	r26
     6aa:	bf 93       	push	r27
     6ac:	ef 93       	push	r30
     6ae:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     6b0:	80 91 ca 03 	lds	r24, 0x03CA
     6b4:	86 95       	lsr	r24
     6b6:	90 91 cb 03 	lds	r25, 0x03CB
     6ba:	98 17       	cp	r25, r24
     6bc:	31 f4       	brne	.+12     	; 0x6ca <__vector_7+0x3c>
				
		PORTB &= ~ (1<<ARP_SYNC_LED);
     6be:	2f 98       	cbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     6c0:	80 91 88 03 	lds	r24, 0x0388
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	09 f4       	brne	.+2      	; 0x6ca <__vector_7+0x3c>
     6c8:	89 98       	cbi	0x11, 1	; 17
	}	
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     6ca:	80 91 cb 03 	lds	r24, 0x03CB
     6ce:	8f 5f       	subi	r24, 0xFF	; 255
     6d0:	80 93 cb 03 	sts	0x03CB, r24
     6d4:	90 91 ca 03 	lds	r25, 0x03CA
     6d8:	89 17       	cp	r24, r25
     6da:	89 f4       	brne	.+34     	; 0x6fe <__vector_7+0x70>
		
		system_clock.ppqn_counter = 0;
     6dc:	10 92 cb 03 	sts	0x03CB, r1
		PORTB |= (1<<ARP_SYNC_LED);
     6e0:	2f 9a       	sbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) {
     6e2:	80 91 88 03 	lds	r24, 0x0388
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	51 f4       	brne	.+20     	; 0x6fe <__vector_7+0x70>
			
			//step arp note here based on range and note sequence from assigner	
			//step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
			
			if (gate_buffer) { //arp
     6ea:	80 91 b0 02 	lds	r24, 0x02B0
     6ee:	88 23       	and	r24, r24
     6f0:	21 f0       	breq	.+8      	; 0x6fa <__vector_7+0x6c>
				step_arp_note(); 
     6f2:	0e 94 21 01 	call	0x242	; 0x242 <step_arp_note>
				PORTF |= (1<<GATE);
     6f6:	89 9a       	sbi	0x11, 1	; 17
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <__vector_7+0x70>
				
			} else {
			
				arp.step_position = 0; //no notes being played, reset arp step position
     6fa:	10 92 86 03 	sts	0x0386, r1
				
			//if (gate_buffer != 0) PORTF |= (1<<GATE); //if arp is running and there are notes to be played, turn gate ON
		}			
	}
	
     6fe:	ff 91       	pop	r31
     700:	ef 91       	pop	r30
     702:	bf 91       	pop	r27
     704:	af 91       	pop	r26
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	7f 91       	pop	r23
     70c:	6f 91       	pop	r22
     70e:	5f 91       	pop	r21
     710:	4f 91       	pop	r20
     712:	3f 91       	pop	r19
     714:	2f 91       	pop	r18
     716:	0f 90       	pop	r0
     718:	0f be       	out	0x3f, r0	; 63
     71a:	0f 90       	pop	r0
     71c:	1f 90       	pop	r1
     71e:	18 95       	reti

00000720 <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     720:	68 3f       	cpi	r22, 0xF8	; 248
     722:	19 f0       	breq	.+6      	; 0x72a <real_time_event+0xa>
     724:	6a 3f       	cpi	r22, 0xFA	; 250
     726:	c1 f4       	brne	.+48     	; 0x758 <real_time_event+0x38>
     728:	15 c0       	rjmp	.+42     	; 0x754 <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     72a:	80 91 d1 03 	lds	r24, 0x03D1
     72e:	8f 5f       	subi	r24, 0xFF	; 255
     730:	80 93 d1 03 	sts	0x03D1, r24
     734:	90 91 d0 03 	lds	r25, 0x03D0
     738:	89 17       	cp	r24, r25
     73a:	71 f4       	brne	.+28     	; 0x758 <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     73c:	2c 9a       	sbi	0x05, 4	; 5
     73e:	86 e0       	ldi	r24, 0x06	; 6
     740:	8a 95       	dec	r24
     742:	f1 f7       	brne	.-4      	; 0x740 <real_time_event+0x20>
     744:	00 c0       	rjmp	.+0      	; 0x746 <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     746:	85 b1       	in	r24, 0x05	; 5
     748:	80 58       	subi	r24, 0x80	; 128
     74a:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     74c:	10 92 d1 03 	sts	0x03D1, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     750:	2c 98       	cbi	0x05, 4	; 5
     752:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     754:	10 92 d1 03 	sts	0x03D1, r1
     758:	08 95       	ret

0000075a <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     75a:	84 2f       	mov	r24, r20
	
	remove_note(note);
     75c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <remove_note>
	gate_buffer--;
     760:	80 91 b0 02 	lds	r24, 0x02B0
     764:	81 50       	subi	r24, 0x01	; 1
     766:	80 93 b0 02 	sts	0x02B0, r24
	if (arp.clock_source == OFF) {	//if arp is off handle gate
     76a:	90 91 88 03 	lds	r25, 0x0388
     76e:	92 30       	cpi	r25, 0x02	; 2
     770:	21 f4       	brne	.+8      	; 0x77a <note_off_event+0x20>
		//gate_buffer--;
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     772:	88 23       	and	r24, r24
     774:	21 f4       	brne	.+8      	; 0x77e <note_off_event+0x24>
     776:	89 98       	cbi	0x11, 1	; 17
     778:	08 95       	ret
	} else {
		
		update_arp_sequence();
     77a:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     77e:	08 95       	ret

00000780 <note_on_event>:





void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     780:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     782:	90 91 ff 02 	lds	r25, 0x02FF
     786:	90 ff       	sbrs	r25, 0
     788:	06 c0       	rjmp	.+12     	; 0x796 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     78a:	2c 9a       	sbi	0x05, 4	; 5
     78c:	96 e0       	ldi	r25, 0x06	; 6
     78e:	9a 95       	dec	r25
     790:	f1 f7       	brne	.-4      	; 0x78e <note_on_event+0xe>
     792:	00 c0       	rjmp	.+0      	; 0x794 <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     794:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     796:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     79a:	22 23       	and	r18, r18
     79c:	59 f4       	brne	.+22     	; 0x7b4 <note_on_event+0x34>
		remove_note(note);
     79e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <remove_note>
		gate_buffer--;
     7a2:	80 91 b0 02 	lds	r24, 0x02B0
     7a6:	81 50       	subi	r24, 0x01	; 1
     7a8:	80 93 b0 02 	sts	0x02B0, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     7ac:	88 23       	and	r24, r24
     7ae:	91 f4       	brne	.+36     	; 0x7d4 <note_on_event+0x54>
     7b0:	89 98       	cbi	0x11, 1	; 17
     7b2:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);
     7b4:	62 2f       	mov	r22, r18
     7b6:	0e 94 49 01 	call	0x292	; 0x292 <new_note>
		
		gate_buffer++;
     7ba:	80 91 b0 02 	lds	r24, 0x02B0
     7be:	8f 5f       	subi	r24, 0xFF	; 255
     7c0:	80 93 b0 02 	sts	0x02B0, r24
		if (arp.clock_source == OFF) { //if arp is off, handle gate
     7c4:	80 91 88 03 	lds	r24, 0x0388
     7c8:	82 30       	cpi	r24, 0x02	; 2
     7ca:	11 f4       	brne	.+4      	; 0x7d0 <note_on_event+0x50>
			//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
			//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
			//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
			//could implement this with timers. MIDI Implant is 0.5 ms. Could maybe use Timer1 here to generate 0.3-0.5 ms gate retrigger
			
			PORTF |= (1<<GATE); //if arp is OFF then turn on gate. Otherwise arpeggiator handles GATE
     7cc:	89 9a       	sbi	0x11, 1	; 17
     7ce:	08 95       	ret
		} else {
			
			update_arp_sequence();
     7d0:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     7d4:	08 95       	ret

000007d6 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     7d6:	87 e2       	ldi	r24, 0x27	; 39
     7d8:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     7dc:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     7e0:	88 e9       	ldi	r24, 0x98	; 152
     7e2:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     7e6:	08 95       	ret

000007e8 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	2f 93       	push	r18
     7f4:	3f 93       	push	r19
     7f6:	4f 93       	push	r20
     7f8:	5f 93       	push	r21
     7fa:	6f 93       	push	r22
     7fc:	7f 93       	push	r23
     7fe:	8f 93       	push	r24
     800:	9f 93       	push	r25
     802:	af 93       	push	r26
     804:	bf 93       	push	r27
     806:	ef 93       	push	r30
     808:	ff 93       	push	r31
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	0f 92       	push	r0
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     814:	80 91 c6 00 	lds	r24, 0x00C6
     818:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     81a:	86 ed       	ldi	r24, 0xD6	; 214
     81c:	93 e0       	ldi	r25, 0x03	; 3
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	ae 01       	movw	r20, r28
     822:	4f 5f       	subi	r20, 0xFF	; 255
     824:	5f 4f       	sbci	r21, 0xFF	; 255
     826:	0e 94 83 19 	call	0x3306	; 0x3306 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     82a:	0f 90       	pop	r0
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	ff 91       	pop	r31
     832:	ef 91       	pop	r30
     834:	bf 91       	pop	r27
     836:	af 91       	pop	r26
     838:	9f 91       	pop	r25
     83a:	8f 91       	pop	r24
     83c:	7f 91       	pop	r23
     83e:	6f 91       	pop	r22
     840:	5f 91       	pop	r21
     842:	4f 91       	pop	r20
     844:	3f 91       	pop	r19
     846:	2f 91       	pop	r18
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     852:	c0 e8       	ldi	r28, 0x80	; 128
     854:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     856:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     858:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     85a:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     85c:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     85e:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     860:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     862:	0e 94 7c 07 	call	0xef8	; 0xef8 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     866:	a9 ed       	ldi	r26, 0xD9	; 217
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	8c 91       	ld	r24, X
     86c:	80 6c       	ori	r24, 0xC0	; 192
     86e:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     870:	ea ed       	ldi	r30, 0xDA	; 218
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	80 6c       	ori	r24, 0xC0	; 192
     878:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     87a:	81 b1       	in	r24, 0x01	; 1
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     880:	92 b1       	in	r25, 0x02	; 2
     882:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     884:	8c 91       	ld	r24, X
     886:	80 63       	ori	r24, 0x30	; 48
     888:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     88a:	80 81       	ld	r24, Z
     88c:	8f 7c       	andi	r24, 0xCF	; 207
     88e:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     890:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     892:	ec ed       	ldi	r30, 0xDC	; 220
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	80 62       	ori	r24, 0x20	; 32
     89a:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     89c:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     89e:	ed ed       	ldi	r30, 0xDD	; 221
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	80 62       	ori	r24, 0x20	; 32
     8a6:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     8a8:	80 81       	ld	r24, Z
     8aa:	8f 7d       	andi	r24, 0xDF	; 223
     8ac:	80 83       	st	Z, r24
	DATA_BUS = 0;
     8ae:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     8b0:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     8b4:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     8b8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     8bc:	c6 ed       	ldi	r28, 0xD6	; 214
     8be:	d3 e0       	ldi	r29, 0x03	; 3
     8c0:	ce 01       	movw	r24, r28
     8c2:	0e 94 52 19 	call	0x32a4	; 0x32a4 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     8c6:	ce 01       	movw	r24, r28
     8c8:	60 ec       	ldi	r22, 0xC0	; 192
     8ca:	73 e0       	ldi	r23, 0x03	; 3
     8cc:	0e 94 1a 19 	call	0x3234	; 0x3234 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     8d0:	ce 01       	movw	r24, r28
     8d2:	6d ea       	ldi	r22, 0xAD	; 173
     8d4:	73 e0       	ldi	r23, 0x03	; 3
     8d6:	0e 94 1e 19 	call	0x323c	; 0x323c <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     8da:	ce 01       	movw	r24, r28
     8dc:	60 e9       	ldi	r22, 0x90	; 144
     8de:	73 e0       	ldi	r23, 0x03	; 3
     8e0:	0e 94 3e 19 	call	0x327c	; 0x327c <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     8e4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     8e8:	0e 94 a1 07 	call	0xf42	; 0xf42 <update_spi>
	
	
	current_patch.number = 1;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     8f2:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     8f4:	0e 94 80 15 	call	0x2b00	; 0x2b00 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	0e 94 1a 0a 	call	0x1434	; 0x1434 <load_patch>
	
	setup_system_clock();
     8fe:	0e 94 9e 01 	call	0x33c	; 0x33c <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     902:	88 e1       	ldi	r24, 0x18	; 24
     904:	80 93 ca 03 	sts	0x03CA, r24
	arp.step_position = 0; //initialize step position
     908:	10 92 86 03 	sts	0x0386, r1

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     90c:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     90e:	0f 2e       	mov	r0, r31
     910:	f0 e8       	ldi	r31, 0x80	; 128
     912:	ef 2e       	mov	r14, r31
     914:	f3 e0       	ldi	r31, 0x03	; 3
     916:	ff 2e       	mov	r15, r31
     918:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     91a:	0f 2e       	mov	r0, r31
     91c:	f7 e0       	ldi	r31, 0x07	; 7
     91e:	cf 2e       	mov	r12, r31
     920:	f3 e0       	ldi	r31, 0x03	; 3
     922:	df 2e       	mov	r13, r31
     924:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     926:	bb 24       	eor	r11, r11
     928:	68 94       	set
     92a:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     92c:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     92e:	c8 01       	movw	r24, r16
     930:	0e 94 ad 1b 	call	0x375a	; 0x375a <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     934:	80 91 fd 01 	lds	r24, 0x01FD
     938:	90 91 fe 01 	lds	r25, 0x01FE
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     942:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <scan_pots>
		update_control_voltages();
     946:	0e 94 5d 05 	call	0xaba	; 0xaba <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     94a:	80 91 b9 02 	lds	r24, 0x02B9
     94e:	98 2f       	mov	r25, r24
     950:	9f 5f       	subi	r25, 0xFF	; 255
     952:	90 93 b9 02 	sts	0x02B9, r25
     956:	85 30       	cpi	r24, 0x05	; 5
     958:	51 f7       	brne	.-44     	; 0x92e <main+0xdc>
		{
			switch_timer = 0;
     95a:	10 92 b9 02 	sts	0x02B9, r1
			switch_press = 0; //reset global switch press flag
     95e:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     962:	f7 01       	movw	r30, r14
     964:	c0 81       	ld	r28, Z
     966:	0e 94 34 16 	call	0x2c68	; 0x2c68 <read_switch_port>
     96a:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     96c:	f6 01       	movw	r30, r12
     96e:	90 81       	ld	r25, Z
     970:	91 30       	cpi	r25, 0x01	; 1
     972:	11 f4       	brne	.+4      	; 0x978 <main+0x126>
     974:	cd 2f       	mov	r28, r29
     976:	01 c0       	rjmp	.+2      	; 0x97a <main+0x128>
     978:	c0 e0       	ldi	r28, 0x00	; 0
     97a:	c8 2b       	or	r28, r24
     97c:	f7 01       	movw	r30, r14
     97e:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     980:	0e 94 a1 07 	call	0xf42	; 0xf42 <update_spi>
			if (switch_press) { 
     984:	80 91 c1 02 	lds	r24, 0x02C1
     988:	88 23       	and	r24, r24
     98a:	39 f0       	breq	.+14     	; 0x99a <main+0x148>
				update_patch();
     98c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     990:	f6 01       	movw	r30, r12
     992:	80 81       	ld	r24, Z
     994:	88 23       	and	r24, r24
     996:	09 f4       	brne	.+2      	; 0x99a <main+0x148>
     998:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     99a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <update_patch_programmer>
     99e:	c7 cf       	rjmp	.-114    	; 0x92e <main+0xdc>

000009a0 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     9a0:	bf 92       	push	r11
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	c0 e0       	ldi	r28, 0x00	; 0
     9b4:	d1 e0       	ldi	r29, 0x01	; 1
     9b6:	02 ec       	ldi	r16, 0xC2	; 194
     9b8:	12 e0       	ldi	r17, 0x02	; 2
     9ba:	0f 2e       	mov	r0, r31
     9bc:	fc e3       	ldi	r31, 0x3C	; 60
     9be:	cf 2e       	mov	r12, r31
     9c0:	dd 24       	eor	r13, r13
     9c2:	f0 2d       	mov	r31, r0
     9c4:	cc 0e       	add	r12, r28
     9c6:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     9c8:	0f 2e       	mov	r0, r31
     9ca:	f7 e0       	ldi	r31, 0x07	; 7
     9cc:	ef 2e       	mov	r14, r31
     9ce:	f3 e0       	ldi	r31, 0x03	; 3
     9d0:	ff 2e       	mov	r15, r31
     9d2:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     9d4:	bb 24       	eor	r11, r11
     9d6:	68 94       	set
     9d8:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     9da:	88 81       	ld	r24, Y
     9dc:	99 81       	ldd	r25, Y+1	; 0x01
     9de:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     9e2:	90 93 bc 02 	sts	0x02BC, r25
     9e6:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     9ea:	e8 81       	ld	r30, Y
     9ec:	f9 81       	ldd	r31, Y+1	; 0x01
     9ee:	40 81       	ld	r20, Z
     9f0:	21 81       	ldd	r18, Z+1	; 0x01
     9f2:	52 2f       	mov	r21, r18
     9f4:	53 70       	andi	r21, 0x03	; 3
     9f6:	84 1b       	sub	r24, r20
     9f8:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     9fa:	95 95       	asr	r25
     9fc:	87 95       	ror	r24
     9fe:	95 95       	asr	r25
     a00:	87 95       	ror	r24
     a02:	84 0f       	add	r24, r20
     a04:	95 1f       	adc	r25, r21
     a06:	80 83       	st	Z, r24
     a08:	89 2f       	mov	r24, r25
     a0a:	83 70       	andi	r24, 0x03	; 3
     a0c:	2c 7f       	andi	r18, 0xFC	; 252
     a0e:	28 2b       	or	r18, r24
     a10:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     a12:	e9 91       	ld	r30, Y+
     a14:	f9 91       	ld	r31, Y+
     a16:	92 81       	ldd	r25, Z+2	; 0x02
     a18:	20 81       	ld	r18, Z
     a1a:	81 81       	ldd	r24, Z+1	; 0x01
     a1c:	38 2f       	mov	r19, r24
     a1e:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     a20:	d7 01       	movw	r26, r14
     a22:	8c 91       	ld	r24, X
     a24:	81 30       	cpi	r24, 0x01	; 1
     a26:	19 f0       	breq	.+6      	; 0xa2e <scan_pots+0x8e>
     a28:	83 81       	ldd	r24, Z+3	; 0x03
     a2a:	88 23       	and	r24, r24
     a2c:	24 f0       	brlt	.+8      	; 0xa36 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     a2e:	f8 01       	movw	r30, r16
     a30:	31 83       	std	Z+1, r19	; 0x01
     a32:	20 83       	st	Z, r18
     a34:	14 c0       	rjmp	.+40     	; 0xa5e <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     a36:	49 2f       	mov	r20, r25
     a38:	43 50       	subi	r20, 0x03	; 3
     a3a:	c9 01       	movw	r24, r18
     a3c:	95 95       	asr	r25
     a3e:	87 95       	ror	r24
     a40:	95 95       	asr	r25
     a42:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     a44:	94 2f       	mov	r25, r20
     a46:	98 1b       	sub	r25, r24
     a48:	9a 3f       	cpi	r25, 0xFA	; 250
     a4a:	48 f4       	brcc	.+18     	; 0xa5e <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     a4c:	d8 01       	movw	r26, r16
     a4e:	11 96       	adiw	r26, 0x01	; 1
     a50:	3c 93       	st	X, r19
     a52:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     a54:	83 81       	ldd	r24, Z+3	; 0x03
     a56:	8f 77       	andi	r24, 0x7F	; 127
     a58:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     a5a:	f7 01       	movw	r30, r14
     a5c:	b0 82       	st	Z, r11
     a5e:	0e 5f       	subi	r16, 0xFE	; 254
     a60:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     a62:	cc 15       	cp	r28, r12
     a64:	dd 05       	cpc	r29, r13
     a66:	09 f0       	breq	.+2      	; 0xa6a <scan_pots+0xca>
     a68:	b8 cf       	rjmp	.-144    	; 0x9da <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     a6a:	8c e7       	ldi	r24, 0x7C	; 124
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     a72:	90 93 bc 02 	sts	0x02BC, r25
     a76:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     a7a:	20 91 7c 01 	lds	r18, 0x017C
     a7e:	40 91 7d 01 	lds	r20, 0x017D
     a82:	34 2f       	mov	r19, r20
     a84:	33 70       	andi	r19, 0x03	; 3
     a86:	82 1b       	sub	r24, r18
     a88:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     a8a:	95 95       	asr	r25
     a8c:	87 95       	ror	r24
     a8e:	95 95       	asr	r25
     a90:	87 95       	ror	r24
     a92:	28 0f       	add	r18, r24
     a94:	39 1f       	adc	r19, r25
     a96:	20 93 7c 01 	sts	0x017C, r18
     a9a:	83 2f       	mov	r24, r19
     a9c:	83 70       	andi	r24, 0x03	; 3
     a9e:	4c 7f       	andi	r20, 0xFC	; 252
     aa0:	48 2b       	or	r20, r24
     aa2:	40 93 7d 01 	sts	0x017D, r20
	
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
     ab6:	bf 90       	pop	r11
     ab8:	08 95       	ret

00000aba <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     abe:	60 91 c2 02 	lds	r22, 0x02C2
     ac2:	70 91 c3 02 	lds	r23, 0x02C3
     ac6:	62 95       	swap	r22
     ac8:	72 95       	swap	r23
     aca:	70 7f       	andi	r23, 0xF0	; 240
     acc:	76 27       	eor	r23, r22
     ace:	60 7f       	andi	r22, 0xF0	; 240
     ad0:	76 27       	eor	r23, r22
     ad2:	84 ee       	ldi	r24, 0xE4	; 228
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     ada:	60 91 c4 02 	lds	r22, 0x02C4
     ade:	70 91 c5 02 	lds	r23, 0x02C5
     ae2:	62 95       	swap	r22
     ae4:	72 95       	swap	r23
     ae6:	70 7f       	andi	r23, 0xF0	; 240
     ae8:	76 27       	eor	r23, r22
     aea:	60 7f       	andi	r22, 0xF0	; 240
     aec:	76 27       	eor	r23, r22
     aee:	83 ee       	ldi	r24, 0xE3	; 227
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     af6:	60 91 c6 02 	lds	r22, 0x02C6
     afa:	70 91 c7 02 	lds	r23, 0x02C7
     afe:	66 0f       	add	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	66 0f       	add	r22, r22
     b04:	77 1f       	adc	r23, r23
     b06:	66 0f       	add	r22, r22
     b08:	77 1f       	adc	r23, r23
     b0a:	82 ee       	ldi	r24, 0xE2	; 226
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     b12:	60 91 c8 02 	lds	r22, 0x02C8
     b16:	70 91 c9 02 	lds	r23, 0x02C9
     b1a:	62 95       	swap	r22
     b1c:	72 95       	swap	r23
     b1e:	70 7f       	andi	r23, 0xF0	; 240
     b20:	76 27       	eor	r23, r22
     b22:	60 7f       	andi	r22, 0xF0	; 240
     b24:	76 27       	eor	r23, r22
     b26:	83 eb       	ldi	r24, 0xB3	; 179
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     b2e:	60 91 ca 02 	lds	r22, 0x02CA
     b32:	70 91 cb 02 	lds	r23, 0x02CB
     b36:	66 0f       	add	r22, r22
     b38:	77 1f       	adc	r23, r23
     b3a:	66 0f       	add	r22, r22
     b3c:	77 1f       	adc	r23, r23
     b3e:	66 0f       	add	r22, r22
     b40:	77 1f       	adc	r23, r23
     b42:	81 ee       	ldi	r24, 0xE1	; 225
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     b4a:	60 91 cc 02 	lds	r22, 0x02CC
     b4e:	70 91 cd 02 	lds	r23, 0x02CD
     b52:	62 95       	swap	r22
     b54:	72 95       	swap	r23
     b56:	70 7f       	andi	r23, 0xF0	; 240
     b58:	76 27       	eor	r23, r22
     b5a:	60 7f       	andi	r22, 0xF0	; 240
     b5c:	76 27       	eor	r23, r22
     b5e:	80 ee       	ldi	r24, 0xE0	; 224
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     b66:	60 91 ce 02 	lds	r22, 0x02CE
     b6a:	70 91 cf 02 	lds	r23, 0x02CF
     b6e:	62 95       	swap	r22
     b70:	72 95       	swap	r23
     b72:	70 7f       	andi	r23, 0xF0	; 240
     b74:	76 27       	eor	r23, r22
     b76:	60 7f       	andi	r22, 0xF0	; 240
     b78:	76 27       	eor	r23, r22
     b7a:	8f ed       	ldi	r24, 0xDF	; 223
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     b82:	60 91 d0 02 	lds	r22, 0x02D0
     b86:	70 91 d1 02 	lds	r23, 0x02D1
     b8a:	62 95       	swap	r22
     b8c:	72 95       	swap	r23
     b8e:	70 7f       	andi	r23, 0xF0	; 240
     b90:	76 27       	eor	r23, r22
     b92:	60 7f       	andi	r22, 0xF0	; 240
     b94:	76 27       	eor	r23, r22
     b96:	8e ed       	ldi	r24, 0xDE	; 222
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     b9e:	80 91 d4 02 	lds	r24, 0x02D4
     ba2:	90 91 d5 02 	lds	r25, 0x02D5
     ba6:	c0 e0       	ldi	r28, 0x00	; 0
     ba8:	d2 e0       	ldi	r29, 0x02	; 2
     baa:	c8 1b       	sub	r28, r24
     bac:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     bae:	60 91 73 03 	lds	r22, 0x0373
     bb2:	70 91 74 03 	lds	r23, 0x0374
     bb6:	60 50       	subi	r22, 0x00	; 0
     bb8:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     bba:	80 91 d2 02 	lds	r24, 0x02D2
     bbe:	90 91 d3 02 	lds	r25, 0x02D3
     bc2:	68 1b       	sub	r22, r24
     bc4:	79 0b       	sbc	r23, r25
     bc6:	6c 0f       	add	r22, r28
     bc8:	7d 1f       	adc	r23, r29
     bca:	8d ed       	ldi	r24, 0xDD	; 221
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     bd2:	60 91 75 03 	lds	r22, 0x0375
     bd6:	70 91 76 03 	lds	r23, 0x0376
     bda:	6c 0f       	add	r22, r28
     bdc:	7d 1f       	adc	r23, r29
     bde:	8c ed       	ldi	r24, 0xDC	; 220
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     be6:	60 91 d6 02 	lds	r22, 0x02D6
     bea:	70 91 d7 02 	lds	r23, 0x02D7
     bee:	62 95       	swap	r22
     bf0:	72 95       	swap	r23
     bf2:	70 7f       	andi	r23, 0xF0	; 240
     bf4:	76 27       	eor	r23, r22
     bf6:	60 7f       	andi	r22, 0xF0	; 240
     bf8:	76 27       	eor	r23, r22
     bfa:	8b ed       	ldi	r24, 0xDB	; 219
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     c02:	60 91 da 02 	lds	r22, 0x02DA
     c06:	70 91 db 02 	lds	r23, 0x02DB
     c0a:	62 95       	swap	r22
     c0c:	72 95       	swap	r23
     c0e:	70 7f       	andi	r23, 0xF0	; 240
     c10:	76 27       	eor	r23, r22
     c12:	60 7f       	andi	r22, 0xF0	; 240
     c14:	76 27       	eor	r23, r22
     c16:	8a ed       	ldi	r24, 0xDA	; 218
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     c1e:	60 91 dc 02 	lds	r22, 0x02DC
     c22:	70 91 dd 02 	lds	r23, 0x02DD
     c26:	62 95       	swap	r22
     c28:	72 95       	swap	r23
     c2a:	70 7f       	andi	r23, 0xF0	; 240
     c2c:	76 27       	eor	r23, r22
     c2e:	60 7f       	andi	r22, 0xF0	; 240
     c30:	76 27       	eor	r23, r22
     c32:	89 ed       	ldi	r24, 0xD9	; 217
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     c3a:	60 91 7c 01 	lds	r22, 0x017C
     c3e:	80 91 7d 01 	lds	r24, 0x017D
     c42:	78 2f       	mov	r23, r24
     c44:	73 70       	andi	r23, 0x03	; 3
     c46:	62 95       	swap	r22
     c48:	72 95       	swap	r23
     c4a:	70 7f       	andi	r23, 0xF0	; 240
     c4c:	76 27       	eor	r23, r22
     c4e:	60 7f       	andi	r22, 0xF0	; 240
     c50:	76 27       	eor	r23, r22
     c52:	88 ed       	ldi	r24, 0xD8	; 216
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     c5a:	60 91 de 02 	lds	r22, 0x02DE
     c5e:	70 91 df 02 	lds	r23, 0x02DF
     c62:	62 95       	swap	r22
     c64:	72 95       	swap	r23
     c66:	70 7f       	andi	r23, 0xF0	; 240
     c68:	76 27       	eor	r23, r22
     c6a:	60 7f       	andi	r22, 0xF0	; 240
     c6c:	76 27       	eor	r23, r22
     c6e:	87 ed       	ldi	r24, 0xD7	; 215
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     c76:	60 91 e0 02 	lds	r22, 0x02E0
     c7a:	70 91 e1 02 	lds	r23, 0x02E1
     c7e:	62 95       	swap	r22
     c80:	72 95       	swap	r23
     c82:	70 7f       	andi	r23, 0xF0	; 240
     c84:	76 27       	eor	r23, r22
     c86:	60 7f       	andi	r22, 0xF0	; 240
     c88:	76 27       	eor	r23, r22
     c8a:	86 ed       	ldi	r24, 0xD6	; 214
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     c92:	60 91 e2 02 	lds	r22, 0x02E2
     c96:	70 91 e3 02 	lds	r23, 0x02E3
     c9a:	62 95       	swap	r22
     c9c:	72 95       	swap	r23
     c9e:	70 7f       	andi	r23, 0xF0	; 240
     ca0:	76 27       	eor	r23, r22
     ca2:	60 7f       	andi	r22, 0xF0	; 240
     ca4:	76 27       	eor	r23, r22
     ca6:	85 ed       	ldi	r24, 0xD5	; 213
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     cae:	0e 94 3f 01 	call	0x27e	; 0x27e <get_current_note>
     cb2:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     cb4:	88 30       	cpi	r24, 0x08	; 8
     cb6:	08 f4       	brcc	.+2      	; 0xcba <update_control_voltages+0x200>
     cb8:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = current_patch.number + 100*(arp.sequence[arp.step_position].note); //100*note;
	//value_to_display = arp.sequence[arp.step_position].note;
	//uint8_t arp_note = arp.sequence[arp.step_position].note;
	//if (arp_note == EMPTY) arp_note = 0;
	value_to_display = current_patch.number + 100*arp.step_position;
     cba:	60 91 03 03 	lds	r22, 0x0303
     cbe:	40 91 86 03 	lds	r20, 0x0386
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	24 e6       	ldi	r18, 0x64	; 100
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	42 9f       	mul	r20, r18
     cca:	c0 01       	movw	r24, r0
     ccc:	43 9f       	mul	r20, r19
     cce:	90 0d       	add	r25, r0
     cd0:	52 9f       	mul	r21, r18
     cd2:	90 0d       	add	r25, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	86 0f       	add	r24, r22
     cd8:	91 1d       	adc	r25, r1
     cda:	90 93 fe 01 	sts	0x01FE, r25
     cde:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     ce2:	8c 2f       	mov	r24, r28
     ce4:	88 50       	subi	r24, 0x08	; 8
     ce6:	6f e0       	ldi	r22, 0x0F	; 15
     ce8:	73 e0       	ldi	r23, 0x03	; 3
     cea:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     cee:	bc 01       	movw	r22, r24
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	20 91 e6 02 	lds	r18, 0x02E6
     cf8:	30 91 e7 02 	lds	r19, 0x02E7
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <__mulsi3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	07 2e       	mov	r0, r23
     d0a:	7a e0       	ldi	r23, 0x0A	; 10
     d0c:	b6 95       	lsr	r27
     d0e:	a7 95       	ror	r26
     d10:	97 95       	ror	r25
     d12:	87 95       	ror	r24
     d14:	7a 95       	dec	r23
     d16:	d1 f7       	brne	.-12     	; 0xd0c <update_control_voltages+0x252>
     d18:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     d1a:	60 91 e4 02 	lds	r22, 0x02E4
     d1e:	70 91 e5 02 	lds	r23, 0x02E5
     d22:	62 95       	swap	r22
     d24:	72 95       	swap	r23
     d26:	70 7f       	andi	r23, 0xF0	; 240
     d28:	76 27       	eor	r23, r22
     d2a:	60 7f       	andi	r22, 0xF0	; 240
     d2c:	76 27       	eor	r23, r22
     d2e:	86 0f       	add	r24, r22
     d30:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     d32:	bc 01       	movw	r22, r24
     d34:	80 e4       	ldi	r24, 0x40	; 64
     d36:	60 30       	cpi	r22, 0x00	; 0
     d38:	78 07       	cpc	r23, r24
     d3a:	10 f0       	brcs	.+4      	; 0xd40 <update_control_voltages+0x286>
     d3c:	6f ef       	ldi	r22, 0xFF	; 255
     d3e:	7f e3       	ldi	r23, 0x3F	; 63
     d40:	84 ed       	ldi	r24, 0xD4	; 212
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     d48:	60 91 e8 02 	lds	r22, 0x02E8
     d4c:	70 91 e9 02 	lds	r23, 0x02E9
     d50:	62 95       	swap	r22
     d52:	72 95       	swap	r23
     d54:	70 7f       	andi	r23, 0xF0	; 240
     d56:	76 27       	eor	r23, r22
     d58:	60 7f       	andi	r22, 0xF0	; 240
     d5a:	76 27       	eor	r23, r22
     d5c:	82 ed       	ldi	r24, 0xD2	; 210
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     d64:	60 91 ea 02 	lds	r22, 0x02EA
     d68:	70 91 eb 02 	lds	r23, 0x02EB
     d6c:	62 95       	swap	r22
     d6e:	72 95       	swap	r23
     d70:	70 7f       	andi	r23, 0xF0	; 240
     d72:	76 27       	eor	r23, r22
     d74:	60 7f       	andi	r22, 0xF0	; 240
     d76:	76 27       	eor	r23, r22
     d78:	81 ed       	ldi	r24, 0xD1	; 209
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     d80:	60 91 ec 02 	lds	r22, 0x02EC
     d84:	70 91 ed 02 	lds	r23, 0x02ED
     d88:	62 95       	swap	r22
     d8a:	72 95       	swap	r23
     d8c:	70 7f       	andi	r23, 0xF0	; 240
     d8e:	76 27       	eor	r23, r22
     d90:	60 7f       	andi	r22, 0xF0	; 240
     d92:	76 27       	eor	r23, r22
     d94:	80 ed       	ldi	r24, 0xD0	; 208
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     d9c:	60 91 ee 02 	lds	r22, 0x02EE
     da0:	70 91 ef 02 	lds	r23, 0x02EF
     da4:	62 95       	swap	r22
     da6:	72 95       	swap	r23
     da8:	70 7f       	andi	r23, 0xF0	; 240
     daa:	76 27       	eor	r23, r22
     dac:	60 7f       	andi	r22, 0xF0	; 240
     dae:	76 27       	eor	r23, r22
     db0:	8f ec       	ldi	r24, 0xCF	; 207
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     db8:	60 91 f0 02 	lds	r22, 0x02F0
     dbc:	70 91 f1 02 	lds	r23, 0x02F1
     dc0:	62 95       	swap	r22
     dc2:	72 95       	swap	r23
     dc4:	70 7f       	andi	r23, 0xF0	; 240
     dc6:	76 27       	eor	r23, r22
     dc8:	60 7f       	andi	r22, 0xF0	; 240
     dca:	76 27       	eor	r23, r22
     dcc:	8e ec       	ldi	r24, 0xCE	; 206
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     dd4:	60 91 f2 02 	lds	r22, 0x02F2
     dd8:	70 91 f3 02 	lds	r23, 0x02F3
     ddc:	62 95       	swap	r22
     dde:	72 95       	swap	r23
     de0:	70 7f       	andi	r23, 0xF0	; 240
     de2:	76 27       	eor	r23, r22
     de4:	60 7f       	andi	r22, 0xF0	; 240
     de6:	76 27       	eor	r23, r22
     de8:	8d ec       	ldi	r24, 0xCD	; 205
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     df0:	60 91 f4 02 	lds	r22, 0x02F4
     df4:	70 91 f5 02 	lds	r23, 0x02F5
     df8:	62 95       	swap	r22
     dfa:	72 95       	swap	r23
     dfc:	70 7f       	andi	r23, 0xF0	; 240
     dfe:	76 27       	eor	r23, r22
     e00:	60 7f       	andi	r22, 0xF0	; 240
     e02:	76 27       	eor	r23, r22
     e04:	8c ec       	ldi	r24, 0xCC	; 204
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     e0c:	60 91 f8 02 	lds	r22, 0x02F8
     e10:	70 91 f9 02 	lds	r23, 0x02F9
     e14:	62 95       	swap	r22
     e16:	72 95       	swap	r23
     e18:	70 7f       	andi	r23, 0xF0	; 240
     e1a:	76 27       	eor	r23, r22
     e1c:	60 7f       	andi	r22, 0xF0	; 240
     e1e:	76 27       	eor	r23, r22
     e20:	8a ec       	ldi	r24, 0xCA	; 202
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     e28:	60 91 f6 02 	lds	r22, 0x02F6
     e2c:	70 91 f7 02 	lds	r23, 0x02F7
     e30:	62 95       	swap	r22
     e32:	72 95       	swap	r23
     e34:	70 7f       	andi	r23, 0xF0	; 240
     e36:	76 27       	eor	r23, r22
     e38:	60 7f       	andi	r22, 0xF0	; 240
     e3a:	76 27       	eor	r23, r22
     e3c:	8b ec       	ldi	r24, 0xCB	; 203
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     e44:	60 91 fc 02 	lds	r22, 0x02FC
     e48:	70 91 fd 02 	lds	r23, 0x02FD
     e4c:	62 95       	swap	r22
     e4e:	72 95       	swap	r23
     e50:	70 7f       	andi	r23, 0xF0	; 240
     e52:	76 27       	eor	r23, r22
     e54:	60 7f       	andi	r22, 0xF0	; 240
     e56:	76 27       	eor	r23, r22
     e58:	88 ec       	ldi	r24, 0xC8	; 200
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     e60:	60 91 fa 02 	lds	r22, 0x02FA
     e64:	70 91 fb 02 	lds	r23, 0x02FB
     e68:	62 95       	swap	r22
     e6a:	72 95       	swap	r23
     e6c:	70 7f       	andi	r23, 0xF0	; 240
     e6e:	76 27       	eor	r23, r22
     e70:	60 7f       	andi	r22, 0xF0	; 240
     e72:	76 27       	eor	r23, r22
     e74:	89 ec       	ldi	r24, 0xC9	; 201
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     e7c:	8c 2f       	mov	r24, r28
     e7e:	6f e0       	ldi	r22, 0x0F	; 15
     e80:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     e84:	61 e5       	ldi	r22, 0x51	; 81
     e86:	73 e0       	ldi	r23, 0x03	; 3
     e88:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <interpolate_pitch_cv>
     e8c:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     e8e:	86 ee       	ldi	r24, 0xE6	; 230
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     e96:	8c 2f       	mov	r24, r28
     e98:	60 ef       	ldi	r22, 0xF0	; 240
     e9a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     e9e:	6f e2       	ldi	r22, 0x2F	; 47
     ea0:	73 e0       	ldi	r23, 0x03	; 3
     ea2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <interpolate_pitch_cv>
     ea6:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     ea8:	85 ee       	ldi	r24, 0xE5	; 229
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     eb0:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     eb2:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     eb4:	20 91 88 01 	lds	r18, 0x0188
     eb8:	80 91 89 01 	lds	r24, 0x0189
     ebc:	38 2f       	mov	r19, r24
     ebe:	33 70       	andi	r19, 0x03	; 3
     ec0:	83 ef       	ldi	r24, 0xF3	; 243
     ec2:	94 e0       	ldi	r25, 0x04	; 4
     ec4:	82 1b       	sub	r24, r18
     ec6:	93 0b       	sbc	r25, r19
     ec8:	90 93 cd 03 	sts	0x03CD, r25
     ecc:	80 93 cc 03 	sts	0x03CC, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     ed0:	20 91 ce 03 	lds	r18, 0x03CE
     ed4:	30 91 cf 03 	lds	r19, 0x03CF
     ed8:	82 17       	cp	r24, r18
     eda:	93 07       	cpc	r25, r19
     edc:	11 f0       	breq	.+4      	; 0xee2 <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
     ede:	0e 94 a5 01 	call	0x34a	; 0x34a <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     ee2:	80 91 cc 03 	lds	r24, 0x03CC
     ee6:	90 91 cd 03 	lds	r25, 0x03CD
     eea:	90 93 cf 03 	sts	0x03CF, r25
     eee:	80 93 ce 03 	sts	0x03CE, r24
	
}			
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	08 95       	ret

00000ef8 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     ef8:	84 b1       	in	r24, 0x04	; 4
     efa:	87 62       	ori	r24, 0x27	; 39
     efc:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     efe:	ec ed       	ldi	r30, 0xDC	; 220
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8c 65       	ori	r24, 0x5C	; 92
     f06:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     f08:	85 b1       	in	r24, 0x05	; 5
     f0a:	89 7d       	andi	r24, 0xD9	; 217
     f0c:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     f0e:	ed ed       	ldi	r30, 0xDD	; 221
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	83 7f       	andi	r24, 0xF3	; 243
     f16:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     f18:	80 e5       	ldi	r24, 0x50	; 80
     f1a:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     f1c:	80 81       	ld	r24, Z
     f1e:	87 7f       	andi	r24, 0xF7	; 247
     f20:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     f22:	80 81       	ld	r24, Z
     f24:	87 7f       	andi	r24, 0xF7	; 247
     f26:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     f28:	80 81       	ld	r24, Z
     f2a:	88 60       	ori	r24, 0x08	; 8
     f2c:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     f2e:	80 81       	ld	r24, Z
     f30:	8f 7e       	andi	r24, 0xEF	; 239
     f32:	80 83       	st	Z, r24
	
}
     f34:	08 95       	ret

00000f36 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     f36:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     f38:	0d b4       	in	r0, 0x2d	; 45
     f3a:	07 fe       	sbrs	r0, 7
     f3c:	fd cf       	rjmp	.-6      	; 0xf38 <spi_shift_byte+0x2>
	return SPDR;
     f3e:	8e b5       	in	r24, 0x2e	; 46
	
}
     f40:	08 95       	ret

00000f42 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     f42:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     f44:	80 91 02 03 	lds	r24, 0x0302
     f48:	0e 94 9b 07 	call	0xf36	; 0xf36 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     f4c:	90 91 c1 02 	lds	r25, 0x02C1
     f50:	98 2b       	or	r25, r24
     f52:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     f56:	20 91 bf 02 	lds	r18, 0x02BF
     f5a:	98 2f       	mov	r25, r24
     f5c:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     f5e:	89 2f       	mov	r24, r25
     f60:	82 27       	eor	r24, r18
     f62:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     f66:	89 23       	and	r24, r25
     f68:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     f6c:	90 91 7e 03 	lds	r25, 0x037E
     f70:	89 27       	eor	r24, r25
     f72:	80 93 7e 03 	sts	0x037E, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     f76:	80 91 01 03 	lds	r24, 0x0301
     f7a:	0e 94 9b 07 	call	0xf36	; 0xf36 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     f7e:	90 91 c1 02 	lds	r25, 0x02C1
     f82:	98 2b       	or	r25, r24
     f84:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     f88:	20 91 bd 02 	lds	r18, 0x02BD
     f8c:	98 2f       	mov	r25, r24
     f8e:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     f90:	89 2f       	mov	r24, r25
     f92:	82 27       	eor	r24, r18
     f94:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     f98:	89 23       	and	r24, r25
     f9a:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     f9e:	90 91 7f 03 	lds	r25, 0x037F
     fa2:	89 27       	eor	r24, r25
     fa4:	80 93 7f 03 	sts	0x037F, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     fa8:	80 91 00 03 	lds	r24, 0x0300
     fac:	0e 94 9b 07 	call	0xf36	; 0xf36 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     fb0:	80 91 ff 02 	lds	r24, 0x02FF
     fb4:	0e 94 9b 07 	call	0xf36	; 0xf36 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     fb8:	80 91 07 03 	lds	r24, 0x0307
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	11 f4       	brne	.+4      	; 0xfc4 <update_spi+0x82>
     fc0:	20 e8       	ldi	r18, 0x80	; 128
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <update_spi+0x84>
     fc4:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
     fc6:	80 91 80 03 	lds	r24, 0x0380
     fca:	88 1f       	adc	r24, r24
     fcc:	88 27       	eor	r24, r24
     fce:	88 1f       	adc	r24, r24
     fd0:	82 95       	swap	r24
     fd2:	88 0f       	add	r24, r24
     fd4:	88 0f       	add	r24, r24
     fd6:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     fd8:	90 91 fe 02 	lds	r25, 0x02FE
     fdc:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     fde:	82 2b       	or	r24, r18
     fe0:	0e 94 9b 07 	call	0xf36	; 0xf36 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     fe4:	ed ed       	ldi	r30, 0xDD	; 221
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	87 7f       	andi	r24, 0xF7	; 247
     fec:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     fee:	80 81       	ld	r24, Z
     ff0:	88 60       	ori	r24, 0x08	; 8
     ff2:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     ff4:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     ff6:	08 95       	ret

00000ff8 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     ff8:	a0 e0       	ldi	r26, 0x00	; 0
     ffa:	b1 e0       	ldi	r27, 0x01	; 1
     ffc:	9d 01       	movw	r18, r26
     ffe:	24 5c       	subi	r18, 0xC4	; 196
    1000:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
    1002:	ed 91       	ld	r30, X+
    1004:	fc 91       	ld	r31, X
    1006:	11 97       	sbiw	r26, 0x01	; 1
    1008:	80 81       	ld	r24, Z
    100a:	41 81       	ldd	r20, Z+1	; 0x01
    100c:	94 2f       	mov	r25, r20
    100e:	93 70       	andi	r25, 0x03	; 3
    1010:	95 95       	asr	r25
    1012:	87 95       	ror	r24
    1014:	95 95       	asr	r25
    1016:	87 95       	ror	r24
    1018:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
    101a:	ed 91       	ld	r30, X+
    101c:	fd 91       	ld	r31, X+
    101e:	83 81       	ldd	r24, Z+3	; 0x03
    1020:	80 68       	ori	r24, 0x80	; 128
    1022:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
    1024:	a2 17       	cp	r26, r18
    1026:	b3 07       	cpc	r27, r19
    1028:	61 f7       	brne	.-40     	; 0x1002 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
    102a:	08 95       	ret

0000102c <unlock_pots>:

void unlock_pots(void) {
    102c:	e0 e0       	ldi	r30, 0x00	; 0
    102e:	f1 e0       	ldi	r31, 0x01	; 1
    1030:	cf 01       	movw	r24, r30
    1032:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
    1034:	a1 91       	ld	r26, Z+
    1036:	b1 91       	ld	r27, Z+
    1038:	13 96       	adiw	r26, 0x03	; 3
    103a:	2c 91       	ld	r18, X
    103c:	13 97       	sbiw	r26, 0x03	; 3
    103e:	2f 77       	andi	r18, 0x7F	; 127
    1040:	13 96       	adiw	r26, 0x03	; 3
    1042:	2c 93       	st	X, r18
    1044:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
    1046:	e8 17       	cp	r30, r24
    1048:	f9 07       	cpc	r31, r25
    104a:	a1 f7       	brne	.-24     	; 0x1034 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
    104c:	08 95       	ret

0000104e <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	ab 97       	sbiw	r28, 0x2b	; 43
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
    1066:	ee ed       	ldi	r30, 0xDE	; 222
    1068:	f2 e0       	ldi	r31, 0x02	; 2
    106a:	20 91 de 02 	lds	r18, 0x02DE
    106e:	82 2f       	mov	r24, r18
    1070:	82 95       	swap	r24
    1072:	80 7f       	andi	r24, 0xF0	; 240
    1074:	22 95       	swap	r18
    1076:	2f 70       	andi	r18, 0x0F	; 15
    1078:	90 91 df 02 	lds	r25, 0x02DF
    107c:	93 70       	andi	r25, 0x03	; 3
    107e:	92 95       	swap	r25
    1080:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
    1082:	df 01       	movw	r26, r30
    1084:	5a 97       	sbiw	r26, 0x1a	; 26
    1086:	3c 91       	ld	r19, X
    1088:	53 2f       	mov	r21, r19
    108a:	55 0f       	add	r21, r21
    108c:	55 0f       	add	r21, r21
    108e:	4a 81       	ldd	r20, Y+2	; 0x02
    1090:	43 70       	andi	r20, 0x03	; 3
    1092:	45 2b       	or	r20, r21
    1094:	4a 83       	std	Y+2, r20	; 0x02
    1096:	63 2f       	mov	r22, r19
    1098:	62 95       	swap	r22
    109a:	66 95       	lsr	r22
    109c:	66 95       	lsr	r22
    109e:	63 70       	andi	r22, 0x03	; 3
    10a0:	11 96       	adiw	r26, 0x01	; 1
    10a2:	4c 91       	ld	r20, X
    10a4:	43 70       	andi	r20, 0x03	; 3
    10a6:	44 0f       	add	r20, r20
    10a8:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    10aa:	df 01       	movw	r26, r30
    10ac:	58 97       	sbiw	r26, 0x18	; 24
    10ae:	3c 91       	ld	r19, X
    10b0:	53 2f       	mov	r21, r19
    10b2:	52 95       	swap	r21
    10b4:	50 7f       	andi	r21, 0xF0	; 240
    10b6:	46 2b       	or	r20, r22
    10b8:	45 2b       	or	r20, r21
    10ba:	4b 83       	std	Y+3, r20	; 0x03
    10bc:	63 2f       	mov	r22, r19
    10be:	62 95       	swap	r22
    10c0:	6f 70       	andi	r22, 0x0F	; 15
    10c2:	11 96       	adiw	r26, 0x01	; 1
    10c4:	4c 91       	ld	r20, X
    10c6:	43 70       	andi	r20, 0x03	; 3
    10c8:	42 95       	swap	r20
    10ca:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    10cc:	df 01       	movw	r26, r30
    10ce:	56 97       	sbiw	r26, 0x16	; 22
    10d0:	3c 91       	ld	r19, X
    10d2:	53 2f       	mov	r21, r19
    10d4:	52 95       	swap	r21
    10d6:	55 0f       	add	r21, r21
    10d8:	55 0f       	add	r21, r21
    10da:	50 7c       	andi	r21, 0xC0	; 192
    10dc:	46 2b       	or	r20, r22
    10de:	45 2b       	or	r20, r21
    10e0:	4c 83       	std	Y+4, r20	; 0x04
    10e2:	11 96       	adiw	r26, 0x01	; 1
    10e4:	4c 91       	ld	r20, X
    10e6:	42 95       	swap	r20
    10e8:	44 0f       	add	r20, r20
    10ea:	44 0f       	add	r20, r20
    10ec:	40 7c       	andi	r20, 0xC0	; 192
    10ee:	36 95       	lsr	r19
    10f0:	36 95       	lsr	r19
    10f2:	34 2b       	or	r19, r20
    10f4:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    10f6:	df 01       	movw	r26, r30
    10f8:	54 97       	sbiw	r26, 0x14	; 20
    10fa:	3c 91       	ld	r19, X
    10fc:	3e 83       	std	Y+6, r19	; 0x06
    10fe:	11 96       	adiw	r26, 0x01	; 1
    1100:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    1102:	df 01       	movw	r26, r30
    1104:	52 97       	sbiw	r26, 0x12	; 18
    1106:	3c 91       	ld	r19, X
    1108:	53 2f       	mov	r21, r19
    110a:	55 0f       	add	r21, r21
    110c:	55 0f       	add	r21, r21
    110e:	43 70       	andi	r20, 0x03	; 3
    1110:	45 2b       	or	r20, r21
    1112:	4f 83       	std	Y+7, r20	; 0x07
    1114:	63 2f       	mov	r22, r19
    1116:	62 95       	swap	r22
    1118:	66 95       	lsr	r22
    111a:	66 95       	lsr	r22
    111c:	63 70       	andi	r22, 0x03	; 3
    111e:	11 96       	adiw	r26, 0x01	; 1
    1120:	4c 91       	ld	r20, X
    1122:	43 70       	andi	r20, 0x03	; 3
    1124:	44 0f       	add	r20, r20
    1126:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    1128:	df 01       	movw	r26, r30
    112a:	50 97       	sbiw	r26, 0x10	; 16
    112c:	3c 91       	ld	r19, X
    112e:	53 2f       	mov	r21, r19
    1130:	52 95       	swap	r21
    1132:	50 7f       	andi	r21, 0xF0	; 240
    1134:	46 2b       	or	r20, r22
    1136:	45 2b       	or	r20, r21
    1138:	48 87       	std	Y+8, r20	; 0x08
    113a:	63 2f       	mov	r22, r19
    113c:	62 95       	swap	r22
    113e:	6f 70       	andi	r22, 0x0F	; 15
    1140:	11 96       	adiw	r26, 0x01	; 1
    1142:	4c 91       	ld	r20, X
    1144:	43 70       	andi	r20, 0x03	; 3
    1146:	42 95       	swap	r20
    1148:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    114a:	df 01       	movw	r26, r30
    114c:	1e 97       	sbiw	r26, 0x0e	; 14
    114e:	3c 91       	ld	r19, X
    1150:	53 2f       	mov	r21, r19
    1152:	52 95       	swap	r21
    1154:	55 0f       	add	r21, r21
    1156:	55 0f       	add	r21, r21
    1158:	50 7c       	andi	r21, 0xC0	; 192
    115a:	46 2b       	or	r20, r22
    115c:	45 2b       	or	r20, r21
    115e:	49 87       	std	Y+9, r20	; 0x09
    1160:	11 96       	adiw	r26, 0x01	; 1
    1162:	4c 91       	ld	r20, X
    1164:	42 95       	swap	r20
    1166:	44 0f       	add	r20, r20
    1168:	44 0f       	add	r20, r20
    116a:	40 7c       	andi	r20, 0xC0	; 192
    116c:	36 95       	lsr	r19
    116e:	36 95       	lsr	r19
    1170:	34 2b       	or	r19, r20
    1172:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    1174:	df 01       	movw	r26, r30
    1176:	1c 97       	sbiw	r26, 0x0c	; 12
    1178:	3c 91       	ld	r19, X
    117a:	3b 87       	std	Y+11, r19	; 0x0b
    117c:	11 96       	adiw	r26, 0x01	; 1
    117e:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1180:	df 01       	movw	r26, r30
    1182:	1a 97       	sbiw	r26, 0x0a	; 10
    1184:	3c 91       	ld	r19, X
    1186:	53 2f       	mov	r21, r19
    1188:	55 0f       	add	r21, r21
    118a:	55 0f       	add	r21, r21
    118c:	43 70       	andi	r20, 0x03	; 3
    118e:	45 2b       	or	r20, r21
    1190:	4c 87       	std	Y+12, r20	; 0x0c
    1192:	63 2f       	mov	r22, r19
    1194:	62 95       	swap	r22
    1196:	66 95       	lsr	r22
    1198:	66 95       	lsr	r22
    119a:	63 70       	andi	r22, 0x03	; 3
    119c:	11 96       	adiw	r26, 0x01	; 1
    119e:	4c 91       	ld	r20, X
    11a0:	43 70       	andi	r20, 0x03	; 3
    11a2:	44 0f       	add	r20, r20
    11a4:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    11a6:	df 01       	movw	r26, r30
    11a8:	18 97       	sbiw	r26, 0x08	; 8
    11aa:	3c 91       	ld	r19, X
    11ac:	53 2f       	mov	r21, r19
    11ae:	52 95       	swap	r21
    11b0:	50 7f       	andi	r21, 0xF0	; 240
    11b2:	46 2b       	or	r20, r22
    11b4:	45 2b       	or	r20, r21
    11b6:	4d 87       	std	Y+13, r20	; 0x0d
    11b8:	63 2f       	mov	r22, r19
    11ba:	62 95       	swap	r22
    11bc:	6f 70       	andi	r22, 0x0F	; 15
    11be:	11 96       	adiw	r26, 0x01	; 1
    11c0:	4c 91       	ld	r20, X
    11c2:	43 70       	andi	r20, 0x03	; 3
    11c4:	42 95       	swap	r20
    11c6:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    11c8:	df 01       	movw	r26, r30
    11ca:	16 97       	sbiw	r26, 0x06	; 6
    11cc:	3c 91       	ld	r19, X
    11ce:	53 2f       	mov	r21, r19
    11d0:	52 95       	swap	r21
    11d2:	55 0f       	add	r21, r21
    11d4:	55 0f       	add	r21, r21
    11d6:	50 7c       	andi	r21, 0xC0	; 192
    11d8:	46 2b       	or	r20, r22
    11da:	45 2b       	or	r20, r21
    11dc:	4e 87       	std	Y+14, r20	; 0x0e
    11de:	11 96       	adiw	r26, 0x01	; 1
    11e0:	4c 91       	ld	r20, X
    11e2:	42 95       	swap	r20
    11e4:	44 0f       	add	r20, r20
    11e6:	44 0f       	add	r20, r20
    11e8:	40 7c       	andi	r20, 0xC0	; 192
    11ea:	36 95       	lsr	r19
    11ec:	36 95       	lsr	r19
    11ee:	34 2b       	or	r19, r20
    11f0:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    11f2:	df 01       	movw	r26, r30
    11f4:	14 97       	sbiw	r26, 0x04	; 4
    11f6:	3c 91       	ld	r19, X
    11f8:	38 8b       	std	Y+16, r19	; 0x10
    11fa:	11 96       	adiw	r26, 0x01	; 1
    11fc:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    11fe:	df 01       	movw	r26, r30
    1200:	12 97       	sbiw	r26, 0x02	; 2
    1202:	3c 91       	ld	r19, X
    1204:	53 2f       	mov	r21, r19
    1206:	55 0f       	add	r21, r21
    1208:	55 0f       	add	r21, r21
    120a:	43 70       	andi	r20, 0x03	; 3
    120c:	45 2b       	or	r20, r21
    120e:	49 8b       	std	Y+17, r20	; 0x11
    1210:	32 95       	swap	r19
    1212:	36 95       	lsr	r19
    1214:	36 95       	lsr	r19
    1216:	33 70       	andi	r19, 0x03	; 3
    1218:	11 96       	adiw	r26, 0x01	; 1
    121a:	4c 91       	ld	r20, X
    121c:	43 70       	andi	r20, 0x03	; 3
    121e:	44 0f       	add	r20, r20
    1220:	44 0f       	add	r20, r20
    1222:	83 2b       	or	r24, r19
    1224:	84 2b       	or	r24, r20
    1226:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    1228:	80 91 e0 02 	lds	r24, 0x02E0
    122c:	38 2f       	mov	r19, r24
    122e:	32 95       	swap	r19
    1230:	33 0f       	add	r19, r19
    1232:	33 0f       	add	r19, r19
    1234:	30 7c       	andi	r19, 0xC0	; 192
    1236:	92 2b       	or	r25, r18
    1238:	93 2b       	or	r25, r19
    123a:	9b 8b       	std	Y+19, r25	; 0x13
    123c:	93 81       	ldd	r25, Z+3	; 0x03
    123e:	92 95       	swap	r25
    1240:	99 0f       	add	r25, r25
    1242:	99 0f       	add	r25, r25
    1244:	90 7c       	andi	r25, 0xC0	; 192
    1246:	86 95       	lsr	r24
    1248:	86 95       	lsr	r24
    124a:	89 2b       	or	r24, r25
    124c:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    124e:	80 91 e2 02 	lds	r24, 0x02E2
    1252:	8d 8b       	std	Y+21, r24	; 0x15
    1254:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    1256:	80 91 e4 02 	lds	r24, 0x02E4
    125a:	28 2f       	mov	r18, r24
    125c:	22 0f       	add	r18, r18
    125e:	22 0f       	add	r18, r18
    1260:	93 70       	andi	r25, 0x03	; 3
    1262:	92 2b       	or	r25, r18
    1264:	9e 8b       	std	Y+22, r25	; 0x16
    1266:	38 2f       	mov	r19, r24
    1268:	32 95       	swap	r19
    126a:	36 95       	lsr	r19
    126c:	36 95       	lsr	r19
    126e:	33 70       	andi	r19, 0x03	; 3
    1270:	97 81       	ldd	r25, Z+7	; 0x07
    1272:	93 70       	andi	r25, 0x03	; 3
    1274:	99 0f       	add	r25, r25
    1276:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    1278:	80 91 e6 02 	lds	r24, 0x02E6
    127c:	28 2f       	mov	r18, r24
    127e:	22 95       	swap	r18
    1280:	20 7f       	andi	r18, 0xF0	; 240
    1282:	93 2b       	or	r25, r19
    1284:	92 2b       	or	r25, r18
    1286:	9f 8b       	std	Y+23, r25	; 0x17
    1288:	38 2f       	mov	r19, r24
    128a:	32 95       	swap	r19
    128c:	3f 70       	andi	r19, 0x0F	; 15
    128e:	91 85       	ldd	r25, Z+9	; 0x09
    1290:	93 70       	andi	r25, 0x03	; 3
    1292:	92 95       	swap	r25
    1294:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    1296:	80 91 e8 02 	lds	r24, 0x02E8
    129a:	28 2f       	mov	r18, r24
    129c:	22 95       	swap	r18
    129e:	22 0f       	add	r18, r18
    12a0:	22 0f       	add	r18, r18
    12a2:	20 7c       	andi	r18, 0xC0	; 192
    12a4:	93 2b       	or	r25, r19
    12a6:	92 2b       	or	r25, r18
    12a8:	98 8f       	std	Y+24, r25	; 0x18
    12aa:	93 85       	ldd	r25, Z+11	; 0x0b
    12ac:	92 95       	swap	r25
    12ae:	99 0f       	add	r25, r25
    12b0:	99 0f       	add	r25, r25
    12b2:	90 7c       	andi	r25, 0xC0	; 192
    12b4:	86 95       	lsr	r24
    12b6:	86 95       	lsr	r24
    12b8:	89 2b       	or	r24, r25
    12ba:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    12bc:	80 91 ea 02 	lds	r24, 0x02EA
    12c0:	8a 8f       	std	Y+26, r24	; 0x1a
    12c2:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    12c4:	80 91 ec 02 	lds	r24, 0x02EC
    12c8:	28 2f       	mov	r18, r24
    12ca:	22 0f       	add	r18, r18
    12cc:	22 0f       	add	r18, r18
    12ce:	93 70       	andi	r25, 0x03	; 3
    12d0:	92 2b       	or	r25, r18
    12d2:	9b 8f       	std	Y+27, r25	; 0x1b
    12d4:	38 2f       	mov	r19, r24
    12d6:	32 95       	swap	r19
    12d8:	36 95       	lsr	r19
    12da:	36 95       	lsr	r19
    12dc:	33 70       	andi	r19, 0x03	; 3
    12de:	97 85       	ldd	r25, Z+15	; 0x0f
    12e0:	93 70       	andi	r25, 0x03	; 3
    12e2:	99 0f       	add	r25, r25
    12e4:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    12e6:	80 91 ee 02 	lds	r24, 0x02EE
    12ea:	28 2f       	mov	r18, r24
    12ec:	22 95       	swap	r18
    12ee:	20 7f       	andi	r18, 0xF0	; 240
    12f0:	93 2b       	or	r25, r19
    12f2:	92 2b       	or	r25, r18
    12f4:	9c 8f       	std	Y+28, r25	; 0x1c
    12f6:	38 2f       	mov	r19, r24
    12f8:	32 95       	swap	r19
    12fa:	3f 70       	andi	r19, 0x0F	; 15
    12fc:	91 89       	ldd	r25, Z+17	; 0x11
    12fe:	93 70       	andi	r25, 0x03	; 3
    1300:	92 95       	swap	r25
    1302:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    1304:	80 91 f0 02 	lds	r24, 0x02F0
    1308:	28 2f       	mov	r18, r24
    130a:	22 95       	swap	r18
    130c:	22 0f       	add	r18, r18
    130e:	22 0f       	add	r18, r18
    1310:	20 7c       	andi	r18, 0xC0	; 192
    1312:	93 2b       	or	r25, r19
    1314:	92 2b       	or	r25, r18
    1316:	9d 8f       	std	Y+29, r25	; 0x1d
    1318:	93 89       	ldd	r25, Z+19	; 0x13
    131a:	92 95       	swap	r25
    131c:	99 0f       	add	r25, r25
    131e:	99 0f       	add	r25, r25
    1320:	90 7c       	andi	r25, 0xC0	; 192
    1322:	86 95       	lsr	r24
    1324:	86 95       	lsr	r24
    1326:	89 2b       	or	r24, r25
    1328:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    132a:	80 91 f2 02 	lds	r24, 0x02F2
    132e:	8f 8f       	std	Y+31, r24	; 0x1f
    1330:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    1332:	80 91 f4 02 	lds	r24, 0x02F4
    1336:	28 2f       	mov	r18, r24
    1338:	22 0f       	add	r18, r18
    133a:	22 0f       	add	r18, r18
    133c:	93 70       	andi	r25, 0x03	; 3
    133e:	92 2b       	or	r25, r18
    1340:	98 a3       	lds	r25, 0x58
    1342:	38 2f       	mov	r19, r24
    1344:	32 95       	swap	r19
    1346:	36 95       	lsr	r19
    1348:	36 95       	lsr	r19
    134a:	33 70       	andi	r19, 0x03	; 3
    134c:	97 89       	ldd	r25, Z+23	; 0x17
    134e:	93 70       	andi	r25, 0x03	; 3
    1350:	99 0f       	add	r25, r25
    1352:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    1354:	80 91 f6 02 	lds	r24, 0x02F6
    1358:	28 2f       	mov	r18, r24
    135a:	22 95       	swap	r18
    135c:	20 7f       	andi	r18, 0xF0	; 240
    135e:	93 2b       	or	r25, r19
    1360:	92 2b       	or	r25, r18
    1362:	99 a3       	lds	r25, 0x59
    1364:	38 2f       	mov	r19, r24
    1366:	32 95       	swap	r19
    1368:	3f 70       	andi	r19, 0x0F	; 15
    136a:	91 8d       	ldd	r25, Z+25	; 0x19
    136c:	93 70       	andi	r25, 0x03	; 3
    136e:	92 95       	swap	r25
    1370:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    1372:	80 91 f8 02 	lds	r24, 0x02F8
    1376:	28 2f       	mov	r18, r24
    1378:	22 95       	swap	r18
    137a:	22 0f       	add	r18, r18
    137c:	22 0f       	add	r18, r18
    137e:	20 7c       	andi	r18, 0xC0	; 192
    1380:	93 2b       	or	r25, r19
    1382:	92 2b       	or	r25, r18
    1384:	9a a3       	lds	r25, 0x5a
    1386:	93 8d       	ldd	r25, Z+27	; 0x1b
    1388:	92 95       	swap	r25
    138a:	99 0f       	add	r25, r25
    138c:	99 0f       	add	r25, r25
    138e:	90 7c       	andi	r25, 0xC0	; 192
    1390:	86 95       	lsr	r24
    1392:	86 95       	lsr	r24
    1394:	89 2b       	or	r24, r25
    1396:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    1398:	80 91 fa 02 	lds	r24, 0x02FA
    139c:	8c a3       	lds	r24, 0x5c
    139e:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    13a0:	80 91 fc 02 	lds	r24, 0x02FC
    13a4:	28 2f       	mov	r18, r24
    13a6:	22 0f       	add	r18, r18
    13a8:	22 0f       	add	r18, r18
    13aa:	93 70       	andi	r25, 0x03	; 3
    13ac:	92 2b       	or	r25, r18
    13ae:	9d a3       	lds	r25, 0x5d
    13b0:	82 95       	swap	r24
    13b2:	86 95       	lsr	r24
    13b4:	86 95       	lsr	r24
    13b6:	83 70       	andi	r24, 0x03	; 3
    13b8:	2e a1       	lds	r18, 0x4e
    13ba:	20 7f       	andi	r18, 0xF0	; 240
    13bc:	97 8d       	ldd	r25, Z+31	; 0x1f
    13be:	93 70       	andi	r25, 0x03	; 3
    13c0:	99 0f       	add	r25, r25
    13c2:	99 0f       	add	r25, r25
    13c4:	82 2b       	or	r24, r18
    13c6:	89 2b       	or	r24, r25
    13c8:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    13ca:	80 91 fe 02 	lds	r24, 0x02FE
    13ce:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    13d0:	80 91 ff 02 	lds	r24, 0x02FF
    13d4:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    13d6:	80 91 00 03 	lds	r24, 0x0300
    13da:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    13dc:	80 91 01 03 	lds	r24, 0x0301
    13e0:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    13e2:	80 91 02 03 	lds	r24, 0x0302
    13e6:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    13e8:	0e 94 fc 07 	call	0xff8	; 0xff8 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    13ec:	80 91 80 03 	lds	r24, 0x0380
    13f0:	8f 77       	andi	r24, 0x7F	; 127
    13f2:	80 93 80 03 	sts	0x0380, r24
	current_patch.mode = MEMORY;
    13f6:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    13fa:	21 2f       	mov	r18, r17
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	8b e2       	ldi	r24, 0x2B	; 43
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	28 9f       	mul	r18, r24
    1404:	b0 01       	movw	r22, r0
    1406:	29 9f       	mul	r18, r25
    1408:	70 0d       	add	r23, r0
    140a:	38 9f       	mul	r19, r24
    140c:	70 0d       	add	r23, r0
    140e:	11 24       	eor	r1, r1
    1410:	60 50       	subi	r22, 0x00	; 0
    1412:	70 40       	sbci	r23, 0x00	; 0
    1414:	ce 01       	movw	r24, r28
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	4b e2       	ldi	r20, 0x2B	; 43
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__eeupd_block_m6450a>
}	
    1420:	ab 96       	adiw	r28, 0x2b	; 43
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	08 95       	ret

00001434 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	c3 54       	subi	r28, 0x43	; 67
    1440:	d0 40       	sbci	r29, 0x00	; 0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	2b e2       	ldi	r18, 0x2B	; 43
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	82 9f       	mul	r24, r18
    1454:	b0 01       	movw	r22, r0
    1456:	83 9f       	mul	r24, r19
    1458:	70 0d       	add	r23, r0
    145a:	92 9f       	mul	r25, r18
    145c:	70 0d       	add	r23, r0
    145e:	11 24       	eor	r1, r1
    1460:	60 50       	subi	r22, 0x00	; 0
    1462:	70 40       	sbci	r23, 0x00	; 0
    1464:	ce 01       	movw	r24, r28
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	4b e2       	ldi	r20, 0x2B	; 43
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    1470:	ee ed       	ldi	r30, 0xDE	; 222
    1472:	f2 e0       	ldi	r31, 0x02	; 2
    1474:	8a 89       	ldd	r24, Y+18	; 0x12
    1476:	28 2f       	mov	r18, r24
    1478:	22 95       	swap	r18
    147a:	2f 70       	andi	r18, 0x0F	; 15
    147c:	9b 89       	ldd	r25, Y+19	; 0x13
    147e:	39 2f       	mov	r19, r25
    1480:	32 95       	swap	r19
    1482:	30 7f       	andi	r19, 0xF0	; 240
    1484:	32 2b       	or	r19, r18
    1486:	29 2f       	mov	r18, r25
    1488:	22 95       	swap	r18
    148a:	2f 70       	andi	r18, 0x0F	; 15
    148c:	23 70       	andi	r18, 0x03	; 3
    148e:	30 93 de 02 	sts	0x02DE, r19
    1492:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    1496:	df 01       	movw	r26, r30
    1498:	5a 97       	sbiw	r26, 0x1a	; 26
    149a:	4a 81       	ldd	r20, Y+2	; 0x02
    149c:	46 95       	lsr	r20
    149e:	46 95       	lsr	r20
    14a0:	2b 81       	ldd	r18, Y+3	; 0x03
    14a2:	32 2f       	mov	r19, r18
    14a4:	32 95       	swap	r19
    14a6:	33 0f       	add	r19, r19
    14a8:	33 0f       	add	r19, r19
    14aa:	30 7c       	andi	r19, 0xC0	; 192
    14ac:	43 2b       	or	r20, r19
    14ae:	32 2f       	mov	r19, r18
    14b0:	36 95       	lsr	r19
    14b2:	36 95       	lsr	r19
    14b4:	33 70       	andi	r19, 0x03	; 3
    14b6:	4c 93       	st	X, r20
    14b8:	11 96       	adiw	r26, 0x01	; 1
    14ba:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    14bc:	df 01       	movw	r26, r30
    14be:	58 97       	sbiw	r26, 0x18	; 24
    14c0:	32 2f       	mov	r19, r18
    14c2:	32 95       	swap	r19
    14c4:	3f 70       	andi	r19, 0x0F	; 15
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	42 2f       	mov	r20, r18
    14ca:	42 95       	swap	r20
    14cc:	40 7f       	andi	r20, 0xF0	; 240
    14ce:	43 2b       	or	r20, r19
    14d0:	32 2f       	mov	r19, r18
    14d2:	32 95       	swap	r19
    14d4:	3f 70       	andi	r19, 0x0F	; 15
    14d6:	33 70       	andi	r19, 0x03	; 3
    14d8:	4c 93       	st	X, r20
    14da:	11 96       	adiw	r26, 0x01	; 1
    14dc:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    14de:	df 01       	movw	r26, r30
    14e0:	56 97       	sbiw	r26, 0x16	; 22
    14e2:	22 95       	swap	r18
    14e4:	26 95       	lsr	r18
    14e6:	26 95       	lsr	r18
    14e8:	23 70       	andi	r18, 0x03	; 3
    14ea:	3d 81       	ldd	r19, Y+5	; 0x05
    14ec:	43 2f       	mov	r20, r19
    14ee:	44 0f       	add	r20, r20
    14f0:	44 0f       	add	r20, r20
    14f2:	24 2b       	or	r18, r20
    14f4:	32 95       	swap	r19
    14f6:	36 95       	lsr	r19
    14f8:	36 95       	lsr	r19
    14fa:	33 70       	andi	r19, 0x03	; 3
    14fc:	2c 93       	st	X, r18
    14fe:	11 96       	adiw	r26, 0x01	; 1
    1500:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    1502:	df 01       	movw	r26, r30
    1504:	54 97       	sbiw	r26, 0x14	; 20
    1506:	4e 81       	ldd	r20, Y+6	; 0x06
    1508:	2f 81       	ldd	r18, Y+7	; 0x07
    150a:	32 2f       	mov	r19, r18
    150c:	33 70       	andi	r19, 0x03	; 3
    150e:	4c 93       	st	X, r20
    1510:	11 96       	adiw	r26, 0x01	; 1
    1512:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1514:	df 01       	movw	r26, r30
    1516:	52 97       	sbiw	r26, 0x12	; 18
    1518:	32 2f       	mov	r19, r18
    151a:	36 95       	lsr	r19
    151c:	36 95       	lsr	r19
    151e:	28 85       	ldd	r18, Y+8	; 0x08
    1520:	42 2f       	mov	r20, r18
    1522:	42 95       	swap	r20
    1524:	44 0f       	add	r20, r20
    1526:	44 0f       	add	r20, r20
    1528:	40 7c       	andi	r20, 0xC0	; 192
    152a:	43 2b       	or	r20, r19
    152c:	32 2f       	mov	r19, r18
    152e:	36 95       	lsr	r19
    1530:	36 95       	lsr	r19
    1532:	33 70       	andi	r19, 0x03	; 3
    1534:	4c 93       	st	X, r20
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    153a:	df 01       	movw	r26, r30
    153c:	50 97       	sbiw	r26, 0x10	; 16
    153e:	32 2f       	mov	r19, r18
    1540:	32 95       	swap	r19
    1542:	3f 70       	andi	r19, 0x0F	; 15
    1544:	29 85       	ldd	r18, Y+9	; 0x09
    1546:	42 2f       	mov	r20, r18
    1548:	42 95       	swap	r20
    154a:	40 7f       	andi	r20, 0xF0	; 240
    154c:	43 2b       	or	r20, r19
    154e:	32 2f       	mov	r19, r18
    1550:	32 95       	swap	r19
    1552:	3f 70       	andi	r19, 0x0F	; 15
    1554:	33 70       	andi	r19, 0x03	; 3
    1556:	4c 93       	st	X, r20
    1558:	11 96       	adiw	r26, 0x01	; 1
    155a:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    155c:	df 01       	movw	r26, r30
    155e:	1e 97       	sbiw	r26, 0x0e	; 14
    1560:	22 95       	swap	r18
    1562:	26 95       	lsr	r18
    1564:	26 95       	lsr	r18
    1566:	23 70       	andi	r18, 0x03	; 3
    1568:	3a 85       	ldd	r19, Y+10	; 0x0a
    156a:	43 2f       	mov	r20, r19
    156c:	44 0f       	add	r20, r20
    156e:	44 0f       	add	r20, r20
    1570:	24 2b       	or	r18, r20
    1572:	32 95       	swap	r19
    1574:	36 95       	lsr	r19
    1576:	36 95       	lsr	r19
    1578:	33 70       	andi	r19, 0x03	; 3
    157a:	2c 93       	st	X, r18
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    1580:	df 01       	movw	r26, r30
    1582:	1c 97       	sbiw	r26, 0x0c	; 12
    1584:	4b 85       	ldd	r20, Y+11	; 0x0b
    1586:	2c 85       	ldd	r18, Y+12	; 0x0c
    1588:	32 2f       	mov	r19, r18
    158a:	33 70       	andi	r19, 0x03	; 3
    158c:	4c 93       	st	X, r20
    158e:	11 96       	adiw	r26, 0x01	; 1
    1590:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1592:	df 01       	movw	r26, r30
    1594:	1a 97       	sbiw	r26, 0x0a	; 10
    1596:	32 2f       	mov	r19, r18
    1598:	36 95       	lsr	r19
    159a:	36 95       	lsr	r19
    159c:	2d 85       	ldd	r18, Y+13	; 0x0d
    159e:	42 2f       	mov	r20, r18
    15a0:	42 95       	swap	r20
    15a2:	44 0f       	add	r20, r20
    15a4:	44 0f       	add	r20, r20
    15a6:	40 7c       	andi	r20, 0xC0	; 192
    15a8:	43 2b       	or	r20, r19
    15aa:	32 2f       	mov	r19, r18
    15ac:	36 95       	lsr	r19
    15ae:	36 95       	lsr	r19
    15b0:	33 70       	andi	r19, 0x03	; 3
    15b2:	4c 93       	st	X, r20
    15b4:	11 96       	adiw	r26, 0x01	; 1
    15b6:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    15b8:	df 01       	movw	r26, r30
    15ba:	18 97       	sbiw	r26, 0x08	; 8
    15bc:	32 2f       	mov	r19, r18
    15be:	32 95       	swap	r19
    15c0:	3f 70       	andi	r19, 0x0F	; 15
    15c2:	2e 85       	ldd	r18, Y+14	; 0x0e
    15c4:	42 2f       	mov	r20, r18
    15c6:	42 95       	swap	r20
    15c8:	40 7f       	andi	r20, 0xF0	; 240
    15ca:	43 2b       	or	r20, r19
    15cc:	32 2f       	mov	r19, r18
    15ce:	32 95       	swap	r19
    15d0:	3f 70       	andi	r19, 0x0F	; 15
    15d2:	33 70       	andi	r19, 0x03	; 3
    15d4:	4c 93       	st	X, r20
    15d6:	11 96       	adiw	r26, 0x01	; 1
    15d8:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    15da:	df 01       	movw	r26, r30
    15dc:	16 97       	sbiw	r26, 0x06	; 6
    15de:	22 95       	swap	r18
    15e0:	26 95       	lsr	r18
    15e2:	26 95       	lsr	r18
    15e4:	23 70       	andi	r18, 0x03	; 3
    15e6:	3f 85       	ldd	r19, Y+15	; 0x0f
    15e8:	43 2f       	mov	r20, r19
    15ea:	44 0f       	add	r20, r20
    15ec:	44 0f       	add	r20, r20
    15ee:	24 2b       	or	r18, r20
    15f0:	32 95       	swap	r19
    15f2:	36 95       	lsr	r19
    15f4:	36 95       	lsr	r19
    15f6:	33 70       	andi	r19, 0x03	; 3
    15f8:	2c 93       	st	X, r18
    15fa:	11 96       	adiw	r26, 0x01	; 1
    15fc:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    15fe:	df 01       	movw	r26, r30
    1600:	14 97       	sbiw	r26, 0x04	; 4
    1602:	48 89       	ldd	r20, Y+16	; 0x10
    1604:	29 89       	ldd	r18, Y+17	; 0x11
    1606:	32 2f       	mov	r19, r18
    1608:	33 70       	andi	r19, 0x03	; 3
    160a:	4c 93       	st	X, r20
    160c:	11 96       	adiw	r26, 0x01	; 1
    160e:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    1610:	df 01       	movw	r26, r30
    1612:	12 97       	sbiw	r26, 0x02	; 2
    1614:	26 95       	lsr	r18
    1616:	26 95       	lsr	r18
    1618:	38 2f       	mov	r19, r24
    161a:	32 95       	swap	r19
    161c:	33 0f       	add	r19, r19
    161e:	33 0f       	add	r19, r19
    1620:	30 7c       	andi	r19, 0xC0	; 192
    1622:	23 2b       	or	r18, r19
    1624:	86 95       	lsr	r24
    1626:	86 95       	lsr	r24
    1628:	83 70       	andi	r24, 0x03	; 3
    162a:	2c 93       	st	X, r18
    162c:	11 96       	adiw	r26, 0x01	; 1
    162e:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    1630:	92 95       	swap	r25
    1632:	96 95       	lsr	r25
    1634:	96 95       	lsr	r25
    1636:	93 70       	andi	r25, 0x03	; 3
    1638:	8c 89       	ldd	r24, Y+20	; 0x14
    163a:	28 2f       	mov	r18, r24
    163c:	22 0f       	add	r18, r18
    163e:	22 0f       	add	r18, r18
    1640:	92 2b       	or	r25, r18
    1642:	82 95       	swap	r24
    1644:	86 95       	lsr	r24
    1646:	86 95       	lsr	r24
    1648:	83 70       	andi	r24, 0x03	; 3
    164a:	90 93 e0 02 	sts	0x02E0, r25
    164e:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    1650:	2d 89       	ldd	r18, Y+21	; 0x15
    1652:	8e 89       	ldd	r24, Y+22	; 0x16
    1654:	98 2f       	mov	r25, r24
    1656:	93 70       	andi	r25, 0x03	; 3
    1658:	20 93 e2 02 	sts	0x02E2, r18
    165c:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    165e:	98 2f       	mov	r25, r24
    1660:	96 95       	lsr	r25
    1662:	96 95       	lsr	r25
    1664:	8f 89       	ldd	r24, Y+23	; 0x17
    1666:	28 2f       	mov	r18, r24
    1668:	22 95       	swap	r18
    166a:	22 0f       	add	r18, r18
    166c:	22 0f       	add	r18, r18
    166e:	20 7c       	andi	r18, 0xC0	; 192
    1670:	29 2b       	or	r18, r25
    1672:	98 2f       	mov	r25, r24
    1674:	96 95       	lsr	r25
    1676:	96 95       	lsr	r25
    1678:	93 70       	andi	r25, 0x03	; 3
    167a:	20 93 e4 02 	sts	0x02E4, r18
    167e:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    1680:	98 2f       	mov	r25, r24
    1682:	92 95       	swap	r25
    1684:	9f 70       	andi	r25, 0x0F	; 15
    1686:	88 8d       	ldd	r24, Y+24	; 0x18
    1688:	28 2f       	mov	r18, r24
    168a:	22 95       	swap	r18
    168c:	20 7f       	andi	r18, 0xF0	; 240
    168e:	29 2b       	or	r18, r25
    1690:	98 2f       	mov	r25, r24
    1692:	92 95       	swap	r25
    1694:	9f 70       	andi	r25, 0x0F	; 15
    1696:	93 70       	andi	r25, 0x03	; 3
    1698:	20 93 e6 02 	sts	0x02E6, r18
    169c:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    169e:	82 95       	swap	r24
    16a0:	86 95       	lsr	r24
    16a2:	86 95       	lsr	r24
    16a4:	83 70       	andi	r24, 0x03	; 3
    16a6:	99 8d       	ldd	r25, Y+25	; 0x19
    16a8:	29 2f       	mov	r18, r25
    16aa:	22 0f       	add	r18, r18
    16ac:	22 0f       	add	r18, r18
    16ae:	82 2b       	or	r24, r18
    16b0:	92 95       	swap	r25
    16b2:	96 95       	lsr	r25
    16b4:	96 95       	lsr	r25
    16b6:	93 70       	andi	r25, 0x03	; 3
    16b8:	80 93 e8 02 	sts	0x02E8, r24
    16bc:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    16be:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c2:	98 2f       	mov	r25, r24
    16c4:	93 70       	andi	r25, 0x03	; 3
    16c6:	20 93 ea 02 	sts	0x02EA, r18
    16ca:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    16cc:	98 2f       	mov	r25, r24
    16ce:	96 95       	lsr	r25
    16d0:	96 95       	lsr	r25
    16d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16d4:	28 2f       	mov	r18, r24
    16d6:	22 95       	swap	r18
    16d8:	22 0f       	add	r18, r18
    16da:	22 0f       	add	r18, r18
    16dc:	20 7c       	andi	r18, 0xC0	; 192
    16de:	29 2b       	or	r18, r25
    16e0:	98 2f       	mov	r25, r24
    16e2:	96 95       	lsr	r25
    16e4:	96 95       	lsr	r25
    16e6:	93 70       	andi	r25, 0x03	; 3
    16e8:	20 93 ec 02 	sts	0x02EC, r18
    16ec:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    16ee:	98 2f       	mov	r25, r24
    16f0:	92 95       	swap	r25
    16f2:	9f 70       	andi	r25, 0x0F	; 15
    16f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16f6:	28 2f       	mov	r18, r24
    16f8:	22 95       	swap	r18
    16fa:	20 7f       	andi	r18, 0xF0	; 240
    16fc:	29 2b       	or	r18, r25
    16fe:	98 2f       	mov	r25, r24
    1700:	92 95       	swap	r25
    1702:	9f 70       	andi	r25, 0x0F	; 15
    1704:	93 70       	andi	r25, 0x03	; 3
    1706:	20 93 ee 02 	sts	0x02EE, r18
    170a:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    170c:	82 95       	swap	r24
    170e:	86 95       	lsr	r24
    1710:	86 95       	lsr	r24
    1712:	83 70       	andi	r24, 0x03	; 3
    1714:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1716:	29 2f       	mov	r18, r25
    1718:	22 0f       	add	r18, r18
    171a:	22 0f       	add	r18, r18
    171c:	82 2b       	or	r24, r18
    171e:	92 95       	swap	r25
    1720:	96 95       	lsr	r25
    1722:	96 95       	lsr	r25
    1724:	93 70       	andi	r25, 0x03	; 3
    1726:	80 93 f0 02 	sts	0x02F0, r24
    172a:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    172c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    172e:	88 a1       	lds	r24, 0x48
    1730:	98 2f       	mov	r25, r24
    1732:	93 70       	andi	r25, 0x03	; 3
    1734:	20 93 f2 02 	sts	0x02F2, r18
    1738:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    173a:	98 2f       	mov	r25, r24
    173c:	96 95       	lsr	r25
    173e:	96 95       	lsr	r25
    1740:	89 a1       	lds	r24, 0x49
    1742:	28 2f       	mov	r18, r24
    1744:	22 95       	swap	r18
    1746:	22 0f       	add	r18, r18
    1748:	22 0f       	add	r18, r18
    174a:	20 7c       	andi	r18, 0xC0	; 192
    174c:	29 2b       	or	r18, r25
    174e:	98 2f       	mov	r25, r24
    1750:	96 95       	lsr	r25
    1752:	96 95       	lsr	r25
    1754:	93 70       	andi	r25, 0x03	; 3
    1756:	20 93 f4 02 	sts	0x02F4, r18
    175a:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    175c:	98 2f       	mov	r25, r24
    175e:	92 95       	swap	r25
    1760:	9f 70       	andi	r25, 0x0F	; 15
    1762:	8a a1       	lds	r24, 0x4a
    1764:	28 2f       	mov	r18, r24
    1766:	22 95       	swap	r18
    1768:	20 7f       	andi	r18, 0xF0	; 240
    176a:	29 2b       	or	r18, r25
    176c:	98 2f       	mov	r25, r24
    176e:	92 95       	swap	r25
    1770:	9f 70       	andi	r25, 0x0F	; 15
    1772:	93 70       	andi	r25, 0x03	; 3
    1774:	20 93 f6 02 	sts	0x02F6, r18
    1778:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    177a:	82 95       	swap	r24
    177c:	86 95       	lsr	r24
    177e:	86 95       	lsr	r24
    1780:	83 70       	andi	r24, 0x03	; 3
    1782:	9b a1       	lds	r25, 0x4b
    1784:	29 2f       	mov	r18, r25
    1786:	22 0f       	add	r18, r18
    1788:	22 0f       	add	r18, r18
    178a:	82 2b       	or	r24, r18
    178c:	92 95       	swap	r25
    178e:	96 95       	lsr	r25
    1790:	96 95       	lsr	r25
    1792:	93 70       	andi	r25, 0x03	; 3
    1794:	80 93 f8 02 	sts	0x02F8, r24
    1798:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    179a:	2c a1       	lds	r18, 0x4c
    179c:	8d a1       	lds	r24, 0x4d
    179e:	98 2f       	mov	r25, r24
    17a0:	93 70       	andi	r25, 0x03	; 3
    17a2:	20 93 fa 02 	sts	0x02FA, r18
    17a6:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    17a8:	98 2f       	mov	r25, r24
    17aa:	96 95       	lsr	r25
    17ac:	96 95       	lsr	r25
    17ae:	8e a1       	lds	r24, 0x4e
    17b0:	28 2f       	mov	r18, r24
    17b2:	22 95       	swap	r18
    17b4:	22 0f       	add	r18, r18
    17b6:	22 0f       	add	r18, r18
    17b8:	20 7c       	andi	r18, 0xC0	; 192
    17ba:	29 2b       	or	r18, r25
    17bc:	86 95       	lsr	r24
    17be:	86 95       	lsr	r24
    17c0:	98 2f       	mov	r25, r24
    17c2:	93 70       	andi	r25, 0x03	; 3
    17c4:	20 93 fc 02 	sts	0x02FC, r18
    17c8:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    17ca:	7f a1       	lds	r23, 0x4f
    17cc:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    17d0:	68 a5       	lds	r22, 0x68
    17d2:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    17d6:	89 a5       	lds	r24, 0x69
    17d8:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    17dc:	9a a5       	lds	r25, 0x6a
    17de:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    17e2:	1b a5       	lds	r17, 0x6b
    17e4:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    17e8:	de 01       	movw	r26, r28
    17ea:	9c 96       	adiw	r26, 0x2c	; 44
    17ec:	ef ef       	ldi	r30, 0xFF	; 255
    17ee:	f1 e0       	ldi	r31, 0x01	; 1
    17f0:	28 e0       	ldi	r18, 0x08	; 8
    17f2:	01 90       	ld	r0, Z+
    17f4:	0d 92       	st	X+, r0
    17f6:	21 50       	subi	r18, 0x01	; 1
    17f8:	e1 f7       	brne	.-8      	; 0x17f2 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    17fa:	e9 2f       	mov	r30, r25
    17fc:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	9f 01       	movw	r18, r30
    1802:	22 0f       	add	r18, r18
    1804:	33 1f       	adc	r19, r19
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	a9 01       	movw	r20, r18
    180c:	44 0f       	add	r20, r20
    180e:	55 1f       	adc	r21, r21
    1810:	44 0f       	add	r20, r20
    1812:	55 1f       	adc	r21, r21
    1814:	44 0f       	add	r20, r20
    1816:	55 1f       	adc	r21, r21
    1818:	42 1b       	sub	r20, r18
    181a:	53 0b       	sbc	r21, r19
    181c:	4e 0f       	add	r20, r30
    181e:	5f 1f       	adc	r21, r31
    1820:	55 95       	asr	r21
    1822:	47 95       	ror	r20
    1824:	55 95       	asr	r21
    1826:	47 95       	ror	r20
    1828:	55 95       	asr	r21
    182a:	47 95       	ror	r20
    182c:	55 95       	asr	r21
    182e:	47 95       	ror	r20
    1830:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1832:	fe 01       	movw	r30, r28
    1834:	e4 0f       	add	r30, r20
    1836:	f1 1d       	adc	r31, r1
    1838:	24 a5       	lds	r18, 0x64
    183a:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    183e:	de 01       	movw	r26, r28
    1840:	d4 96       	adiw	r26, 0x34	; 52
    1842:	e7 e0       	ldi	r30, 0x07	; 7
    1844:	f2 e0       	ldi	r31, 0x02	; 2
    1846:	28 e0       	ldi	r18, 0x08	; 8
    1848:	01 90       	ld	r0, Z+
    184a:	0d 92       	st	X+, r0
    184c:	21 50       	subi	r18, 0x01	; 1
    184e:	e1 f7       	brne	.-8      	; 0x1848 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    1850:	29 2f       	mov	r18, r25
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	20 7e       	andi	r18, 0xE0	; 224
    1856:	30 70       	andi	r19, 0x00	; 0
    1858:	35 95       	asr	r19
    185a:	27 95       	ror	r18
    185c:	35 95       	asr	r19
    185e:	27 95       	ror	r18
    1860:	35 95       	asr	r19
    1862:	27 95       	ror	r18
    1864:	83 70       	andi	r24, 0x03	; 3
    1866:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    1868:	42 2f       	mov	r20, r18
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	ca 01       	movw	r24, r20
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	9c 01       	movw	r18, r24
    1878:	22 0f       	add	r18, r18
    187a:	33 1f       	adc	r19, r19
    187c:	22 0f       	add	r18, r18
    187e:	33 1f       	adc	r19, r19
    1880:	22 0f       	add	r18, r18
    1882:	33 1f       	adc	r19, r19
    1884:	28 1b       	sub	r18, r24
    1886:	39 0b       	sbc	r19, r25
    1888:	42 0f       	add	r20, r18
    188a:	53 1f       	adc	r21, r19
    188c:	ca 01       	movw	r24, r20
    188e:	95 95       	asr	r25
    1890:	87 95       	ror	r24
    1892:	95 95       	asr	r25
    1894:	87 95       	ror	r24
    1896:	95 95       	asr	r25
    1898:	87 95       	ror	r24
    189a:	95 95       	asr	r25
    189c:	87 95       	ror	r24
    189e:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    18a0:	fe 01       	movw	r30, r28
    18a2:	e8 0f       	add	r30, r24
    18a4:	f1 1d       	adc	r31, r1
    18a6:	84 a9       	sts	0x44, r24
    18a8:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    18ac:	de 01       	movw	r26, r28
    18ae:	dc 96       	adiw	r26, 0x3c	; 60
    18b0:	ef e0       	ldi	r30, 0x0F	; 15
    18b2:	f2 e0       	ldi	r31, 0x02	; 2
    18b4:	88 e0       	ldi	r24, 0x08	; 8
    18b6:	01 90       	ld	r0, Z+
    18b8:	0d 92       	st	X+, r0
    18ba:	81 50       	subi	r24, 0x01	; 1
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    18be:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    18c0:	46 2f       	mov	r20, r22
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	ca 01       	movw	r24, r20
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	9c 01       	movw	r18, r24
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	22 0f       	add	r18, r18
    18d6:	33 1f       	adc	r19, r19
    18d8:	22 0f       	add	r18, r18
    18da:	33 1f       	adc	r19, r19
    18dc:	28 1b       	sub	r18, r24
    18de:	39 0b       	sbc	r19, r25
    18e0:	42 0f       	add	r20, r18
    18e2:	53 1f       	adc	r21, r19
    18e4:	ca 01       	movw	r24, r20
    18e6:	95 95       	asr	r25
    18e8:	87 95       	ror	r24
    18ea:	95 95       	asr	r25
    18ec:	87 95       	ror	r24
    18ee:	95 95       	asr	r25
    18f0:	87 95       	ror	r24
    18f2:	95 95       	asr	r25
    18f4:	87 95       	ror	r24
    18f6:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    18f8:	fe 01       	movw	r30, r28
    18fa:	e8 0f       	add	r30, r24
    18fc:	f1 1d       	adc	r31, r1
    18fe:	84 ad       	sts	0x64, r24
    1900:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1904:	21 2f       	mov	r18, r17
    1906:	26 95       	lsr	r18
    1908:	27 95       	ror	r18
    190a:	22 27       	eor	r18, r18
    190c:	27 95       	ror	r18
    190e:	81 2f       	mov	r24, r17
    1910:	81 70       	andi	r24, 0x01	; 1
    1912:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1914:	81 2f       	mov	r24, r17
    1916:	86 95       	lsr	r24
    1918:	86 95       	lsr	r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	81 70       	andi	r24, 0x01	; 1
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1928:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    192a:	81 2f       	mov	r24, r17
    192c:	86 95       	lsr	r24
    192e:	86 95       	lsr	r24
    1930:	86 95       	lsr	r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	90 70       	andi	r25, 0x00	; 0
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    193c:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    193e:	81 2f       	mov	r24, r17
    1940:	82 95       	swap	r24
    1942:	8f 70       	andi	r24, 0x0F	; 15
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	81 70       	andi	r24, 0x01	; 1
    1948:	90 70       	andi	r25, 0x00	; 0
    194a:	82 95       	swap	r24
    194c:	92 95       	swap	r25
    194e:	90 7f       	andi	r25, 0xF0	; 240
    1950:	98 27       	eor	r25, r24
    1952:	80 7f       	andi	r24, 0xF0	; 240
    1954:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1956:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    1958:	81 2f       	mov	r24, r17
    195a:	82 95       	swap	r24
    195c:	86 95       	lsr	r24
    195e:	87 70       	andi	r24, 0x07	; 7
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	81 70       	andi	r24, 0x01	; 1
    1964:	90 70       	andi	r25, 0x00	; 0
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	82 95       	swap	r24
    196c:	92 95       	swap	r25
    196e:	90 7f       	andi	r25, 0xF0	; 240
    1970:	98 27       	eor	r25, r24
    1972:	80 7f       	andi	r24, 0xF0	; 240
    1974:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1976:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1978:	81 2f       	mov	r24, r17
    197a:	82 95       	swap	r24
    197c:	86 95       	lsr	r24
    197e:	86 95       	lsr	r24
    1980:	83 70       	andi	r24, 0x03	; 3
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	81 70       	andi	r24, 0x01	; 1
    1986:	90 70       	andi	r25, 0x00	; 0
    1988:	00 24       	eor	r0, r0
    198a:	96 95       	lsr	r25
    198c:	87 95       	ror	r24
    198e:	07 94       	ror	r0
    1990:	96 95       	lsr	r25
    1992:	87 95       	ror	r24
    1994:	07 94       	ror	r0
    1996:	98 2f       	mov	r25, r24
    1998:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    199a:	82 2b       	or	r24, r18
    199c:	80 93 7e 03 	sts	0x037E, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    19a0:	87 2f       	mov	r24, r23
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	81 70       	andi	r24, 0x01	; 1
    19a6:	90 70       	andi	r25, 0x00	; 0
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    19b4:	90 91 80 03 	lds	r25, 0x0380
    19b8:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    19ba:	89 2b       	or	r24, r25
    19bc:	11 1f       	adc	r17, r17
    19be:	11 27       	eor	r17, r17
    19c0:	11 1f       	adc	r17, r17
    19c2:	11 0f       	add	r17, r17
    19c4:	11 0f       	add	r17, r17
    19c6:	81 2b       	or	r24, r17
    19c8:	80 93 80 03 	sts	0x0380, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    19cc:	0e 94 fc 07 	call	0xff8	; 0xff8 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    19d0:	80 91 80 03 	lds	r24, 0x0380
    19d4:	8f 77       	andi	r24, 0x7F	; 127
    19d6:	80 93 80 03 	sts	0x0380, r24
	
	current_patch.mode = MEMORY;
    19da:	10 92 07 03 	sts	0x0307, r1
	
}
    19de:	cd 5b       	subi	r28, 0xBD	; 189
    19e0:	df 4f       	sbci	r29, 0xFF	; 255
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	08 95       	ret

000019f4 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    19f4:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    19f8:	60 3f       	cpi	r22, 0xF0	; 240
    19fa:	11 f4       	brne	.+4      	; 0x1a00 <transpose_note+0xc>
    19fc:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    1a00:	29 2f       	mov	r18, r25
    1a02:	22 0f       	add	r18, r18
    1a04:	92 0f       	add	r25, r18
    1a06:	99 0f       	add	r25, r25
    1a08:	99 0f       	add	r25, r25
    1a0a:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1a0c:	89 38       	cpi	r24, 0x89	; 137
    1a0e:	08 f0       	brcs	.+2      	; 0x1a12 <transpose_note+0x1e>
    1a10:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1a12:	08 95       	ret

00001a14 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1a14:	80 91 7e 03 	lds	r24, 0x037E
    1a18:	98 2f       	mov	r25, r24
    1a1a:	96 95       	lsr	r25
    1a1c:	96 95       	lsr	r25
    1a1e:	96 95       	lsr	r25
    1a20:	90 ff       	sbrs	r25, 0
    1a22:	0e c0       	rjmp	.+28     	; 0x1a40 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1a24:	90 91 08 03 	lds	r25, 0x0308
    1a28:	9f 5f       	subi	r25, 0xFF	; 255
    1a2a:	90 93 08 03 	sts	0x0308, r25
    1a2e:	95 30       	cpi	r25, 0x05	; 5
    1a30:	19 f4       	brne	.+6      	; 0x1a38 <update_octave_range+0x24>
    1a32:	94 e0       	ldi	r25, 0x04	; 4
    1a34:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1a38:	98 e0       	ldi	r25, 0x08	; 8
    1a3a:	89 27       	eor	r24, r25
    1a3c:	80 93 7e 03 	sts	0x037E, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1a40:	80 91 7f 03 	lds	r24, 0x037F
    1a44:	98 2f       	mov	r25, r24
    1a46:	96 95       	lsr	r25
    1a48:	96 95       	lsr	r25
    1a4a:	96 95       	lsr	r25
    1a4c:	90 ff       	sbrs	r25, 0
    1a4e:	0b c0       	rjmp	.+22     	; 0x1a66 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1a50:	90 91 08 03 	lds	r25, 0x0308
    1a54:	99 23       	and	r25, r25
    1a56:	19 f0       	breq	.+6      	; 0x1a5e <update_octave_range+0x4a>
    1a58:	91 50       	subi	r25, 0x01	; 1
    1a5a:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1a5e:	98 e0       	ldi	r25, 0x08	; 8
    1a60:	89 27       	eor	r24, r25
    1a62:	80 93 7f 03 	sts	0x037F, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1a66:	80 91 08 03 	lds	r24, 0x0308
    1a6a:	e1 e2       	ldi	r30, 0x21	; 33
    1a6c:	f2 e0       	ldi	r31, 0x02	; 2
    1a6e:	e8 0f       	add	r30, r24
    1a70:	f1 1d       	adc	r31, r1
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	00 80       	ld	r0, Z
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <update_octave_range+0x6a>
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	0a 94       	dec	r0
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <update_octave_range+0x66>
    1a82:	58 2f       	mov	r21, r24
    1a84:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1a88:	90 91 7f 03 	lds	r25, 0x037F
    1a8c:	29 2f       	mov	r18, r25
    1a8e:	26 95       	lsr	r18
    1a90:	26 95       	lsr	r18
    1a92:	20 ff       	sbrs	r18, 0
    1a94:	0e c0       	rjmp	.+28     	; 0x1ab2 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1a96:	80 91 09 03 	lds	r24, 0x0309
    1a9a:	8f 5f       	subi	r24, 0xFF	; 255
    1a9c:	80 93 09 03 	sts	0x0309, r24
    1aa0:	85 30       	cpi	r24, 0x05	; 5
    1aa2:	19 f4       	brne	.+6      	; 0x1aaa <update_octave_range+0x96>
    1aa4:	84 e0       	ldi	r24, 0x04	; 4
    1aa6:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1aaa:	84 e0       	ldi	r24, 0x04	; 4
    1aac:	98 27       	eor	r25, r24
    1aae:	90 93 7f 03 	sts	0x037F, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1ab2:	90 91 7f 03 	lds	r25, 0x037F
    1ab6:	29 2f       	mov	r18, r25
    1ab8:	26 95       	lsr	r18
    1aba:	20 ff       	sbrs	r18, 0
    1abc:	0b c0       	rjmp	.+22     	; 0x1ad4 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1abe:	80 91 09 03 	lds	r24, 0x0309
    1ac2:	88 23       	and	r24, r24
    1ac4:	19 f0       	breq	.+6      	; 0x1acc <update_octave_range+0xb8>
    1ac6:	81 50       	subi	r24, 0x01	; 1
    1ac8:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	98 27       	eor	r25, r24
    1ad0:	90 93 7f 03 	sts	0x037F, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1ad4:	40 91 00 03 	lds	r20, 0x0300
    1ad8:	4c 7f       	andi	r20, 0xFC	; 252
    1ada:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1ade:	90 91 09 03 	lds	r25, 0x0309
    1ae2:	93 30       	cpi	r25, 0x03	; 3
    1ae4:	88 f0       	brcs	.+34     	; 0x1b08 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1ae6:	ec e1       	ldi	r30, 0x1C	; 28
    1ae8:	f2 e0       	ldi	r31, 0x02	; 2
    1aea:	e9 0f       	add	r30, r25
    1aec:	f1 1d       	adc	r31, r1
    1aee:	21 e0       	ldi	r18, 0x01	; 1
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	c9 01       	movw	r24, r18
    1af4:	00 80       	ld	r0, Z
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <update_octave_range+0xe8>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <update_octave_range+0xe4>
    1b00:	84 2b       	or	r24, r20
    1b02:	80 93 00 03 	sts	0x0300, r24
    1b06:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1b08:	ec e1       	ldi	r30, 0x1C	; 28
    1b0a:	f2 e0       	ldi	r31, 0x02	; 2
    1b0c:	e9 0f       	add	r30, r25
    1b0e:	f1 1d       	adc	r31, r1
    1b10:	21 e0       	ldi	r18, 0x01	; 1
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	c9 01       	movw	r24, r18
    1b16:	00 80       	ld	r0, Z
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <update_octave_range+0x10a>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <update_octave_range+0x106>
    1b22:	85 2b       	or	r24, r21
    1b24:	80 93 01 03 	sts	0x0301, r24
    1b28:	08 95       	ret

00001b2a <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1b2a:	80 91 7f 03 	lds	r24, 0x037F
    1b2e:	88 23       	and	r24, r24
    1b30:	64 f4       	brge	.+24     	; 0x1b4a <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1b32:	80 58       	subi	r24, 0x80	; 128
    1b34:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1b38:	80 91 0a 03 	lds	r24, 0x030A
    1b3c:	8f 5f       	subi	r24, 0xFF	; 255
    1b3e:	80 93 0a 03 	sts	0x030A, r24
    1b42:	85 30       	cpi	r24, 0x05	; 5
    1b44:	11 f4       	brne	.+4      	; 0x1b4a <update_lfo_shape+0x20>
    1b46:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1b4a:	e0 91 0a 03 	lds	r30, 0x030A
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	ee 0f       	add	r30, r30
    1b52:	ff 1f       	adc	r31, r31
    1b54:	ea 5d       	subi	r30, 0xDA	; 218
    1b56:	fd 4f       	sbci	r31, 0xFD	; 253
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	01 80       	ldd	r0, Z+1	; 0x01
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <update_lfo_shape+0x3a>
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	0a 94       	dec	r0
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1b68:	90 91 ff 02 	lds	r25, 0x02FF
    1b6c:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1b6e:	89 2b       	or	r24, r25
    1b70:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1b74:	80 81       	ld	r24, Z
    1b76:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1b78:	ed ed       	ldi	r30, 0xDD	; 221
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 62       	ori	r24, 0x20	; 32
    1b80:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1b82:	80 81       	ld	r24, Z
    1b84:	8f 7d       	andi	r24, 0xDF	; 223
    1b86:	80 83       	st	Z, r24
	
}		
    1b88:	08 95       	ret

00001b8a <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1b8a:	80 91 7f 03 	lds	r24, 0x037F
    1b8e:	80 ff       	sbrs	r24, 0
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1b92:	91 e0       	ldi	r25, 0x01	; 1
    1b94:	89 27       	eor	r24, r25
    1b96:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1b9a:	80 91 0b 03 	lds	r24, 0x030B
    1b9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ba0:	80 93 0b 03 	sts	0x030B, r24
    1ba4:	85 30       	cpi	r24, 0x05	; 5
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <update_lfo_sync+0x22>
    1ba8:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1bac:	10 92 d1 03 	sts	0x03D1, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1bb0:	60 91 ff 02 	lds	r22, 0x02FF
    1bb4:	60 7f       	andi	r22, 0xF0	; 240
    1bb6:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1bba:	20 91 0b 03 	lds	r18, 0x030B
    1bbe:	22 23       	and	r18, r18
    1bc0:	71 f0       	breq	.+28     	; 0x1bde <update_lfo_sync+0x54>
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	21 50       	subi	r18, 0x01	; 1
    1bc6:	30 40       	sbci	r19, 0x00	; 0
    1bc8:	41 e0       	ldi	r20, 0x01	; 1
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	ca 01       	movw	r24, r20
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <update_lfo_sync+0x4a>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	2a 95       	dec	r18
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <update_lfo_sync+0x46>
    1bd8:	86 2b       	or	r24, r22
    1bda:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1bde:	80 91 ff 02 	lds	r24, 0x02FF
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	8f 70       	andi	r24, 0x0F	; 15
    1be6:	90 70       	andi	r25, 0x00	; 0
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	91 05       	cpc	r25, r1
    1bec:	89 f0       	breq	.+34     	; 0x1c10 <update_lfo_sync+0x86>
    1bee:	83 30       	cpi	r24, 0x03	; 3
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	24 f4       	brge	.+8      	; 0x1bfc <update_lfo_sync+0x72>
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	b9 f4       	brne	.+46     	; 0x1c28 <update_lfo_sync+0x9e>
    1bfa:	07 c0       	rjmp	.+14     	; 0x1c0a <update_lfo_sync+0x80>
    1bfc:	84 30       	cpi	r24, 0x04	; 4
    1bfe:	91 05       	cpc	r25, r1
    1c00:	59 f0       	breq	.+22     	; 0x1c18 <update_lfo_sync+0x8e>
    1c02:	88 30       	cpi	r24, 0x08	; 8
    1c04:	91 05       	cpc	r25, r1
    1c06:	81 f4       	brne	.+32     	; 0x1c28 <update_lfo_sync+0x9e>
    1c08:	0b c0       	rjmp	.+22     	; 0x1c20 <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1c0a:	10 92 d0 03 	sts	0x03D0, r1
			
			break;
    1c0e:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			midi_clock.divider = 24; //1:4
    1c10:	88 e1       	ldi	r24, 0x18	; 24
    1c12:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1c16:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1c18:	8c e0       	ldi	r24, 0x0C	; 12
    1c1a:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1c1e:	08 95       	ret
			
		case 0b1000:
			midi_clock.divider = 6; //1:16	 		
    1c20:	86 e0       	ldi	r24, 0x06	; 6
    1c22:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1c26:	08 95       	ret
		
		default:
			midi_clock.divider = 0; //need to turn midi sync off here. How?
    1c28:	10 92 d0 03 	sts	0x03D0, r1
    1c2c:	08 95       	ret

00001c2e <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1c2e:	80 91 7f 03 	lds	r24, 0x037F
    1c32:	98 2f       	mov	r25, r24
    1c34:	92 95       	swap	r25
    1c36:	96 95       	lsr	r25
    1c38:	96 95       	lsr	r25
    1c3a:	93 70       	andi	r25, 0x03	; 3
    1c3c:	90 ff       	sbrs	r25, 0
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <update_arp_sync+0x30>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1c40:	90 e4       	ldi	r25, 0x40	; 64
    1c42:	89 27       	eor	r24, r25
    1c44:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1c48:	80 91 0c 03 	lds	r24, 0x030C
    1c4c:	8f 5f       	subi	r24, 0xFF	; 255
    1c4e:	80 93 0c 03 	sts	0x030C, r24
    1c52:	85 30       	cpi	r24, 0x05	; 5
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <update_arp_sync+0x2c>
    1c56:	10 92 0c 03 	sts	0x030C, r1
		system_clock.ppqn_counter = 0; //reset counter
    1c5a:	10 92 cb 03 	sts	0x03CB, r1
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1c5e:	60 91 00 03 	lds	r22, 0x0300
    1c62:	63 7c       	andi	r22, 0xC3	; 195
    1c64:	60 93 00 03 	sts	0x0300, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1c68:	20 91 0c 03 	lds	r18, 0x030C
    1c6c:	22 23       	and	r18, r18
    1c6e:	71 f0       	breq	.+28     	; 0x1c8c <update_arp_sync+0x5e>
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	2f 5f       	subi	r18, 0xFF	; 255
    1c74:	3f 4f       	sbci	r19, 0xFF	; 255
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	ca 01       	movw	r24, r20
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <update_arp_sync+0x54>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	2a 95       	dec	r18
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <update_arp_sync+0x50>
    1c86:	86 2b       	or	r24, r22
    1c88:	80 93 00 03 	sts	0x0300, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1c8c:	80 91 00 03 	lds	r24, 0x0300
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	8c 73       	andi	r24, 0x3C	; 60
    1c94:	90 70       	andi	r25, 0x00	; 0
    1c96:	88 30       	cpi	r24, 0x08	; 8
    1c98:	91 05       	cpc	r25, r1
    1c9a:	91 f0       	breq	.+36     	; 0x1cc0 <update_arp_sync+0x92>
    1c9c:	89 30       	cpi	r24, 0x09	; 9
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	24 f4       	brge	.+8      	; 0x1caa <update_arp_sync+0x7c>
    1ca2:	84 30       	cpi	r24, 0x04	; 4
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	c1 f4       	brne	.+48     	; 0x1cd8 <update_arp_sync+0xaa>
    1ca8:	07 c0       	rjmp	.+14     	; 0x1cb8 <update_arp_sync+0x8a>
    1caa:	80 31       	cpi	r24, 0x10	; 16
    1cac:	91 05       	cpc	r25, r1
    1cae:	61 f0       	breq	.+24     	; 0x1cc8 <update_arp_sync+0x9a>
    1cb0:	80 32       	cpi	r24, 0x20	; 32
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	89 f4       	brne	.+34     	; 0x1cd8 <update_arp_sync+0xaa>
    1cb6:	0c c0       	rjmp	.+24     	; 0x1cd0 <update_arp_sync+0xa2>
			
		case 0b00000100:
			system_clock.divider = 48; //1:2
    1cb8:	80 e3       	ldi	r24, 0x30	; 48
    1cba:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1cbe:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = 24; //1:4
    1cc0:	88 e1       	ldi	r24, 0x18	; 24
    1cc2:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1cc6:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = 12; //1:8
    1cc8:	8c e0       	ldi	r24, 0x0C	; 12
    1cca:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1cce:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = 6; //1:16	
    1cd0:	86 e0       	ldi	r24, 0x06	; 6
    1cd2:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1cd6:	08 95       	ret
			
		default:
			system_clock.divider = 2; //should be 1 but this never turns arp_sync_led off - need to fix this	
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	80 93 ca 03 	sts	0x03CA, r24
    1cde:	08 95       	ret

00001ce0 <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1ce0:	80 91 7f 03 	lds	r24, 0x037F
    1ce4:	80 31       	cpi	r24, 0x10	; 16
    1ce6:	69 f4       	brne	.+26     	; 0x1d02 <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1ce8:	10 92 7f 03 	sts	0x037F, r1
		
		if (++arp_range == 4) arp_range = 0;
    1cec:	80 91 0d 03 	lds	r24, 0x030D
    1cf0:	8f 5f       	subi	r24, 0xFF	; 255
    1cf2:	80 93 0d 03 	sts	0x030D, r24
    1cf6:	84 30       	cpi	r24, 0x04	; 4
    1cf8:	11 f4       	brne	.+4      	; 0x1cfe <update_arp_range+0x1e>
    1cfa:	10 92 0d 03 	sts	0x030D, r1
		arp.step_position = 0; //reset step position if range changes
    1cfe:	10 92 86 03 	sts	0x0386, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1d02:	80 91 fe 02 	lds	r24, 0x02FE
    1d06:	8d 7f       	andi	r24, 0xFD	; 253
    1d08:	80 93 fe 02 	sts	0x02FE, r24
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1d0c:	80 91 00 03 	lds	r24, 0x0300
    1d10:	8f 73       	andi	r24, 0x3F	; 63
    1d12:	80 93 00 03 	sts	0x0300, r24
	
	arp.range = arp_range;
    1d16:	80 91 0d 03 	lds	r24, 0x030D
    1d1a:	80 93 84 03 	sts	0x0384, r24
	
	update_arp_sequence(); //update sequence with new settings
    1d1e:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1d22:	80 91 0d 03 	lds	r24, 0x030D
    1d26:	82 30       	cpi	r24, 0x02	; 2
    1d28:	51 f0       	breq	.+20     	; 0x1d3e <update_arp_range+0x5e>
    1d2a:	83 30       	cpi	r24, 0x03	; 3
    1d2c:	71 f0       	breq	.+28     	; 0x1d4a <update_arp_range+0x6a>
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	89 f4       	brne	.+34     	; 0x1d54 <update_arp_range+0x74>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1d32:	80 91 fe 02 	lds	r24, 0x02FE
    1d36:	82 60       	ori	r24, 0x02	; 2
    1d38:	80 93 fe 02 	sts	0x02FE, r24
			break;
    1d3c:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1d3e:	80 91 00 03 	lds	r24, 0x0300
    1d42:	80 64       	ori	r24, 0x40	; 64
    1d44:	80 93 00 03 	sts	0x0300, r24
			break;
    1d48:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1d4a:	80 91 00 03 	lds	r24, 0x0300
    1d4e:	80 68       	ori	r24, 0x80	; 128
    1d50:	80 93 00 03 	sts	0x0300, r24
    1d54:	08 95       	ret

00001d56 <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1d56:	80 91 7f 03 	lds	r24, 0x037F
    1d5a:	98 2f       	mov	r25, r24
    1d5c:	92 95       	swap	r25
    1d5e:	96 95       	lsr	r25
    1d60:	97 70       	andi	r25, 0x07	; 7
    1d62:	90 ff       	sbrs	r25, 0
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <update_arp_mode+0x2e>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1d66:	90 e2       	ldi	r25, 0x20	; 32
    1d68:	89 27       	eor	r24, r25
    1d6a:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_mode == 5) arp_mode = 0;
    1d6e:	80 91 0e 03 	lds	r24, 0x030E
    1d72:	8f 5f       	subi	r24, 0xFF	; 255
    1d74:	80 93 0e 03 	sts	0x030E, r24
    1d78:	85 30       	cpi	r24, 0x05	; 5
    1d7a:	11 f4       	brne	.+4      	; 0x1d80 <update_arp_mode+0x2a>
    1d7c:	10 92 0e 03 	sts	0x030E, r1
		arp.step_position = 0; //reset step position if mode changes
    1d80:	10 92 86 03 	sts	0x0386, r1
		
	}

	arp.clock_source = INTERNAL_CLOCK;	
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	80 93 88 03 	sts	0x0388, r24

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1d8a:	90 91 fe 02 	lds	r25, 0x02FE
    1d8e:	93 7c       	andi	r25, 0xC3	; 195
    1d90:	90 93 fe 02 	sts	0x02FE, r25
	
	switch(arp_mode) {
    1d94:	80 91 0e 03 	lds	r24, 0x030E
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	81 f0       	breq	.+32     	; 0x1dbc <update_arp_mode+0x66>
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	28 f0       	brcs	.+10     	; 0x1daa <update_arp_mode+0x54>
    1da0:	82 30       	cpi	r24, 0x02	; 2
    1da2:	91 f0       	breq	.+36     	; 0x1dc8 <update_arp_mode+0x72>
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	f1 f4       	brne	.+60     	; 0x1de4 <update_arp_mode+0x8e>
    1da8:	16 c0       	rjmp	.+44     	; 0x1dd6 <update_arp_mode+0x80>
		
		case 0:
		
			//turn arp off
			arp.clock_source = OFF;
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	80 93 88 03 	sts	0x0388, r24
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    1db0:	80 91 b0 02 	lds	r24, 0x02B0
    1db4:	88 23       	and	r24, r24
    1db6:	e1 f4       	brne	.+56     	; 0x1df0 <update_arp_mode+0x9a>
    1db8:	89 98       	cbi	0x11, 1	; 17
    1dba:	1a c0       	rjmp	.+52     	; 0x1df0 <update_arp_mode+0x9a>
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1dbc:	94 62       	ori	r25, 0x24	; 36
    1dbe:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP;
    1dc2:	10 92 89 03 	sts	0x0389, r1
			break;	
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <update_arp_mode+0x9a>
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1dc8:	94 61       	ori	r25, 0x14	; 20
    1dca:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = DOWN;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	80 93 89 03 	sts	0x0389, r24
			break;
    1dd4:	0d c0       	rjmp	.+26     	; 0x1df0 <update_arp_mode+0x9a>
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1dd6:	94 63       	ori	r25, 0x34	; 52
    1dd8:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP_DOWN;
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	80 93 89 03 	sts	0x0389, r24
			break;
    1de2:	06 c0       	rjmp	.+12     	; 0x1df0 <update_arp_mode+0x9a>
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1de4:	9c 60       	ori	r25, 0x0C	; 12
    1de6:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = RANDOM;
    1dea:	84 e0       	ldi	r24, 0x04	; 4
    1dec:	80 93 89 03 	sts	0x0389, r24
			
					
		
	}
	
	update_arp_sequence(); //update arp sequence with new mode
    1df0:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	



}
    1df4:	08 95       	ret

00001df6 <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1df6:	90 91 7e 03 	lds	r25, 0x037E
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1dfa:	80 91 80 03 	lds	r24, 0x0380
    1dfe:	86 95       	lsr	r24
    1e00:	86 95       	lsr	r24
    1e02:	68 2f       	mov	r22, r24
    1e04:	67 95       	ror	r22
    1e06:	66 27       	eor	r22, r22
    1e08:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e0a:	29 2f       	mov	r18, r25
    1e0c:	21 70       	andi	r18, 0x01	; 1
    1e0e:	26 2b       	or	r18, r22
    1e10:	69 2f       	mov	r22, r25
    1e12:	66 1f       	adc	r22, r22
    1e14:	66 27       	eor	r22, r22
    1e16:	66 1f       	adc	r22, r22
    1e18:	66 0f       	add	r22, r22
    1e1a:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1e1c:	29 2f       	mov	r18, r25
    1e1e:	26 95       	lsr	r18
    1e20:	26 95       	lsr	r18
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	21 70       	andi	r18, 0x01	; 1
    1e26:	30 70       	andi	r19, 0x00	; 0
    1e28:	d9 01       	movw	r26, r18
    1e2a:	aa 0f       	add	r26, r26
    1e2c:	bb 1f       	adc	r27, r27
    1e2e:	aa 0f       	add	r26, r26
    1e30:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e32:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1e34:	a9 2f       	mov	r26, r25
    1e36:	a6 95       	lsr	r26
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	a1 70       	andi	r26, 0x01	; 1
    1e3c:	b0 70       	andi	r27, 0x00	; 0
    1e3e:	fd 01       	movw	r30, r26
    1e40:	ee 0f       	add	r30, r30
    1e42:	ff 1f       	adc	r31, r31
    1e44:	ee 0f       	add	r30, r30
    1e46:	ff 1f       	adc	r31, r31
    1e48:	ee 0f       	add	r30, r30
    1e4a:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e4c:	a6 2f       	mov	r26, r22
    1e4e:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1e50:	e9 2f       	mov	r30, r25
    1e52:	e2 95       	swap	r30
    1e54:	ef 70       	andi	r30, 0x0F	; 15
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	e1 70       	andi	r30, 0x01	; 1
    1e5a:	f0 70       	andi	r31, 0x00	; 0
    1e5c:	bf 01       	movw	r22, r30
    1e5e:	62 95       	swap	r22
    1e60:	72 95       	swap	r23
    1e62:	70 7f       	andi	r23, 0xF0	; 240
    1e64:	76 27       	eor	r23, r22
    1e66:	60 7f       	andi	r22, 0xF0	; 240
    1e68:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e6a:	ea 2f       	mov	r30, r26
    1e6c:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1e6e:	69 2f       	mov	r22, r25
    1e70:	62 95       	swap	r22
    1e72:	66 95       	lsr	r22
    1e74:	67 70       	andi	r22, 0x07	; 7
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	61 70       	andi	r22, 0x01	; 1
    1e7a:	70 70       	andi	r23, 0x00	; 0
    1e7c:	ab 01       	movw	r20, r22
    1e7e:	44 0f       	add	r20, r20
    1e80:	55 1f       	adc	r21, r21
    1e82:	42 95       	swap	r20
    1e84:	52 95       	swap	r21
    1e86:	50 7f       	andi	r21, 0xF0	; 240
    1e88:	54 27       	eor	r21, r20
    1e8a:	40 7f       	andi	r20, 0xF0	; 240
    1e8c:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e8e:	6e 2f       	mov	r22, r30
    1e90:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1e92:	49 2f       	mov	r20, r25
    1e94:	42 95       	swap	r20
    1e96:	46 95       	lsr	r20
    1e98:	46 95       	lsr	r20
    1e9a:	43 70       	andi	r20, 0x03	; 3
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	41 70       	andi	r20, 0x01	; 1
    1ea0:	50 70       	andi	r21, 0x00	; 0
    1ea2:	9a 01       	movw	r18, r20
    1ea4:	00 24       	eor	r0, r0
    1ea6:	36 95       	lsr	r19
    1ea8:	27 95       	ror	r18
    1eaa:	07 94       	ror	r0
    1eac:	36 95       	lsr	r19
    1eae:	27 95       	ror	r18
    1eb0:	07 94       	ror	r0
    1eb2:	32 2f       	mov	r19, r18
    1eb4:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1eb6:	26 2b       	or	r18, r22
    1eb8:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1ebc:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1ebe:	81 95       	neg	r24
    1ec0:	89 27       	eor	r24, r25
    1ec2:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1ec4:	89 27       	eor	r24, r25
    1ec6:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1eca:	ed ed       	ldi	r30, 0xDD	; 221
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1ed0:	90 91 80 03 	lds	r25, 0x0380
    1ed4:	96 95       	lsr	r25
    1ed6:	96 95       	lsr	r25
    1ed8:	96 95       	lsr	r25
    1eda:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1edc:	91 95       	neg	r25
    1ede:	80 81       	ld	r24, Z
    1ee0:	89 27       	eor	r24, r25
    1ee2:	80 71       	andi	r24, 0x10	; 16
    1ee4:	82 27       	eor	r24, r18
    1ee6:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1ee8:	ee ef       	ldi	r30, 0xFE	; 254
    1eea:	f2 e0       	ldi	r31, 0x02	; 2
    1eec:	80 81       	ld	r24, Z
    1eee:	98 27       	eor	r25, r24
    1ef0:	91 70       	andi	r25, 0x01	; 1
    1ef2:	89 27       	eor	r24, r25
    1ef4:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1ef6:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1efa:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1efe:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    1f02:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <update_arp_sync>
	update_arp_range();
    1f06:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <update_arp_range>
	update_arp_mode();
    1f0a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    1f0e:	08 95       	ret

00001f10 <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1f14:	90 91 07 03 	lds	r25, 0x0307
    1f18:	95 30       	cpi	r25, 0x05	; 5
    1f1a:	01 f5       	brne	.+64     	; 0x1f5c <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1f1c:	87 e0       	ldi	r24, 0x07	; 7
    1f1e:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f20:	cd ed       	ldi	r28, 0xDD	; 221
    1f22:	d0 e0       	ldi	r29, 0x00	; 0
    1f24:	88 81       	ld	r24, Y
    1f26:	80 62       	ori	r24, 0x20	; 32
    1f28:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f2a:	88 81       	ld	r24, Y
    1f2c:	8f 7d       	andi	r24, 0xDF	; 223
    1f2e:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f30:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1f32:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1f36:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f38:	88 81       	ld	r24, Y
    1f3a:	80 62       	ori	r24, 0x20	; 32
    1f3c:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f3e:	88 81       	ld	r24, Y
    1f40:	8f 7d       	andi	r24, 0xDF	; 223
    1f42:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f44:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1f46:	80 91 ff 02 	lds	r24, 0x02FF
    1f4a:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1f4c:	80 68       	ori	r24, 0x80	; 128
    1f4e:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1f52:	0e 94 9e 01 	call	0x33c	; 0x33c <setup_system_clock>

		current_patch.mode = MEMORY;
    1f56:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1f5a:	63 c0       	rjmp	.+198    	; 0x2022 <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1f5c:	80 91 80 03 	lds	r24, 0x0380
    1f60:	28 2f       	mov	r18, r24
    1f62:	22 95       	swap	r18
    1f64:	26 95       	lsr	r18
    1f66:	26 95       	lsr	r18
    1f68:	23 70       	andi	r18, 0x03	; 3
    1f6a:	20 ff       	sbrs	r18, 0
    1f6c:	15 c0       	rjmp	.+42     	; 0x1f98 <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1f6e:	20 e4       	ldi	r18, 0x40	; 64
    1f70:	82 27       	eor	r24, r18
    1f72:	80 93 80 03 	sts	0x0380, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1f76:	80 91 03 03 	lds	r24, 0x0303
    1f7a:	8f 5f       	subi	r24, 0xFF	; 255
    1f7c:	80 93 03 03 	sts	0x0303, r24
    1f80:	85 32       	cpi	r24, 0x25	; 37
    1f82:	21 f4       	brne	.+8      	; 0x1f8c <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1f84:	84 e2       	ldi	r24, 0x24	; 36
    1f86:	80 93 03 03 	sts	0x0303, r24
    1f8a:	06 c0       	rjmp	.+12     	; 0x1f98 <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1f8c:	93 30       	cpi	r25, 0x03	; 3
    1f8e:	21 f0       	breq	.+8      	; 0x1f98 <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1f90:	0e 94 1a 0a 	call	0x1434	; 0x1434 <load_patch>
			update_patch();
    1f94:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1f98:	80 91 80 03 	lds	r24, 0x0380
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	92 95       	swap	r25
    1fa0:	96 95       	lsr	r25
    1fa2:	97 70       	andi	r25, 0x07	; 7
    1fa4:	90 ff       	sbrs	r25, 0
    1fa6:	15 c0       	rjmp	.+42     	; 0x1fd2 <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1fa8:	90 e2       	ldi	r25, 0x20	; 32
    1faa:	89 27       	eor	r24, r25
    1fac:	80 93 80 03 	sts	0x0380, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1fb0:	80 91 03 03 	lds	r24, 0x0303
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <update_patch_programmer+0xae>
    1fb8:	81 50       	subi	r24, 0x01	; 1
    1fba:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1fbe:	80 91 07 03 	lds	r24, 0x0307
    1fc2:	83 30       	cpi	r24, 0x03	; 3
    1fc4:	31 f0       	breq	.+12     	; 0x1fd2 <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    1fc6:	80 91 03 03 	lds	r24, 0x0303
    1fca:	0e 94 1a 0a 	call	0x1434	; 0x1434 <load_patch>
			update_patch();
    1fce:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1fd2:	80 91 80 03 	lds	r24, 0x0380
    1fd6:	98 2f       	mov	r25, r24
    1fd8:	92 95       	swap	r25
    1fda:	9f 70       	andi	r25, 0x0F	; 15
    1fdc:	90 ff       	sbrs	r25, 0
    1fde:	15 c0       	rjmp	.+42     	; 0x200a <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1fe0:	90 e1       	ldi	r25, 0x10	; 16
    1fe2:	89 27       	eor	r24, r25
    1fe4:	80 93 80 03 	sts	0x0380, r24
		if (current_patch.mode != WRITE) {
    1fe8:	90 91 07 03 	lds	r25, 0x0307
    1fec:	93 30       	cpi	r25, 0x03	; 3
    1fee:	49 f0       	breq	.+18     	; 0x2002 <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1ff0:	8f 77       	andi	r24, 0x7F	; 127
    1ff2:	80 93 80 03 	sts	0x0380, r24
			current_patch.mode = WRITE;
    1ff6:	83 e0       	ldi	r24, 0x03	; 3
    1ff8:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1ffc:	0e 94 fc 07 	call	0xff8	; 0xff8 <lock_pots>
    2000:	04 c0       	rjmp	.+8      	; 0x200a <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    2002:	80 91 03 03 	lds	r24, 0x0303
    2006:	0e 94 27 08 	call	0x104e	; 0x104e <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    200a:	80 91 80 03 	lds	r24, 0x0380
    200e:	88 23       	and	r24, r24
    2010:	44 f4       	brge	.+16     	; 0x2022 <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    2012:	80 68       	ori	r24, 0x80	; 128
    2014:	80 93 80 03 	sts	0x0380, r24
		current_patch.mode = MANUAL;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    201e:	0e 94 16 08 	call	0x102c	; 0x102c <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	08 95       	ret

00002028 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2028:	88 ed       	ldi	r24, 0xD8	; 216
    202a:	91 e0       	ldi	r25, 0x01	; 1
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2034:	81 ee       	ldi	r24, 0xE1	; 225
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2040:	82 ee       	ldi	r24, 0xE2	; 226
    2042:	91 e0       	ldi	r25, 0x01	; 1
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    204c:	83 eb       	ldi	r24, 0xB3	; 179
    204e:	92 e0       	ldi	r25, 0x02	; 2
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2058:	8a ed       	ldi	r24, 0xDA	; 218
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    2064:	8f ed       	ldi	r24, 0xDF	; 223
    2066:	91 e0       	ldi	r25, 0x01	; 1
    2068:	60 e0       	ldi	r22, 0x00	; 0
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2070:	80 ee       	ldi	r24, 0xE0	; 224
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    207c:	81 ed       	ldi	r24, 0xD1	; 209
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2088:	86 ed       	ldi	r24, 0xD6	; 214
    208a:	91 e0       	ldi	r25, 0x01	; 1
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    2094:	82 ed       	ldi	r24, 0xD2	; 210
    2096:	91 e0       	ldi	r25, 0x01	; 1
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    20a0:	83 ed       	ldi	r24, 0xD3	; 211
    20a2:	91 e0       	ldi	r25, 0x01	; 1
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    20ac:	84 ed       	ldi	r24, 0xD4	; 212
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	6f ef       	ldi	r22, 0xFF	; 255
    20b2:	7f e3       	ldi	r23, 0x3F	; 63
    20b4:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    20b8:	85 ed       	ldi	r24, 0xD5	; 213
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    20c4:	89 ed       	ldi	r24, 0xD9	; 217
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	60 e0       	ldi	r22, 0x00	; 0
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    20d0:	8e ec       	ldi	r24, 0xCE	; 206
    20d2:	91 e0       	ldi	r25, 0x01	; 1
    20d4:	60 e0       	ldi	r22, 0x00	; 0
    20d6:	70 e0       	ldi	r23, 0x00	; 0
    20d8:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    20dc:	8c ec       	ldi	r24, 0xCC	; 204
    20de:	91 e0       	ldi	r25, 0x01	; 1
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    20e8:	8a ec       	ldi	r24, 0xCA	; 202
    20ea:	91 e0       	ldi	r25, 0x01	; 1
    20ec:	6f ef       	ldi	r22, 0xFF	; 255
    20ee:	7f e3       	ldi	r23, 0x3F	; 63
    20f0:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    20f4:	88 ec       	ldi	r24, 0xC8	; 200
    20f6:	91 e0       	ldi	r25, 0x01	; 1
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    2100:	80 ed       	ldi	r24, 0xD0	; 208
    2102:	91 e0       	ldi	r25, 0x01	; 1
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    210c:	83 ee       	ldi	r24, 0xE3	; 227
    210e:	91 e0       	ldi	r25, 0x01	; 1
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2118:	84 ee       	ldi	r24, 0xE4	; 228
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
}	
    2124:	08 95       	ret

00002126 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    2126:	2f 92       	push	r2
    2128:	3f 92       	push	r3
    212a:	4f 92       	push	r4
    212c:	5f 92       	push	r5
    212e:	6f 92       	push	r6
    2130:	7f 92       	push	r7
    2132:	8f 92       	push	r8
    2134:	9f 92       	push	r9
    2136:	af 92       	push	r10
    2138:	bf 92       	push	r11
    213a:	cf 92       	push	r12
    213c:	df 92       	push	r13
    213e:	ef 92       	push	r14
    2140:	ff 92       	push	r15
    2142:	0f 93       	push	r16
    2144:	1f 93       	push	r17
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	2c 97       	sbiw	r28, 0x0c	; 12
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	08 2f       	mov	r16, r24
    215c:	78 87       	std	Y+8, r23	; 0x08
    215e:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    2160:	80 91 7b 03 	lds	r24, 0x037B
    2164:	83 60       	ori	r24, 0x03	; 3
    2166:	80 93 7b 03 	sts	0x037B, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    216a:	0e 94 14 10 	call	0x2028	; 0x2028 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    216e:	10 92 7a 03 	sts	0x037A, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    2172:	0f 30       	cpi	r16, 0x0F	; 15
    2174:	e1 f4       	brne	.+56     	; 0x21ae <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2176:	0f 2e       	mov	r0, r31
    2178:	f6 ee       	ldi	r31, 0xE6	; 230
    217a:	4f 2e       	mov	r4, r31
    217c:	f1 e0       	ldi	r31, 0x01	; 1
    217e:	5f 2e       	mov	r5, r31
    2180:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    2182:	0f 2e       	mov	r0, r31
    2184:	fe ed       	ldi	r31, 0xDE	; 222
    2186:	2f 2e       	mov	r2, r31
    2188:	f1 e0       	ldi	r31, 0x01	; 1
    218a:	3f 2e       	mov	r3, r31
    218c:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    218e:	23 ee       	ldi	r18, 0xE3	; 227
    2190:	31 e0       	ldi	r19, 0x01	; 1
    2192:	3a 83       	std	Y+2, r19	; 0x02
    2194:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2196:	0f 2e       	mov	r0, r31
    2198:	fc ed       	ldi	r31, 0xDC	; 220
    219a:	8f 2e       	mov	r8, r31
    219c:	f1 e0       	ldi	r31, 0x01	; 1
    219e:	9f 2e       	mov	r9, r31
    21a0:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    21a2:	82 e7       	ldi	r24, 0x72	; 114
    21a4:	96 e0       	ldi	r25, 0x06	; 6
    21a6:	9a 87       	std	Y+10, r25	; 0x0a
    21a8:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	1b c0       	rjmp	.+54     	; 0x21e4 <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    21ae:	0f 2e       	mov	r0, r31
    21b0:	f5 ee       	ldi	r31, 0xE5	; 229
    21b2:	4f 2e       	mov	r4, r31
    21b4:	f1 e0       	ldi	r31, 0x01	; 1
    21b6:	5f 2e       	mov	r5, r31
    21b8:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    21ba:	0f 2e       	mov	r0, r31
    21bc:	f7 ed       	ldi	r31, 0xD7	; 215
    21be:	2f 2e       	mov	r2, r31
    21c0:	f1 e0       	ldi	r31, 0x01	; 1
    21c2:	3f 2e       	mov	r3, r31
    21c4:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    21c6:	e4 ee       	ldi	r30, 0xE4	; 228
    21c8:	f1 e0       	ldi	r31, 0x01	; 1
    21ca:	fa 83       	std	Y+2, r31	; 0x02
    21cc:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    21ce:	0f 2e       	mov	r0, r31
    21d0:	fd ed       	ldi	r31, 0xDD	; 221
    21d2:	8f 2e       	mov	r8, r31
    21d4:	f1 e0       	ldi	r31, 0x01	; 1
    21d6:	9f 2e       	mov	r9, r31
    21d8:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    21da:	20 e7       	ldi	r18, 0x70	; 112
    21dc:	36 e0       	ldi	r19, 0x06	; 6
    21de:	3a 87       	std	Y+10, r19	; 0x0a
    21e0:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    21e2:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    21e4:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    21e6:	ed ed       	ldi	r30, 0xDD	; 221
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	80 64       	ori	r24, 0x40	; 64
    21ee:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    21f0:	80 81       	ld	r24, Z
    21f2:	8f 7b       	andi	r24, 0xBF	; 191
    21f4:	80 83       	st	Z, r24
	DATA_BUS = 0;
    21f6:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    21f8:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    21fa:	84 b5       	in	r24, 0x24	; 36
    21fc:	8f 60       	ori	r24, 0x0F	; 15
    21fe:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    2204:	ee e6       	ldi	r30, 0x6E	; 110
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	90 81       	ld	r25, Z
    220a:	92 60       	ori	r25, 0x02	; 2
    220c:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    220e:	80 93 7c 03 	sts	0x037C, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    2212:	8d e0       	ldi	r24, 0x0D	; 13
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9c 83       	std	Y+4, r25	; 0x04
    2218:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    221a:	80 2f       	mov	r24, r16
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	8c 01       	movw	r16, r24
    2220:	0f 5f       	subi	r16, 0xFF	; 255
    2222:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    2224:	0f 2e       	mov	r0, r31
    2226:	f8 ed       	ldi	r31, 0xD8	; 216
    2228:	ef 2e       	mov	r14, r31
    222a:	f1 e0       	ldi	r31, 0x01	; 1
    222c:	ff 2e       	mov	r15, r31
    222e:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    2230:	0f 2e       	mov	r0, r31
    2232:	f4 ed       	ldi	r31, 0xD4	; 212
    2234:	cf 2e       	mov	r12, r31
    2236:	f1 e0       	ldi	r31, 0x01	; 1
    2238:	df 2e       	mov	r13, r31
    223a:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    223c:	0f 2e       	mov	r0, r31
    223e:	fa ec       	ldi	r31, 0xCA	; 202
    2240:	af 2e       	mov	r10, r31
    2242:	f1 e0       	ldi	r31, 0x01	; 1
    2244:	bf 2e       	mov	r11, r31
    2246:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    2248:	0f 2e       	mov	r0, r31
    224a:	fb ec       	ldi	r31, 0xCB	; 203
    224c:	6f 2e       	mov	r6, r31
    224e:	f1 e0       	ldi	r31, 0x01	; 1
    2250:	7f 2e       	mov	r7, r31
    2252:	f0 2d       	mov	r31, r0
    2254:	e0 e0       	ldi	r30, 0x00	; 0
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	fc 87       	std	Y+12, r31	; 0x0c
    225a:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    225c:	21 e0       	ldi	r18, 0x01	; 1
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	0b 80       	ldd	r0, Y+3	; 0x03
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <set_vco_init_cv+0x142>
    2264:	22 0f       	add	r18, r18
    2266:	33 1f       	adc	r19, r19
    2268:	0a 94       	dec	r0
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <set_vco_init_cv+0x13e>
    226c:	3e 83       	std	Y+6, r19	; 0x06
    226e:	2d 83       	std	Y+5, r18	; 0x05
    2270:	8b 85       	ldd	r24, Y+11	; 0x0b
    2272:	9c 85       	ldd	r25, Y+12	; 0x0c
    2274:	82 2b       	or	r24, r18
    2276:	93 2b       	or	r25, r19
    2278:	9c 87       	std	Y+12, r25	; 0x0c
    227a:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    227c:	c4 01       	movw	r24, r8
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
		
		
		count_finished = FALSE;
    2286:	10 92 7a 03 	sts	0x037A, r1
		period_counter = 0;
    228a:	10 92 7d 03 	sts	0x037D, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    228e:	8f e0       	ldi	r24, 0x0F	; 15
    2290:	e8 e1       	ldi	r30, 0x18	; 24
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	a8 95       	wdr
    229a:	e0 93 60 00 	sts	0x0060, r30
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    22a4:	80 91 7a 03 	lds	r24, 0x037A
    22a8:	88 23       	and	r24, r24
    22aa:	89 f5       	brne	.+98     	; 0x230e <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    22ac:	c8 01       	movw	r24, r16
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    22b4:	c4 01       	movw	r24, r8
    22b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ba:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    22be:	c1 01       	movw	r24, r2
    22c0:	6f ef       	ldi	r22, 0xFF	; 255
    22c2:	7f e3       	ldi	r23, 0x3F	; 63
    22c4:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    22c8:	c7 01       	movw	r24, r14
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	70 e0       	ldi	r23, 0x00	; 0
    22ce:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    22d2:	c6 01       	movw	r24, r12
    22d4:	6f ef       	ldi	r22, 0xFF	; 255
    22d6:	7f e3       	ldi	r23, 0x3F	; 63
    22d8:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    22dc:	c5 01       	movw	r24, r10
    22de:	6f ef       	ldi	r22, 0xFF	; 255
    22e0:	7f e3       	ldi	r23, 0x3F	; 63
    22e2:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    22e6:	c3 01       	movw	r24, r6
    22e8:	6f ef       	ldi	r22, 0xFF	; 255
    22ea:	7f e3       	ldi	r23, 0x3F	; 63
    22ec:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	9a 81       	ldd	r25, Y+2	; 0x02
    22f4:	6f ef       	ldi	r22, 0xFF	; 255
    22f6:	7f e3       	ldi	r23, 0x3F	; 63
    22f8:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    22fc:	c2 01       	movw	r24, r4
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    2306:	80 91 7a 03 	lds	r24, 0x037A
    230a:	88 23       	and	r24, r24
    230c:	79 f2       	breq	.-98     	; 0x22ac <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    230e:	88 e1       	ldi	r24, 0x18	; 24
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	80 93 60 00 	sts	0x0060, r24
    2318:	10 92 60 00 	sts	0x0060, r1
    231c:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    231e:	80 91 78 03 	lds	r24, 0x0378
    2322:	90 91 79 03 	lds	r25, 0x0379
    2326:	ef 81       	ldd	r30, Y+7	; 0x07
    2328:	f8 85       	ldd	r31, Y+8	; 0x08
    232a:	e8 17       	cp	r30, r24
    232c:	f9 07       	cpc	r31, r25
    232e:	20 f0       	brcs	.+8      	; 0x2338 <set_vco_init_cv+0x212>
    2330:	80 91 af 02 	lds	r24, 0x02AF
    2334:	88 23       	and	r24, r24
    2336:	51 f4       	brne	.+20     	; 0x234c <set_vco_init_cv+0x226>
    2338:	8d 81       	ldd	r24, Y+5	; 0x05
    233a:	9e 81       	ldd	r25, Y+6	; 0x06
    233c:	80 95       	com	r24
    233e:	90 95       	com	r25
    2340:	2b 85       	ldd	r18, Y+11	; 0x0b
    2342:	3c 85       	ldd	r19, Y+12	; 0x0c
    2344:	28 23       	and	r18, r24
    2346:	39 23       	and	r19, r25
    2348:	3c 87       	std	Y+12, r19	; 0x0c
    234a:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	9c 83       	std	Y+4, r25	; 0x04
    235a:	8b 83       	std	Y+3, r24	; 0x03
    235c:	ef ef       	ldi	r30, 0xFF	; 255
    235e:	8f 3f       	cpi	r24, 0xFF	; 255
    2360:	9e 07       	cpc	r25, r30
    2362:	09 f0       	breq	.+2      	; 0x2366 <set_vco_init_cv+0x240>
    2364:	7b cf       	rjmp	.-266    	; 0x225c <set_vco_init_cv+0x136>
    2366:	2b 85       	ldd	r18, Y+11	; 0x0b
    2368:	3c 85       	ldd	r19, Y+12	; 0x0c
    236a:	3e 83       	std	Y+6, r19	; 0x06
    236c:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    236e:	88 ec       	ldi	r24, 0xC8	; 200
    2370:	91 e0       	ldi	r25, 0x01	; 1
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	70 e0       	ldi	r23, 0x00	; 0
    2376:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    237a:	89 ec       	ldi	r24, 0xC9	; 201
    237c:	91 e0       	ldi	r25, 0x01	; 1
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	70 e0       	ldi	r23, 0x00	; 0
    2382:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    2386:	84 ed       	ldi	r24, 0xD4	; 212
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	70 e0       	ldi	r23, 0x00	; 0
    238e:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    2392:	88 ed       	ldi	r24, 0xD8	; 216
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	70 e0       	ldi	r23, 0x00	; 0
    239a:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    239e:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    23a0:	ee e6       	ldi	r30, 0x6E	; 110
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	8d 7f       	andi	r24, 0xFD	; 253
    23a8:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    23aa:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	6d 81       	ldd	r22, Y+5	; 0x05
    23b2:	7e 81       	ldd	r23, Y+6	; 0x06
    23b4:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	2c 96       	adiw	r28, 0x0c	; 12
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	ff 90       	pop	r15
    23d2:	ef 90       	pop	r14
    23d4:	df 90       	pop	r13
    23d6:	cf 90       	pop	r12
    23d8:	bf 90       	pop	r11
    23da:	af 90       	pop	r10
    23dc:	9f 90       	pop	r9
    23de:	8f 90       	pop	r8
    23e0:	7f 90       	pop	r7
    23e2:	6f 90       	pop	r6
    23e4:	5f 90       	pop	r5
    23e6:	4f 90       	pop	r4
    23e8:	3f 90       	pop	r3
    23ea:	2f 90       	pop	r2
    23ec:	08 95       	ret

000023ee <tune_8ths>:



void tune_8ths(uint8_t vco) {
    23ee:	2f 92       	push	r2
    23f0:	3f 92       	push	r3
    23f2:	4f 92       	push	r4
    23f4:	5f 92       	push	r5
    23f6:	6f 92       	push	r6
    23f8:	7f 92       	push	r7
    23fa:	8f 92       	push	r8
    23fc:	9f 92       	push	r9
    23fe:	af 92       	push	r10
    2400:	bf 92       	push	r11
    2402:	cf 92       	push	r12
    2404:	df 92       	push	r13
    2406:	ef 92       	push	r14
    2408:	ff 92       	push	r15
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	c0 54       	subi	r28, 0x40	; 64
    2418:	d0 40       	sbci	r29, 0x00	; 0
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    2426:	de 01       	movw	r26, r28
    2428:	11 96       	adiw	r26, 0x01	; 1
    242a:	e0 e3       	ldi	r30, 0x30	; 48
    242c:	f2 e0       	ldi	r31, 0x02	; 2
    242e:	80 e3       	ldi	r24, 0x30	; 48
    2430:	01 90       	ld	r0, Z+
    2432:	0d 92       	st	X+, r0
    2434:	81 50       	subi	r24, 0x01	; 1
    2436:	e1 f7       	brne	.-8      	; 0x2430 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    2438:	0e 94 14 10 	call	0x2028	; 0x2028 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    243c:	0f 30       	cpi	r16, 0x0F	; 15
    243e:	11 f5       	brne	.+68     	; 0x2484 <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    2440:	40 90 75 03 	lds	r4, 0x0375
    2444:	50 90 76 03 	lds	r5, 0x0376
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2448:	0f 2e       	mov	r0, r31
    244a:	f6 ee       	ldi	r31, 0xE6	; 230
    244c:	8f 2e       	mov	r8, r31
    244e:	f1 e0       	ldi	r31, 0x01	; 1
    2450:	9f 2e       	mov	r9, r31
    2452:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    2454:	0f 2e       	mov	r0, r31
    2456:	fe ed       	ldi	r31, 0xDE	; 222
    2458:	2f 2e       	mov	r2, r31
    245a:	f1 e0       	ldi	r31, 0x01	; 1
    245c:	3f 2e       	mov	r3, r31
    245e:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    2460:	23 ee       	ldi	r18, 0xE3	; 227
    2462:	31 e0       	ldi	r19, 0x01	; 1
    2464:	3a ab       	sts	0x5a, r19
    2466:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2468:	0f 2e       	mov	r0, r31
    246a:	fc ed       	ldi	r31, 0xDC	; 220
    246c:	6f 2e       	mov	r6, r31
    246e:	f1 e0       	ldi	r31, 0x01	; 1
    2470:	7f 2e       	mov	r7, r31
    2472:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    2474:	01 e5       	ldi	r16, 0x51	; 81
    2476:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2478:	cc 24       	eor	r12, r12
    247a:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    247c:	ee 24       	eor	r14, r14
    247e:	68 94       	set
    2480:	e1 f8       	bld	r14, 1
    2482:	22 c0       	rjmp	.+68     	; 0x24c8 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    2484:	40 90 73 03 	lds	r4, 0x0373
    2488:	50 90 74 03 	lds	r5, 0x0374
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    248c:	0f 2e       	mov	r0, r31
    248e:	f5 ee       	ldi	r31, 0xE5	; 229
    2490:	8f 2e       	mov	r8, r31
    2492:	f1 e0       	ldi	r31, 0x01	; 1
    2494:	9f 2e       	mov	r9, r31
    2496:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2498:	0f 2e       	mov	r0, r31
    249a:	f7 ed       	ldi	r31, 0xD7	; 215
    249c:	2f 2e       	mov	r2, r31
    249e:	f1 e0       	ldi	r31, 0x01	; 1
    24a0:	3f 2e       	mov	r3, r31
    24a2:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    24a4:	44 ee       	ldi	r20, 0xE4	; 228
    24a6:	51 e0       	ldi	r21, 0x01	; 1
    24a8:	5a ab       	sts	0x5a, r21
    24aa:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    24ac:	0f 2e       	mov	r0, r31
    24ae:	fd ed       	ldi	r31, 0xDD	; 221
    24b0:	6f 2e       	mov	r6, r31
    24b2:	f1 e0       	ldi	r31, 0x01	; 1
    24b4:	7f 2e       	mov	r7, r31
    24b6:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    24b8:	0f e2       	ldi	r16, 0x2F	; 47
    24ba:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    24bc:	cc 24       	eor	r12, r12
    24be:	68 94       	set
    24c0:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    24c2:	ee 24       	eor	r14, r14
    24c4:	68 94       	set
    24c6:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    24c8:	c3 01       	movw	r24, r6
    24ca:	b2 01       	movw	r22, r4
    24cc:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    24d0:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    24d2:	ed ed       	ldi	r30, 0xDD	; 221
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	80 64       	ori	r24, 0x40	; 64
    24da:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    24dc:	80 81       	ld	r24, Z
    24de:	8f 7b       	andi	r24, 0xBF	; 191
    24e0:	80 83       	st	Z, r24
		DATA_BUS = 0;
    24e2:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    24e4:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	80 93 7c 03 	sts	0x037C, r24
		
		compare_match_counter = 0;	
    24ec:	10 92 77 03 	sts	0x0377, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    24f0:	8c 2d       	mov	r24, r12
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	24 e6       	ldi	r18, 0x64	; 100
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	82 9f       	mul	r24, r18
    24fa:	d0 01       	movw	r26, r0
    24fc:	83 9f       	mul	r24, r19
    24fe:	b0 0d       	add	r27, r0
    2500:	92 9f       	mul	r25, r18
    2502:	b0 0d       	add	r27, r0
    2504:	11 24       	eor	r1, r1
    2506:	bc ab       	sts	0x5c, r27
    2508:	ab ab       	sts	0x5b, r26
    250a:	fe 01       	movw	r30, r28
    250c:	31 96       	adiw	r30, 0x01	; 1
    250e:	fc af       	sts	0x7c, r31
    2510:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    2512:	98 01       	movw	r18, r16
    2514:	2e 5f       	subi	r18, 0xFE	; 254
    2516:	3f 4f       	sbci	r19, 0xFF	; 255
    2518:	21 96       	adiw	r28, 0x01	; 1
    251a:	3f af       	sts	0x7f, r19
    251c:	2e af       	sts	0x7e, r18
    251e:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2520:	1e ae       	sts	0xbe, r17
    2522:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2524:	0f 2e       	mov	r0, r31
    2526:	f8 ed       	ldi	r31, 0xD8	; 216
    2528:	ef 2e       	mov	r14, r31
    252a:	f1 e0       	ldi	r31, 0x01	; 1
    252c:	ff 2e       	mov	r15, r31
    252e:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    2530:	0f 2e       	mov	r0, r31
    2532:	f4 ed       	ldi	r31, 0xD4	; 212
    2534:	cf 2e       	mov	r12, r31
    2536:	f1 e0       	ldi	r31, 0x01	; 1
    2538:	df 2e       	mov	r13, r31
    253a:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    253c:	0f 2e       	mov	r0, r31
    253e:	fa ec       	ldi	r31, 0xCA	; 202
    2540:	af 2e       	mov	r10, r31
    2542:	f1 e0       	ldi	r31, 0x01	; 1
    2544:	bf 2e       	mov	r11, r31
    2546:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    2548:	eb ad       	sts	0x6b, r30
    254a:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    254c:	80 81       	ld	r24, Z
    254e:	80 93 7c 03 	sts	0x037C, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2552:	84 b5       	in	r24, 0x24	; 36
    2554:	8f 60       	ori	r24, 0x0F	; 15
    2556:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    255c:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    255e:	4d ad       	sts	0x6d, r20
    2560:	5e ad       	sts	0x6e, r21
    2562:	43 30       	cpi	r20, 0x03	; 3
    2564:	51 05       	cpc	r21, r1
    2566:	24 f4       	brge	.+8      	; 0x2570 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2568:	83 e0       	ldi	r24, 0x03	; 3
    256a:	80 93 7b 03 	sts	0x037B, r24
    256e:	03 c0       	rjmp	.+6      	; 0x2576 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    2570:	82 e0       	ldi	r24, 0x02	; 2
    2572:	80 93 7b 03 	sts	0x037B, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    2576:	81 81       	ldd	r24, Z+1	; 0x01
    2578:	92 81       	ldd	r25, Z+2	; 0x02
    257a:	9a af       	sts	0x7a, r25
    257c:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    257e:	ad e0       	ldi	r26, 0x0D	; 13
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	be ab       	sts	0x5e, r27
    2584:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    2586:	00 e0       	ldi	r16, 0x00	; 0
    2588:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    258a:	e1 e0       	ldi	r30, 0x01	; 1
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	0d a8       	sts	0x8d, r16
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <tune_8ths+0x1a8>
    2592:	ee 0f       	add	r30, r30
    2594:	ff 1f       	adc	r31, r31
    2596:	0a 94       	dec	r0
    2598:	e2 f7       	brpl	.-8      	; 0x2592 <tune_8ths+0x1a4>
    259a:	f8 af       	sts	0x78, r31
    259c:	ef ab       	sts	0x5f, r30
    259e:	0e 2b       	or	r16, r30
    25a0:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    25a2:	ae e6       	ldi	r26, 0x6E	; 110
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	8c 91       	ld	r24, X
    25a8:	8d 7f       	andi	r24, 0xFD	; 253
    25aa:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    25ac:	c4 01       	movw	r24, r8
    25ae:	b8 01       	movw	r22, r16
    25b0:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25b4:	e3 ef       	ldi	r30, 0xF3	; 243
    25b6:	f1 e0       	ldi	r31, 0x01	; 1
    25b8:	31 97       	sbiw	r30, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <tune_8ths+0x1ca>
    25bc:	00 c0       	rjmp	.+0      	; 0x25be <tune_8ths+0x1d0>
    25be:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    25c0:	ae e6       	ldi	r26, 0x6E	; 110
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	8c 91       	ld	r24, X
    25c6:	82 60       	ori	r24, 0x02	; 2
    25c8:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    25ca:	10 92 7a 03 	sts	0x037A, r1
				period_counter = 0;
    25ce:	10 92 7d 03 	sts	0x037D, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    25d2:	e8 e1       	ldi	r30, 0x18	; 24
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	2f e0       	ldi	r18, 0x0F	; 15
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	a8 95       	wdr
    25de:	e0 93 60 00 	sts	0x0060, r30
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    25e8:	80 91 7a 03 	lds	r24, 0x037A
    25ec:	88 23       	and	r24, r24
    25ee:	81 f5       	brne	.+96     	; 0x2650 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    25f0:	80 91 7c 03 	lds	r24, 0x037C
    25f4:	4b a9       	sts	0x4b, r20
    25f6:	5c a9       	sts	0x4c, r21
    25f8:	48 0f       	add	r20, r24
    25fa:	51 1d       	adc	r21, r1
    25fc:	ca 01       	movw	r24, r20
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    2604:	c3 01       	movw	r24, r6
    2606:	b2 01       	movw	r22, r4
    2608:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    260c:	c4 01       	movw	r24, r8
    260e:	b8 01       	movw	r22, r16
    2610:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2614:	c7 01       	movw	r24, r14
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    261e:	c6 01       	movw	r24, r12
    2620:	6f ef       	ldi	r22, 0xFF	; 255
    2622:	7f e3       	ldi	r23, 0x3F	; 63
    2624:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2628:	c5 01       	movw	r24, r10
    262a:	6f ef       	ldi	r22, 0xFF	; 255
    262c:	7f e3       	ldi	r23, 0x3F	; 63
    262e:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    2632:	c1 01       	movw	r24, r2
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	70 e2       	ldi	r23, 0x20	; 32
    2638:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    263c:	89 a9       	sts	0x49, r24
    263e:	9a a9       	sts	0x4a, r25
    2640:	6f ef       	ldi	r22, 0xFF	; 255
    2642:	7f e3       	ldi	r23, 0x3F	; 63
    2644:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2648:	80 91 7a 03 	lds	r24, 0x037A
    264c:	88 23       	and	r24, r24
    264e:	81 f2       	breq	.-96     	; 0x25f0 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    2650:	58 e1       	ldi	r21, 0x18	; 24
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	50 93 60 00 	sts	0x0060, r21
    265a:	10 92 60 00 	sts	0x0060, r1
    265e:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    2660:	80 91 78 03 	lds	r24, 0x0378
    2664:	90 91 79 03 	lds	r25, 0x0379
    2668:	a9 ad       	sts	0x69, r26
    266a:	ba ad       	sts	0x6a, r27
    266c:	a8 17       	cp	r26, r24
    266e:	b9 07       	cpc	r27, r25
    2670:	50 f0       	brcs	.+20     	; 0x2686 <tune_8ths+0x298>
    2672:	80 91 af 02 	lds	r24, 0x02AF
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	31 f4       	brne	.+12     	; 0x2686 <tune_8ths+0x298>
    267a:	8f a9       	sts	0x4f, r24
    267c:	98 ad       	sts	0x68, r25
    267e:	80 95       	com	r24
    2680:	90 95       	com	r25
    2682:	08 23       	and	r16, r24
    2684:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2686:	80 91 78 03 	lds	r24, 0x0378
    268a:	90 91 79 03 	lds	r25, 0x0379
    268e:	e9 ad       	sts	0x69, r30
    2690:	fa ad       	sts	0x6a, r31
    2692:	8e 17       	cp	r24, r30
    2694:	9f 07       	cpc	r25, r31
    2696:	21 f4       	brne	.+8      	; 0x26a0 <tune_8ths+0x2b2>
    2698:	80 91 af 02 	lds	r24, 0x02AF
    269c:	81 30       	cpi	r24, 0x01	; 1
    269e:	71 f0       	breq	.+28     	; 0x26bc <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    26a0:	f1 e0       	ldi	r31, 0x01	; 1
    26a2:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    26a6:	2d a9       	sts	0x4d, r18
    26a8:	3e a9       	sts	0x4e, r19
    26aa:	21 50       	subi	r18, 0x01	; 1
    26ac:	30 40       	sbci	r19, 0x00	; 0
    26ae:	3e ab       	sts	0x5e, r19
    26b0:	2d ab       	sts	0x5d, r18
    26b2:	4f ef       	ldi	r20, 0xFF	; 255
    26b4:	2f 3f       	cpi	r18, 0xFF	; 255
    26b6:	34 07       	cpc	r19, r20
    26b8:	09 f0       	breq	.+2      	; 0x26bc <tune_8ths+0x2ce>
    26ba:	67 cf       	rjmp	.-306    	; 0x258a <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    26bc:	21 96       	adiw	r28, 0x01	; 1
    26be:	ae ad       	sts	0x6e, r26
    26c0:	bf ad       	sts	0x6f, r27
    26c2:	21 97       	sbiw	r28, 0x01	; 1
    26c4:	0d 93       	st	X+, r16
    26c6:	1d 93       	st	X+, r17
    26c8:	21 96       	adiw	r28, 0x01	; 1
    26ca:	bf af       	sts	0x7f, r27
    26cc:	ae af       	sts	0x7e, r26
    26ce:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    26d0:	ee e6       	ldi	r30, 0x6E	; 110
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	8d 7f       	andi	r24, 0xFD	; 253
    26d8:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    26da:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    26dc:	2d ad       	sts	0x6d, r18
    26de:	3e ad       	sts	0x6e, r19
    26e0:	2f 5f       	subi	r18, 0xFF	; 255
    26e2:	3f 4f       	sbci	r19, 0xFF	; 255
    26e4:	3e af       	sts	0x7e, r19
    26e6:	2d af       	sts	0x7d, r18
    26e8:	4b ad       	sts	0x6b, r20
    26ea:	5c ad       	sts	0x6c, r21
    26ec:	4d 5f       	subi	r20, 0xFD	; 253
    26ee:	5f 4f       	sbci	r21, 0xFF	; 255
    26f0:	5c af       	sts	0x7c, r21
    26f2:	4b af       	sts	0x7b, r20
    26f4:	20 31       	cpi	r18, 0x10	; 16
    26f6:	31 05       	cpc	r19, r1
    26f8:	09 f0       	breq	.+2      	; 0x26fc <tune_8ths+0x30e>
    26fa:	26 cf       	rjmp	.-436    	; 0x2548 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    26fc:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    26fe:	c0 5c       	subi	r28, 0xC0	; 192
    2700:	df 4f       	sbci	r29, 0xFF	; 255
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	ff 90       	pop	r15
    2716:	ef 90       	pop	r14
    2718:	df 90       	pop	r13
    271a:	cf 90       	pop	r12
    271c:	bf 90       	pop	r11
    271e:	af 90       	pop	r10
    2720:	9f 90       	pop	r9
    2722:	8f 90       	pop	r8
    2724:	7f 90       	pop	r7
    2726:	6f 90       	pop	r6
    2728:	5f 90       	pop	r5
    272a:	4f 90       	pop	r4
    272c:	3f 90       	pop	r3
    272e:	2f 90       	pop	r2
    2730:	08 95       	ret

00002732 <tune_filter>:
	
void tune_filter(void) {
    2732:	2f 92       	push	r2
    2734:	3f 92       	push	r3
    2736:	4f 92       	push	r4
    2738:	5f 92       	push	r5
    273a:	6f 92       	push	r6
    273c:	7f 92       	push	r7
    273e:	8f 92       	push	r8
    2740:	9f 92       	push	r9
    2742:	af 92       	push	r10
    2744:	bf 92       	push	r11
    2746:	cf 92       	push	r12
    2748:	df 92       	push	r13
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	e9 97       	sbiw	r28, 0x39	; 57
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    2766:	de 01       	movw	r26, r28
    2768:	11 96       	adiw	r26, 0x01	; 1
    276a:	e0 e6       	ldi	r30, 0x60	; 96
    276c:	f2 e0       	ldi	r31, 0x02	; 2
    276e:	8d e2       	ldi	r24, 0x2D	; 45
    2770:	01 90       	ld	r0, Z+
    2772:	0d 92       	st	X+, r0
    2774:	81 50       	subi	r24, 0x01	; 1
    2776:	e1 f7       	brne	.-8      	; 0x2770 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2778:	88 ed       	ldi	r24, 0xD8	; 216
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	60 e0       	ldi	r22, 0x00	; 0
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2784:	81 ee       	ldi	r24, 0xE1	; 225
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	70 e0       	ldi	r23, 0x00	; 0
    278c:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2790:	82 ee       	ldi	r24, 0xE2	; 226
    2792:	91 e0       	ldi	r25, 0x01	; 1
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    279c:	83 eb       	ldi	r24, 0xB3	; 179
    279e:	92 e0       	ldi	r25, 0x02	; 2
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    27a8:	8a ed       	ldi	r24, 0xDA	; 218
    27aa:	91 e0       	ldi	r25, 0x01	; 1
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	70 e0       	ldi	r23, 0x00	; 0
    27b0:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    27b4:	8f ed       	ldi	r24, 0xDF	; 223
    27b6:	91 e0       	ldi	r25, 0x01	; 1
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	70 e0       	ldi	r23, 0x00	; 0
    27bc:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    27c0:	80 ee       	ldi	r24, 0xE0	; 224
    27c2:	91 e0       	ldi	r25, 0x01	; 1
    27c4:	60 e0       	ldi	r22, 0x00	; 0
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    27cc:	81 ed       	ldi	r24, 0xD1	; 209
    27ce:	91 e0       	ldi	r25, 0x01	; 1
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    27d8:	86 ed       	ldi	r24, 0xD6	; 214
    27da:	91 e0       	ldi	r25, 0x01	; 1
    27dc:	60 e0       	ldi	r22, 0x00	; 0
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    27e4:	82 ed       	ldi	r24, 0xD2	; 210
    27e6:	91 e0       	ldi	r25, 0x01	; 1
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    27f0:	83 ed       	ldi	r24, 0xD3	; 211
    27f2:	91 e0       	ldi	r25, 0x01	; 1
    27f4:	60 e0       	ldi	r22, 0x00	; 0
    27f6:	70 e0       	ldi	r23, 0x00	; 0
    27f8:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    27fc:	84 ed       	ldi	r24, 0xD4	; 212
    27fe:	91 e0       	ldi	r25, 0x01	; 1
    2800:	6f ef       	ldi	r22, 0xFF	; 255
    2802:	7f e3       	ldi	r23, 0x3F	; 63
    2804:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    2808:	85 ed       	ldi	r24, 0xD5	; 213
    280a:	91 e0       	ldi	r25, 0x01	; 1
    280c:	6f ef       	ldi	r22, 0xFF	; 255
    280e:	7f e3       	ldi	r23, 0x3F	; 63
    2810:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    2814:	89 ed       	ldi	r24, 0xD9	; 217
    2816:	91 e0       	ldi	r25, 0x01	; 1
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	70 e0       	ldi	r23, 0x00	; 0
    281c:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2820:	8e ec       	ldi	r24, 0xCE	; 206
    2822:	91 e0       	ldi	r25, 0x01	; 1
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    282c:	8c ec       	ldi	r24, 0xCC	; 204
    282e:	91 e0       	ldi	r25, 0x01	; 1
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2838:	8a ec       	ldi	r24, 0xCA	; 202
    283a:	91 e0       	ldi	r25, 0x01	; 1
    283c:	6f ef       	ldi	r22, 0xFF	; 255
    283e:	7f e3       	ldi	r23, 0x3F	; 63
    2840:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    2844:	88 ec       	ldi	r24, 0xC8	; 200
    2846:	91 e0       	ldi	r25, 0x01	; 1
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    2850:	80 ed       	ldi	r24, 0xD0	; 208
    2852:	91 e0       	ldi	r25, 0x01	; 1
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    285c:	83 ee       	ldi	r24, 0xE3	; 227
    285e:	91 e0       	ldi	r25, 0x01	; 1
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2868:	84 ee       	ldi	r24, 0xE4	; 228
    286a:	91 e0       	ldi	r25, 0x01	; 1
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    2874:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2876:	ed ed       	ldi	r30, 0xDD	; 221
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	80 64       	ori	r24, 0x40	; 64
    287e:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2880:	80 81       	ld	r24, Z
    2882:	8f 7b       	andi	r24, 0xBF	; 191
    2884:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	80 93 7c 03 	sts	0x037C, r24
	PORTF |= (1<<GATE); //turn gate on
    288c:	89 9a       	sbi	0x11, 1	; 17
    288e:	9e 01       	movw	r18, r28
    2890:	2f 5f       	subi	r18, 0xFF	; 255
    2892:	3f 4f       	sbci	r19, 0xFF	; 255
    2894:	3d ab       	sts	0x5d, r19
    2896:	2c ab       	sts	0x5c, r18
    2898:	81 e1       	ldi	r24, 0x11	; 17
    289a:	93 e0       	ldi	r25, 0x03	; 3
    289c:	99 af       	sts	0x79, r25
    289e:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    28a0:	1f aa       	sts	0x9f, r17
    28a2:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    28a4:	0f 2e       	mov	r0, r31
    28a6:	f4 ed       	ldi	r31, 0xD4	; 212
    28a8:	af 2e       	mov	r10, r31
    28aa:	f1 e0       	ldi	r31, 0x01	; 1
    28ac:	bf 2e       	mov	r11, r31
    28ae:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    28b0:	0f 2e       	mov	r0, r31
    28b2:	f8 ed       	ldi	r31, 0xD8	; 216
    28b4:	6f 2e       	mov	r6, r31
    28b6:	f1 e0       	ldi	r31, 0x01	; 1
    28b8:	7f 2e       	mov	r7, r31
    28ba:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    28bc:	0f 2e       	mov	r0, r31
    28be:	f5 ed       	ldi	r31, 0xD5	; 213
    28c0:	4f 2e       	mov	r4, r31
    28c2:	f1 e0       	ldi	r31, 0x01	; 1
    28c4:	5f 2e       	mov	r5, r31
    28c6:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    28c8:	0f 2e       	mov	r0, r31
    28ca:	fa ec       	ldi	r31, 0xCA	; 202
    28cc:	2f 2e       	mov	r2, r31
    28ce:	f1 e0       	ldi	r31, 0x01	; 1
    28d0:	3f 2e       	mov	r3, r31
    28d2:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    28d4:	ac a9       	sts	0x4c, r26
    28d6:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    28d8:	8c 91       	ld	r24, X
    28da:	80 93 7c 03 	sts	0x037C, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    28de:	84 b5       	in	r24, 0x24	; 36
    28e0:	8f 60       	ori	r24, 0x0F	; 15
    28e2:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    28e8:	ee e6       	ldi	r30, 0x6E	; 110
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	82 60       	ori	r24, 0x02	; 2
    28f0:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    28f2:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    28f4:	ee a9       	sts	0x4e, r30
    28f6:	ff a9       	sts	0x4f, r31
    28f8:	e2 30       	cpi	r30, 0x02	; 2
    28fa:	f1 05       	cpc	r31, r1
    28fc:	24 f4       	brge	.+8      	; 0x2906 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    28fe:	83 e0       	ldi	r24, 0x03	; 3
    2900:	80 93 7b 03 	sts	0x037B, r24
    2904:	03 c0       	rjmp	.+6      	; 0x290c <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	80 93 7b 03 	sts	0x037B, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    290c:	11 96       	adiw	r26, 0x01	; 1
    290e:	2d 91       	ld	r18, X+
    2910:	3c 91       	ld	r19, X
    2912:	12 97       	sbiw	r26, 0x02	; 2
    2914:	3b ab       	sts	0x5b, r19
    2916:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2918:	8d e0       	ldi	r24, 0x0D	; 13
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9f a7       	lds	r25, 0x7f
    291e:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2920:	ee 24       	eor	r14, r14
    2922:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2924:	0f 2e       	mov	r0, r31
    2926:	f1 ed       	ldi	r31, 0xD1	; 209
    2928:	cf 2e       	mov	r12, r31
    292a:	f1 e0       	ldi	r31, 0x01	; 1
    292c:	df 2e       	mov	r13, r31
    292e:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2930:	0f 2e       	mov	r0, r31
    2932:	f6 ed       	ldi	r31, 0xD6	; 214
    2934:	8f 2e       	mov	r8, r31
    2936:	f1 e0       	ldi	r31, 0x01	; 1
    2938:	9f 2e       	mov	r9, r31
    293a:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	fc 01       	movw	r30, r24
    2942:	0e a4       	lds	r16, 0xae
    2944:	02 c0       	rjmp	.+4      	; 0x294a <tune_filter+0x218>
    2946:	ee 0f       	add	r30, r30
    2948:	ff 1f       	adc	r31, r31
    294a:	0a 94       	dec	r0
    294c:	e2 f7       	brpl	.-8      	; 0x2946 <tune_filter+0x214>
    294e:	f9 ab       	sts	0x59, r31
    2950:	e8 ab       	sts	0x58, r30
    2952:	ee 2a       	or	r14, r30
    2954:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2956:	c5 01       	movw	r24, r10
    2958:	b7 01       	movw	r22, r14
    295a:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
			count_finished = FALSE;
    295e:	10 92 7a 03 	sts	0x037A, r1
			period_counter = 0;
    2962:	10 92 7d 03 	sts	0x037D, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2966:	8f e0       	ldi	r24, 0x0F	; 15
    2968:	28 e1       	ldi	r18, 0x18	; 24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	a8 95       	wdr
    2972:	20 93 60 00 	sts	0x0060, r18
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    297c:	80 91 7a 03 	lds	r24, 0x037A
    2980:	88 23       	and	r24, r24
    2982:	b1 f5       	brne	.+108    	; 0x29f0 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    2984:	02 ed       	ldi	r16, 0xD2	; 210
    2986:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2988:	80 91 7c 03 	lds	r24, 0x037C
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	84 5d       	subi	r24, 0xD4	; 212
    2990:	9e 4f       	sbci	r25, 0xFE	; 254
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2998:	c5 01       	movw	r24, r10
    299a:	b7 01       	movw	r22, r14
    299c:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    29a0:	c3 01       	movw	r24, r6
    29a2:	60 e0       	ldi	r22, 0x00	; 0
    29a4:	70 e0       	ldi	r23, 0x00	; 0
    29a6:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    29aa:	c2 01       	movw	r24, r4
    29ac:	6f ef       	ldi	r22, 0xFF	; 255
    29ae:	7f e3       	ldi	r23, 0x3F	; 63
    29b0:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    29b4:	c1 01       	movw	r24, r2
    29b6:	6f ef       	ldi	r22, 0xFF	; 255
    29b8:	7f e3       	ldi	r23, 0x3F	; 63
    29ba:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    29be:	8e ec       	ldi	r24, 0xCE	; 206
    29c0:	91 e0       	ldi	r25, 0x01	; 1
    29c2:	60 e0       	ldi	r22, 0x00	; 0
    29c4:	70 e0       	ldi	r23, 0x00	; 0
    29c6:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    29ca:	c6 01       	movw	r24, r12
    29cc:	60 e0       	ldi	r22, 0x00	; 0
    29ce:	70 e0       	ldi	r23, 0x00	; 0
    29d0:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    29d4:	c4 01       	movw	r24, r8
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    29de:	c8 01       	movw	r24, r16
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	0e 94 b6 01 	call	0x36c	; 0x36c <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    29e8:	80 91 7a 03 	lds	r24, 0x037A
    29ec:	88 23       	and	r24, r24
    29ee:	61 f2       	breq	.-104    	; 0x2988 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    29f0:	88 e1       	ldi	r24, 0x18	; 24
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	80 93 60 00 	sts	0x0060, r24
    29fa:	10 92 60 00 	sts	0x0060, r1
    29fe:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    2a00:	80 91 78 03 	lds	r24, 0x0378
    2a04:	90 91 79 03 	lds	r25, 0x0379
    2a08:	2a a9       	sts	0x4a, r18
    2a0a:	3b a9       	sts	0x4b, r19
    2a0c:	28 17       	cp	r18, r24
    2a0e:	39 07       	cpc	r19, r25
    2a10:	50 f0       	brcs	.+20     	; 0x2a26 <tune_filter+0x2f4>
    2a12:	80 91 af 02 	lds	r24, 0x02AF
    2a16:	81 30       	cpi	r24, 0x01	; 1
    2a18:	31 f4       	brne	.+12     	; 0x2a26 <tune_filter+0x2f4>
    2a1a:	88 a9       	sts	0x48, r24
    2a1c:	99 a9       	sts	0x49, r25
    2a1e:	80 95       	com	r24
    2a20:	90 95       	com	r25
    2a22:	e8 22       	and	r14, r24
    2a24:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2a26:	80 91 78 03 	lds	r24, 0x0378
    2a2a:	90 91 79 03 	lds	r25, 0x0379
    2a2e:	ea a9       	sts	0x4a, r30
    2a30:	fb a9       	sts	0x4b, r31
    2a32:	8e 17       	cp	r24, r30
    2a34:	9f 07       	cpc	r25, r31
    2a36:	21 f4       	brne	.+8      	; 0x2a40 <tune_filter+0x30e>
    2a38:	80 91 af 02 	lds	r24, 0x02AF
    2a3c:	81 30       	cpi	r24, 0x01	; 1
    2a3e:	71 f0       	breq	.+28     	; 0x2a5c <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2a46:	2e a5       	lds	r18, 0x6e
    2a48:	3f a5       	lds	r19, 0x6f
    2a4a:	21 50       	subi	r18, 0x01	; 1
    2a4c:	30 40       	sbci	r19, 0x00	; 0
    2a4e:	3f a7       	lds	r19, 0x7f
    2a50:	2e a7       	lds	r18, 0x7e
    2a52:	8f ef       	ldi	r24, 0xFF	; 255
    2a54:	2f 3f       	cpi	r18, 0xFF	; 255
    2a56:	38 07       	cpc	r19, r24
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <tune_filter+0x32a>
    2a5a:	70 cf       	rjmp	.-288    	; 0x293c <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2a5c:	ee a9       	sts	0x4e, r30
    2a5e:	ff a9       	sts	0x4f, r31
    2a60:	31 96       	adiw	r30, 0x01	; 1
    2a62:	ff ab       	sts	0x5f, r31
    2a64:	ee ab       	sts	0x5e, r30
    2a66:	c7 01       	movw	r24, r14
    2a68:	80 96       	adiw	r24, 0x20	; 32
    2a6a:	e8 ad       	sts	0x68, r30
    2a6c:	f9 ad       	sts	0x69, r31
    2a6e:	81 93       	st	Z+, r24
    2a70:	91 93       	st	Z+, r25
    2a72:	f9 af       	sts	0x79, r31
    2a74:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2a76:	ee e6       	ldi	r30, 0x6E	; 110
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	8d 7f       	andi	r24, 0xFD	; 253
    2a7e:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2a80:	14 bc       	out	0x24, r1	; 36
    2a82:	2c a9       	sts	0x4c, r18
    2a84:	3d a9       	sts	0x4d, r19
    2a86:	2d 5f       	subi	r18, 0xFD	; 253
    2a88:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8a:	3d ab       	sts	0x5d, r19
    2a8c:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2a8e:	8e a9       	sts	0x4e, r24
    2a90:	9f a9       	sts	0x4f, r25
    2a92:	8f 30       	cpi	r24, 0x0F	; 15
    2a94:	91 05       	cpc	r25, r1
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <tune_filter+0x368>
    2a98:	1d cf       	rjmp	.-454    	; 0x28d4 <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2a9a:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2a9c:	e9 96       	adiw	r28, 0x39	; 57
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	1f 91       	pop	r17
    2aae:	0f 91       	pop	r16
    2ab0:	ff 90       	pop	r15
    2ab2:	ef 90       	pop	r14
    2ab4:	df 90       	pop	r13
    2ab6:	cf 90       	pop	r12
    2ab8:	bf 90       	pop	r11
    2aba:	af 90       	pop	r10
    2abc:	9f 90       	pop	r9
    2abe:	8f 90       	pop	r8
    2ac0:	7f 90       	pop	r7
    2ac2:	6f 90       	pop	r6
    2ac4:	5f 90       	pop	r5
    2ac6:	4f 90       	pop	r4
    2ac8:	3f 90       	pop	r3
    2aca:	2f 90       	pop	r2
    2acc:	08 95       	ret

00002ace <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2ace:	8f e0       	ldi	r24, 0x0F	; 15
    2ad0:	93 e0       	ldi	r25, 0x03	; 3
    2ad2:	6c e0       	ldi	r22, 0x0C	; 12
    2ad4:	76 e0       	ldi	r23, 0x06	; 6
    2ad6:	40 e2       	ldi	r20, 0x20	; 32
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2ade:	81 e5       	ldi	r24, 0x51	; 81
    2ae0:	93 e0       	ldi	r25, 0x03	; 3
    2ae2:	6e e4       	ldi	r22, 0x4E	; 78
    2ae4:	76 e0       	ldi	r23, 0x06	; 6
    2ae6:	42 e2       	ldi	r20, 0x22	; 34
    2ae8:	50 e0       	ldi	r21, 0x00	; 0
    2aea:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2aee:	8f e2       	ldi	r24, 0x2F	; 47
    2af0:	93 e0       	ldi	r25, 0x03	; 3
    2af2:	6c e2       	ldi	r22, 0x2C	; 44
    2af4:	76 e0       	ldi	r23, 0x06	; 6
    2af6:	42 e2       	ldi	r20, 0x22	; 34
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__eeupd_block_m6450a>
	
	
}
    2afe:	08 95       	ret

00002b00 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2b00:	82 e7       	ldi	r24, 0x72	; 114
    2b02:	96 e0       	ldi	r25, 0x06	; 6
    2b04:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__eerd_word_m6450a>
    2b08:	90 93 76 03 	sts	0x0376, r25
    2b0c:	80 93 75 03 	sts	0x0375, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2b10:	80 e7       	ldi	r24, 0x70	; 112
    2b12:	96 e0       	ldi	r25, 0x06	; 6
    2b14:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__eerd_word_m6450a>
    2b18:	90 93 74 03 	sts	0x0374, r25
    2b1c:	80 93 73 03 	sts	0x0373, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2b20:	81 e5       	ldi	r24, 0x51	; 81
    2b22:	93 e0       	ldi	r25, 0x03	; 3
    2b24:	6e e4       	ldi	r22, 0x4E	; 78
    2b26:	76 e0       	ldi	r23, 0x06	; 6
    2b28:	42 e2       	ldi	r20, 0x22	; 34
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2b30:	8f e2       	ldi	r24, 0x2F	; 47
    2b32:	93 e0       	ldi	r25, 0x03	; 3
    2b34:	6c e2       	ldi	r22, 0x2C	; 44
    2b36:	76 e0       	ldi	r23, 0x06	; 6
    2b38:	42 e2       	ldi	r20, 0x22	; 34
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2b40:	8f e0       	ldi	r24, 0x0F	; 15
    2b42:	93 e0       	ldi	r25, 0x03	; 3
    2b44:	6c e0       	ldi	r22, 0x0C	; 12
    2b46:	76 e0       	ldi	r23, 0x06	; 6
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2b50:	08 95       	ret

00002b52 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2b52:	98 2f       	mov	r25, r24
    2b54:	96 95       	lsr	r25
    2b56:	96 95       	lsr	r25
    2b58:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2b5a:	29 2f       	mov	r18, r25
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	f9 01       	movw	r30, r18
    2b60:	31 97       	sbiw	r30, 0x01	; 1
    2b62:	ee 0f       	add	r30, r30
    2b64:	ff 1f       	adc	r31, r31
    2b66:	e6 0f       	add	r30, r22
    2b68:	f7 1f       	adc	r31, r23
    2b6a:	01 90       	ld	r0, Z+
    2b6c:	f0 81       	ld	r31, Z
    2b6e:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2b70:	22 0f       	add	r18, r18
    2b72:	33 1f       	adc	r19, r19
    2b74:	26 0f       	add	r18, r22
    2b76:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2b78:	d9 01       	movw	r26, r18
    2b7a:	4d 91       	ld	r20, X+
    2b7c:	5c 91       	ld	r21, X
    2b7e:	11 97       	sbiw	r26, 0x01	; 1
    2b80:	4e 1b       	sub	r20, r30
    2b82:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2b84:	99 0f       	add	r25, r25
    2b86:	99 0f       	add	r25, r25
    2b88:	99 0f       	add	r25, r25
    2b8a:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	48 9f       	mul	r20, r24
    2b90:	90 01       	movw	r18, r0
    2b92:	49 9f       	mul	r20, r25
    2b94:	30 0d       	add	r19, r0
    2b96:	58 9f       	mul	r21, r24
    2b98:	30 0d       	add	r19, r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	36 95       	lsr	r19
    2b9e:	27 95       	ror	r18
    2ba0:	36 95       	lsr	r19
    2ba2:	27 95       	ror	r18
    2ba4:	36 95       	lsr	r19
    2ba6:	27 95       	ror	r18
    2ba8:	e2 0f       	add	r30, r18
    2baa:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2bac:	8e 2f       	mov	r24, r30
    2bae:	9f 2f       	mov	r25, r31
    2bb0:	08 95       	ret

00002bb2 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
    2bba:	a2 97       	sbiw	r28, 0x22	; 34
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2bc6:	de 01       	movw	r26, r28
    2bc8:	11 96       	adiw	r26, 0x01	; 1
    2bca:	ed e8       	ldi	r30, 0x8D	; 141
    2bcc:	f2 e0       	ldi	r31, 0x02	; 2
    2bce:	82 e2       	ldi	r24, 0x22	; 34
    2bd0:	01 90       	ld	r0, Z+
    2bd2:	0d 92       	st	X+, r0
    2bd4:	81 50       	subi	r24, 0x01	; 1
    2bd6:	e1 f7       	brne	.-8      	; 0x2bd0 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2bd8:	a1 e5       	ldi	r26, 0x51	; 81
    2bda:	b3 e0       	ldi	r27, 0x03	; 3
    2bdc:	fe 01       	movw	r30, r28
    2bde:	31 96       	adiw	r30, 0x01	; 1
    2be0:	82 e2       	ldi	r24, 0x22	; 34
    2be2:	01 90       	ld	r0, Z+
    2be4:	0d 92       	st	X+, r0
    2be6:	81 50       	subi	r24, 0x01	; 1
    2be8:	e1 f7       	brne	.-8      	; 0x2be2 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2bea:	af e2       	ldi	r26, 0x2F	; 47
    2bec:	b3 e0       	ldi	r27, 0x03	; 3
    2bee:	fe 01       	movw	r30, r28
    2bf0:	31 96       	adiw	r30, 0x01	; 1
    2bf2:	82 e2       	ldi	r24, 0x22	; 34
    2bf4:	01 90       	ld	r0, Z+
    2bf6:	0d 92       	st	X+, r0
    2bf8:	81 50       	subi	r24, 0x01	; 1
    2bfa:	e1 f7       	brne	.-8      	; 0x2bf4 <set_one_volt_per_octave+0x42>
	
	
}
    2bfc:	a2 96       	adiw	r28, 0x22	; 34
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	df 91       	pop	r29
    2c0a:	cf 91       	pop	r28
    2c0c:	08 95       	ret

00002c0e <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2c0e:	ef e6       	ldi	r30, 0x6F	; 111
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	82 70       	andi	r24, 0x02	; 2
    2c16:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2c18:	e1 e8       	ldi	r30, 0x81	; 129
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	87 7f       	andi	r24, 0xF7	; 247
    2c20:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2c22:	8f e0       	ldi	r24, 0x0F	; 15
    2c24:	6f e0       	ldi	r22, 0x0F	; 15
    2c26:	7e e5       	ldi	r23, 0x5E	; 94
    2c28:	0e 94 93 10 	call	0x2126	; 0x2126 <set_vco_init_cv>
    2c2c:	90 93 76 03 	sts	0x0376, r25
    2c30:	80 93 75 03 	sts	0x0375, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2c34:	80 ef       	ldi	r24, 0xF0	; 240
    2c36:	6f e0       	ldi	r22, 0x0F	; 15
    2c38:	7e e5       	ldi	r23, 0x5E	; 94
    2c3a:	0e 94 93 10 	call	0x2126	; 0x2126 <set_vco_init_cv>
    2c3e:	90 93 74 03 	sts	0x0374, r25
    2c42:	80 93 73 03 	sts	0x0373, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2c46:	8f e0       	ldi	r24, 0x0F	; 15
    2c48:	0e 94 f7 11 	call	0x23ee	; 0x23ee <tune_8ths>
			tune_8ths(VCO2);
    2c4c:	80 ef       	ldi	r24, 0xF0	; 240
    2c4e:	0e 94 f7 11 	call	0x23ee	; 0x23ee <tune_8ths>
			tune_filter();
    2c52:	0e 94 99 13 	call	0x2732	; 0x2732 <tune_filter>
			save_tuning_tables();
    2c56:	0e 94 67 15 	call	0x2ace	; 0x2ace <save_tuning_tables>
    2c5a:	8f e4       	ldi	r24, 0x4F	; 79
    2c5c:	93 ec       	ldi	r25, 0xC3	; 195
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	f1 f7       	brne	.-4      	; 0x2c5e <tune+0x50>
    2c62:	00 c0       	rjmp	.+0      	; 0x2c64 <tune+0x56>
    2c64:	00 00       	nop
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2c66:	08 95       	ret

00002c68 <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2c68:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2c6a:	98 2f       	mov	r25, r24
    2c6c:	9c 70       	andi	r25, 0x0C	; 12
    2c6e:	20 91 c1 02 	lds	r18, 0x02C1
    2c72:	92 2b       	or	r25, r18
    2c74:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2c78:	98 2f       	mov	r25, r24
    2c7a:	92 95       	swap	r25
    2c7c:	96 95       	lsr	r25
    2c7e:	97 70       	andi	r25, 0x07	; 7
    2c80:	90 ff       	sbrs	r25, 0
    2c82:	16 c0       	rjmp	.+44     	; 0x2cb0 <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2c84:	20 91 81 03 	lds	r18, 0x0381
    2c88:	30 91 82 03 	lds	r19, 0x0382
    2c8c:	2f 5f       	subi	r18, 0xFF	; 255
    2c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c90:	30 93 82 03 	sts	0x0382, r19
    2c94:	20 93 81 03 	sts	0x0381, r18
    2c98:	92 e0       	ldi	r25, 0x02	; 2
    2c9a:	28 35       	cpi	r18, 0x58	; 88
    2c9c:	39 07       	cpc	r19, r25
    2c9e:	61 f4       	brne	.+24     	; 0x2cb8 <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2ca0:	10 92 82 03 	sts	0x0382, r1
    2ca4:	10 92 81 03 	sts	0x0381, r1
			current_patch.mode = CAL;
    2ca8:	95 e0       	ldi	r25, 0x05	; 5
    2caa:	90 93 07 03 	sts	0x0307, r25
    2cae:	04 c0       	rjmp	.+8      	; 0x2cb8 <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2cb0:	10 92 82 03 	sts	0x0382, r1
    2cb4:	10 92 81 03 	sts	0x0381, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2cb8:	90 91 83 03 	lds	r25, 0x0383
    2cbc:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2cbe:	98 27       	eor	r25, r24
    2cc0:	90 93 83 03 	sts	0x0383, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2cc4:	89 23       	and	r24, r25
    2cc6:	08 95       	ret

00002cc8 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2cc8:	ed ed       	ldi	r30, 0xDD	; 221
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	90 81       	ld	r25, Z
    2cce:	9f 7b       	andi	r25, 0xBF	; 191
    2cd0:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	21 70       	andi	r18, 0x01	; 1
    2cd8:	30 70       	andi	r19, 0x00	; 0
    2cda:	22 0f       	add	r18, r18
    2cdc:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2cde:	68 2f       	mov	r22, r24
    2ce0:	62 95       	swap	r22
    2ce2:	66 95       	lsr	r22
    2ce4:	67 70       	andi	r22, 0x07	; 7
    2ce6:	67 95       	ror	r22
    2ce8:	66 27       	eor	r22, r22
    2cea:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cec:	26 2b       	or	r18, r22
    2cee:	98 2f       	mov	r25, r24
    2cf0:	96 95       	lsr	r25
    2cf2:	96 95       	lsr	r25
    2cf4:	91 70       	andi	r25, 0x01	; 1
    2cf6:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2cf8:	68 2f       	mov	r22, r24
    2cfa:	66 1f       	adc	r22, r22
    2cfc:	66 27       	eor	r22, r22
    2cfe:	66 1f       	adc	r22, r22
    2d00:	66 0f       	add	r22, r22
    2d02:	66 0f       	add	r22, r22
    2d04:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d06:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2d08:	a8 2f       	mov	r26, r24
    2d0a:	a6 95       	lsr	r26
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	a1 70       	andi	r26, 0x01	; 1
    2d10:	b0 70       	andi	r27, 0x00	; 0
    2d12:	bd 01       	movw	r22, r26
    2d14:	66 0f       	add	r22, r22
    2d16:	77 1f       	adc	r23, r23
    2d18:	66 0f       	add	r22, r22
    2d1a:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d1c:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2d1e:	68 2f       	mov	r22, r24
    2d20:	62 95       	swap	r22
    2d22:	6f 70       	andi	r22, 0x0F	; 15
    2d24:	70 e0       	ldi	r23, 0x00	; 0
    2d26:	61 70       	andi	r22, 0x01	; 1
    2d28:	70 70       	andi	r23, 0x00	; 0
    2d2a:	ab 01       	movw	r20, r22
    2d2c:	00 24       	eor	r0, r0
    2d2e:	56 95       	lsr	r21
    2d30:	47 95       	ror	r20
    2d32:	07 94       	ror	r0
    2d34:	56 95       	lsr	r21
    2d36:	47 95       	ror	r20
    2d38:	07 94       	ror	r0
    2d3a:	54 2f       	mov	r21, r20
    2d3c:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d3e:	62 2f       	mov	r22, r18
    2d40:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2d42:	48 2f       	mov	r20, r24
    2d44:	42 95       	swap	r20
    2d46:	46 95       	lsr	r20
    2d48:	46 95       	lsr	r20
    2d4a:	43 70       	andi	r20, 0x03	; 3
    2d4c:	50 e0       	ldi	r21, 0x00	; 0
    2d4e:	41 70       	andi	r20, 0x01	; 1
    2d50:	50 70       	andi	r21, 0x00	; 0
    2d52:	9a 01       	movw	r18, r20
    2d54:	22 0f       	add	r18, r18
    2d56:	33 1f       	adc	r19, r19
    2d58:	22 95       	swap	r18
    2d5a:	32 95       	swap	r19
    2d5c:	30 7f       	andi	r19, 0xF0	; 240
    2d5e:	32 27       	eor	r19, r18
    2d60:	20 7f       	andi	r18, 0xF0	; 240
    2d62:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d64:	46 2f       	mov	r20, r22
    2d66:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2d68:	86 95       	lsr	r24
    2d6a:	86 95       	lsr	r24
    2d6c:	86 95       	lsr	r24
    2d6e:	28 2f       	mov	r18, r24
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	21 70       	andi	r18, 0x01	; 1
    2d74:	30 70       	andi	r19, 0x00	; 0
    2d76:	c9 01       	movw	r24, r18
    2d78:	82 95       	swap	r24
    2d7a:	92 95       	swap	r25
    2d7c:	90 7f       	andi	r25, 0xF0	; 240
    2d7e:	98 27       	eor	r25, r24
    2d80:	80 7f       	andi	r24, 0xF0	; 240
    2d82:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d84:	84 2b       	or	r24, r20
    2d86:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2d88:	80 81       	ld	r24, Z
    2d8a:	80 64       	ori	r24, 0x40	; 64
    2d8c:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2d8e:	80 81       	ld	r24, Z
    2d90:	8f 7b       	andi	r24, 0xBF	; 191
    2d92:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2d94:	12 b8       	out	0x02, r1	; 2
	
	
    2d96:	08 95       	ret

00002d98 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2d98:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2d9a:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2d9c:	74 83       	std	Z+4, r23	; 0x04
    2d9e:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2da0:	11 82       	std	Z+1, r1	; 0x01
    2da2:	10 82       	st	Z, r1
}
    2da4:	08 95       	ret

00002da6 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2da6:	1f 93       	push	r17
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	ec 01       	movw	r28, r24
    2dae:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2db0:	0e 94 42 17 	call	0x2e84	; 0x2e84 <store_and_clear_interrupt>
    2db4:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2db6:	39 81       	ldd	r19, Y+1	; 0x01
    2db8:	83 2f       	mov	r24, r19
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	01 96       	adiw	r24, 0x01	; 1
    2dbe:	6a 81       	ldd	r22, Y+2	; 0x02
    2dc0:	70 e0       	ldi	r23, 0x00	; 0
    2dc2:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__divmodhi4>
    2dc6:	48 81       	ld	r20, Y
    2dc8:	50 e0       	ldi	r21, 0x00	; 0
    2dca:	84 17       	cp	r24, r20
    2dcc:	95 07       	cpc	r25, r21
    2dce:	29 f4       	brne	.+10     	; 0x2dda <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2dd0:	82 2f       	mov	r24, r18
    2dd2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <restore_interrupt_setting>
      return false;
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	11 c0       	rjmp	.+34     	; 0x2dfc <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2dda:	eb 81       	ldd	r30, Y+3	; 0x03
    2ddc:	fc 81       	ldd	r31, Y+4	; 0x04
    2dde:	e3 0f       	add	r30, r19
    2de0:	f1 1d       	adc	r31, r1
    2de2:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	01 96       	adiw	r24, 0x01	; 1
    2dea:	6a 81       	ldd	r22, Y+2	; 0x02
    2dec:	70 e0       	ldi	r23, 0x00	; 0
    2dee:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__divmodhi4>
    2df2:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2df4:	82 2f       	mov	r24, r18
    2df6:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <restore_interrupt_setting>
      return true;
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	1f 91       	pop	r17
    2e02:	08 95       	ret

00002e04 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2e0a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2e0e:	29 81       	ldd	r18, Y+1	; 0x01
    2e10:	98 81       	ld	r25, Y
    2e12:	29 17       	cp	r18, r25
    2e14:	18 f0       	brcs	.+6      	; 0x2e1c <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2e16:	c2 2f       	mov	r28, r18
    2e18:	c9 1b       	sub	r28, r25
    2e1a:	03 c0       	rjmp	.+6      	; 0x2e22 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2e1c:	ca 81       	ldd	r28, Y+2	; 0x02
    2e1e:	c2 0f       	add	r28, r18
    2e20:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2e22:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <restore_interrupt_setting>
   return len;
}
    2e26:	8c 2f       	mov	r24, r28
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	08 95       	ret

00002e2e <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2e2e:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2e30:	20 81       	ld	r18, Z
    2e32:	86 2f       	mov	r24, r22
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	82 0f       	add	r24, r18
    2e38:	91 1d       	adc	r25, r1
    2e3a:	62 81       	ldd	r22, Z+2	; 0x02
    2e3c:	70 e0       	ldi	r23, 0x00	; 0
    2e3e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__divmodhi4>
    2e42:	03 80       	ldd	r0, Z+3	; 0x03
    2e44:	f4 81       	ldd	r31, Z+4	; 0x04
    2e46:	e0 2d       	mov	r30, r0
    2e48:	e8 0f       	add	r30, r24
    2e4a:	f9 1f       	adc	r31, r25
}
    2e4c:	80 81       	ld	r24, Z
    2e4e:	08 95       	ret

00002e50 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2e50:	1f 93       	push	r17
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
    2e56:	ec 01       	movw	r28, r24
    2e58:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2e5a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <store_and_clear_interrupt>
    2e5e:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2e60:	88 81       	ld	r24, Y
    2e62:	21 2f       	mov	r18, r17
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	28 0f       	add	r18, r24
    2e68:	31 1d       	adc	r19, r1
    2e6a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e6c:	c9 01       	movw	r24, r18
    2e6e:	70 e0       	ldi	r23, 0x00	; 0
    2e70:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__divmodhi4>
    2e74:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2e76:	84 2f       	mov	r24, r20
    2e78:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <restore_interrupt_setting>
}
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	1f 91       	pop	r17
    2e82:	08 95       	ret

00002e84 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2e84:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2e86:	f8 94       	cli
   return sreg;
}
    2e88:	08 95       	ret

00002e8a <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2e8a:	8f bf       	out	0x3f, r24	; 63
}
    2e8c:	08 95       	ret

00002e8e <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2e8e:	88 1f       	adc	r24, r24
    2e90:	88 27       	eor	r24, r24
    2e92:	88 1f       	adc	r24, r24
    2e94:	08 95       	ret

00002e96 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2e96:	91 e0       	ldi	r25, 0x01	; 1
    2e98:	88 3f       	cpi	r24, 0xF8	; 248
    2e9a:	08 f4       	brcc	.+2      	; 0x2e9e <midi_is_realtime+0x8>
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
}
    2e9e:	89 2f       	mov	r24, r25
    2ea0:	08 95       	ret

00002ea2 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2ea2:	28 2f       	mov	r18, r24
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	20 7f       	andi	r18, 0xF0	; 240
    2ea8:	30 70       	andi	r19, 0x00	; 0
    2eaa:	20 3c       	cpi	r18, 0xC0	; 192
    2eac:	31 05       	cpc	r19, r1
    2eae:	e9 f1       	breq	.+122    	; 0x2f2a <midi_packet_length+0x88>
    2eb0:	21 3c       	cpi	r18, 0xC1	; 193
    2eb2:	31 05       	cpc	r19, r1
    2eb4:	8c f4       	brge	.+34     	; 0x2ed8 <midi_packet_length+0x36>
    2eb6:	20 39       	cpi	r18, 0x90	; 144
    2eb8:	31 05       	cpc	r19, r1
    2eba:	e1 f0       	breq	.+56     	; 0x2ef4 <midi_packet_length+0x52>
    2ebc:	21 39       	cpi	r18, 0x91	; 145
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	24 f4       	brge	.+8      	; 0x2eca <midi_packet_length+0x28>
    2ec2:	20 38       	cpi	r18, 0x80	; 128
    2ec4:	31 05       	cpc	r19, r1
    2ec6:	79 f5       	brne	.+94     	; 0x2f26 <midi_packet_length+0x84>
    2ec8:	15 c0       	rjmp	.+42     	; 0x2ef4 <midi_packet_length+0x52>
    2eca:	20 3a       	cpi	r18, 0xA0	; 160
    2ecc:	31 05       	cpc	r19, r1
    2ece:	91 f0       	breq	.+36     	; 0x2ef4 <midi_packet_length+0x52>
    2ed0:	20 3b       	cpi	r18, 0xB0	; 176
    2ed2:	31 05       	cpc	r19, r1
    2ed4:	41 f5       	brne	.+80     	; 0x2f26 <midi_packet_length+0x84>
    2ed6:	0e c0       	rjmp	.+28     	; 0x2ef4 <midi_packet_length+0x52>
    2ed8:	20 3e       	cpi	r18, 0xE0	; 224
    2eda:	31 05       	cpc	r19, r1
    2edc:	59 f0       	breq	.+22     	; 0x2ef4 <midi_packet_length+0x52>
    2ede:	21 3e       	cpi	r18, 0xE1	; 225
    2ee0:	31 05       	cpc	r19, r1
    2ee2:	24 f4       	brge	.+8      	; 0x2eec <midi_packet_length+0x4a>
    2ee4:	20 3d       	cpi	r18, 0xD0	; 208
    2ee6:	31 05       	cpc	r19, r1
    2ee8:	f1 f4       	brne	.+60     	; 0x2f26 <midi_packet_length+0x84>
    2eea:	1f c0       	rjmp	.+62     	; 0x2f2a <midi_packet_length+0x88>
    2eec:	20 3f       	cpi	r18, 0xF0	; 240
    2eee:	31 05       	cpc	r19, r1
    2ef0:	d1 f4       	brne	.+52     	; 0x2f26 <midi_packet_length+0x84>
    2ef2:	02 c0       	rjmp	.+4      	; 0x2ef8 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
    2ef6:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2ef8:	86 3f       	cpi	r24, 0xF6	; 246
    2efa:	79 f0       	breq	.+30     	; 0x2f1a <midi_packet_length+0x78>
    2efc:	87 3f       	cpi	r24, 0xF7	; 247
    2efe:	38 f4       	brcc	.+14     	; 0x2f0e <midi_packet_length+0x6c>
    2f00:	82 3f       	cpi	r24, 0xF2	; 242
    2f02:	a9 f0       	breq	.+42     	; 0x2f2e <midi_packet_length+0x8c>
    2f04:	83 3f       	cpi	r24, 0xF3	; 243
    2f06:	59 f0       	breq	.+22     	; 0x2f1e <midi_packet_length+0x7c>
    2f08:	81 3f       	cpi	r24, 0xF1	; 241
    2f0a:	59 f4       	brne	.+22     	; 0x2f22 <midi_packet_length+0x80>
    2f0c:	08 c0       	rjmp	.+16     	; 0x2f1e <midi_packet_length+0x7c>
    2f0e:	88 3f       	cpi	r24, 0xF8	; 248
    2f10:	40 f0       	brcs	.+16     	; 0x2f22 <midi_packet_length+0x80>
    2f12:	8d 3f       	cpi	r24, 0xFD	; 253
    2f14:	10 f0       	brcs	.+4      	; 0x2f1a <midi_packet_length+0x78>
    2f16:	8e 3f       	cpi	r24, 0xFE	; 254
    2f18:	20 f0       	brcs	.+8      	; 0x2f22 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2f1e:	82 e0       	ldi	r24, 0x02	; 2
    2f20:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2f2a:	82 e0       	ldi	r24, 0x02	; 2
    2f2c:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2f2e:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2f30:	08 95       	ret

00002f32 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2f32:	0f 93       	push	r16
    2f34:	34 2f       	mov	r19, r20
    2f36:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2f38:	46 2f       	mov	r20, r22
    2f3a:	4f 70       	andi	r20, 0x0F	; 15
    2f3c:	40 6b       	ori	r20, 0xB0	; 176
    2f3e:	23 2f       	mov	r18, r19
    2f40:	2f 77       	andi	r18, 0x7F	; 127
    2f42:	0f 77       	andi	r16, 0x7F	; 127
    2f44:	dc 01       	movw	r26, r24
    2f46:	ed 91       	ld	r30, X+
    2f48:	fc 91       	ld	r31, X
    2f4a:	63 e0       	ldi	r22, 0x03	; 3
    2f4c:	70 e0       	ldi	r23, 0x00	; 0
    2f4e:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2f50:	0f 91       	pop	r16
    2f52:	08 95       	ret

00002f54 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2f54:	0f 93       	push	r16
    2f56:	34 2f       	mov	r19, r20
    2f58:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2f5a:	46 2f       	mov	r20, r22
    2f5c:	4f 70       	andi	r20, 0x0F	; 15
    2f5e:	40 69       	ori	r20, 0x90	; 144
    2f60:	23 2f       	mov	r18, r19
    2f62:	2f 77       	andi	r18, 0x7F	; 127
    2f64:	0f 77       	andi	r16, 0x7F	; 127
    2f66:	dc 01       	movw	r26, r24
    2f68:	ed 91       	ld	r30, X+
    2f6a:	fc 91       	ld	r31, X
    2f6c:	63 e0       	ldi	r22, 0x03	; 3
    2f6e:	70 e0       	ldi	r23, 0x00	; 0
    2f70:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2f72:	0f 91       	pop	r16
    2f74:	08 95       	ret

00002f76 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2f76:	0f 93       	push	r16
    2f78:	34 2f       	mov	r19, r20
    2f7a:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2f7c:	46 2f       	mov	r20, r22
    2f7e:	4f 70       	andi	r20, 0x0F	; 15
    2f80:	40 68       	ori	r20, 0x80	; 128
    2f82:	23 2f       	mov	r18, r19
    2f84:	2f 77       	andi	r18, 0x7F	; 127
    2f86:	0f 77       	andi	r16, 0x7F	; 127
    2f88:	dc 01       	movw	r26, r24
    2f8a:	ed 91       	ld	r30, X+
    2f8c:	fc 91       	ld	r31, X
    2f8e:	63 e0       	ldi	r22, 0x03	; 3
    2f90:	70 e0       	ldi	r23, 0x00	; 0
    2f92:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2f94:	0f 91       	pop	r16
    2f96:	08 95       	ret

00002f98 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2f98:	0f 93       	push	r16
    2f9a:	34 2f       	mov	r19, r20
    2f9c:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2f9e:	46 2f       	mov	r20, r22
    2fa0:	4f 70       	andi	r20, 0x0F	; 15
    2fa2:	40 6a       	ori	r20, 0xA0	; 160
    2fa4:	23 2f       	mov	r18, r19
    2fa6:	2f 77       	andi	r18, 0x7F	; 127
    2fa8:	0f 77       	andi	r16, 0x7F	; 127
    2faa:	dc 01       	movw	r26, r24
    2fac:	ed 91       	ld	r30, X+
    2fae:	fc 91       	ld	r31, X
    2fb0:	63 e0       	ldi	r22, 0x03	; 3
    2fb2:	70 e0       	ldi	r23, 0x00	; 0
    2fb4:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2fb6:	0f 91       	pop	r16
    2fb8:	08 95       	ret

00002fba <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2fba:	0f 93       	push	r16
    2fbc:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2fbe:	20 e2       	ldi	r18, 0x20	; 32
    2fc0:	40 30       	cpi	r20, 0x00	; 0
    2fc2:	52 07       	cpc	r21, r18
    2fc4:	44 f4       	brge	.+16     	; 0x2fd6 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2fc6:	a0 ee       	ldi	r26, 0xE0	; 224
    2fc8:	40 30       	cpi	r20, 0x00	; 0
    2fca:	5a 07       	cpc	r21, r26
    2fcc:	3c f0       	brlt	.+14     	; 0x2fdc <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2fce:	8a 01       	movw	r16, r20
    2fd0:	00 50       	subi	r16, 0x00	; 0
    2fd2:	10 4e       	sbci	r17, 0xE0	; 224
    2fd4:	05 c0       	rjmp	.+10     	; 0x2fe0 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2fd6:	0f ef       	ldi	r16, 0xFF	; 255
    2fd8:	1f e3       	ldi	r17, 0x3F	; 63
    2fda:	02 c0       	rjmp	.+4      	; 0x2fe0 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2fdc:	00 e0       	ldi	r16, 0x00	; 0
    2fde:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2fe0:	46 2f       	mov	r20, r22
    2fe2:	4f 70       	andi	r20, 0x0F	; 15
    2fe4:	40 6e       	ori	r20, 0xE0	; 224
    2fe6:	20 2f       	mov	r18, r16
    2fe8:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2fea:	00 0f       	add	r16, r16
    2fec:	01 2f       	mov	r16, r17
    2fee:	00 1f       	adc	r16, r16
    2ff0:	11 0b       	sbc	r17, r17
    2ff2:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2ff4:	0f 77       	andi	r16, 0x7F	; 127
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	ed 91       	ld	r30, X+
    2ffa:	fc 91       	ld	r31, X
    2ffc:	63 e0       	ldi	r22, 0x03	; 3
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	08 95       	ret

00003008 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    3008:	0f 93       	push	r16
    300a:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    300c:	46 2f       	mov	r20, r22
    300e:	4f 70       	andi	r20, 0x0F	; 15
    3010:	40 6c       	ori	r20, 0xC0	; 192
    3012:	2f 77       	andi	r18, 0x7F	; 127
    3014:	dc 01       	movw	r26, r24
    3016:	ed 91       	ld	r30, X+
    3018:	fc 91       	ld	r31, X
    301a:	62 e0       	ldi	r22, 0x02	; 2
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	00 e0       	ldi	r16, 0x00	; 0
    3020:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    3022:	0f 91       	pop	r16
    3024:	08 95       	ret

00003026 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    3026:	0f 93       	push	r16
    3028:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    302a:	46 2f       	mov	r20, r22
    302c:	4f 70       	andi	r20, 0x0F	; 15
    302e:	40 6d       	ori	r20, 0xD0	; 208
    3030:	2f 77       	andi	r18, 0x7F	; 127
    3032:	dc 01       	movw	r26, r24
    3034:	ed 91       	ld	r30, X+
    3036:	fc 91       	ld	r31, X
    3038:	62 e0       	ldi	r22, 0x02	; 2
    303a:	70 e0       	ldi	r23, 0x00	; 0
    303c:	00 e0       	ldi	r16, 0x00	; 0
    303e:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    3040:	0f 91       	pop	r16
    3042:	08 95       	ret

00003044 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    3044:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    3046:	dc 01       	movw	r26, r24
    3048:	ed 91       	ld	r30, X+
    304a:	fc 91       	ld	r31, X
    304c:	61 e0       	ldi	r22, 0x01	; 1
    304e:	70 e0       	ldi	r23, 0x00	; 0
    3050:	48 ef       	ldi	r20, 0xF8	; 248
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	00 e0       	ldi	r16, 0x00	; 0
    3056:	09 95       	icall
}
    3058:	0f 91       	pop	r16
    305a:	08 95       	ret

0000305c <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    305c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    305e:	dc 01       	movw	r26, r24
    3060:	ed 91       	ld	r30, X+
    3062:	fc 91       	ld	r31, X
    3064:	61 e0       	ldi	r22, 0x01	; 1
    3066:	70 e0       	ldi	r23, 0x00	; 0
    3068:	49 ef       	ldi	r20, 0xF9	; 249
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	00 e0       	ldi	r16, 0x00	; 0
    306e:	09 95       	icall
}
    3070:	0f 91       	pop	r16
    3072:	08 95       	ret

00003074 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    3074:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    3076:	dc 01       	movw	r26, r24
    3078:	ed 91       	ld	r30, X+
    307a:	fc 91       	ld	r31, X
    307c:	61 e0       	ldi	r22, 0x01	; 1
    307e:	70 e0       	ldi	r23, 0x00	; 0
    3080:	4a ef       	ldi	r20, 0xFA	; 250
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	00 e0       	ldi	r16, 0x00	; 0
    3086:	09 95       	icall
}
    3088:	0f 91       	pop	r16
    308a:	08 95       	ret

0000308c <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    308c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    308e:	dc 01       	movw	r26, r24
    3090:	ed 91       	ld	r30, X+
    3092:	fc 91       	ld	r31, X
    3094:	61 e0       	ldi	r22, 0x01	; 1
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	4b ef       	ldi	r20, 0xFB	; 251
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	00 e0       	ldi	r16, 0x00	; 0
    309e:	09 95       	icall
}
    30a0:	0f 91       	pop	r16
    30a2:	08 95       	ret

000030a4 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    30a4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    30a6:	dc 01       	movw	r26, r24
    30a8:	ed 91       	ld	r30, X+
    30aa:	fc 91       	ld	r31, X
    30ac:	61 e0       	ldi	r22, 0x01	; 1
    30ae:	70 e0       	ldi	r23, 0x00	; 0
    30b0:	4c ef       	ldi	r20, 0xFC	; 252
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	00 e0       	ldi	r16, 0x00	; 0
    30b6:	09 95       	icall
}
    30b8:	0f 91       	pop	r16
    30ba:	08 95       	ret

000030bc <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    30bc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    30be:	dc 01       	movw	r26, r24
    30c0:	ed 91       	ld	r30, X+
    30c2:	fc 91       	ld	r31, X
    30c4:	61 e0       	ldi	r22, 0x01	; 1
    30c6:	70 e0       	ldi	r23, 0x00	; 0
    30c8:	4e ef       	ldi	r20, 0xFE	; 254
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	00 e0       	ldi	r16, 0x00	; 0
    30ce:	09 95       	icall
}
    30d0:	0f 91       	pop	r16
    30d2:	08 95       	ret

000030d4 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    30d4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    30d6:	dc 01       	movw	r26, r24
    30d8:	ed 91       	ld	r30, X+
    30da:	fc 91       	ld	r31, X
    30dc:	61 e0       	ldi	r22, 0x01	; 1
    30de:	70 e0       	ldi	r23, 0x00	; 0
    30e0:	4f ef       	ldi	r20, 0xFF	; 255
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	00 e0       	ldi	r16, 0x00	; 0
    30e6:	09 95       	icall
}
    30e8:	0f 91       	pop	r16
    30ea:	08 95       	ret

000030ec <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    30ec:	0f 93       	push	r16
   device->send_func(device, 2,
    30ee:	26 2f       	mov	r18, r22
    30f0:	2f 77       	andi	r18, 0x7F	; 127
    30f2:	dc 01       	movw	r26, r24
    30f4:	ed 91       	ld	r30, X+
    30f6:	fc 91       	ld	r31, X
    30f8:	62 e0       	ldi	r22, 0x02	; 2
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	41 ef       	ldi	r20, 0xF1	; 241
    30fe:	00 e0       	ldi	r16, 0x00	; 0
    3100:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    3102:	0f 91       	pop	r16
    3104:	08 95       	ret

00003106 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    3106:	0f 93       	push	r16
    3108:	1f 93       	push	r17
   device->send_func(device, 3,
    310a:	26 2f       	mov	r18, r22
    310c:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    310e:	8b 01       	movw	r16, r22
    3110:	00 0f       	add	r16, r16
    3112:	01 2f       	mov	r16, r17
    3114:	00 1f       	adc	r16, r16
    3116:	11 0b       	sbc	r17, r17
    3118:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    311a:	0f 77       	andi	r16, 0x7F	; 127
    311c:	dc 01       	movw	r26, r24
    311e:	ed 91       	ld	r30, X+
    3120:	fc 91       	ld	r31, X
    3122:	63 e0       	ldi	r22, 0x03	; 3
    3124:	70 e0       	ldi	r23, 0x00	; 0
    3126:	42 ef       	ldi	r20, 0xF2	; 242
    3128:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	08 95       	ret

00003130 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    3130:	0f 93       	push	r16
   device->send_func(device, 2,
    3132:	26 2f       	mov	r18, r22
    3134:	2f 77       	andi	r18, 0x7F	; 127
    3136:	dc 01       	movw	r26, r24
    3138:	ed 91       	ld	r30, X+
    313a:	fc 91       	ld	r31, X
    313c:	62 e0       	ldi	r22, 0x02	; 2
    313e:	70 e0       	ldi	r23, 0x00	; 0
    3140:	43 ef       	ldi	r20, 0xF3	; 243
    3142:	00 e0       	ldi	r16, 0x00	; 0
    3144:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    3146:	0f 91       	pop	r16
    3148:	08 95       	ret

0000314a <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    314a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    314c:	dc 01       	movw	r26, r24
    314e:	ed 91       	ld	r30, X+
    3150:	fc 91       	ld	r31, X
    3152:	61 e0       	ldi	r22, 0x01	; 1
    3154:	70 e0       	ldi	r23, 0x00	; 0
    3156:	46 ef       	ldi	r20, 0xF6	; 246
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	00 e0       	ldi	r16, 0x00	; 0
    315c:	09 95       	icall
}
    315e:	0f 91       	pop	r16
    3160:	08 95       	ret

00003162 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    3162:	0f 93       	push	r16
    3164:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    3166:	dc 01       	movw	r26, r24
    3168:	ed 91       	ld	r30, X+
    316a:	fc 91       	ld	r31, X
    316c:	61 e0       	ldi	r22, 0x01	; 1
    316e:	70 e0       	ldi	r23, 0x00	; 0
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	00 e0       	ldi	r16, 0x00	; 0
    3174:	09 95       	icall
}
    3176:	0f 91       	pop	r16
    3178:	08 95       	ret

0000317a <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    317a:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    317c:	dc 01       	movw	r26, r24
    317e:	ed 91       	ld	r30, X+
    3180:	fc 91       	ld	r31, X
    3182:	09 95       	icall
}
    3184:	0f 91       	pop	r16
    3186:	08 95       	ret

00003188 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    3188:	6f 92       	push	r6
    318a:	7f 92       	push	r7
    318c:	8f 92       	push	r8
    318e:	9f 92       	push	r9
    3190:	af 92       	push	r10
    3192:	bf 92       	push	r11
    3194:	cf 92       	push	r12
    3196:	df 92       	push	r13
    3198:	ef 92       	push	r14
    319a:	ff 92       	push	r15
    319c:	0f 93       	push	r16
    319e:	1f 93       	push	r17
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	00 d0       	rcall	.+0      	; 0x31a6 <midi_send_array+0x1e>
    31a6:	0f 92       	push	r0
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	4c 01       	movw	r8, r24
    31ae:	6b 01       	movw	r12, r22
    31b0:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    31b2:	61 15       	cp	r22, r1
    31b4:	71 05       	cpc	r23, r1
    31b6:	41 f1       	breq	.+80     	; 0x3208 <midi_send_array+0x80>
    31b8:	ee 24       	eor	r14, r14
    31ba:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    31bc:	0f 2e       	mov	r0, r31
    31be:	f3 e0       	ldi	r31, 0x03	; 3
    31c0:	6f 2e       	mov	r6, r31
    31c2:	77 24       	eor	r7, r7
    31c4:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    31c6:	19 82       	std	Y+1, r1	; 0x01
    31c8:	1a 82       	std	Y+2, r1	; 0x02
    31ca:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    31cc:	86 01       	movw	r16, r12
    31ce:	0e 19       	sub	r16, r14
    31d0:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    31d2:	04 30       	cpi	r16, 0x04	; 4
    31d4:	11 05       	cpc	r17, r1
    31d6:	08 f0       	brcs	.+2      	; 0x31da <midi_send_array+0x52>
    31d8:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    31da:	b5 01       	movw	r22, r10
    31dc:	6e 0d       	add	r22, r14
    31de:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    31e0:	ce 01       	movw	r24, r28
    31e2:	01 96       	adiw	r24, 0x01	; 1
    31e4:	40 2f       	mov	r20, r16
    31e6:	51 2f       	mov	r21, r17
    31e8:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    31ec:	c4 01       	movw	r24, r8
    31ee:	b8 01       	movw	r22, r16
    31f0:	49 81       	ldd	r20, Y+1	; 0x01
    31f2:	2a 81       	ldd	r18, Y+2	; 0x02
    31f4:	0b 81       	ldd	r16, Y+3	; 0x03
    31f6:	0e 94 bd 18 	call	0x317a	; 0x317a <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    31fa:	83 e0       	ldi	r24, 0x03	; 3
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	e8 0e       	add	r14, r24
    3200:	f9 1e       	adc	r15, r25
    3202:	ec 14       	cp	r14, r12
    3204:	fd 04       	cpc	r15, r13
    3206:	f8 f2       	brcs	.-66     	; 0x31c6 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	1f 91       	pop	r17
    3214:	0f 91       	pop	r16
    3216:	ff 90       	pop	r15
    3218:	ef 90       	pop	r14
    321a:	df 90       	pop	r13
    321c:	cf 90       	pop	r12
    321e:	bf 90       	pop	r11
    3220:	af 90       	pop	r10
    3222:	9f 90       	pop	r9
    3224:	8f 90       	pop	r8
    3226:	7f 90       	pop	r7
    3228:	6f 90       	pop	r6
    322a:	08 95       	ret

0000322c <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    322c:	fc 01       	movw	r30, r24
    322e:	73 83       	std	Z+3, r23	; 0x03
    3230:	62 83       	std	Z+2, r22	; 0x02
}
    3232:	08 95       	ret

00003234 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    3234:	fc 01       	movw	r30, r24
    3236:	75 83       	std	Z+5, r23	; 0x05
    3238:	64 83       	std	Z+4, r22	; 0x04
}
    323a:	08 95       	ret

0000323c <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    323c:	fc 01       	movw	r30, r24
    323e:	77 83       	std	Z+7, r23	; 0x07
    3240:	66 83       	std	Z+6, r22	; 0x06
}
    3242:	08 95       	ret

00003244 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    3244:	fc 01       	movw	r30, r24
    3246:	71 87       	std	Z+9, r23	; 0x09
    3248:	60 87       	std	Z+8, r22	; 0x08
}
    324a:	08 95       	ret

0000324c <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    324c:	fc 01       	movw	r30, r24
    324e:	73 87       	std	Z+11, r23	; 0x0b
    3250:	62 87       	std	Z+10, r22	; 0x0a
}
    3252:	08 95       	ret

00003254 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    3254:	fc 01       	movw	r30, r24
    3256:	75 87       	std	Z+13, r23	; 0x0d
    3258:	64 87       	std	Z+12, r22	; 0x0c
}
    325a:	08 95       	ret

0000325c <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    325c:	fc 01       	movw	r30, r24
    325e:	77 87       	std	Z+15, r23	; 0x0f
    3260:	66 87       	std	Z+14, r22	; 0x0e
}
    3262:	08 95       	ret

00003264 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    3264:	fc 01       	movw	r30, r24
    3266:	71 8b       	std	Z+17, r23	; 0x11
    3268:	60 8b       	std	Z+16, r22	; 0x10
}
    326a:	08 95       	ret

0000326c <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    326c:	fc 01       	movw	r30, r24
    326e:	73 8b       	std	Z+19, r23	; 0x13
    3270:	62 8b       	std	Z+18, r22	; 0x12
}
    3272:	08 95       	ret

00003274 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    3274:	fc 01       	movw	r30, r24
    3276:	75 8b       	std	Z+21, r23	; 0x15
    3278:	64 8b       	std	Z+20, r22	; 0x14
}
    327a:	08 95       	ret

0000327c <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    327c:	fc 01       	movw	r30, r24
    327e:	77 8b       	std	Z+23, r23	; 0x17
    3280:	66 8b       	std	Z+22, r22	; 0x16
}
    3282:	08 95       	ret

00003284 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    3284:	fc 01       	movw	r30, r24
    3286:	71 8f       	std	Z+25, r23	; 0x19
    3288:	60 8f       	std	Z+24, r22	; 0x18
}
    328a:	08 95       	ret

0000328c <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    328c:	fc 01       	movw	r30, r24
    328e:	73 8f       	std	Z+27, r23	; 0x1b
    3290:	62 8f       	std	Z+26, r22	; 0x1a
}
    3292:	08 95       	ret

00003294 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    3294:	fc 01       	movw	r30, r24
    3296:	75 8f       	std	Z+29, r23	; 0x1d
    3298:	64 8f       	std	Z+28, r22	; 0x1c
}
    329a:	08 95       	ret

0000329c <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    329c:	fc 01       	movw	r30, r24
    329e:	77 8f       	std	Z+31, r23	; 0x1f
    32a0:	66 8f       	std	Z+30, r22	; 0x1e
}
    32a2:	08 95       	ret

000032a4 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    32aa:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    32ac:	1f a2       	lds	r17, 0x9f
    32ae:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    32b0:	bc 01       	movw	r22, r24
    32b2:	68 5d       	subi	r22, 0xD8	; 216
    32b4:	7f 4f       	sbci	r23, 0xFF	; 255
    32b6:	88 51       	subi	r24, 0x18	; 24
    32b8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ba:	40 ec       	ldi	r20, 0xC0	; 192
    32bc:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    32c0:	1b 82       	std	Y+3, r1	; 0x03
    32c2:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    32c4:	1d 82       	std	Y+5, r1	; 0x05
    32c6:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    32c8:	1f 82       	std	Y+7, r1	; 0x07
    32ca:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    32cc:	19 86       	std	Y+9, r1	; 0x09
    32ce:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    32d0:	1b 86       	std	Y+11, r1	; 0x0b
    32d2:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    32d4:	1d 86       	std	Y+13, r1	; 0x0d
    32d6:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    32d8:	1f 86       	std	Y+15, r1	; 0x0f
    32da:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    32dc:	19 8a       	std	Y+17, r1	; 0x11
    32de:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    32e0:	1b 8a       	std	Y+19, r1	; 0x13
    32e2:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    32e4:	1d 8a       	std	Y+21, r1	; 0x15
    32e6:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    32e8:	1f 8a       	std	Y+23, r1	; 0x17
    32ea:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    32ec:	19 8e       	std	Y+25, r1	; 0x19
    32ee:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    32f0:	1b 8e       	std	Y+27, r1	; 0x1b
    32f2:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    32f4:	1d 8e       	std	Y+29, r1	; 0x1d
    32f6:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    32f8:	1f 8e       	std	Y+31, r1	; 0x1f
    32fa:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    32fc:	19 a2       	lds	r17, 0x99
    32fe:	18 a2       	lds	r17, 0x98
}
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	08 95       	ret

00003306 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    3306:	ef 92       	push	r14
    3308:	ff 92       	push	r15
    330a:	0f 93       	push	r16
    330c:	1f 93       	push	r17
    330e:	cf 93       	push	r28
    3310:	df 93       	push	r29
    3312:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3314:	66 23       	and	r22, r22
    3316:	99 f0       	breq	.+38     	; 0x333e <midi_device_input+0x38>
    3318:	04 2f       	mov	r16, r20
    331a:	15 2f       	mov	r17, r21
    331c:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    331e:	0f 2e       	mov	r0, r31
    3320:	f8 ee       	ldi	r31, 0xE8	; 232
    3322:	ef 2e       	mov	r14, r31
    3324:	ff 24       	eor	r15, r15
    3326:	f0 2d       	mov	r31, r0
    3328:	e8 0e       	add	r14, r24
    332a:	f9 1e       	adc	r15, r25
    332c:	f8 01       	movw	r30, r16
    332e:	61 91       	ld	r22, Z+
    3330:	8f 01       	movw	r16, r30
    3332:	c7 01       	movw	r24, r14
    3334:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3338:	cf 5f       	subi	r28, 0xFF	; 255
    333a:	cd 17       	cp	r28, r29
    333c:	b9 f7       	brne	.-18     	; 0x332c <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    333e:	df 91       	pop	r29
    3340:	cf 91       	pop	r28
    3342:	1f 91       	pop	r17
    3344:	0f 91       	pop	r16
    3346:	ff 90       	pop	r15
    3348:	ef 90       	pop	r14
    334a:	08 95       	ret

0000334c <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    334c:	fc 01       	movw	r30, r24
    334e:	71 83       	std	Z+1, r23	; 0x01
    3350:	60 83       	st	Z, r22
}
    3352:	08 95       	ret

00003354 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    3354:	fc 01       	movw	r30, r24
    3356:	71 a3       	lds	r23, 0x51
    3358:	60 a3       	lds	r22, 0x50
}
    335a:	08 95       	ret

0000335c <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    335c:	af 92       	push	r10
    335e:	bf 92       	push	r11
    3360:	cf 92       	push	r12
    3362:	df 92       	push	r13
    3364:	ef 92       	push	r14
    3366:	ff 92       	push	r15
    3368:	0f 93       	push	r16
    336a:	1f 93       	push	r17
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	00 d0       	rcall	.+0      	; 0x3372 <midi_input_callbacks+0x16>
    3372:	0f 92       	push	r0
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	6c 01       	movw	r12, r24
    337a:	5b 01       	movw	r10, r22
    337c:	f4 2e       	mov	r15, r20
    337e:	e2 2e       	mov	r14, r18
    3380:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    3382:	dc 01       	movw	r26, r24
    3384:	95 96       	adiw	r26, 0x25	; 37
    3386:	8c 91       	ld	r24, X
    3388:	95 97       	sbiw	r26, 0x25	; 37
    338a:	84 30       	cpi	r24, 0x04	; 4
    338c:	e9 f4       	brne	.+58     	; 0x33c8 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    338e:	5a 96       	adiw	r26, 0x1a	; 26
    3390:	ed 91       	ld	r30, X+
    3392:	fc 91       	ld	r31, X
    3394:	5b 97       	sbiw	r26, 0x1b	; 27
    3396:	30 97       	sbiw	r30, 0x00	; 0
    3398:	09 f4       	brne	.+2      	; 0x339c <midi_input_callbacks+0x40>
    339a:	ee c0       	rjmp	.+476    	; 0x3578 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    339c:	cb 01       	movw	r24, r22
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	63 e0       	ldi	r22, 0x03	; 3
    33a2:	70 e0       	ldi	r23, 0x00	; 0
    33a4:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__udivmodhi4>
    33a8:	cb 01       	movw	r24, r22
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	68 0f       	add	r22, r24
    33b0:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    33b2:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    33b4:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    33b6:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    33b8:	4a 2d       	mov	r20, r10
    33ba:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    33bc:	c6 01       	movw	r24, r12
    33be:	9e 01       	movw	r18, r28
    33c0:	2f 5f       	subi	r18, 0xFF	; 255
    33c2:	3f 4f       	sbci	r19, 0xFF	; 255
    33c4:	09 95       	icall
    33c6:	c8 c0       	rjmp	.+400    	; 0x3558 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    33c8:	62 30       	cpi	r22, 0x02	; 2
    33ca:	71 05       	cpc	r23, r1
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <midi_input_callbacks+0x74>
    33ce:	5f c0       	rjmp	.+190    	; 0x348e <midi_input_callbacks+0x132>
    33d0:	63 30       	cpi	r22, 0x03	; 3
    33d2:	71 05       	cpc	r23, r1
    33d4:	29 f0       	breq	.+10     	; 0x33e0 <midi_input_callbacks+0x84>
    33d6:	61 30       	cpi	r22, 0x01	; 1
    33d8:	71 05       	cpc	r23, r1
    33da:	09 f0       	breq	.+2      	; 0x33de <midi_input_callbacks+0x82>
    33dc:	b3 c0       	rjmp	.+358    	; 0x3544 <midi_input_callbacks+0x1e8>
    33de:	99 c0       	rjmp	.+306    	; 0x3512 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    33e0:	84 2f       	mov	r24, r20
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	80 7f       	andi	r24, 0xF0	; 240
    33e6:	90 70       	andi	r25, 0x00	; 0
    33e8:	80 3a       	cpi	r24, 0xA0	; 160
    33ea:	91 05       	cpc	r25, r1
    33ec:	29 f1       	breq	.+74     	; 0x3438 <midi_input_callbacks+0xdc>
    33ee:	81 3a       	cpi	r24, 0xA1	; 161
    33f0:	91 05       	cpc	r25, r1
    33f2:	3c f4       	brge	.+14     	; 0x3402 <midi_input_callbacks+0xa6>
    33f4:	80 38       	cpi	r24, 0x80	; 128
    33f6:	91 05       	cpc	r25, r1
    33f8:	c9 f0       	breq	.+50     	; 0x342c <midi_input_callbacks+0xd0>
    33fa:	80 39       	cpi	r24, 0x90	; 144
    33fc:	91 05       	cpc	r25, r1
    33fe:	91 f5       	brne	.+100    	; 0x3464 <midi_input_callbacks+0x108>
    3400:	0f c0       	rjmp	.+30     	; 0x3420 <midi_input_callbacks+0xc4>
    3402:	80 3e       	cpi	r24, 0xE0	; 224
    3404:	91 05       	cpc	r25, r1
    3406:	f1 f0       	breq	.+60     	; 0x3444 <midi_input_callbacks+0xe8>
    3408:	80 3f       	cpi	r24, 0xF0	; 240
    340a:	91 05       	cpc	r25, r1
    340c:	09 f1       	breq	.+66     	; 0x3450 <midi_input_callbacks+0xf4>
    340e:	80 3b       	cpi	r24, 0xB0	; 176
    3410:	91 05       	cpc	r25, r1
    3412:	41 f5       	brne	.+80     	; 0x3464 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    3414:	d6 01       	movw	r26, r12
    3416:	12 96       	adiw	r26, 0x02	; 2
    3418:	ed 91       	ld	r30, X+
    341a:	fc 91       	ld	r31, X
    341c:	13 97       	sbiw	r26, 0x03	; 3
              break;
    341e:	24 c0       	rjmp	.+72     	; 0x3468 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    3420:	d6 01       	movw	r26, r12
    3422:	14 96       	adiw	r26, 0x04	; 4
    3424:	ed 91       	ld	r30, X+
    3426:	fc 91       	ld	r31, X
    3428:	15 97       	sbiw	r26, 0x05	; 5
              break;
    342a:	1e c0       	rjmp	.+60     	; 0x3468 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    342c:	d6 01       	movw	r26, r12
    342e:	16 96       	adiw	r26, 0x06	; 6
    3430:	ed 91       	ld	r30, X+
    3432:	fc 91       	ld	r31, X
    3434:	17 97       	sbiw	r26, 0x07	; 7
              break;
    3436:	18 c0       	rjmp	.+48     	; 0x3468 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    3438:	d6 01       	movw	r26, r12
    343a:	18 96       	adiw	r26, 0x08	; 8
    343c:	ed 91       	ld	r30, X+
    343e:	fc 91       	ld	r31, X
    3440:	19 97       	sbiw	r26, 0x09	; 9
              break;
    3442:	12 c0       	rjmp	.+36     	; 0x3468 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    3444:	d6 01       	movw	r26, r12
    3446:	1a 96       	adiw	r26, 0x0a	; 10
    3448:	ed 91       	ld	r30, X+
    344a:	fc 91       	ld	r31, X
    344c:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    344e:	0c c0       	rjmp	.+24     	; 0x3468 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    3450:	b2 ef       	ldi	r27, 0xF2	; 242
    3452:	4b 17       	cp	r20, r27
    3454:	09 f0       	breq	.+2      	; 0x3458 <midi_input_callbacks+0xfc>
    3456:	90 c0       	rjmp	.+288    	; 0x3578 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    3458:	d6 01       	movw	r26, r12
    345a:	1c 96       	adiw	r26, 0x0c	; 12
    345c:	ed 91       	ld	r30, X+
    345e:	fc 91       	ld	r31, X
    3460:	1d 97       	sbiw	r26, 0x0d	; 13
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    3464:	e0 e0       	ldi	r30, 0x00	; 0
    3466:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    3468:	30 97       	sbiw	r30, 0x00	; 0
    346a:	09 f4       	brne	.+2      	; 0x346e <midi_input_callbacks+0x112>
    346c:	85 c0       	rjmp	.+266    	; 0x3578 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    346e:	b2 ef       	ldi	r27, 0xF2	; 242
    3470:	fb 16       	cp	r15, r27
    3472:	31 f4       	brne	.+12     	; 0x3480 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    3474:	c6 01       	movw	r24, r12
    3476:	62 ef       	ldi	r22, 0xF2	; 242
    3478:	4e 2d       	mov	r20, r14
    347a:	21 2f       	mov	r18, r17
    347c:	09 95       	icall
    347e:	6c c0       	rjmp	.+216    	; 0x3558 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    3480:	6f 2d       	mov	r22, r15
    3482:	6f 70       	andi	r22, 0x0F	; 15
    3484:	c6 01       	movw	r24, r12
    3486:	4e 2d       	mov	r20, r14
    3488:	21 2f       	mov	r18, r17
    348a:	09 95       	icall
    348c:	65 c0       	rjmp	.+202    	; 0x3558 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    348e:	84 2f       	mov	r24, r20
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	80 7f       	andi	r24, 0xF0	; 240
    3494:	90 70       	andi	r25, 0x00	; 0
    3496:	80 3d       	cpi	r24, 0xD0	; 208
    3498:	91 05       	cpc	r25, r1
    349a:	61 f0       	breq	.+24     	; 0x34b4 <midi_input_callbacks+0x158>
    349c:	80 3f       	cpi	r24, 0xF0	; 240
    349e:	91 05       	cpc	r25, r1
    34a0:	79 f0       	breq	.+30     	; 0x34c0 <midi_input_callbacks+0x164>
    34a2:	80 3c       	cpi	r24, 0xC0	; 192
    34a4:	91 05       	cpc	r25, r1
    34a6:	f9 f4       	brne	.+62     	; 0x34e6 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    34a8:	d6 01       	movw	r26, r12
    34aa:	1e 96       	adiw	r26, 0x0e	; 14
    34ac:	ed 91       	ld	r30, X+
    34ae:	fc 91       	ld	r31, X
    34b0:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    34b2:	1b c0       	rjmp	.+54     	; 0x34ea <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    34b4:	d6 01       	movw	r26, r12
    34b6:	50 96       	adiw	r26, 0x10	; 16
    34b8:	ed 91       	ld	r30, X+
    34ba:	fc 91       	ld	r31, X
    34bc:	51 97       	sbiw	r26, 0x11	; 17
              break;
    34be:	15 c0       	rjmp	.+42     	; 0x34ea <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    34c0:	b3 ef       	ldi	r27, 0xF3	; 243
    34c2:	4b 17       	cp	r20, r27
    34c4:	31 f4       	brne	.+12     	; 0x34d2 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    34c6:	d6 01       	movw	r26, r12
    34c8:	52 96       	adiw	r26, 0x12	; 18
    34ca:	ed 91       	ld	r30, X+
    34cc:	fc 91       	ld	r31, X
    34ce:	53 97       	sbiw	r26, 0x13	; 19
    34d0:	0c c0       	rjmp	.+24     	; 0x34ea <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    34d2:	b1 ef       	ldi	r27, 0xF1	; 241
    34d4:	4b 17       	cp	r20, r27
    34d6:	09 f0       	breq	.+2      	; 0x34da <midi_input_callbacks+0x17e>
    34d8:	4f c0       	rjmp	.+158    	; 0x3578 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    34da:	d6 01       	movw	r26, r12
    34dc:	54 96       	adiw	r26, 0x14	; 20
    34de:	ed 91       	ld	r30, X+
    34e0:	fc 91       	ld	r31, X
    34e2:	55 97       	sbiw	r26, 0x15	; 21
    34e4:	02 c0       	rjmp	.+4      	; 0x34ea <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    34e6:	e0 e0       	ldi	r30, 0x00	; 0
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    34ea:	30 97       	sbiw	r30, 0x00	; 0
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <midi_input_callbacks+0x194>
    34ee:	44 c0       	rjmp	.+136    	; 0x3578 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    34f0:	b3 ef       	ldi	r27, 0xF3	; 243
    34f2:	fb 16       	cp	r15, r27
    34f4:	19 f0       	breq	.+6      	; 0x34fc <midi_input_callbacks+0x1a0>
    34f6:	81 ef       	ldi	r24, 0xF1	; 241
    34f8:	f8 16       	cp	r15, r24
    34fa:	29 f4       	brne	.+10     	; 0x3506 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    34fc:	c6 01       	movw	r24, r12
    34fe:	6f 2d       	mov	r22, r15
    3500:	4e 2d       	mov	r20, r14
    3502:	09 95       	icall
    3504:	29 c0       	rjmp	.+82     	; 0x3558 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    3506:	6f 2d       	mov	r22, r15
    3508:	6f 70       	andi	r22, 0x0F	; 15
    350a:	c6 01       	movw	r24, r12
    350c:	4e 2d       	mov	r20, r14
    350e:	09 95       	icall
    3510:	23 c0       	rjmp	.+70     	; 0x3558 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    3512:	84 2f       	mov	r24, r20
    3514:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <midi_is_realtime>
    3518:	88 23       	and	r24, r24
    351a:	31 f0       	breq	.+12     	; 0x3528 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    351c:	d6 01       	movw	r26, r12
    351e:	56 96       	adiw	r26, 0x16	; 22
    3520:	ed 91       	ld	r30, X+
    3522:	fc 91       	ld	r31, X
    3524:	57 97       	sbiw	r26, 0x17	; 23
    3526:	08 c0       	rjmp	.+16     	; 0x3538 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    3528:	b6 ef       	ldi	r27, 0xF6	; 246
    352a:	fb 16       	cp	r15, r27
    352c:	29 f5       	brne	.+74     	; 0x3578 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    352e:	d6 01       	movw	r26, r12
    3530:	58 96       	adiw	r26, 0x18	; 24
    3532:	ed 91       	ld	r30, X+
    3534:	fc 91       	ld	r31, X
    3536:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    3538:	30 97       	sbiw	r30, 0x00	; 0
    353a:	f1 f0       	breq	.+60     	; 0x3578 <midi_input_callbacks+0x21c>
            func(device, byte0);
    353c:	c6 01       	movw	r24, r12
    353e:	6f 2d       	mov	r22, r15
    3540:	09 95       	icall
    3542:	0a c0       	rjmp	.+20     	; 0x3558 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    3544:	64 30       	cpi	r22, 0x04	; 4
    3546:	71 05       	cpc	r23, r1
    3548:	a8 f4       	brcc	.+42     	; 0x3574 <midi_input_callbacks+0x218>
    354a:	16 c0       	rjmp	.+44     	; 0x3578 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    354c:	c6 01       	movw	r24, r12
    354e:	b5 01       	movw	r22, r10
    3550:	4f 2d       	mov	r20, r15
    3552:	2e 2d       	mov	r18, r14
    3554:	01 2f       	mov	r16, r17
    3556:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    3558:	d6 01       	movw	r26, r12
    355a:	5e 96       	adiw	r26, 0x1e	; 30
    355c:	ed 91       	ld	r30, X+
    355e:	fc 91       	ld	r31, X
    3560:	5f 97       	sbiw	r26, 0x1f	; 31
    3562:	30 97       	sbiw	r30, 0x00	; 0
    3564:	89 f0       	breq	.+34     	; 0x3588 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    3566:	c6 01       	movw	r24, r12
    3568:	b5 01       	movw	r22, r10
    356a:	4f 2d       	mov	r20, r15
    356c:	2e 2d       	mov	r18, r14
    356e:	01 2f       	mov	r16, r17
    3570:	09 95       	icall
    3572:	0a c0       	rjmp	.+20     	; 0x3588 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    3574:	aa 24       	eor	r10, r10
    3576:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    3578:	d6 01       	movw	r26, r12
    357a:	5c 96       	adiw	r26, 0x1c	; 28
    357c:	ed 91       	ld	r30, X+
    357e:	fc 91       	ld	r31, X
    3580:	5d 97       	sbiw	r26, 0x1d	; 29
    3582:	30 97       	sbiw	r30, 0x00	; 0
    3584:	19 f7       	brne	.-58     	; 0x354c <midi_input_callbacks+0x1f0>
    3586:	e8 cf       	rjmp	.-48     	; 0x3558 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	0f 90       	pop	r0
    358e:	df 91       	pop	r29
    3590:	cf 91       	pop	r28
    3592:	1f 91       	pop	r17
    3594:	0f 91       	pop	r16
    3596:	ff 90       	pop	r15
    3598:	ef 90       	pop	r14
    359a:	df 90       	pop	r13
    359c:	cf 90       	pop	r12
    359e:	bf 90       	pop	r11
    35a0:	af 90       	pop	r10
    35a2:	08 95       	ret

000035a4 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    35a4:	ef 92       	push	r14
    35a6:	ff 92       	push	r15
    35a8:	0f 93       	push	r16
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	7c 01       	movw	r14, r24
    35b0:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    35b2:	86 2f       	mov	r24, r22
    35b4:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <midi_is_realtime>
    35b8:	88 23       	and	r24, r24
    35ba:	91 f0       	breq	.+36     	; 0x35e0 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    35bc:	d7 01       	movw	r26, r14
    35be:	95 96       	adiw	r26, 0x25	; 37
    35c0:	dc 91       	ld	r29, X
    35c2:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	95 96       	adiw	r26, 0x25	; 37
    35c8:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    35ca:	c7 01       	movw	r24, r14
    35cc:	61 e0       	ldi	r22, 0x01	; 1
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	4c 2f       	mov	r20, r28
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	00 e0       	ldi	r16, 0x00	; 0
    35d6:	0e 94 ae 19 	call	0x335c	; 0x335c <midi_input_callbacks>
    device->input_state = state;
    35da:	f7 01       	movw	r30, r14
    35dc:	d5 a3       	lds	r29, 0x55
    35de:	b7 c0       	rjmp	.+366    	; 0x374e <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    35e0:	8c 2f       	mov	r24, r28
    35e2:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <midi_is_statusbyte>
    35e6:	88 23       	and	r24, r24
    35e8:	09 f4       	brne	.+2      	; 0x35ec <midi_process_byte+0x48>
    35ea:	73 c0       	rjmp	.+230    	; 0x36d2 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    35ec:	d7 01       	movw	r26, r14
    35ee:	95 96       	adiw	r26, 0x25	; 37
    35f0:	8c 91       	ld	r24, X
    35f2:	95 97       	sbiw	r26, 0x25	; 37
    35f4:	84 30       	cpi	r24, 0x04	; 4
    35f6:	49 f0       	breq	.+18     	; 0x360a <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    35f8:	92 96       	adiw	r26, 0x22	; 34
    35fa:	cc 93       	st	X, r28
    35fc:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	97 96       	adiw	r26, 0x27	; 39
    3604:	9c 93       	st	X, r25
    3606:	8e 93       	st	-X, r24
    3608:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    360a:	8c 2f       	mov	r24, r28
    360c:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <midi_packet_length>
    3610:	81 30       	cpi	r24, 0x01	; 1
    3612:	41 f0       	breq	.+16     	; 0x3624 <midi_process_byte+0x80>
    3614:	81 30       	cpi	r24, 0x01	; 1
    3616:	00 f1       	brcs	.+64     	; 0x3658 <midi_process_byte+0xb4>
    3618:	82 30       	cpi	r24, 0x02	; 2
    361a:	a1 f0       	breq	.+40     	; 0x3644 <midi_process_byte+0xa0>
    361c:	83 30       	cpi	r24, 0x03	; 3
    361e:	09 f0       	breq	.+2      	; 0x3622 <midi_process_byte+0x7e>
    3620:	4f c0       	rjmp	.+158    	; 0x36c0 <midi_process_byte+0x11c>
    3622:	14 c0       	rjmp	.+40     	; 0x364c <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	f7 01       	movw	r30, r14
    3628:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    362a:	c7 01       	movw	r24, r14
    362c:	61 e0       	ldi	r22, 0x01	; 1
    362e:	70 e0       	ldi	r23, 0x00	; 0
    3630:	4c 2f       	mov	r20, r28
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	00 e0       	ldi	r16, 0x00	; 0
    3636:	0e 94 ae 19 	call	0x335c	; 0x335c <midi_input_callbacks>
        device->input_state = IDLE;
    363a:	d7 01       	movw	r26, r14
    363c:	95 96       	adiw	r26, 0x25	; 37
    363e:	1c 92       	st	X, r1
    3640:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3642:	85 c0       	rjmp	.+266    	; 0x374e <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    3644:	82 e0       	ldi	r24, 0x02	; 2
    3646:	f7 01       	movw	r30, r14
    3648:	85 a3       	lds	r24, 0x55
        break;
    364a:	81 c0       	rjmp	.+258    	; 0x374e <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    364c:	83 e0       	ldi	r24, 0x03	; 3
    364e:	d7 01       	movw	r26, r14
    3650:	95 96       	adiw	r26, 0x25	; 37
    3652:	8c 93       	st	X, r24
    3654:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3656:	7b c0       	rjmp	.+246    	; 0x374e <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    3658:	c0 3f       	cpi	r28, 0xF0	; 240
    365a:	19 f0       	breq	.+6      	; 0x3662 <midi_process_byte+0xbe>
    365c:	c7 3f       	cpi	r28, 0xF7	; 247
    365e:	59 f5       	brne	.+86     	; 0x36b6 <midi_process_byte+0x112>
    3660:	0a c0       	rjmp	.+20     	; 0x3676 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    3662:	84 e0       	ldi	r24, 0x04	; 4
    3664:	f7 01       	movw	r30, r14
    3666:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    3668:	80 ef       	ldi	r24, 0xF0	; 240
    366a:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	97 a3       	lds	r25, 0x57
    3672:	86 a3       	lds	r24, 0x56
            break;
    3674:	6c c0       	rjmp	.+216    	; 0x374e <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    3676:	d7 01       	movw	r26, r14
    3678:	96 96       	adiw	r26, 0x26	; 38
    367a:	2d 91       	ld	r18, X+
    367c:	3c 91       	ld	r19, X
    367e:	97 97       	sbiw	r26, 0x27	; 39
    3680:	c9 01       	movw	r24, r18
    3682:	63 e0       	ldi	r22, 0x03	; 3
    3684:	70 e0       	ldi	r23, 0x00	; 0
    3686:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__udivmodhi4>
    368a:	f7 01       	movw	r30, r14
    368c:	e8 0f       	add	r30, r24
    368e:	f9 1f       	adc	r31, r25
    3690:	87 ef       	ldi	r24, 0xF7	; 247
    3692:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    3694:	b9 01       	movw	r22, r18
    3696:	6f 5f       	subi	r22, 0xFF	; 255
    3698:	7f 4f       	sbci	r23, 0xFF	; 255
    369a:	f7 01       	movw	r30, r14
    369c:	77 a3       	lds	r23, 0x57
    369e:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    36a0:	c7 01       	movw	r24, r14
    36a2:	42 a1       	lds	r20, 0x42
    36a4:	23 a1       	lds	r18, 0x43
    36a6:	04 a1       	lds	r16, 0x44
    36a8:	0e 94 ae 19 	call	0x335c	; 0x335c <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    36ac:	d7 01       	movw	r26, r14
    36ae:	95 96       	adiw	r26, 0x25	; 37
    36b0:	1c 92       	st	X, r1
    36b2:	95 97       	sbiw	r26, 0x25	; 37
            break;
    36b4:	4c c0       	rjmp	.+152    	; 0x374e <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    36b6:	f7 01       	movw	r30, r14
    36b8:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    36ba:	17 a2       	lds	r17, 0x97
    36bc:	16 a2       	lds	r17, 0x96
    36be:	47 c0       	rjmp	.+142    	; 0x374e <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    36c0:	d7 01       	movw	r26, r14
    36c2:	95 96       	adiw	r26, 0x25	; 37
    36c4:	1c 92       	st	X, r1
    36c6:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    36c8:	97 96       	adiw	r26, 0x27	; 39
    36ca:	1c 92       	st	X, r1
    36cc:	1e 92       	st	-X, r1
    36ce:	96 97       	sbiw	r26, 0x26	; 38
        break;
    36d0:	3e c0       	rjmp	.+124    	; 0x374e <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    36d2:	f7 01       	movw	r30, r14
    36d4:	25 a1       	lds	r18, 0x45
    36d6:	22 23       	and	r18, r18
    36d8:	d1 f1       	breq	.+116    	; 0x374e <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    36da:	06 a0       	lds	r16, 0x86
    36dc:	f7 a1       	lds	r31, 0x47
    36de:	e0 2d       	mov	r30, r0
    36e0:	cf 01       	movw	r24, r30
    36e2:	63 e0       	ldi	r22, 0x03	; 3
    36e4:	70 e0       	ldi	r23, 0x00	; 0
    36e6:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__udivmodhi4>
    36ea:	ac 01       	movw	r20, r24
    36ec:	8e 0d       	add	r24, r14
    36ee:	9f 1d       	adc	r25, r15
    36f0:	dc 01       	movw	r26, r24
    36f2:	92 96       	adiw	r26, 0x22	; 34
    36f4:	cc 93       	st	X, r28
    36f6:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    36f8:	bf 01       	movw	r22, r30
    36fa:	6f 5f       	subi	r22, 0xFF	; 255
    36fc:	7f 4f       	sbci	r23, 0xFF	; 255
    36fe:	f7 01       	movw	r30, r14
    3700:	77 a3       	lds	r23, 0x57
    3702:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    3704:	41 30       	cpi	r20, 0x01	; 1
    3706:	51 05       	cpc	r21, r1
    3708:	91 f0       	breq	.+36     	; 0x372e <midi_process_byte+0x18a>
    370a:	42 30       	cpi	r20, 0x02	; 2
    370c:	51 05       	cpc	r21, r1
    370e:	f9 f4       	brne	.+62     	; 0x374e <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    3710:	c7 01       	movw	r24, r14
    3712:	42 a1       	lds	r20, 0x42
    3714:	23 a1       	lds	r18, 0x43
    3716:	04 a1       	lds	r16, 0x44
    3718:	0e 94 ae 19 	call	0x335c	; 0x335c <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    371c:	f7 01       	movw	r30, r14
    371e:	85 a1       	lds	r24, 0x45
    3720:	84 30       	cpi	r24, 0x04	; 4
    3722:	a9 f0       	breq	.+42     	; 0x374e <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	97 a3       	lds	r25, 0x57
    372a:	86 a3       	lds	r24, 0x56
    372c:	10 c0       	rjmp	.+32     	; 0x374e <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    372e:	22 30       	cpi	r18, 0x02	; 2
    3730:	71 f4       	brne	.+28     	; 0x374e <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3732:	c7 01       	movw	r24, r14
    3734:	42 a1       	lds	r20, 0x42
    3736:	23 a1       	lds	r18, 0x43
    3738:	00 e0       	ldi	r16, 0x00	; 0
    373a:	0e 94 ae 19 	call	0x335c	; 0x335c <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    373e:	f7 01       	movw	r30, r14
    3740:	85 a1       	lds	r24, 0x45
    3742:	84 30       	cpi	r24, 0x04	; 4
    3744:	21 f0       	breq	.+8      	; 0x374e <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	97 a3       	lds	r25, 0x57
    374c:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    374e:	df 91       	pop	r29
    3750:	cf 91       	pop	r28
    3752:	0f 91       	pop	r16
    3754:	ff 90       	pop	r15
    3756:	ef 90       	pop	r14
    3758:	08 95       	ret

0000375a <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    375a:	cf 92       	push	r12
    375c:	df 92       	push	r13
    375e:	ef 92       	push	r14
    3760:	ff 92       	push	r15
    3762:	0f 93       	push	r16
    3764:	1f 93       	push	r17
    3766:	cf 93       	push	r28
    3768:	df 93       	push	r29
    376a:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    376c:	dc 01       	movw	r26, r24
    376e:	90 96       	adiw	r26, 0x20	; 32
    3770:	ed 91       	ld	r30, X+
    3772:	fc 91       	ld	r31, X
    3774:	91 97       	sbiw	r26, 0x21	; 33
    3776:	30 97       	sbiw	r30, 0x00	; 0
    3778:	09 f0       	breq	.+2      	; 0x377c <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    377a:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    377c:	0f 2e       	mov	r0, r31
    377e:	f8 ee       	ldi	r31, 0xE8	; 232
    3780:	ef 2e       	mov	r14, r31
    3782:	ff 24       	eor	r15, r15
    3784:	f0 2d       	mov	r31, r0
    3786:	ec 0c       	add	r14, r12
    3788:	fd 1c       	adc	r15, r13
    378a:	c7 01       	movw	r24, r14
    378c:	0e 94 02 17 	call	0x2e04	; 0x2e04 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3790:	c8 2f       	mov	r28, r24
    3792:	d0 e0       	ldi	r29, 0x00	; 0
    3794:	20 97       	sbiw	r28, 0x00	; 0
    3796:	99 f0       	breq	.+38     	; 0x37be <midi_device_process+0x64>
    3798:	00 e0       	ldi	r16, 0x00	; 0
    379a:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    379c:	c7 01       	movw	r24, r14
    379e:	60 e0       	ldi	r22, 0x00	; 0
    37a0:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <bytequeue_get>
    37a4:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    37a6:	c6 01       	movw	r24, r12
    37a8:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    37ac:	c7 01       	movw	r24, r14
    37ae:	61 e0       	ldi	r22, 0x01	; 1
    37b0:	0e 94 28 17 	call	0x2e50	; 0x2e50 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    37b4:	0f 5f       	subi	r16, 0xFF	; 255
    37b6:	1f 4f       	sbci	r17, 0xFF	; 255
    37b8:	0c 17       	cp	r16, r28
    37ba:	1d 07       	cpc	r17, r29
    37bc:	78 f3       	brcs	.-34     	; 0x379c <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	1f 91       	pop	r17
    37c4:	0f 91       	pop	r16
    37c6:	ff 90       	pop	r15
    37c8:	ef 90       	pop	r14
    37ca:	df 90       	pop	r13
    37cc:	cf 90       	pop	r12
    37ce:	08 95       	ret

000037d0 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    37d0:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    37d2:	67 e0       	ldi	r22, 0x07	; 7
    37d4:	70 e0       	ldi	r23, 0x00	; 0
    37d6:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__udivmodhi4>
    37da:	48 2f       	mov	r20, r24
   if (remainder)
    37dc:	88 23       	and	r24, r24
    37de:	81 f0       	breq	.+32     	; 0x3800 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    37e0:	c9 01       	movw	r24, r18
    37e2:	67 e0       	ldi	r22, 0x07	; 7
    37e4:	70 e0       	ldi	r23, 0x00	; 0
    37e6:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__udivmodhi4>
    37ea:	cb 01       	movw	r24, r22
    37ec:	88 0f       	add	r24, r24
    37ee:	99 1f       	adc	r25, r25
    37f0:	88 0f       	add	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	88 0f       	add	r24, r24
    37f6:	99 1f       	adc	r25, r25
    37f8:	01 96       	adiw	r24, 0x01	; 1
    37fa:	84 0f       	add	r24, r20
    37fc:	91 1d       	adc	r25, r1
    37fe:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3800:	c9 01       	movw	r24, r18
    3802:	67 e0       	ldi	r22, 0x07	; 7
    3804:	70 e0       	ldi	r23, 0x00	; 0
    3806:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__udivmodhi4>
    380a:	cb 01       	movw	r24, r22
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	88 0f       	add	r24, r24
    3812:	99 1f       	adc	r25, r25
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
}
    3818:	08 95       	ret

0000381a <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    381a:	48 2f       	mov	r20, r24
    381c:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    381e:	a1 f0       	breq	.+40     	; 0x3848 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3820:	9c 01       	movw	r18, r24
    3822:	36 95       	lsr	r19
    3824:	27 95       	ror	r18
    3826:	36 95       	lsr	r19
    3828:	27 95       	ror	r18
    382a:	36 95       	lsr	r19
    382c:	27 95       	ror	r18
    382e:	c9 01       	movw	r24, r18
    3830:	88 0f       	add	r24, r24
    3832:	99 1f       	adc	r25, r25
    3834:	88 0f       	add	r24, r24
    3836:	99 1f       	adc	r25, r25
    3838:	88 0f       	add	r24, r24
    383a:	99 1f       	adc	r25, r25
    383c:	82 1b       	sub	r24, r18
    383e:	93 0b       	sbc	r25, r19
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	84 0f       	add	r24, r20
    3844:	91 1d       	adc	r25, r1
    3846:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    3848:	9c 01       	movw	r18, r24
    384a:	36 95       	lsr	r19
    384c:	27 95       	ror	r18
    384e:	36 95       	lsr	r19
    3850:	27 95       	ror	r18
    3852:	36 95       	lsr	r19
    3854:	27 95       	ror	r18
    3856:	c9 01       	movw	r24, r18
    3858:	88 0f       	add	r24, r24
    385a:	99 1f       	adc	r25, r25
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	82 1b       	sub	r24, r18
    3866:	93 0b       	sbc	r25, r19
}
    3868:	08 95       	ret

0000386a <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    386a:	2f 92       	push	r2
    386c:	3f 92       	push	r3
    386e:	4f 92       	push	r4
    3870:	5f 92       	push	r5
    3872:	6f 92       	push	r6
    3874:	7f 92       	push	r7
    3876:	8f 92       	push	r8
    3878:	9f 92       	push	r9
    387a:	af 92       	push	r10
    387c:	bf 92       	push	r11
    387e:	cf 92       	push	r12
    3880:	df 92       	push	r13
    3882:	ef 92       	push	r14
    3884:	ff 92       	push	r15
    3886:	0f 93       	push	r16
    3888:	1f 93       	push	r17
    388a:	cf 93       	push	r28
    388c:	df 93       	push	r29
    388e:	00 d0       	rcall	.+0      	; 0x3890 <sysex_encode+0x26>
    3890:	00 d0       	rcall	.+0      	; 0x3892 <sysex_encode+0x28>
    3892:	00 d0       	rcall	.+0      	; 0x3894 <sysex_encode+0x2a>
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
    3898:	1c 01       	movw	r2, r24
    389a:	7a 83       	std	Y+2, r23	; 0x02
    389c:	69 83       	std	Y+1, r22	; 0x01
    389e:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    38a0:	ca 01       	movw	r24, r20
    38a2:	67 e0       	ldi	r22, 0x07	; 7
    38a4:	70 e0       	ldi	r23, 0x00	; 0
    38a6:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__udivmodhi4>
    38aa:	2b 01       	movw	r4, r22
    38ac:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    38ae:	61 15       	cp	r22, r1
    38b0:	71 05       	cpc	r23, r1
    38b2:	b1 f1       	breq	.+108    	; 0x3920 <sysex_encode+0xb6>
    38b4:	81 01       	movw	r16, r2
    38b6:	e9 80       	ldd	r14, Y+1	; 0x01
    38b8:	fa 80       	ldd	r15, Y+2	; 0x02
    38ba:	cc 24       	eor	r12, r12
    38bc:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38be:	88 24       	eor	r8, r8
    38c0:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    38c2:	1e 83       	std	Y+6, r17	; 0x06
    38c4:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    38c6:	f8 01       	movw	r30, r16
    38c8:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    38ca:	fc 82       	std	Y+4, r15	; 0x04
    38cc:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38ce:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    38d0:	ab 81       	ldd	r26, Y+3	; 0x03
    38d2:	bc 81       	ldd	r27, Y+4	; 0x04
    38d4:	2d 91       	ld	r18, X+
    38d6:	bc 83       	std	Y+4, r27	; 0x04
    38d8:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    38da:	4f 5f       	subi	r20, 0xFF	; 255
    38dc:	5f 4f       	sbci	r21, 0xFF	; 255
    38de:	82 2f       	mov	r24, r18
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	80 78       	andi	r24, 0x80	; 128
    38e4:	90 70       	andi	r25, 0x00	; 0
    38e6:	bc 01       	movw	r22, r24
    38e8:	04 2e       	mov	r0, r20
    38ea:	02 c0       	rjmp	.+4      	; 0x38f0 <sysex_encode+0x86>
    38ec:	75 95       	asr	r23
    38ee:	67 95       	ror	r22
    38f0:	0a 94       	dec	r0
    38f2:	e2 f7       	brpl	.-8      	; 0x38ec <sysex_encode+0x82>
    38f4:	ad 81       	ldd	r26, Y+5	; 0x05
    38f6:	be 81       	ldd	r27, Y+6	; 0x06
    38f8:	8c 91       	ld	r24, X
    38fa:	86 2b       	or	r24, r22
    38fc:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    38fe:	2f 77       	andi	r18, 0x7F	; 127
    3900:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3902:	47 30       	cpi	r20, 0x07	; 7
    3904:	51 05       	cpc	r21, r1
    3906:	21 f7       	brne	.-56     	; 0x38d0 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3908:	08 94       	sec
    390a:	c1 1c       	adc	r12, r1
    390c:	d1 1c       	adc	r13, r1
    390e:	08 5f       	subi	r16, 0xF8	; 248
    3910:	1f 4f       	sbci	r17, 0xFF	; 255
    3912:	e7 e0       	ldi	r30, 0x07	; 7
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	ee 0e       	add	r14, r30
    3918:	ff 1e       	adc	r15, r31
    391a:	ca 14       	cp	r12, r10
    391c:	db 04       	cpc	r13, r11
    391e:	89 f6       	brne	.-94     	; 0x38c2 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3920:	c3 01       	movw	r24, r6
    3922:	67 e0       	ldi	r22, 0x07	; 7
    3924:	70 e0       	ldi	r23, 0x00	; 0
    3926:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__udivmodhi4>
   if (remainder) {
    392a:	88 23       	and	r24, r24
    392c:	d9 f1       	breq	.+118    	; 0x39a4 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    392e:	82 01       	movw	r16, r4
    3930:	00 0f       	add	r16, r16
    3932:	11 1f       	adc	r17, r17
    3934:	00 0f       	add	r16, r16
    3936:	11 1f       	adc	r17, r17
    3938:	00 0f       	add	r16, r16
    393a:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    393c:	78 01       	movw	r14, r16
    393e:	e4 18       	sub	r14, r4
    3940:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3942:	d1 01       	movw	r26, r2
    3944:	a0 0f       	add	r26, r16
    3946:	b1 1f       	adc	r27, r17
    3948:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    394a:	68 2f       	mov	r22, r24
    394c:	70 e0       	ldi	r23, 0x00	; 0
    394e:	61 15       	cp	r22, r1
    3950:	71 05       	cpc	r23, r1
    3952:	19 f1       	breq	.+70     	; 0x399a <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3954:	e9 81       	ldd	r30, Y+1	; 0x01
    3956:	fa 81       	ldd	r31, Y+2	; 0x02
    3958:	ee 0e       	add	r14, r30
    395a:	ff 1e       	adc	r15, r31
    395c:	c8 01       	movw	r24, r16
    395e:	01 96       	adiw	r24, 0x01	; 1
    3960:	28 0e       	add	r2, r24
    3962:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    3968:	f7 01       	movw	r30, r14
    396a:	41 91       	ld	r20, Z+
    396c:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    396e:	2f 5f       	subi	r18, 0xFF	; 255
    3970:	3f 4f       	sbci	r19, 0xFF	; 255
    3972:	84 2f       	mov	r24, r20
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	80 78       	andi	r24, 0x80	; 128
    3978:	90 70       	andi	r25, 0x00	; 0
    397a:	02 2e       	mov	r0, r18
    397c:	02 c0       	rjmp	.+4      	; 0x3982 <sysex_encode+0x118>
    397e:	95 95       	asr	r25
    3980:	87 95       	ror	r24
    3982:	0a 94       	dec	r0
    3984:	e2 f7       	brpl	.-8      	; 0x397e <sysex_encode+0x114>
    3986:	9c 91       	ld	r25, X
    3988:	89 2b       	or	r24, r25
    398a:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    398c:	4f 77       	andi	r20, 0x7F	; 127
    398e:	f1 01       	movw	r30, r2
    3990:	41 93       	st	Z+, r20
    3992:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3994:	26 17       	cp	r18, r22
    3996:	37 07       	cpc	r19, r23
    3998:	38 f3       	brcs	.-50     	; 0x3968 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    399a:	c8 01       	movw	r24, r16
    399c:	01 96       	adiw	r24, 0x01	; 1
    399e:	86 0f       	add	r24, r22
    39a0:	97 1f       	adc	r25, r23
    39a2:	07 c0       	rjmp	.+14     	; 0x39b2 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    39a4:	c2 01       	movw	r24, r4
    39a6:	88 0f       	add	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	88 0f       	add	r24, r24
    39ac:	99 1f       	adc	r25, r25
    39ae:	88 0f       	add	r24, r24
    39b0:	99 1f       	adc	r25, r25
   }
}
    39b2:	26 96       	adiw	r28, 0x06	; 6
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	f8 94       	cli
    39b8:	de bf       	out	0x3e, r29	; 62
    39ba:	0f be       	out	0x3f, r0	; 63
    39bc:	cd bf       	out	0x3d, r28	; 61
    39be:	df 91       	pop	r29
    39c0:	cf 91       	pop	r28
    39c2:	1f 91       	pop	r17
    39c4:	0f 91       	pop	r16
    39c6:	ff 90       	pop	r15
    39c8:	ef 90       	pop	r14
    39ca:	df 90       	pop	r13
    39cc:	cf 90       	pop	r12
    39ce:	bf 90       	pop	r11
    39d0:	af 90       	pop	r10
    39d2:	9f 90       	pop	r9
    39d4:	8f 90       	pop	r8
    39d6:	7f 90       	pop	r7
    39d8:	6f 90       	pop	r6
    39da:	5f 90       	pop	r5
    39dc:	4f 90       	pop	r4
    39de:	3f 90       	pop	r3
    39e0:	2f 90       	pop	r2
    39e2:	08 95       	ret

000039e4 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    39e4:	6f 92       	push	r6
    39e6:	7f 92       	push	r7
    39e8:	8f 92       	push	r8
    39ea:	9f 92       	push	r9
    39ec:	af 92       	push	r10
    39ee:	bf 92       	push	r11
    39f0:	cf 92       	push	r12
    39f2:	df 92       	push	r13
    39f4:	ef 92       	push	r14
    39f6:	ff 92       	push	r15
    39f8:	0f 93       	push	r16
    39fa:	1f 93       	push	r17
    39fc:	cf 93       	push	r28
    39fe:	df 93       	push	r29
    3a00:	3c 01       	movw	r6, r24
    3a02:	4b 01       	movw	r8, r22
    3a04:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3a06:	42 30       	cpi	r20, 0x02	; 2
    3a08:	51 05       	cpc	r21, r1
    3a0a:	08 f4       	brcc	.+2      	; 0x3a0e <sysex_decode+0x2a>
    3a0c:	6f c0       	rjmp	.+222    	; 0x3aec <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3a0e:	7a 01       	movw	r14, r20
    3a10:	f6 94       	lsr	r15
    3a12:	e7 94       	ror	r14
    3a14:	f6 94       	lsr	r15
    3a16:	e7 94       	ror	r14
    3a18:	f6 94       	lsr	r15
    3a1a:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3a1c:	e1 14       	cp	r14, r1
    3a1e:	f1 04       	cpc	r15, r1
    3a20:	29 f1       	breq	.+74     	; 0x3a6c <sysex_decode+0x88>
    3a22:	eb 01       	movw	r28, r22
    3a24:	b3 01       	movw	r22, r6
    3a26:	00 e0       	ldi	r16, 0x00	; 0
    3a28:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a2a:	cc 24       	eor	r12, r12
    3a2c:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a2e:	de 01       	movw	r26, r28
    3a30:	11 96       	adiw	r26, 0x01	; 1
    3a32:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a34:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3a36:	2d 91       	ld	r18, X+
    3a38:	2f 77       	andi	r18, 0x7F	; 127
    3a3a:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a3c:	4f 5f       	subi	r20, 0xFF	; 255
    3a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a40:	88 81       	ld	r24, Y
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	04 2e       	mov	r0, r20
    3a46:	02 c0       	rjmp	.+4      	; 0x3a4c <sysex_decode+0x68>
    3a48:	88 0f       	add	r24, r24
    3a4a:	99 1f       	adc	r25, r25
    3a4c:	0a 94       	dec	r0
    3a4e:	e2 f7       	brpl	.-8      	; 0x3a48 <sysex_decode+0x64>
    3a50:	80 78       	andi	r24, 0x80	; 128
    3a52:	28 2b       	or	r18, r24
    3a54:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a56:	47 30       	cpi	r20, 0x07	; 7
    3a58:	51 05       	cpc	r21, r1
    3a5a:	69 f7       	brne	.-38     	; 0x3a36 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3a5c:	0f 5f       	subi	r16, 0xFF	; 255
    3a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a60:	28 96       	adiw	r28, 0x08	; 8
    3a62:	69 5f       	subi	r22, 0xF9	; 249
    3a64:	7f 4f       	sbci	r23, 0xFF	; 255
    3a66:	0e 15       	cp	r16, r14
    3a68:	1f 05       	cpc	r17, r15
    3a6a:	09 f7       	brne	.-62     	; 0x3a2e <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3a6c:	5a 2d       	mov	r21, r10
    3a6e:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3a70:	99 f1       	breq	.+102    	; 0x3ad8 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3a72:	e7 01       	movw	r28, r14
    3a74:	cc 0f       	add	r28, r28
    3a76:	dd 1f       	adc	r29, r29
    3a78:	cc 0f       	add	r28, r28
    3a7a:	dd 1f       	adc	r29, r29
    3a7c:	cc 0f       	add	r28, r28
    3a7e:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3a80:	8e 01       	movw	r16, r28
    3a82:	0e 19       	sub	r16, r14
    3a84:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3a86:	65 2f       	mov	r22, r21
    3a88:	70 e0       	ldi	r23, 0x00	; 0
    3a8a:	61 50       	subi	r22, 0x01	; 1
    3a8c:	70 40       	sbci	r23, 0x00	; 0
    3a8e:	f9 f0       	breq	.+62     	; 0x3ace <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a90:	ce 01       	movw	r24, r28
    3a92:	01 96       	adiw	r24, 0x01	; 1
    3a94:	d4 01       	movw	r26, r8
    3a96:	a8 0f       	add	r26, r24
    3a98:	b9 1f       	adc	r27, r25
    3a9a:	f3 01       	movw	r30, r6
    3a9c:	e0 0f       	add	r30, r16
    3a9e:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3aa4:	c8 0d       	add	r28, r8
    3aa6:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3aa8:	4d 91       	ld	r20, X+
    3aaa:	4f 77       	andi	r20, 0x7F	; 127
    3aac:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3aae:	2f 5f       	subi	r18, 0xFF	; 255
    3ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab2:	88 81       	ld	r24, Y
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	02 2e       	mov	r0, r18
    3ab8:	02 c0       	rjmp	.+4      	; 0x3abe <sysex_decode+0xda>
    3aba:	88 0f       	add	r24, r24
    3abc:	99 1f       	adc	r25, r25
    3abe:	0a 94       	dec	r0
    3ac0:	e2 f7       	brpl	.-8      	; 0x3aba <sysex_decode+0xd6>
    3ac2:	80 78       	andi	r24, 0x80	; 128
    3ac4:	48 2b       	or	r20, r24
    3ac6:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3ac8:	26 17       	cp	r18, r22
    3aca:	37 07       	cpc	r19, r23
    3acc:	68 f3       	brcs	.-38     	; 0x3aa8 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3ace:	c8 01       	movw	r24, r16
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	85 0f       	add	r24, r21
    3ad4:	91 1d       	adc	r25, r1
    3ad6:	0c c0       	rjmp	.+24     	; 0x3af0 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3ad8:	c7 01       	movw	r24, r14
    3ada:	88 0f       	add	r24, r24
    3adc:	99 1f       	adc	r25, r25
    3ade:	88 0f       	add	r24, r24
    3ae0:	99 1f       	adc	r25, r25
    3ae2:	88 0f       	add	r24, r24
    3ae4:	99 1f       	adc	r25, r25
    3ae6:	8e 19       	sub	r24, r14
    3ae8:	9f 09       	sbc	r25, r15
    3aea:	02 c0       	rjmp	.+4      	; 0x3af0 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3aec:	80 e0       	ldi	r24, 0x00	; 0
    3aee:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3af0:	df 91       	pop	r29
    3af2:	cf 91       	pop	r28
    3af4:	1f 91       	pop	r17
    3af6:	0f 91       	pop	r16
    3af8:	ff 90       	pop	r15
    3afa:	ef 90       	pop	r14
    3afc:	df 90       	pop	r13
    3afe:	cf 90       	pop	r12
    3b00:	bf 90       	pop	r11
    3b02:	af 90       	pop	r10
    3b04:	9f 90       	pop	r9
    3b06:	8f 90       	pop	r8
    3b08:	7f 90       	pop	r7
    3b0a:	6f 90       	pop	r6
    3b0c:	08 95       	ret

00003b0e <__mulsi3>:
    3b0e:	62 9f       	mul	r22, r18
    3b10:	d0 01       	movw	r26, r0
    3b12:	73 9f       	mul	r23, r19
    3b14:	f0 01       	movw	r30, r0
    3b16:	82 9f       	mul	r24, r18
    3b18:	e0 0d       	add	r30, r0
    3b1a:	f1 1d       	adc	r31, r1
    3b1c:	64 9f       	mul	r22, r20
    3b1e:	e0 0d       	add	r30, r0
    3b20:	f1 1d       	adc	r31, r1
    3b22:	92 9f       	mul	r25, r18
    3b24:	f0 0d       	add	r31, r0
    3b26:	83 9f       	mul	r24, r19
    3b28:	f0 0d       	add	r31, r0
    3b2a:	74 9f       	mul	r23, r20
    3b2c:	f0 0d       	add	r31, r0
    3b2e:	65 9f       	mul	r22, r21
    3b30:	f0 0d       	add	r31, r0
    3b32:	99 27       	eor	r25, r25
    3b34:	72 9f       	mul	r23, r18
    3b36:	b0 0d       	add	r27, r0
    3b38:	e1 1d       	adc	r30, r1
    3b3a:	f9 1f       	adc	r31, r25
    3b3c:	63 9f       	mul	r22, r19
    3b3e:	b0 0d       	add	r27, r0
    3b40:	e1 1d       	adc	r30, r1
    3b42:	f9 1f       	adc	r31, r25
    3b44:	bd 01       	movw	r22, r26
    3b46:	cf 01       	movw	r24, r30
    3b48:	11 24       	eor	r1, r1
    3b4a:	08 95       	ret

00003b4c <__udivmodhi4>:
    3b4c:	aa 1b       	sub	r26, r26
    3b4e:	bb 1b       	sub	r27, r27
    3b50:	51 e1       	ldi	r21, 0x11	; 17
    3b52:	07 c0       	rjmp	.+14     	; 0x3b62 <__udivmodhi4_ep>

00003b54 <__udivmodhi4_loop>:
    3b54:	aa 1f       	adc	r26, r26
    3b56:	bb 1f       	adc	r27, r27
    3b58:	a6 17       	cp	r26, r22
    3b5a:	b7 07       	cpc	r27, r23
    3b5c:	10 f0       	brcs	.+4      	; 0x3b62 <__udivmodhi4_ep>
    3b5e:	a6 1b       	sub	r26, r22
    3b60:	b7 0b       	sbc	r27, r23

00003b62 <__udivmodhi4_ep>:
    3b62:	88 1f       	adc	r24, r24
    3b64:	99 1f       	adc	r25, r25
    3b66:	5a 95       	dec	r21
    3b68:	a9 f7       	brne	.-22     	; 0x3b54 <__udivmodhi4_loop>
    3b6a:	80 95       	com	r24
    3b6c:	90 95       	com	r25
    3b6e:	bc 01       	movw	r22, r24
    3b70:	cd 01       	movw	r24, r26
    3b72:	08 95       	ret

00003b74 <__divmodhi4>:
    3b74:	97 fb       	bst	r25, 7
    3b76:	09 2e       	mov	r0, r25
    3b78:	07 26       	eor	r0, r23
    3b7a:	0a d0       	rcall	.+20     	; 0x3b90 <__divmodhi4_neg1>
    3b7c:	77 fd       	sbrc	r23, 7
    3b7e:	04 d0       	rcall	.+8      	; 0x3b88 <__divmodhi4_neg2>
    3b80:	e5 df       	rcall	.-54     	; 0x3b4c <__udivmodhi4>
    3b82:	06 d0       	rcall	.+12     	; 0x3b90 <__divmodhi4_neg1>
    3b84:	00 20       	and	r0, r0
    3b86:	1a f4       	brpl	.+6      	; 0x3b8e <__divmodhi4_exit>

00003b88 <__divmodhi4_neg2>:
    3b88:	70 95       	com	r23
    3b8a:	61 95       	neg	r22
    3b8c:	7f 4f       	sbci	r23, 0xFF	; 255

00003b8e <__divmodhi4_exit>:
    3b8e:	08 95       	ret

00003b90 <__divmodhi4_neg1>:
    3b90:	f6 f7       	brtc	.-4      	; 0x3b8e <__divmodhi4_exit>
    3b92:	90 95       	com	r25
    3b94:	81 95       	neg	r24
    3b96:	9f 4f       	sbci	r25, 0xFF	; 255
    3b98:	08 95       	ret

00003b9a <memcpy>:
    3b9a:	fb 01       	movw	r30, r22
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	02 c0       	rjmp	.+4      	; 0x3ba4 <memcpy+0xa>
    3ba0:	01 90       	ld	r0, Z+
    3ba2:	0d 92       	st	X+, r0
    3ba4:	41 50       	subi	r20, 0x01	; 1
    3ba6:	50 40       	sbci	r21, 0x00	; 0
    3ba8:	d8 f7       	brcc	.-10     	; 0x3ba0 <memcpy+0x6>
    3baa:	08 95       	ret

00003bac <memmove>:
    3bac:	68 17       	cp	r22, r24
    3bae:	79 07       	cpc	r23, r25
    3bb0:	68 f4       	brcc	.+26     	; 0x3bcc <memmove+0x20>
    3bb2:	fb 01       	movw	r30, r22
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	e4 0f       	add	r30, r20
    3bb8:	f5 1f       	adc	r31, r21
    3bba:	a4 0f       	add	r26, r20
    3bbc:	b5 1f       	adc	r27, r21
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <memmove+0x18>
    3bc0:	02 90       	ld	r0, -Z
    3bc2:	0e 92       	st	-X, r0
    3bc4:	41 50       	subi	r20, 0x01	; 1
    3bc6:	50 40       	sbci	r21, 0x00	; 0
    3bc8:	d8 f7       	brcc	.-10     	; 0x3bc0 <memmove+0x14>
    3bca:	08 95       	ret
    3bcc:	0c 94 cd 1d 	jmp	0x3b9a	; 0x3b9a <memcpy>

00003bd0 <__eerd_block_m6450a>:
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22

00003bd4 <__eerd_blraw_m6450a>:
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	f9 99       	sbic	0x1f, 1	; 31
    3bd8:	fe cf       	rjmp	.-4      	; 0x3bd6 <__eerd_blraw_m6450a+0x2>
    3bda:	06 c0       	rjmp	.+12     	; 0x3be8 <__eerd_blraw_m6450a+0x14>
    3bdc:	f2 bd       	out	0x22, r31	; 34
    3bde:	e1 bd       	out	0x21, r30	; 33
    3be0:	f8 9a       	sbi	0x1f, 0	; 31
    3be2:	31 96       	adiw	r30, 0x01	; 1
    3be4:	00 b4       	in	r0, 0x20	; 32
    3be6:	0d 92       	st	X+, r0
    3be8:	41 50       	subi	r20, 0x01	; 1
    3bea:	50 40       	sbci	r21, 0x00	; 0
    3bec:	b8 f7       	brcc	.-18     	; 0x3bdc <__eerd_blraw_m6450a+0x8>
    3bee:	08 95       	ret

00003bf0 <__eerd_word_m6450a>:
    3bf0:	a8 e1       	ldi	r26, 0x18	; 24
    3bf2:	b0 e0       	ldi	r27, 0x00	; 0
    3bf4:	42 e0       	ldi	r20, 0x02	; 2
    3bf6:	50 e0       	ldi	r21, 0x00	; 0
    3bf8:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <__eerd_blraw_m6450a>

00003bfc <__eeupd_block_m6450a>:
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	a4 0f       	add	r26, r20
    3c00:	b5 1f       	adc	r27, r21
    3c02:	41 50       	subi	r20, 0x01	; 1
    3c04:	50 40       	sbci	r21, 0x00	; 0
    3c06:	48 f0       	brcs	.+18     	; 0x3c1a <__eeupd_block_m6450a+0x1e>
    3c08:	cb 01       	movw	r24, r22
    3c0a:	84 0f       	add	r24, r20
    3c0c:	95 1f       	adc	r25, r21
    3c0e:	2e 91       	ld	r18, -X
    3c10:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__eeupd_r18_m6450a>
    3c14:	41 50       	subi	r20, 0x01	; 1
    3c16:	50 40       	sbci	r21, 0x00	; 0
    3c18:	d0 f7       	brcc	.-12     	; 0x3c0e <__eeupd_block_m6450a+0x12>
    3c1a:	08 95       	ret

00003c1c <__eeupd_byte_m6450a>:
    3c1c:	26 2f       	mov	r18, r22

00003c1e <__eeupd_r18_m6450a>:
    3c1e:	f9 99       	sbic	0x1f, 1	; 31
    3c20:	fe cf       	rjmp	.-4      	; 0x3c1e <__eeupd_r18_m6450a>
    3c22:	92 bd       	out	0x22, r25	; 34
    3c24:	81 bd       	out	0x21, r24	; 33
    3c26:	f8 9a       	sbi	0x1f, 0	; 31
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	00 b4       	in	r0, 0x20	; 32
    3c2c:	02 16       	cp	r0, r18
    3c2e:	31 f0       	breq	.+12     	; 0x3c3c <__eeupd_r18_m6450a+0x1e>
    3c30:	20 bd       	out	0x20, r18	; 32
    3c32:	0f b6       	in	r0, 0x3f	; 63
    3c34:	f8 94       	cli
    3c36:	fa 9a       	sbi	0x1f, 2	; 31
    3c38:	f9 9a       	sbi	0x1f, 1	; 31
    3c3a:	0f be       	out	0x3f, r0	; 63
    3c3c:	08 95       	ret

00003c3e <__eeupd_word_m6450a>:
    3c3e:	01 96       	adiw	r24, 0x01	; 1
    3c40:	27 2f       	mov	r18, r23
    3c42:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__eeupd_r18_m6450a>
    3c46:	0c 94 0e 1e 	jmp	0x3c1c	; 0x3c1c <__eeupd_byte_m6450a>

00003c4a <_exit>:
    3c4a:	f8 94       	cli

00003c4c <__stop_program>:
    3c4c:	ff cf       	rjmp	.-2      	; 0x3c4c <__stop_program>
