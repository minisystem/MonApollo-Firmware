
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000016f8  0000178c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  0080014e  0080014e  000017da  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000017dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00002018  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b16  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb8  00000000  00000000  00004d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000136d  00000000  00000000  000058e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008cc  00000000  00000000  00006c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000db9  00000000  00000000  00007520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cdc  00000000  00000000  000082d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00009fb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e8 ef       	ldi	r30, 0xF8	; 248
      78:	f6 e1       	ldi	r31, 0x16	; 22
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ae 34       	cpi	r26, 0x4E	; 78
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	12 e0       	ldi	r17, 0x02	; 2
      88:	ae e4       	ldi	r26, 0x4E	; 78
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a2 35       	cpi	r26, 0x52	; 82
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
      9a:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <setup_dac>:
#include "port_map.h"
#include "dac.h"

void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
      c8:	83 b3       	in	r24, 0x13	; 19
      ca:	83 60       	ori	r24, 0x03	; 3
      cc:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
      ce:	8f ef       	ldi	r24, 0xFF	; 255
      d0:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
      d2:	97 b1       	in	r25, 0x07	; 7
      d4:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
      d6:	e9 ed       	ldi	r30, 0xD9	; 217
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	8f 60       	ori	r24, 0x0F	; 15
      de:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
      e0:	ea ed       	ldi	r30, 0xDA	; 218
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 7f       	andi	r24, 0xF0	; 240
      e8:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
      ea:	84 b3       	in	r24, 0x14	; 20
      ec:	83 60       	ori	r24, 0x03	; 3
      ee:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
      f0:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
      f2:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
      f4:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
      f6:	a0 9a       	sbi	0x14, 0	; 20
}
      f8:	08 95       	ret

000000fa <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
      fa:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
      fc:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
      fe:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     100:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     102:	62 b9       	out	0x02, r22	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     104:	00 c0       	rjmp	.+0      	; 0x106 <set_dac+0xc>

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     106:	ea ed       	ldi	r30, 0xDA	; 218
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	40 81       	ld	r20, Z
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	b9 01       	movw	r22, r18
     112:	02 c0       	rjmp	.+4      	; 0x118 <set_dac+0x1e>
     114:	66 0f       	add	r22, r22
     116:	77 1f       	adc	r23, r23
     118:	8a 95       	dec	r24
     11a:	e2 f7       	brpl	.-8      	; 0x114 <set_dac+0x1a>
     11c:	cb 01       	movw	r24, r22
     11e:	94 2f       	mov	r25, r20
     120:	98 2b       	or	r25, r24
     122:	90 83       	st	Z, r25
     124:	73 e0       	ldi	r23, 0x03	; 3
     126:	7a 95       	dec	r23
     128:	f1 f7       	brne	.-4      	; 0x126 <set_dac+0x2c>
     12a:	00 00       	nop
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     12c:	90 81       	ld	r25, Z
     12e:	80 95       	com	r24
     130:	89 23       	and	r24, r25
     132:	80 83       	st	Z, r24
	
}
     134:	08 95       	ret

00000136 <display_dec>:
#include "display.h"
#include "port_map.h"
#include "display_map.h"

void display_dec(uint16_t number, uint8_t digit)
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	2a 97       	sbiw	r28, 0x0a	; 10
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     14a:	de 01       	movw	r26, r28
     14c:	11 96       	adiw	r26, 0x01	; 1
     14e:	e0 e0       	ldi	r30, 0x00	; 0
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	3a e0       	ldi	r19, 0x0A	; 10
     154:	01 90       	ld	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	31 50       	subi	r19, 0x01	; 1
     15a:	e1 f7       	brne	.-8      	; 0x154 <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     15c:	3f ef       	ldi	r19, 0xFF	; 255
     15e:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     160:	ea ed       	ldi	r30, 0xDA	; 218
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	30 81       	ld	r19, Z
     166:	30 61       	ori	r19, 0x10	; 16
     168:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     16a:	30 81       	ld	r19, Z
     16c:	3f 7e       	andi	r19, 0xEF	; 239
     16e:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     170:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     172:	30 81       	ld	r19, Z
     174:	30 62       	ori	r19, 0x20	; 32
     176:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     178:	30 81       	ld	r19, Z
     17a:	3f 7d       	andi	r19, 0xDF	; 223
     17c:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
     17e:	62 30       	cpi	r22, 0x02	; 2
     180:	f9 f0       	breq	.+62     	; 0x1c0 <display_dec+0x8a>
     182:	63 30       	cpi	r22, 0x03	; 3
     184:	18 f4       	brcc	.+6      	; 0x18c <display_dec+0x56>
     186:	61 30       	cpi	r22, 0x01	; 1
     188:	a1 f5       	brne	.+104    	; 0x1f2 <display_dec+0xbc>
     18a:	0d c0       	rjmp	.+26     	; 0x1a6 <display_dec+0x70>
     18c:	64 30       	cpi	r22, 0x04	; 4
     18e:	29 f1       	breq	.+74     	; 0x1da <display_dec+0xa4>
     190:	68 30       	cpi	r22, 0x08	; 8
     192:	79 f5       	brne	.+94     	; 0x1f2 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     194:	6a e0       	ldi	r22, 0x0A	; 10
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     19c:	fe 01       	movw	r30, r28
     19e:	e8 0f       	add	r30, r24
     1a0:	f9 1f       	adc	r31, r25
     1a2:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     1a4:	26 c0       	rjmp	.+76     	; 0x1f2 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     1a6:	64 e6       	ldi	r22, 0x64	; 100
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     1ae:	6a e0       	ldi	r22, 0x0A	; 10
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     1b6:	fe 01       	movw	r30, r28
     1b8:	e6 0f       	add	r30, r22
     1ba:	f7 1f       	adc	r31, r23
     1bc:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     1be:	19 c0       	rjmp	.+50     	; 0x1f2 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     1c0:	68 ee       	ldi	r22, 0xE8	; 232
     1c2:	73 e0       	ldi	r23, 0x03	; 3
     1c4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     1c8:	64 e6       	ldi	r22, 0x64	; 100
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     1d0:	fe 01       	movw	r30, r28
     1d2:	e6 0f       	add	r30, r22
     1d4:	f7 1f       	adc	r31, r23
     1d6:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     1d8:	0c c0       	rjmp	.+24     	; 0x1f2 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     1da:	60 e1       	ldi	r22, 0x10	; 16
     1dc:	77 e2       	ldi	r23, 0x27	; 39
     1de:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     1e2:	68 ee       	ldi	r22, 0xE8	; 232
     1e4:	73 e0       	ldi	r23, 0x03	; 3
     1e6:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     1ea:	fe 01       	movw	r30, r28
     1ec:	e6 0f       	add	r30, r22
     1ee:	f7 1f       	adc	r31, r23
     1f0:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     1f2:	20 95       	com	r18
     1f4:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     1f6:	ea ed       	ldi	r30, 0xDA	; 218
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	80 61       	ori	r24, 0x10	; 16
     1fe:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     200:	80 81       	ld	r24, Z
     202:	8f 7e       	andi	r24, 0xEF	; 239
     204:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
     206:	2a 96       	adiw	r28, 0x0a	; 10
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	de bf       	out	0x3e, r29	; 62
     20e:	0f be       	out	0x3f, r0	; 63
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <note_on_event>:

volatile uint8_t place = 0; //digit place for LED display

void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	value_to_display = note;
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	50 93 0f 01 	sts	0x010F, r21
     21e:	40 93 0e 01 	sts	0x010E, r20
	
	if (velocity == 0) {
     222:	22 23       	and	r18, r18
     224:	11 f4       	brne	.+4      	; 0x22a <note_on_event+0x12>
		
		PORTF &= ~(1<<GATE);
     226:	89 98       	cbi	0x11, 1	; 17
     228:	08 95       	ret
	} else {
		PORTF |= (1<<GATE);
     22a:	89 9a       	sbi	0x11, 1	; 17
     22c:	08 95       	ret

0000022e <note_off_event>:
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	PORTF &= ~(1<<GATE);
     22e:	89 98       	cbi	0x11, 1	; 17
}
     230:	08 95       	ret

00000232 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     232:	87 e2       	ldi	r24, 0x27	; 39
     234:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     238:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     23c:	88 e9       	ldi	r24, 0x98	; 152
     23e:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     242:	08 95       	ret

00000244 <__vector_13>:
	THOUS,
};



ISR (USART_RX_vect) { // USART receive interrupt
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	2f 93       	push	r18
     250:	3f 93       	push	r19
     252:	4f 93       	push	r20
     254:	5f 93       	push	r21
     256:	6f 93       	push	r22
     258:	7f 93       	push	r23
     25a:	8f 93       	push	r24
     25c:	9f 93       	push	r25
     25e:	af 93       	push	r26
     260:	bf 93       	push	r27
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	0f 92       	push	r0
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
	 
	uint8_t inByte = UDR0;
     270:	80 91 c6 00 	lds	r24, 0x00C6
     274:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);	
     276:	85 e6       	ldi	r24, 0x65	; 101
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	ae 01       	movw	r20, r28
     27e:	4f 5f       	subi	r20, 0xFF	; 255
     280:	5f 4f       	sbci	r21, 0xFF	; 255
     282:	0e 94 46 07 	call	0xe8c	; 0xe8c <midi_device_input>
		 //if ((status_byte >> 0) & 1) {PORTF |= (1<<GATE);} else {PORTF &= ~(1<<GATE);}
		////PORTF ^= (1<<GATE);	 
     //}	else if (value_to_display == 0) {PORTF &= ~(1<<GATE);}
	  
	
}
     286:	0f 90       	pop	r0
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	ff 91       	pop	r31
     28e:	ef 91       	pop	r30
     290:	bf 91       	pop	r27
     292:	af 91       	pop	r26
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	7f 91       	pop	r23
     29a:	6f 91       	pop	r22
     29c:	5f 91       	pop	r21
     29e:	4f 91       	pop	r20
     2a0:	3f 91       	pop	r19
     2a2:	2f 91       	pop	r18
     2a4:	0f 90       	pop	r0
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	0f 90       	pop	r0
     2aa:	1f 90       	pop	r1
     2ac:	18 95       	reti

000002ae <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
     2ae:	1f 92       	push	r1
     2b0:	0f 92       	push	r0
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	0f 92       	push	r0
     2b6:	11 24       	eor	r1, r1
     2b8:	2f 93       	push	r18
     2ba:	3f 93       	push	r19
     2bc:	4f 93       	push	r20
     2be:	5f 93       	push	r21
     2c0:	6f 93       	push	r22
     2c2:	7f 93       	push	r23
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
     2cc:	ef 93       	push	r30
     2ce:	ff 93       	push	r31
	
	display_dec(value_to_display, digit[place]);
     2d0:	80 91 0e 01 	lds	r24, 0x010E
     2d4:	90 91 0f 01 	lds	r25, 0x010F
     2d8:	20 91 4e 01 	lds	r18, 0x014E
     2dc:	ea e0       	ldi	r30, 0x0A	; 10
     2de:	f1 e0       	ldi	r31, 0x01	; 1
     2e0:	e2 0f       	add	r30, r18
     2e2:	f1 1d       	adc	r31, r1
     2e4:	60 81       	ld	r22, Z
     2e6:	0e 94 9b 00 	call	0x136	; 0x136 <display_dec>
	
	scan_pots_and_update_control_voltages();		
     2ea:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <scan_pots_and_update_control_voltages>

		
	//do SPI read/write every 5 interrupts (16.5 ms)
	if (switch_timer++ == 5)
     2ee:	80 91 4f 01 	lds	r24, 0x014F
     2f2:	98 2f       	mov	r25, r24
     2f4:	9f 5f       	subi	r25, 0xFF	; 255
     2f6:	90 93 4f 01 	sts	0x014F, r25
     2fa:	85 30       	cpi	r24, 0x05	; 5
     2fc:	21 f4       	brne	.+8      	; 0x306 <__vector_5+0x58>
	{
		switch_timer = 0;
     2fe:	10 92 4f 01 	sts	0x014F, r1
		update_spi();	
     302:	0e 94 2c 03 	call	0x658	; 0x658 <update_spi>
			  	
	}
		
	//increment digit display place
	if (place++ == 3) //post increment
     306:	80 91 4e 01 	lds	r24, 0x014E
     30a:	98 2f       	mov	r25, r24
     30c:	9f 5f       	subi	r25, 0xFF	; 255
     30e:	90 93 4e 01 	sts	0x014E, r25
     312:	83 30       	cpi	r24, 0x03	; 3
     314:	11 f4       	brne	.+4      	; 0x31a <__vector_5+0x6c>
	{
		place = 0;
     316:	10 92 4e 01 	sts	0x014E, r1
	}
	

	
}	
     31a:	ff 91       	pop	r31
     31c:	ef 91       	pop	r30
     31e:	bf 91       	pop	r27
     320:	af 91       	pop	r26
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	7f 91       	pop	r23
     328:	6f 91       	pop	r22
     32a:	5f 91       	pop	r21
     32c:	4f 91       	pop	r20
     32e:	3f 91       	pop	r19
     330:	2f 91       	pop	r18
     332:	0f 90       	pop	r0
     334:	0f be       	out	0x3f, r0	; 63
     336:	0f 90       	pop	r0
     338:	1f 90       	pop	r1
     33a:	18 95       	reti

0000033c <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     33c:	80 e8       	ldi	r24, 0x80	; 128
     33e:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     340:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     342:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     344:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     346:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     348:	a2 98       	cbi	0x14, 2	; 20
	
	setup_spi(); 
     34a:	0e 94 0d 03 	call	0x61a	; 0x61a <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     34e:	a9 ed       	ldi	r26, 0xD9	; 217
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	8c 91       	ld	r24, X
     354:	80 6c       	ori	r24, 0xC0	; 192
     356:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     358:	ea ed       	ldi	r30, 0xDA	; 218
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	80 6c       	ori	r24, 0xC0	; 192
     360:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     362:	81 b1       	in	r24, 0x01	; 1
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     368:	92 b1       	in	r25, 0x02	; 2
     36a:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     36c:	8c 91       	ld	r24, X
     36e:	80 63       	ori	r24, 0x30	; 48
     370:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     372:	80 81       	ld	r24, Z
     374:	8f 7c       	andi	r24, 0xCF	; 207
     376:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<ISW8_SW); //set ISW8_SW pin as input
     378:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     37a:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     37e:	0e 94 64 00 	call	0xc8	; 0xc8 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     382:	c5 e6       	ldi	r28, 0x65	; 101
     384:	d1 e0       	ldi	r29, 0x01	; 1
     386:	ce 01       	movw	r24, r28
     388:	0e 94 15 07 	call	0xe2a	; 0xe2a <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     38c:	ce 01       	movw	r24, r28
     38e:	6c e0       	ldi	r22, 0x0C	; 12
     390:	71 e0       	ldi	r23, 0x01	; 1
     392:	0e 94 dd 06 	call	0xdba	; 0xdba <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     396:	ce 01       	movw	r24, r28
     398:	67 e1       	ldi	r22, 0x17	; 23
     39a:	71 e0       	ldi	r23, 0x01	; 1
     39c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     3a0:	0e 94 19 01 	call	0x232	; 0x232 <setup_midi_usart>
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
     3a4:	e0 eb       	ldi	r30, 0xB0	; 176
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	86 60       	ori	r24, 0x06	; 6
     3ac:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
     3ae:	e0 e7       	ldi	r30, 0x70	; 112
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	80 83       	st	Z, r24
	sei(); //enable global interrupts
     3b8:	78 94       	sei

	while(1)
	{	
		midi_device_process(&midi_device);
     3ba:	ce 01       	movw	r24, r28
     3bc:	0e 94 70 09 	call	0x12e0	; 0x12e0 <midi_device_process>
     3c0:	fc cf       	rjmp	.-8      	; 0x3ba <main+0x7e>

000003c2 <scan_pots_and_update_control_voltages>:
	{SUSTAIN_1,		DAC_MUX_EN3},
	{RELEASE_2,		DAC_MUX_EN3},
	{RELEASE_1,		DAC_MUX_EN3}							
};

void scan_pots_and_update_control_voltages(void) {
     3c2:	2f 92       	push	r2
     3c4:	3f 92       	push	r3
     3c6:	4f 92       	push	r4
     3c8:	5f 92       	push	r5
     3ca:	6f 92       	push	r6
     3cc:	7f 92       	push	r7
     3ce:	8f 92       	push	r8
     3d0:	9f 92       	push	r9
     3d2:	af 92       	push	r10
     3d4:	bf 92       	push	r11
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cc 24       	eor	r12, r12
     3e8:	dd 24       	eor	r13, r13
     3ea:	c3 94       	inc	r12
     3ec:	00 e0       	ldi	r16, 0x00	; 0
     3ee:	10 e0       	ldi	r17, 0x00	; 0

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{
		DATA_BUS = i;
		POT_MUX &= ~(1<<POTMUX_EN0);
     3f0:	0f 2e       	mov	r0, r31
     3f2:	fa ed       	ldi	r31, 0xDA	; 218
     3f4:	ef 2e       	mov	r14, r31
     3f6:	ff 24       	eor	r15, r15
     3f8:	f0 2d       	mov	r31, r0
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     3fa:	ca e7       	ldi	r28, 0x7A	; 122
     3fc:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
		POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
		//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
		
		//adc_previous = adc_value;
		adc_value = ADCL;
     3fe:	0f 2e       	mov	r0, r31
     400:	f8 e7       	ldi	r31, 0x78	; 120
     402:	8f 2e       	mov	r8, r31
     404:	99 24       	eor	r9, r9
     406:	f0 2d       	mov	r31, r0
		adc_value = adc_value | (ADCH <<8);
     408:	0f 2e       	mov	r0, r31
     40a:	f9 e7       	ldi	r31, 0x79	; 121
     40c:	4f 2e       	mov	r4, r31
     40e:	55 24       	eor	r5, r5
     410:	f0 2d       	mov	r31, r0
		} else if (i == 11) //exception to handle ARP_RATE pot
		{
			//store ARP pot value, but don't set DAC
			
		} else {
			set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
     412:	0f 2e       	mov	r0, r31
     414:	fe e2       	ldi	r31, 0x2E	; 46
     416:	2f 2e       	mov	r2, r31
     418:	f1 e0       	ldi	r31, 0x01	; 1
     41a:	3f 2e       	mov	r3, r31
     41c:	f0 2d       	mov	r31, r0
     41e:	05 c0       	rjmp	.+10     	; 0x42a <scan_pots_and_update_control_voltages+0x68>
};

void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     420:	0f 5f       	subi	r16, 0xFF	; 255
     422:	1f 4f       	sbci	r17, 0xFF	; 255
     424:	08 94       	sec
     426:	c1 1c       	adc	r12, r1
     428:	d1 1c       	adc	r13, r1
     42a:	f8 01       	movw	r30, r16
	{
		DATA_BUS = i;
     42c:	02 b9       	out	0x02, r16	; 2
		POT_MUX &= ~(1<<POTMUX_EN0);
     42e:	d7 01       	movw	r26, r14
     430:	8c 91       	ld	r24, X
     432:	8f 7b       	andi	r24, 0xBF	; 191
     434:	8c 93       	st	X, r24
     436:	00 c0       	rjmp	.+0      	; 0x438 <scan_pots_and_update_control_voltages+0x76>
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     438:	88 81       	ld	r24, Y
     43a:	80 64       	ori	r24, 0x40	; 64
     43c:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     43e:	88 81       	ld	r24, Y
     440:	86 fd       	sbrc	r24, 6
     442:	fd cf       	rjmp	.-6      	; 0x43e <scan_pots_and_update_control_voltages+0x7c>
		POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
     444:	d7 01       	movw	r26, r14
     446:	8c 91       	ld	r24, X
     448:	80 64       	ori	r24, 0x40	; 64
     44a:	8c 93       	st	X, r24
		//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
		
		//adc_previous = adc_value;
		adc_value = ADCL;
     44c:	d4 01       	movw	r26, r8
     44e:	8c 91       	ld	r24, X
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	90 93 53 01 	sts	0x0153, r25
     456:	80 93 52 01 	sts	0x0152, r24
		adc_value = adc_value | (ADCH <<8);
     45a:	d2 01       	movw	r26, r4
     45c:	2c 91       	ld	r18, X
     45e:	80 91 52 01 	lds	r24, 0x0152
     462:	90 91 53 01 	lds	r25, 0x0153
     466:	b2 2e       	mov	r11, r18
     468:	aa 24       	eor	r10, r10
     46a:	8a 29       	or	r24, r10
     46c:	9b 29       	or	r25, r11
     46e:	90 93 53 01 	sts	0x0153, r25
     472:	80 93 52 01 	sts	0x0152, r24
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
     476:	c8 01       	movw	r24, r16
     478:	08 97       	sbiw	r24, 0x08	; 8
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	91 05       	cpc	r25, r1
     47e:	08 f0       	brcs	.+2      	; 0x482 <scan_pots_and_update_control_voltages+0xc0>
     480:	44 c0       	rjmp	.+136    	; 0x50a <scan_pots_and_update_control_voltages+0x148>
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     482:	e9 30       	cpi	r30, 0x09	; 9
     484:	f1 05       	cpc	r31, r1
     486:	19 f0       	breq	.+6      	; 0x48e <scan_pots_and_update_control_voltages+0xcc>
		adc_value = ADCL;
		adc_value = adc_value | (ADCH <<8);
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
     488:	2f e9       	ldi	r18, 0x9F	; 159
     48a:	38 e1       	ldi	r19, 0x18	; 24
     48c:	02 c0       	rjmp	.+4      	; 0x492 <scan_pots_and_update_control_voltages+0xd0>
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     48e:	25 e0       	ldi	r18, 0x05	; 5
     490:	3f e1       	ldi	r19, 0x1F	; 31
			if (adc_value >= 512) {
     492:	80 91 52 01 	lds	r24, 0x0152
     496:	90 91 53 01 	lds	r25, 0x0153
     49a:	b2 e0       	ldi	r27, 0x02	; 2
     49c:	80 30       	cpi	r24, 0x00	; 0
     49e:	9b 07       	cpc	r25, r27
     4a0:	d8 f0       	brcs	.+54     	; 0x4d8 <scan_pots_and_update_control_voltages+0x116>
				set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value + (adc_value - 512)));
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	e2 0d       	add	r30, r2
     4a8:	f3 1d       	adc	r31, r3
     4aa:	81 81       	ldd	r24, Z+1	; 0x01
     4ac:	60 81       	ld	r22, Z
     4ae:	40 91 52 01 	lds	r20, 0x0152
     4b2:	50 91 53 01 	lds	r21, 0x0153
     4b6:	40 50       	subi	r20, 0x00	; 0
     4b8:	52 40       	sbci	r21, 0x02	; 2
     4ba:	42 0f       	add	r20, r18
     4bc:	53 1f       	adc	r21, r19
     4be:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
				tune_offset = adc_value - 512;
     4c2:	80 91 52 01 	lds	r24, 0x0152
     4c6:	90 91 53 01 	lds	r25, 0x0153
     4ca:	80 50       	subi	r24, 0x00	; 0
     4cc:	92 40       	sbci	r25, 0x02	; 2
     4ce:	90 93 51 01 	sts	0x0151, r25
     4d2:	80 93 50 01 	sts	0x0150, r24
     4d6:	2f c0       	rjmp	.+94     	; 0x536 <scan_pots_and_update_control_voltages+0x174>
			} else {
				set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value - (512- adc_value)));
     4d8:	ee 0f       	add	r30, r30
     4da:	ff 1f       	adc	r31, r31
     4dc:	e2 0d       	add	r30, r2
     4de:	f3 1d       	adc	r31, r3
     4e0:	81 81       	ldd	r24, Z+1	; 0x01
     4e2:	60 81       	ld	r22, Z
     4e4:	40 91 52 01 	lds	r20, 0x0152
     4e8:	50 91 53 01 	lds	r21, 0x0153
     4ec:	40 50       	subi	r20, 0x00	; 0
     4ee:	52 40       	sbci	r21, 0x02	; 2
     4f0:	42 0f       	add	r20, r18
     4f2:	53 1f       	adc	r21, r19
     4f4:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
				tune_offset = adc_value;
     4f8:	80 91 52 01 	lds	r24, 0x0152
     4fc:	90 91 53 01 	lds	r25, 0x0153
     500:	90 93 51 01 	sts	0x0151, r25
     504:	80 93 50 01 	sts	0x0150, r24
     508:	16 c0       	rjmp	.+44     	; 0x536 <scan_pots_and_update_control_voltages+0x174>
			}

		} else if (i == 11) //exception to handle ARP_RATE pot
     50a:	eb 30       	cpi	r30, 0x0B	; 11
     50c:	f1 05       	cpc	r31, r1
     50e:	09 f4       	brne	.+2      	; 0x512 <scan_pots_and_update_control_voltages+0x150>
     510:	87 cf       	rjmp	.-242    	; 0x420 <scan_pots_and_update_control_voltages+0x5e>
		{
			//store ARP pot value, but don't set DAC
			
		} else {
			set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
     512:	ee 0f       	add	r30, r30
     514:	ff 1f       	adc	r31, r31
     516:	e2 0d       	add	r30, r2
     518:	f3 1d       	adc	r31, r3
     51a:	81 81       	ldd	r24, Z+1	; 0x01
     51c:	60 81       	ld	r22, Z
     51e:	40 91 52 01 	lds	r20, 0x0152
     522:	50 91 53 01 	lds	r21, 0x0153
     526:	42 95       	swap	r20
     528:	52 95       	swap	r21
     52a:	50 7f       	andi	r21, 0xF0	; 240
     52c:	54 27       	eor	r21, r20
     52e:	40 7f       	andi	r20, 0xF0	; 240
     530:	54 27       	eor	r21, r20
     532:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
};

void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     536:	e0 e1       	ldi	r30, 0x10	; 16
     538:	ce 16       	cp	r12, r30
     53a:	d1 04       	cpc	r13, r1
     53c:	0c f4       	brge	.+2      	; 0x540 <scan_pots_and_update_control_voltages+0x17e>
     53e:	70 cf       	rjmp	.-288    	; 0x420 <scan_pots_and_update_control_voltages+0x5e>
     540:	00 e0       	ldi	r16, 0x00	; 0
     542:	10 e0       	ldi	r17, 0x00	; 0
	//now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		DATA_BUS = i+1; //U4 input 0 is not used (grounded)
		POT_MUX &= ~(1<<POTMUX_EN1);
     544:	0f 2e       	mov	r0, r31
     546:	fa ed       	ldi	r31, 0xDA	; 218
     548:	ef 2e       	mov	r14, r31
     54a:	ff 24       	eor	r15, r15
     54c:	f0 2d       	mov	r31, r0
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     54e:	ca e7       	ldi	r28, 0x7A	; 122
     550:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
		POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2
		//adc_previous = adc_value;
		adc_value = ADCL;
     552:	0f 2e       	mov	r0, r31
     554:	f8 e7       	ldi	r31, 0x78	; 120
     556:	cf 2e       	mov	r12, r31
     558:	dd 24       	eor	r13, r13
     55a:	f0 2d       	mov	r31, r0
		adc_value = adc_value | (ADCH <<8);
     55c:	0f 2e       	mov	r0, r31
     55e:	f9 e7       	ldi	r31, 0x79	; 121
     560:	af 2e       	mov	r10, r31
     562:	bb 24       	eor	r11, r11
     564:	f0 2d       	mov	r31, r0

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
     566:	0f 2e       	mov	r0, r31
     568:	f0 e1       	ldi	r31, 0x10	; 16
     56a:	8f 2e       	mov	r8, r31
     56c:	f1 e0       	ldi	r31, 0x01	; 1
     56e:	9f 2e       	mov	r9, r31
     570:	f0 2d       	mov	r31, r0
	{SUSTAIN_1,		DAC_MUX_EN3},
	{RELEASE_2,		DAC_MUX_EN3},
	{RELEASE_1,		DAC_MUX_EN3}							
};

void scan_pots_and_update_control_voltages(void) {
     572:	80 2f       	mov	r24, r16
     574:	8f 5f       	subi	r24, 0xFF	; 255
	
	//now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		DATA_BUS = i+1; //U4 input 0 is not used (grounded)
     576:	82 b9       	out	0x02, r24	; 2
		POT_MUX &= ~(1<<POTMUX_EN1);
     578:	d7 01       	movw	r26, r14
     57a:	8c 91       	ld	r24, X
     57c:	8f 77       	andi	r24, 0x7F	; 127
     57e:	8c 93       	st	X, r24
     580:	00 c0       	rjmp	.+0      	; 0x582 <scan_pots_and_update_control_voltages+0x1c0>
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     582:	88 81       	ld	r24, Y
     584:	80 64       	ori	r24, 0x40	; 64
     586:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
     588:	88 81       	ld	r24, Y
     58a:	86 fd       	sbrc	r24, 6
     58c:	fd cf       	rjmp	.-6      	; 0x588 <scan_pots_and_update_control_voltages+0x1c6>
		POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2
     58e:	f7 01       	movw	r30, r14
     590:	80 81       	ld	r24, Z
     592:	80 68       	ori	r24, 0x80	; 128
     594:	80 83       	st	Z, r24
		//adc_previous = adc_value;
		adc_value = ADCL;
     596:	d6 01       	movw	r26, r12
     598:	8c 91       	ld	r24, X
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	90 93 53 01 	sts	0x0153, r25
     5a0:	80 93 52 01 	sts	0x0152, r24
		adc_value = adc_value | (ADCH <<8);
     5a4:	f5 01       	movw	r30, r10
     5a6:	20 81       	ld	r18, Z
     5a8:	80 91 52 01 	lds	r24, 0x0152
     5ac:	90 91 53 01 	lds	r25, 0x0153
     5b0:	72 2e       	mov	r7, r18
     5b2:	66 24       	eor	r6, r6
     5b4:	86 29       	or	r24, r6
     5b6:	97 29       	or	r25, r7
     5b8:	90 93 53 01 	sts	0x0153, r25
     5bc:	80 93 52 01 	sts	0x0152, r24

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
     5c0:	f8 01       	movw	r30, r16
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	e8 0d       	add	r30, r8
     5c8:	f9 1d       	adc	r31, r9
     5ca:	81 81       	ldd	r24, Z+1	; 0x01
     5cc:	60 81       	ld	r22, Z
     5ce:	40 91 52 01 	lds	r20, 0x0152
     5d2:	50 91 53 01 	lds	r21, 0x0153
     5d6:	42 95       	swap	r20
     5d8:	52 95       	swap	r21
     5da:	50 7f       	andi	r21, 0xF0	; 240
     5dc:	54 27       	eor	r21, r20
     5de:	40 7f       	andi	r20, 0xF0	; 240
     5e0:	54 27       	eor	r21, r20
     5e2:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
		}
		
	}
	
	//now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     5e6:	0f 5f       	subi	r16, 0xFF	; 255
     5e8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ea:	0f 30       	cpi	r16, 0x0F	; 15
     5ec:	11 05       	cpc	r17, r1
     5ee:	09 f6       	brne	.-126    	; 0x572 <scan_pots_and_update_control_voltages+0x1b0>

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);

	}

	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     5f0:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     5f2:	a1 9a       	sbi	0x14, 1	; 20
	
	
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	bf 90       	pop	r11
     606:	af 90       	pop	r10
     608:	9f 90       	pop	r9
     60a:	8f 90       	pop	r8
     60c:	7f 90       	pop	r7
     60e:	6f 90       	pop	r6
     610:	5f 90       	pop	r5
     612:	4f 90       	pop	r4
     614:	3f 90       	pop	r3
     616:	2f 90       	pop	r2
     618:	08 95       	ret

0000061a <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     61a:	84 b1       	in	r24, 0x04	; 4
     61c:	87 62       	ori	r24, 0x27	; 39
     61e:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     620:	ec ed       	ldi	r30, 0xDC	; 220
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	8c 65       	ori	r24, 0x5C	; 92
     628:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     62a:	85 b1       	in	r24, 0x05	; 5
     62c:	89 7d       	andi	r24, 0xD9	; 217
     62e:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     630:	ed ed       	ldi	r30, 0xDD	; 221
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	83 7f       	andi	r24, 0xF3	; 243
     638:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     63a:	80 e5       	ldi	r24, 0x50	; 80
     63c:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     63e:	80 81       	ld	r24, Z
     640:	87 7f       	andi	r24, 0xF7	; 247
     642:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     644:	80 81       	ld	r24, Z
     646:	87 7f       	andi	r24, 0xF7	; 247
     648:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     64a:	80 81       	ld	r24, Z
     64c:	88 60       	ori	r24, 0x08	; 8
     64e:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     650:	80 81       	ld	r24, Z
     652:	8f 7e       	andi	r24, 0xEF	; 239
     654:	80 83       	st	Z, r24
	
}
     656:	08 95       	ret

00000658 <update_spi>:

void update_spi(void) {
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
	
			SPI_PORT |= SPI_SW_LATCH;
     660:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE
			SPDR =
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     662:	c0 91 5a 01 	lds	r28, 0x015A
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     666:	40 91 5a 01 	lds	r20, 0x015A
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     66a:	00 91 5a 01 	lds	r16, 0x015A
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     66e:	80 91 5a 01 	lds	r24, 0x015A
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     672:	a0 91 5a 01 	lds	r26, 0x015A
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     676:	60 91 5a 01 	lds	r22, 0x015A
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     67a:	20 91 5a 01 	lds	r18, 0x015A
			ISW8_SW_ON << ISW8_LED;
     67e:	90 91 5f 01 	lds	r25, 0x015F
     682:	97 95       	ror	r25
     684:	99 27       	eor	r25, r25
     686:	97 95       	ror	r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     688:	81 70       	andi	r24, 0x01	; 1
     68a:	98 2b       	or	r25, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     68c:	cc 1f       	adc	r28, r28
     68e:	cc 27       	eor	r28, r28
     690:	cc 1f       	adc	r28, r28
     692:	cc 0f       	add	r28, r28
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     694:	c9 2b       	or	r28, r25
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     696:	46 95       	lsr	r20
     698:	46 95       	lsr	r20
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	41 70       	andi	r20, 0x01	; 1
     69e:	50 70       	andi	r21, 0x00	; 0
     6a0:	ca 01       	movw	r24, r20
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	88 0f       	add	r24, r24
     6a8:	99 1f       	adc	r25, r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6aa:	8c 2b       	or	r24, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     6ac:	06 95       	lsr	r16
     6ae:	10 e0       	ldi	r17, 0x00	; 0
     6b0:	01 70       	andi	r16, 0x01	; 1
     6b2:	10 70       	andi	r17, 0x00	; 0
     6b4:	e8 01       	movw	r28, r16
     6b6:	cc 0f       	add	r28, r28
     6b8:	dd 1f       	adc	r29, r29
     6ba:	cc 0f       	add	r28, r28
     6bc:	dd 1f       	adc	r29, r29
     6be:	cc 0f       	add	r28, r28
     6c0:	dd 1f       	adc	r29, r29
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6c2:	c8 2b       	or	r28, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     6c4:	a2 95       	swap	r26
     6c6:	af 70       	andi	r26, 0x0F	; 15
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	a1 70       	andi	r26, 0x01	; 1
     6cc:	b0 70       	andi	r27, 0x00	; 0
     6ce:	fd 01       	movw	r30, r26
     6d0:	e2 95       	swap	r30
     6d2:	f2 95       	swap	r31
     6d4:	f0 7f       	andi	r31, 0xF0	; 240
     6d6:	fe 27       	eor	r31, r30
     6d8:	e0 7f       	andi	r30, 0xF0	; 240
     6da:	fe 27       	eor	r31, r30
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6dc:	ec 2b       	or	r30, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     6de:	62 95       	swap	r22
     6e0:	66 95       	lsr	r22
     6e2:	67 70       	andi	r22, 0x07	; 7
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	61 70       	andi	r22, 0x01	; 1
     6e8:	70 70       	andi	r23, 0x00	; 0
     6ea:	ab 01       	movw	r20, r22
     6ec:	44 0f       	add	r20, r20
     6ee:	55 1f       	adc	r21, r21
     6f0:	42 95       	swap	r20
     6f2:	52 95       	swap	r21
     6f4:	50 7f       	andi	r21, 0xF0	; 240
     6f6:	54 27       	eor	r21, r20
     6f8:	40 7f       	andi	r20, 0xF0	; 240
     6fa:	54 27       	eor	r21, r20
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6fc:	4e 2b       	or	r20, r30
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     6fe:	22 95       	swap	r18
     700:	26 95       	lsr	r18
     702:	26 95       	lsr	r18
     704:	23 70       	andi	r18, 0x03	; 3
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	21 70       	andi	r18, 0x01	; 1
     70a:	30 70       	andi	r19, 0x00	; 0
     70c:	c9 01       	movw	r24, r18
     70e:	00 24       	eor	r0, r0
     710:	96 95       	lsr	r25
     712:	87 95       	ror	r24
     714:	07 94       	ror	r0
     716:	96 95       	lsr	r25
     718:	87 95       	ror	r24
     71a:	07 94       	ror	r0
     71c:	98 2f       	mov	r25, r24
     71e:	80 2d       	mov	r24, r0
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     720:	84 2b       	or	r24, r20
     722:	8e bd       	out	0x2e, r24	; 46
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
			ISW8_SW_ON << ISW8_LED;
			
			while (!(SPSR & (1<<SPIF)));
     724:	0d b4       	in	r0, 0x2d	; 45
     726:	07 fe       	sbrs	r0, 7
     728:	fd cf       	rjmp	.-6      	; 0x724 <update_spi+0xcc>
			
			//Now read SPDR for switch data shifted in from 74XX165 U14
			spi_sw_current_state = SPDR;
     72a:	8e b5       	in	r24, 0x2e	; 46
     72c:	80 93 5c 01 	sts	0x015C, r24
			
			spi_sw_current_state ^= spi_sw_previous_state;
     730:	80 91 5c 01 	lds	r24, 0x015C
     734:	90 91 5b 01 	lds	r25, 0x015B
     738:	89 27       	eor	r24, r25
     73a:	80 93 5c 01 	sts	0x015C, r24
			spi_sw_previous_state ^= spi_sw_current_state;
     73e:	80 91 5b 01 	lds	r24, 0x015B
     742:	90 91 5c 01 	lds	r25, 0x015C
     746:	89 27       	eor	r24, r25
     748:	80 93 5b 01 	sts	0x015B, r24
			spi_sw_current_state &= spi_sw_previous_state;
     74c:	80 91 5c 01 	lds	r24, 0x015C
     750:	90 91 5b 01 	lds	r25, 0x015B
     754:	89 23       	and	r24, r25
     756:	80 93 5c 01 	sts	0x015C, r24
			//if (spi_sw_current_state & (1<<ISW4_SW)) sw_latch_five ^= (1 << ISW4_SW);
			//if (spi_sw_current_state & (1<<ISW5_SW)) sw_latch_five ^= (1 << ISW5_SW);
			//if (spi_sw_current_state & (1<<ISW6_SW)) sw_latch_five ^= (1 << ISW6_SW);
			//if (spi_sw_current_state & (1<<ISW7_SW)) sw_latch_five ^= (1 << ISW7_SW);
			
			sw_latch_five ^= spi_sw_current_state; //Omar's solution. Replaces above 7 lines of if/then statements. Duh!
     75a:	80 91 5a 01 	lds	r24, 0x015A
     75e:	90 91 5c 01 	lds	r25, 0x015C
     762:	89 27       	eor	r24, r25
     764:	80 93 5a 01 	sts	0x015A, r24
			
			//SHIFT 4th BYTE
			SPDR = 0; //no LEDs connected in current test set up
     768:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     76a:	0d b4       	in	r0, 0x2d	; 45
     76c:	07 fe       	sbrs	r0, 7
     76e:	fd cf       	rjmp	.-6      	; 0x76a <update_spi+0x112>
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//check if ISW12_SW bit is set
			if (SPDR >> 5 & 1)
     770:	8e b5       	in	r24, 0x2e	; 46
     772:	82 95       	swap	r24
     774:	86 95       	lsr	r24
     776:	87 70       	andi	r24, 0x07	; 7
     778:	80 ff       	sbrs	r24, 0
     77a:	04 c0       	rjmp	.+8      	; 0x784 <update_spi+0x12c>
			{
				ISW12_SW_ON = 1;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 62 01 	sts	0x0162, r24
     782:	02 c0       	rjmp	.+4      	; 0x788 <update_spi+0x130>
			}
			else
			{
				ISW12_SW_ON = 0;
     784:	10 92 62 01 	sts	0x0162, r1
			}
			//check if ISW13_SW bit is set
			if (SPDR >> 6 & 1)
     788:	8e b5       	in	r24, 0x2e	; 46
     78a:	82 95       	swap	r24
     78c:	86 95       	lsr	r24
     78e:	86 95       	lsr	r24
     790:	83 70       	andi	r24, 0x03	; 3
     792:	80 ff       	sbrs	r24, 0
     794:	04 c0       	rjmp	.+8      	; 0x79e <update_spi+0x146>
			{
				ISW13_SW_ON = 1;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 61 01 	sts	0x0161, r24
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <update_spi+0x14a>
			}
			else
			{
				ISW13_SW_ON = 0;
     79e:	10 92 61 01 	sts	0x0161, r1
			}
			
			//SHIFT 3th BYTE
			SPDR = 0;
     7a2:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     7a4:	0d b4       	in	r0, 0x2d	; 45
     7a6:	07 fe       	sbrs	r0, 7
     7a8:	fd cf       	rjmp	.-6      	; 0x7a4 <update_spi+0x14c>

			//SHIFT 2th BYTE
			SPDR = 0;
     7aa:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     7ac:	0d b4       	in	r0, 0x2d	; 45
     7ae:	07 fe       	sbrs	r0, 7
     7b0:	fd cf       	rjmp	.-6      	; 0x7ac <update_spi+0x154>
			
			//SHIFT 1st BYTE
			//SPDR = (ISW12_SW_ON << 2) | ISW11_LED; //TURN ON ISW12 (if ISW12_SW is ON) and ISW11 LEDs, both on 74XX595 U8, first shift register in chain
			SPDR = (ISW12_SW_ON <<2) | (ISW13_SW_ON << 7); //turn on ISW12 if ISW12_SW is ON, turn ISW11 (MSB of first shift register chain) if ISW13_SW is ON
     7b2:	80 91 62 01 	lds	r24, 0x0162
     7b6:	90 91 61 01 	lds	r25, 0x0161
     7ba:	97 95       	ror	r25
     7bc:	99 27       	eor	r25, r25
     7be:	97 95       	ror	r25
     7c0:	88 0f       	add	r24, r24
     7c2:	88 0f       	add	r24, r24
     7c4:	89 2b       	or	r24, r25
     7c6:	8e bd       	out	0x2e, r24	; 46
			//Wait for SPI shift to complete
			while (!(SPSR & (1<<SPIF)));
     7c8:	0d b4       	in	r0, 0x2d	; 45
     7ca:	07 fe       	sbrs	r0, 7
     7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <update_spi+0x170>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     7ce:	ed ed       	ldi	r30, 0xDD	; 221
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	87 7f       	andi	r24, 0xF7	; 247
     7d6:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     7d8:	80 81       	ld	r24, Z
     7da:	88 60       	ori	r24, 0x08	; 8
     7dc:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     7de:	2d 98       	cbi	0x05, 5	; 5
			//this toggle code works, but I haven't figured out how it works
			//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
			current_sw_state = SWITCH_PORT;
     7e0:	8f b1       	in	r24, 0x0f	; 15
     7e2:	80 93 5d 01 	sts	0x015D, r24
			current_sw_state ^= previous_sw_state;
     7e6:	80 91 5d 01 	lds	r24, 0x015D
     7ea:	90 91 5e 01 	lds	r25, 0x015E
     7ee:	89 27       	eor	r24, r25
     7f0:	80 93 5d 01 	sts	0x015D, r24
			previous_sw_state ^= current_sw_state;
     7f4:	80 91 5e 01 	lds	r24, 0x015E
     7f8:	90 91 5d 01 	lds	r25, 0x015D
     7fc:	89 27       	eor	r24, r25
     7fe:	80 93 5e 01 	sts	0x015E, r24
			current_sw_state &= previous_sw_state;
     802:	80 91 5d 01 	lds	r24, 0x015D
     806:	90 91 5e 01 	lds	r25, 0x015E
     80a:	89 23       	and	r24, r25
     80c:	80 93 5d 01 	sts	0x015D, r24
			
			if (current_sw_state & (1<<ISW8_SW))
     810:	80 91 5d 01 	lds	r24, 0x015D
     814:	82 ff       	sbrs	r24, 2
     816:	06 c0       	rjmp	.+12     	; 0x824 <update_spi+0x1cc>
			{
				ISW8_SW_ON ^= 1 << 0; //toggle switch state
     818:	90 91 5f 01 	lds	r25, 0x015F
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	89 27       	eor	r24, r25
     820:	80 93 5f 01 	sts	0x015F, r24
			}
			
			if (current_sw_state & (1<<ISW11_SW)) {
     824:	80 91 5d 01 	lds	r24, 0x015D
     828:	84 ff       	sbrs	r24, 4
     82a:	06 c0       	rjmp	.+12     	; 0x838 <update_spi+0x1e0>
				
				ISW11_SW_ON ^= 1 << 0; //toggle switch state
     82c:	90 91 63 01 	lds	r25, 0x0163
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	89 27       	eor	r24, r25
     834:	80 93 63 01 	sts	0x0163, r24
			}
			
			if (current_sw_state & (1<<ISW9_SW)) {
     838:	80 91 5d 01 	lds	r24, 0x015D
     83c:	83 ff       	sbrs	r24, 3
     83e:	06 c0       	rjmp	.+12     	; 0x84c <update_spi+0x1f4>
				
				ISW9_SW_ON ^= 1 << 0; //toggle switch state
     840:	90 91 64 01 	lds	r25, 0x0164
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	89 27       	eor	r24, r25
     848:	80 93 64 01 	sts	0x0164, r24
			}
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     84c:	ed ed       	ldi	r30, 0xDD	; 221
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	8f 7b       	andi	r24, 0xBF	; 191
     854:	80 83       	st	Z, r24
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
     856:	40 91 5a 01 	lds	r20, 0x015A
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     85a:	30 91 5a 01 	lds	r19, 0x015A
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
     85e:	c0 91 5a 01 	lds	r28, 0x015A
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
     862:	00 91 5a 01 	lds	r16, 0x015A
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
     866:	60 91 5a 01 	lds	r22, 0x015A
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
     86a:	a0 91 5a 01 	lds	r26, 0x015A
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
     86e:	20 91 5a 01 	lds	r18, 0x015A
			ISW8_SW_ON << 4;
     872:	80 91 5f 01 	lds	r24, 0x015F
     876:	82 95       	swap	r24
     878:	80 7f       	andi	r24, 0xF0	; 240
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     87a:	36 95       	lsr	r19
     87c:	36 95       	lsr	r19
     87e:	31 70       	andi	r19, 0x01	; 1
     880:	38 2b       	or	r19, r24
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	01 70       	andi	r16, 0x01	; 1
     886:	10 70       	andi	r17, 0x00	; 0
     888:	c8 01       	movw	r24, r16
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     88e:	83 2b       	or	r24, r19
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
     890:	a2 95       	swap	r26
     892:	a6 95       	lsr	r26
     894:	a7 70       	andi	r26, 0x07	; 7
     896:	a7 95       	ror	r26
     898:	aa 27       	eor	r26, r26
     89a:	a7 95       	ror	r26
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     89c:	8a 2b       	or	r24, r26
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
     89e:	44 1f       	adc	r20, r20
     8a0:	44 27       	eor	r20, r20
     8a2:	44 1f       	adc	r20, r20
     8a4:	44 0f       	add	r20, r20
     8a6:	44 0f       	add	r20, r20
     8a8:	44 0f       	add	r20, r20
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8aa:	48 2b       	or	r20, r24
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
     8ac:	c6 95       	lsr	r28
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
     8b0:	c1 70       	andi	r28, 0x01	; 1
     8b2:	d0 70       	andi	r29, 0x00	; 0
     8b4:	de 01       	movw	r26, r28
     8b6:	aa 0f       	add	r26, r26
     8b8:	bb 1f       	adc	r27, r27
     8ba:	aa 0f       	add	r26, r26
     8bc:	bb 1f       	adc	r27, r27
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8be:	a4 2b       	or	r26, r20
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
     8c0:	62 95       	swap	r22
     8c2:	6f 70       	andi	r22, 0x0F	; 15
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	61 70       	andi	r22, 0x01	; 1
     8c8:	70 70       	andi	r23, 0x00	; 0
     8ca:	ab 01       	movw	r20, r22
     8cc:	00 24       	eor	r0, r0
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	07 94       	ror	r0
     8d4:	56 95       	lsr	r21
     8d6:	47 95       	ror	r20
     8d8:	07 94       	ror	r0
     8da:	54 2f       	mov	r21, r20
     8dc:	40 2d       	mov	r20, r0
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8de:	4a 2b       	or	r20, r26
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
     8e0:	22 95       	swap	r18
     8e2:	26 95       	lsr	r18
     8e4:	26 95       	lsr	r18
     8e6:	23 70       	andi	r18, 0x03	; 3
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	21 70       	andi	r18, 0x01	; 1
     8ec:	30 70       	andi	r19, 0x00	; 0
     8ee:	c9 01       	movw	r24, r18
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	82 95       	swap	r24
     8f6:	92 95       	swap	r25
     8f8:	90 7f       	andi	r25, 0xF0	; 240
     8fa:	98 27       	eor	r25, r24
     8fc:	80 7f       	andi	r24, 0xF0	; 240
     8fe:	98 27       	eor	r25, r24
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     900:	84 2b       	or	r24, r20
     902:	82 b9       	out	0x02, r24	; 2
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
			ISW8_SW_ON << 4;
			VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     904:	80 81       	ld	r24, Z
     906:	80 64       	ori	r24, 0x40	; 64
     908:	80 83       	st	Z, r24
     90a:	00 00       	nop
			_delay_us(1);
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     90c:	80 81       	ld	r24, Z
     90e:	8f 7b       	andi	r24, 0xBF	; 191
     910:	80 83       	st	Z, r24
			DATA_BUS = 0;
     912:	12 b8       	out	0x02, r1	; 2
	
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	08 95       	ret

0000091e <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     91e:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     920:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     922:	74 83       	std	Z+4, r23	; 0x04
     924:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
     926:	11 82       	std	Z+1, r1	; 0x01
     928:	10 82       	st	Z, r1
}
     92a:	08 95       	ret

0000092c <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ec 01       	movw	r28, r24
     934:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     936:	0e 94 05 05 	call	0xa0a	; 0xa0a <store_and_clear_interrupt>
     93a:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     93c:	39 81       	ldd	r19, Y+1	; 0x01
     93e:	83 2f       	mov	r24, r19
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	6a 81       	ldd	r22, Y+2	; 0x02
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__divmodhi4>
     94c:	48 81       	ld	r20, Y
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	84 17       	cp	r24, r20
     952:	95 07       	cpc	r25, r21
     954:	29 f4       	brne	.+10     	; 0x960 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
     956:	82 2f       	mov	r24, r18
     958:	0e 94 08 05 	call	0xa10	; 0xa10 <restore_interrupt_setting>
      return false;
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	11 c0       	rjmp	.+34     	; 0x982 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
     960:	eb 81       	ldd	r30, Y+3	; 0x03
     962:	fc 81       	ldd	r31, Y+4	; 0x04
     964:	e3 0f       	add	r30, r19
     966:	f1 1d       	adc	r31, r1
     968:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	6a 81       	ldd	r22, Y+2	; 0x02
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__divmodhi4>
     978:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     97a:	82 2f       	mov	r24, r18
     97c:	0e 94 08 05 	call	0xa10	; 0xa10 <restore_interrupt_setting>
      return true;
     980:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	08 95       	ret

0000098a <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     990:	0e 94 05 05 	call	0xa0a	; 0xa0a <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     994:	29 81       	ldd	r18, Y+1	; 0x01
     996:	98 81       	ld	r25, Y
     998:	29 17       	cp	r18, r25
     99a:	18 f0       	brcs	.+6      	; 0x9a2 <bytequeue_length+0x18>
      len = queue->end - queue->start;
     99c:	c2 2f       	mov	r28, r18
     99e:	c9 1b       	sub	r28, r25
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
     9a2:	ca 81       	ldd	r28, Y+2	; 0x02
     9a4:	c2 0f       	add	r28, r18
     9a6:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
     9a8:	0e 94 08 05 	call	0xa10	; 0xa10 <restore_interrupt_setting>
   return len;
}
     9ac:	8c 2f       	mov	r24, r28
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     9b4:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     9b6:	20 81       	ld	r18, Z
     9b8:	86 2f       	mov	r24, r22
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 0f       	add	r24, r18
     9be:	91 1d       	adc	r25, r1
     9c0:	62 81       	ldd	r22, Z+2	; 0x02
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__divmodhi4>
     9c8:	03 80       	ldd	r0, Z+3	; 0x03
     9ca:	f4 81       	ldd	r31, Z+4	; 0x04
     9cc:	e0 2d       	mov	r30, r0
     9ce:	e8 0f       	add	r30, r24
     9d0:	f9 1f       	adc	r31, r25
}
     9d2:	80 81       	ld	r24, Z
     9d4:	08 95       	ret

000009d6 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	ec 01       	movw	r28, r24
     9de:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     9e0:	0e 94 05 05 	call	0xa0a	; 0xa0a <store_and_clear_interrupt>
     9e4:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     9e6:	88 81       	ld	r24, Y
     9e8:	21 2f       	mov	r18, r17
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	28 0f       	add	r18, r24
     9ee:	31 1d       	adc	r19, r1
     9f0:	6a 81       	ldd	r22, Y+2	; 0x02
     9f2:	c9 01       	movw	r24, r18
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__divmodhi4>
     9fa:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
     9fc:	84 2f       	mov	r24, r20
     9fe:	0e 94 08 05 	call	0xa10	; 0xa10 <restore_interrupt_setting>
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	08 95       	ret

00000a0a <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
     a0a:	8f b7       	in	r24, 0x3f	; 63
   cli();
     a0c:	f8 94       	cli
   return sreg;
}
     a0e:	08 95       	ret

00000a10 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
     a10:	8f bf       	out	0x3f, r24	; 63
}
     a12:	08 95       	ret

00000a14 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     a14:	88 1f       	adc	r24, r24
     a16:	88 27       	eor	r24, r24
     a18:	88 1f       	adc	r24, r24
     a1a:	08 95       	ret

00000a1c <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	88 3f       	cpi	r24, 0xF8	; 248
     a20:	08 f4       	brcc	.+2      	; 0xa24 <midi_is_realtime+0x8>
     a22:	90 e0       	ldi	r25, 0x00	; 0
}
     a24:	89 2f       	mov	r24, r25
     a26:	08 95       	ret

00000a28 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     a28:	28 2f       	mov	r18, r24
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	20 7f       	andi	r18, 0xF0	; 240
     a2e:	30 70       	andi	r19, 0x00	; 0
     a30:	20 3c       	cpi	r18, 0xC0	; 192
     a32:	31 05       	cpc	r19, r1
     a34:	e9 f1       	breq	.+122    	; 0xab0 <midi_packet_length+0x88>
     a36:	21 3c       	cpi	r18, 0xC1	; 193
     a38:	31 05       	cpc	r19, r1
     a3a:	8c f4       	brge	.+34     	; 0xa5e <midi_packet_length+0x36>
     a3c:	20 39       	cpi	r18, 0x90	; 144
     a3e:	31 05       	cpc	r19, r1
     a40:	e1 f0       	breq	.+56     	; 0xa7a <midi_packet_length+0x52>
     a42:	21 39       	cpi	r18, 0x91	; 145
     a44:	31 05       	cpc	r19, r1
     a46:	24 f4       	brge	.+8      	; 0xa50 <midi_packet_length+0x28>
     a48:	20 38       	cpi	r18, 0x80	; 128
     a4a:	31 05       	cpc	r19, r1
     a4c:	79 f5       	brne	.+94     	; 0xaac <midi_packet_length+0x84>
     a4e:	15 c0       	rjmp	.+42     	; 0xa7a <midi_packet_length+0x52>
     a50:	20 3a       	cpi	r18, 0xA0	; 160
     a52:	31 05       	cpc	r19, r1
     a54:	91 f0       	breq	.+36     	; 0xa7a <midi_packet_length+0x52>
     a56:	20 3b       	cpi	r18, 0xB0	; 176
     a58:	31 05       	cpc	r19, r1
     a5a:	41 f5       	brne	.+80     	; 0xaac <midi_packet_length+0x84>
     a5c:	0e c0       	rjmp	.+28     	; 0xa7a <midi_packet_length+0x52>
     a5e:	20 3e       	cpi	r18, 0xE0	; 224
     a60:	31 05       	cpc	r19, r1
     a62:	59 f0       	breq	.+22     	; 0xa7a <midi_packet_length+0x52>
     a64:	21 3e       	cpi	r18, 0xE1	; 225
     a66:	31 05       	cpc	r19, r1
     a68:	24 f4       	brge	.+8      	; 0xa72 <midi_packet_length+0x4a>
     a6a:	20 3d       	cpi	r18, 0xD0	; 208
     a6c:	31 05       	cpc	r19, r1
     a6e:	f1 f4       	brne	.+60     	; 0xaac <midi_packet_length+0x84>
     a70:	1f c0       	rjmp	.+62     	; 0xab0 <midi_packet_length+0x88>
     a72:	20 3f       	cpi	r18, 0xF0	; 240
     a74:	31 05       	cpc	r19, r1
     a76:	d1 f4       	brne	.+52     	; 0xaac <midi_packet_length+0x84>
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
     a7e:	86 3f       	cpi	r24, 0xF6	; 246
     a80:	79 f0       	breq	.+30     	; 0xaa0 <midi_packet_length+0x78>
     a82:	87 3f       	cpi	r24, 0xF7	; 247
     a84:	38 f4       	brcc	.+14     	; 0xa94 <midi_packet_length+0x6c>
     a86:	82 3f       	cpi	r24, 0xF2	; 242
     a88:	a9 f0       	breq	.+42     	; 0xab4 <midi_packet_length+0x8c>
     a8a:	83 3f       	cpi	r24, 0xF3	; 243
     a8c:	59 f0       	breq	.+22     	; 0xaa4 <midi_packet_length+0x7c>
     a8e:	81 3f       	cpi	r24, 0xF1	; 241
     a90:	59 f4       	brne	.+22     	; 0xaa8 <midi_packet_length+0x80>
     a92:	08 c0       	rjmp	.+16     	; 0xaa4 <midi_packet_length+0x7c>
     a94:	88 3f       	cpi	r24, 0xF8	; 248
     a96:	40 f0       	brcs	.+16     	; 0xaa8 <midi_packet_length+0x80>
     a98:	8d 3f       	cpi	r24, 0xFD	; 253
     a9a:	10 f0       	brcs	.+4      	; 0xaa0 <midi_packet_length+0x78>
     a9c:	8e 3f       	cpi	r24, 0xFE	; 254
     a9e:	20 f0       	brcs	.+8      	; 0xaa8 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	08 95       	ret
         }
      default:
         return UNDEFINED;
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
     ab4:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
     ab6:	08 95       	ret

00000ab8 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
     ab8:	0f 93       	push	r16
     aba:	34 2f       	mov	r19, r20
     abc:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
     abe:	46 2f       	mov	r20, r22
     ac0:	4f 70       	andi	r20, 0x0F	; 15
     ac2:	40 6b       	ori	r20, 0xB0	; 176
     ac4:	23 2f       	mov	r18, r19
     ac6:	2f 77       	andi	r18, 0x7F	; 127
     ac8:	0f 77       	andi	r16, 0x7F	; 127
     aca:	dc 01       	movw	r26, r24
     acc:	ed 91       	ld	r30, X+
     ace:	fc 91       	ld	r31, X
     ad0:	63 e0       	ldi	r22, 0x03	; 3
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     ada:	0f 93       	push	r16
     adc:	34 2f       	mov	r19, r20
     ade:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     ae0:	46 2f       	mov	r20, r22
     ae2:	4f 70       	andi	r20, 0x0F	; 15
     ae4:	40 69       	ori	r20, 0x90	; 144
     ae6:	23 2f       	mov	r18, r19
     ae8:	2f 77       	andi	r18, 0x7F	; 127
     aea:	0f 77       	andi	r16, 0x7F	; 127
     aec:	dc 01       	movw	r26, r24
     aee:	ed 91       	ld	r30, X+
     af0:	fc 91       	ld	r31, X
     af2:	63 e0       	ldi	r22, 0x03	; 3
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     af8:	0f 91       	pop	r16
     afa:	08 95       	ret

00000afc <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     afc:	0f 93       	push	r16
     afe:	34 2f       	mov	r19, r20
     b00:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     b02:	46 2f       	mov	r20, r22
     b04:	4f 70       	andi	r20, 0x0F	; 15
     b06:	40 68       	ori	r20, 0x80	; 128
     b08:	23 2f       	mov	r18, r19
     b0a:	2f 77       	andi	r18, 0x7F	; 127
     b0c:	0f 77       	andi	r16, 0x7F	; 127
     b0e:	dc 01       	movw	r26, r24
     b10:	ed 91       	ld	r30, X+
     b12:	fc 91       	ld	r31, X
     b14:	63 e0       	ldi	r22, 0x03	; 3
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     b1a:	0f 91       	pop	r16
     b1c:	08 95       	ret

00000b1e <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
     b1e:	0f 93       	push	r16
     b20:	34 2f       	mov	r19, r20
     b22:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
     b24:	46 2f       	mov	r20, r22
     b26:	4f 70       	andi	r20, 0x0F	; 15
     b28:	40 6a       	ori	r20, 0xA0	; 160
     b2a:	23 2f       	mov	r18, r19
     b2c:	2f 77       	andi	r18, 0x7F	; 127
     b2e:	0f 77       	andi	r16, 0x7F	; 127
     b30:	dc 01       	movw	r26, r24
     b32:	ed 91       	ld	r30, X+
     b34:	fc 91       	ld	r31, X
     b36:	63 e0       	ldi	r22, 0x03	; 3
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
     b3c:	0f 91       	pop	r16
     b3e:	08 95       	ret

00000b40 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
     b44:	20 e2       	ldi	r18, 0x20	; 32
     b46:	40 30       	cpi	r20, 0x00	; 0
     b48:	52 07       	cpc	r21, r18
     b4a:	44 f4       	brge	.+16     	; 0xb5c <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
     b4c:	a0 ee       	ldi	r26, 0xE0	; 224
     b4e:	40 30       	cpi	r20, 0x00	; 0
     b50:	5a 07       	cpc	r21, r26
     b52:	3c f0       	brlt	.+14     	; 0xb62 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
     b54:	8a 01       	movw	r16, r20
     b56:	00 50       	subi	r16, 0x00	; 0
     b58:	10 4e       	sbci	r17, 0xE0	; 224
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
     b5c:	0f ef       	ldi	r16, 0xFF	; 255
     b5e:	1f e3       	ldi	r17, 0x3F	; 63
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
     b62:	00 e0       	ldi	r16, 0x00	; 0
     b64:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     b66:	46 2f       	mov	r20, r22
     b68:	4f 70       	andi	r20, 0x0F	; 15
     b6a:	40 6e       	ori	r20, 0xE0	; 224
     b6c:	20 2f       	mov	r18, r16
     b6e:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
     b70:	00 0f       	add	r16, r16
     b72:	01 2f       	mov	r16, r17
     b74:	00 1f       	adc	r16, r16
     b76:	11 0b       	sbc	r17, r17
     b78:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     b7a:	0f 77       	andi	r16, 0x7F	; 127
     b7c:	dc 01       	movw	r26, r24
     b7e:	ed 91       	ld	r30, X+
     b80:	fc 91       	ld	r31, X
     b82:	63 e0       	ldi	r22, 0x03	; 3
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	08 95       	ret

00000b8e <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
     b8e:	0f 93       	push	r16
     b90:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     b92:	46 2f       	mov	r20, r22
     b94:	4f 70       	andi	r20, 0x0F	; 15
     b96:	40 6c       	ori	r20, 0xC0	; 192
     b98:	2f 77       	andi	r18, 0x7F	; 127
     b9a:	dc 01       	movw	r26, r24
     b9c:	ed 91       	ld	r30, X+
     b9e:	fc 91       	ld	r31, X
     ba0:	62 e0       	ldi	r22, 0x02	; 2
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	00 e0       	ldi	r16, 0x00	; 0
     ba6:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
     ba8:	0f 91       	pop	r16
     baa:	08 95       	ret

00000bac <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
     bac:	0f 93       	push	r16
     bae:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     bb0:	46 2f       	mov	r20, r22
     bb2:	4f 70       	andi	r20, 0x0F	; 15
     bb4:	40 6d       	ori	r20, 0xD0	; 208
     bb6:	2f 77       	andi	r18, 0x7F	; 127
     bb8:	dc 01       	movw	r26, r24
     bba:	ed 91       	ld	r30, X+
     bbc:	fc 91       	ld	r31, X
     bbe:	62 e0       	ldi	r22, 0x02	; 2
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	00 e0       	ldi	r16, 0x00	; 0
     bc4:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
     bca:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
     bcc:	dc 01       	movw	r26, r24
     bce:	ed 91       	ld	r30, X+
     bd0:	fc 91       	ld	r31, X
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	48 ef       	ldi	r20, 0xF8	; 248
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	00 e0       	ldi	r16, 0x00	; 0
     bdc:	09 95       	icall
}
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret

00000be2 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
     be2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
     be4:	dc 01       	movw	r26, r24
     be6:	ed 91       	ld	r30, X+
     be8:	fc 91       	ld	r31, X
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	49 ef       	ldi	r20, 0xF9	; 249
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	00 e0       	ldi	r16, 0x00	; 0
     bf4:	09 95       	icall
}
     bf6:	0f 91       	pop	r16
     bf8:	08 95       	ret

00000bfa <midi_send_start>:

void midi_send_start(MidiDevice * device){
     bfa:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
     bfc:	dc 01       	movw	r26, r24
     bfe:	ed 91       	ld	r30, X+
     c00:	fc 91       	ld	r31, X
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	4a ef       	ldi	r20, 0xFA	; 250
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	00 e0       	ldi	r16, 0x00	; 0
     c0c:	09 95       	icall
}
     c0e:	0f 91       	pop	r16
     c10:	08 95       	ret

00000c12 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
     c12:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
     c14:	dc 01       	movw	r26, r24
     c16:	ed 91       	ld	r30, X+
     c18:	fc 91       	ld	r31, X
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	4b ef       	ldi	r20, 0xFB	; 251
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	00 e0       	ldi	r16, 0x00	; 0
     c24:	09 95       	icall
}
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
     c2a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
     c2c:	dc 01       	movw	r26, r24
     c2e:	ed 91       	ld	r30, X+
     c30:	fc 91       	ld	r31, X
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	4c ef       	ldi	r20, 0xFC	; 252
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	00 e0       	ldi	r16, 0x00	; 0
     c3c:	09 95       	icall
}
     c3e:	0f 91       	pop	r16
     c40:	08 95       	ret

00000c42 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
     c42:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
     c44:	dc 01       	movw	r26, r24
     c46:	ed 91       	ld	r30, X+
     c48:	fc 91       	ld	r31, X
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	4e ef       	ldi	r20, 0xFE	; 254
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	00 e0       	ldi	r16, 0x00	; 0
     c54:	09 95       	icall
}
     c56:	0f 91       	pop	r16
     c58:	08 95       	ret

00000c5a <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
     c5a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
     c5c:	dc 01       	movw	r26, r24
     c5e:	ed 91       	ld	r30, X+
     c60:	fc 91       	ld	r31, X
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	4f ef       	ldi	r20, 0xFF	; 255
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	00 e0       	ldi	r16, 0x00	; 0
     c6c:	09 95       	icall
}
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
     c72:	0f 93       	push	r16
   device->send_func(device, 2,
     c74:	26 2f       	mov	r18, r22
     c76:	2f 77       	andi	r18, 0x7F	; 127
     c78:	dc 01       	movw	r26, r24
     c7a:	ed 91       	ld	r30, X+
     c7c:	fc 91       	ld	r31, X
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	41 ef       	ldi	r20, 0xF1	; 241
     c84:	00 e0       	ldi	r16, 0x00	; 0
     c86:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
     c88:	0f 91       	pop	r16
     c8a:	08 95       	ret

00000c8c <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
   device->send_func(device, 3,
     c90:	26 2f       	mov	r18, r22
     c92:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
     c94:	8b 01       	movw	r16, r22
     c96:	00 0f       	add	r16, r16
     c98:	01 2f       	mov	r16, r17
     c9a:	00 1f       	adc	r16, r16
     c9c:	11 0b       	sbc	r17, r17
     c9e:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
     ca0:	0f 77       	andi	r16, 0x7F	; 127
     ca2:	dc 01       	movw	r26, r24
     ca4:	ed 91       	ld	r30, X+
     ca6:	fc 91       	ld	r31, X
     ca8:	63 e0       	ldi	r22, 0x03	; 3
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	42 ef       	ldi	r20, 0xF2	; 242
     cae:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	08 95       	ret

00000cb6 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
     cb6:	0f 93       	push	r16
   device->send_func(device, 2,
     cb8:	26 2f       	mov	r18, r22
     cba:	2f 77       	andi	r18, 0x7F	; 127
     cbc:	dc 01       	movw	r26, r24
     cbe:	ed 91       	ld	r30, X+
     cc0:	fc 91       	ld	r31, X
     cc2:	62 e0       	ldi	r22, 0x02	; 2
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	43 ef       	ldi	r20, 0xF3	; 243
     cc8:	00 e0       	ldi	r16, 0x00	; 0
     cca:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
     ccc:	0f 91       	pop	r16
     cce:	08 95       	ret

00000cd0 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
     cd0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
     cd2:	dc 01       	movw	r26, r24
     cd4:	ed 91       	ld	r30, X+
     cd6:	fc 91       	ld	r31, X
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	46 ef       	ldi	r20, 0xF6	; 246
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	00 e0       	ldi	r16, 0x00	; 0
     ce2:	09 95       	icall
}
     ce4:	0f 91       	pop	r16
     ce6:	08 95       	ret

00000ce8 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
     ce8:	0f 93       	push	r16
     cea:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
     cec:	dc 01       	movw	r26, r24
     cee:	ed 91       	ld	r30, X+
     cf0:	fc 91       	ld	r31, X
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	00 e0       	ldi	r16, 0x00	; 0
     cfa:	09 95       	icall
}
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
     d00:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
     d02:	dc 01       	movw	r26, r24
     d04:	ed 91       	ld	r30, X+
     d06:	fc 91       	ld	r31, X
     d08:	09 95       	icall
}
     d0a:	0f 91       	pop	r16
     d0c:	08 95       	ret

00000d0e <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
     d0e:	6f 92       	push	r6
     d10:	7f 92       	push	r7
     d12:	8f 92       	push	r8
     d14:	9f 92       	push	r9
     d16:	af 92       	push	r10
     d18:	bf 92       	push	r11
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <midi_send_array+0x1e>
     d2c:	0f 92       	push	r0
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	4c 01       	movw	r8, r24
     d34:	6b 01       	movw	r12, r22
     d36:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
     d38:	61 15       	cp	r22, r1
     d3a:	71 05       	cpc	r23, r1
     d3c:	41 f1       	breq	.+80     	; 0xd8e <midi_send_array+0x80>
     d3e:	ee 24       	eor	r14, r14
     d40:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
     d42:	0f 2e       	mov	r0, r31
     d44:	f3 e0       	ldi	r31, 0x03	; 3
     d46:	6f 2e       	mov	r6, r31
     d48:	77 24       	eor	r7, r7
     d4a:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
     d4c:	19 82       	std	Y+1, r1	; 0x01
     d4e:	1a 82       	std	Y+2, r1	; 0x02
     d50:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
     d52:	86 01       	movw	r16, r12
     d54:	0e 19       	sub	r16, r14
     d56:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
     d58:	04 30       	cpi	r16, 0x04	; 4
     d5a:	11 05       	cpc	r17, r1
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <midi_send_array+0x52>
     d5e:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
     d60:	b5 01       	movw	r22, r10
     d62:	6e 0d       	add	r22, r14
     d64:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
     d66:	ce 01       	movw	r24, r28
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	40 2f       	mov	r20, r16
     d6c:	51 2f       	mov	r21, r17
     d6e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
     d72:	c4 01       	movw	r24, r8
     d74:	b8 01       	movw	r22, r16
     d76:	49 81       	ldd	r20, Y+1	; 0x01
     d78:	2a 81       	ldd	r18, Y+2	; 0x02
     d7a:	0b 81       	ldd	r16, Y+3	; 0x03
     d7c:	0e 94 80 06 	call	0xd00	; 0xd00 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	e8 0e       	add	r14, r24
     d86:	f9 1e       	adc	r15, r25
     d88:	ec 14       	cp	r14, r12
     d8a:	fd 04       	cpc	r15, r13
     d8c:	f8 f2       	brcs	.-66     	; 0xd4c <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	bf 90       	pop	r11
     da6:	af 90       	pop	r10
     da8:	9f 90       	pop	r9
     daa:	8f 90       	pop	r8
     dac:	7f 90       	pop	r7
     dae:	6f 90       	pop	r6
     db0:	08 95       	ret

00000db2 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
     db2:	fc 01       	movw	r30, r24
     db4:	73 83       	std	Z+3, r23	; 0x03
     db6:	62 83       	std	Z+2, r22	; 0x02
}
     db8:	08 95       	ret

00000dba <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
     dba:	fc 01       	movw	r30, r24
     dbc:	75 83       	std	Z+5, r23	; 0x05
     dbe:	64 83       	std	Z+4, r22	; 0x04
}
     dc0:	08 95       	ret

00000dc2 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
     dc2:	fc 01       	movw	r30, r24
     dc4:	77 83       	std	Z+7, r23	; 0x07
     dc6:	66 83       	std	Z+6, r22	; 0x06
}
     dc8:	08 95       	ret

00000dca <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
     dca:	fc 01       	movw	r30, r24
     dcc:	71 87       	std	Z+9, r23	; 0x09
     dce:	60 87       	std	Z+8, r22	; 0x08
}
     dd0:	08 95       	ret

00000dd2 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
     dd2:	fc 01       	movw	r30, r24
     dd4:	73 87       	std	Z+11, r23	; 0x0b
     dd6:	62 87       	std	Z+10, r22	; 0x0a
}
     dd8:	08 95       	ret

00000dda <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
     dda:	fc 01       	movw	r30, r24
     ddc:	75 87       	std	Z+13, r23	; 0x0d
     dde:	64 87       	std	Z+12, r22	; 0x0c
}
     de0:	08 95       	ret

00000de2 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
     de2:	fc 01       	movw	r30, r24
     de4:	77 87       	std	Z+15, r23	; 0x0f
     de6:	66 87       	std	Z+14, r22	; 0x0e
}
     de8:	08 95       	ret

00000dea <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
     dea:	fc 01       	movw	r30, r24
     dec:	71 8b       	std	Z+17, r23	; 0x11
     dee:	60 8b       	std	Z+16, r22	; 0x10
}
     df0:	08 95       	ret

00000df2 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
     df2:	fc 01       	movw	r30, r24
     df4:	73 8b       	std	Z+19, r23	; 0x13
     df6:	62 8b       	std	Z+18, r22	; 0x12
}
     df8:	08 95       	ret

00000dfa <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
     dfa:	fc 01       	movw	r30, r24
     dfc:	75 8b       	std	Z+21, r23	; 0x15
     dfe:	64 8b       	std	Z+20, r22	; 0x14
}
     e00:	08 95       	ret

00000e02 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
     e02:	fc 01       	movw	r30, r24
     e04:	77 8b       	std	Z+23, r23	; 0x17
     e06:	66 8b       	std	Z+22, r22	; 0x16
}
     e08:	08 95       	ret

00000e0a <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
     e0a:	fc 01       	movw	r30, r24
     e0c:	71 8f       	std	Z+25, r23	; 0x19
     e0e:	60 8f       	std	Z+24, r22	; 0x18
}
     e10:	08 95       	ret

00000e12 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
     e12:	fc 01       	movw	r30, r24
     e14:	73 8f       	std	Z+27, r23	; 0x1b
     e16:	62 8f       	std	Z+26, r22	; 0x1a
}
     e18:	08 95       	ret

00000e1a <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
     e1a:	fc 01       	movw	r30, r24
     e1c:	75 8f       	std	Z+29, r23	; 0x1d
     e1e:	64 8f       	std	Z+28, r22	; 0x1c
}
     e20:	08 95       	ret

00000e22 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
     e22:	fc 01       	movw	r30, r24
     e24:	77 8f       	std	Z+31, r23	; 0x1f
     e26:	66 8f       	std	Z+30, r22	; 0x1e
}
     e28:	08 95       	ret

00000e2a <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
     e30:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
     e32:	1f a2       	lds	r17, 0x9f
     e34:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
     e36:	bc 01       	movw	r22, r24
     e38:	68 5d       	subi	r22, 0xD8	; 216
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	88 51       	subi	r24, 0x18	; 24
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	40 ec       	ldi	r20, 0xC0	; 192
     e42:	0e 94 8f 04 	call	0x91e	; 0x91e <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
     e46:	1b 82       	std	Y+3, r1	; 0x03
     e48:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
     e4a:	1d 82       	std	Y+5, r1	; 0x05
     e4c:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
     e4e:	1f 82       	std	Y+7, r1	; 0x07
     e50:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
     e52:	19 86       	std	Y+9, r1	; 0x09
     e54:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
     e56:	1b 86       	std	Y+11, r1	; 0x0b
     e58:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
     e5a:	1d 86       	std	Y+13, r1	; 0x0d
     e5c:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
     e5e:	1f 86       	std	Y+15, r1	; 0x0f
     e60:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
     e62:	19 8a       	std	Y+17, r1	; 0x11
     e64:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
     e66:	1b 8a       	std	Y+19, r1	; 0x13
     e68:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
     e6a:	1d 8a       	std	Y+21, r1	; 0x15
     e6c:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
     e6e:	1f 8a       	std	Y+23, r1	; 0x17
     e70:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
     e72:	19 8e       	std	Y+25, r1	; 0x19
     e74:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
     e76:	1b 8e       	std	Y+27, r1	; 0x1b
     e78:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
     e7a:	1d 8e       	std	Y+29, r1	; 0x1d
     e7c:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
     e7e:	1f 8e       	std	Y+31, r1	; 0x1f
     e80:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
     e82:	19 a2       	lds	r17, 0x99
     e84:	18 a2       	lds	r17, 0x98
}
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
     e9a:	66 23       	and	r22, r22
     e9c:	99 f0       	breq	.+38     	; 0xec4 <midi_device_input+0x38>
     e9e:	04 2f       	mov	r16, r20
     ea0:	15 2f       	mov	r17, r21
     ea2:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
     ea4:	0f 2e       	mov	r0, r31
     ea6:	f8 ee       	ldi	r31, 0xE8	; 232
     ea8:	ef 2e       	mov	r14, r31
     eaa:	ff 24       	eor	r15, r15
     eac:	f0 2d       	mov	r31, r0
     eae:	e8 0e       	add	r14, r24
     eb0:	f9 1e       	adc	r15, r25
     eb2:	f8 01       	movw	r30, r16
     eb4:	61 91       	ld	r22, Z+
     eb6:	8f 01       	movw	r16, r30
     eb8:	c7 01       	movw	r24, r14
     eba:	0e 94 96 04 	call	0x92c	; 0x92c <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
     ebe:	cf 5f       	subi	r28, 0xFF	; 255
     ec0:	cd 17       	cp	r28, r29
     ec2:	b9 f7       	brne	.-18     	; 0xeb2 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	08 95       	ret

00000ed2 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
     ed2:	fc 01       	movw	r30, r24
     ed4:	71 83       	std	Z+1, r23	; 0x01
     ed6:	60 83       	st	Z, r22
}
     ed8:	08 95       	ret

00000eda <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
     eda:	fc 01       	movw	r30, r24
     edc:	71 a3       	lds	r23, 0x51
     ede:	60 a3       	lds	r22, 0x50
}
     ee0:	08 95       	ret

00000ee2 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
     ee2:	af 92       	push	r10
     ee4:	bf 92       	push	r11
     ee6:	cf 92       	push	r12
     ee8:	df 92       	push	r13
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <midi_input_callbacks+0x16>
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	6c 01       	movw	r12, r24
     f00:	5b 01       	movw	r10, r22
     f02:	f4 2e       	mov	r15, r20
     f04:	e2 2e       	mov	r14, r18
     f06:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
     f08:	dc 01       	movw	r26, r24
     f0a:	95 96       	adiw	r26, 0x25	; 37
     f0c:	8c 91       	ld	r24, X
     f0e:	95 97       	sbiw	r26, 0x25	; 37
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	e9 f4       	brne	.+58     	; 0xf4e <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
     f14:	5a 96       	adiw	r26, 0x1a	; 26
     f16:	ed 91       	ld	r30, X+
     f18:	fc 91       	ld	r31, X
     f1a:	5b 97       	sbiw	r26, 0x1b	; 27
     f1c:	30 97       	sbiw	r30, 0x00	; 0
     f1e:	09 f4       	brne	.+2      	; 0xf22 <midi_input_callbacks+0x40>
     f20:	ee c0       	rjmp	.+476    	; 0x10fe <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
     f22:	cb 01       	movw	r24, r22
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	63 e0       	ldi	r22, 0x03	; 3
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     f2e:	cb 01       	movw	r24, r22
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	68 0f       	add	r22, r24
     f36:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
     f38:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
     f3a:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
     f3c:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
     f3e:	4a 2d       	mov	r20, r10
     f40:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
     f42:	c6 01       	movw	r24, r12
     f44:	9e 01       	movw	r18, r28
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	09 95       	icall
     f4c:	c8 c0       	rjmp	.+400    	; 0x10de <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
     f4e:	62 30       	cpi	r22, 0x02	; 2
     f50:	71 05       	cpc	r23, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <midi_input_callbacks+0x74>
     f54:	5f c0       	rjmp	.+190    	; 0x1014 <midi_input_callbacks+0x132>
     f56:	63 30       	cpi	r22, 0x03	; 3
     f58:	71 05       	cpc	r23, r1
     f5a:	29 f0       	breq	.+10     	; 0xf66 <midi_input_callbacks+0x84>
     f5c:	61 30       	cpi	r22, 0x01	; 1
     f5e:	71 05       	cpc	r23, r1
     f60:	09 f0       	breq	.+2      	; 0xf64 <midi_input_callbacks+0x82>
     f62:	b3 c0       	rjmp	.+358    	; 0x10ca <midi_input_callbacks+0x1e8>
     f64:	99 c0       	rjmp	.+306    	; 0x1098 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     f66:	84 2f       	mov	r24, r20
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	80 7f       	andi	r24, 0xF0	; 240
     f6c:	90 70       	andi	r25, 0x00	; 0
     f6e:	80 3a       	cpi	r24, 0xA0	; 160
     f70:	91 05       	cpc	r25, r1
     f72:	29 f1       	breq	.+74     	; 0xfbe <midi_input_callbacks+0xdc>
     f74:	81 3a       	cpi	r24, 0xA1	; 161
     f76:	91 05       	cpc	r25, r1
     f78:	3c f4       	brge	.+14     	; 0xf88 <midi_input_callbacks+0xa6>
     f7a:	80 38       	cpi	r24, 0x80	; 128
     f7c:	91 05       	cpc	r25, r1
     f7e:	c9 f0       	breq	.+50     	; 0xfb2 <midi_input_callbacks+0xd0>
     f80:	80 39       	cpi	r24, 0x90	; 144
     f82:	91 05       	cpc	r25, r1
     f84:	91 f5       	brne	.+100    	; 0xfea <midi_input_callbacks+0x108>
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <midi_input_callbacks+0xc4>
     f88:	80 3e       	cpi	r24, 0xE0	; 224
     f8a:	91 05       	cpc	r25, r1
     f8c:	f1 f0       	breq	.+60     	; 0xfca <midi_input_callbacks+0xe8>
     f8e:	80 3f       	cpi	r24, 0xF0	; 240
     f90:	91 05       	cpc	r25, r1
     f92:	09 f1       	breq	.+66     	; 0xfd6 <midi_input_callbacks+0xf4>
     f94:	80 3b       	cpi	r24, 0xB0	; 176
     f96:	91 05       	cpc	r25, r1
     f98:	41 f5       	brne	.+80     	; 0xfea <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
     f9a:	d6 01       	movw	r26, r12
     f9c:	12 96       	adiw	r26, 0x02	; 2
     f9e:	ed 91       	ld	r30, X+
     fa0:	fc 91       	ld	r31, X
     fa2:	13 97       	sbiw	r26, 0x03	; 3
              break;
     fa4:	24 c0       	rjmp	.+72     	; 0xfee <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
     fa6:	d6 01       	movw	r26, r12
     fa8:	14 96       	adiw	r26, 0x04	; 4
     faa:	ed 91       	ld	r30, X+
     fac:	fc 91       	ld	r31, X
     fae:	15 97       	sbiw	r26, 0x05	; 5
              break;
     fb0:	1e c0       	rjmp	.+60     	; 0xfee <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
     fb2:	d6 01       	movw	r26, r12
     fb4:	16 96       	adiw	r26, 0x06	; 6
     fb6:	ed 91       	ld	r30, X+
     fb8:	fc 91       	ld	r31, X
     fba:	17 97       	sbiw	r26, 0x07	; 7
              break;
     fbc:	18 c0       	rjmp	.+48     	; 0xfee <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
     fbe:	d6 01       	movw	r26, r12
     fc0:	18 96       	adiw	r26, 0x08	; 8
     fc2:	ed 91       	ld	r30, X+
     fc4:	fc 91       	ld	r31, X
     fc6:	19 97       	sbiw	r26, 0x09	; 9
              break;
     fc8:	12 c0       	rjmp	.+36     	; 0xfee <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
     fca:	d6 01       	movw	r26, r12
     fcc:	1a 96       	adiw	r26, 0x0a	; 10
     fce:	ed 91       	ld	r30, X+
     fd0:	fc 91       	ld	r31, X
     fd2:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
     fd4:	0c c0       	rjmp	.+24     	; 0xfee <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
     fd6:	b2 ef       	ldi	r27, 0xF2	; 242
     fd8:	4b 17       	cp	r20, r27
     fda:	09 f0       	breq	.+2      	; 0xfde <midi_input_callbacks+0xfc>
     fdc:	90 c0       	rjmp	.+288    	; 0x10fe <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
     fde:	d6 01       	movw	r26, r12
     fe0:	1c 96       	adiw	r26, 0x0c	; 12
     fe2:	ed 91       	ld	r30, X+
     fe4:	fc 91       	ld	r31, X
     fe6:	1d 97       	sbiw	r26, 0x0d	; 13
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
     fea:	e0 e0       	ldi	r30, 0x00	; 0
     fec:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
     fee:	30 97       	sbiw	r30, 0x00	; 0
     ff0:	09 f4       	brne	.+2      	; 0xff4 <midi_input_callbacks+0x112>
     ff2:	85 c0       	rjmp	.+266    	; 0x10fe <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
     ff4:	b2 ef       	ldi	r27, 0xF2	; 242
     ff6:	fb 16       	cp	r15, r27
     ff8:	31 f4       	brne	.+12     	; 0x1006 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
     ffa:	c6 01       	movw	r24, r12
     ffc:	62 ef       	ldi	r22, 0xF2	; 242
     ffe:	4e 2d       	mov	r20, r14
    1000:	21 2f       	mov	r18, r17
    1002:	09 95       	icall
    1004:	6c c0       	rjmp	.+216    	; 0x10de <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1006:	6f 2d       	mov	r22, r15
    1008:	6f 70       	andi	r22, 0x0F	; 15
    100a:	c6 01       	movw	r24, r12
    100c:	4e 2d       	mov	r20, r14
    100e:	21 2f       	mov	r18, r17
    1010:	09 95       	icall
    1012:	65 c0       	rjmp	.+202    	; 0x10de <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1014:	84 2f       	mov	r24, r20
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	80 7f       	andi	r24, 0xF0	; 240
    101a:	90 70       	andi	r25, 0x00	; 0
    101c:	80 3d       	cpi	r24, 0xD0	; 208
    101e:	91 05       	cpc	r25, r1
    1020:	61 f0       	breq	.+24     	; 0x103a <midi_input_callbacks+0x158>
    1022:	80 3f       	cpi	r24, 0xF0	; 240
    1024:	91 05       	cpc	r25, r1
    1026:	79 f0       	breq	.+30     	; 0x1046 <midi_input_callbacks+0x164>
    1028:	80 3c       	cpi	r24, 0xC0	; 192
    102a:	91 05       	cpc	r25, r1
    102c:	f9 f4       	brne	.+62     	; 0x106c <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    102e:	d6 01       	movw	r26, r12
    1030:	1e 96       	adiw	r26, 0x0e	; 14
    1032:	ed 91       	ld	r30, X+
    1034:	fc 91       	ld	r31, X
    1036:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1038:	1b c0       	rjmp	.+54     	; 0x1070 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    103a:	d6 01       	movw	r26, r12
    103c:	50 96       	adiw	r26, 0x10	; 16
    103e:	ed 91       	ld	r30, X+
    1040:	fc 91       	ld	r31, X
    1042:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1044:	15 c0       	rjmp	.+42     	; 0x1070 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1046:	b3 ef       	ldi	r27, 0xF3	; 243
    1048:	4b 17       	cp	r20, r27
    104a:	31 f4       	brne	.+12     	; 0x1058 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    104c:	d6 01       	movw	r26, r12
    104e:	52 96       	adiw	r26, 0x12	; 18
    1050:	ed 91       	ld	r30, X+
    1052:	fc 91       	ld	r31, X
    1054:	53 97       	sbiw	r26, 0x13	; 19
    1056:	0c c0       	rjmp	.+24     	; 0x1070 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1058:	b1 ef       	ldi	r27, 0xF1	; 241
    105a:	4b 17       	cp	r20, r27
    105c:	09 f0       	breq	.+2      	; 0x1060 <midi_input_callbacks+0x17e>
    105e:	4f c0       	rjmp	.+158    	; 0x10fe <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    1060:	d6 01       	movw	r26, r12
    1062:	54 96       	adiw	r26, 0x14	; 20
    1064:	ed 91       	ld	r30, X+
    1066:	fc 91       	ld	r31, X
    1068:	55 97       	sbiw	r26, 0x15	; 21
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    106c:	e0 e0       	ldi	r30, 0x00	; 0
    106e:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1070:	30 97       	sbiw	r30, 0x00	; 0
    1072:	09 f4       	brne	.+2      	; 0x1076 <midi_input_callbacks+0x194>
    1074:	44 c0       	rjmp	.+136    	; 0x10fe <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1076:	b3 ef       	ldi	r27, 0xF3	; 243
    1078:	fb 16       	cp	r15, r27
    107a:	19 f0       	breq	.+6      	; 0x1082 <midi_input_callbacks+0x1a0>
    107c:	81 ef       	ldi	r24, 0xF1	; 241
    107e:	f8 16       	cp	r15, r24
    1080:	29 f4       	brne	.+10     	; 0x108c <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1082:	c6 01       	movw	r24, r12
    1084:	6f 2d       	mov	r22, r15
    1086:	4e 2d       	mov	r20, r14
    1088:	09 95       	icall
    108a:	29 c0       	rjmp	.+82     	; 0x10de <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    108c:	6f 2d       	mov	r22, r15
    108e:	6f 70       	andi	r22, 0x0F	; 15
    1090:	c6 01       	movw	r24, r12
    1092:	4e 2d       	mov	r20, r14
    1094:	09 95       	icall
    1096:	23 c0       	rjmp	.+70     	; 0x10de <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1098:	84 2f       	mov	r24, r20
    109a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <midi_is_realtime>
    109e:	88 23       	and	r24, r24
    10a0:	31 f0       	breq	.+12     	; 0x10ae <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    10a2:	d6 01       	movw	r26, r12
    10a4:	56 96       	adiw	r26, 0x16	; 22
    10a6:	ed 91       	ld	r30, X+
    10a8:	fc 91       	ld	r31, X
    10aa:	57 97       	sbiw	r26, 0x17	; 23
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    10ae:	b6 ef       	ldi	r27, 0xF6	; 246
    10b0:	fb 16       	cp	r15, r27
    10b2:	29 f5       	brne	.+74     	; 0x10fe <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    10b4:	d6 01       	movw	r26, r12
    10b6:	58 96       	adiw	r26, 0x18	; 24
    10b8:	ed 91       	ld	r30, X+
    10ba:	fc 91       	ld	r31, X
    10bc:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    10be:	30 97       	sbiw	r30, 0x00	; 0
    10c0:	f1 f0       	breq	.+60     	; 0x10fe <midi_input_callbacks+0x21c>
            func(device, byte0);
    10c2:	c6 01       	movw	r24, r12
    10c4:	6f 2d       	mov	r22, r15
    10c6:	09 95       	icall
    10c8:	0a c0       	rjmp	.+20     	; 0x10de <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    10ca:	64 30       	cpi	r22, 0x04	; 4
    10cc:	71 05       	cpc	r23, r1
    10ce:	a8 f4       	brcc	.+42     	; 0x10fa <midi_input_callbacks+0x218>
    10d0:	16 c0       	rjmp	.+44     	; 0x10fe <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    10d2:	c6 01       	movw	r24, r12
    10d4:	b5 01       	movw	r22, r10
    10d6:	4f 2d       	mov	r20, r15
    10d8:	2e 2d       	mov	r18, r14
    10da:	01 2f       	mov	r16, r17
    10dc:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    10de:	d6 01       	movw	r26, r12
    10e0:	5e 96       	adiw	r26, 0x1e	; 30
    10e2:	ed 91       	ld	r30, X+
    10e4:	fc 91       	ld	r31, X
    10e6:	5f 97       	sbiw	r26, 0x1f	; 31
    10e8:	30 97       	sbiw	r30, 0x00	; 0
    10ea:	89 f0       	breq	.+34     	; 0x110e <__stack+0xf>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    10ec:	c6 01       	movw	r24, r12
    10ee:	b5 01       	movw	r22, r10
    10f0:	4f 2d       	mov	r20, r15
    10f2:	2e 2d       	mov	r18, r14
    10f4:	01 2f       	mov	r16, r17
    10f6:	09 95       	icall
    10f8:	0a c0       	rjmp	.+20     	; 0x110e <__stack+0xf>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    10fa:	aa 24       	eor	r10, r10
    10fc:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    10fe:	d6 01       	movw	r26, r12
    1100:	5c 96       	adiw	r26, 0x1c	; 28
    1102:	ed 91       	ld	r30, X+
    1104:	fc 91       	ld	r31, X
    1106:	5d 97       	sbiw	r26, 0x1d	; 29
    1108:	30 97       	sbiw	r30, 0x00	; 0
    110a:	19 f7       	brne	.-58     	; 0x10d2 <midi_input_callbacks+0x1f0>
    110c:	e8 cf       	rjmp	.-48     	; 0x10de <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	08 95       	ret

0000112a <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    112a:	ef 92       	push	r14
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	7c 01       	movw	r14, r24
    1136:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    1138:	86 2f       	mov	r24, r22
    113a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <midi_is_realtime>
    113e:	88 23       	and	r24, r24
    1140:	91 f0       	breq	.+36     	; 0x1166 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1142:	d7 01       	movw	r26, r14
    1144:	95 96       	adiw	r26, 0x25	; 37
    1146:	dc 91       	ld	r29, X
    1148:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	95 96       	adiw	r26, 0x25	; 37
    114e:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    1150:	c7 01       	movw	r24, r14
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	4c 2f       	mov	r20, r28
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	00 e0       	ldi	r16, 0x00	; 0
    115c:	0e 94 71 07 	call	0xee2	; 0xee2 <midi_input_callbacks>
    device->input_state = state;
    1160:	f7 01       	movw	r30, r14
    1162:	d5 a3       	lds	r29, 0x55
    1164:	b7 c0       	rjmp	.+366    	; 0x12d4 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    1166:	8c 2f       	mov	r24, r28
    1168:	0e 94 0a 05 	call	0xa14	; 0xa14 <midi_is_statusbyte>
    116c:	88 23       	and	r24, r24
    116e:	09 f4       	brne	.+2      	; 0x1172 <midi_process_byte+0x48>
    1170:	73 c0       	rjmp	.+230    	; 0x1258 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1172:	d7 01       	movw	r26, r14
    1174:	95 96       	adiw	r26, 0x25	; 37
    1176:	8c 91       	ld	r24, X
    1178:	95 97       	sbiw	r26, 0x25	; 37
    117a:	84 30       	cpi	r24, 0x04	; 4
    117c:	49 f0       	breq	.+18     	; 0x1190 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    117e:	92 96       	adiw	r26, 0x22	; 34
    1180:	cc 93       	st	X, r28
    1182:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	97 96       	adiw	r26, 0x27	; 39
    118a:	9c 93       	st	X, r25
    118c:	8e 93       	st	-X, r24
    118e:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    1190:	8c 2f       	mov	r24, r28
    1192:	0e 94 14 05 	call	0xa28	; 0xa28 <midi_packet_length>
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	41 f0       	breq	.+16     	; 0x11aa <midi_process_byte+0x80>
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	00 f1       	brcs	.+64     	; 0x11de <midi_process_byte+0xb4>
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	a1 f0       	breq	.+40     	; 0x11ca <midi_process_byte+0xa0>
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <midi_process_byte+0x7e>
    11a6:	4f c0       	rjmp	.+158    	; 0x1246 <midi_process_byte+0x11c>
    11a8:	14 c0       	rjmp	.+40     	; 0x11d2 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	f7 01       	movw	r30, r14
    11ae:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    11b0:	c7 01       	movw	r24, r14
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	4c 2f       	mov	r20, r28
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	00 e0       	ldi	r16, 0x00	; 0
    11bc:	0e 94 71 07 	call	0xee2	; 0xee2 <midi_input_callbacks>
        device->input_state = IDLE;
    11c0:	d7 01       	movw	r26, r14
    11c2:	95 96       	adiw	r26, 0x25	; 37
    11c4:	1c 92       	st	X, r1
    11c6:	95 97       	sbiw	r26, 0x25	; 37
        break;
    11c8:	85 c0       	rjmp	.+266    	; 0x12d4 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	f7 01       	movw	r30, r14
    11ce:	85 a3       	lds	r24, 0x55
        break;
    11d0:	81 c0       	rjmp	.+258    	; 0x12d4 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	d7 01       	movw	r26, r14
    11d6:	95 96       	adiw	r26, 0x25	; 37
    11d8:	8c 93       	st	X, r24
    11da:	95 97       	sbiw	r26, 0x25	; 37
        break;
    11dc:	7b c0       	rjmp	.+246    	; 0x12d4 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    11de:	c0 3f       	cpi	r28, 0xF0	; 240
    11e0:	19 f0       	breq	.+6      	; 0x11e8 <midi_process_byte+0xbe>
    11e2:	c7 3f       	cpi	r28, 0xF7	; 247
    11e4:	59 f5       	brne	.+86     	; 0x123c <midi_process_byte+0x112>
    11e6:	0a c0       	rjmp	.+20     	; 0x11fc <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    11e8:	84 e0       	ldi	r24, 0x04	; 4
    11ea:	f7 01       	movw	r30, r14
    11ec:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    11ee:	80 ef       	ldi	r24, 0xF0	; 240
    11f0:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	97 a3       	lds	r25, 0x57
    11f8:	86 a3       	lds	r24, 0x56
            break;
    11fa:	6c c0       	rjmp	.+216    	; 0x12d4 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    11fc:	d7 01       	movw	r26, r14
    11fe:	96 96       	adiw	r26, 0x26	; 38
    1200:	2d 91       	ld	r18, X+
    1202:	3c 91       	ld	r19, X
    1204:	97 97       	sbiw	r26, 0x27	; 39
    1206:	c9 01       	movw	r24, r18
    1208:	63 e0       	ldi	r22, 0x03	; 3
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
    1210:	f7 01       	movw	r30, r14
    1212:	e8 0f       	add	r30, r24
    1214:	f9 1f       	adc	r31, r25
    1216:	87 ef       	ldi	r24, 0xF7	; 247
    1218:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    121a:	b9 01       	movw	r22, r18
    121c:	6f 5f       	subi	r22, 0xFF	; 255
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	f7 01       	movw	r30, r14
    1222:	77 a3       	lds	r23, 0x57
    1224:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    1226:	c7 01       	movw	r24, r14
    1228:	42 a1       	lds	r20, 0x42
    122a:	23 a1       	lds	r18, 0x43
    122c:	04 a1       	lds	r16, 0x44
    122e:	0e 94 71 07 	call	0xee2	; 0xee2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1232:	d7 01       	movw	r26, r14
    1234:	95 96       	adiw	r26, 0x25	; 37
    1236:	1c 92       	st	X, r1
    1238:	95 97       	sbiw	r26, 0x25	; 37
            break;
    123a:	4c c0       	rjmp	.+152    	; 0x12d4 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    123c:	f7 01       	movw	r30, r14
    123e:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    1240:	17 a2       	lds	r17, 0x97
    1242:	16 a2       	lds	r17, 0x96
    1244:	47 c0       	rjmp	.+142    	; 0x12d4 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    1246:	d7 01       	movw	r26, r14
    1248:	95 96       	adiw	r26, 0x25	; 37
    124a:	1c 92       	st	X, r1
    124c:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    124e:	97 96       	adiw	r26, 0x27	; 39
    1250:	1c 92       	st	X, r1
    1252:	1e 92       	st	-X, r1
    1254:	96 97       	sbiw	r26, 0x26	; 38
        break;
    1256:	3e c0       	rjmp	.+124    	; 0x12d4 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    1258:	f7 01       	movw	r30, r14
    125a:	25 a1       	lds	r18, 0x45
    125c:	22 23       	and	r18, r18
    125e:	d1 f1       	breq	.+116    	; 0x12d4 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1260:	06 a0       	lds	r16, 0x86
    1262:	f7 a1       	lds	r31, 0x47
    1264:	e0 2d       	mov	r30, r0
    1266:	cf 01       	movw	r24, r30
    1268:	63 e0       	ldi	r22, 0x03	; 3
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
    1270:	ac 01       	movw	r20, r24
    1272:	8e 0d       	add	r24, r14
    1274:	9f 1d       	adc	r25, r15
    1276:	dc 01       	movw	r26, r24
    1278:	92 96       	adiw	r26, 0x22	; 34
    127a:	cc 93       	st	X, r28
    127c:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    127e:	bf 01       	movw	r22, r30
    1280:	6f 5f       	subi	r22, 0xFF	; 255
    1282:	7f 4f       	sbci	r23, 0xFF	; 255
    1284:	f7 01       	movw	r30, r14
    1286:	77 a3       	lds	r23, 0x57
    1288:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    128a:	41 30       	cpi	r20, 0x01	; 1
    128c:	51 05       	cpc	r21, r1
    128e:	91 f0       	breq	.+36     	; 0x12b4 <midi_process_byte+0x18a>
    1290:	42 30       	cpi	r20, 0x02	; 2
    1292:	51 05       	cpc	r21, r1
    1294:	f9 f4       	brne	.+62     	; 0x12d4 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1296:	c7 01       	movw	r24, r14
    1298:	42 a1       	lds	r20, 0x42
    129a:	23 a1       	lds	r18, 0x43
    129c:	04 a1       	lds	r16, 0x44
    129e:	0e 94 71 07 	call	0xee2	; 0xee2 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    12a2:	f7 01       	movw	r30, r14
    12a4:	85 a1       	lds	r24, 0x45
    12a6:	84 30       	cpi	r24, 0x04	; 4
    12a8:	a9 f0       	breq	.+42     	; 0x12d4 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	97 a3       	lds	r25, 0x57
    12b0:	86 a3       	lds	r24, 0x56
    12b2:	10 c0       	rjmp	.+32     	; 0x12d4 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	71 f4       	brne	.+28     	; 0x12d4 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    12b8:	c7 01       	movw	r24, r14
    12ba:	42 a1       	lds	r20, 0x42
    12bc:	23 a1       	lds	r18, 0x43
    12be:	00 e0       	ldi	r16, 0x00	; 0
    12c0:	0e 94 71 07 	call	0xee2	; 0xee2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    12c4:	f7 01       	movw	r30, r14
    12c6:	85 a1       	lds	r24, 0x45
    12c8:	84 30       	cpi	r24, 0x04	; 4
    12ca:	21 f0       	breq	.+8      	; 0x12d4 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	97 a3       	lds	r25, 0x57
    12d2:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	0f 91       	pop	r16
    12da:	ff 90       	pop	r15
    12dc:	ef 90       	pop	r14
    12de:	08 95       	ret

000012e0 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    12f2:	dc 01       	movw	r26, r24
    12f4:	90 96       	adiw	r26, 0x20	; 32
    12f6:	ed 91       	ld	r30, X+
    12f8:	fc 91       	ld	r31, X
    12fa:	91 97       	sbiw	r26, 0x21	; 33
    12fc:	30 97       	sbiw	r30, 0x00	; 0
    12fe:	09 f0       	breq	.+2      	; 0x1302 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    1300:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    1302:	0f 2e       	mov	r0, r31
    1304:	f8 ee       	ldi	r31, 0xE8	; 232
    1306:	ef 2e       	mov	r14, r31
    1308:	ff 24       	eor	r15, r15
    130a:	f0 2d       	mov	r31, r0
    130c:	ec 0c       	add	r14, r12
    130e:	fd 1c       	adc	r15, r13
    1310:	c7 01       	movw	r24, r14
    1312:	0e 94 c5 04 	call	0x98a	; 0x98a <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    1316:	c8 2f       	mov	r28, r24
    1318:	d0 e0       	ldi	r29, 0x00	; 0
    131a:	20 97       	sbiw	r28, 0x00	; 0
    131c:	99 f0       	breq	.+38     	; 0x1344 <midi_device_process+0x64>
    131e:	00 e0       	ldi	r16, 0x00	; 0
    1320:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    1322:	c7 01       	movw	r24, r14
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	0e 94 da 04 	call	0x9b4	; 0x9b4 <bytequeue_get>
    132a:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    132c:	c6 01       	movw	r24, r12
    132e:	0e 94 95 08 	call	0x112a	; 0x112a <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1332:	c7 01       	movw	r24, r14
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    133a:	0f 5f       	subi	r16, 0xFF	; 255
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	0c 17       	cp	r16, r28
    1340:	1d 07       	cpc	r17, r29
    1342:	78 f3       	brcs	.-34     	; 0x1322 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	08 95       	ret

00001356 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    1356:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    1358:	67 e0       	ldi	r22, 0x07	; 7
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
    1360:	48 2f       	mov	r20, r24
   if (remainder)
    1362:	88 23       	and	r24, r24
    1364:	81 f0       	breq	.+32     	; 0x1386 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    1366:	c9 01       	movw	r24, r18
    1368:	67 e0       	ldi	r22, 0x07	; 7
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
    1370:	cb 01       	movw	r24, r22
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	84 0f       	add	r24, r20
    1382:	91 1d       	adc	r25, r1
    1384:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    1386:	c9 01       	movw	r24, r18
    1388:	67 e0       	ldi	r22, 0x07	; 7
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
    1390:	cb 01       	movw	r24, r22
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
}
    139e:	08 95       	ret

000013a0 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    13a0:	48 2f       	mov	r20, r24
    13a2:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    13a4:	a1 f0       	breq	.+40     	; 0x13ce <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    13a6:	9c 01       	movw	r18, r24
    13a8:	36 95       	lsr	r19
    13aa:	27 95       	ror	r18
    13ac:	36 95       	lsr	r19
    13ae:	27 95       	ror	r18
    13b0:	36 95       	lsr	r19
    13b2:	27 95       	ror	r18
    13b4:	c9 01       	movw	r24, r18
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	82 1b       	sub	r24, r18
    13c4:	93 0b       	sbc	r25, r19
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	84 0f       	add	r24, r20
    13ca:	91 1d       	adc	r25, r1
    13cc:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    13ce:	9c 01       	movw	r18, r24
    13d0:	36 95       	lsr	r19
    13d2:	27 95       	ror	r18
    13d4:	36 95       	lsr	r19
    13d6:	27 95       	ror	r18
    13d8:	36 95       	lsr	r19
    13da:	27 95       	ror	r18
    13dc:	c9 01       	movw	r24, r18
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	82 1b       	sub	r24, r18
    13ec:	93 0b       	sbc	r25, r19
}
    13ee:	08 95       	ret

000013f0 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    13f0:	2f 92       	push	r2
    13f2:	3f 92       	push	r3
    13f4:	4f 92       	push	r4
    13f6:	5f 92       	push	r5
    13f8:	6f 92       	push	r6
    13fa:	7f 92       	push	r7
    13fc:	8f 92       	push	r8
    13fe:	9f 92       	push	r9
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	00 d0       	rcall	.+0      	; 0x1416 <sysex_encode+0x26>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <sysex_encode+0x28>
    1418:	00 d0       	rcall	.+0      	; 0x141a <sysex_encode+0x2a>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	1c 01       	movw	r2, r24
    1420:	7a 83       	std	Y+2, r23	; 0x02
    1422:	69 83       	std	Y+1, r22	; 0x01
    1424:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    1426:	ca 01       	movw	r24, r20
    1428:	67 e0       	ldi	r22, 0x07	; 7
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
    1430:	2b 01       	movw	r4, r22
    1432:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    1434:	61 15       	cp	r22, r1
    1436:	71 05       	cpc	r23, r1
    1438:	b1 f1       	breq	.+108    	; 0x14a6 <sysex_encode+0xb6>
    143a:	81 01       	movw	r16, r2
    143c:	e9 80       	ldd	r14, Y+1	; 0x01
    143e:	fa 80       	ldd	r15, Y+2	; 0x02
    1440:	cc 24       	eor	r12, r12
    1442:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1444:	88 24       	eor	r8, r8
    1446:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1448:	1e 83       	std	Y+6, r17	; 0x06
    144a:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    144c:	f8 01       	movw	r30, r16
    144e:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1450:	fc 82       	std	Y+4, r15	; 0x04
    1452:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1454:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    1456:	ab 81       	ldd	r26, Y+3	; 0x03
    1458:	bc 81       	ldd	r27, Y+4	; 0x04
    145a:	2d 91       	ld	r18, X+
    145c:	bc 83       	std	Y+4, r27	; 0x04
    145e:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    1460:	4f 5f       	subi	r20, 0xFF	; 255
    1462:	5f 4f       	sbci	r21, 0xFF	; 255
    1464:	82 2f       	mov	r24, r18
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	80 78       	andi	r24, 0x80	; 128
    146a:	90 70       	andi	r25, 0x00	; 0
    146c:	bc 01       	movw	r22, r24
    146e:	04 2e       	mov	r0, r20
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <sysex_encode+0x86>
    1472:	75 95       	asr	r23
    1474:	67 95       	ror	r22
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <sysex_encode+0x82>
    147a:	ad 81       	ldd	r26, Y+5	; 0x05
    147c:	be 81       	ldd	r27, Y+6	; 0x06
    147e:	8c 91       	ld	r24, X
    1480:	86 2b       	or	r24, r22
    1482:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1484:	2f 77       	andi	r18, 0x7F	; 127
    1486:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1488:	47 30       	cpi	r20, 0x07	; 7
    148a:	51 05       	cpc	r21, r1
    148c:	21 f7       	brne	.-56     	; 0x1456 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    148e:	08 94       	sec
    1490:	c1 1c       	adc	r12, r1
    1492:	d1 1c       	adc	r13, r1
    1494:	08 5f       	subi	r16, 0xF8	; 248
    1496:	1f 4f       	sbci	r17, 0xFF	; 255
    1498:	e7 e0       	ldi	r30, 0x07	; 7
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	ee 0e       	add	r14, r30
    149e:	ff 1e       	adc	r15, r31
    14a0:	ca 14       	cp	r12, r10
    14a2:	db 04       	cpc	r13, r11
    14a4:	89 f6       	brne	.-94     	; 0x1448 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    14a6:	c3 01       	movw	r24, r6
    14a8:	67 e0       	ldi	r22, 0x07	; 7
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
   if (remainder) {
    14b0:	88 23       	and	r24, r24
    14b2:	d9 f1       	breq	.+118    	; 0x152a <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    14b4:	82 01       	movw	r16, r4
    14b6:	00 0f       	add	r16, r16
    14b8:	11 1f       	adc	r17, r17
    14ba:	00 0f       	add	r16, r16
    14bc:	11 1f       	adc	r17, r17
    14be:	00 0f       	add	r16, r16
    14c0:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    14c2:	78 01       	movw	r14, r16
    14c4:	e4 18       	sub	r14, r4
    14c6:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    14c8:	d1 01       	movw	r26, r2
    14ca:	a0 0f       	add	r26, r16
    14cc:	b1 1f       	adc	r27, r17
    14ce:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    14d0:	68 2f       	mov	r22, r24
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	61 15       	cp	r22, r1
    14d6:	71 05       	cpc	r23, r1
    14d8:	19 f1       	breq	.+70     	; 0x1520 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    14da:	e9 81       	ldd	r30, Y+1	; 0x01
    14dc:	fa 81       	ldd	r31, Y+2	; 0x02
    14de:	ee 0e       	add	r14, r30
    14e0:	ff 1e       	adc	r15, r31
    14e2:	c8 01       	movw	r24, r16
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	28 0e       	add	r2, r24
    14e8:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    14ee:	f7 01       	movw	r30, r14
    14f0:	41 91       	ld	r20, Z+
    14f2:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    14f4:	2f 5f       	subi	r18, 0xFF	; 255
    14f6:	3f 4f       	sbci	r19, 0xFF	; 255
    14f8:	84 2f       	mov	r24, r20
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	80 78       	andi	r24, 0x80	; 128
    14fe:	90 70       	andi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <sysex_encode+0x118>
    1504:	95 95       	asr	r25
    1506:	87 95       	ror	r24
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <sysex_encode+0x114>
    150c:	9c 91       	ld	r25, X
    150e:	89 2b       	or	r24, r25
    1510:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1512:	4f 77       	andi	r20, 0x7F	; 127
    1514:	f1 01       	movw	r30, r2
    1516:	41 93       	st	Z+, r20
    1518:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    151a:	26 17       	cp	r18, r22
    151c:	37 07       	cpc	r19, r23
    151e:	38 f3       	brcs	.-50     	; 0x14ee <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    1520:	c8 01       	movw	r24, r16
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	86 0f       	add	r24, r22
    1526:	97 1f       	adc	r25, r23
    1528:	07 c0       	rjmp	.+14     	; 0x1538 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    152a:	c2 01       	movw	r24, r4
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
   }
}
    1538:	26 96       	adiw	r28, 0x06	; 6
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	9f 90       	pop	r9
    155a:	8f 90       	pop	r8
    155c:	7f 90       	pop	r7
    155e:	6f 90       	pop	r6
    1560:	5f 90       	pop	r5
    1562:	4f 90       	pop	r4
    1564:	3f 90       	pop	r3
    1566:	2f 90       	pop	r2
    1568:	08 95       	ret

0000156a <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    156a:	6f 92       	push	r6
    156c:	7f 92       	push	r7
    156e:	8f 92       	push	r8
    1570:	9f 92       	push	r9
    1572:	af 92       	push	r10
    1574:	bf 92       	push	r11
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	3c 01       	movw	r6, r24
    1588:	4b 01       	movw	r8, r22
    158a:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    158c:	42 30       	cpi	r20, 0x02	; 2
    158e:	51 05       	cpc	r21, r1
    1590:	08 f4       	brcc	.+2      	; 0x1594 <sysex_decode+0x2a>
    1592:	6f c0       	rjmp	.+222    	; 0x1672 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    1594:	7a 01       	movw	r14, r20
    1596:	f6 94       	lsr	r15
    1598:	e7 94       	ror	r14
    159a:	f6 94       	lsr	r15
    159c:	e7 94       	ror	r14
    159e:	f6 94       	lsr	r15
    15a0:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    15a2:	e1 14       	cp	r14, r1
    15a4:	f1 04       	cpc	r15, r1
    15a6:	29 f1       	breq	.+74     	; 0x15f2 <sysex_decode+0x88>
    15a8:	eb 01       	movw	r28, r22
    15aa:	b3 01       	movw	r22, r6
    15ac:	00 e0       	ldi	r16, 0x00	; 0
    15ae:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    15b0:	cc 24       	eor	r12, r12
    15b2:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    15b4:	de 01       	movw	r26, r28
    15b6:	11 96       	adiw	r26, 0x01	; 1
    15b8:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    15ba:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    15bc:	2d 91       	ld	r18, X+
    15be:	2f 77       	andi	r18, 0x7F	; 127
    15c0:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    15c2:	4f 5f       	subi	r20, 0xFF	; 255
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	88 81       	ld	r24, Y
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	04 2e       	mov	r0, r20
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <sysex_decode+0x68>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <sysex_decode+0x64>
    15d6:	80 78       	andi	r24, 0x80	; 128
    15d8:	28 2b       	or	r18, r24
    15da:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    15dc:	47 30       	cpi	r20, 0x07	; 7
    15de:	51 05       	cpc	r21, r1
    15e0:	69 f7       	brne	.-38     	; 0x15bc <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    15e2:	0f 5f       	subi	r16, 0xFF	; 255
    15e4:	1f 4f       	sbci	r17, 0xFF	; 255
    15e6:	28 96       	adiw	r28, 0x08	; 8
    15e8:	69 5f       	subi	r22, 0xF9	; 249
    15ea:	7f 4f       	sbci	r23, 0xFF	; 255
    15ec:	0e 15       	cp	r16, r14
    15ee:	1f 05       	cpc	r17, r15
    15f0:	09 f7       	brne	.-62     	; 0x15b4 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    15f2:	5a 2d       	mov	r21, r10
    15f4:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    15f6:	99 f1       	breq	.+102    	; 0x165e <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    15f8:	e7 01       	movw	r28, r14
    15fa:	cc 0f       	add	r28, r28
    15fc:	dd 1f       	adc	r29, r29
    15fe:	cc 0f       	add	r28, r28
    1600:	dd 1f       	adc	r29, r29
    1602:	cc 0f       	add	r28, r28
    1604:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    1606:	8e 01       	movw	r16, r28
    1608:	0e 19       	sub	r16, r14
    160a:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    160c:	65 2f       	mov	r22, r21
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	61 50       	subi	r22, 0x01	; 1
    1612:	70 40       	sbci	r23, 0x00	; 0
    1614:	f9 f0       	breq	.+62     	; 0x1654 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1616:	ce 01       	movw	r24, r28
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	d4 01       	movw	r26, r8
    161c:	a8 0f       	add	r26, r24
    161e:	b9 1f       	adc	r27, r25
    1620:	f3 01       	movw	r30, r6
    1622:	e0 0f       	add	r30, r16
    1624:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    162a:	c8 0d       	add	r28, r8
    162c:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    162e:	4d 91       	ld	r20, X+
    1630:	4f 77       	andi	r20, 0x7F	; 127
    1632:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    1634:	2f 5f       	subi	r18, 0xFF	; 255
    1636:	3f 4f       	sbci	r19, 0xFF	; 255
    1638:	88 81       	ld	r24, Y
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <sysex_decode+0xda>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <sysex_decode+0xd6>
    1648:	80 78       	andi	r24, 0x80	; 128
    164a:	48 2b       	or	r20, r24
    164c:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    164e:	26 17       	cp	r18, r22
    1650:	37 07       	cpc	r19, r23
    1652:	68 f3       	brcs	.-38     	; 0x162e <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    1654:	c8 01       	movw	r24, r16
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	85 0f       	add	r24, r21
    165a:	91 1d       	adc	r25, r1
    165c:	0c c0       	rjmp	.+24     	; 0x1676 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    165e:	c7 01       	movw	r24, r14
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	8e 19       	sub	r24, r14
    166e:	9f 09       	sbc	r25, r15
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	9f 90       	pop	r9
    168c:	8f 90       	pop	r8
    168e:	7f 90       	pop	r7
    1690:	6f 90       	pop	r6
    1692:	08 95       	ret

00001694 <__udivmodhi4>:
    1694:	aa 1b       	sub	r26, r26
    1696:	bb 1b       	sub	r27, r27
    1698:	51 e1       	ldi	r21, 0x11	; 17
    169a:	07 c0       	rjmp	.+14     	; 0x16aa <__udivmodhi4_ep>

0000169c <__udivmodhi4_loop>:
    169c:	aa 1f       	adc	r26, r26
    169e:	bb 1f       	adc	r27, r27
    16a0:	a6 17       	cp	r26, r22
    16a2:	b7 07       	cpc	r27, r23
    16a4:	10 f0       	brcs	.+4      	; 0x16aa <__udivmodhi4_ep>
    16a6:	a6 1b       	sub	r26, r22
    16a8:	b7 0b       	sbc	r27, r23

000016aa <__udivmodhi4_ep>:
    16aa:	88 1f       	adc	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	5a 95       	dec	r21
    16b0:	a9 f7       	brne	.-22     	; 0x169c <__udivmodhi4_loop>
    16b2:	80 95       	com	r24
    16b4:	90 95       	com	r25
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	08 95       	ret

000016bc <__divmodhi4>:
    16bc:	97 fb       	bst	r25, 7
    16be:	09 2e       	mov	r0, r25
    16c0:	07 26       	eor	r0, r23
    16c2:	0a d0       	rcall	.+20     	; 0x16d8 <__divmodhi4_neg1>
    16c4:	77 fd       	sbrc	r23, 7
    16c6:	04 d0       	rcall	.+8      	; 0x16d0 <__divmodhi4_neg2>
    16c8:	e5 df       	rcall	.-54     	; 0x1694 <__udivmodhi4>
    16ca:	06 d0       	rcall	.+12     	; 0x16d8 <__divmodhi4_neg1>
    16cc:	00 20       	and	r0, r0
    16ce:	1a f4       	brpl	.+6      	; 0x16d6 <__divmodhi4_exit>

000016d0 <__divmodhi4_neg2>:
    16d0:	70 95       	com	r23
    16d2:	61 95       	neg	r22
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255

000016d6 <__divmodhi4_exit>:
    16d6:	08 95       	ret

000016d8 <__divmodhi4_neg1>:
    16d8:	f6 f7       	brtc	.-4      	; 0x16d6 <__divmodhi4_exit>
    16da:	90 95       	com	r25
    16dc:	81 95       	neg	r24
    16de:	9f 4f       	sbci	r25, 0xFF	; 255
    16e0:	08 95       	ret

000016e2 <memcpy>:
    16e2:	fb 01       	movw	r30, r22
    16e4:	dc 01       	movw	r26, r24
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <memcpy+0xa>
    16e8:	01 90       	ld	r0, Z+
    16ea:	0d 92       	st	X+, r0
    16ec:	41 50       	subi	r20, 0x01	; 1
    16ee:	50 40       	sbci	r21, 0x00	; 0
    16f0:	d8 f7       	brcc	.-10     	; 0x16e8 <memcpy+0x6>
    16f2:	08 95       	ret

000016f4 <_exit>:
    16f4:	f8 94       	cli

000016f6 <__stop_program>:
    16f6:	ff cf       	rjmp	.-2      	; 0x16f6 <__stop_program>
