
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  00002bce  00002c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f2  00800294  00800294  00002e16  2**0
                  ALLOC
  3 .eeprom       00000776  00810000  00810000  00002e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  0000358c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  000044c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000556c  00000000  00000000  00004780  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000145d  00000000  00000000  00009cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001cef  00000000  00000000  0000b149  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bc0  00000000  00000000  0000ce38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001721  00000000  00000000  0000d9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a64  00000000  00000000  0000f119  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00011b7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_9>
      28:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ee ec       	ldi	r30, 0xCE	; 206
      78:	fb e2       	ldi	r31, 0x2B	; 43
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a4 e9       	ldi	r26, 0x94	; 148
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a6 38       	cpi	r26, 0x86	; 134
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <main>
      9a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 94 02 	lds	r24, 0x0294
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 94 02 	sts	0x0294, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 94 02 	sts	0x0294, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 94 02 	sts	0x0294, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1f6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1f8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1fa:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1fe:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     200:	8c 91       	ld	r24, X
     202:	87 70       	andi	r24, 0x07	; 7
     204:	82 b9       	out	0x02, r24	; 2
     206:	66 e0       	ldi	r22, 0x06	; 6
     208:	6a 95       	dec	r22
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x12>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     20e:	ea ed       	ldi	r30, 0xDA	; 218
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	40 81       	ld	r20, Z
     214:	8c 91       	ld	r24, X
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	86 95       	lsr	r24
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	b9 01       	movw	r22, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <set_control_voltage+0x34>
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <set_control_voltage+0x30>
     22e:	cb 01       	movw	r24, r22
     230:	84 2b       	or	r24, r20
     232:	80 83       	st	Z, r24
     234:	76 e0       	ldi	r23, 0x06	; 6
     236:	7a 95       	dec	r23
     238:	f1 f7       	brne	.-4      	; 0x236 <set_control_voltage+0x40>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     23c:	80 81       	ld	r24, Z
     23e:	9c 91       	ld	r25, X
     240:	96 95       	lsr	r25
     242:	96 95       	lsr	r25
     244:	96 95       	lsr	r25
     246:	97 70       	andi	r25, 0x07	; 7
     248:	02 c0       	rjmp	.+4      	; 0x24e <set_control_voltage+0x58>
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	9a 95       	dec	r25
     250:	e2 f7       	brpl	.-8      	; 0x24a <set_control_voltage+0x54>
     252:	20 95       	com	r18
     254:	28 23       	and	r18, r24
     256:	20 83       	st	Z, r18
	
}	
     258:	08 95       	ret

0000025a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     25a:	83 b3       	in	r24, 0x13	; 19
     25c:	83 60       	ori	r24, 0x03	; 3
     25e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     264:	97 b1       	in	r25, 0x07	; 7
     266:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     268:	e9 ed       	ldi	r30, 0xD9	; 217
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     272:	ea ed       	ldi	r30, 0xDA	; 218
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     27c:	84 b3       	in	r24, 0x14	; 20
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     282:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     284:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     286:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     288:	a0 9a       	sbi	0x14, 0	; 20
}
     28a:	08 95       	ret

0000028c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t place)
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2e 97       	sbiw	r28, 0x0e	; 14
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ac 01       	movw	r20, r24
	
	uint8_t digit[] = {
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	8a 83       	std	Y+2, r24	; 0x02
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	8b 83       	std	Y+3, r24	; 0x03
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	8c 83       	std	Y+4, r24	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2b6:	de 01       	movw	r26, r28
     2b8:	15 96       	adiw	r26, 0x05	; 5
     2ba:	e7 ee       	ldi	r30, 0xE7	; 231
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <display_dec+0x34>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2cc:	ea ed       	ldi	r30, 0xDA	; 218
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d6:	80 81       	ld	r24, Z
     2d8:	8f 7e       	andi	r24, 0xEF	; 239
     2da:	80 83       	st	Z, r24
	
	//set anode bit
	DATA_BUS = digit[place];
     2dc:	06 2f       	mov	r16, r22
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	de 01       	movw	r26, r28
     2e2:	a0 0f       	add	r26, r16
     2e4:	b1 1f       	adc	r27, r17
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	8c 91       	ld	r24, X
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	82 b9       	out	0x02, r24	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2ee:	80 81       	ld	r24, Z
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	80 83       	st	Z, r24
	//if (number > 999) {
	//number = 999;
	//}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     2fa:	ca 01       	movw	r24, r20
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	9a 01       	movw	r18, r20
     306:	36 95       	lsr	r19
     308:	27 95       	ror	r18
     30a:	28 0f       	add	r18, r24
     30c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     30e:	c9 01       	movw	r24, r18
     310:	92 95       	swap	r25
     312:	82 95       	swap	r24
     314:	8f 70       	andi	r24, 0x0F	; 15
     316:	89 27       	eor	r24, r25
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	89 27       	eor	r24, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     320:	29 2f       	mov	r18, r25
     322:	33 27       	eor	r19, r19
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
	r = number - q2 * 10;
     334:	28 2f       	mov	r18, r24
     336:	22 0f       	add	r18, r18
     338:	32 2f       	mov	r19, r18
     33a:	33 0f       	add	r19, r19
     33c:	33 0f       	add	r19, r19
     33e:	23 0f       	add	r18, r19
     340:	e4 2f       	mov	r30, r20
     342:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	ea 30       	cpi	r30, 0x0A	; 10
     34a:	10 f4       	brcc	.+4      	; 0x350 <display_dec+0xc4>
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	68 0f       	add	r22, r24
     352:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     354:	9b 01       	movw	r18, r22
     356:	36 95       	lsr	r19
     358:	27 95       	ror	r18
     35a:	36 95       	lsr	r19
     35c:	27 95       	ror	r18
     35e:	ab 01       	movw	r20, r22
     360:	56 95       	lsr	r21
     362:	47 95       	ror	r20
     364:	24 0f       	add	r18, r20
     366:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     368:	c9 01       	movw	r24, r18
     36a:	92 95       	swap	r25
     36c:	82 95       	swap	r24
     36e:	8f 70       	andi	r24, 0x0F	; 15
     370:	89 27       	eor	r24, r25
     372:	9f 70       	andi	r25, 0x0F	; 15
     374:	89 27       	eor	r24, r25
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     37a:	29 2f       	mov	r18, r25
     37c:	33 27       	eor	r19, r19
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
	r = qa - q3 * 10;
     38e:	98 2f       	mov	r25, r24
     390:	99 0f       	add	r25, r25
     392:	29 2f       	mov	r18, r25
     394:	22 0f       	add	r18, r18
     396:	22 0f       	add	r18, r18
     398:	92 0f       	add	r25, r18
     39a:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	6a 30       	cpi	r22, 0x0A	; 10
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <display_dec+0x118>
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3a6:	41 ef       	ldi	r20, 0xF1	; 241
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	da 01       	movw	r26, r20
     3ac:	a6 0f       	add	r26, r22
     3ae:	b1 1d       	adc	r27, r1
     3b0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3b2:	28 2f       	mov	r18, r24
     3b4:	26 95       	lsr	r18
     3b6:	26 95       	lsr	r18
     3b8:	98 2f       	mov	r25, r24
     3ba:	96 95       	lsr	r25
     3bc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3be:	29 2f       	mov	r18, r25
     3c0:	22 95       	swap	r18
     3c2:	2f 70       	andi	r18, 0x0F	; 15
     3c4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 0f       	add	r18, r18
     3d0:	62 2f       	mov	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	66 0f       	add	r22, r22
     3d6:	26 0f       	add	r18, r22
     3d8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3da:	da 01       	movw	r26, r20
     3dc:	a8 0f       	add	r26, r24
     3de:	b1 1d       	adc	r27, r1
     3e0:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3e2:	4e 0f       	add	r20, r30
     3e4:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3e6:	fa 01       	movw	r30, r20
     3e8:	40 81       	ld	r20, Z
     3ea:	40 93 97 02 	sts	0x0297, r20
	digit_index[1] = tens_place;
     3ee:	30 93 98 02 	sts	0x0298, r19
	digit_index[2] = hunds_place;
     3f2:	20 93 99 02 	sts	0x0299, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	8a 30       	cpi	r24, 0x0A	; 10
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <display_dec+0x172>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     400:	90 93 9a 02 	sts	0x029A, r25

	cathode_byte = dec[digit_index[place]];
     404:	f8 01       	movw	r30, r16
     406:	e9 56       	subi	r30, 0x69	; 105
     408:	fd 4f       	sbci	r31, 0xFD	; 253
     40a:	80 81       	ld	r24, Z
     40c:	fe 01       	movw	r30, r28
     40e:	e8 0f       	add	r30, r24
     410:	f1 1d       	adc	r31, r1
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     412:	85 81       	ldd	r24, Z+5	; 0x05
     414:	80 95       	com	r24
     416:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     418:	ea ed       	ldi	r30, 0xDA	; 218
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     422:	80 81       	ld	r24, Z
     424:	8f 7e       	andi	r24, 0xEF	; 239
     426:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     428:	2e 96       	adiw	r28, 0x0e	; 14
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret

0000043e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     43e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     440:	66 23       	and	r22, r22
     442:	69 f4       	brne	.+26     	; 0x45e <update_display+0x20>

		
			
		display_dec(number, place);
     444:	c0 91 9b 02 	lds	r28, 0x029B
     448:	6c 2f       	mov	r22, r28
     44a:	0e 94 46 01 	call	0x28c	; 0x28c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     44e:	8c 2f       	mov	r24, r28
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	80 93 9b 02 	sts	0x029B, r24
     456:	c3 30       	cpi	r28, 0x03	; 3
     458:	11 f4       	brne	.+4      	; 0x45e <update_display+0x20>
		{
			place = 0;
     45a:	10 92 9b 02 	sts	0x029B, r1
		
		
	}
	
	
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	8f 93       	push	r24
     46e:	9f 93       	push	r25
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     474:	80 91 93 03 	lds	r24, 0x0393
     478:	81 50       	subi	r24, 0x01	; 1
     47a:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     47c:	80 91 94 03 	lds	r24, 0x0394
     480:	88 23       	and	r24, r24
     482:	a1 f4       	brne	.+40     	; 0x4ac <__vector_10+0x4a>
		count_finished = FALSE;
     484:	10 92 91 03 	sts	0x0391, r1
		no_overflow = TRUE;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 92 02 	sts	0x0292, r24
		period_counter = 1; //set period counter to 1
     48e:	80 93 94 03 	sts	0x0394, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     492:	e1 e8       	ldi	r30, 0x81	; 129
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	90 91 92 03 	lds	r25, 0x0392
     49c:	89 2b       	or	r24, r25
     49e:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4a0:	ef e6       	ldi	r30, 0x6F	; 111
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	81 60       	ori	r24, 0x01	; 1
     4a8:	80 83       	st	Z, r24
     4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4ac:	e4 e8       	ldi	r30, 0x84	; 132
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	90 93 90 03 	sts	0x0390, r25
     4b8:	80 93 8f 03 	sts	0x038F, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4bc:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 91 03 	sts	0x0391, r24
		period_counter = 0;
     4c6:	10 92 94 03 	sts	0x0394, r1
		TCNT1 = 0; //reset timer/counter 1
     4ca:	11 82       	std	Z+1, r1	; 0x01
     4cc:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	9f 91       	pop	r25
     4d4:	8f 91       	pop	r24
     4d6:	0f 90       	pop	r0
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	0f 90       	pop	r0
     4dc:	1f 90       	pop	r1
     4de:	18 95       	reti

000004e0 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     4ea:	10 92 92 02 	sts	0x0292, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     4f8:	84 2f       	mov	r24, r20
	remove_note(note);
     4fa:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     4fe:	80 91 9d 02 	lds	r24, 0x029D
     502:	81 50       	subi	r24, 0x01	; 1
     504:	80 93 9d 02 	sts	0x029D, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     508:	88 23       	and	r24, r24
     50a:	09 f4       	brne	.+2      	; 0x50e <note_off_event+0x16>
     50c:	89 98       	cbi	0x11, 1	; 17
     50e:	08 95       	ret

00000510 <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     510:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     512:	40 93 dc 02 	sts	0x02DC, r20
	if (velocity == 0) {
     516:	22 23       	and	r18, r18
     518:	59 f4       	brne	.+22     	; 0x530 <note_on_event+0x20>
		remove_note(note);
     51a:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     51e:	80 91 9d 02 	lds	r24, 0x029D
     522:	81 50       	subi	r24, 0x01	; 1
     524:	80 93 9d 02 	sts	0x029D, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     528:	88 23       	and	r24, r24
     52a:	59 f4       	brne	.+22     	; 0x542 <note_on_event+0x32>
     52c:	89 98       	cbi	0x11, 1	; 17
     52e:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     530:	62 2f       	mov	r22, r18
     532:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     536:	80 91 9d 02 	lds	r24, 0x029D
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 93 9d 02 	sts	0x029D, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     540:	89 9a       	sbi	0x11, 1	; 17
     542:	08 95       	ret

00000544 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     544:	87 e2       	ldi	r24, 0x27	; 39
     546:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     54a:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     54e:	88 e9       	ldi	r24, 0x98	; 152
     550:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     554:	08 95       	ret

00000556 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	3f 93       	push	r19
     564:	4f 93       	push	r20
     566:	5f 93       	push	r21
     568:	6f 93       	push	r22
     56a:	7f 93       	push	r23
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
     570:	af 93       	push	r26
     572:	bf 93       	push	r27
     574:	ef 93       	push	r30
     576:	ff 93       	push	r31
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	0f 92       	push	r0
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     582:	80 91 c6 00 	lds	r24, 0x00C6
     586:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     588:	89 e9       	ldi	r24, 0x99	; 153
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	ae 01       	movw	r20, r28
     590:	4f 5f       	subi	r20, 0xFF	; 255
     592:	5f 4f       	sbci	r21, 0xFF	; 255
     594:	0e 94 43 11 	call	0x2286	; 0x2286 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	ff 91       	pop	r31
     5a0:	ef 91       	pop	r30
     5a2:	bf 91       	pop	r27
     5a4:	af 91       	pop	r26
     5a6:	9f 91       	pop	r25
     5a8:	8f 91       	pop	r24
     5aa:	7f 91       	pop	r23
     5ac:	6f 91       	pop	r22
     5ae:	5f 91       	pop	r21
     5b0:	4f 91       	pop	r20
     5b2:	3f 91       	pop	r19
     5b4:	2f 91       	pop	r18
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     5c0:	c0 e8       	ldi	r28, 0x80	; 128
     5c2:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     5c4:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     5c6:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     5c8:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     5ca:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     5cc:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     5ce:	0e 94 b4 05 	call	0xb68	; 0xb68 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     5d2:	a9 ed       	ldi	r26, 0xD9	; 217
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	8c 91       	ld	r24, X
     5d8:	80 6c       	ori	r24, 0xC0	; 192
     5da:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     5dc:	ea ed       	ldi	r30, 0xDA	; 218
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 6c       	ori	r24, 0xC0	; 192
     5e4:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     5e6:	81 b1       	in	r24, 0x01	; 1
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     5ec:	92 b1       	in	r25, 0x02	; 2
     5ee:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     5f0:	8c 91       	ld	r24, X
     5f2:	80 63       	ori	r24, 0x30	; 48
     5f4:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     5f6:	80 81       	ld	r24, Z
     5f8:	8f 7c       	andi	r24, 0xCF	; 207
     5fa:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     5fc:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     5fe:	ec ed       	ldi	r30, 0xDC	; 220
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	80 62       	ori	r24, 0x20	; 32
     606:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     608:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     60a:	ed ed       	ldi	r30, 0xDD	; 221
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	80 62       	ori	r24, 0x20	; 32
     612:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     614:	80 81       	ld	r24, Z
     616:	8f 7d       	andi	r24, 0xDF	; 223
     618:	80 83       	st	Z, r24
	DATA_BUS = 0;
     61a:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     61c:	c0 93 20 03 	sts	0x0320, r28
	
	//setup ADC
    setup_adc();		
     620:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     624:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     628:	c9 e9       	ldi	r28, 0x99	; 153
     62a:	d3 e0       	ldi	r29, 0x03	; 3
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 12 11 	call	0x2224	; 0x2224 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     632:	ce 01       	movw	r24, r28
     634:	68 e8       	ldi	r22, 0x88	; 136
     636:	72 e0       	ldi	r23, 0x02	; 2
     638:	0e 94 da 10 	call	0x21b4	; 0x21b4 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     63c:	ce 01       	movw	r24, r28
     63e:	6c e7       	ldi	r22, 0x7C	; 124
     640:	72 e0       	ldi	r23, 0x02	; 2
     642:	0e 94 de 10 	call	0x21bc	; 0x21bc <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     646:	0e 94 a2 02 	call	0x544	; 0x544 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     64a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <update_spi>
	
	
	
		
	sei(); //enable global interrupts
     64e:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     650:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
     654:	81 e4       	ldi	r24, 0x41	; 65
     656:	80 93 95 03 	sts	0x0395, r24
	current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
     65a:	82 e2       	ldi	r24, 0x22	; 34
     65c:	80 93 22 03 	sts	0x0322, r24
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     660:	8e 01       	movw	r16, r28
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     662:	0f 2e       	mov	r0, r31
     664:	f7 e9       	ldi	r31, 0x97	; 151
     666:	ef 2e       	mov	r14, r31
     668:	f3 e0       	ldi	r31, 0x03	; 3
     66a:	ff 2e       	mov	r15, r31
     66c:	f0 2d       	mov	r31, r0
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     66e:	c8 01       	movw	r24, r16
     670:	0e 94 6d 13 	call	0x26da	; 0x26da <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     674:	80 91 fd 01 	lds	r24, 0x01FD
     678:	90 91 fe 01 	lds	r25, 0x01FE
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     682:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <scan_pots>
		update_control_voltages();
     686:	0e 94 c1 03 	call	0x782	; 0x782 <update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     68a:	80 91 9c 02 	lds	r24, 0x029C
     68e:	98 2f       	mov	r25, r24
     690:	9f 5f       	subi	r25, 0xFF	; 255
     692:	90 93 9c 02 	sts	0x029C, r25
     696:	85 30       	cpi	r24, 0x05	; 5
     698:	51 f7       	brne	.-44     	; 0x66e <main+0xae>
		{
			switch_timer = 0;
     69a:	10 92 9c 02 	sts	0x029C, r1
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     69e:	f7 01       	movw	r30, r14
     6a0:	c0 81       	ld	r28, Z
     6a2:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <read_switch_port>
     6a6:	8c 27       	eor	r24, r28
     6a8:	f7 01       	movw	r30, r14
     6aa:	80 83       	st	Z, r24
			update_spi();
     6ac:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <update_spi>
			refresh_synth();
     6b0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <refresh_synth>
     6b4:	dc cf       	rjmp	.-72     	; 0x66e <main+0xae>

000006b6 <scan_pots>:
	//&release_2_cv,
	//&release_1_cv
	//}; 
	
	
void scan_pots(void) { //should probably move this to adc.c
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	c0 e0       	ldi	r28, 0x00	; 0
     6c8:	d1 e0       	ldi	r29, 0x01	; 1
     6ca:	03 ee       	ldi	r16, 0xE3	; 227
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	0f 2e       	mov	r0, r31
     6d0:	fc e3       	ldi	r31, 0x3C	; 60
     6d2:	cf 2e       	mov	r12, r31
     6d4:	dd 24       	eor	r13, r13
     6d6:	f0 2d       	mov	r31, r0
     6d8:	cc 0e       	add	r12, r28
     6da:	dd 1e       	adc	r13, r29
     6dc:	7e 01       	movw	r14, r28
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     6de:	88 81       	ld	r24, Y
     6e0:	99 81       	ldd	r25, Y+1	; 0x01
     6e2:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     6e6:	90 93 de 02 	sts	0x02DE, r25
     6ea:	80 93 dd 02 	sts	0x02DD, r24
		adc_change = adc_value - pot_id[i]->value;
     6ee:	e9 91       	ld	r30, Y+
     6f0:	f9 91       	ld	r31, Y+
     6f2:	40 81       	ld	r20, Z
     6f4:	21 81       	ldd	r18, Z+1	; 0x01
     6f6:	52 2f       	mov	r21, r18
     6f8:	53 70       	andi	r21, 0x03	; 3
     6fa:	84 1b       	sub	r24, r20
     6fc:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     6fe:	95 95       	asr	r25
     700:	87 95       	ror	r24
     702:	95 95       	asr	r25
     704:	87 95       	ror	r24
     706:	84 0f       	add	r24, r20
     708:	95 1f       	adc	r25, r21
     70a:	80 83       	st	Z, r24
     70c:	89 2f       	mov	r24, r25
     70e:	83 70       	andi	r24, 0x03	; 3
     710:	2c 7f       	andi	r18, 0xFC	; 252
     712:	28 2b       	or	r18, r24
     714:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		//otherwise, the pot value is assigned to it's corresponding parameter in the current_patch struct:
		*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     716:	d7 01       	movw	r26, r14
     718:	ed 91       	ld	r30, X+
     71a:	fc 91       	ld	r31, X
     71c:	11 97       	sbiw	r26, 0x01	; 1
     71e:	90 81       	ld	r25, Z
     720:	81 81       	ldd	r24, Z+1	; 0x01
     722:	83 70       	andi	r24, 0x03	; 3
     724:	f8 01       	movw	r30, r16
     726:	90 83       	st	Z, r25
     728:	81 83       	std	Z+1, r24	; 0x01
     72a:	0e 5f       	subi	r16, 0xFE	; 254
     72c:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     72e:	cc 15       	cp	r28, r12
     730:	dd 05       	cpc	r29, r13
     732:	a1 f6       	brne	.-88     	; 0x6dc <scan_pots+0x26>
		//otherwise, the pot value is assigned to it's corresponding parameter in the current_patch struct:
		*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
	}

	//scan volume pot
	adc_value = read_pot(&volume_pot);
     734:	8c e7       	ldi	r24, 0x7C	; 124
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     73c:	90 93 de 02 	sts	0x02DE, r25
     740:	80 93 dd 02 	sts	0x02DD, r24
	adc_change = adc_value - volume_pot.value;
     744:	20 91 7c 01 	lds	r18, 0x017C
     748:	40 91 7d 01 	lds	r20, 0x017D
     74c:	34 2f       	mov	r19, r20
     74e:	33 70       	andi	r19, 0x03	; 3
     750:	82 1b       	sub	r24, r18
     752:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     754:	95 95       	asr	r25
     756:	87 95       	ror	r24
     758:	95 95       	asr	r25
     75a:	87 95       	ror	r24
     75c:	28 0f       	add	r18, r24
     75e:	39 1f       	adc	r19, r25
     760:	20 93 7c 01 	sts	0x017C, r18
     764:	83 2f       	mov	r24, r19
     766:	83 70       	andi	r24, 0x03	; 3
     768:	4c 7f       	andi	r20, 0xFC	; 252
     76a:	48 2b       	or	r20, r24
     76c:	40 93 7d 01 	sts	0x017D, r20
	
}
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	08 95       	ret

00000782 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     786:	60 91 e3 02 	lds	r22, 0x02E3
     78a:	70 91 e4 02 	lds	r23, 0x02E4
     78e:	62 95       	swap	r22
     790:	72 95       	swap	r23
     792:	70 7f       	andi	r23, 0xF0	; 240
     794:	76 27       	eor	r23, r22
     796:	60 7f       	andi	r22, 0xF0	; 240
     798:	76 27       	eor	r23, r22
     79a:	84 ee       	ldi	r24, 0xE4	; 228
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     7a2:	60 91 e5 02 	lds	r22, 0x02E5
     7a6:	70 91 e6 02 	lds	r23, 0x02E6
     7aa:	62 95       	swap	r22
     7ac:	72 95       	swap	r23
     7ae:	70 7f       	andi	r23, 0xF0	; 240
     7b0:	76 27       	eor	r23, r22
     7b2:	60 7f       	andi	r22, 0xF0	; 240
     7b4:	76 27       	eor	r23, r22
     7b6:	83 ee       	ldi	r24, 0xE3	; 227
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     7be:	60 91 e7 02 	lds	r22, 0x02E7
     7c2:	70 91 e8 02 	lds	r23, 0x02E8
     7c6:	66 0f       	add	r22, r22
     7c8:	77 1f       	adc	r23, r23
     7ca:	66 0f       	add	r22, r22
     7cc:	77 1f       	adc	r23, r23
     7ce:	66 0f       	add	r22, r22
     7d0:	77 1f       	adc	r23, r23
     7d2:	82 ee       	ldi	r24, 0xE2	; 226
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     7da:	60 91 e9 02 	lds	r22, 0x02E9
     7de:	70 91 ea 02 	lds	r23, 0x02EA
     7e2:	62 95       	swap	r22
     7e4:	72 95       	swap	r23
     7e6:	70 7f       	andi	r23, 0xF0	; 240
     7e8:	76 27       	eor	r23, r22
     7ea:	60 7f       	andi	r22, 0xF0	; 240
     7ec:	76 27       	eor	r23, r22
     7ee:	86 e9       	ldi	r24, 0x96	; 150
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     7f6:	60 91 eb 02 	lds	r22, 0x02EB
     7fa:	70 91 ec 02 	lds	r23, 0x02EC
     7fe:	66 0f       	add	r22, r22
     800:	77 1f       	adc	r23, r23
     802:	66 0f       	add	r22, r22
     804:	77 1f       	adc	r23, r23
     806:	66 0f       	add	r22, r22
     808:	77 1f       	adc	r23, r23
     80a:	81 ee       	ldi	r24, 0xE1	; 225
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     812:	60 91 ed 02 	lds	r22, 0x02ED
     816:	70 91 ee 02 	lds	r23, 0x02EE
     81a:	62 95       	swap	r22
     81c:	72 95       	swap	r23
     81e:	70 7f       	andi	r23, 0xF0	; 240
     820:	76 27       	eor	r23, r22
     822:	60 7f       	andi	r22, 0xF0	; 240
     824:	76 27       	eor	r23, r22
     826:	80 ee       	ldi	r24, 0xE0	; 224
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     82e:	60 91 ef 02 	lds	r22, 0x02EF
     832:	70 91 f0 02 	lds	r23, 0x02F0
     836:	62 95       	swap	r22
     838:	72 95       	swap	r23
     83a:	70 7f       	andi	r23, 0xF0	; 240
     83c:	76 27       	eor	r23, r22
     83e:	60 7f       	andi	r22, 0xF0	; 240
     840:	76 27       	eor	r23, r22
     842:	8f ed       	ldi	r24, 0xDF	; 223
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     84a:	60 91 f1 02 	lds	r22, 0x02F1
     84e:	70 91 f2 02 	lds	r23, 0x02F2
     852:	62 95       	swap	r22
     854:	72 95       	swap	r23
     856:	70 7f       	andi	r23, 0xF0	; 240
     858:	76 27       	eor	r23, r22
     85a:	60 7f       	andi	r22, 0xF0	; 240
     85c:	76 27       	eor	r23, r22
     85e:	8e ed       	ldi	r24, 0xDE	; 222
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     866:	80 91 f5 02 	lds	r24, 0x02F5
     86a:	90 91 f6 02 	lds	r25, 0x02F6
     86e:	c0 e0       	ldi	r28, 0x00	; 0
     870:	d2 e0       	ldi	r29, 0x02	; 2
     872:	c8 1b       	sub	r28, r24
     874:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     876:	60 91 8a 03 	lds	r22, 0x038A
     87a:	70 91 8b 03 	lds	r23, 0x038B
     87e:	60 50       	subi	r22, 0x00	; 0
     880:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     882:	80 91 f3 02 	lds	r24, 0x02F3
     886:	90 91 f4 02 	lds	r25, 0x02F4
     88a:	68 1b       	sub	r22, r24
     88c:	79 0b       	sbc	r23, r25
     88e:	6c 0f       	add	r22, r28
     890:	7d 1f       	adc	r23, r29
     892:	8d ed       	ldi	r24, 0xDD	; 221
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     89a:	60 91 8c 03 	lds	r22, 0x038C
     89e:	70 91 8d 03 	lds	r23, 0x038D
     8a2:	6c 0f       	add	r22, r28
     8a4:	7d 1f       	adc	r23, r29
     8a6:	8c ed       	ldi	r24, 0xDC	; 220
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     8ae:	60 91 f7 02 	lds	r22, 0x02F7
     8b2:	70 91 f8 02 	lds	r23, 0x02F8
     8b6:	62 95       	swap	r22
     8b8:	72 95       	swap	r23
     8ba:	70 7f       	andi	r23, 0xF0	; 240
     8bc:	76 27       	eor	r23, r22
     8be:	60 7f       	andi	r22, 0xF0	; 240
     8c0:	76 27       	eor	r23, r22
     8c2:	8b ed       	ldi	r24, 0xDB	; 219
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     8ca:	60 91 fb 02 	lds	r22, 0x02FB
     8ce:	70 91 fc 02 	lds	r23, 0x02FC
     8d2:	62 95       	swap	r22
     8d4:	72 95       	swap	r23
     8d6:	70 7f       	andi	r23, 0xF0	; 240
     8d8:	76 27       	eor	r23, r22
     8da:	60 7f       	andi	r22, 0xF0	; 240
     8dc:	76 27       	eor	r23, r22
     8de:	8a ed       	ldi	r24, 0xDA	; 218
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     8e6:	60 91 fd 02 	lds	r22, 0x02FD
     8ea:	70 91 fe 02 	lds	r23, 0x02FE
     8ee:	62 95       	swap	r22
     8f0:	72 95       	swap	r23
     8f2:	70 7f       	andi	r23, 0xF0	; 240
     8f4:	76 27       	eor	r23, r22
     8f6:	60 7f       	andi	r22, 0xF0	; 240
     8f8:	76 27       	eor	r23, r22
     8fa:	89 ed       	ldi	r24, 0xD9	; 217
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     902:	60 91 7c 01 	lds	r22, 0x017C
     906:	80 91 7d 01 	lds	r24, 0x017D
     90a:	78 2f       	mov	r23, r24
     90c:	73 70       	andi	r23, 0x03	; 3
     90e:	62 95       	swap	r22
     910:	72 95       	swap	r23
     912:	70 7f       	andi	r23, 0xF0	; 240
     914:	76 27       	eor	r23, r22
     916:	60 7f       	andi	r22, 0xF0	; 240
     918:	76 27       	eor	r23, r22
     91a:	88 ed       	ldi	r24, 0xD8	; 216
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     922:	60 91 ff 02 	lds	r22, 0x02FF
     926:	70 91 00 03 	lds	r23, 0x0300
     92a:	62 95       	swap	r22
     92c:	72 95       	swap	r23
     92e:	70 7f       	andi	r23, 0xF0	; 240
     930:	76 27       	eor	r23, r22
     932:	60 7f       	andi	r22, 0xF0	; 240
     934:	76 27       	eor	r23, r22
     936:	87 ed       	ldi	r24, 0xD7	; 215
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     93e:	60 91 01 03 	lds	r22, 0x0301
     942:	70 91 02 03 	lds	r23, 0x0302
     946:	62 95       	swap	r22
     948:	72 95       	swap	r23
     94a:	70 7f       	andi	r23, 0xF0	; 240
     94c:	76 27       	eor	r23, r22
     94e:	60 7f       	andi	r22, 0xF0	; 240
     950:	76 27       	eor	r23, r22
     952:	86 ed       	ldi	r24, 0xD6	; 214
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     95a:	60 91 03 03 	lds	r22, 0x0303
     95e:	70 91 04 03 	lds	r23, 0x0304
     962:	62 95       	swap	r22
     964:	72 95       	swap	r23
     966:	70 7f       	andi	r23, 0xF0	; 240
     968:	76 27       	eor	r23, r22
     96a:	60 7f       	andi	r22, 0xF0	; 240
     96c:	76 27       	eor	r23, r22
     96e:	85 ed       	ldi	r24, 0xD5	; 213
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     976:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     97a:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     97c:	88 30       	cpi	r24, 0x08	; 8
     97e:	08 f4       	brcc	.+2      	; 0x982 <update_control_voltages+0x200>
     980:	c8 e0       	ldi	r28, 0x08	; 8
	value_to_display = note;
     982:	8c 2f       	mov	r24, r28
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	90 93 fe 01 	sts	0x01FE, r25
     98a:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     98e:	8c 2f       	mov	r24, r28
     990:	88 50       	subi	r24, 0x08	; 8
     992:	66 e2       	ldi	r22, 0x26	; 38
     994:	73 e0       	ldi	r23, 0x03	; 3
     996:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     99a:	bc 01       	movw	r22, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	20 91 07 03 	lds	r18, 0x0307
     9a4:	30 91 08 03 	lds	r19, 0x0308
     9a8:	40 e0       	ldi	r20, 0x00	; 0
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__mulsi3>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	07 2e       	mov	r0, r23
     9b6:	7a e0       	ldi	r23, 0x0A	; 10
     9b8:	b6 95       	lsr	r27
     9ba:	a7 95       	ror	r26
     9bc:	97 95       	ror	r25
     9be:	87 95       	ror	r24
     9c0:	7a 95       	dec	r23
     9c2:	d1 f7       	brne	.-12     	; 0x9b8 <update_control_voltages+0x236>
     9c4:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     9c6:	60 91 05 03 	lds	r22, 0x0305
     9ca:	70 91 06 03 	lds	r23, 0x0306
     9ce:	62 95       	swap	r22
     9d0:	72 95       	swap	r23
     9d2:	70 7f       	andi	r23, 0xF0	; 240
     9d4:	76 27       	eor	r23, r22
     9d6:	60 7f       	andi	r22, 0xF0	; 240
     9d8:	76 27       	eor	r23, r22
     9da:	86 0f       	add	r24, r22
     9dc:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     9de:	bc 01       	movw	r22, r24
     9e0:	80 e4       	ldi	r24, 0x40	; 64
     9e2:	60 30       	cpi	r22, 0x00	; 0
     9e4:	78 07       	cpc	r23, r24
     9e6:	10 f0       	brcs	.+4      	; 0x9ec <update_control_voltages+0x26a>
     9e8:	6f ef       	ldi	r22, 0xFF	; 255
     9ea:	7f e3       	ldi	r23, 0x3F	; 63
     9ec:	84 ed       	ldi	r24, 0xD4	; 212
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     9f4:	60 91 09 03 	lds	r22, 0x0309
     9f8:	70 91 0a 03 	lds	r23, 0x030A
     9fc:	62 95       	swap	r22
     9fe:	72 95       	swap	r23
     a00:	70 7f       	andi	r23, 0xF0	; 240
     a02:	76 27       	eor	r23, r22
     a04:	60 7f       	andi	r22, 0xF0	; 240
     a06:	76 27       	eor	r23, r22
     a08:	82 ed       	ldi	r24, 0xD2	; 210
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     a10:	60 91 0b 03 	lds	r22, 0x030B
     a14:	70 91 0c 03 	lds	r23, 0x030C
     a18:	62 95       	swap	r22
     a1a:	72 95       	swap	r23
     a1c:	70 7f       	andi	r23, 0xF0	; 240
     a1e:	76 27       	eor	r23, r22
     a20:	60 7f       	andi	r22, 0xF0	; 240
     a22:	76 27       	eor	r23, r22
     a24:	81 ed       	ldi	r24, 0xD1	; 209
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     a2c:	60 91 0d 03 	lds	r22, 0x030D
     a30:	70 91 0e 03 	lds	r23, 0x030E
     a34:	62 95       	swap	r22
     a36:	72 95       	swap	r23
     a38:	70 7f       	andi	r23, 0xF0	; 240
     a3a:	76 27       	eor	r23, r22
     a3c:	60 7f       	andi	r22, 0xF0	; 240
     a3e:	76 27       	eor	r23, r22
     a40:	80 ed       	ldi	r24, 0xD0	; 208
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     a48:	60 91 0f 03 	lds	r22, 0x030F
     a4c:	70 91 10 03 	lds	r23, 0x0310
     a50:	62 95       	swap	r22
     a52:	72 95       	swap	r23
     a54:	70 7f       	andi	r23, 0xF0	; 240
     a56:	76 27       	eor	r23, r22
     a58:	60 7f       	andi	r22, 0xF0	; 240
     a5a:	76 27       	eor	r23, r22
     a5c:	8f ec       	ldi	r24, 0xCF	; 207
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     a64:	60 91 11 03 	lds	r22, 0x0311
     a68:	70 91 12 03 	lds	r23, 0x0312
     a6c:	62 95       	swap	r22
     a6e:	72 95       	swap	r23
     a70:	70 7f       	andi	r23, 0xF0	; 240
     a72:	76 27       	eor	r23, r22
     a74:	60 7f       	andi	r22, 0xF0	; 240
     a76:	76 27       	eor	r23, r22
     a78:	8e ec       	ldi	r24, 0xCE	; 206
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     a80:	60 91 13 03 	lds	r22, 0x0313
     a84:	70 91 14 03 	lds	r23, 0x0314
     a88:	62 95       	swap	r22
     a8a:	72 95       	swap	r23
     a8c:	70 7f       	andi	r23, 0xF0	; 240
     a8e:	76 27       	eor	r23, r22
     a90:	60 7f       	andi	r22, 0xF0	; 240
     a92:	76 27       	eor	r23, r22
     a94:	8d ec       	ldi	r24, 0xCD	; 205
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     a9c:	60 91 15 03 	lds	r22, 0x0315
     aa0:	70 91 16 03 	lds	r23, 0x0316
     aa4:	62 95       	swap	r22
     aa6:	72 95       	swap	r23
     aa8:	70 7f       	andi	r23, 0xF0	; 240
     aaa:	76 27       	eor	r23, r22
     aac:	60 7f       	andi	r22, 0xF0	; 240
     aae:	76 27       	eor	r23, r22
     ab0:	8c ec       	ldi	r24, 0xCC	; 204
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     ab8:	60 91 19 03 	lds	r22, 0x0319
     abc:	70 91 1a 03 	lds	r23, 0x031A
     ac0:	62 95       	swap	r22
     ac2:	72 95       	swap	r23
     ac4:	70 7f       	andi	r23, 0xF0	; 240
     ac6:	76 27       	eor	r23, r22
     ac8:	60 7f       	andi	r22, 0xF0	; 240
     aca:	76 27       	eor	r23, r22
     acc:	8a ec       	ldi	r24, 0xCA	; 202
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     ad4:	60 91 17 03 	lds	r22, 0x0317
     ad8:	70 91 18 03 	lds	r23, 0x0318
     adc:	62 95       	swap	r22
     ade:	72 95       	swap	r23
     ae0:	70 7f       	andi	r23, 0xF0	; 240
     ae2:	76 27       	eor	r23, r22
     ae4:	60 7f       	andi	r22, 0xF0	; 240
     ae6:	76 27       	eor	r23, r22
     ae8:	8b ec       	ldi	r24, 0xCB	; 203
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     af0:	60 91 1d 03 	lds	r22, 0x031D
     af4:	70 91 1e 03 	lds	r23, 0x031E
     af8:	62 95       	swap	r22
     afa:	72 95       	swap	r23
     afc:	70 7f       	andi	r23, 0xF0	; 240
     afe:	76 27       	eor	r23, r22
     b00:	60 7f       	andi	r22, 0xF0	; 240
     b02:	76 27       	eor	r23, r22
     b04:	88 ec       	ldi	r24, 0xC8	; 200
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     b0c:	60 91 1b 03 	lds	r22, 0x031B
     b10:	70 91 1c 03 	lds	r23, 0x031C
     b14:	62 95       	swap	r22
     b16:	72 95       	swap	r23
     b18:	70 7f       	andi	r23, 0xF0	; 240
     b1a:	76 27       	eor	r23, r22
     b1c:	60 7f       	andi	r22, 0xF0	; 240
     b1e:	76 27       	eor	r23, r22
     b20:	89 ec       	ldi	r24, 0xC9	; 201
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     b28:	8c 2f       	mov	r24, r28
     b2a:	6f e0       	ldi	r22, 0x0F	; 15
     b2c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     b30:	68 e6       	ldi	r22, 0x68	; 104
     b32:	73 e0       	ldi	r23, 0x03	; 3
     b34:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <interpolate_pitch_cv>
     b38:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     b3a:	86 ee       	ldi	r24, 0xE6	; 230
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     b42:	8c 2f       	mov	r24, r28
     b44:	60 ef       	ldi	r22, 0xF0	; 240
     b46:	0e 94 64 06 	call	0xcc8	; 0xcc8 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     b4a:	66 e4       	ldi	r22, 0x46	; 70
     b4c:	73 e0       	ldi	r23, 0x03	; 3
     b4e:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <interpolate_pitch_cv>
     b52:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     b54:	85 ee       	ldi	r24, 0xE5	; 229
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     b5c:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     b5e:	a1 9a       	sbi	0x14, 1	; 20
}			
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <scan_pots_and_update_control_voltages>:
	//
//	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
//	DAC_CTRL |= (1<<DAC_RS);	
	
	
     b66:	08 95       	ret

00000b68 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     b68:	84 b1       	in	r24, 0x04	; 4
     b6a:	87 62       	ori	r24, 0x27	; 39
     b6c:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     b6e:	ec ed       	ldi	r30, 0xDC	; 220
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8c 65       	ori	r24, 0x5C	; 92
     b76:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     b78:	85 b1       	in	r24, 0x05	; 5
     b7a:	89 7d       	andi	r24, 0xD9	; 217
     b7c:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     b7e:	ed ed       	ldi	r30, 0xDD	; 221
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	83 7f       	andi	r24, 0xF3	; 243
     b86:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     b88:	80 e5       	ldi	r24, 0x50	; 80
     b8a:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     b8c:	80 81       	ld	r24, Z
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     b92:	80 81       	ld	r24, Z
     b94:	87 7f       	andi	r24, 0xF7	; 247
     b96:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     b98:	80 81       	ld	r24, Z
     b9a:	88 60       	ori	r24, 0x08	; 8
     b9c:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     b9e:	80 81       	ld	r24, Z
     ba0:	8f 7e       	andi	r24, 0xEF	; 239
     ba2:	80 83       	st	Z, r24
	
}
     ba4:	08 95       	ret

00000ba6 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     ba6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     ba8:	0d b4       	in	r0, 0x2d	; 45
     baa:	07 fe       	sbrs	r0, 7
     bac:	fd cf       	rjmp	.-6      	; 0xba8 <spi_shift_byte+0x2>
	return SPDR;
     bae:	8e b5       	in	r24, 0x2e	; 46
	
}
     bb0:	08 95       	ret

00000bb2 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     bb2:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     bb4:	80 91 23 03 	lds	r24, 0x0323
     bb8:	0e 94 d3 05 	call	0xba6	; 0xba6 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     bbc:	90 91 e0 02 	lds	r25, 0x02E0
     bc0:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     bc2:	98 27       	eor	r25, r24
     bc4:	90 93 e0 02 	sts	0x02E0, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     bc8:	98 23       	and	r25, r24
     bca:	90 93 df 02 	sts	0x02DF, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     bce:	80 91 95 03 	lds	r24, 0x0395
     bd2:	98 27       	eor	r25, r24
     bd4:	90 93 95 03 	sts	0x0395, r25
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     bd8:	80 91 22 03 	lds	r24, 0x0322
     bdc:	0e 94 d3 05 	call	0xba6	; 0xba6 <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     be0:	90 91 e2 02 	lds	r25, 0x02E2
     be4:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     be6:	98 27       	eor	r25, r24
     be8:	90 93 e2 02 	sts	0x02E2, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     bec:	98 23       	and	r25, r24
     bee:	90 93 e1 02 	sts	0x02E1, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     bf2:	80 91 96 03 	lds	r24, 0x0396
     bf6:	98 27       	eor	r25, r24
     bf8:	90 93 96 03 	sts	0x0396, r25
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     bfc:	80 91 21 03 	lds	r24, 0x0321
     c00:	0e 94 d3 05 	call	0xba6	; 0xba6 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     c04:	80 91 20 03 	lds	r24, 0x0320
     c08:	0e 94 d3 05 	call	0xba6	; 0xba6 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     c0c:	90 91 97 03 	lds	r25, 0x0397
     c10:	29 2f       	mov	r18, r25
     c12:	22 95       	swap	r18
     c14:	2f 70       	andi	r18, 0x0F	; 15
     c16:	27 95       	ror	r18
     c18:	22 27       	eor	r18, r18
     c1a:	27 95       	ror	r18

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     c1c:	89 2f       	mov	r24, r25
     c1e:	86 95       	lsr	r24
     c20:	86 95       	lsr	r24
     c22:	86 95       	lsr	r24
     c24:	81 70       	andi	r24, 0x01	; 1
     c26:	82 2b       	or	r24, r18
     c28:	40 91 96 03 	lds	r20, 0x0396
     c2c:	42 95       	swap	r20
     c2e:	46 95       	lsr	r20
     c30:	47 70       	andi	r20, 0x07	; 7
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	41 70       	andi	r20, 0x01	; 1
     c36:	50 70       	andi	r21, 0x00	; 0
     c38:	9a 01       	movw	r18, r20
     c3a:	22 0f       	add	r18, r18
     c3c:	33 1f       	adc	r19, r19
     c3e:	22 0f       	add	r18, r18
     c40:	33 1f       	adc	r19, r19
     c42:	28 2b       	or	r18, r24
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     c44:	99 1f       	adc	r25, r25
     c46:	99 27       	eor	r25, r25
     c48:	99 1f       	adc	r25, r25
     c4a:	89 2f       	mov	r24, r25
     c4c:	82 95       	swap	r24
     c4e:	88 0f       	add	r24, r24
     c50:	88 0f       	add	r24, r24
     c52:	80 7c       	andi	r24, 0xC0	; 192
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     c54:	82 2b       	or	r24, r18
     c56:	0e 94 d3 05 	call	0xba6	; 0xba6 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     c5a:	ed ed       	ldi	r30, 0xDD	; 221
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	87 7f       	andi	r24, 0xF7	; 247
     c62:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     c64:	80 81       	ld	r24, Z
     c66:	88 60       	ori	r24, 0x08	; 8
     c68:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     c6a:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     c6c:	08 95       	ret

00000c6e <save_patch>:
	};
	
	
void save_patch(uint8_t patch_number) {

	eeprom_update_block((const void*)&current_patch, (void*)&patch_memory[patch_number], sizeof(current_patch));
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	2b e2       	ldi	r18, 0x2B	; 43
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	82 9f       	mul	r24, r18
     c76:	b0 01       	movw	r22, r0
     c78:	83 9f       	mul	r24, r19
     c7a:	70 0d       	add	r23, r0
     c7c:	92 9f       	mul	r25, r18
     c7e:	70 0d       	add	r23, r0
     c80:	11 24       	eor	r1, r1
     c82:	60 50       	subi	r22, 0x00	; 0
     c84:	70 40       	sbci	r23, 0x00	; 0
     c86:	83 ee       	ldi	r24, 0xE3	; 227
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	41 e4       	ldi	r20, 0x41	; 65
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__eeupd_block_m6450a>
}	
     c92:	08 95       	ret

00000c94 <set_memory_mode>:
	
	
void set_memory_mode() { //run this every time new patch is loaded to lock pots and store locked values
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b1 e0       	ldi	r27, 0x01	; 1
     c98:	9d 01       	movw	r18, r26
     c9a:	24 5c       	subi	r18, 0xC4	; 196
     c9c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     c9e:	ed 91       	ld	r30, X+
     ca0:	fc 91       	ld	r31, X
     ca2:	11 97       	sbiw	r26, 0x01	; 1
     ca4:	80 81       	ld	r24, Z
     ca6:	41 81       	ldd	r20, Z+1	; 0x01
     ca8:	94 2f       	mov	r25, r20
     caa:	93 70       	andi	r25, 0x03	; 3
     cac:	95 95       	asr	r25
     cae:	87 95       	ror	r24
     cb0:	95 95       	asr	r25
     cb2:	87 95       	ror	r24
     cb4:	82 83       	std	Z+2, r24	; 0x02
		pot_id[i]->locked = 1; 
     cb6:	ed 91       	ld	r30, X+
     cb8:	fd 91       	ld	r31, X+
     cba:	83 81       	ldd	r24, Z+3	; 0x03
     cbc:	80 68       	ori	r24, 0x80	; 128
     cbe:	83 83       	std	Z+3, r24	; 0x03
}	
	
	
void set_memory_mode() { //run this every time new patch is loaded to lock pots and store locked values
	
	for (int i = 0; i <= 29; i++) {
     cc0:	a2 17       	cp	r26, r18
     cc2:	b3 07       	cpc	r27, r19
     cc4:	61 f7       	brne	.-40     	; 0xc9e <set_memory_mode+0xa>
		pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
		pot_id[i]->locked = 1; 
		
	}
	
}	
     cc6:	08 95       	ret

00000cc8 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
     cc8:	90 91 24 03 	lds	r25, 0x0324
     ccc:	97 70       	andi	r25, 0x07	; 7
	if (vco == VCO2) n = octave_index.vco2;
     cce:	60 3f       	cpi	r22, 0xF0	; 240
     cd0:	31 f4       	brne	.+12     	; 0xcde <transpose_note+0x16>
     cd2:	90 91 24 03 	lds	r25, 0x0324
     cd6:	96 95       	lsr	r25
     cd8:	96 95       	lsr	r25
     cda:	96 95       	lsr	r25
     cdc:	97 70       	andi	r25, 0x07	; 7

	note = (n*12) + note; //calculate MIDI note after octave addition
     cde:	29 2f       	mov	r18, r25
     ce0:	22 0f       	add	r18, r18
     ce2:	92 0f       	add	r25, r18
     ce4:	99 0f       	add	r25, r25
     ce6:	99 0f       	add	r25, r25
     ce8:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
     cea:	89 38       	cpi	r24, 0x89	; 137
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <transpose_note+0x28>
     cee:	88 e8       	ldi	r24, 0x88	; 136
	
}
     cf0:	08 95       	ret

00000cf2 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
     cf2:	80 91 95 03 	lds	r24, 0x0395
     cf6:	98 2f       	mov	r25, r24
     cf8:	96 95       	lsr	r25
     cfa:	96 95       	lsr	r25
     cfc:	96 95       	lsr	r25
     cfe:	90 ff       	sbrs	r25, 0
     d00:	14 c0       	rjmp	.+40     	; 0xd2a <update_octave_range+0x38>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
     d02:	20 91 24 03 	lds	r18, 0x0324
     d06:	92 2f       	mov	r25, r18
     d08:	9f 5f       	subi	r25, 0xFF	; 255
     d0a:	97 70       	andi	r25, 0x07	; 7
     d0c:	28 7f       	andi	r18, 0xF8	; 248
     d0e:	29 2b       	or	r18, r25
     d10:	20 93 24 03 	sts	0x0324, r18
     d14:	95 30       	cpi	r25, 0x05	; 5
     d16:	29 f4       	brne	.+10     	; 0xd22 <update_octave_range+0x30>
     d18:	92 2f       	mov	r25, r18
     d1a:	98 7f       	andi	r25, 0xF8	; 248
     d1c:	94 60       	ori	r25, 0x04	; 4
     d1e:	90 93 24 03 	sts	0x0324, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
     d22:	98 e0       	ldi	r25, 0x08	; 8
     d24:	89 27       	eor	r24, r25
     d26:	80 93 95 03 	sts	0x0395, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
     d2a:	80 91 96 03 	lds	r24, 0x0396
     d2e:	98 2f       	mov	r25, r24
     d30:	96 95       	lsr	r25
     d32:	96 95       	lsr	r25
     d34:	96 95       	lsr	r25
     d36:	90 ff       	sbrs	r25, 0
     d38:	11 c0       	rjmp	.+34     	; 0xd5c <update_octave_range+0x6a>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
     d3a:	90 91 24 03 	lds	r25, 0x0324
     d3e:	97 70       	andi	r25, 0x07	; 7
     d40:	49 f0       	breq	.+18     	; 0xd54 <update_octave_range+0x62>
     d42:	90 91 24 03 	lds	r25, 0x0324
     d46:	29 2f       	mov	r18, r25
     d48:	29 5f       	subi	r18, 0xF9	; 249
     d4a:	27 70       	andi	r18, 0x07	; 7
     d4c:	98 7f       	andi	r25, 0xF8	; 248
     d4e:	92 2b       	or	r25, r18
     d50:	90 93 24 03 	sts	0x0324, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
     d54:	98 e0       	ldi	r25, 0x08	; 8
     d56:	89 27       	eor	r24, r25
     d58:	80 93 96 03 	sts	0x0396, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
     d5c:	80 91 24 03 	lds	r24, 0x0324
     d60:	87 70       	andi	r24, 0x07	; 7
     d62:	e9 e0       	ldi	r30, 0x09	; 9
     d64:	f2 e0       	ldi	r31, 0x02	; 2
     d66:	e8 0f       	add	r30, r24
     d68:	f1 1d       	adc	r31, r1
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	00 80       	ld	r0, Z
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <update_octave_range+0x84>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <update_octave_range+0x80>
     d7a:	58 2f       	mov	r21, r24
     d7c:	80 93 22 03 	sts	0x0322, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
     d80:	90 91 96 03 	lds	r25, 0x0396
     d84:	29 2f       	mov	r18, r25
     d86:	26 95       	lsr	r18
     d88:	26 95       	lsr	r18
     d8a:	20 ff       	sbrs	r18, 0
     d8c:	1a c0       	rjmp	.+52     	; 0xdc2 <update_octave_range+0xd0>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
     d8e:	80 91 24 03 	lds	r24, 0x0324
     d92:	28 2f       	mov	r18, r24
     d94:	26 95       	lsr	r18
     d96:	26 95       	lsr	r18
     d98:	26 95       	lsr	r18
     d9a:	2f 5f       	subi	r18, 0xFF	; 255
     d9c:	27 70       	andi	r18, 0x07	; 7
     d9e:	32 2f       	mov	r19, r18
     da0:	33 0f       	add	r19, r19
     da2:	33 0f       	add	r19, r19
     da4:	33 0f       	add	r19, r19
     da6:	87 7c       	andi	r24, 0xC7	; 199
     da8:	83 2b       	or	r24, r19
     daa:	80 93 24 03 	sts	0x0324, r24
     dae:	25 30       	cpi	r18, 0x05	; 5
     db0:	21 f4       	brne	.+8      	; 0xdba <update_octave_range+0xc8>
     db2:	87 7c       	andi	r24, 0xC7	; 199
     db4:	80 62       	ori	r24, 0x20	; 32
     db6:	80 93 24 03 	sts	0x0324, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
     dba:	84 e0       	ldi	r24, 0x04	; 4
     dbc:	98 27       	eor	r25, r24
     dbe:	90 93 96 03 	sts	0x0396, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
     dc2:	90 91 96 03 	lds	r25, 0x0396
     dc6:	29 2f       	mov	r18, r25
     dc8:	26 95       	lsr	r18
     dca:	20 ff       	sbrs	r18, 0
     dcc:	17 c0       	rjmp	.+46     	; 0xdfc <update_octave_range+0x10a>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
     dce:	80 91 24 03 	lds	r24, 0x0324
     dd2:	88 73       	andi	r24, 0x38	; 56
     dd4:	79 f0       	breq	.+30     	; 0xdf4 <update_octave_range+0x102>
     dd6:	80 91 24 03 	lds	r24, 0x0324
     dda:	28 2f       	mov	r18, r24
     ddc:	26 95       	lsr	r18
     dde:	26 95       	lsr	r18
     de0:	26 95       	lsr	r18
     de2:	29 5f       	subi	r18, 0xF9	; 249
     de4:	27 70       	andi	r18, 0x07	; 7
     de6:	22 0f       	add	r18, r18
     de8:	22 0f       	add	r18, r18
     dea:	22 0f       	add	r18, r18
     dec:	87 7c       	andi	r24, 0xC7	; 199
     dee:	82 2b       	or	r24, r18
     df0:	80 93 24 03 	sts	0x0324, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	98 27       	eor	r25, r24
     df8:	90 93 96 03 	sts	0x0396, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
     dfc:	40 91 21 03 	lds	r20, 0x0321
     e00:	4c 7f       	andi	r20, 0xFC	; 252
     e02:	40 93 21 03 	sts	0x0321, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
     e06:	90 91 24 03 	lds	r25, 0x0324
     e0a:	96 95       	lsr	r25
     e0c:	96 95       	lsr	r25
     e0e:	96 95       	lsr	r25
     e10:	97 70       	andi	r25, 0x07	; 7
     e12:	89 2f       	mov	r24, r25
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	83 30       	cpi	r24, 0x03	; 3
     e18:	91 05       	cpc	r25, r1
     e1a:	84 f0       	brlt	.+32     	; 0xe3c <update_octave_range+0x14a>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
     e1c:	fc 01       	movw	r30, r24
     e1e:	ec 5f       	subi	r30, 0xFC	; 252
     e20:	fd 4f       	sbci	r31, 0xFD	; 253
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	c9 01       	movw	r24, r18
     e28:	00 80       	ld	r0, Z
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <update_octave_range+0x13e>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <update_octave_range+0x13a>
     e34:	84 2b       	or	r24, r20
     e36:	80 93 21 03 	sts	0x0321, r24
     e3a:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
     e3c:	fc 01       	movw	r30, r24
     e3e:	ec 5f       	subi	r30, 0xFC	; 252
     e40:	fd 4f       	sbci	r31, 0xFD	; 253
     e42:	21 e0       	ldi	r18, 0x01	; 1
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	c9 01       	movw	r24, r18
     e48:	00 80       	ld	r0, Z
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <update_octave_range+0x15e>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <update_octave_range+0x15a>
     e54:	85 2b       	or	r24, r21
     e56:	80 93 22 03 	sts	0x0322, r24
     e5a:	08 95       	ret

00000e5c <refresh_synth>:
	}	
	
}
	
	
void refresh_synth(void) {
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     e60:	90 91 95 03 	lds	r25, 0x0395
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
     e64:	80 91 97 03 	lds	r24, 0x0397
     e68:	86 95       	lsr	r24
     e6a:	86 95       	lsr	r24
     e6c:	68 2f       	mov	r22, r24
     e6e:	67 95       	ror	r22
     e70:	66 27       	eor	r22, r22
     e72:	67 95       	ror	r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     e74:	29 2f       	mov	r18, r25
     e76:	21 70       	andi	r18, 0x01	; 1
     e78:	26 2b       	or	r18, r22
     e7a:	69 2f       	mov	r22, r25
     e7c:	66 1f       	adc	r22, r22
     e7e:	66 27       	eor	r22, r22
     e80:	66 1f       	adc	r22, r22
     e82:	66 0f       	add	r22, r22
     e84:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
     e86:	c9 2f       	mov	r28, r25
     e88:	c6 95       	lsr	r28
     e8a:	c6 95       	lsr	r28
     e8c:	d0 e0       	ldi	r29, 0x00	; 0
     e8e:	c1 70       	andi	r28, 0x01	; 1
     e90:	d0 70       	andi	r29, 0x00	; 0
     e92:	de 01       	movw	r26, r28
     e94:	aa 0f       	add	r26, r26
     e96:	bb 1f       	adc	r27, r27
     e98:	aa 0f       	add	r26, r26
     e9a:	bb 1f       	adc	r27, r27
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     e9c:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
     e9e:	a9 2f       	mov	r26, r25
     ea0:	a6 95       	lsr	r26
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	a1 70       	andi	r26, 0x01	; 1
     ea6:	b0 70       	andi	r27, 0x00	; 0
     ea8:	fd 01       	movw	r30, r26
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	ee 0f       	add	r30, r30
     eb4:	ff 1f       	adc	r31, r31
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     eb6:	a6 2f       	mov	r26, r22
     eb8:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
     eba:	e9 2f       	mov	r30, r25
     ebc:	e2 95       	swap	r30
     ebe:	ef 70       	andi	r30, 0x0F	; 15
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	e1 70       	andi	r30, 0x01	; 1
     ec4:	f0 70       	andi	r31, 0x00	; 0
     ec6:	bf 01       	movw	r22, r30
     ec8:	62 95       	swap	r22
     eca:	72 95       	swap	r23
     ecc:	70 7f       	andi	r23, 0xF0	; 240
     ece:	76 27       	eor	r23, r22
     ed0:	60 7f       	andi	r22, 0xF0	; 240
     ed2:	76 27       	eor	r23, r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     ed4:	ea 2f       	mov	r30, r26
     ed6:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
     ed8:	69 2f       	mov	r22, r25
     eda:	62 95       	swap	r22
     edc:	66 95       	lsr	r22
     ede:	67 70       	andi	r22, 0x07	; 7
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	61 70       	andi	r22, 0x01	; 1
     ee4:	70 70       	andi	r23, 0x00	; 0
     ee6:	ab 01       	movw	r20, r22
     ee8:	44 0f       	add	r20, r20
     eea:	55 1f       	adc	r21, r21
     eec:	42 95       	swap	r20
     eee:	52 95       	swap	r21
     ef0:	50 7f       	andi	r21, 0xF0	; 240
     ef2:	54 27       	eor	r21, r20
     ef4:	40 7f       	andi	r20, 0xF0	; 240
     ef6:	54 27       	eor	r21, r20
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     ef8:	6e 2f       	mov	r22, r30
     efa:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
     efc:	49 2f       	mov	r20, r25
     efe:	42 95       	swap	r20
     f00:	46 95       	lsr	r20
     f02:	46 95       	lsr	r20
     f04:	43 70       	andi	r20, 0x03	; 3
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	41 70       	andi	r20, 0x01	; 1
     f0a:	50 70       	andi	r21, 0x00	; 0
     f0c:	9a 01       	movw	r18, r20
     f0e:	00 24       	eor	r0, r0
     f10:	36 95       	lsr	r19
     f12:	27 95       	ror	r18
     f14:	07 94       	ror	r0
     f16:	36 95       	lsr	r19
     f18:	27 95       	ror	r18
     f1a:	07 94       	ror	r0
     f1c:	32 2f       	mov	r19, r18
     f1e:	20 2d       	mov	r18, r0
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     f20:	26 2b       	or	r18, r22
     f22:	20 93 23 03 	sts	0x0323, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
     f26:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
     f28:	81 95       	neg	r24
     f2a:	89 27       	eor	r24, r25
     f2c:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
     f2e:	89 27       	eor	r24, r25
     f30:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     f34:	ed ed       	ldi	r30, 0xDD	; 221
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	90 81       	ld	r25, Z
     f3a:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
     f3c:	80 91 97 03 	lds	r24, 0x0397
     f40:	86 95       	lsr	r24
     f42:	86 95       	lsr	r24
     f44:	86 95       	lsr	r24
     f46:	81 70       	andi	r24, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     f48:	81 95       	neg	r24
     f4a:	82 27       	eor	r24, r18
     f4c:	80 71       	andi	r24, 0x10	; 16
     f4e:	89 27       	eor	r24, r25
     f50:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
     f52:	0e 94 79 06 	call	0xcf2	; 0xcf2 <update_octave_range>
	
	//parse LFO data
	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
     f56:	80 91 96 03 	lds	r24, 0x0396
     f5a:	88 23       	and	r24, r24
     f5c:	84 f5       	brge	.+96     	; 0xfbe <refresh_synth+0x162>
		
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
     f5e:	80 58       	subi	r24, 0x80	; 128
     f60:	80 93 96 03 	sts	0x0396, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
     f64:	80 91 25 03 	lds	r24, 0x0325
     f68:	8f 5f       	subi	r24, 0xFF	; 255
     f6a:	80 93 25 03 	sts	0x0325, r24
     f6e:	85 30       	cpi	r24, 0x05	; 5
     f70:	11 f4       	brne	.+4      	; 0xf76 <refresh_synth+0x11a>
     f72:	10 92 25 03 	sts	0x0325, r1
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
     f76:	a0 91 25 03 	lds	r26, 0x0325
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	a2 5f       	subi	r26, 0xF2	; 242
     f7e:	bd 4f       	sbci	r27, 0xFD	; 253
     f80:	8c 91       	ld	r24, X
     f82:	87 70       	andi	r24, 0x07	; 7
     f84:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     f86:	ed ed       	ldi	r30, 0xDD	; 221
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	80 62       	ori	r24, 0x20	; 32
     f8e:	80 83       	st	Z, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     f90:	80 81       	ld	r24, Z
     f92:	8f 7d       	andi	r24, 0xDF	; 223
     f94:	80 83       	st	Z, r24
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
     f96:	8c 91       	ld	r24, X
     f98:	86 95       	lsr	r24
     f9a:	86 95       	lsr	r24
     f9c:	86 95       	lsr	r24
     f9e:	87 70       	andi	r24, 0x07	; 7
     fa0:	21 e0       	ldi	r18, 0x01	; 1
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	a9 01       	movw	r20, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <refresh_synth+0x150>
     fa8:	44 0f       	add	r20, r20
     faa:	55 1f       	adc	r21, r21
     fac:	8a 95       	dec	r24
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <refresh_synth+0x14c>
     fb0:	ca 01       	movw	r24, r20
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
     fb2:	90 91 20 03 	lds	r25, 0x0320
     fb6:	9f 70       	andi	r25, 0x0F	; 15
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
     fb8:	89 2b       	or	r24, r25
     fba:	80 93 20 03 	sts	0x0320, r24
		
		
	}		
				
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) //temporary tune button hack
     fbe:	80 91 97 03 	lds	r24, 0x0397
     fc2:	98 2f       	mov	r25, r24
     fc4:	92 95       	swap	r25
     fc6:	9f 70       	andi	r25, 0x0F	; 15
     fc8:	90 ff       	sbrs	r25, 0
     fca:	3f c0       	rjmp	.+126    	; 0x104a <refresh_synth+0x1ee>
		{ 
				
		switch_states.byte2 ^= (1<<PROG_WRITE_SW); //toggle read switch state
     fcc:	90 e1       	ldi	r25, 0x10	; 16
     fce:	89 27       	eor	r24, r25
     fd0:	80 93 97 03 	sts	0x0397, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
     fd4:	87 e0       	ldi	r24, 0x07	; 7
     fd6:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     fd8:	cd ed       	ldi	r28, 0xDD	; 221
     fda:	d0 e0       	ldi	r29, 0x00	; 0
     fdc:	88 81       	ld	r24, Y
     fde:	80 62       	ori	r24, 0x20	; 32
     fe0:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     fe2:	88 81       	ld	r24, Y
     fe4:	8f 7d       	andi	r24, 0xDF	; 223
     fe6:	88 83       	st	Y, r24
		DATA_BUS = 0;
     fe8:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
     fea:	8f e0       	ldi	r24, 0x0F	; 15
     fec:	6f e0       	ldi	r22, 0x0F	; 15
     fee:	7e e5       	ldi	r23, 0x5E	; 94
     ff0:	0e 94 a7 08 	call	0x114e	; 0x114e <set_vco_init_cv>
     ff4:	90 93 8d 03 	sts	0x038D, r25
     ff8:	80 93 8c 03 	sts	0x038C, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
     ffc:	80 ef       	ldi	r24, 0xF0	; 240
     ffe:	6f e0       	ldi	r22, 0x0F	; 15
    1000:	7e e5       	ldi	r23, 0x5E	; 94
    1002:	0e 94 a7 08 	call	0x114e	; 0x114e <set_vco_init_cv>
    1006:	90 93 8b 03 	sts	0x038B, r25
    100a:	80 93 8a 03 	sts	0x038A, r24

		tune_8ths(VCO1);
    100e:	8f e0       	ldi	r24, 0x0F	; 15
    1010:	0e 94 0b 0a 	call	0x1416	; 0x1416 <tune_8ths>
		tune_8ths(VCO2);
    1014:	80 ef       	ldi	r24, 0xF0	; 240
    1016:	0e 94 0b 0a 	call	0x1416	; 0x1416 <tune_8ths>
		tune_filter();
    101a:	0e 94 ad 0b 	call	0x175a	; 0x175a <tune_filter>
		save_tuning_tables();
    101e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1022:	8f e4       	ldi	r24, 0x4F	; 79
    1024:	93 ec       	ldi	r25, 0xC3	; 195
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <refresh_synth+0x1ca>
    102a:	00 c0       	rjmp	.+0      	; 0x102c <refresh_synth+0x1d0>
    102c:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
    102e:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1030:	88 81       	ld	r24, Y
    1032:	80 62       	ori	r24, 0x20	; 32
    1034:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1036:	88 81       	ld	r24, Y
    1038:	8f 7d       	andi	r24, 0xDF	; 223
    103a:	88 83       	st	Y, r24
		DATA_BUS = 0;
    103c:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    103e:	80 91 20 03 	lds	r24, 0x0320
    1042:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1044:	80 68       	ori	r24, 0x80	; 128
    1046:	80 93 20 03 	sts	0x0320, r24
				
		}
		
		
	
}
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1050:	88 ed       	ldi	r24, 0xD8	; 216
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    105c:	81 ee       	ldi	r24, 0xE1	; 225
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1068:	82 ee       	ldi	r24, 0xE2	; 226
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1074:	86 e9       	ldi	r24, 0x96	; 150
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1080:	8a ed       	ldi	r24, 0xDA	; 218
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    108c:	8f ed       	ldi	r24, 0xDF	; 223
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1098:	80 ee       	ldi	r24, 0xE0	; 224
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    10a4:	81 ed       	ldi	r24, 0xD1	; 209
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    10b0:	86 ed       	ldi	r24, 0xD6	; 214
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    10bc:	82 ed       	ldi	r24, 0xD2	; 210
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    10c8:	83 ed       	ldi	r24, 0xD3	; 211
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    10d4:	84 ed       	ldi	r24, 0xD4	; 212
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	6f ef       	ldi	r22, 0xFF	; 255
    10da:	7f e3       	ldi	r23, 0x3F	; 63
    10dc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    10e0:	85 ed       	ldi	r24, 0xD5	; 213
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    10ec:	89 ed       	ldi	r24, 0xD9	; 217
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    10f8:	8e ec       	ldi	r24, 0xCE	; 206
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1104:	8c ec       	ldi	r24, 0xCC	; 204
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1110:	8a ec       	ldi	r24, 0xCA	; 202
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	6f ef       	ldi	r22, 0xFF	; 255
    1116:	7f e3       	ldi	r23, 0x3F	; 63
    1118:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    111c:	88 ec       	ldi	r24, 0xC8	; 200
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1128:	80 ed       	ldi	r24, 0xD0	; 208
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1134:	83 ee       	ldi	r24, 0xE3	; 227
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1140:	84 ee       	ldi	r24, 0xE4	; 228
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}	
    114c:	08 95       	ret

0000114e <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    114e:	2f 92       	push	r2
    1150:	3f 92       	push	r3
    1152:	4f 92       	push	r4
    1154:	5f 92       	push	r5
    1156:	6f 92       	push	r6
    1158:	7f 92       	push	r7
    115a:	8f 92       	push	r8
    115c:	9f 92       	push	r9
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	2c 97       	sbiw	r28, 0x0c	; 12
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	08 2f       	mov	r16, r24
    1184:	78 87       	std	Y+8, r23	; 0x08
    1186:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1188:	80 91 92 03 	lds	r24, 0x0392
    118c:	83 60       	ori	r24, 0x03	; 3
    118e:	80 93 92 03 	sts	0x0392, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1192:	0e 94 28 08 	call	0x1050	; 0x1050 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1196:	10 92 91 03 	sts	0x0391, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    119a:	0f 30       	cpi	r16, 0x0F	; 15
    119c:	e1 f4       	brne	.+56     	; 0x11d6 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    119e:	0f 2e       	mov	r0, r31
    11a0:	f6 ee       	ldi	r31, 0xE6	; 230
    11a2:	4f 2e       	mov	r4, r31
    11a4:	f1 e0       	ldi	r31, 0x01	; 1
    11a6:	5f 2e       	mov	r5, r31
    11a8:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    11aa:	0f 2e       	mov	r0, r31
    11ac:	fe ed       	ldi	r31, 0xDE	; 222
    11ae:	2f 2e       	mov	r2, r31
    11b0:	f1 e0       	ldi	r31, 0x01	; 1
    11b2:	3f 2e       	mov	r3, r31
    11b4:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    11b6:	23 ee       	ldi	r18, 0xE3	; 227
    11b8:	31 e0       	ldi	r19, 0x01	; 1
    11ba:	3a 83       	std	Y+2, r19	; 0x02
    11bc:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    11be:	0f 2e       	mov	r0, r31
    11c0:	fc ed       	ldi	r31, 0xDC	; 220
    11c2:	8f 2e       	mov	r8, r31
    11c4:	f1 e0       	ldi	r31, 0x01	; 1
    11c6:	9f 2e       	mov	r9, r31
    11c8:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    11ca:	84 e7       	ldi	r24, 0x74	; 116
    11cc:	97 e0       	ldi	r25, 0x07	; 7
    11ce:	9a 87       	std	Y+10, r25	; 0x0a
    11d0:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	1b c0       	rjmp	.+54     	; 0x120c <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    11d6:	0f 2e       	mov	r0, r31
    11d8:	f5 ee       	ldi	r31, 0xE5	; 229
    11da:	4f 2e       	mov	r4, r31
    11dc:	f1 e0       	ldi	r31, 0x01	; 1
    11de:	5f 2e       	mov	r5, r31
    11e0:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    11e2:	0f 2e       	mov	r0, r31
    11e4:	f7 ed       	ldi	r31, 0xD7	; 215
    11e6:	2f 2e       	mov	r2, r31
    11e8:	f1 e0       	ldi	r31, 0x01	; 1
    11ea:	3f 2e       	mov	r3, r31
    11ec:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    11ee:	e4 ee       	ldi	r30, 0xE4	; 228
    11f0:	f1 e0       	ldi	r31, 0x01	; 1
    11f2:	fa 83       	std	Y+2, r31	; 0x02
    11f4:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    11f6:	0f 2e       	mov	r0, r31
    11f8:	fd ed       	ldi	r31, 0xDD	; 221
    11fa:	8f 2e       	mov	r8, r31
    11fc:	f1 e0       	ldi	r31, 0x01	; 1
    11fe:	9f 2e       	mov	r9, r31
    1200:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1202:	22 e7       	ldi	r18, 0x72	; 114
    1204:	37 e0       	ldi	r19, 0x07	; 7
    1206:	3a 87       	std	Y+10, r19	; 0x0a
    1208:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    120a:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    120c:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    120e:	ed ed       	ldi	r30, 0xDD	; 221
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1218:	80 81       	ld	r24, Z
    121a:	8f 7b       	andi	r24, 0xBF	; 191
    121c:	80 83       	st	Z, r24
	DATA_BUS = 0;
    121e:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1220:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1222:	84 b5       	in	r24, 0x24	; 36
    1224:	8f 60       	ori	r24, 0x0F	; 15
    1226:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    122c:	ee e6       	ldi	r30, 0x6E	; 110
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	90 81       	ld	r25, Z
    1232:	92 60       	ori	r25, 0x02	; 2
    1234:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1236:	80 93 93 03 	sts	0x0393, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    123a:	8d e0       	ldi	r24, 0x0D	; 13
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9c 83       	std	Y+4, r25	; 0x04
    1240:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1242:	80 2f       	mov	r24, r16
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	8c 01       	movw	r16, r24
    1248:	0f 5f       	subi	r16, 0xFF	; 255
    124a:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    124c:	0f 2e       	mov	r0, r31
    124e:	f8 ed       	ldi	r31, 0xD8	; 216
    1250:	ef 2e       	mov	r14, r31
    1252:	f1 e0       	ldi	r31, 0x01	; 1
    1254:	ff 2e       	mov	r15, r31
    1256:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1258:	0f 2e       	mov	r0, r31
    125a:	f4 ed       	ldi	r31, 0xD4	; 212
    125c:	cf 2e       	mov	r12, r31
    125e:	f1 e0       	ldi	r31, 0x01	; 1
    1260:	df 2e       	mov	r13, r31
    1262:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1264:	0f 2e       	mov	r0, r31
    1266:	fa ec       	ldi	r31, 0xCA	; 202
    1268:	af 2e       	mov	r10, r31
    126a:	f1 e0       	ldi	r31, 0x01	; 1
    126c:	bf 2e       	mov	r11, r31
    126e:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1270:	0f 2e       	mov	r0, r31
    1272:	fb ec       	ldi	r31, 0xCB	; 203
    1274:	6f 2e       	mov	r6, r31
    1276:	f1 e0       	ldi	r31, 0x01	; 1
    1278:	7f 2e       	mov	r7, r31
    127a:	f0 2d       	mov	r31, r0
    127c:	e0 e0       	ldi	r30, 0x00	; 0
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	fc 87       	std	Y+12, r31	; 0x0c
    1282:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1284:	21 e0       	ldi	r18, 0x01	; 1
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	0b 80       	ldd	r0, Y+3	; 0x03
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <set_vco_init_cv+0x142>
    128c:	22 0f       	add	r18, r18
    128e:	33 1f       	adc	r19, r19
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <set_vco_init_cv+0x13e>
    1294:	3e 83       	std	Y+6, r19	; 0x06
    1296:	2d 83       	std	Y+5, r18	; 0x05
    1298:	8b 85       	ldd	r24, Y+11	; 0x0b
    129a:	9c 85       	ldd	r25, Y+12	; 0x0c
    129c:	82 2b       	or	r24, r18
    129e:	93 2b       	or	r25, r19
    12a0:	9c 87       	std	Y+12, r25	; 0x0c
    12a2:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    12a4:	c4 01       	movw	r24, r8
    12a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
		
		count_finished = FALSE;
    12ae:	10 92 91 03 	sts	0x0391, r1
		period_counter = 0;
    12b2:	10 92 94 03 	sts	0x0394, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    12b6:	8f e0       	ldi	r24, 0x0F	; 15
    12b8:	e8 e1       	ldi	r30, 0x18	; 24
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	a8 95       	wdr
    12c2:	e0 93 60 00 	sts	0x0060, r30
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    12cc:	80 91 91 03 	lds	r24, 0x0391
    12d0:	88 23       	and	r24, r24
    12d2:	89 f5       	brne	.+98     	; 0x1336 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    12d4:	c8 01       	movw	r24, r16
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    12dc:	c4 01       	movw	r24, r8
    12de:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    12e6:	c1 01       	movw	r24, r2
    12e8:	6f ef       	ldi	r22, 0xFF	; 255
    12ea:	7f e3       	ldi	r23, 0x3F	; 63
    12ec:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    12f0:	c7 01       	movw	r24, r14
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    12fa:	c6 01       	movw	r24, r12
    12fc:	6f ef       	ldi	r22, 0xFF	; 255
    12fe:	7f e3       	ldi	r23, 0x3F	; 63
    1300:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1304:	c5 01       	movw	r24, r10
    1306:	6f ef       	ldi	r22, 0xFF	; 255
    1308:	7f e3       	ldi	r23, 0x3F	; 63
    130a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    130e:	c3 01       	movw	r24, r6
    1310:	6f ef       	ldi	r22, 0xFF	; 255
    1312:	7f e3       	ldi	r23, 0x3F	; 63
    1314:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	6f ef       	ldi	r22, 0xFF	; 255
    131e:	7f e3       	ldi	r23, 0x3F	; 63
    1320:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1324:	c2 01       	movw	r24, r4
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    132e:	80 91 91 03 	lds	r24, 0x0391
    1332:	88 23       	and	r24, r24
    1334:	79 f2       	breq	.-98     	; 0x12d4 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1336:	88 e1       	ldi	r24, 0x18	; 24
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	80 93 60 00 	sts	0x0060, r24
    1340:	10 92 60 00 	sts	0x0060, r1
    1344:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1346:	80 91 8f 03 	lds	r24, 0x038F
    134a:	90 91 90 03 	lds	r25, 0x0390
    134e:	ef 81       	ldd	r30, Y+7	; 0x07
    1350:	f8 85       	ldd	r31, Y+8	; 0x08
    1352:	e8 17       	cp	r30, r24
    1354:	f9 07       	cpc	r31, r25
    1356:	20 f0       	brcs	.+8      	; 0x1360 <set_vco_init_cv+0x212>
    1358:	80 91 92 02 	lds	r24, 0x0292
    135c:	88 23       	and	r24, r24
    135e:	51 f4       	brne	.+20     	; 0x1374 <set_vco_init_cv+0x226>
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	80 95       	com	r24
    1366:	90 95       	com	r25
    1368:	2b 85       	ldd	r18, Y+11	; 0x0b
    136a:	3c 85       	ldd	r19, Y+12	; 0x0c
    136c:	28 23       	and	r18, r24
    136e:	39 23       	and	r19, r25
    1370:	3c 87       	std	Y+12, r19	; 0x0c
    1372:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 92 02 	sts	0x0292, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	ef ef       	ldi	r30, 0xFF	; 255
    1386:	8f 3f       	cpi	r24, 0xFF	; 255
    1388:	9e 07       	cpc	r25, r30
    138a:	09 f0       	breq	.+2      	; 0x138e <set_vco_init_cv+0x240>
    138c:	7b cf       	rjmp	.-266    	; 0x1284 <set_vco_init_cv+0x136>
    138e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1390:	3c 85       	ldd	r19, Y+12	; 0x0c
    1392:	3e 83       	std	Y+6, r19	; 0x06
    1394:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1396:	88 ec       	ldi	r24, 0xC8	; 200
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    13a2:	89 ec       	ldi	r24, 0xC9	; 201
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    13ae:	84 ed       	ldi	r24, 0xD4	; 212
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    13ba:	88 ed       	ldi	r24, 0xD8	; 216
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    13c6:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    13c8:	ee e6       	ldi	r30, 0x6E	; 110
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8d 7f       	andi	r24, 0xFD	; 253
    13d0:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    13d2:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    13d4:	89 85       	ldd	r24, Y+9	; 0x09
    13d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d8:	6d 81       	ldd	r22, Y+5	; 0x05
    13da:	7e 81       	ldd	r23, Y+6	; 0x06
    13dc:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	2c 96       	adiw	r28, 0x0c	; 12
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	df 90       	pop	r13
    13fe:	cf 90       	pop	r12
    1400:	bf 90       	pop	r11
    1402:	af 90       	pop	r10
    1404:	9f 90       	pop	r9
    1406:	8f 90       	pop	r8
    1408:	7f 90       	pop	r7
    140a:	6f 90       	pop	r6
    140c:	5f 90       	pop	r5
    140e:	4f 90       	pop	r4
    1410:	3f 90       	pop	r3
    1412:	2f 90       	pop	r2
    1414:	08 95       	ret

00001416 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1416:	2f 92       	push	r2
    1418:	3f 92       	push	r3
    141a:	4f 92       	push	r4
    141c:	5f 92       	push	r5
    141e:	6f 92       	push	r6
    1420:	7f 92       	push	r7
    1422:	8f 92       	push	r8
    1424:	9f 92       	push	r9
    1426:	af 92       	push	r10
    1428:	bf 92       	push	r11
    142a:	cf 92       	push	r12
    142c:	df 92       	push	r13
    142e:	ef 92       	push	r14
    1430:	ff 92       	push	r15
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	c0 54       	subi	r28, 0x40	; 64
    1440:	d0 40       	sbci	r29, 0x00	; 0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    144e:	de 01       	movw	r26, r28
    1450:	11 96       	adiw	r26, 0x01	; 1
    1452:	e3 e1       	ldi	r30, 0x13	; 19
    1454:	f2 e0       	ldi	r31, 0x02	; 2
    1456:	80 e3       	ldi	r24, 0x30	; 48
    1458:	01 90       	ld	r0, Z+
    145a:	0d 92       	st	X+, r0
    145c:	81 50       	subi	r24, 0x01	; 1
    145e:	e1 f7       	brne	.-8      	; 0x1458 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    1460:	0e 94 28 08 	call	0x1050	; 0x1050 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1464:	0f 30       	cpi	r16, 0x0F	; 15
    1466:	11 f5       	brne	.+68     	; 0x14ac <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    1468:	40 90 8c 03 	lds	r4, 0x038C
    146c:	50 90 8d 03 	lds	r5, 0x038D
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1470:	0f 2e       	mov	r0, r31
    1472:	f6 ee       	ldi	r31, 0xE6	; 230
    1474:	8f 2e       	mov	r8, r31
    1476:	f1 e0       	ldi	r31, 0x01	; 1
    1478:	9f 2e       	mov	r9, r31
    147a:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    147c:	0f 2e       	mov	r0, r31
    147e:	fe ed       	ldi	r31, 0xDE	; 222
    1480:	2f 2e       	mov	r2, r31
    1482:	f1 e0       	ldi	r31, 0x01	; 1
    1484:	3f 2e       	mov	r3, r31
    1486:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    1488:	23 ee       	ldi	r18, 0xE3	; 227
    148a:	31 e0       	ldi	r19, 0x01	; 1
    148c:	3a ab       	sts	0x5a, r19
    148e:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1490:	0f 2e       	mov	r0, r31
    1492:	fc ed       	ldi	r31, 0xDC	; 220
    1494:	6f 2e       	mov	r6, r31
    1496:	f1 e0       	ldi	r31, 0x01	; 1
    1498:	7f 2e       	mov	r7, r31
    149a:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    149c:	08 e6       	ldi	r16, 0x68	; 104
    149e:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    14a0:	cc 24       	eor	r12, r12
    14a2:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    14a4:	ee 24       	eor	r14, r14
    14a6:	68 94       	set
    14a8:	e1 f8       	bld	r14, 1
    14aa:	22 c0       	rjmp	.+68     	; 0x14f0 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    14ac:	40 90 8a 03 	lds	r4, 0x038A
    14b0:	50 90 8b 03 	lds	r5, 0x038B
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    14b4:	0f 2e       	mov	r0, r31
    14b6:	f5 ee       	ldi	r31, 0xE5	; 229
    14b8:	8f 2e       	mov	r8, r31
    14ba:	f1 e0       	ldi	r31, 0x01	; 1
    14bc:	9f 2e       	mov	r9, r31
    14be:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    14c0:	0f 2e       	mov	r0, r31
    14c2:	f7 ed       	ldi	r31, 0xD7	; 215
    14c4:	2f 2e       	mov	r2, r31
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	3f 2e       	mov	r3, r31
    14ca:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    14cc:	44 ee       	ldi	r20, 0xE4	; 228
    14ce:	51 e0       	ldi	r21, 0x01	; 1
    14d0:	5a ab       	sts	0x5a, r21
    14d2:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    14d4:	0f 2e       	mov	r0, r31
    14d6:	fd ed       	ldi	r31, 0xDD	; 221
    14d8:	6f 2e       	mov	r6, r31
    14da:	f1 e0       	ldi	r31, 0x01	; 1
    14dc:	7f 2e       	mov	r7, r31
    14de:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    14e0:	06 e4       	ldi	r16, 0x46	; 70
    14e2:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    14e4:	cc 24       	eor	r12, r12
    14e6:	68 94       	set
    14e8:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    14ea:	ee 24       	eor	r14, r14
    14ec:	68 94       	set
    14ee:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    14f0:	c3 01       	movw	r24, r6
    14f2:	b2 01       	movw	r22, r4
    14f4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    14f8:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    14fa:	ed ed       	ldi	r30, 0xDD	; 221
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	80 64       	ori	r24, 0x40	; 64
    1502:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1504:	80 81       	ld	r24, Z
    1506:	8f 7b       	andi	r24, 0xBF	; 191
    1508:	80 83       	st	Z, r24
		DATA_BUS = 0;
    150a:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    150c:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	80 93 93 03 	sts	0x0393, r24
		
		compare_match_counter = 0;	
    1514:	10 92 8e 03 	sts	0x038E, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1518:	8c 2d       	mov	r24, r12
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	24 e6       	ldi	r18, 0x64	; 100
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	82 9f       	mul	r24, r18
    1522:	d0 01       	movw	r26, r0
    1524:	83 9f       	mul	r24, r19
    1526:	b0 0d       	add	r27, r0
    1528:	92 9f       	mul	r25, r18
    152a:	b0 0d       	add	r27, r0
    152c:	11 24       	eor	r1, r1
    152e:	bc ab       	sts	0x5c, r27
    1530:	ab ab       	sts	0x5b, r26
    1532:	fe 01       	movw	r30, r28
    1534:	31 96       	adiw	r30, 0x01	; 1
    1536:	fc af       	sts	0x7c, r31
    1538:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    153a:	98 01       	movw	r18, r16
    153c:	2e 5f       	subi	r18, 0xFE	; 254
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	21 96       	adiw	r28, 0x01	; 1
    1542:	3f af       	sts	0x7f, r19
    1544:	2e af       	sts	0x7e, r18
    1546:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1548:	1e ae       	sts	0xbe, r17
    154a:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    154c:	0f 2e       	mov	r0, r31
    154e:	f8 ed       	ldi	r31, 0xD8	; 216
    1550:	ef 2e       	mov	r14, r31
    1552:	f1 e0       	ldi	r31, 0x01	; 1
    1554:	ff 2e       	mov	r15, r31
    1556:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    1558:	0f 2e       	mov	r0, r31
    155a:	f4 ed       	ldi	r31, 0xD4	; 212
    155c:	cf 2e       	mov	r12, r31
    155e:	f1 e0       	ldi	r31, 0x01	; 1
    1560:	df 2e       	mov	r13, r31
    1562:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1564:	0f 2e       	mov	r0, r31
    1566:	fa ec       	ldi	r31, 0xCA	; 202
    1568:	af 2e       	mov	r10, r31
    156a:	f1 e0       	ldi	r31, 0x01	; 1
    156c:	bf 2e       	mov	r11, r31
    156e:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    1570:	eb ad       	sts	0x6b, r30
    1572:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    1574:	80 81       	ld	r24, Z
    1576:	80 93 93 03 	sts	0x0393, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    157a:	84 b5       	in	r24, 0x24	; 36
    157c:	8f 60       	ori	r24, 0x0F	; 15
    157e:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    1584:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    1586:	4d ad       	sts	0x6d, r20
    1588:	5e ad       	sts	0x6e, r21
    158a:	43 30       	cpi	r20, 0x03	; 3
    158c:	51 05       	cpc	r21, r1
    158e:	24 f4       	brge	.+8      	; 0x1598 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	80 93 92 03 	sts	0x0392, r24
    1596:	03 c0       	rjmp	.+6      	; 0x159e <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	80 93 92 03 	sts	0x0392, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    159e:	81 81       	ldd	r24, Z+1	; 0x01
    15a0:	92 81       	ldd	r25, Z+2	; 0x02
    15a2:	9a af       	sts	0x7a, r25
    15a4:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    15a6:	ad e0       	ldi	r26, 0x0D	; 13
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	be ab       	sts	0x5e, r27
    15ac:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    15ae:	00 e0       	ldi	r16, 0x00	; 0
    15b0:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    15b2:	e1 e0       	ldi	r30, 0x01	; 1
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	0d a8       	sts	0x8d, r16
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <tune_8ths+0x1a8>
    15ba:	ee 0f       	add	r30, r30
    15bc:	ff 1f       	adc	r31, r31
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <tune_8ths+0x1a4>
    15c2:	f8 af       	sts	0x78, r31
    15c4:	ef ab       	sts	0x5f, r30
    15c6:	0e 2b       	or	r16, r30
    15c8:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    15ca:	ae e6       	ldi	r26, 0x6E	; 110
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	8c 91       	ld	r24, X
    15d0:	8d 7f       	andi	r24, 0xFD	; 253
    15d2:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    15d4:	c4 01       	movw	r24, r8
    15d6:	b8 01       	movw	r22, r16
    15d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
    15dc:	e3 ef       	ldi	r30, 0xF3	; 243
    15de:	f1 e0       	ldi	r31, 0x01	; 1
    15e0:	31 97       	sbiw	r30, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <tune_8ths+0x1ca>
    15e4:	00 c0       	rjmp	.+0      	; 0x15e6 <tune_8ths+0x1d0>
    15e6:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    15e8:	ae e6       	ldi	r26, 0x6E	; 110
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	8c 91       	ld	r24, X
    15ee:	82 60       	ori	r24, 0x02	; 2
    15f0:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    15f2:	10 92 91 03 	sts	0x0391, r1
				period_counter = 0;
    15f6:	10 92 94 03 	sts	0x0394, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    15fa:	e8 e1       	ldi	r30, 0x18	; 24
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	2f e0       	ldi	r18, 0x0F	; 15
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	a8 95       	wdr
    1606:	e0 93 60 00 	sts	0x0060, r30
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    1610:	80 91 91 03 	lds	r24, 0x0391
    1614:	88 23       	and	r24, r24
    1616:	81 f5       	brne	.+96     	; 0x1678 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1618:	80 91 93 03 	lds	r24, 0x0393
    161c:	4b a9       	sts	0x4b, r20
    161e:	5c a9       	sts	0x4c, r21
    1620:	48 0f       	add	r20, r24
    1622:	51 1d       	adc	r21, r1
    1624:	ca 01       	movw	r24, r20
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    162c:	c3 01       	movw	r24, r6
    162e:	b2 01       	movw	r22, r4
    1630:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1634:	c4 01       	movw	r24, r8
    1636:	b8 01       	movw	r22, r16
    1638:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    163c:	c7 01       	movw	r24, r14
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    1646:	c6 01       	movw	r24, r12
    1648:	6f ef       	ldi	r22, 0xFF	; 255
    164a:	7f e3       	ldi	r23, 0x3F	; 63
    164c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1650:	c5 01       	movw	r24, r10
    1652:	6f ef       	ldi	r22, 0xFF	; 255
    1654:	7f e3       	ldi	r23, 0x3F	; 63
    1656:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    165a:	c1 01       	movw	r24, r2
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	70 e2       	ldi	r23, 0x20	; 32
    1660:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    1664:	89 a9       	sts	0x49, r24
    1666:	9a a9       	sts	0x4a, r25
    1668:	6f ef       	ldi	r22, 0xFF	; 255
    166a:	7f e3       	ldi	r23, 0x3F	; 63
    166c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    1670:	80 91 91 03 	lds	r24, 0x0391
    1674:	88 23       	and	r24, r24
    1676:	81 f2       	breq	.-96     	; 0x1618 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    1678:	58 e1       	ldi	r21, 0x18	; 24
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	50 93 60 00 	sts	0x0060, r21
    1682:	10 92 60 00 	sts	0x0060, r1
    1686:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    1688:	80 91 8f 03 	lds	r24, 0x038F
    168c:	90 91 90 03 	lds	r25, 0x0390
    1690:	a9 ad       	sts	0x69, r26
    1692:	ba ad       	sts	0x6a, r27
    1694:	a8 17       	cp	r26, r24
    1696:	b9 07       	cpc	r27, r25
    1698:	50 f0       	brcs	.+20     	; 0x16ae <tune_8ths+0x298>
    169a:	80 91 92 02 	lds	r24, 0x0292
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	31 f4       	brne	.+12     	; 0x16ae <tune_8ths+0x298>
    16a2:	8f a9       	sts	0x4f, r24
    16a4:	98 ad       	sts	0x68, r25
    16a6:	80 95       	com	r24
    16a8:	90 95       	com	r25
    16aa:	08 23       	and	r16, r24
    16ac:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    16ae:	80 91 8f 03 	lds	r24, 0x038F
    16b2:	90 91 90 03 	lds	r25, 0x0390
    16b6:	e9 ad       	sts	0x69, r30
    16b8:	fa ad       	sts	0x6a, r31
    16ba:	8e 17       	cp	r24, r30
    16bc:	9f 07       	cpc	r25, r31
    16be:	21 f4       	brne	.+8      	; 0x16c8 <tune_8ths+0x2b2>
    16c0:	80 91 92 02 	lds	r24, 0x0292
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	71 f0       	breq	.+28     	; 0x16e4 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    16c8:	f1 e0       	ldi	r31, 0x01	; 1
    16ca:	f0 93 92 02 	sts	0x0292, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    16ce:	2d a9       	sts	0x4d, r18
    16d0:	3e a9       	sts	0x4e, r19
    16d2:	21 50       	subi	r18, 0x01	; 1
    16d4:	30 40       	sbci	r19, 0x00	; 0
    16d6:	3e ab       	sts	0x5e, r19
    16d8:	2d ab       	sts	0x5d, r18
    16da:	4f ef       	ldi	r20, 0xFF	; 255
    16dc:	2f 3f       	cpi	r18, 0xFF	; 255
    16de:	34 07       	cpc	r19, r20
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <tune_8ths+0x2ce>
    16e2:	67 cf       	rjmp	.-306    	; 0x15b2 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    16e4:	21 96       	adiw	r28, 0x01	; 1
    16e6:	ae ad       	sts	0x6e, r26
    16e8:	bf ad       	sts	0x6f, r27
    16ea:	21 97       	sbiw	r28, 0x01	; 1
    16ec:	0d 93       	st	X+, r16
    16ee:	1d 93       	st	X+, r17
    16f0:	21 96       	adiw	r28, 0x01	; 1
    16f2:	bf af       	sts	0x7f, r27
    16f4:	ae af       	sts	0x7e, r26
    16f6:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    16f8:	ee e6       	ldi	r30, 0x6E	; 110
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	8d 7f       	andi	r24, 0xFD	; 253
    1700:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    1702:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1704:	2d ad       	sts	0x6d, r18
    1706:	3e ad       	sts	0x6e, r19
    1708:	2f 5f       	subi	r18, 0xFF	; 255
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	3e af       	sts	0x7e, r19
    170e:	2d af       	sts	0x7d, r18
    1710:	4b ad       	sts	0x6b, r20
    1712:	5c ad       	sts	0x6c, r21
    1714:	4d 5f       	subi	r20, 0xFD	; 253
    1716:	5f 4f       	sbci	r21, 0xFF	; 255
    1718:	5c af       	sts	0x7c, r21
    171a:	4b af       	sts	0x7b, r20
    171c:	20 31       	cpi	r18, 0x10	; 16
    171e:	31 05       	cpc	r19, r1
    1720:	09 f0       	breq	.+2      	; 0x1724 <tune_8ths+0x30e>
    1722:	26 cf       	rjmp	.-436    	; 0x1570 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		
		PORTF &= ~(1<<GATE); //turn gate off
    1724:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    1726:	c0 5c       	subi	r28, 0xC0	; 192
    1728:	df 4f       	sbci	r29, 0xFF	; 255
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	bf 90       	pop	r11
    1746:	af 90       	pop	r10
    1748:	9f 90       	pop	r9
    174a:	8f 90       	pop	r8
    174c:	7f 90       	pop	r7
    174e:	6f 90       	pop	r6
    1750:	5f 90       	pop	r5
    1752:	4f 90       	pop	r4
    1754:	3f 90       	pop	r3
    1756:	2f 90       	pop	r2
    1758:	08 95       	ret

0000175a <tune_filter>:
	
void tune_filter(void) {
    175a:	2f 92       	push	r2
    175c:	3f 92       	push	r3
    175e:	4f 92       	push	r4
    1760:	5f 92       	push	r5
    1762:	6f 92       	push	r6
    1764:	7f 92       	push	r7
    1766:	8f 92       	push	r8
    1768:	9f 92       	push	r9
    176a:	af 92       	push	r10
    176c:	bf 92       	push	r11
    176e:	cf 92       	push	r12
    1770:	df 92       	push	r13
    1772:	ef 92       	push	r14
    1774:	ff 92       	push	r15
    1776:	0f 93       	push	r16
    1778:	1f 93       	push	r17
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	e9 97       	sbiw	r28, 0x39	; 57
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    178e:	de 01       	movw	r26, r28
    1790:	11 96       	adiw	r26, 0x01	; 1
    1792:	e3 e4       	ldi	r30, 0x43	; 67
    1794:	f2 e0       	ldi	r31, 0x02	; 2
    1796:	8d e2       	ldi	r24, 0x2D	; 45
    1798:	01 90       	ld	r0, Z+
    179a:	0d 92       	st	X+, r0
    179c:	81 50       	subi	r24, 0x01	; 1
    179e:	e1 f7       	brne	.-8      	; 0x1798 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    17a0:	88 ed       	ldi	r24, 0xD8	; 216
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    17ac:	81 ee       	ldi	r24, 0xE1	; 225
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    17b8:	82 ee       	ldi	r24, 0xE2	; 226
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    17c4:	86 e9       	ldi	r24, 0x96	; 150
    17c6:	92 e0       	ldi	r25, 0x02	; 2
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    17d0:	8a ed       	ldi	r24, 0xDA	; 218
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    17dc:	8f ed       	ldi	r24, 0xDF	; 223
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    17e8:	80 ee       	ldi	r24, 0xE0	; 224
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    17f4:	81 ed       	ldi	r24, 0xD1	; 209
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1800:	86 ed       	ldi	r24, 0xD6	; 214
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    180c:	82 ed       	ldi	r24, 0xD2	; 210
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1818:	83 ed       	ldi	r24, 0xD3	; 211
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    1824:	84 ed       	ldi	r24, 0xD4	; 212
    1826:	91 e0       	ldi	r25, 0x01	; 1
    1828:	6f ef       	ldi	r22, 0xFF	; 255
    182a:	7f e3       	ldi	r23, 0x3F	; 63
    182c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    1830:	85 ed       	ldi	r24, 0xD5	; 213
    1832:	91 e0       	ldi	r25, 0x01	; 1
    1834:	6f ef       	ldi	r22, 0xFF	; 255
    1836:	7f e3       	ldi	r23, 0x3F	; 63
    1838:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    183c:	89 ed       	ldi	r24, 0xD9	; 217
    183e:	91 e0       	ldi	r25, 0x01	; 1
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1848:	8e ec       	ldi	r24, 0xCE	; 206
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1854:	8c ec       	ldi	r24, 0xCC	; 204
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1860:	8a ec       	ldi	r24, 0xCA	; 202
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	6f ef       	ldi	r22, 0xFF	; 255
    1866:	7f e3       	ldi	r23, 0x3F	; 63
    1868:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    186c:	88 ec       	ldi	r24, 0xC8	; 200
    186e:	91 e0       	ldi	r25, 0x01	; 1
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    1878:	80 ed       	ldi	r24, 0xD0	; 208
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1884:	83 ee       	ldi	r24, 0xE3	; 227
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1890:	84 ee       	ldi	r24, 0xE4	; 228
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    189c:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    189e:	ed ed       	ldi	r30, 0xDD	; 221
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 64       	ori	r24, 0x40	; 64
    18a6:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    18a8:	80 81       	ld	r24, Z
    18aa:	8f 7b       	andi	r24, 0xBF	; 191
    18ac:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	80 93 93 03 	sts	0x0393, r24
	PORTF |= (1<<GATE); //turn gate on
    18b4:	89 9a       	sbi	0x11, 1	; 17
    18b6:	9e 01       	movw	r18, r28
    18b8:	2f 5f       	subi	r18, 0xFF	; 255
    18ba:	3f 4f       	sbci	r19, 0xFF	; 255
    18bc:	3d ab       	sts	0x5d, r19
    18be:	2c ab       	sts	0x5c, r18
    18c0:	88 e2       	ldi	r24, 0x28	; 40
    18c2:	93 e0       	ldi	r25, 0x03	; 3
    18c4:	99 af       	sts	0x79, r25
    18c6:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    18c8:	1f aa       	sts	0x9f, r17
    18ca:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    18cc:	0f 2e       	mov	r0, r31
    18ce:	f4 ed       	ldi	r31, 0xD4	; 212
    18d0:	af 2e       	mov	r10, r31
    18d2:	f1 e0       	ldi	r31, 0x01	; 1
    18d4:	bf 2e       	mov	r11, r31
    18d6:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    18d8:	0f 2e       	mov	r0, r31
    18da:	f8 ed       	ldi	r31, 0xD8	; 216
    18dc:	6f 2e       	mov	r6, r31
    18de:	f1 e0       	ldi	r31, 0x01	; 1
    18e0:	7f 2e       	mov	r7, r31
    18e2:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    18e4:	0f 2e       	mov	r0, r31
    18e6:	f5 ed       	ldi	r31, 0xD5	; 213
    18e8:	4f 2e       	mov	r4, r31
    18ea:	f1 e0       	ldi	r31, 0x01	; 1
    18ec:	5f 2e       	mov	r5, r31
    18ee:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    18f0:	0f 2e       	mov	r0, r31
    18f2:	fa ec       	ldi	r31, 0xCA	; 202
    18f4:	2f 2e       	mov	r2, r31
    18f6:	f1 e0       	ldi	r31, 0x01	; 1
    18f8:	3f 2e       	mov	r3, r31
    18fa:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    18fc:	ac a9       	sts	0x4c, r26
    18fe:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    1900:	8c 91       	ld	r24, X
    1902:	80 93 93 03 	sts	0x0393, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1906:	84 b5       	in	r24, 0x24	; 36
    1908:	8f 60       	ori	r24, 0x0F	; 15
    190a:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1910:	ee e6       	ldi	r30, 0x6E	; 110
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	82 60       	ori	r24, 0x02	; 2
    1918:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    191a:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    191c:	ee a9       	sts	0x4e, r30
    191e:	ff a9       	sts	0x4f, r31
    1920:	e2 30       	cpi	r30, 0x02	; 2
    1922:	f1 05       	cpc	r31, r1
    1924:	24 f4       	brge	.+8      	; 0x192e <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	80 93 92 03 	sts	0x0392, r24
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    192e:	82 e0       	ldi	r24, 0x02	; 2
    1930:	80 93 92 03 	sts	0x0392, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    1934:	11 96       	adiw	r26, 0x01	; 1
    1936:	2d 91       	ld	r18, X+
    1938:	3c 91       	ld	r19, X
    193a:	12 97       	sbiw	r26, 0x02	; 2
    193c:	3b ab       	sts	0x5b, r19
    193e:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1940:	8d e0       	ldi	r24, 0x0D	; 13
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9f a7       	lds	r25, 0x7f
    1946:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    1948:	ee 24       	eor	r14, r14
    194a:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    194c:	0f 2e       	mov	r0, r31
    194e:	f1 ed       	ldi	r31, 0xD1	; 209
    1950:	cf 2e       	mov	r12, r31
    1952:	f1 e0       	ldi	r31, 0x01	; 1
    1954:	df 2e       	mov	r13, r31
    1956:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    1958:	0f 2e       	mov	r0, r31
    195a:	f6 ed       	ldi	r31, 0xD6	; 214
    195c:	8f 2e       	mov	r8, r31
    195e:	f1 e0       	ldi	r31, 0x01	; 1
    1960:	9f 2e       	mov	r9, r31
    1962:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	fc 01       	movw	r30, r24
    196a:	0e a4       	lds	r16, 0xae
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <tune_filter+0x218>
    196e:	ee 0f       	add	r30, r30
    1970:	ff 1f       	adc	r31, r31
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <tune_filter+0x214>
    1976:	f9 ab       	sts	0x59, r31
    1978:	e8 ab       	sts	0x58, r30
    197a:	ee 2a       	or	r14, r30
    197c:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    197e:	c5 01       	movw	r24, r10
    1980:	b7 01       	movw	r22, r14
    1982:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
    1986:	10 92 91 03 	sts	0x0391, r1
			period_counter = 0;
    198a:	10 92 94 03 	sts	0x0394, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    198e:	8f e0       	ldi	r24, 0x0F	; 15
    1990:	28 e1       	ldi	r18, 0x18	; 24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	a8 95       	wdr
    199a:	20 93 60 00 	sts	0x0060, r18
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    19a4:	80 91 91 03 	lds	r24, 0x0391
    19a8:	88 23       	and	r24, r24
    19aa:	b1 f5       	brne	.+108    	; 0x1a18 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    19ac:	02 ed       	ldi	r16, 0xD2	; 210
    19ae:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    19b0:	80 91 93 03 	lds	r24, 0x0393
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	84 5d       	subi	r24, 0xD4	; 212
    19b8:	9e 4f       	sbci	r25, 0xFE	; 254
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    19c0:	c5 01       	movw	r24, r10
    19c2:	b7 01       	movw	r22, r14
    19c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    19c8:	c3 01       	movw	r24, r6
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    19d2:	c2 01       	movw	r24, r4
    19d4:	6f ef       	ldi	r22, 0xFF	; 255
    19d6:	7f e3       	ldi	r23, 0x3F	; 63
    19d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    19dc:	c1 01       	movw	r24, r2
    19de:	6f ef       	ldi	r22, 0xFF	; 255
    19e0:	7f e3       	ldi	r23, 0x3F	; 63
    19e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    19e6:	8e ec       	ldi	r24, 0xCE	; 206
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    19f2:	c6 01       	movw	r24, r12
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    19fc:	c4 01       	movw	r24, r8
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    1a06:	c8 01       	movw	r24, r16
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    1a10:	80 91 91 03 	lds	r24, 0x0391
    1a14:	88 23       	and	r24, r24
    1a16:	61 f2       	breq	.-104    	; 0x19b0 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    1a18:	88 e1       	ldi	r24, 0x18	; 24
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	80 93 60 00 	sts	0x0060, r24
    1a22:	10 92 60 00 	sts	0x0060, r1
    1a26:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    1a28:	80 91 8f 03 	lds	r24, 0x038F
    1a2c:	90 91 90 03 	lds	r25, 0x0390
    1a30:	2a a9       	sts	0x4a, r18
    1a32:	3b a9       	sts	0x4b, r19
    1a34:	28 17       	cp	r18, r24
    1a36:	39 07       	cpc	r19, r25
    1a38:	50 f0       	brcs	.+20     	; 0x1a4e <tune_filter+0x2f4>
    1a3a:	80 91 92 02 	lds	r24, 0x0292
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	31 f4       	brne	.+12     	; 0x1a4e <tune_filter+0x2f4>
    1a42:	88 a9       	sts	0x48, r24
    1a44:	99 a9       	sts	0x49, r25
    1a46:	80 95       	com	r24
    1a48:	90 95       	com	r25
    1a4a:	e8 22       	and	r14, r24
    1a4c:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    1a4e:	80 91 8f 03 	lds	r24, 0x038F
    1a52:	90 91 90 03 	lds	r25, 0x0390
    1a56:	ea a9       	sts	0x4a, r30
    1a58:	fb a9       	sts	0x4b, r31
    1a5a:	8e 17       	cp	r24, r30
    1a5c:	9f 07       	cpc	r25, r31
    1a5e:	21 f4       	brne	.+8      	; 0x1a68 <tune_filter+0x30e>
    1a60:	80 91 92 02 	lds	r24, 0x0292
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	71 f0       	breq	.+28     	; 0x1a84 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	80 93 92 02 	sts	0x0292, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1a6e:	2e a5       	lds	r18, 0x6e
    1a70:	3f a5       	lds	r19, 0x6f
    1a72:	21 50       	subi	r18, 0x01	; 1
    1a74:	30 40       	sbci	r19, 0x00	; 0
    1a76:	3f a7       	lds	r19, 0x7f
    1a78:	2e a7       	lds	r18, 0x7e
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	2f 3f       	cpi	r18, 0xFF	; 255
    1a7e:	38 07       	cpc	r19, r24
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <tune_filter+0x32a>
    1a82:	70 cf       	rjmp	.-288    	; 0x1964 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    1a84:	ee a9       	sts	0x4e, r30
    1a86:	ff a9       	sts	0x4f, r31
    1a88:	31 96       	adiw	r30, 0x01	; 1
    1a8a:	ff ab       	sts	0x5f, r31
    1a8c:	ee ab       	sts	0x5e, r30
    1a8e:	c7 01       	movw	r24, r14
    1a90:	80 96       	adiw	r24, 0x20	; 32
    1a92:	e8 ad       	sts	0x68, r30
    1a94:	f9 ad       	sts	0x69, r31
    1a96:	81 93       	st	Z+, r24
    1a98:	91 93       	st	Z+, r25
    1a9a:	f9 af       	sts	0x79, r31
    1a9c:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    1a9e:	ee e6       	ldi	r30, 0x6E	; 110
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	8d 7f       	andi	r24, 0xFD	; 253
    1aa6:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    1aa8:	14 bc       	out	0x24, r1	; 36
    1aaa:	2c a9       	sts	0x4c, r18
    1aac:	3d a9       	sts	0x4d, r19
    1aae:	2d 5f       	subi	r18, 0xFD	; 253
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	3d ab       	sts	0x5d, r19
    1ab4:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    1ab6:	8e a9       	sts	0x4e, r24
    1ab8:	9f a9       	sts	0x4f, r25
    1aba:	8f 30       	cpi	r24, 0x0F	; 15
    1abc:	91 05       	cpc	r25, r1
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <tune_filter+0x368>
    1ac0:	1d cf       	rjmp	.-454    	; 0x18fc <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    1ac2:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    1ac4:	e9 96       	adiw	r28, 0x39	; 57
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	ff 90       	pop	r15
    1ada:	ef 90       	pop	r14
    1adc:	df 90       	pop	r13
    1ade:	cf 90       	pop	r12
    1ae0:	bf 90       	pop	r11
    1ae2:	af 90       	pop	r10
    1ae4:	9f 90       	pop	r9
    1ae6:	8f 90       	pop	r8
    1ae8:	7f 90       	pop	r7
    1aea:	6f 90       	pop	r6
    1aec:	5f 90       	pop	r5
    1aee:	4f 90       	pop	r4
    1af0:	3f 90       	pop	r3
    1af2:	2f 90       	pop	r2
    1af4:	08 95       	ret

00001af6 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    1af6:	86 e2       	ldi	r24, 0x26	; 38
    1af8:	93 e0       	ldi	r25, 0x03	; 3
    1afa:	6e e0       	ldi	r22, 0x0E	; 14
    1afc:	77 e0       	ldi	r23, 0x07	; 7
    1afe:	40 e2       	ldi	r20, 0x20	; 32
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    1b06:	88 e6       	ldi	r24, 0x68	; 104
    1b08:	93 e0       	ldi	r25, 0x03	; 3
    1b0a:	60 e5       	ldi	r22, 0x50	; 80
    1b0c:	77 e0       	ldi	r23, 0x07	; 7
    1b0e:	42 e2       	ldi	r20, 0x22	; 34
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    1b16:	86 e4       	ldi	r24, 0x46	; 70
    1b18:	93 e0       	ldi	r25, 0x03	; 3
    1b1a:	6e e2       	ldi	r22, 0x2E	; 46
    1b1c:	77 e0       	ldi	r23, 0x07	; 7
    1b1e:	42 e2       	ldi	r20, 0x22	; 34
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__eeupd_block_m6450a>
	
	
}
    1b26:	08 95       	ret

00001b28 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    1b28:	84 e7       	ldi	r24, 0x74	; 116
    1b2a:	97 e0       	ldi	r25, 0x07	; 7
    1b2c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__eerd_word_m6450a>
    1b30:	90 93 8d 03 	sts	0x038D, r25
    1b34:	80 93 8c 03 	sts	0x038C, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    1b38:	82 e7       	ldi	r24, 0x72	; 114
    1b3a:	97 e0       	ldi	r25, 0x07	; 7
    1b3c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__eerd_word_m6450a>
    1b40:	90 93 8b 03 	sts	0x038B, r25
    1b44:	80 93 8a 03 	sts	0x038A, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    1b48:	88 e6       	ldi	r24, 0x68	; 104
    1b4a:	93 e0       	ldi	r25, 0x03	; 3
    1b4c:	60 e5       	ldi	r22, 0x50	; 80
    1b4e:	77 e0       	ldi	r23, 0x07	; 7
    1b50:	42 e2       	ldi	r20, 0x22	; 34
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    1b58:	86 e4       	ldi	r24, 0x46	; 70
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	6e e2       	ldi	r22, 0x2E	; 46
    1b5e:	77 e0       	ldi	r23, 0x07	; 7
    1b60:	42 e2       	ldi	r20, 0x22	; 34
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    1b68:	86 e2       	ldi	r24, 0x26	; 38
    1b6a:	93 e0       	ldi	r25, 0x03	; 3
    1b6c:	6e e0       	ldi	r22, 0x0E	; 14
    1b6e:	77 e0       	ldi	r23, 0x07	; 7
    1b70:	40 e2       	ldi	r20, 0x20	; 32
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    1b78:	08 95       	ret

00001b7a <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    1b7a:	98 2f       	mov	r25, r24
    1b7c:	96 95       	lsr	r25
    1b7e:	96 95       	lsr	r25
    1b80:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    1b82:	29 2f       	mov	r18, r25
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	f9 01       	movw	r30, r18
    1b88:	31 97       	sbiw	r30, 0x01	; 1
    1b8a:	ee 0f       	add	r30, r30
    1b8c:	ff 1f       	adc	r31, r31
    1b8e:	e6 0f       	add	r30, r22
    1b90:	f7 1f       	adc	r31, r23
    1b92:	01 90       	ld	r0, Z+
    1b94:	f0 81       	ld	r31, Z
    1b96:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    1b98:	22 0f       	add	r18, r18
    1b9a:	33 1f       	adc	r19, r19
    1b9c:	26 0f       	add	r18, r22
    1b9e:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    1ba0:	d9 01       	movw	r26, r18
    1ba2:	4d 91       	ld	r20, X+
    1ba4:	5c 91       	ld	r21, X
    1ba6:	11 97       	sbiw	r26, 0x01	; 1
    1ba8:	4e 1b       	sub	r20, r30
    1baa:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    1bac:	99 0f       	add	r25, r25
    1bae:	99 0f       	add	r25, r25
    1bb0:	99 0f       	add	r25, r25
    1bb2:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	48 9f       	mul	r20, r24
    1bb8:	90 01       	movw	r18, r0
    1bba:	49 9f       	mul	r20, r25
    1bbc:	30 0d       	add	r19, r0
    1bbe:	58 9f       	mul	r21, r24
    1bc0:	30 0d       	add	r19, r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	36 95       	lsr	r19
    1bc6:	27 95       	ror	r18
    1bc8:	36 95       	lsr	r19
    1bca:	27 95       	ror	r18
    1bcc:	36 95       	lsr	r19
    1bce:	27 95       	ror	r18
    1bd0:	e2 0f       	add	r30, r18
    1bd2:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    1bd4:	8e 2f       	mov	r24, r30
    1bd6:	9f 2f       	mov	r25, r31
    1bd8:	08 95       	ret

00001bda <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	a2 97       	sbiw	r28, 0x22	; 34
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    1bee:	de 01       	movw	r26, r28
    1bf0:	11 96       	adiw	r26, 0x01	; 1
    1bf2:	e0 e7       	ldi	r30, 0x70	; 112
    1bf4:	f2 e0       	ldi	r31, 0x02	; 2
    1bf6:	82 e2       	ldi	r24, 0x22	; 34
    1bf8:	01 90       	ld	r0, Z+
    1bfa:	0d 92       	st	X+, r0
    1bfc:	81 50       	subi	r24, 0x01	; 1
    1bfe:	e1 f7       	brne	.-8      	; 0x1bf8 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    1c00:	a8 e6       	ldi	r26, 0x68	; 104
    1c02:	b3 e0       	ldi	r27, 0x03	; 3
    1c04:	fe 01       	movw	r30, r28
    1c06:	31 96       	adiw	r30, 0x01	; 1
    1c08:	82 e2       	ldi	r24, 0x22	; 34
    1c0a:	01 90       	ld	r0, Z+
    1c0c:	0d 92       	st	X+, r0
    1c0e:	81 50       	subi	r24, 0x01	; 1
    1c10:	e1 f7       	brne	.-8      	; 0x1c0a <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    1c12:	a6 e4       	ldi	r26, 0x46	; 70
    1c14:	b3 e0       	ldi	r27, 0x03	; 3
    1c16:	fe 01       	movw	r30, r28
    1c18:	31 96       	adiw	r30, 0x01	; 1
    1c1a:	82 e2       	ldi	r24, 0x22	; 34
    1c1c:	01 90       	ld	r0, Z+
    1c1e:	0d 92       	st	X+, r0
    1c20:	81 50       	subi	r24, 0x01	; 1
    1c22:	e1 f7       	brne	.-8      	; 0x1c1c <set_one_volt_per_octave+0x42>
	
	
    1c24:	a2 96       	adiw	r28, 0x22	; 34
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    1c36:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    1c38:	80 91 98 03 	lds	r24, 0x0398
    1c3c:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    1c3e:	89 27       	eor	r24, r25
    1c40:	80 93 98 03 	sts	0x0398, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    1c44:	89 23       	and	r24, r25
    1c46:	08 95       	ret

00001c48 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1c48:	ed ed       	ldi	r30, 0xDD	; 221
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	90 81       	ld	r25, Z
    1c4e:	9f 7b       	andi	r25, 0xBF	; 191
    1c50:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	21 70       	andi	r18, 0x01	; 1
    1c58:	30 70       	andi	r19, 0x00	; 0
    1c5a:	22 0f       	add	r18, r18
    1c5c:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    1c5e:	68 2f       	mov	r22, r24
    1c60:	62 95       	swap	r22
    1c62:	66 95       	lsr	r22
    1c64:	67 70       	andi	r22, 0x07	; 7
    1c66:	67 95       	ror	r22
    1c68:	66 27       	eor	r22, r22
    1c6a:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1c6c:	26 2b       	or	r18, r22
    1c6e:	98 2f       	mov	r25, r24
    1c70:	96 95       	lsr	r25
    1c72:	96 95       	lsr	r25
    1c74:	91 70       	andi	r25, 0x01	; 1
    1c76:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    1c78:	68 2f       	mov	r22, r24
    1c7a:	66 1f       	adc	r22, r22
    1c7c:	66 27       	eor	r22, r22
    1c7e:	66 1f       	adc	r22, r22
    1c80:	66 0f       	add	r22, r22
    1c82:	66 0f       	add	r22, r22
    1c84:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1c86:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    1c88:	a8 2f       	mov	r26, r24
    1c8a:	a6 95       	lsr	r26
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	a1 70       	andi	r26, 0x01	; 1
    1c90:	b0 70       	andi	r27, 0x00	; 0
    1c92:	bd 01       	movw	r22, r26
    1c94:	66 0f       	add	r22, r22
    1c96:	77 1f       	adc	r23, r23
    1c98:	66 0f       	add	r22, r22
    1c9a:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1c9c:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    1c9e:	68 2f       	mov	r22, r24
    1ca0:	62 95       	swap	r22
    1ca2:	6f 70       	andi	r22, 0x0F	; 15
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	61 70       	andi	r22, 0x01	; 1
    1ca8:	70 70       	andi	r23, 0x00	; 0
    1caa:	ab 01       	movw	r20, r22
    1cac:	00 24       	eor	r0, r0
    1cae:	56 95       	lsr	r21
    1cb0:	47 95       	ror	r20
    1cb2:	07 94       	ror	r0
    1cb4:	56 95       	lsr	r21
    1cb6:	47 95       	ror	r20
    1cb8:	07 94       	ror	r0
    1cba:	54 2f       	mov	r21, r20
    1cbc:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1cbe:	62 2f       	mov	r22, r18
    1cc0:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	42 95       	swap	r20
    1cc6:	46 95       	lsr	r20
    1cc8:	46 95       	lsr	r20
    1cca:	43 70       	andi	r20, 0x03	; 3
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	41 70       	andi	r20, 0x01	; 1
    1cd0:	50 70       	andi	r21, 0x00	; 0
    1cd2:	9a 01       	movw	r18, r20
    1cd4:	22 0f       	add	r18, r18
    1cd6:	33 1f       	adc	r19, r19
    1cd8:	22 95       	swap	r18
    1cda:	32 95       	swap	r19
    1cdc:	30 7f       	andi	r19, 0xF0	; 240
    1cde:	32 27       	eor	r19, r18
    1ce0:	20 7f       	andi	r18, 0xF0	; 240
    1ce2:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1ce4:	46 2f       	mov	r20, r22
    1ce6:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    1ce8:	86 95       	lsr	r24
    1cea:	86 95       	lsr	r24
    1cec:	86 95       	lsr	r24
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	21 70       	andi	r18, 0x01	; 1
    1cf4:	30 70       	andi	r19, 0x00	; 0
    1cf6:	c9 01       	movw	r24, r18
    1cf8:	82 95       	swap	r24
    1cfa:	92 95       	swap	r25
    1cfc:	90 7f       	andi	r25, 0xF0	; 240
    1cfe:	98 27       	eor	r25, r24
    1d00:	80 7f       	andi	r24, 0xF0	; 240
    1d02:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1d04:	84 2b       	or	r24, r20
    1d06:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 64       	ori	r24, 0x40	; 64
    1d0c:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1d0e:	80 81       	ld	r24, Z
    1d10:	8f 7b       	andi	r24, 0xBF	; 191
    1d12:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1d14:	12 b8       	out	0x02, r1	; 2
	
	
    1d16:	08 95       	ret

00001d18 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1d18:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1d1a:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1d1c:	74 83       	std	Z+4, r23	; 0x04
    1d1e:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    1d20:	11 82       	std	Z+1, r1	; 0x01
    1d22:	10 82       	st	Z, r1
}
    1d24:	08 95       	ret

00001d26 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1d26:	1f 93       	push	r17
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	ec 01       	movw	r28, r24
    1d2e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1d30:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <store_and_clear_interrupt>
    1d34:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1d36:	39 81       	ldd	r19, Y+1	; 0x01
    1d38:	83 2f       	mov	r24, r19
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	6a 81       	ldd	r22, Y+2	; 0x02
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodhi4>
    1d46:	48 81       	ld	r20, Y
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	84 17       	cp	r24, r20
    1d4c:	95 07       	cpc	r25, r21
    1d4e:	29 f4       	brne	.+10     	; 0x1d5a <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    1d50:	82 2f       	mov	r24, r18
    1d52:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <restore_interrupt_setting>
      return false;
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	11 c0       	rjmp	.+34     	; 0x1d7c <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    1d5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d5e:	e3 0f       	add	r30, r19
    1d60:	f1 1d       	adc	r31, r1
    1d62:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	6a 81       	ldd	r22, Y+2	; 0x02
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodhi4>
    1d72:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1d74:	82 2f       	mov	r24, r18
    1d76:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <restore_interrupt_setting>
      return true;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	08 95       	ret

00001d84 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1d8a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1d8e:	29 81       	ldd	r18, Y+1	; 0x01
    1d90:	98 81       	ld	r25, Y
    1d92:	29 17       	cp	r18, r25
    1d94:	18 f0       	brcs	.+6      	; 0x1d9c <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1d96:	c2 2f       	mov	r28, r18
    1d98:	c9 1b       	sub	r28, r25
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    1d9c:	ca 81       	ldd	r28, Y+2	; 0x02
    1d9e:	c2 0f       	add	r28, r18
    1da0:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    1da2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <restore_interrupt_setting>
   return len;
}
    1da6:	8c 2f       	mov	r24, r28
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	08 95       	ret

00001dae <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1dae:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1db0:	20 81       	ld	r18, Z
    1db2:	86 2f       	mov	r24, r22
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	82 0f       	add	r24, r18
    1db8:	91 1d       	adc	r25, r1
    1dba:	62 81       	ldd	r22, Z+2	; 0x02
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodhi4>
    1dc2:	03 80       	ldd	r0, Z+3	; 0x03
    1dc4:	f4 81       	ldd	r31, Z+4	; 0x04
    1dc6:	e0 2d       	mov	r30, r0
    1dc8:	e8 0f       	add	r30, r24
    1dca:	f9 1f       	adc	r31, r25
}
    1dcc:	80 81       	ld	r24, Z
    1dce:	08 95       	ret

00001dd0 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	ec 01       	movw	r28, r24
    1dd8:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1dda:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <store_and_clear_interrupt>
    1dde:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1de0:	88 81       	ld	r24, Y
    1de2:	21 2f       	mov	r18, r17
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	28 0f       	add	r18, r24
    1de8:	31 1d       	adc	r19, r1
    1dea:	6a 81       	ldd	r22, Y+2	; 0x02
    1dec:	c9 01       	movw	r24, r18
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__divmodhi4>
    1df4:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1df6:	84 2f       	mov	r24, r20
    1df8:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <restore_interrupt_setting>
}
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	08 95       	ret

00001e04 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1e04:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1e06:	f8 94       	cli
   return sreg;
}
    1e08:	08 95       	ret

00001e0a <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1e0a:	8f bf       	out	0x3f, r24	; 63
}
    1e0c:	08 95       	ret

00001e0e <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1e0e:	88 1f       	adc	r24, r24
    1e10:	88 27       	eor	r24, r24
    1e12:	88 1f       	adc	r24, r24
    1e14:	08 95       	ret

00001e16 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1e16:	91 e0       	ldi	r25, 0x01	; 1
    1e18:	88 3f       	cpi	r24, 0xF8	; 248
    1e1a:	08 f4       	brcc	.+2      	; 0x1e1e <midi_is_realtime+0x8>
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
}
    1e1e:	89 2f       	mov	r24, r25
    1e20:	08 95       	ret

00001e22 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	20 7f       	andi	r18, 0xF0	; 240
    1e28:	30 70       	andi	r19, 0x00	; 0
    1e2a:	20 3c       	cpi	r18, 0xC0	; 192
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	e9 f1       	breq	.+122    	; 0x1eaa <midi_packet_length+0x88>
    1e30:	21 3c       	cpi	r18, 0xC1	; 193
    1e32:	31 05       	cpc	r19, r1
    1e34:	8c f4       	brge	.+34     	; 0x1e58 <midi_packet_length+0x36>
    1e36:	20 39       	cpi	r18, 0x90	; 144
    1e38:	31 05       	cpc	r19, r1
    1e3a:	e1 f0       	breq	.+56     	; 0x1e74 <midi_packet_length+0x52>
    1e3c:	21 39       	cpi	r18, 0x91	; 145
    1e3e:	31 05       	cpc	r19, r1
    1e40:	24 f4       	brge	.+8      	; 0x1e4a <midi_packet_length+0x28>
    1e42:	20 38       	cpi	r18, 0x80	; 128
    1e44:	31 05       	cpc	r19, r1
    1e46:	79 f5       	brne	.+94     	; 0x1ea6 <midi_packet_length+0x84>
    1e48:	15 c0       	rjmp	.+42     	; 0x1e74 <midi_packet_length+0x52>
    1e4a:	20 3a       	cpi	r18, 0xA0	; 160
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	91 f0       	breq	.+36     	; 0x1e74 <midi_packet_length+0x52>
    1e50:	20 3b       	cpi	r18, 0xB0	; 176
    1e52:	31 05       	cpc	r19, r1
    1e54:	41 f5       	brne	.+80     	; 0x1ea6 <midi_packet_length+0x84>
    1e56:	0e c0       	rjmp	.+28     	; 0x1e74 <midi_packet_length+0x52>
    1e58:	20 3e       	cpi	r18, 0xE0	; 224
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	59 f0       	breq	.+22     	; 0x1e74 <midi_packet_length+0x52>
    1e5e:	21 3e       	cpi	r18, 0xE1	; 225
    1e60:	31 05       	cpc	r19, r1
    1e62:	24 f4       	brge	.+8      	; 0x1e6c <midi_packet_length+0x4a>
    1e64:	20 3d       	cpi	r18, 0xD0	; 208
    1e66:	31 05       	cpc	r19, r1
    1e68:	f1 f4       	brne	.+60     	; 0x1ea6 <midi_packet_length+0x84>
    1e6a:	1f c0       	rjmp	.+62     	; 0x1eaa <midi_packet_length+0x88>
    1e6c:	20 3f       	cpi	r18, 0xF0	; 240
    1e6e:	31 05       	cpc	r19, r1
    1e70:	d1 f4       	brne	.+52     	; 0x1ea6 <midi_packet_length+0x84>
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1e74:	83 e0       	ldi	r24, 0x03	; 3
    1e76:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    1e78:	86 3f       	cpi	r24, 0xF6	; 246
    1e7a:	79 f0       	breq	.+30     	; 0x1e9a <midi_packet_length+0x78>
    1e7c:	87 3f       	cpi	r24, 0xF7	; 247
    1e7e:	38 f4       	brcc	.+14     	; 0x1e8e <midi_packet_length+0x6c>
    1e80:	82 3f       	cpi	r24, 0xF2	; 242
    1e82:	a9 f0       	breq	.+42     	; 0x1eae <midi_packet_length+0x8c>
    1e84:	83 3f       	cpi	r24, 0xF3	; 243
    1e86:	59 f0       	breq	.+22     	; 0x1e9e <midi_packet_length+0x7c>
    1e88:	81 3f       	cpi	r24, 0xF1	; 241
    1e8a:	59 f4       	brne	.+22     	; 0x1ea2 <midi_packet_length+0x80>
    1e8c:	08 c0       	rjmp	.+16     	; 0x1e9e <midi_packet_length+0x7c>
    1e8e:	88 3f       	cpi	r24, 0xF8	; 248
    1e90:	40 f0       	brcs	.+16     	; 0x1ea2 <midi_packet_length+0x80>
    1e92:	8d 3f       	cpi	r24, 0xFD	; 253
    1e94:	10 f0       	brcs	.+4      	; 0x1e9a <midi_packet_length+0x78>
    1e96:	8e 3f       	cpi	r24, 0xFE	; 254
    1e98:	20 f0       	brcs	.+8      	; 0x1ea2 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1eae:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1eb0:	08 95       	ret

00001eb2 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1eb2:	0f 93       	push	r16
    1eb4:	34 2f       	mov	r19, r20
    1eb6:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1eb8:	46 2f       	mov	r20, r22
    1eba:	4f 70       	andi	r20, 0x0F	; 15
    1ebc:	40 6b       	ori	r20, 0xB0	; 176
    1ebe:	23 2f       	mov	r18, r19
    1ec0:	2f 77       	andi	r18, 0x7F	; 127
    1ec2:	0f 77       	andi	r16, 0x7F	; 127
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	ed 91       	ld	r30, X+
    1ec8:	fc 91       	ld	r31, X
    1eca:	63 e0       	ldi	r22, 0x03	; 3
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1ed0:	0f 91       	pop	r16
    1ed2:	08 95       	ret

00001ed4 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1ed4:	0f 93       	push	r16
    1ed6:	34 2f       	mov	r19, r20
    1ed8:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1eda:	46 2f       	mov	r20, r22
    1edc:	4f 70       	andi	r20, 0x0F	; 15
    1ede:	40 69       	ori	r20, 0x90	; 144
    1ee0:	23 2f       	mov	r18, r19
    1ee2:	2f 77       	andi	r18, 0x7F	; 127
    1ee4:	0f 77       	andi	r16, 0x7F	; 127
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	ed 91       	ld	r30, X+
    1eea:	fc 91       	ld	r31, X
    1eec:	63 e0       	ldi	r22, 0x03	; 3
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1ef2:	0f 91       	pop	r16
    1ef4:	08 95       	ret

00001ef6 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1ef6:	0f 93       	push	r16
    1ef8:	34 2f       	mov	r19, r20
    1efa:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1efc:	46 2f       	mov	r20, r22
    1efe:	4f 70       	andi	r20, 0x0F	; 15
    1f00:	40 68       	ori	r20, 0x80	; 128
    1f02:	23 2f       	mov	r18, r19
    1f04:	2f 77       	andi	r18, 0x7F	; 127
    1f06:	0f 77       	andi	r16, 0x7F	; 127
    1f08:	dc 01       	movw	r26, r24
    1f0a:	ed 91       	ld	r30, X+
    1f0c:	fc 91       	ld	r31, X
    1f0e:	63 e0       	ldi	r22, 0x03	; 3
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1f14:	0f 91       	pop	r16
    1f16:	08 95       	ret

00001f18 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1f18:	0f 93       	push	r16
    1f1a:	34 2f       	mov	r19, r20
    1f1c:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    1f1e:	46 2f       	mov	r20, r22
    1f20:	4f 70       	andi	r20, 0x0F	; 15
    1f22:	40 6a       	ori	r20, 0xA0	; 160
    1f24:	23 2f       	mov	r18, r19
    1f26:	2f 77       	andi	r18, 0x7F	; 127
    1f28:	0f 77       	andi	r16, 0x7F	; 127
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	ed 91       	ld	r30, X+
    1f2e:	fc 91       	ld	r31, X
    1f30:	63 e0       	ldi	r22, 0x03	; 3
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    1f36:	0f 91       	pop	r16
    1f38:	08 95       	ret

00001f3a <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1f3e:	20 e2       	ldi	r18, 0x20	; 32
    1f40:	40 30       	cpi	r20, 0x00	; 0
    1f42:	52 07       	cpc	r21, r18
    1f44:	44 f4       	brge	.+16     	; 0x1f56 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    1f46:	a0 ee       	ldi	r26, 0xE0	; 224
    1f48:	40 30       	cpi	r20, 0x00	; 0
    1f4a:	5a 07       	cpc	r21, r26
    1f4c:	3c f0       	brlt	.+14     	; 0x1f5c <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1f4e:	8a 01       	movw	r16, r20
    1f50:	00 50       	subi	r16, 0x00	; 0
    1f52:	10 4e       	sbci	r17, 0xE0	; 224
    1f54:	05 c0       	rjmp	.+10     	; 0x1f60 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1f56:	0f ef       	ldi	r16, 0xFF	; 255
    1f58:	1f e3       	ldi	r17, 0x3F	; 63
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    1f5c:	00 e0       	ldi	r16, 0x00	; 0
    1f5e:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1f60:	46 2f       	mov	r20, r22
    1f62:	4f 70       	andi	r20, 0x0F	; 15
    1f64:	40 6e       	ori	r20, 0xE0	; 224
    1f66:	20 2f       	mov	r18, r16
    1f68:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1f6a:	00 0f       	add	r16, r16
    1f6c:	01 2f       	mov	r16, r17
    1f6e:	00 1f       	adc	r16, r16
    1f70:	11 0b       	sbc	r17, r17
    1f72:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1f74:	0f 77       	andi	r16, 0x7F	; 127
    1f76:	dc 01       	movw	r26, r24
    1f78:	ed 91       	ld	r30, X+
    1f7a:	fc 91       	ld	r31, X
    1f7c:	63 e0       	ldi	r22, 0x03	; 3
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	08 95       	ret

00001f88 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1f88:	0f 93       	push	r16
    1f8a:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1f8c:	46 2f       	mov	r20, r22
    1f8e:	4f 70       	andi	r20, 0x0F	; 15
    1f90:	40 6c       	ori	r20, 0xC0	; 192
    1f92:	2f 77       	andi	r18, 0x7F	; 127
    1f94:	dc 01       	movw	r26, r24
    1f96:	ed 91       	ld	r30, X+
    1f98:	fc 91       	ld	r31, X
    1f9a:	62 e0       	ldi	r22, 0x02	; 2
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	00 e0       	ldi	r16, 0x00	; 0
    1fa0:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1fa2:	0f 91       	pop	r16
    1fa4:	08 95       	ret

00001fa6 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1fa6:	0f 93       	push	r16
    1fa8:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1faa:	46 2f       	mov	r20, r22
    1fac:	4f 70       	andi	r20, 0x0F	; 15
    1fae:	40 6d       	ori	r20, 0xD0	; 208
    1fb0:	2f 77       	andi	r18, 0x7F	; 127
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	ed 91       	ld	r30, X+
    1fb6:	fc 91       	ld	r31, X
    1fb8:	62 e0       	ldi	r22, 0x02	; 2
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	00 e0       	ldi	r16, 0x00	; 0
    1fbe:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1fc0:	0f 91       	pop	r16
    1fc2:	08 95       	ret

00001fc4 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1fc4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	ed 91       	ld	r30, X+
    1fca:	fc 91       	ld	r31, X
    1fcc:	61 e0       	ldi	r22, 0x01	; 1
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	48 ef       	ldi	r20, 0xF8	; 248
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	00 e0       	ldi	r16, 0x00	; 0
    1fd6:	09 95       	icall
}
    1fd8:	0f 91       	pop	r16
    1fda:	08 95       	ret

00001fdc <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1fdc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1fde:	dc 01       	movw	r26, r24
    1fe0:	ed 91       	ld	r30, X+
    1fe2:	fc 91       	ld	r31, X
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	70 e0       	ldi	r23, 0x00	; 0
    1fe8:	49 ef       	ldi	r20, 0xF9	; 249
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	00 e0       	ldi	r16, 0x00	; 0
    1fee:	09 95       	icall
}
    1ff0:	0f 91       	pop	r16
    1ff2:	08 95       	ret

00001ff4 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1ff4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	ed 91       	ld	r30, X+
    1ffa:	fc 91       	ld	r31, X
    1ffc:	61 e0       	ldi	r22, 0x01	; 1
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	4a ef       	ldi	r20, 0xFA	; 250
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	00 e0       	ldi	r16, 0x00	; 0
    2006:	09 95       	icall
}
    2008:	0f 91       	pop	r16
    200a:	08 95       	ret

0000200c <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    200c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    200e:	dc 01       	movw	r26, r24
    2010:	ed 91       	ld	r30, X+
    2012:	fc 91       	ld	r31, X
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	4b ef       	ldi	r20, 0xFB	; 251
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	00 e0       	ldi	r16, 0x00	; 0
    201e:	09 95       	icall
}
    2020:	0f 91       	pop	r16
    2022:	08 95       	ret

00002024 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    2024:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    2026:	dc 01       	movw	r26, r24
    2028:	ed 91       	ld	r30, X+
    202a:	fc 91       	ld	r31, X
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	4c ef       	ldi	r20, 0xFC	; 252
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	00 e0       	ldi	r16, 0x00	; 0
    2036:	09 95       	icall
}
    2038:	0f 91       	pop	r16
    203a:	08 95       	ret

0000203c <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    203c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    203e:	dc 01       	movw	r26, r24
    2040:	ed 91       	ld	r30, X+
    2042:	fc 91       	ld	r31, X
    2044:	61 e0       	ldi	r22, 0x01	; 1
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	4e ef       	ldi	r20, 0xFE	; 254
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	00 e0       	ldi	r16, 0x00	; 0
    204e:	09 95       	icall
}
    2050:	0f 91       	pop	r16
    2052:	08 95       	ret

00002054 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2054:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2056:	dc 01       	movw	r26, r24
    2058:	ed 91       	ld	r30, X+
    205a:	fc 91       	ld	r31, X
    205c:	61 e0       	ldi	r22, 0x01	; 1
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	4f ef       	ldi	r20, 0xFF	; 255
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	00 e0       	ldi	r16, 0x00	; 0
    2066:	09 95       	icall
}
    2068:	0f 91       	pop	r16
    206a:	08 95       	ret

0000206c <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    206c:	0f 93       	push	r16
   device->send_func(device, 2,
    206e:	26 2f       	mov	r18, r22
    2070:	2f 77       	andi	r18, 0x7F	; 127
    2072:	dc 01       	movw	r26, r24
    2074:	ed 91       	ld	r30, X+
    2076:	fc 91       	ld	r31, X
    2078:	62 e0       	ldi	r22, 0x02	; 2
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	41 ef       	ldi	r20, 0xF1	; 241
    207e:	00 e0       	ldi	r16, 0x00	; 0
    2080:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2082:	0f 91       	pop	r16
    2084:	08 95       	ret

00002086 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
   device->send_func(device, 3,
    208a:	26 2f       	mov	r18, r22
    208c:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    208e:	8b 01       	movw	r16, r22
    2090:	00 0f       	add	r16, r16
    2092:	01 2f       	mov	r16, r17
    2094:	00 1f       	adc	r16, r16
    2096:	11 0b       	sbc	r17, r17
    2098:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    209a:	0f 77       	andi	r16, 0x7F	; 127
    209c:	dc 01       	movw	r26, r24
    209e:	ed 91       	ld	r30, X+
    20a0:	fc 91       	ld	r31, X
    20a2:	63 e0       	ldi	r22, 0x03	; 3
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	42 ef       	ldi	r20, 0xF2	; 242
    20a8:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	08 95       	ret

000020b0 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    20b0:	0f 93       	push	r16
   device->send_func(device, 2,
    20b2:	26 2f       	mov	r18, r22
    20b4:	2f 77       	andi	r18, 0x7F	; 127
    20b6:	dc 01       	movw	r26, r24
    20b8:	ed 91       	ld	r30, X+
    20ba:	fc 91       	ld	r31, X
    20bc:	62 e0       	ldi	r22, 0x02	; 2
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	43 ef       	ldi	r20, 0xF3	; 243
    20c2:	00 e0       	ldi	r16, 0x00	; 0
    20c4:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    20c6:	0f 91       	pop	r16
    20c8:	08 95       	ret

000020ca <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    20ca:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    20cc:	dc 01       	movw	r26, r24
    20ce:	ed 91       	ld	r30, X+
    20d0:	fc 91       	ld	r31, X
    20d2:	61 e0       	ldi	r22, 0x01	; 1
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	46 ef       	ldi	r20, 0xF6	; 246
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	00 e0       	ldi	r16, 0x00	; 0
    20dc:	09 95       	icall
}
    20de:	0f 91       	pop	r16
    20e0:	08 95       	ret

000020e2 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    20e2:	0f 93       	push	r16
    20e4:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    20e6:	dc 01       	movw	r26, r24
    20e8:	ed 91       	ld	r30, X+
    20ea:	fc 91       	ld	r31, X
    20ec:	61 e0       	ldi	r22, 0x01	; 1
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	00 e0       	ldi	r16, 0x00	; 0
    20f4:	09 95       	icall
}
    20f6:	0f 91       	pop	r16
    20f8:	08 95       	ret

000020fa <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    20fa:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    20fc:	dc 01       	movw	r26, r24
    20fe:	ed 91       	ld	r30, X+
    2100:	fc 91       	ld	r31, X
    2102:	09 95       	icall
}
    2104:	0f 91       	pop	r16
    2106:	08 95       	ret

00002108 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2108:	6f 92       	push	r6
    210a:	7f 92       	push	r7
    210c:	8f 92       	push	r8
    210e:	9f 92       	push	r9
    2110:	af 92       	push	r10
    2112:	bf 92       	push	r11
    2114:	cf 92       	push	r12
    2116:	df 92       	push	r13
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	00 d0       	rcall	.+0      	; 0x2126 <midi_send_array+0x1e>
    2126:	0f 92       	push	r0
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	4c 01       	movw	r8, r24
    212e:	6b 01       	movw	r12, r22
    2130:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2132:	61 15       	cp	r22, r1
    2134:	71 05       	cpc	r23, r1
    2136:	41 f1       	breq	.+80     	; 0x2188 <midi_send_array+0x80>
    2138:	ee 24       	eor	r14, r14
    213a:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    213c:	0f 2e       	mov	r0, r31
    213e:	f3 e0       	ldi	r31, 0x03	; 3
    2140:	6f 2e       	mov	r6, r31
    2142:	77 24       	eor	r7, r7
    2144:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2146:	19 82       	std	Y+1, r1	; 0x01
    2148:	1a 82       	std	Y+2, r1	; 0x02
    214a:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    214c:	86 01       	movw	r16, r12
    214e:	0e 19       	sub	r16, r14
    2150:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2152:	04 30       	cpi	r16, 0x04	; 4
    2154:	11 05       	cpc	r17, r1
    2156:	08 f0       	brcs	.+2      	; 0x215a <midi_send_array+0x52>
    2158:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    215a:	b5 01       	movw	r22, r10
    215c:	6e 0d       	add	r22, r14
    215e:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2160:	ce 01       	movw	r24, r28
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	40 2f       	mov	r20, r16
    2166:	51 2f       	mov	r21, r17
    2168:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    216c:	c4 01       	movw	r24, r8
    216e:	b8 01       	movw	r22, r16
    2170:	49 81       	ldd	r20, Y+1	; 0x01
    2172:	2a 81       	ldd	r18, Y+2	; 0x02
    2174:	0b 81       	ldd	r16, Y+3	; 0x03
    2176:	0e 94 7d 10 	call	0x20fa	; 0x20fa <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	e8 0e       	add	r14, r24
    2180:	f9 1e       	adc	r15, r25
    2182:	ec 14       	cp	r14, r12
    2184:	fd 04       	cpc	r15, r13
    2186:	f8 f2       	brcs	.-66     	; 0x2146 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	1f 91       	pop	r17
    2194:	0f 91       	pop	r16
    2196:	ff 90       	pop	r15
    2198:	ef 90       	pop	r14
    219a:	df 90       	pop	r13
    219c:	cf 90       	pop	r12
    219e:	bf 90       	pop	r11
    21a0:	af 90       	pop	r10
    21a2:	9f 90       	pop	r9
    21a4:	8f 90       	pop	r8
    21a6:	7f 90       	pop	r7
    21a8:	6f 90       	pop	r6
    21aa:	08 95       	ret

000021ac <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    21ac:	fc 01       	movw	r30, r24
    21ae:	73 83       	std	Z+3, r23	; 0x03
    21b0:	62 83       	std	Z+2, r22	; 0x02
}
    21b2:	08 95       	ret

000021b4 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    21b4:	fc 01       	movw	r30, r24
    21b6:	75 83       	std	Z+5, r23	; 0x05
    21b8:	64 83       	std	Z+4, r22	; 0x04
}
    21ba:	08 95       	ret

000021bc <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    21bc:	fc 01       	movw	r30, r24
    21be:	77 83       	std	Z+7, r23	; 0x07
    21c0:	66 83       	std	Z+6, r22	; 0x06
}
    21c2:	08 95       	ret

000021c4 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    21c4:	fc 01       	movw	r30, r24
    21c6:	71 87       	std	Z+9, r23	; 0x09
    21c8:	60 87       	std	Z+8, r22	; 0x08
}
    21ca:	08 95       	ret

000021cc <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    21cc:	fc 01       	movw	r30, r24
    21ce:	73 87       	std	Z+11, r23	; 0x0b
    21d0:	62 87       	std	Z+10, r22	; 0x0a
}
    21d2:	08 95       	ret

000021d4 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    21d4:	fc 01       	movw	r30, r24
    21d6:	75 87       	std	Z+13, r23	; 0x0d
    21d8:	64 87       	std	Z+12, r22	; 0x0c
}
    21da:	08 95       	ret

000021dc <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    21dc:	fc 01       	movw	r30, r24
    21de:	77 87       	std	Z+15, r23	; 0x0f
    21e0:	66 87       	std	Z+14, r22	; 0x0e
}
    21e2:	08 95       	ret

000021e4 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    21e4:	fc 01       	movw	r30, r24
    21e6:	71 8b       	std	Z+17, r23	; 0x11
    21e8:	60 8b       	std	Z+16, r22	; 0x10
}
    21ea:	08 95       	ret

000021ec <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    21ec:	fc 01       	movw	r30, r24
    21ee:	73 8b       	std	Z+19, r23	; 0x13
    21f0:	62 8b       	std	Z+18, r22	; 0x12
}
    21f2:	08 95       	ret

000021f4 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    21f4:	fc 01       	movw	r30, r24
    21f6:	75 8b       	std	Z+21, r23	; 0x15
    21f8:	64 8b       	std	Z+20, r22	; 0x14
}
    21fa:	08 95       	ret

000021fc <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    21fc:	fc 01       	movw	r30, r24
    21fe:	77 8b       	std	Z+23, r23	; 0x17
    2200:	66 8b       	std	Z+22, r22	; 0x16
}
    2202:	08 95       	ret

00002204 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2204:	fc 01       	movw	r30, r24
    2206:	71 8f       	std	Z+25, r23	; 0x19
    2208:	60 8f       	std	Z+24, r22	; 0x18
}
    220a:	08 95       	ret

0000220c <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    220c:	fc 01       	movw	r30, r24
    220e:	73 8f       	std	Z+27, r23	; 0x1b
    2210:	62 8f       	std	Z+26, r22	; 0x1a
}
    2212:	08 95       	ret

00002214 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2214:	fc 01       	movw	r30, r24
    2216:	75 8f       	std	Z+29, r23	; 0x1d
    2218:	64 8f       	std	Z+28, r22	; 0x1c
}
    221a:	08 95       	ret

0000221c <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    221c:	fc 01       	movw	r30, r24
    221e:	77 8f       	std	Z+31, r23	; 0x1f
    2220:	66 8f       	std	Z+30, r22	; 0x1e
}
    2222:	08 95       	ret

00002224 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    222a:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    222c:	1f a2       	lds	r17, 0x9f
    222e:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2230:	bc 01       	movw	r22, r24
    2232:	68 5d       	subi	r22, 0xD8	; 216
    2234:	7f 4f       	sbci	r23, 0xFF	; 255
    2236:	88 51       	subi	r24, 0x18	; 24
    2238:	9f 4f       	sbci	r25, 0xFF	; 255
    223a:	40 ec       	ldi	r20, 0xC0	; 192
    223c:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2240:	1b 82       	std	Y+3, r1	; 0x03
    2242:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2244:	1d 82       	std	Y+5, r1	; 0x05
    2246:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2248:	1f 82       	std	Y+7, r1	; 0x07
    224a:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    224c:	19 86       	std	Y+9, r1	; 0x09
    224e:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2250:	1b 86       	std	Y+11, r1	; 0x0b
    2252:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2254:	1d 86       	std	Y+13, r1	; 0x0d
    2256:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2258:	1f 86       	std	Y+15, r1	; 0x0f
    225a:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    225c:	19 8a       	std	Y+17, r1	; 0x11
    225e:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2260:	1b 8a       	std	Y+19, r1	; 0x13
    2262:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2264:	1d 8a       	std	Y+21, r1	; 0x15
    2266:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2268:	1f 8a       	std	Y+23, r1	; 0x17
    226a:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    226c:	19 8e       	std	Y+25, r1	; 0x19
    226e:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2270:	1b 8e       	std	Y+27, r1	; 0x1b
    2272:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2274:	1d 8e       	std	Y+29, r1	; 0x1d
    2276:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2278:	1f 8e       	std	Y+31, r1	; 0x1f
    227a:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    227c:	19 a2       	lds	r17, 0x99
    227e:	18 a2       	lds	r17, 0x98
}
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	08 95       	ret

00002286 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2286:	ef 92       	push	r14
    2288:	ff 92       	push	r15
    228a:	0f 93       	push	r16
    228c:	1f 93       	push	r17
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2294:	66 23       	and	r22, r22
    2296:	99 f0       	breq	.+38     	; 0x22be <midi_device_input+0x38>
    2298:	04 2f       	mov	r16, r20
    229a:	15 2f       	mov	r17, r21
    229c:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    229e:	0f 2e       	mov	r0, r31
    22a0:	f8 ee       	ldi	r31, 0xE8	; 232
    22a2:	ef 2e       	mov	r14, r31
    22a4:	ff 24       	eor	r15, r15
    22a6:	f0 2d       	mov	r31, r0
    22a8:	e8 0e       	add	r14, r24
    22aa:	f9 1e       	adc	r15, r25
    22ac:	f8 01       	movw	r30, r16
    22ae:	61 91       	ld	r22, Z+
    22b0:	8f 01       	movw	r16, r30
    22b2:	c7 01       	movw	r24, r14
    22b4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    22b8:	cf 5f       	subi	r28, 0xFF	; 255
    22ba:	cd 17       	cp	r28, r29
    22bc:	b9 f7       	brne	.-18     	; 0x22ac <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	1f 91       	pop	r17
    22c4:	0f 91       	pop	r16
    22c6:	ff 90       	pop	r15
    22c8:	ef 90       	pop	r14
    22ca:	08 95       	ret

000022cc <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    22cc:	fc 01       	movw	r30, r24
    22ce:	71 83       	std	Z+1, r23	; 0x01
    22d0:	60 83       	st	Z, r22
}
    22d2:	08 95       	ret

000022d4 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    22d4:	fc 01       	movw	r30, r24
    22d6:	71 a3       	lds	r23, 0x51
    22d8:	60 a3       	lds	r22, 0x50
}
    22da:	08 95       	ret

000022dc <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    22dc:	af 92       	push	r10
    22de:	bf 92       	push	r11
    22e0:	cf 92       	push	r12
    22e2:	df 92       	push	r13
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <midi_input_callbacks+0x16>
    22f2:	0f 92       	push	r0
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	6c 01       	movw	r12, r24
    22fa:	5b 01       	movw	r10, r22
    22fc:	f4 2e       	mov	r15, r20
    22fe:	e2 2e       	mov	r14, r18
    2300:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2302:	dc 01       	movw	r26, r24
    2304:	95 96       	adiw	r26, 0x25	; 37
    2306:	8c 91       	ld	r24, X
    2308:	95 97       	sbiw	r26, 0x25	; 37
    230a:	84 30       	cpi	r24, 0x04	; 4
    230c:	e9 f4       	brne	.+58     	; 0x2348 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    230e:	5a 96       	adiw	r26, 0x1a	; 26
    2310:	ed 91       	ld	r30, X+
    2312:	fc 91       	ld	r31, X
    2314:	5b 97       	sbiw	r26, 0x1b	; 27
    2316:	30 97       	sbiw	r30, 0x00	; 0
    2318:	09 f4       	brne	.+2      	; 0x231c <midi_input_callbacks+0x40>
    231a:	ee c0       	rjmp	.+476    	; 0x24f8 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    231c:	cb 01       	movw	r24, r22
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	63 e0       	ldi	r22, 0x03	; 3
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	0e 94 66 15 	call	0x2acc	; 0x2acc <__udivmodhi4>
    2328:	cb 01       	movw	r24, r22
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	68 0f       	add	r22, r24
    2330:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2332:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2334:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    2336:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2338:	4a 2d       	mov	r20, r10
    233a:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    233c:	c6 01       	movw	r24, r12
    233e:	9e 01       	movw	r18, r28
    2340:	2f 5f       	subi	r18, 0xFF	; 255
    2342:	3f 4f       	sbci	r19, 0xFF	; 255
    2344:	09 95       	icall
    2346:	c8 c0       	rjmp	.+400    	; 0x24d8 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    2348:	62 30       	cpi	r22, 0x02	; 2
    234a:	71 05       	cpc	r23, r1
    234c:	09 f4       	brne	.+2      	; 0x2350 <midi_input_callbacks+0x74>
    234e:	5f c0       	rjmp	.+190    	; 0x240e <midi_input_callbacks+0x132>
    2350:	63 30       	cpi	r22, 0x03	; 3
    2352:	71 05       	cpc	r23, r1
    2354:	29 f0       	breq	.+10     	; 0x2360 <midi_input_callbacks+0x84>
    2356:	61 30       	cpi	r22, 0x01	; 1
    2358:	71 05       	cpc	r23, r1
    235a:	09 f0       	breq	.+2      	; 0x235e <midi_input_callbacks+0x82>
    235c:	b3 c0       	rjmp	.+358    	; 0x24c4 <midi_input_callbacks+0x1e8>
    235e:	99 c0       	rjmp	.+306    	; 0x2492 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2360:	84 2f       	mov	r24, r20
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	80 7f       	andi	r24, 0xF0	; 240
    2366:	90 70       	andi	r25, 0x00	; 0
    2368:	80 3a       	cpi	r24, 0xA0	; 160
    236a:	91 05       	cpc	r25, r1
    236c:	29 f1       	breq	.+74     	; 0x23b8 <midi_input_callbacks+0xdc>
    236e:	81 3a       	cpi	r24, 0xA1	; 161
    2370:	91 05       	cpc	r25, r1
    2372:	3c f4       	brge	.+14     	; 0x2382 <midi_input_callbacks+0xa6>
    2374:	80 38       	cpi	r24, 0x80	; 128
    2376:	91 05       	cpc	r25, r1
    2378:	c9 f0       	breq	.+50     	; 0x23ac <midi_input_callbacks+0xd0>
    237a:	80 39       	cpi	r24, 0x90	; 144
    237c:	91 05       	cpc	r25, r1
    237e:	91 f5       	brne	.+100    	; 0x23e4 <midi_input_callbacks+0x108>
    2380:	0f c0       	rjmp	.+30     	; 0x23a0 <midi_input_callbacks+0xc4>
    2382:	80 3e       	cpi	r24, 0xE0	; 224
    2384:	91 05       	cpc	r25, r1
    2386:	f1 f0       	breq	.+60     	; 0x23c4 <midi_input_callbacks+0xe8>
    2388:	80 3f       	cpi	r24, 0xF0	; 240
    238a:	91 05       	cpc	r25, r1
    238c:	09 f1       	breq	.+66     	; 0x23d0 <midi_input_callbacks+0xf4>
    238e:	80 3b       	cpi	r24, 0xB0	; 176
    2390:	91 05       	cpc	r25, r1
    2392:	41 f5       	brne	.+80     	; 0x23e4 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2394:	d6 01       	movw	r26, r12
    2396:	12 96       	adiw	r26, 0x02	; 2
    2398:	ed 91       	ld	r30, X+
    239a:	fc 91       	ld	r31, X
    239c:	13 97       	sbiw	r26, 0x03	; 3
              break;
    239e:	24 c0       	rjmp	.+72     	; 0x23e8 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    23a0:	d6 01       	movw	r26, r12
    23a2:	14 96       	adiw	r26, 0x04	; 4
    23a4:	ed 91       	ld	r30, X+
    23a6:	fc 91       	ld	r31, X
    23a8:	15 97       	sbiw	r26, 0x05	; 5
              break;
    23aa:	1e c0       	rjmp	.+60     	; 0x23e8 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    23ac:	d6 01       	movw	r26, r12
    23ae:	16 96       	adiw	r26, 0x06	; 6
    23b0:	ed 91       	ld	r30, X+
    23b2:	fc 91       	ld	r31, X
    23b4:	17 97       	sbiw	r26, 0x07	; 7
              break;
    23b6:	18 c0       	rjmp	.+48     	; 0x23e8 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    23b8:	d6 01       	movw	r26, r12
    23ba:	18 96       	adiw	r26, 0x08	; 8
    23bc:	ed 91       	ld	r30, X+
    23be:	fc 91       	ld	r31, X
    23c0:	19 97       	sbiw	r26, 0x09	; 9
              break;
    23c2:	12 c0       	rjmp	.+36     	; 0x23e8 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    23c4:	d6 01       	movw	r26, r12
    23c6:	1a 96       	adiw	r26, 0x0a	; 10
    23c8:	ed 91       	ld	r30, X+
    23ca:	fc 91       	ld	r31, X
    23cc:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    23ce:	0c c0       	rjmp	.+24     	; 0x23e8 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    23d0:	b2 ef       	ldi	r27, 0xF2	; 242
    23d2:	4b 17       	cp	r20, r27
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <midi_input_callbacks+0xfc>
    23d6:	90 c0       	rjmp	.+288    	; 0x24f8 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    23d8:	d6 01       	movw	r26, r12
    23da:	1c 96       	adiw	r26, 0x0c	; 12
    23dc:	ed 91       	ld	r30, X+
    23de:	fc 91       	ld	r31, X
    23e0:	1d 97       	sbiw	r26, 0x0d	; 13
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    23e4:	e0 e0       	ldi	r30, 0x00	; 0
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    23e8:	30 97       	sbiw	r30, 0x00	; 0
    23ea:	09 f4       	brne	.+2      	; 0x23ee <midi_input_callbacks+0x112>
    23ec:	85 c0       	rjmp	.+266    	; 0x24f8 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    23ee:	b2 ef       	ldi	r27, 0xF2	; 242
    23f0:	fb 16       	cp	r15, r27
    23f2:	31 f4       	brne	.+12     	; 0x2400 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    23f4:	c6 01       	movw	r24, r12
    23f6:	62 ef       	ldi	r22, 0xF2	; 242
    23f8:	4e 2d       	mov	r20, r14
    23fa:	21 2f       	mov	r18, r17
    23fc:	09 95       	icall
    23fe:	6c c0       	rjmp	.+216    	; 0x24d8 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    2400:	6f 2d       	mov	r22, r15
    2402:	6f 70       	andi	r22, 0x0F	; 15
    2404:	c6 01       	movw	r24, r12
    2406:	4e 2d       	mov	r20, r14
    2408:	21 2f       	mov	r18, r17
    240a:	09 95       	icall
    240c:	65 c0       	rjmp	.+202    	; 0x24d8 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    240e:	84 2f       	mov	r24, r20
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	80 7f       	andi	r24, 0xF0	; 240
    2414:	90 70       	andi	r25, 0x00	; 0
    2416:	80 3d       	cpi	r24, 0xD0	; 208
    2418:	91 05       	cpc	r25, r1
    241a:	61 f0       	breq	.+24     	; 0x2434 <midi_input_callbacks+0x158>
    241c:	80 3f       	cpi	r24, 0xF0	; 240
    241e:	91 05       	cpc	r25, r1
    2420:	79 f0       	breq	.+30     	; 0x2440 <midi_input_callbacks+0x164>
    2422:	80 3c       	cpi	r24, 0xC0	; 192
    2424:	91 05       	cpc	r25, r1
    2426:	f9 f4       	brne	.+62     	; 0x2466 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    2428:	d6 01       	movw	r26, r12
    242a:	1e 96       	adiw	r26, 0x0e	; 14
    242c:	ed 91       	ld	r30, X+
    242e:	fc 91       	ld	r31, X
    2430:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2432:	1b c0       	rjmp	.+54     	; 0x246a <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2434:	d6 01       	movw	r26, r12
    2436:	50 96       	adiw	r26, 0x10	; 16
    2438:	ed 91       	ld	r30, X+
    243a:	fc 91       	ld	r31, X
    243c:	51 97       	sbiw	r26, 0x11	; 17
              break;
    243e:	15 c0       	rjmp	.+42     	; 0x246a <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2440:	b3 ef       	ldi	r27, 0xF3	; 243
    2442:	4b 17       	cp	r20, r27
    2444:	31 f4       	brne	.+12     	; 0x2452 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    2446:	d6 01       	movw	r26, r12
    2448:	52 96       	adiw	r26, 0x12	; 18
    244a:	ed 91       	ld	r30, X+
    244c:	fc 91       	ld	r31, X
    244e:	53 97       	sbiw	r26, 0x13	; 19
    2450:	0c c0       	rjmp	.+24     	; 0x246a <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2452:	b1 ef       	ldi	r27, 0xF1	; 241
    2454:	4b 17       	cp	r20, r27
    2456:	09 f0       	breq	.+2      	; 0x245a <midi_input_callbacks+0x17e>
    2458:	4f c0       	rjmp	.+158    	; 0x24f8 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    245a:	d6 01       	movw	r26, r12
    245c:	54 96       	adiw	r26, 0x14	; 20
    245e:	ed 91       	ld	r30, X+
    2460:	fc 91       	ld	r31, X
    2462:	55 97       	sbiw	r26, 0x15	; 21
    2464:	02 c0       	rjmp	.+4      	; 0x246a <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    2466:	e0 e0       	ldi	r30, 0x00	; 0
    2468:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    246a:	30 97       	sbiw	r30, 0x00	; 0
    246c:	09 f4       	brne	.+2      	; 0x2470 <midi_input_callbacks+0x194>
    246e:	44 c0       	rjmp	.+136    	; 0x24f8 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2470:	b3 ef       	ldi	r27, 0xF3	; 243
    2472:	fb 16       	cp	r15, r27
    2474:	19 f0       	breq	.+6      	; 0x247c <midi_input_callbacks+0x1a0>
    2476:	81 ef       	ldi	r24, 0xF1	; 241
    2478:	f8 16       	cp	r15, r24
    247a:	29 f4       	brne	.+10     	; 0x2486 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    247c:	c6 01       	movw	r24, r12
    247e:	6f 2d       	mov	r22, r15
    2480:	4e 2d       	mov	r20, r14
    2482:	09 95       	icall
    2484:	29 c0       	rjmp	.+82     	; 0x24d8 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    2486:	6f 2d       	mov	r22, r15
    2488:	6f 70       	andi	r22, 0x0F	; 15
    248a:	c6 01       	movw	r24, r12
    248c:	4e 2d       	mov	r20, r14
    248e:	09 95       	icall
    2490:	23 c0       	rjmp	.+70     	; 0x24d8 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2492:	84 2f       	mov	r24, r20
    2494:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <midi_is_realtime>
    2498:	88 23       	and	r24, r24
    249a:	31 f0       	breq	.+12     	; 0x24a8 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    249c:	d6 01       	movw	r26, r12
    249e:	56 96       	adiw	r26, 0x16	; 22
    24a0:	ed 91       	ld	r30, X+
    24a2:	fc 91       	ld	r31, X
    24a4:	57 97       	sbiw	r26, 0x17	; 23
    24a6:	08 c0       	rjmp	.+16     	; 0x24b8 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    24a8:	b6 ef       	ldi	r27, 0xF6	; 246
    24aa:	fb 16       	cp	r15, r27
    24ac:	29 f5       	brne	.+74     	; 0x24f8 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    24ae:	d6 01       	movw	r26, r12
    24b0:	58 96       	adiw	r26, 0x18	; 24
    24b2:	ed 91       	ld	r30, X+
    24b4:	fc 91       	ld	r31, X
    24b6:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    24b8:	30 97       	sbiw	r30, 0x00	; 0
    24ba:	f1 f0       	breq	.+60     	; 0x24f8 <midi_input_callbacks+0x21c>
            func(device, byte0);
    24bc:	c6 01       	movw	r24, r12
    24be:	6f 2d       	mov	r22, r15
    24c0:	09 95       	icall
    24c2:	0a c0       	rjmp	.+20     	; 0x24d8 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    24c4:	64 30       	cpi	r22, 0x04	; 4
    24c6:	71 05       	cpc	r23, r1
    24c8:	a8 f4       	brcc	.+42     	; 0x24f4 <midi_input_callbacks+0x218>
    24ca:	16 c0       	rjmp	.+44     	; 0x24f8 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    24cc:	c6 01       	movw	r24, r12
    24ce:	b5 01       	movw	r22, r10
    24d0:	4f 2d       	mov	r20, r15
    24d2:	2e 2d       	mov	r18, r14
    24d4:	01 2f       	mov	r16, r17
    24d6:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    24d8:	d6 01       	movw	r26, r12
    24da:	5e 96       	adiw	r26, 0x1e	; 30
    24dc:	ed 91       	ld	r30, X+
    24de:	fc 91       	ld	r31, X
    24e0:	5f 97       	sbiw	r26, 0x1f	; 31
    24e2:	30 97       	sbiw	r30, 0x00	; 0
    24e4:	89 f0       	breq	.+34     	; 0x2508 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    24e6:	c6 01       	movw	r24, r12
    24e8:	b5 01       	movw	r22, r10
    24ea:	4f 2d       	mov	r20, r15
    24ec:	2e 2d       	mov	r18, r14
    24ee:	01 2f       	mov	r16, r17
    24f0:	09 95       	icall
    24f2:	0a c0       	rjmp	.+20     	; 0x2508 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    24f4:	aa 24       	eor	r10, r10
    24f6:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    24f8:	d6 01       	movw	r26, r12
    24fa:	5c 96       	adiw	r26, 0x1c	; 28
    24fc:	ed 91       	ld	r30, X+
    24fe:	fc 91       	ld	r31, X
    2500:	5d 97       	sbiw	r26, 0x1d	; 29
    2502:	30 97       	sbiw	r30, 0x00	; 0
    2504:	19 f7       	brne	.-58     	; 0x24cc <midi_input_callbacks+0x1f0>
    2506:	e8 cf       	rjmp	.-48     	; 0x24d8 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	ff 90       	pop	r15
    2518:	ef 90       	pop	r14
    251a:	df 90       	pop	r13
    251c:	cf 90       	pop	r12
    251e:	bf 90       	pop	r11
    2520:	af 90       	pop	r10
    2522:	08 95       	ret

00002524 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    2524:	ef 92       	push	r14
    2526:	ff 92       	push	r15
    2528:	0f 93       	push	r16
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    252e:	7c 01       	movw	r14, r24
    2530:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    2532:	86 2f       	mov	r24, r22
    2534:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <midi_is_realtime>
    2538:	88 23       	and	r24, r24
    253a:	91 f0       	breq	.+36     	; 0x2560 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    253c:	d7 01       	movw	r26, r14
    253e:	95 96       	adiw	r26, 0x25	; 37
    2540:	dc 91       	ld	r29, X
    2542:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	95 96       	adiw	r26, 0x25	; 37
    2548:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    254a:	c7 01       	movw	r24, r14
    254c:	61 e0       	ldi	r22, 0x01	; 1
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	4c 2f       	mov	r20, r28
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	00 e0       	ldi	r16, 0x00	; 0
    2556:	0e 94 6e 11 	call	0x22dc	; 0x22dc <midi_input_callbacks>
    device->input_state = state;
    255a:	f7 01       	movw	r30, r14
    255c:	d5 a3       	lds	r29, 0x55
    255e:	b7 c0       	rjmp	.+366    	; 0x26ce <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    2560:	8c 2f       	mov	r24, r28
    2562:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <midi_is_statusbyte>
    2566:	88 23       	and	r24, r24
    2568:	09 f4       	brne	.+2      	; 0x256c <midi_process_byte+0x48>
    256a:	73 c0       	rjmp	.+230    	; 0x2652 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    256c:	d7 01       	movw	r26, r14
    256e:	95 96       	adiw	r26, 0x25	; 37
    2570:	8c 91       	ld	r24, X
    2572:	95 97       	sbiw	r26, 0x25	; 37
    2574:	84 30       	cpi	r24, 0x04	; 4
    2576:	49 f0       	breq	.+18     	; 0x258a <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    2578:	92 96       	adiw	r26, 0x22	; 34
    257a:	cc 93       	st	X, r28
    257c:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	97 96       	adiw	r26, 0x27	; 39
    2584:	9c 93       	st	X, r25
    2586:	8e 93       	st	-X, r24
    2588:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    258a:	8c 2f       	mov	r24, r28
    258c:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <midi_packet_length>
    2590:	81 30       	cpi	r24, 0x01	; 1
    2592:	41 f0       	breq	.+16     	; 0x25a4 <midi_process_byte+0x80>
    2594:	81 30       	cpi	r24, 0x01	; 1
    2596:	00 f1       	brcs	.+64     	; 0x25d8 <midi_process_byte+0xb4>
    2598:	82 30       	cpi	r24, 0x02	; 2
    259a:	a1 f0       	breq	.+40     	; 0x25c4 <midi_process_byte+0xa0>
    259c:	83 30       	cpi	r24, 0x03	; 3
    259e:	09 f0       	breq	.+2      	; 0x25a2 <midi_process_byte+0x7e>
    25a0:	4f c0       	rjmp	.+158    	; 0x2640 <midi_process_byte+0x11c>
    25a2:	14 c0       	rjmp	.+40     	; 0x25cc <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	f7 01       	movw	r30, r14
    25a8:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    25aa:	c7 01       	movw	r24, r14
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	70 e0       	ldi	r23, 0x00	; 0
    25b0:	4c 2f       	mov	r20, r28
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	00 e0       	ldi	r16, 0x00	; 0
    25b6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <midi_input_callbacks>
        device->input_state = IDLE;
    25ba:	d7 01       	movw	r26, r14
    25bc:	95 96       	adiw	r26, 0x25	; 37
    25be:	1c 92       	st	X, r1
    25c0:	95 97       	sbiw	r26, 0x25	; 37
        break;
    25c2:	85 c0       	rjmp	.+266    	; 0x26ce <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	f7 01       	movw	r30, r14
    25c8:	85 a3       	lds	r24, 0x55
        break;
    25ca:	81 c0       	rjmp	.+258    	; 0x26ce <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	d7 01       	movw	r26, r14
    25d0:	95 96       	adiw	r26, 0x25	; 37
    25d2:	8c 93       	st	X, r24
    25d4:	95 97       	sbiw	r26, 0x25	; 37
        break;
    25d6:	7b c0       	rjmp	.+246    	; 0x26ce <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    25d8:	c0 3f       	cpi	r28, 0xF0	; 240
    25da:	19 f0       	breq	.+6      	; 0x25e2 <midi_process_byte+0xbe>
    25dc:	c7 3f       	cpi	r28, 0xF7	; 247
    25de:	59 f5       	brne	.+86     	; 0x2636 <midi_process_byte+0x112>
    25e0:	0a c0       	rjmp	.+20     	; 0x25f6 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    25e2:	84 e0       	ldi	r24, 0x04	; 4
    25e4:	f7 01       	movw	r30, r14
    25e6:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    25e8:	80 ef       	ldi	r24, 0xF0	; 240
    25ea:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	97 a3       	lds	r25, 0x57
    25f2:	86 a3       	lds	r24, 0x56
            break;
    25f4:	6c c0       	rjmp	.+216    	; 0x26ce <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    25f6:	d7 01       	movw	r26, r14
    25f8:	96 96       	adiw	r26, 0x26	; 38
    25fa:	2d 91       	ld	r18, X+
    25fc:	3c 91       	ld	r19, X
    25fe:	97 97       	sbiw	r26, 0x27	; 39
    2600:	c9 01       	movw	r24, r18
    2602:	63 e0       	ldi	r22, 0x03	; 3
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	0e 94 66 15 	call	0x2acc	; 0x2acc <__udivmodhi4>
    260a:	f7 01       	movw	r30, r14
    260c:	e8 0f       	add	r30, r24
    260e:	f9 1f       	adc	r31, r25
    2610:	87 ef       	ldi	r24, 0xF7	; 247
    2612:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    2614:	b9 01       	movw	r22, r18
    2616:	6f 5f       	subi	r22, 0xFF	; 255
    2618:	7f 4f       	sbci	r23, 0xFF	; 255
    261a:	f7 01       	movw	r30, r14
    261c:	77 a3       	lds	r23, 0x57
    261e:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    2620:	c7 01       	movw	r24, r14
    2622:	42 a1       	lds	r20, 0x42
    2624:	23 a1       	lds	r18, 0x43
    2626:	04 a1       	lds	r16, 0x44
    2628:	0e 94 6e 11 	call	0x22dc	; 0x22dc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    262c:	d7 01       	movw	r26, r14
    262e:	95 96       	adiw	r26, 0x25	; 37
    2630:	1c 92       	st	X, r1
    2632:	95 97       	sbiw	r26, 0x25	; 37
            break;
    2634:	4c c0       	rjmp	.+152    	; 0x26ce <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    2636:	f7 01       	movw	r30, r14
    2638:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    263a:	17 a2       	lds	r17, 0x97
    263c:	16 a2       	lds	r17, 0x96
    263e:	47 c0       	rjmp	.+142    	; 0x26ce <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    2640:	d7 01       	movw	r26, r14
    2642:	95 96       	adiw	r26, 0x25	; 37
    2644:	1c 92       	st	X, r1
    2646:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    2648:	97 96       	adiw	r26, 0x27	; 39
    264a:	1c 92       	st	X, r1
    264c:	1e 92       	st	-X, r1
    264e:	96 97       	sbiw	r26, 0x26	; 38
        break;
    2650:	3e c0       	rjmp	.+124    	; 0x26ce <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    2652:	f7 01       	movw	r30, r14
    2654:	25 a1       	lds	r18, 0x45
    2656:	22 23       	and	r18, r18
    2658:	d1 f1       	breq	.+116    	; 0x26ce <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    265a:	06 a0       	lds	r16, 0x86
    265c:	f7 a1       	lds	r31, 0x47
    265e:	e0 2d       	mov	r30, r0
    2660:	cf 01       	movw	r24, r30
    2662:	63 e0       	ldi	r22, 0x03	; 3
    2664:	70 e0       	ldi	r23, 0x00	; 0
    2666:	0e 94 66 15 	call	0x2acc	; 0x2acc <__udivmodhi4>
    266a:	ac 01       	movw	r20, r24
    266c:	8e 0d       	add	r24, r14
    266e:	9f 1d       	adc	r25, r15
    2670:	dc 01       	movw	r26, r24
    2672:	92 96       	adiw	r26, 0x22	; 34
    2674:	cc 93       	st	X, r28
    2676:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    2678:	bf 01       	movw	r22, r30
    267a:	6f 5f       	subi	r22, 0xFF	; 255
    267c:	7f 4f       	sbci	r23, 0xFF	; 255
    267e:	f7 01       	movw	r30, r14
    2680:	77 a3       	lds	r23, 0x57
    2682:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    2684:	41 30       	cpi	r20, 0x01	; 1
    2686:	51 05       	cpc	r21, r1
    2688:	91 f0       	breq	.+36     	; 0x26ae <midi_process_byte+0x18a>
    268a:	42 30       	cpi	r20, 0x02	; 2
    268c:	51 05       	cpc	r21, r1
    268e:	f9 f4       	brne	.+62     	; 0x26ce <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    2690:	c7 01       	movw	r24, r14
    2692:	42 a1       	lds	r20, 0x42
    2694:	23 a1       	lds	r18, 0x43
    2696:	04 a1       	lds	r16, 0x44
    2698:	0e 94 6e 11 	call	0x22dc	; 0x22dc <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    269c:	f7 01       	movw	r30, r14
    269e:	85 a1       	lds	r24, 0x45
    26a0:	84 30       	cpi	r24, 0x04	; 4
    26a2:	a9 f0       	breq	.+42     	; 0x26ce <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	97 a3       	lds	r25, 0x57
    26aa:	86 a3       	lds	r24, 0x56
    26ac:	10 c0       	rjmp	.+32     	; 0x26ce <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    26ae:	22 30       	cpi	r18, 0x02	; 2
    26b0:	71 f4       	brne	.+28     	; 0x26ce <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    26b2:	c7 01       	movw	r24, r14
    26b4:	42 a1       	lds	r20, 0x42
    26b6:	23 a1       	lds	r18, 0x43
    26b8:	00 e0       	ldi	r16, 0x00	; 0
    26ba:	0e 94 6e 11 	call	0x22dc	; 0x22dc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    26be:	f7 01       	movw	r30, r14
    26c0:	85 a1       	lds	r24, 0x45
    26c2:	84 30       	cpi	r24, 0x04	; 4
    26c4:	21 f0       	breq	.+8      	; 0x26ce <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	97 a3       	lds	r25, 0x57
    26cc:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	0f 91       	pop	r16
    26d4:	ff 90       	pop	r15
    26d6:	ef 90       	pop	r14
    26d8:	08 95       	ret

000026da <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    26da:	cf 92       	push	r12
    26dc:	df 92       	push	r13
    26de:	ef 92       	push	r14
    26e0:	ff 92       	push	r15
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    26ec:	dc 01       	movw	r26, r24
    26ee:	90 96       	adiw	r26, 0x20	; 32
    26f0:	ed 91       	ld	r30, X+
    26f2:	fc 91       	ld	r31, X
    26f4:	91 97       	sbiw	r26, 0x21	; 33
    26f6:	30 97       	sbiw	r30, 0x00	; 0
    26f8:	09 f0       	breq	.+2      	; 0x26fc <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    26fa:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    26fc:	0f 2e       	mov	r0, r31
    26fe:	f8 ee       	ldi	r31, 0xE8	; 232
    2700:	ef 2e       	mov	r14, r31
    2702:	ff 24       	eor	r15, r15
    2704:	f0 2d       	mov	r31, r0
    2706:	ec 0c       	add	r14, r12
    2708:	fd 1c       	adc	r15, r13
    270a:	c7 01       	movw	r24, r14
    270c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2710:	c8 2f       	mov	r28, r24
    2712:	d0 e0       	ldi	r29, 0x00	; 0
    2714:	20 97       	sbiw	r28, 0x00	; 0
    2716:	99 f0       	breq	.+38     	; 0x273e <midi_device_process+0x64>
    2718:	00 e0       	ldi	r16, 0x00	; 0
    271a:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    271c:	c7 01       	movw	r24, r14
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <bytequeue_get>
    2724:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    2726:	c6 01       	movw	r24, r12
    2728:	0e 94 92 12 	call	0x2524	; 0x2524 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    272c:	c7 01       	movw	r24, r14
    272e:	61 e0       	ldi	r22, 0x01	; 1
    2730:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2734:	0f 5f       	subi	r16, 0xFF	; 255
    2736:	1f 4f       	sbci	r17, 0xFF	; 255
    2738:	0c 17       	cp	r16, r28
    273a:	1d 07       	cpc	r17, r29
    273c:	78 f3       	brcs	.-34     	; 0x271c <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    273e:	df 91       	pop	r29
    2740:	cf 91       	pop	r28
    2742:	1f 91       	pop	r17
    2744:	0f 91       	pop	r16
    2746:	ff 90       	pop	r15
    2748:	ef 90       	pop	r14
    274a:	df 90       	pop	r13
    274c:	cf 90       	pop	r12
    274e:	08 95       	ret

00002750 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    2750:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    2752:	67 e0       	ldi	r22, 0x07	; 7
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	0e 94 66 15 	call	0x2acc	; 0x2acc <__udivmodhi4>
    275a:	48 2f       	mov	r20, r24
   if (remainder)
    275c:	88 23       	and	r24, r24
    275e:	81 f0       	breq	.+32     	; 0x2780 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    2760:	c9 01       	movw	r24, r18
    2762:	67 e0       	ldi	r22, 0x07	; 7
    2764:	70 e0       	ldi	r23, 0x00	; 0
    2766:	0e 94 66 15 	call	0x2acc	; 0x2acc <__udivmodhi4>
    276a:	cb 01       	movw	r24, r22
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	01 96       	adiw	r24, 0x01	; 1
    277a:	84 0f       	add	r24, r20
    277c:	91 1d       	adc	r25, r1
    277e:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    2780:	c9 01       	movw	r24, r18
    2782:	67 e0       	ldi	r22, 0x07	; 7
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	0e 94 66 15 	call	0x2acc	; 0x2acc <__udivmodhi4>
    278a:	cb 01       	movw	r24, r22
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
}
    2798:	08 95       	ret

0000279a <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    279a:	48 2f       	mov	r20, r24
    279c:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    279e:	a1 f0       	breq	.+40     	; 0x27c8 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    27a0:	9c 01       	movw	r18, r24
    27a2:	36 95       	lsr	r19
    27a4:	27 95       	ror	r18
    27a6:	36 95       	lsr	r19
    27a8:	27 95       	ror	r18
    27aa:	36 95       	lsr	r19
    27ac:	27 95       	ror	r18
    27ae:	c9 01       	movw	r24, r18
    27b0:	88 0f       	add	r24, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	82 1b       	sub	r24, r18
    27be:	93 0b       	sbc	r25, r19
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	84 0f       	add	r24, r20
    27c4:	91 1d       	adc	r25, r1
    27c6:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    27c8:	9c 01       	movw	r18, r24
    27ca:	36 95       	lsr	r19
    27cc:	27 95       	ror	r18
    27ce:	36 95       	lsr	r19
    27d0:	27 95       	ror	r18
    27d2:	36 95       	lsr	r19
    27d4:	27 95       	ror	r18
    27d6:	c9 01       	movw	r24, r18
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	88 0f       	add	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	82 1b       	sub	r24, r18
    27e6:	93 0b       	sbc	r25, r19
}
    27e8:	08 95       	ret

000027ea <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    27ea:	2f 92       	push	r2
    27ec:	3f 92       	push	r3
    27ee:	4f 92       	push	r4
    27f0:	5f 92       	push	r5
    27f2:	6f 92       	push	r6
    27f4:	7f 92       	push	r7
    27f6:	8f 92       	push	r8
    27f8:	9f 92       	push	r9
    27fa:	af 92       	push	r10
    27fc:	bf 92       	push	r11
    27fe:	cf 92       	push	r12
    2800:	df 92       	push	r13
    2802:	ef 92       	push	r14
    2804:	ff 92       	push	r15
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	00 d0       	rcall	.+0      	; 0x2810 <sysex_encode+0x26>
    2810:	00 d0       	rcall	.+0      	; 0x2812 <sysex_encode+0x28>
    2812:	00 d0       	rcall	.+0      	; 0x2814 <sysex_encode+0x2a>
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	1c 01       	movw	r2, r24
    281a:	7a 83       	std	Y+2, r23	; 0x02
    281c:	69 83       	std	Y+1, r22	; 0x01
    281e:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    2820:	ca 01       	movw	r24, r20
    2822:	67 e0       	ldi	r22, 0x07	; 7
    2824:	70 e0       	ldi	r23, 0x00	; 0
    2826:	0e 94 66 15 	call	0x2acc	; 0x2acc <__udivmodhi4>
    282a:	2b 01       	movw	r4, r22
    282c:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    282e:	61 15       	cp	r22, r1
    2830:	71 05       	cpc	r23, r1
    2832:	b1 f1       	breq	.+108    	; 0x28a0 <sysex_encode+0xb6>
    2834:	81 01       	movw	r16, r2
    2836:	e9 80       	ldd	r14, Y+1	; 0x01
    2838:	fa 80       	ldd	r15, Y+2	; 0x02
    283a:	cc 24       	eor	r12, r12
    283c:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    283e:	88 24       	eor	r8, r8
    2840:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2842:	1e 83       	std	Y+6, r17	; 0x06
    2844:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    2846:	f8 01       	movw	r30, r16
    2848:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    284a:	fc 82       	std	Y+4, r15	; 0x04
    284c:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    284e:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    2850:	ab 81       	ldd	r26, Y+3	; 0x03
    2852:	bc 81       	ldd	r27, Y+4	; 0x04
    2854:	2d 91       	ld	r18, X+
    2856:	bc 83       	std	Y+4, r27	; 0x04
    2858:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    285a:	4f 5f       	subi	r20, 0xFF	; 255
    285c:	5f 4f       	sbci	r21, 0xFF	; 255
    285e:	82 2f       	mov	r24, r18
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	80 78       	andi	r24, 0x80	; 128
    2864:	90 70       	andi	r25, 0x00	; 0
    2866:	bc 01       	movw	r22, r24
    2868:	04 2e       	mov	r0, r20
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <sysex_encode+0x86>
    286c:	75 95       	asr	r23
    286e:	67 95       	ror	r22
    2870:	0a 94       	dec	r0
    2872:	e2 f7       	brpl	.-8      	; 0x286c <sysex_encode+0x82>
    2874:	ad 81       	ldd	r26, Y+5	; 0x05
    2876:	be 81       	ldd	r27, Y+6	; 0x06
    2878:	8c 91       	ld	r24, X
    287a:	86 2b       	or	r24, r22
    287c:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    287e:	2f 77       	andi	r18, 0x7F	; 127
    2880:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2882:	47 30       	cpi	r20, 0x07	; 7
    2884:	51 05       	cpc	r21, r1
    2886:	21 f7       	brne	.-56     	; 0x2850 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2888:	08 94       	sec
    288a:	c1 1c       	adc	r12, r1
    288c:	d1 1c       	adc	r13, r1
    288e:	08 5f       	subi	r16, 0xF8	; 248
    2890:	1f 4f       	sbci	r17, 0xFF	; 255
    2892:	e7 e0       	ldi	r30, 0x07	; 7
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	ee 0e       	add	r14, r30
    2898:	ff 1e       	adc	r15, r31
    289a:	ca 14       	cp	r12, r10
    289c:	db 04       	cpc	r13, r11
    289e:	89 f6       	brne	.-94     	; 0x2842 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    28a0:	c3 01       	movw	r24, r6
    28a2:	67 e0       	ldi	r22, 0x07	; 7
    28a4:	70 e0       	ldi	r23, 0x00	; 0
    28a6:	0e 94 66 15 	call	0x2acc	; 0x2acc <__udivmodhi4>
   if (remainder) {
    28aa:	88 23       	and	r24, r24
    28ac:	d9 f1       	breq	.+118    	; 0x2924 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    28ae:	82 01       	movw	r16, r4
    28b0:	00 0f       	add	r16, r16
    28b2:	11 1f       	adc	r17, r17
    28b4:	00 0f       	add	r16, r16
    28b6:	11 1f       	adc	r17, r17
    28b8:	00 0f       	add	r16, r16
    28ba:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    28bc:	78 01       	movw	r14, r16
    28be:	e4 18       	sub	r14, r4
    28c0:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    28c2:	d1 01       	movw	r26, r2
    28c4:	a0 0f       	add	r26, r16
    28c6:	b1 1f       	adc	r27, r17
    28c8:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    28ca:	68 2f       	mov	r22, r24
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	61 15       	cp	r22, r1
    28d0:	71 05       	cpc	r23, r1
    28d2:	19 f1       	breq	.+70     	; 0x291a <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    28d4:	e9 81       	ldd	r30, Y+1	; 0x01
    28d6:	fa 81       	ldd	r31, Y+2	; 0x02
    28d8:	ee 0e       	add	r14, r30
    28da:	ff 1e       	adc	r15, r31
    28dc:	c8 01       	movw	r24, r16
    28de:	01 96       	adiw	r24, 0x01	; 1
    28e0:	28 0e       	add	r2, r24
    28e2:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    28e8:	f7 01       	movw	r30, r14
    28ea:	41 91       	ld	r20, Z+
    28ec:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    28ee:	2f 5f       	subi	r18, 0xFF	; 255
    28f0:	3f 4f       	sbci	r19, 0xFF	; 255
    28f2:	84 2f       	mov	r24, r20
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	80 78       	andi	r24, 0x80	; 128
    28f8:	90 70       	andi	r25, 0x00	; 0
    28fa:	02 2e       	mov	r0, r18
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <sysex_encode+0x118>
    28fe:	95 95       	asr	r25
    2900:	87 95       	ror	r24
    2902:	0a 94       	dec	r0
    2904:	e2 f7       	brpl	.-8      	; 0x28fe <sysex_encode+0x114>
    2906:	9c 91       	ld	r25, X
    2908:	89 2b       	or	r24, r25
    290a:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    290c:	4f 77       	andi	r20, 0x7F	; 127
    290e:	f1 01       	movw	r30, r2
    2910:	41 93       	st	Z+, r20
    2912:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    2914:	26 17       	cp	r18, r22
    2916:	37 07       	cpc	r19, r23
    2918:	38 f3       	brcs	.-50     	; 0x28e8 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    291a:	c8 01       	movw	r24, r16
    291c:	01 96       	adiw	r24, 0x01	; 1
    291e:	86 0f       	add	r24, r22
    2920:	97 1f       	adc	r25, r23
    2922:	07 c0       	rjmp	.+14     	; 0x2932 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    2924:	c2 01       	movw	r24, r4
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
   }
}
    2932:	26 96       	adiw	r28, 0x06	; 6
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	ff 90       	pop	r15
    2948:	ef 90       	pop	r14
    294a:	df 90       	pop	r13
    294c:	cf 90       	pop	r12
    294e:	bf 90       	pop	r11
    2950:	af 90       	pop	r10
    2952:	9f 90       	pop	r9
    2954:	8f 90       	pop	r8
    2956:	7f 90       	pop	r7
    2958:	6f 90       	pop	r6
    295a:	5f 90       	pop	r5
    295c:	4f 90       	pop	r4
    295e:	3f 90       	pop	r3
    2960:	2f 90       	pop	r2
    2962:	08 95       	ret

00002964 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2964:	6f 92       	push	r6
    2966:	7f 92       	push	r7
    2968:	8f 92       	push	r8
    296a:	9f 92       	push	r9
    296c:	af 92       	push	r10
    296e:	bf 92       	push	r11
    2970:	cf 92       	push	r12
    2972:	df 92       	push	r13
    2974:	ef 92       	push	r14
    2976:	ff 92       	push	r15
    2978:	0f 93       	push	r16
    297a:	1f 93       	push	r17
    297c:	cf 93       	push	r28
    297e:	df 93       	push	r29
    2980:	3c 01       	movw	r6, r24
    2982:	4b 01       	movw	r8, r22
    2984:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    2986:	42 30       	cpi	r20, 0x02	; 2
    2988:	51 05       	cpc	r21, r1
    298a:	08 f4       	brcc	.+2      	; 0x298e <sysex_decode+0x2a>
    298c:	6f c0       	rjmp	.+222    	; 0x2a6c <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    298e:	7a 01       	movw	r14, r20
    2990:	f6 94       	lsr	r15
    2992:	e7 94       	ror	r14
    2994:	f6 94       	lsr	r15
    2996:	e7 94       	ror	r14
    2998:	f6 94       	lsr	r15
    299a:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    299c:	e1 14       	cp	r14, r1
    299e:	f1 04       	cpc	r15, r1
    29a0:	29 f1       	breq	.+74     	; 0x29ec <sysex_decode+0x88>
    29a2:	eb 01       	movw	r28, r22
    29a4:	b3 01       	movw	r22, r6
    29a6:	00 e0       	ldi	r16, 0x00	; 0
    29a8:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    29aa:	cc 24       	eor	r12, r12
    29ac:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    29ae:	de 01       	movw	r26, r28
    29b0:	11 96       	adiw	r26, 0x01	; 1
    29b2:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    29b4:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    29b6:	2d 91       	ld	r18, X+
    29b8:	2f 77       	andi	r18, 0x7F	; 127
    29ba:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    29bc:	4f 5f       	subi	r20, 0xFF	; 255
    29be:	5f 4f       	sbci	r21, 0xFF	; 255
    29c0:	88 81       	ld	r24, Y
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	04 2e       	mov	r0, r20
    29c6:	02 c0       	rjmp	.+4      	; 0x29cc <sysex_decode+0x68>
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	0a 94       	dec	r0
    29ce:	e2 f7       	brpl	.-8      	; 0x29c8 <sysex_decode+0x64>
    29d0:	80 78       	andi	r24, 0x80	; 128
    29d2:	28 2b       	or	r18, r24
    29d4:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    29d6:	47 30       	cpi	r20, 0x07	; 7
    29d8:	51 05       	cpc	r21, r1
    29da:	69 f7       	brne	.-38     	; 0x29b6 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    29dc:	0f 5f       	subi	r16, 0xFF	; 255
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	28 96       	adiw	r28, 0x08	; 8
    29e2:	69 5f       	subi	r22, 0xF9	; 249
    29e4:	7f 4f       	sbci	r23, 0xFF	; 255
    29e6:	0e 15       	cp	r16, r14
    29e8:	1f 05       	cpc	r17, r15
    29ea:	09 f7       	brne	.-62     	; 0x29ae <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    29ec:	5a 2d       	mov	r21, r10
    29ee:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    29f0:	99 f1       	breq	.+102    	; 0x2a58 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    29f2:	e7 01       	movw	r28, r14
    29f4:	cc 0f       	add	r28, r28
    29f6:	dd 1f       	adc	r29, r29
    29f8:	cc 0f       	add	r28, r28
    29fa:	dd 1f       	adc	r29, r29
    29fc:	cc 0f       	add	r28, r28
    29fe:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    2a00:	8e 01       	movw	r16, r28
    2a02:	0e 19       	sub	r16, r14
    2a04:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    2a06:	65 2f       	mov	r22, r21
    2a08:	70 e0       	ldi	r23, 0x00	; 0
    2a0a:	61 50       	subi	r22, 0x01	; 1
    2a0c:	70 40       	sbci	r23, 0x00	; 0
    2a0e:	f9 f0       	breq	.+62     	; 0x2a4e <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2a10:	ce 01       	movw	r24, r28
    2a12:	01 96       	adiw	r24, 0x01	; 1
    2a14:	d4 01       	movw	r26, r8
    2a16:	a8 0f       	add	r26, r24
    2a18:	b9 1f       	adc	r27, r25
    2a1a:	f3 01       	movw	r30, r6
    2a1c:	e0 0f       	add	r30, r16
    2a1e:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2a24:	c8 0d       	add	r28, r8
    2a26:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    2a28:	4d 91       	ld	r20, X+
    2a2a:	4f 77       	andi	r20, 0x7F	; 127
    2a2c:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2a2e:	2f 5f       	subi	r18, 0xFF	; 255
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	88 81       	ld	r24, Y
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	02 2e       	mov	r0, r18
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <sysex_decode+0xda>
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	0a 94       	dec	r0
    2a40:	e2 f7       	brpl	.-8      	; 0x2a3a <sysex_decode+0xd6>
    2a42:	80 78       	andi	r24, 0x80	; 128
    2a44:	48 2b       	or	r20, r24
    2a46:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2a48:	26 17       	cp	r18, r22
    2a4a:	37 07       	cpc	r19, r23
    2a4c:	68 f3       	brcs	.-38     	; 0x2a28 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    2a4e:	c8 01       	movw	r24, r16
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	85 0f       	add	r24, r21
    2a54:	91 1d       	adc	r25, r1
    2a56:	0c c0       	rjmp	.+24     	; 0x2a70 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    2a58:	c7 01       	movw	r24, r14
    2a5a:	88 0f       	add	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	8e 19       	sub	r24, r14
    2a68:	9f 09       	sbc	r25, r15
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	1f 91       	pop	r17
    2a76:	0f 91       	pop	r16
    2a78:	ff 90       	pop	r15
    2a7a:	ef 90       	pop	r14
    2a7c:	df 90       	pop	r13
    2a7e:	cf 90       	pop	r12
    2a80:	bf 90       	pop	r11
    2a82:	af 90       	pop	r10
    2a84:	9f 90       	pop	r9
    2a86:	8f 90       	pop	r8
    2a88:	7f 90       	pop	r7
    2a8a:	6f 90       	pop	r6
    2a8c:	08 95       	ret

00002a8e <__mulsi3>:
    2a8e:	62 9f       	mul	r22, r18
    2a90:	d0 01       	movw	r26, r0
    2a92:	73 9f       	mul	r23, r19
    2a94:	f0 01       	movw	r30, r0
    2a96:	82 9f       	mul	r24, r18
    2a98:	e0 0d       	add	r30, r0
    2a9a:	f1 1d       	adc	r31, r1
    2a9c:	64 9f       	mul	r22, r20
    2a9e:	e0 0d       	add	r30, r0
    2aa0:	f1 1d       	adc	r31, r1
    2aa2:	92 9f       	mul	r25, r18
    2aa4:	f0 0d       	add	r31, r0
    2aa6:	83 9f       	mul	r24, r19
    2aa8:	f0 0d       	add	r31, r0
    2aaa:	74 9f       	mul	r23, r20
    2aac:	f0 0d       	add	r31, r0
    2aae:	65 9f       	mul	r22, r21
    2ab0:	f0 0d       	add	r31, r0
    2ab2:	99 27       	eor	r25, r25
    2ab4:	72 9f       	mul	r23, r18
    2ab6:	b0 0d       	add	r27, r0
    2ab8:	e1 1d       	adc	r30, r1
    2aba:	f9 1f       	adc	r31, r25
    2abc:	63 9f       	mul	r22, r19
    2abe:	b0 0d       	add	r27, r0
    2ac0:	e1 1d       	adc	r30, r1
    2ac2:	f9 1f       	adc	r31, r25
    2ac4:	bd 01       	movw	r22, r26
    2ac6:	cf 01       	movw	r24, r30
    2ac8:	11 24       	eor	r1, r1
    2aca:	08 95       	ret

00002acc <__udivmodhi4>:
    2acc:	aa 1b       	sub	r26, r26
    2ace:	bb 1b       	sub	r27, r27
    2ad0:	51 e1       	ldi	r21, 0x11	; 17
    2ad2:	07 c0       	rjmp	.+14     	; 0x2ae2 <__udivmodhi4_ep>

00002ad4 <__udivmodhi4_loop>:
    2ad4:	aa 1f       	adc	r26, r26
    2ad6:	bb 1f       	adc	r27, r27
    2ad8:	a6 17       	cp	r26, r22
    2ada:	b7 07       	cpc	r27, r23
    2adc:	10 f0       	brcs	.+4      	; 0x2ae2 <__udivmodhi4_ep>
    2ade:	a6 1b       	sub	r26, r22
    2ae0:	b7 0b       	sbc	r27, r23

00002ae2 <__udivmodhi4_ep>:
    2ae2:	88 1f       	adc	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	5a 95       	dec	r21
    2ae8:	a9 f7       	brne	.-22     	; 0x2ad4 <__udivmodhi4_loop>
    2aea:	80 95       	com	r24
    2aec:	90 95       	com	r25
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	08 95       	ret

00002af4 <__divmodhi4>:
    2af4:	97 fb       	bst	r25, 7
    2af6:	09 2e       	mov	r0, r25
    2af8:	07 26       	eor	r0, r23
    2afa:	0a d0       	rcall	.+20     	; 0x2b10 <__divmodhi4_neg1>
    2afc:	77 fd       	sbrc	r23, 7
    2afe:	04 d0       	rcall	.+8      	; 0x2b08 <__divmodhi4_neg2>
    2b00:	e5 df       	rcall	.-54     	; 0x2acc <__udivmodhi4>
    2b02:	06 d0       	rcall	.+12     	; 0x2b10 <__divmodhi4_neg1>
    2b04:	00 20       	and	r0, r0
    2b06:	1a f4       	brpl	.+6      	; 0x2b0e <__divmodhi4_exit>

00002b08 <__divmodhi4_neg2>:
    2b08:	70 95       	com	r23
    2b0a:	61 95       	neg	r22
    2b0c:	7f 4f       	sbci	r23, 0xFF	; 255

00002b0e <__divmodhi4_exit>:
    2b0e:	08 95       	ret

00002b10 <__divmodhi4_neg1>:
    2b10:	f6 f7       	brtc	.-4      	; 0x2b0e <__divmodhi4_exit>
    2b12:	90 95       	com	r25
    2b14:	81 95       	neg	r24
    2b16:	9f 4f       	sbci	r25, 0xFF	; 255
    2b18:	08 95       	ret

00002b1a <memcpy>:
    2b1a:	fb 01       	movw	r30, r22
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <memcpy+0xa>
    2b20:	01 90       	ld	r0, Z+
    2b22:	0d 92       	st	X+, r0
    2b24:	41 50       	subi	r20, 0x01	; 1
    2b26:	50 40       	sbci	r21, 0x00	; 0
    2b28:	d8 f7       	brcc	.-10     	; 0x2b20 <memcpy+0x6>
    2b2a:	08 95       	ret

00002b2c <memmove>:
    2b2c:	68 17       	cp	r22, r24
    2b2e:	79 07       	cpc	r23, r25
    2b30:	68 f4       	brcc	.+26     	; 0x2b4c <memmove+0x20>
    2b32:	fb 01       	movw	r30, r22
    2b34:	dc 01       	movw	r26, r24
    2b36:	e4 0f       	add	r30, r20
    2b38:	f5 1f       	adc	r31, r21
    2b3a:	a4 0f       	add	r26, r20
    2b3c:	b5 1f       	adc	r27, r21
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <memmove+0x18>
    2b40:	02 90       	ld	r0, -Z
    2b42:	0e 92       	st	-X, r0
    2b44:	41 50       	subi	r20, 0x01	; 1
    2b46:	50 40       	sbci	r21, 0x00	; 0
    2b48:	d8 f7       	brcc	.-10     	; 0x2b40 <memmove+0x14>
    2b4a:	08 95       	ret
    2b4c:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <memcpy>

00002b50 <__eerd_block_m6450a>:
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22

00002b54 <__eerd_blraw_m6450a>:
    2b54:	fc 01       	movw	r30, r24
    2b56:	f9 99       	sbic	0x1f, 1	; 31
    2b58:	fe cf       	rjmp	.-4      	; 0x2b56 <__eerd_blraw_m6450a+0x2>
    2b5a:	06 c0       	rjmp	.+12     	; 0x2b68 <__eerd_blraw_m6450a+0x14>
    2b5c:	f2 bd       	out	0x22, r31	; 34
    2b5e:	e1 bd       	out	0x21, r30	; 33
    2b60:	f8 9a       	sbi	0x1f, 0	; 31
    2b62:	31 96       	adiw	r30, 0x01	; 1
    2b64:	00 b4       	in	r0, 0x20	; 32
    2b66:	0d 92       	st	X+, r0
    2b68:	41 50       	subi	r20, 0x01	; 1
    2b6a:	50 40       	sbci	r21, 0x00	; 0
    2b6c:	b8 f7       	brcc	.-18     	; 0x2b5c <__eerd_blraw_m6450a+0x8>
    2b6e:	08 95       	ret

00002b70 <__eerd_word_m6450a>:
    2b70:	a8 e1       	ldi	r26, 0x18	; 24
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	42 e0       	ldi	r20, 0x02	; 2
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__eerd_blraw_m6450a>

00002b7c <__eeupd_block_m6450a>:
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	a4 0f       	add	r26, r20
    2b80:	b5 1f       	adc	r27, r21
    2b82:	41 50       	subi	r20, 0x01	; 1
    2b84:	50 40       	sbci	r21, 0x00	; 0
    2b86:	48 f0       	brcs	.+18     	; 0x2b9a <__eeupd_block_m6450a+0x1e>
    2b88:	cb 01       	movw	r24, r22
    2b8a:	84 0f       	add	r24, r20
    2b8c:	95 1f       	adc	r25, r21
    2b8e:	2e 91       	ld	r18, -X
    2b90:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__eeupd_r18_m6450a>
    2b94:	41 50       	subi	r20, 0x01	; 1
    2b96:	50 40       	sbci	r21, 0x00	; 0
    2b98:	d0 f7       	brcc	.-12     	; 0x2b8e <__eeupd_block_m6450a+0x12>
    2b9a:	08 95       	ret

00002b9c <__eeupd_byte_m6450a>:
    2b9c:	26 2f       	mov	r18, r22

00002b9e <__eeupd_r18_m6450a>:
    2b9e:	f9 99       	sbic	0x1f, 1	; 31
    2ba0:	fe cf       	rjmp	.-4      	; 0x2b9e <__eeupd_r18_m6450a>
    2ba2:	92 bd       	out	0x22, r25	; 34
    2ba4:	81 bd       	out	0x21, r24	; 33
    2ba6:	f8 9a       	sbi	0x1f, 0	; 31
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	00 b4       	in	r0, 0x20	; 32
    2bac:	02 16       	cp	r0, r18
    2bae:	31 f0       	breq	.+12     	; 0x2bbc <__eeupd_r18_m6450a+0x1e>
    2bb0:	20 bd       	out	0x20, r18	; 32
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	fa 9a       	sbi	0x1f, 2	; 31
    2bb8:	f9 9a       	sbi	0x1f, 1	; 31
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	08 95       	ret

00002bbe <__eeupd_word_m6450a>:
    2bbe:	01 96       	adiw	r24, 0x01	; 1
    2bc0:	27 2f       	mov	r18, r23
    2bc2:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__eeupd_r18_m6450a>
    2bc6:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__eeupd_byte_m6450a>

00002bca <_exit>:
    2bca:	f8 94       	cli

00002bcc <__stop_program>:
    2bcc:	ff cf       	rjmp	.-2      	; 0x2bcc <__stop_program>
