
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  000038b6  0000396a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038b6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c9  008002b0  008002b0  00003b1a  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003b1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00004190  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002e0  00000000  00000000  000050c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000061de  00000000  00000000  000053a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000169b  00000000  00000000  0000b586  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f7e  00000000  00000000  0000cc21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cb8  00000000  00000000  0000eba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018c7  00000000  00000000  0000f858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002c85  00000000  00000000  0001111f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00013da4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_9>
      28:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e6 eb       	ldi	r30, 0xB6	; 182
      78:	f8 e3       	ldi	r31, 0x38	; 56
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a9 37       	cpi	r26, 0x79	; 121
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 51 03 	call	0x6a2	; 0x6a2 <main>
      9a:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 b0 02 	lds	r24, 0x02B0
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 0a 1c 	call	0x3814	; 0x3814 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 b0 02 	sts	0x02B0, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 0a 1c 	call	0x3814	; 0x3814 <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 b0 02 	sts	0x02B0, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 b0 02 	sts	0x02B0, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     1f6:	8d e0       	ldi	r24, 0x0D	; 13
     1f8:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     202:	08 95       	ret

00000204 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     204:	90 93 89 00 	sts	0x0089, r25
     208:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1;
     20c:	20 91 84 00 	lds	r18, 0x0084
     210:	30 91 85 00 	lds	r19, 0x0085
     214:	82 17       	cp	r24, r18
     216:	93 07       	cpc	r25, r19
     218:	28 f4       	brcc	.+10     	; 0x224 <update_clock_rate+0x20>
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	90 93 85 00 	sts	0x0085, r25
     220:	80 93 84 00 	sts	0x0084, r24
     224:	08 95       	ret

00000226 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     226:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     228:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     22a:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     22c:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     22e:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     230:	8c 91       	ld	r24, X
     232:	87 70       	andi	r24, 0x07	; 7
     234:	82 b9       	out	0x02, r24	; 2
     236:	66 e0       	ldi	r22, 0x06	; 6
     238:	6a 95       	dec	r22
     23a:	f1 f7       	brne	.-4      	; 0x238 <set_control_voltage+0x12>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     23e:	ea ed       	ldi	r30, 0xDA	; 218
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	40 81       	ld	r20, Z
     244:	8c 91       	ld	r24, X
     246:	86 95       	lsr	r24
     248:	86 95       	lsr	r24
     24a:	86 95       	lsr	r24
     24c:	87 70       	andi	r24, 0x07	; 7
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	b9 01       	movw	r22, r18
     254:	02 c0       	rjmp	.+4      	; 0x25a <set_control_voltage+0x34>
     256:	66 0f       	add	r22, r22
     258:	77 1f       	adc	r23, r23
     25a:	8a 95       	dec	r24
     25c:	e2 f7       	brpl	.-8      	; 0x256 <set_control_voltage+0x30>
     25e:	cb 01       	movw	r24, r22
     260:	84 2b       	or	r24, r20
     262:	80 83       	st	Z, r24
     264:	76 e0       	ldi	r23, 0x06	; 6
     266:	7a 95       	dec	r23
     268:	f1 f7       	brne	.-4      	; 0x266 <set_control_voltage+0x40>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     26c:	80 81       	ld	r24, Z
     26e:	9c 91       	ld	r25, X
     270:	96 95       	lsr	r25
     272:	96 95       	lsr	r25
     274:	96 95       	lsr	r25
     276:	97 70       	andi	r25, 0x07	; 7
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_control_voltage+0x58>
     27a:	22 0f       	add	r18, r18
     27c:	33 1f       	adc	r19, r19
     27e:	9a 95       	dec	r25
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_control_voltage+0x54>
     282:	20 95       	com	r18
     284:	28 23       	and	r18, r24
     286:	20 83       	st	Z, r18
	
}	
     288:	08 95       	ret

0000028a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     28a:	83 b3       	in	r24, 0x13	; 19
     28c:	83 60       	ori	r24, 0x03	; 3
     28e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     294:	97 b1       	in	r25, 0x07	; 7
     296:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     298:	e9 ed       	ldi	r30, 0xD9	; 217
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	8f 60       	ori	r24, 0x0F	; 15
     2a0:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     2a2:	ea ed       	ldi	r30, 0xDA	; 218
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     2ac:	84 b3       	in	r24, 0x14	; 20
     2ae:	83 60       	ori	r24, 0x03	; 3
     2b0:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     2b2:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     2b4:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     2b6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     2b8:	a0 9a       	sbi	0x14, 0	; 20
}
     2ba:	08 95       	ret

000002bc <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	2e 97       	sbiw	r28, 0x0e	; 14
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     2d4:	28 e0       	ldi	r18, 0x08	; 8
     2d6:	29 83       	std	Y+1, r18	; 0x01
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	2a 83       	std	Y+2, r18	; 0x02
     2dc:	22 e0       	ldi	r18, 0x02	; 2
     2de:	2b 83       	std	Y+3, r18	; 0x03
     2e0:	24 e0       	ldi	r18, 0x04	; 4
     2e2:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2e4:	de 01       	movw	r26, r28
     2e6:	15 96       	adiw	r26, 0x05	; 5
     2e8:	e7 ee       	ldi	r30, 0xE7	; 231
     2ea:	f1 e0       	ldi	r31, 0x01	; 1
     2ec:	2a e0       	ldi	r18, 0x0A	; 10
     2ee:	01 90       	ld	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2f6:	2f ef       	ldi	r18, 0xFF	; 255
     2f8:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2fa:	ea ed       	ldi	r30, 0xDA	; 218
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	20 81       	ld	r18, Z
     300:	20 61       	ori	r18, 0x10	; 16
     302:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     304:	20 81       	ld	r18, Z
     306:	2f 7e       	andi	r18, 0xEF	; 239
     308:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     30a:	06 2f       	mov	r16, r22
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	de 01       	movw	r26, r28
     310:	a0 0f       	add	r26, r16
     312:	b1 1f       	adc	r27, r17
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	2c 91       	ld	r18, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     31c:	20 81       	ld	r18, Z
     31e:	20 62       	ori	r18, 0x20	; 32
     320:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     322:	20 81       	ld	r18, Z
     324:	2f 7d       	andi	r18, 0xDF	; 223
     326:	20 83       	st	Z, r18
     328:	48 2f       	mov	r20, r24
     32a:	59 2f       	mov	r21, r25
     32c:	87 e2       	ldi	r24, 0x27	; 39
     32e:	40 31       	cpi	r20, 0x10	; 16
     330:	58 07       	cpc	r21, r24
     332:	10 f0       	brcs	.+4      	; 0x338 <display_dec+0x7c>
     334:	4f e0       	ldi	r20, 0x0F	; 15
     336:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     338:	ca 01       	movw	r24, r20
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	9a 01       	movw	r18, r20
     344:	36 95       	lsr	r19
     346:	27 95       	ror	r18
     348:	28 0f       	add	r18, r24
     34a:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     34c:	c9 01       	movw	r24, r18
     34e:	92 95       	swap	r25
     350:	82 95       	swap	r24
     352:	8f 70       	andi	r24, 0x0F	; 15
     354:	89 27       	eor	r24, r25
     356:	9f 70       	andi	r25, 0x0F	; 15
     358:	89 27       	eor	r24, r25
     35a:	82 0f       	add	r24, r18
     35c:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     35e:	29 2f       	mov	r18, r25
     360:	33 27       	eor	r19, r19
     362:	82 0f       	add	r24, r18
     364:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     366:	96 95       	lsr	r25
     368:	87 95       	ror	r24
     36a:	96 95       	lsr	r25
     36c:	87 95       	ror	r24
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
	r = number - q2 * 10;
     372:	28 2f       	mov	r18, r24
     374:	22 0f       	add	r18, r18
     376:	32 2f       	mov	r19, r18
     378:	33 0f       	add	r19, r19
     37a:	33 0f       	add	r19, r19
     37c:	23 0f       	add	r18, r19
     37e:	e4 2f       	mov	r30, r20
     380:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	ea 30       	cpi	r30, 0x0A	; 10
     388:	10 f4       	brcc	.+4      	; 0x38e <display_dec+0xd2>
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	68 0f       	add	r22, r24
     390:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     392:	9b 01       	movw	r18, r22
     394:	36 95       	lsr	r19
     396:	27 95       	ror	r18
     398:	36 95       	lsr	r19
     39a:	27 95       	ror	r18
     39c:	ab 01       	movw	r20, r22
     39e:	56 95       	lsr	r21
     3a0:	47 95       	ror	r20
     3a2:	24 0f       	add	r18, r20
     3a4:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     3a6:	c9 01       	movw	r24, r18
     3a8:	92 95       	swap	r25
     3aa:	82 95       	swap	r24
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	89 27       	eor	r24, r25
     3b0:	9f 70       	andi	r25, 0x0F	; 15
     3b2:	89 27       	eor	r24, r25
     3b4:	82 0f       	add	r24, r18
     3b6:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     3b8:	29 2f       	mov	r18, r25
     3ba:	33 27       	eor	r19, r19
     3bc:	82 0f       	add	r24, r18
     3be:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     3c0:	96 95       	lsr	r25
     3c2:	87 95       	ror	r24
     3c4:	96 95       	lsr	r25
     3c6:	87 95       	ror	r24
     3c8:	96 95       	lsr	r25
     3ca:	87 95       	ror	r24
	r = qa - q3 * 10;
     3cc:	98 2f       	mov	r25, r24
     3ce:	99 0f       	add	r25, r25
     3d0:	29 2f       	mov	r18, r25
     3d2:	22 0f       	add	r18, r18
     3d4:	22 0f       	add	r18, r18
     3d6:	92 0f       	add	r25, r18
     3d8:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	6a 30       	cpi	r22, 0x0A	; 10
     3de:	08 f4       	brcc	.+2      	; 0x3e2 <display_dec+0x126>
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3e4:	41 ef       	ldi	r20, 0xF1	; 241
     3e6:	51 e0       	ldi	r21, 0x01	; 1
     3e8:	da 01       	movw	r26, r20
     3ea:	a6 0f       	add	r26, r22
     3ec:	b1 1d       	adc	r27, r1
     3ee:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3f0:	28 2f       	mov	r18, r24
     3f2:	26 95       	lsr	r18
     3f4:	26 95       	lsr	r18
     3f6:	98 2f       	mov	r25, r24
     3f8:	96 95       	lsr	r25
     3fa:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3fc:	29 2f       	mov	r18, r25
     3fe:	22 95       	swap	r18
     400:	2f 70       	andi	r18, 0x0F	; 15
     402:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     404:	96 95       	lsr	r25
     406:	96 95       	lsr	r25
     408:	96 95       	lsr	r25
	r = qb - q4 * 10;
     40a:	29 2f       	mov	r18, r25
     40c:	22 0f       	add	r18, r18
     40e:	62 2f       	mov	r22, r18
     410:	66 0f       	add	r22, r22
     412:	66 0f       	add	r22, r22
     414:	26 0f       	add	r18, r22
     416:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     418:	da 01       	movw	r26, r20
     41a:	a8 0f       	add	r26, r24
     41c:	b1 1d       	adc	r27, r1
     41e:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     420:	4e 0f       	add	r20, r30
     422:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     424:	fa 01       	movw	r30, r20
     426:	40 81       	ld	r20, Z
     428:	40 93 b3 02 	sts	0x02B3, r20
	digit_index[1] = tens_place;
     42c:	30 93 b4 02 	sts	0x02B4, r19
	digit_index[2] = hunds_place;
     430:	20 93 b5 02 	sts	0x02B5, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	8a 30       	cpi	r24, 0x0A	; 10
     438:	08 f4       	brcc	.+2      	; 0x43c <display_dec+0x180>
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     43e:	90 93 b6 02 	sts	0x02B6, r25

	cathode_byte = dec[digit_index[place]];
     442:	f8 01       	movw	r30, r16
     444:	ed 54       	subi	r30, 0x4D	; 77
     446:	fd 4f       	sbci	r31, 0xFD	; 253
     448:	80 81       	ld	r24, Z
     44a:	fe 01       	movw	r30, r28
     44c:	e8 0f       	add	r30, r24
     44e:	f1 1d       	adc	r31, r1
     450:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     452:	90 91 07 03 	lds	r25, 0x0307
     456:	92 30       	cpi	r25, 0x02	; 2
     458:	11 f4       	brne	.+4      	; 0x45e <display_dec+0x1a2>
     45a:	80 62       	ori	r24, 0x20	; 32
     45c:	03 c0       	rjmp	.+6      	; 0x464 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     45e:	91 30       	cpi	r25, 0x01	; 1
     460:	09 f4       	brne	.+2      	; 0x464 <display_dec+0x1a8>
     462:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     464:	80 95       	com	r24
     466:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     468:	ea ed       	ldi	r30, 0xDA	; 218
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	80 61       	ori	r24, 0x10	; 16
     470:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     472:	80 81       	ld	r24, Z
     474:	8f 7e       	andi	r24, 0xEF	; 239
     476:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     478:	2e 96       	adiw	r28, 0x0e	; 14
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     48e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     490:	66 23       	and	r22, r22
     492:	69 f4       	brne	.+26     	; 0x4ae <update_display+0x20>

		
			
		display_dec(number, place);
     494:	c0 91 b7 02 	lds	r28, 0x02B7
     498:	6c 2f       	mov	r22, r28
     49a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     49e:	8c 2f       	mov	r24, r28
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	80 93 b7 02 	sts	0x02B7, r24
     4a6:	c3 30       	cpi	r28, 0x03	; 3
     4a8:	11 f4       	brne	.+4      	; 0x4ae <update_display+0x20>
		{
			place = 0;
     4aa:	10 92 b7 02 	sts	0x02B7, r1
		
		
	}
	
	
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <__vector_10>:
#include "hardware.h"
#include "tune.h"
#include "display.h"
#include "clock.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	8f 93       	push	r24
     4be:	9f 93       	push	r25
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     4c4:	80 91 79 03 	lds	r24, 0x0379
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     4cc:	80 91 7a 03 	lds	r24, 0x037A
     4d0:	88 23       	and	r24, r24
     4d2:	a1 f4       	brne	.+40     	; 0x4fc <__vector_10+0x4a>
		count_finished = FALSE;
     4d4:	10 92 77 03 	sts	0x0377, r1
		no_overflow = TRUE;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     4de:	80 93 7a 03 	sts	0x037A, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     4e2:	e1 e8       	ldi	r30, 0x81	; 129
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	90 91 78 03 	lds	r25, 0x0378
     4ec:	89 2b       	or	r24, r25
     4ee:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4f0:	ef e6       	ldi	r30, 0x6F	; 111
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	81 60       	ori	r24, 0x01	; 1
     4f8:	80 83       	st	Z, r24
     4fa:	11 c0       	rjmp	.+34     	; 0x51e <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4fc:	e4 e8       	ldi	r30, 0x84	; 132
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	91 81       	ldd	r25, Z+1	; 0x01
     504:	90 93 76 03 	sts	0x0376, r25
     508:	80 93 75 03 	sts	0x0375, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     50c:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	80 93 77 03 	sts	0x0377, r24
		period_counter = 0;
     516:	10 92 7a 03 	sts	0x037A, r1
		TCNT1 = 0; //reset timer/counter 1
     51a:	11 82       	std	Z+1, r1	; 0x01
     51c:	10 82       	st	Z, r1
	}
	
	
	
	
}
     51e:	ff 91       	pop	r31
     520:	ef 91       	pop	r30
     522:	9f 91       	pop	r25
     524:	8f 91       	pop	r24
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     530:	1f 92       	push	r1
     532:	0f 92       	push	r0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     53a:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
	//PORTB ^= (1<<ARP_SYNC_LED);
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     556:	80 91 80 03 	lds	r24, 0x0380
     55a:	86 95       	lsr	r24
     55c:	90 91 81 03 	lds	r25, 0x0381
     560:	98 17       	cp	r25, r24
     562:	09 f4       	brne	.+2      	; 0x566 <__vector_7+0x1e>
		
		//PORTF &= ~(1<<GATE); //50% gate width
		PORTB &= ~ (1<<ARP_SYNC_LED);
     564:	2f 98       	cbi	0x05, 7	; 5
	}		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     566:	80 91 81 03 	lds	r24, 0x0381
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	80 93 81 03 	sts	0x0381, r24
     570:	90 91 80 03 	lds	r25, 0x0380
     574:	89 17       	cp	r24, r25
     576:	19 f4       	brne	.+6      	; 0x57e <__vector_7+0x36>
		//PORTB ^= (1<<ARP_SYNC_LED);
		system_clock.ppqn_counter = 0;
     578:	10 92 81 03 	sts	0x0381, r1
		PORTB |= (1<<ARP_SYNC_LED);
     57c:	2f 9a       	sbi	0x05, 7	; 5
		//PORTF |= (1<<GATE);
	}
	
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     58c:	68 3f       	cpi	r22, 0xF8	; 248
     58e:	19 f0       	breq	.+6      	; 0x596 <real_time_event+0xa>
     590:	6a 3f       	cpi	r22, 0xFA	; 250
     592:	c1 f4       	brne	.+48     	; 0x5c4 <real_time_event+0x38>
     594:	15 c0       	rjmp	.+42     	; 0x5c0 <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     596:	80 91 87 03 	lds	r24, 0x0387
     59a:	8f 5f       	subi	r24, 0xFF	; 255
     59c:	80 93 87 03 	sts	0x0387, r24
     5a0:	90 91 86 03 	lds	r25, 0x0386
     5a4:	89 17       	cp	r24, r25
     5a6:	71 f4       	brne	.+28     	; 0x5c4 <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     5a8:	2c 9a       	sbi	0x05, 4	; 5
     5aa:	86 e0       	ldi	r24, 0x06	; 6
     5ac:	8a 95       	dec	r24
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <real_time_event+0x20>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     5b2:	85 b1       	in	r24, 0x05	; 5
     5b4:	80 58       	subi	r24, 0x80	; 128
     5b6:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     5b8:	10 92 87 03 	sts	0x0387, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     5bc:	2c 98       	cbi	0x05, 4	; 5
     5be:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     5c0:	10 92 87 03 	sts	0x0387, r1
     5c4:	08 95       	ret

000005c6 <note_off_event>:
		PORTF |= (1<<GATE);
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     5c6:	84 2f       	mov	r24, r20
	remove_note(note);
     5c8:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     5cc:	80 91 b9 02 	lds	r24, 0x02B9
     5d0:	81 50       	subi	r24, 0x01	; 1
     5d2:	80 93 b9 02 	sts	0x02B9, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     5d6:	88 23       	and	r24, r24
     5d8:	09 f4       	brne	.+2      	; 0x5dc <note_off_event+0x16>
     5da:	89 98       	cbi	0x11, 1	; 17
     5dc:	08 95       	ret

000005de <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     5de:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     5e0:	90 91 ff 02 	lds	r25, 0x02FF
     5e4:	90 ff       	sbrs	r25, 0
     5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     5e8:	2c 9a       	sbi	0x05, 4	; 5
     5ea:	96 e0       	ldi	r25, 0x06	; 6
     5ec:	9a 95       	dec	r25
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <note_on_event+0xe>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     5f2:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	//value_to_display = note;
	midi_note_number = note;
     5f4:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) {
     5f8:	22 23       	and	r18, r18
     5fa:	59 f4       	brne	.+22     	; 0x612 <note_on_event+0x34>
		remove_note(note);
     5fc:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     600:	80 91 b9 02 	lds	r24, 0x02B9
     604:	81 50       	subi	r24, 0x01	; 1
     606:	80 93 b9 02 	sts	0x02B9, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     60a:	88 23       	and	r24, r24
     60c:	59 f4       	brne	.+22     	; 0x624 <note_on_event+0x46>
     60e:	89 98       	cbi	0x11, 1	; 17
     610:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     612:	62 2f       	mov	r22, r18
     614:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     618:	80 91 b9 02 	lds	r24, 0x02B9
     61c:	8f 5f       	subi	r24, 0xFF	; 255
     61e:	80 93 b9 02 	sts	0x02B9, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     622:	89 9a       	sbi	0x11, 1	; 17
     624:	08 95       	ret

00000626 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     626:	87 e2       	ldi	r24, 0x27	; 39
     628:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     62c:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     630:	88 e9       	ldi	r24, 0x98	; 152
     632:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     636:	08 95       	ret

00000638 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	4f 93       	push	r20
     648:	5f 93       	push	r21
     64a:	6f 93       	push	r22
     64c:	7f 93       	push	r23
     64e:	8f 93       	push	r24
     650:	9f 93       	push	r25
     652:	af 93       	push	r26
     654:	bf 93       	push	r27
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	0f 92       	push	r0
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     664:	80 91 c6 00 	lds	r24, 0x00C6
     668:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     66a:	8c e8       	ldi	r24, 0x8C	; 140
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	ae 01       	movw	r20, r28
     672:	4f 5f       	subi	r20, 0xFF	; 255
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	bf 91       	pop	r27
     686:	af 91       	pop	r26
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	7f 91       	pop	r23
     68e:	6f 91       	pop	r22
     690:	5f 91       	pop	r21
     692:	4f 91       	pop	r20
     694:	3f 91       	pop	r19
     696:	2f 91       	pop	r18
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     6a2:	c0 e8       	ldi	r28, 0x80	; 128
     6a4:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     6a6:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     6a8:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     6aa:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     6ac:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     6ae:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     6b0:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     6b2:	0e 94 a2 06 	call	0xd44	; 0xd44 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     6b6:	a9 ed       	ldi	r26, 0xD9	; 217
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	8c 91       	ld	r24, X
     6bc:	80 6c       	ori	r24, 0xC0	; 192
     6be:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     6c0:	ea ed       	ldi	r30, 0xDA	; 218
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	80 6c       	ori	r24, 0xC0	; 192
     6c8:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     6ca:	81 b1       	in	r24, 0x01	; 1
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     6d0:	92 b1       	in	r25, 0x02	; 2
     6d2:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     6d4:	8c 91       	ld	r24, X
     6d6:	80 63       	ori	r24, 0x30	; 48
     6d8:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     6da:	80 81       	ld	r24, Z
     6dc:	8f 7c       	andi	r24, 0xCF	; 207
     6de:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     6e0:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     6e2:	ec ed       	ldi	r30, 0xDC	; 220
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	80 62       	ori	r24, 0x20	; 32
     6ea:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     6ec:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     6ee:	ed ed       	ldi	r30, 0xDD	; 221
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	80 62       	ori	r24, 0x20	; 32
     6f6:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     6f8:	80 81       	ld	r24, Z
     6fa:	8f 7d       	andi	r24, 0xDF	; 223
     6fc:	80 83       	st	Z, r24
	DATA_BUS = 0;
     6fe:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     700:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     704:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     708:	0e 94 45 01 	call	0x28a	; 0x28a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     70c:	cc e8       	ldi	r28, 0x8C	; 140
     70e:	d3 e0       	ldi	r29, 0x03	; 3
     710:	ce 01       	movw	r24, r28
     712:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     716:	ce 01       	movw	r24, r28
     718:	6f ee       	ldi	r22, 0xEF	; 239
     71a:	72 e0       	ldi	r23, 0x02	; 2
     71c:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     720:	ce 01       	movw	r24, r28
     722:	63 ee       	ldi	r22, 0xE3	; 227
     724:	72 e0       	ldi	r23, 0x02	; 2
     726:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     72a:	ce 01       	movw	r24, r28
     72c:	66 ec       	ldi	r22, 0xC6	; 198
     72e:	72 e0       	ldi	r23, 0x02	; 2
     730:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     734:	0e 94 13 03 	call	0x626	; 0x626 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     738:	0e 94 c7 06 	call	0xd8e	; 0xd8e <update_spi>
	
	
	current_patch.number = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     742:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     744:	0e 94 c4 13 	call	0x2788	; 0x2788 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	0e 94 4a 09 	call	0x1294	; 0x1294 <load_patch>
	
	setup_system_clock();
     74e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     752:	88 e1       	ldi	r24, 0x18	; 24
     754:	80 93 80 03 	sts	0x0380, r24

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     758:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     75a:	0f 2e       	mov	r0, r31
     75c:	fd e7       	ldi	r31, 0x7D	; 125
     75e:	ef 2e       	mov	r14, r31
     760:	f3 e0       	ldi	r31, 0x03	; 3
     762:	ff 2e       	mov	r15, r31
     764:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     766:	0f 2e       	mov	r0, r31
     768:	f7 e0       	ldi	r31, 0x07	; 7
     76a:	cf 2e       	mov	r12, r31
     76c:	f3 e0       	ldi	r31, 0x03	; 3
     76e:	df 2e       	mov	r13, r31
     770:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     772:	bb 24       	eor	r11, r11
     774:	68 94       	set
     776:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     778:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     780:	80 91 fd 01 	lds	r24, 0x01FD
     784:	90 91 fe 01 	lds	r25, 0x01FE
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     78e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <scan_pots>
		update_control_voltages();
     792:	0e 94 83 04 	call	0x906	; 0x906 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     796:	80 91 b8 02 	lds	r24, 0x02B8
     79a:	98 2f       	mov	r25, r24
     79c:	9f 5f       	subi	r25, 0xFF	; 255
     79e:	90 93 b8 02 	sts	0x02B8, r25
     7a2:	85 30       	cpi	r24, 0x05	; 5
     7a4:	51 f7       	brne	.-44     	; 0x77a <main+0xd8>
		{
			switch_timer = 0;
     7a6:	10 92 b8 02 	sts	0x02B8, r1
			switch_press = 0; //reset global switch press flag
     7aa:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     7ae:	f7 01       	movw	r30, r14
     7b0:	c0 81       	ld	r28, Z
     7b2:	0e 94 76 14 	call	0x28ec	; 0x28ec <read_switch_port>
     7b6:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     7b8:	f6 01       	movw	r30, r12
     7ba:	90 81       	ld	r25, Z
     7bc:	91 30       	cpi	r25, 0x01	; 1
     7be:	11 f4       	brne	.+4      	; 0x7c4 <main+0x122>
     7c0:	cd 2f       	mov	r28, r29
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <main+0x124>
     7c4:	c0 e0       	ldi	r28, 0x00	; 0
     7c6:	c8 2b       	or	r28, r24
     7c8:	f7 01       	movw	r30, r14
     7ca:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     7cc:	0e 94 c7 06 	call	0xd8e	; 0xd8e <update_spi>
			if (switch_press) { 
     7d0:	80 91 c1 02 	lds	r24, 0x02C1
     7d4:	88 23       	and	r24, r24
     7d6:	39 f0       	breq	.+14     	; 0x7e6 <main+0x144>
				update_patch();
     7d8:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     7dc:	f6 01       	movw	r30, r12
     7de:	80 81       	ld	r24, Z
     7e0:	88 23       	and	r24, r24
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <main+0x144>
     7e4:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     7e6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <update_patch_programmer>
     7ea:	c7 cf       	rjmp	.-114    	; 0x77a <main+0xd8>

000007ec <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	c0 e0       	ldi	r28, 0x00	; 0
     800:	d1 e0       	ldi	r29, 0x01	; 1
     802:	02 ec       	ldi	r16, 0xC2	; 194
     804:	12 e0       	ldi	r17, 0x02	; 2
     806:	0f 2e       	mov	r0, r31
     808:	fc e3       	ldi	r31, 0x3C	; 60
     80a:	cf 2e       	mov	r12, r31
     80c:	dd 24       	eor	r13, r13
     80e:	f0 2d       	mov	r31, r0
     810:	cc 0e       	add	r12, r28
     812:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     814:	0f 2e       	mov	r0, r31
     816:	f7 e0       	ldi	r31, 0x07	; 7
     818:	ef 2e       	mov	r14, r31
     81a:	f3 e0       	ldi	r31, 0x03	; 3
     81c:	ff 2e       	mov	r15, r31
     81e:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     820:	bb 24       	eor	r11, r11
     822:	68 94       	set
     824:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     826:	88 81       	ld	r24, Y
     828:	99 81       	ldd	r25, Y+1	; 0x01
     82a:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     82e:	90 93 bc 02 	sts	0x02BC, r25
     832:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     836:	e8 81       	ld	r30, Y
     838:	f9 81       	ldd	r31, Y+1	; 0x01
     83a:	40 81       	ld	r20, Z
     83c:	21 81       	ldd	r18, Z+1	; 0x01
     83e:	52 2f       	mov	r21, r18
     840:	53 70       	andi	r21, 0x03	; 3
     842:	84 1b       	sub	r24, r20
     844:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     846:	95 95       	asr	r25
     848:	87 95       	ror	r24
     84a:	95 95       	asr	r25
     84c:	87 95       	ror	r24
     84e:	84 0f       	add	r24, r20
     850:	95 1f       	adc	r25, r21
     852:	80 83       	st	Z, r24
     854:	89 2f       	mov	r24, r25
     856:	83 70       	andi	r24, 0x03	; 3
     858:	2c 7f       	andi	r18, 0xFC	; 252
     85a:	28 2b       	or	r18, r24
     85c:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     85e:	e9 91       	ld	r30, Y+
     860:	f9 91       	ld	r31, Y+
     862:	92 81       	ldd	r25, Z+2	; 0x02
     864:	20 81       	ld	r18, Z
     866:	81 81       	ldd	r24, Z+1	; 0x01
     868:	38 2f       	mov	r19, r24
     86a:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     86c:	d7 01       	movw	r26, r14
     86e:	8c 91       	ld	r24, X
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	19 f0       	breq	.+6      	; 0x87a <scan_pots+0x8e>
     874:	83 81       	ldd	r24, Z+3	; 0x03
     876:	88 23       	and	r24, r24
     878:	24 f0       	brlt	.+8      	; 0x882 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     87a:	f8 01       	movw	r30, r16
     87c:	31 83       	std	Z+1, r19	; 0x01
     87e:	20 83       	st	Z, r18
     880:	14 c0       	rjmp	.+40     	; 0x8aa <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     882:	49 2f       	mov	r20, r25
     884:	43 50       	subi	r20, 0x03	; 3
     886:	c9 01       	movw	r24, r18
     888:	95 95       	asr	r25
     88a:	87 95       	ror	r24
     88c:	95 95       	asr	r25
     88e:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     890:	94 2f       	mov	r25, r20
     892:	98 1b       	sub	r25, r24
     894:	9a 3f       	cpi	r25, 0xFA	; 250
     896:	48 f4       	brcc	.+18     	; 0x8aa <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     898:	d8 01       	movw	r26, r16
     89a:	11 96       	adiw	r26, 0x01	; 1
     89c:	3c 93       	st	X, r19
     89e:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     8a0:	83 81       	ldd	r24, Z+3	; 0x03
     8a2:	8f 77       	andi	r24, 0x7F	; 127
     8a4:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     8a6:	f7 01       	movw	r30, r14
     8a8:	b0 82       	st	Z, r11
     8aa:	0e 5f       	subi	r16, 0xFE	; 254
     8ac:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     8ae:	cc 15       	cp	r28, r12
     8b0:	dd 05       	cpc	r29, r13
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <scan_pots+0xca>
     8b4:	b8 cf       	rjmp	.-144    	; 0x826 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     8b6:	8c e7       	ldi	r24, 0x7C	; 124
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     8be:	90 93 bc 02 	sts	0x02BC, r25
     8c2:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     8c6:	20 91 7c 01 	lds	r18, 0x017C
     8ca:	40 91 7d 01 	lds	r20, 0x017D
     8ce:	34 2f       	mov	r19, r20
     8d0:	33 70       	andi	r19, 0x03	; 3
     8d2:	82 1b       	sub	r24, r18
     8d4:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     8d6:	95 95       	asr	r25
     8d8:	87 95       	ror	r24
     8da:	95 95       	asr	r25
     8dc:	87 95       	ror	r24
     8de:	28 0f       	add	r18, r24
     8e0:	39 1f       	adc	r19, r25
     8e2:	20 93 7c 01 	sts	0x017C, r18
     8e6:	83 2f       	mov	r24, r19
     8e8:	83 70       	andi	r24, 0x03	; 3
     8ea:	4c 7f       	andi	r20, 0xFC	; 252
     8ec:	48 2b       	or	r20, r24
     8ee:	40 93 7d 01 	sts	0x017D, r20
	
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	08 95       	ret

00000906 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     90a:	60 91 c2 02 	lds	r22, 0x02C2
     90e:	70 91 c3 02 	lds	r23, 0x02C3
     912:	62 95       	swap	r22
     914:	72 95       	swap	r23
     916:	70 7f       	andi	r23, 0xF0	; 240
     918:	76 27       	eor	r23, r22
     91a:	60 7f       	andi	r22, 0xF0	; 240
     91c:	76 27       	eor	r23, r22
     91e:	84 ee       	ldi	r24, 0xE4	; 228
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     926:	60 91 c4 02 	lds	r22, 0x02C4
     92a:	70 91 c5 02 	lds	r23, 0x02C5
     92e:	62 95       	swap	r22
     930:	72 95       	swap	r23
     932:	70 7f       	andi	r23, 0xF0	; 240
     934:	76 27       	eor	r23, r22
     936:	60 7f       	andi	r22, 0xF0	; 240
     938:	76 27       	eor	r23, r22
     93a:	83 ee       	ldi	r24, 0xE3	; 227
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     942:	60 91 c6 02 	lds	r22, 0x02C6
     946:	70 91 c7 02 	lds	r23, 0x02C7
     94a:	66 0f       	add	r22, r22
     94c:	77 1f       	adc	r23, r23
     94e:	66 0f       	add	r22, r22
     950:	77 1f       	adc	r23, r23
     952:	66 0f       	add	r22, r22
     954:	77 1f       	adc	r23, r23
     956:	82 ee       	ldi	r24, 0xE2	; 226
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     95e:	60 91 c8 02 	lds	r22, 0x02C8
     962:	70 91 c9 02 	lds	r23, 0x02C9
     966:	62 95       	swap	r22
     968:	72 95       	swap	r23
     96a:	70 7f       	andi	r23, 0xF0	; 240
     96c:	76 27       	eor	r23, r22
     96e:	60 7f       	andi	r22, 0xF0	; 240
     970:	76 27       	eor	r23, r22
     972:	82 eb       	ldi	r24, 0xB2	; 178
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     97a:	60 91 ca 02 	lds	r22, 0x02CA
     97e:	70 91 cb 02 	lds	r23, 0x02CB
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	66 0f       	add	r22, r22
     988:	77 1f       	adc	r23, r23
     98a:	66 0f       	add	r22, r22
     98c:	77 1f       	adc	r23, r23
     98e:	81 ee       	ldi	r24, 0xE1	; 225
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     996:	60 91 cc 02 	lds	r22, 0x02CC
     99a:	70 91 cd 02 	lds	r23, 0x02CD
     99e:	62 95       	swap	r22
     9a0:	72 95       	swap	r23
     9a2:	70 7f       	andi	r23, 0xF0	; 240
     9a4:	76 27       	eor	r23, r22
     9a6:	60 7f       	andi	r22, 0xF0	; 240
     9a8:	76 27       	eor	r23, r22
     9aa:	80 ee       	ldi	r24, 0xE0	; 224
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     9b2:	60 91 ce 02 	lds	r22, 0x02CE
     9b6:	70 91 cf 02 	lds	r23, 0x02CF
     9ba:	62 95       	swap	r22
     9bc:	72 95       	swap	r23
     9be:	70 7f       	andi	r23, 0xF0	; 240
     9c0:	76 27       	eor	r23, r22
     9c2:	60 7f       	andi	r22, 0xF0	; 240
     9c4:	76 27       	eor	r23, r22
     9c6:	8f ed       	ldi	r24, 0xDF	; 223
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     9ce:	60 91 d0 02 	lds	r22, 0x02D0
     9d2:	70 91 d1 02 	lds	r23, 0x02D1
     9d6:	62 95       	swap	r22
     9d8:	72 95       	swap	r23
     9da:	70 7f       	andi	r23, 0xF0	; 240
     9dc:	76 27       	eor	r23, r22
     9de:	60 7f       	andi	r22, 0xF0	; 240
     9e0:	76 27       	eor	r23, r22
     9e2:	8e ed       	ldi	r24, 0xDE	; 222
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     9ea:	80 91 d4 02 	lds	r24, 0x02D4
     9ee:	90 91 d5 02 	lds	r25, 0x02D5
     9f2:	c0 e0       	ldi	r28, 0x00	; 0
     9f4:	d2 e0       	ldi	r29, 0x02	; 2
     9f6:	c8 1b       	sub	r28, r24
     9f8:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     9fa:	60 91 70 03 	lds	r22, 0x0370
     9fe:	70 91 71 03 	lds	r23, 0x0371
     a02:	60 50       	subi	r22, 0x00	; 0
     a04:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     a06:	80 91 d2 02 	lds	r24, 0x02D2
     a0a:	90 91 d3 02 	lds	r25, 0x02D3
     a0e:	68 1b       	sub	r22, r24
     a10:	79 0b       	sbc	r23, r25
     a12:	6c 0f       	add	r22, r28
     a14:	7d 1f       	adc	r23, r29
     a16:	8d ed       	ldi	r24, 0xDD	; 221
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     a1e:	60 91 72 03 	lds	r22, 0x0372
     a22:	70 91 73 03 	lds	r23, 0x0373
     a26:	6c 0f       	add	r22, r28
     a28:	7d 1f       	adc	r23, r29
     a2a:	8c ed       	ldi	r24, 0xDC	; 220
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     a32:	60 91 d6 02 	lds	r22, 0x02D6
     a36:	70 91 d7 02 	lds	r23, 0x02D7
     a3a:	62 95       	swap	r22
     a3c:	72 95       	swap	r23
     a3e:	70 7f       	andi	r23, 0xF0	; 240
     a40:	76 27       	eor	r23, r22
     a42:	60 7f       	andi	r22, 0xF0	; 240
     a44:	76 27       	eor	r23, r22
     a46:	8b ed       	ldi	r24, 0xDB	; 219
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     a4e:	60 91 da 02 	lds	r22, 0x02DA
     a52:	70 91 db 02 	lds	r23, 0x02DB
     a56:	62 95       	swap	r22
     a58:	72 95       	swap	r23
     a5a:	70 7f       	andi	r23, 0xF0	; 240
     a5c:	76 27       	eor	r23, r22
     a5e:	60 7f       	andi	r22, 0xF0	; 240
     a60:	76 27       	eor	r23, r22
     a62:	8a ed       	ldi	r24, 0xDA	; 218
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     a6a:	60 91 dc 02 	lds	r22, 0x02DC
     a6e:	70 91 dd 02 	lds	r23, 0x02DD
     a72:	62 95       	swap	r22
     a74:	72 95       	swap	r23
     a76:	70 7f       	andi	r23, 0xF0	; 240
     a78:	76 27       	eor	r23, r22
     a7a:	60 7f       	andi	r22, 0xF0	; 240
     a7c:	76 27       	eor	r23, r22
     a7e:	89 ed       	ldi	r24, 0xD9	; 217
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     a86:	60 91 7c 01 	lds	r22, 0x017C
     a8a:	80 91 7d 01 	lds	r24, 0x017D
     a8e:	78 2f       	mov	r23, r24
     a90:	73 70       	andi	r23, 0x03	; 3
     a92:	62 95       	swap	r22
     a94:	72 95       	swap	r23
     a96:	70 7f       	andi	r23, 0xF0	; 240
     a98:	76 27       	eor	r23, r22
     a9a:	60 7f       	andi	r22, 0xF0	; 240
     a9c:	76 27       	eor	r23, r22
     a9e:	88 ed       	ldi	r24, 0xD8	; 216
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     aa6:	60 91 de 02 	lds	r22, 0x02DE
     aaa:	70 91 df 02 	lds	r23, 0x02DF
     aae:	62 95       	swap	r22
     ab0:	72 95       	swap	r23
     ab2:	70 7f       	andi	r23, 0xF0	; 240
     ab4:	76 27       	eor	r23, r22
     ab6:	60 7f       	andi	r22, 0xF0	; 240
     ab8:	76 27       	eor	r23, r22
     aba:	87 ed       	ldi	r24, 0xD7	; 215
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     ac2:	60 91 e0 02 	lds	r22, 0x02E0
     ac6:	70 91 e1 02 	lds	r23, 0x02E1
     aca:	62 95       	swap	r22
     acc:	72 95       	swap	r23
     ace:	70 7f       	andi	r23, 0xF0	; 240
     ad0:	76 27       	eor	r23, r22
     ad2:	60 7f       	andi	r22, 0xF0	; 240
     ad4:	76 27       	eor	r23, r22
     ad6:	86 ed       	ldi	r24, 0xD6	; 214
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     ade:	60 91 e2 02 	lds	r22, 0x02E2
     ae2:	70 91 e3 02 	lds	r23, 0x02E3
     ae6:	62 95       	swap	r22
     ae8:	72 95       	swap	r23
     aea:	70 7f       	andi	r23, 0xF0	; 240
     aec:	76 27       	eor	r23, r22
     aee:	60 7f       	andi	r22, 0xF0	; 240
     af0:	76 27       	eor	r23, r22
     af2:	85 ed       	ldi	r24, 0xD5	; 213
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     afa:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     afe:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     b00:	88 30       	cpi	r24, 0x08	; 8
     b02:	08 f4       	brcc	.+2      	; 0xb06 <update_control_voltages+0x200>
     b04:	c8 e0       	ldi	r28, 0x08	; 8
	value_to_display = current_patch.number + 100*midi_clock.divider; //100*note;
     b06:	60 91 03 03 	lds	r22, 0x0303
     b0a:	40 91 86 03 	lds	r20, 0x0386
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	24 e6       	ldi	r18, 0x64	; 100
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	42 9f       	mul	r20, r18
     b16:	c0 01       	movw	r24, r0
     b18:	43 9f       	mul	r20, r19
     b1a:	90 0d       	add	r25, r0
     b1c:	52 9f       	mul	r21, r18
     b1e:	90 0d       	add	r25, r0
     b20:	11 24       	eor	r1, r1
     b22:	86 0f       	add	r24, r22
     b24:	91 1d       	adc	r25, r1
     b26:	90 93 fe 01 	sts	0x01FE, r25
     b2a:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     b2e:	8c 2f       	mov	r24, r28
     b30:	88 50       	subi	r24, 0x08	; 8
     b32:	6c e0       	ldi	r22, 0x0C	; 12
     b34:	73 e0       	ldi	r23, 0x03	; 3
     b36:	0e 94 ed 13 	call	0x27da	; 0x27da <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     b3a:	bc 01       	movw	r22, r24
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	20 91 e6 02 	lds	r18, 0x02E6
     b44:	30 91 e7 02 	lds	r19, 0x02E7
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__mulsi3>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	07 2e       	mov	r0, r23
     b56:	7a e0       	ldi	r23, 0x0A	; 10
     b58:	b6 95       	lsr	r27
     b5a:	a7 95       	ror	r26
     b5c:	97 95       	ror	r25
     b5e:	87 95       	ror	r24
     b60:	7a 95       	dec	r23
     b62:	d1 f7       	brne	.-12     	; 0xb58 <update_control_voltages+0x252>
     b64:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     b66:	60 91 e4 02 	lds	r22, 0x02E4
     b6a:	70 91 e5 02 	lds	r23, 0x02E5
     b6e:	62 95       	swap	r22
     b70:	72 95       	swap	r23
     b72:	70 7f       	andi	r23, 0xF0	; 240
     b74:	76 27       	eor	r23, r22
     b76:	60 7f       	andi	r22, 0xF0	; 240
     b78:	76 27       	eor	r23, r22
     b7a:	86 0f       	add	r24, r22
     b7c:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     b7e:	bc 01       	movw	r22, r24
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	60 30       	cpi	r22, 0x00	; 0
     b84:	78 07       	cpc	r23, r24
     b86:	10 f0       	brcs	.+4      	; 0xb8c <update_control_voltages+0x286>
     b88:	6f ef       	ldi	r22, 0xFF	; 255
     b8a:	7f e3       	ldi	r23, 0x3F	; 63
     b8c:	84 ed       	ldi	r24, 0xD4	; 212
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     b94:	60 91 e8 02 	lds	r22, 0x02E8
     b98:	70 91 e9 02 	lds	r23, 0x02E9
     b9c:	62 95       	swap	r22
     b9e:	72 95       	swap	r23
     ba0:	70 7f       	andi	r23, 0xF0	; 240
     ba2:	76 27       	eor	r23, r22
     ba4:	60 7f       	andi	r22, 0xF0	; 240
     ba6:	76 27       	eor	r23, r22
     ba8:	82 ed       	ldi	r24, 0xD2	; 210
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     bb0:	60 91 ea 02 	lds	r22, 0x02EA
     bb4:	70 91 eb 02 	lds	r23, 0x02EB
     bb8:	62 95       	swap	r22
     bba:	72 95       	swap	r23
     bbc:	70 7f       	andi	r23, 0xF0	; 240
     bbe:	76 27       	eor	r23, r22
     bc0:	60 7f       	andi	r22, 0xF0	; 240
     bc2:	76 27       	eor	r23, r22
     bc4:	81 ed       	ldi	r24, 0xD1	; 209
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     bcc:	60 91 ec 02 	lds	r22, 0x02EC
     bd0:	70 91 ed 02 	lds	r23, 0x02ED
     bd4:	62 95       	swap	r22
     bd6:	72 95       	swap	r23
     bd8:	70 7f       	andi	r23, 0xF0	; 240
     bda:	76 27       	eor	r23, r22
     bdc:	60 7f       	andi	r22, 0xF0	; 240
     bde:	76 27       	eor	r23, r22
     be0:	80 ed       	ldi	r24, 0xD0	; 208
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     be8:	60 91 ee 02 	lds	r22, 0x02EE
     bec:	70 91 ef 02 	lds	r23, 0x02EF
     bf0:	62 95       	swap	r22
     bf2:	72 95       	swap	r23
     bf4:	70 7f       	andi	r23, 0xF0	; 240
     bf6:	76 27       	eor	r23, r22
     bf8:	60 7f       	andi	r22, 0xF0	; 240
     bfa:	76 27       	eor	r23, r22
     bfc:	8f ec       	ldi	r24, 0xCF	; 207
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     c04:	60 91 f0 02 	lds	r22, 0x02F0
     c08:	70 91 f1 02 	lds	r23, 0x02F1
     c0c:	62 95       	swap	r22
     c0e:	72 95       	swap	r23
     c10:	70 7f       	andi	r23, 0xF0	; 240
     c12:	76 27       	eor	r23, r22
     c14:	60 7f       	andi	r22, 0xF0	; 240
     c16:	76 27       	eor	r23, r22
     c18:	8e ec       	ldi	r24, 0xCE	; 206
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     c20:	60 91 f2 02 	lds	r22, 0x02F2
     c24:	70 91 f3 02 	lds	r23, 0x02F3
     c28:	62 95       	swap	r22
     c2a:	72 95       	swap	r23
     c2c:	70 7f       	andi	r23, 0xF0	; 240
     c2e:	76 27       	eor	r23, r22
     c30:	60 7f       	andi	r22, 0xF0	; 240
     c32:	76 27       	eor	r23, r22
     c34:	8d ec       	ldi	r24, 0xCD	; 205
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     c3c:	60 91 f4 02 	lds	r22, 0x02F4
     c40:	70 91 f5 02 	lds	r23, 0x02F5
     c44:	62 95       	swap	r22
     c46:	72 95       	swap	r23
     c48:	70 7f       	andi	r23, 0xF0	; 240
     c4a:	76 27       	eor	r23, r22
     c4c:	60 7f       	andi	r22, 0xF0	; 240
     c4e:	76 27       	eor	r23, r22
     c50:	8c ec       	ldi	r24, 0xCC	; 204
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     c58:	60 91 f8 02 	lds	r22, 0x02F8
     c5c:	70 91 f9 02 	lds	r23, 0x02F9
     c60:	62 95       	swap	r22
     c62:	72 95       	swap	r23
     c64:	70 7f       	andi	r23, 0xF0	; 240
     c66:	76 27       	eor	r23, r22
     c68:	60 7f       	andi	r22, 0xF0	; 240
     c6a:	76 27       	eor	r23, r22
     c6c:	8a ec       	ldi	r24, 0xCA	; 202
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     c74:	60 91 f6 02 	lds	r22, 0x02F6
     c78:	70 91 f7 02 	lds	r23, 0x02F7
     c7c:	62 95       	swap	r22
     c7e:	72 95       	swap	r23
     c80:	70 7f       	andi	r23, 0xF0	; 240
     c82:	76 27       	eor	r23, r22
     c84:	60 7f       	andi	r22, 0xF0	; 240
     c86:	76 27       	eor	r23, r22
     c88:	8b ec       	ldi	r24, 0xCB	; 203
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     c90:	60 91 fc 02 	lds	r22, 0x02FC
     c94:	70 91 fd 02 	lds	r23, 0x02FD
     c98:	62 95       	swap	r22
     c9a:	72 95       	swap	r23
     c9c:	70 7f       	andi	r23, 0xF0	; 240
     c9e:	76 27       	eor	r23, r22
     ca0:	60 7f       	andi	r22, 0xF0	; 240
     ca2:	76 27       	eor	r23, r22
     ca4:	88 ec       	ldi	r24, 0xC8	; 200
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     cac:	60 91 fa 02 	lds	r22, 0x02FA
     cb0:	70 91 fb 02 	lds	r23, 0x02FB
     cb4:	62 95       	swap	r22
     cb6:	72 95       	swap	r23
     cb8:	70 7f       	andi	r23, 0xF0	; 240
     cba:	76 27       	eor	r23, r22
     cbc:	60 7f       	andi	r22, 0xF0	; 240
     cbe:	76 27       	eor	r23, r22
     cc0:	89 ec       	ldi	r24, 0xC9	; 201
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     cc8:	8c 2f       	mov	r24, r28
     cca:	6f e0       	ldi	r22, 0x0F	; 15
     ccc:	0e 94 2a 0c 	call	0x1854	; 0x1854 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     cd0:	6e e4       	ldi	r22, 0x4E	; 78
     cd2:	73 e0       	ldi	r23, 0x03	; 3
     cd4:	0e 94 ed 13 	call	0x27da	; 0x27da <interpolate_pitch_cv>
     cd8:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     cda:	86 ee       	ldi	r24, 0xE6	; 230
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     ce2:	8c 2f       	mov	r24, r28
     ce4:	60 ef       	ldi	r22, 0xF0	; 240
     ce6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     cea:	6c e2       	ldi	r22, 0x2C	; 44
     cec:	73 e0       	ldi	r23, 0x03	; 3
     cee:	0e 94 ed 13 	call	0x27da	; 0x27da <interpolate_pitch_cv>
     cf2:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     cf4:	85 ee       	ldi	r24, 0xE5	; 229
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     cfc:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     cfe:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     d00:	20 91 88 01 	lds	r18, 0x0188
     d04:	80 91 89 01 	lds	r24, 0x0189
     d08:	38 2f       	mov	r19, r24
     d0a:	33 70       	andi	r19, 0x03	; 3
     d0c:	83 ef       	ldi	r24, 0xF3	; 243
     d0e:	94 e0       	ldi	r25, 0x04	; 4
     d10:	82 1b       	sub	r24, r18
     d12:	93 0b       	sbc	r25, r19
     d14:	90 93 83 03 	sts	0x0383, r25
     d18:	80 93 82 03 	sts	0x0382, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     d1c:	20 91 84 03 	lds	r18, 0x0384
     d20:	30 91 85 03 	lds	r19, 0x0385
     d24:	82 17       	cp	r24, r18
     d26:	93 07       	cpc	r25, r19
     d28:	11 f0       	breq	.+4      	; 0xd2e <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
     d2a:	0e 94 02 01 	call	0x204	; 0x204 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     d2e:	80 91 82 03 	lds	r24, 0x0382
     d32:	90 91 83 03 	lds	r25, 0x0383
     d36:	90 93 85 03 	sts	0x0385, r25
     d3a:	80 93 84 03 	sts	0x0384, r24
	
}			
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     d44:	84 b1       	in	r24, 0x04	; 4
     d46:	87 62       	ori	r24, 0x27	; 39
     d48:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     d4a:	ec ed       	ldi	r30, 0xDC	; 220
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8c 65       	ori	r24, 0x5C	; 92
     d52:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     d54:	85 b1       	in	r24, 0x05	; 5
     d56:	89 7d       	andi	r24, 0xD9	; 217
     d58:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     d5a:	ed ed       	ldi	r30, 0xDD	; 221
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	83 7f       	andi	r24, 0xF3	; 243
     d62:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     d64:	80 e5       	ldi	r24, 0x50	; 80
     d66:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     d68:	80 81       	ld	r24, Z
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     d6e:	80 81       	ld	r24, Z
     d70:	87 7f       	andi	r24, 0xF7	; 247
     d72:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     d74:	80 81       	ld	r24, Z
     d76:	88 60       	ori	r24, 0x08	; 8
     d78:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     d7a:	80 81       	ld	r24, Z
     d7c:	8f 7e       	andi	r24, 0xEF	; 239
     d7e:	80 83       	st	Z, r24
	
}
     d80:	08 95       	ret

00000d82 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     d82:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     d84:	0d b4       	in	r0, 0x2d	; 45
     d86:	07 fe       	sbrs	r0, 7
     d88:	fd cf       	rjmp	.-6      	; 0xd84 <spi_shift_byte+0x2>
	return SPDR;
     d8a:	8e b5       	in	r24, 0x2e	; 46
	
}
     d8c:	08 95       	ret

00000d8e <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     d8e:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     d90:	80 91 02 03 	lds	r24, 0x0302
     d94:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     d98:	90 91 c1 02 	lds	r25, 0x02C1
     d9c:	98 2b       	or	r25, r24
     d9e:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     da2:	20 91 bf 02 	lds	r18, 0x02BF
     da6:	98 2f       	mov	r25, r24
     da8:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     daa:	89 2f       	mov	r24, r25
     dac:	82 27       	eor	r24, r18
     dae:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     db2:	89 23       	and	r24, r25
     db4:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     db8:	90 91 7b 03 	lds	r25, 0x037B
     dbc:	89 27       	eor	r24, r25
     dbe:	80 93 7b 03 	sts	0x037B, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     dc2:	80 91 01 03 	lds	r24, 0x0301
     dc6:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     dca:	90 91 c1 02 	lds	r25, 0x02C1
     dce:	98 2b       	or	r25, r24
     dd0:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     dd4:	20 91 bd 02 	lds	r18, 0x02BD
     dd8:	98 2f       	mov	r25, r24
     dda:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     ddc:	89 2f       	mov	r24, r25
     dde:	82 27       	eor	r24, r18
     de0:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     de4:	89 23       	and	r24, r25
     de6:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     dea:	90 91 7c 03 	lds	r25, 0x037C
     dee:	89 27       	eor	r24, r25
     df0:	80 93 7c 03 	sts	0x037C, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     df4:	80 91 00 03 	lds	r24, 0x0300
     df8:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     dfc:	80 91 ff 02 	lds	r24, 0x02FF
     e00:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     e04:	30 91 7c 03 	lds	r19, 0x037C
     e08:	36 95       	lsr	r19
     e0a:	36 95       	lsr	r19
     e0c:	36 95       	lsr	r19
     e0e:	34 70       	andi	r19, 0x04	; 4
     e10:	80 91 07 03 	lds	r24, 0x0307
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	11 f4       	brne	.+4      	; 0xe1c <update_spi+0x8e>
     e18:	80 e8       	ldi	r24, 0x80	; 128
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <update_spi+0x90>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
     e1e:	90 91 7d 03 	lds	r25, 0x037D
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     e22:	29 2f       	mov	r18, r25
     e24:	22 1f       	adc	r18, r18
     e26:	22 27       	eor	r18, r18
     e28:	22 1f       	adc	r18, r18
     e2a:	22 95       	swap	r18
     e2c:	22 0f       	add	r18, r18
     e2e:	22 0f       	add	r18, r18
     e30:	20 7c       	andi	r18, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     e32:	23 2b       	or	r18, r19
     e34:	96 95       	lsr	r25
     e36:	96 95       	lsr	r25
     e38:	96 95       	lsr	r25
     e3a:	91 70       	andi	r25, 0x01	; 1
     e3c:	92 2b       	or	r25, r18
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     e3e:	89 2b       	or	r24, r25
     e40:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     e44:	ed ed       	ldi	r30, 0xDD	; 221
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	87 7f       	andi	r24, 0xF7	; 247
     e4c:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     e4e:	80 81       	ld	r24, Z
     e50:	88 60       	ori	r24, 0x08	; 8
     e52:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     e54:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     e56:	08 95       	ret

00000e58 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     e58:	a0 e0       	ldi	r26, 0x00	; 0
     e5a:	b1 e0       	ldi	r27, 0x01	; 1
     e5c:	9d 01       	movw	r18, r26
     e5e:	24 5c       	subi	r18, 0xC4	; 196
     e60:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= 29; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     e62:	ed 91       	ld	r30, X+
     e64:	fc 91       	ld	r31, X
     e66:	11 97       	sbiw	r26, 0x01	; 1
     e68:	80 81       	ld	r24, Z
     e6a:	41 81       	ldd	r20, Z+1	; 0x01
     e6c:	94 2f       	mov	r25, r20
     e6e:	93 70       	andi	r25, 0x03	; 3
     e70:	95 95       	asr	r25
     e72:	87 95       	ror	r24
     e74:	95 95       	asr	r25
     e76:	87 95       	ror	r24
     e78:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     e7a:	ed 91       	ld	r30, X+
     e7c:	fd 91       	ld	r31, X+
     e7e:	83 81       	ldd	r24, Z+3	; 0x03
     e80:	80 68       	ori	r24, 0x80	; 128
     e82:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= 29; i++) {
     e84:	a2 17       	cp	r26, r18
     e86:	b3 07       	cpc	r27, r19
     e88:	61 f7       	brne	.-40     	; 0xe62 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     e8a:	08 95       	ret

00000e8c <unlock_pots>:

void unlock_pots(void) {
     e8c:	e0 e0       	ldi	r30, 0x00	; 0
     e8e:	f1 e0       	ldi	r31, 0x01	; 1
     e90:	cf 01       	movw	r24, r30
     e92:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked = 0;
     e94:	a1 91       	ld	r26, Z+
     e96:	b1 91       	ld	r27, Z+
     e98:	13 96       	adiw	r26, 0x03	; 3
     e9a:	2c 91       	ld	r18, X
     e9c:	13 97       	sbiw	r26, 0x03	; 3
     e9e:	2f 77       	andi	r18, 0x7F	; 127
     ea0:	13 96       	adiw	r26, 0x03	; 3
     ea2:	2c 93       	st	X, r18
     ea4:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= 29; i++) {
     ea6:	e8 17       	cp	r30, r24
     ea8:	f9 07       	cpc	r31, r25
     eaa:	a1 f7       	brne	.-24     	; 0xe94 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
     eac:	08 95       	ret

00000eae <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	ab 97       	sbiw	r28, 0x2b	; 43
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     ec6:	ee ed       	ldi	r30, 0xDE	; 222
     ec8:	f2 e0       	ldi	r31, 0x02	; 2
     eca:	20 91 de 02 	lds	r18, 0x02DE
     ece:	82 2f       	mov	r24, r18
     ed0:	82 95       	swap	r24
     ed2:	80 7f       	andi	r24, 0xF0	; 240
     ed4:	22 95       	swap	r18
     ed6:	2f 70       	andi	r18, 0x0F	; 15
     ed8:	90 91 df 02 	lds	r25, 0x02DF
     edc:	93 70       	andi	r25, 0x03	; 3
     ede:	92 95       	swap	r25
     ee0:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     ee2:	df 01       	movw	r26, r30
     ee4:	5a 97       	sbiw	r26, 0x1a	; 26
     ee6:	3c 91       	ld	r19, X
     ee8:	53 2f       	mov	r21, r19
     eea:	55 0f       	add	r21, r21
     eec:	55 0f       	add	r21, r21
     eee:	4a 81       	ldd	r20, Y+2	; 0x02
     ef0:	43 70       	andi	r20, 0x03	; 3
     ef2:	45 2b       	or	r20, r21
     ef4:	4a 83       	std	Y+2, r20	; 0x02
     ef6:	63 2f       	mov	r22, r19
     ef8:	62 95       	swap	r22
     efa:	66 95       	lsr	r22
     efc:	66 95       	lsr	r22
     efe:	63 70       	andi	r22, 0x03	; 3
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	4c 91       	ld	r20, X
     f04:	43 70       	andi	r20, 0x03	; 3
     f06:	44 0f       	add	r20, r20
     f08:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     f0a:	df 01       	movw	r26, r30
     f0c:	58 97       	sbiw	r26, 0x18	; 24
     f0e:	3c 91       	ld	r19, X
     f10:	53 2f       	mov	r21, r19
     f12:	52 95       	swap	r21
     f14:	50 7f       	andi	r21, 0xF0	; 240
     f16:	46 2b       	or	r20, r22
     f18:	45 2b       	or	r20, r21
     f1a:	4b 83       	std	Y+3, r20	; 0x03
     f1c:	63 2f       	mov	r22, r19
     f1e:	62 95       	swap	r22
     f20:	6f 70       	andi	r22, 0x0F	; 15
     f22:	11 96       	adiw	r26, 0x01	; 1
     f24:	4c 91       	ld	r20, X
     f26:	43 70       	andi	r20, 0x03	; 3
     f28:	42 95       	swap	r20
     f2a:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     f2c:	df 01       	movw	r26, r30
     f2e:	56 97       	sbiw	r26, 0x16	; 22
     f30:	3c 91       	ld	r19, X
     f32:	53 2f       	mov	r21, r19
     f34:	52 95       	swap	r21
     f36:	55 0f       	add	r21, r21
     f38:	55 0f       	add	r21, r21
     f3a:	50 7c       	andi	r21, 0xC0	; 192
     f3c:	46 2b       	or	r20, r22
     f3e:	45 2b       	or	r20, r21
     f40:	4c 83       	std	Y+4, r20	; 0x04
     f42:	11 96       	adiw	r26, 0x01	; 1
     f44:	4c 91       	ld	r20, X
     f46:	42 95       	swap	r20
     f48:	44 0f       	add	r20, r20
     f4a:	44 0f       	add	r20, r20
     f4c:	40 7c       	andi	r20, 0xC0	; 192
     f4e:	36 95       	lsr	r19
     f50:	36 95       	lsr	r19
     f52:	34 2b       	or	r19, r20
     f54:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     f56:	df 01       	movw	r26, r30
     f58:	54 97       	sbiw	r26, 0x14	; 20
     f5a:	3c 91       	ld	r19, X
     f5c:	3e 83       	std	Y+6, r19	; 0x06
     f5e:	11 96       	adiw	r26, 0x01	; 1
     f60:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     f62:	df 01       	movw	r26, r30
     f64:	52 97       	sbiw	r26, 0x12	; 18
     f66:	3c 91       	ld	r19, X
     f68:	53 2f       	mov	r21, r19
     f6a:	55 0f       	add	r21, r21
     f6c:	55 0f       	add	r21, r21
     f6e:	43 70       	andi	r20, 0x03	; 3
     f70:	45 2b       	or	r20, r21
     f72:	4f 83       	std	Y+7, r20	; 0x07
     f74:	63 2f       	mov	r22, r19
     f76:	62 95       	swap	r22
     f78:	66 95       	lsr	r22
     f7a:	66 95       	lsr	r22
     f7c:	63 70       	andi	r22, 0x03	; 3
     f7e:	11 96       	adiw	r26, 0x01	; 1
     f80:	4c 91       	ld	r20, X
     f82:	43 70       	andi	r20, 0x03	; 3
     f84:	44 0f       	add	r20, r20
     f86:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     f88:	df 01       	movw	r26, r30
     f8a:	50 97       	sbiw	r26, 0x10	; 16
     f8c:	3c 91       	ld	r19, X
     f8e:	53 2f       	mov	r21, r19
     f90:	52 95       	swap	r21
     f92:	50 7f       	andi	r21, 0xF0	; 240
     f94:	46 2b       	or	r20, r22
     f96:	45 2b       	or	r20, r21
     f98:	48 87       	std	Y+8, r20	; 0x08
     f9a:	63 2f       	mov	r22, r19
     f9c:	62 95       	swap	r22
     f9e:	6f 70       	andi	r22, 0x0F	; 15
     fa0:	11 96       	adiw	r26, 0x01	; 1
     fa2:	4c 91       	ld	r20, X
     fa4:	43 70       	andi	r20, 0x03	; 3
     fa6:	42 95       	swap	r20
     fa8:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     faa:	df 01       	movw	r26, r30
     fac:	1e 97       	sbiw	r26, 0x0e	; 14
     fae:	3c 91       	ld	r19, X
     fb0:	53 2f       	mov	r21, r19
     fb2:	52 95       	swap	r21
     fb4:	55 0f       	add	r21, r21
     fb6:	55 0f       	add	r21, r21
     fb8:	50 7c       	andi	r21, 0xC0	; 192
     fba:	46 2b       	or	r20, r22
     fbc:	45 2b       	or	r20, r21
     fbe:	49 87       	std	Y+9, r20	; 0x09
     fc0:	11 96       	adiw	r26, 0x01	; 1
     fc2:	4c 91       	ld	r20, X
     fc4:	42 95       	swap	r20
     fc6:	44 0f       	add	r20, r20
     fc8:	44 0f       	add	r20, r20
     fca:	40 7c       	andi	r20, 0xC0	; 192
     fcc:	36 95       	lsr	r19
     fce:	36 95       	lsr	r19
     fd0:	34 2b       	or	r19, r20
     fd2:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     fd4:	df 01       	movw	r26, r30
     fd6:	1c 97       	sbiw	r26, 0x0c	; 12
     fd8:	3c 91       	ld	r19, X
     fda:	3b 87       	std	Y+11, r19	; 0x0b
     fdc:	11 96       	adiw	r26, 0x01	; 1
     fde:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     fe0:	df 01       	movw	r26, r30
     fe2:	1a 97       	sbiw	r26, 0x0a	; 10
     fe4:	3c 91       	ld	r19, X
     fe6:	53 2f       	mov	r21, r19
     fe8:	55 0f       	add	r21, r21
     fea:	55 0f       	add	r21, r21
     fec:	43 70       	andi	r20, 0x03	; 3
     fee:	45 2b       	or	r20, r21
     ff0:	4c 87       	std	Y+12, r20	; 0x0c
     ff2:	63 2f       	mov	r22, r19
     ff4:	62 95       	swap	r22
     ff6:	66 95       	lsr	r22
     ff8:	66 95       	lsr	r22
     ffa:	63 70       	andi	r22, 0x03	; 3
     ffc:	11 96       	adiw	r26, 0x01	; 1
     ffe:	4c 91       	ld	r20, X
    1000:	43 70       	andi	r20, 0x03	; 3
    1002:	44 0f       	add	r20, r20
    1004:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    1006:	df 01       	movw	r26, r30
    1008:	18 97       	sbiw	r26, 0x08	; 8
    100a:	3c 91       	ld	r19, X
    100c:	53 2f       	mov	r21, r19
    100e:	52 95       	swap	r21
    1010:	50 7f       	andi	r21, 0xF0	; 240
    1012:	46 2b       	or	r20, r22
    1014:	45 2b       	or	r20, r21
    1016:	4d 87       	std	Y+13, r20	; 0x0d
    1018:	63 2f       	mov	r22, r19
    101a:	62 95       	swap	r22
    101c:	6f 70       	andi	r22, 0x0F	; 15
    101e:	11 96       	adiw	r26, 0x01	; 1
    1020:	4c 91       	ld	r20, X
    1022:	43 70       	andi	r20, 0x03	; 3
    1024:	42 95       	swap	r20
    1026:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    1028:	df 01       	movw	r26, r30
    102a:	16 97       	sbiw	r26, 0x06	; 6
    102c:	3c 91       	ld	r19, X
    102e:	53 2f       	mov	r21, r19
    1030:	52 95       	swap	r21
    1032:	55 0f       	add	r21, r21
    1034:	55 0f       	add	r21, r21
    1036:	50 7c       	andi	r21, 0xC0	; 192
    1038:	46 2b       	or	r20, r22
    103a:	45 2b       	or	r20, r21
    103c:	4e 87       	std	Y+14, r20	; 0x0e
    103e:	11 96       	adiw	r26, 0x01	; 1
    1040:	4c 91       	ld	r20, X
    1042:	42 95       	swap	r20
    1044:	44 0f       	add	r20, r20
    1046:	44 0f       	add	r20, r20
    1048:	40 7c       	andi	r20, 0xC0	; 192
    104a:	36 95       	lsr	r19
    104c:	36 95       	lsr	r19
    104e:	34 2b       	or	r19, r20
    1050:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    1052:	df 01       	movw	r26, r30
    1054:	14 97       	sbiw	r26, 0x04	; 4
    1056:	3c 91       	ld	r19, X
    1058:	38 8b       	std	Y+16, r19	; 0x10
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    105e:	df 01       	movw	r26, r30
    1060:	12 97       	sbiw	r26, 0x02	; 2
    1062:	3c 91       	ld	r19, X
    1064:	53 2f       	mov	r21, r19
    1066:	55 0f       	add	r21, r21
    1068:	55 0f       	add	r21, r21
    106a:	43 70       	andi	r20, 0x03	; 3
    106c:	45 2b       	or	r20, r21
    106e:	49 8b       	std	Y+17, r20	; 0x11
    1070:	32 95       	swap	r19
    1072:	36 95       	lsr	r19
    1074:	36 95       	lsr	r19
    1076:	33 70       	andi	r19, 0x03	; 3
    1078:	11 96       	adiw	r26, 0x01	; 1
    107a:	4c 91       	ld	r20, X
    107c:	43 70       	andi	r20, 0x03	; 3
    107e:	44 0f       	add	r20, r20
    1080:	44 0f       	add	r20, r20
    1082:	83 2b       	or	r24, r19
    1084:	84 2b       	or	r24, r20
    1086:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    1088:	80 91 e0 02 	lds	r24, 0x02E0
    108c:	38 2f       	mov	r19, r24
    108e:	32 95       	swap	r19
    1090:	33 0f       	add	r19, r19
    1092:	33 0f       	add	r19, r19
    1094:	30 7c       	andi	r19, 0xC0	; 192
    1096:	92 2b       	or	r25, r18
    1098:	93 2b       	or	r25, r19
    109a:	9b 8b       	std	Y+19, r25	; 0x13
    109c:	93 81       	ldd	r25, Z+3	; 0x03
    109e:	92 95       	swap	r25
    10a0:	99 0f       	add	r25, r25
    10a2:	99 0f       	add	r25, r25
    10a4:	90 7c       	andi	r25, 0xC0	; 192
    10a6:	86 95       	lsr	r24
    10a8:	86 95       	lsr	r24
    10aa:	89 2b       	or	r24, r25
    10ac:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    10ae:	80 91 e2 02 	lds	r24, 0x02E2
    10b2:	8d 8b       	std	Y+21, r24	; 0x15
    10b4:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    10b6:	80 91 e4 02 	lds	r24, 0x02E4
    10ba:	28 2f       	mov	r18, r24
    10bc:	22 0f       	add	r18, r18
    10be:	22 0f       	add	r18, r18
    10c0:	93 70       	andi	r25, 0x03	; 3
    10c2:	92 2b       	or	r25, r18
    10c4:	9e 8b       	std	Y+22, r25	; 0x16
    10c6:	38 2f       	mov	r19, r24
    10c8:	32 95       	swap	r19
    10ca:	36 95       	lsr	r19
    10cc:	36 95       	lsr	r19
    10ce:	33 70       	andi	r19, 0x03	; 3
    10d0:	97 81       	ldd	r25, Z+7	; 0x07
    10d2:	93 70       	andi	r25, 0x03	; 3
    10d4:	99 0f       	add	r25, r25
    10d6:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    10d8:	80 91 e6 02 	lds	r24, 0x02E6
    10dc:	28 2f       	mov	r18, r24
    10de:	22 95       	swap	r18
    10e0:	20 7f       	andi	r18, 0xF0	; 240
    10e2:	93 2b       	or	r25, r19
    10e4:	92 2b       	or	r25, r18
    10e6:	9f 8b       	std	Y+23, r25	; 0x17
    10e8:	38 2f       	mov	r19, r24
    10ea:	32 95       	swap	r19
    10ec:	3f 70       	andi	r19, 0x0F	; 15
    10ee:	91 85       	ldd	r25, Z+9	; 0x09
    10f0:	93 70       	andi	r25, 0x03	; 3
    10f2:	92 95       	swap	r25
    10f4:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    10f6:	80 91 e8 02 	lds	r24, 0x02E8
    10fa:	28 2f       	mov	r18, r24
    10fc:	22 95       	swap	r18
    10fe:	22 0f       	add	r18, r18
    1100:	22 0f       	add	r18, r18
    1102:	20 7c       	andi	r18, 0xC0	; 192
    1104:	93 2b       	or	r25, r19
    1106:	92 2b       	or	r25, r18
    1108:	98 8f       	std	Y+24, r25	; 0x18
    110a:	93 85       	ldd	r25, Z+11	; 0x0b
    110c:	92 95       	swap	r25
    110e:	99 0f       	add	r25, r25
    1110:	99 0f       	add	r25, r25
    1112:	90 7c       	andi	r25, 0xC0	; 192
    1114:	86 95       	lsr	r24
    1116:	86 95       	lsr	r24
    1118:	89 2b       	or	r24, r25
    111a:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    111c:	80 91 ea 02 	lds	r24, 0x02EA
    1120:	8a 8f       	std	Y+26, r24	; 0x1a
    1122:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    1124:	80 91 ec 02 	lds	r24, 0x02EC
    1128:	28 2f       	mov	r18, r24
    112a:	22 0f       	add	r18, r18
    112c:	22 0f       	add	r18, r18
    112e:	93 70       	andi	r25, 0x03	; 3
    1130:	92 2b       	or	r25, r18
    1132:	9b 8f       	std	Y+27, r25	; 0x1b
    1134:	38 2f       	mov	r19, r24
    1136:	32 95       	swap	r19
    1138:	36 95       	lsr	r19
    113a:	36 95       	lsr	r19
    113c:	33 70       	andi	r19, 0x03	; 3
    113e:	97 85       	ldd	r25, Z+15	; 0x0f
    1140:	93 70       	andi	r25, 0x03	; 3
    1142:	99 0f       	add	r25, r25
    1144:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    1146:	80 91 ee 02 	lds	r24, 0x02EE
    114a:	28 2f       	mov	r18, r24
    114c:	22 95       	swap	r18
    114e:	20 7f       	andi	r18, 0xF0	; 240
    1150:	93 2b       	or	r25, r19
    1152:	92 2b       	or	r25, r18
    1154:	9c 8f       	std	Y+28, r25	; 0x1c
    1156:	38 2f       	mov	r19, r24
    1158:	32 95       	swap	r19
    115a:	3f 70       	andi	r19, 0x0F	; 15
    115c:	91 89       	ldd	r25, Z+17	; 0x11
    115e:	93 70       	andi	r25, 0x03	; 3
    1160:	92 95       	swap	r25
    1162:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    1164:	80 91 f0 02 	lds	r24, 0x02F0
    1168:	28 2f       	mov	r18, r24
    116a:	22 95       	swap	r18
    116c:	22 0f       	add	r18, r18
    116e:	22 0f       	add	r18, r18
    1170:	20 7c       	andi	r18, 0xC0	; 192
    1172:	93 2b       	or	r25, r19
    1174:	92 2b       	or	r25, r18
    1176:	9d 8f       	std	Y+29, r25	; 0x1d
    1178:	93 89       	ldd	r25, Z+19	; 0x13
    117a:	92 95       	swap	r25
    117c:	99 0f       	add	r25, r25
    117e:	99 0f       	add	r25, r25
    1180:	90 7c       	andi	r25, 0xC0	; 192
    1182:	86 95       	lsr	r24
    1184:	86 95       	lsr	r24
    1186:	89 2b       	or	r24, r25
    1188:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    118a:	80 91 f2 02 	lds	r24, 0x02F2
    118e:	8f 8f       	std	Y+31, r24	; 0x1f
    1190:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    1192:	80 91 f4 02 	lds	r24, 0x02F4
    1196:	28 2f       	mov	r18, r24
    1198:	22 0f       	add	r18, r18
    119a:	22 0f       	add	r18, r18
    119c:	93 70       	andi	r25, 0x03	; 3
    119e:	92 2b       	or	r25, r18
    11a0:	98 a3       	lds	r25, 0x58
    11a2:	38 2f       	mov	r19, r24
    11a4:	32 95       	swap	r19
    11a6:	36 95       	lsr	r19
    11a8:	36 95       	lsr	r19
    11aa:	33 70       	andi	r19, 0x03	; 3
    11ac:	97 89       	ldd	r25, Z+23	; 0x17
    11ae:	93 70       	andi	r25, 0x03	; 3
    11b0:	99 0f       	add	r25, r25
    11b2:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    11b4:	80 91 f6 02 	lds	r24, 0x02F6
    11b8:	28 2f       	mov	r18, r24
    11ba:	22 95       	swap	r18
    11bc:	20 7f       	andi	r18, 0xF0	; 240
    11be:	93 2b       	or	r25, r19
    11c0:	92 2b       	or	r25, r18
    11c2:	99 a3       	lds	r25, 0x59
    11c4:	38 2f       	mov	r19, r24
    11c6:	32 95       	swap	r19
    11c8:	3f 70       	andi	r19, 0x0F	; 15
    11ca:	91 8d       	ldd	r25, Z+25	; 0x19
    11cc:	93 70       	andi	r25, 0x03	; 3
    11ce:	92 95       	swap	r25
    11d0:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    11d2:	80 91 f8 02 	lds	r24, 0x02F8
    11d6:	28 2f       	mov	r18, r24
    11d8:	22 95       	swap	r18
    11da:	22 0f       	add	r18, r18
    11dc:	22 0f       	add	r18, r18
    11de:	20 7c       	andi	r18, 0xC0	; 192
    11e0:	93 2b       	or	r25, r19
    11e2:	92 2b       	or	r25, r18
    11e4:	9a a3       	lds	r25, 0x5a
    11e6:	93 8d       	ldd	r25, Z+27	; 0x1b
    11e8:	92 95       	swap	r25
    11ea:	99 0f       	add	r25, r25
    11ec:	99 0f       	add	r25, r25
    11ee:	90 7c       	andi	r25, 0xC0	; 192
    11f0:	86 95       	lsr	r24
    11f2:	86 95       	lsr	r24
    11f4:	89 2b       	or	r24, r25
    11f6:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    11f8:	80 91 fa 02 	lds	r24, 0x02FA
    11fc:	8c a3       	lds	r24, 0x5c
    11fe:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    1200:	80 91 fc 02 	lds	r24, 0x02FC
    1204:	28 2f       	mov	r18, r24
    1206:	22 0f       	add	r18, r18
    1208:	22 0f       	add	r18, r18
    120a:	93 70       	andi	r25, 0x03	; 3
    120c:	92 2b       	or	r25, r18
    120e:	9d a3       	lds	r25, 0x5d
    1210:	82 95       	swap	r24
    1212:	86 95       	lsr	r24
    1214:	86 95       	lsr	r24
    1216:	83 70       	andi	r24, 0x03	; 3
    1218:	2e a1       	lds	r18, 0x4e
    121a:	20 7f       	andi	r18, 0xF0	; 240
    121c:	97 8d       	ldd	r25, Z+31	; 0x1f
    121e:	93 70       	andi	r25, 0x03	; 3
    1220:	99 0f       	add	r25, r25
    1222:	99 0f       	add	r25, r25
    1224:	82 2b       	or	r24, r18
    1226:	89 2b       	or	r24, r25
    1228:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    122a:	80 91 fe 02 	lds	r24, 0x02FE
    122e:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    1230:	80 91 ff 02 	lds	r24, 0x02FF
    1234:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    1236:	80 91 00 03 	lds	r24, 0x0300
    123a:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    123c:	80 91 01 03 	lds	r24, 0x0301
    1240:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    1242:	80 91 02 03 	lds	r24, 0x0302
    1246:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    1248:	0e 94 2c 07 	call	0xe58	; 0xe58 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    124c:	80 91 7d 03 	lds	r24, 0x037D
    1250:	8f 77       	andi	r24, 0x7F	; 127
    1252:	80 93 7d 03 	sts	0x037D, r24
	current_patch.mode = MEMORY;
    1256:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    125a:	21 2f       	mov	r18, r17
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	8b e2       	ldi	r24, 0x2B	; 43
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	28 9f       	mul	r18, r24
    1264:	b0 01       	movw	r22, r0
    1266:	29 9f       	mul	r18, r25
    1268:	70 0d       	add	r23, r0
    126a:	38 9f       	mul	r19, r24
    126c:	70 0d       	add	r23, r0
    126e:	11 24       	eor	r1, r1
    1270:	60 50       	subi	r22, 0x00	; 0
    1272:	70 40       	sbci	r23, 0x00	; 0
    1274:	ce 01       	movw	r24, r28
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	4b e2       	ldi	r20, 0x2B	; 43
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	0e 94 32 1c 	call	0x3864	; 0x3864 <__eeupd_block_m6450a>
}	
    1280:	ab 96       	adiw	r28, 0x2b	; 43
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	08 95       	ret

00001294 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	c3 54       	subi	r28, 0x43	; 67
    12a0:	d0 40       	sbci	r29, 0x00	; 0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	2b e2       	ldi	r18, 0x2B	; 43
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	82 9f       	mul	r24, r18
    12b4:	b0 01       	movw	r22, r0
    12b6:	83 9f       	mul	r24, r19
    12b8:	70 0d       	add	r23, r0
    12ba:	92 9f       	mul	r25, r18
    12bc:	70 0d       	add	r23, r0
    12be:	11 24       	eor	r1, r1
    12c0:	60 50       	subi	r22, 0x00	; 0
    12c2:	70 40       	sbci	r23, 0x00	; 0
    12c4:	ce 01       	movw	r24, r28
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	4b e2       	ldi	r20, 0x2B	; 43
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    12d0:	ee ed       	ldi	r30, 0xDE	; 222
    12d2:	f2 e0       	ldi	r31, 0x02	; 2
    12d4:	8a 89       	ldd	r24, Y+18	; 0x12
    12d6:	28 2f       	mov	r18, r24
    12d8:	22 95       	swap	r18
    12da:	2f 70       	andi	r18, 0x0F	; 15
    12dc:	9b 89       	ldd	r25, Y+19	; 0x13
    12de:	39 2f       	mov	r19, r25
    12e0:	32 95       	swap	r19
    12e2:	30 7f       	andi	r19, 0xF0	; 240
    12e4:	32 2b       	or	r19, r18
    12e6:	29 2f       	mov	r18, r25
    12e8:	22 95       	swap	r18
    12ea:	2f 70       	andi	r18, 0x0F	; 15
    12ec:	23 70       	andi	r18, 0x03	; 3
    12ee:	30 93 de 02 	sts	0x02DE, r19
    12f2:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    12f6:	df 01       	movw	r26, r30
    12f8:	5a 97       	sbiw	r26, 0x1a	; 26
    12fa:	4a 81       	ldd	r20, Y+2	; 0x02
    12fc:	46 95       	lsr	r20
    12fe:	46 95       	lsr	r20
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	32 2f       	mov	r19, r18
    1304:	32 95       	swap	r19
    1306:	33 0f       	add	r19, r19
    1308:	33 0f       	add	r19, r19
    130a:	30 7c       	andi	r19, 0xC0	; 192
    130c:	43 2b       	or	r20, r19
    130e:	32 2f       	mov	r19, r18
    1310:	36 95       	lsr	r19
    1312:	36 95       	lsr	r19
    1314:	33 70       	andi	r19, 0x03	; 3
    1316:	4c 93       	st	X, r20
    1318:	11 96       	adiw	r26, 0x01	; 1
    131a:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    131c:	df 01       	movw	r26, r30
    131e:	58 97       	sbiw	r26, 0x18	; 24
    1320:	32 2f       	mov	r19, r18
    1322:	32 95       	swap	r19
    1324:	3f 70       	andi	r19, 0x0F	; 15
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	42 2f       	mov	r20, r18
    132a:	42 95       	swap	r20
    132c:	40 7f       	andi	r20, 0xF0	; 240
    132e:	43 2b       	or	r20, r19
    1330:	32 2f       	mov	r19, r18
    1332:	32 95       	swap	r19
    1334:	3f 70       	andi	r19, 0x0F	; 15
    1336:	33 70       	andi	r19, 0x03	; 3
    1338:	4c 93       	st	X, r20
    133a:	11 96       	adiw	r26, 0x01	; 1
    133c:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    133e:	df 01       	movw	r26, r30
    1340:	56 97       	sbiw	r26, 0x16	; 22
    1342:	22 95       	swap	r18
    1344:	26 95       	lsr	r18
    1346:	26 95       	lsr	r18
    1348:	23 70       	andi	r18, 0x03	; 3
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	43 2f       	mov	r20, r19
    134e:	44 0f       	add	r20, r20
    1350:	44 0f       	add	r20, r20
    1352:	24 2b       	or	r18, r20
    1354:	32 95       	swap	r19
    1356:	36 95       	lsr	r19
    1358:	36 95       	lsr	r19
    135a:	33 70       	andi	r19, 0x03	; 3
    135c:	2c 93       	st	X, r18
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    1362:	df 01       	movw	r26, r30
    1364:	54 97       	sbiw	r26, 0x14	; 20
    1366:	4e 81       	ldd	r20, Y+6	; 0x06
    1368:	2f 81       	ldd	r18, Y+7	; 0x07
    136a:	32 2f       	mov	r19, r18
    136c:	33 70       	andi	r19, 0x03	; 3
    136e:	4c 93       	st	X, r20
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1374:	df 01       	movw	r26, r30
    1376:	52 97       	sbiw	r26, 0x12	; 18
    1378:	32 2f       	mov	r19, r18
    137a:	36 95       	lsr	r19
    137c:	36 95       	lsr	r19
    137e:	28 85       	ldd	r18, Y+8	; 0x08
    1380:	42 2f       	mov	r20, r18
    1382:	42 95       	swap	r20
    1384:	44 0f       	add	r20, r20
    1386:	44 0f       	add	r20, r20
    1388:	40 7c       	andi	r20, 0xC0	; 192
    138a:	43 2b       	or	r20, r19
    138c:	32 2f       	mov	r19, r18
    138e:	36 95       	lsr	r19
    1390:	36 95       	lsr	r19
    1392:	33 70       	andi	r19, 0x03	; 3
    1394:	4c 93       	st	X, r20
    1396:	11 96       	adiw	r26, 0x01	; 1
    1398:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    139a:	df 01       	movw	r26, r30
    139c:	50 97       	sbiw	r26, 0x10	; 16
    139e:	32 2f       	mov	r19, r18
    13a0:	32 95       	swap	r19
    13a2:	3f 70       	andi	r19, 0x0F	; 15
    13a4:	29 85       	ldd	r18, Y+9	; 0x09
    13a6:	42 2f       	mov	r20, r18
    13a8:	42 95       	swap	r20
    13aa:	40 7f       	andi	r20, 0xF0	; 240
    13ac:	43 2b       	or	r20, r19
    13ae:	32 2f       	mov	r19, r18
    13b0:	32 95       	swap	r19
    13b2:	3f 70       	andi	r19, 0x0F	; 15
    13b4:	33 70       	andi	r19, 0x03	; 3
    13b6:	4c 93       	st	X, r20
    13b8:	11 96       	adiw	r26, 0x01	; 1
    13ba:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    13bc:	df 01       	movw	r26, r30
    13be:	1e 97       	sbiw	r26, 0x0e	; 14
    13c0:	22 95       	swap	r18
    13c2:	26 95       	lsr	r18
    13c4:	26 95       	lsr	r18
    13c6:	23 70       	andi	r18, 0x03	; 3
    13c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ca:	43 2f       	mov	r20, r19
    13cc:	44 0f       	add	r20, r20
    13ce:	44 0f       	add	r20, r20
    13d0:	24 2b       	or	r18, r20
    13d2:	32 95       	swap	r19
    13d4:	36 95       	lsr	r19
    13d6:	36 95       	lsr	r19
    13d8:	33 70       	andi	r19, 0x03	; 3
    13da:	2c 93       	st	X, r18
    13dc:	11 96       	adiw	r26, 0x01	; 1
    13de:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    13e0:	df 01       	movw	r26, r30
    13e2:	1c 97       	sbiw	r26, 0x0c	; 12
    13e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    13e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    13e8:	32 2f       	mov	r19, r18
    13ea:	33 70       	andi	r19, 0x03	; 3
    13ec:	4c 93       	st	X, r20
    13ee:	11 96       	adiw	r26, 0x01	; 1
    13f0:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    13f2:	df 01       	movw	r26, r30
    13f4:	1a 97       	sbiw	r26, 0x0a	; 10
    13f6:	32 2f       	mov	r19, r18
    13f8:	36 95       	lsr	r19
    13fa:	36 95       	lsr	r19
    13fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    13fe:	42 2f       	mov	r20, r18
    1400:	42 95       	swap	r20
    1402:	44 0f       	add	r20, r20
    1404:	44 0f       	add	r20, r20
    1406:	40 7c       	andi	r20, 0xC0	; 192
    1408:	43 2b       	or	r20, r19
    140a:	32 2f       	mov	r19, r18
    140c:	36 95       	lsr	r19
    140e:	36 95       	lsr	r19
    1410:	33 70       	andi	r19, 0x03	; 3
    1412:	4c 93       	st	X, r20
    1414:	11 96       	adiw	r26, 0x01	; 1
    1416:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    1418:	df 01       	movw	r26, r30
    141a:	18 97       	sbiw	r26, 0x08	; 8
    141c:	32 2f       	mov	r19, r18
    141e:	32 95       	swap	r19
    1420:	3f 70       	andi	r19, 0x0F	; 15
    1422:	2e 85       	ldd	r18, Y+14	; 0x0e
    1424:	42 2f       	mov	r20, r18
    1426:	42 95       	swap	r20
    1428:	40 7f       	andi	r20, 0xF0	; 240
    142a:	43 2b       	or	r20, r19
    142c:	32 2f       	mov	r19, r18
    142e:	32 95       	swap	r19
    1430:	3f 70       	andi	r19, 0x0F	; 15
    1432:	33 70       	andi	r19, 0x03	; 3
    1434:	4c 93       	st	X, r20
    1436:	11 96       	adiw	r26, 0x01	; 1
    1438:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    143a:	df 01       	movw	r26, r30
    143c:	16 97       	sbiw	r26, 0x06	; 6
    143e:	22 95       	swap	r18
    1440:	26 95       	lsr	r18
    1442:	26 95       	lsr	r18
    1444:	23 70       	andi	r18, 0x03	; 3
    1446:	3f 85       	ldd	r19, Y+15	; 0x0f
    1448:	43 2f       	mov	r20, r19
    144a:	44 0f       	add	r20, r20
    144c:	44 0f       	add	r20, r20
    144e:	24 2b       	or	r18, r20
    1450:	32 95       	swap	r19
    1452:	36 95       	lsr	r19
    1454:	36 95       	lsr	r19
    1456:	33 70       	andi	r19, 0x03	; 3
    1458:	2c 93       	st	X, r18
    145a:	11 96       	adiw	r26, 0x01	; 1
    145c:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    145e:	df 01       	movw	r26, r30
    1460:	14 97       	sbiw	r26, 0x04	; 4
    1462:	48 89       	ldd	r20, Y+16	; 0x10
    1464:	29 89       	ldd	r18, Y+17	; 0x11
    1466:	32 2f       	mov	r19, r18
    1468:	33 70       	andi	r19, 0x03	; 3
    146a:	4c 93       	st	X, r20
    146c:	11 96       	adiw	r26, 0x01	; 1
    146e:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    1470:	df 01       	movw	r26, r30
    1472:	12 97       	sbiw	r26, 0x02	; 2
    1474:	26 95       	lsr	r18
    1476:	26 95       	lsr	r18
    1478:	38 2f       	mov	r19, r24
    147a:	32 95       	swap	r19
    147c:	33 0f       	add	r19, r19
    147e:	33 0f       	add	r19, r19
    1480:	30 7c       	andi	r19, 0xC0	; 192
    1482:	23 2b       	or	r18, r19
    1484:	86 95       	lsr	r24
    1486:	86 95       	lsr	r24
    1488:	83 70       	andi	r24, 0x03	; 3
    148a:	2c 93       	st	X, r18
    148c:	11 96       	adiw	r26, 0x01	; 1
    148e:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    1490:	92 95       	swap	r25
    1492:	96 95       	lsr	r25
    1494:	96 95       	lsr	r25
    1496:	93 70       	andi	r25, 0x03	; 3
    1498:	8c 89       	ldd	r24, Y+20	; 0x14
    149a:	28 2f       	mov	r18, r24
    149c:	22 0f       	add	r18, r18
    149e:	22 0f       	add	r18, r18
    14a0:	92 2b       	or	r25, r18
    14a2:	82 95       	swap	r24
    14a4:	86 95       	lsr	r24
    14a6:	86 95       	lsr	r24
    14a8:	83 70       	andi	r24, 0x03	; 3
    14aa:	90 93 e0 02 	sts	0x02E0, r25
    14ae:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    14b0:	2d 89       	ldd	r18, Y+21	; 0x15
    14b2:	8e 89       	ldd	r24, Y+22	; 0x16
    14b4:	98 2f       	mov	r25, r24
    14b6:	93 70       	andi	r25, 0x03	; 3
    14b8:	20 93 e2 02 	sts	0x02E2, r18
    14bc:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    14be:	98 2f       	mov	r25, r24
    14c0:	96 95       	lsr	r25
    14c2:	96 95       	lsr	r25
    14c4:	8f 89       	ldd	r24, Y+23	; 0x17
    14c6:	28 2f       	mov	r18, r24
    14c8:	22 95       	swap	r18
    14ca:	22 0f       	add	r18, r18
    14cc:	22 0f       	add	r18, r18
    14ce:	20 7c       	andi	r18, 0xC0	; 192
    14d0:	29 2b       	or	r18, r25
    14d2:	98 2f       	mov	r25, r24
    14d4:	96 95       	lsr	r25
    14d6:	96 95       	lsr	r25
    14d8:	93 70       	andi	r25, 0x03	; 3
    14da:	20 93 e4 02 	sts	0x02E4, r18
    14de:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    14e0:	98 2f       	mov	r25, r24
    14e2:	92 95       	swap	r25
    14e4:	9f 70       	andi	r25, 0x0F	; 15
    14e6:	88 8d       	ldd	r24, Y+24	; 0x18
    14e8:	28 2f       	mov	r18, r24
    14ea:	22 95       	swap	r18
    14ec:	20 7f       	andi	r18, 0xF0	; 240
    14ee:	29 2b       	or	r18, r25
    14f0:	98 2f       	mov	r25, r24
    14f2:	92 95       	swap	r25
    14f4:	9f 70       	andi	r25, 0x0F	; 15
    14f6:	93 70       	andi	r25, 0x03	; 3
    14f8:	20 93 e6 02 	sts	0x02E6, r18
    14fc:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    14fe:	82 95       	swap	r24
    1500:	86 95       	lsr	r24
    1502:	86 95       	lsr	r24
    1504:	83 70       	andi	r24, 0x03	; 3
    1506:	99 8d       	ldd	r25, Y+25	; 0x19
    1508:	29 2f       	mov	r18, r25
    150a:	22 0f       	add	r18, r18
    150c:	22 0f       	add	r18, r18
    150e:	82 2b       	or	r24, r18
    1510:	92 95       	swap	r25
    1512:	96 95       	lsr	r25
    1514:	96 95       	lsr	r25
    1516:	93 70       	andi	r25, 0x03	; 3
    1518:	80 93 e8 02 	sts	0x02E8, r24
    151c:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    151e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1520:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1522:	98 2f       	mov	r25, r24
    1524:	93 70       	andi	r25, 0x03	; 3
    1526:	20 93 ea 02 	sts	0x02EA, r18
    152a:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    152c:	98 2f       	mov	r25, r24
    152e:	96 95       	lsr	r25
    1530:	96 95       	lsr	r25
    1532:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1534:	28 2f       	mov	r18, r24
    1536:	22 95       	swap	r18
    1538:	22 0f       	add	r18, r18
    153a:	22 0f       	add	r18, r18
    153c:	20 7c       	andi	r18, 0xC0	; 192
    153e:	29 2b       	or	r18, r25
    1540:	98 2f       	mov	r25, r24
    1542:	96 95       	lsr	r25
    1544:	96 95       	lsr	r25
    1546:	93 70       	andi	r25, 0x03	; 3
    1548:	20 93 ec 02 	sts	0x02EC, r18
    154c:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    154e:	98 2f       	mov	r25, r24
    1550:	92 95       	swap	r25
    1552:	9f 70       	andi	r25, 0x0F	; 15
    1554:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1556:	28 2f       	mov	r18, r24
    1558:	22 95       	swap	r18
    155a:	20 7f       	andi	r18, 0xF0	; 240
    155c:	29 2b       	or	r18, r25
    155e:	98 2f       	mov	r25, r24
    1560:	92 95       	swap	r25
    1562:	9f 70       	andi	r25, 0x0F	; 15
    1564:	93 70       	andi	r25, 0x03	; 3
    1566:	20 93 ee 02 	sts	0x02EE, r18
    156a:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    156c:	82 95       	swap	r24
    156e:	86 95       	lsr	r24
    1570:	86 95       	lsr	r24
    1572:	83 70       	andi	r24, 0x03	; 3
    1574:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1576:	29 2f       	mov	r18, r25
    1578:	22 0f       	add	r18, r18
    157a:	22 0f       	add	r18, r18
    157c:	82 2b       	or	r24, r18
    157e:	92 95       	swap	r25
    1580:	96 95       	lsr	r25
    1582:	96 95       	lsr	r25
    1584:	93 70       	andi	r25, 0x03	; 3
    1586:	80 93 f0 02 	sts	0x02F0, r24
    158a:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    158c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    158e:	88 a1       	lds	r24, 0x48
    1590:	98 2f       	mov	r25, r24
    1592:	93 70       	andi	r25, 0x03	; 3
    1594:	20 93 f2 02 	sts	0x02F2, r18
    1598:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    159a:	98 2f       	mov	r25, r24
    159c:	96 95       	lsr	r25
    159e:	96 95       	lsr	r25
    15a0:	89 a1       	lds	r24, 0x49
    15a2:	28 2f       	mov	r18, r24
    15a4:	22 95       	swap	r18
    15a6:	22 0f       	add	r18, r18
    15a8:	22 0f       	add	r18, r18
    15aa:	20 7c       	andi	r18, 0xC0	; 192
    15ac:	29 2b       	or	r18, r25
    15ae:	98 2f       	mov	r25, r24
    15b0:	96 95       	lsr	r25
    15b2:	96 95       	lsr	r25
    15b4:	93 70       	andi	r25, 0x03	; 3
    15b6:	20 93 f4 02 	sts	0x02F4, r18
    15ba:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    15bc:	98 2f       	mov	r25, r24
    15be:	92 95       	swap	r25
    15c0:	9f 70       	andi	r25, 0x0F	; 15
    15c2:	8a a1       	lds	r24, 0x4a
    15c4:	28 2f       	mov	r18, r24
    15c6:	22 95       	swap	r18
    15c8:	20 7f       	andi	r18, 0xF0	; 240
    15ca:	29 2b       	or	r18, r25
    15cc:	98 2f       	mov	r25, r24
    15ce:	92 95       	swap	r25
    15d0:	9f 70       	andi	r25, 0x0F	; 15
    15d2:	93 70       	andi	r25, 0x03	; 3
    15d4:	20 93 f6 02 	sts	0x02F6, r18
    15d8:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    15da:	82 95       	swap	r24
    15dc:	86 95       	lsr	r24
    15de:	86 95       	lsr	r24
    15e0:	83 70       	andi	r24, 0x03	; 3
    15e2:	9b a1       	lds	r25, 0x4b
    15e4:	29 2f       	mov	r18, r25
    15e6:	22 0f       	add	r18, r18
    15e8:	22 0f       	add	r18, r18
    15ea:	82 2b       	or	r24, r18
    15ec:	92 95       	swap	r25
    15ee:	96 95       	lsr	r25
    15f0:	96 95       	lsr	r25
    15f2:	93 70       	andi	r25, 0x03	; 3
    15f4:	80 93 f8 02 	sts	0x02F8, r24
    15f8:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    15fa:	2c a1       	lds	r18, 0x4c
    15fc:	8d a1       	lds	r24, 0x4d
    15fe:	98 2f       	mov	r25, r24
    1600:	93 70       	andi	r25, 0x03	; 3
    1602:	20 93 fa 02 	sts	0x02FA, r18
    1606:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1608:	98 2f       	mov	r25, r24
    160a:	96 95       	lsr	r25
    160c:	96 95       	lsr	r25
    160e:	8e a1       	lds	r24, 0x4e
    1610:	28 2f       	mov	r18, r24
    1612:	22 95       	swap	r18
    1614:	22 0f       	add	r18, r18
    1616:	22 0f       	add	r18, r18
    1618:	20 7c       	andi	r18, 0xC0	; 192
    161a:	29 2b       	or	r18, r25
    161c:	86 95       	lsr	r24
    161e:	86 95       	lsr	r24
    1620:	98 2f       	mov	r25, r24
    1622:	93 70       	andi	r25, 0x03	; 3
    1624:	20 93 fc 02 	sts	0x02FC, r18
    1628:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    162a:	7f a1       	lds	r23, 0x4f
    162c:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    1630:	68 a5       	lds	r22, 0x68
    1632:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    1636:	89 a5       	lds	r24, 0x69
    1638:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    163c:	9a a5       	lds	r25, 0x6a
    163e:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    1642:	1b a5       	lds	r17, 0x6b
    1644:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1648:	de 01       	movw	r26, r28
    164a:	9c 96       	adiw	r26, 0x2c	; 44
    164c:	ef ef       	ldi	r30, 0xFF	; 255
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	28 e0       	ldi	r18, 0x08	; 8
    1652:	01 90       	ld	r0, Z+
    1654:	0d 92       	st	X+, r0
    1656:	21 50       	subi	r18, 0x01	; 1
    1658:	e1 f7       	brne	.-8      	; 0x1652 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    165a:	e9 2f       	mov	r30, r25
    165c:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	9f 01       	movw	r18, r30
    1662:	22 0f       	add	r18, r18
    1664:	33 1f       	adc	r19, r19
    1666:	22 0f       	add	r18, r18
    1668:	33 1f       	adc	r19, r19
    166a:	a9 01       	movw	r20, r18
    166c:	44 0f       	add	r20, r20
    166e:	55 1f       	adc	r21, r21
    1670:	44 0f       	add	r20, r20
    1672:	55 1f       	adc	r21, r21
    1674:	44 0f       	add	r20, r20
    1676:	55 1f       	adc	r21, r21
    1678:	42 1b       	sub	r20, r18
    167a:	53 0b       	sbc	r21, r19
    167c:	4e 0f       	add	r20, r30
    167e:	5f 1f       	adc	r21, r31
    1680:	55 95       	asr	r21
    1682:	47 95       	ror	r20
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	55 95       	asr	r21
    168a:	47 95       	ror	r20
    168c:	55 95       	asr	r21
    168e:	47 95       	ror	r20
    1690:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1692:	fe 01       	movw	r30, r28
    1694:	e4 0f       	add	r30, r20
    1696:	f1 1d       	adc	r31, r1
    1698:	24 a5       	lds	r18, 0x64
    169a:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    169e:	de 01       	movw	r26, r28
    16a0:	d4 96       	adiw	r26, 0x34	; 52
    16a2:	e7 e0       	ldi	r30, 0x07	; 7
    16a4:	f2 e0       	ldi	r31, 0x02	; 2
    16a6:	28 e0       	ldi	r18, 0x08	; 8
    16a8:	01 90       	ld	r0, Z+
    16aa:	0d 92       	st	X+, r0
    16ac:	21 50       	subi	r18, 0x01	; 1
    16ae:	e1 f7       	brne	.-8      	; 0x16a8 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    16b0:	29 2f       	mov	r18, r25
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	20 7e       	andi	r18, 0xE0	; 224
    16b6:	30 70       	andi	r19, 0x00	; 0
    16b8:	35 95       	asr	r19
    16ba:	27 95       	ror	r18
    16bc:	35 95       	asr	r19
    16be:	27 95       	ror	r18
    16c0:	35 95       	asr	r19
    16c2:	27 95       	ror	r18
    16c4:	83 70       	andi	r24, 0x03	; 3
    16c6:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    16c8:	42 2f       	mov	r20, r18
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	ca 01       	movw	r24, r20
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	9c 01       	movw	r18, r24
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	28 1b       	sub	r18, r24
    16e6:	39 0b       	sbc	r19, r25
    16e8:	42 0f       	add	r20, r18
    16ea:	53 1f       	adc	r21, r19
    16ec:	ca 01       	movw	r24, r20
    16ee:	95 95       	asr	r25
    16f0:	87 95       	ror	r24
    16f2:	95 95       	asr	r25
    16f4:	87 95       	ror	r24
    16f6:	95 95       	asr	r25
    16f8:	87 95       	ror	r24
    16fa:	95 95       	asr	r25
    16fc:	87 95       	ror	r24
    16fe:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    1700:	fe 01       	movw	r30, r28
    1702:	e8 0f       	add	r30, r24
    1704:	f1 1d       	adc	r31, r1
    1706:	84 a9       	sts	0x44, r24
    1708:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    170c:	de 01       	movw	r26, r28
    170e:	dc 96       	adiw	r26, 0x3c	; 60
    1710:	ef e0       	ldi	r30, 0x0F	; 15
    1712:	f2 e0       	ldi	r31, 0x02	; 2
    1714:	88 e0       	ldi	r24, 0x08	; 8
    1716:	01 90       	ld	r0, Z+
    1718:	0d 92       	st	X+, r0
    171a:	81 50       	subi	r24, 0x01	; 1
    171c:	e1 f7       	brne	.-8      	; 0x1716 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    171e:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    1720:	46 2f       	mov	r20, r22
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	ca 01       	movw	r24, r20
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	9c 01       	movw	r18, r24
    1730:	22 0f       	add	r18, r18
    1732:	33 1f       	adc	r19, r19
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	28 1b       	sub	r18, r24
    173e:	39 0b       	sbc	r19, r25
    1740:	42 0f       	add	r20, r18
    1742:	53 1f       	adc	r21, r19
    1744:	ca 01       	movw	r24, r20
    1746:	95 95       	asr	r25
    1748:	87 95       	ror	r24
    174a:	95 95       	asr	r25
    174c:	87 95       	ror	r24
    174e:	95 95       	asr	r25
    1750:	87 95       	ror	r24
    1752:	95 95       	asr	r25
    1754:	87 95       	ror	r24
    1756:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1758:	fe 01       	movw	r30, r28
    175a:	e8 0f       	add	r30, r24
    175c:	f1 1d       	adc	r31, r1
    175e:	84 ad       	sts	0x64, r24
    1760:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1764:	21 2f       	mov	r18, r17
    1766:	26 95       	lsr	r18
    1768:	27 95       	ror	r18
    176a:	22 27       	eor	r18, r18
    176c:	27 95       	ror	r18
    176e:	81 2f       	mov	r24, r17
    1770:	81 70       	andi	r24, 0x01	; 1
    1772:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1774:	81 2f       	mov	r24, r17
    1776:	86 95       	lsr	r24
    1778:	86 95       	lsr	r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	81 70       	andi	r24, 0x01	; 1
    177e:	90 70       	andi	r25, 0x00	; 0
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1788:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    178a:	81 2f       	mov	r24, r17
    178c:	86 95       	lsr	r24
    178e:	86 95       	lsr	r24
    1790:	86 95       	lsr	r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	81 70       	andi	r24, 0x01	; 1
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    179c:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    179e:	81 2f       	mov	r24, r17
    17a0:	82 95       	swap	r24
    17a2:	8f 70       	andi	r24, 0x0F	; 15
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	81 70       	andi	r24, 0x01	; 1
    17a8:	90 70       	andi	r25, 0x00	; 0
    17aa:	82 95       	swap	r24
    17ac:	92 95       	swap	r25
    17ae:	90 7f       	andi	r25, 0xF0	; 240
    17b0:	98 27       	eor	r25, r24
    17b2:	80 7f       	andi	r24, 0xF0	; 240
    17b4:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17b6:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    17b8:	81 2f       	mov	r24, r17
    17ba:	82 95       	swap	r24
    17bc:	86 95       	lsr	r24
    17be:	87 70       	andi	r24, 0x07	; 7
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	81 70       	andi	r24, 0x01	; 1
    17c4:	90 70       	andi	r25, 0x00	; 0
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	82 95       	swap	r24
    17cc:	92 95       	swap	r25
    17ce:	90 7f       	andi	r25, 0xF0	; 240
    17d0:	98 27       	eor	r25, r24
    17d2:	80 7f       	andi	r24, 0xF0	; 240
    17d4:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17d6:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    17d8:	81 2f       	mov	r24, r17
    17da:	82 95       	swap	r24
    17dc:	86 95       	lsr	r24
    17de:	86 95       	lsr	r24
    17e0:	83 70       	andi	r24, 0x03	; 3
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	90 70       	andi	r25, 0x00	; 0
    17e8:	00 24       	eor	r0, r0
    17ea:	96 95       	lsr	r25
    17ec:	87 95       	ror	r24
    17ee:	07 94       	ror	r0
    17f0:	96 95       	lsr	r25
    17f2:	87 95       	ror	r24
    17f4:	07 94       	ror	r0
    17f6:	98 2f       	mov	r25, r24
    17f8:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17fa:	82 2b       	or	r24, r18
    17fc:	80 93 7b 03 	sts	0x037B, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    1800:	87 2f       	mov	r24, r23
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	81 70       	andi	r24, 0x01	; 1
    1806:	90 70       	andi	r25, 0x00	; 0
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1814:	90 91 7d 03 	lds	r25, 0x037D
    1818:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    181a:	89 2b       	or	r24, r25
    181c:	11 1f       	adc	r17, r17
    181e:	11 27       	eor	r17, r17
    1820:	11 1f       	adc	r17, r17
    1822:	11 0f       	add	r17, r17
    1824:	11 0f       	add	r17, r17
    1826:	81 2b       	or	r24, r17
    1828:	80 93 7d 03 	sts	0x037D, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    182c:	0e 94 2c 07 	call	0xe58	; 0xe58 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    1830:	80 91 7d 03 	lds	r24, 0x037D
    1834:	8f 77       	andi	r24, 0x7F	; 127
    1836:	80 93 7d 03 	sts	0x037D, r24
	
	current_patch.mode = MEMORY;
    183a:	10 92 07 03 	sts	0x0307, r1
	
}
    183e:	cd 5b       	subi	r28, 0xBD	; 189
    1840:	df 4f       	sbci	r29, 0xFF	; 255
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	08 95       	ret

00001854 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1854:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    1858:	60 3f       	cpi	r22, 0xF0	; 240
    185a:	11 f4       	brne	.+4      	; 0x1860 <transpose_note+0xc>
    185c:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    1860:	29 2f       	mov	r18, r25
    1862:	22 0f       	add	r18, r18
    1864:	92 0f       	add	r25, r18
    1866:	99 0f       	add	r25, r25
    1868:	99 0f       	add	r25, r25
    186a:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    186c:	89 38       	cpi	r24, 0x89	; 137
    186e:	08 f0       	brcs	.+2      	; 0x1872 <transpose_note+0x1e>
    1870:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1872:	08 95       	ret

00001874 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1874:	80 91 7b 03 	lds	r24, 0x037B
    1878:	98 2f       	mov	r25, r24
    187a:	96 95       	lsr	r25
    187c:	96 95       	lsr	r25
    187e:	96 95       	lsr	r25
    1880:	90 ff       	sbrs	r25, 0
    1882:	0e c0       	rjmp	.+28     	; 0x18a0 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1884:	90 91 08 03 	lds	r25, 0x0308
    1888:	9f 5f       	subi	r25, 0xFF	; 255
    188a:	90 93 08 03 	sts	0x0308, r25
    188e:	95 30       	cpi	r25, 0x05	; 5
    1890:	19 f4       	brne	.+6      	; 0x1898 <update_octave_range+0x24>
    1892:	94 e0       	ldi	r25, 0x04	; 4
    1894:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1898:	98 e0       	ldi	r25, 0x08	; 8
    189a:	89 27       	eor	r24, r25
    189c:	80 93 7b 03 	sts	0x037B, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    18a0:	80 91 7c 03 	lds	r24, 0x037C
    18a4:	98 2f       	mov	r25, r24
    18a6:	96 95       	lsr	r25
    18a8:	96 95       	lsr	r25
    18aa:	96 95       	lsr	r25
    18ac:	90 ff       	sbrs	r25, 0
    18ae:	0b c0       	rjmp	.+22     	; 0x18c6 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    18b0:	90 91 08 03 	lds	r25, 0x0308
    18b4:	99 23       	and	r25, r25
    18b6:	19 f0       	breq	.+6      	; 0x18be <update_octave_range+0x4a>
    18b8:	91 50       	subi	r25, 0x01	; 1
    18ba:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    18be:	98 e0       	ldi	r25, 0x08	; 8
    18c0:	89 27       	eor	r24, r25
    18c2:	80 93 7c 03 	sts	0x037C, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    18c6:	80 91 08 03 	lds	r24, 0x0308
    18ca:	e1 e2       	ldi	r30, 0x21	; 33
    18cc:	f2 e0       	ldi	r31, 0x02	; 2
    18ce:	e8 0f       	add	r30, r24
    18d0:	f1 1d       	adc	r31, r1
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	00 80       	ld	r0, Z
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <update_octave_range+0x6a>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <update_octave_range+0x66>
    18e2:	58 2f       	mov	r21, r24
    18e4:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    18e8:	90 91 7c 03 	lds	r25, 0x037C
    18ec:	29 2f       	mov	r18, r25
    18ee:	26 95       	lsr	r18
    18f0:	26 95       	lsr	r18
    18f2:	20 ff       	sbrs	r18, 0
    18f4:	0e c0       	rjmp	.+28     	; 0x1912 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    18f6:	80 91 09 03 	lds	r24, 0x0309
    18fa:	8f 5f       	subi	r24, 0xFF	; 255
    18fc:	80 93 09 03 	sts	0x0309, r24
    1900:	85 30       	cpi	r24, 0x05	; 5
    1902:	19 f4       	brne	.+6      	; 0x190a <update_octave_range+0x96>
    1904:	84 e0       	ldi	r24, 0x04	; 4
    1906:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    190a:	84 e0       	ldi	r24, 0x04	; 4
    190c:	98 27       	eor	r25, r24
    190e:	90 93 7c 03 	sts	0x037C, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1912:	90 91 7c 03 	lds	r25, 0x037C
    1916:	29 2f       	mov	r18, r25
    1918:	26 95       	lsr	r18
    191a:	20 ff       	sbrs	r18, 0
    191c:	0b c0       	rjmp	.+22     	; 0x1934 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    191e:	80 91 09 03 	lds	r24, 0x0309
    1922:	88 23       	and	r24, r24
    1924:	19 f0       	breq	.+6      	; 0x192c <update_octave_range+0xb8>
    1926:	81 50       	subi	r24, 0x01	; 1
    1928:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	98 27       	eor	r25, r24
    1930:	90 93 7c 03 	sts	0x037C, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1934:	40 91 00 03 	lds	r20, 0x0300
    1938:	4c 7f       	andi	r20, 0xFC	; 252
    193a:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    193e:	90 91 09 03 	lds	r25, 0x0309
    1942:	93 30       	cpi	r25, 0x03	; 3
    1944:	88 f0       	brcs	.+34     	; 0x1968 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1946:	ec e1       	ldi	r30, 0x1C	; 28
    1948:	f2 e0       	ldi	r31, 0x02	; 2
    194a:	e9 0f       	add	r30, r25
    194c:	f1 1d       	adc	r31, r1
    194e:	21 e0       	ldi	r18, 0x01	; 1
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	c9 01       	movw	r24, r18
    1954:	00 80       	ld	r0, Z
    1956:	02 c0       	rjmp	.+4      	; 0x195c <update_octave_range+0xe8>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <update_octave_range+0xe4>
    1960:	84 2b       	or	r24, r20
    1962:	80 93 00 03 	sts	0x0300, r24
    1966:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1968:	ec e1       	ldi	r30, 0x1C	; 28
    196a:	f2 e0       	ldi	r31, 0x02	; 2
    196c:	e9 0f       	add	r30, r25
    196e:	f1 1d       	adc	r31, r1
    1970:	21 e0       	ldi	r18, 0x01	; 1
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	c9 01       	movw	r24, r18
    1976:	00 80       	ld	r0, Z
    1978:	02 c0       	rjmp	.+4      	; 0x197e <update_octave_range+0x10a>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <update_octave_range+0x106>
    1982:	85 2b       	or	r24, r21
    1984:	80 93 01 03 	sts	0x0301, r24
    1988:	08 95       	ret

0000198a <update_arp_settings>:

void update_arp_settings(void) {
	
	
	
}
    198a:	08 95       	ret

0000198c <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    198c:	80 91 7c 03 	lds	r24, 0x037C
    1990:	88 23       	and	r24, r24
    1992:	64 f4       	brge	.+24     	; 0x19ac <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1994:	80 58       	subi	r24, 0x80	; 128
    1996:	80 93 7c 03 	sts	0x037C, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    199a:	80 91 0a 03 	lds	r24, 0x030A
    199e:	8f 5f       	subi	r24, 0xFF	; 255
    19a0:	80 93 0a 03 	sts	0x030A, r24
    19a4:	85 30       	cpi	r24, 0x05	; 5
    19a6:	11 f4       	brne	.+4      	; 0x19ac <update_lfo_shape+0x20>
    19a8:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    19ac:	e0 91 0a 03 	lds	r30, 0x030A
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	ee 0f       	add	r30, r30
    19b4:	ff 1f       	adc	r31, r31
    19b6:	ea 5d       	subi	r30, 0xDA	; 218
    19b8:	fd 4f       	sbci	r31, 0xFD	; 253
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	01 80       	ldd	r0, Z+1	; 0x01
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <update_lfo_shape+0x3a>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    19ca:	90 91 ff 02 	lds	r25, 0x02FF
    19ce:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    19d0:	89 2b       	or	r24, r25
    19d2:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    19d6:	80 81       	ld	r24, Z
    19d8:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    19da:	ed ed       	ldi	r30, 0xDD	; 221
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	80 62       	ori	r24, 0x20	; 32
    19e2:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    19e4:	80 81       	ld	r24, Z
    19e6:	8f 7d       	andi	r24, 0xDF	; 223
    19e8:	80 83       	st	Z, r24
	
}		
    19ea:	08 95       	ret

000019ec <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    19ec:	80 91 7c 03 	lds	r24, 0x037C
    19f0:	80 ff       	sbrs	r24, 0
    19f2:	0f c0       	rjmp	.+30     	; 0x1a12 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    19f4:	91 e0       	ldi	r25, 0x01	; 1
    19f6:	89 27       	eor	r24, r25
    19f8:	80 93 7c 03 	sts	0x037C, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    19fc:	80 91 0b 03 	lds	r24, 0x030B
    1a00:	8f 5f       	subi	r24, 0xFF	; 255
    1a02:	80 93 0b 03 	sts	0x030B, r24
    1a06:	85 30       	cpi	r24, 0x05	; 5
    1a08:	11 f4       	brne	.+4      	; 0x1a0e <update_lfo_sync+0x22>
    1a0a:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1a0e:	10 92 87 03 	sts	0x0387, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1a12:	60 91 ff 02 	lds	r22, 0x02FF
    1a16:	60 7f       	andi	r22, 0xF0	; 240
    1a18:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1a1c:	20 91 0b 03 	lds	r18, 0x030B
    1a20:	22 23       	and	r18, r18
    1a22:	71 f0       	breq	.+28     	; 0x1a40 <update_lfo_sync+0x54>
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	21 50       	subi	r18, 0x01	; 1
    1a28:	30 40       	sbci	r19, 0x00	; 0
    1a2a:	41 e0       	ldi	r20, 0x01	; 1
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	ca 01       	movw	r24, r20
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <update_lfo_sync+0x4a>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	2a 95       	dec	r18
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <update_lfo_sync+0x46>
    1a3a:	86 2b       	or	r24, r22
    1a3c:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1a40:	80 91 ff 02 	lds	r24, 0x02FF
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	8f 70       	andi	r24, 0x0F	; 15
    1a48:	90 70       	andi	r25, 0x00	; 0
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	89 f0       	breq	.+34     	; 0x1a72 <update_lfo_sync+0x86>
    1a50:	83 30       	cpi	r24, 0x03	; 3
    1a52:	91 05       	cpc	r25, r1
    1a54:	24 f4       	brge	.+8      	; 0x1a5e <update_lfo_sync+0x72>
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	b1 f4       	brne	.+44     	; 0x1a88 <update_lfo_sync+0x9c>
    1a5c:	07 c0       	rjmp	.+14     	; 0x1a6c <update_lfo_sync+0x80>
    1a5e:	84 30       	cpi	r24, 0x04	; 4
    1a60:	91 05       	cpc	r25, r1
    1a62:	59 f0       	breq	.+22     	; 0x1a7a <update_lfo_sync+0x8e>
    1a64:	88 30       	cpi	r24, 0x08	; 8
    1a66:	91 05       	cpc	r25, r1
    1a68:	79 f4       	brne	.+30     	; 0x1a88 <update_lfo_sync+0x9c>
    1a6a:	0b c0       	rjmp	.+22     	; 0x1a82 <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode
    1a6c:	10 92 86 03 	sts	0x0386, r1
			
			break;
    1a70:	08 95       	ret
			
		case 0b0010:
			midi_clock.divider = 24; //1:4
    1a72:	88 e1       	ldi	r24, 0x18	; 24
    1a74:	80 93 86 03 	sts	0x0386, r24
			break;
    1a78:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1a7a:	8c e0       	ldi	r24, 0x0C	; 12
    1a7c:	80 93 86 03 	sts	0x0386, r24
			break;
    1a80:	08 95       	ret
			
		case 0b1000:
			 midi_clock.divider = 6; //1:16	 		
    1a82:	86 e0       	ldi	r24, 0x06	; 6
    1a84:	80 93 86 03 	sts	0x0386, r24
    1a88:	08 95       	ret

00001a8a <update_patch>:
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1a8a:	90 91 7b 03 	lds	r25, 0x037B
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1a8e:	80 91 7d 03 	lds	r24, 0x037D
    1a92:	86 95       	lsr	r24
    1a94:	86 95       	lsr	r24
    1a96:	68 2f       	mov	r22, r24
    1a98:	67 95       	ror	r22
    1a9a:	66 27       	eor	r22, r22
    1a9c:	67 95       	ror	r22
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1a9e:	29 2f       	mov	r18, r25
    1aa0:	21 70       	andi	r18, 0x01	; 1
    1aa2:	26 2b       	or	r18, r22
    1aa4:	69 2f       	mov	r22, r25
    1aa6:	66 1f       	adc	r22, r22
    1aa8:	66 27       	eor	r22, r22
    1aaa:	66 1f       	adc	r22, r22
    1aac:	66 0f       	add	r22, r22
    1aae:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1ab0:	29 2f       	mov	r18, r25
    1ab2:	26 95       	lsr	r18
    1ab4:	26 95       	lsr	r18
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	21 70       	andi	r18, 0x01	; 1
    1aba:	30 70       	andi	r19, 0x00	; 0
    1abc:	d9 01       	movw	r26, r18
    1abe:	aa 0f       	add	r26, r26
    1ac0:	bb 1f       	adc	r27, r27
    1ac2:	aa 0f       	add	r26, r26
    1ac4:	bb 1f       	adc	r27, r27
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ac6:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1ac8:	a9 2f       	mov	r26, r25
    1aca:	a6 95       	lsr	r26
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	a1 70       	andi	r26, 0x01	; 1
    1ad0:	b0 70       	andi	r27, 0x00	; 0
    1ad2:	fd 01       	movw	r30, r26
    1ad4:	ee 0f       	add	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ae0:	a6 2f       	mov	r26, r22
    1ae2:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1ae4:	e9 2f       	mov	r30, r25
    1ae6:	e2 95       	swap	r30
    1ae8:	ef 70       	andi	r30, 0x0F	; 15
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	e1 70       	andi	r30, 0x01	; 1
    1aee:	f0 70       	andi	r31, 0x00	; 0
    1af0:	bf 01       	movw	r22, r30
    1af2:	62 95       	swap	r22
    1af4:	72 95       	swap	r23
    1af6:	70 7f       	andi	r23, 0xF0	; 240
    1af8:	76 27       	eor	r23, r22
    1afa:	60 7f       	andi	r22, 0xF0	; 240
    1afc:	76 27       	eor	r23, r22
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1afe:	ea 2f       	mov	r30, r26
    1b00:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1b02:	69 2f       	mov	r22, r25
    1b04:	62 95       	swap	r22
    1b06:	66 95       	lsr	r22
    1b08:	67 70       	andi	r22, 0x07	; 7
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	61 70       	andi	r22, 0x01	; 1
    1b0e:	70 70       	andi	r23, 0x00	; 0
    1b10:	ab 01       	movw	r20, r22
    1b12:	44 0f       	add	r20, r20
    1b14:	55 1f       	adc	r21, r21
    1b16:	42 95       	swap	r20
    1b18:	52 95       	swap	r21
    1b1a:	50 7f       	andi	r21, 0xF0	; 240
    1b1c:	54 27       	eor	r21, r20
    1b1e:	40 7f       	andi	r20, 0xF0	; 240
    1b20:	54 27       	eor	r21, r20
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1b22:	6e 2f       	mov	r22, r30
    1b24:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1b26:	49 2f       	mov	r20, r25
    1b28:	42 95       	swap	r20
    1b2a:	46 95       	lsr	r20
    1b2c:	46 95       	lsr	r20
    1b2e:	43 70       	andi	r20, 0x03	; 3
    1b30:	50 e0       	ldi	r21, 0x00	; 0
    1b32:	41 70       	andi	r20, 0x01	; 1
    1b34:	50 70       	andi	r21, 0x00	; 0
    1b36:	9a 01       	movw	r18, r20
    1b38:	00 24       	eor	r0, r0
    1b3a:	36 95       	lsr	r19
    1b3c:	27 95       	ror	r18
    1b3e:	07 94       	ror	r0
    1b40:	36 95       	lsr	r19
    1b42:	27 95       	ror	r18
    1b44:	07 94       	ror	r0
    1b46:	32 2f       	mov	r19, r18
    1b48:	20 2d       	mov	r18, r0
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1b4a:	26 2b       	or	r18, r22
    1b4c:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1b50:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1b52:	81 95       	neg	r24
    1b54:	89 27       	eor	r24, r25
    1b56:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1b58:	89 27       	eor	r24, r25
    1b5a:	0e 94 98 14 	call	0x2930	; 0x2930 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1b5e:	ed ed       	ldi	r30, 0xDD	; 221
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1b64:	90 91 7d 03 	lds	r25, 0x037D
    1b68:	96 95       	lsr	r25
    1b6a:	96 95       	lsr	r25
    1b6c:	96 95       	lsr	r25
    1b6e:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1b70:	91 95       	neg	r25
    1b72:	80 81       	ld	r24, Z
    1b74:	89 27       	eor	r24, r25
    1b76:	80 71       	andi	r24, 0x10	; 16
    1b78:	82 27       	eor	r24, r18
    1b7a:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1b7c:	ee ef       	ldi	r30, 0xFE	; 254
    1b7e:	f2 e0       	ldi	r31, 0x02	; 2
    1b80:	80 81       	ld	r24, Z
    1b82:	98 27       	eor	r25, r24
    1b84:	91 70       	andi	r25, 0x01	; 1
    1b86:	89 27       	eor	r24, r25
    1b88:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1b8a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1b8e:	0e 94 c6 0c 	call	0x198c	; 0x198c <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1b92:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <update_lfo_sync>
	//update_patch_programmer();		
				

		
	
}
    1b96:	08 95       	ret

00001b98 <update_patch_programmer>:
	
	
	
}

void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1b9c:	90 91 07 03 	lds	r25, 0x0307
    1ba0:	95 30       	cpi	r25, 0x05	; 5
    1ba2:	01 f5       	brne	.+64     	; 0x1be4 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1ba4:	87 e0       	ldi	r24, 0x07	; 7
    1ba6:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1ba8:	cd ed       	ldi	r28, 0xDD	; 221
    1baa:	d0 e0       	ldi	r29, 0x00	; 0
    1bac:	88 81       	ld	r24, Y
    1bae:	80 62       	ori	r24, 0x20	; 32
    1bb0:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1bb2:	88 81       	ld	r24, Y
    1bb4:	8f 7d       	andi	r24, 0xDF	; 223
    1bb6:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1bb8:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1bba:	0e 94 4b 14 	call	0x2896	; 0x2896 <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1bbe:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1bc0:	88 81       	ld	r24, Y
    1bc2:	80 62       	ori	r24, 0x20	; 32
    1bc4:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1bc6:	88 81       	ld	r24, Y
    1bc8:	8f 7d       	andi	r24, 0xDF	; 223
    1bca:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1bcc:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1bce:	80 91 ff 02 	lds	r24, 0x02FF
    1bd2:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1bd4:	80 68       	ori	r24, 0x80	; 128
    1bd6:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1bda:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setup_system_clock>

		current_patch.mode = MEMORY;
    1bde:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1be2:	63 c0       	rjmp	.+198    	; 0x1caa <update_patch_programmer+0x112>
		//
		//return;
		//
	//}
	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1be4:	80 91 7d 03 	lds	r24, 0x037D
    1be8:	28 2f       	mov	r18, r24
    1bea:	22 95       	swap	r18
    1bec:	26 95       	lsr	r18
    1bee:	26 95       	lsr	r18
    1bf0:	23 70       	andi	r18, 0x03	; 3
    1bf2:	20 ff       	sbrs	r18, 0
    1bf4:	15 c0       	rjmp	.+42     	; 0x1c20 <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1bf6:	20 e4       	ldi	r18, 0x40	; 64
    1bf8:	82 27       	eor	r24, r18
    1bfa:	80 93 7d 03 	sts	0x037D, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1bfe:	80 91 03 03 	lds	r24, 0x0303
    1c02:	8f 5f       	subi	r24, 0xFF	; 255
    1c04:	80 93 03 03 	sts	0x0303, r24
    1c08:	85 32       	cpi	r24, 0x25	; 37
    1c0a:	21 f4       	brne	.+8      	; 0x1c14 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1c0c:	84 e2       	ldi	r24, 0x24	; 36
    1c0e:	80 93 03 03 	sts	0x0303, r24
    1c12:	06 c0       	rjmp	.+12     	; 0x1c20 <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1c14:	93 30       	cpi	r25, 0x03	; 3
    1c16:	21 f0       	breq	.+8      	; 0x1c20 <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1c18:	0e 94 4a 09 	call	0x1294	; 0x1294 <load_patch>
			update_patch();
    1c1c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1c20:	80 91 7d 03 	lds	r24, 0x037D
    1c24:	98 2f       	mov	r25, r24
    1c26:	92 95       	swap	r25
    1c28:	96 95       	lsr	r25
    1c2a:	97 70       	andi	r25, 0x07	; 7
    1c2c:	90 ff       	sbrs	r25, 0
    1c2e:	15 c0       	rjmp	.+42     	; 0x1c5a <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1c30:	90 e2       	ldi	r25, 0x20	; 32
    1c32:	89 27       	eor	r24, r25
    1c34:	80 93 7d 03 	sts	0x037D, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1c38:	80 91 03 03 	lds	r24, 0x0303
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	19 f0       	breq	.+6      	; 0x1c46 <update_patch_programmer+0xae>
    1c40:	81 50       	subi	r24, 0x01	; 1
    1c42:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1c46:	80 91 07 03 	lds	r24, 0x0307
    1c4a:	83 30       	cpi	r24, 0x03	; 3
    1c4c:	31 f0       	breq	.+12     	; 0x1c5a <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    1c4e:	80 91 03 03 	lds	r24, 0x0303
    1c52:	0e 94 4a 09 	call	0x1294	; 0x1294 <load_patch>
			update_patch();
    1c56:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1c5a:	80 91 7d 03 	lds	r24, 0x037D
    1c5e:	98 2f       	mov	r25, r24
    1c60:	92 95       	swap	r25
    1c62:	9f 70       	andi	r25, 0x0F	; 15
    1c64:	90 ff       	sbrs	r25, 0
    1c66:	15 c0       	rjmp	.+42     	; 0x1c92 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1c68:	90 e1       	ldi	r25, 0x10	; 16
    1c6a:	89 27       	eor	r24, r25
    1c6c:	80 93 7d 03 	sts	0x037D, r24
		if (current_patch.mode != WRITE) {
    1c70:	90 91 07 03 	lds	r25, 0x0307
    1c74:	93 30       	cpi	r25, 0x03	; 3
    1c76:	49 f0       	breq	.+18     	; 0x1c8a <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1c78:	8f 77       	andi	r24, 0x7F	; 127
    1c7a:	80 93 7d 03 	sts	0x037D, r24
			current_patch.mode = WRITE;
    1c7e:	83 e0       	ldi	r24, 0x03	; 3
    1c80:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1c84:	0e 94 2c 07 	call	0xe58	; 0xe58 <lock_pots>
    1c88:	04 c0       	rjmp	.+8      	; 0x1c92 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1c8a:	80 91 03 03 	lds	r24, 0x0303
    1c8e:	0e 94 57 07 	call	0xeae	; 0xeae <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1c92:	80 91 7d 03 	lds	r24, 0x037D
    1c96:	88 23       	and	r24, r24
    1c98:	44 f4       	brge	.+16     	; 0x1caa <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1c9a:	80 68       	ori	r24, 0x80	; 128
    1c9c:	80 93 7d 03 	sts	0x037D, r24
		current_patch.mode = MANUAL;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    1ca6:	0e 94 46 07 	call	0xe8c	; 0xe8c <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	08 95       	ret

00001cb0 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1cb0:	88 ed       	ldi	r24, 0xD8	; 216
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1cbc:	81 ee       	ldi	r24, 0xE1	; 225
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1cc8:	82 ee       	ldi	r24, 0xE2	; 226
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1cd4:	82 eb       	ldi	r24, 0xB2	; 178
    1cd6:	92 e0       	ldi	r25, 0x02	; 2
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1ce0:	8a ed       	ldi	r24, 0xDA	; 218
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1cec:	8f ed       	ldi	r24, 0xDF	; 223
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1cf8:	80 ee       	ldi	r24, 0xE0	; 224
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1d04:	81 ed       	ldi	r24, 0xD1	; 209
    1d06:	91 e0       	ldi	r25, 0x01	; 1
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1d10:	86 ed       	ldi	r24, 0xD6	; 214
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1d1c:	82 ed       	ldi	r24, 0xD2	; 210
    1d1e:	91 e0       	ldi	r25, 0x01	; 1
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1d28:	83 ed       	ldi	r24, 0xD3	; 211
    1d2a:	91 e0       	ldi	r25, 0x01	; 1
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	70 e0       	ldi	r23, 0x00	; 0
    1d30:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1d34:	84 ed       	ldi	r24, 0xD4	; 212
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	6f ef       	ldi	r22, 0xFF	; 255
    1d3a:	7f e3       	ldi	r23, 0x3F	; 63
    1d3c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1d40:	85 ed       	ldi	r24, 0xD5	; 213
    1d42:	91 e0       	ldi	r25, 0x01	; 1
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1d4c:	89 ed       	ldi	r24, 0xD9	; 217
    1d4e:	91 e0       	ldi	r25, 0x01	; 1
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1d58:	8e ec       	ldi	r24, 0xCE	; 206
    1d5a:	91 e0       	ldi	r25, 0x01	; 1
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1d64:	8c ec       	ldi	r24, 0xCC	; 204
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1d70:	8a ec       	ldi	r24, 0xCA	; 202
    1d72:	91 e0       	ldi	r25, 0x01	; 1
    1d74:	6f ef       	ldi	r22, 0xFF	; 255
    1d76:	7f e3       	ldi	r23, 0x3F	; 63
    1d78:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1d7c:	88 ec       	ldi	r24, 0xC8	; 200
    1d7e:	91 e0       	ldi	r25, 0x01	; 1
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1d88:	80 ed       	ldi	r24, 0xD0	; 208
    1d8a:	91 e0       	ldi	r25, 0x01	; 1
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1d94:	83 ee       	ldi	r24, 0xE3	; 227
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1da0:	84 ee       	ldi	r24, 0xE4	; 228
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
}	
    1dac:	08 95       	ret

00001dae <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1dae:	2f 92       	push	r2
    1db0:	3f 92       	push	r3
    1db2:	4f 92       	push	r4
    1db4:	5f 92       	push	r5
    1db6:	6f 92       	push	r6
    1db8:	7f 92       	push	r7
    1dba:	8f 92       	push	r8
    1dbc:	9f 92       	push	r9
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	2c 97       	sbiw	r28, 0x0c	; 12
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
    1de2:	08 2f       	mov	r16, r24
    1de4:	78 87       	std	Y+8, r23	; 0x08
    1de6:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1de8:	80 91 78 03 	lds	r24, 0x0378
    1dec:	83 60       	ori	r24, 0x03	; 3
    1dee:	80 93 78 03 	sts	0x0378, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1df2:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1df6:	10 92 77 03 	sts	0x0377, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1dfa:	0f 30       	cpi	r16, 0x0F	; 15
    1dfc:	e1 f4       	brne	.+56     	; 0x1e36 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1dfe:	0f 2e       	mov	r0, r31
    1e00:	f6 ee       	ldi	r31, 0xE6	; 230
    1e02:	4f 2e       	mov	r4, r31
    1e04:	f1 e0       	ldi	r31, 0x01	; 1
    1e06:	5f 2e       	mov	r5, r31
    1e08:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1e0a:	0f 2e       	mov	r0, r31
    1e0c:	fe ed       	ldi	r31, 0xDE	; 222
    1e0e:	2f 2e       	mov	r2, r31
    1e10:	f1 e0       	ldi	r31, 0x01	; 1
    1e12:	3f 2e       	mov	r3, r31
    1e14:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1e16:	23 ee       	ldi	r18, 0xE3	; 227
    1e18:	31 e0       	ldi	r19, 0x01	; 1
    1e1a:	3a 83       	std	Y+2, r19	; 0x02
    1e1c:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1e1e:	0f 2e       	mov	r0, r31
    1e20:	fc ed       	ldi	r31, 0xDC	; 220
    1e22:	8f 2e       	mov	r8, r31
    1e24:	f1 e0       	ldi	r31, 0x01	; 1
    1e26:	9f 2e       	mov	r9, r31
    1e28:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1e2a:	82 e7       	ldi	r24, 0x72	; 114
    1e2c:	96 e0       	ldi	r25, 0x06	; 6
    1e2e:	9a 87       	std	Y+10, r25	; 0x0a
    1e30:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	1b c0       	rjmp	.+54     	; 0x1e6c <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1e36:	0f 2e       	mov	r0, r31
    1e38:	f5 ee       	ldi	r31, 0xE5	; 229
    1e3a:	4f 2e       	mov	r4, r31
    1e3c:	f1 e0       	ldi	r31, 0x01	; 1
    1e3e:	5f 2e       	mov	r5, r31
    1e40:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1e42:	0f 2e       	mov	r0, r31
    1e44:	f7 ed       	ldi	r31, 0xD7	; 215
    1e46:	2f 2e       	mov	r2, r31
    1e48:	f1 e0       	ldi	r31, 0x01	; 1
    1e4a:	3f 2e       	mov	r3, r31
    1e4c:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1e4e:	e4 ee       	ldi	r30, 0xE4	; 228
    1e50:	f1 e0       	ldi	r31, 0x01	; 1
    1e52:	fa 83       	std	Y+2, r31	; 0x02
    1e54:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1e56:	0f 2e       	mov	r0, r31
    1e58:	fd ed       	ldi	r31, 0xDD	; 221
    1e5a:	8f 2e       	mov	r8, r31
    1e5c:	f1 e0       	ldi	r31, 0x01	; 1
    1e5e:	9f 2e       	mov	r9, r31
    1e60:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1e62:	20 e7       	ldi	r18, 0x70	; 112
    1e64:	36 e0       	ldi	r19, 0x06	; 6
    1e66:	3a 87       	std	Y+10, r19	; 0x0a
    1e68:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1e6a:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1e6c:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1e6e:	ed ed       	ldi	r30, 0xDD	; 221
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	80 64       	ori	r24, 0x40	; 64
    1e76:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 7b       	andi	r24, 0xBF	; 191
    1e7c:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1e7e:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1e80:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1e82:	84 b5       	in	r24, 0x24	; 36
    1e84:	8f 60       	ori	r24, 0x0F	; 15
    1e86:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1e8c:	ee e6       	ldi	r30, 0x6E	; 110
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	90 81       	ld	r25, Z
    1e92:	92 60       	ori	r25, 0x02	; 2
    1e94:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1e96:	80 93 79 03 	sts	0x0379, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1e9a:	8d e0       	ldi	r24, 0x0D	; 13
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9c 83       	std	Y+4, r25	; 0x04
    1ea0:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1ea2:	80 2f       	mov	r24, r16
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	8c 01       	movw	r16, r24
    1ea8:	0f 5f       	subi	r16, 0xFF	; 255
    1eaa:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1eac:	0f 2e       	mov	r0, r31
    1eae:	f8 ed       	ldi	r31, 0xD8	; 216
    1eb0:	ef 2e       	mov	r14, r31
    1eb2:	f1 e0       	ldi	r31, 0x01	; 1
    1eb4:	ff 2e       	mov	r15, r31
    1eb6:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1eb8:	0f 2e       	mov	r0, r31
    1eba:	f4 ed       	ldi	r31, 0xD4	; 212
    1ebc:	cf 2e       	mov	r12, r31
    1ebe:	f1 e0       	ldi	r31, 0x01	; 1
    1ec0:	df 2e       	mov	r13, r31
    1ec2:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1ec4:	0f 2e       	mov	r0, r31
    1ec6:	fa ec       	ldi	r31, 0xCA	; 202
    1ec8:	af 2e       	mov	r10, r31
    1eca:	f1 e0       	ldi	r31, 0x01	; 1
    1ecc:	bf 2e       	mov	r11, r31
    1ece:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1ed0:	0f 2e       	mov	r0, r31
    1ed2:	fb ec       	ldi	r31, 0xCB	; 203
    1ed4:	6f 2e       	mov	r6, r31
    1ed6:	f1 e0       	ldi	r31, 0x01	; 1
    1ed8:	7f 2e       	mov	r7, r31
    1eda:	f0 2d       	mov	r31, r0
    1edc:	e0 e0       	ldi	r30, 0x00	; 0
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	fc 87       	std	Y+12, r31	; 0x0c
    1ee2:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1ee4:	21 e0       	ldi	r18, 0x01	; 1
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	0b 80       	ldd	r0, Y+3	; 0x03
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <set_vco_init_cv+0x142>
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	0a 94       	dec	r0
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <set_vco_init_cv+0x13e>
    1ef4:	3e 83       	std	Y+6, r19	; 0x06
    1ef6:	2d 83       	std	Y+5, r18	; 0x05
    1ef8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1efa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1efc:	82 2b       	or	r24, r18
    1efe:	93 2b       	or	r25, r19
    1f00:	9c 87       	std	Y+12, r25	; 0x0c
    1f02:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1f04:	c4 01       	movw	r24, r8
    1f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
		
		count_finished = FALSE;
    1f0e:	10 92 77 03 	sts	0x0377, r1
		period_counter = 0;
    1f12:	10 92 7a 03 	sts	0x037A, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1f16:	8f e0       	ldi	r24, 0x0F	; 15
    1f18:	e8 e1       	ldi	r30, 0x18	; 24
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	a8 95       	wdr
    1f22:	e0 93 60 00 	sts	0x0060, r30
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1f2c:	80 91 77 03 	lds	r24, 0x0377
    1f30:	88 23       	and	r24, r24
    1f32:	89 f5       	brne	.+98     	; 0x1f96 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1f34:	c8 01       	movw	r24, r16
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1f3c:	c4 01       	movw	r24, r8
    1f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f42:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1f46:	c1 01       	movw	r24, r2
    1f48:	6f ef       	ldi	r22, 0xFF	; 255
    1f4a:	7f e3       	ldi	r23, 0x3F	; 63
    1f4c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1f50:	c7 01       	movw	r24, r14
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1f5a:	c6 01       	movw	r24, r12
    1f5c:	6f ef       	ldi	r22, 0xFF	; 255
    1f5e:	7f e3       	ldi	r23, 0x3F	; 63
    1f60:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1f64:	c5 01       	movw	r24, r10
    1f66:	6f ef       	ldi	r22, 0xFF	; 255
    1f68:	7f e3       	ldi	r23, 0x3F	; 63
    1f6a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1f6e:	c3 01       	movw	r24, r6
    1f70:	6f ef       	ldi	r22, 0xFF	; 255
    1f72:	7f e3       	ldi	r23, 0x3F	; 63
    1f74:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	6f ef       	ldi	r22, 0xFF	; 255
    1f7e:	7f e3       	ldi	r23, 0x3F	; 63
    1f80:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1f84:	c2 01       	movw	r24, r4
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1f8e:	80 91 77 03 	lds	r24, 0x0377
    1f92:	88 23       	and	r24, r24
    1f94:	79 f2       	breq	.-98     	; 0x1f34 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1f96:	88 e1       	ldi	r24, 0x18	; 24
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	80 93 60 00 	sts	0x0060, r24
    1fa0:	10 92 60 00 	sts	0x0060, r1
    1fa4:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1fa6:	80 91 75 03 	lds	r24, 0x0375
    1faa:	90 91 76 03 	lds	r25, 0x0376
    1fae:	ef 81       	ldd	r30, Y+7	; 0x07
    1fb0:	f8 85       	ldd	r31, Y+8	; 0x08
    1fb2:	e8 17       	cp	r30, r24
    1fb4:	f9 07       	cpc	r31, r25
    1fb6:	20 f0       	brcs	.+8      	; 0x1fc0 <set_vco_init_cv+0x212>
    1fb8:	80 91 af 02 	lds	r24, 0x02AF
    1fbc:	88 23       	and	r24, r24
    1fbe:	51 f4       	brne	.+20     	; 0x1fd4 <set_vco_init_cv+0x226>
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	80 95       	com	r24
    1fc6:	90 95       	com	r25
    1fc8:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fca:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fcc:	28 23       	and	r18, r24
    1fce:	39 23       	and	r19, r25
    1fd0:	3c 87       	std	Y+12, r19	; 0x0c
    1fd2:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	9c 83       	std	Y+4, r25	; 0x04
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
    1fe4:	ef ef       	ldi	r30, 0xFF	; 255
    1fe6:	8f 3f       	cpi	r24, 0xFF	; 255
    1fe8:	9e 07       	cpc	r25, r30
    1fea:	09 f0       	breq	.+2      	; 0x1fee <set_vco_init_cv+0x240>
    1fec:	7b cf       	rjmp	.-266    	; 0x1ee4 <set_vco_init_cv+0x136>
    1fee:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ff0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ff2:	3e 83       	std	Y+6, r19	; 0x06
    1ff4:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1ff6:	88 ec       	ldi	r24, 0xC8	; 200
    1ff8:	91 e0       	ldi	r25, 0x01	; 1
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    2002:	89 ec       	ldi	r24, 0xC9	; 201
    2004:	91 e0       	ldi	r25, 0x01	; 1
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    200e:	84 ed       	ldi	r24, 0xD4	; 212
    2010:	91 e0       	ldi	r25, 0x01	; 1
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    201a:	88 ed       	ldi	r24, 0xD8	; 216
    201c:	91 e0       	ldi	r25, 0x01	; 1
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    2026:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    2028:	ee e6       	ldi	r30, 0x6E	; 110
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	8d 7f       	andi	r24, 0xFD	; 253
    2030:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2032:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	6d 81       	ldd	r22, Y+5	; 0x05
    203a:	7e 81       	ldd	r23, Y+6	; 0x06
    203c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	2c 96       	adiw	r28, 0x0c	; 12
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	ff 90       	pop	r15
    205a:	ef 90       	pop	r14
    205c:	df 90       	pop	r13
    205e:	cf 90       	pop	r12
    2060:	bf 90       	pop	r11
    2062:	af 90       	pop	r10
    2064:	9f 90       	pop	r9
    2066:	8f 90       	pop	r8
    2068:	7f 90       	pop	r7
    206a:	6f 90       	pop	r6
    206c:	5f 90       	pop	r5
    206e:	4f 90       	pop	r4
    2070:	3f 90       	pop	r3
    2072:	2f 90       	pop	r2
    2074:	08 95       	ret

00002076 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    2076:	2f 92       	push	r2
    2078:	3f 92       	push	r3
    207a:	4f 92       	push	r4
    207c:	5f 92       	push	r5
    207e:	6f 92       	push	r6
    2080:	7f 92       	push	r7
    2082:	8f 92       	push	r8
    2084:	9f 92       	push	r9
    2086:	af 92       	push	r10
    2088:	bf 92       	push	r11
    208a:	cf 92       	push	r12
    208c:	df 92       	push	r13
    208e:	ef 92       	push	r14
    2090:	ff 92       	push	r15
    2092:	0f 93       	push	r16
    2094:	1f 93       	push	r17
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	c0 54       	subi	r28, 0x40	; 64
    20a0:	d0 40       	sbci	r29, 0x00	; 0
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    20ae:	de 01       	movw	r26, r28
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	e0 e3       	ldi	r30, 0x30	; 48
    20b4:	f2 e0       	ldi	r31, 0x02	; 2
    20b6:	80 e3       	ldi	r24, 0x30	; 48
    20b8:	01 90       	ld	r0, Z+
    20ba:	0d 92       	st	X+, r0
    20bc:	81 50       	subi	r24, 0x01	; 1
    20be:	e1 f7       	brne	.-8      	; 0x20b8 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    20c0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    20c4:	0f 30       	cpi	r16, 0x0F	; 15
    20c6:	11 f5       	brne	.+68     	; 0x210c <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    20c8:	40 90 72 03 	lds	r4, 0x0372
    20cc:	50 90 73 03 	lds	r5, 0x0373
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    20d0:	0f 2e       	mov	r0, r31
    20d2:	f6 ee       	ldi	r31, 0xE6	; 230
    20d4:	8f 2e       	mov	r8, r31
    20d6:	f1 e0       	ldi	r31, 0x01	; 1
    20d8:	9f 2e       	mov	r9, r31
    20da:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    20dc:	0f 2e       	mov	r0, r31
    20de:	fe ed       	ldi	r31, 0xDE	; 222
    20e0:	2f 2e       	mov	r2, r31
    20e2:	f1 e0       	ldi	r31, 0x01	; 1
    20e4:	3f 2e       	mov	r3, r31
    20e6:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    20e8:	23 ee       	ldi	r18, 0xE3	; 227
    20ea:	31 e0       	ldi	r19, 0x01	; 1
    20ec:	3a ab       	sts	0x5a, r19
    20ee:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    20f0:	0f 2e       	mov	r0, r31
    20f2:	fc ed       	ldi	r31, 0xDC	; 220
    20f4:	6f 2e       	mov	r6, r31
    20f6:	f1 e0       	ldi	r31, 0x01	; 1
    20f8:	7f 2e       	mov	r7, r31
    20fa:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    20fc:	0e e4       	ldi	r16, 0x4E	; 78
    20fe:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2100:	cc 24       	eor	r12, r12
    2102:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    2104:	ee 24       	eor	r14, r14
    2106:	68 94       	set
    2108:	e1 f8       	bld	r14, 1
    210a:	22 c0       	rjmp	.+68     	; 0x2150 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    210c:	40 90 70 03 	lds	r4, 0x0370
    2110:	50 90 71 03 	lds	r5, 0x0371
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2114:	0f 2e       	mov	r0, r31
    2116:	f5 ee       	ldi	r31, 0xE5	; 229
    2118:	8f 2e       	mov	r8, r31
    211a:	f1 e0       	ldi	r31, 0x01	; 1
    211c:	9f 2e       	mov	r9, r31
    211e:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2120:	0f 2e       	mov	r0, r31
    2122:	f7 ed       	ldi	r31, 0xD7	; 215
    2124:	2f 2e       	mov	r2, r31
    2126:	f1 e0       	ldi	r31, 0x01	; 1
    2128:	3f 2e       	mov	r3, r31
    212a:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    212c:	44 ee       	ldi	r20, 0xE4	; 228
    212e:	51 e0       	ldi	r21, 0x01	; 1
    2130:	5a ab       	sts	0x5a, r21
    2132:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2134:	0f 2e       	mov	r0, r31
    2136:	fd ed       	ldi	r31, 0xDD	; 221
    2138:	6f 2e       	mov	r6, r31
    213a:	f1 e0       	ldi	r31, 0x01	; 1
    213c:	7f 2e       	mov	r7, r31
    213e:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    2140:	0c e2       	ldi	r16, 0x2C	; 44
    2142:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    2144:	cc 24       	eor	r12, r12
    2146:	68 94       	set
    2148:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    214a:	ee 24       	eor	r14, r14
    214c:	68 94       	set
    214e:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    2150:	c3 01       	movw	r24, r6
    2152:	b2 01       	movw	r22, r4
    2154:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    2158:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    215a:	ed ed       	ldi	r30, 0xDD	; 221
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	80 64       	ori	r24, 0x40	; 64
    2162:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2164:	80 81       	ld	r24, Z
    2166:	8f 7b       	andi	r24, 0xBF	; 191
    2168:	80 83       	st	Z, r24
		DATA_BUS = 0;
    216a:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    216c:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	80 93 79 03 	sts	0x0379, r24
		
		compare_match_counter = 0;	
    2174:	10 92 74 03 	sts	0x0374, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    2178:	8c 2d       	mov	r24, r12
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	24 e6       	ldi	r18, 0x64	; 100
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	82 9f       	mul	r24, r18
    2182:	d0 01       	movw	r26, r0
    2184:	83 9f       	mul	r24, r19
    2186:	b0 0d       	add	r27, r0
    2188:	92 9f       	mul	r25, r18
    218a:	b0 0d       	add	r27, r0
    218c:	11 24       	eor	r1, r1
    218e:	bc ab       	sts	0x5c, r27
    2190:	ab ab       	sts	0x5b, r26
    2192:	fe 01       	movw	r30, r28
    2194:	31 96       	adiw	r30, 0x01	; 1
    2196:	fc af       	sts	0x7c, r31
    2198:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    219a:	98 01       	movw	r18, r16
    219c:	2e 5f       	subi	r18, 0xFE	; 254
    219e:	3f 4f       	sbci	r19, 0xFF	; 255
    21a0:	21 96       	adiw	r28, 0x01	; 1
    21a2:	3f af       	sts	0x7f, r19
    21a4:	2e af       	sts	0x7e, r18
    21a6:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    21a8:	1e ae       	sts	0xbe, r17
    21aa:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    21ac:	0f 2e       	mov	r0, r31
    21ae:	f8 ed       	ldi	r31, 0xD8	; 216
    21b0:	ef 2e       	mov	r14, r31
    21b2:	f1 e0       	ldi	r31, 0x01	; 1
    21b4:	ff 2e       	mov	r15, r31
    21b6:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    21b8:	0f 2e       	mov	r0, r31
    21ba:	f4 ed       	ldi	r31, 0xD4	; 212
    21bc:	cf 2e       	mov	r12, r31
    21be:	f1 e0       	ldi	r31, 0x01	; 1
    21c0:	df 2e       	mov	r13, r31
    21c2:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    21c4:	0f 2e       	mov	r0, r31
    21c6:	fa ec       	ldi	r31, 0xCA	; 202
    21c8:	af 2e       	mov	r10, r31
    21ca:	f1 e0       	ldi	r31, 0x01	; 1
    21cc:	bf 2e       	mov	r11, r31
    21ce:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    21d0:	eb ad       	sts	0x6b, r30
    21d2:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    21d4:	80 81       	ld	r24, Z
    21d6:	80 93 79 03 	sts	0x0379, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    21da:	84 b5       	in	r24, 0x24	; 36
    21dc:	8f 60       	ori	r24, 0x0F	; 15
    21de:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    21e4:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    21e6:	4d ad       	sts	0x6d, r20
    21e8:	5e ad       	sts	0x6e, r21
    21ea:	43 30       	cpi	r20, 0x03	; 3
    21ec:	51 05       	cpc	r21, r1
    21ee:	24 f4       	brge	.+8      	; 0x21f8 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    21f0:	83 e0       	ldi	r24, 0x03	; 3
    21f2:	80 93 78 03 	sts	0x0378, r24
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    21f8:	82 e0       	ldi	r24, 0x02	; 2
    21fa:	80 93 78 03 	sts	0x0378, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    21fe:	81 81       	ldd	r24, Z+1	; 0x01
    2200:	92 81       	ldd	r25, Z+2	; 0x02
    2202:	9a af       	sts	0x7a, r25
    2204:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2206:	ad e0       	ldi	r26, 0x0D	; 13
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	be ab       	sts	0x5e, r27
    220c:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    220e:	00 e0       	ldi	r16, 0x00	; 0
    2210:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2212:	e1 e0       	ldi	r30, 0x01	; 1
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	0d a8       	sts	0x8d, r16
    2218:	02 c0       	rjmp	.+4      	; 0x221e <tune_8ths+0x1a8>
    221a:	ee 0f       	add	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	0a 94       	dec	r0
    2220:	e2 f7       	brpl	.-8      	; 0x221a <tune_8ths+0x1a4>
    2222:	f8 af       	sts	0x78, r31
    2224:	ef ab       	sts	0x5f, r30
    2226:	0e 2b       	or	r16, r30
    2228:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    222a:	ae e6       	ldi	r26, 0x6E	; 110
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	8c 91       	ld	r24, X
    2230:	8d 7f       	andi	r24, 0xFD	; 253
    2232:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2234:	c4 01       	movw	r24, r8
    2236:	b8 01       	movw	r22, r16
    2238:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    223c:	e3 ef       	ldi	r30, 0xF3	; 243
    223e:	f1 e0       	ldi	r31, 0x01	; 1
    2240:	31 97       	sbiw	r30, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <tune_8ths+0x1ca>
    2244:	00 c0       	rjmp	.+0      	; 0x2246 <tune_8ths+0x1d0>
    2246:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2248:	ae e6       	ldi	r26, 0x6E	; 110
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	8c 91       	ld	r24, X
    224e:	82 60       	ori	r24, 0x02	; 2
    2250:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    2252:	10 92 77 03 	sts	0x0377, r1
				period_counter = 0;
    2256:	10 92 7a 03 	sts	0x037A, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    225a:	e8 e1       	ldi	r30, 0x18	; 24
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	2f e0       	ldi	r18, 0x0F	; 15
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	a8 95       	wdr
    2266:	e0 93 60 00 	sts	0x0060, r30
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    2270:	80 91 77 03 	lds	r24, 0x0377
    2274:	88 23       	and	r24, r24
    2276:	81 f5       	brne	.+96     	; 0x22d8 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    2278:	80 91 79 03 	lds	r24, 0x0379
    227c:	4b a9       	sts	0x4b, r20
    227e:	5c a9       	sts	0x4c, r21
    2280:	48 0f       	add	r20, r24
    2282:	51 1d       	adc	r21, r1
    2284:	ca 01       	movw	r24, r20
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    228c:	c3 01       	movw	r24, r6
    228e:	b2 01       	movw	r22, r4
    2290:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2294:	c4 01       	movw	r24, r8
    2296:	b8 01       	movw	r22, r16
    2298:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    229c:	c7 01       	movw	r24, r14
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    22a6:	c6 01       	movw	r24, r12
    22a8:	6f ef       	ldi	r22, 0xFF	; 255
    22aa:	7f e3       	ldi	r23, 0x3F	; 63
    22ac:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    22b0:	c5 01       	movw	r24, r10
    22b2:	6f ef       	ldi	r22, 0xFF	; 255
    22b4:	7f e3       	ldi	r23, 0x3F	; 63
    22b6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    22ba:	c1 01       	movw	r24, r2
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	70 e2       	ldi	r23, 0x20	; 32
    22c0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    22c4:	89 a9       	sts	0x49, r24
    22c6:	9a a9       	sts	0x4a, r25
    22c8:	6f ef       	ldi	r22, 0xFF	; 255
    22ca:	7f e3       	ldi	r23, 0x3F	; 63
    22cc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    22d0:	80 91 77 03 	lds	r24, 0x0377
    22d4:	88 23       	and	r24, r24
    22d6:	81 f2       	breq	.-96     	; 0x2278 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    22d8:	58 e1       	ldi	r21, 0x18	; 24
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	50 93 60 00 	sts	0x0060, r21
    22e2:	10 92 60 00 	sts	0x0060, r1
    22e6:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    22e8:	80 91 75 03 	lds	r24, 0x0375
    22ec:	90 91 76 03 	lds	r25, 0x0376
    22f0:	a9 ad       	sts	0x69, r26
    22f2:	ba ad       	sts	0x6a, r27
    22f4:	a8 17       	cp	r26, r24
    22f6:	b9 07       	cpc	r27, r25
    22f8:	50 f0       	brcs	.+20     	; 0x230e <tune_8ths+0x298>
    22fa:	80 91 af 02 	lds	r24, 0x02AF
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	31 f4       	brne	.+12     	; 0x230e <tune_8ths+0x298>
    2302:	8f a9       	sts	0x4f, r24
    2304:	98 ad       	sts	0x68, r25
    2306:	80 95       	com	r24
    2308:	90 95       	com	r25
    230a:	08 23       	and	r16, r24
    230c:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    230e:	80 91 75 03 	lds	r24, 0x0375
    2312:	90 91 76 03 	lds	r25, 0x0376
    2316:	e9 ad       	sts	0x69, r30
    2318:	fa ad       	sts	0x6a, r31
    231a:	8e 17       	cp	r24, r30
    231c:	9f 07       	cpc	r25, r31
    231e:	21 f4       	brne	.+8      	; 0x2328 <tune_8ths+0x2b2>
    2320:	80 91 af 02 	lds	r24, 0x02AF
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	71 f0       	breq	.+28     	; 0x2344 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    2328:	f1 e0       	ldi	r31, 0x01	; 1
    232a:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    232e:	2d a9       	sts	0x4d, r18
    2330:	3e a9       	sts	0x4e, r19
    2332:	21 50       	subi	r18, 0x01	; 1
    2334:	30 40       	sbci	r19, 0x00	; 0
    2336:	3e ab       	sts	0x5e, r19
    2338:	2d ab       	sts	0x5d, r18
    233a:	4f ef       	ldi	r20, 0xFF	; 255
    233c:	2f 3f       	cpi	r18, 0xFF	; 255
    233e:	34 07       	cpc	r19, r20
    2340:	09 f0       	breq	.+2      	; 0x2344 <tune_8ths+0x2ce>
    2342:	67 cf       	rjmp	.-306    	; 0x2212 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    2344:	21 96       	adiw	r28, 0x01	; 1
    2346:	ae ad       	sts	0x6e, r26
    2348:	bf ad       	sts	0x6f, r27
    234a:	21 97       	sbiw	r28, 0x01	; 1
    234c:	0d 93       	st	X+, r16
    234e:	1d 93       	st	X+, r17
    2350:	21 96       	adiw	r28, 0x01	; 1
    2352:	bf af       	sts	0x7f, r27
    2354:	ae af       	sts	0x7e, r26
    2356:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2358:	ee e6       	ldi	r30, 0x6E	; 110
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8d 7f       	andi	r24, 0xFD	; 253
    2360:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    2362:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2364:	2d ad       	sts	0x6d, r18
    2366:	3e ad       	sts	0x6e, r19
    2368:	2f 5f       	subi	r18, 0xFF	; 255
    236a:	3f 4f       	sbci	r19, 0xFF	; 255
    236c:	3e af       	sts	0x7e, r19
    236e:	2d af       	sts	0x7d, r18
    2370:	4b ad       	sts	0x6b, r20
    2372:	5c ad       	sts	0x6c, r21
    2374:	4d 5f       	subi	r20, 0xFD	; 253
    2376:	5f 4f       	sbci	r21, 0xFF	; 255
    2378:	5c af       	sts	0x7c, r21
    237a:	4b af       	sts	0x7b, r20
    237c:	20 31       	cpi	r18, 0x10	; 16
    237e:	31 05       	cpc	r19, r1
    2380:	09 f0       	breq	.+2      	; 0x2384 <tune_8ths+0x30e>
    2382:	26 cf       	rjmp	.-436    	; 0x21d0 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    2384:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    2386:	c0 5c       	subi	r28, 0xC0	; 192
    2388:	df 4f       	sbci	r29, 0xFF	; 255
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	ff 90       	pop	r15
    239e:	ef 90       	pop	r14
    23a0:	df 90       	pop	r13
    23a2:	cf 90       	pop	r12
    23a4:	bf 90       	pop	r11
    23a6:	af 90       	pop	r10
    23a8:	9f 90       	pop	r9
    23aa:	8f 90       	pop	r8
    23ac:	7f 90       	pop	r7
    23ae:	6f 90       	pop	r6
    23b0:	5f 90       	pop	r5
    23b2:	4f 90       	pop	r4
    23b4:	3f 90       	pop	r3
    23b6:	2f 90       	pop	r2
    23b8:	08 95       	ret

000023ba <tune_filter>:
	
void tune_filter(void) {
    23ba:	2f 92       	push	r2
    23bc:	3f 92       	push	r3
    23be:	4f 92       	push	r4
    23c0:	5f 92       	push	r5
    23c2:	6f 92       	push	r6
    23c4:	7f 92       	push	r7
    23c6:	8f 92       	push	r8
    23c8:	9f 92       	push	r9
    23ca:	af 92       	push	r10
    23cc:	bf 92       	push	r11
    23ce:	cf 92       	push	r12
    23d0:	df 92       	push	r13
    23d2:	ef 92       	push	r14
    23d4:	ff 92       	push	r15
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	e9 97       	sbiw	r28, 0x39	; 57
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    23ee:	de 01       	movw	r26, r28
    23f0:	11 96       	adiw	r26, 0x01	; 1
    23f2:	e0 e6       	ldi	r30, 0x60	; 96
    23f4:	f2 e0       	ldi	r31, 0x02	; 2
    23f6:	8d e2       	ldi	r24, 0x2D	; 45
    23f8:	01 90       	ld	r0, Z+
    23fa:	0d 92       	st	X+, r0
    23fc:	81 50       	subi	r24, 0x01	; 1
    23fe:	e1 f7       	brne	.-8      	; 0x23f8 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2400:	88 ed       	ldi	r24, 0xD8	; 216
    2402:	91 e0       	ldi	r25, 0x01	; 1
    2404:	60 e0       	ldi	r22, 0x00	; 0
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    240c:	81 ee       	ldi	r24, 0xE1	; 225
    240e:	91 e0       	ldi	r25, 0x01	; 1
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	70 e0       	ldi	r23, 0x00	; 0
    2414:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2418:	82 ee       	ldi	r24, 0xE2	; 226
    241a:	91 e0       	ldi	r25, 0x01	; 1
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2424:	82 eb       	ldi	r24, 0xB2	; 178
    2426:	92 e0       	ldi	r25, 0x02	; 2
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	70 e0       	ldi	r23, 0x00	; 0
    242c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2430:	8a ed       	ldi	r24, 0xDA	; 218
    2432:	91 e0       	ldi	r25, 0x01	; 1
    2434:	60 e0       	ldi	r22, 0x00	; 0
    2436:	70 e0       	ldi	r23, 0x00	; 0
    2438:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    243c:	8f ed       	ldi	r24, 0xDF	; 223
    243e:	91 e0       	ldi	r25, 0x01	; 1
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	70 e0       	ldi	r23, 0x00	; 0
    2444:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2448:	80 ee       	ldi	r24, 0xE0	; 224
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2454:	81 ed       	ldi	r24, 0xD1	; 209
    2456:	91 e0       	ldi	r25, 0x01	; 1
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2460:	86 ed       	ldi	r24, 0xD6	; 214
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	70 e0       	ldi	r23, 0x00	; 0
    2468:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    246c:	82 ed       	ldi	r24, 0xD2	; 210
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2478:	83 ed       	ldi	r24, 0xD3	; 211
    247a:	91 e0       	ldi	r25, 0x01	; 1
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	70 e0       	ldi	r23, 0x00	; 0
    2480:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    2484:	84 ed       	ldi	r24, 0xD4	; 212
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	6f ef       	ldi	r22, 0xFF	; 255
    248a:	7f e3       	ldi	r23, 0x3F	; 63
    248c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    2490:	85 ed       	ldi	r24, 0xD5	; 213
    2492:	91 e0       	ldi	r25, 0x01	; 1
    2494:	6f ef       	ldi	r22, 0xFF	; 255
    2496:	7f e3       	ldi	r23, 0x3F	; 63
    2498:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    249c:	89 ed       	ldi	r24, 0xD9	; 217
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    24a8:	8e ec       	ldi	r24, 0xCE	; 206
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    24b4:	8c ec       	ldi	r24, 0xCC	; 204
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	60 e0       	ldi	r22, 0x00	; 0
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    24c0:	8a ec       	ldi	r24, 0xCA	; 202
    24c2:	91 e0       	ldi	r25, 0x01	; 1
    24c4:	6f ef       	ldi	r22, 0xFF	; 255
    24c6:	7f e3       	ldi	r23, 0x3F	; 63
    24c8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    24cc:	88 ec       	ldi	r24, 0xC8	; 200
    24ce:	91 e0       	ldi	r25, 0x01	; 1
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    24d8:	80 ed       	ldi	r24, 0xD0	; 208
    24da:	91 e0       	ldi	r25, 0x01	; 1
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    24e4:	83 ee       	ldi	r24, 0xE3	; 227
    24e6:	91 e0       	ldi	r25, 0x01	; 1
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    24f0:	84 ee       	ldi	r24, 0xE4	; 228
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    24fc:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    24fe:	ed ed       	ldi	r30, 0xDD	; 221
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	80 64       	ori	r24, 0x40	; 64
    2506:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2508:	80 81       	ld	r24, Z
    250a:	8f 7b       	andi	r24, 0xBF	; 191
    250c:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	80 93 79 03 	sts	0x0379, r24
	PORTF |= (1<<GATE); //turn gate on
    2514:	89 9a       	sbi	0x11, 1	; 17
    2516:	9e 01       	movw	r18, r28
    2518:	2f 5f       	subi	r18, 0xFF	; 255
    251a:	3f 4f       	sbci	r19, 0xFF	; 255
    251c:	3d ab       	sts	0x5d, r19
    251e:	2c ab       	sts	0x5c, r18
    2520:	8e e0       	ldi	r24, 0x0E	; 14
    2522:	93 e0       	ldi	r25, 0x03	; 3
    2524:	99 af       	sts	0x79, r25
    2526:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2528:	1f aa       	sts	0x9f, r17
    252a:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    252c:	0f 2e       	mov	r0, r31
    252e:	f4 ed       	ldi	r31, 0xD4	; 212
    2530:	af 2e       	mov	r10, r31
    2532:	f1 e0       	ldi	r31, 0x01	; 1
    2534:	bf 2e       	mov	r11, r31
    2536:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2538:	0f 2e       	mov	r0, r31
    253a:	f8 ed       	ldi	r31, 0xD8	; 216
    253c:	6f 2e       	mov	r6, r31
    253e:	f1 e0       	ldi	r31, 0x01	; 1
    2540:	7f 2e       	mov	r7, r31
    2542:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2544:	0f 2e       	mov	r0, r31
    2546:	f5 ed       	ldi	r31, 0xD5	; 213
    2548:	4f 2e       	mov	r4, r31
    254a:	f1 e0       	ldi	r31, 0x01	; 1
    254c:	5f 2e       	mov	r5, r31
    254e:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    2550:	0f 2e       	mov	r0, r31
    2552:	fa ec       	ldi	r31, 0xCA	; 202
    2554:	2f 2e       	mov	r2, r31
    2556:	f1 e0       	ldi	r31, 0x01	; 1
    2558:	3f 2e       	mov	r3, r31
    255a:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    255c:	ac a9       	sts	0x4c, r26
    255e:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    2560:	8c 91       	ld	r24, X
    2562:	80 93 79 03 	sts	0x0379, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2566:	84 b5       	in	r24, 0x24	; 36
    2568:	8f 60       	ori	r24, 0x0F	; 15
    256a:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2570:	ee e6       	ldi	r30, 0x6E	; 110
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	82 60       	ori	r24, 0x02	; 2
    2578:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    257a:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    257c:	ee a9       	sts	0x4e, r30
    257e:	ff a9       	sts	0x4f, r31
    2580:	e2 30       	cpi	r30, 0x02	; 2
    2582:	f1 05       	cpc	r31, r1
    2584:	24 f4       	brge	.+8      	; 0x258e <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    2586:	83 e0       	ldi	r24, 0x03	; 3
    2588:	80 93 78 03 	sts	0x0378, r24
    258c:	03 c0       	rjmp	.+6      	; 0x2594 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    258e:	82 e0       	ldi	r24, 0x02	; 2
    2590:	80 93 78 03 	sts	0x0378, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    2594:	11 96       	adiw	r26, 0x01	; 1
    2596:	2d 91       	ld	r18, X+
    2598:	3c 91       	ld	r19, X
    259a:	12 97       	sbiw	r26, 0x02	; 2
    259c:	3b ab       	sts	0x5b, r19
    259e:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    25a0:	8d e0       	ldi	r24, 0x0D	; 13
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9f a7       	lds	r25, 0x7f
    25a6:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    25a8:	ee 24       	eor	r14, r14
    25aa:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    25ac:	0f 2e       	mov	r0, r31
    25ae:	f1 ed       	ldi	r31, 0xD1	; 209
    25b0:	cf 2e       	mov	r12, r31
    25b2:	f1 e0       	ldi	r31, 0x01	; 1
    25b4:	df 2e       	mov	r13, r31
    25b6:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    25b8:	0f 2e       	mov	r0, r31
    25ba:	f6 ed       	ldi	r31, 0xD6	; 214
    25bc:	8f 2e       	mov	r8, r31
    25be:	f1 e0       	ldi	r31, 0x01	; 1
    25c0:	9f 2e       	mov	r9, r31
    25c2:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	fc 01       	movw	r30, r24
    25ca:	0e a4       	lds	r16, 0xae
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <tune_filter+0x218>
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	0a 94       	dec	r0
    25d4:	e2 f7       	brpl	.-8      	; 0x25ce <tune_filter+0x214>
    25d6:	f9 ab       	sts	0x59, r31
    25d8:	e8 ab       	sts	0x58, r30
    25da:	ee 2a       	or	r14, r30
    25dc:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    25de:	c5 01       	movw	r24, r10
    25e0:	b7 01       	movw	r22, r14
    25e2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			count_finished = FALSE;
    25e6:	10 92 77 03 	sts	0x0377, r1
			period_counter = 0;
    25ea:	10 92 7a 03 	sts	0x037A, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    25ee:	8f e0       	ldi	r24, 0x0F	; 15
    25f0:	28 e1       	ldi	r18, 0x18	; 24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	a8 95       	wdr
    25fa:	20 93 60 00 	sts	0x0060, r18
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2604:	80 91 77 03 	lds	r24, 0x0377
    2608:	88 23       	and	r24, r24
    260a:	b1 f5       	brne	.+108    	; 0x2678 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    260c:	02 ed       	ldi	r16, 0xD2	; 210
    260e:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2610:	80 91 79 03 	lds	r24, 0x0379
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	84 5d       	subi	r24, 0xD4	; 212
    2618:	9e 4f       	sbci	r25, 0xFE	; 254
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2620:	c5 01       	movw	r24, r10
    2622:	b7 01       	movw	r22, r14
    2624:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2628:	c3 01       	movw	r24, r6
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	70 e0       	ldi	r23, 0x00	; 0
    262e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2632:	c2 01       	movw	r24, r4
    2634:	6f ef       	ldi	r22, 0xFF	; 255
    2636:	7f e3       	ldi	r23, 0x3F	; 63
    2638:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    263c:	c1 01       	movw	r24, r2
    263e:	6f ef       	ldi	r22, 0xFF	; 255
    2640:	7f e3       	ldi	r23, 0x3F	; 63
    2642:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    2646:	8e ec       	ldi	r24, 0xCE	; 206
    2648:	91 e0       	ldi	r25, 0x01	; 1
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2652:	c6 01       	movw	r24, r12
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    265c:	c4 01       	movw	r24, r8
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	70 e0       	ldi	r23, 0x00	; 0
    2662:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    2666:	c8 01       	movw	r24, r16
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    2670:	80 91 77 03 	lds	r24, 0x0377
    2674:	88 23       	and	r24, r24
    2676:	61 f2       	breq	.-104    	; 0x2610 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    2678:	88 e1       	ldi	r24, 0x18	; 24
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	80 93 60 00 	sts	0x0060, r24
    2682:	10 92 60 00 	sts	0x0060, r1
    2686:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    2688:	80 91 75 03 	lds	r24, 0x0375
    268c:	90 91 76 03 	lds	r25, 0x0376
    2690:	2a a9       	sts	0x4a, r18
    2692:	3b a9       	sts	0x4b, r19
    2694:	28 17       	cp	r18, r24
    2696:	39 07       	cpc	r19, r25
    2698:	50 f0       	brcs	.+20     	; 0x26ae <tune_filter+0x2f4>
    269a:	80 91 af 02 	lds	r24, 0x02AF
    269e:	81 30       	cpi	r24, 0x01	; 1
    26a0:	31 f4       	brne	.+12     	; 0x26ae <tune_filter+0x2f4>
    26a2:	88 a9       	sts	0x48, r24
    26a4:	99 a9       	sts	0x49, r25
    26a6:	80 95       	com	r24
    26a8:	90 95       	com	r25
    26aa:	e8 22       	and	r14, r24
    26ac:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    26ae:	80 91 75 03 	lds	r24, 0x0375
    26b2:	90 91 76 03 	lds	r25, 0x0376
    26b6:	ea a9       	sts	0x4a, r30
    26b8:	fb a9       	sts	0x4b, r31
    26ba:	8e 17       	cp	r24, r30
    26bc:	9f 07       	cpc	r25, r31
    26be:	21 f4       	brne	.+8      	; 0x26c8 <tune_filter+0x30e>
    26c0:	80 91 af 02 	lds	r24, 0x02AF
    26c4:	81 30       	cpi	r24, 0x01	; 1
    26c6:	71 f0       	breq	.+28     	; 0x26e4 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    26ce:	2e a5       	lds	r18, 0x6e
    26d0:	3f a5       	lds	r19, 0x6f
    26d2:	21 50       	subi	r18, 0x01	; 1
    26d4:	30 40       	sbci	r19, 0x00	; 0
    26d6:	3f a7       	lds	r19, 0x7f
    26d8:	2e a7       	lds	r18, 0x7e
    26da:	8f ef       	ldi	r24, 0xFF	; 255
    26dc:	2f 3f       	cpi	r18, 0xFF	; 255
    26de:	38 07       	cpc	r19, r24
    26e0:	09 f0       	breq	.+2      	; 0x26e4 <tune_filter+0x32a>
    26e2:	70 cf       	rjmp	.-288    	; 0x25c4 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    26e4:	ee a9       	sts	0x4e, r30
    26e6:	ff a9       	sts	0x4f, r31
    26e8:	31 96       	adiw	r30, 0x01	; 1
    26ea:	ff ab       	sts	0x5f, r31
    26ec:	ee ab       	sts	0x5e, r30
    26ee:	c7 01       	movw	r24, r14
    26f0:	80 96       	adiw	r24, 0x20	; 32
    26f2:	e8 ad       	sts	0x68, r30
    26f4:	f9 ad       	sts	0x69, r31
    26f6:	81 93       	st	Z+, r24
    26f8:	91 93       	st	Z+, r25
    26fa:	f9 af       	sts	0x79, r31
    26fc:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    26fe:	ee e6       	ldi	r30, 0x6E	; 110
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	8d 7f       	andi	r24, 0xFD	; 253
    2706:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2708:	14 bc       	out	0x24, r1	; 36
    270a:	2c a9       	sts	0x4c, r18
    270c:	3d a9       	sts	0x4d, r19
    270e:	2d 5f       	subi	r18, 0xFD	; 253
    2710:	3f 4f       	sbci	r19, 0xFF	; 255
    2712:	3d ab       	sts	0x5d, r19
    2714:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2716:	8e a9       	sts	0x4e, r24
    2718:	9f a9       	sts	0x4f, r25
    271a:	8f 30       	cpi	r24, 0x0F	; 15
    271c:	91 05       	cpc	r25, r1
    271e:	09 f0       	breq	.+2      	; 0x2722 <tune_filter+0x368>
    2720:	1d cf       	rjmp	.-454    	; 0x255c <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2722:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2724:	e9 96       	adiw	r28, 0x39	; 57
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	ff 90       	pop	r15
    273a:	ef 90       	pop	r14
    273c:	df 90       	pop	r13
    273e:	cf 90       	pop	r12
    2740:	bf 90       	pop	r11
    2742:	af 90       	pop	r10
    2744:	9f 90       	pop	r9
    2746:	8f 90       	pop	r8
    2748:	7f 90       	pop	r7
    274a:	6f 90       	pop	r6
    274c:	5f 90       	pop	r5
    274e:	4f 90       	pop	r4
    2750:	3f 90       	pop	r3
    2752:	2f 90       	pop	r2
    2754:	08 95       	ret

00002756 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2756:	8c e0       	ldi	r24, 0x0C	; 12
    2758:	93 e0       	ldi	r25, 0x03	; 3
    275a:	6c e0       	ldi	r22, 0x0C	; 12
    275c:	76 e0       	ldi	r23, 0x06	; 6
    275e:	40 e2       	ldi	r20, 0x20	; 32
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	0e 94 32 1c 	call	0x3864	; 0x3864 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2766:	8e e4       	ldi	r24, 0x4E	; 78
    2768:	93 e0       	ldi	r25, 0x03	; 3
    276a:	6e e4       	ldi	r22, 0x4E	; 78
    276c:	76 e0       	ldi	r23, 0x06	; 6
    276e:	42 e2       	ldi	r20, 0x22	; 34
    2770:	50 e0       	ldi	r21, 0x00	; 0
    2772:	0e 94 32 1c 	call	0x3864	; 0x3864 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2776:	8c e2       	ldi	r24, 0x2C	; 44
    2778:	93 e0       	ldi	r25, 0x03	; 3
    277a:	6c e2       	ldi	r22, 0x2C	; 44
    277c:	76 e0       	ldi	r23, 0x06	; 6
    277e:	42 e2       	ldi	r20, 0x22	; 34
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	0e 94 32 1c 	call	0x3864	; 0x3864 <__eeupd_block_m6450a>
	
	
}
    2786:	08 95       	ret

00002788 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2788:	82 e7       	ldi	r24, 0x72	; 114
    278a:	96 e0       	ldi	r25, 0x06	; 6
    278c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <__eerd_word_m6450a>
    2790:	90 93 73 03 	sts	0x0373, r25
    2794:	80 93 72 03 	sts	0x0372, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2798:	80 e7       	ldi	r24, 0x70	; 112
    279a:	96 e0       	ldi	r25, 0x06	; 6
    279c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <__eerd_word_m6450a>
    27a0:	90 93 71 03 	sts	0x0371, r25
    27a4:	80 93 70 03 	sts	0x0370, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    27a8:	8e e4       	ldi	r24, 0x4E	; 78
    27aa:	93 e0       	ldi	r25, 0x03	; 3
    27ac:	6e e4       	ldi	r22, 0x4E	; 78
    27ae:	76 e0       	ldi	r23, 0x06	; 6
    27b0:	42 e2       	ldi	r20, 0x22	; 34
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    27b8:	8c e2       	ldi	r24, 0x2C	; 44
    27ba:	93 e0       	ldi	r25, 0x03	; 3
    27bc:	6c e2       	ldi	r22, 0x2C	; 44
    27be:	76 e0       	ldi	r23, 0x06	; 6
    27c0:	42 e2       	ldi	r20, 0x22	; 34
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    27c8:	8c e0       	ldi	r24, 0x0C	; 12
    27ca:	93 e0       	ldi	r25, 0x03	; 3
    27cc:	6c e0       	ldi	r22, 0x0C	; 12
    27ce:	76 e0       	ldi	r23, 0x06	; 6
    27d0:	40 e2       	ldi	r20, 0x20	; 32
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    27d8:	08 95       	ret

000027da <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    27da:	98 2f       	mov	r25, r24
    27dc:	96 95       	lsr	r25
    27de:	96 95       	lsr	r25
    27e0:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    27e2:	29 2f       	mov	r18, r25
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	f9 01       	movw	r30, r18
    27e8:	31 97       	sbiw	r30, 0x01	; 1
    27ea:	ee 0f       	add	r30, r30
    27ec:	ff 1f       	adc	r31, r31
    27ee:	e6 0f       	add	r30, r22
    27f0:	f7 1f       	adc	r31, r23
    27f2:	01 90       	ld	r0, Z+
    27f4:	f0 81       	ld	r31, Z
    27f6:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    27f8:	22 0f       	add	r18, r18
    27fa:	33 1f       	adc	r19, r19
    27fc:	26 0f       	add	r18, r22
    27fe:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2800:	d9 01       	movw	r26, r18
    2802:	4d 91       	ld	r20, X+
    2804:	5c 91       	ld	r21, X
    2806:	11 97       	sbiw	r26, 0x01	; 1
    2808:	4e 1b       	sub	r20, r30
    280a:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    280c:	99 0f       	add	r25, r25
    280e:	99 0f       	add	r25, r25
    2810:	99 0f       	add	r25, r25
    2812:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	48 9f       	mul	r20, r24
    2818:	90 01       	movw	r18, r0
    281a:	49 9f       	mul	r20, r25
    281c:	30 0d       	add	r19, r0
    281e:	58 9f       	mul	r21, r24
    2820:	30 0d       	add	r19, r0
    2822:	11 24       	eor	r1, r1
    2824:	36 95       	lsr	r19
    2826:	27 95       	ror	r18
    2828:	36 95       	lsr	r19
    282a:	27 95       	ror	r18
    282c:	36 95       	lsr	r19
    282e:	27 95       	ror	r18
    2830:	e2 0f       	add	r30, r18
    2832:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2834:	8e 2f       	mov	r24, r30
    2836:	9f 2f       	mov	r25, r31
    2838:	08 95       	ret

0000283a <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	a2 97       	sbiw	r28, 0x22	; 34
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    284e:	de 01       	movw	r26, r28
    2850:	11 96       	adiw	r26, 0x01	; 1
    2852:	ed e8       	ldi	r30, 0x8D	; 141
    2854:	f2 e0       	ldi	r31, 0x02	; 2
    2856:	82 e2       	ldi	r24, 0x22	; 34
    2858:	01 90       	ld	r0, Z+
    285a:	0d 92       	st	X+, r0
    285c:	81 50       	subi	r24, 0x01	; 1
    285e:	e1 f7       	brne	.-8      	; 0x2858 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2860:	ae e4       	ldi	r26, 0x4E	; 78
    2862:	b3 e0       	ldi	r27, 0x03	; 3
    2864:	fe 01       	movw	r30, r28
    2866:	31 96       	adiw	r30, 0x01	; 1
    2868:	82 e2       	ldi	r24, 0x22	; 34
    286a:	01 90       	ld	r0, Z+
    286c:	0d 92       	st	X+, r0
    286e:	81 50       	subi	r24, 0x01	; 1
    2870:	e1 f7       	brne	.-8      	; 0x286a <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2872:	ac e2       	ldi	r26, 0x2C	; 44
    2874:	b3 e0       	ldi	r27, 0x03	; 3
    2876:	fe 01       	movw	r30, r28
    2878:	31 96       	adiw	r30, 0x01	; 1
    287a:	82 e2       	ldi	r24, 0x22	; 34
    287c:	01 90       	ld	r0, Z+
    287e:	0d 92       	st	X+, r0
    2880:	81 50       	subi	r24, 0x01	; 1
    2882:	e1 f7       	brne	.-8      	; 0x287c <set_one_volt_per_octave+0x42>
	
	
}
    2884:	a2 96       	adiw	r28, 0x22	; 34
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	08 95       	ret

00002896 <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2896:	ef e6       	ldi	r30, 0x6F	; 111
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	82 70       	andi	r24, 0x02	; 2
    289e:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    28a0:	e1 e8       	ldi	r30, 0x81	; 129
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	87 7f       	andi	r24, 0xF7	; 247
    28a8:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    28aa:	8f e0       	ldi	r24, 0x0F	; 15
    28ac:	6f e0       	ldi	r22, 0x0F	; 15
    28ae:	7e e5       	ldi	r23, 0x5E	; 94
    28b0:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <set_vco_init_cv>
    28b4:	90 93 73 03 	sts	0x0373, r25
    28b8:	80 93 72 03 	sts	0x0372, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    28bc:	80 ef       	ldi	r24, 0xF0	; 240
    28be:	6f e0       	ldi	r22, 0x0F	; 15
    28c0:	7e e5       	ldi	r23, 0x5E	; 94
    28c2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <set_vco_init_cv>
    28c6:	90 93 71 03 	sts	0x0371, r25
    28ca:	80 93 70 03 	sts	0x0370, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    28ce:	8f e0       	ldi	r24, 0x0F	; 15
    28d0:	0e 94 3b 10 	call	0x2076	; 0x2076 <tune_8ths>
			tune_8ths(VCO2);
    28d4:	80 ef       	ldi	r24, 0xF0	; 240
    28d6:	0e 94 3b 10 	call	0x2076	; 0x2076 <tune_8ths>
			tune_filter();
    28da:	0e 94 dd 11 	call	0x23ba	; 0x23ba <tune_filter>
    28de:	8f e4       	ldi	r24, 0x4F	; 79
    28e0:	93 ec       	ldi	r25, 0xC3	; 195
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <tune+0x4c>
    28e6:	00 c0       	rjmp	.+0      	; 0x28e8 <tune+0x52>
    28e8:	00 00       	nop
			//save_tuning_tables();
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    28ea:	08 95       	ret

000028ec <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint8_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    28ec:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    28ee:	98 2f       	mov	r25, r24
    28f0:	9c 70       	andi	r25, 0x0C	; 12
    28f2:	20 91 c1 02 	lds	r18, 0x02C1
    28f6:	92 2b       	or	r25, r18
    28f8:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    28fc:	98 2f       	mov	r25, r24
    28fe:	92 95       	swap	r25
    2900:	96 95       	lsr	r25
    2902:	97 70       	andi	r25, 0x07	; 7
    2904:	90 ff       	sbrs	r25, 0
    2906:	0c c0       	rjmp	.+24     	; 0x2920 <read_switch_port+0x34>
		
		if (++prog_hold_counter == 254) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2908:	90 91 7e 03 	lds	r25, 0x037E
    290c:	9f 5f       	subi	r25, 0xFF	; 255
    290e:	90 93 7e 03 	sts	0x037E, r25
    2912:	9e 3f       	cpi	r25, 0xFE	; 254
    2914:	29 f4       	brne	.+10     	; 0x2920 <read_switch_port+0x34>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2916:	10 92 7e 03 	sts	0x037E, r1
			current_patch.mode = CAL;
    291a:	95 e0       	ldi	r25, 0x05	; 5
    291c:	90 93 07 03 	sts	0x0307, r25
		}
		
	}
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2920:	90 91 7f 03 	lds	r25, 0x037F
    2924:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2926:	98 27       	eor	r25, r24
    2928:	90 93 7f 03 	sts	0x037F, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    292c:	89 23       	and	r24, r25
    292e:	08 95       	ret

00002930 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2930:	ed ed       	ldi	r30, 0xDD	; 221
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	90 81       	ld	r25, Z
    2936:	9f 7b       	andi	r25, 0xBF	; 191
    2938:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	21 70       	andi	r18, 0x01	; 1
    2940:	30 70       	andi	r19, 0x00	; 0
    2942:	22 0f       	add	r18, r18
    2944:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2946:	68 2f       	mov	r22, r24
    2948:	62 95       	swap	r22
    294a:	66 95       	lsr	r22
    294c:	67 70       	andi	r22, 0x07	; 7
    294e:	67 95       	ror	r22
    2950:	66 27       	eor	r22, r22
    2952:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2954:	26 2b       	or	r18, r22
    2956:	98 2f       	mov	r25, r24
    2958:	96 95       	lsr	r25
    295a:	96 95       	lsr	r25
    295c:	91 70       	andi	r25, 0x01	; 1
    295e:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2960:	68 2f       	mov	r22, r24
    2962:	66 1f       	adc	r22, r22
    2964:	66 27       	eor	r22, r22
    2966:	66 1f       	adc	r22, r22
    2968:	66 0f       	add	r22, r22
    296a:	66 0f       	add	r22, r22
    296c:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    296e:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2970:	a8 2f       	mov	r26, r24
    2972:	a6 95       	lsr	r26
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	a1 70       	andi	r26, 0x01	; 1
    2978:	b0 70       	andi	r27, 0x00	; 0
    297a:	bd 01       	movw	r22, r26
    297c:	66 0f       	add	r22, r22
    297e:	77 1f       	adc	r23, r23
    2980:	66 0f       	add	r22, r22
    2982:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2984:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2986:	68 2f       	mov	r22, r24
    2988:	62 95       	swap	r22
    298a:	6f 70       	andi	r22, 0x0F	; 15
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	61 70       	andi	r22, 0x01	; 1
    2990:	70 70       	andi	r23, 0x00	; 0
    2992:	ab 01       	movw	r20, r22
    2994:	00 24       	eor	r0, r0
    2996:	56 95       	lsr	r21
    2998:	47 95       	ror	r20
    299a:	07 94       	ror	r0
    299c:	56 95       	lsr	r21
    299e:	47 95       	ror	r20
    29a0:	07 94       	ror	r0
    29a2:	54 2f       	mov	r21, r20
    29a4:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    29a6:	62 2f       	mov	r22, r18
    29a8:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    29aa:	48 2f       	mov	r20, r24
    29ac:	42 95       	swap	r20
    29ae:	46 95       	lsr	r20
    29b0:	46 95       	lsr	r20
    29b2:	43 70       	andi	r20, 0x03	; 3
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	41 70       	andi	r20, 0x01	; 1
    29b8:	50 70       	andi	r21, 0x00	; 0
    29ba:	9a 01       	movw	r18, r20
    29bc:	22 0f       	add	r18, r18
    29be:	33 1f       	adc	r19, r19
    29c0:	22 95       	swap	r18
    29c2:	32 95       	swap	r19
    29c4:	30 7f       	andi	r19, 0xF0	; 240
    29c6:	32 27       	eor	r19, r18
    29c8:	20 7f       	andi	r18, 0xF0	; 240
    29ca:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    29cc:	46 2f       	mov	r20, r22
    29ce:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    29d0:	86 95       	lsr	r24
    29d2:	86 95       	lsr	r24
    29d4:	86 95       	lsr	r24
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	21 70       	andi	r18, 0x01	; 1
    29dc:	30 70       	andi	r19, 0x00	; 0
    29de:	c9 01       	movw	r24, r18
    29e0:	82 95       	swap	r24
    29e2:	92 95       	swap	r25
    29e4:	90 7f       	andi	r25, 0xF0	; 240
    29e6:	98 27       	eor	r25, r24
    29e8:	80 7f       	andi	r24, 0xF0	; 240
    29ea:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    29ec:	84 2b       	or	r24, r20
    29ee:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    29f0:	80 81       	ld	r24, Z
    29f2:	80 64       	ori	r24, 0x40	; 64
    29f4:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    29f6:	80 81       	ld	r24, Z
    29f8:	8f 7b       	andi	r24, 0xBF	; 191
    29fa:	80 83       	st	Z, r24
	DATA_BUS = 0;
    29fc:	12 b8       	out	0x02, r1	; 2
	
	
    29fe:	08 95       	ret

00002a00 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2a00:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2a02:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2a04:	74 83       	std	Z+4, r23	; 0x04
    2a06:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2a08:	11 82       	std	Z+1, r1	; 0x01
    2a0a:	10 82       	st	Z, r1
}
    2a0c:	08 95       	ret

00002a0e <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	ec 01       	movw	r28, r24
    2a16:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2a18:	0e 94 76 15 	call	0x2aec	; 0x2aec <store_and_clear_interrupt>
    2a1c:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2a1e:	39 81       	ldd	r19, Y+1	; 0x01
    2a20:	83 2f       	mov	r24, r19
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	01 96       	adiw	r24, 0x01	; 1
    2a26:	6a 81       	ldd	r22, Y+2	; 0x02
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__divmodhi4>
    2a2e:	48 81       	ld	r20, Y
    2a30:	50 e0       	ldi	r21, 0x00	; 0
    2a32:	84 17       	cp	r24, r20
    2a34:	95 07       	cpc	r25, r21
    2a36:	29 f4       	brne	.+10     	; 0x2a42 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2a38:	82 2f       	mov	r24, r18
    2a3a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <restore_interrupt_setting>
      return false;
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	11 c0       	rjmp	.+34     	; 0x2a64 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2a42:	eb 81       	ldd	r30, Y+3	; 0x03
    2a44:	fc 81       	ldd	r31, Y+4	; 0x04
    2a46:	e3 0f       	add	r30, r19
    2a48:	f1 1d       	adc	r31, r1
    2a4a:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	6a 81       	ldd	r22, Y+2	; 0x02
    2a54:	70 e0       	ldi	r23, 0x00	; 0
    2a56:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__divmodhi4>
    2a5a:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2a5c:	82 2f       	mov	r24, r18
    2a5e:	0e 94 79 15 	call	0x2af2	; 0x2af2 <restore_interrupt_setting>
      return true;
    2a62:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	08 95       	ret

00002a6c <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
    2a70:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2a72:	0e 94 76 15 	call	0x2aec	; 0x2aec <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2a76:	29 81       	ldd	r18, Y+1	; 0x01
    2a78:	98 81       	ld	r25, Y
    2a7a:	29 17       	cp	r18, r25
    2a7c:	18 f0       	brcs	.+6      	; 0x2a84 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2a7e:	c2 2f       	mov	r28, r18
    2a80:	c9 1b       	sub	r28, r25
    2a82:	03 c0       	rjmp	.+6      	; 0x2a8a <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2a84:	ca 81       	ldd	r28, Y+2	; 0x02
    2a86:	c2 0f       	add	r28, r18
    2a88:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2a8a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <restore_interrupt_setting>
   return len;
}
    2a8e:	8c 2f       	mov	r24, r28
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	08 95       	ret

00002a96 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2a96:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2a98:	20 81       	ld	r18, Z
    2a9a:	86 2f       	mov	r24, r22
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	82 0f       	add	r24, r18
    2aa0:	91 1d       	adc	r25, r1
    2aa2:	62 81       	ldd	r22, Z+2	; 0x02
    2aa4:	70 e0       	ldi	r23, 0x00	; 0
    2aa6:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__divmodhi4>
    2aaa:	03 80       	ldd	r0, Z+3	; 0x03
    2aac:	f4 81       	ldd	r31, Z+4	; 0x04
    2aae:	e0 2d       	mov	r30, r0
    2ab0:	e8 0f       	add	r30, r24
    2ab2:	f9 1f       	adc	r31, r25
}
    2ab4:	80 81       	ld	r24, Z
    2ab6:	08 95       	ret

00002ab8 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2ab8:	1f 93       	push	r17
    2aba:	cf 93       	push	r28
    2abc:	df 93       	push	r29
    2abe:	ec 01       	movw	r28, r24
    2ac0:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2ac2:	0e 94 76 15 	call	0x2aec	; 0x2aec <store_and_clear_interrupt>
    2ac6:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2ac8:	88 81       	ld	r24, Y
    2aca:	21 2f       	mov	r18, r17
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	28 0f       	add	r18, r24
    2ad0:	31 1d       	adc	r19, r1
    2ad2:	6a 81       	ldd	r22, Y+2	; 0x02
    2ad4:	c9 01       	movw	r24, r18
    2ad6:	70 e0       	ldi	r23, 0x00	; 0
    2ad8:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__divmodhi4>
    2adc:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2ade:	84 2f       	mov	r24, r20
    2ae0:	0e 94 79 15 	call	0x2af2	; 0x2af2 <restore_interrupt_setting>
}
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	1f 91       	pop	r17
    2aea:	08 95       	ret

00002aec <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2aec:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2aee:	f8 94       	cli
   return sreg;
}
    2af0:	08 95       	ret

00002af2 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2af2:	8f bf       	out	0x3f, r24	; 63
}
    2af4:	08 95       	ret

00002af6 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2af6:	88 1f       	adc	r24, r24
    2af8:	88 27       	eor	r24, r24
    2afa:	88 1f       	adc	r24, r24
    2afc:	08 95       	ret

00002afe <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	88 3f       	cpi	r24, 0xF8	; 248
    2b02:	08 f4       	brcc	.+2      	; 0x2b06 <midi_is_realtime+0x8>
    2b04:	90 e0       	ldi	r25, 0x00	; 0
}
    2b06:	89 2f       	mov	r24, r25
    2b08:	08 95       	ret

00002b0a <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	20 7f       	andi	r18, 0xF0	; 240
    2b10:	30 70       	andi	r19, 0x00	; 0
    2b12:	20 3c       	cpi	r18, 0xC0	; 192
    2b14:	31 05       	cpc	r19, r1
    2b16:	e9 f1       	breq	.+122    	; 0x2b92 <midi_packet_length+0x88>
    2b18:	21 3c       	cpi	r18, 0xC1	; 193
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	8c f4       	brge	.+34     	; 0x2b40 <midi_packet_length+0x36>
    2b1e:	20 39       	cpi	r18, 0x90	; 144
    2b20:	31 05       	cpc	r19, r1
    2b22:	e1 f0       	breq	.+56     	; 0x2b5c <midi_packet_length+0x52>
    2b24:	21 39       	cpi	r18, 0x91	; 145
    2b26:	31 05       	cpc	r19, r1
    2b28:	24 f4       	brge	.+8      	; 0x2b32 <midi_packet_length+0x28>
    2b2a:	20 38       	cpi	r18, 0x80	; 128
    2b2c:	31 05       	cpc	r19, r1
    2b2e:	79 f5       	brne	.+94     	; 0x2b8e <midi_packet_length+0x84>
    2b30:	15 c0       	rjmp	.+42     	; 0x2b5c <midi_packet_length+0x52>
    2b32:	20 3a       	cpi	r18, 0xA0	; 160
    2b34:	31 05       	cpc	r19, r1
    2b36:	91 f0       	breq	.+36     	; 0x2b5c <midi_packet_length+0x52>
    2b38:	20 3b       	cpi	r18, 0xB0	; 176
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	41 f5       	brne	.+80     	; 0x2b8e <midi_packet_length+0x84>
    2b3e:	0e c0       	rjmp	.+28     	; 0x2b5c <midi_packet_length+0x52>
    2b40:	20 3e       	cpi	r18, 0xE0	; 224
    2b42:	31 05       	cpc	r19, r1
    2b44:	59 f0       	breq	.+22     	; 0x2b5c <midi_packet_length+0x52>
    2b46:	21 3e       	cpi	r18, 0xE1	; 225
    2b48:	31 05       	cpc	r19, r1
    2b4a:	24 f4       	brge	.+8      	; 0x2b54 <midi_packet_length+0x4a>
    2b4c:	20 3d       	cpi	r18, 0xD0	; 208
    2b4e:	31 05       	cpc	r19, r1
    2b50:	f1 f4       	brne	.+60     	; 0x2b8e <midi_packet_length+0x84>
    2b52:	1f c0       	rjmp	.+62     	; 0x2b92 <midi_packet_length+0x88>
    2b54:	20 3f       	cpi	r18, 0xF0	; 240
    2b56:	31 05       	cpc	r19, r1
    2b58:	d1 f4       	brne	.+52     	; 0x2b8e <midi_packet_length+0x84>
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2b5c:	83 e0       	ldi	r24, 0x03	; 3
    2b5e:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2b60:	86 3f       	cpi	r24, 0xF6	; 246
    2b62:	79 f0       	breq	.+30     	; 0x2b82 <midi_packet_length+0x78>
    2b64:	87 3f       	cpi	r24, 0xF7	; 247
    2b66:	38 f4       	brcc	.+14     	; 0x2b76 <midi_packet_length+0x6c>
    2b68:	82 3f       	cpi	r24, 0xF2	; 242
    2b6a:	a9 f0       	breq	.+42     	; 0x2b96 <midi_packet_length+0x8c>
    2b6c:	83 3f       	cpi	r24, 0xF3	; 243
    2b6e:	59 f0       	breq	.+22     	; 0x2b86 <midi_packet_length+0x7c>
    2b70:	81 3f       	cpi	r24, 0xF1	; 241
    2b72:	59 f4       	brne	.+22     	; 0x2b8a <midi_packet_length+0x80>
    2b74:	08 c0       	rjmp	.+16     	; 0x2b86 <midi_packet_length+0x7c>
    2b76:	88 3f       	cpi	r24, 0xF8	; 248
    2b78:	40 f0       	brcs	.+16     	; 0x2b8a <midi_packet_length+0x80>
    2b7a:	8d 3f       	cpi	r24, 0xFD	; 253
    2b7c:	10 f0       	brcs	.+4      	; 0x2b82 <midi_packet_length+0x78>
    2b7e:	8e 3f       	cpi	r24, 0xFE	; 254
    2b80:	20 f0       	brcs	.+8      	; 0x2b8a <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2b86:	82 e0       	ldi	r24, 0x02	; 2
    2b88:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2b92:	82 e0       	ldi	r24, 0x02	; 2
    2b94:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2b96:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2b98:	08 95       	ret

00002b9a <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2b9a:	0f 93       	push	r16
    2b9c:	34 2f       	mov	r19, r20
    2b9e:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2ba0:	46 2f       	mov	r20, r22
    2ba2:	4f 70       	andi	r20, 0x0F	; 15
    2ba4:	40 6b       	ori	r20, 0xB0	; 176
    2ba6:	23 2f       	mov	r18, r19
    2ba8:	2f 77       	andi	r18, 0x7F	; 127
    2baa:	0f 77       	andi	r16, 0x7F	; 127
    2bac:	dc 01       	movw	r26, r24
    2bae:	ed 91       	ld	r30, X+
    2bb0:	fc 91       	ld	r31, X
    2bb2:	63 e0       	ldi	r22, 0x03	; 3
    2bb4:	70 e0       	ldi	r23, 0x00	; 0
    2bb6:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2bb8:	0f 91       	pop	r16
    2bba:	08 95       	ret

00002bbc <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2bbc:	0f 93       	push	r16
    2bbe:	34 2f       	mov	r19, r20
    2bc0:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2bc2:	46 2f       	mov	r20, r22
    2bc4:	4f 70       	andi	r20, 0x0F	; 15
    2bc6:	40 69       	ori	r20, 0x90	; 144
    2bc8:	23 2f       	mov	r18, r19
    2bca:	2f 77       	andi	r18, 0x7F	; 127
    2bcc:	0f 77       	andi	r16, 0x7F	; 127
    2bce:	dc 01       	movw	r26, r24
    2bd0:	ed 91       	ld	r30, X+
    2bd2:	fc 91       	ld	r31, X
    2bd4:	63 e0       	ldi	r22, 0x03	; 3
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2bda:	0f 91       	pop	r16
    2bdc:	08 95       	ret

00002bde <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2bde:	0f 93       	push	r16
    2be0:	34 2f       	mov	r19, r20
    2be2:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2be4:	46 2f       	mov	r20, r22
    2be6:	4f 70       	andi	r20, 0x0F	; 15
    2be8:	40 68       	ori	r20, 0x80	; 128
    2bea:	23 2f       	mov	r18, r19
    2bec:	2f 77       	andi	r18, 0x7F	; 127
    2bee:	0f 77       	andi	r16, 0x7F	; 127
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	ed 91       	ld	r30, X+
    2bf4:	fc 91       	ld	r31, X
    2bf6:	63 e0       	ldi	r22, 0x03	; 3
    2bf8:	70 e0       	ldi	r23, 0x00	; 0
    2bfa:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2bfc:	0f 91       	pop	r16
    2bfe:	08 95       	ret

00002c00 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2c00:	0f 93       	push	r16
    2c02:	34 2f       	mov	r19, r20
    2c04:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2c06:	46 2f       	mov	r20, r22
    2c08:	4f 70       	andi	r20, 0x0F	; 15
    2c0a:	40 6a       	ori	r20, 0xA0	; 160
    2c0c:	23 2f       	mov	r18, r19
    2c0e:	2f 77       	andi	r18, 0x7F	; 127
    2c10:	0f 77       	andi	r16, 0x7F	; 127
    2c12:	dc 01       	movw	r26, r24
    2c14:	ed 91       	ld	r30, X+
    2c16:	fc 91       	ld	r31, X
    2c18:	63 e0       	ldi	r22, 0x03	; 3
    2c1a:	70 e0       	ldi	r23, 0x00	; 0
    2c1c:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2c1e:	0f 91       	pop	r16
    2c20:	08 95       	ret

00002c22 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2c26:	20 e2       	ldi	r18, 0x20	; 32
    2c28:	40 30       	cpi	r20, 0x00	; 0
    2c2a:	52 07       	cpc	r21, r18
    2c2c:	44 f4       	brge	.+16     	; 0x2c3e <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2c2e:	a0 ee       	ldi	r26, 0xE0	; 224
    2c30:	40 30       	cpi	r20, 0x00	; 0
    2c32:	5a 07       	cpc	r21, r26
    2c34:	3c f0       	brlt	.+14     	; 0x2c44 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2c36:	8a 01       	movw	r16, r20
    2c38:	00 50       	subi	r16, 0x00	; 0
    2c3a:	10 4e       	sbci	r17, 0xE0	; 224
    2c3c:	05 c0       	rjmp	.+10     	; 0x2c48 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2c3e:	0f ef       	ldi	r16, 0xFF	; 255
    2c40:	1f e3       	ldi	r17, 0x3F	; 63
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2c44:	00 e0       	ldi	r16, 0x00	; 0
    2c46:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2c48:	46 2f       	mov	r20, r22
    2c4a:	4f 70       	andi	r20, 0x0F	; 15
    2c4c:	40 6e       	ori	r20, 0xE0	; 224
    2c4e:	20 2f       	mov	r18, r16
    2c50:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2c52:	00 0f       	add	r16, r16
    2c54:	01 2f       	mov	r16, r17
    2c56:	00 1f       	adc	r16, r16
    2c58:	11 0b       	sbc	r17, r17
    2c5a:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2c5c:	0f 77       	andi	r16, 0x7F	; 127
    2c5e:	dc 01       	movw	r26, r24
    2c60:	ed 91       	ld	r30, X+
    2c62:	fc 91       	ld	r31, X
    2c64:	63 e0       	ldi	r22, 0x03	; 3
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	08 95       	ret

00002c70 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2c70:	0f 93       	push	r16
    2c72:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2c74:	46 2f       	mov	r20, r22
    2c76:	4f 70       	andi	r20, 0x0F	; 15
    2c78:	40 6c       	ori	r20, 0xC0	; 192
    2c7a:	2f 77       	andi	r18, 0x7F	; 127
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	ed 91       	ld	r30, X+
    2c80:	fc 91       	ld	r31, X
    2c82:	62 e0       	ldi	r22, 0x02	; 2
    2c84:	70 e0       	ldi	r23, 0x00	; 0
    2c86:	00 e0       	ldi	r16, 0x00	; 0
    2c88:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2c8a:	0f 91       	pop	r16
    2c8c:	08 95       	ret

00002c8e <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2c8e:	0f 93       	push	r16
    2c90:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2c92:	46 2f       	mov	r20, r22
    2c94:	4f 70       	andi	r20, 0x0F	; 15
    2c96:	40 6d       	ori	r20, 0xD0	; 208
    2c98:	2f 77       	andi	r18, 0x7F	; 127
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	ed 91       	ld	r30, X+
    2c9e:	fc 91       	ld	r31, X
    2ca0:	62 e0       	ldi	r22, 0x02	; 2
    2ca2:	70 e0       	ldi	r23, 0x00	; 0
    2ca4:	00 e0       	ldi	r16, 0x00	; 0
    2ca6:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2ca8:	0f 91       	pop	r16
    2caa:	08 95       	ret

00002cac <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2cac:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2cae:	dc 01       	movw	r26, r24
    2cb0:	ed 91       	ld	r30, X+
    2cb2:	fc 91       	ld	r31, X
    2cb4:	61 e0       	ldi	r22, 0x01	; 1
    2cb6:	70 e0       	ldi	r23, 0x00	; 0
    2cb8:	48 ef       	ldi	r20, 0xF8	; 248
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	00 e0       	ldi	r16, 0x00	; 0
    2cbe:	09 95       	icall
}
    2cc0:	0f 91       	pop	r16
    2cc2:	08 95       	ret

00002cc4 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    2cc4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	ed 91       	ld	r30, X+
    2cca:	fc 91       	ld	r31, X
    2ccc:	61 e0       	ldi	r22, 0x01	; 1
    2cce:	70 e0       	ldi	r23, 0x00	; 0
    2cd0:	49 ef       	ldi	r20, 0xF9	; 249
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	00 e0       	ldi	r16, 0x00	; 0
    2cd6:	09 95       	icall
}
    2cd8:	0f 91       	pop	r16
    2cda:	08 95       	ret

00002cdc <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2cdc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2cde:	dc 01       	movw	r26, r24
    2ce0:	ed 91       	ld	r30, X+
    2ce2:	fc 91       	ld	r31, X
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	70 e0       	ldi	r23, 0x00	; 0
    2ce8:	4a ef       	ldi	r20, 0xFA	; 250
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	00 e0       	ldi	r16, 0x00	; 0
    2cee:	09 95       	icall
}
    2cf0:	0f 91       	pop	r16
    2cf2:	08 95       	ret

00002cf4 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    2cf4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	ed 91       	ld	r30, X+
    2cfa:	fc 91       	ld	r31, X
    2cfc:	61 e0       	ldi	r22, 0x01	; 1
    2cfe:	70 e0       	ldi	r23, 0x00	; 0
    2d00:	4b ef       	ldi	r20, 0xFB	; 251
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	00 e0       	ldi	r16, 0x00	; 0
    2d06:	09 95       	icall
}
    2d08:	0f 91       	pop	r16
    2d0a:	08 95       	ret

00002d0c <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    2d0c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    2d0e:	dc 01       	movw	r26, r24
    2d10:	ed 91       	ld	r30, X+
    2d12:	fc 91       	ld	r31, X
    2d14:	61 e0       	ldi	r22, 0x01	; 1
    2d16:	70 e0       	ldi	r23, 0x00	; 0
    2d18:	4c ef       	ldi	r20, 0xFC	; 252
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	00 e0       	ldi	r16, 0x00	; 0
    2d1e:	09 95       	icall
}
    2d20:	0f 91       	pop	r16
    2d22:	08 95       	ret

00002d24 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    2d24:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    2d26:	dc 01       	movw	r26, r24
    2d28:	ed 91       	ld	r30, X+
    2d2a:	fc 91       	ld	r31, X
    2d2c:	61 e0       	ldi	r22, 0x01	; 1
    2d2e:	70 e0       	ldi	r23, 0x00	; 0
    2d30:	4e ef       	ldi	r20, 0xFE	; 254
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	00 e0       	ldi	r16, 0x00	; 0
    2d36:	09 95       	icall
}
    2d38:	0f 91       	pop	r16
    2d3a:	08 95       	ret

00002d3c <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2d3c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2d3e:	dc 01       	movw	r26, r24
    2d40:	ed 91       	ld	r30, X+
    2d42:	fc 91       	ld	r31, X
    2d44:	61 e0       	ldi	r22, 0x01	; 1
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	4f ef       	ldi	r20, 0xFF	; 255
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	00 e0       	ldi	r16, 0x00	; 0
    2d4e:	09 95       	icall
}
    2d50:	0f 91       	pop	r16
    2d52:	08 95       	ret

00002d54 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    2d54:	0f 93       	push	r16
   device->send_func(device, 2,
    2d56:	26 2f       	mov	r18, r22
    2d58:	2f 77       	andi	r18, 0x7F	; 127
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	ed 91       	ld	r30, X+
    2d5e:	fc 91       	ld	r31, X
    2d60:	62 e0       	ldi	r22, 0x02	; 2
    2d62:	70 e0       	ldi	r23, 0x00	; 0
    2d64:	41 ef       	ldi	r20, 0xF1	; 241
    2d66:	00 e0       	ldi	r16, 0x00	; 0
    2d68:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2d6a:	0f 91       	pop	r16
    2d6c:	08 95       	ret

00002d6e <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2d6e:	0f 93       	push	r16
    2d70:	1f 93       	push	r17
   device->send_func(device, 3,
    2d72:	26 2f       	mov	r18, r22
    2d74:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2d76:	8b 01       	movw	r16, r22
    2d78:	00 0f       	add	r16, r16
    2d7a:	01 2f       	mov	r16, r17
    2d7c:	00 1f       	adc	r16, r16
    2d7e:	11 0b       	sbc	r17, r17
    2d80:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2d82:	0f 77       	andi	r16, 0x7F	; 127
    2d84:	dc 01       	movw	r26, r24
    2d86:	ed 91       	ld	r30, X+
    2d88:	fc 91       	ld	r31, X
    2d8a:	63 e0       	ldi	r22, 0x03	; 3
    2d8c:	70 e0       	ldi	r23, 0x00	; 0
    2d8e:	42 ef       	ldi	r20, 0xF2	; 242
    2d90:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2d92:	1f 91       	pop	r17
    2d94:	0f 91       	pop	r16
    2d96:	08 95       	ret

00002d98 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2d98:	0f 93       	push	r16
   device->send_func(device, 2,
    2d9a:	26 2f       	mov	r18, r22
    2d9c:	2f 77       	andi	r18, 0x7F	; 127
    2d9e:	dc 01       	movw	r26, r24
    2da0:	ed 91       	ld	r30, X+
    2da2:	fc 91       	ld	r31, X
    2da4:	62 e0       	ldi	r22, 0x02	; 2
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	43 ef       	ldi	r20, 0xF3	; 243
    2daa:	00 e0       	ldi	r16, 0x00	; 0
    2dac:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2dae:	0f 91       	pop	r16
    2db0:	08 95       	ret

00002db2 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2db2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    2db4:	dc 01       	movw	r26, r24
    2db6:	ed 91       	ld	r30, X+
    2db8:	fc 91       	ld	r31, X
    2dba:	61 e0       	ldi	r22, 0x01	; 1
    2dbc:	70 e0       	ldi	r23, 0x00	; 0
    2dbe:	46 ef       	ldi	r20, 0xF6	; 246
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	00 e0       	ldi	r16, 0x00	; 0
    2dc4:	09 95       	icall
}
    2dc6:	0f 91       	pop	r16
    2dc8:	08 95       	ret

00002dca <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2dca:	0f 93       	push	r16
    2dcc:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2dce:	dc 01       	movw	r26, r24
    2dd0:	ed 91       	ld	r30, X+
    2dd2:	fc 91       	ld	r31, X
    2dd4:	61 e0       	ldi	r22, 0x01	; 1
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	00 e0       	ldi	r16, 0x00	; 0
    2ddc:	09 95       	icall
}
    2dde:	0f 91       	pop	r16
    2de0:	08 95       	ret

00002de2 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    2de2:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    2de4:	dc 01       	movw	r26, r24
    2de6:	ed 91       	ld	r30, X+
    2de8:	fc 91       	ld	r31, X
    2dea:	09 95       	icall
}
    2dec:	0f 91       	pop	r16
    2dee:	08 95       	ret

00002df0 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2df0:	6f 92       	push	r6
    2df2:	7f 92       	push	r7
    2df4:	8f 92       	push	r8
    2df6:	9f 92       	push	r9
    2df8:	af 92       	push	r10
    2dfa:	bf 92       	push	r11
    2dfc:	cf 92       	push	r12
    2dfe:	df 92       	push	r13
    2e00:	ef 92       	push	r14
    2e02:	ff 92       	push	r15
    2e04:	0f 93       	push	r16
    2e06:	1f 93       	push	r17
    2e08:	cf 93       	push	r28
    2e0a:	df 93       	push	r29
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <midi_send_array+0x1e>
    2e0e:	0f 92       	push	r0
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	4c 01       	movw	r8, r24
    2e16:	6b 01       	movw	r12, r22
    2e18:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2e1a:	61 15       	cp	r22, r1
    2e1c:	71 05       	cpc	r23, r1
    2e1e:	41 f1       	breq	.+80     	; 0x2e70 <midi_send_array+0x80>
    2e20:	ee 24       	eor	r14, r14
    2e22:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2e24:	0f 2e       	mov	r0, r31
    2e26:	f3 e0       	ldi	r31, 0x03	; 3
    2e28:	6f 2e       	mov	r6, r31
    2e2a:	77 24       	eor	r7, r7
    2e2c:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2e2e:	19 82       	std	Y+1, r1	; 0x01
    2e30:	1a 82       	std	Y+2, r1	; 0x02
    2e32:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2e34:	86 01       	movw	r16, r12
    2e36:	0e 19       	sub	r16, r14
    2e38:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2e3a:	04 30       	cpi	r16, 0x04	; 4
    2e3c:	11 05       	cpc	r17, r1
    2e3e:	08 f0       	brcs	.+2      	; 0x2e42 <midi_send_array+0x52>
    2e40:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2e42:	b5 01       	movw	r22, r10
    2e44:	6e 0d       	add	r22, r14
    2e46:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2e48:	ce 01       	movw	r24, r28
    2e4a:	01 96       	adiw	r24, 0x01	; 1
    2e4c:	40 2f       	mov	r20, r16
    2e4e:	51 2f       	mov	r21, r17
    2e50:	0e 94 01 1c 	call	0x3802	; 0x3802 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2e54:	c4 01       	movw	r24, r8
    2e56:	b8 01       	movw	r22, r16
    2e58:	49 81       	ldd	r20, Y+1	; 0x01
    2e5a:	2a 81       	ldd	r18, Y+2	; 0x02
    2e5c:	0b 81       	ldd	r16, Y+3	; 0x03
    2e5e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2e62:	83 e0       	ldi	r24, 0x03	; 3
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	e8 0e       	add	r14, r24
    2e68:	f9 1e       	adc	r15, r25
    2e6a:	ec 14       	cp	r14, r12
    2e6c:	fd 04       	cpc	r15, r13
    2e6e:	f8 f2       	brcs	.-66     	; 0x2e2e <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	1f 91       	pop	r17
    2e7c:	0f 91       	pop	r16
    2e7e:	ff 90       	pop	r15
    2e80:	ef 90       	pop	r14
    2e82:	df 90       	pop	r13
    2e84:	cf 90       	pop	r12
    2e86:	bf 90       	pop	r11
    2e88:	af 90       	pop	r10
    2e8a:	9f 90       	pop	r9
    2e8c:	8f 90       	pop	r8
    2e8e:	7f 90       	pop	r7
    2e90:	6f 90       	pop	r6
    2e92:	08 95       	ret

00002e94 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    2e94:	fc 01       	movw	r30, r24
    2e96:	73 83       	std	Z+3, r23	; 0x03
    2e98:	62 83       	std	Z+2, r22	; 0x02
}
    2e9a:	08 95       	ret

00002e9c <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	75 83       	std	Z+5, r23	; 0x05
    2ea0:	64 83       	std	Z+4, r22	; 0x04
}
    2ea2:	08 95       	ret

00002ea4 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	77 83       	std	Z+7, r23	; 0x07
    2ea8:	66 83       	std	Z+6, r22	; 0x06
}
    2eaa:	08 95       	ret

00002eac <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2eac:	fc 01       	movw	r30, r24
    2eae:	71 87       	std	Z+9, r23	; 0x09
    2eb0:	60 87       	std	Z+8, r22	; 0x08
}
    2eb2:	08 95       	ret

00002eb4 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	73 87       	std	Z+11, r23	; 0x0b
    2eb8:	62 87       	std	Z+10, r22	; 0x0a
}
    2eba:	08 95       	ret

00002ebc <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	75 87       	std	Z+13, r23	; 0x0d
    2ec0:	64 87       	std	Z+12, r22	; 0x0c
}
    2ec2:	08 95       	ret

00002ec4 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	77 87       	std	Z+15, r23	; 0x0f
    2ec8:	66 87       	std	Z+14, r22	; 0x0e
}
    2eca:	08 95       	ret

00002ecc <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2ecc:	fc 01       	movw	r30, r24
    2ece:	71 8b       	std	Z+17, r23	; 0x11
    2ed0:	60 8b       	std	Z+16, r22	; 0x10
}
    2ed2:	08 95       	ret

00002ed4 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	73 8b       	std	Z+19, r23	; 0x13
    2ed8:	62 8b       	std	Z+18, r22	; 0x12
}
    2eda:	08 95       	ret

00002edc <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    2edc:	fc 01       	movw	r30, r24
    2ede:	75 8b       	std	Z+21, r23	; 0x15
    2ee0:	64 8b       	std	Z+20, r22	; 0x14
}
    2ee2:	08 95       	ret

00002ee4 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	77 8b       	std	Z+23, r23	; 0x17
    2ee8:	66 8b       	std	Z+22, r22	; 0x16
}
    2eea:	08 95       	ret

00002eec <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2eec:	fc 01       	movw	r30, r24
    2eee:	71 8f       	std	Z+25, r23	; 0x19
    2ef0:	60 8f       	std	Z+24, r22	; 0x18
}
    2ef2:	08 95       	ret

00002ef4 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	73 8f       	std	Z+27, r23	; 0x1b
    2ef8:	62 8f       	std	Z+26, r22	; 0x1a
}
    2efa:	08 95       	ret

00002efc <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2efc:	fc 01       	movw	r30, r24
    2efe:	75 8f       	std	Z+29, r23	; 0x1d
    2f00:	64 8f       	std	Z+28, r22	; 0x1c
}
    2f02:	08 95       	ret

00002f04 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    2f04:	fc 01       	movw	r30, r24
    2f06:	77 8f       	std	Z+31, r23	; 0x1f
    2f08:	66 8f       	std	Z+30, r22	; 0x1e
}
    2f0a:	08 95       	ret

00002f0c <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    2f12:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    2f14:	1f a2       	lds	r17, 0x9f
    2f16:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2f18:	bc 01       	movw	r22, r24
    2f1a:	68 5d       	subi	r22, 0xD8	; 216
    2f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1e:	88 51       	subi	r24, 0x18	; 24
    2f20:	9f 4f       	sbci	r25, 0xFF	; 255
    2f22:	40 ec       	ldi	r20, 0xC0	; 192
    2f24:	0e 94 00 15 	call	0x2a00	; 0x2a00 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2f28:	1b 82       	std	Y+3, r1	; 0x03
    2f2a:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2f2c:	1d 82       	std	Y+5, r1	; 0x05
    2f2e:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2f30:	1f 82       	std	Y+7, r1	; 0x07
    2f32:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    2f34:	19 86       	std	Y+9, r1	; 0x09
    2f36:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2f38:	1b 86       	std	Y+11, r1	; 0x0b
    2f3a:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2f3c:	1d 86       	std	Y+13, r1	; 0x0d
    2f3e:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2f40:	1f 86       	std	Y+15, r1	; 0x0f
    2f42:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    2f44:	19 8a       	std	Y+17, r1	; 0x11
    2f46:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2f48:	1b 8a       	std	Y+19, r1	; 0x13
    2f4a:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2f4c:	1d 8a       	std	Y+21, r1	; 0x15
    2f4e:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2f50:	1f 8a       	std	Y+23, r1	; 0x17
    2f52:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    2f54:	19 8e       	std	Y+25, r1	; 0x19
    2f56:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2f58:	1b 8e       	std	Y+27, r1	; 0x1b
    2f5a:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2f5c:	1d 8e       	std	Y+29, r1	; 0x1d
    2f5e:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2f60:	1f 8e       	std	Y+31, r1	; 0x1f
    2f62:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    2f64:	19 a2       	lds	r17, 0x99
    2f66:	18 a2       	lds	r17, 0x98
}
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	08 95       	ret

00002f6e <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2f6e:	ef 92       	push	r14
    2f70:	ff 92       	push	r15
    2f72:	0f 93       	push	r16
    2f74:	1f 93       	push	r17
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2f7c:	66 23       	and	r22, r22
    2f7e:	99 f0       	breq	.+38     	; 0x2fa6 <midi_device_input+0x38>
    2f80:	04 2f       	mov	r16, r20
    2f82:	15 2f       	mov	r17, r21
    2f84:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    2f86:	0f 2e       	mov	r0, r31
    2f88:	f8 ee       	ldi	r31, 0xE8	; 232
    2f8a:	ef 2e       	mov	r14, r31
    2f8c:	ff 24       	eor	r15, r15
    2f8e:	f0 2d       	mov	r31, r0
    2f90:	e8 0e       	add	r14, r24
    2f92:	f9 1e       	adc	r15, r25
    2f94:	f8 01       	movw	r30, r16
    2f96:	61 91       	ld	r22, Z+
    2f98:	8f 01       	movw	r16, r30
    2f9a:	c7 01       	movw	r24, r14
    2f9c:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2fa0:	cf 5f       	subi	r28, 0xFF	; 255
    2fa2:	cd 17       	cp	r28, r29
    2fa4:	b9 f7       	brne	.-18     	; 0x2f94 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	1f 91       	pop	r17
    2fac:	0f 91       	pop	r16
    2fae:	ff 90       	pop	r15
    2fb0:	ef 90       	pop	r14
    2fb2:	08 95       	ret

00002fb4 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	71 83       	std	Z+1, r23	; 0x01
    2fb8:	60 83       	st	Z, r22
}
    2fba:	08 95       	ret

00002fbc <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	71 a3       	lds	r23, 0x51
    2fc0:	60 a3       	lds	r22, 0x50
}
    2fc2:	08 95       	ret

00002fc4 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    2fc4:	af 92       	push	r10
    2fc6:	bf 92       	push	r11
    2fc8:	cf 92       	push	r12
    2fca:	df 92       	push	r13
    2fcc:	ef 92       	push	r14
    2fce:	ff 92       	push	r15
    2fd0:	0f 93       	push	r16
    2fd2:	1f 93       	push	r17
    2fd4:	cf 93       	push	r28
    2fd6:	df 93       	push	r29
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <midi_input_callbacks+0x16>
    2fda:	0f 92       	push	r0
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	6c 01       	movw	r12, r24
    2fe2:	5b 01       	movw	r10, r22
    2fe4:	f4 2e       	mov	r15, r20
    2fe6:	e2 2e       	mov	r14, r18
    2fe8:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2fea:	dc 01       	movw	r26, r24
    2fec:	95 96       	adiw	r26, 0x25	; 37
    2fee:	8c 91       	ld	r24, X
    2ff0:	95 97       	sbiw	r26, 0x25	; 37
    2ff2:	84 30       	cpi	r24, 0x04	; 4
    2ff4:	e9 f4       	brne	.+58     	; 0x3030 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    2ff6:	5a 96       	adiw	r26, 0x1a	; 26
    2ff8:	ed 91       	ld	r30, X+
    2ffa:	fc 91       	ld	r31, X
    2ffc:	5b 97       	sbiw	r26, 0x1b	; 27
    2ffe:	30 97       	sbiw	r30, 0x00	; 0
    3000:	09 f4       	brne	.+2      	; 0x3004 <midi_input_callbacks+0x40>
    3002:	ee c0       	rjmp	.+476    	; 0x31e0 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    3004:	cb 01       	movw	r24, r22
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	63 e0       	ldi	r22, 0x03	; 3
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__udivmodhi4>
    3010:	cb 01       	movw	r24, r22
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	68 0f       	add	r22, r24
    3018:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    301a:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    301c:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    301e:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    3020:	4a 2d       	mov	r20, r10
    3022:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    3024:	c6 01       	movw	r24, r12
    3026:	9e 01       	movw	r18, r28
    3028:	2f 5f       	subi	r18, 0xFF	; 255
    302a:	3f 4f       	sbci	r19, 0xFF	; 255
    302c:	09 95       	icall
    302e:	c8 c0       	rjmp	.+400    	; 0x31c0 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    3030:	62 30       	cpi	r22, 0x02	; 2
    3032:	71 05       	cpc	r23, r1
    3034:	09 f4       	brne	.+2      	; 0x3038 <midi_input_callbacks+0x74>
    3036:	5f c0       	rjmp	.+190    	; 0x30f6 <midi_input_callbacks+0x132>
    3038:	63 30       	cpi	r22, 0x03	; 3
    303a:	71 05       	cpc	r23, r1
    303c:	29 f0       	breq	.+10     	; 0x3048 <midi_input_callbacks+0x84>
    303e:	61 30       	cpi	r22, 0x01	; 1
    3040:	71 05       	cpc	r23, r1
    3042:	09 f0       	breq	.+2      	; 0x3046 <midi_input_callbacks+0x82>
    3044:	b3 c0       	rjmp	.+358    	; 0x31ac <midi_input_callbacks+0x1e8>
    3046:	99 c0       	rjmp	.+306    	; 0x317a <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3048:	84 2f       	mov	r24, r20
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	80 7f       	andi	r24, 0xF0	; 240
    304e:	90 70       	andi	r25, 0x00	; 0
    3050:	80 3a       	cpi	r24, 0xA0	; 160
    3052:	91 05       	cpc	r25, r1
    3054:	29 f1       	breq	.+74     	; 0x30a0 <midi_input_callbacks+0xdc>
    3056:	81 3a       	cpi	r24, 0xA1	; 161
    3058:	91 05       	cpc	r25, r1
    305a:	3c f4       	brge	.+14     	; 0x306a <midi_input_callbacks+0xa6>
    305c:	80 38       	cpi	r24, 0x80	; 128
    305e:	91 05       	cpc	r25, r1
    3060:	c9 f0       	breq	.+50     	; 0x3094 <midi_input_callbacks+0xd0>
    3062:	80 39       	cpi	r24, 0x90	; 144
    3064:	91 05       	cpc	r25, r1
    3066:	91 f5       	brne	.+100    	; 0x30cc <midi_input_callbacks+0x108>
    3068:	0f c0       	rjmp	.+30     	; 0x3088 <midi_input_callbacks+0xc4>
    306a:	80 3e       	cpi	r24, 0xE0	; 224
    306c:	91 05       	cpc	r25, r1
    306e:	f1 f0       	breq	.+60     	; 0x30ac <midi_input_callbacks+0xe8>
    3070:	80 3f       	cpi	r24, 0xF0	; 240
    3072:	91 05       	cpc	r25, r1
    3074:	09 f1       	breq	.+66     	; 0x30b8 <midi_input_callbacks+0xf4>
    3076:	80 3b       	cpi	r24, 0xB0	; 176
    3078:	91 05       	cpc	r25, r1
    307a:	41 f5       	brne	.+80     	; 0x30cc <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    307c:	d6 01       	movw	r26, r12
    307e:	12 96       	adiw	r26, 0x02	; 2
    3080:	ed 91       	ld	r30, X+
    3082:	fc 91       	ld	r31, X
    3084:	13 97       	sbiw	r26, 0x03	; 3
              break;
    3086:	24 c0       	rjmp	.+72     	; 0x30d0 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    3088:	d6 01       	movw	r26, r12
    308a:	14 96       	adiw	r26, 0x04	; 4
    308c:	ed 91       	ld	r30, X+
    308e:	fc 91       	ld	r31, X
    3090:	15 97       	sbiw	r26, 0x05	; 5
              break;
    3092:	1e c0       	rjmp	.+60     	; 0x30d0 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    3094:	d6 01       	movw	r26, r12
    3096:	16 96       	adiw	r26, 0x06	; 6
    3098:	ed 91       	ld	r30, X+
    309a:	fc 91       	ld	r31, X
    309c:	17 97       	sbiw	r26, 0x07	; 7
              break;
    309e:	18 c0       	rjmp	.+48     	; 0x30d0 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    30a0:	d6 01       	movw	r26, r12
    30a2:	18 96       	adiw	r26, 0x08	; 8
    30a4:	ed 91       	ld	r30, X+
    30a6:	fc 91       	ld	r31, X
    30a8:	19 97       	sbiw	r26, 0x09	; 9
              break;
    30aa:	12 c0       	rjmp	.+36     	; 0x30d0 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    30ac:	d6 01       	movw	r26, r12
    30ae:	1a 96       	adiw	r26, 0x0a	; 10
    30b0:	ed 91       	ld	r30, X+
    30b2:	fc 91       	ld	r31, X
    30b4:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    30b6:	0c c0       	rjmp	.+24     	; 0x30d0 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    30b8:	b2 ef       	ldi	r27, 0xF2	; 242
    30ba:	4b 17       	cp	r20, r27
    30bc:	09 f0       	breq	.+2      	; 0x30c0 <midi_input_callbacks+0xfc>
    30be:	90 c0       	rjmp	.+288    	; 0x31e0 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    30c0:	d6 01       	movw	r26, r12
    30c2:	1c 96       	adiw	r26, 0x0c	; 12
    30c4:	ed 91       	ld	r30, X+
    30c6:	fc 91       	ld	r31, X
    30c8:	1d 97       	sbiw	r26, 0x0d	; 13
    30ca:	02 c0       	rjmp	.+4      	; 0x30d0 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    30cc:	e0 e0       	ldi	r30, 0x00	; 0
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    30d0:	30 97       	sbiw	r30, 0x00	; 0
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <midi_input_callbacks+0x112>
    30d4:	85 c0       	rjmp	.+266    	; 0x31e0 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    30d6:	b2 ef       	ldi	r27, 0xF2	; 242
    30d8:	fb 16       	cp	r15, r27
    30da:	31 f4       	brne	.+12     	; 0x30e8 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    30dc:	c6 01       	movw	r24, r12
    30de:	62 ef       	ldi	r22, 0xF2	; 242
    30e0:	4e 2d       	mov	r20, r14
    30e2:	21 2f       	mov	r18, r17
    30e4:	09 95       	icall
    30e6:	6c c0       	rjmp	.+216    	; 0x31c0 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    30e8:	6f 2d       	mov	r22, r15
    30ea:	6f 70       	andi	r22, 0x0F	; 15
    30ec:	c6 01       	movw	r24, r12
    30ee:	4e 2d       	mov	r20, r14
    30f0:	21 2f       	mov	r18, r17
    30f2:	09 95       	icall
    30f4:	65 c0       	rjmp	.+202    	; 0x31c0 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    30f6:	84 2f       	mov	r24, r20
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	80 7f       	andi	r24, 0xF0	; 240
    30fc:	90 70       	andi	r25, 0x00	; 0
    30fe:	80 3d       	cpi	r24, 0xD0	; 208
    3100:	91 05       	cpc	r25, r1
    3102:	61 f0       	breq	.+24     	; 0x311c <midi_input_callbacks+0x158>
    3104:	80 3f       	cpi	r24, 0xF0	; 240
    3106:	91 05       	cpc	r25, r1
    3108:	79 f0       	breq	.+30     	; 0x3128 <midi_input_callbacks+0x164>
    310a:	80 3c       	cpi	r24, 0xC0	; 192
    310c:	91 05       	cpc	r25, r1
    310e:	f9 f4       	brne	.+62     	; 0x314e <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    3110:	d6 01       	movw	r26, r12
    3112:	1e 96       	adiw	r26, 0x0e	; 14
    3114:	ed 91       	ld	r30, X+
    3116:	fc 91       	ld	r31, X
    3118:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    311a:	1b c0       	rjmp	.+54     	; 0x3152 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    311c:	d6 01       	movw	r26, r12
    311e:	50 96       	adiw	r26, 0x10	; 16
    3120:	ed 91       	ld	r30, X+
    3122:	fc 91       	ld	r31, X
    3124:	51 97       	sbiw	r26, 0x11	; 17
              break;
    3126:	15 c0       	rjmp	.+42     	; 0x3152 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    3128:	b3 ef       	ldi	r27, 0xF3	; 243
    312a:	4b 17       	cp	r20, r27
    312c:	31 f4       	brne	.+12     	; 0x313a <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    312e:	d6 01       	movw	r26, r12
    3130:	52 96       	adiw	r26, 0x12	; 18
    3132:	ed 91       	ld	r30, X+
    3134:	fc 91       	ld	r31, X
    3136:	53 97       	sbiw	r26, 0x13	; 19
    3138:	0c c0       	rjmp	.+24     	; 0x3152 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    313a:	b1 ef       	ldi	r27, 0xF1	; 241
    313c:	4b 17       	cp	r20, r27
    313e:	09 f0       	breq	.+2      	; 0x3142 <midi_input_callbacks+0x17e>
    3140:	4f c0       	rjmp	.+158    	; 0x31e0 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    3142:	d6 01       	movw	r26, r12
    3144:	54 96       	adiw	r26, 0x14	; 20
    3146:	ed 91       	ld	r30, X+
    3148:	fc 91       	ld	r31, X
    314a:	55 97       	sbiw	r26, 0x15	; 21
    314c:	02 c0       	rjmp	.+4      	; 0x3152 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    314e:	e0 e0       	ldi	r30, 0x00	; 0
    3150:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    3152:	30 97       	sbiw	r30, 0x00	; 0
    3154:	09 f4       	brne	.+2      	; 0x3158 <midi_input_callbacks+0x194>
    3156:	44 c0       	rjmp	.+136    	; 0x31e0 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    3158:	b3 ef       	ldi	r27, 0xF3	; 243
    315a:	fb 16       	cp	r15, r27
    315c:	19 f0       	breq	.+6      	; 0x3164 <midi_input_callbacks+0x1a0>
    315e:	81 ef       	ldi	r24, 0xF1	; 241
    3160:	f8 16       	cp	r15, r24
    3162:	29 f4       	brne	.+10     	; 0x316e <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    3164:	c6 01       	movw	r24, r12
    3166:	6f 2d       	mov	r22, r15
    3168:	4e 2d       	mov	r20, r14
    316a:	09 95       	icall
    316c:	29 c0       	rjmp	.+82     	; 0x31c0 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    316e:	6f 2d       	mov	r22, r15
    3170:	6f 70       	andi	r22, 0x0F	; 15
    3172:	c6 01       	movw	r24, r12
    3174:	4e 2d       	mov	r20, r14
    3176:	09 95       	icall
    3178:	23 c0       	rjmp	.+70     	; 0x31c0 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    317a:	84 2f       	mov	r24, r20
    317c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <midi_is_realtime>
    3180:	88 23       	and	r24, r24
    3182:	31 f0       	breq	.+12     	; 0x3190 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    3184:	d6 01       	movw	r26, r12
    3186:	56 96       	adiw	r26, 0x16	; 22
    3188:	ed 91       	ld	r30, X+
    318a:	fc 91       	ld	r31, X
    318c:	57 97       	sbiw	r26, 0x17	; 23
    318e:	08 c0       	rjmp	.+16     	; 0x31a0 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    3190:	b6 ef       	ldi	r27, 0xF6	; 246
    3192:	fb 16       	cp	r15, r27
    3194:	29 f5       	brne	.+74     	; 0x31e0 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    3196:	d6 01       	movw	r26, r12
    3198:	58 96       	adiw	r26, 0x18	; 24
    319a:	ed 91       	ld	r30, X+
    319c:	fc 91       	ld	r31, X
    319e:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    31a0:	30 97       	sbiw	r30, 0x00	; 0
    31a2:	f1 f0       	breq	.+60     	; 0x31e0 <midi_input_callbacks+0x21c>
            func(device, byte0);
    31a4:	c6 01       	movw	r24, r12
    31a6:	6f 2d       	mov	r22, r15
    31a8:	09 95       	icall
    31aa:	0a c0       	rjmp	.+20     	; 0x31c0 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    31ac:	64 30       	cpi	r22, 0x04	; 4
    31ae:	71 05       	cpc	r23, r1
    31b0:	a8 f4       	brcc	.+42     	; 0x31dc <midi_input_callbacks+0x218>
    31b2:	16 c0       	rjmp	.+44     	; 0x31e0 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    31b4:	c6 01       	movw	r24, r12
    31b6:	b5 01       	movw	r22, r10
    31b8:	4f 2d       	mov	r20, r15
    31ba:	2e 2d       	mov	r18, r14
    31bc:	01 2f       	mov	r16, r17
    31be:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    31c0:	d6 01       	movw	r26, r12
    31c2:	5e 96       	adiw	r26, 0x1e	; 30
    31c4:	ed 91       	ld	r30, X+
    31c6:	fc 91       	ld	r31, X
    31c8:	5f 97       	sbiw	r26, 0x1f	; 31
    31ca:	30 97       	sbiw	r30, 0x00	; 0
    31cc:	89 f0       	breq	.+34     	; 0x31f0 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    31ce:	c6 01       	movw	r24, r12
    31d0:	b5 01       	movw	r22, r10
    31d2:	4f 2d       	mov	r20, r15
    31d4:	2e 2d       	mov	r18, r14
    31d6:	01 2f       	mov	r16, r17
    31d8:	09 95       	icall
    31da:	0a c0       	rjmp	.+20     	; 0x31f0 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    31dc:	aa 24       	eor	r10, r10
    31de:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    31e0:	d6 01       	movw	r26, r12
    31e2:	5c 96       	adiw	r26, 0x1c	; 28
    31e4:	ed 91       	ld	r30, X+
    31e6:	fc 91       	ld	r31, X
    31e8:	5d 97       	sbiw	r26, 0x1d	; 29
    31ea:	30 97       	sbiw	r30, 0x00	; 0
    31ec:	19 f7       	brne	.-58     	; 0x31b4 <midi_input_callbacks+0x1f0>
    31ee:	e8 cf       	rjmp	.-48     	; 0x31c0 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	0f 90       	pop	r0
    31f6:	df 91       	pop	r29
    31f8:	cf 91       	pop	r28
    31fa:	1f 91       	pop	r17
    31fc:	0f 91       	pop	r16
    31fe:	ff 90       	pop	r15
    3200:	ef 90       	pop	r14
    3202:	df 90       	pop	r13
    3204:	cf 90       	pop	r12
    3206:	bf 90       	pop	r11
    3208:	af 90       	pop	r10
    320a:	08 95       	ret

0000320c <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    320c:	ef 92       	push	r14
    320e:	ff 92       	push	r15
    3210:	0f 93       	push	r16
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	7c 01       	movw	r14, r24
    3218:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    321a:	86 2f       	mov	r24, r22
    321c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <midi_is_realtime>
    3220:	88 23       	and	r24, r24
    3222:	91 f0       	breq	.+36     	; 0x3248 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    3224:	d7 01       	movw	r26, r14
    3226:	95 96       	adiw	r26, 0x25	; 37
    3228:	dc 91       	ld	r29, X
    322a:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	95 96       	adiw	r26, 0x25	; 37
    3230:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    3232:	c7 01       	movw	r24, r14
    3234:	61 e0       	ldi	r22, 0x01	; 1
    3236:	70 e0       	ldi	r23, 0x00	; 0
    3238:	4c 2f       	mov	r20, r28
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	00 e0       	ldi	r16, 0x00	; 0
    323e:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <midi_input_callbacks>
    device->input_state = state;
    3242:	f7 01       	movw	r30, r14
    3244:	d5 a3       	lds	r29, 0x55
    3246:	b7 c0       	rjmp	.+366    	; 0x33b6 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    3248:	8c 2f       	mov	r24, r28
    324a:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <midi_is_statusbyte>
    324e:	88 23       	and	r24, r24
    3250:	09 f4       	brne	.+2      	; 0x3254 <midi_process_byte+0x48>
    3252:	73 c0       	rjmp	.+230    	; 0x333a <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    3254:	d7 01       	movw	r26, r14
    3256:	95 96       	adiw	r26, 0x25	; 37
    3258:	8c 91       	ld	r24, X
    325a:	95 97       	sbiw	r26, 0x25	; 37
    325c:	84 30       	cpi	r24, 0x04	; 4
    325e:	49 f0       	breq	.+18     	; 0x3272 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    3260:	92 96       	adiw	r26, 0x22	; 34
    3262:	cc 93       	st	X, r28
    3264:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	97 96       	adiw	r26, 0x27	; 39
    326c:	9c 93       	st	X, r25
    326e:	8e 93       	st	-X, r24
    3270:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    3272:	8c 2f       	mov	r24, r28
    3274:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <midi_packet_length>
    3278:	81 30       	cpi	r24, 0x01	; 1
    327a:	41 f0       	breq	.+16     	; 0x328c <midi_process_byte+0x80>
    327c:	81 30       	cpi	r24, 0x01	; 1
    327e:	00 f1       	brcs	.+64     	; 0x32c0 <midi_process_byte+0xb4>
    3280:	82 30       	cpi	r24, 0x02	; 2
    3282:	a1 f0       	breq	.+40     	; 0x32ac <midi_process_byte+0xa0>
    3284:	83 30       	cpi	r24, 0x03	; 3
    3286:	09 f0       	breq	.+2      	; 0x328a <midi_process_byte+0x7e>
    3288:	4f c0       	rjmp	.+158    	; 0x3328 <midi_process_byte+0x11c>
    328a:	14 c0       	rjmp	.+40     	; 0x32b4 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	f7 01       	movw	r30, r14
    3290:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3292:	c7 01       	movw	r24, r14
    3294:	61 e0       	ldi	r22, 0x01	; 1
    3296:	70 e0       	ldi	r23, 0x00	; 0
    3298:	4c 2f       	mov	r20, r28
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	00 e0       	ldi	r16, 0x00	; 0
    329e:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <midi_input_callbacks>
        device->input_state = IDLE;
    32a2:	d7 01       	movw	r26, r14
    32a4:	95 96       	adiw	r26, 0x25	; 37
    32a6:	1c 92       	st	X, r1
    32a8:	95 97       	sbiw	r26, 0x25	; 37
        break;
    32aa:	85 c0       	rjmp	.+266    	; 0x33b6 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    32ac:	82 e0       	ldi	r24, 0x02	; 2
    32ae:	f7 01       	movw	r30, r14
    32b0:	85 a3       	lds	r24, 0x55
        break;
    32b2:	81 c0       	rjmp	.+258    	; 0x33b6 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    32b4:	83 e0       	ldi	r24, 0x03	; 3
    32b6:	d7 01       	movw	r26, r14
    32b8:	95 96       	adiw	r26, 0x25	; 37
    32ba:	8c 93       	st	X, r24
    32bc:	95 97       	sbiw	r26, 0x25	; 37
        break;
    32be:	7b c0       	rjmp	.+246    	; 0x33b6 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    32c0:	c0 3f       	cpi	r28, 0xF0	; 240
    32c2:	19 f0       	breq	.+6      	; 0x32ca <midi_process_byte+0xbe>
    32c4:	c7 3f       	cpi	r28, 0xF7	; 247
    32c6:	59 f5       	brne	.+86     	; 0x331e <midi_process_byte+0x112>
    32c8:	0a c0       	rjmp	.+20     	; 0x32de <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    32ca:	84 e0       	ldi	r24, 0x04	; 4
    32cc:	f7 01       	movw	r30, r14
    32ce:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    32d0:	80 ef       	ldi	r24, 0xF0	; 240
    32d2:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	97 a3       	lds	r25, 0x57
    32da:	86 a3       	lds	r24, 0x56
            break;
    32dc:	6c c0       	rjmp	.+216    	; 0x33b6 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    32de:	d7 01       	movw	r26, r14
    32e0:	96 96       	adiw	r26, 0x26	; 38
    32e2:	2d 91       	ld	r18, X+
    32e4:	3c 91       	ld	r19, X
    32e6:	97 97       	sbiw	r26, 0x27	; 39
    32e8:	c9 01       	movw	r24, r18
    32ea:	63 e0       	ldi	r22, 0x03	; 3
    32ec:	70 e0       	ldi	r23, 0x00	; 0
    32ee:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__udivmodhi4>
    32f2:	f7 01       	movw	r30, r14
    32f4:	e8 0f       	add	r30, r24
    32f6:	f9 1f       	adc	r31, r25
    32f8:	87 ef       	ldi	r24, 0xF7	; 247
    32fa:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    32fc:	b9 01       	movw	r22, r18
    32fe:	6f 5f       	subi	r22, 0xFF	; 255
    3300:	7f 4f       	sbci	r23, 0xFF	; 255
    3302:	f7 01       	movw	r30, r14
    3304:	77 a3       	lds	r23, 0x57
    3306:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3308:	c7 01       	movw	r24, r14
    330a:	42 a1       	lds	r20, 0x42
    330c:	23 a1       	lds	r18, 0x43
    330e:	04 a1       	lds	r16, 0x44
    3310:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3314:	d7 01       	movw	r26, r14
    3316:	95 96       	adiw	r26, 0x25	; 37
    3318:	1c 92       	st	X, r1
    331a:	95 97       	sbiw	r26, 0x25	; 37
            break;
    331c:	4c c0       	rjmp	.+152    	; 0x33b6 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    331e:	f7 01       	movw	r30, r14
    3320:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    3322:	17 a2       	lds	r17, 0x97
    3324:	16 a2       	lds	r17, 0x96
    3326:	47 c0       	rjmp	.+142    	; 0x33b6 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    3328:	d7 01       	movw	r26, r14
    332a:	95 96       	adiw	r26, 0x25	; 37
    332c:	1c 92       	st	X, r1
    332e:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    3330:	97 96       	adiw	r26, 0x27	; 39
    3332:	1c 92       	st	X, r1
    3334:	1e 92       	st	-X, r1
    3336:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3338:	3e c0       	rjmp	.+124    	; 0x33b6 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    333a:	f7 01       	movw	r30, r14
    333c:	25 a1       	lds	r18, 0x45
    333e:	22 23       	and	r18, r18
    3340:	d1 f1       	breq	.+116    	; 0x33b6 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    3342:	06 a0       	lds	r16, 0x86
    3344:	f7 a1       	lds	r31, 0x47
    3346:	e0 2d       	mov	r30, r0
    3348:	cf 01       	movw	r24, r30
    334a:	63 e0       	ldi	r22, 0x03	; 3
    334c:	70 e0       	ldi	r23, 0x00	; 0
    334e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__udivmodhi4>
    3352:	ac 01       	movw	r20, r24
    3354:	8e 0d       	add	r24, r14
    3356:	9f 1d       	adc	r25, r15
    3358:	dc 01       	movw	r26, r24
    335a:	92 96       	adiw	r26, 0x22	; 34
    335c:	cc 93       	st	X, r28
    335e:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    3360:	bf 01       	movw	r22, r30
    3362:	6f 5f       	subi	r22, 0xFF	; 255
    3364:	7f 4f       	sbci	r23, 0xFF	; 255
    3366:	f7 01       	movw	r30, r14
    3368:	77 a3       	lds	r23, 0x57
    336a:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    336c:	41 30       	cpi	r20, 0x01	; 1
    336e:	51 05       	cpc	r21, r1
    3370:	91 f0       	breq	.+36     	; 0x3396 <midi_process_byte+0x18a>
    3372:	42 30       	cpi	r20, 0x02	; 2
    3374:	51 05       	cpc	r21, r1
    3376:	f9 f4       	brne	.+62     	; 0x33b6 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    3378:	c7 01       	movw	r24, r14
    337a:	42 a1       	lds	r20, 0x42
    337c:	23 a1       	lds	r18, 0x43
    337e:	04 a1       	lds	r16, 0x44
    3380:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    3384:	f7 01       	movw	r30, r14
    3386:	85 a1       	lds	r24, 0x45
    3388:	84 30       	cpi	r24, 0x04	; 4
    338a:	a9 f0       	breq	.+42     	; 0x33b6 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	97 a3       	lds	r25, 0x57
    3392:	86 a3       	lds	r24, 0x56
    3394:	10 c0       	rjmp	.+32     	; 0x33b6 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3396:	22 30       	cpi	r18, 0x02	; 2
    3398:	71 f4       	brne	.+28     	; 0x33b6 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    339a:	c7 01       	movw	r24, r14
    339c:	42 a1       	lds	r20, 0x42
    339e:	23 a1       	lds	r18, 0x43
    33a0:	00 e0       	ldi	r16, 0x00	; 0
    33a2:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    33a6:	f7 01       	movw	r30, r14
    33a8:	85 a1       	lds	r24, 0x45
    33aa:	84 30       	cpi	r24, 0x04	; 4
    33ac:	21 f0       	breq	.+8      	; 0x33b6 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	97 a3       	lds	r25, 0x57
    33b4:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	0f 91       	pop	r16
    33bc:	ff 90       	pop	r15
    33be:	ef 90       	pop	r14
    33c0:	08 95       	ret

000033c2 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    33c2:	cf 92       	push	r12
    33c4:	df 92       	push	r13
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    33d4:	dc 01       	movw	r26, r24
    33d6:	90 96       	adiw	r26, 0x20	; 32
    33d8:	ed 91       	ld	r30, X+
    33da:	fc 91       	ld	r31, X
    33dc:	91 97       	sbiw	r26, 0x21	; 33
    33de:	30 97       	sbiw	r30, 0x00	; 0
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    33e2:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    33e4:	0f 2e       	mov	r0, r31
    33e6:	f8 ee       	ldi	r31, 0xE8	; 232
    33e8:	ef 2e       	mov	r14, r31
    33ea:	ff 24       	eor	r15, r15
    33ec:	f0 2d       	mov	r31, r0
    33ee:	ec 0c       	add	r14, r12
    33f0:	fd 1c       	adc	r15, r13
    33f2:	c7 01       	movw	r24, r14
    33f4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    33f8:	c8 2f       	mov	r28, r24
    33fa:	d0 e0       	ldi	r29, 0x00	; 0
    33fc:	20 97       	sbiw	r28, 0x00	; 0
    33fe:	99 f0       	breq	.+38     	; 0x3426 <midi_device_process+0x64>
    3400:	00 e0       	ldi	r16, 0x00	; 0
    3402:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    3404:	c7 01       	movw	r24, r14
    3406:	60 e0       	ldi	r22, 0x00	; 0
    3408:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <bytequeue_get>
    340c:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    340e:	c6 01       	movw	r24, r12
    3410:	0e 94 06 19 	call	0x320c	; 0x320c <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3414:	c7 01       	movw	r24, r14
    3416:	61 e0       	ldi	r22, 0x01	; 1
    3418:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    341c:	0f 5f       	subi	r16, 0xFF	; 255
    341e:	1f 4f       	sbci	r17, 0xFF	; 255
    3420:	0c 17       	cp	r16, r28
    3422:	1d 07       	cpc	r17, r29
    3424:	78 f3       	brcs	.-34     	; 0x3404 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	df 90       	pop	r13
    3434:	cf 90       	pop	r12
    3436:	08 95       	ret

00003438 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3438:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    343a:	67 e0       	ldi	r22, 0x07	; 7
    343c:	70 e0       	ldi	r23, 0x00	; 0
    343e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__udivmodhi4>
    3442:	48 2f       	mov	r20, r24
   if (remainder)
    3444:	88 23       	and	r24, r24
    3446:	81 f0       	breq	.+32     	; 0x3468 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    3448:	c9 01       	movw	r24, r18
    344a:	67 e0       	ldi	r22, 0x07	; 7
    344c:	70 e0       	ldi	r23, 0x00	; 0
    344e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__udivmodhi4>
    3452:	cb 01       	movw	r24, r22
    3454:	88 0f       	add	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	88 0f       	add	r24, r24
    345a:	99 1f       	adc	r25, r25
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	01 96       	adiw	r24, 0x01	; 1
    3462:	84 0f       	add	r24, r20
    3464:	91 1d       	adc	r25, r1
    3466:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3468:	c9 01       	movw	r24, r18
    346a:	67 e0       	ldi	r22, 0x07	; 7
    346c:	70 e0       	ldi	r23, 0x00	; 0
    346e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__udivmodhi4>
    3472:	cb 01       	movw	r24, r22
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	88 0f       	add	r24, r24
    347e:	99 1f       	adc	r25, r25
}
    3480:	08 95       	ret

00003482 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3482:	48 2f       	mov	r20, r24
    3484:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3486:	a1 f0       	breq	.+40     	; 0x34b0 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3488:	9c 01       	movw	r18, r24
    348a:	36 95       	lsr	r19
    348c:	27 95       	ror	r18
    348e:	36 95       	lsr	r19
    3490:	27 95       	ror	r18
    3492:	36 95       	lsr	r19
    3494:	27 95       	ror	r18
    3496:	c9 01       	movw	r24, r18
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	88 0f       	add	r24, r24
    349e:	99 1f       	adc	r25, r25
    34a0:	88 0f       	add	r24, r24
    34a2:	99 1f       	adc	r25, r25
    34a4:	82 1b       	sub	r24, r18
    34a6:	93 0b       	sbc	r25, r19
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	84 0f       	add	r24, r20
    34ac:	91 1d       	adc	r25, r1
    34ae:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    34b0:	9c 01       	movw	r18, r24
    34b2:	36 95       	lsr	r19
    34b4:	27 95       	ror	r18
    34b6:	36 95       	lsr	r19
    34b8:	27 95       	ror	r18
    34ba:	36 95       	lsr	r19
    34bc:	27 95       	ror	r18
    34be:	c9 01       	movw	r24, r18
    34c0:	88 0f       	add	r24, r24
    34c2:	99 1f       	adc	r25, r25
    34c4:	88 0f       	add	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	88 0f       	add	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	82 1b       	sub	r24, r18
    34ce:	93 0b       	sbc	r25, r19
}
    34d0:	08 95       	ret

000034d2 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    34d2:	2f 92       	push	r2
    34d4:	3f 92       	push	r3
    34d6:	4f 92       	push	r4
    34d8:	5f 92       	push	r5
    34da:	6f 92       	push	r6
    34dc:	7f 92       	push	r7
    34de:	8f 92       	push	r8
    34e0:	9f 92       	push	r9
    34e2:	af 92       	push	r10
    34e4:	bf 92       	push	r11
    34e6:	cf 92       	push	r12
    34e8:	df 92       	push	r13
    34ea:	ef 92       	push	r14
    34ec:	ff 92       	push	r15
    34ee:	0f 93       	push	r16
    34f0:	1f 93       	push	r17
    34f2:	cf 93       	push	r28
    34f4:	df 93       	push	r29
    34f6:	00 d0       	rcall	.+0      	; 0x34f8 <sysex_encode+0x26>
    34f8:	00 d0       	rcall	.+0      	; 0x34fa <sysex_encode+0x28>
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <sysex_encode+0x2a>
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	1c 01       	movw	r2, r24
    3502:	7a 83       	std	Y+2, r23	; 0x02
    3504:	69 83       	std	Y+1, r22	; 0x01
    3506:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3508:	ca 01       	movw	r24, r20
    350a:	67 e0       	ldi	r22, 0x07	; 7
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__udivmodhi4>
    3512:	2b 01       	movw	r4, r22
    3514:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3516:	61 15       	cp	r22, r1
    3518:	71 05       	cpc	r23, r1
    351a:	b1 f1       	breq	.+108    	; 0x3588 <sysex_encode+0xb6>
    351c:	81 01       	movw	r16, r2
    351e:	e9 80       	ldd	r14, Y+1	; 0x01
    3520:	fa 80       	ldd	r15, Y+2	; 0x02
    3522:	cc 24       	eor	r12, r12
    3524:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3526:	88 24       	eor	r8, r8
    3528:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    352a:	1e 83       	std	Y+6, r17	; 0x06
    352c:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    352e:	f8 01       	movw	r30, r16
    3530:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3532:	fc 82       	std	Y+4, r15	; 0x04
    3534:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3536:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3538:	ab 81       	ldd	r26, Y+3	; 0x03
    353a:	bc 81       	ldd	r27, Y+4	; 0x04
    353c:	2d 91       	ld	r18, X+
    353e:	bc 83       	std	Y+4, r27	; 0x04
    3540:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3542:	4f 5f       	subi	r20, 0xFF	; 255
    3544:	5f 4f       	sbci	r21, 0xFF	; 255
    3546:	82 2f       	mov	r24, r18
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	80 78       	andi	r24, 0x80	; 128
    354c:	90 70       	andi	r25, 0x00	; 0
    354e:	bc 01       	movw	r22, r24
    3550:	04 2e       	mov	r0, r20
    3552:	02 c0       	rjmp	.+4      	; 0x3558 <sysex_encode+0x86>
    3554:	75 95       	asr	r23
    3556:	67 95       	ror	r22
    3558:	0a 94       	dec	r0
    355a:	e2 f7       	brpl	.-8      	; 0x3554 <sysex_encode+0x82>
    355c:	ad 81       	ldd	r26, Y+5	; 0x05
    355e:	be 81       	ldd	r27, Y+6	; 0x06
    3560:	8c 91       	ld	r24, X
    3562:	86 2b       	or	r24, r22
    3564:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3566:	2f 77       	andi	r18, 0x7F	; 127
    3568:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    356a:	47 30       	cpi	r20, 0x07	; 7
    356c:	51 05       	cpc	r21, r1
    356e:	21 f7       	brne	.-56     	; 0x3538 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3570:	08 94       	sec
    3572:	c1 1c       	adc	r12, r1
    3574:	d1 1c       	adc	r13, r1
    3576:	08 5f       	subi	r16, 0xF8	; 248
    3578:	1f 4f       	sbci	r17, 0xFF	; 255
    357a:	e7 e0       	ldi	r30, 0x07	; 7
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	ee 0e       	add	r14, r30
    3580:	ff 1e       	adc	r15, r31
    3582:	ca 14       	cp	r12, r10
    3584:	db 04       	cpc	r13, r11
    3586:	89 f6       	brne	.-94     	; 0x352a <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3588:	c3 01       	movw	r24, r6
    358a:	67 e0       	ldi	r22, 0x07	; 7
    358c:	70 e0       	ldi	r23, 0x00	; 0
    358e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__udivmodhi4>
   if (remainder) {
    3592:	88 23       	and	r24, r24
    3594:	d9 f1       	breq	.+118    	; 0x360c <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3596:	82 01       	movw	r16, r4
    3598:	00 0f       	add	r16, r16
    359a:	11 1f       	adc	r17, r17
    359c:	00 0f       	add	r16, r16
    359e:	11 1f       	adc	r17, r17
    35a0:	00 0f       	add	r16, r16
    35a2:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    35a4:	78 01       	movw	r14, r16
    35a6:	e4 18       	sub	r14, r4
    35a8:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    35aa:	d1 01       	movw	r26, r2
    35ac:	a0 0f       	add	r26, r16
    35ae:	b1 1f       	adc	r27, r17
    35b0:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    35b2:	68 2f       	mov	r22, r24
    35b4:	70 e0       	ldi	r23, 0x00	; 0
    35b6:	61 15       	cp	r22, r1
    35b8:	71 05       	cpc	r23, r1
    35ba:	19 f1       	breq	.+70     	; 0x3602 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    35bc:	e9 81       	ldd	r30, Y+1	; 0x01
    35be:	fa 81       	ldd	r31, Y+2	; 0x02
    35c0:	ee 0e       	add	r14, r30
    35c2:	ff 1e       	adc	r15, r31
    35c4:	c8 01       	movw	r24, r16
    35c6:	01 96       	adiw	r24, 0x01	; 1
    35c8:	28 0e       	add	r2, r24
    35ca:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    35d0:	f7 01       	movw	r30, r14
    35d2:	41 91       	ld	r20, Z+
    35d4:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    35d6:	2f 5f       	subi	r18, 0xFF	; 255
    35d8:	3f 4f       	sbci	r19, 0xFF	; 255
    35da:	84 2f       	mov	r24, r20
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	80 78       	andi	r24, 0x80	; 128
    35e0:	90 70       	andi	r25, 0x00	; 0
    35e2:	02 2e       	mov	r0, r18
    35e4:	02 c0       	rjmp	.+4      	; 0x35ea <sysex_encode+0x118>
    35e6:	95 95       	asr	r25
    35e8:	87 95       	ror	r24
    35ea:	0a 94       	dec	r0
    35ec:	e2 f7       	brpl	.-8      	; 0x35e6 <sysex_encode+0x114>
    35ee:	9c 91       	ld	r25, X
    35f0:	89 2b       	or	r24, r25
    35f2:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    35f4:	4f 77       	andi	r20, 0x7F	; 127
    35f6:	f1 01       	movw	r30, r2
    35f8:	41 93       	st	Z+, r20
    35fa:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    35fc:	26 17       	cp	r18, r22
    35fe:	37 07       	cpc	r19, r23
    3600:	38 f3       	brcs	.-50     	; 0x35d0 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3602:	c8 01       	movw	r24, r16
    3604:	01 96       	adiw	r24, 0x01	; 1
    3606:	86 0f       	add	r24, r22
    3608:	97 1f       	adc	r25, r23
    360a:	07 c0       	rjmp	.+14     	; 0x361a <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    360c:	c2 01       	movw	r24, r4
    360e:	88 0f       	add	r24, r24
    3610:	99 1f       	adc	r25, r25
    3612:	88 0f       	add	r24, r24
    3614:	99 1f       	adc	r25, r25
    3616:	88 0f       	add	r24, r24
    3618:	99 1f       	adc	r25, r25
   }
}
    361a:	26 96       	adiw	r28, 0x06	; 6
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	df 91       	pop	r29
    3628:	cf 91       	pop	r28
    362a:	1f 91       	pop	r17
    362c:	0f 91       	pop	r16
    362e:	ff 90       	pop	r15
    3630:	ef 90       	pop	r14
    3632:	df 90       	pop	r13
    3634:	cf 90       	pop	r12
    3636:	bf 90       	pop	r11
    3638:	af 90       	pop	r10
    363a:	9f 90       	pop	r9
    363c:	8f 90       	pop	r8
    363e:	7f 90       	pop	r7
    3640:	6f 90       	pop	r6
    3642:	5f 90       	pop	r5
    3644:	4f 90       	pop	r4
    3646:	3f 90       	pop	r3
    3648:	2f 90       	pop	r2
    364a:	08 95       	ret

0000364c <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    364c:	6f 92       	push	r6
    364e:	7f 92       	push	r7
    3650:	8f 92       	push	r8
    3652:	9f 92       	push	r9
    3654:	af 92       	push	r10
    3656:	bf 92       	push	r11
    3658:	cf 92       	push	r12
    365a:	df 92       	push	r13
    365c:	ef 92       	push	r14
    365e:	ff 92       	push	r15
    3660:	0f 93       	push	r16
    3662:	1f 93       	push	r17
    3664:	cf 93       	push	r28
    3666:	df 93       	push	r29
    3668:	3c 01       	movw	r6, r24
    366a:	4b 01       	movw	r8, r22
    366c:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    366e:	42 30       	cpi	r20, 0x02	; 2
    3670:	51 05       	cpc	r21, r1
    3672:	08 f4       	brcc	.+2      	; 0x3676 <sysex_decode+0x2a>
    3674:	6f c0       	rjmp	.+222    	; 0x3754 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3676:	7a 01       	movw	r14, r20
    3678:	f6 94       	lsr	r15
    367a:	e7 94       	ror	r14
    367c:	f6 94       	lsr	r15
    367e:	e7 94       	ror	r14
    3680:	f6 94       	lsr	r15
    3682:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3684:	e1 14       	cp	r14, r1
    3686:	f1 04       	cpc	r15, r1
    3688:	29 f1       	breq	.+74     	; 0x36d4 <sysex_decode+0x88>
    368a:	eb 01       	movw	r28, r22
    368c:	b3 01       	movw	r22, r6
    368e:	00 e0       	ldi	r16, 0x00	; 0
    3690:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3692:	cc 24       	eor	r12, r12
    3694:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3696:	de 01       	movw	r26, r28
    3698:	11 96       	adiw	r26, 0x01	; 1
    369a:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    369c:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    369e:	2d 91       	ld	r18, X+
    36a0:	2f 77       	andi	r18, 0x7F	; 127
    36a2:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    36a4:	4f 5f       	subi	r20, 0xFF	; 255
    36a6:	5f 4f       	sbci	r21, 0xFF	; 255
    36a8:	88 81       	ld	r24, Y
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	04 2e       	mov	r0, r20
    36ae:	02 c0       	rjmp	.+4      	; 0x36b4 <sysex_decode+0x68>
    36b0:	88 0f       	add	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	0a 94       	dec	r0
    36b6:	e2 f7       	brpl	.-8      	; 0x36b0 <sysex_decode+0x64>
    36b8:	80 78       	andi	r24, 0x80	; 128
    36ba:	28 2b       	or	r18, r24
    36bc:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    36be:	47 30       	cpi	r20, 0x07	; 7
    36c0:	51 05       	cpc	r21, r1
    36c2:	69 f7       	brne	.-38     	; 0x369e <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    36c4:	0f 5f       	subi	r16, 0xFF	; 255
    36c6:	1f 4f       	sbci	r17, 0xFF	; 255
    36c8:	28 96       	adiw	r28, 0x08	; 8
    36ca:	69 5f       	subi	r22, 0xF9	; 249
    36cc:	7f 4f       	sbci	r23, 0xFF	; 255
    36ce:	0e 15       	cp	r16, r14
    36d0:	1f 05       	cpc	r17, r15
    36d2:	09 f7       	brne	.-62     	; 0x3696 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    36d4:	5a 2d       	mov	r21, r10
    36d6:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    36d8:	99 f1       	breq	.+102    	; 0x3740 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    36da:	e7 01       	movw	r28, r14
    36dc:	cc 0f       	add	r28, r28
    36de:	dd 1f       	adc	r29, r29
    36e0:	cc 0f       	add	r28, r28
    36e2:	dd 1f       	adc	r29, r29
    36e4:	cc 0f       	add	r28, r28
    36e6:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    36e8:	8e 01       	movw	r16, r28
    36ea:	0e 19       	sub	r16, r14
    36ec:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    36ee:	65 2f       	mov	r22, r21
    36f0:	70 e0       	ldi	r23, 0x00	; 0
    36f2:	61 50       	subi	r22, 0x01	; 1
    36f4:	70 40       	sbci	r23, 0x00	; 0
    36f6:	f9 f0       	breq	.+62     	; 0x3736 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    36f8:	ce 01       	movw	r24, r28
    36fa:	01 96       	adiw	r24, 0x01	; 1
    36fc:	d4 01       	movw	r26, r8
    36fe:	a8 0f       	add	r26, r24
    3700:	b9 1f       	adc	r27, r25
    3702:	f3 01       	movw	r30, r6
    3704:	e0 0f       	add	r30, r16
    3706:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    370c:	c8 0d       	add	r28, r8
    370e:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3710:	4d 91       	ld	r20, X+
    3712:	4f 77       	andi	r20, 0x7F	; 127
    3714:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3716:	2f 5f       	subi	r18, 0xFF	; 255
    3718:	3f 4f       	sbci	r19, 0xFF	; 255
    371a:	88 81       	ld	r24, Y
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	02 2e       	mov	r0, r18
    3720:	02 c0       	rjmp	.+4      	; 0x3726 <sysex_decode+0xda>
    3722:	88 0f       	add	r24, r24
    3724:	99 1f       	adc	r25, r25
    3726:	0a 94       	dec	r0
    3728:	e2 f7       	brpl	.-8      	; 0x3722 <sysex_decode+0xd6>
    372a:	80 78       	andi	r24, 0x80	; 128
    372c:	48 2b       	or	r20, r24
    372e:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3730:	26 17       	cp	r18, r22
    3732:	37 07       	cpc	r19, r23
    3734:	68 f3       	brcs	.-38     	; 0x3710 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3736:	c8 01       	movw	r24, r16
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	85 0f       	add	r24, r21
    373c:	91 1d       	adc	r25, r1
    373e:	0c c0       	rjmp	.+24     	; 0x3758 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3740:	c7 01       	movw	r24, r14
    3742:	88 0f       	add	r24, r24
    3744:	99 1f       	adc	r25, r25
    3746:	88 0f       	add	r24, r24
    3748:	99 1f       	adc	r25, r25
    374a:	88 0f       	add	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	8e 19       	sub	r24, r14
    3750:	9f 09       	sbc	r25, r15
    3752:	02 c0       	rjmp	.+4      	; 0x3758 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3758:	df 91       	pop	r29
    375a:	cf 91       	pop	r28
    375c:	1f 91       	pop	r17
    375e:	0f 91       	pop	r16
    3760:	ff 90       	pop	r15
    3762:	ef 90       	pop	r14
    3764:	df 90       	pop	r13
    3766:	cf 90       	pop	r12
    3768:	bf 90       	pop	r11
    376a:	af 90       	pop	r10
    376c:	9f 90       	pop	r9
    376e:	8f 90       	pop	r8
    3770:	7f 90       	pop	r7
    3772:	6f 90       	pop	r6
    3774:	08 95       	ret

00003776 <__mulsi3>:
    3776:	62 9f       	mul	r22, r18
    3778:	d0 01       	movw	r26, r0
    377a:	73 9f       	mul	r23, r19
    377c:	f0 01       	movw	r30, r0
    377e:	82 9f       	mul	r24, r18
    3780:	e0 0d       	add	r30, r0
    3782:	f1 1d       	adc	r31, r1
    3784:	64 9f       	mul	r22, r20
    3786:	e0 0d       	add	r30, r0
    3788:	f1 1d       	adc	r31, r1
    378a:	92 9f       	mul	r25, r18
    378c:	f0 0d       	add	r31, r0
    378e:	83 9f       	mul	r24, r19
    3790:	f0 0d       	add	r31, r0
    3792:	74 9f       	mul	r23, r20
    3794:	f0 0d       	add	r31, r0
    3796:	65 9f       	mul	r22, r21
    3798:	f0 0d       	add	r31, r0
    379a:	99 27       	eor	r25, r25
    379c:	72 9f       	mul	r23, r18
    379e:	b0 0d       	add	r27, r0
    37a0:	e1 1d       	adc	r30, r1
    37a2:	f9 1f       	adc	r31, r25
    37a4:	63 9f       	mul	r22, r19
    37a6:	b0 0d       	add	r27, r0
    37a8:	e1 1d       	adc	r30, r1
    37aa:	f9 1f       	adc	r31, r25
    37ac:	bd 01       	movw	r22, r26
    37ae:	cf 01       	movw	r24, r30
    37b0:	11 24       	eor	r1, r1
    37b2:	08 95       	ret

000037b4 <__udivmodhi4>:
    37b4:	aa 1b       	sub	r26, r26
    37b6:	bb 1b       	sub	r27, r27
    37b8:	51 e1       	ldi	r21, 0x11	; 17
    37ba:	07 c0       	rjmp	.+14     	; 0x37ca <__udivmodhi4_ep>

000037bc <__udivmodhi4_loop>:
    37bc:	aa 1f       	adc	r26, r26
    37be:	bb 1f       	adc	r27, r27
    37c0:	a6 17       	cp	r26, r22
    37c2:	b7 07       	cpc	r27, r23
    37c4:	10 f0       	brcs	.+4      	; 0x37ca <__udivmodhi4_ep>
    37c6:	a6 1b       	sub	r26, r22
    37c8:	b7 0b       	sbc	r27, r23

000037ca <__udivmodhi4_ep>:
    37ca:	88 1f       	adc	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	5a 95       	dec	r21
    37d0:	a9 f7       	brne	.-22     	; 0x37bc <__udivmodhi4_loop>
    37d2:	80 95       	com	r24
    37d4:	90 95       	com	r25
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	08 95       	ret

000037dc <__divmodhi4>:
    37dc:	97 fb       	bst	r25, 7
    37de:	09 2e       	mov	r0, r25
    37e0:	07 26       	eor	r0, r23
    37e2:	0a d0       	rcall	.+20     	; 0x37f8 <__divmodhi4_neg1>
    37e4:	77 fd       	sbrc	r23, 7
    37e6:	04 d0       	rcall	.+8      	; 0x37f0 <__divmodhi4_neg2>
    37e8:	e5 df       	rcall	.-54     	; 0x37b4 <__udivmodhi4>
    37ea:	06 d0       	rcall	.+12     	; 0x37f8 <__divmodhi4_neg1>
    37ec:	00 20       	and	r0, r0
    37ee:	1a f4       	brpl	.+6      	; 0x37f6 <__divmodhi4_exit>

000037f0 <__divmodhi4_neg2>:
    37f0:	70 95       	com	r23
    37f2:	61 95       	neg	r22
    37f4:	7f 4f       	sbci	r23, 0xFF	; 255

000037f6 <__divmodhi4_exit>:
    37f6:	08 95       	ret

000037f8 <__divmodhi4_neg1>:
    37f8:	f6 f7       	brtc	.-4      	; 0x37f6 <__divmodhi4_exit>
    37fa:	90 95       	com	r25
    37fc:	81 95       	neg	r24
    37fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3800:	08 95       	ret

00003802 <memcpy>:
    3802:	fb 01       	movw	r30, r22
    3804:	dc 01       	movw	r26, r24
    3806:	02 c0       	rjmp	.+4      	; 0x380c <memcpy+0xa>
    3808:	01 90       	ld	r0, Z+
    380a:	0d 92       	st	X+, r0
    380c:	41 50       	subi	r20, 0x01	; 1
    380e:	50 40       	sbci	r21, 0x00	; 0
    3810:	d8 f7       	brcc	.-10     	; 0x3808 <memcpy+0x6>
    3812:	08 95       	ret

00003814 <memmove>:
    3814:	68 17       	cp	r22, r24
    3816:	79 07       	cpc	r23, r25
    3818:	68 f4       	brcc	.+26     	; 0x3834 <memmove+0x20>
    381a:	fb 01       	movw	r30, r22
    381c:	dc 01       	movw	r26, r24
    381e:	e4 0f       	add	r30, r20
    3820:	f5 1f       	adc	r31, r21
    3822:	a4 0f       	add	r26, r20
    3824:	b5 1f       	adc	r27, r21
    3826:	02 c0       	rjmp	.+4      	; 0x382c <memmove+0x18>
    3828:	02 90       	ld	r0, -Z
    382a:	0e 92       	st	-X, r0
    382c:	41 50       	subi	r20, 0x01	; 1
    382e:	50 40       	sbci	r21, 0x00	; 0
    3830:	d8 f7       	brcc	.-10     	; 0x3828 <memmove+0x14>
    3832:	08 95       	ret
    3834:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <memcpy>

00003838 <__eerd_block_m6450a>:
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22

0000383c <__eerd_blraw_m6450a>:
    383c:	fc 01       	movw	r30, r24
    383e:	f9 99       	sbic	0x1f, 1	; 31
    3840:	fe cf       	rjmp	.-4      	; 0x383e <__eerd_blraw_m6450a+0x2>
    3842:	06 c0       	rjmp	.+12     	; 0x3850 <__eerd_blraw_m6450a+0x14>
    3844:	f2 bd       	out	0x22, r31	; 34
    3846:	e1 bd       	out	0x21, r30	; 33
    3848:	f8 9a       	sbi	0x1f, 0	; 31
    384a:	31 96       	adiw	r30, 0x01	; 1
    384c:	00 b4       	in	r0, 0x20	; 32
    384e:	0d 92       	st	X+, r0
    3850:	41 50       	subi	r20, 0x01	; 1
    3852:	50 40       	sbci	r21, 0x00	; 0
    3854:	b8 f7       	brcc	.-18     	; 0x3844 <__eerd_blraw_m6450a+0x8>
    3856:	08 95       	ret

00003858 <__eerd_word_m6450a>:
    3858:	a8 e1       	ldi	r26, 0x18	; 24
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	42 e0       	ldi	r20, 0x02	; 2
    385e:	50 e0       	ldi	r21, 0x00	; 0
    3860:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__eerd_blraw_m6450a>

00003864 <__eeupd_block_m6450a>:
    3864:	dc 01       	movw	r26, r24
    3866:	a4 0f       	add	r26, r20
    3868:	b5 1f       	adc	r27, r21
    386a:	41 50       	subi	r20, 0x01	; 1
    386c:	50 40       	sbci	r21, 0x00	; 0
    386e:	48 f0       	brcs	.+18     	; 0x3882 <__eeupd_block_m6450a+0x1e>
    3870:	cb 01       	movw	r24, r22
    3872:	84 0f       	add	r24, r20
    3874:	95 1f       	adc	r25, r21
    3876:	2e 91       	ld	r18, -X
    3878:	0e 94 43 1c 	call	0x3886	; 0x3886 <__eeupd_r18_m6450a>
    387c:	41 50       	subi	r20, 0x01	; 1
    387e:	50 40       	sbci	r21, 0x00	; 0
    3880:	d0 f7       	brcc	.-12     	; 0x3876 <__eeupd_block_m6450a+0x12>
    3882:	08 95       	ret

00003884 <__eeupd_byte_m6450a>:
    3884:	26 2f       	mov	r18, r22

00003886 <__eeupd_r18_m6450a>:
    3886:	f9 99       	sbic	0x1f, 1	; 31
    3888:	fe cf       	rjmp	.-4      	; 0x3886 <__eeupd_r18_m6450a>
    388a:	92 bd       	out	0x22, r25	; 34
    388c:	81 bd       	out	0x21, r24	; 33
    388e:	f8 9a       	sbi	0x1f, 0	; 31
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	00 b4       	in	r0, 0x20	; 32
    3894:	02 16       	cp	r0, r18
    3896:	31 f0       	breq	.+12     	; 0x38a4 <__eeupd_r18_m6450a+0x1e>
    3898:	20 bd       	out	0x20, r18	; 32
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	f8 94       	cli
    389e:	fa 9a       	sbi	0x1f, 2	; 31
    38a0:	f9 9a       	sbi	0x1f, 1	; 31
    38a2:	0f be       	out	0x3f, r0	; 63
    38a4:	08 95       	ret

000038a6 <__eeupd_word_m6450a>:
    38a6:	01 96       	adiw	r24, 0x01	; 1
    38a8:	27 2f       	mov	r18, r23
    38aa:	0e 94 43 1c 	call	0x3886	; 0x3886 <__eeupd_r18_m6450a>
    38ae:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__eeupd_byte_m6450a>

000038b2 <_exit>:
    38b2:	f8 94       	cli

000038b4 <__stop_program>:
    38b4:	ff cf       	rjmp	.-2      	; 0x38b4 <__stop_program>
