
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a0  00800100  0000349c  00003550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000349c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f5  008002a0  008002a0  000036f0  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  000036f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00003d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00004c98  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005746  00000000  00000000  00004f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001505  00000000  00000000  0000a69e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d94  00000000  00000000  0000bba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c04  00000000  00000000  0000d938  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000017a5  00000000  00000000  0000e53c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002b22  00000000  00000000  0000fce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00012803  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_9>
      28:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ec e9       	ldi	r30, 0x9C	; 156
      78:	f4 e3       	ldi	r31, 0x34	; 52
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 ea       	ldi	r26, 0xA0	; 160
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a5 39       	cpi	r26, 0x95	; 149
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <main>
      9a:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 a0 02 	lds	r24, 0x02A0
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 fd 19 	call	0x33fa	; 0x33fa <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 a0 02 	sts	0x02A0, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 fd 19 	call	0x33fa	; 0x33fa <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 a0 02 	sts	0x02A0, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 a0 02 	sts	0x02A0, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1f6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1f8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1fa:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1fe:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     200:	8c 91       	ld	r24, X
     202:	87 70       	andi	r24, 0x07	; 7
     204:	82 b9       	out	0x02, r24	; 2
     206:	66 e0       	ldi	r22, 0x06	; 6
     208:	6a 95       	dec	r22
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x12>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     20e:	ea ed       	ldi	r30, 0xDA	; 218
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	40 81       	ld	r20, Z
     214:	8c 91       	ld	r24, X
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	86 95       	lsr	r24
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	b9 01       	movw	r22, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <set_control_voltage+0x34>
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <set_control_voltage+0x30>
     22e:	cb 01       	movw	r24, r22
     230:	84 2b       	or	r24, r20
     232:	80 83       	st	Z, r24
     234:	76 e0       	ldi	r23, 0x06	; 6
     236:	7a 95       	dec	r23
     238:	f1 f7       	brne	.-4      	; 0x236 <set_control_voltage+0x40>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     23c:	80 81       	ld	r24, Z
     23e:	9c 91       	ld	r25, X
     240:	96 95       	lsr	r25
     242:	96 95       	lsr	r25
     244:	96 95       	lsr	r25
     246:	97 70       	andi	r25, 0x07	; 7
     248:	02 c0       	rjmp	.+4      	; 0x24e <set_control_voltage+0x58>
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	9a 95       	dec	r25
     250:	e2 f7       	brpl	.-8      	; 0x24a <set_control_voltage+0x54>
     252:	20 95       	com	r18
     254:	28 23       	and	r18, r24
     256:	20 83       	st	Z, r18
	
}	
     258:	08 95       	ret

0000025a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     25a:	83 b3       	in	r24, 0x13	; 19
     25c:	83 60       	ori	r24, 0x03	; 3
     25e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     264:	97 b1       	in	r25, 0x07	; 7
     266:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     268:	e9 ed       	ldi	r30, 0xD9	; 217
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     272:	ea ed       	ldi	r30, 0xDA	; 218
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     27c:	84 b3       	in	r24, 0x14	; 20
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     282:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     284:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     286:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     288:	a0 9a       	sbi	0x14, 0	; 20
}
     28a:	08 95       	ret

0000028c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t place)
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2e 97       	sbiw	r28, 0x0e	; 14
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ac 01       	movw	r20, r24
	
	uint8_t digit[] = {
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	8a 83       	std	Y+2, r24	; 0x02
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	8b 83       	std	Y+3, r24	; 0x03
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	8c 83       	std	Y+4, r24	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2b6:	de 01       	movw	r26, r28
     2b8:	15 96       	adiw	r26, 0x05	; 5
     2ba:	e7 ee       	ldi	r30, 0xE7	; 231
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <display_dec+0x34>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2cc:	ea ed       	ldi	r30, 0xDA	; 218
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d6:	80 81       	ld	r24, Z
     2d8:	8f 7e       	andi	r24, 0xEF	; 239
     2da:	80 83       	st	Z, r24
	
	//set anode bit
	DATA_BUS = digit[place];
     2dc:	06 2f       	mov	r16, r22
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	de 01       	movw	r26, r28
     2e2:	a0 0f       	add	r26, r16
     2e4:	b1 1f       	adc	r27, r17
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	8c 91       	ld	r24, X
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	82 b9       	out	0x02, r24	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2ee:	80 81       	ld	r24, Z
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	80 83       	st	Z, r24
	//if (number > 999) {
	//number = 999;
	//}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     2fa:	ca 01       	movw	r24, r20
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	9a 01       	movw	r18, r20
     306:	36 95       	lsr	r19
     308:	27 95       	ror	r18
     30a:	28 0f       	add	r18, r24
     30c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     30e:	c9 01       	movw	r24, r18
     310:	92 95       	swap	r25
     312:	82 95       	swap	r24
     314:	8f 70       	andi	r24, 0x0F	; 15
     316:	89 27       	eor	r24, r25
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	89 27       	eor	r24, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     320:	29 2f       	mov	r18, r25
     322:	33 27       	eor	r19, r19
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
	r = number - q2 * 10;
     334:	28 2f       	mov	r18, r24
     336:	22 0f       	add	r18, r18
     338:	32 2f       	mov	r19, r18
     33a:	33 0f       	add	r19, r19
     33c:	33 0f       	add	r19, r19
     33e:	23 0f       	add	r18, r19
     340:	e4 2f       	mov	r30, r20
     342:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	ea 30       	cpi	r30, 0x0A	; 10
     34a:	10 f4       	brcc	.+4      	; 0x350 <display_dec+0xc4>
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	68 0f       	add	r22, r24
     352:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     354:	9b 01       	movw	r18, r22
     356:	36 95       	lsr	r19
     358:	27 95       	ror	r18
     35a:	36 95       	lsr	r19
     35c:	27 95       	ror	r18
     35e:	ab 01       	movw	r20, r22
     360:	56 95       	lsr	r21
     362:	47 95       	ror	r20
     364:	24 0f       	add	r18, r20
     366:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     368:	c9 01       	movw	r24, r18
     36a:	92 95       	swap	r25
     36c:	82 95       	swap	r24
     36e:	8f 70       	andi	r24, 0x0F	; 15
     370:	89 27       	eor	r24, r25
     372:	9f 70       	andi	r25, 0x0F	; 15
     374:	89 27       	eor	r24, r25
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     37a:	29 2f       	mov	r18, r25
     37c:	33 27       	eor	r19, r19
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
	r = qa - q3 * 10;
     38e:	98 2f       	mov	r25, r24
     390:	99 0f       	add	r25, r25
     392:	29 2f       	mov	r18, r25
     394:	22 0f       	add	r18, r18
     396:	22 0f       	add	r18, r18
     398:	92 0f       	add	r25, r18
     39a:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	6a 30       	cpi	r22, 0x0A	; 10
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <display_dec+0x118>
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3a6:	41 ef       	ldi	r20, 0xF1	; 241
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	da 01       	movw	r26, r20
     3ac:	a6 0f       	add	r26, r22
     3ae:	b1 1d       	adc	r27, r1
     3b0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3b2:	28 2f       	mov	r18, r24
     3b4:	26 95       	lsr	r18
     3b6:	26 95       	lsr	r18
     3b8:	98 2f       	mov	r25, r24
     3ba:	96 95       	lsr	r25
     3bc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3be:	29 2f       	mov	r18, r25
     3c0:	22 95       	swap	r18
     3c2:	2f 70       	andi	r18, 0x0F	; 15
     3c4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 0f       	add	r18, r18
     3d0:	62 2f       	mov	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	66 0f       	add	r22, r22
     3d6:	26 0f       	add	r18, r22
     3d8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3da:	da 01       	movw	r26, r20
     3dc:	a8 0f       	add	r26, r24
     3de:	b1 1d       	adc	r27, r1
     3e0:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3e2:	4e 0f       	add	r20, r30
     3e4:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3e6:	fa 01       	movw	r30, r20
     3e8:	40 81       	ld	r20, Z
     3ea:	40 93 a3 02 	sts	0x02A3, r20
	digit_index[1] = tens_place;
     3ee:	30 93 a4 02 	sts	0x02A4, r19
	digit_index[2] = hunds_place;
     3f2:	20 93 a5 02 	sts	0x02A5, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	8a 30       	cpi	r24, 0x0A	; 10
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <display_dec+0x172>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     400:	90 93 a6 02 	sts	0x02A6, r25

	cathode_byte = dec[digit_index[place]];
     404:	f8 01       	movw	r30, r16
     406:	ed 55       	subi	r30, 0x5D	; 93
     408:	fd 4f       	sbci	r31, 0xFD	; 253
     40a:	80 81       	ld	r24, Z
     40c:	fe 01       	movw	r30, r28
     40e:	e8 0f       	add	r30, r24
     410:	f1 1d       	adc	r31, r1
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     412:	85 81       	ldd	r24, Z+5	; 0x05
     414:	80 95       	com	r24
     416:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     418:	ea ed       	ldi	r30, 0xDA	; 218
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     422:	80 81       	ld	r24, Z
     424:	8f 7e       	andi	r24, 0xEF	; 239
     426:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     428:	2e 96       	adiw	r28, 0x0e	; 14
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret

0000043e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     43e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     440:	66 23       	and	r22, r22
     442:	69 f4       	brne	.+26     	; 0x45e <update_display+0x20>

		
			
		display_dec(number, place);
     444:	c0 91 a7 02 	lds	r28, 0x02A7
     448:	6c 2f       	mov	r22, r28
     44a:	0e 94 46 01 	call	0x28c	; 0x28c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     44e:	8c 2f       	mov	r24, r28
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	80 93 a7 02 	sts	0x02A7, r24
     456:	c3 30       	cpi	r28, 0x03	; 3
     458:	11 f4       	brne	.+4      	; 0x45e <update_display+0x20>
		{
			place = 0;
     45a:	10 92 a7 02 	sts	0x02A7, r1
		
		
	}
	
	
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	8f 93       	push	r24
     46e:	9f 93       	push	r25
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     474:	80 91 a2 03 	lds	r24, 0x03A2
     478:	81 50       	subi	r24, 0x01	; 1
     47a:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     47c:	80 91 a3 03 	lds	r24, 0x03A3
     480:	88 23       	and	r24, r24
     482:	a1 f4       	brne	.+40     	; 0x4ac <__vector_10+0x4a>
		count_finished = FALSE;
     484:	10 92 a0 03 	sts	0x03A0, r1
		no_overflow = TRUE;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 9f 02 	sts	0x029F, r24
		period_counter = 1; //set period counter to 1
     48e:	80 93 a3 03 	sts	0x03A3, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     492:	e1 e8       	ldi	r30, 0x81	; 129
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	90 91 a1 03 	lds	r25, 0x03A1
     49c:	89 2b       	or	r24, r25
     49e:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4a0:	ef e6       	ldi	r30, 0x6F	; 111
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	81 60       	ori	r24, 0x01	; 1
     4a8:	80 83       	st	Z, r24
     4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4ac:	e4 e8       	ldi	r30, 0x84	; 132
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	90 93 9f 03 	sts	0x039F, r25
     4b8:	80 93 9e 03 	sts	0x039E, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4bc:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 a0 03 	sts	0x03A0, r24
		period_counter = 0;
     4c6:	10 92 a3 03 	sts	0x03A3, r1
		TCNT1 = 0; //reset timer/counter 1
     4ca:	11 82       	std	Z+1, r1	; 0x01
     4cc:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	9f 91       	pop	r25
     4d4:	8f 91       	pop	r24
     4d6:	0f 90       	pop	r0
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	0f 90       	pop	r0
     4dc:	1f 90       	pop	r1
     4de:	18 95       	reti

000004e0 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     4ea:	10 92 9f 02 	sts	0x029F, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     4f8:	84 2f       	mov	r24, r20
	remove_note(note);
     4fa:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     4fe:	80 91 a9 02 	lds	r24, 0x02A9
     502:	81 50       	subi	r24, 0x01	; 1
     504:	80 93 a9 02 	sts	0x02A9, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     508:	88 23       	and	r24, r24
     50a:	09 f4       	brne	.+2      	; 0x50e <note_off_event+0x16>
     50c:	89 98       	cbi	0x11, 1	; 17
     50e:	08 95       	ret

00000510 <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     510:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     512:	40 93 e8 02 	sts	0x02E8, r20
	if (velocity == 0) {
     516:	22 23       	and	r18, r18
     518:	59 f4       	brne	.+22     	; 0x530 <note_on_event+0x20>
		remove_note(note);
     51a:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     51e:	80 91 a9 02 	lds	r24, 0x02A9
     522:	81 50       	subi	r24, 0x01	; 1
     524:	80 93 a9 02 	sts	0x02A9, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     528:	88 23       	and	r24, r24
     52a:	59 f4       	brne	.+22     	; 0x542 <note_on_event+0x32>
     52c:	89 98       	cbi	0x11, 1	; 17
     52e:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     530:	62 2f       	mov	r22, r18
     532:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     536:	80 91 a9 02 	lds	r24, 0x02A9
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 93 a9 02 	sts	0x02A9, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     540:	89 9a       	sbi	0x11, 1	; 17
     542:	08 95       	ret

00000544 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     544:	87 e2       	ldi	r24, 0x27	; 39
     546:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     54a:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     54e:	88 e9       	ldi	r24, 0x98	; 152
     550:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     554:	08 95       	ret

00000556 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	3f 93       	push	r19
     564:	4f 93       	push	r20
     566:	5f 93       	push	r21
     568:	6f 93       	push	r22
     56a:	7f 93       	push	r23
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
     570:	af 93       	push	r26
     572:	bf 93       	push	r27
     574:	ef 93       	push	r30
     576:	ff 93       	push	r31
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	0f 92       	push	r0
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     582:	80 91 c6 00 	lds	r24, 0x00C6
     586:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     588:	88 ea       	ldi	r24, 0xA8	; 168
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	ae 01       	movw	r20, r28
     590:	4f 5f       	subi	r20, 0xFF	; 255
     592:	5f 4f       	sbci	r21, 0xFF	; 255
     594:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	ff 91       	pop	r31
     5a0:	ef 91       	pop	r30
     5a2:	bf 91       	pop	r27
     5a4:	af 91       	pop	r26
     5a6:	9f 91       	pop	r25
     5a8:	8f 91       	pop	r24
     5aa:	7f 91       	pop	r23
     5ac:	6f 91       	pop	r22
     5ae:	5f 91       	pop	r21
     5b0:	4f 91       	pop	r20
     5b2:	3f 91       	pop	r19
     5b4:	2f 91       	pop	r18
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     5c0:	c0 e8       	ldi	r28, 0x80	; 128
     5c2:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     5c4:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     5c6:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     5c8:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     5ca:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     5cc:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     5ce:	0e 94 b1 05 	call	0xb62	; 0xb62 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     5d2:	a9 ed       	ldi	r26, 0xD9	; 217
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	8c 91       	ld	r24, X
     5d8:	80 6c       	ori	r24, 0xC0	; 192
     5da:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     5dc:	ea ed       	ldi	r30, 0xDA	; 218
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 6c       	ori	r24, 0xC0	; 192
     5e4:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     5e6:	81 b1       	in	r24, 0x01	; 1
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     5ec:	92 b1       	in	r25, 0x02	; 2
     5ee:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     5f0:	8c 91       	ld	r24, X
     5f2:	80 63       	ori	r24, 0x30	; 48
     5f4:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     5f6:	80 81       	ld	r24, Z
     5f8:	8f 7c       	andi	r24, 0xCF	; 207
     5fa:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     5fc:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     5fe:	ec ed       	ldi	r30, 0xDC	; 220
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	80 62       	ori	r24, 0x20	; 32
     606:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     608:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     60a:	ed ed       	ldi	r30, 0xDD	; 221
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	80 62       	ori	r24, 0x20	; 32
     612:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     614:	80 81       	ld	r24, Z
     616:	8f 7d       	andi	r24, 0xDF	; 223
     618:	80 83       	st	Z, r24
	DATA_BUS = 0;
     61a:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     61c:	c0 93 2c 03 	sts	0x032C, r28
	
	//setup ADC
    setup_adc();		
     620:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     624:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     628:	c8 ea       	ldi	r28, 0xA8	; 168
     62a:	d3 e0       	ldi	r29, 0x03	; 3
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 79 15 	call	0x2af2	; 0x2af2 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     632:	ce 01       	movw	r24, r28
     634:	68 e8       	ldi	r22, 0x88	; 136
     636:	72 e0       	ldi	r23, 0x02	; 2
     638:	0e 94 41 15 	call	0x2a82	; 0x2a82 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     63c:	ce 01       	movw	r24, r28
     63e:	6c e7       	ldi	r22, 0x7C	; 124
     640:	72 e0       	ldi	r23, 0x02	; 2
     642:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     646:	0e 94 a2 02 	call	0x544	; 0x544 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     64a:	0e 94 d6 05 	call	0xbac	; 0xbac <update_spi>
	
	
	current_patch.number = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 30 03 	sts	0x0330, r24
		
	sei(); //enable global interrupts
     654:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     656:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
     65a:	81 e4       	ldi	r24, 0x41	; 65
     65c:	80 93 a4 03 	sts	0x03A4, r24
	current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
     660:	82 e2       	ldi	r24, 0x22	; 34
     662:	80 93 2e 03 	sts	0x032E, r24
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     666:	8e 01       	movw	r16, r28
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     668:	0f 2e       	mov	r0, r31
     66a:	f6 ea       	ldi	r31, 0xA6	; 166
     66c:	ef 2e       	mov	r14, r31
     66e:	f3 e0       	ldi	r31, 0x03	; 3
     670:	ff 2e       	mov	r15, r31
     672:	f0 2d       	mov	r31, r0
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     674:	c8 01       	movw	r24, r16
     676:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     67a:	80 91 fd 01 	lds	r24, 0x01FD
     67e:	90 91 fe 01 	lds	r25, 0x01FE
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     688:	0e 94 5e 03 	call	0x6bc	; 0x6bc <scan_pots>
		update_control_voltages();
     68c:	0e 94 c4 03 	call	0x788	; 0x788 <update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     690:	80 91 a8 02 	lds	r24, 0x02A8
     694:	98 2f       	mov	r25, r24
     696:	9f 5f       	subi	r25, 0xFF	; 255
     698:	90 93 a8 02 	sts	0x02A8, r25
     69c:	85 30       	cpi	r24, 0x05	; 5
     69e:	51 f7       	brne	.-44     	; 0x674 <main+0xb4>
		{
			switch_timer = 0;
     6a0:	10 92 a8 02 	sts	0x02A8, r1
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     6a4:	f7 01       	movw	r30, r14
     6a6:	c0 81       	ld	r28, Z
     6a8:	0e 94 82 12 	call	0x2504	; 0x2504 <read_switch_port>
     6ac:	8c 27       	eor	r24, r28
     6ae:	f7 01       	movw	r30, r14
     6b0:	80 83       	st	Z, r24
			update_spi();
     6b2:	0e 94 d6 05 	call	0xbac	; 0xbac <update_spi>
			refresh_synth();
     6b6:	0e 94 8f 0b 	call	0x171e	; 0x171e <refresh_synth>
     6ba:	dc cf       	rjmp	.-72     	; 0x674 <main+0xb4>

000006bc <scan_pots>:
	//&release_2_cv,
	//&release_1_cv
	//}; 
	
	
void scan_pots(void) { //should probably move this to adc.c
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	c0 e0       	ldi	r28, 0x00	; 0
     6ce:	d1 e0       	ldi	r29, 0x01	; 1
     6d0:	0f ee       	ldi	r16, 0xEF	; 239
     6d2:	12 e0       	ldi	r17, 0x02	; 2
     6d4:	0f 2e       	mov	r0, r31
     6d6:	fc e3       	ldi	r31, 0x3C	; 60
     6d8:	cf 2e       	mov	r12, r31
     6da:	dd 24       	eor	r13, r13
     6dc:	f0 2d       	mov	r31, r0
     6de:	cc 0e       	add	r12, r28
     6e0:	dd 1e       	adc	r13, r29
     6e2:	7e 01       	movw	r14, r28
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     6e4:	88 81       	ld	r24, Y
     6e6:	99 81       	ldd	r25, Y+1	; 0x01
     6e8:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     6ec:	90 93 ea 02 	sts	0x02EA, r25
     6f0:	80 93 e9 02 	sts	0x02E9, r24
		adc_change = adc_value - pot_id[i]->value;
     6f4:	e9 91       	ld	r30, Y+
     6f6:	f9 91       	ld	r31, Y+
     6f8:	40 81       	ld	r20, Z
     6fa:	21 81       	ldd	r18, Z+1	; 0x01
     6fc:	52 2f       	mov	r21, r18
     6fe:	53 70       	andi	r21, 0x03	; 3
     700:	84 1b       	sub	r24, r20
     702:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     704:	95 95       	asr	r25
     706:	87 95       	ror	r24
     708:	95 95       	asr	r25
     70a:	87 95       	ror	r24
     70c:	84 0f       	add	r24, r20
     70e:	95 1f       	adc	r25, r21
     710:	80 83       	st	Z, r24
     712:	89 2f       	mov	r24, r25
     714:	83 70       	andi	r24, 0x03	; 3
     716:	2c 7f       	andi	r18, 0xFC	; 252
     718:	28 2b       	or	r18, r24
     71a:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		//otherwise, the pot value is assigned to it's corresponding parameter in the current_patch struct:
		*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     71c:	d7 01       	movw	r26, r14
     71e:	ed 91       	ld	r30, X+
     720:	fc 91       	ld	r31, X
     722:	11 97       	sbiw	r26, 0x01	; 1
     724:	90 81       	ld	r25, Z
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	83 70       	andi	r24, 0x03	; 3
     72a:	f8 01       	movw	r30, r16
     72c:	90 83       	st	Z, r25
     72e:	81 83       	std	Z+1, r24	; 0x01
     730:	0e 5f       	subi	r16, 0xFE	; 254
     732:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     734:	cc 15       	cp	r28, r12
     736:	dd 05       	cpc	r29, r13
     738:	a1 f6       	brne	.-88     	; 0x6e2 <scan_pots+0x26>
		*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     73a:	8c e7       	ldi	r24, 0x7C	; 124
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     742:	90 93 ea 02 	sts	0x02EA, r25
     746:	80 93 e9 02 	sts	0x02E9, r24
	adc_change = adc_value - volume_pot.value;
     74a:	20 91 7c 01 	lds	r18, 0x017C
     74e:	40 91 7d 01 	lds	r20, 0x017D
     752:	34 2f       	mov	r19, r20
     754:	33 70       	andi	r19, 0x03	; 3
     756:	82 1b       	sub	r24, r18
     758:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     75a:	95 95       	asr	r25
     75c:	87 95       	ror	r24
     75e:	95 95       	asr	r25
     760:	87 95       	ror	r24
     762:	28 0f       	add	r18, r24
     764:	39 1f       	adc	r19, r25
     766:	20 93 7c 01 	sts	0x017C, r18
     76a:	83 2f       	mov	r24, r19
     76c:	83 70       	andi	r24, 0x03	; 3
     76e:	4c 7f       	andi	r20, 0xFC	; 252
     770:	48 2b       	or	r20, r24
     772:	40 93 7d 01 	sts	0x017D, r20
	
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	08 95       	ret

00000788 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     78c:	60 91 ef 02 	lds	r22, 0x02EF
     790:	70 91 f0 02 	lds	r23, 0x02F0
     794:	62 95       	swap	r22
     796:	72 95       	swap	r23
     798:	70 7f       	andi	r23, 0xF0	; 240
     79a:	76 27       	eor	r23, r22
     79c:	60 7f       	andi	r22, 0xF0	; 240
     79e:	76 27       	eor	r23, r22
     7a0:	84 ee       	ldi	r24, 0xE4	; 228
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     7a8:	60 91 f1 02 	lds	r22, 0x02F1
     7ac:	70 91 f2 02 	lds	r23, 0x02F2
     7b0:	62 95       	swap	r22
     7b2:	72 95       	swap	r23
     7b4:	70 7f       	andi	r23, 0xF0	; 240
     7b6:	76 27       	eor	r23, r22
     7b8:	60 7f       	andi	r22, 0xF0	; 240
     7ba:	76 27       	eor	r23, r22
     7bc:	83 ee       	ldi	r24, 0xE3	; 227
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     7c4:	60 91 f3 02 	lds	r22, 0x02F3
     7c8:	70 91 f4 02 	lds	r23, 0x02F4
     7cc:	66 0f       	add	r22, r22
     7ce:	77 1f       	adc	r23, r23
     7d0:	66 0f       	add	r22, r22
     7d2:	77 1f       	adc	r23, r23
     7d4:	66 0f       	add	r22, r22
     7d6:	77 1f       	adc	r23, r23
     7d8:	82 ee       	ldi	r24, 0xE2	; 226
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     7e0:	60 91 f5 02 	lds	r22, 0x02F5
     7e4:	70 91 f6 02 	lds	r23, 0x02F6
     7e8:	62 95       	swap	r22
     7ea:	72 95       	swap	r23
     7ec:	70 7f       	andi	r23, 0xF0	; 240
     7ee:	76 27       	eor	r23, r22
     7f0:	60 7f       	andi	r22, 0xF0	; 240
     7f2:	76 27       	eor	r23, r22
     7f4:	82 ea       	ldi	r24, 0xA2	; 162
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     7fc:	60 91 f7 02 	lds	r22, 0x02F7
     800:	70 91 f8 02 	lds	r23, 0x02F8
     804:	66 0f       	add	r22, r22
     806:	77 1f       	adc	r23, r23
     808:	66 0f       	add	r22, r22
     80a:	77 1f       	adc	r23, r23
     80c:	66 0f       	add	r22, r22
     80e:	77 1f       	adc	r23, r23
     810:	81 ee       	ldi	r24, 0xE1	; 225
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     818:	60 91 f9 02 	lds	r22, 0x02F9
     81c:	70 91 fa 02 	lds	r23, 0x02FA
     820:	62 95       	swap	r22
     822:	72 95       	swap	r23
     824:	70 7f       	andi	r23, 0xF0	; 240
     826:	76 27       	eor	r23, r22
     828:	60 7f       	andi	r22, 0xF0	; 240
     82a:	76 27       	eor	r23, r22
     82c:	80 ee       	ldi	r24, 0xE0	; 224
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     834:	60 91 fb 02 	lds	r22, 0x02FB
     838:	70 91 fc 02 	lds	r23, 0x02FC
     83c:	62 95       	swap	r22
     83e:	72 95       	swap	r23
     840:	70 7f       	andi	r23, 0xF0	; 240
     842:	76 27       	eor	r23, r22
     844:	60 7f       	andi	r22, 0xF0	; 240
     846:	76 27       	eor	r23, r22
     848:	8f ed       	ldi	r24, 0xDF	; 223
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     850:	60 91 fd 02 	lds	r22, 0x02FD
     854:	70 91 fe 02 	lds	r23, 0x02FE
     858:	62 95       	swap	r22
     85a:	72 95       	swap	r23
     85c:	70 7f       	andi	r23, 0xF0	; 240
     85e:	76 27       	eor	r23, r22
     860:	60 7f       	andi	r22, 0xF0	; 240
     862:	76 27       	eor	r23, r22
     864:	8e ed       	ldi	r24, 0xDE	; 222
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     86c:	80 91 01 03 	lds	r24, 0x0301
     870:	90 91 02 03 	lds	r25, 0x0302
     874:	c0 e0       	ldi	r28, 0x00	; 0
     876:	d2 e0       	ldi	r29, 0x02	; 2
     878:	c8 1b       	sub	r28, r24
     87a:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     87c:	60 91 99 03 	lds	r22, 0x0399
     880:	70 91 9a 03 	lds	r23, 0x039A
     884:	60 50       	subi	r22, 0x00	; 0
     886:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     888:	80 91 ff 02 	lds	r24, 0x02FF
     88c:	90 91 00 03 	lds	r25, 0x0300
     890:	68 1b       	sub	r22, r24
     892:	79 0b       	sbc	r23, r25
     894:	6c 0f       	add	r22, r28
     896:	7d 1f       	adc	r23, r29
     898:	8d ed       	ldi	r24, 0xDD	; 221
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     8a0:	60 91 9b 03 	lds	r22, 0x039B
     8a4:	70 91 9c 03 	lds	r23, 0x039C
     8a8:	6c 0f       	add	r22, r28
     8aa:	7d 1f       	adc	r23, r29
     8ac:	8c ed       	ldi	r24, 0xDC	; 220
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     8b4:	60 91 03 03 	lds	r22, 0x0303
     8b8:	70 91 04 03 	lds	r23, 0x0304
     8bc:	62 95       	swap	r22
     8be:	72 95       	swap	r23
     8c0:	70 7f       	andi	r23, 0xF0	; 240
     8c2:	76 27       	eor	r23, r22
     8c4:	60 7f       	andi	r22, 0xF0	; 240
     8c6:	76 27       	eor	r23, r22
     8c8:	8b ed       	ldi	r24, 0xDB	; 219
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     8d0:	60 91 07 03 	lds	r22, 0x0307
     8d4:	70 91 08 03 	lds	r23, 0x0308
     8d8:	62 95       	swap	r22
     8da:	72 95       	swap	r23
     8dc:	70 7f       	andi	r23, 0xF0	; 240
     8de:	76 27       	eor	r23, r22
     8e0:	60 7f       	andi	r22, 0xF0	; 240
     8e2:	76 27       	eor	r23, r22
     8e4:	8a ed       	ldi	r24, 0xDA	; 218
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     8ec:	60 91 09 03 	lds	r22, 0x0309
     8f0:	70 91 0a 03 	lds	r23, 0x030A
     8f4:	62 95       	swap	r22
     8f6:	72 95       	swap	r23
     8f8:	70 7f       	andi	r23, 0xF0	; 240
     8fa:	76 27       	eor	r23, r22
     8fc:	60 7f       	andi	r22, 0xF0	; 240
     8fe:	76 27       	eor	r23, r22
     900:	89 ed       	ldi	r24, 0xD9	; 217
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     908:	60 91 7c 01 	lds	r22, 0x017C
     90c:	80 91 7d 01 	lds	r24, 0x017D
     910:	78 2f       	mov	r23, r24
     912:	73 70       	andi	r23, 0x03	; 3
     914:	62 95       	swap	r22
     916:	72 95       	swap	r23
     918:	70 7f       	andi	r23, 0xF0	; 240
     91a:	76 27       	eor	r23, r22
     91c:	60 7f       	andi	r22, 0xF0	; 240
     91e:	76 27       	eor	r23, r22
     920:	88 ed       	ldi	r24, 0xD8	; 216
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     928:	60 91 0b 03 	lds	r22, 0x030B
     92c:	70 91 0c 03 	lds	r23, 0x030C
     930:	62 95       	swap	r22
     932:	72 95       	swap	r23
     934:	70 7f       	andi	r23, 0xF0	; 240
     936:	76 27       	eor	r23, r22
     938:	60 7f       	andi	r22, 0xF0	; 240
     93a:	76 27       	eor	r23, r22
     93c:	87 ed       	ldi	r24, 0xD7	; 215
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     944:	60 91 0d 03 	lds	r22, 0x030D
     948:	70 91 0e 03 	lds	r23, 0x030E
     94c:	62 95       	swap	r22
     94e:	72 95       	swap	r23
     950:	70 7f       	andi	r23, 0xF0	; 240
     952:	76 27       	eor	r23, r22
     954:	60 7f       	andi	r22, 0xF0	; 240
     956:	76 27       	eor	r23, r22
     958:	86 ed       	ldi	r24, 0xD6	; 214
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     960:	60 91 0f 03 	lds	r22, 0x030F
     964:	70 91 10 03 	lds	r23, 0x0310
     968:	62 95       	swap	r22
     96a:	72 95       	swap	r23
     96c:	70 7f       	andi	r23, 0xF0	; 240
     96e:	76 27       	eor	r23, r22
     970:	60 7f       	andi	r22, 0xF0	; 240
     972:	76 27       	eor	r23, r22
     974:	85 ed       	ldi	r24, 0xD5	; 213
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     97c:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     980:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     982:	88 30       	cpi	r24, 0x08	; 8
     984:	08 f4       	brcc	.+2      	; 0x988 <update_control_voltages+0x200>
     986:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = note;
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     988:	8c 2f       	mov	r24, r28
     98a:	88 50       	subi	r24, 0x08	; 8
     98c:	65 e3       	ldi	r22, 0x35	; 53
     98e:	73 e0       	ldi	r23, 0x03	; 3
     990:	0e 94 24 12 	call	0x2448	; 0x2448 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     994:	bc 01       	movw	r22, r24
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	20 91 13 03 	lds	r18, 0x0313
     99e:	30 91 14 03 	lds	r19, 0x0314
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	0e 94 ae 19 	call	0x335c	; 0x335c <__mulsi3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	07 2e       	mov	r0, r23
     9b0:	7a e0       	ldi	r23, 0x0A	; 10
     9b2:	b6 95       	lsr	r27
     9b4:	a7 95       	ror	r26
     9b6:	97 95       	ror	r25
     9b8:	87 95       	ror	r24
     9ba:	7a 95       	dec	r23
     9bc:	d1 f7       	brne	.-12     	; 0x9b2 <update_control_voltages+0x22a>
     9be:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     9c0:	60 91 11 03 	lds	r22, 0x0311
     9c4:	70 91 12 03 	lds	r23, 0x0312
     9c8:	62 95       	swap	r22
     9ca:	72 95       	swap	r23
     9cc:	70 7f       	andi	r23, 0xF0	; 240
     9ce:	76 27       	eor	r23, r22
     9d0:	60 7f       	andi	r22, 0xF0	; 240
     9d2:	76 27       	eor	r23, r22
     9d4:	86 0f       	add	r24, r22
     9d6:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     9d8:	bc 01       	movw	r22, r24
     9da:	80 e4       	ldi	r24, 0x40	; 64
     9dc:	60 30       	cpi	r22, 0x00	; 0
     9de:	78 07       	cpc	r23, r24
     9e0:	10 f0       	brcs	.+4      	; 0x9e6 <update_control_voltages+0x25e>
     9e2:	6f ef       	ldi	r22, 0xFF	; 255
     9e4:	7f e3       	ldi	r23, 0x3F	; 63
     9e6:	84 ed       	ldi	r24, 0xD4	; 212
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     9ee:	60 91 15 03 	lds	r22, 0x0315
     9f2:	70 91 16 03 	lds	r23, 0x0316
     9f6:	62 95       	swap	r22
     9f8:	72 95       	swap	r23
     9fa:	70 7f       	andi	r23, 0xF0	; 240
     9fc:	76 27       	eor	r23, r22
     9fe:	60 7f       	andi	r22, 0xF0	; 240
     a00:	76 27       	eor	r23, r22
     a02:	82 ed       	ldi	r24, 0xD2	; 210
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     a0a:	60 91 17 03 	lds	r22, 0x0317
     a0e:	70 91 18 03 	lds	r23, 0x0318
     a12:	62 95       	swap	r22
     a14:	72 95       	swap	r23
     a16:	70 7f       	andi	r23, 0xF0	; 240
     a18:	76 27       	eor	r23, r22
     a1a:	60 7f       	andi	r22, 0xF0	; 240
     a1c:	76 27       	eor	r23, r22
     a1e:	81 ed       	ldi	r24, 0xD1	; 209
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     a26:	60 91 19 03 	lds	r22, 0x0319
     a2a:	70 91 1a 03 	lds	r23, 0x031A
     a2e:	62 95       	swap	r22
     a30:	72 95       	swap	r23
     a32:	70 7f       	andi	r23, 0xF0	; 240
     a34:	76 27       	eor	r23, r22
     a36:	60 7f       	andi	r22, 0xF0	; 240
     a38:	76 27       	eor	r23, r22
     a3a:	80 ed       	ldi	r24, 0xD0	; 208
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     a42:	60 91 1b 03 	lds	r22, 0x031B
     a46:	70 91 1c 03 	lds	r23, 0x031C
     a4a:	62 95       	swap	r22
     a4c:	72 95       	swap	r23
     a4e:	70 7f       	andi	r23, 0xF0	; 240
     a50:	76 27       	eor	r23, r22
     a52:	60 7f       	andi	r22, 0xF0	; 240
     a54:	76 27       	eor	r23, r22
     a56:	8f ec       	ldi	r24, 0xCF	; 207
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     a5e:	60 91 1d 03 	lds	r22, 0x031D
     a62:	70 91 1e 03 	lds	r23, 0x031E
     a66:	62 95       	swap	r22
     a68:	72 95       	swap	r23
     a6a:	70 7f       	andi	r23, 0xF0	; 240
     a6c:	76 27       	eor	r23, r22
     a6e:	60 7f       	andi	r22, 0xF0	; 240
     a70:	76 27       	eor	r23, r22
     a72:	8e ec       	ldi	r24, 0xCE	; 206
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     a7a:	60 91 1f 03 	lds	r22, 0x031F
     a7e:	70 91 20 03 	lds	r23, 0x0320
     a82:	62 95       	swap	r22
     a84:	72 95       	swap	r23
     a86:	70 7f       	andi	r23, 0xF0	; 240
     a88:	76 27       	eor	r23, r22
     a8a:	60 7f       	andi	r22, 0xF0	; 240
     a8c:	76 27       	eor	r23, r22
     a8e:	8d ec       	ldi	r24, 0xCD	; 205
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     a96:	60 91 21 03 	lds	r22, 0x0321
     a9a:	70 91 22 03 	lds	r23, 0x0322
     a9e:	62 95       	swap	r22
     aa0:	72 95       	swap	r23
     aa2:	70 7f       	andi	r23, 0xF0	; 240
     aa4:	76 27       	eor	r23, r22
     aa6:	60 7f       	andi	r22, 0xF0	; 240
     aa8:	76 27       	eor	r23, r22
     aaa:	8c ec       	ldi	r24, 0xCC	; 204
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     ab2:	60 91 25 03 	lds	r22, 0x0325
     ab6:	70 91 26 03 	lds	r23, 0x0326
     aba:	62 95       	swap	r22
     abc:	72 95       	swap	r23
     abe:	70 7f       	andi	r23, 0xF0	; 240
     ac0:	76 27       	eor	r23, r22
     ac2:	60 7f       	andi	r22, 0xF0	; 240
     ac4:	76 27       	eor	r23, r22
     ac6:	8a ec       	ldi	r24, 0xCA	; 202
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     ace:	60 91 23 03 	lds	r22, 0x0323
     ad2:	70 91 24 03 	lds	r23, 0x0324
     ad6:	62 95       	swap	r22
     ad8:	72 95       	swap	r23
     ada:	70 7f       	andi	r23, 0xF0	; 240
     adc:	76 27       	eor	r23, r22
     ade:	60 7f       	andi	r22, 0xF0	; 240
     ae0:	76 27       	eor	r23, r22
     ae2:	8b ec       	ldi	r24, 0xCB	; 203
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     aea:	60 91 29 03 	lds	r22, 0x0329
     aee:	70 91 2a 03 	lds	r23, 0x032A
     af2:	62 95       	swap	r22
     af4:	72 95       	swap	r23
     af6:	70 7f       	andi	r23, 0xF0	; 240
     af8:	76 27       	eor	r23, r22
     afa:	60 7f       	andi	r22, 0xF0	; 240
     afc:	76 27       	eor	r23, r22
     afe:	88 ec       	ldi	r24, 0xC8	; 200
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     b06:	60 91 27 03 	lds	r22, 0x0327
     b0a:	70 91 28 03 	lds	r23, 0x0328
     b0e:	62 95       	swap	r22
     b10:	72 95       	swap	r23
     b12:	70 7f       	andi	r23, 0xF0	; 240
     b14:	76 27       	eor	r23, r22
     b16:	60 7f       	andi	r22, 0xF0	; 240
     b18:	76 27       	eor	r23, r22
     b1a:	89 ec       	ldi	r24, 0xC9	; 201
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     b22:	8c 2f       	mov	r24, r28
     b24:	6f e0       	ldi	r22, 0x0F	; 15
     b26:	0e 94 ae 0a 	call	0x155c	; 0x155c <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     b2a:	67 e7       	ldi	r22, 0x77	; 119
     b2c:	73 e0       	ldi	r23, 0x03	; 3
     b2e:	0e 94 24 12 	call	0x2448	; 0x2448 <interpolate_pitch_cv>
     b32:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     b34:	86 ee       	ldi	r24, 0xE6	; 230
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     b3c:	8c 2f       	mov	r24, r28
     b3e:	60 ef       	ldi	r22, 0xF0	; 240
     b40:	0e 94 ae 0a 	call	0x155c	; 0x155c <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     b44:	65 e5       	ldi	r22, 0x55	; 85
     b46:	73 e0       	ldi	r23, 0x03	; 3
     b48:	0e 94 24 12 	call	0x2448	; 0x2448 <interpolate_pitch_cv>
     b4c:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     b4e:	85 ee       	ldi	r24, 0xE5	; 229
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     b56:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     b58:	a1 9a       	sbi	0x14, 1	; 20
}			
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <scan_pots_and_update_control_voltages>:
	//
//	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
//	DAC_CTRL |= (1<<DAC_RS);	
	
	
     b60:	08 95       	ret

00000b62 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     b62:	84 b1       	in	r24, 0x04	; 4
     b64:	87 62       	ori	r24, 0x27	; 39
     b66:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     b68:	ec ed       	ldi	r30, 0xDC	; 220
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8c 65       	ori	r24, 0x5C	; 92
     b70:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     b72:	85 b1       	in	r24, 0x05	; 5
     b74:	89 7d       	andi	r24, 0xD9	; 217
     b76:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     b78:	ed ed       	ldi	r30, 0xDD	; 221
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	83 7f       	andi	r24, 0xF3	; 243
     b80:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     b82:	80 e5       	ldi	r24, 0x50	; 80
     b84:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     b86:	80 81       	ld	r24, Z
     b88:	87 7f       	andi	r24, 0xF7	; 247
     b8a:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     b8c:	80 81       	ld	r24, Z
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     b92:	80 81       	ld	r24, Z
     b94:	88 60       	ori	r24, 0x08	; 8
     b96:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     b98:	80 81       	ld	r24, Z
     b9a:	8f 7e       	andi	r24, 0xEF	; 239
     b9c:	80 83       	st	Z, r24
	
}
     b9e:	08 95       	ret

00000ba0 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     ba0:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     ba2:	0d b4       	in	r0, 0x2d	; 45
     ba4:	07 fe       	sbrs	r0, 7
     ba6:	fd cf       	rjmp	.-6      	; 0xba2 <spi_shift_byte+0x2>
	return SPDR;
     ba8:	8e b5       	in	r24, 0x2e	; 46
	
}
     baa:	08 95       	ret

00000bac <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     bac:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     bae:	80 91 2f 03 	lds	r24, 0x032F
     bb2:	0e 94 d0 05 	call	0xba0	; 0xba0 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     bb6:	90 91 ed 02 	lds	r25, 0x02ED
     bba:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     bbc:	98 27       	eor	r25, r24
     bbe:	90 93 ed 02 	sts	0x02ED, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     bc2:	98 23       	and	r25, r24
     bc4:	90 93 ee 02 	sts	0x02EE, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     bc8:	80 91 a4 03 	lds	r24, 0x03A4
     bcc:	98 27       	eor	r25, r24
     bce:	90 93 a4 03 	sts	0x03A4, r25
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     bd2:	80 91 2e 03 	lds	r24, 0x032E
     bd6:	0e 94 d0 05 	call	0xba0	; 0xba0 <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     bda:	90 91 eb 02 	lds	r25, 0x02EB
     bde:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     be0:	98 27       	eor	r25, r24
     be2:	90 93 eb 02 	sts	0x02EB, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     be6:	98 23       	and	r25, r24
     be8:	90 93 ec 02 	sts	0x02EC, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     bec:	80 91 a5 03 	lds	r24, 0x03A5
     bf0:	98 27       	eor	r25, r24
     bf2:	90 93 a5 03 	sts	0x03A5, r25
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     bf6:	80 91 2d 03 	lds	r24, 0x032D
     bfa:	0e 94 d0 05 	call	0xba0	; 0xba0 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     bfe:	80 91 2c 03 	lds	r24, 0x032C
     c02:	0e 94 d0 05 	call	0xba0	; 0xba0 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     c06:	90 91 a6 03 	lds	r25, 0x03A6
     c0a:	29 2f       	mov	r18, r25
     c0c:	22 95       	swap	r18
     c0e:	2f 70       	andi	r18, 0x0F	; 15
     c10:	27 95       	ror	r18
     c12:	22 27       	eor	r18, r18
     c14:	27 95       	ror	r18

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     c16:	89 2f       	mov	r24, r25
     c18:	86 95       	lsr	r24
     c1a:	86 95       	lsr	r24
     c1c:	86 95       	lsr	r24
     c1e:	81 70       	andi	r24, 0x01	; 1
     c20:	82 2b       	or	r24, r18
     c22:	40 91 a5 03 	lds	r20, 0x03A5
     c26:	42 95       	swap	r20
     c28:	46 95       	lsr	r20
     c2a:	47 70       	andi	r20, 0x07	; 7
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	41 70       	andi	r20, 0x01	; 1
     c30:	50 70       	andi	r21, 0x00	; 0
     c32:	9a 01       	movw	r18, r20
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	28 2b       	or	r18, r24
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     c3e:	99 1f       	adc	r25, r25
     c40:	99 27       	eor	r25, r25
     c42:	99 1f       	adc	r25, r25
     c44:	89 2f       	mov	r24, r25
     c46:	82 95       	swap	r24
     c48:	88 0f       	add	r24, r24
     c4a:	88 0f       	add	r24, r24
     c4c:	80 7c       	andi	r24, 0xC0	; 192
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     c4e:	82 2b       	or	r24, r18
     c50:	0e 94 d0 05 	call	0xba0	; 0xba0 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     c54:	ed ed       	ldi	r30, 0xDD	; 221
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	87 7f       	andi	r24, 0xF7	; 247
     c5c:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     c5e:	80 81       	ld	r24, Z
     c60:	88 60       	ori	r24, 0x08	; 8
     c62:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     c64:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     c66:	08 95       	ret

00000c68 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     c68:	a0 e0       	ldi	r26, 0x00	; 0
     c6a:	b1 e0       	ldi	r27, 0x01	; 1
     c6c:	9d 01       	movw	r18, r26
     c6e:	24 5c       	subi	r18, 0xC4	; 196
     c70:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= 29; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     c72:	ed 91       	ld	r30, X+
     c74:	fc 91       	ld	r31, X
     c76:	11 97       	sbiw	r26, 0x01	; 1
     c78:	80 81       	ld	r24, Z
     c7a:	41 81       	ldd	r20, Z+1	; 0x01
     c7c:	94 2f       	mov	r25, r20
     c7e:	93 70       	andi	r25, 0x03	; 3
     c80:	95 95       	asr	r25
     c82:	87 95       	ror	r24
     c84:	95 95       	asr	r25
     c86:	87 95       	ror	r24
     c88:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     c8a:	ed 91       	ld	r30, X+
     c8c:	fd 91       	ld	r31, X+
     c8e:	83 81       	ldd	r24, Z+3	; 0x03
     c90:	80 68       	ori	r24, 0x80	; 128
     c92:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= 29; i++) {
     c94:	a2 17       	cp	r26, r18
     c96:	b3 07       	cpc	r27, r19
     c98:	61 f7       	brne	.-40     	; 0xc72 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}		
     c9a:	08 95       	ret

00000c9c <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	ab 97       	sbiw	r28, 0x2b	; 43
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     cb4:	eb e0       	ldi	r30, 0x0B	; 11
     cb6:	f3 e0       	ldi	r31, 0x03	; 3
     cb8:	20 91 0b 03 	lds	r18, 0x030B
     cbc:	82 2f       	mov	r24, r18
     cbe:	82 95       	swap	r24
     cc0:	80 7f       	andi	r24, 0xF0	; 240
     cc2:	22 95       	swap	r18
     cc4:	2f 70       	andi	r18, 0x0F	; 15
     cc6:	90 91 0c 03 	lds	r25, 0x030C
     cca:	93 70       	andi	r25, 0x03	; 3
     ccc:	92 95       	swap	r25
     cce:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     cd0:	df 01       	movw	r26, r30
     cd2:	5a 97       	sbiw	r26, 0x1a	; 26
     cd4:	3c 91       	ld	r19, X
     cd6:	53 2f       	mov	r21, r19
     cd8:	55 0f       	add	r21, r21
     cda:	55 0f       	add	r21, r21
     cdc:	4a 81       	ldd	r20, Y+2	; 0x02
     cde:	43 70       	andi	r20, 0x03	; 3
     ce0:	45 2b       	or	r20, r21
     ce2:	4a 83       	std	Y+2, r20	; 0x02
     ce4:	63 2f       	mov	r22, r19
     ce6:	62 95       	swap	r22
     ce8:	66 95       	lsr	r22
     cea:	66 95       	lsr	r22
     cec:	63 70       	andi	r22, 0x03	; 3
     cee:	11 96       	adiw	r26, 0x01	; 1
     cf0:	4c 91       	ld	r20, X
     cf2:	43 70       	andi	r20, 0x03	; 3
     cf4:	44 0f       	add	r20, r20
     cf6:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     cf8:	df 01       	movw	r26, r30
     cfa:	58 97       	sbiw	r26, 0x18	; 24
     cfc:	3c 91       	ld	r19, X
     cfe:	53 2f       	mov	r21, r19
     d00:	52 95       	swap	r21
     d02:	50 7f       	andi	r21, 0xF0	; 240
     d04:	46 2b       	or	r20, r22
     d06:	45 2b       	or	r20, r21
     d08:	4b 83       	std	Y+3, r20	; 0x03
     d0a:	63 2f       	mov	r22, r19
     d0c:	62 95       	swap	r22
     d0e:	6f 70       	andi	r22, 0x0F	; 15
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	4c 91       	ld	r20, X
     d14:	43 70       	andi	r20, 0x03	; 3
     d16:	42 95       	swap	r20
     d18:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     d1a:	df 01       	movw	r26, r30
     d1c:	56 97       	sbiw	r26, 0x16	; 22
     d1e:	3c 91       	ld	r19, X
     d20:	53 2f       	mov	r21, r19
     d22:	52 95       	swap	r21
     d24:	55 0f       	add	r21, r21
     d26:	55 0f       	add	r21, r21
     d28:	50 7c       	andi	r21, 0xC0	; 192
     d2a:	46 2b       	or	r20, r22
     d2c:	45 2b       	or	r20, r21
     d2e:	4c 83       	std	Y+4, r20	; 0x04
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	4c 91       	ld	r20, X
     d34:	42 95       	swap	r20
     d36:	44 0f       	add	r20, r20
     d38:	44 0f       	add	r20, r20
     d3a:	40 7c       	andi	r20, 0xC0	; 192
     d3c:	36 95       	lsr	r19
     d3e:	36 95       	lsr	r19
     d40:	34 2b       	or	r19, r20
     d42:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     d44:	df 01       	movw	r26, r30
     d46:	54 97       	sbiw	r26, 0x14	; 20
     d48:	3c 91       	ld	r19, X
     d4a:	3e 83       	std	Y+6, r19	; 0x06
     d4c:	11 96       	adiw	r26, 0x01	; 1
     d4e:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     d50:	df 01       	movw	r26, r30
     d52:	52 97       	sbiw	r26, 0x12	; 18
     d54:	3c 91       	ld	r19, X
     d56:	53 2f       	mov	r21, r19
     d58:	55 0f       	add	r21, r21
     d5a:	55 0f       	add	r21, r21
     d5c:	43 70       	andi	r20, 0x03	; 3
     d5e:	45 2b       	or	r20, r21
     d60:	4f 83       	std	Y+7, r20	; 0x07
     d62:	63 2f       	mov	r22, r19
     d64:	62 95       	swap	r22
     d66:	66 95       	lsr	r22
     d68:	66 95       	lsr	r22
     d6a:	63 70       	andi	r22, 0x03	; 3
     d6c:	11 96       	adiw	r26, 0x01	; 1
     d6e:	4c 91       	ld	r20, X
     d70:	43 70       	andi	r20, 0x03	; 3
     d72:	44 0f       	add	r20, r20
     d74:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     d76:	df 01       	movw	r26, r30
     d78:	50 97       	sbiw	r26, 0x10	; 16
     d7a:	3c 91       	ld	r19, X
     d7c:	53 2f       	mov	r21, r19
     d7e:	52 95       	swap	r21
     d80:	50 7f       	andi	r21, 0xF0	; 240
     d82:	46 2b       	or	r20, r22
     d84:	45 2b       	or	r20, r21
     d86:	48 87       	std	Y+8, r20	; 0x08
     d88:	63 2f       	mov	r22, r19
     d8a:	62 95       	swap	r22
     d8c:	6f 70       	andi	r22, 0x0F	; 15
     d8e:	11 96       	adiw	r26, 0x01	; 1
     d90:	4c 91       	ld	r20, X
     d92:	43 70       	andi	r20, 0x03	; 3
     d94:	42 95       	swap	r20
     d96:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     d98:	df 01       	movw	r26, r30
     d9a:	1e 97       	sbiw	r26, 0x0e	; 14
     d9c:	3c 91       	ld	r19, X
     d9e:	53 2f       	mov	r21, r19
     da0:	52 95       	swap	r21
     da2:	55 0f       	add	r21, r21
     da4:	55 0f       	add	r21, r21
     da6:	50 7c       	andi	r21, 0xC0	; 192
     da8:	46 2b       	or	r20, r22
     daa:	45 2b       	or	r20, r21
     dac:	49 87       	std	Y+9, r20	; 0x09
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	4c 91       	ld	r20, X
     db2:	42 95       	swap	r20
     db4:	44 0f       	add	r20, r20
     db6:	44 0f       	add	r20, r20
     db8:	40 7c       	andi	r20, 0xC0	; 192
     dba:	36 95       	lsr	r19
     dbc:	36 95       	lsr	r19
     dbe:	34 2b       	or	r19, r20
     dc0:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     dc2:	df 01       	movw	r26, r30
     dc4:	1c 97       	sbiw	r26, 0x0c	; 12
     dc6:	3c 91       	ld	r19, X
     dc8:	3b 87       	std	Y+11, r19	; 0x0b
     dca:	11 96       	adiw	r26, 0x01	; 1
     dcc:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     dce:	df 01       	movw	r26, r30
     dd0:	1a 97       	sbiw	r26, 0x0a	; 10
     dd2:	3c 91       	ld	r19, X
     dd4:	53 2f       	mov	r21, r19
     dd6:	55 0f       	add	r21, r21
     dd8:	55 0f       	add	r21, r21
     dda:	43 70       	andi	r20, 0x03	; 3
     ddc:	45 2b       	or	r20, r21
     dde:	4c 87       	std	Y+12, r20	; 0x0c
     de0:	63 2f       	mov	r22, r19
     de2:	62 95       	swap	r22
     de4:	66 95       	lsr	r22
     de6:	66 95       	lsr	r22
     de8:	63 70       	andi	r22, 0x03	; 3
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	4c 91       	ld	r20, X
     dee:	43 70       	andi	r20, 0x03	; 3
     df0:	44 0f       	add	r20, r20
     df2:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
     df4:	df 01       	movw	r26, r30
     df6:	18 97       	sbiw	r26, 0x08	; 8
     df8:	3c 91       	ld	r19, X
     dfa:	53 2f       	mov	r21, r19
     dfc:	52 95       	swap	r21
     dfe:	50 7f       	andi	r21, 0xF0	; 240
     e00:	46 2b       	or	r20, r22
     e02:	45 2b       	or	r20, r21
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	63 2f       	mov	r22, r19
     e08:	62 95       	swap	r22
     e0a:	6f 70       	andi	r22, 0x0F	; 15
     e0c:	11 96       	adiw	r26, 0x01	; 1
     e0e:	4c 91       	ld	r20, X
     e10:	43 70       	andi	r20, 0x03	; 3
     e12:	42 95       	swap	r20
     e14:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
     e16:	df 01       	movw	r26, r30
     e18:	16 97       	sbiw	r26, 0x06	; 6
     e1a:	3c 91       	ld	r19, X
     e1c:	53 2f       	mov	r21, r19
     e1e:	52 95       	swap	r21
     e20:	55 0f       	add	r21, r21
     e22:	55 0f       	add	r21, r21
     e24:	50 7c       	andi	r21, 0xC0	; 192
     e26:	46 2b       	or	r20, r22
     e28:	45 2b       	or	r20, r21
     e2a:	4e 87       	std	Y+14, r20	; 0x0e
     e2c:	11 96       	adiw	r26, 0x01	; 1
     e2e:	4c 91       	ld	r20, X
     e30:	42 95       	swap	r20
     e32:	44 0f       	add	r20, r20
     e34:	44 0f       	add	r20, r20
     e36:	40 7c       	andi	r20, 0xC0	; 192
     e38:	36 95       	lsr	r19
     e3a:	36 95       	lsr	r19
     e3c:	34 2b       	or	r19, r20
     e3e:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
     e40:	df 01       	movw	r26, r30
     e42:	14 97       	sbiw	r26, 0x04	; 4
     e44:	3c 91       	ld	r19, X
     e46:	38 8b       	std	Y+16, r19	; 0x10
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
     e4c:	df 01       	movw	r26, r30
     e4e:	12 97       	sbiw	r26, 0x02	; 2
     e50:	3c 91       	ld	r19, X
     e52:	53 2f       	mov	r21, r19
     e54:	55 0f       	add	r21, r21
     e56:	55 0f       	add	r21, r21
     e58:	43 70       	andi	r20, 0x03	; 3
     e5a:	45 2b       	or	r20, r21
     e5c:	49 8b       	std	Y+17, r20	; 0x11
     e5e:	32 95       	swap	r19
     e60:	36 95       	lsr	r19
     e62:	36 95       	lsr	r19
     e64:	33 70       	andi	r19, 0x03	; 3
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	4c 91       	ld	r20, X
     e6a:	43 70       	andi	r20, 0x03	; 3
     e6c:	44 0f       	add	r20, r20
     e6e:	44 0f       	add	r20, r20
     e70:	83 2b       	or	r24, r19
     e72:	84 2b       	or	r24, r20
     e74:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
     e76:	80 91 0d 03 	lds	r24, 0x030D
     e7a:	38 2f       	mov	r19, r24
     e7c:	32 95       	swap	r19
     e7e:	33 0f       	add	r19, r19
     e80:	33 0f       	add	r19, r19
     e82:	30 7c       	andi	r19, 0xC0	; 192
     e84:	92 2b       	or	r25, r18
     e86:	93 2b       	or	r25, r19
     e88:	9b 8b       	std	Y+19, r25	; 0x13
     e8a:	93 81       	ldd	r25, Z+3	; 0x03
     e8c:	92 95       	swap	r25
     e8e:	99 0f       	add	r25, r25
     e90:	99 0f       	add	r25, r25
     e92:	90 7c       	andi	r25, 0xC0	; 192
     e94:	86 95       	lsr	r24
     e96:	86 95       	lsr	r24
     e98:	89 2b       	or	r24, r25
     e9a:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
     e9c:	80 91 0f 03 	lds	r24, 0x030F
     ea0:	8d 8b       	std	Y+21, r24	; 0x15
     ea2:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
     ea4:	80 91 11 03 	lds	r24, 0x0311
     ea8:	28 2f       	mov	r18, r24
     eaa:	22 0f       	add	r18, r18
     eac:	22 0f       	add	r18, r18
     eae:	93 70       	andi	r25, 0x03	; 3
     eb0:	92 2b       	or	r25, r18
     eb2:	9e 8b       	std	Y+22, r25	; 0x16
     eb4:	38 2f       	mov	r19, r24
     eb6:	32 95       	swap	r19
     eb8:	36 95       	lsr	r19
     eba:	36 95       	lsr	r19
     ebc:	33 70       	andi	r19, 0x03	; 3
     ebe:	97 81       	ldd	r25, Z+7	; 0x07
     ec0:	93 70       	andi	r25, 0x03	; 3
     ec2:	99 0f       	add	r25, r25
     ec4:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
     ec6:	80 91 13 03 	lds	r24, 0x0313
     eca:	28 2f       	mov	r18, r24
     ecc:	22 95       	swap	r18
     ece:	20 7f       	andi	r18, 0xF0	; 240
     ed0:	93 2b       	or	r25, r19
     ed2:	92 2b       	or	r25, r18
     ed4:	9f 8b       	std	Y+23, r25	; 0x17
     ed6:	38 2f       	mov	r19, r24
     ed8:	32 95       	swap	r19
     eda:	3f 70       	andi	r19, 0x0F	; 15
     edc:	91 85       	ldd	r25, Z+9	; 0x09
     ede:	93 70       	andi	r25, 0x03	; 3
     ee0:	92 95       	swap	r25
     ee2:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
     ee4:	80 91 15 03 	lds	r24, 0x0315
     ee8:	28 2f       	mov	r18, r24
     eea:	22 95       	swap	r18
     eec:	22 0f       	add	r18, r18
     eee:	22 0f       	add	r18, r18
     ef0:	20 7c       	andi	r18, 0xC0	; 192
     ef2:	93 2b       	or	r25, r19
     ef4:	92 2b       	or	r25, r18
     ef6:	98 8f       	std	Y+24, r25	; 0x18
     ef8:	93 85       	ldd	r25, Z+11	; 0x0b
     efa:	92 95       	swap	r25
     efc:	99 0f       	add	r25, r25
     efe:	99 0f       	add	r25, r25
     f00:	90 7c       	andi	r25, 0xC0	; 192
     f02:	86 95       	lsr	r24
     f04:	86 95       	lsr	r24
     f06:	89 2b       	or	r24, r25
     f08:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
     f0a:	80 91 17 03 	lds	r24, 0x0317
     f0e:	8a 8f       	std	Y+26, r24	; 0x1a
     f10:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
     f12:	80 91 19 03 	lds	r24, 0x0319
     f16:	28 2f       	mov	r18, r24
     f18:	22 0f       	add	r18, r18
     f1a:	22 0f       	add	r18, r18
     f1c:	93 70       	andi	r25, 0x03	; 3
     f1e:	92 2b       	or	r25, r18
     f20:	9b 8f       	std	Y+27, r25	; 0x1b
     f22:	38 2f       	mov	r19, r24
     f24:	32 95       	swap	r19
     f26:	36 95       	lsr	r19
     f28:	36 95       	lsr	r19
     f2a:	33 70       	andi	r19, 0x03	; 3
     f2c:	97 85       	ldd	r25, Z+15	; 0x0f
     f2e:	93 70       	andi	r25, 0x03	; 3
     f30:	99 0f       	add	r25, r25
     f32:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
     f34:	80 91 1b 03 	lds	r24, 0x031B
     f38:	28 2f       	mov	r18, r24
     f3a:	22 95       	swap	r18
     f3c:	20 7f       	andi	r18, 0xF0	; 240
     f3e:	93 2b       	or	r25, r19
     f40:	92 2b       	or	r25, r18
     f42:	9c 8f       	std	Y+28, r25	; 0x1c
     f44:	38 2f       	mov	r19, r24
     f46:	32 95       	swap	r19
     f48:	3f 70       	andi	r19, 0x0F	; 15
     f4a:	91 89       	ldd	r25, Z+17	; 0x11
     f4c:	93 70       	andi	r25, 0x03	; 3
     f4e:	92 95       	swap	r25
     f50:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
     f52:	80 91 1d 03 	lds	r24, 0x031D
     f56:	28 2f       	mov	r18, r24
     f58:	22 95       	swap	r18
     f5a:	22 0f       	add	r18, r18
     f5c:	22 0f       	add	r18, r18
     f5e:	20 7c       	andi	r18, 0xC0	; 192
     f60:	93 2b       	or	r25, r19
     f62:	92 2b       	or	r25, r18
     f64:	9d 8f       	std	Y+29, r25	; 0x1d
     f66:	93 89       	ldd	r25, Z+19	; 0x13
     f68:	92 95       	swap	r25
     f6a:	99 0f       	add	r25, r25
     f6c:	99 0f       	add	r25, r25
     f6e:	90 7c       	andi	r25, 0xC0	; 192
     f70:	86 95       	lsr	r24
     f72:	86 95       	lsr	r24
     f74:	89 2b       	or	r24, r25
     f76:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
     f78:	80 91 1f 03 	lds	r24, 0x031F
     f7c:	8f 8f       	std	Y+31, r24	; 0x1f
     f7e:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
     f80:	80 91 21 03 	lds	r24, 0x0321
     f84:	28 2f       	mov	r18, r24
     f86:	22 0f       	add	r18, r18
     f88:	22 0f       	add	r18, r18
     f8a:	93 70       	andi	r25, 0x03	; 3
     f8c:	92 2b       	or	r25, r18
     f8e:	98 a3       	lds	r25, 0x58
     f90:	38 2f       	mov	r19, r24
     f92:	32 95       	swap	r19
     f94:	36 95       	lsr	r19
     f96:	36 95       	lsr	r19
     f98:	33 70       	andi	r19, 0x03	; 3
     f9a:	97 89       	ldd	r25, Z+23	; 0x17
     f9c:	93 70       	andi	r25, 0x03	; 3
     f9e:	99 0f       	add	r25, r25
     fa0:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
     fa2:	80 91 23 03 	lds	r24, 0x0323
     fa6:	28 2f       	mov	r18, r24
     fa8:	22 95       	swap	r18
     faa:	20 7f       	andi	r18, 0xF0	; 240
     fac:	93 2b       	or	r25, r19
     fae:	92 2b       	or	r25, r18
     fb0:	99 a3       	lds	r25, 0x59
     fb2:	38 2f       	mov	r19, r24
     fb4:	32 95       	swap	r19
     fb6:	3f 70       	andi	r19, 0x0F	; 15
     fb8:	91 8d       	ldd	r25, Z+25	; 0x19
     fba:	93 70       	andi	r25, 0x03	; 3
     fbc:	92 95       	swap	r25
     fbe:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
     fc0:	80 91 25 03 	lds	r24, 0x0325
     fc4:	28 2f       	mov	r18, r24
     fc6:	22 95       	swap	r18
     fc8:	22 0f       	add	r18, r18
     fca:	22 0f       	add	r18, r18
     fcc:	20 7c       	andi	r18, 0xC0	; 192
     fce:	93 2b       	or	r25, r19
     fd0:	92 2b       	or	r25, r18
     fd2:	9a a3       	lds	r25, 0x5a
     fd4:	93 8d       	ldd	r25, Z+27	; 0x1b
     fd6:	92 95       	swap	r25
     fd8:	99 0f       	add	r25, r25
     fda:	99 0f       	add	r25, r25
     fdc:	90 7c       	andi	r25, 0xC0	; 192
     fde:	86 95       	lsr	r24
     fe0:	86 95       	lsr	r24
     fe2:	89 2b       	or	r24, r25
     fe4:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
     fe6:	80 91 27 03 	lds	r24, 0x0327
     fea:	8c a3       	lds	r24, 0x5c
     fec:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
     fee:	80 91 29 03 	lds	r24, 0x0329
     ff2:	28 2f       	mov	r18, r24
     ff4:	22 0f       	add	r18, r18
     ff6:	22 0f       	add	r18, r18
     ff8:	93 70       	andi	r25, 0x03	; 3
     ffa:	92 2b       	or	r25, r18
     ffc:	9d a3       	lds	r25, 0x5d
     ffe:	82 95       	swap	r24
    1000:	86 95       	lsr	r24
    1002:	86 95       	lsr	r24
    1004:	83 70       	andi	r24, 0x03	; 3
    1006:	2e a1       	lds	r18, 0x4e
    1008:	20 7f       	andi	r18, 0xF0	; 240
    100a:	97 8d       	ldd	r25, Z+31	; 0x1f
    100c:	93 70       	andi	r25, 0x03	; 3
    100e:	99 0f       	add	r25, r25
    1010:	99 0f       	add	r25, r25
    1012:	82 2b       	or	r24, r18
    1014:	89 2b       	or	r24, r25
    1016:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    1018:	80 91 2b 03 	lds	r24, 0x032B
    101c:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    101e:	80 91 2c 03 	lds	r24, 0x032C
    1022:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    1024:	80 91 2d 03 	lds	r24, 0x032D
    1028:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    102a:	80 91 2e 03 	lds	r24, 0x032E
    102e:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    1030:	80 91 2f 03 	lds	r24, 0x032F
    1034:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    1036:	0e 94 34 06 	call	0xc68	; 0xc68 <lock_pots>
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    103a:	21 2f       	mov	r18, r17
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8b e2       	ldi	r24, 0x2B	; 43
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	28 9f       	mul	r18, r24
    1044:	b0 01       	movw	r22, r0
    1046:	29 9f       	mul	r18, r25
    1048:	70 0d       	add	r23, r0
    104a:	38 9f       	mul	r19, r24
    104c:	70 0d       	add	r23, r0
    104e:	11 24       	eor	r1, r1
    1050:	60 50       	subi	r22, 0x00	; 0
    1052:	70 40       	sbci	r23, 0x00	; 0
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	4b e2       	ldi	r20, 0x2B	; 43
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	0e 94 25 1a 	call	0x344a	; 0x344a <__eeupd_block_m6450a>
}	
    1060:	ab 96       	adiw	r28, 0x2b	; 43
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	08 95       	ret

00001074 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	e3 97       	sbiw	r28, 0x33	; 51
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	2b e2       	ldi	r18, 0x2B	; 43
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	82 9f       	mul	r24, r18
    1090:	b0 01       	movw	r22, r0
    1092:	83 9f       	mul	r24, r19
    1094:	70 0d       	add	r23, r0
    1096:	92 9f       	mul	r25, r18
    1098:	70 0d       	add	r23, r0
    109a:	11 24       	eor	r1, r1
    109c:	60 50       	subi	r22, 0x00	; 0
    109e:	70 40       	sbci	r23, 0x00	; 0
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	4b e2       	ldi	r20, 0x2B	; 43
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	0e 94 0f 1a 	call	0x341e	; 0x341e <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    10ac:	eb e0       	ldi	r30, 0x0B	; 11
    10ae:	f3 e0       	ldi	r31, 0x03	; 3
    10b0:	8a 89       	ldd	r24, Y+18	; 0x12
    10b2:	28 2f       	mov	r18, r24
    10b4:	22 95       	swap	r18
    10b6:	2f 70       	andi	r18, 0x0F	; 15
    10b8:	9b 89       	ldd	r25, Y+19	; 0x13
    10ba:	39 2f       	mov	r19, r25
    10bc:	32 95       	swap	r19
    10be:	30 7f       	andi	r19, 0xF0	; 240
    10c0:	32 2b       	or	r19, r18
    10c2:	29 2f       	mov	r18, r25
    10c4:	22 95       	swap	r18
    10c6:	2f 70       	andi	r18, 0x0F	; 15
    10c8:	23 70       	andi	r18, 0x03	; 3
    10ca:	30 93 0b 03 	sts	0x030B, r19
    10ce:	20 93 0c 03 	sts	0x030C, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    10d2:	df 01       	movw	r26, r30
    10d4:	5a 97       	sbiw	r26, 0x1a	; 26
    10d6:	4a 81       	ldd	r20, Y+2	; 0x02
    10d8:	46 95       	lsr	r20
    10da:	46 95       	lsr	r20
    10dc:	2b 81       	ldd	r18, Y+3	; 0x03
    10de:	32 2f       	mov	r19, r18
    10e0:	32 95       	swap	r19
    10e2:	33 0f       	add	r19, r19
    10e4:	33 0f       	add	r19, r19
    10e6:	30 7c       	andi	r19, 0xC0	; 192
    10e8:	43 2b       	or	r20, r19
    10ea:	32 2f       	mov	r19, r18
    10ec:	36 95       	lsr	r19
    10ee:	36 95       	lsr	r19
    10f0:	33 70       	andi	r19, 0x03	; 3
    10f2:	4c 93       	st	X, r20
    10f4:	11 96       	adiw	r26, 0x01	; 1
    10f6:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    10f8:	df 01       	movw	r26, r30
    10fa:	58 97       	sbiw	r26, 0x18	; 24
    10fc:	32 2f       	mov	r19, r18
    10fe:	32 95       	swap	r19
    1100:	3f 70       	andi	r19, 0x0F	; 15
    1102:	2c 81       	ldd	r18, Y+4	; 0x04
    1104:	42 2f       	mov	r20, r18
    1106:	42 95       	swap	r20
    1108:	40 7f       	andi	r20, 0xF0	; 240
    110a:	43 2b       	or	r20, r19
    110c:	32 2f       	mov	r19, r18
    110e:	32 95       	swap	r19
    1110:	3f 70       	andi	r19, 0x0F	; 15
    1112:	33 70       	andi	r19, 0x03	; 3
    1114:	4c 93       	st	X, r20
    1116:	11 96       	adiw	r26, 0x01	; 1
    1118:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    111a:	df 01       	movw	r26, r30
    111c:	56 97       	sbiw	r26, 0x16	; 22
    111e:	22 95       	swap	r18
    1120:	26 95       	lsr	r18
    1122:	26 95       	lsr	r18
    1124:	23 70       	andi	r18, 0x03	; 3
    1126:	3d 81       	ldd	r19, Y+5	; 0x05
    1128:	43 2f       	mov	r20, r19
    112a:	44 0f       	add	r20, r20
    112c:	44 0f       	add	r20, r20
    112e:	24 2b       	or	r18, r20
    1130:	32 95       	swap	r19
    1132:	36 95       	lsr	r19
    1134:	36 95       	lsr	r19
    1136:	33 70       	andi	r19, 0x03	; 3
    1138:	2c 93       	st	X, r18
    113a:	11 96       	adiw	r26, 0x01	; 1
    113c:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    113e:	df 01       	movw	r26, r30
    1140:	54 97       	sbiw	r26, 0x14	; 20
    1142:	4e 81       	ldd	r20, Y+6	; 0x06
    1144:	2f 81       	ldd	r18, Y+7	; 0x07
    1146:	32 2f       	mov	r19, r18
    1148:	33 70       	andi	r19, 0x03	; 3
    114a:	4c 93       	st	X, r20
    114c:	11 96       	adiw	r26, 0x01	; 1
    114e:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1150:	df 01       	movw	r26, r30
    1152:	52 97       	sbiw	r26, 0x12	; 18
    1154:	32 2f       	mov	r19, r18
    1156:	36 95       	lsr	r19
    1158:	36 95       	lsr	r19
    115a:	28 85       	ldd	r18, Y+8	; 0x08
    115c:	42 2f       	mov	r20, r18
    115e:	42 95       	swap	r20
    1160:	44 0f       	add	r20, r20
    1162:	44 0f       	add	r20, r20
    1164:	40 7c       	andi	r20, 0xC0	; 192
    1166:	43 2b       	or	r20, r19
    1168:	32 2f       	mov	r19, r18
    116a:	36 95       	lsr	r19
    116c:	36 95       	lsr	r19
    116e:	33 70       	andi	r19, 0x03	; 3
    1170:	4c 93       	st	X, r20
    1172:	11 96       	adiw	r26, 0x01	; 1
    1174:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1176:	df 01       	movw	r26, r30
    1178:	50 97       	sbiw	r26, 0x10	; 16
    117a:	32 2f       	mov	r19, r18
    117c:	32 95       	swap	r19
    117e:	3f 70       	andi	r19, 0x0F	; 15
    1180:	29 85       	ldd	r18, Y+9	; 0x09
    1182:	42 2f       	mov	r20, r18
    1184:	42 95       	swap	r20
    1186:	40 7f       	andi	r20, 0xF0	; 240
    1188:	43 2b       	or	r20, r19
    118a:	32 2f       	mov	r19, r18
    118c:	32 95       	swap	r19
    118e:	3f 70       	andi	r19, 0x0F	; 15
    1190:	33 70       	andi	r19, 0x03	; 3
    1192:	4c 93       	st	X, r20
    1194:	11 96       	adiw	r26, 0x01	; 1
    1196:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    1198:	df 01       	movw	r26, r30
    119a:	1e 97       	sbiw	r26, 0x0e	; 14
    119c:	22 95       	swap	r18
    119e:	26 95       	lsr	r18
    11a0:	26 95       	lsr	r18
    11a2:	23 70       	andi	r18, 0x03	; 3
    11a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    11a6:	43 2f       	mov	r20, r19
    11a8:	44 0f       	add	r20, r20
    11aa:	44 0f       	add	r20, r20
    11ac:	24 2b       	or	r18, r20
    11ae:	32 95       	swap	r19
    11b0:	36 95       	lsr	r19
    11b2:	36 95       	lsr	r19
    11b4:	33 70       	andi	r19, 0x03	; 3
    11b6:	2c 93       	st	X, r18
    11b8:	11 96       	adiw	r26, 0x01	; 1
    11ba:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    11bc:	df 01       	movw	r26, r30
    11be:	1c 97       	sbiw	r26, 0x0c	; 12
    11c0:	4b 85       	ldd	r20, Y+11	; 0x0b
    11c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11c4:	32 2f       	mov	r19, r18
    11c6:	33 70       	andi	r19, 0x03	; 3
    11c8:	4c 93       	st	X, r20
    11ca:	11 96       	adiw	r26, 0x01	; 1
    11cc:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    11ce:	df 01       	movw	r26, r30
    11d0:	1a 97       	sbiw	r26, 0x0a	; 10
    11d2:	32 2f       	mov	r19, r18
    11d4:	36 95       	lsr	r19
    11d6:	36 95       	lsr	r19
    11d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    11da:	42 2f       	mov	r20, r18
    11dc:	42 95       	swap	r20
    11de:	44 0f       	add	r20, r20
    11e0:	44 0f       	add	r20, r20
    11e2:	40 7c       	andi	r20, 0xC0	; 192
    11e4:	43 2b       	or	r20, r19
    11e6:	32 2f       	mov	r19, r18
    11e8:	36 95       	lsr	r19
    11ea:	36 95       	lsr	r19
    11ec:	33 70       	andi	r19, 0x03	; 3
    11ee:	4c 93       	st	X, r20
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    11f4:	df 01       	movw	r26, r30
    11f6:	18 97       	sbiw	r26, 0x08	; 8
    11f8:	32 2f       	mov	r19, r18
    11fa:	32 95       	swap	r19
    11fc:	3f 70       	andi	r19, 0x0F	; 15
    11fe:	2e 85       	ldd	r18, Y+14	; 0x0e
    1200:	42 2f       	mov	r20, r18
    1202:	42 95       	swap	r20
    1204:	40 7f       	andi	r20, 0xF0	; 240
    1206:	43 2b       	or	r20, r19
    1208:	32 2f       	mov	r19, r18
    120a:	32 95       	swap	r19
    120c:	3f 70       	andi	r19, 0x0F	; 15
    120e:	33 70       	andi	r19, 0x03	; 3
    1210:	4c 93       	st	X, r20
    1212:	11 96       	adiw	r26, 0x01	; 1
    1214:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    1216:	df 01       	movw	r26, r30
    1218:	16 97       	sbiw	r26, 0x06	; 6
    121a:	22 95       	swap	r18
    121c:	26 95       	lsr	r18
    121e:	26 95       	lsr	r18
    1220:	23 70       	andi	r18, 0x03	; 3
    1222:	3f 85       	ldd	r19, Y+15	; 0x0f
    1224:	43 2f       	mov	r20, r19
    1226:	44 0f       	add	r20, r20
    1228:	44 0f       	add	r20, r20
    122a:	24 2b       	or	r18, r20
    122c:	32 95       	swap	r19
    122e:	36 95       	lsr	r19
    1230:	36 95       	lsr	r19
    1232:	33 70       	andi	r19, 0x03	; 3
    1234:	2c 93       	st	X, r18
    1236:	11 96       	adiw	r26, 0x01	; 1
    1238:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    123a:	df 01       	movw	r26, r30
    123c:	14 97       	sbiw	r26, 0x04	; 4
    123e:	48 89       	ldd	r20, Y+16	; 0x10
    1240:	29 89       	ldd	r18, Y+17	; 0x11
    1242:	32 2f       	mov	r19, r18
    1244:	33 70       	andi	r19, 0x03	; 3
    1246:	4c 93       	st	X, r20
    1248:	11 96       	adiw	r26, 0x01	; 1
    124a:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    124c:	df 01       	movw	r26, r30
    124e:	12 97       	sbiw	r26, 0x02	; 2
    1250:	26 95       	lsr	r18
    1252:	26 95       	lsr	r18
    1254:	38 2f       	mov	r19, r24
    1256:	32 95       	swap	r19
    1258:	33 0f       	add	r19, r19
    125a:	33 0f       	add	r19, r19
    125c:	30 7c       	andi	r19, 0xC0	; 192
    125e:	23 2b       	or	r18, r19
    1260:	86 95       	lsr	r24
    1262:	86 95       	lsr	r24
    1264:	83 70       	andi	r24, 0x03	; 3
    1266:	2c 93       	st	X, r18
    1268:	11 96       	adiw	r26, 0x01	; 1
    126a:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    126c:	92 95       	swap	r25
    126e:	96 95       	lsr	r25
    1270:	96 95       	lsr	r25
    1272:	93 70       	andi	r25, 0x03	; 3
    1274:	8c 89       	ldd	r24, Y+20	; 0x14
    1276:	28 2f       	mov	r18, r24
    1278:	22 0f       	add	r18, r18
    127a:	22 0f       	add	r18, r18
    127c:	92 2b       	or	r25, r18
    127e:	82 95       	swap	r24
    1280:	86 95       	lsr	r24
    1282:	86 95       	lsr	r24
    1284:	83 70       	andi	r24, 0x03	; 3
    1286:	90 93 0d 03 	sts	0x030D, r25
    128a:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    128c:	2d 89       	ldd	r18, Y+21	; 0x15
    128e:	8e 89       	ldd	r24, Y+22	; 0x16
    1290:	98 2f       	mov	r25, r24
    1292:	93 70       	andi	r25, 0x03	; 3
    1294:	20 93 0f 03 	sts	0x030F, r18
    1298:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    129a:	98 2f       	mov	r25, r24
    129c:	96 95       	lsr	r25
    129e:	96 95       	lsr	r25
    12a0:	8f 89       	ldd	r24, Y+23	; 0x17
    12a2:	28 2f       	mov	r18, r24
    12a4:	22 95       	swap	r18
    12a6:	22 0f       	add	r18, r18
    12a8:	22 0f       	add	r18, r18
    12aa:	20 7c       	andi	r18, 0xC0	; 192
    12ac:	29 2b       	or	r18, r25
    12ae:	98 2f       	mov	r25, r24
    12b0:	96 95       	lsr	r25
    12b2:	96 95       	lsr	r25
    12b4:	93 70       	andi	r25, 0x03	; 3
    12b6:	20 93 11 03 	sts	0x0311, r18
    12ba:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    12bc:	98 2f       	mov	r25, r24
    12be:	92 95       	swap	r25
    12c0:	9f 70       	andi	r25, 0x0F	; 15
    12c2:	88 8d       	ldd	r24, Y+24	; 0x18
    12c4:	28 2f       	mov	r18, r24
    12c6:	22 95       	swap	r18
    12c8:	20 7f       	andi	r18, 0xF0	; 240
    12ca:	29 2b       	or	r18, r25
    12cc:	98 2f       	mov	r25, r24
    12ce:	92 95       	swap	r25
    12d0:	9f 70       	andi	r25, 0x0F	; 15
    12d2:	93 70       	andi	r25, 0x03	; 3
    12d4:	20 93 13 03 	sts	0x0313, r18
    12d8:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    12da:	82 95       	swap	r24
    12dc:	86 95       	lsr	r24
    12de:	86 95       	lsr	r24
    12e0:	83 70       	andi	r24, 0x03	; 3
    12e2:	99 8d       	ldd	r25, Y+25	; 0x19
    12e4:	29 2f       	mov	r18, r25
    12e6:	22 0f       	add	r18, r18
    12e8:	22 0f       	add	r18, r18
    12ea:	82 2b       	or	r24, r18
    12ec:	92 95       	swap	r25
    12ee:	96 95       	lsr	r25
    12f0:	96 95       	lsr	r25
    12f2:	93 70       	andi	r25, 0x03	; 3
    12f4:	80 93 15 03 	sts	0x0315, r24
    12f8:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    12fa:	2a 8d       	ldd	r18, Y+26	; 0x1a
    12fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12fe:	98 2f       	mov	r25, r24
    1300:	93 70       	andi	r25, 0x03	; 3
    1302:	20 93 17 03 	sts	0x0317, r18
    1306:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    1308:	98 2f       	mov	r25, r24
    130a:	96 95       	lsr	r25
    130c:	96 95       	lsr	r25
    130e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1310:	28 2f       	mov	r18, r24
    1312:	22 95       	swap	r18
    1314:	22 0f       	add	r18, r18
    1316:	22 0f       	add	r18, r18
    1318:	20 7c       	andi	r18, 0xC0	; 192
    131a:	29 2b       	or	r18, r25
    131c:	98 2f       	mov	r25, r24
    131e:	96 95       	lsr	r25
    1320:	96 95       	lsr	r25
    1322:	93 70       	andi	r25, 0x03	; 3
    1324:	20 93 19 03 	sts	0x0319, r18
    1328:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    132a:	98 2f       	mov	r25, r24
    132c:	92 95       	swap	r25
    132e:	9f 70       	andi	r25, 0x0F	; 15
    1330:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1332:	28 2f       	mov	r18, r24
    1334:	22 95       	swap	r18
    1336:	20 7f       	andi	r18, 0xF0	; 240
    1338:	29 2b       	or	r18, r25
    133a:	98 2f       	mov	r25, r24
    133c:	92 95       	swap	r25
    133e:	9f 70       	andi	r25, 0x0F	; 15
    1340:	93 70       	andi	r25, 0x03	; 3
    1342:	20 93 1b 03 	sts	0x031B, r18
    1346:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    1348:	82 95       	swap	r24
    134a:	86 95       	lsr	r24
    134c:	86 95       	lsr	r24
    134e:	83 70       	andi	r24, 0x03	; 3
    1350:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1352:	29 2f       	mov	r18, r25
    1354:	22 0f       	add	r18, r18
    1356:	22 0f       	add	r18, r18
    1358:	82 2b       	or	r24, r18
    135a:	92 95       	swap	r25
    135c:	96 95       	lsr	r25
    135e:	96 95       	lsr	r25
    1360:	93 70       	andi	r25, 0x03	; 3
    1362:	80 93 1d 03 	sts	0x031D, r24
    1366:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    1368:	2f 8d       	ldd	r18, Y+31	; 0x1f
    136a:	88 a1       	lds	r24, 0x48
    136c:	98 2f       	mov	r25, r24
    136e:	93 70       	andi	r25, 0x03	; 3
    1370:	20 93 1f 03 	sts	0x031F, r18
    1374:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1376:	98 2f       	mov	r25, r24
    1378:	96 95       	lsr	r25
    137a:	96 95       	lsr	r25
    137c:	89 a1       	lds	r24, 0x49
    137e:	28 2f       	mov	r18, r24
    1380:	22 95       	swap	r18
    1382:	22 0f       	add	r18, r18
    1384:	22 0f       	add	r18, r18
    1386:	20 7c       	andi	r18, 0xC0	; 192
    1388:	29 2b       	or	r18, r25
    138a:	98 2f       	mov	r25, r24
    138c:	96 95       	lsr	r25
    138e:	96 95       	lsr	r25
    1390:	93 70       	andi	r25, 0x03	; 3
    1392:	20 93 21 03 	sts	0x0321, r18
    1396:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    1398:	98 2f       	mov	r25, r24
    139a:	92 95       	swap	r25
    139c:	9f 70       	andi	r25, 0x0F	; 15
    139e:	8a a1       	lds	r24, 0x4a
    13a0:	28 2f       	mov	r18, r24
    13a2:	22 95       	swap	r18
    13a4:	20 7f       	andi	r18, 0xF0	; 240
    13a6:	29 2b       	or	r18, r25
    13a8:	98 2f       	mov	r25, r24
    13aa:	92 95       	swap	r25
    13ac:	9f 70       	andi	r25, 0x0F	; 15
    13ae:	93 70       	andi	r25, 0x03	; 3
    13b0:	20 93 23 03 	sts	0x0323, r18
    13b4:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    13b6:	82 95       	swap	r24
    13b8:	86 95       	lsr	r24
    13ba:	86 95       	lsr	r24
    13bc:	83 70       	andi	r24, 0x03	; 3
    13be:	9b a1       	lds	r25, 0x4b
    13c0:	29 2f       	mov	r18, r25
    13c2:	22 0f       	add	r18, r18
    13c4:	22 0f       	add	r18, r18
    13c6:	82 2b       	or	r24, r18
    13c8:	92 95       	swap	r25
    13ca:	96 95       	lsr	r25
    13cc:	96 95       	lsr	r25
    13ce:	93 70       	andi	r25, 0x03	; 3
    13d0:	80 93 25 03 	sts	0x0325, r24
    13d4:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    13d6:	2c a1       	lds	r18, 0x4c
    13d8:	8d a1       	lds	r24, 0x4d
    13da:	98 2f       	mov	r25, r24
    13dc:	93 70       	andi	r25, 0x03	; 3
    13de:	20 93 27 03 	sts	0x0327, r18
    13e2:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    13e4:	98 2f       	mov	r25, r24
    13e6:	96 95       	lsr	r25
    13e8:	96 95       	lsr	r25
    13ea:	8e a1       	lds	r24, 0x4e
    13ec:	28 2f       	mov	r18, r24
    13ee:	22 95       	swap	r18
    13f0:	22 0f       	add	r18, r18
    13f2:	22 0f       	add	r18, r18
    13f4:	20 7c       	andi	r18, 0xC0	; 192
    13f6:	29 2b       	or	r18, r25
    13f8:	86 95       	lsr	r24
    13fa:	86 95       	lsr	r24
    13fc:	98 2f       	mov	r25, r24
    13fe:	93 70       	andi	r25, 0x03	; 3
    1400:	20 93 29 03 	sts	0x0329, r18
    1404:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    1406:	9f a1       	lds	r25, 0x4f
    1408:	90 93 2b 03 	sts	0x032B, r25
	current_patch.byte_2 = loaded_patch.byte_2;
    140c:	88 a5       	lds	r24, 0x68
    140e:	80 93 2c 03 	sts	0x032C, r24
	current_patch.byte_3 = loaded_patch.byte_3;
    1412:	89 a5       	lds	r24, 0x69
    1414:	80 93 2d 03 	sts	0x032D, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    1418:	6a a5       	lds	r22, 0x6a
    141a:	60 93 2e 03 	sts	0x032E, r22
	current_patch.byte_5 = loaded_patch.byte_5;
    141e:	8b a5       	lds	r24, 0x6b
    1420:	80 93 2f 03 	sts	0x032F, r24
	
	uint8_t bitfield_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1424:	de 01       	movw	r26, r28
    1426:	9c 96       	adiw	r26, 0x2c	; 44
    1428:	ef ef       	ldi	r30, 0xFF	; 255
    142a:	f1 e0       	ldi	r31, 0x01	; 1
    142c:	28 e0       	ldi	r18, 0x08	; 8
    142e:	01 90       	ld	r0, Z+
    1430:	0d 92       	st	X+, r0
    1432:	21 50       	subi	r18, 0x01	; 1
    1434:	e1 f7       	brne	.-8      	; 0x142e <__stack+0x32f>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup 
    1436:	6f 71       	andi	r22, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	9b 01       	movw	r18, r22
    143c:	22 0f       	add	r18, r18
    143e:	33 1f       	adc	r19, r19
    1440:	22 0f       	add	r18, r18
    1442:	33 1f       	adc	r19, r19
    1444:	a9 01       	movw	r20, r18
    1446:	44 0f       	add	r20, r20
    1448:	55 1f       	adc	r21, r21
    144a:	44 0f       	add	r20, r20
    144c:	55 1f       	adc	r21, r21
    144e:	44 0f       	add	r20, r20
    1450:	55 1f       	adc	r21, r21
    1452:	42 1b       	sub	r20, r18
    1454:	53 0b       	sbc	r21, r19
    1456:	64 0f       	add	r22, r20
    1458:	75 1f       	adc	r23, r21
    145a:	75 95       	asr	r23
    145c:	67 95       	ror	r22
    145e:	75 95       	asr	r23
    1460:	67 95       	ror	r22
    1462:	75 95       	asr	r23
    1464:	67 95       	ror	r22
    1466:	75 95       	asr	r23
    1468:	67 95       	ror	r22
    146a:	67 70       	andi	r22, 0x07	; 7
	octave_index.vco1 = bitfield_lookup[bit_index];	
    146c:	fe 01       	movw	r30, r28
    146e:	e6 0f       	add	r30, r22
    1470:	f1 1d       	adc	r31, r1
    1472:	24 a5       	lds	r18, 0x64
    1474:	20 93 32 03 	sts	0x0332, r18
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1478:	28 2f       	mov	r18, r24
    147a:	26 95       	lsr	r18
    147c:	27 95       	ror	r18
    147e:	22 27       	eor	r18, r18
    1480:	27 95       	ror	r18
    1482:	38 2f       	mov	r19, r24
    1484:	31 70       	andi	r19, 0x01	; 1
    1486:	23 2b       	or	r18, r19
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1488:	e8 2f       	mov	r30, r24
    148a:	e6 95       	lsr	r30
    148c:	e6 95       	lsr	r30
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	e1 70       	andi	r30, 0x01	; 1
    1492:	f0 70       	andi	r31, 0x00	; 0
    1494:	af 01       	movw	r20, r30
    1496:	44 0f       	add	r20, r20
    1498:	55 1f       	adc	r21, r21
    149a:	44 0f       	add	r20, r20
    149c:	55 1f       	adc	r21, r21
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	
	octave_index.vco1 = bitfield_lookup[bit_index];	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    149e:	42 2b       	or	r20, r18
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    14a0:	e8 2f       	mov	r30, r24
    14a2:	e6 95       	lsr	r30
    14a4:	e6 95       	lsr	r30
    14a6:	e6 95       	lsr	r30
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	e1 70       	andi	r30, 0x01	; 1
    14ac:	f0 70       	andi	r31, 0x00	; 0
    14ae:	9f 01       	movw	r18, r30
    14b0:	22 0f       	add	r18, r18
    14b2:	33 1f       	adc	r19, r19
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	
	octave_index.vco1 = bitfield_lookup[bit_index];	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    14b4:	24 2b       	or	r18, r20
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    14b6:	e8 2f       	mov	r30, r24
    14b8:	e2 95       	swap	r30
    14ba:	ef 70       	andi	r30, 0x0F	; 15
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	e1 70       	andi	r30, 0x01	; 1
    14c0:	f0 70       	andi	r31, 0x00	; 0
    14c2:	bf 01       	movw	r22, r30
    14c4:	62 95       	swap	r22
    14c6:	72 95       	swap	r23
    14c8:	70 7f       	andi	r23, 0xF0	; 240
    14ca:	76 27       	eor	r23, r22
    14cc:	60 7f       	andi	r22, 0xF0	; 240
    14ce:	76 27       	eor	r23, r22
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	
	octave_index.vco1 = bitfield_lookup[bit_index];	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    14d0:	26 2b       	or	r18, r22
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    14d2:	68 2f       	mov	r22, r24
    14d4:	62 95       	swap	r22
    14d6:	66 95       	lsr	r22
    14d8:	67 70       	andi	r22, 0x07	; 7
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	61 70       	andi	r22, 0x01	; 1
    14de:	70 70       	andi	r23, 0x00	; 0
    14e0:	ab 01       	movw	r20, r22
    14e2:	44 0f       	add	r20, r20
    14e4:	55 1f       	adc	r21, r21
    14e6:	42 95       	swap	r20
    14e8:	52 95       	swap	r21
    14ea:	50 7f       	andi	r21, 0xF0	; 240
    14ec:	54 27       	eor	r21, r20
    14ee:	40 7f       	andi	r20, 0xF0	; 240
    14f0:	54 27       	eor	r21, r20
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	
	octave_index.vco1 = bitfield_lookup[bit_index];	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    14f2:	62 2f       	mov	r22, r18
    14f4:	64 2b       	or	r22, r20
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    14f6:	48 2f       	mov	r20, r24
    14f8:	42 95       	swap	r20
    14fa:	46 95       	lsr	r20
    14fc:	46 95       	lsr	r20
    14fe:	43 70       	andi	r20, 0x03	; 3
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	41 70       	andi	r20, 0x01	; 1
    1504:	50 70       	andi	r21, 0x00	; 0
    1506:	9a 01       	movw	r18, r20
    1508:	00 24       	eor	r0, r0
    150a:	36 95       	lsr	r19
    150c:	27 95       	ror	r18
    150e:	07 94       	ror	r0
    1510:	36 95       	lsr	r19
    1512:	27 95       	ror	r18
    1514:	07 94       	ror	r0
    1516:	32 2f       	mov	r19, r18
    1518:	20 2d       	mov	r18, r0
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	
	octave_index.vco1 = bitfield_lookup[bit_index];	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    151a:	26 2b       	or	r18, r22
    151c:	20 93 a4 03 	sts	0x03A4, r18
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
	
	switch_states.byte2 =	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1520:	88 1f       	adc	r24, r24
    1522:	88 27       	eor	r24, r24
    1524:	88 1f       	adc	r24, r24
    1526:	88 0f       	add	r24, r24
    1528:	88 0f       	add	r24, r24
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    152a:	49 2f       	mov	r20, r25
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	41 70       	andi	r20, 0x01	; 1
    1530:	50 70       	andi	r21, 0x00	; 0
    1532:	9a 01       	movw	r18, r20
    1534:	22 0f       	add	r18, r18
    1536:	33 1f       	adc	r19, r19
    1538:	22 0f       	add	r18, r18
    153a:	33 1f       	adc	r19, r19
    153c:	22 0f       	add	r18, r18
    153e:	33 1f       	adc	r19, r19
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
	
	switch_states.byte2 =	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1540:	28 2b       	or	r18, r24
    1542:	20 93 a6 03 	sts	0x03A6, r18
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1546:	0e 94 34 06 	call	0xc68	; 0xc68 <lock_pots>
	
}
    154a:	e3 96       	adiw	r28, 0x33	; 51
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    155c:	90 91 32 03 	lds	r25, 0x0332
	if (vco == VCO2) n = octave_index.vco2;
    1560:	60 3f       	cpi	r22, 0xF0	; 240
    1562:	11 f4       	brne	.+4      	; 0x1568 <transpose_note+0xc>
    1564:	90 91 33 03 	lds	r25, 0x0333

	note = (n*12) + note; //calculate MIDI note after octave addition
    1568:	29 2f       	mov	r18, r25
    156a:	22 0f       	add	r18, r18
    156c:	92 0f       	add	r25, r18
    156e:	99 0f       	add	r25, r25
    1570:	99 0f       	add	r25, r25
    1572:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1574:	89 38       	cpi	r24, 0x89	; 137
    1576:	08 f0       	brcs	.+2      	; 0x157a <transpose_note+0x1e>
    1578:	88 e8       	ldi	r24, 0x88	; 136
	
}
    157a:	08 95       	ret

0000157c <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    157c:	80 91 a4 03 	lds	r24, 0x03A4
    1580:	98 2f       	mov	r25, r24
    1582:	96 95       	lsr	r25
    1584:	96 95       	lsr	r25
    1586:	96 95       	lsr	r25
    1588:	90 ff       	sbrs	r25, 0
    158a:	0e c0       	rjmp	.+28     	; 0x15a8 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    158c:	90 91 32 03 	lds	r25, 0x0332
    1590:	9f 5f       	subi	r25, 0xFF	; 255
    1592:	90 93 32 03 	sts	0x0332, r25
    1596:	95 30       	cpi	r25, 0x05	; 5
    1598:	19 f4       	brne	.+6      	; 0x15a0 <update_octave_range+0x24>
    159a:	94 e0       	ldi	r25, 0x04	; 4
    159c:	90 93 32 03 	sts	0x0332, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    15a0:	98 e0       	ldi	r25, 0x08	; 8
    15a2:	89 27       	eor	r24, r25
    15a4:	80 93 a4 03 	sts	0x03A4, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    15a8:	80 91 a5 03 	lds	r24, 0x03A5
    15ac:	98 2f       	mov	r25, r24
    15ae:	96 95       	lsr	r25
    15b0:	96 95       	lsr	r25
    15b2:	96 95       	lsr	r25
    15b4:	90 ff       	sbrs	r25, 0
    15b6:	0b c0       	rjmp	.+22     	; 0x15ce <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    15b8:	90 91 32 03 	lds	r25, 0x0332
    15bc:	99 23       	and	r25, r25
    15be:	19 f0       	breq	.+6      	; 0x15c6 <update_octave_range+0x4a>
    15c0:	91 50       	subi	r25, 0x01	; 1
    15c2:	90 93 32 03 	sts	0x0332, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    15c6:	98 e0       	ldi	r25, 0x08	; 8
    15c8:	89 27       	eor	r24, r25
    15ca:	80 93 a5 03 	sts	0x03A5, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    15ce:	80 91 32 03 	lds	r24, 0x0332
    15d2:	e1 e1       	ldi	r30, 0x11	; 17
    15d4:	f2 e0       	ldi	r31, 0x02	; 2
    15d6:	e8 0f       	add	r30, r24
    15d8:	f1 1d       	adc	r31, r1
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	00 80       	ld	r0, Z
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <update_octave_range+0x6a>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <update_octave_range+0x66>
    15ea:	58 2f       	mov	r21, r24
    15ec:	80 93 2e 03 	sts	0x032E, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    15f0:	90 91 a5 03 	lds	r25, 0x03A5
    15f4:	29 2f       	mov	r18, r25
    15f6:	26 95       	lsr	r18
    15f8:	26 95       	lsr	r18
    15fa:	20 ff       	sbrs	r18, 0
    15fc:	0e c0       	rjmp	.+28     	; 0x161a <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    15fe:	80 91 33 03 	lds	r24, 0x0333
    1602:	8f 5f       	subi	r24, 0xFF	; 255
    1604:	80 93 33 03 	sts	0x0333, r24
    1608:	85 30       	cpi	r24, 0x05	; 5
    160a:	19 f4       	brne	.+6      	; 0x1612 <update_octave_range+0x96>
    160c:	84 e0       	ldi	r24, 0x04	; 4
    160e:	80 93 33 03 	sts	0x0333, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1612:	84 e0       	ldi	r24, 0x04	; 4
    1614:	98 27       	eor	r25, r24
    1616:	90 93 a5 03 	sts	0x03A5, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    161a:	90 91 a5 03 	lds	r25, 0x03A5
    161e:	29 2f       	mov	r18, r25
    1620:	26 95       	lsr	r18
    1622:	20 ff       	sbrs	r18, 0
    1624:	0b c0       	rjmp	.+22     	; 0x163c <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1626:	80 91 33 03 	lds	r24, 0x0333
    162a:	88 23       	and	r24, r24
    162c:	19 f0       	breq	.+6      	; 0x1634 <update_octave_range+0xb8>
    162e:	81 50       	subi	r24, 0x01	; 1
    1630:	80 93 33 03 	sts	0x0333, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	98 27       	eor	r25, r24
    1638:	90 93 a5 03 	sts	0x03A5, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    163c:	40 91 2d 03 	lds	r20, 0x032D
    1640:	4c 7f       	andi	r20, 0xFC	; 252
    1642:	40 93 2d 03 	sts	0x032D, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1646:	90 91 33 03 	lds	r25, 0x0333
    164a:	93 30       	cpi	r25, 0x03	; 3
    164c:	88 f0       	brcs	.+34     	; 0x1670 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    164e:	ec e0       	ldi	r30, 0x0C	; 12
    1650:	f2 e0       	ldi	r31, 0x02	; 2
    1652:	e9 0f       	add	r30, r25
    1654:	f1 1d       	adc	r31, r1
    1656:	21 e0       	ldi	r18, 0x01	; 1
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	c9 01       	movw	r24, r18
    165c:	00 80       	ld	r0, Z
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <update_octave_range+0xe8>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <update_octave_range+0xe4>
    1668:	84 2b       	or	r24, r20
    166a:	80 93 2d 03 	sts	0x032D, r24
    166e:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1670:	ec e0       	ldi	r30, 0x0C	; 12
    1672:	f2 e0       	ldi	r31, 0x02	; 2
    1674:	e9 0f       	add	r30, r25
    1676:	f1 1d       	adc	r31, r1
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	c9 01       	movw	r24, r18
    167e:	00 80       	ld	r0, Z
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <update_octave_range+0x10a>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <update_octave_range+0x106>
    168a:	85 2b       	or	r24, r21
    168c:	80 93 2e 03 	sts	0x032E, r24
    1690:	08 95       	ret

00001692 <update_patch_programmer>:
	
}

void update_patch_programmer(void) {
	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1692:	80 91 a6 03 	lds	r24, 0x03A6
    1696:	98 2f       	mov	r25, r24
    1698:	92 95       	swap	r25
    169a:	96 95       	lsr	r25
    169c:	96 95       	lsr	r25
    169e:	93 70       	andi	r25, 0x03	; 3
    16a0:	90 ff       	sbrs	r25, 0
    16a2:	11 c0       	rjmp	.+34     	; 0x16c6 <update_patch_programmer+0x34>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    16a4:	90 e4       	ldi	r25, 0x40	; 64
    16a6:	89 27       	eor	r24, r25
    16a8:	80 93 a6 03 	sts	0x03A6, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    16ac:	80 91 30 03 	lds	r24, 0x0330
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	80 93 30 03 	sts	0x0330, r24
    16b6:	85 32       	cpi	r24, 0x25	; 37
    16b8:	21 f4       	brne	.+8      	; 0x16c2 <update_patch_programmer+0x30>
			
			current_patch.number = NUM_PATCHES; //max patch number
    16ba:	84 e2       	ldi	r24, 0x24	; 36
    16bc:	80 93 30 03 	sts	0x0330, r24
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <update_patch_programmer+0x34>
			
		} else { //load next patch
			
			load_patch(current_patch.number);
    16c2:	0e 94 3a 08 	call	0x1074	; 0x1074 <load_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    16c6:	80 91 a6 03 	lds	r24, 0x03A6
    16ca:	98 2f       	mov	r25, r24
    16cc:	92 95       	swap	r25
    16ce:	96 95       	lsr	r25
    16d0:	97 70       	andi	r25, 0x07	; 7
    16d2:	90 ff       	sbrs	r25, 0
    16d4:	0d c0       	rjmp	.+26     	; 0x16f0 <update_patch_programmer+0x5e>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    16d6:	90 e2       	ldi	r25, 0x20	; 32
    16d8:	89 27       	eor	r24, r25
    16da:	80 93 a6 03 	sts	0x03A6, r24

		if (current_patch.number == 1) {} else {current_patch.number--; load_patch(current_patch.number);}
    16de:	80 91 30 03 	lds	r24, 0x0330
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	29 f0       	breq	.+10     	; 0x16f0 <update_patch_programmer+0x5e>
    16e6:	81 50       	subi	r24, 0x01	; 1
    16e8:	80 93 30 03 	sts	0x0330, r24
    16ec:	0e 94 3a 08 	call	0x1074	; 0x1074 <load_patch>
	
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    16f0:	80 91 a6 03 	lds	r24, 0x03A6
    16f4:	98 2f       	mov	r25, r24
    16f6:	92 95       	swap	r25
    16f8:	9f 70       	andi	r25, 0x0F	; 15
    16fa:	90 ff       	sbrs	r25, 0
    16fc:	08 c0       	rjmp	.+16     	; 0x170e <update_patch_programmer+0x7c>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW); //toggle switch state bit
    16fe:	90 e1       	ldi	r25, 0x10	; 16
    1700:	89 27       	eor	r24, r25
    1702:	80 93 a6 03 	sts	0x03A6, r24
		save_patch(current_patch.number);
    1706:	80 91 30 03 	lds	r24, 0x0330
    170a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <save_patch>
		
		
	}
	
	
	value_to_display = current_patch.number;	
    170e:	80 91 30 03 	lds	r24, 0x0330
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	90 93 fe 01 	sts	0x01FE, r25
    1718:	80 93 fd 01 	sts	0x01FD, r24
	
	
}	
    171c:	08 95       	ret

0000171e <refresh_synth>:
	
	
void refresh_synth(void) {
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1722:	90 91 a4 03 	lds	r25, 0x03A4
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1726:	80 91 a6 03 	lds	r24, 0x03A6
    172a:	86 95       	lsr	r24
    172c:	86 95       	lsr	r24
    172e:	68 2f       	mov	r22, r24
    1730:	67 95       	ror	r22
    1732:	66 27       	eor	r22, r22
    1734:	67 95       	ror	r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1736:	29 2f       	mov	r18, r25
    1738:	21 70       	andi	r18, 0x01	; 1
    173a:	26 2b       	or	r18, r22
    173c:	69 2f       	mov	r22, r25
    173e:	66 1f       	adc	r22, r22
    1740:	66 27       	eor	r22, r22
    1742:	66 1f       	adc	r22, r22
    1744:	66 0f       	add	r22, r22
    1746:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1748:	c9 2f       	mov	r28, r25
    174a:	c6 95       	lsr	r28
    174c:	c6 95       	lsr	r28
    174e:	d0 e0       	ldi	r29, 0x00	; 0
    1750:	c1 70       	andi	r28, 0x01	; 1
    1752:	d0 70       	andi	r29, 0x00	; 0
    1754:	de 01       	movw	r26, r28
    1756:	aa 0f       	add	r26, r26
    1758:	bb 1f       	adc	r27, r27
    175a:	aa 0f       	add	r26, r26
    175c:	bb 1f       	adc	r27, r27
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    175e:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1760:	a9 2f       	mov	r26, r25
    1762:	a6 95       	lsr	r26
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	a1 70       	andi	r26, 0x01	; 1
    1768:	b0 70       	andi	r27, 0x00	; 0
    176a:	fd 01       	movw	r30, r26
    176c:	ee 0f       	add	r30, r30
    176e:	ff 1f       	adc	r31, r31
    1770:	ee 0f       	add	r30, r30
    1772:	ff 1f       	adc	r31, r31
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1778:	a6 2f       	mov	r26, r22
    177a:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    177c:	e9 2f       	mov	r30, r25
    177e:	e2 95       	swap	r30
    1780:	ef 70       	andi	r30, 0x0F	; 15
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	e1 70       	andi	r30, 0x01	; 1
    1786:	f0 70       	andi	r31, 0x00	; 0
    1788:	bf 01       	movw	r22, r30
    178a:	62 95       	swap	r22
    178c:	72 95       	swap	r23
    178e:	70 7f       	andi	r23, 0xF0	; 240
    1790:	76 27       	eor	r23, r22
    1792:	60 7f       	andi	r22, 0xF0	; 240
    1794:	76 27       	eor	r23, r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1796:	ea 2f       	mov	r30, r26
    1798:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    179a:	69 2f       	mov	r22, r25
    179c:	62 95       	swap	r22
    179e:	66 95       	lsr	r22
    17a0:	67 70       	andi	r22, 0x07	; 7
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	61 70       	andi	r22, 0x01	; 1
    17a6:	70 70       	andi	r23, 0x00	; 0
    17a8:	ab 01       	movw	r20, r22
    17aa:	44 0f       	add	r20, r20
    17ac:	55 1f       	adc	r21, r21
    17ae:	42 95       	swap	r20
    17b0:	52 95       	swap	r21
    17b2:	50 7f       	andi	r21, 0xF0	; 240
    17b4:	54 27       	eor	r21, r20
    17b6:	40 7f       	andi	r20, 0xF0	; 240
    17b8:	54 27       	eor	r21, r20
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    17ba:	6e 2f       	mov	r22, r30
    17bc:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    17be:	49 2f       	mov	r20, r25
    17c0:	42 95       	swap	r20
    17c2:	46 95       	lsr	r20
    17c4:	46 95       	lsr	r20
    17c6:	43 70       	andi	r20, 0x03	; 3
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	41 70       	andi	r20, 0x01	; 1
    17cc:	50 70       	andi	r21, 0x00	; 0
    17ce:	9a 01       	movw	r18, r20
    17d0:	00 24       	eor	r0, r0
    17d2:	36 95       	lsr	r19
    17d4:	27 95       	ror	r18
    17d6:	07 94       	ror	r0
    17d8:	36 95       	lsr	r19
    17da:	27 95       	ror	r18
    17dc:	07 94       	ror	r0
    17de:	32 2f       	mov	r19, r18
    17e0:	20 2d       	mov	r18, r0
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    17e2:	26 2b       	or	r18, r22
    17e4:	20 93 2f 03 	sts	0x032F, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    17e8:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    17ea:	81 95       	neg	r24
    17ec:	89 27       	eor	r24, r25
    17ee:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    17f0:	89 27       	eor	r24, r25
    17f2:	0e 94 8b 12 	call	0x2516	; 0x2516 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    17f6:	ed ed       	ldi	r30, 0xDD	; 221
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    17fc:	90 91 a6 03 	lds	r25, 0x03A6
    1800:	96 95       	lsr	r25
    1802:	96 95       	lsr	r25
    1804:	96 95       	lsr	r25
    1806:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1808:	91 95       	neg	r25
    180a:	80 81       	ld	r24, Z
    180c:	89 27       	eor	r24, r25
    180e:	80 71       	andi	r24, 0x10	; 16
    1810:	82 27       	eor	r24, r18
    1812:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1814:	eb e2       	ldi	r30, 0x2B	; 43
    1816:	f3 e0       	ldi	r31, 0x03	; 3
    1818:	80 81       	ld	r24, Z
    181a:	98 27       	eor	r25, r24
    181c:	91 70       	andi	r25, 0x01	; 1
    181e:	89 27       	eor	r24, r25
    1820:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1822:	0e 94 be 0a 	call	0x157c	; 0x157c <update_octave_range>
	
	//parse LFO data
	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1826:	80 91 a5 03 	lds	r24, 0x03A5
    182a:	88 23       	and	r24, r24
    182c:	64 f5       	brge	.+88     	; 0x1886 <refresh_synth+0x168>
		
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    182e:	80 58       	subi	r24, 0x80	; 128
    1830:	80 93 a5 03 	sts	0x03A5, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1834:	80 91 34 03 	lds	r24, 0x0334
    1838:	8f 5f       	subi	r24, 0xFF	; 255
    183a:	80 93 34 03 	sts	0x0334, r24
    183e:	85 30       	cpi	r24, 0x05	; 5
    1840:	11 f4       	brne	.+4      	; 0x1846 <refresh_synth+0x128>
    1842:	10 92 34 03 	sts	0x0334, r1
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1846:	a0 91 34 03 	lds	r26, 0x0334
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	aa 0f       	add	r26, r26
    184e:	bb 1f       	adc	r27, r27
    1850:	aa 5e       	subi	r26, 0xEA	; 234
    1852:	bd 4f       	sbci	r27, 0xFD	; 253
    1854:	8c 91       	ld	r24, X
    1856:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1858:	ed ed       	ldi	r30, 0xDD	; 221
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	80 62       	ori	r24, 0x20	; 32
    1860:	80 83       	st	Z, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1862:	80 81       	ld	r24, Z
    1864:	8f 7d       	andi	r24, 0xDF	; 223
    1866:	80 83       	st	Z, r24
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	11 96       	adiw	r26, 0x01	; 1
    186e:	0c 90       	ld	r0, X
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <refresh_synth+0x158>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <refresh_synth+0x154>
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    187a:	90 91 2c 03 	lds	r25, 0x032C
    187e:	9f 70       	andi	r25, 0x0F	; 15
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1880:	89 2b       	or	r24, r25
    1882:	80 93 2c 03 	sts	0x032C, r24
		
		
	}
	
	update_patch_programmer();		
    1886:	0e 94 49 0b 	call	0x1692	; 0x1692 <update_patch_programmer>
				
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) //temporary tune button hack
    188a:	80 91 a5 03 	lds	r24, 0x03A5
    188e:	98 2f       	mov	r25, r24
    1890:	92 95       	swap	r25
    1892:	96 95       	lsr	r25
    1894:	97 70       	andi	r25, 0x07	; 7
    1896:	90 ff       	sbrs	r25, 0
    1898:	3f c0       	rjmp	.+126    	; 0x1918 <refresh_synth+0x1fa>
		{ 
				
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle read switch state
    189a:	90 e2       	ldi	r25, 0x20	; 32
    189c:	89 27       	eor	r24, r25
    189e:	80 93 a5 03 	sts	0x03A5, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    18a2:	87 e0       	ldi	r24, 0x07	; 7
    18a4:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    18a6:	cd ed       	ldi	r28, 0xDD	; 221
    18a8:	d0 e0       	ldi	r29, 0x00	; 0
    18aa:	88 81       	ld	r24, Y
    18ac:	80 62       	ori	r24, 0x20	; 32
    18ae:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    18b0:	88 81       	ld	r24, Y
    18b2:	8f 7d       	andi	r24, 0xDF	; 223
    18b4:	88 83       	st	Y, r24
		DATA_BUS = 0;
    18b6:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    18b8:	8f e0       	ldi	r24, 0x0F	; 15
    18ba:	6f e0       	ldi	r22, 0x0F	; 15
    18bc:	7e e5       	ldi	r23, 0x5E	; 94
    18be:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <set_vco_init_cv>
    18c2:	90 93 9c 03 	sts	0x039C, r25
    18c6:	80 93 9b 03 	sts	0x039B, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    18ca:	80 ef       	ldi	r24, 0xF0	; 240
    18cc:	6f e0       	ldi	r22, 0x0F	; 15
    18ce:	7e e5       	ldi	r23, 0x5E	; 94
    18d0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <set_vco_init_cv>
    18d4:	90 93 9a 03 	sts	0x039A, r25
    18d8:	80 93 99 03 	sts	0x0399, r24

		tune_8ths(VCO1);
    18dc:	8f e0       	ldi	r24, 0x0F	; 15
    18de:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <tune_8ths>
		tune_8ths(VCO2);
    18e2:	80 ef       	ldi	r24, 0xF0	; 240
    18e4:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <tune_8ths>
		tune_filter();
    18e8:	0e 94 14 10 	call	0x2028	; 0x2028 <tune_filter>
		save_tuning_tables();
    18ec:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18f0:	8f e4       	ldi	r24, 0x4F	; 79
    18f2:	93 ec       	ldi	r25, 0xC3	; 195
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <refresh_synth+0x1d6>
    18f8:	00 c0       	rjmp	.+0      	; 0x18fa <refresh_synth+0x1dc>
    18fa:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
    18fc:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    18fe:	88 81       	ld	r24, Y
    1900:	80 62       	ori	r24, 0x20	; 32
    1902:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1904:	88 81       	ld	r24, Y
    1906:	8f 7d       	andi	r24, 0xDF	; 223
    1908:	88 83       	st	Y, r24
		DATA_BUS = 0;
    190a:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    190c:	80 91 2c 03 	lds	r24, 0x032C
    1910:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1912:	80 68       	ori	r24, 0x80	; 128
    1914:	80 93 2c 03 	sts	0x032C, r24
				
		}
		
		
	
}
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	08 95       	ret

0000191e <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    191e:	88 ed       	ldi	r24, 0xD8	; 216
    1920:	91 e0       	ldi	r25, 0x01	; 1
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    192a:	81 ee       	ldi	r24, 0xE1	; 225
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1936:	82 ee       	ldi	r24, 0xE2	; 226
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1942:	82 ea       	ldi	r24, 0xA2	; 162
    1944:	92 e0       	ldi	r25, 0x02	; 2
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    194e:	8a ed       	ldi	r24, 0xDA	; 218
    1950:	91 e0       	ldi	r25, 0x01	; 1
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    195a:	8f ed       	ldi	r24, 0xDF	; 223
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1966:	80 ee       	ldi	r24, 0xE0	; 224
    1968:	91 e0       	ldi	r25, 0x01	; 1
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1972:	81 ed       	ldi	r24, 0xD1	; 209
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    197e:	86 ed       	ldi	r24, 0xD6	; 214
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    198a:	82 ed       	ldi	r24, 0xD2	; 210
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1996:	83 ed       	ldi	r24, 0xD3	; 211
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    19a2:	84 ed       	ldi	r24, 0xD4	; 212
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	6f ef       	ldi	r22, 0xFF	; 255
    19a8:	7f e3       	ldi	r23, 0x3F	; 63
    19aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    19ae:	85 ed       	ldi	r24, 0xD5	; 213
    19b0:	91 e0       	ldi	r25, 0x01	; 1
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    19ba:	89 ed       	ldi	r24, 0xD9	; 217
    19bc:	91 e0       	ldi	r25, 0x01	; 1
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    19c6:	8e ec       	ldi	r24, 0xCE	; 206
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    19d2:	8c ec       	ldi	r24, 0xCC	; 204
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    19de:	8a ec       	ldi	r24, 0xCA	; 202
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	6f ef       	ldi	r22, 0xFF	; 255
    19e4:	7f e3       	ldi	r23, 0x3F	; 63
    19e6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    19ea:	88 ec       	ldi	r24, 0xC8	; 200
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    19f6:	80 ed       	ldi	r24, 0xD0	; 208
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1a02:	83 ee       	ldi	r24, 0xE3	; 227
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1a0e:	84 ee       	ldi	r24, 0xE4	; 228
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}	
    1a1a:	08 95       	ret

00001a1c <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1a1c:	2f 92       	push	r2
    1a1e:	3f 92       	push	r3
    1a20:	4f 92       	push	r4
    1a22:	5f 92       	push	r5
    1a24:	6f 92       	push	r6
    1a26:	7f 92       	push	r7
    1a28:	8f 92       	push	r8
    1a2a:	9f 92       	push	r9
    1a2c:	af 92       	push	r10
    1a2e:	bf 92       	push	r11
    1a30:	cf 92       	push	r12
    1a32:	df 92       	push	r13
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	2c 97       	sbiw	r28, 0x0c	; 12
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	08 2f       	mov	r16, r24
    1a52:	78 87       	std	Y+8, r23	; 0x08
    1a54:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1a56:	80 91 a1 03 	lds	r24, 0x03A1
    1a5a:	83 60       	ori	r24, 0x03	; 3
    1a5c:	80 93 a1 03 	sts	0x03A1, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1a60:	0e 94 8f 0c 	call	0x191e	; 0x191e <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1a64:	10 92 a0 03 	sts	0x03A0, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1a68:	0f 30       	cpi	r16, 0x0F	; 15
    1a6a:	e1 f4       	brne	.+56     	; 0x1aa4 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1a6c:	0f 2e       	mov	r0, r31
    1a6e:	f6 ee       	ldi	r31, 0xE6	; 230
    1a70:	4f 2e       	mov	r4, r31
    1a72:	f1 e0       	ldi	r31, 0x01	; 1
    1a74:	5f 2e       	mov	r5, r31
    1a76:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1a78:	0f 2e       	mov	r0, r31
    1a7a:	fe ed       	ldi	r31, 0xDE	; 222
    1a7c:	2f 2e       	mov	r2, r31
    1a7e:	f1 e0       	ldi	r31, 0x01	; 1
    1a80:	3f 2e       	mov	r3, r31
    1a82:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1a84:	23 ee       	ldi	r18, 0xE3	; 227
    1a86:	31 e0       	ldi	r19, 0x01	; 1
    1a88:	3a 83       	std	Y+2, r19	; 0x02
    1a8a:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1a8c:	0f 2e       	mov	r0, r31
    1a8e:	fc ed       	ldi	r31, 0xDC	; 220
    1a90:	8f 2e       	mov	r8, r31
    1a92:	f1 e0       	ldi	r31, 0x01	; 1
    1a94:	9f 2e       	mov	r9, r31
    1a96:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1a98:	82 e7       	ldi	r24, 0x72	; 114
    1a9a:	96 e0       	ldi	r25, 0x06	; 6
    1a9c:	9a 87       	std	Y+10, r25	; 0x0a
    1a9e:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	1b c0       	rjmp	.+54     	; 0x1ada <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1aa4:	0f 2e       	mov	r0, r31
    1aa6:	f5 ee       	ldi	r31, 0xE5	; 229
    1aa8:	4f 2e       	mov	r4, r31
    1aaa:	f1 e0       	ldi	r31, 0x01	; 1
    1aac:	5f 2e       	mov	r5, r31
    1aae:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1ab0:	0f 2e       	mov	r0, r31
    1ab2:	f7 ed       	ldi	r31, 0xD7	; 215
    1ab4:	2f 2e       	mov	r2, r31
    1ab6:	f1 e0       	ldi	r31, 0x01	; 1
    1ab8:	3f 2e       	mov	r3, r31
    1aba:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1abc:	e4 ee       	ldi	r30, 0xE4	; 228
    1abe:	f1 e0       	ldi	r31, 0x01	; 1
    1ac0:	fa 83       	std	Y+2, r31	; 0x02
    1ac2:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1ac4:	0f 2e       	mov	r0, r31
    1ac6:	fd ed       	ldi	r31, 0xDD	; 221
    1ac8:	8f 2e       	mov	r8, r31
    1aca:	f1 e0       	ldi	r31, 0x01	; 1
    1acc:	9f 2e       	mov	r9, r31
    1ace:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1ad0:	20 e7       	ldi	r18, 0x70	; 112
    1ad2:	36 e0       	ldi	r19, 0x06	; 6
    1ad4:	3a 87       	std	Y+10, r19	; 0x0a
    1ad6:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1ad8:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1ada:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1adc:	ed ed       	ldi	r30, 0xDD	; 221
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	80 64       	ori	r24, 0x40	; 64
    1ae4:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8f 7b       	andi	r24, 0xBF	; 191
    1aea:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1aec:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1aee:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1af0:	84 b5       	in	r24, 0x24	; 36
    1af2:	8f 60       	ori	r24, 0x0F	; 15
    1af4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1afa:	ee e6       	ldi	r30, 0x6E	; 110
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	90 81       	ld	r25, Z
    1b00:	92 60       	ori	r25, 0x02	; 2
    1b02:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1b04:	80 93 a2 03 	sts	0x03A2, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1b08:	8d e0       	ldi	r24, 0x0D	; 13
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9c 83       	std	Y+4, r25	; 0x04
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1b10:	80 2f       	mov	r24, r16
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	8c 01       	movw	r16, r24
    1b16:	0f 5f       	subi	r16, 0xFF	; 255
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1b1a:	0f 2e       	mov	r0, r31
    1b1c:	f8 ed       	ldi	r31, 0xD8	; 216
    1b1e:	ef 2e       	mov	r14, r31
    1b20:	f1 e0       	ldi	r31, 0x01	; 1
    1b22:	ff 2e       	mov	r15, r31
    1b24:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1b26:	0f 2e       	mov	r0, r31
    1b28:	f4 ed       	ldi	r31, 0xD4	; 212
    1b2a:	cf 2e       	mov	r12, r31
    1b2c:	f1 e0       	ldi	r31, 0x01	; 1
    1b2e:	df 2e       	mov	r13, r31
    1b30:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1b32:	0f 2e       	mov	r0, r31
    1b34:	fa ec       	ldi	r31, 0xCA	; 202
    1b36:	af 2e       	mov	r10, r31
    1b38:	f1 e0       	ldi	r31, 0x01	; 1
    1b3a:	bf 2e       	mov	r11, r31
    1b3c:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1b3e:	0f 2e       	mov	r0, r31
    1b40:	fb ec       	ldi	r31, 0xCB	; 203
    1b42:	6f 2e       	mov	r6, r31
    1b44:	f1 e0       	ldi	r31, 0x01	; 1
    1b46:	7f 2e       	mov	r7, r31
    1b48:	f0 2d       	mov	r31, r0
    1b4a:	e0 e0       	ldi	r30, 0x00	; 0
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	fc 87       	std	Y+12, r31	; 0x0c
    1b50:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1b52:	21 e0       	ldi	r18, 0x01	; 1
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	0b 80       	ldd	r0, Y+3	; 0x03
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <set_vco_init_cv+0x142>
    1b5a:	22 0f       	add	r18, r18
    1b5c:	33 1f       	adc	r19, r19
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <set_vco_init_cv+0x13e>
    1b62:	3e 83       	std	Y+6, r19	; 0x06
    1b64:	2d 83       	std	Y+5, r18	; 0x05
    1b66:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b68:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b6a:	82 2b       	or	r24, r18
    1b6c:	93 2b       	or	r25, r19
    1b6e:	9c 87       	std	Y+12, r25	; 0x0c
    1b70:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1b72:	c4 01       	movw	r24, r8
    1b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b78:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
		
		count_finished = FALSE;
    1b7c:	10 92 a0 03 	sts	0x03A0, r1
		period_counter = 0;
    1b80:	10 92 a3 03 	sts	0x03A3, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1b84:	8f e0       	ldi	r24, 0x0F	; 15
    1b86:	e8 e1       	ldi	r30, 0x18	; 24
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	a8 95       	wdr
    1b90:	e0 93 60 00 	sts	0x0060, r30
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1b9a:	80 91 a0 03 	lds	r24, 0x03A0
    1b9e:	88 23       	and	r24, r24
    1ba0:	89 f5       	brne	.+98     	; 0x1c04 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1ba2:	c8 01       	movw	r24, r16
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1baa:	c4 01       	movw	r24, r8
    1bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1bb4:	c1 01       	movw	r24, r2
    1bb6:	6f ef       	ldi	r22, 0xFF	; 255
    1bb8:	7f e3       	ldi	r23, 0x3F	; 63
    1bba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1bbe:	c7 01       	movw	r24, r14
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1bc8:	c6 01       	movw	r24, r12
    1bca:	6f ef       	ldi	r22, 0xFF	; 255
    1bcc:	7f e3       	ldi	r23, 0x3F	; 63
    1bce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1bd2:	c5 01       	movw	r24, r10
    1bd4:	6f ef       	ldi	r22, 0xFF	; 255
    1bd6:	7f e3       	ldi	r23, 0x3F	; 63
    1bd8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1bdc:	c3 01       	movw	r24, r6
    1bde:	6f ef       	ldi	r22, 0xFF	; 255
    1be0:	7f e3       	ldi	r23, 0x3F	; 63
    1be2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	6f ef       	ldi	r22, 0xFF	; 255
    1bec:	7f e3       	ldi	r23, 0x3F	; 63
    1bee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1bf2:	c2 01       	movw	r24, r4
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1bfc:	80 91 a0 03 	lds	r24, 0x03A0
    1c00:	88 23       	and	r24, r24
    1c02:	79 f2       	breq	.-98     	; 0x1ba2 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1c04:	88 e1       	ldi	r24, 0x18	; 24
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	80 93 60 00 	sts	0x0060, r24
    1c0e:	10 92 60 00 	sts	0x0060, r1
    1c12:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1c14:	80 91 9e 03 	lds	r24, 0x039E
    1c18:	90 91 9f 03 	lds	r25, 0x039F
    1c1c:	ef 81       	ldd	r30, Y+7	; 0x07
    1c1e:	f8 85       	ldd	r31, Y+8	; 0x08
    1c20:	e8 17       	cp	r30, r24
    1c22:	f9 07       	cpc	r31, r25
    1c24:	20 f0       	brcs	.+8      	; 0x1c2e <set_vco_init_cv+0x212>
    1c26:	80 91 9f 02 	lds	r24, 0x029F
    1c2a:	88 23       	and	r24, r24
    1c2c:	51 f4       	brne	.+20     	; 0x1c42 <set_vco_init_cv+0x226>
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	80 95       	com	r24
    1c34:	90 95       	com	r25
    1c36:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c38:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c3a:	28 23       	and	r18, r24
    1c3c:	39 23       	and	r19, r25
    1c3e:	3c 87       	std	Y+12, r19	; 0x0c
    1c40:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	80 93 9f 02 	sts	0x029F, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9c 83       	std	Y+4, r25	; 0x04
    1c50:	8b 83       	std	Y+3, r24	; 0x03
    1c52:	ef ef       	ldi	r30, 0xFF	; 255
    1c54:	8f 3f       	cpi	r24, 0xFF	; 255
    1c56:	9e 07       	cpc	r25, r30
    1c58:	09 f0       	breq	.+2      	; 0x1c5c <set_vco_init_cv+0x240>
    1c5a:	7b cf       	rjmp	.-266    	; 0x1b52 <set_vco_init_cv+0x136>
    1c5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c60:	3e 83       	std	Y+6, r19	; 0x06
    1c62:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1c64:	88 ec       	ldi	r24, 0xC8	; 200
    1c66:	91 e0       	ldi	r25, 0x01	; 1
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    1c70:	89 ec       	ldi	r24, 0xC9	; 201
    1c72:	91 e0       	ldi	r25, 0x01	; 1
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    1c7c:	84 ed       	ldi	r24, 0xD4	; 212
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    1c88:	88 ed       	ldi	r24, 0xD8	; 216
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    1c94:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1c96:	ee e6       	ldi	r30, 0x6E	; 110
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8d 7f       	andi	r24, 0xFD	; 253
    1c9e:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    1ca0:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ca8:	7e 81       	ldd	r23, Y+6	; 0x06
    1caa:	0e 94 46 1a 	call	0x348c	; 0x348c <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    1cae:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb2:	2c 96       	adiw	r28, 0x0c	; 12
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	ff 90       	pop	r15
    1cc8:	ef 90       	pop	r14
    1cca:	df 90       	pop	r13
    1ccc:	cf 90       	pop	r12
    1cce:	bf 90       	pop	r11
    1cd0:	af 90       	pop	r10
    1cd2:	9f 90       	pop	r9
    1cd4:	8f 90       	pop	r8
    1cd6:	7f 90       	pop	r7
    1cd8:	6f 90       	pop	r6
    1cda:	5f 90       	pop	r5
    1cdc:	4f 90       	pop	r4
    1cde:	3f 90       	pop	r3
    1ce0:	2f 90       	pop	r2
    1ce2:	08 95       	ret

00001ce4 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1ce4:	2f 92       	push	r2
    1ce6:	3f 92       	push	r3
    1ce8:	4f 92       	push	r4
    1cea:	5f 92       	push	r5
    1cec:	6f 92       	push	r6
    1cee:	7f 92       	push	r7
    1cf0:	8f 92       	push	r8
    1cf2:	9f 92       	push	r9
    1cf4:	af 92       	push	r10
    1cf6:	bf 92       	push	r11
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	c0 54       	subi	r28, 0x40	; 64
    1d0e:	d0 40       	sbci	r29, 0x00	; 0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    1d1c:	de 01       	movw	r26, r28
    1d1e:	11 96       	adiw	r26, 0x01	; 1
    1d20:	e0 e2       	ldi	r30, 0x20	; 32
    1d22:	f2 e0       	ldi	r31, 0x02	; 2
    1d24:	80 e3       	ldi	r24, 0x30	; 48
    1d26:	01 90       	ld	r0, Z+
    1d28:	0d 92       	st	X+, r0
    1d2a:	81 50       	subi	r24, 0x01	; 1
    1d2c:	e1 f7       	brne	.-8      	; 0x1d26 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    1d2e:	0e 94 8f 0c 	call	0x191e	; 0x191e <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1d32:	0f 30       	cpi	r16, 0x0F	; 15
    1d34:	11 f5       	brne	.+68     	; 0x1d7a <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    1d36:	40 90 9b 03 	lds	r4, 0x039B
    1d3a:	50 90 9c 03 	lds	r5, 0x039C
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1d3e:	0f 2e       	mov	r0, r31
    1d40:	f6 ee       	ldi	r31, 0xE6	; 230
    1d42:	8f 2e       	mov	r8, r31
    1d44:	f1 e0       	ldi	r31, 0x01	; 1
    1d46:	9f 2e       	mov	r9, r31
    1d48:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    1d4a:	0f 2e       	mov	r0, r31
    1d4c:	fe ed       	ldi	r31, 0xDE	; 222
    1d4e:	2f 2e       	mov	r2, r31
    1d50:	f1 e0       	ldi	r31, 0x01	; 1
    1d52:	3f 2e       	mov	r3, r31
    1d54:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    1d56:	23 ee       	ldi	r18, 0xE3	; 227
    1d58:	31 e0       	ldi	r19, 0x01	; 1
    1d5a:	3a ab       	sts	0x5a, r19
    1d5c:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1d5e:	0f 2e       	mov	r0, r31
    1d60:	fc ed       	ldi	r31, 0xDC	; 220
    1d62:	6f 2e       	mov	r6, r31
    1d64:	f1 e0       	ldi	r31, 0x01	; 1
    1d66:	7f 2e       	mov	r7, r31
    1d68:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    1d6a:	07 e7       	ldi	r16, 0x77	; 119
    1d6c:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    1d6e:	cc 24       	eor	r12, r12
    1d70:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    1d72:	ee 24       	eor	r14, r14
    1d74:	68 94       	set
    1d76:	e1 f8       	bld	r14, 1
    1d78:	22 c0       	rjmp	.+68     	; 0x1dbe <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    1d7a:	40 90 99 03 	lds	r4, 0x0399
    1d7e:	50 90 9a 03 	lds	r5, 0x039A
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1d82:	0f 2e       	mov	r0, r31
    1d84:	f5 ee       	ldi	r31, 0xE5	; 229
    1d86:	8f 2e       	mov	r8, r31
    1d88:	f1 e0       	ldi	r31, 0x01	; 1
    1d8a:	9f 2e       	mov	r9, r31
    1d8c:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    1d8e:	0f 2e       	mov	r0, r31
    1d90:	f7 ed       	ldi	r31, 0xD7	; 215
    1d92:	2f 2e       	mov	r2, r31
    1d94:	f1 e0       	ldi	r31, 0x01	; 1
    1d96:	3f 2e       	mov	r3, r31
    1d98:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    1d9a:	44 ee       	ldi	r20, 0xE4	; 228
    1d9c:	51 e0       	ldi	r21, 0x01	; 1
    1d9e:	5a ab       	sts	0x5a, r21
    1da0:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1da2:	0f 2e       	mov	r0, r31
    1da4:	fd ed       	ldi	r31, 0xDD	; 221
    1da6:	6f 2e       	mov	r6, r31
    1da8:	f1 e0       	ldi	r31, 0x01	; 1
    1daa:	7f 2e       	mov	r7, r31
    1dac:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    1dae:	05 e5       	ldi	r16, 0x55	; 85
    1db0:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    1db2:	cc 24       	eor	r12, r12
    1db4:	68 94       	set
    1db6:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    1db8:	ee 24       	eor	r14, r14
    1dba:	68 94       	set
    1dbc:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    1dbe:	c3 01       	movw	r24, r6
    1dc0:	b2 01       	movw	r22, r4
    1dc2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    1dc6:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1dc8:	ed ed       	ldi	r30, 0xDD	; 221
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	80 64       	ori	r24, 0x40	; 64
    1dd0:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8f 7b       	andi	r24, 0xBF	; 191
    1dd6:	80 83       	st	Z, r24
		DATA_BUS = 0;
    1dd8:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    1dda:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	80 93 a2 03 	sts	0x03A2, r24
		
		compare_match_counter = 0;	
    1de2:	10 92 9d 03 	sts	0x039D, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1de6:	8c 2d       	mov	r24, r12
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	24 e6       	ldi	r18, 0x64	; 100
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	82 9f       	mul	r24, r18
    1df0:	d0 01       	movw	r26, r0
    1df2:	83 9f       	mul	r24, r19
    1df4:	b0 0d       	add	r27, r0
    1df6:	92 9f       	mul	r25, r18
    1df8:	b0 0d       	add	r27, r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	bc ab       	sts	0x5c, r27
    1dfe:	ab ab       	sts	0x5b, r26
    1e00:	fe 01       	movw	r30, r28
    1e02:	31 96       	adiw	r30, 0x01	; 1
    1e04:	fc af       	sts	0x7c, r31
    1e06:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    1e08:	98 01       	movw	r18, r16
    1e0a:	2e 5f       	subi	r18, 0xFE	; 254
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	21 96       	adiw	r28, 0x01	; 1
    1e10:	3f af       	sts	0x7f, r19
    1e12:	2e af       	sts	0x7e, r18
    1e14:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1e16:	1e ae       	sts	0xbe, r17
    1e18:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1e1a:	0f 2e       	mov	r0, r31
    1e1c:	f8 ed       	ldi	r31, 0xD8	; 216
    1e1e:	ef 2e       	mov	r14, r31
    1e20:	f1 e0       	ldi	r31, 0x01	; 1
    1e22:	ff 2e       	mov	r15, r31
    1e24:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    1e26:	0f 2e       	mov	r0, r31
    1e28:	f4 ed       	ldi	r31, 0xD4	; 212
    1e2a:	cf 2e       	mov	r12, r31
    1e2c:	f1 e0       	ldi	r31, 0x01	; 1
    1e2e:	df 2e       	mov	r13, r31
    1e30:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1e32:	0f 2e       	mov	r0, r31
    1e34:	fa ec       	ldi	r31, 0xCA	; 202
    1e36:	af 2e       	mov	r10, r31
    1e38:	f1 e0       	ldi	r31, 0x01	; 1
    1e3a:	bf 2e       	mov	r11, r31
    1e3c:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    1e3e:	eb ad       	sts	0x6b, r30
    1e40:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    1e42:	80 81       	ld	r24, Z
    1e44:	80 93 a2 03 	sts	0x03A2, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1e48:	84 b5       	in	r24, 0x24	; 36
    1e4a:	8f 60       	ori	r24, 0x0F	; 15
    1e4c:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    1e52:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    1e54:	4d ad       	sts	0x6d, r20
    1e56:	5e ad       	sts	0x6e, r21
    1e58:	43 30       	cpi	r20, 0x03	; 3
    1e5a:	51 05       	cpc	r21, r1
    1e5c:	24 f4       	brge	.+8      	; 0x1e66 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	80 93 a1 03 	sts	0x03A1, r24
    1e64:	03 c0       	rjmp	.+6      	; 0x1e6c <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    1e66:	82 e0       	ldi	r24, 0x02	; 2
    1e68:	80 93 a1 03 	sts	0x03A1, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    1e6c:	81 81       	ldd	r24, Z+1	; 0x01
    1e6e:	92 81       	ldd	r25, Z+2	; 0x02
    1e70:	9a af       	sts	0x7a, r25
    1e72:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1e74:	ad e0       	ldi	r26, 0x0D	; 13
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	be ab       	sts	0x5e, r27
    1e7a:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    1e7c:	00 e0       	ldi	r16, 0x00	; 0
    1e7e:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    1e80:	e1 e0       	ldi	r30, 0x01	; 1
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	0d a8       	sts	0x8d, r16
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <tune_8ths+0x1a8>
    1e88:	ee 0f       	add	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	0a 94       	dec	r0
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <tune_8ths+0x1a4>
    1e90:	f8 af       	sts	0x78, r31
    1e92:	ef ab       	sts	0x5f, r30
    1e94:	0e 2b       	or	r16, r30
    1e96:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    1e98:	ae e6       	ldi	r26, 0x6E	; 110
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	8c 91       	ld	r24, X
    1e9e:	8d 7f       	andi	r24, 0xFD	; 253
    1ea0:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1ea2:	c4 01       	movw	r24, r8
    1ea4:	b8 01       	movw	r22, r16
    1ea6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
    1eaa:	e3 ef       	ldi	r30, 0xF3	; 243
    1eac:	f1 e0       	ldi	r31, 0x01	; 1
    1eae:	31 97       	sbiw	r30, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <tune_8ths+0x1ca>
    1eb2:	00 c0       	rjmp	.+0      	; 0x1eb4 <tune_8ths+0x1d0>
    1eb4:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1eb6:	ae e6       	ldi	r26, 0x6E	; 110
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	8c 91       	ld	r24, X
    1ebc:	82 60       	ori	r24, 0x02	; 2
    1ebe:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    1ec0:	10 92 a0 03 	sts	0x03A0, r1
				period_counter = 0;
    1ec4:	10 92 a3 03 	sts	0x03A3, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    1ec8:	e8 e1       	ldi	r30, 0x18	; 24
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	2f e0       	ldi	r18, 0x0F	; 15
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	a8 95       	wdr
    1ed4:	e0 93 60 00 	sts	0x0060, r30
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    1ede:	80 91 a0 03 	lds	r24, 0x03A0
    1ee2:	88 23       	and	r24, r24
    1ee4:	81 f5       	brne	.+96     	; 0x1f46 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1ee6:	80 91 a2 03 	lds	r24, 0x03A2
    1eea:	4b a9       	sts	0x4b, r20
    1eec:	5c a9       	sts	0x4c, r21
    1eee:	48 0f       	add	r20, r24
    1ef0:	51 1d       	adc	r21, r1
    1ef2:	ca 01       	movw	r24, r20
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    1efa:	c3 01       	movw	r24, r6
    1efc:	b2 01       	movw	r22, r4
    1efe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1f02:	c4 01       	movw	r24, r8
    1f04:	b8 01       	movw	r22, r16
    1f06:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1f0a:	c7 01       	movw	r24, r14
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	70 e0       	ldi	r23, 0x00	; 0
    1f10:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    1f14:	c6 01       	movw	r24, r12
    1f16:	6f ef       	ldi	r22, 0xFF	; 255
    1f18:	7f e3       	ldi	r23, 0x3F	; 63
    1f1a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1f1e:	c5 01       	movw	r24, r10
    1f20:	6f ef       	ldi	r22, 0xFF	; 255
    1f22:	7f e3       	ldi	r23, 0x3F	; 63
    1f24:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    1f28:	c1 01       	movw	r24, r2
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	70 e2       	ldi	r23, 0x20	; 32
    1f2e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    1f32:	89 a9       	sts	0x49, r24
    1f34:	9a a9       	sts	0x4a, r25
    1f36:	6f ef       	ldi	r22, 0xFF	; 255
    1f38:	7f e3       	ldi	r23, 0x3F	; 63
    1f3a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    1f3e:	80 91 a0 03 	lds	r24, 0x03A0
    1f42:	88 23       	and	r24, r24
    1f44:	81 f2       	breq	.-96     	; 0x1ee6 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    1f46:	58 e1       	ldi	r21, 0x18	; 24
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	50 93 60 00 	sts	0x0060, r21
    1f50:	10 92 60 00 	sts	0x0060, r1
    1f54:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    1f56:	80 91 9e 03 	lds	r24, 0x039E
    1f5a:	90 91 9f 03 	lds	r25, 0x039F
    1f5e:	a9 ad       	sts	0x69, r26
    1f60:	ba ad       	sts	0x6a, r27
    1f62:	a8 17       	cp	r26, r24
    1f64:	b9 07       	cpc	r27, r25
    1f66:	50 f0       	brcs	.+20     	; 0x1f7c <tune_8ths+0x298>
    1f68:	80 91 9f 02 	lds	r24, 0x029F
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	31 f4       	brne	.+12     	; 0x1f7c <tune_8ths+0x298>
    1f70:	8f a9       	sts	0x4f, r24
    1f72:	98 ad       	sts	0x68, r25
    1f74:	80 95       	com	r24
    1f76:	90 95       	com	r25
    1f78:	08 23       	and	r16, r24
    1f7a:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    1f7c:	80 91 9e 03 	lds	r24, 0x039E
    1f80:	90 91 9f 03 	lds	r25, 0x039F
    1f84:	e9 ad       	sts	0x69, r30
    1f86:	fa ad       	sts	0x6a, r31
    1f88:	8e 17       	cp	r24, r30
    1f8a:	9f 07       	cpc	r25, r31
    1f8c:	21 f4       	brne	.+8      	; 0x1f96 <tune_8ths+0x2b2>
    1f8e:	80 91 9f 02 	lds	r24, 0x029F
    1f92:	81 30       	cpi	r24, 0x01	; 1
    1f94:	71 f0       	breq	.+28     	; 0x1fb2 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    1f96:	f1 e0       	ldi	r31, 0x01	; 1
    1f98:	f0 93 9f 02 	sts	0x029F, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1f9c:	2d a9       	sts	0x4d, r18
    1f9e:	3e a9       	sts	0x4e, r19
    1fa0:	21 50       	subi	r18, 0x01	; 1
    1fa2:	30 40       	sbci	r19, 0x00	; 0
    1fa4:	3e ab       	sts	0x5e, r19
    1fa6:	2d ab       	sts	0x5d, r18
    1fa8:	4f ef       	ldi	r20, 0xFF	; 255
    1faa:	2f 3f       	cpi	r18, 0xFF	; 255
    1fac:	34 07       	cpc	r19, r20
    1fae:	09 f0       	breq	.+2      	; 0x1fb2 <tune_8ths+0x2ce>
    1fb0:	67 cf       	rjmp	.-306    	; 0x1e80 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    1fb2:	21 96       	adiw	r28, 0x01	; 1
    1fb4:	ae ad       	sts	0x6e, r26
    1fb6:	bf ad       	sts	0x6f, r27
    1fb8:	21 97       	sbiw	r28, 0x01	; 1
    1fba:	0d 93       	st	X+, r16
    1fbc:	1d 93       	st	X+, r17
    1fbe:	21 96       	adiw	r28, 0x01	; 1
    1fc0:	bf af       	sts	0x7f, r27
    1fc2:	ae af       	sts	0x7e, r26
    1fc4:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    1fc6:	ee e6       	ldi	r30, 0x6E	; 110
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8d 7f       	andi	r24, 0xFD	; 253
    1fce:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    1fd0:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1fd2:	2d ad       	sts	0x6d, r18
    1fd4:	3e ad       	sts	0x6e, r19
    1fd6:	2f 5f       	subi	r18, 0xFF	; 255
    1fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fda:	3e af       	sts	0x7e, r19
    1fdc:	2d af       	sts	0x7d, r18
    1fde:	4b ad       	sts	0x6b, r20
    1fe0:	5c ad       	sts	0x6c, r21
    1fe2:	4d 5f       	subi	r20, 0xFD	; 253
    1fe4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe6:	5c af       	sts	0x7c, r21
    1fe8:	4b af       	sts	0x7b, r20
    1fea:	20 31       	cpi	r18, 0x10	; 16
    1fec:	31 05       	cpc	r19, r1
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <tune_8ths+0x30e>
    1ff0:	26 cf       	rjmp	.-436    	; 0x1e3e <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		
		PORTF &= ~(1<<GATE); //turn gate off
    1ff2:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    1ff4:	c0 5c       	subi	r28, 0xC0	; 192
    1ff6:	df 4f       	sbci	r29, 0xFF	; 255
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	df 90       	pop	r13
    2010:	cf 90       	pop	r12
    2012:	bf 90       	pop	r11
    2014:	af 90       	pop	r10
    2016:	9f 90       	pop	r9
    2018:	8f 90       	pop	r8
    201a:	7f 90       	pop	r7
    201c:	6f 90       	pop	r6
    201e:	5f 90       	pop	r5
    2020:	4f 90       	pop	r4
    2022:	3f 90       	pop	r3
    2024:	2f 90       	pop	r2
    2026:	08 95       	ret

00002028 <tune_filter>:
	
void tune_filter(void) {
    2028:	2f 92       	push	r2
    202a:	3f 92       	push	r3
    202c:	4f 92       	push	r4
    202e:	5f 92       	push	r5
    2030:	6f 92       	push	r6
    2032:	7f 92       	push	r7
    2034:	8f 92       	push	r8
    2036:	9f 92       	push	r9
    2038:	af 92       	push	r10
    203a:	bf 92       	push	r11
    203c:	cf 92       	push	r12
    203e:	df 92       	push	r13
    2040:	ef 92       	push	r14
    2042:	ff 92       	push	r15
    2044:	0f 93       	push	r16
    2046:	1f 93       	push	r17
    2048:	cf 93       	push	r28
    204a:	df 93       	push	r29
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	e9 97       	sbiw	r28, 0x39	; 57
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    205c:	de 01       	movw	r26, r28
    205e:	11 96       	adiw	r26, 0x01	; 1
    2060:	e0 e5       	ldi	r30, 0x50	; 80
    2062:	f2 e0       	ldi	r31, 0x02	; 2
    2064:	8d e2       	ldi	r24, 0x2D	; 45
    2066:	01 90       	ld	r0, Z+
    2068:	0d 92       	st	X+, r0
    206a:	81 50       	subi	r24, 0x01	; 1
    206c:	e1 f7       	brne	.-8      	; 0x2066 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    206e:	88 ed       	ldi	r24, 0xD8	; 216
    2070:	91 e0       	ldi	r25, 0x01	; 1
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    207a:	81 ee       	ldi	r24, 0xE1	; 225
    207c:	91 e0       	ldi	r25, 0x01	; 1
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2086:	82 ee       	ldi	r24, 0xE2	; 226
    2088:	91 e0       	ldi	r25, 0x01	; 1
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2092:	82 ea       	ldi	r24, 0xA2	; 162
    2094:	92 e0       	ldi	r25, 0x02	; 2
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    209e:	8a ed       	ldi	r24, 0xDA	; 218
    20a0:	91 e0       	ldi	r25, 0x01	; 1
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    20aa:	8f ed       	ldi	r24, 0xDF	; 223
    20ac:	91 e0       	ldi	r25, 0x01	; 1
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    20b6:	80 ee       	ldi	r24, 0xE0	; 224
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    20c2:	81 ed       	ldi	r24, 0xD1	; 209
    20c4:	91 e0       	ldi	r25, 0x01	; 1
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    20ce:	86 ed       	ldi	r24, 0xD6	; 214
    20d0:	91 e0       	ldi	r25, 0x01	; 1
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    20da:	82 ed       	ldi	r24, 0xD2	; 210
    20dc:	91 e0       	ldi	r25, 0x01	; 1
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    20e6:	83 ed       	ldi	r24, 0xD3	; 211
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	70 e0       	ldi	r23, 0x00	; 0
    20ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    20f2:	84 ed       	ldi	r24, 0xD4	; 212
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	6f ef       	ldi	r22, 0xFF	; 255
    20f8:	7f e3       	ldi	r23, 0x3F	; 63
    20fa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    20fe:	85 ed       	ldi	r24, 0xD5	; 213
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	6f ef       	ldi	r22, 0xFF	; 255
    2104:	7f e3       	ldi	r23, 0x3F	; 63
    2106:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    210a:	89 ed       	ldi	r24, 0xD9	; 217
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2116:	8e ec       	ldi	r24, 0xCE	; 206
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	60 e0       	ldi	r22, 0x00	; 0
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2122:	8c ec       	ldi	r24, 0xCC	; 204
    2124:	91 e0       	ldi	r25, 0x01	; 1
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    212e:	8a ec       	ldi	r24, 0xCA	; 202
    2130:	91 e0       	ldi	r25, 0x01	; 1
    2132:	6f ef       	ldi	r22, 0xFF	; 255
    2134:	7f e3       	ldi	r23, 0x3F	; 63
    2136:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    213a:	88 ec       	ldi	r24, 0xC8	; 200
    213c:	91 e0       	ldi	r25, 0x01	; 1
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    2146:	80 ed       	ldi	r24, 0xD0	; 208
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2152:	83 ee       	ldi	r24, 0xE3	; 227
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    215e:	84 ee       	ldi	r24, 0xE4	; 228
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    216a:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    216c:	ed ed       	ldi	r30, 0xDD	; 221
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	80 64       	ori	r24, 0x40	; 64
    2174:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2176:	80 81       	ld	r24, Z
    2178:	8f 7b       	andi	r24, 0xBF	; 191
    217a:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	80 93 a2 03 	sts	0x03A2, r24
	PORTF |= (1<<GATE); //turn gate on
    2182:	89 9a       	sbi	0x11, 1	; 17
    2184:	9e 01       	movw	r18, r28
    2186:	2f 5f       	subi	r18, 0xFF	; 255
    2188:	3f 4f       	sbci	r19, 0xFF	; 255
    218a:	3d ab       	sts	0x5d, r19
    218c:	2c ab       	sts	0x5c, r18
    218e:	87 e3       	ldi	r24, 0x37	; 55
    2190:	93 e0       	ldi	r25, 0x03	; 3
    2192:	99 af       	sts	0x79, r25
    2194:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2196:	1f aa       	sts	0x9f, r17
    2198:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    219a:	0f 2e       	mov	r0, r31
    219c:	f4 ed       	ldi	r31, 0xD4	; 212
    219e:	af 2e       	mov	r10, r31
    21a0:	f1 e0       	ldi	r31, 0x01	; 1
    21a2:	bf 2e       	mov	r11, r31
    21a4:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    21a6:	0f 2e       	mov	r0, r31
    21a8:	f8 ed       	ldi	r31, 0xD8	; 216
    21aa:	6f 2e       	mov	r6, r31
    21ac:	f1 e0       	ldi	r31, 0x01	; 1
    21ae:	7f 2e       	mov	r7, r31
    21b0:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    21b2:	0f 2e       	mov	r0, r31
    21b4:	f5 ed       	ldi	r31, 0xD5	; 213
    21b6:	4f 2e       	mov	r4, r31
    21b8:	f1 e0       	ldi	r31, 0x01	; 1
    21ba:	5f 2e       	mov	r5, r31
    21bc:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    21be:	0f 2e       	mov	r0, r31
    21c0:	fa ec       	ldi	r31, 0xCA	; 202
    21c2:	2f 2e       	mov	r2, r31
    21c4:	f1 e0       	ldi	r31, 0x01	; 1
    21c6:	3f 2e       	mov	r3, r31
    21c8:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    21ca:	ac a9       	sts	0x4c, r26
    21cc:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    21ce:	8c 91       	ld	r24, X
    21d0:	80 93 a2 03 	sts	0x03A2, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    21d4:	84 b5       	in	r24, 0x24	; 36
    21d6:	8f 60       	ori	r24, 0x0F	; 15
    21d8:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    21de:	ee e6       	ldi	r30, 0x6E	; 110
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	82 60       	ori	r24, 0x02	; 2
    21e6:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    21e8:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    21ea:	ee a9       	sts	0x4e, r30
    21ec:	ff a9       	sts	0x4f, r31
    21ee:	e2 30       	cpi	r30, 0x02	; 2
    21f0:	f1 05       	cpc	r31, r1
    21f2:	24 f4       	brge	.+8      	; 0x21fc <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    21f4:	83 e0       	ldi	r24, 0x03	; 3
    21f6:	80 93 a1 03 	sts	0x03A1, r24
    21fa:	03 c0       	rjmp	.+6      	; 0x2202 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	80 93 a1 03 	sts	0x03A1, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    2202:	11 96       	adiw	r26, 0x01	; 1
    2204:	2d 91       	ld	r18, X+
    2206:	3c 91       	ld	r19, X
    2208:	12 97       	sbiw	r26, 0x02	; 2
    220a:	3b ab       	sts	0x5b, r19
    220c:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    220e:	8d e0       	ldi	r24, 0x0D	; 13
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9f a7       	lds	r25, 0x7f
    2214:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2216:	ee 24       	eor	r14, r14
    2218:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    221a:	0f 2e       	mov	r0, r31
    221c:	f1 ed       	ldi	r31, 0xD1	; 209
    221e:	cf 2e       	mov	r12, r31
    2220:	f1 e0       	ldi	r31, 0x01	; 1
    2222:	df 2e       	mov	r13, r31
    2224:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2226:	0f 2e       	mov	r0, r31
    2228:	f6 ed       	ldi	r31, 0xD6	; 214
    222a:	8f 2e       	mov	r8, r31
    222c:	f1 e0       	ldi	r31, 0x01	; 1
    222e:	9f 2e       	mov	r9, r31
    2230:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	fc 01       	movw	r30, r24
    2238:	0e a4       	lds	r16, 0xae
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <tune_filter+0x218>
    223c:	ee 0f       	add	r30, r30
    223e:	ff 1f       	adc	r31, r31
    2240:	0a 94       	dec	r0
    2242:	e2 f7       	brpl	.-8      	; 0x223c <tune_filter+0x214>
    2244:	f9 ab       	sts	0x59, r31
    2246:	e8 ab       	sts	0x58, r30
    2248:	ee 2a       	or	r14, r30
    224a:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    224c:	c5 01       	movw	r24, r10
    224e:	b7 01       	movw	r22, r14
    2250:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
    2254:	10 92 a0 03 	sts	0x03A0, r1
			period_counter = 0;
    2258:	10 92 a3 03 	sts	0x03A3, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    225c:	8f e0       	ldi	r24, 0x0F	; 15
    225e:	28 e1       	ldi	r18, 0x18	; 24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	a8 95       	wdr
    2268:	20 93 60 00 	sts	0x0060, r18
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2272:	80 91 a0 03 	lds	r24, 0x03A0
    2276:	88 23       	and	r24, r24
    2278:	b1 f5       	brne	.+108    	; 0x22e6 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    227a:	02 ed       	ldi	r16, 0xD2	; 210
    227c:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    227e:	80 91 a2 03 	lds	r24, 0x03A2
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	84 5d       	subi	r24, 0xD4	; 212
    2286:	9e 4f       	sbci	r25, 0xFE	; 254
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    228e:	c5 01       	movw	r24, r10
    2290:	b7 01       	movw	r22, r14
    2292:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2296:	c3 01       	movw	r24, r6
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    22a0:	c2 01       	movw	r24, r4
    22a2:	6f ef       	ldi	r22, 0xFF	; 255
    22a4:	7f e3       	ldi	r23, 0x3F	; 63
    22a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    22aa:	c1 01       	movw	r24, r2
    22ac:	6f ef       	ldi	r22, 0xFF	; 255
    22ae:	7f e3       	ldi	r23, 0x3F	; 63
    22b0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    22b4:	8e ec       	ldi	r24, 0xCE	; 206
    22b6:	91 e0       	ldi	r25, 0x01	; 1
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	70 e0       	ldi	r23, 0x00	; 0
    22bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    22c0:	c6 01       	movw	r24, r12
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    22ca:	c4 01       	movw	r24, r8
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    22d4:	c8 01       	movw	r24, r16
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	70 e0       	ldi	r23, 0x00	; 0
    22da:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    22de:	80 91 a0 03 	lds	r24, 0x03A0
    22e2:	88 23       	and	r24, r24
    22e4:	61 f2       	breq	.-104    	; 0x227e <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    22e6:	88 e1       	ldi	r24, 0x18	; 24
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	80 93 60 00 	sts	0x0060, r24
    22f0:	10 92 60 00 	sts	0x0060, r1
    22f4:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    22f6:	80 91 9e 03 	lds	r24, 0x039E
    22fa:	90 91 9f 03 	lds	r25, 0x039F
    22fe:	2a a9       	sts	0x4a, r18
    2300:	3b a9       	sts	0x4b, r19
    2302:	28 17       	cp	r18, r24
    2304:	39 07       	cpc	r19, r25
    2306:	50 f0       	brcs	.+20     	; 0x231c <tune_filter+0x2f4>
    2308:	80 91 9f 02 	lds	r24, 0x029F
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	31 f4       	brne	.+12     	; 0x231c <tune_filter+0x2f4>
    2310:	88 a9       	sts	0x48, r24
    2312:	99 a9       	sts	0x49, r25
    2314:	80 95       	com	r24
    2316:	90 95       	com	r25
    2318:	e8 22       	and	r14, r24
    231a:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    231c:	80 91 9e 03 	lds	r24, 0x039E
    2320:	90 91 9f 03 	lds	r25, 0x039F
    2324:	ea a9       	sts	0x4a, r30
    2326:	fb a9       	sts	0x4b, r31
    2328:	8e 17       	cp	r24, r30
    232a:	9f 07       	cpc	r25, r31
    232c:	21 f4       	brne	.+8      	; 0x2336 <tune_filter+0x30e>
    232e:	80 91 9f 02 	lds	r24, 0x029F
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	71 f0       	breq	.+28     	; 0x2352 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	80 93 9f 02 	sts	0x029F, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    233c:	2e a5       	lds	r18, 0x6e
    233e:	3f a5       	lds	r19, 0x6f
    2340:	21 50       	subi	r18, 0x01	; 1
    2342:	30 40       	sbci	r19, 0x00	; 0
    2344:	3f a7       	lds	r19, 0x7f
    2346:	2e a7       	lds	r18, 0x7e
    2348:	8f ef       	ldi	r24, 0xFF	; 255
    234a:	2f 3f       	cpi	r18, 0xFF	; 255
    234c:	38 07       	cpc	r19, r24
    234e:	09 f0       	breq	.+2      	; 0x2352 <tune_filter+0x32a>
    2350:	70 cf       	rjmp	.-288    	; 0x2232 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2352:	ee a9       	sts	0x4e, r30
    2354:	ff a9       	sts	0x4f, r31
    2356:	31 96       	adiw	r30, 0x01	; 1
    2358:	ff ab       	sts	0x5f, r31
    235a:	ee ab       	sts	0x5e, r30
    235c:	c7 01       	movw	r24, r14
    235e:	80 96       	adiw	r24, 0x20	; 32
    2360:	e8 ad       	sts	0x68, r30
    2362:	f9 ad       	sts	0x69, r31
    2364:	81 93       	st	Z+, r24
    2366:	91 93       	st	Z+, r25
    2368:	f9 af       	sts	0x79, r31
    236a:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    236c:	ee e6       	ldi	r30, 0x6E	; 110
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	8d 7f       	andi	r24, 0xFD	; 253
    2374:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2376:	14 bc       	out	0x24, r1	; 36
    2378:	2c a9       	sts	0x4c, r18
    237a:	3d a9       	sts	0x4d, r19
    237c:	2d 5f       	subi	r18, 0xFD	; 253
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	3d ab       	sts	0x5d, r19
    2382:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2384:	8e a9       	sts	0x4e, r24
    2386:	9f a9       	sts	0x4f, r25
    2388:	8f 30       	cpi	r24, 0x0F	; 15
    238a:	91 05       	cpc	r25, r1
    238c:	09 f0       	breq	.+2      	; 0x2390 <tune_filter+0x368>
    238e:	1d cf       	rjmp	.-454    	; 0x21ca <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2390:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2392:	e9 96       	adiw	r28, 0x39	; 57
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	df 91       	pop	r29
    23a0:	cf 91       	pop	r28
    23a2:	1f 91       	pop	r17
    23a4:	0f 91       	pop	r16
    23a6:	ff 90       	pop	r15
    23a8:	ef 90       	pop	r14
    23aa:	df 90       	pop	r13
    23ac:	cf 90       	pop	r12
    23ae:	bf 90       	pop	r11
    23b0:	af 90       	pop	r10
    23b2:	9f 90       	pop	r9
    23b4:	8f 90       	pop	r8
    23b6:	7f 90       	pop	r7
    23b8:	6f 90       	pop	r6
    23ba:	5f 90       	pop	r5
    23bc:	4f 90       	pop	r4
    23be:	3f 90       	pop	r3
    23c0:	2f 90       	pop	r2
    23c2:	08 95       	ret

000023c4 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    23c4:	85 e3       	ldi	r24, 0x35	; 53
    23c6:	93 e0       	ldi	r25, 0x03	; 3
    23c8:	6c e0       	ldi	r22, 0x0C	; 12
    23ca:	76 e0       	ldi	r23, 0x06	; 6
    23cc:	40 e2       	ldi	r20, 0x20	; 32
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	0e 94 25 1a 	call	0x344a	; 0x344a <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    23d4:	87 e7       	ldi	r24, 0x77	; 119
    23d6:	93 e0       	ldi	r25, 0x03	; 3
    23d8:	6e e4       	ldi	r22, 0x4E	; 78
    23da:	76 e0       	ldi	r23, 0x06	; 6
    23dc:	42 e2       	ldi	r20, 0x22	; 34
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	0e 94 25 1a 	call	0x344a	; 0x344a <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    23e4:	85 e5       	ldi	r24, 0x55	; 85
    23e6:	93 e0       	ldi	r25, 0x03	; 3
    23e8:	6c e2       	ldi	r22, 0x2C	; 44
    23ea:	76 e0       	ldi	r23, 0x06	; 6
    23ec:	42 e2       	ldi	r20, 0x22	; 34
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	0e 94 25 1a 	call	0x344a	; 0x344a <__eeupd_block_m6450a>
	
	
}
    23f4:	08 95       	ret

000023f6 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    23f6:	82 e7       	ldi	r24, 0x72	; 114
    23f8:	96 e0       	ldi	r25, 0x06	; 6
    23fa:	0e 94 1f 1a 	call	0x343e	; 0x343e <__eerd_word_m6450a>
    23fe:	90 93 9c 03 	sts	0x039C, r25
    2402:	80 93 9b 03 	sts	0x039B, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2406:	80 e7       	ldi	r24, 0x70	; 112
    2408:	96 e0       	ldi	r25, 0x06	; 6
    240a:	0e 94 1f 1a 	call	0x343e	; 0x343e <__eerd_word_m6450a>
    240e:	90 93 9a 03 	sts	0x039A, r25
    2412:	80 93 99 03 	sts	0x0399, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2416:	87 e7       	ldi	r24, 0x77	; 119
    2418:	93 e0       	ldi	r25, 0x03	; 3
    241a:	6e e4       	ldi	r22, 0x4E	; 78
    241c:	76 e0       	ldi	r23, 0x06	; 6
    241e:	42 e2       	ldi	r20, 0x22	; 34
    2420:	50 e0       	ldi	r21, 0x00	; 0
    2422:	0e 94 0f 1a 	call	0x341e	; 0x341e <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2426:	85 e5       	ldi	r24, 0x55	; 85
    2428:	93 e0       	ldi	r25, 0x03	; 3
    242a:	6c e2       	ldi	r22, 0x2C	; 44
    242c:	76 e0       	ldi	r23, 0x06	; 6
    242e:	42 e2       	ldi	r20, 0x22	; 34
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	0e 94 0f 1a 	call	0x341e	; 0x341e <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2436:	85 e3       	ldi	r24, 0x35	; 53
    2438:	93 e0       	ldi	r25, 0x03	; 3
    243a:	6c e0       	ldi	r22, 0x0C	; 12
    243c:	76 e0       	ldi	r23, 0x06	; 6
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	0e 94 0f 1a 	call	0x341e	; 0x341e <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2446:	08 95       	ret

00002448 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2448:	98 2f       	mov	r25, r24
    244a:	96 95       	lsr	r25
    244c:	96 95       	lsr	r25
    244e:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2450:	29 2f       	mov	r18, r25
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	f9 01       	movw	r30, r18
    2456:	31 97       	sbiw	r30, 0x01	; 1
    2458:	ee 0f       	add	r30, r30
    245a:	ff 1f       	adc	r31, r31
    245c:	e6 0f       	add	r30, r22
    245e:	f7 1f       	adc	r31, r23
    2460:	01 90       	ld	r0, Z+
    2462:	f0 81       	ld	r31, Z
    2464:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2466:	22 0f       	add	r18, r18
    2468:	33 1f       	adc	r19, r19
    246a:	26 0f       	add	r18, r22
    246c:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    246e:	d9 01       	movw	r26, r18
    2470:	4d 91       	ld	r20, X+
    2472:	5c 91       	ld	r21, X
    2474:	11 97       	sbiw	r26, 0x01	; 1
    2476:	4e 1b       	sub	r20, r30
    2478:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    247a:	99 0f       	add	r25, r25
    247c:	99 0f       	add	r25, r25
    247e:	99 0f       	add	r25, r25
    2480:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	48 9f       	mul	r20, r24
    2486:	90 01       	movw	r18, r0
    2488:	49 9f       	mul	r20, r25
    248a:	30 0d       	add	r19, r0
    248c:	58 9f       	mul	r21, r24
    248e:	30 0d       	add	r19, r0
    2490:	11 24       	eor	r1, r1
    2492:	36 95       	lsr	r19
    2494:	27 95       	ror	r18
    2496:	36 95       	lsr	r19
    2498:	27 95       	ror	r18
    249a:	36 95       	lsr	r19
    249c:	27 95       	ror	r18
    249e:	e2 0f       	add	r30, r18
    24a0:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    24a2:	8e 2f       	mov	r24, r30
    24a4:	9f 2f       	mov	r25, r31
    24a6:	08 95       	ret

000024a8 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	a2 97       	sbiw	r28, 0x22	; 34
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    24bc:	de 01       	movw	r26, r28
    24be:	11 96       	adiw	r26, 0x01	; 1
    24c0:	ed e7       	ldi	r30, 0x7D	; 125
    24c2:	f2 e0       	ldi	r31, 0x02	; 2
    24c4:	82 e2       	ldi	r24, 0x22	; 34
    24c6:	01 90       	ld	r0, Z+
    24c8:	0d 92       	st	X+, r0
    24ca:	81 50       	subi	r24, 0x01	; 1
    24cc:	e1 f7       	brne	.-8      	; 0x24c6 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    24ce:	a7 e7       	ldi	r26, 0x77	; 119
    24d0:	b3 e0       	ldi	r27, 0x03	; 3
    24d2:	fe 01       	movw	r30, r28
    24d4:	31 96       	adiw	r30, 0x01	; 1
    24d6:	82 e2       	ldi	r24, 0x22	; 34
    24d8:	01 90       	ld	r0, Z+
    24da:	0d 92       	st	X+, r0
    24dc:	81 50       	subi	r24, 0x01	; 1
    24de:	e1 f7       	brne	.-8      	; 0x24d8 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    24e0:	a5 e5       	ldi	r26, 0x55	; 85
    24e2:	b3 e0       	ldi	r27, 0x03	; 3
    24e4:	fe 01       	movw	r30, r28
    24e6:	31 96       	adiw	r30, 0x01	; 1
    24e8:	82 e2       	ldi	r24, 0x22	; 34
    24ea:	01 90       	ld	r0, Z+
    24ec:	0d 92       	st	X+, r0
    24ee:	81 50       	subi	r24, 0x01	; 1
    24f0:	e1 f7       	brne	.-8      	; 0x24ea <set_one_volt_per_octave+0x42>
	
	
    24f2:	a2 96       	adiw	r28, 0x22	; 34
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	08 95       	ret

00002504 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2504:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2506:	80 91 a7 03 	lds	r24, 0x03A7
    250a:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    250c:	89 27       	eor	r24, r25
    250e:	80 93 a7 03 	sts	0x03A7, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2512:	89 23       	and	r24, r25
    2514:	08 95       	ret

00002516 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2516:	ed ed       	ldi	r30, 0xDD	; 221
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	90 81       	ld	r25, Z
    251c:	9f 7b       	andi	r25, 0xBF	; 191
    251e:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	21 70       	andi	r18, 0x01	; 1
    2526:	30 70       	andi	r19, 0x00	; 0
    2528:	22 0f       	add	r18, r18
    252a:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    252c:	68 2f       	mov	r22, r24
    252e:	62 95       	swap	r22
    2530:	66 95       	lsr	r22
    2532:	67 70       	andi	r22, 0x07	; 7
    2534:	67 95       	ror	r22
    2536:	66 27       	eor	r22, r22
    2538:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    253a:	26 2b       	or	r18, r22
    253c:	98 2f       	mov	r25, r24
    253e:	96 95       	lsr	r25
    2540:	96 95       	lsr	r25
    2542:	91 70       	andi	r25, 0x01	; 1
    2544:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2546:	68 2f       	mov	r22, r24
    2548:	66 1f       	adc	r22, r22
    254a:	66 27       	eor	r22, r22
    254c:	66 1f       	adc	r22, r22
    254e:	66 0f       	add	r22, r22
    2550:	66 0f       	add	r22, r22
    2552:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2554:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2556:	a8 2f       	mov	r26, r24
    2558:	a6 95       	lsr	r26
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	a1 70       	andi	r26, 0x01	; 1
    255e:	b0 70       	andi	r27, 0x00	; 0
    2560:	bd 01       	movw	r22, r26
    2562:	66 0f       	add	r22, r22
    2564:	77 1f       	adc	r23, r23
    2566:	66 0f       	add	r22, r22
    2568:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    256a:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    256c:	68 2f       	mov	r22, r24
    256e:	62 95       	swap	r22
    2570:	6f 70       	andi	r22, 0x0F	; 15
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	61 70       	andi	r22, 0x01	; 1
    2576:	70 70       	andi	r23, 0x00	; 0
    2578:	ab 01       	movw	r20, r22
    257a:	00 24       	eor	r0, r0
    257c:	56 95       	lsr	r21
    257e:	47 95       	ror	r20
    2580:	07 94       	ror	r0
    2582:	56 95       	lsr	r21
    2584:	47 95       	ror	r20
    2586:	07 94       	ror	r0
    2588:	54 2f       	mov	r21, r20
    258a:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    258c:	62 2f       	mov	r22, r18
    258e:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2590:	48 2f       	mov	r20, r24
    2592:	42 95       	swap	r20
    2594:	46 95       	lsr	r20
    2596:	46 95       	lsr	r20
    2598:	43 70       	andi	r20, 0x03	; 3
    259a:	50 e0       	ldi	r21, 0x00	; 0
    259c:	41 70       	andi	r20, 0x01	; 1
    259e:	50 70       	andi	r21, 0x00	; 0
    25a0:	9a 01       	movw	r18, r20
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	22 95       	swap	r18
    25a8:	32 95       	swap	r19
    25aa:	30 7f       	andi	r19, 0xF0	; 240
    25ac:	32 27       	eor	r19, r18
    25ae:	20 7f       	andi	r18, 0xF0	; 240
    25b0:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    25b2:	46 2f       	mov	r20, r22
    25b4:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    25b6:	86 95       	lsr	r24
    25b8:	86 95       	lsr	r24
    25ba:	86 95       	lsr	r24
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	21 70       	andi	r18, 0x01	; 1
    25c2:	30 70       	andi	r19, 0x00	; 0
    25c4:	c9 01       	movw	r24, r18
    25c6:	82 95       	swap	r24
    25c8:	92 95       	swap	r25
    25ca:	90 7f       	andi	r25, 0xF0	; 240
    25cc:	98 27       	eor	r25, r24
    25ce:	80 7f       	andi	r24, 0xF0	; 240
    25d0:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    25d2:	84 2b       	or	r24, r20
    25d4:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    25d6:	80 81       	ld	r24, Z
    25d8:	80 64       	ori	r24, 0x40	; 64
    25da:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    25dc:	80 81       	ld	r24, Z
    25de:	8f 7b       	andi	r24, 0xBF	; 191
    25e0:	80 83       	st	Z, r24
	DATA_BUS = 0;
    25e2:	12 b8       	out	0x02, r1	; 2
	
	
    25e4:	08 95       	ret

000025e6 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    25e6:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    25e8:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    25ea:	74 83       	std	Z+4, r23	; 0x04
    25ec:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    25ee:	11 82       	std	Z+1, r1	; 0x01
    25f0:	10 82       	st	Z, r1
}
    25f2:	08 95       	ret

000025f4 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    25f4:	1f 93       	push	r17
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	ec 01       	movw	r28, r24
    25fc:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    25fe:	0e 94 69 13 	call	0x26d2	; 0x26d2 <store_and_clear_interrupt>
    2602:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2604:	39 81       	ldd	r19, Y+1	; 0x01
    2606:	83 2f       	mov	r24, r19
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	6a 81       	ldd	r22, Y+2	; 0x02
    260e:	70 e0       	ldi	r23, 0x00	; 0
    2610:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__divmodhi4>
    2614:	48 81       	ld	r20, Y
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	84 17       	cp	r24, r20
    261a:	95 07       	cpc	r25, r21
    261c:	29 f4       	brne	.+10     	; 0x2628 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    261e:	82 2f       	mov	r24, r18
    2620:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <restore_interrupt_setting>
      return false;
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	11 c0       	rjmp	.+34     	; 0x264a <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2628:	eb 81       	ldd	r30, Y+3	; 0x03
    262a:	fc 81       	ldd	r31, Y+4	; 0x04
    262c:	e3 0f       	add	r30, r19
    262e:	f1 1d       	adc	r31, r1
    2630:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	6a 81       	ldd	r22, Y+2	; 0x02
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__divmodhi4>
    2640:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2642:	82 2f       	mov	r24, r18
    2644:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <restore_interrupt_setting>
      return true;
    2648:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	1f 91       	pop	r17
    2650:	08 95       	ret

00002652 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2652:	cf 93       	push	r28
    2654:	df 93       	push	r29
    2656:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2658:	0e 94 69 13 	call	0x26d2	; 0x26d2 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    265c:	29 81       	ldd	r18, Y+1	; 0x01
    265e:	98 81       	ld	r25, Y
    2660:	29 17       	cp	r18, r25
    2662:	18 f0       	brcs	.+6      	; 0x266a <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2664:	c2 2f       	mov	r28, r18
    2666:	c9 1b       	sub	r28, r25
    2668:	03 c0       	rjmp	.+6      	; 0x2670 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    266a:	ca 81       	ldd	r28, Y+2	; 0x02
    266c:	c2 0f       	add	r28, r18
    266e:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2670:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <restore_interrupt_setting>
   return len;
}
    2674:	8c 2f       	mov	r24, r28
    2676:	df 91       	pop	r29
    2678:	cf 91       	pop	r28
    267a:	08 95       	ret

0000267c <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    267c:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    267e:	20 81       	ld	r18, Z
    2680:	86 2f       	mov	r24, r22
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	82 0f       	add	r24, r18
    2686:	91 1d       	adc	r25, r1
    2688:	62 81       	ldd	r22, Z+2	; 0x02
    268a:	70 e0       	ldi	r23, 0x00	; 0
    268c:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__divmodhi4>
    2690:	03 80       	ldd	r0, Z+3	; 0x03
    2692:	f4 81       	ldd	r31, Z+4	; 0x04
    2694:	e0 2d       	mov	r30, r0
    2696:	e8 0f       	add	r30, r24
    2698:	f9 1f       	adc	r31, r25
}
    269a:	80 81       	ld	r24, Z
    269c:	08 95       	ret

0000269e <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    269e:	1f 93       	push	r17
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	ec 01       	movw	r28, r24
    26a6:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    26a8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <store_and_clear_interrupt>
    26ac:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    26ae:	88 81       	ld	r24, Y
    26b0:	21 2f       	mov	r18, r17
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	28 0f       	add	r18, r24
    26b6:	31 1d       	adc	r19, r1
    26b8:	6a 81       	ldd	r22, Y+2	; 0x02
    26ba:	c9 01       	movw	r24, r18
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__divmodhi4>
    26c2:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    26c4:	84 2f       	mov	r24, r20
    26c6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <restore_interrupt_setting>
}
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	1f 91       	pop	r17
    26d0:	08 95       	ret

000026d2 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    26d2:	8f b7       	in	r24, 0x3f	; 63
   cli();
    26d4:	f8 94       	cli
   return sreg;
}
    26d6:	08 95       	ret

000026d8 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    26d8:	8f bf       	out	0x3f, r24	; 63
}
    26da:	08 95       	ret

000026dc <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    26dc:	88 1f       	adc	r24, r24
    26de:	88 27       	eor	r24, r24
    26e0:	88 1f       	adc	r24, r24
    26e2:	08 95       	ret

000026e4 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	88 3f       	cpi	r24, 0xF8	; 248
    26e8:	08 f4       	brcc	.+2      	; 0x26ec <midi_is_realtime+0x8>
    26ea:	90 e0       	ldi	r25, 0x00	; 0
}
    26ec:	89 2f       	mov	r24, r25
    26ee:	08 95       	ret

000026f0 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	20 7f       	andi	r18, 0xF0	; 240
    26f6:	30 70       	andi	r19, 0x00	; 0
    26f8:	20 3c       	cpi	r18, 0xC0	; 192
    26fa:	31 05       	cpc	r19, r1
    26fc:	e9 f1       	breq	.+122    	; 0x2778 <midi_packet_length+0x88>
    26fe:	21 3c       	cpi	r18, 0xC1	; 193
    2700:	31 05       	cpc	r19, r1
    2702:	8c f4       	brge	.+34     	; 0x2726 <midi_packet_length+0x36>
    2704:	20 39       	cpi	r18, 0x90	; 144
    2706:	31 05       	cpc	r19, r1
    2708:	e1 f0       	breq	.+56     	; 0x2742 <midi_packet_length+0x52>
    270a:	21 39       	cpi	r18, 0x91	; 145
    270c:	31 05       	cpc	r19, r1
    270e:	24 f4       	brge	.+8      	; 0x2718 <midi_packet_length+0x28>
    2710:	20 38       	cpi	r18, 0x80	; 128
    2712:	31 05       	cpc	r19, r1
    2714:	79 f5       	brne	.+94     	; 0x2774 <midi_packet_length+0x84>
    2716:	15 c0       	rjmp	.+42     	; 0x2742 <midi_packet_length+0x52>
    2718:	20 3a       	cpi	r18, 0xA0	; 160
    271a:	31 05       	cpc	r19, r1
    271c:	91 f0       	breq	.+36     	; 0x2742 <midi_packet_length+0x52>
    271e:	20 3b       	cpi	r18, 0xB0	; 176
    2720:	31 05       	cpc	r19, r1
    2722:	41 f5       	brne	.+80     	; 0x2774 <midi_packet_length+0x84>
    2724:	0e c0       	rjmp	.+28     	; 0x2742 <midi_packet_length+0x52>
    2726:	20 3e       	cpi	r18, 0xE0	; 224
    2728:	31 05       	cpc	r19, r1
    272a:	59 f0       	breq	.+22     	; 0x2742 <midi_packet_length+0x52>
    272c:	21 3e       	cpi	r18, 0xE1	; 225
    272e:	31 05       	cpc	r19, r1
    2730:	24 f4       	brge	.+8      	; 0x273a <midi_packet_length+0x4a>
    2732:	20 3d       	cpi	r18, 0xD0	; 208
    2734:	31 05       	cpc	r19, r1
    2736:	f1 f4       	brne	.+60     	; 0x2774 <midi_packet_length+0x84>
    2738:	1f c0       	rjmp	.+62     	; 0x2778 <midi_packet_length+0x88>
    273a:	20 3f       	cpi	r18, 0xF0	; 240
    273c:	31 05       	cpc	r19, r1
    273e:	d1 f4       	brne	.+52     	; 0x2774 <midi_packet_length+0x84>
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2746:	86 3f       	cpi	r24, 0xF6	; 246
    2748:	79 f0       	breq	.+30     	; 0x2768 <midi_packet_length+0x78>
    274a:	87 3f       	cpi	r24, 0xF7	; 247
    274c:	38 f4       	brcc	.+14     	; 0x275c <midi_packet_length+0x6c>
    274e:	82 3f       	cpi	r24, 0xF2	; 242
    2750:	a9 f0       	breq	.+42     	; 0x277c <midi_packet_length+0x8c>
    2752:	83 3f       	cpi	r24, 0xF3	; 243
    2754:	59 f0       	breq	.+22     	; 0x276c <midi_packet_length+0x7c>
    2756:	81 3f       	cpi	r24, 0xF1	; 241
    2758:	59 f4       	brne	.+22     	; 0x2770 <midi_packet_length+0x80>
    275a:	08 c0       	rjmp	.+16     	; 0x276c <midi_packet_length+0x7c>
    275c:	88 3f       	cpi	r24, 0xF8	; 248
    275e:	40 f0       	brcs	.+16     	; 0x2770 <midi_packet_length+0x80>
    2760:	8d 3f       	cpi	r24, 0xFD	; 253
    2762:	10 f0       	brcs	.+4      	; 0x2768 <midi_packet_length+0x78>
    2764:	8e 3f       	cpi	r24, 0xFE	; 254
    2766:	20 f0       	brcs	.+8      	; 0x2770 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2778:	82 e0       	ldi	r24, 0x02	; 2
    277a:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    277c:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    277e:	08 95       	ret

00002780 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2780:	0f 93       	push	r16
    2782:	34 2f       	mov	r19, r20
    2784:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2786:	46 2f       	mov	r20, r22
    2788:	4f 70       	andi	r20, 0x0F	; 15
    278a:	40 6b       	ori	r20, 0xB0	; 176
    278c:	23 2f       	mov	r18, r19
    278e:	2f 77       	andi	r18, 0x7F	; 127
    2790:	0f 77       	andi	r16, 0x7F	; 127
    2792:	dc 01       	movw	r26, r24
    2794:	ed 91       	ld	r30, X+
    2796:	fc 91       	ld	r31, X
    2798:	63 e0       	ldi	r22, 0x03	; 3
    279a:	70 e0       	ldi	r23, 0x00	; 0
    279c:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    279e:	0f 91       	pop	r16
    27a0:	08 95       	ret

000027a2 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    27a2:	0f 93       	push	r16
    27a4:	34 2f       	mov	r19, r20
    27a6:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    27a8:	46 2f       	mov	r20, r22
    27aa:	4f 70       	andi	r20, 0x0F	; 15
    27ac:	40 69       	ori	r20, 0x90	; 144
    27ae:	23 2f       	mov	r18, r19
    27b0:	2f 77       	andi	r18, 0x7F	; 127
    27b2:	0f 77       	andi	r16, 0x7F	; 127
    27b4:	dc 01       	movw	r26, r24
    27b6:	ed 91       	ld	r30, X+
    27b8:	fc 91       	ld	r31, X
    27ba:	63 e0       	ldi	r22, 0x03	; 3
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    27c0:	0f 91       	pop	r16
    27c2:	08 95       	ret

000027c4 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    27c4:	0f 93       	push	r16
    27c6:	34 2f       	mov	r19, r20
    27c8:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    27ca:	46 2f       	mov	r20, r22
    27cc:	4f 70       	andi	r20, 0x0F	; 15
    27ce:	40 68       	ori	r20, 0x80	; 128
    27d0:	23 2f       	mov	r18, r19
    27d2:	2f 77       	andi	r18, 0x7F	; 127
    27d4:	0f 77       	andi	r16, 0x7F	; 127
    27d6:	dc 01       	movw	r26, r24
    27d8:	ed 91       	ld	r30, X+
    27da:	fc 91       	ld	r31, X
    27dc:	63 e0       	ldi	r22, 0x03	; 3
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    27e2:	0f 91       	pop	r16
    27e4:	08 95       	ret

000027e6 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    27e6:	0f 93       	push	r16
    27e8:	34 2f       	mov	r19, r20
    27ea:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    27ec:	46 2f       	mov	r20, r22
    27ee:	4f 70       	andi	r20, 0x0F	; 15
    27f0:	40 6a       	ori	r20, 0xA0	; 160
    27f2:	23 2f       	mov	r18, r19
    27f4:	2f 77       	andi	r18, 0x7F	; 127
    27f6:	0f 77       	andi	r16, 0x7F	; 127
    27f8:	dc 01       	movw	r26, r24
    27fa:	ed 91       	ld	r30, X+
    27fc:	fc 91       	ld	r31, X
    27fe:	63 e0       	ldi	r22, 0x03	; 3
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2804:	0f 91       	pop	r16
    2806:	08 95       	ret

00002808 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    280c:	20 e2       	ldi	r18, 0x20	; 32
    280e:	40 30       	cpi	r20, 0x00	; 0
    2810:	52 07       	cpc	r21, r18
    2812:	44 f4       	brge	.+16     	; 0x2824 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2814:	a0 ee       	ldi	r26, 0xE0	; 224
    2816:	40 30       	cpi	r20, 0x00	; 0
    2818:	5a 07       	cpc	r21, r26
    281a:	3c f0       	brlt	.+14     	; 0x282a <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    281c:	8a 01       	movw	r16, r20
    281e:	00 50       	subi	r16, 0x00	; 0
    2820:	10 4e       	sbci	r17, 0xE0	; 224
    2822:	05 c0       	rjmp	.+10     	; 0x282e <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2824:	0f ef       	ldi	r16, 0xFF	; 255
    2826:	1f e3       	ldi	r17, 0x3F	; 63
    2828:	02 c0       	rjmp	.+4      	; 0x282e <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    282a:	00 e0       	ldi	r16, 0x00	; 0
    282c:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    282e:	46 2f       	mov	r20, r22
    2830:	4f 70       	andi	r20, 0x0F	; 15
    2832:	40 6e       	ori	r20, 0xE0	; 224
    2834:	20 2f       	mov	r18, r16
    2836:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2838:	00 0f       	add	r16, r16
    283a:	01 2f       	mov	r16, r17
    283c:	00 1f       	adc	r16, r16
    283e:	11 0b       	sbc	r17, r17
    2840:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2842:	0f 77       	andi	r16, 0x7F	; 127
    2844:	dc 01       	movw	r26, r24
    2846:	ed 91       	ld	r30, X+
    2848:	fc 91       	ld	r31, X
    284a:	63 e0       	ldi	r22, 0x03	; 3
    284c:	70 e0       	ldi	r23, 0x00	; 0
    284e:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2850:	1f 91       	pop	r17
    2852:	0f 91       	pop	r16
    2854:	08 95       	ret

00002856 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2856:	0f 93       	push	r16
    2858:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    285a:	46 2f       	mov	r20, r22
    285c:	4f 70       	andi	r20, 0x0F	; 15
    285e:	40 6c       	ori	r20, 0xC0	; 192
    2860:	2f 77       	andi	r18, 0x7F	; 127
    2862:	dc 01       	movw	r26, r24
    2864:	ed 91       	ld	r30, X+
    2866:	fc 91       	ld	r31, X
    2868:	62 e0       	ldi	r22, 0x02	; 2
    286a:	70 e0       	ldi	r23, 0x00	; 0
    286c:	00 e0       	ldi	r16, 0x00	; 0
    286e:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2870:	0f 91       	pop	r16
    2872:	08 95       	ret

00002874 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2874:	0f 93       	push	r16
    2876:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2878:	46 2f       	mov	r20, r22
    287a:	4f 70       	andi	r20, 0x0F	; 15
    287c:	40 6d       	ori	r20, 0xD0	; 208
    287e:	2f 77       	andi	r18, 0x7F	; 127
    2880:	dc 01       	movw	r26, r24
    2882:	ed 91       	ld	r30, X+
    2884:	fc 91       	ld	r31, X
    2886:	62 e0       	ldi	r22, 0x02	; 2
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	00 e0       	ldi	r16, 0x00	; 0
    288c:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    288e:	0f 91       	pop	r16
    2890:	08 95       	ret

00002892 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2892:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2894:	dc 01       	movw	r26, r24
    2896:	ed 91       	ld	r30, X+
    2898:	fc 91       	ld	r31, X
    289a:	61 e0       	ldi	r22, 0x01	; 1
    289c:	70 e0       	ldi	r23, 0x00	; 0
    289e:	48 ef       	ldi	r20, 0xF8	; 248
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	00 e0       	ldi	r16, 0x00	; 0
    28a4:	09 95       	icall
}
    28a6:	0f 91       	pop	r16
    28a8:	08 95       	ret

000028aa <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    28aa:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    28ac:	dc 01       	movw	r26, r24
    28ae:	ed 91       	ld	r30, X+
    28b0:	fc 91       	ld	r31, X
    28b2:	61 e0       	ldi	r22, 0x01	; 1
    28b4:	70 e0       	ldi	r23, 0x00	; 0
    28b6:	49 ef       	ldi	r20, 0xF9	; 249
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	00 e0       	ldi	r16, 0x00	; 0
    28bc:	09 95       	icall
}
    28be:	0f 91       	pop	r16
    28c0:	08 95       	ret

000028c2 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    28c2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    28c4:	dc 01       	movw	r26, r24
    28c6:	ed 91       	ld	r30, X+
    28c8:	fc 91       	ld	r31, X
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	4a ef       	ldi	r20, 0xFA	; 250
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	00 e0       	ldi	r16, 0x00	; 0
    28d4:	09 95       	icall
}
    28d6:	0f 91       	pop	r16
    28d8:	08 95       	ret

000028da <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    28da:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    28dc:	dc 01       	movw	r26, r24
    28de:	ed 91       	ld	r30, X+
    28e0:	fc 91       	ld	r31, X
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	4b ef       	ldi	r20, 0xFB	; 251
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	00 e0       	ldi	r16, 0x00	; 0
    28ec:	09 95       	icall
}
    28ee:	0f 91       	pop	r16
    28f0:	08 95       	ret

000028f2 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    28f2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    28f4:	dc 01       	movw	r26, r24
    28f6:	ed 91       	ld	r30, X+
    28f8:	fc 91       	ld	r31, X
    28fa:	61 e0       	ldi	r22, 0x01	; 1
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	4c ef       	ldi	r20, 0xFC	; 252
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	00 e0       	ldi	r16, 0x00	; 0
    2904:	09 95       	icall
}
    2906:	0f 91       	pop	r16
    2908:	08 95       	ret

0000290a <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    290a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    290c:	dc 01       	movw	r26, r24
    290e:	ed 91       	ld	r30, X+
    2910:	fc 91       	ld	r31, X
    2912:	61 e0       	ldi	r22, 0x01	; 1
    2914:	70 e0       	ldi	r23, 0x00	; 0
    2916:	4e ef       	ldi	r20, 0xFE	; 254
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	00 e0       	ldi	r16, 0x00	; 0
    291c:	09 95       	icall
}
    291e:	0f 91       	pop	r16
    2920:	08 95       	ret

00002922 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2922:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2924:	dc 01       	movw	r26, r24
    2926:	ed 91       	ld	r30, X+
    2928:	fc 91       	ld	r31, X
    292a:	61 e0       	ldi	r22, 0x01	; 1
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	4f ef       	ldi	r20, 0xFF	; 255
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	00 e0       	ldi	r16, 0x00	; 0
    2934:	09 95       	icall
}
    2936:	0f 91       	pop	r16
    2938:	08 95       	ret

0000293a <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    293a:	0f 93       	push	r16
   device->send_func(device, 2,
    293c:	26 2f       	mov	r18, r22
    293e:	2f 77       	andi	r18, 0x7F	; 127
    2940:	dc 01       	movw	r26, r24
    2942:	ed 91       	ld	r30, X+
    2944:	fc 91       	ld	r31, X
    2946:	62 e0       	ldi	r22, 0x02	; 2
    2948:	70 e0       	ldi	r23, 0x00	; 0
    294a:	41 ef       	ldi	r20, 0xF1	; 241
    294c:	00 e0       	ldi	r16, 0x00	; 0
    294e:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2950:	0f 91       	pop	r16
    2952:	08 95       	ret

00002954 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2954:	0f 93       	push	r16
    2956:	1f 93       	push	r17
   device->send_func(device, 3,
    2958:	26 2f       	mov	r18, r22
    295a:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    295c:	8b 01       	movw	r16, r22
    295e:	00 0f       	add	r16, r16
    2960:	01 2f       	mov	r16, r17
    2962:	00 1f       	adc	r16, r16
    2964:	11 0b       	sbc	r17, r17
    2966:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2968:	0f 77       	andi	r16, 0x7F	; 127
    296a:	dc 01       	movw	r26, r24
    296c:	ed 91       	ld	r30, X+
    296e:	fc 91       	ld	r31, X
    2970:	63 e0       	ldi	r22, 0x03	; 3
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	42 ef       	ldi	r20, 0xF2	; 242
    2976:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	08 95       	ret

0000297e <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    297e:	0f 93       	push	r16
   device->send_func(device, 2,
    2980:	26 2f       	mov	r18, r22
    2982:	2f 77       	andi	r18, 0x7F	; 127
    2984:	dc 01       	movw	r26, r24
    2986:	ed 91       	ld	r30, X+
    2988:	fc 91       	ld	r31, X
    298a:	62 e0       	ldi	r22, 0x02	; 2
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	43 ef       	ldi	r20, 0xF3	; 243
    2990:	00 e0       	ldi	r16, 0x00	; 0
    2992:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2994:	0f 91       	pop	r16
    2996:	08 95       	ret

00002998 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2998:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    299a:	dc 01       	movw	r26, r24
    299c:	ed 91       	ld	r30, X+
    299e:	fc 91       	ld	r31, X
    29a0:	61 e0       	ldi	r22, 0x01	; 1
    29a2:	70 e0       	ldi	r23, 0x00	; 0
    29a4:	46 ef       	ldi	r20, 0xF6	; 246
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	00 e0       	ldi	r16, 0x00	; 0
    29aa:	09 95       	icall
}
    29ac:	0f 91       	pop	r16
    29ae:	08 95       	ret

000029b0 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    29b0:	0f 93       	push	r16
    29b2:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    29b4:	dc 01       	movw	r26, r24
    29b6:	ed 91       	ld	r30, X+
    29b8:	fc 91       	ld	r31, X
    29ba:	61 e0       	ldi	r22, 0x01	; 1
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	00 e0       	ldi	r16, 0x00	; 0
    29c2:	09 95       	icall
}
    29c4:	0f 91       	pop	r16
    29c6:	08 95       	ret

000029c8 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    29c8:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    29ca:	dc 01       	movw	r26, r24
    29cc:	ed 91       	ld	r30, X+
    29ce:	fc 91       	ld	r31, X
    29d0:	09 95       	icall
}
    29d2:	0f 91       	pop	r16
    29d4:	08 95       	ret

000029d6 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    29d6:	6f 92       	push	r6
    29d8:	7f 92       	push	r7
    29da:	8f 92       	push	r8
    29dc:	9f 92       	push	r9
    29de:	af 92       	push	r10
    29e0:	bf 92       	push	r11
    29e2:	cf 92       	push	r12
    29e4:	df 92       	push	r13
    29e6:	ef 92       	push	r14
    29e8:	ff 92       	push	r15
    29ea:	0f 93       	push	r16
    29ec:	1f 93       	push	r17
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <midi_send_array+0x1e>
    29f4:	0f 92       	push	r0
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	4c 01       	movw	r8, r24
    29fc:	6b 01       	movw	r12, r22
    29fe:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2a00:	61 15       	cp	r22, r1
    2a02:	71 05       	cpc	r23, r1
    2a04:	41 f1       	breq	.+80     	; 0x2a56 <midi_send_array+0x80>
    2a06:	ee 24       	eor	r14, r14
    2a08:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2a0a:	0f 2e       	mov	r0, r31
    2a0c:	f3 e0       	ldi	r31, 0x03	; 3
    2a0e:	6f 2e       	mov	r6, r31
    2a10:	77 24       	eor	r7, r7
    2a12:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2a14:	19 82       	std	Y+1, r1	; 0x01
    2a16:	1a 82       	std	Y+2, r1	; 0x02
    2a18:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2a1a:	86 01       	movw	r16, r12
    2a1c:	0e 19       	sub	r16, r14
    2a1e:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2a20:	04 30       	cpi	r16, 0x04	; 4
    2a22:	11 05       	cpc	r17, r1
    2a24:	08 f0       	brcs	.+2      	; 0x2a28 <midi_send_array+0x52>
    2a26:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2a28:	b5 01       	movw	r22, r10
    2a2a:	6e 0d       	add	r22, r14
    2a2c:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2a2e:	ce 01       	movw	r24, r28
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	40 2f       	mov	r20, r16
    2a34:	51 2f       	mov	r21, r17
    2a36:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2a3a:	c4 01       	movw	r24, r8
    2a3c:	b8 01       	movw	r22, r16
    2a3e:	49 81       	ldd	r20, Y+1	; 0x01
    2a40:	2a 81       	ldd	r18, Y+2	; 0x02
    2a42:	0b 81       	ldd	r16, Y+3	; 0x03
    2a44:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2a48:	83 e0       	ldi	r24, 0x03	; 3
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	e8 0e       	add	r14, r24
    2a4e:	f9 1e       	adc	r15, r25
    2a50:	ec 14       	cp	r14, r12
    2a52:	fd 04       	cpc	r15, r13
    2a54:	f8 f2       	brcs	.-66     	; 0x2a14 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	df 91       	pop	r29
    2a5e:	cf 91       	pop	r28
    2a60:	1f 91       	pop	r17
    2a62:	0f 91       	pop	r16
    2a64:	ff 90       	pop	r15
    2a66:	ef 90       	pop	r14
    2a68:	df 90       	pop	r13
    2a6a:	cf 90       	pop	r12
    2a6c:	bf 90       	pop	r11
    2a6e:	af 90       	pop	r10
    2a70:	9f 90       	pop	r9
    2a72:	8f 90       	pop	r8
    2a74:	7f 90       	pop	r7
    2a76:	6f 90       	pop	r6
    2a78:	08 95       	ret

00002a7a <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	73 83       	std	Z+3, r23	; 0x03
    2a7e:	62 83       	std	Z+2, r22	; 0x02
}
    2a80:	08 95       	ret

00002a82 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2a82:	fc 01       	movw	r30, r24
    2a84:	75 83       	std	Z+5, r23	; 0x05
    2a86:	64 83       	std	Z+4, r22	; 0x04
}
    2a88:	08 95       	ret

00002a8a <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	77 83       	std	Z+7, r23	; 0x07
    2a8e:	66 83       	std	Z+6, r22	; 0x06
}
    2a90:	08 95       	ret

00002a92 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2a92:	fc 01       	movw	r30, r24
    2a94:	71 87       	std	Z+9, r23	; 0x09
    2a96:	60 87       	std	Z+8, r22	; 0x08
}
    2a98:	08 95       	ret

00002a9a <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	73 87       	std	Z+11, r23	; 0x0b
    2a9e:	62 87       	std	Z+10, r22	; 0x0a
}
    2aa0:	08 95       	ret

00002aa2 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	75 87       	std	Z+13, r23	; 0x0d
    2aa6:	64 87       	std	Z+12, r22	; 0x0c
}
    2aa8:	08 95       	ret

00002aaa <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    2aaa:	fc 01       	movw	r30, r24
    2aac:	77 87       	std	Z+15, r23	; 0x0f
    2aae:	66 87       	std	Z+14, r22	; 0x0e
}
    2ab0:	08 95       	ret

00002ab2 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	71 8b       	std	Z+17, r23	; 0x11
    2ab6:	60 8b       	std	Z+16, r22	; 0x10
}
    2ab8:	08 95       	ret

00002aba <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    2aba:	fc 01       	movw	r30, r24
    2abc:	73 8b       	std	Z+19, r23	; 0x13
    2abe:	62 8b       	std	Z+18, r22	; 0x12
}
    2ac0:	08 95       	ret

00002ac2 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	75 8b       	std	Z+21, r23	; 0x15
    2ac6:	64 8b       	std	Z+20, r22	; 0x14
}
    2ac8:	08 95       	ret

00002aca <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    2aca:	fc 01       	movw	r30, r24
    2acc:	77 8b       	std	Z+23, r23	; 0x17
    2ace:	66 8b       	std	Z+22, r22	; 0x16
}
    2ad0:	08 95       	ret

00002ad2 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	71 8f       	std	Z+25, r23	; 0x19
    2ad6:	60 8f       	std	Z+24, r22	; 0x18
}
    2ad8:	08 95       	ret

00002ada <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    2ada:	fc 01       	movw	r30, r24
    2adc:	73 8f       	std	Z+27, r23	; 0x1b
    2ade:	62 8f       	std	Z+26, r22	; 0x1a
}
    2ae0:	08 95       	ret

00002ae2 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	75 8f       	std	Z+29, r23	; 0x1d
    2ae6:	64 8f       	std	Z+28, r22	; 0x1c
}
    2ae8:	08 95       	ret

00002aea <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    2aea:	fc 01       	movw	r30, r24
    2aec:	77 8f       	std	Z+31, r23	; 0x1f
    2aee:	66 8f       	std	Z+30, r22	; 0x1e
}
    2af0:	08 95       	ret

00002af2 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2af2:	cf 93       	push	r28
    2af4:	df 93       	push	r29
    2af6:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    2af8:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    2afa:	1f a2       	lds	r17, 0x9f
    2afc:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2afe:	bc 01       	movw	r22, r24
    2b00:	68 5d       	subi	r22, 0xD8	; 216
    2b02:	7f 4f       	sbci	r23, 0xFF	; 255
    2b04:	88 51       	subi	r24, 0x18	; 24
    2b06:	9f 4f       	sbci	r25, 0xFF	; 255
    2b08:	40 ec       	ldi	r20, 0xC0	; 192
    2b0a:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2b0e:	1b 82       	std	Y+3, r1	; 0x03
    2b10:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2b12:	1d 82       	std	Y+5, r1	; 0x05
    2b14:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2b16:	1f 82       	std	Y+7, r1	; 0x07
    2b18:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    2b1a:	19 86       	std	Y+9, r1	; 0x09
    2b1c:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2b1e:	1b 86       	std	Y+11, r1	; 0x0b
    2b20:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2b22:	1d 86       	std	Y+13, r1	; 0x0d
    2b24:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2b26:	1f 86       	std	Y+15, r1	; 0x0f
    2b28:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    2b2a:	19 8a       	std	Y+17, r1	; 0x11
    2b2c:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2b2e:	1b 8a       	std	Y+19, r1	; 0x13
    2b30:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2b32:	1d 8a       	std	Y+21, r1	; 0x15
    2b34:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2b36:	1f 8a       	std	Y+23, r1	; 0x17
    2b38:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    2b3a:	19 8e       	std	Y+25, r1	; 0x19
    2b3c:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2b3e:	1b 8e       	std	Y+27, r1	; 0x1b
    2b40:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2b42:	1d 8e       	std	Y+29, r1	; 0x1d
    2b44:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2b46:	1f 8e       	std	Y+31, r1	; 0x1f
    2b48:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    2b4a:	19 a2       	lds	r17, 0x99
    2b4c:	18 a2       	lds	r17, 0x98
}
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	08 95       	ret

00002b54 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2b54:	ef 92       	push	r14
    2b56:	ff 92       	push	r15
    2b58:	0f 93       	push	r16
    2b5a:	1f 93       	push	r17
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
    2b60:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2b62:	66 23       	and	r22, r22
    2b64:	99 f0       	breq	.+38     	; 0x2b8c <midi_device_input+0x38>
    2b66:	04 2f       	mov	r16, r20
    2b68:	15 2f       	mov	r17, r21
    2b6a:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    2b6c:	0f 2e       	mov	r0, r31
    2b6e:	f8 ee       	ldi	r31, 0xE8	; 232
    2b70:	ef 2e       	mov	r14, r31
    2b72:	ff 24       	eor	r15, r15
    2b74:	f0 2d       	mov	r31, r0
    2b76:	e8 0e       	add	r14, r24
    2b78:	f9 1e       	adc	r15, r25
    2b7a:	f8 01       	movw	r30, r16
    2b7c:	61 91       	ld	r22, Z+
    2b7e:	8f 01       	movw	r16, r30
    2b80:	c7 01       	movw	r24, r14
    2b82:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2b86:	cf 5f       	subi	r28, 0xFF	; 255
    2b88:	cd 17       	cp	r28, r29
    2b8a:	b9 f7       	brne	.-18     	; 0x2b7a <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	08 95       	ret

00002b9a <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	71 83       	std	Z+1, r23	; 0x01
    2b9e:	60 83       	st	Z, r22
}
    2ba0:	08 95       	ret

00002ba2 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	71 a3       	lds	r23, 0x51
    2ba6:	60 a3       	lds	r22, 0x50
}
    2ba8:	08 95       	ret

00002baa <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    2baa:	af 92       	push	r10
    2bac:	bf 92       	push	r11
    2bae:	cf 92       	push	r12
    2bb0:	df 92       	push	r13
    2bb2:	ef 92       	push	r14
    2bb4:	ff 92       	push	r15
    2bb6:	0f 93       	push	r16
    2bb8:	1f 93       	push	r17
    2bba:	cf 93       	push	r28
    2bbc:	df 93       	push	r29
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <midi_input_callbacks+0x16>
    2bc0:	0f 92       	push	r0
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	6c 01       	movw	r12, r24
    2bc8:	5b 01       	movw	r10, r22
    2bca:	f4 2e       	mov	r15, r20
    2bcc:	e2 2e       	mov	r14, r18
    2bce:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	95 96       	adiw	r26, 0x25	; 37
    2bd4:	8c 91       	ld	r24, X
    2bd6:	95 97       	sbiw	r26, 0x25	; 37
    2bd8:	84 30       	cpi	r24, 0x04	; 4
    2bda:	e9 f4       	brne	.+58     	; 0x2c16 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    2bdc:	5a 96       	adiw	r26, 0x1a	; 26
    2bde:	ed 91       	ld	r30, X+
    2be0:	fc 91       	ld	r31, X
    2be2:	5b 97       	sbiw	r26, 0x1b	; 27
    2be4:	30 97       	sbiw	r30, 0x00	; 0
    2be6:	09 f4       	brne	.+2      	; 0x2bea <midi_input_callbacks+0x40>
    2be8:	ee c0       	rjmp	.+476    	; 0x2dc6 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    2bea:	cb 01       	movw	r24, r22
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	63 e0       	ldi	r22, 0x03	; 3
    2bf0:	70 e0       	ldi	r23, 0x00	; 0
    2bf2:	0e 94 cd 19 	call	0x339a	; 0x339a <__udivmodhi4>
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	68 0f       	add	r22, r24
    2bfe:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2c00:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2c02:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    2c04:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2c06:	4a 2d       	mov	r20, r10
    2c08:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    2c0a:	c6 01       	movw	r24, r12
    2c0c:	9e 01       	movw	r18, r28
    2c0e:	2f 5f       	subi	r18, 0xFF	; 255
    2c10:	3f 4f       	sbci	r19, 0xFF	; 255
    2c12:	09 95       	icall
    2c14:	c8 c0       	rjmp	.+400    	; 0x2da6 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    2c16:	62 30       	cpi	r22, 0x02	; 2
    2c18:	71 05       	cpc	r23, r1
    2c1a:	09 f4       	brne	.+2      	; 0x2c1e <midi_input_callbacks+0x74>
    2c1c:	5f c0       	rjmp	.+190    	; 0x2cdc <midi_input_callbacks+0x132>
    2c1e:	63 30       	cpi	r22, 0x03	; 3
    2c20:	71 05       	cpc	r23, r1
    2c22:	29 f0       	breq	.+10     	; 0x2c2e <midi_input_callbacks+0x84>
    2c24:	61 30       	cpi	r22, 0x01	; 1
    2c26:	71 05       	cpc	r23, r1
    2c28:	09 f0       	breq	.+2      	; 0x2c2c <midi_input_callbacks+0x82>
    2c2a:	b3 c0       	rjmp	.+358    	; 0x2d92 <midi_input_callbacks+0x1e8>
    2c2c:	99 c0       	rjmp	.+306    	; 0x2d60 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2c2e:	84 2f       	mov	r24, r20
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	80 7f       	andi	r24, 0xF0	; 240
    2c34:	90 70       	andi	r25, 0x00	; 0
    2c36:	80 3a       	cpi	r24, 0xA0	; 160
    2c38:	91 05       	cpc	r25, r1
    2c3a:	29 f1       	breq	.+74     	; 0x2c86 <midi_input_callbacks+0xdc>
    2c3c:	81 3a       	cpi	r24, 0xA1	; 161
    2c3e:	91 05       	cpc	r25, r1
    2c40:	3c f4       	brge	.+14     	; 0x2c50 <midi_input_callbacks+0xa6>
    2c42:	80 38       	cpi	r24, 0x80	; 128
    2c44:	91 05       	cpc	r25, r1
    2c46:	c9 f0       	breq	.+50     	; 0x2c7a <midi_input_callbacks+0xd0>
    2c48:	80 39       	cpi	r24, 0x90	; 144
    2c4a:	91 05       	cpc	r25, r1
    2c4c:	91 f5       	brne	.+100    	; 0x2cb2 <midi_input_callbacks+0x108>
    2c4e:	0f c0       	rjmp	.+30     	; 0x2c6e <midi_input_callbacks+0xc4>
    2c50:	80 3e       	cpi	r24, 0xE0	; 224
    2c52:	91 05       	cpc	r25, r1
    2c54:	f1 f0       	breq	.+60     	; 0x2c92 <midi_input_callbacks+0xe8>
    2c56:	80 3f       	cpi	r24, 0xF0	; 240
    2c58:	91 05       	cpc	r25, r1
    2c5a:	09 f1       	breq	.+66     	; 0x2c9e <midi_input_callbacks+0xf4>
    2c5c:	80 3b       	cpi	r24, 0xB0	; 176
    2c5e:	91 05       	cpc	r25, r1
    2c60:	41 f5       	brne	.+80     	; 0x2cb2 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2c62:	d6 01       	movw	r26, r12
    2c64:	12 96       	adiw	r26, 0x02	; 2
    2c66:	ed 91       	ld	r30, X+
    2c68:	fc 91       	ld	r31, X
    2c6a:	13 97       	sbiw	r26, 0x03	; 3
              break;
    2c6c:	24 c0       	rjmp	.+72     	; 0x2cb6 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    2c6e:	d6 01       	movw	r26, r12
    2c70:	14 96       	adiw	r26, 0x04	; 4
    2c72:	ed 91       	ld	r30, X+
    2c74:	fc 91       	ld	r31, X
    2c76:	15 97       	sbiw	r26, 0x05	; 5
              break;
    2c78:	1e c0       	rjmp	.+60     	; 0x2cb6 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    2c7a:	d6 01       	movw	r26, r12
    2c7c:	16 96       	adiw	r26, 0x06	; 6
    2c7e:	ed 91       	ld	r30, X+
    2c80:	fc 91       	ld	r31, X
    2c82:	17 97       	sbiw	r26, 0x07	; 7
              break;
    2c84:	18 c0       	rjmp	.+48     	; 0x2cb6 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    2c86:	d6 01       	movw	r26, r12
    2c88:	18 96       	adiw	r26, 0x08	; 8
    2c8a:	ed 91       	ld	r30, X+
    2c8c:	fc 91       	ld	r31, X
    2c8e:	19 97       	sbiw	r26, 0x09	; 9
              break;
    2c90:	12 c0       	rjmp	.+36     	; 0x2cb6 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    2c92:	d6 01       	movw	r26, r12
    2c94:	1a 96       	adiw	r26, 0x0a	; 10
    2c96:	ed 91       	ld	r30, X+
    2c98:	fc 91       	ld	r31, X
    2c9a:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    2c9c:	0c c0       	rjmp	.+24     	; 0x2cb6 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    2c9e:	b2 ef       	ldi	r27, 0xF2	; 242
    2ca0:	4b 17       	cp	r20, r27
    2ca2:	09 f0       	breq	.+2      	; 0x2ca6 <midi_input_callbacks+0xfc>
    2ca4:	90 c0       	rjmp	.+288    	; 0x2dc6 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    2ca6:	d6 01       	movw	r26, r12
    2ca8:	1c 96       	adiw	r26, 0x0c	; 12
    2caa:	ed 91       	ld	r30, X+
    2cac:	fc 91       	ld	r31, X
    2cae:	1d 97       	sbiw	r26, 0x0d	; 13
    2cb0:	02 c0       	rjmp	.+4      	; 0x2cb6 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    2cb2:	e0 e0       	ldi	r30, 0x00	; 0
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    2cb6:	30 97       	sbiw	r30, 0x00	; 0
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <midi_input_callbacks+0x112>
    2cba:	85 c0       	rjmp	.+266    	; 0x2dc6 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    2cbc:	b2 ef       	ldi	r27, 0xF2	; 242
    2cbe:	fb 16       	cp	r15, r27
    2cc0:	31 f4       	brne	.+12     	; 0x2cce <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    2cc2:	c6 01       	movw	r24, r12
    2cc4:	62 ef       	ldi	r22, 0xF2	; 242
    2cc6:	4e 2d       	mov	r20, r14
    2cc8:	21 2f       	mov	r18, r17
    2cca:	09 95       	icall
    2ccc:	6c c0       	rjmp	.+216    	; 0x2da6 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    2cce:	6f 2d       	mov	r22, r15
    2cd0:	6f 70       	andi	r22, 0x0F	; 15
    2cd2:	c6 01       	movw	r24, r12
    2cd4:	4e 2d       	mov	r20, r14
    2cd6:	21 2f       	mov	r18, r17
    2cd8:	09 95       	icall
    2cda:	65 c0       	rjmp	.+202    	; 0x2da6 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2cdc:	84 2f       	mov	r24, r20
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	80 7f       	andi	r24, 0xF0	; 240
    2ce2:	90 70       	andi	r25, 0x00	; 0
    2ce4:	80 3d       	cpi	r24, 0xD0	; 208
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	61 f0       	breq	.+24     	; 0x2d02 <midi_input_callbacks+0x158>
    2cea:	80 3f       	cpi	r24, 0xF0	; 240
    2cec:	91 05       	cpc	r25, r1
    2cee:	79 f0       	breq	.+30     	; 0x2d0e <midi_input_callbacks+0x164>
    2cf0:	80 3c       	cpi	r24, 0xC0	; 192
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	f9 f4       	brne	.+62     	; 0x2d34 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    2cf6:	d6 01       	movw	r26, r12
    2cf8:	1e 96       	adiw	r26, 0x0e	; 14
    2cfa:	ed 91       	ld	r30, X+
    2cfc:	fc 91       	ld	r31, X
    2cfe:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2d00:	1b c0       	rjmp	.+54     	; 0x2d38 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2d02:	d6 01       	movw	r26, r12
    2d04:	50 96       	adiw	r26, 0x10	; 16
    2d06:	ed 91       	ld	r30, X+
    2d08:	fc 91       	ld	r31, X
    2d0a:	51 97       	sbiw	r26, 0x11	; 17
              break;
    2d0c:	15 c0       	rjmp	.+42     	; 0x2d38 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2d0e:	b3 ef       	ldi	r27, 0xF3	; 243
    2d10:	4b 17       	cp	r20, r27
    2d12:	31 f4       	brne	.+12     	; 0x2d20 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    2d14:	d6 01       	movw	r26, r12
    2d16:	52 96       	adiw	r26, 0x12	; 18
    2d18:	ed 91       	ld	r30, X+
    2d1a:	fc 91       	ld	r31, X
    2d1c:	53 97       	sbiw	r26, 0x13	; 19
    2d1e:	0c c0       	rjmp	.+24     	; 0x2d38 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2d20:	b1 ef       	ldi	r27, 0xF1	; 241
    2d22:	4b 17       	cp	r20, r27
    2d24:	09 f0       	breq	.+2      	; 0x2d28 <midi_input_callbacks+0x17e>
    2d26:	4f c0       	rjmp	.+158    	; 0x2dc6 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    2d28:	d6 01       	movw	r26, r12
    2d2a:	54 96       	adiw	r26, 0x14	; 20
    2d2c:	ed 91       	ld	r30, X+
    2d2e:	fc 91       	ld	r31, X
    2d30:	55 97       	sbiw	r26, 0x15	; 21
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    2d34:	e0 e0       	ldi	r30, 0x00	; 0
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    2d38:	30 97       	sbiw	r30, 0x00	; 0
    2d3a:	09 f4       	brne	.+2      	; 0x2d3e <midi_input_callbacks+0x194>
    2d3c:	44 c0       	rjmp	.+136    	; 0x2dc6 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2d3e:	b3 ef       	ldi	r27, 0xF3	; 243
    2d40:	fb 16       	cp	r15, r27
    2d42:	19 f0       	breq	.+6      	; 0x2d4a <midi_input_callbacks+0x1a0>
    2d44:	81 ef       	ldi	r24, 0xF1	; 241
    2d46:	f8 16       	cp	r15, r24
    2d48:	29 f4       	brne	.+10     	; 0x2d54 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    2d4a:	c6 01       	movw	r24, r12
    2d4c:	6f 2d       	mov	r22, r15
    2d4e:	4e 2d       	mov	r20, r14
    2d50:	09 95       	icall
    2d52:	29 c0       	rjmp	.+82     	; 0x2da6 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    2d54:	6f 2d       	mov	r22, r15
    2d56:	6f 70       	andi	r22, 0x0F	; 15
    2d58:	c6 01       	movw	r24, r12
    2d5a:	4e 2d       	mov	r20, r14
    2d5c:	09 95       	icall
    2d5e:	23 c0       	rjmp	.+70     	; 0x2da6 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2d60:	84 2f       	mov	r24, r20
    2d62:	0e 94 72 13 	call	0x26e4	; 0x26e4 <midi_is_realtime>
    2d66:	88 23       	and	r24, r24
    2d68:	31 f0       	breq	.+12     	; 0x2d76 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    2d6a:	d6 01       	movw	r26, r12
    2d6c:	56 96       	adiw	r26, 0x16	; 22
    2d6e:	ed 91       	ld	r30, X+
    2d70:	fc 91       	ld	r31, X
    2d72:	57 97       	sbiw	r26, 0x17	; 23
    2d74:	08 c0       	rjmp	.+16     	; 0x2d86 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    2d76:	b6 ef       	ldi	r27, 0xF6	; 246
    2d78:	fb 16       	cp	r15, r27
    2d7a:	29 f5       	brne	.+74     	; 0x2dc6 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    2d7c:	d6 01       	movw	r26, r12
    2d7e:	58 96       	adiw	r26, 0x18	; 24
    2d80:	ed 91       	ld	r30, X+
    2d82:	fc 91       	ld	r31, X
    2d84:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    2d86:	30 97       	sbiw	r30, 0x00	; 0
    2d88:	f1 f0       	breq	.+60     	; 0x2dc6 <midi_input_callbacks+0x21c>
            func(device, byte0);
    2d8a:	c6 01       	movw	r24, r12
    2d8c:	6f 2d       	mov	r22, r15
    2d8e:	09 95       	icall
    2d90:	0a c0       	rjmp	.+20     	; 0x2da6 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    2d92:	64 30       	cpi	r22, 0x04	; 4
    2d94:	71 05       	cpc	r23, r1
    2d96:	a8 f4       	brcc	.+42     	; 0x2dc2 <midi_input_callbacks+0x218>
    2d98:	16 c0       	rjmp	.+44     	; 0x2dc6 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    2d9a:	c6 01       	movw	r24, r12
    2d9c:	b5 01       	movw	r22, r10
    2d9e:	4f 2d       	mov	r20, r15
    2da0:	2e 2d       	mov	r18, r14
    2da2:	01 2f       	mov	r16, r17
    2da4:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    2da6:	d6 01       	movw	r26, r12
    2da8:	5e 96       	adiw	r26, 0x1e	; 30
    2daa:	ed 91       	ld	r30, X+
    2dac:	fc 91       	ld	r31, X
    2dae:	5f 97       	sbiw	r26, 0x1f	; 31
    2db0:	30 97       	sbiw	r30, 0x00	; 0
    2db2:	89 f0       	breq	.+34     	; 0x2dd6 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    2db4:	c6 01       	movw	r24, r12
    2db6:	b5 01       	movw	r22, r10
    2db8:	4f 2d       	mov	r20, r15
    2dba:	2e 2d       	mov	r18, r14
    2dbc:	01 2f       	mov	r16, r17
    2dbe:	09 95       	icall
    2dc0:	0a c0       	rjmp	.+20     	; 0x2dd6 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    2dc2:	aa 24       	eor	r10, r10
    2dc4:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    2dc6:	d6 01       	movw	r26, r12
    2dc8:	5c 96       	adiw	r26, 0x1c	; 28
    2dca:	ed 91       	ld	r30, X+
    2dcc:	fc 91       	ld	r31, X
    2dce:	5d 97       	sbiw	r26, 0x1d	; 29
    2dd0:	30 97       	sbiw	r30, 0x00	; 0
    2dd2:	19 f7       	brne	.-58     	; 0x2d9a <midi_input_callbacks+0x1f0>
    2dd4:	e8 cf       	rjmp	.-48     	; 0x2da6 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	1f 91       	pop	r17
    2de2:	0f 91       	pop	r16
    2de4:	ff 90       	pop	r15
    2de6:	ef 90       	pop	r14
    2de8:	df 90       	pop	r13
    2dea:	cf 90       	pop	r12
    2dec:	bf 90       	pop	r11
    2dee:	af 90       	pop	r10
    2df0:	08 95       	ret

00002df2 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    2df2:	ef 92       	push	r14
    2df4:	ff 92       	push	r15
    2df6:	0f 93       	push	r16
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	7c 01       	movw	r14, r24
    2dfe:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    2e00:	86 2f       	mov	r24, r22
    2e02:	0e 94 72 13 	call	0x26e4	; 0x26e4 <midi_is_realtime>
    2e06:	88 23       	and	r24, r24
    2e08:	91 f0       	breq	.+36     	; 0x2e2e <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    2e0a:	d7 01       	movw	r26, r14
    2e0c:	95 96       	adiw	r26, 0x25	; 37
    2e0e:	dc 91       	ld	r29, X
    2e10:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	95 96       	adiw	r26, 0x25	; 37
    2e16:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    2e18:	c7 01       	movw	r24, r14
    2e1a:	61 e0       	ldi	r22, 0x01	; 1
    2e1c:	70 e0       	ldi	r23, 0x00	; 0
    2e1e:	4c 2f       	mov	r20, r28
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	00 e0       	ldi	r16, 0x00	; 0
    2e24:	0e 94 d5 15 	call	0x2baa	; 0x2baa <midi_input_callbacks>
    device->input_state = state;
    2e28:	f7 01       	movw	r30, r14
    2e2a:	d5 a3       	lds	r29, 0x55
    2e2c:	b7 c0       	rjmp	.+366    	; 0x2f9c <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    2e2e:	8c 2f       	mov	r24, r28
    2e30:	0e 94 6e 13 	call	0x26dc	; 0x26dc <midi_is_statusbyte>
    2e34:	88 23       	and	r24, r24
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <midi_process_byte+0x48>
    2e38:	73 c0       	rjmp	.+230    	; 0x2f20 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    2e3a:	d7 01       	movw	r26, r14
    2e3c:	95 96       	adiw	r26, 0x25	; 37
    2e3e:	8c 91       	ld	r24, X
    2e40:	95 97       	sbiw	r26, 0x25	; 37
    2e42:	84 30       	cpi	r24, 0x04	; 4
    2e44:	49 f0       	breq	.+18     	; 0x2e58 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    2e46:	92 96       	adiw	r26, 0x22	; 34
    2e48:	cc 93       	st	X, r28
    2e4a:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	97 96       	adiw	r26, 0x27	; 39
    2e52:	9c 93       	st	X, r25
    2e54:	8e 93       	st	-X, r24
    2e56:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    2e58:	8c 2f       	mov	r24, r28
    2e5a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <midi_packet_length>
    2e5e:	81 30       	cpi	r24, 0x01	; 1
    2e60:	41 f0       	breq	.+16     	; 0x2e72 <midi_process_byte+0x80>
    2e62:	81 30       	cpi	r24, 0x01	; 1
    2e64:	00 f1       	brcs	.+64     	; 0x2ea6 <midi_process_byte+0xb4>
    2e66:	82 30       	cpi	r24, 0x02	; 2
    2e68:	a1 f0       	breq	.+40     	; 0x2e92 <midi_process_byte+0xa0>
    2e6a:	83 30       	cpi	r24, 0x03	; 3
    2e6c:	09 f0       	breq	.+2      	; 0x2e70 <midi_process_byte+0x7e>
    2e6e:	4f c0       	rjmp	.+158    	; 0x2f0e <midi_process_byte+0x11c>
    2e70:	14 c0       	rjmp	.+40     	; 0x2e9a <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	f7 01       	movw	r30, r14
    2e76:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    2e78:	c7 01       	movw	r24, r14
    2e7a:	61 e0       	ldi	r22, 0x01	; 1
    2e7c:	70 e0       	ldi	r23, 0x00	; 0
    2e7e:	4c 2f       	mov	r20, r28
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	00 e0       	ldi	r16, 0x00	; 0
    2e84:	0e 94 d5 15 	call	0x2baa	; 0x2baa <midi_input_callbacks>
        device->input_state = IDLE;
    2e88:	d7 01       	movw	r26, r14
    2e8a:	95 96       	adiw	r26, 0x25	; 37
    2e8c:	1c 92       	st	X, r1
    2e8e:	95 97       	sbiw	r26, 0x25	; 37
        break;
    2e90:	85 c0       	rjmp	.+266    	; 0x2f9c <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    2e92:	82 e0       	ldi	r24, 0x02	; 2
    2e94:	f7 01       	movw	r30, r14
    2e96:	85 a3       	lds	r24, 0x55
        break;
    2e98:	81 c0       	rjmp	.+258    	; 0x2f9c <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    2e9a:	83 e0       	ldi	r24, 0x03	; 3
    2e9c:	d7 01       	movw	r26, r14
    2e9e:	95 96       	adiw	r26, 0x25	; 37
    2ea0:	8c 93       	st	X, r24
    2ea2:	95 97       	sbiw	r26, 0x25	; 37
        break;
    2ea4:	7b c0       	rjmp	.+246    	; 0x2f9c <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    2ea6:	c0 3f       	cpi	r28, 0xF0	; 240
    2ea8:	19 f0       	breq	.+6      	; 0x2eb0 <midi_process_byte+0xbe>
    2eaa:	c7 3f       	cpi	r28, 0xF7	; 247
    2eac:	59 f5       	brne	.+86     	; 0x2f04 <midi_process_byte+0x112>
    2eae:	0a c0       	rjmp	.+20     	; 0x2ec4 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    2eb0:	84 e0       	ldi	r24, 0x04	; 4
    2eb2:	f7 01       	movw	r30, r14
    2eb4:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    2eb6:	80 ef       	ldi	r24, 0xF0	; 240
    2eb8:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	97 a3       	lds	r25, 0x57
    2ec0:	86 a3       	lds	r24, 0x56
            break;
    2ec2:	6c c0       	rjmp	.+216    	; 0x2f9c <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    2ec4:	d7 01       	movw	r26, r14
    2ec6:	96 96       	adiw	r26, 0x26	; 38
    2ec8:	2d 91       	ld	r18, X+
    2eca:	3c 91       	ld	r19, X
    2ecc:	97 97       	sbiw	r26, 0x27	; 39
    2ece:	c9 01       	movw	r24, r18
    2ed0:	63 e0       	ldi	r22, 0x03	; 3
    2ed2:	70 e0       	ldi	r23, 0x00	; 0
    2ed4:	0e 94 cd 19 	call	0x339a	; 0x339a <__udivmodhi4>
    2ed8:	f7 01       	movw	r30, r14
    2eda:	e8 0f       	add	r30, r24
    2edc:	f9 1f       	adc	r31, r25
    2ede:	87 ef       	ldi	r24, 0xF7	; 247
    2ee0:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    2ee2:	b9 01       	movw	r22, r18
    2ee4:	6f 5f       	subi	r22, 0xFF	; 255
    2ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee8:	f7 01       	movw	r30, r14
    2eea:	77 a3       	lds	r23, 0x57
    2eec:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    2eee:	c7 01       	movw	r24, r14
    2ef0:	42 a1       	lds	r20, 0x42
    2ef2:	23 a1       	lds	r18, 0x43
    2ef4:	04 a1       	lds	r16, 0x44
    2ef6:	0e 94 d5 15 	call	0x2baa	; 0x2baa <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    2efa:	d7 01       	movw	r26, r14
    2efc:	95 96       	adiw	r26, 0x25	; 37
    2efe:	1c 92       	st	X, r1
    2f00:	95 97       	sbiw	r26, 0x25	; 37
            break;
    2f02:	4c c0       	rjmp	.+152    	; 0x2f9c <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    2f04:	f7 01       	movw	r30, r14
    2f06:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    2f08:	17 a2       	lds	r17, 0x97
    2f0a:	16 a2       	lds	r17, 0x96
    2f0c:	47 c0       	rjmp	.+142    	; 0x2f9c <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    2f0e:	d7 01       	movw	r26, r14
    2f10:	95 96       	adiw	r26, 0x25	; 37
    2f12:	1c 92       	st	X, r1
    2f14:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    2f16:	97 96       	adiw	r26, 0x27	; 39
    2f18:	1c 92       	st	X, r1
    2f1a:	1e 92       	st	-X, r1
    2f1c:	96 97       	sbiw	r26, 0x26	; 38
        break;
    2f1e:	3e c0       	rjmp	.+124    	; 0x2f9c <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    2f20:	f7 01       	movw	r30, r14
    2f22:	25 a1       	lds	r18, 0x45
    2f24:	22 23       	and	r18, r18
    2f26:	d1 f1       	breq	.+116    	; 0x2f9c <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    2f28:	06 a0       	lds	r16, 0x86
    2f2a:	f7 a1       	lds	r31, 0x47
    2f2c:	e0 2d       	mov	r30, r0
    2f2e:	cf 01       	movw	r24, r30
    2f30:	63 e0       	ldi	r22, 0x03	; 3
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	0e 94 cd 19 	call	0x339a	; 0x339a <__udivmodhi4>
    2f38:	ac 01       	movw	r20, r24
    2f3a:	8e 0d       	add	r24, r14
    2f3c:	9f 1d       	adc	r25, r15
    2f3e:	dc 01       	movw	r26, r24
    2f40:	92 96       	adiw	r26, 0x22	; 34
    2f42:	cc 93       	st	X, r28
    2f44:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    2f46:	bf 01       	movw	r22, r30
    2f48:	6f 5f       	subi	r22, 0xFF	; 255
    2f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4c:	f7 01       	movw	r30, r14
    2f4e:	77 a3       	lds	r23, 0x57
    2f50:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    2f52:	41 30       	cpi	r20, 0x01	; 1
    2f54:	51 05       	cpc	r21, r1
    2f56:	91 f0       	breq	.+36     	; 0x2f7c <midi_process_byte+0x18a>
    2f58:	42 30       	cpi	r20, 0x02	; 2
    2f5a:	51 05       	cpc	r21, r1
    2f5c:	f9 f4       	brne	.+62     	; 0x2f9c <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    2f5e:	c7 01       	movw	r24, r14
    2f60:	42 a1       	lds	r20, 0x42
    2f62:	23 a1       	lds	r18, 0x43
    2f64:	04 a1       	lds	r16, 0x44
    2f66:	0e 94 d5 15 	call	0x2baa	; 0x2baa <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    2f6a:	f7 01       	movw	r30, r14
    2f6c:	85 a1       	lds	r24, 0x45
    2f6e:	84 30       	cpi	r24, 0x04	; 4
    2f70:	a9 f0       	breq	.+42     	; 0x2f9c <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	97 a3       	lds	r25, 0x57
    2f78:	86 a3       	lds	r24, 0x56
    2f7a:	10 c0       	rjmp	.+32     	; 0x2f9c <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    2f7c:	22 30       	cpi	r18, 0x02	; 2
    2f7e:	71 f4       	brne	.+28     	; 0x2f9c <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    2f80:	c7 01       	movw	r24, r14
    2f82:	42 a1       	lds	r20, 0x42
    2f84:	23 a1       	lds	r18, 0x43
    2f86:	00 e0       	ldi	r16, 0x00	; 0
    2f88:	0e 94 d5 15 	call	0x2baa	; 0x2baa <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    2f8c:	f7 01       	movw	r30, r14
    2f8e:	85 a1       	lds	r24, 0x45
    2f90:	84 30       	cpi	r24, 0x04	; 4
    2f92:	21 f0       	breq	.+8      	; 0x2f9c <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	97 a3       	lds	r25, 0x57
    2f9a:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	0f 91       	pop	r16
    2fa2:	ff 90       	pop	r15
    2fa4:	ef 90       	pop	r14
    2fa6:	08 95       	ret

00002fa8 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    2fa8:	cf 92       	push	r12
    2faa:	df 92       	push	r13
    2fac:	ef 92       	push	r14
    2fae:	ff 92       	push	r15
    2fb0:	0f 93       	push	r16
    2fb2:	1f 93       	push	r17
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    2fb8:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    2fba:	dc 01       	movw	r26, r24
    2fbc:	90 96       	adiw	r26, 0x20	; 32
    2fbe:	ed 91       	ld	r30, X+
    2fc0:	fc 91       	ld	r31, X
    2fc2:	91 97       	sbiw	r26, 0x21	; 33
    2fc4:	30 97       	sbiw	r30, 0x00	; 0
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    2fc8:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    2fca:	0f 2e       	mov	r0, r31
    2fcc:	f8 ee       	ldi	r31, 0xE8	; 232
    2fce:	ef 2e       	mov	r14, r31
    2fd0:	ff 24       	eor	r15, r15
    2fd2:	f0 2d       	mov	r31, r0
    2fd4:	ec 0c       	add	r14, r12
    2fd6:	fd 1c       	adc	r15, r13
    2fd8:	c7 01       	movw	r24, r14
    2fda:	0e 94 29 13 	call	0x2652	; 0x2652 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2fde:	c8 2f       	mov	r28, r24
    2fe0:	d0 e0       	ldi	r29, 0x00	; 0
    2fe2:	20 97       	sbiw	r28, 0x00	; 0
    2fe4:	99 f0       	breq	.+38     	; 0x300c <midi_device_process+0x64>
    2fe6:	00 e0       	ldi	r16, 0x00	; 0
    2fe8:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    2fea:	c7 01       	movw	r24, r14
    2fec:	60 e0       	ldi	r22, 0x00	; 0
    2fee:	0e 94 3e 13 	call	0x267c	; 0x267c <bytequeue_get>
    2ff2:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    2ff4:	c6 01       	movw	r24, r12
    2ff6:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    2ffa:	c7 01       	movw	r24, r14
    2ffc:	61 e0       	ldi	r22, 0x01	; 1
    2ffe:	0e 94 4f 13 	call	0x269e	; 0x269e <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3002:	0f 5f       	subi	r16, 0xFF	; 255
    3004:	1f 4f       	sbci	r17, 0xFF	; 255
    3006:	0c 17       	cp	r16, r28
    3008:	1d 07       	cpc	r17, r29
    300a:	78 f3       	brcs	.-34     	; 0x2fea <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	1f 91       	pop	r17
    3012:	0f 91       	pop	r16
    3014:	ff 90       	pop	r15
    3016:	ef 90       	pop	r14
    3018:	df 90       	pop	r13
    301a:	cf 90       	pop	r12
    301c:	08 95       	ret

0000301e <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    301e:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    3020:	67 e0       	ldi	r22, 0x07	; 7
    3022:	70 e0       	ldi	r23, 0x00	; 0
    3024:	0e 94 cd 19 	call	0x339a	; 0x339a <__udivmodhi4>
    3028:	48 2f       	mov	r20, r24
   if (remainder)
    302a:	88 23       	and	r24, r24
    302c:	81 f0       	breq	.+32     	; 0x304e <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    302e:	c9 01       	movw	r24, r18
    3030:	67 e0       	ldi	r22, 0x07	; 7
    3032:	70 e0       	ldi	r23, 0x00	; 0
    3034:	0e 94 cd 19 	call	0x339a	; 0x339a <__udivmodhi4>
    3038:	cb 01       	movw	r24, r22
    303a:	88 0f       	add	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	88 0f       	add	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	01 96       	adiw	r24, 0x01	; 1
    3048:	84 0f       	add	r24, r20
    304a:	91 1d       	adc	r25, r1
    304c:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    304e:	c9 01       	movw	r24, r18
    3050:	67 e0       	ldi	r22, 0x07	; 7
    3052:	70 e0       	ldi	r23, 0x00	; 0
    3054:	0e 94 cd 19 	call	0x339a	; 0x339a <__udivmodhi4>
    3058:	cb 01       	movw	r24, r22
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
}
    3066:	08 95       	ret

00003068 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3068:	48 2f       	mov	r20, r24
    306a:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    306c:	a1 f0       	breq	.+40     	; 0x3096 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    306e:	9c 01       	movw	r18, r24
    3070:	36 95       	lsr	r19
    3072:	27 95       	ror	r18
    3074:	36 95       	lsr	r19
    3076:	27 95       	ror	r18
    3078:	36 95       	lsr	r19
    307a:	27 95       	ror	r18
    307c:	c9 01       	movw	r24, r18
    307e:	88 0f       	add	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	88 0f       	add	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	82 1b       	sub	r24, r18
    308c:	93 0b       	sbc	r25, r19
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	84 0f       	add	r24, r20
    3092:	91 1d       	adc	r25, r1
    3094:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    3096:	9c 01       	movw	r18, r24
    3098:	36 95       	lsr	r19
    309a:	27 95       	ror	r18
    309c:	36 95       	lsr	r19
    309e:	27 95       	ror	r18
    30a0:	36 95       	lsr	r19
    30a2:	27 95       	ror	r18
    30a4:	c9 01       	movw	r24, r18
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	88 0f       	add	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	88 0f       	add	r24, r24
    30b0:	99 1f       	adc	r25, r25
    30b2:	82 1b       	sub	r24, r18
    30b4:	93 0b       	sbc	r25, r19
}
    30b6:	08 95       	ret

000030b8 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    30b8:	2f 92       	push	r2
    30ba:	3f 92       	push	r3
    30bc:	4f 92       	push	r4
    30be:	5f 92       	push	r5
    30c0:	6f 92       	push	r6
    30c2:	7f 92       	push	r7
    30c4:	8f 92       	push	r8
    30c6:	9f 92       	push	r9
    30c8:	af 92       	push	r10
    30ca:	bf 92       	push	r11
    30cc:	cf 92       	push	r12
    30ce:	df 92       	push	r13
    30d0:	ef 92       	push	r14
    30d2:	ff 92       	push	r15
    30d4:	0f 93       	push	r16
    30d6:	1f 93       	push	r17
    30d8:	cf 93       	push	r28
    30da:	df 93       	push	r29
    30dc:	00 d0       	rcall	.+0      	; 0x30de <sysex_encode+0x26>
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <sysex_encode+0x28>
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <sysex_encode+0x2a>
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	1c 01       	movw	r2, r24
    30e8:	7a 83       	std	Y+2, r23	; 0x02
    30ea:	69 83       	std	Y+1, r22	; 0x01
    30ec:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    30ee:	ca 01       	movw	r24, r20
    30f0:	67 e0       	ldi	r22, 0x07	; 7
    30f2:	70 e0       	ldi	r23, 0x00	; 0
    30f4:	0e 94 cd 19 	call	0x339a	; 0x339a <__udivmodhi4>
    30f8:	2b 01       	movw	r4, r22
    30fa:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    30fc:	61 15       	cp	r22, r1
    30fe:	71 05       	cpc	r23, r1
    3100:	b1 f1       	breq	.+108    	; 0x316e <sysex_encode+0xb6>
    3102:	81 01       	movw	r16, r2
    3104:	e9 80       	ldd	r14, Y+1	; 0x01
    3106:	fa 80       	ldd	r15, Y+2	; 0x02
    3108:	cc 24       	eor	r12, r12
    310a:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    310c:	88 24       	eor	r8, r8
    310e:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3110:	1e 83       	std	Y+6, r17	; 0x06
    3112:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    3114:	f8 01       	movw	r30, r16
    3116:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3118:	fc 82       	std	Y+4, r15	; 0x04
    311a:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    311c:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    311e:	ab 81       	ldd	r26, Y+3	; 0x03
    3120:	bc 81       	ldd	r27, Y+4	; 0x04
    3122:	2d 91       	ld	r18, X+
    3124:	bc 83       	std	Y+4, r27	; 0x04
    3126:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3128:	4f 5f       	subi	r20, 0xFF	; 255
    312a:	5f 4f       	sbci	r21, 0xFF	; 255
    312c:	82 2f       	mov	r24, r18
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	80 78       	andi	r24, 0x80	; 128
    3132:	90 70       	andi	r25, 0x00	; 0
    3134:	bc 01       	movw	r22, r24
    3136:	04 2e       	mov	r0, r20
    3138:	02 c0       	rjmp	.+4      	; 0x313e <sysex_encode+0x86>
    313a:	75 95       	asr	r23
    313c:	67 95       	ror	r22
    313e:	0a 94       	dec	r0
    3140:	e2 f7       	brpl	.-8      	; 0x313a <sysex_encode+0x82>
    3142:	ad 81       	ldd	r26, Y+5	; 0x05
    3144:	be 81       	ldd	r27, Y+6	; 0x06
    3146:	8c 91       	ld	r24, X
    3148:	86 2b       	or	r24, r22
    314a:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    314c:	2f 77       	andi	r18, 0x7F	; 127
    314e:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3150:	47 30       	cpi	r20, 0x07	; 7
    3152:	51 05       	cpc	r21, r1
    3154:	21 f7       	brne	.-56     	; 0x311e <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3156:	08 94       	sec
    3158:	c1 1c       	adc	r12, r1
    315a:	d1 1c       	adc	r13, r1
    315c:	08 5f       	subi	r16, 0xF8	; 248
    315e:	1f 4f       	sbci	r17, 0xFF	; 255
    3160:	e7 e0       	ldi	r30, 0x07	; 7
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	ee 0e       	add	r14, r30
    3166:	ff 1e       	adc	r15, r31
    3168:	ca 14       	cp	r12, r10
    316a:	db 04       	cpc	r13, r11
    316c:	89 f6       	brne	.-94     	; 0x3110 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    316e:	c3 01       	movw	r24, r6
    3170:	67 e0       	ldi	r22, 0x07	; 7
    3172:	70 e0       	ldi	r23, 0x00	; 0
    3174:	0e 94 cd 19 	call	0x339a	; 0x339a <__udivmodhi4>
   if (remainder) {
    3178:	88 23       	and	r24, r24
    317a:	d9 f1       	breq	.+118    	; 0x31f2 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    317c:	82 01       	movw	r16, r4
    317e:	00 0f       	add	r16, r16
    3180:	11 1f       	adc	r17, r17
    3182:	00 0f       	add	r16, r16
    3184:	11 1f       	adc	r17, r17
    3186:	00 0f       	add	r16, r16
    3188:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    318a:	78 01       	movw	r14, r16
    318c:	e4 18       	sub	r14, r4
    318e:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3190:	d1 01       	movw	r26, r2
    3192:	a0 0f       	add	r26, r16
    3194:	b1 1f       	adc	r27, r17
    3196:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3198:	68 2f       	mov	r22, r24
    319a:	70 e0       	ldi	r23, 0x00	; 0
    319c:	61 15       	cp	r22, r1
    319e:	71 05       	cpc	r23, r1
    31a0:	19 f1       	breq	.+70     	; 0x31e8 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    31a2:	e9 81       	ldd	r30, Y+1	; 0x01
    31a4:	fa 81       	ldd	r31, Y+2	; 0x02
    31a6:	ee 0e       	add	r14, r30
    31a8:	ff 1e       	adc	r15, r31
    31aa:	c8 01       	movw	r24, r16
    31ac:	01 96       	adiw	r24, 0x01	; 1
    31ae:	28 0e       	add	r2, r24
    31b0:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    31b6:	f7 01       	movw	r30, r14
    31b8:	41 91       	ld	r20, Z+
    31ba:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    31bc:	2f 5f       	subi	r18, 0xFF	; 255
    31be:	3f 4f       	sbci	r19, 0xFF	; 255
    31c0:	84 2f       	mov	r24, r20
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	80 78       	andi	r24, 0x80	; 128
    31c6:	90 70       	andi	r25, 0x00	; 0
    31c8:	02 2e       	mov	r0, r18
    31ca:	02 c0       	rjmp	.+4      	; 0x31d0 <sysex_encode+0x118>
    31cc:	95 95       	asr	r25
    31ce:	87 95       	ror	r24
    31d0:	0a 94       	dec	r0
    31d2:	e2 f7       	brpl	.-8      	; 0x31cc <sysex_encode+0x114>
    31d4:	9c 91       	ld	r25, X
    31d6:	89 2b       	or	r24, r25
    31d8:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    31da:	4f 77       	andi	r20, 0x7F	; 127
    31dc:	f1 01       	movw	r30, r2
    31de:	41 93       	st	Z+, r20
    31e0:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    31e2:	26 17       	cp	r18, r22
    31e4:	37 07       	cpc	r19, r23
    31e6:	38 f3       	brcs	.-50     	; 0x31b6 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    31e8:	c8 01       	movw	r24, r16
    31ea:	01 96       	adiw	r24, 0x01	; 1
    31ec:	86 0f       	add	r24, r22
    31ee:	97 1f       	adc	r25, r23
    31f0:	07 c0       	rjmp	.+14     	; 0x3200 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    31f2:	c2 01       	movw	r24, r4
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
   }
}
    3200:	26 96       	adiw	r28, 0x06	; 6
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	ff 90       	pop	r15
    3216:	ef 90       	pop	r14
    3218:	df 90       	pop	r13
    321a:	cf 90       	pop	r12
    321c:	bf 90       	pop	r11
    321e:	af 90       	pop	r10
    3220:	9f 90       	pop	r9
    3222:	8f 90       	pop	r8
    3224:	7f 90       	pop	r7
    3226:	6f 90       	pop	r6
    3228:	5f 90       	pop	r5
    322a:	4f 90       	pop	r4
    322c:	3f 90       	pop	r3
    322e:	2f 90       	pop	r2
    3230:	08 95       	ret

00003232 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3232:	6f 92       	push	r6
    3234:	7f 92       	push	r7
    3236:	8f 92       	push	r8
    3238:	9f 92       	push	r9
    323a:	af 92       	push	r10
    323c:	bf 92       	push	r11
    323e:	cf 92       	push	r12
    3240:	df 92       	push	r13
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	3c 01       	movw	r6, r24
    3250:	4b 01       	movw	r8, r22
    3252:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3254:	42 30       	cpi	r20, 0x02	; 2
    3256:	51 05       	cpc	r21, r1
    3258:	08 f4       	brcc	.+2      	; 0x325c <sysex_decode+0x2a>
    325a:	6f c0       	rjmp	.+222    	; 0x333a <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    325c:	7a 01       	movw	r14, r20
    325e:	f6 94       	lsr	r15
    3260:	e7 94       	ror	r14
    3262:	f6 94       	lsr	r15
    3264:	e7 94       	ror	r14
    3266:	f6 94       	lsr	r15
    3268:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    326a:	e1 14       	cp	r14, r1
    326c:	f1 04       	cpc	r15, r1
    326e:	29 f1       	breq	.+74     	; 0x32ba <sysex_decode+0x88>
    3270:	eb 01       	movw	r28, r22
    3272:	b3 01       	movw	r22, r6
    3274:	00 e0       	ldi	r16, 0x00	; 0
    3276:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3278:	cc 24       	eor	r12, r12
    327a:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    327c:	de 01       	movw	r26, r28
    327e:	11 96       	adiw	r26, 0x01	; 1
    3280:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3282:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3284:	2d 91       	ld	r18, X+
    3286:	2f 77       	andi	r18, 0x7F	; 127
    3288:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    328a:	4f 5f       	subi	r20, 0xFF	; 255
    328c:	5f 4f       	sbci	r21, 0xFF	; 255
    328e:	88 81       	ld	r24, Y
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	04 2e       	mov	r0, r20
    3294:	02 c0       	rjmp	.+4      	; 0x329a <sysex_decode+0x68>
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	0a 94       	dec	r0
    329c:	e2 f7       	brpl	.-8      	; 0x3296 <sysex_decode+0x64>
    329e:	80 78       	andi	r24, 0x80	; 128
    32a0:	28 2b       	or	r18, r24
    32a2:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    32a4:	47 30       	cpi	r20, 0x07	; 7
    32a6:	51 05       	cpc	r21, r1
    32a8:	69 f7       	brne	.-38     	; 0x3284 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    32aa:	0f 5f       	subi	r16, 0xFF	; 255
    32ac:	1f 4f       	sbci	r17, 0xFF	; 255
    32ae:	28 96       	adiw	r28, 0x08	; 8
    32b0:	69 5f       	subi	r22, 0xF9	; 249
    32b2:	7f 4f       	sbci	r23, 0xFF	; 255
    32b4:	0e 15       	cp	r16, r14
    32b6:	1f 05       	cpc	r17, r15
    32b8:	09 f7       	brne	.-62     	; 0x327c <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    32ba:	5a 2d       	mov	r21, r10
    32bc:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    32be:	99 f1       	breq	.+102    	; 0x3326 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    32c0:	e7 01       	movw	r28, r14
    32c2:	cc 0f       	add	r28, r28
    32c4:	dd 1f       	adc	r29, r29
    32c6:	cc 0f       	add	r28, r28
    32c8:	dd 1f       	adc	r29, r29
    32ca:	cc 0f       	add	r28, r28
    32cc:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    32ce:	8e 01       	movw	r16, r28
    32d0:	0e 19       	sub	r16, r14
    32d2:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    32d4:	65 2f       	mov	r22, r21
    32d6:	70 e0       	ldi	r23, 0x00	; 0
    32d8:	61 50       	subi	r22, 0x01	; 1
    32da:	70 40       	sbci	r23, 0x00	; 0
    32dc:	f9 f0       	breq	.+62     	; 0x331c <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    32de:	ce 01       	movw	r24, r28
    32e0:	01 96       	adiw	r24, 0x01	; 1
    32e2:	d4 01       	movw	r26, r8
    32e4:	a8 0f       	add	r26, r24
    32e6:	b9 1f       	adc	r27, r25
    32e8:	f3 01       	movw	r30, r6
    32ea:	e0 0f       	add	r30, r16
    32ec:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    32f2:	c8 0d       	add	r28, r8
    32f4:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    32f6:	4d 91       	ld	r20, X+
    32f8:	4f 77       	andi	r20, 0x7F	; 127
    32fa:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    32fc:	2f 5f       	subi	r18, 0xFF	; 255
    32fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3300:	88 81       	ld	r24, Y
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	02 2e       	mov	r0, r18
    3306:	02 c0       	rjmp	.+4      	; 0x330c <sysex_decode+0xda>
    3308:	88 0f       	add	r24, r24
    330a:	99 1f       	adc	r25, r25
    330c:	0a 94       	dec	r0
    330e:	e2 f7       	brpl	.-8      	; 0x3308 <sysex_decode+0xd6>
    3310:	80 78       	andi	r24, 0x80	; 128
    3312:	48 2b       	or	r20, r24
    3314:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3316:	26 17       	cp	r18, r22
    3318:	37 07       	cpc	r19, r23
    331a:	68 f3       	brcs	.-38     	; 0x32f6 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    331c:	c8 01       	movw	r24, r16
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	85 0f       	add	r24, r21
    3322:	91 1d       	adc	r25, r1
    3324:	0c c0       	rjmp	.+24     	; 0x333e <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3326:	c7 01       	movw	r24, r14
    3328:	88 0f       	add	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	88 0f       	add	r24, r24
    332e:	99 1f       	adc	r25, r25
    3330:	88 0f       	add	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	8e 19       	sub	r24, r14
    3336:	9f 09       	sbc	r25, r15
    3338:	02 c0       	rjmp	.+4      	; 0x333e <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    333e:	df 91       	pop	r29
    3340:	cf 91       	pop	r28
    3342:	1f 91       	pop	r17
    3344:	0f 91       	pop	r16
    3346:	ff 90       	pop	r15
    3348:	ef 90       	pop	r14
    334a:	df 90       	pop	r13
    334c:	cf 90       	pop	r12
    334e:	bf 90       	pop	r11
    3350:	af 90       	pop	r10
    3352:	9f 90       	pop	r9
    3354:	8f 90       	pop	r8
    3356:	7f 90       	pop	r7
    3358:	6f 90       	pop	r6
    335a:	08 95       	ret

0000335c <__mulsi3>:
    335c:	62 9f       	mul	r22, r18
    335e:	d0 01       	movw	r26, r0
    3360:	73 9f       	mul	r23, r19
    3362:	f0 01       	movw	r30, r0
    3364:	82 9f       	mul	r24, r18
    3366:	e0 0d       	add	r30, r0
    3368:	f1 1d       	adc	r31, r1
    336a:	64 9f       	mul	r22, r20
    336c:	e0 0d       	add	r30, r0
    336e:	f1 1d       	adc	r31, r1
    3370:	92 9f       	mul	r25, r18
    3372:	f0 0d       	add	r31, r0
    3374:	83 9f       	mul	r24, r19
    3376:	f0 0d       	add	r31, r0
    3378:	74 9f       	mul	r23, r20
    337a:	f0 0d       	add	r31, r0
    337c:	65 9f       	mul	r22, r21
    337e:	f0 0d       	add	r31, r0
    3380:	99 27       	eor	r25, r25
    3382:	72 9f       	mul	r23, r18
    3384:	b0 0d       	add	r27, r0
    3386:	e1 1d       	adc	r30, r1
    3388:	f9 1f       	adc	r31, r25
    338a:	63 9f       	mul	r22, r19
    338c:	b0 0d       	add	r27, r0
    338e:	e1 1d       	adc	r30, r1
    3390:	f9 1f       	adc	r31, r25
    3392:	bd 01       	movw	r22, r26
    3394:	cf 01       	movw	r24, r30
    3396:	11 24       	eor	r1, r1
    3398:	08 95       	ret

0000339a <__udivmodhi4>:
    339a:	aa 1b       	sub	r26, r26
    339c:	bb 1b       	sub	r27, r27
    339e:	51 e1       	ldi	r21, 0x11	; 17
    33a0:	07 c0       	rjmp	.+14     	; 0x33b0 <__udivmodhi4_ep>

000033a2 <__udivmodhi4_loop>:
    33a2:	aa 1f       	adc	r26, r26
    33a4:	bb 1f       	adc	r27, r27
    33a6:	a6 17       	cp	r26, r22
    33a8:	b7 07       	cpc	r27, r23
    33aa:	10 f0       	brcs	.+4      	; 0x33b0 <__udivmodhi4_ep>
    33ac:	a6 1b       	sub	r26, r22
    33ae:	b7 0b       	sbc	r27, r23

000033b0 <__udivmodhi4_ep>:
    33b0:	88 1f       	adc	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	5a 95       	dec	r21
    33b6:	a9 f7       	brne	.-22     	; 0x33a2 <__udivmodhi4_loop>
    33b8:	80 95       	com	r24
    33ba:	90 95       	com	r25
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	08 95       	ret

000033c2 <__divmodhi4>:
    33c2:	97 fb       	bst	r25, 7
    33c4:	09 2e       	mov	r0, r25
    33c6:	07 26       	eor	r0, r23
    33c8:	0a d0       	rcall	.+20     	; 0x33de <__divmodhi4_neg1>
    33ca:	77 fd       	sbrc	r23, 7
    33cc:	04 d0       	rcall	.+8      	; 0x33d6 <__divmodhi4_neg2>
    33ce:	e5 df       	rcall	.-54     	; 0x339a <__udivmodhi4>
    33d0:	06 d0       	rcall	.+12     	; 0x33de <__divmodhi4_neg1>
    33d2:	00 20       	and	r0, r0
    33d4:	1a f4       	brpl	.+6      	; 0x33dc <__divmodhi4_exit>

000033d6 <__divmodhi4_neg2>:
    33d6:	70 95       	com	r23
    33d8:	61 95       	neg	r22
    33da:	7f 4f       	sbci	r23, 0xFF	; 255

000033dc <__divmodhi4_exit>:
    33dc:	08 95       	ret

000033de <__divmodhi4_neg1>:
    33de:	f6 f7       	brtc	.-4      	; 0x33dc <__divmodhi4_exit>
    33e0:	90 95       	com	r25
    33e2:	81 95       	neg	r24
    33e4:	9f 4f       	sbci	r25, 0xFF	; 255
    33e6:	08 95       	ret

000033e8 <memcpy>:
    33e8:	fb 01       	movw	r30, r22
    33ea:	dc 01       	movw	r26, r24
    33ec:	02 c0       	rjmp	.+4      	; 0x33f2 <memcpy+0xa>
    33ee:	01 90       	ld	r0, Z+
    33f0:	0d 92       	st	X+, r0
    33f2:	41 50       	subi	r20, 0x01	; 1
    33f4:	50 40       	sbci	r21, 0x00	; 0
    33f6:	d8 f7       	brcc	.-10     	; 0x33ee <memcpy+0x6>
    33f8:	08 95       	ret

000033fa <memmove>:
    33fa:	68 17       	cp	r22, r24
    33fc:	79 07       	cpc	r23, r25
    33fe:	68 f4       	brcc	.+26     	; 0x341a <memmove+0x20>
    3400:	fb 01       	movw	r30, r22
    3402:	dc 01       	movw	r26, r24
    3404:	e4 0f       	add	r30, r20
    3406:	f5 1f       	adc	r31, r21
    3408:	a4 0f       	add	r26, r20
    340a:	b5 1f       	adc	r27, r21
    340c:	02 c0       	rjmp	.+4      	; 0x3412 <memmove+0x18>
    340e:	02 90       	ld	r0, -Z
    3410:	0e 92       	st	-X, r0
    3412:	41 50       	subi	r20, 0x01	; 1
    3414:	50 40       	sbci	r21, 0x00	; 0
    3416:	d8 f7       	brcc	.-10     	; 0x340e <memmove+0x14>
    3418:	08 95       	ret
    341a:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <memcpy>

0000341e <__eerd_block_m6450a>:
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22

00003422 <__eerd_blraw_m6450a>:
    3422:	fc 01       	movw	r30, r24
    3424:	f9 99       	sbic	0x1f, 1	; 31
    3426:	fe cf       	rjmp	.-4      	; 0x3424 <__eerd_blraw_m6450a+0x2>
    3428:	06 c0       	rjmp	.+12     	; 0x3436 <__eerd_blraw_m6450a+0x14>
    342a:	f2 bd       	out	0x22, r31	; 34
    342c:	e1 bd       	out	0x21, r30	; 33
    342e:	f8 9a       	sbi	0x1f, 0	; 31
    3430:	31 96       	adiw	r30, 0x01	; 1
    3432:	00 b4       	in	r0, 0x20	; 32
    3434:	0d 92       	st	X+, r0
    3436:	41 50       	subi	r20, 0x01	; 1
    3438:	50 40       	sbci	r21, 0x00	; 0
    343a:	b8 f7       	brcc	.-18     	; 0x342a <__eerd_blraw_m6450a+0x8>
    343c:	08 95       	ret

0000343e <__eerd_word_m6450a>:
    343e:	a8 e1       	ldi	r26, 0x18	; 24
    3440:	b0 e0       	ldi	r27, 0x00	; 0
    3442:	42 e0       	ldi	r20, 0x02	; 2
    3444:	50 e0       	ldi	r21, 0x00	; 0
    3446:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__eerd_blraw_m6450a>

0000344a <__eeupd_block_m6450a>:
    344a:	dc 01       	movw	r26, r24
    344c:	a4 0f       	add	r26, r20
    344e:	b5 1f       	adc	r27, r21
    3450:	41 50       	subi	r20, 0x01	; 1
    3452:	50 40       	sbci	r21, 0x00	; 0
    3454:	48 f0       	brcs	.+18     	; 0x3468 <__eeupd_block_m6450a+0x1e>
    3456:	cb 01       	movw	r24, r22
    3458:	84 0f       	add	r24, r20
    345a:	95 1f       	adc	r25, r21
    345c:	2e 91       	ld	r18, -X
    345e:	0e 94 36 1a 	call	0x346c	; 0x346c <__eeupd_r18_m6450a>
    3462:	41 50       	subi	r20, 0x01	; 1
    3464:	50 40       	sbci	r21, 0x00	; 0
    3466:	d0 f7       	brcc	.-12     	; 0x345c <__eeupd_block_m6450a+0x12>
    3468:	08 95       	ret

0000346a <__eeupd_byte_m6450a>:
    346a:	26 2f       	mov	r18, r22

0000346c <__eeupd_r18_m6450a>:
    346c:	f9 99       	sbic	0x1f, 1	; 31
    346e:	fe cf       	rjmp	.-4      	; 0x346c <__eeupd_r18_m6450a>
    3470:	92 bd       	out	0x22, r25	; 34
    3472:	81 bd       	out	0x21, r24	; 33
    3474:	f8 9a       	sbi	0x1f, 0	; 31
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	00 b4       	in	r0, 0x20	; 32
    347a:	02 16       	cp	r0, r18
    347c:	31 f0       	breq	.+12     	; 0x348a <__eeupd_r18_m6450a+0x1e>
    347e:	20 bd       	out	0x20, r18	; 32
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	fa 9a       	sbi	0x1f, 2	; 31
    3486:	f9 9a       	sbi	0x1f, 1	; 31
    3488:	0f be       	out	0x3f, r0	; 63
    348a:	08 95       	ret

0000348c <__eeupd_word_m6450a>:
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	27 2f       	mov	r18, r23
    3490:	0e 94 36 1a 	call	0x346c	; 0x346c <__eeupd_r18_m6450a>
    3494:	0c 94 35 1a 	jmp	0x346a	; 0x346a <__eeupd_byte_m6450a>

00003498 <_exit>:
    3498:	f8 94       	cli

0000349a <__stop_program>:
    349a:	ff cf       	rjmp	.-2      	; 0x349a <__stop_program>
