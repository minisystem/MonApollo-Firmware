
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003934  000039e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003934  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cb  008002b0  008002b0  00003b98  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  0000420c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002e0  00000000  00000000  00005140  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006221  00000000  00000000  00005420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000169b  00000000  00000000  0000b641  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f94  00000000  00000000  0000ccdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cd8  00000000  00000000  0000ec70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018f2  00000000  00000000  0000f948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002c85  00000000  00000000  0001123a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00013ebf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_9>
      28:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e4 e3       	ldi	r30, 0x34	; 52
      78:	f9 e3       	ldi	r31, 0x39	; 57
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ab 37       	cpi	r26, 0x7B	; 123
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 51 03 	call	0x6a2	; 0x6a2 <main>
      9a:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 b0 02 	lds	r24, 0x02B0
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 49 1c 	call	0x3892	; 0x3892 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 b0 02 	sts	0x02B0, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 49 1c 	call	0x3892	; 0x3892 <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 b0 02 	sts	0x02B0, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 b0 02 	sts	0x02B0, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     1f6:	8d e0       	ldi	r24, 0x0D	; 13
     1f8:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     202:	08 95       	ret

00000204 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     204:	90 93 89 00 	sts	0x0089, r25
     208:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1;
     20c:	20 91 84 00 	lds	r18, 0x0084
     210:	30 91 85 00 	lds	r19, 0x0085
     214:	82 17       	cp	r24, r18
     216:	93 07       	cpc	r25, r19
     218:	28 f4       	brcc	.+10     	; 0x224 <update_clock_rate+0x20>
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	90 93 85 00 	sts	0x0085, r25
     220:	80 93 84 00 	sts	0x0084, r24
     224:	08 95       	ret

00000226 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     226:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     228:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     22a:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     22c:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     22e:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     230:	8c 91       	ld	r24, X
     232:	87 70       	andi	r24, 0x07	; 7
     234:	82 b9       	out	0x02, r24	; 2
     236:	66 e0       	ldi	r22, 0x06	; 6
     238:	6a 95       	dec	r22
     23a:	f1 f7       	brne	.-4      	; 0x238 <set_control_voltage+0x12>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     23e:	ea ed       	ldi	r30, 0xDA	; 218
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	40 81       	ld	r20, Z
     244:	8c 91       	ld	r24, X
     246:	86 95       	lsr	r24
     248:	86 95       	lsr	r24
     24a:	86 95       	lsr	r24
     24c:	87 70       	andi	r24, 0x07	; 7
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	b9 01       	movw	r22, r18
     254:	02 c0       	rjmp	.+4      	; 0x25a <set_control_voltage+0x34>
     256:	66 0f       	add	r22, r22
     258:	77 1f       	adc	r23, r23
     25a:	8a 95       	dec	r24
     25c:	e2 f7       	brpl	.-8      	; 0x256 <set_control_voltage+0x30>
     25e:	cb 01       	movw	r24, r22
     260:	84 2b       	or	r24, r20
     262:	80 83       	st	Z, r24
     264:	76 e0       	ldi	r23, 0x06	; 6
     266:	7a 95       	dec	r23
     268:	f1 f7       	brne	.-4      	; 0x266 <set_control_voltage+0x40>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     26c:	80 81       	ld	r24, Z
     26e:	9c 91       	ld	r25, X
     270:	96 95       	lsr	r25
     272:	96 95       	lsr	r25
     274:	96 95       	lsr	r25
     276:	97 70       	andi	r25, 0x07	; 7
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_control_voltage+0x58>
     27a:	22 0f       	add	r18, r18
     27c:	33 1f       	adc	r19, r19
     27e:	9a 95       	dec	r25
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_control_voltage+0x54>
     282:	20 95       	com	r18
     284:	28 23       	and	r18, r24
     286:	20 83       	st	Z, r18
	
}	
     288:	08 95       	ret

0000028a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     28a:	83 b3       	in	r24, 0x13	; 19
     28c:	83 60       	ori	r24, 0x03	; 3
     28e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     294:	97 b1       	in	r25, 0x07	; 7
     296:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     298:	e9 ed       	ldi	r30, 0xD9	; 217
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	8f 60       	ori	r24, 0x0F	; 15
     2a0:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     2a2:	ea ed       	ldi	r30, 0xDA	; 218
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     2ac:	84 b3       	in	r24, 0x14	; 20
     2ae:	83 60       	ori	r24, 0x03	; 3
     2b0:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     2b2:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     2b4:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     2b6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     2b8:	a0 9a       	sbi	0x14, 0	; 20
}
     2ba:	08 95       	ret

000002bc <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	2e 97       	sbiw	r28, 0x0e	; 14
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     2d4:	28 e0       	ldi	r18, 0x08	; 8
     2d6:	29 83       	std	Y+1, r18	; 0x01
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	2a 83       	std	Y+2, r18	; 0x02
     2dc:	22 e0       	ldi	r18, 0x02	; 2
     2de:	2b 83       	std	Y+3, r18	; 0x03
     2e0:	24 e0       	ldi	r18, 0x04	; 4
     2e2:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2e4:	de 01       	movw	r26, r28
     2e6:	15 96       	adiw	r26, 0x05	; 5
     2e8:	e7 ee       	ldi	r30, 0xE7	; 231
     2ea:	f1 e0       	ldi	r31, 0x01	; 1
     2ec:	2a e0       	ldi	r18, 0x0A	; 10
     2ee:	01 90       	ld	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2f6:	2f ef       	ldi	r18, 0xFF	; 255
     2f8:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2fa:	ea ed       	ldi	r30, 0xDA	; 218
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	20 81       	ld	r18, Z
     300:	20 61       	ori	r18, 0x10	; 16
     302:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     304:	20 81       	ld	r18, Z
     306:	2f 7e       	andi	r18, 0xEF	; 239
     308:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     30a:	06 2f       	mov	r16, r22
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	de 01       	movw	r26, r28
     310:	a0 0f       	add	r26, r16
     312:	b1 1f       	adc	r27, r17
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	2c 91       	ld	r18, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     31c:	20 81       	ld	r18, Z
     31e:	20 62       	ori	r18, 0x20	; 32
     320:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     322:	20 81       	ld	r18, Z
     324:	2f 7d       	andi	r18, 0xDF	; 223
     326:	20 83       	st	Z, r18
     328:	48 2f       	mov	r20, r24
     32a:	59 2f       	mov	r21, r25
     32c:	87 e2       	ldi	r24, 0x27	; 39
     32e:	40 31       	cpi	r20, 0x10	; 16
     330:	58 07       	cpc	r21, r24
     332:	10 f0       	brcs	.+4      	; 0x338 <display_dec+0x7c>
     334:	4f e0       	ldi	r20, 0x0F	; 15
     336:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     338:	ca 01       	movw	r24, r20
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	9a 01       	movw	r18, r20
     344:	36 95       	lsr	r19
     346:	27 95       	ror	r18
     348:	28 0f       	add	r18, r24
     34a:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     34c:	c9 01       	movw	r24, r18
     34e:	92 95       	swap	r25
     350:	82 95       	swap	r24
     352:	8f 70       	andi	r24, 0x0F	; 15
     354:	89 27       	eor	r24, r25
     356:	9f 70       	andi	r25, 0x0F	; 15
     358:	89 27       	eor	r24, r25
     35a:	82 0f       	add	r24, r18
     35c:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     35e:	29 2f       	mov	r18, r25
     360:	33 27       	eor	r19, r19
     362:	82 0f       	add	r24, r18
     364:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     366:	96 95       	lsr	r25
     368:	87 95       	ror	r24
     36a:	96 95       	lsr	r25
     36c:	87 95       	ror	r24
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
	r = number - q2 * 10;
     372:	28 2f       	mov	r18, r24
     374:	22 0f       	add	r18, r18
     376:	32 2f       	mov	r19, r18
     378:	33 0f       	add	r19, r19
     37a:	33 0f       	add	r19, r19
     37c:	23 0f       	add	r18, r19
     37e:	e4 2f       	mov	r30, r20
     380:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	ea 30       	cpi	r30, 0x0A	; 10
     388:	10 f4       	brcc	.+4      	; 0x38e <display_dec+0xd2>
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	68 0f       	add	r22, r24
     390:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     392:	9b 01       	movw	r18, r22
     394:	36 95       	lsr	r19
     396:	27 95       	ror	r18
     398:	36 95       	lsr	r19
     39a:	27 95       	ror	r18
     39c:	ab 01       	movw	r20, r22
     39e:	56 95       	lsr	r21
     3a0:	47 95       	ror	r20
     3a2:	24 0f       	add	r18, r20
     3a4:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     3a6:	c9 01       	movw	r24, r18
     3a8:	92 95       	swap	r25
     3aa:	82 95       	swap	r24
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	89 27       	eor	r24, r25
     3b0:	9f 70       	andi	r25, 0x0F	; 15
     3b2:	89 27       	eor	r24, r25
     3b4:	82 0f       	add	r24, r18
     3b6:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     3b8:	29 2f       	mov	r18, r25
     3ba:	33 27       	eor	r19, r19
     3bc:	82 0f       	add	r24, r18
     3be:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     3c0:	96 95       	lsr	r25
     3c2:	87 95       	ror	r24
     3c4:	96 95       	lsr	r25
     3c6:	87 95       	ror	r24
     3c8:	96 95       	lsr	r25
     3ca:	87 95       	ror	r24
	r = qa - q3 * 10;
     3cc:	98 2f       	mov	r25, r24
     3ce:	99 0f       	add	r25, r25
     3d0:	29 2f       	mov	r18, r25
     3d2:	22 0f       	add	r18, r18
     3d4:	22 0f       	add	r18, r18
     3d6:	92 0f       	add	r25, r18
     3d8:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	6a 30       	cpi	r22, 0x0A	; 10
     3de:	08 f4       	brcc	.+2      	; 0x3e2 <display_dec+0x126>
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3e4:	41 ef       	ldi	r20, 0xF1	; 241
     3e6:	51 e0       	ldi	r21, 0x01	; 1
     3e8:	da 01       	movw	r26, r20
     3ea:	a6 0f       	add	r26, r22
     3ec:	b1 1d       	adc	r27, r1
     3ee:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3f0:	28 2f       	mov	r18, r24
     3f2:	26 95       	lsr	r18
     3f4:	26 95       	lsr	r18
     3f6:	98 2f       	mov	r25, r24
     3f8:	96 95       	lsr	r25
     3fa:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3fc:	29 2f       	mov	r18, r25
     3fe:	22 95       	swap	r18
     400:	2f 70       	andi	r18, 0x0F	; 15
     402:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     404:	96 95       	lsr	r25
     406:	96 95       	lsr	r25
     408:	96 95       	lsr	r25
	r = qb - q4 * 10;
     40a:	29 2f       	mov	r18, r25
     40c:	22 0f       	add	r18, r18
     40e:	62 2f       	mov	r22, r18
     410:	66 0f       	add	r22, r22
     412:	66 0f       	add	r22, r22
     414:	26 0f       	add	r18, r22
     416:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     418:	da 01       	movw	r26, r20
     41a:	a8 0f       	add	r26, r24
     41c:	b1 1d       	adc	r27, r1
     41e:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     420:	4e 0f       	add	r20, r30
     422:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     424:	fa 01       	movw	r30, r20
     426:	40 81       	ld	r20, Z
     428:	40 93 b3 02 	sts	0x02B3, r20
	digit_index[1] = tens_place;
     42c:	30 93 b4 02 	sts	0x02B4, r19
	digit_index[2] = hunds_place;
     430:	20 93 b5 02 	sts	0x02B5, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	8a 30       	cpi	r24, 0x0A	; 10
     438:	08 f4       	brcc	.+2      	; 0x43c <display_dec+0x180>
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     43e:	90 93 b6 02 	sts	0x02B6, r25

	cathode_byte = dec[digit_index[place]];
     442:	f8 01       	movw	r30, r16
     444:	ed 54       	subi	r30, 0x4D	; 77
     446:	fd 4f       	sbci	r31, 0xFD	; 253
     448:	80 81       	ld	r24, Z
     44a:	fe 01       	movw	r30, r28
     44c:	e8 0f       	add	r30, r24
     44e:	f1 1d       	adc	r31, r1
     450:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     452:	90 91 07 03 	lds	r25, 0x0307
     456:	92 30       	cpi	r25, 0x02	; 2
     458:	11 f4       	brne	.+4      	; 0x45e <display_dec+0x1a2>
     45a:	80 62       	ori	r24, 0x20	; 32
     45c:	03 c0       	rjmp	.+6      	; 0x464 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     45e:	91 30       	cpi	r25, 0x01	; 1
     460:	09 f4       	brne	.+2      	; 0x464 <display_dec+0x1a8>
     462:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     464:	80 95       	com	r24
     466:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     468:	ea ed       	ldi	r30, 0xDA	; 218
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	80 61       	ori	r24, 0x10	; 16
     470:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     472:	80 81       	ld	r24, Z
     474:	8f 7e       	andi	r24, 0xEF	; 239
     476:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     478:	2e 96       	adiw	r28, 0x0e	; 14
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     48e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     490:	66 23       	and	r22, r22
     492:	69 f4       	brne	.+26     	; 0x4ae <update_display+0x20>

		
			
		display_dec(number, place);
     494:	c0 91 b7 02 	lds	r28, 0x02B7
     498:	6c 2f       	mov	r22, r28
     49a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     49e:	8c 2f       	mov	r24, r28
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	80 93 b7 02 	sts	0x02B7, r24
     4a6:	c3 30       	cpi	r28, 0x03	; 3
     4a8:	11 f4       	brne	.+4      	; 0x4ae <update_display+0x20>
		{
			place = 0;
     4aa:	10 92 b7 02 	sts	0x02B7, r1
		
		
	}
	
	
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <__vector_10>:
#include "hardware.h"
#include "tune.h"
#include "display.h"
#include "clock.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	8f 93       	push	r24
     4be:	9f 93       	push	r25
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     4c4:	80 91 7a 03 	lds	r24, 0x037A
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     4cc:	80 91 7b 03 	lds	r24, 0x037B
     4d0:	88 23       	and	r24, r24
     4d2:	a1 f4       	brne	.+40     	; 0x4fc <__vector_10+0x4a>
		count_finished = FALSE;
     4d4:	10 92 78 03 	sts	0x0378, r1
		no_overflow = TRUE;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     4de:	80 93 7b 03 	sts	0x037B, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     4e2:	e1 e8       	ldi	r30, 0x81	; 129
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	90 91 79 03 	lds	r25, 0x0379
     4ec:	89 2b       	or	r24, r25
     4ee:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4f0:	ef e6       	ldi	r30, 0x6F	; 111
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	81 60       	ori	r24, 0x01	; 1
     4f8:	80 83       	st	Z, r24
     4fa:	11 c0       	rjmp	.+34     	; 0x51e <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4fc:	e4 e8       	ldi	r30, 0x84	; 132
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	91 81       	ldd	r25, Z+1	; 0x01
     504:	90 93 77 03 	sts	0x0377, r25
     508:	80 93 76 03 	sts	0x0376, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     50c:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	80 93 78 03 	sts	0x0378, r24
		period_counter = 0;
     516:	10 92 7b 03 	sts	0x037B, r1
		TCNT1 = 0; //reset timer/counter 1
     51a:	11 82       	std	Z+1, r1	; 0x01
     51c:	10 82       	st	Z, r1
	}
	
	
	
	
}
     51e:	ff 91       	pop	r31
     520:	ef 91       	pop	r30
     522:	9f 91       	pop	r25
     524:	8f 91       	pop	r24
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     530:	1f 92       	push	r1
     532:	0f 92       	push	r0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     53a:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
	//PORTB ^= (1<<ARP_SYNC_LED);
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     556:	80 91 82 03 	lds	r24, 0x0382
     55a:	86 95       	lsr	r24
     55c:	90 91 83 03 	lds	r25, 0x0383
     560:	98 17       	cp	r25, r24
     562:	09 f4       	brne	.+2      	; 0x566 <__vector_7+0x1e>
		
		//PORTF &= ~(1<<GATE); //50% gate width
		PORTB &= ~ (1<<ARP_SYNC_LED);
     564:	2f 98       	cbi	0x05, 7	; 5
	}		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     566:	80 91 83 03 	lds	r24, 0x0383
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	80 93 83 03 	sts	0x0383, r24
     570:	90 91 82 03 	lds	r25, 0x0382
     574:	89 17       	cp	r24, r25
     576:	19 f4       	brne	.+6      	; 0x57e <__vector_7+0x36>
		//PORTB ^= (1<<ARP_SYNC_LED);
		system_clock.ppqn_counter = 0;
     578:	10 92 83 03 	sts	0x0383, r1
		PORTB |= (1<<ARP_SYNC_LED);
     57c:	2f 9a       	sbi	0x05, 7	; 5
		//PORTF |= (1<<GATE);
	}
	
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     58c:	68 3f       	cpi	r22, 0xF8	; 248
     58e:	19 f0       	breq	.+6      	; 0x596 <real_time_event+0xa>
     590:	6a 3f       	cpi	r22, 0xFA	; 250
     592:	c1 f4       	brne	.+48     	; 0x5c4 <real_time_event+0x38>
     594:	15 c0       	rjmp	.+42     	; 0x5c0 <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     596:	80 91 89 03 	lds	r24, 0x0389
     59a:	8f 5f       	subi	r24, 0xFF	; 255
     59c:	80 93 89 03 	sts	0x0389, r24
     5a0:	90 91 88 03 	lds	r25, 0x0388
     5a4:	89 17       	cp	r24, r25
     5a6:	71 f4       	brne	.+28     	; 0x5c4 <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     5a8:	2c 9a       	sbi	0x05, 4	; 5
     5aa:	86 e0       	ldi	r24, 0x06	; 6
     5ac:	8a 95       	dec	r24
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <real_time_event+0x20>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     5b2:	85 b1       	in	r24, 0x05	; 5
     5b4:	80 58       	subi	r24, 0x80	; 128
     5b6:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     5b8:	10 92 89 03 	sts	0x0389, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     5bc:	2c 98       	cbi	0x05, 4	; 5
     5be:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     5c0:	10 92 89 03 	sts	0x0389, r1
     5c4:	08 95       	ret

000005c6 <note_off_event>:
		PORTF |= (1<<GATE);
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     5c6:	84 2f       	mov	r24, r20
	remove_note(note);
     5c8:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     5cc:	80 91 b9 02 	lds	r24, 0x02B9
     5d0:	81 50       	subi	r24, 0x01	; 1
     5d2:	80 93 b9 02 	sts	0x02B9, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     5d6:	88 23       	and	r24, r24
     5d8:	09 f4       	brne	.+2      	; 0x5dc <note_off_event+0x16>
     5da:	89 98       	cbi	0x11, 1	; 17
     5dc:	08 95       	ret

000005de <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     5de:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     5e0:	90 91 ff 02 	lds	r25, 0x02FF
     5e4:	90 ff       	sbrs	r25, 0
     5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     5e8:	2c 9a       	sbi	0x05, 4	; 5
     5ea:	96 e0       	ldi	r25, 0x06	; 6
     5ec:	9a 95       	dec	r25
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <note_on_event+0xe>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     5f2:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	//value_to_display = note;
	midi_note_number = note;
     5f4:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) {
     5f8:	22 23       	and	r18, r18
     5fa:	59 f4       	brne	.+22     	; 0x612 <note_on_event+0x34>
		remove_note(note);
     5fc:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     600:	80 91 b9 02 	lds	r24, 0x02B9
     604:	81 50       	subi	r24, 0x01	; 1
     606:	80 93 b9 02 	sts	0x02B9, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     60a:	88 23       	and	r24, r24
     60c:	59 f4       	brne	.+22     	; 0x624 <note_on_event+0x46>
     60e:	89 98       	cbi	0x11, 1	; 17
     610:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     612:	62 2f       	mov	r22, r18
     614:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     618:	80 91 b9 02 	lds	r24, 0x02B9
     61c:	8f 5f       	subi	r24, 0xFF	; 255
     61e:	80 93 b9 02 	sts	0x02B9, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     622:	89 9a       	sbi	0x11, 1	; 17
     624:	08 95       	ret

00000626 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     626:	87 e2       	ldi	r24, 0x27	; 39
     628:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     62c:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     630:	88 e9       	ldi	r24, 0x98	; 152
     632:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     636:	08 95       	ret

00000638 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	4f 93       	push	r20
     648:	5f 93       	push	r21
     64a:	6f 93       	push	r22
     64c:	7f 93       	push	r23
     64e:	8f 93       	push	r24
     650:	9f 93       	push	r25
     652:	af 93       	push	r26
     654:	bf 93       	push	r27
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	0f 92       	push	r0
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     664:	80 91 c6 00 	lds	r24, 0x00C6
     668:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     66a:	8e e8       	ldi	r24, 0x8E	; 142
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	ae 01       	movw	r20, r28
     672:	4f 5f       	subi	r20, 0xFF	; 255
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	0e 94 f6 17 	call	0x2fec	; 0x2fec <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	bf 91       	pop	r27
     686:	af 91       	pop	r26
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	7f 91       	pop	r23
     68e:	6f 91       	pop	r22
     690:	5f 91       	pop	r21
     692:	4f 91       	pop	r20
     694:	3f 91       	pop	r19
     696:	2f 91       	pop	r18
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     6a2:	c0 e8       	ldi	r28, 0x80	; 128
     6a4:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     6a6:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     6a8:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     6aa:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     6ac:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     6ae:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     6b0:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     6b2:	0e 94 a2 06 	call	0xd44	; 0xd44 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     6b6:	a9 ed       	ldi	r26, 0xD9	; 217
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	8c 91       	ld	r24, X
     6bc:	80 6c       	ori	r24, 0xC0	; 192
     6be:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     6c0:	ea ed       	ldi	r30, 0xDA	; 218
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	80 6c       	ori	r24, 0xC0	; 192
     6c8:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     6ca:	81 b1       	in	r24, 0x01	; 1
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     6d0:	92 b1       	in	r25, 0x02	; 2
     6d2:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     6d4:	8c 91       	ld	r24, X
     6d6:	80 63       	ori	r24, 0x30	; 48
     6d8:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     6da:	80 81       	ld	r24, Z
     6dc:	8f 7c       	andi	r24, 0xCF	; 207
     6de:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     6e0:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     6e2:	ec ed       	ldi	r30, 0xDC	; 220
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	80 62       	ori	r24, 0x20	; 32
     6ea:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     6ec:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     6ee:	ed ed       	ldi	r30, 0xDD	; 221
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	80 62       	ori	r24, 0x20	; 32
     6f6:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     6f8:	80 81       	ld	r24, Z
     6fa:	8f 7d       	andi	r24, 0xDF	; 223
     6fc:	80 83       	st	Z, r24
	DATA_BUS = 0;
     6fe:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     700:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     704:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     708:	0e 94 45 01 	call	0x28a	; 0x28a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     70c:	ce e8       	ldi	r28, 0x8E	; 142
     70e:	d3 e0       	ldi	r29, 0x03	; 3
     710:	ce 01       	movw	r24, r28
     712:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     716:	ce 01       	movw	r24, r28
     718:	6f ee       	ldi	r22, 0xEF	; 239
     71a:	72 e0       	ldi	r23, 0x02	; 2
     71c:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     720:	ce 01       	movw	r24, r28
     722:	63 ee       	ldi	r22, 0xE3	; 227
     724:	72 e0       	ldi	r23, 0x02	; 2
     726:	0e 94 91 17 	call	0x2f22	; 0x2f22 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     72a:	ce 01       	movw	r24, r28
     72c:	66 ec       	ldi	r22, 0xC6	; 198
     72e:	72 e0       	ldi	r23, 0x02	; 2
     730:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     734:	0e 94 13 03 	call	0x626	; 0x626 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     738:	0e 94 c7 06 	call	0xd8e	; 0xd8e <update_spi>
	
	
	current_patch.number = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     742:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     744:	0e 94 f5 13 	call	0x27ea	; 0x27ea <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	0e 94 4a 09 	call	0x1294	; 0x1294 <load_patch>
	
	setup_system_clock();
     74e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     752:	88 e1       	ldi	r24, 0x18	; 24
     754:	80 93 82 03 	sts	0x0382, r24

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     758:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     75a:	0f 2e       	mov	r0, r31
     75c:	fe e7       	ldi	r31, 0x7E	; 126
     75e:	ef 2e       	mov	r14, r31
     760:	f3 e0       	ldi	r31, 0x03	; 3
     762:	ff 2e       	mov	r15, r31
     764:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     766:	0f 2e       	mov	r0, r31
     768:	f7 e0       	ldi	r31, 0x07	; 7
     76a:	cf 2e       	mov	r12, r31
     76c:	f3 e0       	ldi	r31, 0x03	; 3
     76e:	df 2e       	mov	r13, r31
     770:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     772:	bb 24       	eor	r11, r11
     774:	68 94       	set
     776:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     778:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 20 1a 	call	0x3440	; 0x3440 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     780:	80 91 fd 01 	lds	r24, 0x01FD
     784:	90 91 fe 01 	lds	r25, 0x01FE
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     78e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <scan_pots>
		update_control_voltages();
     792:	0e 94 83 04 	call	0x906	; 0x906 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     796:	80 91 b8 02 	lds	r24, 0x02B8
     79a:	98 2f       	mov	r25, r24
     79c:	9f 5f       	subi	r25, 0xFF	; 255
     79e:	90 93 b8 02 	sts	0x02B8, r25
     7a2:	85 30       	cpi	r24, 0x05	; 5
     7a4:	51 f7       	brne	.-44     	; 0x77a <main+0xd8>
		{
			switch_timer = 0;
     7a6:	10 92 b8 02 	sts	0x02B8, r1
			switch_press = 0; //reset global switch press flag
     7aa:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     7ae:	f7 01       	movw	r30, r14
     7b0:	c0 81       	ld	r28, Z
     7b2:	0e 94 a7 14 	call	0x294e	; 0x294e <read_switch_port>
     7b6:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     7b8:	f6 01       	movw	r30, r12
     7ba:	90 81       	ld	r25, Z
     7bc:	91 30       	cpi	r25, 0x01	; 1
     7be:	11 f4       	brne	.+4      	; 0x7c4 <main+0x122>
     7c0:	cd 2f       	mov	r28, r29
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <main+0x124>
     7c4:	c0 e0       	ldi	r28, 0x00	; 0
     7c6:	c8 2b       	or	r28, r24
     7c8:	f7 01       	movw	r30, r14
     7ca:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     7cc:	0e 94 c7 06 	call	0xd8e	; 0xd8e <update_spi>
			if (switch_press) { 
     7d0:	80 91 c1 02 	lds	r24, 0x02C1
     7d4:	88 23       	and	r24, r24
     7d6:	39 f0       	breq	.+14     	; 0x7e6 <main+0x144>
				update_patch();
     7d8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     7dc:	f6 01       	movw	r30, r12
     7de:	80 81       	ld	r24, Z
     7e0:	88 23       	and	r24, r24
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <main+0x144>
     7e4:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     7e6:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <update_patch_programmer>
     7ea:	c7 cf       	rjmp	.-114    	; 0x77a <main+0xd8>

000007ec <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	c0 e0       	ldi	r28, 0x00	; 0
     800:	d1 e0       	ldi	r29, 0x01	; 1
     802:	02 ec       	ldi	r16, 0xC2	; 194
     804:	12 e0       	ldi	r17, 0x02	; 2
     806:	0f 2e       	mov	r0, r31
     808:	fc e3       	ldi	r31, 0x3C	; 60
     80a:	cf 2e       	mov	r12, r31
     80c:	dd 24       	eor	r13, r13
     80e:	f0 2d       	mov	r31, r0
     810:	cc 0e       	add	r12, r28
     812:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     814:	0f 2e       	mov	r0, r31
     816:	f7 e0       	ldi	r31, 0x07	; 7
     818:	ef 2e       	mov	r14, r31
     81a:	f3 e0       	ldi	r31, 0x03	; 3
     81c:	ff 2e       	mov	r15, r31
     81e:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     820:	bb 24       	eor	r11, r11
     822:	68 94       	set
     824:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     826:	88 81       	ld	r24, Y
     828:	99 81       	ldd	r25, Y+1	; 0x01
     82a:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     82e:	90 93 bc 02 	sts	0x02BC, r25
     832:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     836:	e8 81       	ld	r30, Y
     838:	f9 81       	ldd	r31, Y+1	; 0x01
     83a:	40 81       	ld	r20, Z
     83c:	21 81       	ldd	r18, Z+1	; 0x01
     83e:	52 2f       	mov	r21, r18
     840:	53 70       	andi	r21, 0x03	; 3
     842:	84 1b       	sub	r24, r20
     844:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     846:	95 95       	asr	r25
     848:	87 95       	ror	r24
     84a:	95 95       	asr	r25
     84c:	87 95       	ror	r24
     84e:	84 0f       	add	r24, r20
     850:	95 1f       	adc	r25, r21
     852:	80 83       	st	Z, r24
     854:	89 2f       	mov	r24, r25
     856:	83 70       	andi	r24, 0x03	; 3
     858:	2c 7f       	andi	r18, 0xFC	; 252
     85a:	28 2b       	or	r18, r24
     85c:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     85e:	e9 91       	ld	r30, Y+
     860:	f9 91       	ld	r31, Y+
     862:	92 81       	ldd	r25, Z+2	; 0x02
     864:	20 81       	ld	r18, Z
     866:	81 81       	ldd	r24, Z+1	; 0x01
     868:	38 2f       	mov	r19, r24
     86a:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     86c:	d7 01       	movw	r26, r14
     86e:	8c 91       	ld	r24, X
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	19 f0       	breq	.+6      	; 0x87a <scan_pots+0x8e>
     874:	83 81       	ldd	r24, Z+3	; 0x03
     876:	88 23       	and	r24, r24
     878:	24 f0       	brlt	.+8      	; 0x882 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     87a:	f8 01       	movw	r30, r16
     87c:	31 83       	std	Z+1, r19	; 0x01
     87e:	20 83       	st	Z, r18
     880:	14 c0       	rjmp	.+40     	; 0x8aa <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     882:	49 2f       	mov	r20, r25
     884:	43 50       	subi	r20, 0x03	; 3
     886:	c9 01       	movw	r24, r18
     888:	95 95       	asr	r25
     88a:	87 95       	ror	r24
     88c:	95 95       	asr	r25
     88e:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     890:	94 2f       	mov	r25, r20
     892:	98 1b       	sub	r25, r24
     894:	9a 3f       	cpi	r25, 0xFA	; 250
     896:	48 f4       	brcc	.+18     	; 0x8aa <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     898:	d8 01       	movw	r26, r16
     89a:	11 96       	adiw	r26, 0x01	; 1
     89c:	3c 93       	st	X, r19
     89e:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     8a0:	83 81       	ldd	r24, Z+3	; 0x03
     8a2:	8f 77       	andi	r24, 0x7F	; 127
     8a4:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     8a6:	f7 01       	movw	r30, r14
     8a8:	b0 82       	st	Z, r11
     8aa:	0e 5f       	subi	r16, 0xFE	; 254
     8ac:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     8ae:	cc 15       	cp	r28, r12
     8b0:	dd 05       	cpc	r29, r13
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <scan_pots+0xca>
     8b4:	b8 cf       	rjmp	.-144    	; 0x826 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     8b6:	8c e7       	ldi	r24, 0x7C	; 124
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     8be:	90 93 bc 02 	sts	0x02BC, r25
     8c2:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     8c6:	20 91 7c 01 	lds	r18, 0x017C
     8ca:	40 91 7d 01 	lds	r20, 0x017D
     8ce:	34 2f       	mov	r19, r20
     8d0:	33 70       	andi	r19, 0x03	; 3
     8d2:	82 1b       	sub	r24, r18
     8d4:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     8d6:	95 95       	asr	r25
     8d8:	87 95       	ror	r24
     8da:	95 95       	asr	r25
     8dc:	87 95       	ror	r24
     8de:	28 0f       	add	r18, r24
     8e0:	39 1f       	adc	r19, r25
     8e2:	20 93 7c 01 	sts	0x017C, r18
     8e6:	83 2f       	mov	r24, r19
     8e8:	83 70       	andi	r24, 0x03	; 3
     8ea:	4c 7f       	andi	r20, 0xFC	; 252
     8ec:	48 2b       	or	r20, r24
     8ee:	40 93 7d 01 	sts	0x017D, r20
	
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	08 95       	ret

00000906 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     90a:	60 91 c2 02 	lds	r22, 0x02C2
     90e:	70 91 c3 02 	lds	r23, 0x02C3
     912:	62 95       	swap	r22
     914:	72 95       	swap	r23
     916:	70 7f       	andi	r23, 0xF0	; 240
     918:	76 27       	eor	r23, r22
     91a:	60 7f       	andi	r22, 0xF0	; 240
     91c:	76 27       	eor	r23, r22
     91e:	84 ee       	ldi	r24, 0xE4	; 228
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     926:	60 91 c4 02 	lds	r22, 0x02C4
     92a:	70 91 c5 02 	lds	r23, 0x02C5
     92e:	62 95       	swap	r22
     930:	72 95       	swap	r23
     932:	70 7f       	andi	r23, 0xF0	; 240
     934:	76 27       	eor	r23, r22
     936:	60 7f       	andi	r22, 0xF0	; 240
     938:	76 27       	eor	r23, r22
     93a:	83 ee       	ldi	r24, 0xE3	; 227
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     942:	60 91 c6 02 	lds	r22, 0x02C6
     946:	70 91 c7 02 	lds	r23, 0x02C7
     94a:	66 0f       	add	r22, r22
     94c:	77 1f       	adc	r23, r23
     94e:	66 0f       	add	r22, r22
     950:	77 1f       	adc	r23, r23
     952:	66 0f       	add	r22, r22
     954:	77 1f       	adc	r23, r23
     956:	82 ee       	ldi	r24, 0xE2	; 226
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     95e:	60 91 c8 02 	lds	r22, 0x02C8
     962:	70 91 c9 02 	lds	r23, 0x02C9
     966:	62 95       	swap	r22
     968:	72 95       	swap	r23
     96a:	70 7f       	andi	r23, 0xF0	; 240
     96c:	76 27       	eor	r23, r22
     96e:	60 7f       	andi	r22, 0xF0	; 240
     970:	76 27       	eor	r23, r22
     972:	82 eb       	ldi	r24, 0xB2	; 178
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     97a:	60 91 ca 02 	lds	r22, 0x02CA
     97e:	70 91 cb 02 	lds	r23, 0x02CB
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	66 0f       	add	r22, r22
     988:	77 1f       	adc	r23, r23
     98a:	66 0f       	add	r22, r22
     98c:	77 1f       	adc	r23, r23
     98e:	81 ee       	ldi	r24, 0xE1	; 225
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     996:	60 91 cc 02 	lds	r22, 0x02CC
     99a:	70 91 cd 02 	lds	r23, 0x02CD
     99e:	62 95       	swap	r22
     9a0:	72 95       	swap	r23
     9a2:	70 7f       	andi	r23, 0xF0	; 240
     9a4:	76 27       	eor	r23, r22
     9a6:	60 7f       	andi	r22, 0xF0	; 240
     9a8:	76 27       	eor	r23, r22
     9aa:	80 ee       	ldi	r24, 0xE0	; 224
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     9b2:	60 91 ce 02 	lds	r22, 0x02CE
     9b6:	70 91 cf 02 	lds	r23, 0x02CF
     9ba:	62 95       	swap	r22
     9bc:	72 95       	swap	r23
     9be:	70 7f       	andi	r23, 0xF0	; 240
     9c0:	76 27       	eor	r23, r22
     9c2:	60 7f       	andi	r22, 0xF0	; 240
     9c4:	76 27       	eor	r23, r22
     9c6:	8f ed       	ldi	r24, 0xDF	; 223
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     9ce:	60 91 d0 02 	lds	r22, 0x02D0
     9d2:	70 91 d1 02 	lds	r23, 0x02D1
     9d6:	62 95       	swap	r22
     9d8:	72 95       	swap	r23
     9da:	70 7f       	andi	r23, 0xF0	; 240
     9dc:	76 27       	eor	r23, r22
     9de:	60 7f       	andi	r22, 0xF0	; 240
     9e0:	76 27       	eor	r23, r22
     9e2:	8e ed       	ldi	r24, 0xDE	; 222
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     9ea:	80 91 d4 02 	lds	r24, 0x02D4
     9ee:	90 91 d5 02 	lds	r25, 0x02D5
     9f2:	c0 e0       	ldi	r28, 0x00	; 0
     9f4:	d2 e0       	ldi	r29, 0x02	; 2
     9f6:	c8 1b       	sub	r28, r24
     9f8:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     9fa:	60 91 71 03 	lds	r22, 0x0371
     9fe:	70 91 72 03 	lds	r23, 0x0372
     a02:	60 50       	subi	r22, 0x00	; 0
     a04:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     a06:	80 91 d2 02 	lds	r24, 0x02D2
     a0a:	90 91 d3 02 	lds	r25, 0x02D3
     a0e:	68 1b       	sub	r22, r24
     a10:	79 0b       	sbc	r23, r25
     a12:	6c 0f       	add	r22, r28
     a14:	7d 1f       	adc	r23, r29
     a16:	8d ed       	ldi	r24, 0xDD	; 221
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     a1e:	60 91 73 03 	lds	r22, 0x0373
     a22:	70 91 74 03 	lds	r23, 0x0374
     a26:	6c 0f       	add	r22, r28
     a28:	7d 1f       	adc	r23, r29
     a2a:	8c ed       	ldi	r24, 0xDC	; 220
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     a32:	60 91 d6 02 	lds	r22, 0x02D6
     a36:	70 91 d7 02 	lds	r23, 0x02D7
     a3a:	62 95       	swap	r22
     a3c:	72 95       	swap	r23
     a3e:	70 7f       	andi	r23, 0xF0	; 240
     a40:	76 27       	eor	r23, r22
     a42:	60 7f       	andi	r22, 0xF0	; 240
     a44:	76 27       	eor	r23, r22
     a46:	8b ed       	ldi	r24, 0xDB	; 219
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     a4e:	60 91 da 02 	lds	r22, 0x02DA
     a52:	70 91 db 02 	lds	r23, 0x02DB
     a56:	62 95       	swap	r22
     a58:	72 95       	swap	r23
     a5a:	70 7f       	andi	r23, 0xF0	; 240
     a5c:	76 27       	eor	r23, r22
     a5e:	60 7f       	andi	r22, 0xF0	; 240
     a60:	76 27       	eor	r23, r22
     a62:	8a ed       	ldi	r24, 0xDA	; 218
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     a6a:	60 91 dc 02 	lds	r22, 0x02DC
     a6e:	70 91 dd 02 	lds	r23, 0x02DD
     a72:	62 95       	swap	r22
     a74:	72 95       	swap	r23
     a76:	70 7f       	andi	r23, 0xF0	; 240
     a78:	76 27       	eor	r23, r22
     a7a:	60 7f       	andi	r22, 0xF0	; 240
     a7c:	76 27       	eor	r23, r22
     a7e:	89 ed       	ldi	r24, 0xD9	; 217
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     a86:	60 91 7c 01 	lds	r22, 0x017C
     a8a:	80 91 7d 01 	lds	r24, 0x017D
     a8e:	78 2f       	mov	r23, r24
     a90:	73 70       	andi	r23, 0x03	; 3
     a92:	62 95       	swap	r22
     a94:	72 95       	swap	r23
     a96:	70 7f       	andi	r23, 0xF0	; 240
     a98:	76 27       	eor	r23, r22
     a9a:	60 7f       	andi	r22, 0xF0	; 240
     a9c:	76 27       	eor	r23, r22
     a9e:	88 ed       	ldi	r24, 0xD8	; 216
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     aa6:	60 91 de 02 	lds	r22, 0x02DE
     aaa:	70 91 df 02 	lds	r23, 0x02DF
     aae:	62 95       	swap	r22
     ab0:	72 95       	swap	r23
     ab2:	70 7f       	andi	r23, 0xF0	; 240
     ab4:	76 27       	eor	r23, r22
     ab6:	60 7f       	andi	r22, 0xF0	; 240
     ab8:	76 27       	eor	r23, r22
     aba:	87 ed       	ldi	r24, 0xD7	; 215
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     ac2:	60 91 e0 02 	lds	r22, 0x02E0
     ac6:	70 91 e1 02 	lds	r23, 0x02E1
     aca:	62 95       	swap	r22
     acc:	72 95       	swap	r23
     ace:	70 7f       	andi	r23, 0xF0	; 240
     ad0:	76 27       	eor	r23, r22
     ad2:	60 7f       	andi	r22, 0xF0	; 240
     ad4:	76 27       	eor	r23, r22
     ad6:	86 ed       	ldi	r24, 0xD6	; 214
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     ade:	60 91 e2 02 	lds	r22, 0x02E2
     ae2:	70 91 e3 02 	lds	r23, 0x02E3
     ae6:	62 95       	swap	r22
     ae8:	72 95       	swap	r23
     aea:	70 7f       	andi	r23, 0xF0	; 240
     aec:	76 27       	eor	r23, r22
     aee:	60 7f       	andi	r22, 0xF0	; 240
     af0:	76 27       	eor	r23, r22
     af2:	85 ed       	ldi	r24, 0xD5	; 213
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     afa:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     afe:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     b00:	88 30       	cpi	r24, 0x08	; 8
     b02:	08 f4       	brcc	.+2      	; 0xb06 <update_control_voltages+0x200>
     b04:	c8 e0       	ldi	r28, 0x08	; 8
	value_to_display = current_patch.number + 100*midi_clock.divider; //100*note;
     b06:	60 91 03 03 	lds	r22, 0x0303
     b0a:	40 91 88 03 	lds	r20, 0x0388
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	24 e6       	ldi	r18, 0x64	; 100
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	42 9f       	mul	r20, r18
     b16:	c0 01       	movw	r24, r0
     b18:	43 9f       	mul	r20, r19
     b1a:	90 0d       	add	r25, r0
     b1c:	52 9f       	mul	r21, r18
     b1e:	90 0d       	add	r25, r0
     b20:	11 24       	eor	r1, r1
     b22:	86 0f       	add	r24, r22
     b24:	91 1d       	adc	r25, r1
     b26:	90 93 fe 01 	sts	0x01FE, r25
     b2a:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     b2e:	8c 2f       	mov	r24, r28
     b30:	88 50       	subi	r24, 0x08	; 8
     b32:	6d e0       	ldi	r22, 0x0D	; 13
     b34:	73 e0       	ldi	r23, 0x03	; 3
     b36:	0e 94 1e 14 	call	0x283c	; 0x283c <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     b3a:	bc 01       	movw	r22, r24
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	20 91 e6 02 	lds	r18, 0x02E6
     b44:	30 91 e7 02 	lds	r19, 0x02E7
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__mulsi3>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	07 2e       	mov	r0, r23
     b56:	7a e0       	ldi	r23, 0x0A	; 10
     b58:	b6 95       	lsr	r27
     b5a:	a7 95       	ror	r26
     b5c:	97 95       	ror	r25
     b5e:	87 95       	ror	r24
     b60:	7a 95       	dec	r23
     b62:	d1 f7       	brne	.-12     	; 0xb58 <update_control_voltages+0x252>
     b64:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     b66:	60 91 e4 02 	lds	r22, 0x02E4
     b6a:	70 91 e5 02 	lds	r23, 0x02E5
     b6e:	62 95       	swap	r22
     b70:	72 95       	swap	r23
     b72:	70 7f       	andi	r23, 0xF0	; 240
     b74:	76 27       	eor	r23, r22
     b76:	60 7f       	andi	r22, 0xF0	; 240
     b78:	76 27       	eor	r23, r22
     b7a:	86 0f       	add	r24, r22
     b7c:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     b7e:	bc 01       	movw	r22, r24
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	60 30       	cpi	r22, 0x00	; 0
     b84:	78 07       	cpc	r23, r24
     b86:	10 f0       	brcs	.+4      	; 0xb8c <update_control_voltages+0x286>
     b88:	6f ef       	ldi	r22, 0xFF	; 255
     b8a:	7f e3       	ldi	r23, 0x3F	; 63
     b8c:	84 ed       	ldi	r24, 0xD4	; 212
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     b94:	60 91 e8 02 	lds	r22, 0x02E8
     b98:	70 91 e9 02 	lds	r23, 0x02E9
     b9c:	62 95       	swap	r22
     b9e:	72 95       	swap	r23
     ba0:	70 7f       	andi	r23, 0xF0	; 240
     ba2:	76 27       	eor	r23, r22
     ba4:	60 7f       	andi	r22, 0xF0	; 240
     ba6:	76 27       	eor	r23, r22
     ba8:	82 ed       	ldi	r24, 0xD2	; 210
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     bb0:	60 91 ea 02 	lds	r22, 0x02EA
     bb4:	70 91 eb 02 	lds	r23, 0x02EB
     bb8:	62 95       	swap	r22
     bba:	72 95       	swap	r23
     bbc:	70 7f       	andi	r23, 0xF0	; 240
     bbe:	76 27       	eor	r23, r22
     bc0:	60 7f       	andi	r22, 0xF0	; 240
     bc2:	76 27       	eor	r23, r22
     bc4:	81 ed       	ldi	r24, 0xD1	; 209
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     bcc:	60 91 ec 02 	lds	r22, 0x02EC
     bd0:	70 91 ed 02 	lds	r23, 0x02ED
     bd4:	62 95       	swap	r22
     bd6:	72 95       	swap	r23
     bd8:	70 7f       	andi	r23, 0xF0	; 240
     bda:	76 27       	eor	r23, r22
     bdc:	60 7f       	andi	r22, 0xF0	; 240
     bde:	76 27       	eor	r23, r22
     be0:	80 ed       	ldi	r24, 0xD0	; 208
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     be8:	60 91 ee 02 	lds	r22, 0x02EE
     bec:	70 91 ef 02 	lds	r23, 0x02EF
     bf0:	62 95       	swap	r22
     bf2:	72 95       	swap	r23
     bf4:	70 7f       	andi	r23, 0xF0	; 240
     bf6:	76 27       	eor	r23, r22
     bf8:	60 7f       	andi	r22, 0xF0	; 240
     bfa:	76 27       	eor	r23, r22
     bfc:	8f ec       	ldi	r24, 0xCF	; 207
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     c04:	60 91 f0 02 	lds	r22, 0x02F0
     c08:	70 91 f1 02 	lds	r23, 0x02F1
     c0c:	62 95       	swap	r22
     c0e:	72 95       	swap	r23
     c10:	70 7f       	andi	r23, 0xF0	; 240
     c12:	76 27       	eor	r23, r22
     c14:	60 7f       	andi	r22, 0xF0	; 240
     c16:	76 27       	eor	r23, r22
     c18:	8e ec       	ldi	r24, 0xCE	; 206
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     c20:	60 91 f2 02 	lds	r22, 0x02F2
     c24:	70 91 f3 02 	lds	r23, 0x02F3
     c28:	62 95       	swap	r22
     c2a:	72 95       	swap	r23
     c2c:	70 7f       	andi	r23, 0xF0	; 240
     c2e:	76 27       	eor	r23, r22
     c30:	60 7f       	andi	r22, 0xF0	; 240
     c32:	76 27       	eor	r23, r22
     c34:	8d ec       	ldi	r24, 0xCD	; 205
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     c3c:	60 91 f4 02 	lds	r22, 0x02F4
     c40:	70 91 f5 02 	lds	r23, 0x02F5
     c44:	62 95       	swap	r22
     c46:	72 95       	swap	r23
     c48:	70 7f       	andi	r23, 0xF0	; 240
     c4a:	76 27       	eor	r23, r22
     c4c:	60 7f       	andi	r22, 0xF0	; 240
     c4e:	76 27       	eor	r23, r22
     c50:	8c ec       	ldi	r24, 0xCC	; 204
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     c58:	60 91 f8 02 	lds	r22, 0x02F8
     c5c:	70 91 f9 02 	lds	r23, 0x02F9
     c60:	62 95       	swap	r22
     c62:	72 95       	swap	r23
     c64:	70 7f       	andi	r23, 0xF0	; 240
     c66:	76 27       	eor	r23, r22
     c68:	60 7f       	andi	r22, 0xF0	; 240
     c6a:	76 27       	eor	r23, r22
     c6c:	8a ec       	ldi	r24, 0xCA	; 202
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     c74:	60 91 f6 02 	lds	r22, 0x02F6
     c78:	70 91 f7 02 	lds	r23, 0x02F7
     c7c:	62 95       	swap	r22
     c7e:	72 95       	swap	r23
     c80:	70 7f       	andi	r23, 0xF0	; 240
     c82:	76 27       	eor	r23, r22
     c84:	60 7f       	andi	r22, 0xF0	; 240
     c86:	76 27       	eor	r23, r22
     c88:	8b ec       	ldi	r24, 0xCB	; 203
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     c90:	60 91 fc 02 	lds	r22, 0x02FC
     c94:	70 91 fd 02 	lds	r23, 0x02FD
     c98:	62 95       	swap	r22
     c9a:	72 95       	swap	r23
     c9c:	70 7f       	andi	r23, 0xF0	; 240
     c9e:	76 27       	eor	r23, r22
     ca0:	60 7f       	andi	r22, 0xF0	; 240
     ca2:	76 27       	eor	r23, r22
     ca4:	88 ec       	ldi	r24, 0xC8	; 200
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     cac:	60 91 fa 02 	lds	r22, 0x02FA
     cb0:	70 91 fb 02 	lds	r23, 0x02FB
     cb4:	62 95       	swap	r22
     cb6:	72 95       	swap	r23
     cb8:	70 7f       	andi	r23, 0xF0	; 240
     cba:	76 27       	eor	r23, r22
     cbc:	60 7f       	andi	r22, 0xF0	; 240
     cbe:	76 27       	eor	r23, r22
     cc0:	89 ec       	ldi	r24, 0xC9	; 201
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     cc8:	8c 2f       	mov	r24, r28
     cca:	6f e0       	ldi	r22, 0x0F	; 15
     ccc:	0e 94 2a 0c 	call	0x1854	; 0x1854 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     cd0:	6f e4       	ldi	r22, 0x4F	; 79
     cd2:	73 e0       	ldi	r23, 0x03	; 3
     cd4:	0e 94 1e 14 	call	0x283c	; 0x283c <interpolate_pitch_cv>
     cd8:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     cda:	86 ee       	ldi	r24, 0xE6	; 230
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     ce2:	8c 2f       	mov	r24, r28
     ce4:	60 ef       	ldi	r22, 0xF0	; 240
     ce6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     cea:	6d e2       	ldi	r22, 0x2D	; 45
     cec:	73 e0       	ldi	r23, 0x03	; 3
     cee:	0e 94 1e 14 	call	0x283c	; 0x283c <interpolate_pitch_cv>
     cf2:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     cf4:	85 ee       	ldi	r24, 0xE5	; 229
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     cfc:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     cfe:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     d00:	20 91 88 01 	lds	r18, 0x0188
     d04:	80 91 89 01 	lds	r24, 0x0189
     d08:	38 2f       	mov	r19, r24
     d0a:	33 70       	andi	r19, 0x03	; 3
     d0c:	83 ef       	ldi	r24, 0xF3	; 243
     d0e:	94 e0       	ldi	r25, 0x04	; 4
     d10:	82 1b       	sub	r24, r18
     d12:	93 0b       	sbc	r25, r19
     d14:	90 93 85 03 	sts	0x0385, r25
     d18:	80 93 84 03 	sts	0x0384, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     d1c:	20 91 86 03 	lds	r18, 0x0386
     d20:	30 91 87 03 	lds	r19, 0x0387
     d24:	82 17       	cp	r24, r18
     d26:	93 07       	cpc	r25, r19
     d28:	11 f0       	breq	.+4      	; 0xd2e <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
     d2a:	0e 94 02 01 	call	0x204	; 0x204 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     d2e:	80 91 84 03 	lds	r24, 0x0384
     d32:	90 91 85 03 	lds	r25, 0x0385
     d36:	90 93 87 03 	sts	0x0387, r25
     d3a:	80 93 86 03 	sts	0x0386, r24
	
}			
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     d44:	84 b1       	in	r24, 0x04	; 4
     d46:	87 62       	ori	r24, 0x27	; 39
     d48:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     d4a:	ec ed       	ldi	r30, 0xDC	; 220
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8c 65       	ori	r24, 0x5C	; 92
     d52:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     d54:	85 b1       	in	r24, 0x05	; 5
     d56:	89 7d       	andi	r24, 0xD9	; 217
     d58:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     d5a:	ed ed       	ldi	r30, 0xDD	; 221
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	83 7f       	andi	r24, 0xF3	; 243
     d62:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     d64:	80 e5       	ldi	r24, 0x50	; 80
     d66:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     d68:	80 81       	ld	r24, Z
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     d6e:	80 81       	ld	r24, Z
     d70:	87 7f       	andi	r24, 0xF7	; 247
     d72:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     d74:	80 81       	ld	r24, Z
     d76:	88 60       	ori	r24, 0x08	; 8
     d78:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     d7a:	80 81       	ld	r24, Z
     d7c:	8f 7e       	andi	r24, 0xEF	; 239
     d7e:	80 83       	st	Z, r24
	
}
     d80:	08 95       	ret

00000d82 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     d82:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     d84:	0d b4       	in	r0, 0x2d	; 45
     d86:	07 fe       	sbrs	r0, 7
     d88:	fd cf       	rjmp	.-6      	; 0xd84 <spi_shift_byte+0x2>
	return SPDR;
     d8a:	8e b5       	in	r24, 0x2e	; 46
	
}
     d8c:	08 95       	ret

00000d8e <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     d8e:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     d90:	80 91 02 03 	lds	r24, 0x0302
     d94:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     d98:	90 91 c1 02 	lds	r25, 0x02C1
     d9c:	98 2b       	or	r25, r24
     d9e:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     da2:	20 91 bf 02 	lds	r18, 0x02BF
     da6:	98 2f       	mov	r25, r24
     da8:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     daa:	89 2f       	mov	r24, r25
     dac:	82 27       	eor	r24, r18
     dae:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     db2:	89 23       	and	r24, r25
     db4:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     db8:	90 91 7c 03 	lds	r25, 0x037C
     dbc:	89 27       	eor	r24, r25
     dbe:	80 93 7c 03 	sts	0x037C, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     dc2:	80 91 01 03 	lds	r24, 0x0301
     dc6:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     dca:	90 91 c1 02 	lds	r25, 0x02C1
     dce:	98 2b       	or	r25, r24
     dd0:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     dd4:	20 91 bd 02 	lds	r18, 0x02BD
     dd8:	98 2f       	mov	r25, r24
     dda:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     ddc:	89 2f       	mov	r24, r25
     dde:	82 27       	eor	r24, r18
     de0:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     de4:	89 23       	and	r24, r25
     de6:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     dea:	90 91 7d 03 	lds	r25, 0x037D
     dee:	89 27       	eor	r24, r25
     df0:	80 93 7d 03 	sts	0x037D, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     df4:	80 91 00 03 	lds	r24, 0x0300
     df8:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     dfc:	80 91 ff 02 	lds	r24, 0x02FF
     e00:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     e04:	30 91 7d 03 	lds	r19, 0x037D
     e08:	36 95       	lsr	r19
     e0a:	36 95       	lsr	r19
     e0c:	36 95       	lsr	r19
     e0e:	34 70       	andi	r19, 0x04	; 4
     e10:	80 91 07 03 	lds	r24, 0x0307
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	11 f4       	brne	.+4      	; 0xe1c <update_spi+0x8e>
     e18:	80 e8       	ldi	r24, 0x80	; 128
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <update_spi+0x90>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
     e1e:	90 91 7e 03 	lds	r25, 0x037E
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     e22:	29 2f       	mov	r18, r25
     e24:	22 1f       	adc	r18, r18
     e26:	22 27       	eor	r18, r18
     e28:	22 1f       	adc	r18, r18
     e2a:	22 95       	swap	r18
     e2c:	22 0f       	add	r18, r18
     e2e:	22 0f       	add	r18, r18
     e30:	20 7c       	andi	r18, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     e32:	23 2b       	or	r18, r19
     e34:	96 95       	lsr	r25
     e36:	96 95       	lsr	r25
     e38:	96 95       	lsr	r25
     e3a:	91 70       	andi	r25, 0x01	; 1
     e3c:	92 2b       	or	r25, r18
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     e3e:	89 2b       	or	r24, r25
     e40:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     e44:	ed ed       	ldi	r30, 0xDD	; 221
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	87 7f       	andi	r24, 0xF7	; 247
     e4c:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     e4e:	80 81       	ld	r24, Z
     e50:	88 60       	ori	r24, 0x08	; 8
     e52:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     e54:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     e56:	08 95       	ret

00000e58 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     e58:	a0 e0       	ldi	r26, 0x00	; 0
     e5a:	b1 e0       	ldi	r27, 0x01	; 1
     e5c:	9d 01       	movw	r18, r26
     e5e:	24 5c       	subi	r18, 0xC4	; 196
     e60:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= 29; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     e62:	ed 91       	ld	r30, X+
     e64:	fc 91       	ld	r31, X
     e66:	11 97       	sbiw	r26, 0x01	; 1
     e68:	80 81       	ld	r24, Z
     e6a:	41 81       	ldd	r20, Z+1	; 0x01
     e6c:	94 2f       	mov	r25, r20
     e6e:	93 70       	andi	r25, 0x03	; 3
     e70:	95 95       	asr	r25
     e72:	87 95       	ror	r24
     e74:	95 95       	asr	r25
     e76:	87 95       	ror	r24
     e78:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     e7a:	ed 91       	ld	r30, X+
     e7c:	fd 91       	ld	r31, X+
     e7e:	83 81       	ldd	r24, Z+3	; 0x03
     e80:	80 68       	ori	r24, 0x80	; 128
     e82:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= 29; i++) {
     e84:	a2 17       	cp	r26, r18
     e86:	b3 07       	cpc	r27, r19
     e88:	61 f7       	brne	.-40     	; 0xe62 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     e8a:	08 95       	ret

00000e8c <unlock_pots>:

void unlock_pots(void) {
     e8c:	e0 e0       	ldi	r30, 0x00	; 0
     e8e:	f1 e0       	ldi	r31, 0x01	; 1
     e90:	cf 01       	movw	r24, r30
     e92:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked = 0;
     e94:	a1 91       	ld	r26, Z+
     e96:	b1 91       	ld	r27, Z+
     e98:	13 96       	adiw	r26, 0x03	; 3
     e9a:	2c 91       	ld	r18, X
     e9c:	13 97       	sbiw	r26, 0x03	; 3
     e9e:	2f 77       	andi	r18, 0x7F	; 127
     ea0:	13 96       	adiw	r26, 0x03	; 3
     ea2:	2c 93       	st	X, r18
     ea4:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= 29; i++) {
     ea6:	e8 17       	cp	r30, r24
     ea8:	f9 07       	cpc	r31, r25
     eaa:	a1 f7       	brne	.-24     	; 0xe94 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
     eac:	08 95       	ret

00000eae <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	ab 97       	sbiw	r28, 0x2b	; 43
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     ec6:	ee ed       	ldi	r30, 0xDE	; 222
     ec8:	f2 e0       	ldi	r31, 0x02	; 2
     eca:	20 91 de 02 	lds	r18, 0x02DE
     ece:	82 2f       	mov	r24, r18
     ed0:	82 95       	swap	r24
     ed2:	80 7f       	andi	r24, 0xF0	; 240
     ed4:	22 95       	swap	r18
     ed6:	2f 70       	andi	r18, 0x0F	; 15
     ed8:	90 91 df 02 	lds	r25, 0x02DF
     edc:	93 70       	andi	r25, 0x03	; 3
     ede:	92 95       	swap	r25
     ee0:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     ee2:	df 01       	movw	r26, r30
     ee4:	5a 97       	sbiw	r26, 0x1a	; 26
     ee6:	3c 91       	ld	r19, X
     ee8:	53 2f       	mov	r21, r19
     eea:	55 0f       	add	r21, r21
     eec:	55 0f       	add	r21, r21
     eee:	4a 81       	ldd	r20, Y+2	; 0x02
     ef0:	43 70       	andi	r20, 0x03	; 3
     ef2:	45 2b       	or	r20, r21
     ef4:	4a 83       	std	Y+2, r20	; 0x02
     ef6:	63 2f       	mov	r22, r19
     ef8:	62 95       	swap	r22
     efa:	66 95       	lsr	r22
     efc:	66 95       	lsr	r22
     efe:	63 70       	andi	r22, 0x03	; 3
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	4c 91       	ld	r20, X
     f04:	43 70       	andi	r20, 0x03	; 3
     f06:	44 0f       	add	r20, r20
     f08:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     f0a:	df 01       	movw	r26, r30
     f0c:	58 97       	sbiw	r26, 0x18	; 24
     f0e:	3c 91       	ld	r19, X
     f10:	53 2f       	mov	r21, r19
     f12:	52 95       	swap	r21
     f14:	50 7f       	andi	r21, 0xF0	; 240
     f16:	46 2b       	or	r20, r22
     f18:	45 2b       	or	r20, r21
     f1a:	4b 83       	std	Y+3, r20	; 0x03
     f1c:	63 2f       	mov	r22, r19
     f1e:	62 95       	swap	r22
     f20:	6f 70       	andi	r22, 0x0F	; 15
     f22:	11 96       	adiw	r26, 0x01	; 1
     f24:	4c 91       	ld	r20, X
     f26:	43 70       	andi	r20, 0x03	; 3
     f28:	42 95       	swap	r20
     f2a:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     f2c:	df 01       	movw	r26, r30
     f2e:	56 97       	sbiw	r26, 0x16	; 22
     f30:	3c 91       	ld	r19, X
     f32:	53 2f       	mov	r21, r19
     f34:	52 95       	swap	r21
     f36:	55 0f       	add	r21, r21
     f38:	55 0f       	add	r21, r21
     f3a:	50 7c       	andi	r21, 0xC0	; 192
     f3c:	46 2b       	or	r20, r22
     f3e:	45 2b       	or	r20, r21
     f40:	4c 83       	std	Y+4, r20	; 0x04
     f42:	11 96       	adiw	r26, 0x01	; 1
     f44:	4c 91       	ld	r20, X
     f46:	42 95       	swap	r20
     f48:	44 0f       	add	r20, r20
     f4a:	44 0f       	add	r20, r20
     f4c:	40 7c       	andi	r20, 0xC0	; 192
     f4e:	36 95       	lsr	r19
     f50:	36 95       	lsr	r19
     f52:	34 2b       	or	r19, r20
     f54:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     f56:	df 01       	movw	r26, r30
     f58:	54 97       	sbiw	r26, 0x14	; 20
     f5a:	3c 91       	ld	r19, X
     f5c:	3e 83       	std	Y+6, r19	; 0x06
     f5e:	11 96       	adiw	r26, 0x01	; 1
     f60:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     f62:	df 01       	movw	r26, r30
     f64:	52 97       	sbiw	r26, 0x12	; 18
     f66:	3c 91       	ld	r19, X
     f68:	53 2f       	mov	r21, r19
     f6a:	55 0f       	add	r21, r21
     f6c:	55 0f       	add	r21, r21
     f6e:	43 70       	andi	r20, 0x03	; 3
     f70:	45 2b       	or	r20, r21
     f72:	4f 83       	std	Y+7, r20	; 0x07
     f74:	63 2f       	mov	r22, r19
     f76:	62 95       	swap	r22
     f78:	66 95       	lsr	r22
     f7a:	66 95       	lsr	r22
     f7c:	63 70       	andi	r22, 0x03	; 3
     f7e:	11 96       	adiw	r26, 0x01	; 1
     f80:	4c 91       	ld	r20, X
     f82:	43 70       	andi	r20, 0x03	; 3
     f84:	44 0f       	add	r20, r20
     f86:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     f88:	df 01       	movw	r26, r30
     f8a:	50 97       	sbiw	r26, 0x10	; 16
     f8c:	3c 91       	ld	r19, X
     f8e:	53 2f       	mov	r21, r19
     f90:	52 95       	swap	r21
     f92:	50 7f       	andi	r21, 0xF0	; 240
     f94:	46 2b       	or	r20, r22
     f96:	45 2b       	or	r20, r21
     f98:	48 87       	std	Y+8, r20	; 0x08
     f9a:	63 2f       	mov	r22, r19
     f9c:	62 95       	swap	r22
     f9e:	6f 70       	andi	r22, 0x0F	; 15
     fa0:	11 96       	adiw	r26, 0x01	; 1
     fa2:	4c 91       	ld	r20, X
     fa4:	43 70       	andi	r20, 0x03	; 3
     fa6:	42 95       	swap	r20
     fa8:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     faa:	df 01       	movw	r26, r30
     fac:	1e 97       	sbiw	r26, 0x0e	; 14
     fae:	3c 91       	ld	r19, X
     fb0:	53 2f       	mov	r21, r19
     fb2:	52 95       	swap	r21
     fb4:	55 0f       	add	r21, r21
     fb6:	55 0f       	add	r21, r21
     fb8:	50 7c       	andi	r21, 0xC0	; 192
     fba:	46 2b       	or	r20, r22
     fbc:	45 2b       	or	r20, r21
     fbe:	49 87       	std	Y+9, r20	; 0x09
     fc0:	11 96       	adiw	r26, 0x01	; 1
     fc2:	4c 91       	ld	r20, X
     fc4:	42 95       	swap	r20
     fc6:	44 0f       	add	r20, r20
     fc8:	44 0f       	add	r20, r20
     fca:	40 7c       	andi	r20, 0xC0	; 192
     fcc:	36 95       	lsr	r19
     fce:	36 95       	lsr	r19
     fd0:	34 2b       	or	r19, r20
     fd2:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     fd4:	df 01       	movw	r26, r30
     fd6:	1c 97       	sbiw	r26, 0x0c	; 12
     fd8:	3c 91       	ld	r19, X
     fda:	3b 87       	std	Y+11, r19	; 0x0b
     fdc:	11 96       	adiw	r26, 0x01	; 1
     fde:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     fe0:	df 01       	movw	r26, r30
     fe2:	1a 97       	sbiw	r26, 0x0a	; 10
     fe4:	3c 91       	ld	r19, X
     fe6:	53 2f       	mov	r21, r19
     fe8:	55 0f       	add	r21, r21
     fea:	55 0f       	add	r21, r21
     fec:	43 70       	andi	r20, 0x03	; 3
     fee:	45 2b       	or	r20, r21
     ff0:	4c 87       	std	Y+12, r20	; 0x0c
     ff2:	63 2f       	mov	r22, r19
     ff4:	62 95       	swap	r22
     ff6:	66 95       	lsr	r22
     ff8:	66 95       	lsr	r22
     ffa:	63 70       	andi	r22, 0x03	; 3
     ffc:	11 96       	adiw	r26, 0x01	; 1
     ffe:	4c 91       	ld	r20, X
    1000:	43 70       	andi	r20, 0x03	; 3
    1002:	44 0f       	add	r20, r20
    1004:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    1006:	df 01       	movw	r26, r30
    1008:	18 97       	sbiw	r26, 0x08	; 8
    100a:	3c 91       	ld	r19, X
    100c:	53 2f       	mov	r21, r19
    100e:	52 95       	swap	r21
    1010:	50 7f       	andi	r21, 0xF0	; 240
    1012:	46 2b       	or	r20, r22
    1014:	45 2b       	or	r20, r21
    1016:	4d 87       	std	Y+13, r20	; 0x0d
    1018:	63 2f       	mov	r22, r19
    101a:	62 95       	swap	r22
    101c:	6f 70       	andi	r22, 0x0F	; 15
    101e:	11 96       	adiw	r26, 0x01	; 1
    1020:	4c 91       	ld	r20, X
    1022:	43 70       	andi	r20, 0x03	; 3
    1024:	42 95       	swap	r20
    1026:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    1028:	df 01       	movw	r26, r30
    102a:	16 97       	sbiw	r26, 0x06	; 6
    102c:	3c 91       	ld	r19, X
    102e:	53 2f       	mov	r21, r19
    1030:	52 95       	swap	r21
    1032:	55 0f       	add	r21, r21
    1034:	55 0f       	add	r21, r21
    1036:	50 7c       	andi	r21, 0xC0	; 192
    1038:	46 2b       	or	r20, r22
    103a:	45 2b       	or	r20, r21
    103c:	4e 87       	std	Y+14, r20	; 0x0e
    103e:	11 96       	adiw	r26, 0x01	; 1
    1040:	4c 91       	ld	r20, X
    1042:	42 95       	swap	r20
    1044:	44 0f       	add	r20, r20
    1046:	44 0f       	add	r20, r20
    1048:	40 7c       	andi	r20, 0xC0	; 192
    104a:	36 95       	lsr	r19
    104c:	36 95       	lsr	r19
    104e:	34 2b       	or	r19, r20
    1050:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    1052:	df 01       	movw	r26, r30
    1054:	14 97       	sbiw	r26, 0x04	; 4
    1056:	3c 91       	ld	r19, X
    1058:	38 8b       	std	Y+16, r19	; 0x10
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    105e:	df 01       	movw	r26, r30
    1060:	12 97       	sbiw	r26, 0x02	; 2
    1062:	3c 91       	ld	r19, X
    1064:	53 2f       	mov	r21, r19
    1066:	55 0f       	add	r21, r21
    1068:	55 0f       	add	r21, r21
    106a:	43 70       	andi	r20, 0x03	; 3
    106c:	45 2b       	or	r20, r21
    106e:	49 8b       	std	Y+17, r20	; 0x11
    1070:	32 95       	swap	r19
    1072:	36 95       	lsr	r19
    1074:	36 95       	lsr	r19
    1076:	33 70       	andi	r19, 0x03	; 3
    1078:	11 96       	adiw	r26, 0x01	; 1
    107a:	4c 91       	ld	r20, X
    107c:	43 70       	andi	r20, 0x03	; 3
    107e:	44 0f       	add	r20, r20
    1080:	44 0f       	add	r20, r20
    1082:	83 2b       	or	r24, r19
    1084:	84 2b       	or	r24, r20
    1086:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    1088:	80 91 e0 02 	lds	r24, 0x02E0
    108c:	38 2f       	mov	r19, r24
    108e:	32 95       	swap	r19
    1090:	33 0f       	add	r19, r19
    1092:	33 0f       	add	r19, r19
    1094:	30 7c       	andi	r19, 0xC0	; 192
    1096:	92 2b       	or	r25, r18
    1098:	93 2b       	or	r25, r19
    109a:	9b 8b       	std	Y+19, r25	; 0x13
    109c:	93 81       	ldd	r25, Z+3	; 0x03
    109e:	92 95       	swap	r25
    10a0:	99 0f       	add	r25, r25
    10a2:	99 0f       	add	r25, r25
    10a4:	90 7c       	andi	r25, 0xC0	; 192
    10a6:	86 95       	lsr	r24
    10a8:	86 95       	lsr	r24
    10aa:	89 2b       	or	r24, r25
    10ac:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    10ae:	80 91 e2 02 	lds	r24, 0x02E2
    10b2:	8d 8b       	std	Y+21, r24	; 0x15
    10b4:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    10b6:	80 91 e4 02 	lds	r24, 0x02E4
    10ba:	28 2f       	mov	r18, r24
    10bc:	22 0f       	add	r18, r18
    10be:	22 0f       	add	r18, r18
    10c0:	93 70       	andi	r25, 0x03	; 3
    10c2:	92 2b       	or	r25, r18
    10c4:	9e 8b       	std	Y+22, r25	; 0x16
    10c6:	38 2f       	mov	r19, r24
    10c8:	32 95       	swap	r19
    10ca:	36 95       	lsr	r19
    10cc:	36 95       	lsr	r19
    10ce:	33 70       	andi	r19, 0x03	; 3
    10d0:	97 81       	ldd	r25, Z+7	; 0x07
    10d2:	93 70       	andi	r25, 0x03	; 3
    10d4:	99 0f       	add	r25, r25
    10d6:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    10d8:	80 91 e6 02 	lds	r24, 0x02E6
    10dc:	28 2f       	mov	r18, r24
    10de:	22 95       	swap	r18
    10e0:	20 7f       	andi	r18, 0xF0	; 240
    10e2:	93 2b       	or	r25, r19
    10e4:	92 2b       	or	r25, r18
    10e6:	9f 8b       	std	Y+23, r25	; 0x17
    10e8:	38 2f       	mov	r19, r24
    10ea:	32 95       	swap	r19
    10ec:	3f 70       	andi	r19, 0x0F	; 15
    10ee:	91 85       	ldd	r25, Z+9	; 0x09
    10f0:	93 70       	andi	r25, 0x03	; 3
    10f2:	92 95       	swap	r25
    10f4:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    10f6:	80 91 e8 02 	lds	r24, 0x02E8
    10fa:	28 2f       	mov	r18, r24
    10fc:	22 95       	swap	r18
    10fe:	22 0f       	add	r18, r18
    1100:	22 0f       	add	r18, r18
    1102:	20 7c       	andi	r18, 0xC0	; 192
    1104:	93 2b       	or	r25, r19
    1106:	92 2b       	or	r25, r18
    1108:	98 8f       	std	Y+24, r25	; 0x18
    110a:	93 85       	ldd	r25, Z+11	; 0x0b
    110c:	92 95       	swap	r25
    110e:	99 0f       	add	r25, r25
    1110:	99 0f       	add	r25, r25
    1112:	90 7c       	andi	r25, 0xC0	; 192
    1114:	86 95       	lsr	r24
    1116:	86 95       	lsr	r24
    1118:	89 2b       	or	r24, r25
    111a:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    111c:	80 91 ea 02 	lds	r24, 0x02EA
    1120:	8a 8f       	std	Y+26, r24	; 0x1a
    1122:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    1124:	80 91 ec 02 	lds	r24, 0x02EC
    1128:	28 2f       	mov	r18, r24
    112a:	22 0f       	add	r18, r18
    112c:	22 0f       	add	r18, r18
    112e:	93 70       	andi	r25, 0x03	; 3
    1130:	92 2b       	or	r25, r18
    1132:	9b 8f       	std	Y+27, r25	; 0x1b
    1134:	38 2f       	mov	r19, r24
    1136:	32 95       	swap	r19
    1138:	36 95       	lsr	r19
    113a:	36 95       	lsr	r19
    113c:	33 70       	andi	r19, 0x03	; 3
    113e:	97 85       	ldd	r25, Z+15	; 0x0f
    1140:	93 70       	andi	r25, 0x03	; 3
    1142:	99 0f       	add	r25, r25
    1144:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    1146:	80 91 ee 02 	lds	r24, 0x02EE
    114a:	28 2f       	mov	r18, r24
    114c:	22 95       	swap	r18
    114e:	20 7f       	andi	r18, 0xF0	; 240
    1150:	93 2b       	or	r25, r19
    1152:	92 2b       	or	r25, r18
    1154:	9c 8f       	std	Y+28, r25	; 0x1c
    1156:	38 2f       	mov	r19, r24
    1158:	32 95       	swap	r19
    115a:	3f 70       	andi	r19, 0x0F	; 15
    115c:	91 89       	ldd	r25, Z+17	; 0x11
    115e:	93 70       	andi	r25, 0x03	; 3
    1160:	92 95       	swap	r25
    1162:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    1164:	80 91 f0 02 	lds	r24, 0x02F0
    1168:	28 2f       	mov	r18, r24
    116a:	22 95       	swap	r18
    116c:	22 0f       	add	r18, r18
    116e:	22 0f       	add	r18, r18
    1170:	20 7c       	andi	r18, 0xC0	; 192
    1172:	93 2b       	or	r25, r19
    1174:	92 2b       	or	r25, r18
    1176:	9d 8f       	std	Y+29, r25	; 0x1d
    1178:	93 89       	ldd	r25, Z+19	; 0x13
    117a:	92 95       	swap	r25
    117c:	99 0f       	add	r25, r25
    117e:	99 0f       	add	r25, r25
    1180:	90 7c       	andi	r25, 0xC0	; 192
    1182:	86 95       	lsr	r24
    1184:	86 95       	lsr	r24
    1186:	89 2b       	or	r24, r25
    1188:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    118a:	80 91 f2 02 	lds	r24, 0x02F2
    118e:	8f 8f       	std	Y+31, r24	; 0x1f
    1190:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    1192:	80 91 f4 02 	lds	r24, 0x02F4
    1196:	28 2f       	mov	r18, r24
    1198:	22 0f       	add	r18, r18
    119a:	22 0f       	add	r18, r18
    119c:	93 70       	andi	r25, 0x03	; 3
    119e:	92 2b       	or	r25, r18
    11a0:	98 a3       	lds	r25, 0x58
    11a2:	38 2f       	mov	r19, r24
    11a4:	32 95       	swap	r19
    11a6:	36 95       	lsr	r19
    11a8:	36 95       	lsr	r19
    11aa:	33 70       	andi	r19, 0x03	; 3
    11ac:	97 89       	ldd	r25, Z+23	; 0x17
    11ae:	93 70       	andi	r25, 0x03	; 3
    11b0:	99 0f       	add	r25, r25
    11b2:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    11b4:	80 91 f6 02 	lds	r24, 0x02F6
    11b8:	28 2f       	mov	r18, r24
    11ba:	22 95       	swap	r18
    11bc:	20 7f       	andi	r18, 0xF0	; 240
    11be:	93 2b       	or	r25, r19
    11c0:	92 2b       	or	r25, r18
    11c2:	99 a3       	lds	r25, 0x59
    11c4:	38 2f       	mov	r19, r24
    11c6:	32 95       	swap	r19
    11c8:	3f 70       	andi	r19, 0x0F	; 15
    11ca:	91 8d       	ldd	r25, Z+25	; 0x19
    11cc:	93 70       	andi	r25, 0x03	; 3
    11ce:	92 95       	swap	r25
    11d0:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    11d2:	80 91 f8 02 	lds	r24, 0x02F8
    11d6:	28 2f       	mov	r18, r24
    11d8:	22 95       	swap	r18
    11da:	22 0f       	add	r18, r18
    11dc:	22 0f       	add	r18, r18
    11de:	20 7c       	andi	r18, 0xC0	; 192
    11e0:	93 2b       	or	r25, r19
    11e2:	92 2b       	or	r25, r18
    11e4:	9a a3       	lds	r25, 0x5a
    11e6:	93 8d       	ldd	r25, Z+27	; 0x1b
    11e8:	92 95       	swap	r25
    11ea:	99 0f       	add	r25, r25
    11ec:	99 0f       	add	r25, r25
    11ee:	90 7c       	andi	r25, 0xC0	; 192
    11f0:	86 95       	lsr	r24
    11f2:	86 95       	lsr	r24
    11f4:	89 2b       	or	r24, r25
    11f6:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    11f8:	80 91 fa 02 	lds	r24, 0x02FA
    11fc:	8c a3       	lds	r24, 0x5c
    11fe:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    1200:	80 91 fc 02 	lds	r24, 0x02FC
    1204:	28 2f       	mov	r18, r24
    1206:	22 0f       	add	r18, r18
    1208:	22 0f       	add	r18, r18
    120a:	93 70       	andi	r25, 0x03	; 3
    120c:	92 2b       	or	r25, r18
    120e:	9d a3       	lds	r25, 0x5d
    1210:	82 95       	swap	r24
    1212:	86 95       	lsr	r24
    1214:	86 95       	lsr	r24
    1216:	83 70       	andi	r24, 0x03	; 3
    1218:	2e a1       	lds	r18, 0x4e
    121a:	20 7f       	andi	r18, 0xF0	; 240
    121c:	97 8d       	ldd	r25, Z+31	; 0x1f
    121e:	93 70       	andi	r25, 0x03	; 3
    1220:	99 0f       	add	r25, r25
    1222:	99 0f       	add	r25, r25
    1224:	82 2b       	or	r24, r18
    1226:	89 2b       	or	r24, r25
    1228:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    122a:	80 91 fe 02 	lds	r24, 0x02FE
    122e:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    1230:	80 91 ff 02 	lds	r24, 0x02FF
    1234:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    1236:	80 91 00 03 	lds	r24, 0x0300
    123a:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    123c:	80 91 01 03 	lds	r24, 0x0301
    1240:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    1242:	80 91 02 03 	lds	r24, 0x0302
    1246:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    1248:	0e 94 2c 07 	call	0xe58	; 0xe58 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    124c:	80 91 7e 03 	lds	r24, 0x037E
    1250:	8f 77       	andi	r24, 0x7F	; 127
    1252:	80 93 7e 03 	sts	0x037E, r24
	current_patch.mode = MEMORY;
    1256:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    125a:	21 2f       	mov	r18, r17
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	8b e2       	ldi	r24, 0x2B	; 43
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	28 9f       	mul	r18, r24
    1264:	b0 01       	movw	r22, r0
    1266:	29 9f       	mul	r18, r25
    1268:	70 0d       	add	r23, r0
    126a:	38 9f       	mul	r19, r24
    126c:	70 0d       	add	r23, r0
    126e:	11 24       	eor	r1, r1
    1270:	60 50       	subi	r22, 0x00	; 0
    1272:	70 40       	sbci	r23, 0x00	; 0
    1274:	ce 01       	movw	r24, r28
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	4b e2       	ldi	r20, 0x2B	; 43
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__eeupd_block_m6450a>
}	
    1280:	ab 96       	adiw	r28, 0x2b	; 43
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	08 95       	ret

00001294 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	c3 54       	subi	r28, 0x43	; 67
    12a0:	d0 40       	sbci	r29, 0x00	; 0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	2b e2       	ldi	r18, 0x2B	; 43
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	82 9f       	mul	r24, r18
    12b4:	b0 01       	movw	r22, r0
    12b6:	83 9f       	mul	r24, r19
    12b8:	70 0d       	add	r23, r0
    12ba:	92 9f       	mul	r25, r18
    12bc:	70 0d       	add	r23, r0
    12be:	11 24       	eor	r1, r1
    12c0:	60 50       	subi	r22, 0x00	; 0
    12c2:	70 40       	sbci	r23, 0x00	; 0
    12c4:	ce 01       	movw	r24, r28
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	4b e2       	ldi	r20, 0x2B	; 43
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    12d0:	ee ed       	ldi	r30, 0xDE	; 222
    12d2:	f2 e0       	ldi	r31, 0x02	; 2
    12d4:	8a 89       	ldd	r24, Y+18	; 0x12
    12d6:	28 2f       	mov	r18, r24
    12d8:	22 95       	swap	r18
    12da:	2f 70       	andi	r18, 0x0F	; 15
    12dc:	9b 89       	ldd	r25, Y+19	; 0x13
    12de:	39 2f       	mov	r19, r25
    12e0:	32 95       	swap	r19
    12e2:	30 7f       	andi	r19, 0xF0	; 240
    12e4:	32 2b       	or	r19, r18
    12e6:	29 2f       	mov	r18, r25
    12e8:	22 95       	swap	r18
    12ea:	2f 70       	andi	r18, 0x0F	; 15
    12ec:	23 70       	andi	r18, 0x03	; 3
    12ee:	30 93 de 02 	sts	0x02DE, r19
    12f2:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    12f6:	df 01       	movw	r26, r30
    12f8:	5a 97       	sbiw	r26, 0x1a	; 26
    12fa:	4a 81       	ldd	r20, Y+2	; 0x02
    12fc:	46 95       	lsr	r20
    12fe:	46 95       	lsr	r20
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	32 2f       	mov	r19, r18
    1304:	32 95       	swap	r19
    1306:	33 0f       	add	r19, r19
    1308:	33 0f       	add	r19, r19
    130a:	30 7c       	andi	r19, 0xC0	; 192
    130c:	43 2b       	or	r20, r19
    130e:	32 2f       	mov	r19, r18
    1310:	36 95       	lsr	r19
    1312:	36 95       	lsr	r19
    1314:	33 70       	andi	r19, 0x03	; 3
    1316:	4c 93       	st	X, r20
    1318:	11 96       	adiw	r26, 0x01	; 1
    131a:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    131c:	df 01       	movw	r26, r30
    131e:	58 97       	sbiw	r26, 0x18	; 24
    1320:	32 2f       	mov	r19, r18
    1322:	32 95       	swap	r19
    1324:	3f 70       	andi	r19, 0x0F	; 15
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	42 2f       	mov	r20, r18
    132a:	42 95       	swap	r20
    132c:	40 7f       	andi	r20, 0xF0	; 240
    132e:	43 2b       	or	r20, r19
    1330:	32 2f       	mov	r19, r18
    1332:	32 95       	swap	r19
    1334:	3f 70       	andi	r19, 0x0F	; 15
    1336:	33 70       	andi	r19, 0x03	; 3
    1338:	4c 93       	st	X, r20
    133a:	11 96       	adiw	r26, 0x01	; 1
    133c:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    133e:	df 01       	movw	r26, r30
    1340:	56 97       	sbiw	r26, 0x16	; 22
    1342:	22 95       	swap	r18
    1344:	26 95       	lsr	r18
    1346:	26 95       	lsr	r18
    1348:	23 70       	andi	r18, 0x03	; 3
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	43 2f       	mov	r20, r19
    134e:	44 0f       	add	r20, r20
    1350:	44 0f       	add	r20, r20
    1352:	24 2b       	or	r18, r20
    1354:	32 95       	swap	r19
    1356:	36 95       	lsr	r19
    1358:	36 95       	lsr	r19
    135a:	33 70       	andi	r19, 0x03	; 3
    135c:	2c 93       	st	X, r18
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    1362:	df 01       	movw	r26, r30
    1364:	54 97       	sbiw	r26, 0x14	; 20
    1366:	4e 81       	ldd	r20, Y+6	; 0x06
    1368:	2f 81       	ldd	r18, Y+7	; 0x07
    136a:	32 2f       	mov	r19, r18
    136c:	33 70       	andi	r19, 0x03	; 3
    136e:	4c 93       	st	X, r20
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1374:	df 01       	movw	r26, r30
    1376:	52 97       	sbiw	r26, 0x12	; 18
    1378:	32 2f       	mov	r19, r18
    137a:	36 95       	lsr	r19
    137c:	36 95       	lsr	r19
    137e:	28 85       	ldd	r18, Y+8	; 0x08
    1380:	42 2f       	mov	r20, r18
    1382:	42 95       	swap	r20
    1384:	44 0f       	add	r20, r20
    1386:	44 0f       	add	r20, r20
    1388:	40 7c       	andi	r20, 0xC0	; 192
    138a:	43 2b       	or	r20, r19
    138c:	32 2f       	mov	r19, r18
    138e:	36 95       	lsr	r19
    1390:	36 95       	lsr	r19
    1392:	33 70       	andi	r19, 0x03	; 3
    1394:	4c 93       	st	X, r20
    1396:	11 96       	adiw	r26, 0x01	; 1
    1398:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    139a:	df 01       	movw	r26, r30
    139c:	50 97       	sbiw	r26, 0x10	; 16
    139e:	32 2f       	mov	r19, r18
    13a0:	32 95       	swap	r19
    13a2:	3f 70       	andi	r19, 0x0F	; 15
    13a4:	29 85       	ldd	r18, Y+9	; 0x09
    13a6:	42 2f       	mov	r20, r18
    13a8:	42 95       	swap	r20
    13aa:	40 7f       	andi	r20, 0xF0	; 240
    13ac:	43 2b       	or	r20, r19
    13ae:	32 2f       	mov	r19, r18
    13b0:	32 95       	swap	r19
    13b2:	3f 70       	andi	r19, 0x0F	; 15
    13b4:	33 70       	andi	r19, 0x03	; 3
    13b6:	4c 93       	st	X, r20
    13b8:	11 96       	adiw	r26, 0x01	; 1
    13ba:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    13bc:	df 01       	movw	r26, r30
    13be:	1e 97       	sbiw	r26, 0x0e	; 14
    13c0:	22 95       	swap	r18
    13c2:	26 95       	lsr	r18
    13c4:	26 95       	lsr	r18
    13c6:	23 70       	andi	r18, 0x03	; 3
    13c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ca:	43 2f       	mov	r20, r19
    13cc:	44 0f       	add	r20, r20
    13ce:	44 0f       	add	r20, r20
    13d0:	24 2b       	or	r18, r20
    13d2:	32 95       	swap	r19
    13d4:	36 95       	lsr	r19
    13d6:	36 95       	lsr	r19
    13d8:	33 70       	andi	r19, 0x03	; 3
    13da:	2c 93       	st	X, r18
    13dc:	11 96       	adiw	r26, 0x01	; 1
    13de:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    13e0:	df 01       	movw	r26, r30
    13e2:	1c 97       	sbiw	r26, 0x0c	; 12
    13e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    13e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    13e8:	32 2f       	mov	r19, r18
    13ea:	33 70       	andi	r19, 0x03	; 3
    13ec:	4c 93       	st	X, r20
    13ee:	11 96       	adiw	r26, 0x01	; 1
    13f0:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    13f2:	df 01       	movw	r26, r30
    13f4:	1a 97       	sbiw	r26, 0x0a	; 10
    13f6:	32 2f       	mov	r19, r18
    13f8:	36 95       	lsr	r19
    13fa:	36 95       	lsr	r19
    13fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    13fe:	42 2f       	mov	r20, r18
    1400:	42 95       	swap	r20
    1402:	44 0f       	add	r20, r20
    1404:	44 0f       	add	r20, r20
    1406:	40 7c       	andi	r20, 0xC0	; 192
    1408:	43 2b       	or	r20, r19
    140a:	32 2f       	mov	r19, r18
    140c:	36 95       	lsr	r19
    140e:	36 95       	lsr	r19
    1410:	33 70       	andi	r19, 0x03	; 3
    1412:	4c 93       	st	X, r20
    1414:	11 96       	adiw	r26, 0x01	; 1
    1416:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    1418:	df 01       	movw	r26, r30
    141a:	18 97       	sbiw	r26, 0x08	; 8
    141c:	32 2f       	mov	r19, r18
    141e:	32 95       	swap	r19
    1420:	3f 70       	andi	r19, 0x0F	; 15
    1422:	2e 85       	ldd	r18, Y+14	; 0x0e
    1424:	42 2f       	mov	r20, r18
    1426:	42 95       	swap	r20
    1428:	40 7f       	andi	r20, 0xF0	; 240
    142a:	43 2b       	or	r20, r19
    142c:	32 2f       	mov	r19, r18
    142e:	32 95       	swap	r19
    1430:	3f 70       	andi	r19, 0x0F	; 15
    1432:	33 70       	andi	r19, 0x03	; 3
    1434:	4c 93       	st	X, r20
    1436:	11 96       	adiw	r26, 0x01	; 1
    1438:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    143a:	df 01       	movw	r26, r30
    143c:	16 97       	sbiw	r26, 0x06	; 6
    143e:	22 95       	swap	r18
    1440:	26 95       	lsr	r18
    1442:	26 95       	lsr	r18
    1444:	23 70       	andi	r18, 0x03	; 3
    1446:	3f 85       	ldd	r19, Y+15	; 0x0f
    1448:	43 2f       	mov	r20, r19
    144a:	44 0f       	add	r20, r20
    144c:	44 0f       	add	r20, r20
    144e:	24 2b       	or	r18, r20
    1450:	32 95       	swap	r19
    1452:	36 95       	lsr	r19
    1454:	36 95       	lsr	r19
    1456:	33 70       	andi	r19, 0x03	; 3
    1458:	2c 93       	st	X, r18
    145a:	11 96       	adiw	r26, 0x01	; 1
    145c:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    145e:	df 01       	movw	r26, r30
    1460:	14 97       	sbiw	r26, 0x04	; 4
    1462:	48 89       	ldd	r20, Y+16	; 0x10
    1464:	29 89       	ldd	r18, Y+17	; 0x11
    1466:	32 2f       	mov	r19, r18
    1468:	33 70       	andi	r19, 0x03	; 3
    146a:	4c 93       	st	X, r20
    146c:	11 96       	adiw	r26, 0x01	; 1
    146e:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    1470:	df 01       	movw	r26, r30
    1472:	12 97       	sbiw	r26, 0x02	; 2
    1474:	26 95       	lsr	r18
    1476:	26 95       	lsr	r18
    1478:	38 2f       	mov	r19, r24
    147a:	32 95       	swap	r19
    147c:	33 0f       	add	r19, r19
    147e:	33 0f       	add	r19, r19
    1480:	30 7c       	andi	r19, 0xC0	; 192
    1482:	23 2b       	or	r18, r19
    1484:	86 95       	lsr	r24
    1486:	86 95       	lsr	r24
    1488:	83 70       	andi	r24, 0x03	; 3
    148a:	2c 93       	st	X, r18
    148c:	11 96       	adiw	r26, 0x01	; 1
    148e:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    1490:	92 95       	swap	r25
    1492:	96 95       	lsr	r25
    1494:	96 95       	lsr	r25
    1496:	93 70       	andi	r25, 0x03	; 3
    1498:	8c 89       	ldd	r24, Y+20	; 0x14
    149a:	28 2f       	mov	r18, r24
    149c:	22 0f       	add	r18, r18
    149e:	22 0f       	add	r18, r18
    14a0:	92 2b       	or	r25, r18
    14a2:	82 95       	swap	r24
    14a4:	86 95       	lsr	r24
    14a6:	86 95       	lsr	r24
    14a8:	83 70       	andi	r24, 0x03	; 3
    14aa:	90 93 e0 02 	sts	0x02E0, r25
    14ae:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    14b0:	2d 89       	ldd	r18, Y+21	; 0x15
    14b2:	8e 89       	ldd	r24, Y+22	; 0x16
    14b4:	98 2f       	mov	r25, r24
    14b6:	93 70       	andi	r25, 0x03	; 3
    14b8:	20 93 e2 02 	sts	0x02E2, r18
    14bc:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    14be:	98 2f       	mov	r25, r24
    14c0:	96 95       	lsr	r25
    14c2:	96 95       	lsr	r25
    14c4:	8f 89       	ldd	r24, Y+23	; 0x17
    14c6:	28 2f       	mov	r18, r24
    14c8:	22 95       	swap	r18
    14ca:	22 0f       	add	r18, r18
    14cc:	22 0f       	add	r18, r18
    14ce:	20 7c       	andi	r18, 0xC0	; 192
    14d0:	29 2b       	or	r18, r25
    14d2:	98 2f       	mov	r25, r24
    14d4:	96 95       	lsr	r25
    14d6:	96 95       	lsr	r25
    14d8:	93 70       	andi	r25, 0x03	; 3
    14da:	20 93 e4 02 	sts	0x02E4, r18
    14de:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    14e0:	98 2f       	mov	r25, r24
    14e2:	92 95       	swap	r25
    14e4:	9f 70       	andi	r25, 0x0F	; 15
    14e6:	88 8d       	ldd	r24, Y+24	; 0x18
    14e8:	28 2f       	mov	r18, r24
    14ea:	22 95       	swap	r18
    14ec:	20 7f       	andi	r18, 0xF0	; 240
    14ee:	29 2b       	or	r18, r25
    14f0:	98 2f       	mov	r25, r24
    14f2:	92 95       	swap	r25
    14f4:	9f 70       	andi	r25, 0x0F	; 15
    14f6:	93 70       	andi	r25, 0x03	; 3
    14f8:	20 93 e6 02 	sts	0x02E6, r18
    14fc:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    14fe:	82 95       	swap	r24
    1500:	86 95       	lsr	r24
    1502:	86 95       	lsr	r24
    1504:	83 70       	andi	r24, 0x03	; 3
    1506:	99 8d       	ldd	r25, Y+25	; 0x19
    1508:	29 2f       	mov	r18, r25
    150a:	22 0f       	add	r18, r18
    150c:	22 0f       	add	r18, r18
    150e:	82 2b       	or	r24, r18
    1510:	92 95       	swap	r25
    1512:	96 95       	lsr	r25
    1514:	96 95       	lsr	r25
    1516:	93 70       	andi	r25, 0x03	; 3
    1518:	80 93 e8 02 	sts	0x02E8, r24
    151c:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    151e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1520:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1522:	98 2f       	mov	r25, r24
    1524:	93 70       	andi	r25, 0x03	; 3
    1526:	20 93 ea 02 	sts	0x02EA, r18
    152a:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    152c:	98 2f       	mov	r25, r24
    152e:	96 95       	lsr	r25
    1530:	96 95       	lsr	r25
    1532:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1534:	28 2f       	mov	r18, r24
    1536:	22 95       	swap	r18
    1538:	22 0f       	add	r18, r18
    153a:	22 0f       	add	r18, r18
    153c:	20 7c       	andi	r18, 0xC0	; 192
    153e:	29 2b       	or	r18, r25
    1540:	98 2f       	mov	r25, r24
    1542:	96 95       	lsr	r25
    1544:	96 95       	lsr	r25
    1546:	93 70       	andi	r25, 0x03	; 3
    1548:	20 93 ec 02 	sts	0x02EC, r18
    154c:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    154e:	98 2f       	mov	r25, r24
    1550:	92 95       	swap	r25
    1552:	9f 70       	andi	r25, 0x0F	; 15
    1554:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1556:	28 2f       	mov	r18, r24
    1558:	22 95       	swap	r18
    155a:	20 7f       	andi	r18, 0xF0	; 240
    155c:	29 2b       	or	r18, r25
    155e:	98 2f       	mov	r25, r24
    1560:	92 95       	swap	r25
    1562:	9f 70       	andi	r25, 0x0F	; 15
    1564:	93 70       	andi	r25, 0x03	; 3
    1566:	20 93 ee 02 	sts	0x02EE, r18
    156a:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    156c:	82 95       	swap	r24
    156e:	86 95       	lsr	r24
    1570:	86 95       	lsr	r24
    1572:	83 70       	andi	r24, 0x03	; 3
    1574:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1576:	29 2f       	mov	r18, r25
    1578:	22 0f       	add	r18, r18
    157a:	22 0f       	add	r18, r18
    157c:	82 2b       	or	r24, r18
    157e:	92 95       	swap	r25
    1580:	96 95       	lsr	r25
    1582:	96 95       	lsr	r25
    1584:	93 70       	andi	r25, 0x03	; 3
    1586:	80 93 f0 02 	sts	0x02F0, r24
    158a:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    158c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    158e:	88 a1       	lds	r24, 0x48
    1590:	98 2f       	mov	r25, r24
    1592:	93 70       	andi	r25, 0x03	; 3
    1594:	20 93 f2 02 	sts	0x02F2, r18
    1598:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    159a:	98 2f       	mov	r25, r24
    159c:	96 95       	lsr	r25
    159e:	96 95       	lsr	r25
    15a0:	89 a1       	lds	r24, 0x49
    15a2:	28 2f       	mov	r18, r24
    15a4:	22 95       	swap	r18
    15a6:	22 0f       	add	r18, r18
    15a8:	22 0f       	add	r18, r18
    15aa:	20 7c       	andi	r18, 0xC0	; 192
    15ac:	29 2b       	or	r18, r25
    15ae:	98 2f       	mov	r25, r24
    15b0:	96 95       	lsr	r25
    15b2:	96 95       	lsr	r25
    15b4:	93 70       	andi	r25, 0x03	; 3
    15b6:	20 93 f4 02 	sts	0x02F4, r18
    15ba:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    15bc:	98 2f       	mov	r25, r24
    15be:	92 95       	swap	r25
    15c0:	9f 70       	andi	r25, 0x0F	; 15
    15c2:	8a a1       	lds	r24, 0x4a
    15c4:	28 2f       	mov	r18, r24
    15c6:	22 95       	swap	r18
    15c8:	20 7f       	andi	r18, 0xF0	; 240
    15ca:	29 2b       	or	r18, r25
    15cc:	98 2f       	mov	r25, r24
    15ce:	92 95       	swap	r25
    15d0:	9f 70       	andi	r25, 0x0F	; 15
    15d2:	93 70       	andi	r25, 0x03	; 3
    15d4:	20 93 f6 02 	sts	0x02F6, r18
    15d8:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    15da:	82 95       	swap	r24
    15dc:	86 95       	lsr	r24
    15de:	86 95       	lsr	r24
    15e0:	83 70       	andi	r24, 0x03	; 3
    15e2:	9b a1       	lds	r25, 0x4b
    15e4:	29 2f       	mov	r18, r25
    15e6:	22 0f       	add	r18, r18
    15e8:	22 0f       	add	r18, r18
    15ea:	82 2b       	or	r24, r18
    15ec:	92 95       	swap	r25
    15ee:	96 95       	lsr	r25
    15f0:	96 95       	lsr	r25
    15f2:	93 70       	andi	r25, 0x03	; 3
    15f4:	80 93 f8 02 	sts	0x02F8, r24
    15f8:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    15fa:	2c a1       	lds	r18, 0x4c
    15fc:	8d a1       	lds	r24, 0x4d
    15fe:	98 2f       	mov	r25, r24
    1600:	93 70       	andi	r25, 0x03	; 3
    1602:	20 93 fa 02 	sts	0x02FA, r18
    1606:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1608:	98 2f       	mov	r25, r24
    160a:	96 95       	lsr	r25
    160c:	96 95       	lsr	r25
    160e:	8e a1       	lds	r24, 0x4e
    1610:	28 2f       	mov	r18, r24
    1612:	22 95       	swap	r18
    1614:	22 0f       	add	r18, r18
    1616:	22 0f       	add	r18, r18
    1618:	20 7c       	andi	r18, 0xC0	; 192
    161a:	29 2b       	or	r18, r25
    161c:	86 95       	lsr	r24
    161e:	86 95       	lsr	r24
    1620:	98 2f       	mov	r25, r24
    1622:	93 70       	andi	r25, 0x03	; 3
    1624:	20 93 fc 02 	sts	0x02FC, r18
    1628:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    162a:	7f a1       	lds	r23, 0x4f
    162c:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    1630:	68 a5       	lds	r22, 0x68
    1632:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    1636:	89 a5       	lds	r24, 0x69
    1638:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    163c:	9a a5       	lds	r25, 0x6a
    163e:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    1642:	1b a5       	lds	r17, 0x6b
    1644:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1648:	de 01       	movw	r26, r28
    164a:	9c 96       	adiw	r26, 0x2c	; 44
    164c:	ef ef       	ldi	r30, 0xFF	; 255
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	28 e0       	ldi	r18, 0x08	; 8
    1652:	01 90       	ld	r0, Z+
    1654:	0d 92       	st	X+, r0
    1656:	21 50       	subi	r18, 0x01	; 1
    1658:	e1 f7       	brne	.-8      	; 0x1652 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    165a:	e9 2f       	mov	r30, r25
    165c:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	9f 01       	movw	r18, r30
    1662:	22 0f       	add	r18, r18
    1664:	33 1f       	adc	r19, r19
    1666:	22 0f       	add	r18, r18
    1668:	33 1f       	adc	r19, r19
    166a:	a9 01       	movw	r20, r18
    166c:	44 0f       	add	r20, r20
    166e:	55 1f       	adc	r21, r21
    1670:	44 0f       	add	r20, r20
    1672:	55 1f       	adc	r21, r21
    1674:	44 0f       	add	r20, r20
    1676:	55 1f       	adc	r21, r21
    1678:	42 1b       	sub	r20, r18
    167a:	53 0b       	sbc	r21, r19
    167c:	4e 0f       	add	r20, r30
    167e:	5f 1f       	adc	r21, r31
    1680:	55 95       	asr	r21
    1682:	47 95       	ror	r20
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	55 95       	asr	r21
    168a:	47 95       	ror	r20
    168c:	55 95       	asr	r21
    168e:	47 95       	ror	r20
    1690:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1692:	fe 01       	movw	r30, r28
    1694:	e4 0f       	add	r30, r20
    1696:	f1 1d       	adc	r31, r1
    1698:	24 a5       	lds	r18, 0x64
    169a:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    169e:	de 01       	movw	r26, r28
    16a0:	d4 96       	adiw	r26, 0x34	; 52
    16a2:	e7 e0       	ldi	r30, 0x07	; 7
    16a4:	f2 e0       	ldi	r31, 0x02	; 2
    16a6:	28 e0       	ldi	r18, 0x08	; 8
    16a8:	01 90       	ld	r0, Z+
    16aa:	0d 92       	st	X+, r0
    16ac:	21 50       	subi	r18, 0x01	; 1
    16ae:	e1 f7       	brne	.-8      	; 0x16a8 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    16b0:	29 2f       	mov	r18, r25
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	20 7e       	andi	r18, 0xE0	; 224
    16b6:	30 70       	andi	r19, 0x00	; 0
    16b8:	35 95       	asr	r19
    16ba:	27 95       	ror	r18
    16bc:	35 95       	asr	r19
    16be:	27 95       	ror	r18
    16c0:	35 95       	asr	r19
    16c2:	27 95       	ror	r18
    16c4:	83 70       	andi	r24, 0x03	; 3
    16c6:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    16c8:	42 2f       	mov	r20, r18
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	ca 01       	movw	r24, r20
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	9c 01       	movw	r18, r24
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	28 1b       	sub	r18, r24
    16e6:	39 0b       	sbc	r19, r25
    16e8:	42 0f       	add	r20, r18
    16ea:	53 1f       	adc	r21, r19
    16ec:	ca 01       	movw	r24, r20
    16ee:	95 95       	asr	r25
    16f0:	87 95       	ror	r24
    16f2:	95 95       	asr	r25
    16f4:	87 95       	ror	r24
    16f6:	95 95       	asr	r25
    16f8:	87 95       	ror	r24
    16fa:	95 95       	asr	r25
    16fc:	87 95       	ror	r24
    16fe:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    1700:	fe 01       	movw	r30, r28
    1702:	e8 0f       	add	r30, r24
    1704:	f1 1d       	adc	r31, r1
    1706:	84 a9       	sts	0x44, r24
    1708:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    170c:	de 01       	movw	r26, r28
    170e:	dc 96       	adiw	r26, 0x3c	; 60
    1710:	ef e0       	ldi	r30, 0x0F	; 15
    1712:	f2 e0       	ldi	r31, 0x02	; 2
    1714:	88 e0       	ldi	r24, 0x08	; 8
    1716:	01 90       	ld	r0, Z+
    1718:	0d 92       	st	X+, r0
    171a:	81 50       	subi	r24, 0x01	; 1
    171c:	e1 f7       	brne	.-8      	; 0x1716 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    171e:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    1720:	46 2f       	mov	r20, r22
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	ca 01       	movw	r24, r20
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	9c 01       	movw	r18, r24
    1730:	22 0f       	add	r18, r18
    1732:	33 1f       	adc	r19, r19
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	28 1b       	sub	r18, r24
    173e:	39 0b       	sbc	r19, r25
    1740:	42 0f       	add	r20, r18
    1742:	53 1f       	adc	r21, r19
    1744:	ca 01       	movw	r24, r20
    1746:	95 95       	asr	r25
    1748:	87 95       	ror	r24
    174a:	95 95       	asr	r25
    174c:	87 95       	ror	r24
    174e:	95 95       	asr	r25
    1750:	87 95       	ror	r24
    1752:	95 95       	asr	r25
    1754:	87 95       	ror	r24
    1756:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1758:	fe 01       	movw	r30, r28
    175a:	e8 0f       	add	r30, r24
    175c:	f1 1d       	adc	r31, r1
    175e:	84 ad       	sts	0x64, r24
    1760:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1764:	21 2f       	mov	r18, r17
    1766:	26 95       	lsr	r18
    1768:	27 95       	ror	r18
    176a:	22 27       	eor	r18, r18
    176c:	27 95       	ror	r18
    176e:	81 2f       	mov	r24, r17
    1770:	81 70       	andi	r24, 0x01	; 1
    1772:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1774:	81 2f       	mov	r24, r17
    1776:	86 95       	lsr	r24
    1778:	86 95       	lsr	r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	81 70       	andi	r24, 0x01	; 1
    177e:	90 70       	andi	r25, 0x00	; 0
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1788:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    178a:	81 2f       	mov	r24, r17
    178c:	86 95       	lsr	r24
    178e:	86 95       	lsr	r24
    1790:	86 95       	lsr	r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	81 70       	andi	r24, 0x01	; 1
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    179c:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    179e:	81 2f       	mov	r24, r17
    17a0:	82 95       	swap	r24
    17a2:	8f 70       	andi	r24, 0x0F	; 15
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	81 70       	andi	r24, 0x01	; 1
    17a8:	90 70       	andi	r25, 0x00	; 0
    17aa:	82 95       	swap	r24
    17ac:	92 95       	swap	r25
    17ae:	90 7f       	andi	r25, 0xF0	; 240
    17b0:	98 27       	eor	r25, r24
    17b2:	80 7f       	andi	r24, 0xF0	; 240
    17b4:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17b6:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    17b8:	81 2f       	mov	r24, r17
    17ba:	82 95       	swap	r24
    17bc:	86 95       	lsr	r24
    17be:	87 70       	andi	r24, 0x07	; 7
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	81 70       	andi	r24, 0x01	; 1
    17c4:	90 70       	andi	r25, 0x00	; 0
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	82 95       	swap	r24
    17cc:	92 95       	swap	r25
    17ce:	90 7f       	andi	r25, 0xF0	; 240
    17d0:	98 27       	eor	r25, r24
    17d2:	80 7f       	andi	r24, 0xF0	; 240
    17d4:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17d6:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    17d8:	81 2f       	mov	r24, r17
    17da:	82 95       	swap	r24
    17dc:	86 95       	lsr	r24
    17de:	86 95       	lsr	r24
    17e0:	83 70       	andi	r24, 0x03	; 3
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	90 70       	andi	r25, 0x00	; 0
    17e8:	00 24       	eor	r0, r0
    17ea:	96 95       	lsr	r25
    17ec:	87 95       	ror	r24
    17ee:	07 94       	ror	r0
    17f0:	96 95       	lsr	r25
    17f2:	87 95       	ror	r24
    17f4:	07 94       	ror	r0
    17f6:	98 2f       	mov	r25, r24
    17f8:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17fa:	82 2b       	or	r24, r18
    17fc:	80 93 7c 03 	sts	0x037C, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    1800:	87 2f       	mov	r24, r23
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	81 70       	andi	r24, 0x01	; 1
    1806:	90 70       	andi	r25, 0x00	; 0
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1814:	90 91 7e 03 	lds	r25, 0x037E
    1818:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    181a:	89 2b       	or	r24, r25
    181c:	11 1f       	adc	r17, r17
    181e:	11 27       	eor	r17, r17
    1820:	11 1f       	adc	r17, r17
    1822:	11 0f       	add	r17, r17
    1824:	11 0f       	add	r17, r17
    1826:	81 2b       	or	r24, r17
    1828:	80 93 7e 03 	sts	0x037E, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    182c:	0e 94 2c 07 	call	0xe58	; 0xe58 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    1830:	80 91 7e 03 	lds	r24, 0x037E
    1834:	8f 77       	andi	r24, 0x7F	; 127
    1836:	80 93 7e 03 	sts	0x037E, r24
	
	current_patch.mode = MEMORY;
    183a:	10 92 07 03 	sts	0x0307, r1
	
}
    183e:	cd 5b       	subi	r28, 0xBD	; 189
    1840:	df 4f       	sbci	r29, 0xFF	; 255
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	08 95       	ret

00001854 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1854:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    1858:	60 3f       	cpi	r22, 0xF0	; 240
    185a:	11 f4       	brne	.+4      	; 0x1860 <transpose_note+0xc>
    185c:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    1860:	29 2f       	mov	r18, r25
    1862:	22 0f       	add	r18, r18
    1864:	92 0f       	add	r25, r18
    1866:	99 0f       	add	r25, r25
    1868:	99 0f       	add	r25, r25
    186a:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    186c:	89 38       	cpi	r24, 0x89	; 137
    186e:	08 f0       	brcs	.+2      	; 0x1872 <transpose_note+0x1e>
    1870:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1872:	08 95       	ret

00001874 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1874:	80 91 7c 03 	lds	r24, 0x037C
    1878:	98 2f       	mov	r25, r24
    187a:	96 95       	lsr	r25
    187c:	96 95       	lsr	r25
    187e:	96 95       	lsr	r25
    1880:	90 ff       	sbrs	r25, 0
    1882:	0e c0       	rjmp	.+28     	; 0x18a0 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1884:	90 91 08 03 	lds	r25, 0x0308
    1888:	9f 5f       	subi	r25, 0xFF	; 255
    188a:	90 93 08 03 	sts	0x0308, r25
    188e:	95 30       	cpi	r25, 0x05	; 5
    1890:	19 f4       	brne	.+6      	; 0x1898 <update_octave_range+0x24>
    1892:	94 e0       	ldi	r25, 0x04	; 4
    1894:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1898:	98 e0       	ldi	r25, 0x08	; 8
    189a:	89 27       	eor	r24, r25
    189c:	80 93 7c 03 	sts	0x037C, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    18a0:	80 91 7d 03 	lds	r24, 0x037D
    18a4:	98 2f       	mov	r25, r24
    18a6:	96 95       	lsr	r25
    18a8:	96 95       	lsr	r25
    18aa:	96 95       	lsr	r25
    18ac:	90 ff       	sbrs	r25, 0
    18ae:	0b c0       	rjmp	.+22     	; 0x18c6 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    18b0:	90 91 08 03 	lds	r25, 0x0308
    18b4:	99 23       	and	r25, r25
    18b6:	19 f0       	breq	.+6      	; 0x18be <update_octave_range+0x4a>
    18b8:	91 50       	subi	r25, 0x01	; 1
    18ba:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    18be:	98 e0       	ldi	r25, 0x08	; 8
    18c0:	89 27       	eor	r24, r25
    18c2:	80 93 7d 03 	sts	0x037D, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    18c6:	80 91 08 03 	lds	r24, 0x0308
    18ca:	e1 e2       	ldi	r30, 0x21	; 33
    18cc:	f2 e0       	ldi	r31, 0x02	; 2
    18ce:	e8 0f       	add	r30, r24
    18d0:	f1 1d       	adc	r31, r1
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	00 80       	ld	r0, Z
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <update_octave_range+0x6a>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <update_octave_range+0x66>
    18e2:	58 2f       	mov	r21, r24
    18e4:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    18e8:	90 91 7d 03 	lds	r25, 0x037D
    18ec:	29 2f       	mov	r18, r25
    18ee:	26 95       	lsr	r18
    18f0:	26 95       	lsr	r18
    18f2:	20 ff       	sbrs	r18, 0
    18f4:	0e c0       	rjmp	.+28     	; 0x1912 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    18f6:	80 91 09 03 	lds	r24, 0x0309
    18fa:	8f 5f       	subi	r24, 0xFF	; 255
    18fc:	80 93 09 03 	sts	0x0309, r24
    1900:	85 30       	cpi	r24, 0x05	; 5
    1902:	19 f4       	brne	.+6      	; 0x190a <update_octave_range+0x96>
    1904:	84 e0       	ldi	r24, 0x04	; 4
    1906:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    190a:	84 e0       	ldi	r24, 0x04	; 4
    190c:	98 27       	eor	r25, r24
    190e:	90 93 7d 03 	sts	0x037D, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1912:	90 91 7d 03 	lds	r25, 0x037D
    1916:	29 2f       	mov	r18, r25
    1918:	26 95       	lsr	r18
    191a:	20 ff       	sbrs	r18, 0
    191c:	0b c0       	rjmp	.+22     	; 0x1934 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    191e:	80 91 09 03 	lds	r24, 0x0309
    1922:	88 23       	and	r24, r24
    1924:	19 f0       	breq	.+6      	; 0x192c <update_octave_range+0xb8>
    1926:	81 50       	subi	r24, 0x01	; 1
    1928:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	98 27       	eor	r25, r24
    1930:	90 93 7d 03 	sts	0x037D, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1934:	40 91 00 03 	lds	r20, 0x0300
    1938:	4c 7f       	andi	r20, 0xFC	; 252
    193a:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    193e:	90 91 09 03 	lds	r25, 0x0309
    1942:	93 30       	cpi	r25, 0x03	; 3
    1944:	88 f0       	brcs	.+34     	; 0x1968 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1946:	ec e1       	ldi	r30, 0x1C	; 28
    1948:	f2 e0       	ldi	r31, 0x02	; 2
    194a:	e9 0f       	add	r30, r25
    194c:	f1 1d       	adc	r31, r1
    194e:	21 e0       	ldi	r18, 0x01	; 1
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	c9 01       	movw	r24, r18
    1954:	00 80       	ld	r0, Z
    1956:	02 c0       	rjmp	.+4      	; 0x195c <update_octave_range+0xe8>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <update_octave_range+0xe4>
    1960:	84 2b       	or	r24, r20
    1962:	80 93 00 03 	sts	0x0300, r24
    1966:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1968:	ec e1       	ldi	r30, 0x1C	; 28
    196a:	f2 e0       	ldi	r31, 0x02	; 2
    196c:	e9 0f       	add	r30, r25
    196e:	f1 1d       	adc	r31, r1
    1970:	21 e0       	ldi	r18, 0x01	; 1
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	c9 01       	movw	r24, r18
    1976:	00 80       	ld	r0, Z
    1978:	02 c0       	rjmp	.+4      	; 0x197e <update_octave_range+0x10a>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <update_octave_range+0x106>
    1982:	85 2b       	or	r24, r21
    1984:	80 93 01 03 	sts	0x0301, r24
    1988:	08 95       	ret

0000198a <update_arp_range>:
	
}



void update_arp_range(void) {}
    198a:	08 95       	ret

0000198c <update_arp_mode>:
void update_arp_mode(void) {}
    198c:	08 95       	ret

0000198e <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    198e:	80 91 7d 03 	lds	r24, 0x037D
    1992:	88 23       	and	r24, r24
    1994:	64 f4       	brge	.+24     	; 0x19ae <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1996:	80 58       	subi	r24, 0x80	; 128
    1998:	80 93 7d 03 	sts	0x037D, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    199c:	80 91 0a 03 	lds	r24, 0x030A
    19a0:	8f 5f       	subi	r24, 0xFF	; 255
    19a2:	80 93 0a 03 	sts	0x030A, r24
    19a6:	85 30       	cpi	r24, 0x05	; 5
    19a8:	11 f4       	brne	.+4      	; 0x19ae <update_lfo_shape+0x20>
    19aa:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    19ae:	e0 91 0a 03 	lds	r30, 0x030A
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	ee 0f       	add	r30, r30
    19b6:	ff 1f       	adc	r31, r31
    19b8:	ea 5d       	subi	r30, 0xDA	; 218
    19ba:	fd 4f       	sbci	r31, 0xFD	; 253
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	01 80       	ldd	r0, Z+1	; 0x01
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <update_lfo_shape+0x3a>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    19cc:	90 91 ff 02 	lds	r25, 0x02FF
    19d0:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    19d2:	89 2b       	or	r24, r25
    19d4:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    19d8:	80 81       	ld	r24, Z
    19da:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    19dc:	ed ed       	ldi	r30, 0xDD	; 221
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	80 62       	ori	r24, 0x20	; 32
    19e4:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    19e6:	80 81       	ld	r24, Z
    19e8:	8f 7d       	andi	r24, 0xDF	; 223
    19ea:	80 83       	st	Z, r24
	
}		
    19ec:	08 95       	ret

000019ee <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    19ee:	80 91 7d 03 	lds	r24, 0x037D
    19f2:	80 ff       	sbrs	r24, 0
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	89 27       	eor	r24, r25
    19fa:	80 93 7d 03 	sts	0x037D, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    19fe:	80 91 0b 03 	lds	r24, 0x030B
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	80 93 0b 03 	sts	0x030B, r24
    1a08:	85 30       	cpi	r24, 0x05	; 5
    1a0a:	11 f4       	brne	.+4      	; 0x1a10 <update_lfo_sync+0x22>
    1a0c:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1a10:	10 92 89 03 	sts	0x0389, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1a14:	60 91 ff 02 	lds	r22, 0x02FF
    1a18:	60 7f       	andi	r22, 0xF0	; 240
    1a1a:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1a1e:	20 91 0b 03 	lds	r18, 0x030B
    1a22:	22 23       	and	r18, r18
    1a24:	71 f0       	breq	.+28     	; 0x1a42 <update_lfo_sync+0x54>
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	21 50       	subi	r18, 0x01	; 1
    1a2a:	30 40       	sbci	r19, 0x00	; 0
    1a2c:	41 e0       	ldi	r20, 0x01	; 1
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	ca 01       	movw	r24, r20
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <update_lfo_sync+0x4a>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	2a 95       	dec	r18
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <update_lfo_sync+0x46>
    1a3c:	86 2b       	or	r24, r22
    1a3e:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1a42:	80 91 ff 02 	lds	r24, 0x02FF
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	8f 70       	andi	r24, 0x0F	; 15
    1a4a:	90 70       	andi	r25, 0x00	; 0
    1a4c:	82 30       	cpi	r24, 0x02	; 2
    1a4e:	91 05       	cpc	r25, r1
    1a50:	89 f0       	breq	.+34     	; 0x1a74 <update_lfo_sync+0x86>
    1a52:	83 30       	cpi	r24, 0x03	; 3
    1a54:	91 05       	cpc	r25, r1
    1a56:	24 f4       	brge	.+8      	; 0x1a60 <update_lfo_sync+0x72>
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	b1 f4       	brne	.+44     	; 0x1a8a <update_lfo_sync+0x9c>
    1a5e:	07 c0       	rjmp	.+14     	; 0x1a6e <update_lfo_sync+0x80>
    1a60:	84 30       	cpi	r24, 0x04	; 4
    1a62:	91 05       	cpc	r25, r1
    1a64:	59 f0       	breq	.+22     	; 0x1a7c <update_lfo_sync+0x8e>
    1a66:	88 30       	cpi	r24, 0x08	; 8
    1a68:	91 05       	cpc	r25, r1
    1a6a:	79 f4       	brne	.+30     	; 0x1a8a <update_lfo_sync+0x9c>
    1a6c:	0b c0       	rjmp	.+22     	; 0x1a84 <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode
    1a6e:	10 92 88 03 	sts	0x0388, r1
			
			break;
    1a72:	08 95       	ret
			
		case 0b0010:
			midi_clock.divider = 24; //1:4
    1a74:	88 e1       	ldi	r24, 0x18	; 24
    1a76:	80 93 88 03 	sts	0x0388, r24
			break;
    1a7a:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1a7c:	8c e0       	ldi	r24, 0x0C	; 12
    1a7e:	80 93 88 03 	sts	0x0388, r24
			break;
    1a82:	08 95       	ret
			
		case 0b1000:
			 midi_clock.divider = 6; //1:16	 		
    1a84:	86 e0       	ldi	r24, 0x06	; 6
    1a86:	80 93 88 03 	sts	0x0388, r24
    1a8a:	08 95       	ret

00001a8c <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1a8c:	80 91 7d 03 	lds	r24, 0x037D
    1a90:	98 2f       	mov	r25, r24
    1a92:	92 95       	swap	r25
    1a94:	96 95       	lsr	r25
    1a96:	96 95       	lsr	r25
    1a98:	93 70       	andi	r25, 0x03	; 3
    1a9a:	90 ff       	sbrs	r25, 0
    1a9c:	0d c0       	rjmp	.+26     	; 0x1ab8 <update_arp_sync+0x2c>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1a9e:	90 e4       	ldi	r25, 0x40	; 64
    1aa0:	89 27       	eor	r24, r25
    1aa2:	80 93 7d 03 	sts	0x037D, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1aa6:	80 91 0c 03 	lds	r24, 0x030C
    1aaa:	8f 5f       	subi	r24, 0xFF	; 255
    1aac:	80 93 0c 03 	sts	0x030C, r24
    1ab0:	85 30       	cpi	r24, 0x05	; 5
    1ab2:	11 f4       	brne	.+4      	; 0x1ab8 <update_arp_sync+0x2c>
    1ab4:	10 92 0c 03 	sts	0x030C, r1
		//system_clock.ppqn_counter = 0; //reset counter
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1ab8:	60 91 00 03 	lds	r22, 0x0300
    1abc:	63 7c       	andi	r22, 0xC3	; 195
    1abe:	60 93 00 03 	sts	0x0300, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1ac2:	20 91 0c 03 	lds	r18, 0x030C
    1ac6:	22 23       	and	r18, r18
    1ac8:	71 f0       	breq	.+28     	; 0x1ae6 <update_arp_sync+0x5a>
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	2f 5f       	subi	r18, 0xFF	; 255
    1ace:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	ca 01       	movw	r24, r20
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <update_arp_sync+0x50>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	2a 95       	dec	r18
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <update_arp_sync+0x4c>
    1ae0:	86 2b       	or	r24, r22
    1ae2:	80 93 00 03 	sts	0x0300, r24
    1ae6:	08 95       	ret

00001ae8 <update_patch>:
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ae8:	90 91 7c 03 	lds	r25, 0x037C
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1aec:	80 91 7e 03 	lds	r24, 0x037E
    1af0:	86 95       	lsr	r24
    1af2:	86 95       	lsr	r24
    1af4:	68 2f       	mov	r22, r24
    1af6:	67 95       	ror	r22
    1af8:	66 27       	eor	r22, r22
    1afa:	67 95       	ror	r22
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1afc:	29 2f       	mov	r18, r25
    1afe:	21 70       	andi	r18, 0x01	; 1
    1b00:	26 2b       	or	r18, r22
    1b02:	69 2f       	mov	r22, r25
    1b04:	66 1f       	adc	r22, r22
    1b06:	66 27       	eor	r22, r22
    1b08:	66 1f       	adc	r22, r22
    1b0a:	66 0f       	add	r22, r22
    1b0c:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1b0e:	29 2f       	mov	r18, r25
    1b10:	26 95       	lsr	r18
    1b12:	26 95       	lsr	r18
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	21 70       	andi	r18, 0x01	; 1
    1b18:	30 70       	andi	r19, 0x00	; 0
    1b1a:	d9 01       	movw	r26, r18
    1b1c:	aa 0f       	add	r26, r26
    1b1e:	bb 1f       	adc	r27, r27
    1b20:	aa 0f       	add	r26, r26
    1b22:	bb 1f       	adc	r27, r27
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1b24:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1b26:	a9 2f       	mov	r26, r25
    1b28:	a6 95       	lsr	r26
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	a1 70       	andi	r26, 0x01	; 1
    1b2e:	b0 70       	andi	r27, 0x00	; 0
    1b30:	fd 01       	movw	r30, r26
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	ee 0f       	add	r30, r30
    1b38:	ff 1f       	adc	r31, r31
    1b3a:	ee 0f       	add	r30, r30
    1b3c:	ff 1f       	adc	r31, r31
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1b3e:	a6 2f       	mov	r26, r22
    1b40:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1b42:	e9 2f       	mov	r30, r25
    1b44:	e2 95       	swap	r30
    1b46:	ef 70       	andi	r30, 0x0F	; 15
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	e1 70       	andi	r30, 0x01	; 1
    1b4c:	f0 70       	andi	r31, 0x00	; 0
    1b4e:	bf 01       	movw	r22, r30
    1b50:	62 95       	swap	r22
    1b52:	72 95       	swap	r23
    1b54:	70 7f       	andi	r23, 0xF0	; 240
    1b56:	76 27       	eor	r23, r22
    1b58:	60 7f       	andi	r22, 0xF0	; 240
    1b5a:	76 27       	eor	r23, r22
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1b5c:	ea 2f       	mov	r30, r26
    1b5e:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1b60:	69 2f       	mov	r22, r25
    1b62:	62 95       	swap	r22
    1b64:	66 95       	lsr	r22
    1b66:	67 70       	andi	r22, 0x07	; 7
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	61 70       	andi	r22, 0x01	; 1
    1b6c:	70 70       	andi	r23, 0x00	; 0
    1b6e:	ab 01       	movw	r20, r22
    1b70:	44 0f       	add	r20, r20
    1b72:	55 1f       	adc	r21, r21
    1b74:	42 95       	swap	r20
    1b76:	52 95       	swap	r21
    1b78:	50 7f       	andi	r21, 0xF0	; 240
    1b7a:	54 27       	eor	r21, r20
    1b7c:	40 7f       	andi	r20, 0xF0	; 240
    1b7e:	54 27       	eor	r21, r20
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1b80:	6e 2f       	mov	r22, r30
    1b82:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1b84:	49 2f       	mov	r20, r25
    1b86:	42 95       	swap	r20
    1b88:	46 95       	lsr	r20
    1b8a:	46 95       	lsr	r20
    1b8c:	43 70       	andi	r20, 0x03	; 3
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	41 70       	andi	r20, 0x01	; 1
    1b92:	50 70       	andi	r21, 0x00	; 0
    1b94:	9a 01       	movw	r18, r20
    1b96:	00 24       	eor	r0, r0
    1b98:	36 95       	lsr	r19
    1b9a:	27 95       	ror	r18
    1b9c:	07 94       	ror	r0
    1b9e:	36 95       	lsr	r19
    1ba0:	27 95       	ror	r18
    1ba2:	07 94       	ror	r0
    1ba4:	32 2f       	mov	r19, r18
    1ba6:	20 2d       	mov	r18, r0
	



	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ba8:	26 2b       	or	r18, r22
    1baa:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1bae:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1bb0:	81 95       	neg	r24
    1bb2:	89 27       	eor	r24, r25
    1bb4:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1bb6:	89 27       	eor	r24, r25
    1bb8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1bbc:	ed ed       	ldi	r30, 0xDD	; 221
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1bc2:	90 91 7e 03 	lds	r25, 0x037E
    1bc6:	96 95       	lsr	r25
    1bc8:	96 95       	lsr	r25
    1bca:	96 95       	lsr	r25
    1bcc:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1bce:	91 95       	neg	r25
    1bd0:	80 81       	ld	r24, Z
    1bd2:	89 27       	eor	r24, r25
    1bd4:	80 71       	andi	r24, 0x10	; 16
    1bd6:	82 27       	eor	r24, r18
    1bd8:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1bda:	ee ef       	ldi	r30, 0xFE	; 254
    1bdc:	f2 e0       	ldi	r31, 0x02	; 2
    1bde:	80 81       	ld	r24, Z
    1be0:	98 27       	eor	r25, r24
    1be2:	91 70       	andi	r25, 0x01	; 1
    1be4:	89 27       	eor	r24, r25
    1be6:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1be8:	0e 94 3a 0c 	call	0x1874	; 0x1874 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1bec:	0e 94 c7 0c 	call	0x198e	; 0x198e <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1bf0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <update_lfo_sync>

	update_arp_sync();
    1bf4:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <update_arp_sync>
	//update_patch_programmer();		
				

		
	
}
    1bf8:	08 95       	ret

00001bfa <update_patch_programmer>:


void update_arp_range(void) {}
void update_arp_mode(void) {}

void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1bfe:	90 91 07 03 	lds	r25, 0x0307
    1c02:	95 30       	cpi	r25, 0x05	; 5
    1c04:	01 f5       	brne	.+64     	; 0x1c46 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1c06:	87 e0       	ldi	r24, 0x07	; 7
    1c08:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1c0a:	cd ed       	ldi	r28, 0xDD	; 221
    1c0c:	d0 e0       	ldi	r29, 0x00	; 0
    1c0e:	88 81       	ld	r24, Y
    1c10:	80 62       	ori	r24, 0x20	; 32
    1c12:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1c14:	88 81       	ld	r24, Y
    1c16:	8f 7d       	andi	r24, 0xDF	; 223
    1c18:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1c1a:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1c1c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1c20:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1c22:	88 81       	ld	r24, Y
    1c24:	80 62       	ori	r24, 0x20	; 32
    1c26:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1c28:	88 81       	ld	r24, Y
    1c2a:	8f 7d       	andi	r24, 0xDF	; 223
    1c2c:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1c2e:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1c30:	80 91 ff 02 	lds	r24, 0x02FF
    1c34:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1c36:	80 68       	ori	r24, 0x80	; 128
    1c38:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1c3c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setup_system_clock>

		current_patch.mode = MEMORY;
    1c40:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1c44:	63 c0       	rjmp	.+198    	; 0x1d0c <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1c46:	80 91 7e 03 	lds	r24, 0x037E
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	22 95       	swap	r18
    1c4e:	26 95       	lsr	r18
    1c50:	26 95       	lsr	r18
    1c52:	23 70       	andi	r18, 0x03	; 3
    1c54:	20 ff       	sbrs	r18, 0
    1c56:	15 c0       	rjmp	.+42     	; 0x1c82 <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1c58:	20 e4       	ldi	r18, 0x40	; 64
    1c5a:	82 27       	eor	r24, r18
    1c5c:	80 93 7e 03 	sts	0x037E, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1c60:	80 91 03 03 	lds	r24, 0x0303
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
    1c66:	80 93 03 03 	sts	0x0303, r24
    1c6a:	85 32       	cpi	r24, 0x25	; 37
    1c6c:	21 f4       	brne	.+8      	; 0x1c76 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1c6e:	84 e2       	ldi	r24, 0x24	; 36
    1c70:	80 93 03 03 	sts	0x0303, r24
    1c74:	06 c0       	rjmp	.+12     	; 0x1c82 <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1c76:	93 30       	cpi	r25, 0x03	; 3
    1c78:	21 f0       	breq	.+8      	; 0x1c82 <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1c7a:	0e 94 4a 09 	call	0x1294	; 0x1294 <load_patch>
			update_patch();
    1c7e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1c82:	80 91 7e 03 	lds	r24, 0x037E
    1c86:	98 2f       	mov	r25, r24
    1c88:	92 95       	swap	r25
    1c8a:	96 95       	lsr	r25
    1c8c:	97 70       	andi	r25, 0x07	; 7
    1c8e:	90 ff       	sbrs	r25, 0
    1c90:	15 c0       	rjmp	.+42     	; 0x1cbc <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1c92:	90 e2       	ldi	r25, 0x20	; 32
    1c94:	89 27       	eor	r24, r25
    1c96:	80 93 7e 03 	sts	0x037E, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1c9a:	80 91 03 03 	lds	r24, 0x0303
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	19 f0       	breq	.+6      	; 0x1ca8 <update_patch_programmer+0xae>
    1ca2:	81 50       	subi	r24, 0x01	; 1
    1ca4:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1ca8:	80 91 07 03 	lds	r24, 0x0307
    1cac:	83 30       	cpi	r24, 0x03	; 3
    1cae:	31 f0       	breq	.+12     	; 0x1cbc <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    1cb0:	80 91 03 03 	lds	r24, 0x0303
    1cb4:	0e 94 4a 09 	call	0x1294	; 0x1294 <load_patch>
			update_patch();
    1cb8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1cbc:	80 91 7e 03 	lds	r24, 0x037E
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	92 95       	swap	r25
    1cc4:	9f 70       	andi	r25, 0x0F	; 15
    1cc6:	90 ff       	sbrs	r25, 0
    1cc8:	15 c0       	rjmp	.+42     	; 0x1cf4 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1cca:	90 e1       	ldi	r25, 0x10	; 16
    1ccc:	89 27       	eor	r24, r25
    1cce:	80 93 7e 03 	sts	0x037E, r24
		if (current_patch.mode != WRITE) {
    1cd2:	90 91 07 03 	lds	r25, 0x0307
    1cd6:	93 30       	cpi	r25, 0x03	; 3
    1cd8:	49 f0       	breq	.+18     	; 0x1cec <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1cda:	8f 77       	andi	r24, 0x7F	; 127
    1cdc:	80 93 7e 03 	sts	0x037E, r24
			current_patch.mode = WRITE;
    1ce0:	83 e0       	ldi	r24, 0x03	; 3
    1ce2:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1ce6:	0e 94 2c 07 	call	0xe58	; 0xe58 <lock_pots>
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1cec:	80 91 03 03 	lds	r24, 0x0303
    1cf0:	0e 94 57 07 	call	0xeae	; 0xeae <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1cf4:	80 91 7e 03 	lds	r24, 0x037E
    1cf8:	88 23       	and	r24, r24
    1cfa:	44 f4       	brge	.+16     	; 0x1d0c <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1cfc:	80 68       	ori	r24, 0x80	; 128
    1cfe:	80 93 7e 03 	sts	0x037E, r24
		current_patch.mode = MANUAL;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    1d08:	0e 94 46 07 	call	0xe8c	; 0xe8c <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	08 95       	ret

00001d12 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1d12:	88 ed       	ldi	r24, 0xD8	; 216
    1d14:	91 e0       	ldi	r25, 0x01	; 1
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1d1e:	81 ee       	ldi	r24, 0xE1	; 225
    1d20:	91 e0       	ldi	r25, 0x01	; 1
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1d2a:	82 ee       	ldi	r24, 0xE2	; 226
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1d36:	82 eb       	ldi	r24, 0xB2	; 178
    1d38:	92 e0       	ldi	r25, 0x02	; 2
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1d42:	8a ed       	ldi	r24, 0xDA	; 218
    1d44:	91 e0       	ldi	r25, 0x01	; 1
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1d4e:	8f ed       	ldi	r24, 0xDF	; 223
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	70 e0       	ldi	r23, 0x00	; 0
    1d56:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1d5a:	80 ee       	ldi	r24, 0xE0	; 224
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1d66:	81 ed       	ldi	r24, 0xD1	; 209
    1d68:	91 e0       	ldi	r25, 0x01	; 1
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1d72:	86 ed       	ldi	r24, 0xD6	; 214
    1d74:	91 e0       	ldi	r25, 0x01	; 1
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1d7e:	82 ed       	ldi	r24, 0xD2	; 210
    1d80:	91 e0       	ldi	r25, 0x01	; 1
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1d8a:	83 ed       	ldi	r24, 0xD3	; 211
    1d8c:	91 e0       	ldi	r25, 0x01	; 1
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1d96:	84 ed       	ldi	r24, 0xD4	; 212
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	6f ef       	ldi	r22, 0xFF	; 255
    1d9c:	7f e3       	ldi	r23, 0x3F	; 63
    1d9e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1da2:	85 ed       	ldi	r24, 0xD5	; 213
    1da4:	91 e0       	ldi	r25, 0x01	; 1
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1dae:	89 ed       	ldi	r24, 0xD9	; 217
    1db0:	91 e0       	ldi	r25, 0x01	; 1
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1dba:	8e ec       	ldi	r24, 0xCE	; 206
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	60 e0       	ldi	r22, 0x00	; 0
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1dc6:	8c ec       	ldi	r24, 0xCC	; 204
    1dc8:	91 e0       	ldi	r25, 0x01	; 1
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1dd2:	8a ec       	ldi	r24, 0xCA	; 202
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	6f ef       	ldi	r22, 0xFF	; 255
    1dd8:	7f e3       	ldi	r23, 0x3F	; 63
    1dda:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1dde:	88 ec       	ldi	r24, 0xC8	; 200
    1de0:	91 e0       	ldi	r25, 0x01	; 1
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1dea:	80 ed       	ldi	r24, 0xD0	; 208
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1df6:	83 ee       	ldi	r24, 0xE3	; 227
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1e02:	84 ee       	ldi	r24, 0xE4	; 228
    1e04:	91 e0       	ldi	r25, 0x01	; 1
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
}	
    1e0e:	08 95       	ret

00001e10 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1e10:	2f 92       	push	r2
    1e12:	3f 92       	push	r3
    1e14:	4f 92       	push	r4
    1e16:	5f 92       	push	r5
    1e18:	6f 92       	push	r6
    1e1a:	7f 92       	push	r7
    1e1c:	8f 92       	push	r8
    1e1e:	9f 92       	push	r9
    1e20:	af 92       	push	r10
    1e22:	bf 92       	push	r11
    1e24:	cf 92       	push	r12
    1e26:	df 92       	push	r13
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	2c 97       	sbiw	r28, 0x0c	; 12
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	08 2f       	mov	r16, r24
    1e46:	78 87       	std	Y+8, r23	; 0x08
    1e48:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1e4a:	80 91 79 03 	lds	r24, 0x0379
    1e4e:	83 60       	ori	r24, 0x03	; 3
    1e50:	80 93 79 03 	sts	0x0379, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1e54:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1e58:	10 92 78 03 	sts	0x0378, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1e5c:	0f 30       	cpi	r16, 0x0F	; 15
    1e5e:	e1 f4       	brne	.+56     	; 0x1e98 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1e60:	0f 2e       	mov	r0, r31
    1e62:	f6 ee       	ldi	r31, 0xE6	; 230
    1e64:	4f 2e       	mov	r4, r31
    1e66:	f1 e0       	ldi	r31, 0x01	; 1
    1e68:	5f 2e       	mov	r5, r31
    1e6a:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1e6c:	0f 2e       	mov	r0, r31
    1e6e:	fe ed       	ldi	r31, 0xDE	; 222
    1e70:	2f 2e       	mov	r2, r31
    1e72:	f1 e0       	ldi	r31, 0x01	; 1
    1e74:	3f 2e       	mov	r3, r31
    1e76:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1e78:	23 ee       	ldi	r18, 0xE3	; 227
    1e7a:	31 e0       	ldi	r19, 0x01	; 1
    1e7c:	3a 83       	std	Y+2, r19	; 0x02
    1e7e:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1e80:	0f 2e       	mov	r0, r31
    1e82:	fc ed       	ldi	r31, 0xDC	; 220
    1e84:	8f 2e       	mov	r8, r31
    1e86:	f1 e0       	ldi	r31, 0x01	; 1
    1e88:	9f 2e       	mov	r9, r31
    1e8a:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1e8c:	82 e7       	ldi	r24, 0x72	; 114
    1e8e:	96 e0       	ldi	r25, 0x06	; 6
    1e90:	9a 87       	std	Y+10, r25	; 0x0a
    1e92:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	1b c0       	rjmp	.+54     	; 0x1ece <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1e98:	0f 2e       	mov	r0, r31
    1e9a:	f5 ee       	ldi	r31, 0xE5	; 229
    1e9c:	4f 2e       	mov	r4, r31
    1e9e:	f1 e0       	ldi	r31, 0x01	; 1
    1ea0:	5f 2e       	mov	r5, r31
    1ea2:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1ea4:	0f 2e       	mov	r0, r31
    1ea6:	f7 ed       	ldi	r31, 0xD7	; 215
    1ea8:	2f 2e       	mov	r2, r31
    1eaa:	f1 e0       	ldi	r31, 0x01	; 1
    1eac:	3f 2e       	mov	r3, r31
    1eae:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1eb0:	e4 ee       	ldi	r30, 0xE4	; 228
    1eb2:	f1 e0       	ldi	r31, 0x01	; 1
    1eb4:	fa 83       	std	Y+2, r31	; 0x02
    1eb6:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1eb8:	0f 2e       	mov	r0, r31
    1eba:	fd ed       	ldi	r31, 0xDD	; 221
    1ebc:	8f 2e       	mov	r8, r31
    1ebe:	f1 e0       	ldi	r31, 0x01	; 1
    1ec0:	9f 2e       	mov	r9, r31
    1ec2:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1ec4:	20 e7       	ldi	r18, 0x70	; 112
    1ec6:	36 e0       	ldi	r19, 0x06	; 6
    1ec8:	3a 87       	std	Y+10, r19	; 0x0a
    1eca:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1ecc:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1ece:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1ed0:	ed ed       	ldi	r30, 0xDD	; 221
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	80 64       	ori	r24, 0x40	; 64
    1ed8:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1eda:	80 81       	ld	r24, Z
    1edc:	8f 7b       	andi	r24, 0xBF	; 191
    1ede:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1ee0:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1ee2:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1ee4:	84 b5       	in	r24, 0x24	; 36
    1ee6:	8f 60       	ori	r24, 0x0F	; 15
    1ee8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1eee:	ee e6       	ldi	r30, 0x6E	; 110
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	90 81       	ld	r25, Z
    1ef4:	92 60       	ori	r25, 0x02	; 2
    1ef6:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1ef8:	80 93 7a 03 	sts	0x037A, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1efc:	8d e0       	ldi	r24, 0x0D	; 13
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1f04:	80 2f       	mov	r24, r16
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	8c 01       	movw	r16, r24
    1f0a:	0f 5f       	subi	r16, 0xFF	; 255
    1f0c:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1f0e:	0f 2e       	mov	r0, r31
    1f10:	f8 ed       	ldi	r31, 0xD8	; 216
    1f12:	ef 2e       	mov	r14, r31
    1f14:	f1 e0       	ldi	r31, 0x01	; 1
    1f16:	ff 2e       	mov	r15, r31
    1f18:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1f1a:	0f 2e       	mov	r0, r31
    1f1c:	f4 ed       	ldi	r31, 0xD4	; 212
    1f1e:	cf 2e       	mov	r12, r31
    1f20:	f1 e0       	ldi	r31, 0x01	; 1
    1f22:	df 2e       	mov	r13, r31
    1f24:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1f26:	0f 2e       	mov	r0, r31
    1f28:	fa ec       	ldi	r31, 0xCA	; 202
    1f2a:	af 2e       	mov	r10, r31
    1f2c:	f1 e0       	ldi	r31, 0x01	; 1
    1f2e:	bf 2e       	mov	r11, r31
    1f30:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1f32:	0f 2e       	mov	r0, r31
    1f34:	fb ec       	ldi	r31, 0xCB	; 203
    1f36:	6f 2e       	mov	r6, r31
    1f38:	f1 e0       	ldi	r31, 0x01	; 1
    1f3a:	7f 2e       	mov	r7, r31
    1f3c:	f0 2d       	mov	r31, r0
    1f3e:	e0 e0       	ldi	r30, 0x00	; 0
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	fc 87       	std	Y+12, r31	; 0x0c
    1f44:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1f46:	21 e0       	ldi	r18, 0x01	; 1
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	0b 80       	ldd	r0, Y+3	; 0x03
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <set_vco_init_cv+0x142>
    1f4e:	22 0f       	add	r18, r18
    1f50:	33 1f       	adc	r19, r19
    1f52:	0a 94       	dec	r0
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <set_vco_init_cv+0x13e>
    1f56:	3e 83       	std	Y+6, r19	; 0x06
    1f58:	2d 83       	std	Y+5, r18	; 0x05
    1f5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f5e:	82 2b       	or	r24, r18
    1f60:	93 2b       	or	r25, r19
    1f62:	9c 87       	std	Y+12, r25	; 0x0c
    1f64:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1f66:	c4 01       	movw	r24, r8
    1f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
		
		count_finished = FALSE;
    1f70:	10 92 78 03 	sts	0x0378, r1
		period_counter = 0;
    1f74:	10 92 7b 03 	sts	0x037B, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1f78:	8f e0       	ldi	r24, 0x0F	; 15
    1f7a:	e8 e1       	ldi	r30, 0x18	; 24
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	a8 95       	wdr
    1f84:	e0 93 60 00 	sts	0x0060, r30
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1f8e:	80 91 78 03 	lds	r24, 0x0378
    1f92:	88 23       	and	r24, r24
    1f94:	89 f5       	brne	.+98     	; 0x1ff8 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1f96:	c8 01       	movw	r24, r16
    1f98:	60 e0       	ldi	r22, 0x00	; 0
    1f9a:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1f9e:	c4 01       	movw	r24, r8
    1fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1fa8:	c1 01       	movw	r24, r2
    1faa:	6f ef       	ldi	r22, 0xFF	; 255
    1fac:	7f e3       	ldi	r23, 0x3F	; 63
    1fae:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1fb2:	c7 01       	movw	r24, r14
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1fbc:	c6 01       	movw	r24, r12
    1fbe:	6f ef       	ldi	r22, 0xFF	; 255
    1fc0:	7f e3       	ldi	r23, 0x3F	; 63
    1fc2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1fc6:	c5 01       	movw	r24, r10
    1fc8:	6f ef       	ldi	r22, 0xFF	; 255
    1fca:	7f e3       	ldi	r23, 0x3F	; 63
    1fcc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1fd0:	c3 01       	movw	r24, r6
    1fd2:	6f ef       	ldi	r22, 0xFF	; 255
    1fd4:	7f e3       	ldi	r23, 0x3F	; 63
    1fd6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	6f ef       	ldi	r22, 0xFF	; 255
    1fe0:	7f e3       	ldi	r23, 0x3F	; 63
    1fe2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1fe6:	c2 01       	movw	r24, r4
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1ff0:	80 91 78 03 	lds	r24, 0x0378
    1ff4:	88 23       	and	r24, r24
    1ff6:	79 f2       	breq	.-98     	; 0x1f96 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1ff8:	88 e1       	ldi	r24, 0x18	; 24
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	80 93 60 00 	sts	0x0060, r24
    2002:	10 92 60 00 	sts	0x0060, r1
    2006:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    2008:	80 91 76 03 	lds	r24, 0x0376
    200c:	90 91 77 03 	lds	r25, 0x0377
    2010:	ef 81       	ldd	r30, Y+7	; 0x07
    2012:	f8 85       	ldd	r31, Y+8	; 0x08
    2014:	e8 17       	cp	r30, r24
    2016:	f9 07       	cpc	r31, r25
    2018:	20 f0       	brcs	.+8      	; 0x2022 <set_vco_init_cv+0x212>
    201a:	80 91 af 02 	lds	r24, 0x02AF
    201e:	88 23       	and	r24, r24
    2020:	51 f4       	brne	.+20     	; 0x2036 <set_vco_init_cv+0x226>
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	9e 81       	ldd	r25, Y+6	; 0x06
    2026:	80 95       	com	r24
    2028:	90 95       	com	r25
    202a:	2b 85       	ldd	r18, Y+11	; 0x0b
    202c:	3c 85       	ldd	r19, Y+12	; 0x0c
    202e:	28 23       	and	r18, r24
    2030:	39 23       	and	r19, r25
    2032:	3c 87       	std	Y+12, r19	; 0x0c
    2034:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	8b 83       	std	Y+3, r24	; 0x03
    2046:	ef ef       	ldi	r30, 0xFF	; 255
    2048:	8f 3f       	cpi	r24, 0xFF	; 255
    204a:	9e 07       	cpc	r25, r30
    204c:	09 f0       	breq	.+2      	; 0x2050 <set_vco_init_cv+0x240>
    204e:	7b cf       	rjmp	.-266    	; 0x1f46 <set_vco_init_cv+0x136>
    2050:	2b 85       	ldd	r18, Y+11	; 0x0b
    2052:	3c 85       	ldd	r19, Y+12	; 0x0c
    2054:	3e 83       	std	Y+6, r19	; 0x06
    2056:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    2058:	88 ec       	ldi	r24, 0xC8	; 200
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    2064:	89 ec       	ldi	r24, 0xC9	; 201
    2066:	91 e0       	ldi	r25, 0x01	; 1
    2068:	60 e0       	ldi	r22, 0x00	; 0
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    2070:	84 ed       	ldi	r24, 0xD4	; 212
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    207c:	88 ed       	ldi	r24, 0xD8	; 216
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    2088:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    208a:	ee e6       	ldi	r30, 0x6E	; 110
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	8d 7f       	andi	r24, 0xFD	; 253
    2092:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2094:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	6d 81       	ldd	r22, Y+5	; 0x05
    209c:	7e 81       	ldd	r23, Y+6	; 0x06
    209e:	0e 94 92 1c 	call	0x3924	; 0x3924 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	2c 96       	adiw	r28, 0x0c	; 12
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	ff 90       	pop	r15
    20bc:	ef 90       	pop	r14
    20be:	df 90       	pop	r13
    20c0:	cf 90       	pop	r12
    20c2:	bf 90       	pop	r11
    20c4:	af 90       	pop	r10
    20c6:	9f 90       	pop	r9
    20c8:	8f 90       	pop	r8
    20ca:	7f 90       	pop	r7
    20cc:	6f 90       	pop	r6
    20ce:	5f 90       	pop	r5
    20d0:	4f 90       	pop	r4
    20d2:	3f 90       	pop	r3
    20d4:	2f 90       	pop	r2
    20d6:	08 95       	ret

000020d8 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    20d8:	2f 92       	push	r2
    20da:	3f 92       	push	r3
    20dc:	4f 92       	push	r4
    20de:	5f 92       	push	r5
    20e0:	6f 92       	push	r6
    20e2:	7f 92       	push	r7
    20e4:	8f 92       	push	r8
    20e6:	9f 92       	push	r9
    20e8:	af 92       	push	r10
    20ea:	bf 92       	push	r11
    20ec:	cf 92       	push	r12
    20ee:	df 92       	push	r13
    20f0:	ef 92       	push	r14
    20f2:	ff 92       	push	r15
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	c0 54       	subi	r28, 0x40	; 64
    2102:	d0 40       	sbci	r29, 0x00	; 0
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    2110:	de 01       	movw	r26, r28
    2112:	11 96       	adiw	r26, 0x01	; 1
    2114:	e0 e3       	ldi	r30, 0x30	; 48
    2116:	f2 e0       	ldi	r31, 0x02	; 2
    2118:	80 e3       	ldi	r24, 0x30	; 48
    211a:	01 90       	ld	r0, Z+
    211c:	0d 92       	st	X+, r0
    211e:	81 50       	subi	r24, 0x01	; 1
    2120:	e1 f7       	brne	.-8      	; 0x211a <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    2122:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    2126:	0f 30       	cpi	r16, 0x0F	; 15
    2128:	11 f5       	brne	.+68     	; 0x216e <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    212a:	40 90 73 03 	lds	r4, 0x0373
    212e:	50 90 74 03 	lds	r5, 0x0374
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2132:	0f 2e       	mov	r0, r31
    2134:	f6 ee       	ldi	r31, 0xE6	; 230
    2136:	8f 2e       	mov	r8, r31
    2138:	f1 e0       	ldi	r31, 0x01	; 1
    213a:	9f 2e       	mov	r9, r31
    213c:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    213e:	0f 2e       	mov	r0, r31
    2140:	fe ed       	ldi	r31, 0xDE	; 222
    2142:	2f 2e       	mov	r2, r31
    2144:	f1 e0       	ldi	r31, 0x01	; 1
    2146:	3f 2e       	mov	r3, r31
    2148:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    214a:	23 ee       	ldi	r18, 0xE3	; 227
    214c:	31 e0       	ldi	r19, 0x01	; 1
    214e:	3a ab       	sts	0x5a, r19
    2150:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2152:	0f 2e       	mov	r0, r31
    2154:	fc ed       	ldi	r31, 0xDC	; 220
    2156:	6f 2e       	mov	r6, r31
    2158:	f1 e0       	ldi	r31, 0x01	; 1
    215a:	7f 2e       	mov	r7, r31
    215c:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    215e:	0f e4       	ldi	r16, 0x4F	; 79
    2160:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2162:	cc 24       	eor	r12, r12
    2164:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    2166:	ee 24       	eor	r14, r14
    2168:	68 94       	set
    216a:	e1 f8       	bld	r14, 1
    216c:	22 c0       	rjmp	.+68     	; 0x21b2 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    216e:	40 90 71 03 	lds	r4, 0x0371
    2172:	50 90 72 03 	lds	r5, 0x0372
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2176:	0f 2e       	mov	r0, r31
    2178:	f5 ee       	ldi	r31, 0xE5	; 229
    217a:	8f 2e       	mov	r8, r31
    217c:	f1 e0       	ldi	r31, 0x01	; 1
    217e:	9f 2e       	mov	r9, r31
    2180:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2182:	0f 2e       	mov	r0, r31
    2184:	f7 ed       	ldi	r31, 0xD7	; 215
    2186:	2f 2e       	mov	r2, r31
    2188:	f1 e0       	ldi	r31, 0x01	; 1
    218a:	3f 2e       	mov	r3, r31
    218c:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    218e:	44 ee       	ldi	r20, 0xE4	; 228
    2190:	51 e0       	ldi	r21, 0x01	; 1
    2192:	5a ab       	sts	0x5a, r21
    2194:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2196:	0f 2e       	mov	r0, r31
    2198:	fd ed       	ldi	r31, 0xDD	; 221
    219a:	6f 2e       	mov	r6, r31
    219c:	f1 e0       	ldi	r31, 0x01	; 1
    219e:	7f 2e       	mov	r7, r31
    21a0:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    21a2:	0d e2       	ldi	r16, 0x2D	; 45
    21a4:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    21a6:	cc 24       	eor	r12, r12
    21a8:	68 94       	set
    21aa:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    21ac:	ee 24       	eor	r14, r14
    21ae:	68 94       	set
    21b0:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    21b2:	c3 01       	movw	r24, r6
    21b4:	b2 01       	movw	r22, r4
    21b6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    21ba:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    21bc:	ed ed       	ldi	r30, 0xDD	; 221
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	80 64       	ori	r24, 0x40	; 64
    21c4:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    21c6:	80 81       	ld	r24, Z
    21c8:	8f 7b       	andi	r24, 0xBF	; 191
    21ca:	80 83       	st	Z, r24
		DATA_BUS = 0;
    21cc:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    21ce:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	80 93 7a 03 	sts	0x037A, r24
		
		compare_match_counter = 0;	
    21d6:	10 92 75 03 	sts	0x0375, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    21da:	8c 2d       	mov	r24, r12
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	24 e6       	ldi	r18, 0x64	; 100
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	82 9f       	mul	r24, r18
    21e4:	d0 01       	movw	r26, r0
    21e6:	83 9f       	mul	r24, r19
    21e8:	b0 0d       	add	r27, r0
    21ea:	92 9f       	mul	r25, r18
    21ec:	b0 0d       	add	r27, r0
    21ee:	11 24       	eor	r1, r1
    21f0:	bc ab       	sts	0x5c, r27
    21f2:	ab ab       	sts	0x5b, r26
    21f4:	fe 01       	movw	r30, r28
    21f6:	31 96       	adiw	r30, 0x01	; 1
    21f8:	fc af       	sts	0x7c, r31
    21fa:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    21fc:	98 01       	movw	r18, r16
    21fe:	2e 5f       	subi	r18, 0xFE	; 254
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	21 96       	adiw	r28, 0x01	; 1
    2204:	3f af       	sts	0x7f, r19
    2206:	2e af       	sts	0x7e, r18
    2208:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    220a:	1e ae       	sts	0xbe, r17
    220c:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    220e:	0f 2e       	mov	r0, r31
    2210:	f8 ed       	ldi	r31, 0xD8	; 216
    2212:	ef 2e       	mov	r14, r31
    2214:	f1 e0       	ldi	r31, 0x01	; 1
    2216:	ff 2e       	mov	r15, r31
    2218:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    221a:	0f 2e       	mov	r0, r31
    221c:	f4 ed       	ldi	r31, 0xD4	; 212
    221e:	cf 2e       	mov	r12, r31
    2220:	f1 e0       	ldi	r31, 0x01	; 1
    2222:	df 2e       	mov	r13, r31
    2224:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2226:	0f 2e       	mov	r0, r31
    2228:	fa ec       	ldi	r31, 0xCA	; 202
    222a:	af 2e       	mov	r10, r31
    222c:	f1 e0       	ldi	r31, 0x01	; 1
    222e:	bf 2e       	mov	r11, r31
    2230:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    2232:	eb ad       	sts	0x6b, r30
    2234:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    2236:	80 81       	ld	r24, Z
    2238:	80 93 7a 03 	sts	0x037A, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    223c:	84 b5       	in	r24, 0x24	; 36
    223e:	8f 60       	ori	r24, 0x0F	; 15
    2240:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    2246:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    2248:	4d ad       	sts	0x6d, r20
    224a:	5e ad       	sts	0x6e, r21
    224c:	43 30       	cpi	r20, 0x03	; 3
    224e:	51 05       	cpc	r21, r1
    2250:	24 f4       	brge	.+8      	; 0x225a <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2252:	83 e0       	ldi	r24, 0x03	; 3
    2254:	80 93 79 03 	sts	0x0379, r24
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    225a:	82 e0       	ldi	r24, 0x02	; 2
    225c:	80 93 79 03 	sts	0x0379, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    2260:	81 81       	ldd	r24, Z+1	; 0x01
    2262:	92 81       	ldd	r25, Z+2	; 0x02
    2264:	9a af       	sts	0x7a, r25
    2266:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2268:	ad e0       	ldi	r26, 0x0D	; 13
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	be ab       	sts	0x5e, r27
    226e:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    2270:	00 e0       	ldi	r16, 0x00	; 0
    2272:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2274:	e1 e0       	ldi	r30, 0x01	; 1
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	0d a8       	sts	0x8d, r16
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <tune_8ths+0x1a8>
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	0a 94       	dec	r0
    2282:	e2 f7       	brpl	.-8      	; 0x227c <tune_8ths+0x1a4>
    2284:	f8 af       	sts	0x78, r31
    2286:	ef ab       	sts	0x5f, r30
    2288:	0e 2b       	or	r16, r30
    228a:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    228c:	ae e6       	ldi	r26, 0x6E	; 110
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	8c 91       	ld	r24, X
    2292:	8d 7f       	andi	r24, 0xFD	; 253
    2294:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2296:	c4 01       	movw	r24, r8
    2298:	b8 01       	movw	r22, r16
    229a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    229e:	e3 ef       	ldi	r30, 0xF3	; 243
    22a0:	f1 e0       	ldi	r31, 0x01	; 1
    22a2:	31 97       	sbiw	r30, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <tune_8ths+0x1ca>
    22a6:	00 c0       	rjmp	.+0      	; 0x22a8 <tune_8ths+0x1d0>
    22a8:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    22aa:	ae e6       	ldi	r26, 0x6E	; 110
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	8c 91       	ld	r24, X
    22b0:	82 60       	ori	r24, 0x02	; 2
    22b2:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    22b4:	10 92 78 03 	sts	0x0378, r1
				period_counter = 0;
    22b8:	10 92 7b 03 	sts	0x037B, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    22bc:	e8 e1       	ldi	r30, 0x18	; 24
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	2f e0       	ldi	r18, 0x0F	; 15
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	a8 95       	wdr
    22c8:	e0 93 60 00 	sts	0x0060, r30
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    22d2:	80 91 78 03 	lds	r24, 0x0378
    22d6:	88 23       	and	r24, r24
    22d8:	81 f5       	brne	.+96     	; 0x233a <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    22da:	80 91 7a 03 	lds	r24, 0x037A
    22de:	4b a9       	sts	0x4b, r20
    22e0:	5c a9       	sts	0x4c, r21
    22e2:	48 0f       	add	r20, r24
    22e4:	51 1d       	adc	r21, r1
    22e6:	ca 01       	movw	r24, r20
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    22ee:	c3 01       	movw	r24, r6
    22f0:	b2 01       	movw	r22, r4
    22f2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    22f6:	c4 01       	movw	r24, r8
    22f8:	b8 01       	movw	r22, r16
    22fa:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    22fe:	c7 01       	movw	r24, r14
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    2308:	c6 01       	movw	r24, r12
    230a:	6f ef       	ldi	r22, 0xFF	; 255
    230c:	7f e3       	ldi	r23, 0x3F	; 63
    230e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2312:	c5 01       	movw	r24, r10
    2314:	6f ef       	ldi	r22, 0xFF	; 255
    2316:	7f e3       	ldi	r23, 0x3F	; 63
    2318:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    231c:	c1 01       	movw	r24, r2
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	70 e2       	ldi	r23, 0x20	; 32
    2322:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    2326:	89 a9       	sts	0x49, r24
    2328:	9a a9       	sts	0x4a, r25
    232a:	6f ef       	ldi	r22, 0xFF	; 255
    232c:	7f e3       	ldi	r23, 0x3F	; 63
    232e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2332:	80 91 78 03 	lds	r24, 0x0378
    2336:	88 23       	and	r24, r24
    2338:	81 f2       	breq	.-96     	; 0x22da <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    233a:	58 e1       	ldi	r21, 0x18	; 24
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	50 93 60 00 	sts	0x0060, r21
    2344:	10 92 60 00 	sts	0x0060, r1
    2348:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    234a:	80 91 76 03 	lds	r24, 0x0376
    234e:	90 91 77 03 	lds	r25, 0x0377
    2352:	a9 ad       	sts	0x69, r26
    2354:	ba ad       	sts	0x6a, r27
    2356:	a8 17       	cp	r26, r24
    2358:	b9 07       	cpc	r27, r25
    235a:	50 f0       	brcs	.+20     	; 0x2370 <tune_8ths+0x298>
    235c:	80 91 af 02 	lds	r24, 0x02AF
    2360:	81 30       	cpi	r24, 0x01	; 1
    2362:	31 f4       	brne	.+12     	; 0x2370 <tune_8ths+0x298>
    2364:	8f a9       	sts	0x4f, r24
    2366:	98 ad       	sts	0x68, r25
    2368:	80 95       	com	r24
    236a:	90 95       	com	r25
    236c:	08 23       	and	r16, r24
    236e:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2370:	80 91 76 03 	lds	r24, 0x0376
    2374:	90 91 77 03 	lds	r25, 0x0377
    2378:	e9 ad       	sts	0x69, r30
    237a:	fa ad       	sts	0x6a, r31
    237c:	8e 17       	cp	r24, r30
    237e:	9f 07       	cpc	r25, r31
    2380:	21 f4       	brne	.+8      	; 0x238a <tune_8ths+0x2b2>
    2382:	80 91 af 02 	lds	r24, 0x02AF
    2386:	81 30       	cpi	r24, 0x01	; 1
    2388:	71 f0       	breq	.+28     	; 0x23a6 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    238a:	f1 e0       	ldi	r31, 0x01	; 1
    238c:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2390:	2d a9       	sts	0x4d, r18
    2392:	3e a9       	sts	0x4e, r19
    2394:	21 50       	subi	r18, 0x01	; 1
    2396:	30 40       	sbci	r19, 0x00	; 0
    2398:	3e ab       	sts	0x5e, r19
    239a:	2d ab       	sts	0x5d, r18
    239c:	4f ef       	ldi	r20, 0xFF	; 255
    239e:	2f 3f       	cpi	r18, 0xFF	; 255
    23a0:	34 07       	cpc	r19, r20
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <tune_8ths+0x2ce>
    23a4:	67 cf       	rjmp	.-306    	; 0x2274 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    23a6:	21 96       	adiw	r28, 0x01	; 1
    23a8:	ae ad       	sts	0x6e, r26
    23aa:	bf ad       	sts	0x6f, r27
    23ac:	21 97       	sbiw	r28, 0x01	; 1
    23ae:	0d 93       	st	X+, r16
    23b0:	1d 93       	st	X+, r17
    23b2:	21 96       	adiw	r28, 0x01	; 1
    23b4:	bf af       	sts	0x7f, r27
    23b6:	ae af       	sts	0x7e, r26
    23b8:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    23ba:	ee e6       	ldi	r30, 0x6E	; 110
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	8d 7f       	andi	r24, 0xFD	; 253
    23c2:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    23c4:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    23c6:	2d ad       	sts	0x6d, r18
    23c8:	3e ad       	sts	0x6e, r19
    23ca:	2f 5f       	subi	r18, 0xFF	; 255
    23cc:	3f 4f       	sbci	r19, 0xFF	; 255
    23ce:	3e af       	sts	0x7e, r19
    23d0:	2d af       	sts	0x7d, r18
    23d2:	4b ad       	sts	0x6b, r20
    23d4:	5c ad       	sts	0x6c, r21
    23d6:	4d 5f       	subi	r20, 0xFD	; 253
    23d8:	5f 4f       	sbci	r21, 0xFF	; 255
    23da:	5c af       	sts	0x7c, r21
    23dc:	4b af       	sts	0x7b, r20
    23de:	20 31       	cpi	r18, 0x10	; 16
    23e0:	31 05       	cpc	r19, r1
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <tune_8ths+0x30e>
    23e4:	26 cf       	rjmp	.-436    	; 0x2232 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    23e6:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    23e8:	c0 5c       	subi	r28, 0xC0	; 192
    23ea:	df 4f       	sbci	r29, 0xFF	; 255
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	1f 91       	pop	r17
    23fc:	0f 91       	pop	r16
    23fe:	ff 90       	pop	r15
    2400:	ef 90       	pop	r14
    2402:	df 90       	pop	r13
    2404:	cf 90       	pop	r12
    2406:	bf 90       	pop	r11
    2408:	af 90       	pop	r10
    240a:	9f 90       	pop	r9
    240c:	8f 90       	pop	r8
    240e:	7f 90       	pop	r7
    2410:	6f 90       	pop	r6
    2412:	5f 90       	pop	r5
    2414:	4f 90       	pop	r4
    2416:	3f 90       	pop	r3
    2418:	2f 90       	pop	r2
    241a:	08 95       	ret

0000241c <tune_filter>:
	
void tune_filter(void) {
    241c:	2f 92       	push	r2
    241e:	3f 92       	push	r3
    2420:	4f 92       	push	r4
    2422:	5f 92       	push	r5
    2424:	6f 92       	push	r6
    2426:	7f 92       	push	r7
    2428:	8f 92       	push	r8
    242a:	9f 92       	push	r9
    242c:	af 92       	push	r10
    242e:	bf 92       	push	r11
    2430:	cf 92       	push	r12
    2432:	df 92       	push	r13
    2434:	ef 92       	push	r14
    2436:	ff 92       	push	r15
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	e9 97       	sbiw	r28, 0x39	; 57
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    2450:	de 01       	movw	r26, r28
    2452:	11 96       	adiw	r26, 0x01	; 1
    2454:	e0 e6       	ldi	r30, 0x60	; 96
    2456:	f2 e0       	ldi	r31, 0x02	; 2
    2458:	8d e2       	ldi	r24, 0x2D	; 45
    245a:	01 90       	ld	r0, Z+
    245c:	0d 92       	st	X+, r0
    245e:	81 50       	subi	r24, 0x01	; 1
    2460:	e1 f7       	brne	.-8      	; 0x245a <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2462:	88 ed       	ldi	r24, 0xD8	; 216
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	70 e0       	ldi	r23, 0x00	; 0
    246a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    246e:	81 ee       	ldi	r24, 0xE1	; 225
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	70 e0       	ldi	r23, 0x00	; 0
    2476:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    247a:	82 ee       	ldi	r24, 0xE2	; 226
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2486:	82 eb       	ldi	r24, 0xB2	; 178
    2488:	92 e0       	ldi	r25, 0x02	; 2
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2492:	8a ed       	ldi	r24, 0xDA	; 218
    2494:	91 e0       	ldi	r25, 0x01	; 1
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	70 e0       	ldi	r23, 0x00	; 0
    249a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    249e:	8f ed       	ldi	r24, 0xDF	; 223
    24a0:	91 e0       	ldi	r25, 0x01	; 1
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	70 e0       	ldi	r23, 0x00	; 0
    24a6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    24aa:	80 ee       	ldi	r24, 0xE0	; 224
    24ac:	91 e0       	ldi	r25, 0x01	; 1
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    24b6:	81 ed       	ldi	r24, 0xD1	; 209
    24b8:	91 e0       	ldi	r25, 0x01	; 1
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    24c2:	86 ed       	ldi	r24, 0xD6	; 214
    24c4:	91 e0       	ldi	r25, 0x01	; 1
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	70 e0       	ldi	r23, 0x00	; 0
    24ca:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    24ce:	82 ed       	ldi	r24, 0xD2	; 210
    24d0:	91 e0       	ldi	r25, 0x01	; 1
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    24da:	83 ed       	ldi	r24, 0xD3	; 211
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    24de:	60 e0       	ldi	r22, 0x00	; 0
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    24e6:	84 ed       	ldi	r24, 0xD4	; 212
    24e8:	91 e0       	ldi	r25, 0x01	; 1
    24ea:	6f ef       	ldi	r22, 0xFF	; 255
    24ec:	7f e3       	ldi	r23, 0x3F	; 63
    24ee:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    24f2:	85 ed       	ldi	r24, 0xD5	; 213
    24f4:	91 e0       	ldi	r25, 0x01	; 1
    24f6:	6f ef       	ldi	r22, 0xFF	; 255
    24f8:	7f e3       	ldi	r23, 0x3F	; 63
    24fa:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    24fe:	89 ed       	ldi	r24, 0xD9	; 217
    2500:	91 e0       	ldi	r25, 0x01	; 1
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    250a:	8e ec       	ldi	r24, 0xCE	; 206
    250c:	91 e0       	ldi	r25, 0x01	; 1
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2516:	8c ec       	ldi	r24, 0xCC	; 204
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2522:	8a ec       	ldi	r24, 0xCA	; 202
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	6f ef       	ldi	r22, 0xFF	; 255
    2528:	7f e3       	ldi	r23, 0x3F	; 63
    252a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    252e:	88 ec       	ldi	r24, 0xC8	; 200
    2530:	91 e0       	ldi	r25, 0x01	; 1
    2532:	60 e0       	ldi	r22, 0x00	; 0
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    253a:	80 ed       	ldi	r24, 0xD0	; 208
    253c:	91 e0       	ldi	r25, 0x01	; 1
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2546:	83 ee       	ldi	r24, 0xE3	; 227
    2548:	91 e0       	ldi	r25, 0x01	; 1
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2552:	84 ee       	ldi	r24, 0xE4	; 228
    2554:	91 e0       	ldi	r25, 0x01	; 1
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    255e:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2560:	ed ed       	ldi	r30, 0xDD	; 221
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	80 64       	ori	r24, 0x40	; 64
    2568:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    256a:	80 81       	ld	r24, Z
    256c:	8f 7b       	andi	r24, 0xBF	; 191
    256e:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	80 93 7a 03 	sts	0x037A, r24
	PORTF |= (1<<GATE); //turn gate on
    2576:	89 9a       	sbi	0x11, 1	; 17
    2578:	9e 01       	movw	r18, r28
    257a:	2f 5f       	subi	r18, 0xFF	; 255
    257c:	3f 4f       	sbci	r19, 0xFF	; 255
    257e:	3d ab       	sts	0x5d, r19
    2580:	2c ab       	sts	0x5c, r18
    2582:	8f e0       	ldi	r24, 0x0F	; 15
    2584:	93 e0       	ldi	r25, 0x03	; 3
    2586:	99 af       	sts	0x79, r25
    2588:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    258a:	1f aa       	sts	0x9f, r17
    258c:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    258e:	0f 2e       	mov	r0, r31
    2590:	f4 ed       	ldi	r31, 0xD4	; 212
    2592:	af 2e       	mov	r10, r31
    2594:	f1 e0       	ldi	r31, 0x01	; 1
    2596:	bf 2e       	mov	r11, r31
    2598:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    259a:	0f 2e       	mov	r0, r31
    259c:	f8 ed       	ldi	r31, 0xD8	; 216
    259e:	6f 2e       	mov	r6, r31
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	7f 2e       	mov	r7, r31
    25a4:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    25a6:	0f 2e       	mov	r0, r31
    25a8:	f5 ed       	ldi	r31, 0xD5	; 213
    25aa:	4f 2e       	mov	r4, r31
    25ac:	f1 e0       	ldi	r31, 0x01	; 1
    25ae:	5f 2e       	mov	r5, r31
    25b0:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    25b2:	0f 2e       	mov	r0, r31
    25b4:	fa ec       	ldi	r31, 0xCA	; 202
    25b6:	2f 2e       	mov	r2, r31
    25b8:	f1 e0       	ldi	r31, 0x01	; 1
    25ba:	3f 2e       	mov	r3, r31
    25bc:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    25be:	ac a9       	sts	0x4c, r26
    25c0:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    25c2:	8c 91       	ld	r24, X
    25c4:	80 93 7a 03 	sts	0x037A, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    25c8:	84 b5       	in	r24, 0x24	; 36
    25ca:	8f 60       	ori	r24, 0x0F	; 15
    25cc:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    25d2:	ee e6       	ldi	r30, 0x6E	; 110
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	82 60       	ori	r24, 0x02	; 2
    25da:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    25dc:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    25de:	ee a9       	sts	0x4e, r30
    25e0:	ff a9       	sts	0x4f, r31
    25e2:	e2 30       	cpi	r30, 0x02	; 2
    25e4:	f1 05       	cpc	r31, r1
    25e6:	24 f4       	brge	.+8      	; 0x25f0 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    25e8:	83 e0       	ldi	r24, 0x03	; 3
    25ea:	80 93 79 03 	sts	0x0379, r24
    25ee:	03 c0       	rjmp	.+6      	; 0x25f6 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    25f2:	80 93 79 03 	sts	0x0379, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    25f6:	11 96       	adiw	r26, 0x01	; 1
    25f8:	2d 91       	ld	r18, X+
    25fa:	3c 91       	ld	r19, X
    25fc:	12 97       	sbiw	r26, 0x02	; 2
    25fe:	3b ab       	sts	0x5b, r19
    2600:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2602:	8d e0       	ldi	r24, 0x0D	; 13
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9f a7       	lds	r25, 0x7f
    2608:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    260a:	ee 24       	eor	r14, r14
    260c:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    260e:	0f 2e       	mov	r0, r31
    2610:	f1 ed       	ldi	r31, 0xD1	; 209
    2612:	cf 2e       	mov	r12, r31
    2614:	f1 e0       	ldi	r31, 0x01	; 1
    2616:	df 2e       	mov	r13, r31
    2618:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    261a:	0f 2e       	mov	r0, r31
    261c:	f6 ed       	ldi	r31, 0xD6	; 214
    261e:	8f 2e       	mov	r8, r31
    2620:	f1 e0       	ldi	r31, 0x01	; 1
    2622:	9f 2e       	mov	r9, r31
    2624:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	fc 01       	movw	r30, r24
    262c:	0e a4       	lds	r16, 0xae
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <tune_filter+0x218>
    2630:	ee 0f       	add	r30, r30
    2632:	ff 1f       	adc	r31, r31
    2634:	0a 94       	dec	r0
    2636:	e2 f7       	brpl	.-8      	; 0x2630 <tune_filter+0x214>
    2638:	f9 ab       	sts	0x59, r31
    263a:	e8 ab       	sts	0x58, r30
    263c:	ee 2a       	or	r14, r30
    263e:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2640:	c5 01       	movw	r24, r10
    2642:	b7 01       	movw	r22, r14
    2644:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			count_finished = FALSE;
    2648:	10 92 78 03 	sts	0x0378, r1
			period_counter = 0;
    264c:	10 92 7b 03 	sts	0x037B, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2650:	8f e0       	ldi	r24, 0x0F	; 15
    2652:	28 e1       	ldi	r18, 0x18	; 24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	a8 95       	wdr
    265c:	20 93 60 00 	sts	0x0060, r18
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2666:	80 91 78 03 	lds	r24, 0x0378
    266a:	88 23       	and	r24, r24
    266c:	b1 f5       	brne	.+108    	; 0x26da <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    266e:	02 ed       	ldi	r16, 0xD2	; 210
    2670:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2672:	80 91 7a 03 	lds	r24, 0x037A
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	84 5d       	subi	r24, 0xD4	; 212
    267a:	9e 4f       	sbci	r25, 0xFE	; 254
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2682:	c5 01       	movw	r24, r10
    2684:	b7 01       	movw	r22, r14
    2686:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    268a:	c3 01       	movw	r24, r6
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2694:	c2 01       	movw	r24, r4
    2696:	6f ef       	ldi	r22, 0xFF	; 255
    2698:	7f e3       	ldi	r23, 0x3F	; 63
    269a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    269e:	c1 01       	movw	r24, r2
    26a0:	6f ef       	ldi	r22, 0xFF	; 255
    26a2:	7f e3       	ldi	r23, 0x3F	; 63
    26a4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    26a8:	8e ec       	ldi	r24, 0xCE	; 206
    26aa:	91 e0       	ldi	r25, 0x01	; 1
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    26b4:	c6 01       	movw	r24, r12
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    26be:	c4 01       	movw	r24, r8
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	70 e0       	ldi	r23, 0x00	; 0
    26c4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    26c8:	c8 01       	movw	r24, r16
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    26d2:	80 91 78 03 	lds	r24, 0x0378
    26d6:	88 23       	and	r24, r24
    26d8:	61 f2       	breq	.-104    	; 0x2672 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    26da:	88 e1       	ldi	r24, 0x18	; 24
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	80 93 60 00 	sts	0x0060, r24
    26e4:	10 92 60 00 	sts	0x0060, r1
    26e8:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    26ea:	80 91 76 03 	lds	r24, 0x0376
    26ee:	90 91 77 03 	lds	r25, 0x0377
    26f2:	2a a9       	sts	0x4a, r18
    26f4:	3b a9       	sts	0x4b, r19
    26f6:	28 17       	cp	r18, r24
    26f8:	39 07       	cpc	r19, r25
    26fa:	50 f0       	brcs	.+20     	; 0x2710 <tune_filter+0x2f4>
    26fc:	80 91 af 02 	lds	r24, 0x02AF
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	31 f4       	brne	.+12     	; 0x2710 <tune_filter+0x2f4>
    2704:	88 a9       	sts	0x48, r24
    2706:	99 a9       	sts	0x49, r25
    2708:	80 95       	com	r24
    270a:	90 95       	com	r25
    270c:	e8 22       	and	r14, r24
    270e:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2710:	80 91 76 03 	lds	r24, 0x0376
    2714:	90 91 77 03 	lds	r25, 0x0377
    2718:	ea a9       	sts	0x4a, r30
    271a:	fb a9       	sts	0x4b, r31
    271c:	8e 17       	cp	r24, r30
    271e:	9f 07       	cpc	r25, r31
    2720:	21 f4       	brne	.+8      	; 0x272a <tune_filter+0x30e>
    2722:	80 91 af 02 	lds	r24, 0x02AF
    2726:	81 30       	cpi	r24, 0x01	; 1
    2728:	71 f0       	breq	.+28     	; 0x2746 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2730:	2e a5       	lds	r18, 0x6e
    2732:	3f a5       	lds	r19, 0x6f
    2734:	21 50       	subi	r18, 0x01	; 1
    2736:	30 40       	sbci	r19, 0x00	; 0
    2738:	3f a7       	lds	r19, 0x7f
    273a:	2e a7       	lds	r18, 0x7e
    273c:	8f ef       	ldi	r24, 0xFF	; 255
    273e:	2f 3f       	cpi	r18, 0xFF	; 255
    2740:	38 07       	cpc	r19, r24
    2742:	09 f0       	breq	.+2      	; 0x2746 <tune_filter+0x32a>
    2744:	70 cf       	rjmp	.-288    	; 0x2626 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2746:	ee a9       	sts	0x4e, r30
    2748:	ff a9       	sts	0x4f, r31
    274a:	31 96       	adiw	r30, 0x01	; 1
    274c:	ff ab       	sts	0x5f, r31
    274e:	ee ab       	sts	0x5e, r30
    2750:	c7 01       	movw	r24, r14
    2752:	80 96       	adiw	r24, 0x20	; 32
    2754:	e8 ad       	sts	0x68, r30
    2756:	f9 ad       	sts	0x69, r31
    2758:	81 93       	st	Z+, r24
    275a:	91 93       	st	Z+, r25
    275c:	f9 af       	sts	0x79, r31
    275e:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2760:	ee e6       	ldi	r30, 0x6E	; 110
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	8d 7f       	andi	r24, 0xFD	; 253
    2768:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    276a:	14 bc       	out	0x24, r1	; 36
    276c:	2c a9       	sts	0x4c, r18
    276e:	3d a9       	sts	0x4d, r19
    2770:	2d 5f       	subi	r18, 0xFD	; 253
    2772:	3f 4f       	sbci	r19, 0xFF	; 255
    2774:	3d ab       	sts	0x5d, r19
    2776:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2778:	8e a9       	sts	0x4e, r24
    277a:	9f a9       	sts	0x4f, r25
    277c:	8f 30       	cpi	r24, 0x0F	; 15
    277e:	91 05       	cpc	r25, r1
    2780:	09 f0       	breq	.+2      	; 0x2784 <tune_filter+0x368>
    2782:	1d cf       	rjmp	.-454    	; 0x25be <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2784:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2786:	e9 96       	adiw	r28, 0x39	; 57
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	df 91       	pop	r29
    2794:	cf 91       	pop	r28
    2796:	1f 91       	pop	r17
    2798:	0f 91       	pop	r16
    279a:	ff 90       	pop	r15
    279c:	ef 90       	pop	r14
    279e:	df 90       	pop	r13
    27a0:	cf 90       	pop	r12
    27a2:	bf 90       	pop	r11
    27a4:	af 90       	pop	r10
    27a6:	9f 90       	pop	r9
    27a8:	8f 90       	pop	r8
    27aa:	7f 90       	pop	r7
    27ac:	6f 90       	pop	r6
    27ae:	5f 90       	pop	r5
    27b0:	4f 90       	pop	r4
    27b2:	3f 90       	pop	r3
    27b4:	2f 90       	pop	r2
    27b6:	08 95       	ret

000027b8 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    27b8:	8d e0       	ldi	r24, 0x0D	; 13
    27ba:	93 e0       	ldi	r25, 0x03	; 3
    27bc:	6c e0       	ldi	r22, 0x0C	; 12
    27be:	76 e0       	ldi	r23, 0x06	; 6
    27c0:	40 e2       	ldi	r20, 0x20	; 32
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    27c8:	8f e4       	ldi	r24, 0x4F	; 79
    27ca:	93 e0       	ldi	r25, 0x03	; 3
    27cc:	6e e4       	ldi	r22, 0x4E	; 78
    27ce:	76 e0       	ldi	r23, 0x06	; 6
    27d0:	42 e2       	ldi	r20, 0x22	; 34
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    27d8:	8d e2       	ldi	r24, 0x2D	; 45
    27da:	93 e0       	ldi	r25, 0x03	; 3
    27dc:	6c e2       	ldi	r22, 0x2C	; 44
    27de:	76 e0       	ldi	r23, 0x06	; 6
    27e0:	42 e2       	ldi	r20, 0x22	; 34
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__eeupd_block_m6450a>
	
	
}
    27e8:	08 95       	ret

000027ea <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    27ea:	82 e7       	ldi	r24, 0x72	; 114
    27ec:	96 e0       	ldi	r25, 0x06	; 6
    27ee:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__eerd_word_m6450a>
    27f2:	90 93 74 03 	sts	0x0374, r25
    27f6:	80 93 73 03 	sts	0x0373, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    27fa:	80 e7       	ldi	r24, 0x70	; 112
    27fc:	96 e0       	ldi	r25, 0x06	; 6
    27fe:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__eerd_word_m6450a>
    2802:	90 93 72 03 	sts	0x0372, r25
    2806:	80 93 71 03 	sts	0x0371, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    280a:	8f e4       	ldi	r24, 0x4F	; 79
    280c:	93 e0       	ldi	r25, 0x03	; 3
    280e:	6e e4       	ldi	r22, 0x4E	; 78
    2810:	76 e0       	ldi	r23, 0x06	; 6
    2812:	42 e2       	ldi	r20, 0x22	; 34
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    281a:	8d e2       	ldi	r24, 0x2D	; 45
    281c:	93 e0       	ldi	r25, 0x03	; 3
    281e:	6c e2       	ldi	r22, 0x2C	; 44
    2820:	76 e0       	ldi	r23, 0x06	; 6
    2822:	42 e2       	ldi	r20, 0x22	; 34
    2824:	50 e0       	ldi	r21, 0x00	; 0
    2826:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    282a:	8d e0       	ldi	r24, 0x0D	; 13
    282c:	93 e0       	ldi	r25, 0x03	; 3
    282e:	6c e0       	ldi	r22, 0x0C	; 12
    2830:	76 e0       	ldi	r23, 0x06	; 6
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    283a:	08 95       	ret

0000283c <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    283c:	98 2f       	mov	r25, r24
    283e:	96 95       	lsr	r25
    2840:	96 95       	lsr	r25
    2842:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2844:	29 2f       	mov	r18, r25
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	f9 01       	movw	r30, r18
    284a:	31 97       	sbiw	r30, 0x01	; 1
    284c:	ee 0f       	add	r30, r30
    284e:	ff 1f       	adc	r31, r31
    2850:	e6 0f       	add	r30, r22
    2852:	f7 1f       	adc	r31, r23
    2854:	01 90       	ld	r0, Z+
    2856:	f0 81       	ld	r31, Z
    2858:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    285a:	22 0f       	add	r18, r18
    285c:	33 1f       	adc	r19, r19
    285e:	26 0f       	add	r18, r22
    2860:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2862:	d9 01       	movw	r26, r18
    2864:	4d 91       	ld	r20, X+
    2866:	5c 91       	ld	r21, X
    2868:	11 97       	sbiw	r26, 0x01	; 1
    286a:	4e 1b       	sub	r20, r30
    286c:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    286e:	99 0f       	add	r25, r25
    2870:	99 0f       	add	r25, r25
    2872:	99 0f       	add	r25, r25
    2874:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	48 9f       	mul	r20, r24
    287a:	90 01       	movw	r18, r0
    287c:	49 9f       	mul	r20, r25
    287e:	30 0d       	add	r19, r0
    2880:	58 9f       	mul	r21, r24
    2882:	30 0d       	add	r19, r0
    2884:	11 24       	eor	r1, r1
    2886:	36 95       	lsr	r19
    2888:	27 95       	ror	r18
    288a:	36 95       	lsr	r19
    288c:	27 95       	ror	r18
    288e:	36 95       	lsr	r19
    2890:	27 95       	ror	r18
    2892:	e2 0f       	add	r30, r18
    2894:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2896:	8e 2f       	mov	r24, r30
    2898:	9f 2f       	mov	r25, r31
    289a:	08 95       	ret

0000289c <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	a2 97       	sbiw	r28, 0x22	; 34
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    28b0:	de 01       	movw	r26, r28
    28b2:	11 96       	adiw	r26, 0x01	; 1
    28b4:	ed e8       	ldi	r30, 0x8D	; 141
    28b6:	f2 e0       	ldi	r31, 0x02	; 2
    28b8:	82 e2       	ldi	r24, 0x22	; 34
    28ba:	01 90       	ld	r0, Z+
    28bc:	0d 92       	st	X+, r0
    28be:	81 50       	subi	r24, 0x01	; 1
    28c0:	e1 f7       	brne	.-8      	; 0x28ba <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    28c2:	af e4       	ldi	r26, 0x4F	; 79
    28c4:	b3 e0       	ldi	r27, 0x03	; 3
    28c6:	fe 01       	movw	r30, r28
    28c8:	31 96       	adiw	r30, 0x01	; 1
    28ca:	82 e2       	ldi	r24, 0x22	; 34
    28cc:	01 90       	ld	r0, Z+
    28ce:	0d 92       	st	X+, r0
    28d0:	81 50       	subi	r24, 0x01	; 1
    28d2:	e1 f7       	brne	.-8      	; 0x28cc <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    28d4:	ad e2       	ldi	r26, 0x2D	; 45
    28d6:	b3 e0       	ldi	r27, 0x03	; 3
    28d8:	fe 01       	movw	r30, r28
    28da:	31 96       	adiw	r30, 0x01	; 1
    28dc:	82 e2       	ldi	r24, 0x22	; 34
    28de:	01 90       	ld	r0, Z+
    28e0:	0d 92       	st	X+, r0
    28e2:	81 50       	subi	r24, 0x01	; 1
    28e4:	e1 f7       	brne	.-8      	; 0x28de <set_one_volt_per_octave+0x42>
	
	
}
    28e6:	a2 96       	adiw	r28, 0x22	; 34
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	08 95       	ret

000028f8 <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    28f8:	ef e6       	ldi	r30, 0x6F	; 111
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	82 70       	andi	r24, 0x02	; 2
    2900:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2902:	e1 e8       	ldi	r30, 0x81	; 129
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	87 7f       	andi	r24, 0xF7	; 247
    290a:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    290c:	8f e0       	ldi	r24, 0x0F	; 15
    290e:	6f e0       	ldi	r22, 0x0F	; 15
    2910:	7e e5       	ldi	r23, 0x5E	; 94
    2912:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <set_vco_init_cv>
    2916:	90 93 74 03 	sts	0x0374, r25
    291a:	80 93 73 03 	sts	0x0373, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    291e:	80 ef       	ldi	r24, 0xF0	; 240
    2920:	6f e0       	ldi	r22, 0x0F	; 15
    2922:	7e e5       	ldi	r23, 0x5E	; 94
    2924:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <set_vco_init_cv>
    2928:	90 93 72 03 	sts	0x0372, r25
    292c:	80 93 71 03 	sts	0x0371, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2930:	8f e0       	ldi	r24, 0x0F	; 15
    2932:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <tune_8ths>
			tune_8ths(VCO2);
    2936:	80 ef       	ldi	r24, 0xF0	; 240
    2938:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <tune_8ths>
			tune_filter();
    293c:	0e 94 0e 12 	call	0x241c	; 0x241c <tune_filter>
    2940:	8f e4       	ldi	r24, 0x4F	; 79
    2942:	93 ec       	ldi	r25, 0xC3	; 195
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <tune+0x4c>
    2948:	00 c0       	rjmp	.+0      	; 0x294a <tune+0x52>
    294a:	00 00       	nop
			//save_tuning_tables();
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    294c:	08 95       	ret

0000294e <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    294e:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2950:	98 2f       	mov	r25, r24
    2952:	9c 70       	andi	r25, 0x0C	; 12
    2954:	20 91 c1 02 	lds	r18, 0x02C1
    2958:	92 2b       	or	r25, r18
    295a:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    295e:	98 2f       	mov	r25, r24
    2960:	92 95       	swap	r25
    2962:	96 95       	lsr	r25
    2964:	97 70       	andi	r25, 0x07	; 7
    2966:	90 ff       	sbrs	r25, 0
    2968:	16 c0       	rjmp	.+44     	; 0x2996 <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    296a:	20 91 7f 03 	lds	r18, 0x037F
    296e:	30 91 80 03 	lds	r19, 0x0380
    2972:	2f 5f       	subi	r18, 0xFF	; 255
    2974:	3f 4f       	sbci	r19, 0xFF	; 255
    2976:	30 93 80 03 	sts	0x0380, r19
    297a:	20 93 7f 03 	sts	0x037F, r18
    297e:	92 e0       	ldi	r25, 0x02	; 2
    2980:	28 35       	cpi	r18, 0x58	; 88
    2982:	39 07       	cpc	r19, r25
    2984:	61 f4       	brne	.+24     	; 0x299e <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2986:	10 92 80 03 	sts	0x0380, r1
    298a:	10 92 7f 03 	sts	0x037F, r1
			current_patch.mode = CAL;
    298e:	95 e0       	ldi	r25, 0x05	; 5
    2990:	90 93 07 03 	sts	0x0307, r25
    2994:	04 c0       	rjmp	.+8      	; 0x299e <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2996:	10 92 80 03 	sts	0x0380, r1
    299a:	10 92 7f 03 	sts	0x037F, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    299e:	90 91 81 03 	lds	r25, 0x0381
    29a2:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    29a4:	98 27       	eor	r25, r24
    29a6:	90 93 81 03 	sts	0x0381, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    29aa:	89 23       	and	r24, r25
    29ac:	08 95       	ret

000029ae <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    29ae:	ed ed       	ldi	r30, 0xDD	; 221
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	90 81       	ld	r25, Z
    29b4:	9f 7b       	andi	r25, 0xBF	; 191
    29b6:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	21 70       	andi	r18, 0x01	; 1
    29be:	30 70       	andi	r19, 0x00	; 0
    29c0:	22 0f       	add	r18, r18
    29c2:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    29c4:	68 2f       	mov	r22, r24
    29c6:	62 95       	swap	r22
    29c8:	66 95       	lsr	r22
    29ca:	67 70       	andi	r22, 0x07	; 7
    29cc:	67 95       	ror	r22
    29ce:	66 27       	eor	r22, r22
    29d0:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    29d2:	26 2b       	or	r18, r22
    29d4:	98 2f       	mov	r25, r24
    29d6:	96 95       	lsr	r25
    29d8:	96 95       	lsr	r25
    29da:	91 70       	andi	r25, 0x01	; 1
    29dc:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    29de:	68 2f       	mov	r22, r24
    29e0:	66 1f       	adc	r22, r22
    29e2:	66 27       	eor	r22, r22
    29e4:	66 1f       	adc	r22, r22
    29e6:	66 0f       	add	r22, r22
    29e8:	66 0f       	add	r22, r22
    29ea:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    29ec:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    29ee:	a8 2f       	mov	r26, r24
    29f0:	a6 95       	lsr	r26
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	a1 70       	andi	r26, 0x01	; 1
    29f6:	b0 70       	andi	r27, 0x00	; 0
    29f8:	bd 01       	movw	r22, r26
    29fa:	66 0f       	add	r22, r22
    29fc:	77 1f       	adc	r23, r23
    29fe:	66 0f       	add	r22, r22
    2a00:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2a02:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2a04:	68 2f       	mov	r22, r24
    2a06:	62 95       	swap	r22
    2a08:	6f 70       	andi	r22, 0x0F	; 15
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	61 70       	andi	r22, 0x01	; 1
    2a0e:	70 70       	andi	r23, 0x00	; 0
    2a10:	ab 01       	movw	r20, r22
    2a12:	00 24       	eor	r0, r0
    2a14:	56 95       	lsr	r21
    2a16:	47 95       	ror	r20
    2a18:	07 94       	ror	r0
    2a1a:	56 95       	lsr	r21
    2a1c:	47 95       	ror	r20
    2a1e:	07 94       	ror	r0
    2a20:	54 2f       	mov	r21, r20
    2a22:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2a24:	62 2f       	mov	r22, r18
    2a26:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2a28:	48 2f       	mov	r20, r24
    2a2a:	42 95       	swap	r20
    2a2c:	46 95       	lsr	r20
    2a2e:	46 95       	lsr	r20
    2a30:	43 70       	andi	r20, 0x03	; 3
    2a32:	50 e0       	ldi	r21, 0x00	; 0
    2a34:	41 70       	andi	r20, 0x01	; 1
    2a36:	50 70       	andi	r21, 0x00	; 0
    2a38:	9a 01       	movw	r18, r20
    2a3a:	22 0f       	add	r18, r18
    2a3c:	33 1f       	adc	r19, r19
    2a3e:	22 95       	swap	r18
    2a40:	32 95       	swap	r19
    2a42:	30 7f       	andi	r19, 0xF0	; 240
    2a44:	32 27       	eor	r19, r18
    2a46:	20 7f       	andi	r18, 0xF0	; 240
    2a48:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2a4a:	46 2f       	mov	r20, r22
    2a4c:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2a4e:	86 95       	lsr	r24
    2a50:	86 95       	lsr	r24
    2a52:	86 95       	lsr	r24
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	21 70       	andi	r18, 0x01	; 1
    2a5a:	30 70       	andi	r19, 0x00	; 0
    2a5c:	c9 01       	movw	r24, r18
    2a5e:	82 95       	swap	r24
    2a60:	92 95       	swap	r25
    2a62:	90 7f       	andi	r25, 0xF0	; 240
    2a64:	98 27       	eor	r25, r24
    2a66:	80 7f       	andi	r24, 0xF0	; 240
    2a68:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2a6a:	84 2b       	or	r24, r20
    2a6c:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2a6e:	80 81       	ld	r24, Z
    2a70:	80 64       	ori	r24, 0x40	; 64
    2a72:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2a74:	80 81       	ld	r24, Z
    2a76:	8f 7b       	andi	r24, 0xBF	; 191
    2a78:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2a7a:	12 b8       	out	0x02, r1	; 2
	
	
    2a7c:	08 95       	ret

00002a7e <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2a7e:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2a80:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2a82:	74 83       	std	Z+4, r23	; 0x04
    2a84:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2a86:	11 82       	std	Z+1, r1	; 0x01
    2a88:	10 82       	st	Z, r1
}
    2a8a:	08 95       	ret

00002a8c <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2a8c:	1f 93       	push	r17
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	ec 01       	movw	r28, r24
    2a94:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2a96:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <store_and_clear_interrupt>
    2a9a:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2a9c:	39 81       	ldd	r19, Y+1	; 0x01
    2a9e:	83 2f       	mov	r24, r19
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	01 96       	adiw	r24, 0x01	; 1
    2aa4:	6a 81       	ldd	r22, Y+2	; 0x02
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	0e 94 2d 1c 	call	0x385a	; 0x385a <__divmodhi4>
    2aac:	48 81       	ld	r20, Y
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	84 17       	cp	r24, r20
    2ab2:	95 07       	cpc	r25, r21
    2ab4:	29 f4       	brne	.+10     	; 0x2ac0 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2ab6:	82 2f       	mov	r24, r18
    2ab8:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <restore_interrupt_setting>
      return false;
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	11 c0       	rjmp	.+34     	; 0x2ae2 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2ac0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac4:	e3 0f       	add	r30, r19
    2ac6:	f1 1d       	adc	r31, r1
    2ac8:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	01 96       	adiw	r24, 0x01	; 1
    2ad0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	0e 94 2d 1c 	call	0x385a	; 0x385a <__divmodhi4>
    2ad8:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2ada:	82 2f       	mov	r24, r18
    2adc:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <restore_interrupt_setting>
      return true;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	1f 91       	pop	r17
    2ae8:	08 95       	ret

00002aea <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2af0:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2af4:	29 81       	ldd	r18, Y+1	; 0x01
    2af6:	98 81       	ld	r25, Y
    2af8:	29 17       	cp	r18, r25
    2afa:	18 f0       	brcs	.+6      	; 0x2b02 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2afc:	c2 2f       	mov	r28, r18
    2afe:	c9 1b       	sub	r28, r25
    2b00:	03 c0       	rjmp	.+6      	; 0x2b08 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2b02:	ca 81       	ldd	r28, Y+2	; 0x02
    2b04:	c2 0f       	add	r28, r18
    2b06:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2b08:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <restore_interrupt_setting>
   return len;
}
    2b0c:	8c 2f       	mov	r24, r28
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	08 95       	ret

00002b14 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2b14:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2b16:	20 81       	ld	r18, Z
    2b18:	86 2f       	mov	r24, r22
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	82 0f       	add	r24, r18
    2b1e:	91 1d       	adc	r25, r1
    2b20:	62 81       	ldd	r22, Z+2	; 0x02
    2b22:	70 e0       	ldi	r23, 0x00	; 0
    2b24:	0e 94 2d 1c 	call	0x385a	; 0x385a <__divmodhi4>
    2b28:	03 80       	ldd	r0, Z+3	; 0x03
    2b2a:	f4 81       	ldd	r31, Z+4	; 0x04
    2b2c:	e0 2d       	mov	r30, r0
    2b2e:	e8 0f       	add	r30, r24
    2b30:	f9 1f       	adc	r31, r25
}
    2b32:	80 81       	ld	r24, Z
    2b34:	08 95       	ret

00002b36 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    2b3c:	ec 01       	movw	r28, r24
    2b3e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2b40:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <store_and_clear_interrupt>
    2b44:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2b46:	88 81       	ld	r24, Y
    2b48:	21 2f       	mov	r18, r17
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	28 0f       	add	r18, r24
    2b4e:	31 1d       	adc	r19, r1
    2b50:	6a 81       	ldd	r22, Y+2	; 0x02
    2b52:	c9 01       	movw	r24, r18
    2b54:	70 e0       	ldi	r23, 0x00	; 0
    2b56:	0e 94 2d 1c 	call	0x385a	; 0x385a <__divmodhi4>
    2b5a:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2b5c:	84 2f       	mov	r24, r20
    2b5e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <restore_interrupt_setting>
}
    2b62:	df 91       	pop	r29
    2b64:	cf 91       	pop	r28
    2b66:	1f 91       	pop	r17
    2b68:	08 95       	ret

00002b6a <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2b6a:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2b6c:	f8 94       	cli
   return sreg;
}
    2b6e:	08 95       	ret

00002b70 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2b70:	8f bf       	out	0x3f, r24	; 63
}
    2b72:	08 95       	ret

00002b74 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2b74:	88 1f       	adc	r24, r24
    2b76:	88 27       	eor	r24, r24
    2b78:	88 1f       	adc	r24, r24
    2b7a:	08 95       	ret

00002b7c <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2b7c:	91 e0       	ldi	r25, 0x01	; 1
    2b7e:	88 3f       	cpi	r24, 0xF8	; 248
    2b80:	08 f4       	brcc	.+2      	; 0x2b84 <midi_is_realtime+0x8>
    2b82:	90 e0       	ldi	r25, 0x00	; 0
}
    2b84:	89 2f       	mov	r24, r25
    2b86:	08 95       	ret

00002b88 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	20 7f       	andi	r18, 0xF0	; 240
    2b8e:	30 70       	andi	r19, 0x00	; 0
    2b90:	20 3c       	cpi	r18, 0xC0	; 192
    2b92:	31 05       	cpc	r19, r1
    2b94:	e9 f1       	breq	.+122    	; 0x2c10 <midi_packet_length+0x88>
    2b96:	21 3c       	cpi	r18, 0xC1	; 193
    2b98:	31 05       	cpc	r19, r1
    2b9a:	8c f4       	brge	.+34     	; 0x2bbe <midi_packet_length+0x36>
    2b9c:	20 39       	cpi	r18, 0x90	; 144
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	e1 f0       	breq	.+56     	; 0x2bda <midi_packet_length+0x52>
    2ba2:	21 39       	cpi	r18, 0x91	; 145
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	24 f4       	brge	.+8      	; 0x2bb0 <midi_packet_length+0x28>
    2ba8:	20 38       	cpi	r18, 0x80	; 128
    2baa:	31 05       	cpc	r19, r1
    2bac:	79 f5       	brne	.+94     	; 0x2c0c <midi_packet_length+0x84>
    2bae:	15 c0       	rjmp	.+42     	; 0x2bda <midi_packet_length+0x52>
    2bb0:	20 3a       	cpi	r18, 0xA0	; 160
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	91 f0       	breq	.+36     	; 0x2bda <midi_packet_length+0x52>
    2bb6:	20 3b       	cpi	r18, 0xB0	; 176
    2bb8:	31 05       	cpc	r19, r1
    2bba:	41 f5       	brne	.+80     	; 0x2c0c <midi_packet_length+0x84>
    2bbc:	0e c0       	rjmp	.+28     	; 0x2bda <midi_packet_length+0x52>
    2bbe:	20 3e       	cpi	r18, 0xE0	; 224
    2bc0:	31 05       	cpc	r19, r1
    2bc2:	59 f0       	breq	.+22     	; 0x2bda <midi_packet_length+0x52>
    2bc4:	21 3e       	cpi	r18, 0xE1	; 225
    2bc6:	31 05       	cpc	r19, r1
    2bc8:	24 f4       	brge	.+8      	; 0x2bd2 <midi_packet_length+0x4a>
    2bca:	20 3d       	cpi	r18, 0xD0	; 208
    2bcc:	31 05       	cpc	r19, r1
    2bce:	f1 f4       	brne	.+60     	; 0x2c0c <midi_packet_length+0x84>
    2bd0:	1f c0       	rjmp	.+62     	; 0x2c10 <midi_packet_length+0x88>
    2bd2:	20 3f       	cpi	r18, 0xF0	; 240
    2bd4:	31 05       	cpc	r19, r1
    2bd6:	d1 f4       	brne	.+52     	; 0x2c0c <midi_packet_length+0x84>
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2bda:	83 e0       	ldi	r24, 0x03	; 3
    2bdc:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2bde:	86 3f       	cpi	r24, 0xF6	; 246
    2be0:	79 f0       	breq	.+30     	; 0x2c00 <midi_packet_length+0x78>
    2be2:	87 3f       	cpi	r24, 0xF7	; 247
    2be4:	38 f4       	brcc	.+14     	; 0x2bf4 <midi_packet_length+0x6c>
    2be6:	82 3f       	cpi	r24, 0xF2	; 242
    2be8:	a9 f0       	breq	.+42     	; 0x2c14 <midi_packet_length+0x8c>
    2bea:	83 3f       	cpi	r24, 0xF3	; 243
    2bec:	59 f0       	breq	.+22     	; 0x2c04 <midi_packet_length+0x7c>
    2bee:	81 3f       	cpi	r24, 0xF1	; 241
    2bf0:	59 f4       	brne	.+22     	; 0x2c08 <midi_packet_length+0x80>
    2bf2:	08 c0       	rjmp	.+16     	; 0x2c04 <midi_packet_length+0x7c>
    2bf4:	88 3f       	cpi	r24, 0xF8	; 248
    2bf6:	40 f0       	brcs	.+16     	; 0x2c08 <midi_packet_length+0x80>
    2bf8:	8d 3f       	cpi	r24, 0xFD	; 253
    2bfa:	10 f0       	brcs	.+4      	; 0x2c00 <midi_packet_length+0x78>
    2bfc:	8e 3f       	cpi	r24, 0xFE	; 254
    2bfe:	20 f0       	brcs	.+8      	; 0x2c08 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2c10:	82 e0       	ldi	r24, 0x02	; 2
    2c12:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2c14:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2c16:	08 95       	ret

00002c18 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2c18:	0f 93       	push	r16
    2c1a:	34 2f       	mov	r19, r20
    2c1c:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2c1e:	46 2f       	mov	r20, r22
    2c20:	4f 70       	andi	r20, 0x0F	; 15
    2c22:	40 6b       	ori	r20, 0xB0	; 176
    2c24:	23 2f       	mov	r18, r19
    2c26:	2f 77       	andi	r18, 0x7F	; 127
    2c28:	0f 77       	andi	r16, 0x7F	; 127
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	ed 91       	ld	r30, X+
    2c2e:	fc 91       	ld	r31, X
    2c30:	63 e0       	ldi	r22, 0x03	; 3
    2c32:	70 e0       	ldi	r23, 0x00	; 0
    2c34:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2c36:	0f 91       	pop	r16
    2c38:	08 95       	ret

00002c3a <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2c3a:	0f 93       	push	r16
    2c3c:	34 2f       	mov	r19, r20
    2c3e:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2c40:	46 2f       	mov	r20, r22
    2c42:	4f 70       	andi	r20, 0x0F	; 15
    2c44:	40 69       	ori	r20, 0x90	; 144
    2c46:	23 2f       	mov	r18, r19
    2c48:	2f 77       	andi	r18, 0x7F	; 127
    2c4a:	0f 77       	andi	r16, 0x7F	; 127
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	ed 91       	ld	r30, X+
    2c50:	fc 91       	ld	r31, X
    2c52:	63 e0       	ldi	r22, 0x03	; 3
    2c54:	70 e0       	ldi	r23, 0x00	; 0
    2c56:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2c58:	0f 91       	pop	r16
    2c5a:	08 95       	ret

00002c5c <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2c5c:	0f 93       	push	r16
    2c5e:	34 2f       	mov	r19, r20
    2c60:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2c62:	46 2f       	mov	r20, r22
    2c64:	4f 70       	andi	r20, 0x0F	; 15
    2c66:	40 68       	ori	r20, 0x80	; 128
    2c68:	23 2f       	mov	r18, r19
    2c6a:	2f 77       	andi	r18, 0x7F	; 127
    2c6c:	0f 77       	andi	r16, 0x7F	; 127
    2c6e:	dc 01       	movw	r26, r24
    2c70:	ed 91       	ld	r30, X+
    2c72:	fc 91       	ld	r31, X
    2c74:	63 e0       	ldi	r22, 0x03	; 3
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2c7a:	0f 91       	pop	r16
    2c7c:	08 95       	ret

00002c7e <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2c7e:	0f 93       	push	r16
    2c80:	34 2f       	mov	r19, r20
    2c82:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2c84:	46 2f       	mov	r20, r22
    2c86:	4f 70       	andi	r20, 0x0F	; 15
    2c88:	40 6a       	ori	r20, 0xA0	; 160
    2c8a:	23 2f       	mov	r18, r19
    2c8c:	2f 77       	andi	r18, 0x7F	; 127
    2c8e:	0f 77       	andi	r16, 0x7F	; 127
    2c90:	dc 01       	movw	r26, r24
    2c92:	ed 91       	ld	r30, X+
    2c94:	fc 91       	ld	r31, X
    2c96:	63 e0       	ldi	r22, 0x03	; 3
    2c98:	70 e0       	ldi	r23, 0x00	; 0
    2c9a:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2c9c:	0f 91       	pop	r16
    2c9e:	08 95       	ret

00002ca0 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2ca0:	0f 93       	push	r16
    2ca2:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2ca4:	20 e2       	ldi	r18, 0x20	; 32
    2ca6:	40 30       	cpi	r20, 0x00	; 0
    2ca8:	52 07       	cpc	r21, r18
    2caa:	44 f4       	brge	.+16     	; 0x2cbc <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2cac:	a0 ee       	ldi	r26, 0xE0	; 224
    2cae:	40 30       	cpi	r20, 0x00	; 0
    2cb0:	5a 07       	cpc	r21, r26
    2cb2:	3c f0       	brlt	.+14     	; 0x2cc2 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2cb4:	8a 01       	movw	r16, r20
    2cb6:	00 50       	subi	r16, 0x00	; 0
    2cb8:	10 4e       	sbci	r17, 0xE0	; 224
    2cba:	05 c0       	rjmp	.+10     	; 0x2cc6 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2cbc:	0f ef       	ldi	r16, 0xFF	; 255
    2cbe:	1f e3       	ldi	r17, 0x3F	; 63
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2cc2:	00 e0       	ldi	r16, 0x00	; 0
    2cc4:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2cc6:	46 2f       	mov	r20, r22
    2cc8:	4f 70       	andi	r20, 0x0F	; 15
    2cca:	40 6e       	ori	r20, 0xE0	; 224
    2ccc:	20 2f       	mov	r18, r16
    2cce:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2cd0:	00 0f       	add	r16, r16
    2cd2:	01 2f       	mov	r16, r17
    2cd4:	00 1f       	adc	r16, r16
    2cd6:	11 0b       	sbc	r17, r17
    2cd8:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2cda:	0f 77       	andi	r16, 0x7F	; 127
    2cdc:	dc 01       	movw	r26, r24
    2cde:	ed 91       	ld	r30, X+
    2ce0:	fc 91       	ld	r31, X
    2ce2:	63 e0       	ldi	r22, 0x03	; 3
    2ce4:	70 e0       	ldi	r23, 0x00	; 0
    2ce6:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2ce8:	1f 91       	pop	r17
    2cea:	0f 91       	pop	r16
    2cec:	08 95       	ret

00002cee <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2cee:	0f 93       	push	r16
    2cf0:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2cf2:	46 2f       	mov	r20, r22
    2cf4:	4f 70       	andi	r20, 0x0F	; 15
    2cf6:	40 6c       	ori	r20, 0xC0	; 192
    2cf8:	2f 77       	andi	r18, 0x7F	; 127
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	ed 91       	ld	r30, X+
    2cfe:	fc 91       	ld	r31, X
    2d00:	62 e0       	ldi	r22, 0x02	; 2
    2d02:	70 e0       	ldi	r23, 0x00	; 0
    2d04:	00 e0       	ldi	r16, 0x00	; 0
    2d06:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2d08:	0f 91       	pop	r16
    2d0a:	08 95       	ret

00002d0c <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2d0c:	0f 93       	push	r16
    2d0e:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2d10:	46 2f       	mov	r20, r22
    2d12:	4f 70       	andi	r20, 0x0F	; 15
    2d14:	40 6d       	ori	r20, 0xD0	; 208
    2d16:	2f 77       	andi	r18, 0x7F	; 127
    2d18:	dc 01       	movw	r26, r24
    2d1a:	ed 91       	ld	r30, X+
    2d1c:	fc 91       	ld	r31, X
    2d1e:	62 e0       	ldi	r22, 0x02	; 2
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	00 e0       	ldi	r16, 0x00	; 0
    2d24:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2d26:	0f 91       	pop	r16
    2d28:	08 95       	ret

00002d2a <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2d2a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	ed 91       	ld	r30, X+
    2d30:	fc 91       	ld	r31, X
    2d32:	61 e0       	ldi	r22, 0x01	; 1
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	48 ef       	ldi	r20, 0xF8	; 248
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	00 e0       	ldi	r16, 0x00	; 0
    2d3c:	09 95       	icall
}
    2d3e:	0f 91       	pop	r16
    2d40:	08 95       	ret

00002d42 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    2d42:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2d44:	dc 01       	movw	r26, r24
    2d46:	ed 91       	ld	r30, X+
    2d48:	fc 91       	ld	r31, X
    2d4a:	61 e0       	ldi	r22, 0x01	; 1
    2d4c:	70 e0       	ldi	r23, 0x00	; 0
    2d4e:	49 ef       	ldi	r20, 0xF9	; 249
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	00 e0       	ldi	r16, 0x00	; 0
    2d54:	09 95       	icall
}
    2d56:	0f 91       	pop	r16
    2d58:	08 95       	ret

00002d5a <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2d5a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	ed 91       	ld	r30, X+
    2d60:	fc 91       	ld	r31, X
    2d62:	61 e0       	ldi	r22, 0x01	; 1
    2d64:	70 e0       	ldi	r23, 0x00	; 0
    2d66:	4a ef       	ldi	r20, 0xFA	; 250
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	00 e0       	ldi	r16, 0x00	; 0
    2d6c:	09 95       	icall
}
    2d6e:	0f 91       	pop	r16
    2d70:	08 95       	ret

00002d72 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    2d72:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    2d74:	dc 01       	movw	r26, r24
    2d76:	ed 91       	ld	r30, X+
    2d78:	fc 91       	ld	r31, X
    2d7a:	61 e0       	ldi	r22, 0x01	; 1
    2d7c:	70 e0       	ldi	r23, 0x00	; 0
    2d7e:	4b ef       	ldi	r20, 0xFB	; 251
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	00 e0       	ldi	r16, 0x00	; 0
    2d84:	09 95       	icall
}
    2d86:	0f 91       	pop	r16
    2d88:	08 95       	ret

00002d8a <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    2d8a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	ed 91       	ld	r30, X+
    2d90:	fc 91       	ld	r31, X
    2d92:	61 e0       	ldi	r22, 0x01	; 1
    2d94:	70 e0       	ldi	r23, 0x00	; 0
    2d96:	4c ef       	ldi	r20, 0xFC	; 252
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	00 e0       	ldi	r16, 0x00	; 0
    2d9c:	09 95       	icall
}
    2d9e:	0f 91       	pop	r16
    2da0:	08 95       	ret

00002da2 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    2da2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    2da4:	dc 01       	movw	r26, r24
    2da6:	ed 91       	ld	r30, X+
    2da8:	fc 91       	ld	r31, X
    2daa:	61 e0       	ldi	r22, 0x01	; 1
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	4e ef       	ldi	r20, 0xFE	; 254
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	00 e0       	ldi	r16, 0x00	; 0
    2db4:	09 95       	icall
}
    2db6:	0f 91       	pop	r16
    2db8:	08 95       	ret

00002dba <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2dba:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	ed 91       	ld	r30, X+
    2dc0:	fc 91       	ld	r31, X
    2dc2:	61 e0       	ldi	r22, 0x01	; 1
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	4f ef       	ldi	r20, 0xFF	; 255
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	00 e0       	ldi	r16, 0x00	; 0
    2dcc:	09 95       	icall
}
    2dce:	0f 91       	pop	r16
    2dd0:	08 95       	ret

00002dd2 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    2dd2:	0f 93       	push	r16
   device->send_func(device, 2,
    2dd4:	26 2f       	mov	r18, r22
    2dd6:	2f 77       	andi	r18, 0x7F	; 127
    2dd8:	dc 01       	movw	r26, r24
    2dda:	ed 91       	ld	r30, X+
    2ddc:	fc 91       	ld	r31, X
    2dde:	62 e0       	ldi	r22, 0x02	; 2
    2de0:	70 e0       	ldi	r23, 0x00	; 0
    2de2:	41 ef       	ldi	r20, 0xF1	; 241
    2de4:	00 e0       	ldi	r16, 0x00	; 0
    2de6:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2de8:	0f 91       	pop	r16
    2dea:	08 95       	ret

00002dec <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
   device->send_func(device, 3,
    2df0:	26 2f       	mov	r18, r22
    2df2:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2df4:	8b 01       	movw	r16, r22
    2df6:	00 0f       	add	r16, r16
    2df8:	01 2f       	mov	r16, r17
    2dfa:	00 1f       	adc	r16, r16
    2dfc:	11 0b       	sbc	r17, r17
    2dfe:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2e00:	0f 77       	andi	r16, 0x7F	; 127
    2e02:	dc 01       	movw	r26, r24
    2e04:	ed 91       	ld	r30, X+
    2e06:	fc 91       	ld	r31, X
    2e08:	63 e0       	ldi	r22, 0x03	; 3
    2e0a:	70 e0       	ldi	r23, 0x00	; 0
    2e0c:	42 ef       	ldi	r20, 0xF2	; 242
    2e0e:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2e10:	1f 91       	pop	r17
    2e12:	0f 91       	pop	r16
    2e14:	08 95       	ret

00002e16 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2e16:	0f 93       	push	r16
   device->send_func(device, 2,
    2e18:	26 2f       	mov	r18, r22
    2e1a:	2f 77       	andi	r18, 0x7F	; 127
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	ed 91       	ld	r30, X+
    2e20:	fc 91       	ld	r31, X
    2e22:	62 e0       	ldi	r22, 0x02	; 2
    2e24:	70 e0       	ldi	r23, 0x00	; 0
    2e26:	43 ef       	ldi	r20, 0xF3	; 243
    2e28:	00 e0       	ldi	r16, 0x00	; 0
    2e2a:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2e2c:	0f 91       	pop	r16
    2e2e:	08 95       	ret

00002e30 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2e30:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    2e32:	dc 01       	movw	r26, r24
    2e34:	ed 91       	ld	r30, X+
    2e36:	fc 91       	ld	r31, X
    2e38:	61 e0       	ldi	r22, 0x01	; 1
    2e3a:	70 e0       	ldi	r23, 0x00	; 0
    2e3c:	46 ef       	ldi	r20, 0xF6	; 246
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	00 e0       	ldi	r16, 0x00	; 0
    2e42:	09 95       	icall
}
    2e44:	0f 91       	pop	r16
    2e46:	08 95       	ret

00002e48 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2e48:	0f 93       	push	r16
    2e4a:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	ed 91       	ld	r30, X+
    2e50:	fc 91       	ld	r31, X
    2e52:	61 e0       	ldi	r22, 0x01	; 1
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	00 e0       	ldi	r16, 0x00	; 0
    2e5a:	09 95       	icall
}
    2e5c:	0f 91       	pop	r16
    2e5e:	08 95       	ret

00002e60 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    2e60:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    2e62:	dc 01       	movw	r26, r24
    2e64:	ed 91       	ld	r30, X+
    2e66:	fc 91       	ld	r31, X
    2e68:	09 95       	icall
}
    2e6a:	0f 91       	pop	r16
    2e6c:	08 95       	ret

00002e6e <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2e6e:	6f 92       	push	r6
    2e70:	7f 92       	push	r7
    2e72:	8f 92       	push	r8
    2e74:	9f 92       	push	r9
    2e76:	af 92       	push	r10
    2e78:	bf 92       	push	r11
    2e7a:	cf 92       	push	r12
    2e7c:	df 92       	push	r13
    2e7e:	ef 92       	push	r14
    2e80:	ff 92       	push	r15
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <midi_send_array+0x1e>
    2e8c:	0f 92       	push	r0
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	4c 01       	movw	r8, r24
    2e94:	6b 01       	movw	r12, r22
    2e96:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2e98:	61 15       	cp	r22, r1
    2e9a:	71 05       	cpc	r23, r1
    2e9c:	41 f1       	breq	.+80     	; 0x2eee <midi_send_array+0x80>
    2e9e:	ee 24       	eor	r14, r14
    2ea0:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2ea2:	0f 2e       	mov	r0, r31
    2ea4:	f3 e0       	ldi	r31, 0x03	; 3
    2ea6:	6f 2e       	mov	r6, r31
    2ea8:	77 24       	eor	r7, r7
    2eaa:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2eac:	19 82       	std	Y+1, r1	; 0x01
    2eae:	1a 82       	std	Y+2, r1	; 0x02
    2eb0:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2eb2:	86 01       	movw	r16, r12
    2eb4:	0e 19       	sub	r16, r14
    2eb6:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2eb8:	04 30       	cpi	r16, 0x04	; 4
    2eba:	11 05       	cpc	r17, r1
    2ebc:	08 f0       	brcs	.+2      	; 0x2ec0 <midi_send_array+0x52>
    2ebe:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2ec0:	b5 01       	movw	r22, r10
    2ec2:	6e 0d       	add	r22, r14
    2ec4:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	01 96       	adiw	r24, 0x01	; 1
    2eca:	40 2f       	mov	r20, r16
    2ecc:	51 2f       	mov	r21, r17
    2ece:	0e 94 40 1c 	call	0x3880	; 0x3880 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2ed2:	c4 01       	movw	r24, r8
    2ed4:	b8 01       	movw	r22, r16
    2ed6:	49 81       	ldd	r20, Y+1	; 0x01
    2ed8:	2a 81       	ldd	r18, Y+2	; 0x02
    2eda:	0b 81       	ldd	r16, Y+3	; 0x03
    2edc:	0e 94 30 17 	call	0x2e60	; 0x2e60 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2ee0:	83 e0       	ldi	r24, 0x03	; 3
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	e8 0e       	add	r14, r24
    2ee6:	f9 1e       	adc	r15, r25
    2ee8:	ec 14       	cp	r14, r12
    2eea:	fd 04       	cpc	r15, r13
    2eec:	f8 f2       	brcs	.-66     	; 0x2eac <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	ff 90       	pop	r15
    2efe:	ef 90       	pop	r14
    2f00:	df 90       	pop	r13
    2f02:	cf 90       	pop	r12
    2f04:	bf 90       	pop	r11
    2f06:	af 90       	pop	r10
    2f08:	9f 90       	pop	r9
    2f0a:	8f 90       	pop	r8
    2f0c:	7f 90       	pop	r7
    2f0e:	6f 90       	pop	r6
    2f10:	08 95       	ret

00002f12 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    2f12:	fc 01       	movw	r30, r24
    2f14:	73 83       	std	Z+3, r23	; 0x03
    2f16:	62 83       	std	Z+2, r22	; 0x02
}
    2f18:	08 95       	ret

00002f1a <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	75 83       	std	Z+5, r23	; 0x05
    2f1e:	64 83       	std	Z+4, r22	; 0x04
}
    2f20:	08 95       	ret

00002f22 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    2f22:	fc 01       	movw	r30, r24
    2f24:	77 83       	std	Z+7, r23	; 0x07
    2f26:	66 83       	std	Z+6, r22	; 0x06
}
    2f28:	08 95       	ret

00002f2a <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	71 87       	std	Z+9, r23	; 0x09
    2f2e:	60 87       	std	Z+8, r22	; 0x08
}
    2f30:	08 95       	ret

00002f32 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    2f32:	fc 01       	movw	r30, r24
    2f34:	73 87       	std	Z+11, r23	; 0x0b
    2f36:	62 87       	std	Z+10, r22	; 0x0a
}
    2f38:	08 95       	ret

00002f3a <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	75 87       	std	Z+13, r23	; 0x0d
    2f3e:	64 87       	std	Z+12, r22	; 0x0c
}
    2f40:	08 95       	ret

00002f42 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    2f42:	fc 01       	movw	r30, r24
    2f44:	77 87       	std	Z+15, r23	; 0x0f
    2f46:	66 87       	std	Z+14, r22	; 0x0e
}
    2f48:	08 95       	ret

00002f4a <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	71 8b       	std	Z+17, r23	; 0x11
    2f4e:	60 8b       	std	Z+16, r22	; 0x10
}
    2f50:	08 95       	ret

00002f52 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    2f52:	fc 01       	movw	r30, r24
    2f54:	73 8b       	std	Z+19, r23	; 0x13
    2f56:	62 8b       	std	Z+18, r22	; 0x12
}
    2f58:	08 95       	ret

00002f5a <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	75 8b       	std	Z+21, r23	; 0x15
    2f5e:	64 8b       	std	Z+20, r22	; 0x14
}
    2f60:	08 95       	ret

00002f62 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    2f62:	fc 01       	movw	r30, r24
    2f64:	77 8b       	std	Z+23, r23	; 0x17
    2f66:	66 8b       	std	Z+22, r22	; 0x16
}
    2f68:	08 95       	ret

00002f6a <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	71 8f       	std	Z+25, r23	; 0x19
    2f6e:	60 8f       	std	Z+24, r22	; 0x18
}
    2f70:	08 95       	ret

00002f72 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    2f72:	fc 01       	movw	r30, r24
    2f74:	73 8f       	std	Z+27, r23	; 0x1b
    2f76:	62 8f       	std	Z+26, r22	; 0x1a
}
    2f78:	08 95       	ret

00002f7a <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	75 8f       	std	Z+29, r23	; 0x1d
    2f7e:	64 8f       	std	Z+28, r22	; 0x1c
}
    2f80:	08 95       	ret

00002f82 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    2f82:	fc 01       	movw	r30, r24
    2f84:	77 8f       	std	Z+31, r23	; 0x1f
    2f86:	66 8f       	std	Z+30, r22	; 0x1e
}
    2f88:	08 95       	ret

00002f8a <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2f8a:	cf 93       	push	r28
    2f8c:	df 93       	push	r29
    2f8e:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    2f90:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    2f92:	1f a2       	lds	r17, 0x9f
    2f94:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2f96:	bc 01       	movw	r22, r24
    2f98:	68 5d       	subi	r22, 0xD8	; 216
    2f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9c:	88 51       	subi	r24, 0x18	; 24
    2f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa0:	40 ec       	ldi	r20, 0xC0	; 192
    2fa2:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2fa6:	1b 82       	std	Y+3, r1	; 0x03
    2fa8:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2faa:	1d 82       	std	Y+5, r1	; 0x05
    2fac:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2fae:	1f 82       	std	Y+7, r1	; 0x07
    2fb0:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    2fb2:	19 86       	std	Y+9, r1	; 0x09
    2fb4:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2fb6:	1b 86       	std	Y+11, r1	; 0x0b
    2fb8:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2fba:	1d 86       	std	Y+13, r1	; 0x0d
    2fbc:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2fbe:	1f 86       	std	Y+15, r1	; 0x0f
    2fc0:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    2fc2:	19 8a       	std	Y+17, r1	; 0x11
    2fc4:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2fc6:	1b 8a       	std	Y+19, r1	; 0x13
    2fc8:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2fca:	1d 8a       	std	Y+21, r1	; 0x15
    2fcc:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2fce:	1f 8a       	std	Y+23, r1	; 0x17
    2fd0:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    2fd2:	19 8e       	std	Y+25, r1	; 0x19
    2fd4:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2fd6:	1b 8e       	std	Y+27, r1	; 0x1b
    2fd8:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2fda:	1d 8e       	std	Y+29, r1	; 0x1d
    2fdc:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2fde:	1f 8e       	std	Y+31, r1	; 0x1f
    2fe0:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    2fe2:	19 a2       	lds	r17, 0x99
    2fe4:	18 a2       	lds	r17, 0x98
}
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	08 95       	ret

00002fec <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2ffa:	66 23       	and	r22, r22
    2ffc:	99 f0       	breq	.+38     	; 0x3024 <midi_device_input+0x38>
    2ffe:	04 2f       	mov	r16, r20
    3000:	15 2f       	mov	r17, r21
    3002:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    3004:	0f 2e       	mov	r0, r31
    3006:	f8 ee       	ldi	r31, 0xE8	; 232
    3008:	ef 2e       	mov	r14, r31
    300a:	ff 24       	eor	r15, r15
    300c:	f0 2d       	mov	r31, r0
    300e:	e8 0e       	add	r14, r24
    3010:	f9 1e       	adc	r15, r25
    3012:	f8 01       	movw	r30, r16
    3014:	61 91       	ld	r22, Z+
    3016:	8f 01       	movw	r16, r30
    3018:	c7 01       	movw	r24, r14
    301a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    301e:	cf 5f       	subi	r28, 0xFF	; 255
    3020:	cd 17       	cp	r28, r29
    3022:	b9 f7       	brne	.-18     	; 0x3012 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    3024:	df 91       	pop	r29
    3026:	cf 91       	pop	r28
    3028:	1f 91       	pop	r17
    302a:	0f 91       	pop	r16
    302c:	ff 90       	pop	r15
    302e:	ef 90       	pop	r14
    3030:	08 95       	ret

00003032 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    3032:	fc 01       	movw	r30, r24
    3034:	71 83       	std	Z+1, r23	; 0x01
    3036:	60 83       	st	Z, r22
}
    3038:	08 95       	ret

0000303a <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    303a:	fc 01       	movw	r30, r24
    303c:	71 a3       	lds	r23, 0x51
    303e:	60 a3       	lds	r22, 0x50
}
    3040:	08 95       	ret

00003042 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    3042:	af 92       	push	r10
    3044:	bf 92       	push	r11
    3046:	cf 92       	push	r12
    3048:	df 92       	push	r13
    304a:	ef 92       	push	r14
    304c:	ff 92       	push	r15
    304e:	0f 93       	push	r16
    3050:	1f 93       	push	r17
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	00 d0       	rcall	.+0      	; 0x3058 <midi_input_callbacks+0x16>
    3058:	0f 92       	push	r0
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	6c 01       	movw	r12, r24
    3060:	5b 01       	movw	r10, r22
    3062:	f4 2e       	mov	r15, r20
    3064:	e2 2e       	mov	r14, r18
    3066:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    3068:	dc 01       	movw	r26, r24
    306a:	95 96       	adiw	r26, 0x25	; 37
    306c:	8c 91       	ld	r24, X
    306e:	95 97       	sbiw	r26, 0x25	; 37
    3070:	84 30       	cpi	r24, 0x04	; 4
    3072:	e9 f4       	brne	.+58     	; 0x30ae <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    3074:	5a 96       	adiw	r26, 0x1a	; 26
    3076:	ed 91       	ld	r30, X+
    3078:	fc 91       	ld	r31, X
    307a:	5b 97       	sbiw	r26, 0x1b	; 27
    307c:	30 97       	sbiw	r30, 0x00	; 0
    307e:	09 f4       	brne	.+2      	; 0x3082 <midi_input_callbacks+0x40>
    3080:	ee c0       	rjmp	.+476    	; 0x325e <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    3082:	cb 01       	movw	r24, r22
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	63 e0       	ldi	r22, 0x03	; 3
    3088:	70 e0       	ldi	r23, 0x00	; 0
    308a:	0e 94 19 1c 	call	0x3832	; 0x3832 <__udivmodhi4>
    308e:	cb 01       	movw	r24, r22
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	68 0f       	add	r22, r24
    3096:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    3098:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    309a:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    309c:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    309e:	4a 2d       	mov	r20, r10
    30a0:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    30a2:	c6 01       	movw	r24, r12
    30a4:	9e 01       	movw	r18, r28
    30a6:	2f 5f       	subi	r18, 0xFF	; 255
    30a8:	3f 4f       	sbci	r19, 0xFF	; 255
    30aa:	09 95       	icall
    30ac:	c8 c0       	rjmp	.+400    	; 0x323e <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    30ae:	62 30       	cpi	r22, 0x02	; 2
    30b0:	71 05       	cpc	r23, r1
    30b2:	09 f4       	brne	.+2      	; 0x30b6 <midi_input_callbacks+0x74>
    30b4:	5f c0       	rjmp	.+190    	; 0x3174 <midi_input_callbacks+0x132>
    30b6:	63 30       	cpi	r22, 0x03	; 3
    30b8:	71 05       	cpc	r23, r1
    30ba:	29 f0       	breq	.+10     	; 0x30c6 <midi_input_callbacks+0x84>
    30bc:	61 30       	cpi	r22, 0x01	; 1
    30be:	71 05       	cpc	r23, r1
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <midi_input_callbacks+0x82>
    30c2:	b3 c0       	rjmp	.+358    	; 0x322a <midi_input_callbacks+0x1e8>
    30c4:	99 c0       	rjmp	.+306    	; 0x31f8 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    30c6:	84 2f       	mov	r24, r20
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	80 7f       	andi	r24, 0xF0	; 240
    30cc:	90 70       	andi	r25, 0x00	; 0
    30ce:	80 3a       	cpi	r24, 0xA0	; 160
    30d0:	91 05       	cpc	r25, r1
    30d2:	29 f1       	breq	.+74     	; 0x311e <midi_input_callbacks+0xdc>
    30d4:	81 3a       	cpi	r24, 0xA1	; 161
    30d6:	91 05       	cpc	r25, r1
    30d8:	3c f4       	brge	.+14     	; 0x30e8 <midi_input_callbacks+0xa6>
    30da:	80 38       	cpi	r24, 0x80	; 128
    30dc:	91 05       	cpc	r25, r1
    30de:	c9 f0       	breq	.+50     	; 0x3112 <midi_input_callbacks+0xd0>
    30e0:	80 39       	cpi	r24, 0x90	; 144
    30e2:	91 05       	cpc	r25, r1
    30e4:	91 f5       	brne	.+100    	; 0x314a <midi_input_callbacks+0x108>
    30e6:	0f c0       	rjmp	.+30     	; 0x3106 <midi_input_callbacks+0xc4>
    30e8:	80 3e       	cpi	r24, 0xE0	; 224
    30ea:	91 05       	cpc	r25, r1
    30ec:	f1 f0       	breq	.+60     	; 0x312a <midi_input_callbacks+0xe8>
    30ee:	80 3f       	cpi	r24, 0xF0	; 240
    30f0:	91 05       	cpc	r25, r1
    30f2:	09 f1       	breq	.+66     	; 0x3136 <midi_input_callbacks+0xf4>
    30f4:	80 3b       	cpi	r24, 0xB0	; 176
    30f6:	91 05       	cpc	r25, r1
    30f8:	41 f5       	brne	.+80     	; 0x314a <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    30fa:	d6 01       	movw	r26, r12
    30fc:	12 96       	adiw	r26, 0x02	; 2
    30fe:	ed 91       	ld	r30, X+
    3100:	fc 91       	ld	r31, X
    3102:	13 97       	sbiw	r26, 0x03	; 3
              break;
    3104:	24 c0       	rjmp	.+72     	; 0x314e <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    3106:	d6 01       	movw	r26, r12
    3108:	14 96       	adiw	r26, 0x04	; 4
    310a:	ed 91       	ld	r30, X+
    310c:	fc 91       	ld	r31, X
    310e:	15 97       	sbiw	r26, 0x05	; 5
              break;
    3110:	1e c0       	rjmp	.+60     	; 0x314e <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    3112:	d6 01       	movw	r26, r12
    3114:	16 96       	adiw	r26, 0x06	; 6
    3116:	ed 91       	ld	r30, X+
    3118:	fc 91       	ld	r31, X
    311a:	17 97       	sbiw	r26, 0x07	; 7
              break;
    311c:	18 c0       	rjmp	.+48     	; 0x314e <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    311e:	d6 01       	movw	r26, r12
    3120:	18 96       	adiw	r26, 0x08	; 8
    3122:	ed 91       	ld	r30, X+
    3124:	fc 91       	ld	r31, X
    3126:	19 97       	sbiw	r26, 0x09	; 9
              break;
    3128:	12 c0       	rjmp	.+36     	; 0x314e <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    312a:	d6 01       	movw	r26, r12
    312c:	1a 96       	adiw	r26, 0x0a	; 10
    312e:	ed 91       	ld	r30, X+
    3130:	fc 91       	ld	r31, X
    3132:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    3134:	0c c0       	rjmp	.+24     	; 0x314e <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    3136:	b2 ef       	ldi	r27, 0xF2	; 242
    3138:	4b 17       	cp	r20, r27
    313a:	09 f0       	breq	.+2      	; 0x313e <midi_input_callbacks+0xfc>
    313c:	90 c0       	rjmp	.+288    	; 0x325e <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    313e:	d6 01       	movw	r26, r12
    3140:	1c 96       	adiw	r26, 0x0c	; 12
    3142:	ed 91       	ld	r30, X+
    3144:	fc 91       	ld	r31, X
    3146:	1d 97       	sbiw	r26, 0x0d	; 13
    3148:	02 c0       	rjmp	.+4      	; 0x314e <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    314a:	e0 e0       	ldi	r30, 0x00	; 0
    314c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    314e:	30 97       	sbiw	r30, 0x00	; 0
    3150:	09 f4       	brne	.+2      	; 0x3154 <midi_input_callbacks+0x112>
    3152:	85 c0       	rjmp	.+266    	; 0x325e <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    3154:	b2 ef       	ldi	r27, 0xF2	; 242
    3156:	fb 16       	cp	r15, r27
    3158:	31 f4       	brne	.+12     	; 0x3166 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    315a:	c6 01       	movw	r24, r12
    315c:	62 ef       	ldi	r22, 0xF2	; 242
    315e:	4e 2d       	mov	r20, r14
    3160:	21 2f       	mov	r18, r17
    3162:	09 95       	icall
    3164:	6c c0       	rjmp	.+216    	; 0x323e <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    3166:	6f 2d       	mov	r22, r15
    3168:	6f 70       	andi	r22, 0x0F	; 15
    316a:	c6 01       	movw	r24, r12
    316c:	4e 2d       	mov	r20, r14
    316e:	21 2f       	mov	r18, r17
    3170:	09 95       	icall
    3172:	65 c0       	rjmp	.+202    	; 0x323e <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3174:	84 2f       	mov	r24, r20
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	80 7f       	andi	r24, 0xF0	; 240
    317a:	90 70       	andi	r25, 0x00	; 0
    317c:	80 3d       	cpi	r24, 0xD0	; 208
    317e:	91 05       	cpc	r25, r1
    3180:	61 f0       	breq	.+24     	; 0x319a <midi_input_callbacks+0x158>
    3182:	80 3f       	cpi	r24, 0xF0	; 240
    3184:	91 05       	cpc	r25, r1
    3186:	79 f0       	breq	.+30     	; 0x31a6 <midi_input_callbacks+0x164>
    3188:	80 3c       	cpi	r24, 0xC0	; 192
    318a:	91 05       	cpc	r25, r1
    318c:	f9 f4       	brne	.+62     	; 0x31cc <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    318e:	d6 01       	movw	r26, r12
    3190:	1e 96       	adiw	r26, 0x0e	; 14
    3192:	ed 91       	ld	r30, X+
    3194:	fc 91       	ld	r31, X
    3196:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    3198:	1b c0       	rjmp	.+54     	; 0x31d0 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    319a:	d6 01       	movw	r26, r12
    319c:	50 96       	adiw	r26, 0x10	; 16
    319e:	ed 91       	ld	r30, X+
    31a0:	fc 91       	ld	r31, X
    31a2:	51 97       	sbiw	r26, 0x11	; 17
              break;
    31a4:	15 c0       	rjmp	.+42     	; 0x31d0 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    31a6:	b3 ef       	ldi	r27, 0xF3	; 243
    31a8:	4b 17       	cp	r20, r27
    31aa:	31 f4       	brne	.+12     	; 0x31b8 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    31ac:	d6 01       	movw	r26, r12
    31ae:	52 96       	adiw	r26, 0x12	; 18
    31b0:	ed 91       	ld	r30, X+
    31b2:	fc 91       	ld	r31, X
    31b4:	53 97       	sbiw	r26, 0x13	; 19
    31b6:	0c c0       	rjmp	.+24     	; 0x31d0 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    31b8:	b1 ef       	ldi	r27, 0xF1	; 241
    31ba:	4b 17       	cp	r20, r27
    31bc:	09 f0       	breq	.+2      	; 0x31c0 <midi_input_callbacks+0x17e>
    31be:	4f c0       	rjmp	.+158    	; 0x325e <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    31c0:	d6 01       	movw	r26, r12
    31c2:	54 96       	adiw	r26, 0x14	; 20
    31c4:	ed 91       	ld	r30, X+
    31c6:	fc 91       	ld	r31, X
    31c8:	55 97       	sbiw	r26, 0x15	; 21
    31ca:	02 c0       	rjmp	.+4      	; 0x31d0 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    31cc:	e0 e0       	ldi	r30, 0x00	; 0
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    31d0:	30 97       	sbiw	r30, 0x00	; 0
    31d2:	09 f4       	brne	.+2      	; 0x31d6 <midi_input_callbacks+0x194>
    31d4:	44 c0       	rjmp	.+136    	; 0x325e <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    31d6:	b3 ef       	ldi	r27, 0xF3	; 243
    31d8:	fb 16       	cp	r15, r27
    31da:	19 f0       	breq	.+6      	; 0x31e2 <midi_input_callbacks+0x1a0>
    31dc:	81 ef       	ldi	r24, 0xF1	; 241
    31de:	f8 16       	cp	r15, r24
    31e0:	29 f4       	brne	.+10     	; 0x31ec <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    31e2:	c6 01       	movw	r24, r12
    31e4:	6f 2d       	mov	r22, r15
    31e6:	4e 2d       	mov	r20, r14
    31e8:	09 95       	icall
    31ea:	29 c0       	rjmp	.+82     	; 0x323e <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    31ec:	6f 2d       	mov	r22, r15
    31ee:	6f 70       	andi	r22, 0x0F	; 15
    31f0:	c6 01       	movw	r24, r12
    31f2:	4e 2d       	mov	r20, r14
    31f4:	09 95       	icall
    31f6:	23 c0       	rjmp	.+70     	; 0x323e <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    31f8:	84 2f       	mov	r24, r20
    31fa:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <midi_is_realtime>
    31fe:	88 23       	and	r24, r24
    3200:	31 f0       	breq	.+12     	; 0x320e <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    3202:	d6 01       	movw	r26, r12
    3204:	56 96       	adiw	r26, 0x16	; 22
    3206:	ed 91       	ld	r30, X+
    3208:	fc 91       	ld	r31, X
    320a:	57 97       	sbiw	r26, 0x17	; 23
    320c:	08 c0       	rjmp	.+16     	; 0x321e <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    320e:	b6 ef       	ldi	r27, 0xF6	; 246
    3210:	fb 16       	cp	r15, r27
    3212:	29 f5       	brne	.+74     	; 0x325e <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    3214:	d6 01       	movw	r26, r12
    3216:	58 96       	adiw	r26, 0x18	; 24
    3218:	ed 91       	ld	r30, X+
    321a:	fc 91       	ld	r31, X
    321c:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    321e:	30 97       	sbiw	r30, 0x00	; 0
    3220:	f1 f0       	breq	.+60     	; 0x325e <midi_input_callbacks+0x21c>
            func(device, byte0);
    3222:	c6 01       	movw	r24, r12
    3224:	6f 2d       	mov	r22, r15
    3226:	09 95       	icall
    3228:	0a c0       	rjmp	.+20     	; 0x323e <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    322a:	64 30       	cpi	r22, 0x04	; 4
    322c:	71 05       	cpc	r23, r1
    322e:	a8 f4       	brcc	.+42     	; 0x325a <midi_input_callbacks+0x218>
    3230:	16 c0       	rjmp	.+44     	; 0x325e <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    3232:	c6 01       	movw	r24, r12
    3234:	b5 01       	movw	r22, r10
    3236:	4f 2d       	mov	r20, r15
    3238:	2e 2d       	mov	r18, r14
    323a:	01 2f       	mov	r16, r17
    323c:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    323e:	d6 01       	movw	r26, r12
    3240:	5e 96       	adiw	r26, 0x1e	; 30
    3242:	ed 91       	ld	r30, X+
    3244:	fc 91       	ld	r31, X
    3246:	5f 97       	sbiw	r26, 0x1f	; 31
    3248:	30 97       	sbiw	r30, 0x00	; 0
    324a:	89 f0       	breq	.+34     	; 0x326e <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    324c:	c6 01       	movw	r24, r12
    324e:	b5 01       	movw	r22, r10
    3250:	4f 2d       	mov	r20, r15
    3252:	2e 2d       	mov	r18, r14
    3254:	01 2f       	mov	r16, r17
    3256:	09 95       	icall
    3258:	0a c0       	rjmp	.+20     	; 0x326e <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    325a:	aa 24       	eor	r10, r10
    325c:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    325e:	d6 01       	movw	r26, r12
    3260:	5c 96       	adiw	r26, 0x1c	; 28
    3262:	ed 91       	ld	r30, X+
    3264:	fc 91       	ld	r31, X
    3266:	5d 97       	sbiw	r26, 0x1d	; 29
    3268:	30 97       	sbiw	r30, 0x00	; 0
    326a:	19 f7       	brne	.-58     	; 0x3232 <midi_input_callbacks+0x1f0>
    326c:	e8 cf       	rjmp	.-48     	; 0x323e <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	df 91       	pop	r29
    3276:	cf 91       	pop	r28
    3278:	1f 91       	pop	r17
    327a:	0f 91       	pop	r16
    327c:	ff 90       	pop	r15
    327e:	ef 90       	pop	r14
    3280:	df 90       	pop	r13
    3282:	cf 90       	pop	r12
    3284:	bf 90       	pop	r11
    3286:	af 90       	pop	r10
    3288:	08 95       	ret

0000328a <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    328a:	ef 92       	push	r14
    328c:	ff 92       	push	r15
    328e:	0f 93       	push	r16
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	7c 01       	movw	r14, r24
    3296:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    3298:	86 2f       	mov	r24, r22
    329a:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <midi_is_realtime>
    329e:	88 23       	and	r24, r24
    32a0:	91 f0       	breq	.+36     	; 0x32c6 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    32a2:	d7 01       	movw	r26, r14
    32a4:	95 96       	adiw	r26, 0x25	; 37
    32a6:	dc 91       	ld	r29, X
    32a8:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	95 96       	adiw	r26, 0x25	; 37
    32ae:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    32b0:	c7 01       	movw	r24, r14
    32b2:	61 e0       	ldi	r22, 0x01	; 1
    32b4:	70 e0       	ldi	r23, 0x00	; 0
    32b6:	4c 2f       	mov	r20, r28
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	00 e0       	ldi	r16, 0x00	; 0
    32bc:	0e 94 21 18 	call	0x3042	; 0x3042 <midi_input_callbacks>
    device->input_state = state;
    32c0:	f7 01       	movw	r30, r14
    32c2:	d5 a3       	lds	r29, 0x55
    32c4:	b7 c0       	rjmp	.+366    	; 0x3434 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    32c6:	8c 2f       	mov	r24, r28
    32c8:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <midi_is_statusbyte>
    32cc:	88 23       	and	r24, r24
    32ce:	09 f4       	brne	.+2      	; 0x32d2 <midi_process_byte+0x48>
    32d0:	73 c0       	rjmp	.+230    	; 0x33b8 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    32d2:	d7 01       	movw	r26, r14
    32d4:	95 96       	adiw	r26, 0x25	; 37
    32d6:	8c 91       	ld	r24, X
    32d8:	95 97       	sbiw	r26, 0x25	; 37
    32da:	84 30       	cpi	r24, 0x04	; 4
    32dc:	49 f0       	breq	.+18     	; 0x32f0 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    32de:	92 96       	adiw	r26, 0x22	; 34
    32e0:	cc 93       	st	X, r28
    32e2:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	97 96       	adiw	r26, 0x27	; 39
    32ea:	9c 93       	st	X, r25
    32ec:	8e 93       	st	-X, r24
    32ee:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    32f0:	8c 2f       	mov	r24, r28
    32f2:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <midi_packet_length>
    32f6:	81 30       	cpi	r24, 0x01	; 1
    32f8:	41 f0       	breq	.+16     	; 0x330a <midi_process_byte+0x80>
    32fa:	81 30       	cpi	r24, 0x01	; 1
    32fc:	00 f1       	brcs	.+64     	; 0x333e <midi_process_byte+0xb4>
    32fe:	82 30       	cpi	r24, 0x02	; 2
    3300:	a1 f0       	breq	.+40     	; 0x332a <midi_process_byte+0xa0>
    3302:	83 30       	cpi	r24, 0x03	; 3
    3304:	09 f0       	breq	.+2      	; 0x3308 <midi_process_byte+0x7e>
    3306:	4f c0       	rjmp	.+158    	; 0x33a6 <midi_process_byte+0x11c>
    3308:	14 c0       	rjmp	.+40     	; 0x3332 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	f7 01       	movw	r30, r14
    330e:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3310:	c7 01       	movw	r24, r14
    3312:	61 e0       	ldi	r22, 0x01	; 1
    3314:	70 e0       	ldi	r23, 0x00	; 0
    3316:	4c 2f       	mov	r20, r28
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	00 e0       	ldi	r16, 0x00	; 0
    331c:	0e 94 21 18 	call	0x3042	; 0x3042 <midi_input_callbacks>
        device->input_state = IDLE;
    3320:	d7 01       	movw	r26, r14
    3322:	95 96       	adiw	r26, 0x25	; 37
    3324:	1c 92       	st	X, r1
    3326:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3328:	85 c0       	rjmp	.+266    	; 0x3434 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    332a:	82 e0       	ldi	r24, 0x02	; 2
    332c:	f7 01       	movw	r30, r14
    332e:	85 a3       	lds	r24, 0x55
        break;
    3330:	81 c0       	rjmp	.+258    	; 0x3434 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    3332:	83 e0       	ldi	r24, 0x03	; 3
    3334:	d7 01       	movw	r26, r14
    3336:	95 96       	adiw	r26, 0x25	; 37
    3338:	8c 93       	st	X, r24
    333a:	95 97       	sbiw	r26, 0x25	; 37
        break;
    333c:	7b c0       	rjmp	.+246    	; 0x3434 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    333e:	c0 3f       	cpi	r28, 0xF0	; 240
    3340:	19 f0       	breq	.+6      	; 0x3348 <midi_process_byte+0xbe>
    3342:	c7 3f       	cpi	r28, 0xF7	; 247
    3344:	59 f5       	brne	.+86     	; 0x339c <midi_process_byte+0x112>
    3346:	0a c0       	rjmp	.+20     	; 0x335c <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    3348:	84 e0       	ldi	r24, 0x04	; 4
    334a:	f7 01       	movw	r30, r14
    334c:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    334e:	80 ef       	ldi	r24, 0xF0	; 240
    3350:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	97 a3       	lds	r25, 0x57
    3358:	86 a3       	lds	r24, 0x56
            break;
    335a:	6c c0       	rjmp	.+216    	; 0x3434 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    335c:	d7 01       	movw	r26, r14
    335e:	96 96       	adiw	r26, 0x26	; 38
    3360:	2d 91       	ld	r18, X+
    3362:	3c 91       	ld	r19, X
    3364:	97 97       	sbiw	r26, 0x27	; 39
    3366:	c9 01       	movw	r24, r18
    3368:	63 e0       	ldi	r22, 0x03	; 3
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	0e 94 19 1c 	call	0x3832	; 0x3832 <__udivmodhi4>
    3370:	f7 01       	movw	r30, r14
    3372:	e8 0f       	add	r30, r24
    3374:	f9 1f       	adc	r31, r25
    3376:	87 ef       	ldi	r24, 0xF7	; 247
    3378:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    337a:	b9 01       	movw	r22, r18
    337c:	6f 5f       	subi	r22, 0xFF	; 255
    337e:	7f 4f       	sbci	r23, 0xFF	; 255
    3380:	f7 01       	movw	r30, r14
    3382:	77 a3       	lds	r23, 0x57
    3384:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3386:	c7 01       	movw	r24, r14
    3388:	42 a1       	lds	r20, 0x42
    338a:	23 a1       	lds	r18, 0x43
    338c:	04 a1       	lds	r16, 0x44
    338e:	0e 94 21 18 	call	0x3042	; 0x3042 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3392:	d7 01       	movw	r26, r14
    3394:	95 96       	adiw	r26, 0x25	; 37
    3396:	1c 92       	st	X, r1
    3398:	95 97       	sbiw	r26, 0x25	; 37
            break;
    339a:	4c c0       	rjmp	.+152    	; 0x3434 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    339c:	f7 01       	movw	r30, r14
    339e:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    33a0:	17 a2       	lds	r17, 0x97
    33a2:	16 a2       	lds	r17, 0x96
    33a4:	47 c0       	rjmp	.+142    	; 0x3434 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    33a6:	d7 01       	movw	r26, r14
    33a8:	95 96       	adiw	r26, 0x25	; 37
    33aa:	1c 92       	st	X, r1
    33ac:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    33ae:	97 96       	adiw	r26, 0x27	; 39
    33b0:	1c 92       	st	X, r1
    33b2:	1e 92       	st	-X, r1
    33b4:	96 97       	sbiw	r26, 0x26	; 38
        break;
    33b6:	3e c0       	rjmp	.+124    	; 0x3434 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    33b8:	f7 01       	movw	r30, r14
    33ba:	25 a1       	lds	r18, 0x45
    33bc:	22 23       	and	r18, r18
    33be:	d1 f1       	breq	.+116    	; 0x3434 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    33c0:	06 a0       	lds	r16, 0x86
    33c2:	f7 a1       	lds	r31, 0x47
    33c4:	e0 2d       	mov	r30, r0
    33c6:	cf 01       	movw	r24, r30
    33c8:	63 e0       	ldi	r22, 0x03	; 3
    33ca:	70 e0       	ldi	r23, 0x00	; 0
    33cc:	0e 94 19 1c 	call	0x3832	; 0x3832 <__udivmodhi4>
    33d0:	ac 01       	movw	r20, r24
    33d2:	8e 0d       	add	r24, r14
    33d4:	9f 1d       	adc	r25, r15
    33d6:	dc 01       	movw	r26, r24
    33d8:	92 96       	adiw	r26, 0x22	; 34
    33da:	cc 93       	st	X, r28
    33dc:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    33de:	bf 01       	movw	r22, r30
    33e0:	6f 5f       	subi	r22, 0xFF	; 255
    33e2:	7f 4f       	sbci	r23, 0xFF	; 255
    33e4:	f7 01       	movw	r30, r14
    33e6:	77 a3       	lds	r23, 0x57
    33e8:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    33ea:	41 30       	cpi	r20, 0x01	; 1
    33ec:	51 05       	cpc	r21, r1
    33ee:	91 f0       	breq	.+36     	; 0x3414 <midi_process_byte+0x18a>
    33f0:	42 30       	cpi	r20, 0x02	; 2
    33f2:	51 05       	cpc	r21, r1
    33f4:	f9 f4       	brne	.+62     	; 0x3434 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    33f6:	c7 01       	movw	r24, r14
    33f8:	42 a1       	lds	r20, 0x42
    33fa:	23 a1       	lds	r18, 0x43
    33fc:	04 a1       	lds	r16, 0x44
    33fe:	0e 94 21 18 	call	0x3042	; 0x3042 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    3402:	f7 01       	movw	r30, r14
    3404:	85 a1       	lds	r24, 0x45
    3406:	84 30       	cpi	r24, 0x04	; 4
    3408:	a9 f0       	breq	.+42     	; 0x3434 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	97 a3       	lds	r25, 0x57
    3410:	86 a3       	lds	r24, 0x56
    3412:	10 c0       	rjmp	.+32     	; 0x3434 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3414:	22 30       	cpi	r18, 0x02	; 2
    3416:	71 f4       	brne	.+28     	; 0x3434 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3418:	c7 01       	movw	r24, r14
    341a:	42 a1       	lds	r20, 0x42
    341c:	23 a1       	lds	r18, 0x43
    341e:	00 e0       	ldi	r16, 0x00	; 0
    3420:	0e 94 21 18 	call	0x3042	; 0x3042 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3424:	f7 01       	movw	r30, r14
    3426:	85 a1       	lds	r24, 0x45
    3428:	84 30       	cpi	r24, 0x04	; 4
    342a:	21 f0       	breq	.+8      	; 0x3434 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	97 a3       	lds	r25, 0x57
    3432:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	0f 91       	pop	r16
    343a:	ff 90       	pop	r15
    343c:	ef 90       	pop	r14
    343e:	08 95       	ret

00003440 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    3440:	cf 92       	push	r12
    3442:	df 92       	push	r13
    3444:	ef 92       	push	r14
    3446:	ff 92       	push	r15
    3448:	0f 93       	push	r16
    344a:	1f 93       	push	r17
    344c:	cf 93       	push	r28
    344e:	df 93       	push	r29
    3450:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    3452:	dc 01       	movw	r26, r24
    3454:	90 96       	adiw	r26, 0x20	; 32
    3456:	ed 91       	ld	r30, X+
    3458:	fc 91       	ld	r31, X
    345a:	91 97       	sbiw	r26, 0x21	; 33
    345c:	30 97       	sbiw	r30, 0x00	; 0
    345e:	09 f0       	breq	.+2      	; 0x3462 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    3460:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    3462:	0f 2e       	mov	r0, r31
    3464:	f8 ee       	ldi	r31, 0xE8	; 232
    3466:	ef 2e       	mov	r14, r31
    3468:	ff 24       	eor	r15, r15
    346a:	f0 2d       	mov	r31, r0
    346c:	ec 0c       	add	r14, r12
    346e:	fd 1c       	adc	r15, r13
    3470:	c7 01       	movw	r24, r14
    3472:	0e 94 75 15 	call	0x2aea	; 0x2aea <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3476:	c8 2f       	mov	r28, r24
    3478:	d0 e0       	ldi	r29, 0x00	; 0
    347a:	20 97       	sbiw	r28, 0x00	; 0
    347c:	99 f0       	breq	.+38     	; 0x34a4 <midi_device_process+0x64>
    347e:	00 e0       	ldi	r16, 0x00	; 0
    3480:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    3482:	c7 01       	movw	r24, r14
    3484:	60 e0       	ldi	r22, 0x00	; 0
    3486:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <bytequeue_get>
    348a:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    348c:	c6 01       	movw	r24, r12
    348e:	0e 94 45 19 	call	0x328a	; 0x328a <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3492:	c7 01       	movw	r24, r14
    3494:	61 e0       	ldi	r22, 0x01	; 1
    3496:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    349a:	0f 5f       	subi	r16, 0xFF	; 255
    349c:	1f 4f       	sbci	r17, 0xFF	; 255
    349e:	0c 17       	cp	r16, r28
    34a0:	1d 07       	cpc	r17, r29
    34a2:	78 f3       	brcs	.-34     	; 0x3482 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	1f 91       	pop	r17
    34aa:	0f 91       	pop	r16
    34ac:	ff 90       	pop	r15
    34ae:	ef 90       	pop	r14
    34b0:	df 90       	pop	r13
    34b2:	cf 90       	pop	r12
    34b4:	08 95       	ret

000034b6 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    34b6:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    34b8:	67 e0       	ldi	r22, 0x07	; 7
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	0e 94 19 1c 	call	0x3832	; 0x3832 <__udivmodhi4>
    34c0:	48 2f       	mov	r20, r24
   if (remainder)
    34c2:	88 23       	and	r24, r24
    34c4:	81 f0       	breq	.+32     	; 0x34e6 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    34c6:	c9 01       	movw	r24, r18
    34c8:	67 e0       	ldi	r22, 0x07	; 7
    34ca:	70 e0       	ldi	r23, 0x00	; 0
    34cc:	0e 94 19 1c 	call	0x3832	; 0x3832 <__udivmodhi4>
    34d0:	cb 01       	movw	r24, r22
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	88 0f       	add	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	88 0f       	add	r24, r24
    34dc:	99 1f       	adc	r25, r25
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	84 0f       	add	r24, r20
    34e2:	91 1d       	adc	r25, r1
    34e4:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    34e6:	c9 01       	movw	r24, r18
    34e8:	67 e0       	ldi	r22, 0x07	; 7
    34ea:	70 e0       	ldi	r23, 0x00	; 0
    34ec:	0e 94 19 1c 	call	0x3832	; 0x3832 <__udivmodhi4>
    34f0:	cb 01       	movw	r24, r22
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	88 0f       	add	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
}
    34fe:	08 95       	ret

00003500 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3500:	48 2f       	mov	r20, r24
    3502:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3504:	a1 f0       	breq	.+40     	; 0x352e <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3506:	9c 01       	movw	r18, r24
    3508:	36 95       	lsr	r19
    350a:	27 95       	ror	r18
    350c:	36 95       	lsr	r19
    350e:	27 95       	ror	r18
    3510:	36 95       	lsr	r19
    3512:	27 95       	ror	r18
    3514:	c9 01       	movw	r24, r18
    3516:	88 0f       	add	r24, r24
    3518:	99 1f       	adc	r25, r25
    351a:	88 0f       	add	r24, r24
    351c:	99 1f       	adc	r25, r25
    351e:	88 0f       	add	r24, r24
    3520:	99 1f       	adc	r25, r25
    3522:	82 1b       	sub	r24, r18
    3524:	93 0b       	sbc	r25, r19
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	84 0f       	add	r24, r20
    352a:	91 1d       	adc	r25, r1
    352c:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    352e:	9c 01       	movw	r18, r24
    3530:	36 95       	lsr	r19
    3532:	27 95       	ror	r18
    3534:	36 95       	lsr	r19
    3536:	27 95       	ror	r18
    3538:	36 95       	lsr	r19
    353a:	27 95       	ror	r18
    353c:	c9 01       	movw	r24, r18
    353e:	88 0f       	add	r24, r24
    3540:	99 1f       	adc	r25, r25
    3542:	88 0f       	add	r24, r24
    3544:	99 1f       	adc	r25, r25
    3546:	88 0f       	add	r24, r24
    3548:	99 1f       	adc	r25, r25
    354a:	82 1b       	sub	r24, r18
    354c:	93 0b       	sbc	r25, r19
}
    354e:	08 95       	ret

00003550 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3550:	2f 92       	push	r2
    3552:	3f 92       	push	r3
    3554:	4f 92       	push	r4
    3556:	5f 92       	push	r5
    3558:	6f 92       	push	r6
    355a:	7f 92       	push	r7
    355c:	8f 92       	push	r8
    355e:	9f 92       	push	r9
    3560:	af 92       	push	r10
    3562:	bf 92       	push	r11
    3564:	cf 92       	push	r12
    3566:	df 92       	push	r13
    3568:	ef 92       	push	r14
    356a:	ff 92       	push	r15
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	00 d0       	rcall	.+0      	; 0x3576 <sysex_encode+0x26>
    3576:	00 d0       	rcall	.+0      	; 0x3578 <sysex_encode+0x28>
    3578:	00 d0       	rcall	.+0      	; 0x357a <sysex_encode+0x2a>
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
    357e:	1c 01       	movw	r2, r24
    3580:	7a 83       	std	Y+2, r23	; 0x02
    3582:	69 83       	std	Y+1, r22	; 0x01
    3584:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3586:	ca 01       	movw	r24, r20
    3588:	67 e0       	ldi	r22, 0x07	; 7
    358a:	70 e0       	ldi	r23, 0x00	; 0
    358c:	0e 94 19 1c 	call	0x3832	; 0x3832 <__udivmodhi4>
    3590:	2b 01       	movw	r4, r22
    3592:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3594:	61 15       	cp	r22, r1
    3596:	71 05       	cpc	r23, r1
    3598:	b1 f1       	breq	.+108    	; 0x3606 <sysex_encode+0xb6>
    359a:	81 01       	movw	r16, r2
    359c:	e9 80       	ldd	r14, Y+1	; 0x01
    359e:	fa 80       	ldd	r15, Y+2	; 0x02
    35a0:	cc 24       	eor	r12, r12
    35a2:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    35a4:	88 24       	eor	r8, r8
    35a6:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    35a8:	1e 83       	std	Y+6, r17	; 0x06
    35aa:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    35ac:	f8 01       	movw	r30, r16
    35ae:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    35b0:	fc 82       	std	Y+4, r15	; 0x04
    35b2:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    35b4:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    35b6:	ab 81       	ldd	r26, Y+3	; 0x03
    35b8:	bc 81       	ldd	r27, Y+4	; 0x04
    35ba:	2d 91       	ld	r18, X+
    35bc:	bc 83       	std	Y+4, r27	; 0x04
    35be:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    35c0:	4f 5f       	subi	r20, 0xFF	; 255
    35c2:	5f 4f       	sbci	r21, 0xFF	; 255
    35c4:	82 2f       	mov	r24, r18
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	80 78       	andi	r24, 0x80	; 128
    35ca:	90 70       	andi	r25, 0x00	; 0
    35cc:	bc 01       	movw	r22, r24
    35ce:	04 2e       	mov	r0, r20
    35d0:	02 c0       	rjmp	.+4      	; 0x35d6 <sysex_encode+0x86>
    35d2:	75 95       	asr	r23
    35d4:	67 95       	ror	r22
    35d6:	0a 94       	dec	r0
    35d8:	e2 f7       	brpl	.-8      	; 0x35d2 <sysex_encode+0x82>
    35da:	ad 81       	ldd	r26, Y+5	; 0x05
    35dc:	be 81       	ldd	r27, Y+6	; 0x06
    35de:	8c 91       	ld	r24, X
    35e0:	86 2b       	or	r24, r22
    35e2:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    35e4:	2f 77       	andi	r18, 0x7F	; 127
    35e6:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    35e8:	47 30       	cpi	r20, 0x07	; 7
    35ea:	51 05       	cpc	r21, r1
    35ec:	21 f7       	brne	.-56     	; 0x35b6 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    35ee:	08 94       	sec
    35f0:	c1 1c       	adc	r12, r1
    35f2:	d1 1c       	adc	r13, r1
    35f4:	08 5f       	subi	r16, 0xF8	; 248
    35f6:	1f 4f       	sbci	r17, 0xFF	; 255
    35f8:	e7 e0       	ldi	r30, 0x07	; 7
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	ee 0e       	add	r14, r30
    35fe:	ff 1e       	adc	r15, r31
    3600:	ca 14       	cp	r12, r10
    3602:	db 04       	cpc	r13, r11
    3604:	89 f6       	brne	.-94     	; 0x35a8 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3606:	c3 01       	movw	r24, r6
    3608:	67 e0       	ldi	r22, 0x07	; 7
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	0e 94 19 1c 	call	0x3832	; 0x3832 <__udivmodhi4>
   if (remainder) {
    3610:	88 23       	and	r24, r24
    3612:	d9 f1       	breq	.+118    	; 0x368a <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3614:	82 01       	movw	r16, r4
    3616:	00 0f       	add	r16, r16
    3618:	11 1f       	adc	r17, r17
    361a:	00 0f       	add	r16, r16
    361c:	11 1f       	adc	r17, r17
    361e:	00 0f       	add	r16, r16
    3620:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3622:	78 01       	movw	r14, r16
    3624:	e4 18       	sub	r14, r4
    3626:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3628:	d1 01       	movw	r26, r2
    362a:	a0 0f       	add	r26, r16
    362c:	b1 1f       	adc	r27, r17
    362e:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3630:	68 2f       	mov	r22, r24
    3632:	70 e0       	ldi	r23, 0x00	; 0
    3634:	61 15       	cp	r22, r1
    3636:	71 05       	cpc	r23, r1
    3638:	19 f1       	breq	.+70     	; 0x3680 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    363a:	e9 81       	ldd	r30, Y+1	; 0x01
    363c:	fa 81       	ldd	r31, Y+2	; 0x02
    363e:	ee 0e       	add	r14, r30
    3640:	ff 1e       	adc	r15, r31
    3642:	c8 01       	movw	r24, r16
    3644:	01 96       	adiw	r24, 0x01	; 1
    3646:	28 0e       	add	r2, r24
    3648:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    364e:	f7 01       	movw	r30, r14
    3650:	41 91       	ld	r20, Z+
    3652:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3654:	2f 5f       	subi	r18, 0xFF	; 255
    3656:	3f 4f       	sbci	r19, 0xFF	; 255
    3658:	84 2f       	mov	r24, r20
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	80 78       	andi	r24, 0x80	; 128
    365e:	90 70       	andi	r25, 0x00	; 0
    3660:	02 2e       	mov	r0, r18
    3662:	02 c0       	rjmp	.+4      	; 0x3668 <sysex_encode+0x118>
    3664:	95 95       	asr	r25
    3666:	87 95       	ror	r24
    3668:	0a 94       	dec	r0
    366a:	e2 f7       	brpl	.-8      	; 0x3664 <sysex_encode+0x114>
    366c:	9c 91       	ld	r25, X
    366e:	89 2b       	or	r24, r25
    3670:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3672:	4f 77       	andi	r20, 0x7F	; 127
    3674:	f1 01       	movw	r30, r2
    3676:	41 93       	st	Z+, r20
    3678:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    367a:	26 17       	cp	r18, r22
    367c:	37 07       	cpc	r19, r23
    367e:	38 f3       	brcs	.-50     	; 0x364e <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3680:	c8 01       	movw	r24, r16
    3682:	01 96       	adiw	r24, 0x01	; 1
    3684:	86 0f       	add	r24, r22
    3686:	97 1f       	adc	r25, r23
    3688:	07 c0       	rjmp	.+14     	; 0x3698 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    368a:	c2 01       	movw	r24, r4
    368c:	88 0f       	add	r24, r24
    368e:	99 1f       	adc	r25, r25
    3690:	88 0f       	add	r24, r24
    3692:	99 1f       	adc	r25, r25
    3694:	88 0f       	add	r24, r24
    3696:	99 1f       	adc	r25, r25
   }
}
    3698:	26 96       	adiw	r28, 0x06	; 6
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	f8 94       	cli
    369e:	de bf       	out	0x3e, r29	; 62
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	cd bf       	out	0x3d, r28	; 61
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	1f 91       	pop	r17
    36aa:	0f 91       	pop	r16
    36ac:	ff 90       	pop	r15
    36ae:	ef 90       	pop	r14
    36b0:	df 90       	pop	r13
    36b2:	cf 90       	pop	r12
    36b4:	bf 90       	pop	r11
    36b6:	af 90       	pop	r10
    36b8:	9f 90       	pop	r9
    36ba:	8f 90       	pop	r8
    36bc:	7f 90       	pop	r7
    36be:	6f 90       	pop	r6
    36c0:	5f 90       	pop	r5
    36c2:	4f 90       	pop	r4
    36c4:	3f 90       	pop	r3
    36c6:	2f 90       	pop	r2
    36c8:	08 95       	ret

000036ca <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    36ca:	6f 92       	push	r6
    36cc:	7f 92       	push	r7
    36ce:	8f 92       	push	r8
    36d0:	9f 92       	push	r9
    36d2:	af 92       	push	r10
    36d4:	bf 92       	push	r11
    36d6:	cf 92       	push	r12
    36d8:	df 92       	push	r13
    36da:	ef 92       	push	r14
    36dc:	ff 92       	push	r15
    36de:	0f 93       	push	r16
    36e0:	1f 93       	push	r17
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
    36e6:	3c 01       	movw	r6, r24
    36e8:	4b 01       	movw	r8, r22
    36ea:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    36ec:	42 30       	cpi	r20, 0x02	; 2
    36ee:	51 05       	cpc	r21, r1
    36f0:	08 f4       	brcc	.+2      	; 0x36f4 <sysex_decode+0x2a>
    36f2:	6f c0       	rjmp	.+222    	; 0x37d2 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    36f4:	7a 01       	movw	r14, r20
    36f6:	f6 94       	lsr	r15
    36f8:	e7 94       	ror	r14
    36fa:	f6 94       	lsr	r15
    36fc:	e7 94       	ror	r14
    36fe:	f6 94       	lsr	r15
    3700:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3702:	e1 14       	cp	r14, r1
    3704:	f1 04       	cpc	r15, r1
    3706:	29 f1       	breq	.+74     	; 0x3752 <sysex_decode+0x88>
    3708:	eb 01       	movw	r28, r22
    370a:	b3 01       	movw	r22, r6
    370c:	00 e0       	ldi	r16, 0x00	; 0
    370e:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3710:	cc 24       	eor	r12, r12
    3712:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3714:	de 01       	movw	r26, r28
    3716:	11 96       	adiw	r26, 0x01	; 1
    3718:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    371a:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    371c:	2d 91       	ld	r18, X+
    371e:	2f 77       	andi	r18, 0x7F	; 127
    3720:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3722:	4f 5f       	subi	r20, 0xFF	; 255
    3724:	5f 4f       	sbci	r21, 0xFF	; 255
    3726:	88 81       	ld	r24, Y
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	04 2e       	mov	r0, r20
    372c:	02 c0       	rjmp	.+4      	; 0x3732 <sysex_decode+0x68>
    372e:	88 0f       	add	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	0a 94       	dec	r0
    3734:	e2 f7       	brpl	.-8      	; 0x372e <sysex_decode+0x64>
    3736:	80 78       	andi	r24, 0x80	; 128
    3738:	28 2b       	or	r18, r24
    373a:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    373c:	47 30       	cpi	r20, 0x07	; 7
    373e:	51 05       	cpc	r21, r1
    3740:	69 f7       	brne	.-38     	; 0x371c <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3742:	0f 5f       	subi	r16, 0xFF	; 255
    3744:	1f 4f       	sbci	r17, 0xFF	; 255
    3746:	28 96       	adiw	r28, 0x08	; 8
    3748:	69 5f       	subi	r22, 0xF9	; 249
    374a:	7f 4f       	sbci	r23, 0xFF	; 255
    374c:	0e 15       	cp	r16, r14
    374e:	1f 05       	cpc	r17, r15
    3750:	09 f7       	brne	.-62     	; 0x3714 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3752:	5a 2d       	mov	r21, r10
    3754:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3756:	99 f1       	breq	.+102    	; 0x37be <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3758:	e7 01       	movw	r28, r14
    375a:	cc 0f       	add	r28, r28
    375c:	dd 1f       	adc	r29, r29
    375e:	cc 0f       	add	r28, r28
    3760:	dd 1f       	adc	r29, r29
    3762:	cc 0f       	add	r28, r28
    3764:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3766:	8e 01       	movw	r16, r28
    3768:	0e 19       	sub	r16, r14
    376a:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    376c:	65 2f       	mov	r22, r21
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	61 50       	subi	r22, 0x01	; 1
    3772:	70 40       	sbci	r23, 0x00	; 0
    3774:	f9 f0       	breq	.+62     	; 0x37b4 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3776:	ce 01       	movw	r24, r28
    3778:	01 96       	adiw	r24, 0x01	; 1
    377a:	d4 01       	movw	r26, r8
    377c:	a8 0f       	add	r26, r24
    377e:	b9 1f       	adc	r27, r25
    3780:	f3 01       	movw	r30, r6
    3782:	e0 0f       	add	r30, r16
    3784:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    378a:	c8 0d       	add	r28, r8
    378c:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    378e:	4d 91       	ld	r20, X+
    3790:	4f 77       	andi	r20, 0x7F	; 127
    3792:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3794:	2f 5f       	subi	r18, 0xFF	; 255
    3796:	3f 4f       	sbci	r19, 0xFF	; 255
    3798:	88 81       	ld	r24, Y
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	02 2e       	mov	r0, r18
    379e:	02 c0       	rjmp	.+4      	; 0x37a4 <sysex_decode+0xda>
    37a0:	88 0f       	add	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	0a 94       	dec	r0
    37a6:	e2 f7       	brpl	.-8      	; 0x37a0 <sysex_decode+0xd6>
    37a8:	80 78       	andi	r24, 0x80	; 128
    37aa:	48 2b       	or	r20, r24
    37ac:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    37ae:	26 17       	cp	r18, r22
    37b0:	37 07       	cpc	r19, r23
    37b2:	68 f3       	brcs	.-38     	; 0x378e <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    37b4:	c8 01       	movw	r24, r16
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	85 0f       	add	r24, r21
    37ba:	91 1d       	adc	r25, r1
    37bc:	0c c0       	rjmp	.+24     	; 0x37d6 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    37be:	c7 01       	movw	r24, r14
    37c0:	88 0f       	add	r24, r24
    37c2:	99 1f       	adc	r25, r25
    37c4:	88 0f       	add	r24, r24
    37c6:	99 1f       	adc	r25, r25
    37c8:	88 0f       	add	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	8e 19       	sub	r24, r14
    37ce:	9f 09       	sbc	r25, r15
    37d0:	02 c0       	rjmp	.+4      	; 0x37d6 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	1f 91       	pop	r17
    37dc:	0f 91       	pop	r16
    37de:	ff 90       	pop	r15
    37e0:	ef 90       	pop	r14
    37e2:	df 90       	pop	r13
    37e4:	cf 90       	pop	r12
    37e6:	bf 90       	pop	r11
    37e8:	af 90       	pop	r10
    37ea:	9f 90       	pop	r9
    37ec:	8f 90       	pop	r8
    37ee:	7f 90       	pop	r7
    37f0:	6f 90       	pop	r6
    37f2:	08 95       	ret

000037f4 <__mulsi3>:
    37f4:	62 9f       	mul	r22, r18
    37f6:	d0 01       	movw	r26, r0
    37f8:	73 9f       	mul	r23, r19
    37fa:	f0 01       	movw	r30, r0
    37fc:	82 9f       	mul	r24, r18
    37fe:	e0 0d       	add	r30, r0
    3800:	f1 1d       	adc	r31, r1
    3802:	64 9f       	mul	r22, r20
    3804:	e0 0d       	add	r30, r0
    3806:	f1 1d       	adc	r31, r1
    3808:	92 9f       	mul	r25, r18
    380a:	f0 0d       	add	r31, r0
    380c:	83 9f       	mul	r24, r19
    380e:	f0 0d       	add	r31, r0
    3810:	74 9f       	mul	r23, r20
    3812:	f0 0d       	add	r31, r0
    3814:	65 9f       	mul	r22, r21
    3816:	f0 0d       	add	r31, r0
    3818:	99 27       	eor	r25, r25
    381a:	72 9f       	mul	r23, r18
    381c:	b0 0d       	add	r27, r0
    381e:	e1 1d       	adc	r30, r1
    3820:	f9 1f       	adc	r31, r25
    3822:	63 9f       	mul	r22, r19
    3824:	b0 0d       	add	r27, r0
    3826:	e1 1d       	adc	r30, r1
    3828:	f9 1f       	adc	r31, r25
    382a:	bd 01       	movw	r22, r26
    382c:	cf 01       	movw	r24, r30
    382e:	11 24       	eor	r1, r1
    3830:	08 95       	ret

00003832 <__udivmodhi4>:
    3832:	aa 1b       	sub	r26, r26
    3834:	bb 1b       	sub	r27, r27
    3836:	51 e1       	ldi	r21, 0x11	; 17
    3838:	07 c0       	rjmp	.+14     	; 0x3848 <__udivmodhi4_ep>

0000383a <__udivmodhi4_loop>:
    383a:	aa 1f       	adc	r26, r26
    383c:	bb 1f       	adc	r27, r27
    383e:	a6 17       	cp	r26, r22
    3840:	b7 07       	cpc	r27, r23
    3842:	10 f0       	brcs	.+4      	; 0x3848 <__udivmodhi4_ep>
    3844:	a6 1b       	sub	r26, r22
    3846:	b7 0b       	sbc	r27, r23

00003848 <__udivmodhi4_ep>:
    3848:	88 1f       	adc	r24, r24
    384a:	99 1f       	adc	r25, r25
    384c:	5a 95       	dec	r21
    384e:	a9 f7       	brne	.-22     	; 0x383a <__udivmodhi4_loop>
    3850:	80 95       	com	r24
    3852:	90 95       	com	r25
    3854:	bc 01       	movw	r22, r24
    3856:	cd 01       	movw	r24, r26
    3858:	08 95       	ret

0000385a <__divmodhi4>:
    385a:	97 fb       	bst	r25, 7
    385c:	09 2e       	mov	r0, r25
    385e:	07 26       	eor	r0, r23
    3860:	0a d0       	rcall	.+20     	; 0x3876 <__divmodhi4_neg1>
    3862:	77 fd       	sbrc	r23, 7
    3864:	04 d0       	rcall	.+8      	; 0x386e <__divmodhi4_neg2>
    3866:	e5 df       	rcall	.-54     	; 0x3832 <__udivmodhi4>
    3868:	06 d0       	rcall	.+12     	; 0x3876 <__divmodhi4_neg1>
    386a:	00 20       	and	r0, r0
    386c:	1a f4       	brpl	.+6      	; 0x3874 <__divmodhi4_exit>

0000386e <__divmodhi4_neg2>:
    386e:	70 95       	com	r23
    3870:	61 95       	neg	r22
    3872:	7f 4f       	sbci	r23, 0xFF	; 255

00003874 <__divmodhi4_exit>:
    3874:	08 95       	ret

00003876 <__divmodhi4_neg1>:
    3876:	f6 f7       	brtc	.-4      	; 0x3874 <__divmodhi4_exit>
    3878:	90 95       	com	r25
    387a:	81 95       	neg	r24
    387c:	9f 4f       	sbci	r25, 0xFF	; 255
    387e:	08 95       	ret

00003880 <memcpy>:
    3880:	fb 01       	movw	r30, r22
    3882:	dc 01       	movw	r26, r24
    3884:	02 c0       	rjmp	.+4      	; 0x388a <memcpy+0xa>
    3886:	01 90       	ld	r0, Z+
    3888:	0d 92       	st	X+, r0
    388a:	41 50       	subi	r20, 0x01	; 1
    388c:	50 40       	sbci	r21, 0x00	; 0
    388e:	d8 f7       	brcc	.-10     	; 0x3886 <memcpy+0x6>
    3890:	08 95       	ret

00003892 <memmove>:
    3892:	68 17       	cp	r22, r24
    3894:	79 07       	cpc	r23, r25
    3896:	68 f4       	brcc	.+26     	; 0x38b2 <memmove+0x20>
    3898:	fb 01       	movw	r30, r22
    389a:	dc 01       	movw	r26, r24
    389c:	e4 0f       	add	r30, r20
    389e:	f5 1f       	adc	r31, r21
    38a0:	a4 0f       	add	r26, r20
    38a2:	b5 1f       	adc	r27, r21
    38a4:	02 c0       	rjmp	.+4      	; 0x38aa <memmove+0x18>
    38a6:	02 90       	ld	r0, -Z
    38a8:	0e 92       	st	-X, r0
    38aa:	41 50       	subi	r20, 0x01	; 1
    38ac:	50 40       	sbci	r21, 0x00	; 0
    38ae:	d8 f7       	brcc	.-10     	; 0x38a6 <memmove+0x14>
    38b0:	08 95       	ret
    38b2:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <memcpy>

000038b6 <__eerd_block_m6450a>:
    38b6:	dc 01       	movw	r26, r24
    38b8:	cb 01       	movw	r24, r22

000038ba <__eerd_blraw_m6450a>:
    38ba:	fc 01       	movw	r30, r24
    38bc:	f9 99       	sbic	0x1f, 1	; 31
    38be:	fe cf       	rjmp	.-4      	; 0x38bc <__eerd_blraw_m6450a+0x2>
    38c0:	06 c0       	rjmp	.+12     	; 0x38ce <__eerd_blraw_m6450a+0x14>
    38c2:	f2 bd       	out	0x22, r31	; 34
    38c4:	e1 bd       	out	0x21, r30	; 33
    38c6:	f8 9a       	sbi	0x1f, 0	; 31
    38c8:	31 96       	adiw	r30, 0x01	; 1
    38ca:	00 b4       	in	r0, 0x20	; 32
    38cc:	0d 92       	st	X+, r0
    38ce:	41 50       	subi	r20, 0x01	; 1
    38d0:	50 40       	sbci	r21, 0x00	; 0
    38d2:	b8 f7       	brcc	.-18     	; 0x38c2 <__eerd_blraw_m6450a+0x8>
    38d4:	08 95       	ret

000038d6 <__eerd_word_m6450a>:
    38d6:	a8 e1       	ldi	r26, 0x18	; 24
    38d8:	b0 e0       	ldi	r27, 0x00	; 0
    38da:	42 e0       	ldi	r20, 0x02	; 2
    38dc:	50 e0       	ldi	r21, 0x00	; 0
    38de:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__eerd_blraw_m6450a>

000038e2 <__eeupd_block_m6450a>:
    38e2:	dc 01       	movw	r26, r24
    38e4:	a4 0f       	add	r26, r20
    38e6:	b5 1f       	adc	r27, r21
    38e8:	41 50       	subi	r20, 0x01	; 1
    38ea:	50 40       	sbci	r21, 0x00	; 0
    38ec:	48 f0       	brcs	.+18     	; 0x3900 <__eeupd_block_m6450a+0x1e>
    38ee:	cb 01       	movw	r24, r22
    38f0:	84 0f       	add	r24, r20
    38f2:	95 1f       	adc	r25, r21
    38f4:	2e 91       	ld	r18, -X
    38f6:	0e 94 82 1c 	call	0x3904	; 0x3904 <__eeupd_r18_m6450a>
    38fa:	41 50       	subi	r20, 0x01	; 1
    38fc:	50 40       	sbci	r21, 0x00	; 0
    38fe:	d0 f7       	brcc	.-12     	; 0x38f4 <__eeupd_block_m6450a+0x12>
    3900:	08 95       	ret

00003902 <__eeupd_byte_m6450a>:
    3902:	26 2f       	mov	r18, r22

00003904 <__eeupd_r18_m6450a>:
    3904:	f9 99       	sbic	0x1f, 1	; 31
    3906:	fe cf       	rjmp	.-4      	; 0x3904 <__eeupd_r18_m6450a>
    3908:	92 bd       	out	0x22, r25	; 34
    390a:	81 bd       	out	0x21, r24	; 33
    390c:	f8 9a       	sbi	0x1f, 0	; 31
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	00 b4       	in	r0, 0x20	; 32
    3912:	02 16       	cp	r0, r18
    3914:	31 f0       	breq	.+12     	; 0x3922 <__eeupd_r18_m6450a+0x1e>
    3916:	20 bd       	out	0x20, r18	; 32
    3918:	0f b6       	in	r0, 0x3f	; 63
    391a:	f8 94       	cli
    391c:	fa 9a       	sbi	0x1f, 2	; 31
    391e:	f9 9a       	sbi	0x1f, 1	; 31
    3920:	0f be       	out	0x3f, r0	; 63
    3922:	08 95       	ret

00003924 <__eeupd_word_m6450a>:
    3924:	01 96       	adiw	r24, 0x01	; 1
    3926:	27 2f       	mov	r18, r23
    3928:	0e 94 82 1c 	call	0x3904	; 0x3904 <__eeupd_r18_m6450a>
    392c:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__eeupd_byte_m6450a>

00003930 <_exit>:
    3930:	f8 94       	cli

00003932 <__stop_program>:
    3932:	ff cf       	rjmp	.-2      	; 0x3932 <__stop_program>
