
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  0000339c  00003450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000339c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f4  00800294  00800294  000035e4  2**0
                  ALLOC
  3 .eeprom       00000776  00810000  00810000  000035e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00003d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00004c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000056c9  00000000  00000000  00004f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014df  00000000  00000000  0000a619  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d73  00000000  00000000  0000baf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c00  00000000  00000000  0000d86c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001777  00000000  00000000  0000e46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002aed  00000000  00000000  0000fbe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  000126d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_9>
      28:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ec e9       	ldi	r30, 0x9C	; 156
      78:	f3 e3       	ldi	r31, 0x33	; 51
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a4 e9       	ldi	r26, 0x94	; 148
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a8 38       	cpi	r26, 0x88	; 136
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <main>
      9a:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 94 02 	lds	r24, 0x0294
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 7d 19 	call	0x32fa	; 0x32fa <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 94 02 	sts	0x0294, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 7d 19 	call	0x32fa	; 0x32fa <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 94 02 	sts	0x0294, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 94 02 	sts	0x0294, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1f6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1f8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1fa:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1fe:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     200:	8c 91       	ld	r24, X
     202:	87 70       	andi	r24, 0x07	; 7
     204:	82 b9       	out	0x02, r24	; 2
     206:	66 e0       	ldi	r22, 0x06	; 6
     208:	6a 95       	dec	r22
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x12>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     20e:	ea ed       	ldi	r30, 0xDA	; 218
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	40 81       	ld	r20, Z
     214:	8c 91       	ld	r24, X
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	86 95       	lsr	r24
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	b9 01       	movw	r22, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <set_control_voltage+0x34>
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <set_control_voltage+0x30>
     22e:	cb 01       	movw	r24, r22
     230:	84 2b       	or	r24, r20
     232:	80 83       	st	Z, r24
     234:	76 e0       	ldi	r23, 0x06	; 6
     236:	7a 95       	dec	r23
     238:	f1 f7       	brne	.-4      	; 0x236 <set_control_voltage+0x40>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     23c:	80 81       	ld	r24, Z
     23e:	9c 91       	ld	r25, X
     240:	96 95       	lsr	r25
     242:	96 95       	lsr	r25
     244:	96 95       	lsr	r25
     246:	97 70       	andi	r25, 0x07	; 7
     248:	02 c0       	rjmp	.+4      	; 0x24e <set_control_voltage+0x58>
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	9a 95       	dec	r25
     250:	e2 f7       	brpl	.-8      	; 0x24a <set_control_voltage+0x54>
     252:	20 95       	com	r18
     254:	28 23       	and	r18, r24
     256:	20 83       	st	Z, r18
	
}	
     258:	08 95       	ret

0000025a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     25a:	83 b3       	in	r24, 0x13	; 19
     25c:	83 60       	ori	r24, 0x03	; 3
     25e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     264:	97 b1       	in	r25, 0x07	; 7
     266:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     268:	e9 ed       	ldi	r30, 0xD9	; 217
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     272:	ea ed       	ldi	r30, 0xDA	; 218
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     27c:	84 b3       	in	r24, 0x14	; 20
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     282:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     284:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     286:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     288:	a0 9a       	sbi	0x14, 0	; 20
}
     28a:	08 95       	ret

0000028c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t place)
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2e 97       	sbiw	r28, 0x0e	; 14
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ac 01       	movw	r20, r24
	
	uint8_t digit[] = {
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	8a 83       	std	Y+2, r24	; 0x02
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	8b 83       	std	Y+3, r24	; 0x03
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	8c 83       	std	Y+4, r24	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2b6:	de 01       	movw	r26, r28
     2b8:	15 96       	adiw	r26, 0x05	; 5
     2ba:	e7 ee       	ldi	r30, 0xE7	; 231
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <display_dec+0x34>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2cc:	ea ed       	ldi	r30, 0xDA	; 218
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d6:	80 81       	ld	r24, Z
     2d8:	8f 7e       	andi	r24, 0xEF	; 239
     2da:	80 83       	st	Z, r24
	
	//set anode bit
	DATA_BUS = digit[place];
     2dc:	06 2f       	mov	r16, r22
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	de 01       	movw	r26, r28
     2e2:	a0 0f       	add	r26, r16
     2e4:	b1 1f       	adc	r27, r17
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	8c 91       	ld	r24, X
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	82 b9       	out	0x02, r24	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2ee:	80 81       	ld	r24, Z
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	80 83       	st	Z, r24
	//if (number > 999) {
	//number = 999;
	//}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     2fa:	ca 01       	movw	r24, r20
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	9a 01       	movw	r18, r20
     306:	36 95       	lsr	r19
     308:	27 95       	ror	r18
     30a:	28 0f       	add	r18, r24
     30c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     30e:	c9 01       	movw	r24, r18
     310:	92 95       	swap	r25
     312:	82 95       	swap	r24
     314:	8f 70       	andi	r24, 0x0F	; 15
     316:	89 27       	eor	r24, r25
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	89 27       	eor	r24, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     320:	29 2f       	mov	r18, r25
     322:	33 27       	eor	r19, r19
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
	r = number - q2 * 10;
     334:	28 2f       	mov	r18, r24
     336:	22 0f       	add	r18, r18
     338:	32 2f       	mov	r19, r18
     33a:	33 0f       	add	r19, r19
     33c:	33 0f       	add	r19, r19
     33e:	23 0f       	add	r18, r19
     340:	e4 2f       	mov	r30, r20
     342:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	ea 30       	cpi	r30, 0x0A	; 10
     34a:	10 f4       	brcc	.+4      	; 0x350 <display_dec+0xc4>
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	68 0f       	add	r22, r24
     352:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     354:	9b 01       	movw	r18, r22
     356:	36 95       	lsr	r19
     358:	27 95       	ror	r18
     35a:	36 95       	lsr	r19
     35c:	27 95       	ror	r18
     35e:	ab 01       	movw	r20, r22
     360:	56 95       	lsr	r21
     362:	47 95       	ror	r20
     364:	24 0f       	add	r18, r20
     366:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     368:	c9 01       	movw	r24, r18
     36a:	92 95       	swap	r25
     36c:	82 95       	swap	r24
     36e:	8f 70       	andi	r24, 0x0F	; 15
     370:	89 27       	eor	r24, r25
     372:	9f 70       	andi	r25, 0x0F	; 15
     374:	89 27       	eor	r24, r25
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     37a:	29 2f       	mov	r18, r25
     37c:	33 27       	eor	r19, r19
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
	r = qa - q3 * 10;
     38e:	98 2f       	mov	r25, r24
     390:	99 0f       	add	r25, r25
     392:	29 2f       	mov	r18, r25
     394:	22 0f       	add	r18, r18
     396:	22 0f       	add	r18, r18
     398:	92 0f       	add	r25, r18
     39a:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	6a 30       	cpi	r22, 0x0A	; 10
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <display_dec+0x118>
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3a6:	41 ef       	ldi	r20, 0xF1	; 241
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	da 01       	movw	r26, r20
     3ac:	a6 0f       	add	r26, r22
     3ae:	b1 1d       	adc	r27, r1
     3b0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3b2:	28 2f       	mov	r18, r24
     3b4:	26 95       	lsr	r18
     3b6:	26 95       	lsr	r18
     3b8:	98 2f       	mov	r25, r24
     3ba:	96 95       	lsr	r25
     3bc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3be:	29 2f       	mov	r18, r25
     3c0:	22 95       	swap	r18
     3c2:	2f 70       	andi	r18, 0x0F	; 15
     3c4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 0f       	add	r18, r18
     3d0:	62 2f       	mov	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	66 0f       	add	r22, r22
     3d6:	26 0f       	add	r18, r22
     3d8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3da:	da 01       	movw	r26, r20
     3dc:	a8 0f       	add	r26, r24
     3de:	b1 1d       	adc	r27, r1
     3e0:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3e2:	4e 0f       	add	r20, r30
     3e4:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3e6:	fa 01       	movw	r30, r20
     3e8:	40 81       	ld	r20, Z
     3ea:	40 93 97 02 	sts	0x0297, r20
	digit_index[1] = tens_place;
     3ee:	30 93 98 02 	sts	0x0298, r19
	digit_index[2] = hunds_place;
     3f2:	20 93 99 02 	sts	0x0299, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	8a 30       	cpi	r24, 0x0A	; 10
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <display_dec+0x172>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     400:	90 93 9a 02 	sts	0x029A, r25

	cathode_byte = dec[digit_index[place]];
     404:	f8 01       	movw	r30, r16
     406:	e9 56       	subi	r30, 0x69	; 105
     408:	fd 4f       	sbci	r31, 0xFD	; 253
     40a:	80 81       	ld	r24, Z
     40c:	fe 01       	movw	r30, r28
     40e:	e8 0f       	add	r30, r24
     410:	f1 1d       	adc	r31, r1
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     412:	85 81       	ldd	r24, Z+5	; 0x05
     414:	80 95       	com	r24
     416:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     418:	ea ed       	ldi	r30, 0xDA	; 218
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     422:	80 81       	ld	r24, Z
     424:	8f 7e       	andi	r24, 0xEF	; 239
     426:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     428:	2e 96       	adiw	r28, 0x0e	; 14
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret

0000043e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     43e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     440:	66 23       	and	r22, r22
     442:	69 f4       	brne	.+26     	; 0x45e <update_display+0x20>

		
			
		display_dec(number, place);
     444:	c0 91 9b 02 	lds	r28, 0x029B
     448:	6c 2f       	mov	r22, r28
     44a:	0e 94 46 01 	call	0x28c	; 0x28c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     44e:	8c 2f       	mov	r24, r28
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	80 93 9b 02 	sts	0x029B, r24
     456:	c3 30       	cpi	r28, 0x03	; 3
     458:	11 f4       	brne	.+4      	; 0x45e <update_display+0x20>
		{
			place = 0;
     45a:	10 92 9b 02 	sts	0x029B, r1
		
		
	}
	
	
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	8f 93       	push	r24
     46e:	9f 93       	push	r25
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     474:	80 91 95 03 	lds	r24, 0x0395
     478:	81 50       	subi	r24, 0x01	; 1
     47a:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     47c:	80 91 96 03 	lds	r24, 0x0396
     480:	88 23       	and	r24, r24
     482:	a1 f4       	brne	.+40     	; 0x4ac <__vector_10+0x4a>
		count_finished = FALSE;
     484:	10 92 93 03 	sts	0x0393, r1
		no_overflow = TRUE;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 92 02 	sts	0x0292, r24
		period_counter = 1; //set period counter to 1
     48e:	80 93 96 03 	sts	0x0396, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     492:	e1 e8       	ldi	r30, 0x81	; 129
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	90 91 94 03 	lds	r25, 0x0394
     49c:	89 2b       	or	r24, r25
     49e:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4a0:	ef e6       	ldi	r30, 0x6F	; 111
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	81 60       	ori	r24, 0x01	; 1
     4a8:	80 83       	st	Z, r24
     4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4ac:	e4 e8       	ldi	r30, 0x84	; 132
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	90 93 92 03 	sts	0x0392, r25
     4b8:	80 93 91 03 	sts	0x0391, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4bc:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 93 03 	sts	0x0393, r24
		period_counter = 0;
     4c6:	10 92 96 03 	sts	0x0396, r1
		TCNT1 = 0; //reset timer/counter 1
     4ca:	11 82       	std	Z+1, r1	; 0x01
     4cc:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	9f 91       	pop	r25
     4d4:	8f 91       	pop	r24
     4d6:	0f 90       	pop	r0
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	0f 90       	pop	r0
     4dc:	1f 90       	pop	r1
     4de:	18 95       	reti

000004e0 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     4ea:	10 92 92 02 	sts	0x0292, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     4f8:	84 2f       	mov	r24, r20
	remove_note(note);
     4fa:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     4fe:	80 91 9d 02 	lds	r24, 0x029D
     502:	81 50       	subi	r24, 0x01	; 1
     504:	80 93 9d 02 	sts	0x029D, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     508:	88 23       	and	r24, r24
     50a:	09 f4       	brne	.+2      	; 0x50e <note_off_event+0x16>
     50c:	89 98       	cbi	0x11, 1	; 17
     50e:	08 95       	ret

00000510 <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     510:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     512:	40 93 dc 02 	sts	0x02DC, r20
	if (velocity == 0) {
     516:	22 23       	and	r18, r18
     518:	59 f4       	brne	.+22     	; 0x530 <note_on_event+0x20>
		remove_note(note);
     51a:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     51e:	80 91 9d 02 	lds	r24, 0x029D
     522:	81 50       	subi	r24, 0x01	; 1
     524:	80 93 9d 02 	sts	0x029D, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     528:	88 23       	and	r24, r24
     52a:	59 f4       	brne	.+22     	; 0x542 <note_on_event+0x32>
     52c:	89 98       	cbi	0x11, 1	; 17
     52e:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     530:	62 2f       	mov	r22, r18
     532:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     536:	80 91 9d 02 	lds	r24, 0x029D
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 93 9d 02 	sts	0x029D, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     540:	89 9a       	sbi	0x11, 1	; 17
     542:	08 95       	ret

00000544 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     544:	87 e2       	ldi	r24, 0x27	; 39
     546:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     54a:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     54e:	88 e9       	ldi	r24, 0x98	; 152
     550:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     554:	08 95       	ret

00000556 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	3f 93       	push	r19
     564:	4f 93       	push	r20
     566:	5f 93       	push	r21
     568:	6f 93       	push	r22
     56a:	7f 93       	push	r23
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
     570:	af 93       	push	r26
     572:	bf 93       	push	r27
     574:	ef 93       	push	r30
     576:	ff 93       	push	r31
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	0f 92       	push	r0
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     582:	80 91 c6 00 	lds	r24, 0x00C6
     586:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     588:	8b e9       	ldi	r24, 0x9B	; 155
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	ae 01       	movw	r20, r28
     590:	4f 5f       	subi	r20, 0xFF	; 255
     592:	5f 4f       	sbci	r21, 0xFF	; 255
     594:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	ff 91       	pop	r31
     5a0:	ef 91       	pop	r30
     5a2:	bf 91       	pop	r27
     5a4:	af 91       	pop	r26
     5a6:	9f 91       	pop	r25
     5a8:	8f 91       	pop	r24
     5aa:	7f 91       	pop	r23
     5ac:	6f 91       	pop	r22
     5ae:	5f 91       	pop	r21
     5b0:	4f 91       	pop	r20
     5b2:	3f 91       	pop	r19
     5b4:	2f 91       	pop	r18
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     5c0:	c0 e8       	ldi	r28, 0x80	; 128
     5c2:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     5c4:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     5c6:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     5c8:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     5ca:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     5cc:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     5ce:	0e 94 b1 05 	call	0xb62	; 0xb62 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     5d2:	a9 ed       	ldi	r26, 0xD9	; 217
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	8c 91       	ld	r24, X
     5d8:	80 6c       	ori	r24, 0xC0	; 192
     5da:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     5dc:	ea ed       	ldi	r30, 0xDA	; 218
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 6c       	ori	r24, 0xC0	; 192
     5e4:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     5e6:	81 b1       	in	r24, 0x01	; 1
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     5ec:	92 b1       	in	r25, 0x02	; 2
     5ee:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     5f0:	8c 91       	ld	r24, X
     5f2:	80 63       	ori	r24, 0x30	; 48
     5f4:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     5f6:	80 81       	ld	r24, Z
     5f8:	8f 7c       	andi	r24, 0xCF	; 207
     5fa:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     5fc:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     5fe:	ec ed       	ldi	r30, 0xDC	; 220
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	80 62       	ori	r24, 0x20	; 32
     606:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     608:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     60a:	ed ed       	ldi	r30, 0xDD	; 221
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	80 62       	ori	r24, 0x20	; 32
     612:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     614:	80 81       	ld	r24, Z
     616:	8f 7d       	andi	r24, 0xDF	; 223
     618:	80 83       	st	Z, r24
	DATA_BUS = 0;
     61a:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     61c:	c0 93 20 03 	sts	0x0320, r28
	
	//setup ADC
    setup_adc();		
     620:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     624:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     628:	cb e9       	ldi	r28, 0x9B	; 155
     62a:	d3 e0       	ldi	r29, 0x03	; 3
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     632:	ce 01       	movw	r24, r28
     634:	68 e8       	ldi	r22, 0x88	; 136
     636:	72 e0       	ldi	r23, 0x02	; 2
     638:	0e 94 c1 14 	call	0x2982	; 0x2982 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     63c:	ce 01       	movw	r24, r28
     63e:	6c e7       	ldi	r22, 0x7C	; 124
     640:	72 e0       	ldi	r23, 0x02	; 2
     642:	0e 94 c5 14 	call	0x298a	; 0x298a <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     646:	0e 94 a2 02 	call	0x544	; 0x544 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     64a:	0e 94 d6 05 	call	0xbac	; 0xbac <update_spi>
	
	
	current_patch.number = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 24 03 	sts	0x0324, r24
		
	sei(); //enable global interrupts
     654:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     656:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
     65a:	81 e4       	ldi	r24, 0x41	; 65
     65c:	80 93 97 03 	sts	0x0397, r24
	current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
     660:	82 e2       	ldi	r24, 0x22	; 34
     662:	80 93 22 03 	sts	0x0322, r24
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     666:	8e 01       	movw	r16, r28
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     668:	0f 2e       	mov	r0, r31
     66a:	f9 e9       	ldi	r31, 0x99	; 153
     66c:	ef 2e       	mov	r14, r31
     66e:	f3 e0       	ldi	r31, 0x03	; 3
     670:	ff 2e       	mov	r15, r31
     672:	f0 2d       	mov	r31, r0
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     674:	c8 01       	movw	r24, r16
     676:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     67a:	80 91 fd 01 	lds	r24, 0x01FD
     67e:	90 91 fe 01 	lds	r25, 0x01FE
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     688:	0e 94 5e 03 	call	0x6bc	; 0x6bc <scan_pots>
		update_control_voltages();
     68c:	0e 94 c4 03 	call	0x788	; 0x788 <update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     690:	80 91 9c 02 	lds	r24, 0x029C
     694:	98 2f       	mov	r25, r24
     696:	9f 5f       	subi	r25, 0xFF	; 255
     698:	90 93 9c 02 	sts	0x029C, r25
     69c:	85 30       	cpi	r24, 0x05	; 5
     69e:	51 f7       	brne	.-44     	; 0x674 <main+0xb4>
		{
			switch_timer = 0;
     6a0:	10 92 9c 02 	sts	0x029C, r1
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     6a4:	f7 01       	movw	r30, r14
     6a6:	c0 81       	ld	r28, Z
     6a8:	0e 94 02 12 	call	0x2404	; 0x2404 <read_switch_port>
     6ac:	8c 27       	eor	r24, r28
     6ae:	f7 01       	movw	r30, r14
     6b0:	80 83       	st	Z, r24
			update_spi();
     6b2:	0e 94 d6 05 	call	0xbac	; 0xbac <update_spi>
			refresh_synth();
     6b6:	0e 94 12 0b 	call	0x1624	; 0x1624 <refresh_synth>
     6ba:	dc cf       	rjmp	.-72     	; 0x674 <main+0xb4>

000006bc <scan_pots>:
	//&release_2_cv,
	//&release_1_cv
	//}; 
	
	
void scan_pots(void) { //should probably move this to adc.c
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	c0 e0       	ldi	r28, 0x00	; 0
     6ce:	d1 e0       	ldi	r29, 0x01	; 1
     6d0:	03 ee       	ldi	r16, 0xE3	; 227
     6d2:	12 e0       	ldi	r17, 0x02	; 2
     6d4:	0f 2e       	mov	r0, r31
     6d6:	fc e3       	ldi	r31, 0x3C	; 60
     6d8:	cf 2e       	mov	r12, r31
     6da:	dd 24       	eor	r13, r13
     6dc:	f0 2d       	mov	r31, r0
     6de:	cc 0e       	add	r12, r28
     6e0:	dd 1e       	adc	r13, r29
     6e2:	7e 01       	movw	r14, r28
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     6e4:	88 81       	ld	r24, Y
     6e6:	99 81       	ldd	r25, Y+1	; 0x01
     6e8:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     6ec:	90 93 de 02 	sts	0x02DE, r25
     6f0:	80 93 dd 02 	sts	0x02DD, r24
		adc_change = adc_value - pot_id[i]->value;
     6f4:	e9 91       	ld	r30, Y+
     6f6:	f9 91       	ld	r31, Y+
     6f8:	40 81       	ld	r20, Z
     6fa:	21 81       	ldd	r18, Z+1	; 0x01
     6fc:	52 2f       	mov	r21, r18
     6fe:	53 70       	andi	r21, 0x03	; 3
     700:	84 1b       	sub	r24, r20
     702:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     704:	95 95       	asr	r25
     706:	87 95       	ror	r24
     708:	95 95       	asr	r25
     70a:	87 95       	ror	r24
     70c:	84 0f       	add	r24, r20
     70e:	95 1f       	adc	r25, r21
     710:	80 83       	st	Z, r24
     712:	89 2f       	mov	r24, r25
     714:	83 70       	andi	r24, 0x03	; 3
     716:	2c 7f       	andi	r18, 0xFC	; 252
     718:	28 2b       	or	r18, r24
     71a:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		//otherwise, the pot value is assigned to it's corresponding parameter in the current_patch struct:
		*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     71c:	d7 01       	movw	r26, r14
     71e:	ed 91       	ld	r30, X+
     720:	fc 91       	ld	r31, X
     722:	11 97       	sbiw	r26, 0x01	; 1
     724:	90 81       	ld	r25, Z
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	83 70       	andi	r24, 0x03	; 3
     72a:	f8 01       	movw	r30, r16
     72c:	90 83       	st	Z, r25
     72e:	81 83       	std	Z+1, r24	; 0x01
     730:	0e 5f       	subi	r16, 0xFE	; 254
     732:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     734:	cc 15       	cp	r28, r12
     736:	dd 05       	cpc	r29, r13
     738:	a1 f6       	brne	.-88     	; 0x6e2 <scan_pots+0x26>
		*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     73a:	8c e7       	ldi	r24, 0x7C	; 124
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     742:	90 93 de 02 	sts	0x02DE, r25
     746:	80 93 dd 02 	sts	0x02DD, r24
	adc_change = adc_value - volume_pot.value;
     74a:	20 91 7c 01 	lds	r18, 0x017C
     74e:	40 91 7d 01 	lds	r20, 0x017D
     752:	34 2f       	mov	r19, r20
     754:	33 70       	andi	r19, 0x03	; 3
     756:	82 1b       	sub	r24, r18
     758:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     75a:	95 95       	asr	r25
     75c:	87 95       	ror	r24
     75e:	95 95       	asr	r25
     760:	87 95       	ror	r24
     762:	28 0f       	add	r18, r24
     764:	39 1f       	adc	r19, r25
     766:	20 93 7c 01 	sts	0x017C, r18
     76a:	83 2f       	mov	r24, r19
     76c:	83 70       	andi	r24, 0x03	; 3
     76e:	4c 7f       	andi	r20, 0xFC	; 252
     770:	48 2b       	or	r20, r24
     772:	40 93 7d 01 	sts	0x017D, r20
	
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	08 95       	ret

00000788 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     78c:	60 91 e3 02 	lds	r22, 0x02E3
     790:	70 91 e4 02 	lds	r23, 0x02E4
     794:	62 95       	swap	r22
     796:	72 95       	swap	r23
     798:	70 7f       	andi	r23, 0xF0	; 240
     79a:	76 27       	eor	r23, r22
     79c:	60 7f       	andi	r22, 0xF0	; 240
     79e:	76 27       	eor	r23, r22
     7a0:	84 ee       	ldi	r24, 0xE4	; 228
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     7a8:	60 91 e5 02 	lds	r22, 0x02E5
     7ac:	70 91 e6 02 	lds	r23, 0x02E6
     7b0:	62 95       	swap	r22
     7b2:	72 95       	swap	r23
     7b4:	70 7f       	andi	r23, 0xF0	; 240
     7b6:	76 27       	eor	r23, r22
     7b8:	60 7f       	andi	r22, 0xF0	; 240
     7ba:	76 27       	eor	r23, r22
     7bc:	83 ee       	ldi	r24, 0xE3	; 227
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     7c4:	60 91 e7 02 	lds	r22, 0x02E7
     7c8:	70 91 e8 02 	lds	r23, 0x02E8
     7cc:	66 0f       	add	r22, r22
     7ce:	77 1f       	adc	r23, r23
     7d0:	66 0f       	add	r22, r22
     7d2:	77 1f       	adc	r23, r23
     7d4:	66 0f       	add	r22, r22
     7d6:	77 1f       	adc	r23, r23
     7d8:	82 ee       	ldi	r24, 0xE2	; 226
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     7e0:	60 91 e9 02 	lds	r22, 0x02E9
     7e4:	70 91 ea 02 	lds	r23, 0x02EA
     7e8:	62 95       	swap	r22
     7ea:	72 95       	swap	r23
     7ec:	70 7f       	andi	r23, 0xF0	; 240
     7ee:	76 27       	eor	r23, r22
     7f0:	60 7f       	andi	r22, 0xF0	; 240
     7f2:	76 27       	eor	r23, r22
     7f4:	86 e9       	ldi	r24, 0x96	; 150
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     7fc:	60 91 eb 02 	lds	r22, 0x02EB
     800:	70 91 ec 02 	lds	r23, 0x02EC
     804:	66 0f       	add	r22, r22
     806:	77 1f       	adc	r23, r23
     808:	66 0f       	add	r22, r22
     80a:	77 1f       	adc	r23, r23
     80c:	66 0f       	add	r22, r22
     80e:	77 1f       	adc	r23, r23
     810:	81 ee       	ldi	r24, 0xE1	; 225
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     818:	60 91 ed 02 	lds	r22, 0x02ED
     81c:	70 91 ee 02 	lds	r23, 0x02EE
     820:	62 95       	swap	r22
     822:	72 95       	swap	r23
     824:	70 7f       	andi	r23, 0xF0	; 240
     826:	76 27       	eor	r23, r22
     828:	60 7f       	andi	r22, 0xF0	; 240
     82a:	76 27       	eor	r23, r22
     82c:	80 ee       	ldi	r24, 0xE0	; 224
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     834:	60 91 ef 02 	lds	r22, 0x02EF
     838:	70 91 f0 02 	lds	r23, 0x02F0
     83c:	62 95       	swap	r22
     83e:	72 95       	swap	r23
     840:	70 7f       	andi	r23, 0xF0	; 240
     842:	76 27       	eor	r23, r22
     844:	60 7f       	andi	r22, 0xF0	; 240
     846:	76 27       	eor	r23, r22
     848:	8f ed       	ldi	r24, 0xDF	; 223
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     850:	60 91 f1 02 	lds	r22, 0x02F1
     854:	70 91 f2 02 	lds	r23, 0x02F2
     858:	62 95       	swap	r22
     85a:	72 95       	swap	r23
     85c:	70 7f       	andi	r23, 0xF0	; 240
     85e:	76 27       	eor	r23, r22
     860:	60 7f       	andi	r22, 0xF0	; 240
     862:	76 27       	eor	r23, r22
     864:	8e ed       	ldi	r24, 0xDE	; 222
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     86c:	80 91 f5 02 	lds	r24, 0x02F5
     870:	90 91 f6 02 	lds	r25, 0x02F6
     874:	c0 e0       	ldi	r28, 0x00	; 0
     876:	d2 e0       	ldi	r29, 0x02	; 2
     878:	c8 1b       	sub	r28, r24
     87a:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     87c:	60 91 8c 03 	lds	r22, 0x038C
     880:	70 91 8d 03 	lds	r23, 0x038D
     884:	60 50       	subi	r22, 0x00	; 0
     886:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     888:	80 91 f3 02 	lds	r24, 0x02F3
     88c:	90 91 f4 02 	lds	r25, 0x02F4
     890:	68 1b       	sub	r22, r24
     892:	79 0b       	sbc	r23, r25
     894:	6c 0f       	add	r22, r28
     896:	7d 1f       	adc	r23, r29
     898:	8d ed       	ldi	r24, 0xDD	; 221
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     8a0:	60 91 8e 03 	lds	r22, 0x038E
     8a4:	70 91 8f 03 	lds	r23, 0x038F
     8a8:	6c 0f       	add	r22, r28
     8aa:	7d 1f       	adc	r23, r29
     8ac:	8c ed       	ldi	r24, 0xDC	; 220
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     8b4:	60 91 f7 02 	lds	r22, 0x02F7
     8b8:	70 91 f8 02 	lds	r23, 0x02F8
     8bc:	62 95       	swap	r22
     8be:	72 95       	swap	r23
     8c0:	70 7f       	andi	r23, 0xF0	; 240
     8c2:	76 27       	eor	r23, r22
     8c4:	60 7f       	andi	r22, 0xF0	; 240
     8c6:	76 27       	eor	r23, r22
     8c8:	8b ed       	ldi	r24, 0xDB	; 219
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     8d0:	60 91 fb 02 	lds	r22, 0x02FB
     8d4:	70 91 fc 02 	lds	r23, 0x02FC
     8d8:	62 95       	swap	r22
     8da:	72 95       	swap	r23
     8dc:	70 7f       	andi	r23, 0xF0	; 240
     8de:	76 27       	eor	r23, r22
     8e0:	60 7f       	andi	r22, 0xF0	; 240
     8e2:	76 27       	eor	r23, r22
     8e4:	8a ed       	ldi	r24, 0xDA	; 218
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     8ec:	60 91 fd 02 	lds	r22, 0x02FD
     8f0:	70 91 fe 02 	lds	r23, 0x02FE
     8f4:	62 95       	swap	r22
     8f6:	72 95       	swap	r23
     8f8:	70 7f       	andi	r23, 0xF0	; 240
     8fa:	76 27       	eor	r23, r22
     8fc:	60 7f       	andi	r22, 0xF0	; 240
     8fe:	76 27       	eor	r23, r22
     900:	89 ed       	ldi	r24, 0xD9	; 217
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     908:	60 91 7c 01 	lds	r22, 0x017C
     90c:	80 91 7d 01 	lds	r24, 0x017D
     910:	78 2f       	mov	r23, r24
     912:	73 70       	andi	r23, 0x03	; 3
     914:	62 95       	swap	r22
     916:	72 95       	swap	r23
     918:	70 7f       	andi	r23, 0xF0	; 240
     91a:	76 27       	eor	r23, r22
     91c:	60 7f       	andi	r22, 0xF0	; 240
     91e:	76 27       	eor	r23, r22
     920:	88 ed       	ldi	r24, 0xD8	; 216
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     928:	60 91 ff 02 	lds	r22, 0x02FF
     92c:	70 91 00 03 	lds	r23, 0x0300
     930:	62 95       	swap	r22
     932:	72 95       	swap	r23
     934:	70 7f       	andi	r23, 0xF0	; 240
     936:	76 27       	eor	r23, r22
     938:	60 7f       	andi	r22, 0xF0	; 240
     93a:	76 27       	eor	r23, r22
     93c:	87 ed       	ldi	r24, 0xD7	; 215
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     944:	60 91 01 03 	lds	r22, 0x0301
     948:	70 91 02 03 	lds	r23, 0x0302
     94c:	62 95       	swap	r22
     94e:	72 95       	swap	r23
     950:	70 7f       	andi	r23, 0xF0	; 240
     952:	76 27       	eor	r23, r22
     954:	60 7f       	andi	r22, 0xF0	; 240
     956:	76 27       	eor	r23, r22
     958:	86 ed       	ldi	r24, 0xD6	; 214
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     960:	60 91 03 03 	lds	r22, 0x0303
     964:	70 91 04 03 	lds	r23, 0x0304
     968:	62 95       	swap	r22
     96a:	72 95       	swap	r23
     96c:	70 7f       	andi	r23, 0xF0	; 240
     96e:	76 27       	eor	r23, r22
     970:	60 7f       	andi	r22, 0xF0	; 240
     972:	76 27       	eor	r23, r22
     974:	85 ed       	ldi	r24, 0xD5	; 213
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     97c:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     980:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     982:	88 30       	cpi	r24, 0x08	; 8
     984:	08 f4       	brcc	.+2      	; 0x988 <update_control_voltages+0x200>
     986:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = note;
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     988:	8c 2f       	mov	r24, r28
     98a:	88 50       	subi	r24, 0x08	; 8
     98c:	68 e2       	ldi	r22, 0x28	; 40
     98e:	73 e0       	ldi	r23, 0x03	; 3
     990:	0e 94 a4 11 	call	0x2348	; 0x2348 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     994:	bc 01       	movw	r22, r24
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	20 91 07 03 	lds	r18, 0x0307
     99e:	30 91 08 03 	lds	r19, 0x0308
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	0e 94 2e 19 	call	0x325c	; 0x325c <__mulsi3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	07 2e       	mov	r0, r23
     9b0:	7a e0       	ldi	r23, 0x0A	; 10
     9b2:	b6 95       	lsr	r27
     9b4:	a7 95       	ror	r26
     9b6:	97 95       	ror	r25
     9b8:	87 95       	ror	r24
     9ba:	7a 95       	dec	r23
     9bc:	d1 f7       	brne	.-12     	; 0x9b2 <update_control_voltages+0x22a>
     9be:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     9c0:	60 91 05 03 	lds	r22, 0x0305
     9c4:	70 91 06 03 	lds	r23, 0x0306
     9c8:	62 95       	swap	r22
     9ca:	72 95       	swap	r23
     9cc:	70 7f       	andi	r23, 0xF0	; 240
     9ce:	76 27       	eor	r23, r22
     9d0:	60 7f       	andi	r22, 0xF0	; 240
     9d2:	76 27       	eor	r23, r22
     9d4:	86 0f       	add	r24, r22
     9d6:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     9d8:	bc 01       	movw	r22, r24
     9da:	80 e4       	ldi	r24, 0x40	; 64
     9dc:	60 30       	cpi	r22, 0x00	; 0
     9de:	78 07       	cpc	r23, r24
     9e0:	10 f0       	brcs	.+4      	; 0x9e6 <update_control_voltages+0x25e>
     9e2:	6f ef       	ldi	r22, 0xFF	; 255
     9e4:	7f e3       	ldi	r23, 0x3F	; 63
     9e6:	84 ed       	ldi	r24, 0xD4	; 212
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     9ee:	60 91 09 03 	lds	r22, 0x0309
     9f2:	70 91 0a 03 	lds	r23, 0x030A
     9f6:	62 95       	swap	r22
     9f8:	72 95       	swap	r23
     9fa:	70 7f       	andi	r23, 0xF0	; 240
     9fc:	76 27       	eor	r23, r22
     9fe:	60 7f       	andi	r22, 0xF0	; 240
     a00:	76 27       	eor	r23, r22
     a02:	82 ed       	ldi	r24, 0xD2	; 210
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     a0a:	60 91 0b 03 	lds	r22, 0x030B
     a0e:	70 91 0c 03 	lds	r23, 0x030C
     a12:	62 95       	swap	r22
     a14:	72 95       	swap	r23
     a16:	70 7f       	andi	r23, 0xF0	; 240
     a18:	76 27       	eor	r23, r22
     a1a:	60 7f       	andi	r22, 0xF0	; 240
     a1c:	76 27       	eor	r23, r22
     a1e:	81 ed       	ldi	r24, 0xD1	; 209
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     a26:	60 91 0d 03 	lds	r22, 0x030D
     a2a:	70 91 0e 03 	lds	r23, 0x030E
     a2e:	62 95       	swap	r22
     a30:	72 95       	swap	r23
     a32:	70 7f       	andi	r23, 0xF0	; 240
     a34:	76 27       	eor	r23, r22
     a36:	60 7f       	andi	r22, 0xF0	; 240
     a38:	76 27       	eor	r23, r22
     a3a:	80 ed       	ldi	r24, 0xD0	; 208
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     a42:	60 91 0f 03 	lds	r22, 0x030F
     a46:	70 91 10 03 	lds	r23, 0x0310
     a4a:	62 95       	swap	r22
     a4c:	72 95       	swap	r23
     a4e:	70 7f       	andi	r23, 0xF0	; 240
     a50:	76 27       	eor	r23, r22
     a52:	60 7f       	andi	r22, 0xF0	; 240
     a54:	76 27       	eor	r23, r22
     a56:	8f ec       	ldi	r24, 0xCF	; 207
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     a5e:	60 91 11 03 	lds	r22, 0x0311
     a62:	70 91 12 03 	lds	r23, 0x0312
     a66:	62 95       	swap	r22
     a68:	72 95       	swap	r23
     a6a:	70 7f       	andi	r23, 0xF0	; 240
     a6c:	76 27       	eor	r23, r22
     a6e:	60 7f       	andi	r22, 0xF0	; 240
     a70:	76 27       	eor	r23, r22
     a72:	8e ec       	ldi	r24, 0xCE	; 206
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     a7a:	60 91 13 03 	lds	r22, 0x0313
     a7e:	70 91 14 03 	lds	r23, 0x0314
     a82:	62 95       	swap	r22
     a84:	72 95       	swap	r23
     a86:	70 7f       	andi	r23, 0xF0	; 240
     a88:	76 27       	eor	r23, r22
     a8a:	60 7f       	andi	r22, 0xF0	; 240
     a8c:	76 27       	eor	r23, r22
     a8e:	8d ec       	ldi	r24, 0xCD	; 205
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     a96:	60 91 15 03 	lds	r22, 0x0315
     a9a:	70 91 16 03 	lds	r23, 0x0316
     a9e:	62 95       	swap	r22
     aa0:	72 95       	swap	r23
     aa2:	70 7f       	andi	r23, 0xF0	; 240
     aa4:	76 27       	eor	r23, r22
     aa6:	60 7f       	andi	r22, 0xF0	; 240
     aa8:	76 27       	eor	r23, r22
     aaa:	8c ec       	ldi	r24, 0xCC	; 204
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     ab2:	60 91 19 03 	lds	r22, 0x0319
     ab6:	70 91 1a 03 	lds	r23, 0x031A
     aba:	62 95       	swap	r22
     abc:	72 95       	swap	r23
     abe:	70 7f       	andi	r23, 0xF0	; 240
     ac0:	76 27       	eor	r23, r22
     ac2:	60 7f       	andi	r22, 0xF0	; 240
     ac4:	76 27       	eor	r23, r22
     ac6:	8a ec       	ldi	r24, 0xCA	; 202
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     ace:	60 91 17 03 	lds	r22, 0x0317
     ad2:	70 91 18 03 	lds	r23, 0x0318
     ad6:	62 95       	swap	r22
     ad8:	72 95       	swap	r23
     ada:	70 7f       	andi	r23, 0xF0	; 240
     adc:	76 27       	eor	r23, r22
     ade:	60 7f       	andi	r22, 0xF0	; 240
     ae0:	76 27       	eor	r23, r22
     ae2:	8b ec       	ldi	r24, 0xCB	; 203
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     aea:	60 91 1d 03 	lds	r22, 0x031D
     aee:	70 91 1e 03 	lds	r23, 0x031E
     af2:	62 95       	swap	r22
     af4:	72 95       	swap	r23
     af6:	70 7f       	andi	r23, 0xF0	; 240
     af8:	76 27       	eor	r23, r22
     afa:	60 7f       	andi	r22, 0xF0	; 240
     afc:	76 27       	eor	r23, r22
     afe:	88 ec       	ldi	r24, 0xC8	; 200
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     b06:	60 91 1b 03 	lds	r22, 0x031B
     b0a:	70 91 1c 03 	lds	r23, 0x031C
     b0e:	62 95       	swap	r22
     b10:	72 95       	swap	r23
     b12:	70 7f       	andi	r23, 0xF0	; 240
     b14:	76 27       	eor	r23, r22
     b16:	60 7f       	andi	r22, 0xF0	; 240
     b18:	76 27       	eor	r23, r22
     b1a:	89 ec       	ldi	r24, 0xC9	; 201
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     b22:	8c 2f       	mov	r24, r28
     b24:	6f e0       	ldi	r22, 0x0F	; 15
     b26:	0e 94 16 0a 	call	0x142c	; 0x142c <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     b2a:	6a e6       	ldi	r22, 0x6A	; 106
     b2c:	73 e0       	ldi	r23, 0x03	; 3
     b2e:	0e 94 a4 11 	call	0x2348	; 0x2348 <interpolate_pitch_cv>
     b32:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     b34:	86 ee       	ldi	r24, 0xE6	; 230
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     b3c:	8c 2f       	mov	r24, r28
     b3e:	60 ef       	ldi	r22, 0xF0	; 240
     b40:	0e 94 16 0a 	call	0x142c	; 0x142c <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     b44:	68 e4       	ldi	r22, 0x48	; 72
     b46:	73 e0       	ldi	r23, 0x03	; 3
     b48:	0e 94 a4 11 	call	0x2348	; 0x2348 <interpolate_pitch_cv>
     b4c:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     b4e:	85 ee       	ldi	r24, 0xE5	; 229
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     b56:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     b58:	a1 9a       	sbi	0x14, 1	; 20
}			
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <scan_pots_and_update_control_voltages>:
	//
//	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
//	DAC_CTRL |= (1<<DAC_RS);	
	
	
     b60:	08 95       	ret

00000b62 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     b62:	84 b1       	in	r24, 0x04	; 4
     b64:	87 62       	ori	r24, 0x27	; 39
     b66:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     b68:	ec ed       	ldi	r30, 0xDC	; 220
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8c 65       	ori	r24, 0x5C	; 92
     b70:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     b72:	85 b1       	in	r24, 0x05	; 5
     b74:	89 7d       	andi	r24, 0xD9	; 217
     b76:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     b78:	ed ed       	ldi	r30, 0xDD	; 221
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	83 7f       	andi	r24, 0xF3	; 243
     b80:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     b82:	80 e5       	ldi	r24, 0x50	; 80
     b84:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     b86:	80 81       	ld	r24, Z
     b88:	87 7f       	andi	r24, 0xF7	; 247
     b8a:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     b8c:	80 81       	ld	r24, Z
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     b92:	80 81       	ld	r24, Z
     b94:	88 60       	ori	r24, 0x08	; 8
     b96:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     b98:	80 81       	ld	r24, Z
     b9a:	8f 7e       	andi	r24, 0xEF	; 239
     b9c:	80 83       	st	Z, r24
	
}
     b9e:	08 95       	ret

00000ba0 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     ba0:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     ba2:	0d b4       	in	r0, 0x2d	; 45
     ba4:	07 fe       	sbrs	r0, 7
     ba6:	fd cf       	rjmp	.-6      	; 0xba2 <spi_shift_byte+0x2>
	return SPDR;
     ba8:	8e b5       	in	r24, 0x2e	; 46
	
}
     baa:	08 95       	ret

00000bac <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     bac:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     bae:	80 91 23 03 	lds	r24, 0x0323
     bb2:	0e 94 d0 05 	call	0xba0	; 0xba0 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     bb6:	90 91 e0 02 	lds	r25, 0x02E0
     bba:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     bbc:	98 27       	eor	r25, r24
     bbe:	90 93 e0 02 	sts	0x02E0, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     bc2:	98 23       	and	r25, r24
     bc4:	90 93 df 02 	sts	0x02DF, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     bc8:	80 91 97 03 	lds	r24, 0x0397
     bcc:	98 27       	eor	r25, r24
     bce:	90 93 97 03 	sts	0x0397, r25
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     bd2:	80 91 22 03 	lds	r24, 0x0322
     bd6:	0e 94 d0 05 	call	0xba0	; 0xba0 <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     bda:	90 91 e2 02 	lds	r25, 0x02E2
     bde:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     be0:	98 27       	eor	r25, r24
     be2:	90 93 e2 02 	sts	0x02E2, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     be6:	98 23       	and	r25, r24
     be8:	90 93 e1 02 	sts	0x02E1, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     bec:	80 91 98 03 	lds	r24, 0x0398
     bf0:	98 27       	eor	r25, r24
     bf2:	90 93 98 03 	sts	0x0398, r25
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     bf6:	80 91 21 03 	lds	r24, 0x0321
     bfa:	0e 94 d0 05 	call	0xba0	; 0xba0 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     bfe:	80 91 20 03 	lds	r24, 0x0320
     c02:	0e 94 d0 05 	call	0xba0	; 0xba0 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     c06:	90 91 99 03 	lds	r25, 0x0399
     c0a:	29 2f       	mov	r18, r25
     c0c:	22 95       	swap	r18
     c0e:	2f 70       	andi	r18, 0x0F	; 15
     c10:	27 95       	ror	r18
     c12:	22 27       	eor	r18, r18
     c14:	27 95       	ror	r18

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     c16:	89 2f       	mov	r24, r25
     c18:	86 95       	lsr	r24
     c1a:	86 95       	lsr	r24
     c1c:	86 95       	lsr	r24
     c1e:	81 70       	andi	r24, 0x01	; 1
     c20:	82 2b       	or	r24, r18
     c22:	40 91 98 03 	lds	r20, 0x0398
     c26:	42 95       	swap	r20
     c28:	46 95       	lsr	r20
     c2a:	47 70       	andi	r20, 0x07	; 7
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	41 70       	andi	r20, 0x01	; 1
     c30:	50 70       	andi	r21, 0x00	; 0
     c32:	9a 01       	movw	r18, r20
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	28 2b       	or	r18, r24
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     c3e:	99 1f       	adc	r25, r25
     c40:	99 27       	eor	r25, r25
     c42:	99 1f       	adc	r25, r25
     c44:	89 2f       	mov	r24, r25
     c46:	82 95       	swap	r24
     c48:	88 0f       	add	r24, r24
     c4a:	88 0f       	add	r24, r24
     c4c:	80 7c       	andi	r24, 0xC0	; 192
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     c4e:	82 2b       	or	r24, r18
     c50:	0e 94 d0 05 	call	0xba0	; 0xba0 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     c54:	ed ed       	ldi	r30, 0xDD	; 221
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	87 7f       	andi	r24, 0xF7	; 247
     c5c:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     c5e:	80 81       	ld	r24, Z
     c60:	88 60       	ori	r24, 0x08	; 8
     c62:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     c64:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     c66:	08 95       	ret

00000c68 <save_patch>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	
	
void save_patch(uint8_t patch_number) {
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	ab 97       	sbiw	r28, 0x2b	; 43
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     c7c:	ef ef       	ldi	r30, 0xFF	; 255
     c7e:	f2 e0       	ldi	r31, 0x02	; 2
     c80:	30 91 ff 02 	lds	r19, 0x02FF
     c84:	93 2f       	mov	r25, r19
     c86:	92 95       	swap	r25
     c88:	90 7f       	andi	r25, 0xF0	; 240
     c8a:	32 95       	swap	r19
     c8c:	3f 70       	andi	r19, 0x0F	; 15
     c8e:	20 91 00 03 	lds	r18, 0x0300
     c92:	23 70       	andi	r18, 0x03	; 3
     c94:	22 95       	swap	r18
     c96:	20 7f       	andi	r18, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     c98:	df 01       	movw	r26, r30
     c9a:	5a 97       	sbiw	r26, 0x1a	; 26
     c9c:	4c 91       	ld	r20, X
     c9e:	64 2f       	mov	r22, r20
     ca0:	66 0f       	add	r22, r22
     ca2:	66 0f       	add	r22, r22
     ca4:	5a 81       	ldd	r21, Y+2	; 0x02
     ca6:	53 70       	andi	r21, 0x03	; 3
     ca8:	56 2b       	or	r21, r22
     caa:	5a 83       	std	Y+2, r21	; 0x02
     cac:	74 2f       	mov	r23, r20
     cae:	72 95       	swap	r23
     cb0:	76 95       	lsr	r23
     cb2:	76 95       	lsr	r23
     cb4:	73 70       	andi	r23, 0x03	; 3
     cb6:	11 96       	adiw	r26, 0x01	; 1
     cb8:	5c 91       	ld	r21, X
     cba:	53 70       	andi	r21, 0x03	; 3
     cbc:	55 0f       	add	r21, r21
     cbe:	55 0f       	add	r21, r21
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     cc0:	df 01       	movw	r26, r30
     cc2:	58 97       	sbiw	r26, 0x18	; 24
     cc4:	4c 91       	ld	r20, X
     cc6:	64 2f       	mov	r22, r20
     cc8:	62 95       	swap	r22
     cca:	60 7f       	andi	r22, 0xF0	; 240
     ccc:	57 2b       	or	r21, r23
     cce:	56 2b       	or	r21, r22
     cd0:	5b 83       	std	Y+3, r21	; 0x03
     cd2:	74 2f       	mov	r23, r20
     cd4:	72 95       	swap	r23
     cd6:	7f 70       	andi	r23, 0x0F	; 15
     cd8:	11 96       	adiw	r26, 0x01	; 1
     cda:	5c 91       	ld	r21, X
     cdc:	53 70       	andi	r21, 0x03	; 3
     cde:	52 95       	swap	r21
     ce0:	50 7f       	andi	r21, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     ce2:	df 01       	movw	r26, r30
     ce4:	56 97       	sbiw	r26, 0x16	; 22
     ce6:	4c 91       	ld	r20, X
     ce8:	64 2f       	mov	r22, r20
     cea:	62 95       	swap	r22
     cec:	66 0f       	add	r22, r22
     cee:	66 0f       	add	r22, r22
     cf0:	60 7c       	andi	r22, 0xC0	; 192
     cf2:	57 2b       	or	r21, r23
     cf4:	56 2b       	or	r21, r22
     cf6:	5c 83       	std	Y+4, r21	; 0x04
     cf8:	11 96       	adiw	r26, 0x01	; 1
     cfa:	5c 91       	ld	r21, X
     cfc:	52 95       	swap	r21
     cfe:	55 0f       	add	r21, r21
     d00:	55 0f       	add	r21, r21
     d02:	50 7c       	andi	r21, 0xC0	; 192
     d04:	46 95       	lsr	r20
     d06:	46 95       	lsr	r20
     d08:	45 2b       	or	r20, r21
     d0a:	4d 83       	std	Y+5, r20	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     d0c:	df 01       	movw	r26, r30
     d0e:	54 97       	sbiw	r26, 0x14	; 20
     d10:	4c 91       	ld	r20, X
     d12:	4e 83       	std	Y+6, r20	; 0x06
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	5c 91       	ld	r21, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     d18:	df 01       	movw	r26, r30
     d1a:	52 97       	sbiw	r26, 0x12	; 18
     d1c:	4c 91       	ld	r20, X
     d1e:	64 2f       	mov	r22, r20
     d20:	66 0f       	add	r22, r22
     d22:	66 0f       	add	r22, r22
     d24:	53 70       	andi	r21, 0x03	; 3
     d26:	56 2b       	or	r21, r22
     d28:	5f 83       	std	Y+7, r21	; 0x07
     d2a:	74 2f       	mov	r23, r20
     d2c:	72 95       	swap	r23
     d2e:	76 95       	lsr	r23
     d30:	76 95       	lsr	r23
     d32:	73 70       	andi	r23, 0x03	; 3
     d34:	11 96       	adiw	r26, 0x01	; 1
     d36:	5c 91       	ld	r21, X
     d38:	53 70       	andi	r21, 0x03	; 3
     d3a:	55 0f       	add	r21, r21
     d3c:	55 0f       	add	r21, r21
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     d3e:	df 01       	movw	r26, r30
     d40:	50 97       	sbiw	r26, 0x10	; 16
     d42:	4c 91       	ld	r20, X
     d44:	64 2f       	mov	r22, r20
     d46:	62 95       	swap	r22
     d48:	60 7f       	andi	r22, 0xF0	; 240
     d4a:	57 2b       	or	r21, r23
     d4c:	56 2b       	or	r21, r22
     d4e:	58 87       	std	Y+8, r21	; 0x08
     d50:	74 2f       	mov	r23, r20
     d52:	72 95       	swap	r23
     d54:	7f 70       	andi	r23, 0x0F	; 15
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	5c 91       	ld	r21, X
     d5a:	53 70       	andi	r21, 0x03	; 3
     d5c:	52 95       	swap	r21
     d5e:	50 7f       	andi	r21, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     d60:	df 01       	movw	r26, r30
     d62:	1e 97       	sbiw	r26, 0x0e	; 14
     d64:	4c 91       	ld	r20, X
     d66:	64 2f       	mov	r22, r20
     d68:	62 95       	swap	r22
     d6a:	66 0f       	add	r22, r22
     d6c:	66 0f       	add	r22, r22
     d6e:	60 7c       	andi	r22, 0xC0	; 192
     d70:	57 2b       	or	r21, r23
     d72:	56 2b       	or	r21, r22
     d74:	59 87       	std	Y+9, r21	; 0x09
     d76:	11 96       	adiw	r26, 0x01	; 1
     d78:	5c 91       	ld	r21, X
     d7a:	52 95       	swap	r21
     d7c:	55 0f       	add	r21, r21
     d7e:	55 0f       	add	r21, r21
     d80:	50 7c       	andi	r21, 0xC0	; 192
     d82:	46 95       	lsr	r20
     d84:	46 95       	lsr	r20
     d86:	45 2b       	or	r20, r21
     d88:	4a 87       	std	Y+10, r20	; 0x0a
	patch_to_save.fine = current_patch.fine;
     d8a:	df 01       	movw	r26, r30
     d8c:	1c 97       	sbiw	r26, 0x0c	; 12
     d8e:	4c 91       	ld	r20, X
     d90:	4b 87       	std	Y+11, r20	; 0x0b
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	5c 91       	ld	r21, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     d96:	df 01       	movw	r26, r30
     d98:	1a 97       	sbiw	r26, 0x0a	; 10
     d9a:	4c 91       	ld	r20, X
     d9c:	64 2f       	mov	r22, r20
     d9e:	66 0f       	add	r22, r22
     da0:	66 0f       	add	r22, r22
     da2:	53 70       	andi	r21, 0x03	; 3
     da4:	56 2b       	or	r21, r22
     da6:	5c 87       	std	Y+12, r21	; 0x0c
     da8:	74 2f       	mov	r23, r20
     daa:	72 95       	swap	r23
     dac:	76 95       	lsr	r23
     dae:	76 95       	lsr	r23
     db0:	73 70       	andi	r23, 0x03	; 3
     db2:	11 96       	adiw	r26, 0x01	; 1
     db4:	5c 91       	ld	r21, X
     db6:	53 70       	andi	r21, 0x03	; 3
     db8:	55 0f       	add	r21, r21
     dba:	55 0f       	add	r21, r21
	patch_to_save.lfo_rate = current_patch.lfo_rate;
     dbc:	df 01       	movw	r26, r30
     dbe:	18 97       	sbiw	r26, 0x08	; 8
     dc0:	4c 91       	ld	r20, X
     dc2:	64 2f       	mov	r22, r20
     dc4:	62 95       	swap	r22
     dc6:	60 7f       	andi	r22, 0xF0	; 240
     dc8:	57 2b       	or	r21, r23
     dca:	56 2b       	or	r21, r22
     dcc:	5d 87       	std	Y+13, r21	; 0x0d
     dce:	74 2f       	mov	r23, r20
     dd0:	72 95       	swap	r23
     dd2:	7f 70       	andi	r23, 0x0F	; 15
     dd4:	11 96       	adiw	r26, 0x01	; 1
     dd6:	5c 91       	ld	r21, X
     dd8:	53 70       	andi	r21, 0x03	; 3
     dda:	52 95       	swap	r21
     ddc:	50 7f       	andi	r21, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
     dde:	df 01       	movw	r26, r30
     de0:	16 97       	sbiw	r26, 0x06	; 6
     de2:	4c 91       	ld	r20, X
     de4:	64 2f       	mov	r22, r20
     de6:	62 95       	swap	r22
     de8:	66 0f       	add	r22, r22
     dea:	66 0f       	add	r22, r22
     dec:	60 7c       	andi	r22, 0xC0	; 192
     dee:	57 2b       	or	r21, r23
     df0:	56 2b       	or	r21, r22
     df2:	5e 87       	std	Y+14, r21	; 0x0e
     df4:	11 96       	adiw	r26, 0x01	; 1
     df6:	5c 91       	ld	r21, X
     df8:	52 95       	swap	r21
     dfa:	55 0f       	add	r21, r21
     dfc:	55 0f       	add	r21, r21
     dfe:	50 7c       	andi	r21, 0xC0	; 192
     e00:	46 95       	lsr	r20
     e02:	46 95       	lsr	r20
     e04:	45 2b       	or	r20, r21
     e06:	4f 87       	std	Y+15, r20	; 0x0f
	patch_to_save.glide	= current_patch.glide;
     e08:	df 01       	movw	r26, r30
     e0a:	14 97       	sbiw	r26, 0x04	; 4
     e0c:	4c 91       	ld	r20, X
     e0e:	48 8b       	std	Y+16, r20	; 0x10
     e10:	11 96       	adiw	r26, 0x01	; 1
     e12:	5c 91       	ld	r21, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
     e14:	df 01       	movw	r26, r30
     e16:	12 97       	sbiw	r26, 0x02	; 2
     e18:	4c 91       	ld	r20, X
     e1a:	64 2f       	mov	r22, r20
     e1c:	66 0f       	add	r22, r22
     e1e:	66 0f       	add	r22, r22
     e20:	53 70       	andi	r21, 0x03	; 3
     e22:	56 2b       	or	r21, r22
     e24:	59 8b       	std	Y+17, r21	; 0x11
     e26:	42 95       	swap	r20
     e28:	46 95       	lsr	r20
     e2a:	46 95       	lsr	r20
     e2c:	43 70       	andi	r20, 0x03	; 3
     e2e:	11 96       	adiw	r26, 0x01	; 1
     e30:	5c 91       	ld	r21, X
     e32:	53 70       	andi	r21, 0x03	; 3
     e34:	55 0f       	add	r21, r21
     e36:	55 0f       	add	r21, r21
     e38:	94 2b       	or	r25, r20
     e3a:	95 2b       	or	r25, r21
     e3c:	9a 8b       	std	Y+18, r25	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
     e3e:	90 91 01 03 	lds	r25, 0x0301
     e42:	49 2f       	mov	r20, r25
     e44:	42 95       	swap	r20
     e46:	44 0f       	add	r20, r20
     e48:	44 0f       	add	r20, r20
     e4a:	40 7c       	andi	r20, 0xC0	; 192
     e4c:	23 2b       	or	r18, r19
     e4e:	24 2b       	or	r18, r20
     e50:	2b 8b       	std	Y+19, r18	; 0x13
     e52:	23 81       	ldd	r18, Z+3	; 0x03
     e54:	22 95       	swap	r18
     e56:	22 0f       	add	r18, r18
     e58:	22 0f       	add	r18, r18
     e5a:	20 7c       	andi	r18, 0xC0	; 192
     e5c:	96 95       	lsr	r25
     e5e:	96 95       	lsr	r25
     e60:	92 2b       	or	r25, r18
     e62:	9c 8b       	std	Y+20, r25	; 0x14
	patch_to_save.res = current_patch.res;
     e64:	90 91 03 03 	lds	r25, 0x0303
     e68:	9d 8b       	std	Y+21, r25	; 0x15
     e6a:	25 81       	ldd	r18, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
     e6c:	90 91 05 03 	lds	r25, 0x0305
     e70:	39 2f       	mov	r19, r25
     e72:	33 0f       	add	r19, r19
     e74:	33 0f       	add	r19, r19
     e76:	23 70       	andi	r18, 0x03	; 3
     e78:	23 2b       	or	r18, r19
     e7a:	2e 8b       	std	Y+22, r18	; 0x16
     e7c:	49 2f       	mov	r20, r25
     e7e:	42 95       	swap	r20
     e80:	46 95       	lsr	r20
     e82:	46 95       	lsr	r20
     e84:	43 70       	andi	r20, 0x03	; 3
     e86:	27 81       	ldd	r18, Z+7	; 0x07
     e88:	23 70       	andi	r18, 0x03	; 3
     e8a:	22 0f       	add	r18, r18
     e8c:	22 0f       	add	r18, r18
	patch_to_save.key_track = current_patch.key_track;
     e8e:	90 91 07 03 	lds	r25, 0x0307
     e92:	39 2f       	mov	r19, r25
     e94:	32 95       	swap	r19
     e96:	30 7f       	andi	r19, 0xF0	; 240
     e98:	24 2b       	or	r18, r20
     e9a:	23 2b       	or	r18, r19
     e9c:	2f 8b       	std	Y+23, r18	; 0x17
     e9e:	49 2f       	mov	r20, r25
     ea0:	42 95       	swap	r20
     ea2:	4f 70       	andi	r20, 0x0F	; 15
     ea4:	21 85       	ldd	r18, Z+9	; 0x09
     ea6:	23 70       	andi	r18, 0x03	; 3
     ea8:	22 95       	swap	r18
     eaa:	20 7f       	andi	r18, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
     eac:	90 91 09 03 	lds	r25, 0x0309
     eb0:	39 2f       	mov	r19, r25
     eb2:	32 95       	swap	r19
     eb4:	33 0f       	add	r19, r19
     eb6:	33 0f       	add	r19, r19
     eb8:	30 7c       	andi	r19, 0xC0	; 192
     eba:	24 2b       	or	r18, r20
     ebc:	23 2b       	or	r18, r19
     ebe:	28 8f       	std	Y+24, r18	; 0x18
     ec0:	23 85       	ldd	r18, Z+11	; 0x0b
     ec2:	22 95       	swap	r18
     ec4:	22 0f       	add	r18, r18
     ec6:	22 0f       	add	r18, r18
     ec8:	20 7c       	andi	r18, 0xC0	; 192
     eca:	96 95       	lsr	r25
     ecc:	96 95       	lsr	r25
     ece:	92 2b       	or	r25, r18
     ed0:	99 8f       	std	Y+25, r25	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
     ed2:	90 91 0b 03 	lds	r25, 0x030B
     ed6:	9a 8f       	std	Y+26, r25	; 0x1a
     ed8:	25 85       	ldd	r18, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
     eda:	90 91 0d 03 	lds	r25, 0x030D
     ede:	39 2f       	mov	r19, r25
     ee0:	33 0f       	add	r19, r19
     ee2:	33 0f       	add	r19, r19
     ee4:	23 70       	andi	r18, 0x03	; 3
     ee6:	23 2b       	or	r18, r19
     ee8:	2b 8f       	std	Y+27, r18	; 0x1b
     eea:	49 2f       	mov	r20, r25
     eec:	42 95       	swap	r20
     eee:	46 95       	lsr	r20
     ef0:	46 95       	lsr	r20
     ef2:	43 70       	andi	r20, 0x03	; 3
     ef4:	27 85       	ldd	r18, Z+15	; 0x0f
     ef6:	23 70       	andi	r18, 0x03	; 3
     ef8:	22 0f       	add	r18, r18
     efa:	22 0f       	add	r18, r18
	patch_to_save.attack_2 = current_patch.attack_2;
     efc:	90 91 0f 03 	lds	r25, 0x030F
     f00:	39 2f       	mov	r19, r25
     f02:	32 95       	swap	r19
     f04:	30 7f       	andi	r19, 0xF0	; 240
     f06:	24 2b       	or	r18, r20
     f08:	23 2b       	or	r18, r19
     f0a:	2c 8f       	std	Y+28, r18	; 0x1c
     f0c:	49 2f       	mov	r20, r25
     f0e:	42 95       	swap	r20
     f10:	4f 70       	andi	r20, 0x0F	; 15
     f12:	21 89       	ldd	r18, Z+17	; 0x11
     f14:	23 70       	andi	r18, 0x03	; 3
     f16:	22 95       	swap	r18
     f18:	20 7f       	andi	r18, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
     f1a:	90 91 11 03 	lds	r25, 0x0311
     f1e:	39 2f       	mov	r19, r25
     f20:	32 95       	swap	r19
     f22:	33 0f       	add	r19, r19
     f24:	33 0f       	add	r19, r19
     f26:	30 7c       	andi	r19, 0xC0	; 192
     f28:	24 2b       	or	r18, r20
     f2a:	23 2b       	or	r18, r19
     f2c:	2d 8f       	std	Y+29, r18	; 0x1d
     f2e:	23 89       	ldd	r18, Z+19	; 0x13
     f30:	22 95       	swap	r18
     f32:	22 0f       	add	r18, r18
     f34:	22 0f       	add	r18, r18
     f36:	20 7c       	andi	r18, 0xC0	; 192
     f38:	96 95       	lsr	r25
     f3a:	96 95       	lsr	r25
     f3c:	92 2b       	or	r25, r18
     f3e:	9e 8f       	std	Y+30, r25	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
     f40:	90 91 13 03 	lds	r25, 0x0313
     f44:	9f 8f       	std	Y+31, r25	; 0x1f
     f46:	25 89       	ldd	r18, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
     f48:	90 91 15 03 	lds	r25, 0x0315
     f4c:	39 2f       	mov	r19, r25
     f4e:	33 0f       	add	r19, r19
     f50:	33 0f       	add	r19, r19
     f52:	23 70       	andi	r18, 0x03	; 3
     f54:	23 2b       	or	r18, r19
     f56:	28 a3       	lds	r18, 0x58
     f58:	49 2f       	mov	r20, r25
     f5a:	42 95       	swap	r20
     f5c:	46 95       	lsr	r20
     f5e:	46 95       	lsr	r20
     f60:	43 70       	andi	r20, 0x03	; 3
     f62:	27 89       	ldd	r18, Z+23	; 0x17
     f64:	23 70       	andi	r18, 0x03	; 3
     f66:	22 0f       	add	r18, r18
     f68:	22 0f       	add	r18, r18
	patch_to_save.sustain_2 = current_patch.sustain_2;
     f6a:	90 91 17 03 	lds	r25, 0x0317
     f6e:	39 2f       	mov	r19, r25
     f70:	32 95       	swap	r19
     f72:	30 7f       	andi	r19, 0xF0	; 240
     f74:	24 2b       	or	r18, r20
     f76:	23 2b       	or	r18, r19
     f78:	29 a3       	lds	r18, 0x59
     f7a:	49 2f       	mov	r20, r25
     f7c:	42 95       	swap	r20
     f7e:	4f 70       	andi	r20, 0x0F	; 15
     f80:	21 8d       	ldd	r18, Z+25	; 0x19
     f82:	23 70       	andi	r18, 0x03	; 3
     f84:	22 95       	swap	r18
     f86:	20 7f       	andi	r18, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
     f88:	90 91 19 03 	lds	r25, 0x0319
     f8c:	39 2f       	mov	r19, r25
     f8e:	32 95       	swap	r19
     f90:	33 0f       	add	r19, r19
     f92:	33 0f       	add	r19, r19
     f94:	30 7c       	andi	r19, 0xC0	; 192
     f96:	24 2b       	or	r18, r20
     f98:	23 2b       	or	r18, r19
     f9a:	2a a3       	lds	r18, 0x5a
     f9c:	23 8d       	ldd	r18, Z+27	; 0x1b
     f9e:	22 95       	swap	r18
     fa0:	22 0f       	add	r18, r18
     fa2:	22 0f       	add	r18, r18
     fa4:	20 7c       	andi	r18, 0xC0	; 192
     fa6:	96 95       	lsr	r25
     fa8:	96 95       	lsr	r25
     faa:	92 2b       	or	r25, r18
     fac:	9b a3       	lds	r25, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
     fae:	90 91 1b 03 	lds	r25, 0x031B
     fb2:	9c a3       	lds	r25, 0x5c
     fb4:	25 8d       	ldd	r18, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
     fb6:	90 91 1d 03 	lds	r25, 0x031D
     fba:	39 2f       	mov	r19, r25
     fbc:	33 0f       	add	r19, r19
     fbe:	33 0f       	add	r19, r19
     fc0:	23 70       	andi	r18, 0x03	; 3
     fc2:	23 2b       	or	r18, r19
     fc4:	2d a3       	lds	r18, 0x5d
     fc6:	92 95       	swap	r25
     fc8:	96 95       	lsr	r25
     fca:	96 95       	lsr	r25
     fcc:	93 70       	andi	r25, 0x03	; 3
     fce:	3e a1       	lds	r19, 0x4e
     fd0:	30 7f       	andi	r19, 0xF0	; 240
     fd2:	27 8d       	ldd	r18, Z+31	; 0x1f
     fd4:	23 70       	andi	r18, 0x03	; 3
     fd6:	22 0f       	add	r18, r18
     fd8:	22 0f       	add	r18, r18
     fda:	93 2b       	or	r25, r19
     fdc:	92 2b       	or	r25, r18
     fde:	9e a3       	lds	r25, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
     fe0:	90 91 1f 03 	lds	r25, 0x031F
     fe4:	9f a3       	lds	r25, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
     fe6:	90 91 20 03 	lds	r25, 0x0320
     fea:	98 a7       	lds	r25, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
     fec:	90 91 21 03 	lds	r25, 0x0321
     ff0:	99 a7       	lds	r25, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
     ff2:	90 91 22 03 	lds	r25, 0x0322
     ff6:	9a a7       	lds	r25, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
     ff8:	90 91 23 03 	lds	r25, 0x0323
     ffc:	9b a7       	lds	r25, 0x7b
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	2b e2       	ldi	r18, 0x2B	; 43
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	82 9f       	mul	r24, r18
    1006:	b0 01       	movw	r22, r0
    1008:	83 9f       	mul	r24, r19
    100a:	70 0d       	add	r23, r0
    100c:	92 9f       	mul	r25, r18
    100e:	70 0d       	add	r23, r0
    1010:	11 24       	eor	r1, r1
    1012:	60 50       	subi	r22, 0x00	; 0
    1014:	70 40       	sbci	r23, 0x00	; 0
    1016:	ce 01       	movw	r24, r28
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	4b e2       	ldi	r20, 0x2B	; 43
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	0e 94 a5 19 	call	0x334a	; 0x334a <__eeupd_block_m6450a>
}	
    1022:	ab 96       	adiw	r28, 0x2b	; 43
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	ab 97       	sbiw	r28, 0x2b	; 43
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	2b e2       	ldi	r18, 0x2B	; 43
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	82 9f       	mul	r24, r18
    1050:	b0 01       	movw	r22, r0
    1052:	83 9f       	mul	r24, r19
    1054:	70 0d       	add	r23, r0
    1056:	92 9f       	mul	r25, r18
    1058:	70 0d       	add	r23, r0
    105a:	11 24       	eor	r1, r1
    105c:	60 50       	subi	r22, 0x00	; 0
    105e:	70 40       	sbci	r23, 0x00	; 0
    1060:	ce 01       	movw	r24, r28
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	4b e2       	ldi	r20, 0x2B	; 43
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	0e 94 8f 19 	call	0x331e	; 0x331e <__eerd_block_m6450a>
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    106c:	ef ef       	ldi	r30, 0xFF	; 255
    106e:	f2 e0       	ldi	r31, 0x02	; 2
    1070:	8a 89       	ldd	r24, Y+18	; 0x12
    1072:	28 2f       	mov	r18, r24
    1074:	22 95       	swap	r18
    1076:	2f 70       	andi	r18, 0x0F	; 15
    1078:	9b 89       	ldd	r25, Y+19	; 0x13
    107a:	39 2f       	mov	r19, r25
    107c:	32 95       	swap	r19
    107e:	30 7f       	andi	r19, 0xF0	; 240
    1080:	32 2b       	or	r19, r18
    1082:	29 2f       	mov	r18, r25
    1084:	22 95       	swap	r18
    1086:	2f 70       	andi	r18, 0x0F	; 15
    1088:	23 70       	andi	r18, 0x03	; 3
    108a:	30 93 ff 02 	sts	0x02FF, r19
    108e:	20 93 00 03 	sts	0x0300, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    1092:	df 01       	movw	r26, r30
    1094:	5a 97       	sbiw	r26, 0x1a	; 26
    1096:	4a 81       	ldd	r20, Y+2	; 0x02
    1098:	46 95       	lsr	r20
    109a:	46 95       	lsr	r20
    109c:	2b 81       	ldd	r18, Y+3	; 0x03
    109e:	32 2f       	mov	r19, r18
    10a0:	32 95       	swap	r19
    10a2:	33 0f       	add	r19, r19
    10a4:	33 0f       	add	r19, r19
    10a6:	30 7c       	andi	r19, 0xC0	; 192
    10a8:	43 2b       	or	r20, r19
    10aa:	32 2f       	mov	r19, r18
    10ac:	36 95       	lsr	r19
    10ae:	36 95       	lsr	r19
    10b0:	33 70       	andi	r19, 0x03	; 3
    10b2:	4c 93       	st	X, r20
    10b4:	11 96       	adiw	r26, 0x01	; 1
    10b6:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    10b8:	df 01       	movw	r26, r30
    10ba:	58 97       	sbiw	r26, 0x18	; 24
    10bc:	32 2f       	mov	r19, r18
    10be:	32 95       	swap	r19
    10c0:	3f 70       	andi	r19, 0x0F	; 15
    10c2:	2c 81       	ldd	r18, Y+4	; 0x04
    10c4:	42 2f       	mov	r20, r18
    10c6:	42 95       	swap	r20
    10c8:	40 7f       	andi	r20, 0xF0	; 240
    10ca:	43 2b       	or	r20, r19
    10cc:	32 2f       	mov	r19, r18
    10ce:	32 95       	swap	r19
    10d0:	3f 70       	andi	r19, 0x0F	; 15
    10d2:	33 70       	andi	r19, 0x03	; 3
    10d4:	4c 93       	st	X, r20
    10d6:	11 96       	adiw	r26, 0x01	; 1
    10d8:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    10da:	df 01       	movw	r26, r30
    10dc:	56 97       	sbiw	r26, 0x16	; 22
    10de:	22 95       	swap	r18
    10e0:	26 95       	lsr	r18
    10e2:	26 95       	lsr	r18
    10e4:	23 70       	andi	r18, 0x03	; 3
    10e6:	3d 81       	ldd	r19, Y+5	; 0x05
    10e8:	43 2f       	mov	r20, r19
    10ea:	44 0f       	add	r20, r20
    10ec:	44 0f       	add	r20, r20
    10ee:	24 2b       	or	r18, r20
    10f0:	32 95       	swap	r19
    10f2:	36 95       	lsr	r19
    10f4:	36 95       	lsr	r19
    10f6:	33 70       	andi	r19, 0x03	; 3
    10f8:	2c 93       	st	X, r18
    10fa:	11 96       	adiw	r26, 0x01	; 1
    10fc:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    10fe:	df 01       	movw	r26, r30
    1100:	54 97       	sbiw	r26, 0x14	; 20
    1102:	4e 81       	ldd	r20, Y+6	; 0x06
    1104:	2f 81       	ldd	r18, Y+7	; 0x07
    1106:	32 2f       	mov	r19, r18
    1108:	33 70       	andi	r19, 0x03	; 3
    110a:	4c 93       	st	X, r20
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1110:	df 01       	movw	r26, r30
    1112:	52 97       	sbiw	r26, 0x12	; 18
    1114:	32 2f       	mov	r19, r18
    1116:	36 95       	lsr	r19
    1118:	36 95       	lsr	r19
    111a:	28 85       	ldd	r18, Y+8	; 0x08
    111c:	42 2f       	mov	r20, r18
    111e:	42 95       	swap	r20
    1120:	44 0f       	add	r20, r20
    1122:	44 0f       	add	r20, r20
    1124:	40 7c       	andi	r20, 0xC0	; 192
    1126:	43 2b       	or	r20, r19
    1128:	32 2f       	mov	r19, r18
    112a:	36 95       	lsr	r19
    112c:	36 95       	lsr	r19
    112e:	33 70       	andi	r19, 0x03	; 3
    1130:	4c 93       	st	X, r20
    1132:	11 96       	adiw	r26, 0x01	; 1
    1134:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1136:	df 01       	movw	r26, r30
    1138:	50 97       	sbiw	r26, 0x10	; 16
    113a:	32 2f       	mov	r19, r18
    113c:	32 95       	swap	r19
    113e:	3f 70       	andi	r19, 0x0F	; 15
    1140:	29 85       	ldd	r18, Y+9	; 0x09
    1142:	42 2f       	mov	r20, r18
    1144:	42 95       	swap	r20
    1146:	40 7f       	andi	r20, 0xF0	; 240
    1148:	43 2b       	or	r20, r19
    114a:	32 2f       	mov	r19, r18
    114c:	32 95       	swap	r19
    114e:	3f 70       	andi	r19, 0x0F	; 15
    1150:	33 70       	andi	r19, 0x03	; 3
    1152:	4c 93       	st	X, r20
    1154:	11 96       	adiw	r26, 0x01	; 1
    1156:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    1158:	df 01       	movw	r26, r30
    115a:	1e 97       	sbiw	r26, 0x0e	; 14
    115c:	22 95       	swap	r18
    115e:	26 95       	lsr	r18
    1160:	26 95       	lsr	r18
    1162:	23 70       	andi	r18, 0x03	; 3
    1164:	3a 85       	ldd	r19, Y+10	; 0x0a
    1166:	43 2f       	mov	r20, r19
    1168:	44 0f       	add	r20, r20
    116a:	44 0f       	add	r20, r20
    116c:	24 2b       	or	r18, r20
    116e:	32 95       	swap	r19
    1170:	36 95       	lsr	r19
    1172:	36 95       	lsr	r19
    1174:	33 70       	andi	r19, 0x03	; 3
    1176:	2c 93       	st	X, r18
    1178:	11 96       	adiw	r26, 0x01	; 1
    117a:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    117c:	df 01       	movw	r26, r30
    117e:	1c 97       	sbiw	r26, 0x0c	; 12
    1180:	4b 85       	ldd	r20, Y+11	; 0x0b
    1182:	2c 85       	ldd	r18, Y+12	; 0x0c
    1184:	32 2f       	mov	r19, r18
    1186:	33 70       	andi	r19, 0x03	; 3
    1188:	4c 93       	st	X, r20
    118a:	11 96       	adiw	r26, 0x01	; 1
    118c:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    118e:	df 01       	movw	r26, r30
    1190:	1a 97       	sbiw	r26, 0x0a	; 10
    1192:	32 2f       	mov	r19, r18
    1194:	36 95       	lsr	r19
    1196:	36 95       	lsr	r19
    1198:	2d 85       	ldd	r18, Y+13	; 0x0d
    119a:	42 2f       	mov	r20, r18
    119c:	42 95       	swap	r20
    119e:	44 0f       	add	r20, r20
    11a0:	44 0f       	add	r20, r20
    11a2:	40 7c       	andi	r20, 0xC0	; 192
    11a4:	43 2b       	or	r20, r19
    11a6:	32 2f       	mov	r19, r18
    11a8:	36 95       	lsr	r19
    11aa:	36 95       	lsr	r19
    11ac:	33 70       	andi	r19, 0x03	; 3
    11ae:	4c 93       	st	X, r20
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    11b4:	df 01       	movw	r26, r30
    11b6:	18 97       	sbiw	r26, 0x08	; 8
    11b8:	32 2f       	mov	r19, r18
    11ba:	32 95       	swap	r19
    11bc:	3f 70       	andi	r19, 0x0F	; 15
    11be:	2e 85       	ldd	r18, Y+14	; 0x0e
    11c0:	42 2f       	mov	r20, r18
    11c2:	42 95       	swap	r20
    11c4:	40 7f       	andi	r20, 0xF0	; 240
    11c6:	43 2b       	or	r20, r19
    11c8:	32 2f       	mov	r19, r18
    11ca:	32 95       	swap	r19
    11cc:	3f 70       	andi	r19, 0x0F	; 15
    11ce:	33 70       	andi	r19, 0x03	; 3
    11d0:	4c 93       	st	X, r20
    11d2:	11 96       	adiw	r26, 0x01	; 1
    11d4:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    11d6:	df 01       	movw	r26, r30
    11d8:	16 97       	sbiw	r26, 0x06	; 6
    11da:	22 95       	swap	r18
    11dc:	26 95       	lsr	r18
    11de:	26 95       	lsr	r18
    11e0:	23 70       	andi	r18, 0x03	; 3
    11e2:	3f 85       	ldd	r19, Y+15	; 0x0f
    11e4:	43 2f       	mov	r20, r19
    11e6:	44 0f       	add	r20, r20
    11e8:	44 0f       	add	r20, r20
    11ea:	24 2b       	or	r18, r20
    11ec:	32 95       	swap	r19
    11ee:	36 95       	lsr	r19
    11f0:	36 95       	lsr	r19
    11f2:	33 70       	andi	r19, 0x03	; 3
    11f4:	2c 93       	st	X, r18
    11f6:	11 96       	adiw	r26, 0x01	; 1
    11f8:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    11fa:	df 01       	movw	r26, r30
    11fc:	14 97       	sbiw	r26, 0x04	; 4
    11fe:	48 89       	ldd	r20, Y+16	; 0x10
    1200:	29 89       	ldd	r18, Y+17	; 0x11
    1202:	32 2f       	mov	r19, r18
    1204:	33 70       	andi	r19, 0x03	; 3
    1206:	4c 93       	st	X, r20
    1208:	11 96       	adiw	r26, 0x01	; 1
    120a:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    120c:	df 01       	movw	r26, r30
    120e:	12 97       	sbiw	r26, 0x02	; 2
    1210:	26 95       	lsr	r18
    1212:	26 95       	lsr	r18
    1214:	38 2f       	mov	r19, r24
    1216:	32 95       	swap	r19
    1218:	33 0f       	add	r19, r19
    121a:	33 0f       	add	r19, r19
    121c:	30 7c       	andi	r19, 0xC0	; 192
    121e:	23 2b       	or	r18, r19
    1220:	86 95       	lsr	r24
    1222:	86 95       	lsr	r24
    1224:	83 70       	andi	r24, 0x03	; 3
    1226:	2c 93       	st	X, r18
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	8c 93       	st	X, r24
    122c:	11 97       	sbiw	r26, 0x01	; 1
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    122e:	92 95       	swap	r25
    1230:	96 95       	lsr	r25
    1232:	96 95       	lsr	r25
    1234:	93 70       	andi	r25, 0x03	; 3
    1236:	8c 89       	ldd	r24, Y+20	; 0x14
    1238:	28 2f       	mov	r18, r24
    123a:	22 0f       	add	r18, r18
    123c:	22 0f       	add	r18, r18
    123e:	92 2b       	or	r25, r18
    1240:	82 95       	swap	r24
    1242:	86 95       	lsr	r24
    1244:	86 95       	lsr	r24
    1246:	83 70       	andi	r24, 0x03	; 3
    1248:	90 93 01 03 	sts	0x0301, r25
    124c:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    124e:	2d 89       	ldd	r18, Y+21	; 0x15
    1250:	8e 89       	ldd	r24, Y+22	; 0x16
    1252:	98 2f       	mov	r25, r24
    1254:	93 70       	andi	r25, 0x03	; 3
    1256:	20 93 03 03 	sts	0x0303, r18
    125a:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    125c:	98 2f       	mov	r25, r24
    125e:	96 95       	lsr	r25
    1260:	96 95       	lsr	r25
    1262:	8f 89       	ldd	r24, Y+23	; 0x17
    1264:	28 2f       	mov	r18, r24
    1266:	22 95       	swap	r18
    1268:	22 0f       	add	r18, r18
    126a:	22 0f       	add	r18, r18
    126c:	20 7c       	andi	r18, 0xC0	; 192
    126e:	29 2b       	or	r18, r25
    1270:	98 2f       	mov	r25, r24
    1272:	96 95       	lsr	r25
    1274:	96 95       	lsr	r25
    1276:	93 70       	andi	r25, 0x03	; 3
    1278:	20 93 05 03 	sts	0x0305, r18
    127c:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    127e:	98 2f       	mov	r25, r24
    1280:	92 95       	swap	r25
    1282:	9f 70       	andi	r25, 0x0F	; 15
    1284:	88 8d       	ldd	r24, Y+24	; 0x18
    1286:	28 2f       	mov	r18, r24
    1288:	22 95       	swap	r18
    128a:	20 7f       	andi	r18, 0xF0	; 240
    128c:	29 2b       	or	r18, r25
    128e:	98 2f       	mov	r25, r24
    1290:	92 95       	swap	r25
    1292:	9f 70       	andi	r25, 0x0F	; 15
    1294:	93 70       	andi	r25, 0x03	; 3
    1296:	20 93 07 03 	sts	0x0307, r18
    129a:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    129c:	82 95       	swap	r24
    129e:	86 95       	lsr	r24
    12a0:	86 95       	lsr	r24
    12a2:	83 70       	andi	r24, 0x03	; 3
    12a4:	99 8d       	ldd	r25, Y+25	; 0x19
    12a6:	29 2f       	mov	r18, r25
    12a8:	22 0f       	add	r18, r18
    12aa:	22 0f       	add	r18, r18
    12ac:	82 2b       	or	r24, r18
    12ae:	92 95       	swap	r25
    12b0:	96 95       	lsr	r25
    12b2:	96 95       	lsr	r25
    12b4:	93 70       	andi	r25, 0x03	; 3
    12b6:	80 93 09 03 	sts	0x0309, r24
    12ba:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    12bc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    12be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c0:	98 2f       	mov	r25, r24
    12c2:	93 70       	andi	r25, 0x03	; 3
    12c4:	20 93 0b 03 	sts	0x030B, r18
    12c8:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    12ca:	98 2f       	mov	r25, r24
    12cc:	96 95       	lsr	r25
    12ce:	96 95       	lsr	r25
    12d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12d2:	28 2f       	mov	r18, r24
    12d4:	22 95       	swap	r18
    12d6:	22 0f       	add	r18, r18
    12d8:	22 0f       	add	r18, r18
    12da:	20 7c       	andi	r18, 0xC0	; 192
    12dc:	29 2b       	or	r18, r25
    12de:	98 2f       	mov	r25, r24
    12e0:	96 95       	lsr	r25
    12e2:	96 95       	lsr	r25
    12e4:	93 70       	andi	r25, 0x03	; 3
    12e6:	20 93 0d 03 	sts	0x030D, r18
    12ea:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    12ec:	98 2f       	mov	r25, r24
    12ee:	92 95       	swap	r25
    12f0:	9f 70       	andi	r25, 0x0F	; 15
    12f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12f4:	28 2f       	mov	r18, r24
    12f6:	22 95       	swap	r18
    12f8:	20 7f       	andi	r18, 0xF0	; 240
    12fa:	29 2b       	or	r18, r25
    12fc:	98 2f       	mov	r25, r24
    12fe:	92 95       	swap	r25
    1300:	9f 70       	andi	r25, 0x0F	; 15
    1302:	93 70       	andi	r25, 0x03	; 3
    1304:	20 93 0f 03 	sts	0x030F, r18
    1308:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    130a:	82 95       	swap	r24
    130c:	86 95       	lsr	r24
    130e:	86 95       	lsr	r24
    1310:	83 70       	andi	r24, 0x03	; 3
    1312:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1314:	29 2f       	mov	r18, r25
    1316:	22 0f       	add	r18, r18
    1318:	22 0f       	add	r18, r18
    131a:	82 2b       	or	r24, r18
    131c:	92 95       	swap	r25
    131e:	96 95       	lsr	r25
    1320:	96 95       	lsr	r25
    1322:	93 70       	andi	r25, 0x03	; 3
    1324:	80 93 11 03 	sts	0x0311, r24
    1328:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    132a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    132c:	88 a1       	lds	r24, 0x48
    132e:	98 2f       	mov	r25, r24
    1330:	93 70       	andi	r25, 0x03	; 3
    1332:	20 93 13 03 	sts	0x0313, r18
    1336:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1338:	98 2f       	mov	r25, r24
    133a:	96 95       	lsr	r25
    133c:	96 95       	lsr	r25
    133e:	89 a1       	lds	r24, 0x49
    1340:	28 2f       	mov	r18, r24
    1342:	22 95       	swap	r18
    1344:	22 0f       	add	r18, r18
    1346:	22 0f       	add	r18, r18
    1348:	20 7c       	andi	r18, 0xC0	; 192
    134a:	29 2b       	or	r18, r25
    134c:	98 2f       	mov	r25, r24
    134e:	96 95       	lsr	r25
    1350:	96 95       	lsr	r25
    1352:	93 70       	andi	r25, 0x03	; 3
    1354:	20 93 15 03 	sts	0x0315, r18
    1358:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    135a:	98 2f       	mov	r25, r24
    135c:	92 95       	swap	r25
    135e:	9f 70       	andi	r25, 0x0F	; 15
    1360:	8a a1       	lds	r24, 0x4a
    1362:	28 2f       	mov	r18, r24
    1364:	22 95       	swap	r18
    1366:	20 7f       	andi	r18, 0xF0	; 240
    1368:	29 2b       	or	r18, r25
    136a:	98 2f       	mov	r25, r24
    136c:	92 95       	swap	r25
    136e:	9f 70       	andi	r25, 0x0F	; 15
    1370:	93 70       	andi	r25, 0x03	; 3
    1372:	20 93 17 03 	sts	0x0317, r18
    1376:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1378:	82 95       	swap	r24
    137a:	86 95       	lsr	r24
    137c:	86 95       	lsr	r24
    137e:	83 70       	andi	r24, 0x03	; 3
    1380:	9b a1       	lds	r25, 0x4b
    1382:	29 2f       	mov	r18, r25
    1384:	22 0f       	add	r18, r18
    1386:	22 0f       	add	r18, r18
    1388:	82 2b       	or	r24, r18
    138a:	92 95       	swap	r25
    138c:	96 95       	lsr	r25
    138e:	96 95       	lsr	r25
    1390:	93 70       	andi	r25, 0x03	; 3
    1392:	80 93 19 03 	sts	0x0319, r24
    1396:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1398:	2c a1       	lds	r18, 0x4c
    139a:	8d a1       	lds	r24, 0x4d
    139c:	98 2f       	mov	r25, r24
    139e:	93 70       	andi	r25, 0x03	; 3
    13a0:	20 93 1b 03 	sts	0x031B, r18
    13a4:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    13a6:	98 2f       	mov	r25, r24
    13a8:	96 95       	lsr	r25
    13aa:	96 95       	lsr	r25
    13ac:	8e a1       	lds	r24, 0x4e
    13ae:	28 2f       	mov	r18, r24
    13b0:	22 95       	swap	r18
    13b2:	22 0f       	add	r18, r18
    13b4:	22 0f       	add	r18, r18
    13b6:	20 7c       	andi	r18, 0xC0	; 192
    13b8:	29 2b       	or	r18, r25
    13ba:	86 95       	lsr	r24
    13bc:	86 95       	lsr	r24
    13be:	98 2f       	mov	r25, r24
    13c0:	93 70       	andi	r25, 0x03	; 3
    13c2:	20 93 1d 03 	sts	0x031D, r18
    13c6:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    13c8:	8f a1       	lds	r24, 0x4f
    13ca:	80 93 1f 03 	sts	0x031F, r24
	current_patch.byte_2 = loaded_patch.byte_2;
    13ce:	88 a5       	lds	r24, 0x68
    13d0:	80 93 20 03 	sts	0x0320, r24
	current_patch.byte_3 = loaded_patch.byte_3;
    13d4:	89 a5       	lds	r24, 0x69
    13d6:	80 93 21 03 	sts	0x0321, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    13da:	8a a5       	lds	r24, 0x6a
    13dc:	80 93 22 03 	sts	0x0322, r24
	current_patch.byte_5 = loaded_patch.byte_5;
    13e0:	8b a5       	lds	r24, 0x6b
    13e2:	80 93 23 03 	sts	0x0323, r24
	
	
}
    13e6:	ab 96       	adiw	r28, 0x2b	; 43
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <lock_pots>:

	
void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
    13f8:	a0 e0       	ldi	r26, 0x00	; 0
    13fa:	b1 e0       	ldi	r27, 0x01	; 1
    13fc:	9d 01       	movw	r18, r26
    13fe:	24 5c       	subi	r18, 0xC4	; 196
    1400:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
    1402:	ed 91       	ld	r30, X+
    1404:	fc 91       	ld	r31, X
    1406:	11 97       	sbiw	r26, 0x01	; 1
    1408:	80 81       	ld	r24, Z
    140a:	41 81       	ldd	r20, Z+1	; 0x01
    140c:	94 2f       	mov	r25, r20
    140e:	93 70       	andi	r25, 0x03	; 3
    1410:	95 95       	asr	r25
    1412:	87 95       	ror	r24
    1414:	95 95       	asr	r25
    1416:	87 95       	ror	r24
    1418:	82 83       	std	Z+2, r24	; 0x02
		pot_id[i]->locked = 1; 
    141a:	ed 91       	ld	r30, X+
    141c:	fd 91       	ld	r31, X+
    141e:	83 81       	ldd	r24, Z+3	; 0x03
    1420:	80 68       	ori	r24, 0x80	; 128
    1422:	83 83       	std	Z+3, r24	; 0x03
}

	
void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
	
	for (int i = 0; i <= 29; i++) {
    1424:	a2 17       	cp	r26, r18
    1426:	b3 07       	cpc	r27, r19
    1428:	61 f7       	brne	.-40     	; 0x1402 <lock_pots+0xa>
		pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
		pot_id[i]->locked = 1; 
		
	}
	
}	
    142a:	08 95       	ret

0000142c <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    142c:	90 91 26 03 	lds	r25, 0x0326
    1430:	97 70       	andi	r25, 0x07	; 7
	if (vco == VCO2) n = octave_index.vco2;
    1432:	60 3f       	cpi	r22, 0xF0	; 240
    1434:	31 f4       	brne	.+12     	; 0x1442 <transpose_note+0x16>
    1436:	90 91 26 03 	lds	r25, 0x0326
    143a:	96 95       	lsr	r25
    143c:	96 95       	lsr	r25
    143e:	96 95       	lsr	r25
    1440:	97 70       	andi	r25, 0x07	; 7

	note = (n*12) + note; //calculate MIDI note after octave addition
    1442:	29 2f       	mov	r18, r25
    1444:	22 0f       	add	r18, r18
    1446:	92 0f       	add	r25, r18
    1448:	99 0f       	add	r25, r25
    144a:	99 0f       	add	r25, r25
    144c:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    144e:	89 38       	cpi	r24, 0x89	; 137
    1450:	08 f0       	brcs	.+2      	; 0x1454 <transpose_note+0x28>
    1452:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1454:	08 95       	ret

00001456 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1456:	80 91 97 03 	lds	r24, 0x0397
    145a:	98 2f       	mov	r25, r24
    145c:	96 95       	lsr	r25
    145e:	96 95       	lsr	r25
    1460:	96 95       	lsr	r25
    1462:	90 ff       	sbrs	r25, 0
    1464:	14 c0       	rjmp	.+40     	; 0x148e <update_octave_range+0x38>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1466:	20 91 26 03 	lds	r18, 0x0326
    146a:	92 2f       	mov	r25, r18
    146c:	9f 5f       	subi	r25, 0xFF	; 255
    146e:	97 70       	andi	r25, 0x07	; 7
    1470:	28 7f       	andi	r18, 0xF8	; 248
    1472:	29 2b       	or	r18, r25
    1474:	20 93 26 03 	sts	0x0326, r18
    1478:	95 30       	cpi	r25, 0x05	; 5
    147a:	29 f4       	brne	.+10     	; 0x1486 <update_octave_range+0x30>
    147c:	92 2f       	mov	r25, r18
    147e:	98 7f       	andi	r25, 0xF8	; 248
    1480:	94 60       	ori	r25, 0x04	; 4
    1482:	90 93 26 03 	sts	0x0326, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1486:	98 e0       	ldi	r25, 0x08	; 8
    1488:	89 27       	eor	r24, r25
    148a:	80 93 97 03 	sts	0x0397, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    148e:	80 91 98 03 	lds	r24, 0x0398
    1492:	98 2f       	mov	r25, r24
    1494:	96 95       	lsr	r25
    1496:	96 95       	lsr	r25
    1498:	96 95       	lsr	r25
    149a:	90 ff       	sbrs	r25, 0
    149c:	11 c0       	rjmp	.+34     	; 0x14c0 <update_octave_range+0x6a>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    149e:	90 91 26 03 	lds	r25, 0x0326
    14a2:	97 70       	andi	r25, 0x07	; 7
    14a4:	49 f0       	breq	.+18     	; 0x14b8 <update_octave_range+0x62>
    14a6:	90 91 26 03 	lds	r25, 0x0326
    14aa:	29 2f       	mov	r18, r25
    14ac:	29 5f       	subi	r18, 0xF9	; 249
    14ae:	27 70       	andi	r18, 0x07	; 7
    14b0:	98 7f       	andi	r25, 0xF8	; 248
    14b2:	92 2b       	or	r25, r18
    14b4:	90 93 26 03 	sts	0x0326, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    14b8:	98 e0       	ldi	r25, 0x08	; 8
    14ba:	89 27       	eor	r24, r25
    14bc:	80 93 98 03 	sts	0x0398, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    14c0:	80 91 26 03 	lds	r24, 0x0326
    14c4:	87 70       	andi	r24, 0x07	; 7
    14c6:	e9 e0       	ldi	r30, 0x09	; 9
    14c8:	f2 e0       	ldi	r31, 0x02	; 2
    14ca:	e8 0f       	add	r30, r24
    14cc:	f1 1d       	adc	r31, r1
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	00 80       	ld	r0, Z
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <update_octave_range+0x84>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <update_octave_range+0x80>
    14de:	58 2f       	mov	r21, r24
    14e0:	80 93 22 03 	sts	0x0322, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    14e4:	90 91 98 03 	lds	r25, 0x0398
    14e8:	29 2f       	mov	r18, r25
    14ea:	26 95       	lsr	r18
    14ec:	26 95       	lsr	r18
    14ee:	20 ff       	sbrs	r18, 0
    14f0:	1a c0       	rjmp	.+52     	; 0x1526 <update_octave_range+0xd0>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    14f2:	80 91 26 03 	lds	r24, 0x0326
    14f6:	28 2f       	mov	r18, r24
    14f8:	26 95       	lsr	r18
    14fa:	26 95       	lsr	r18
    14fc:	26 95       	lsr	r18
    14fe:	2f 5f       	subi	r18, 0xFF	; 255
    1500:	27 70       	andi	r18, 0x07	; 7
    1502:	32 2f       	mov	r19, r18
    1504:	33 0f       	add	r19, r19
    1506:	33 0f       	add	r19, r19
    1508:	33 0f       	add	r19, r19
    150a:	87 7c       	andi	r24, 0xC7	; 199
    150c:	83 2b       	or	r24, r19
    150e:	80 93 26 03 	sts	0x0326, r24
    1512:	25 30       	cpi	r18, 0x05	; 5
    1514:	21 f4       	brne	.+8      	; 0x151e <update_octave_range+0xc8>
    1516:	87 7c       	andi	r24, 0xC7	; 199
    1518:	80 62       	ori	r24, 0x20	; 32
    151a:	80 93 26 03 	sts	0x0326, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    151e:	84 e0       	ldi	r24, 0x04	; 4
    1520:	98 27       	eor	r25, r24
    1522:	90 93 98 03 	sts	0x0398, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1526:	90 91 98 03 	lds	r25, 0x0398
    152a:	29 2f       	mov	r18, r25
    152c:	26 95       	lsr	r18
    152e:	20 ff       	sbrs	r18, 0
    1530:	17 c0       	rjmp	.+46     	; 0x1560 <update_octave_range+0x10a>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1532:	80 91 26 03 	lds	r24, 0x0326
    1536:	88 73       	andi	r24, 0x38	; 56
    1538:	79 f0       	breq	.+30     	; 0x1558 <update_octave_range+0x102>
    153a:	80 91 26 03 	lds	r24, 0x0326
    153e:	28 2f       	mov	r18, r24
    1540:	26 95       	lsr	r18
    1542:	26 95       	lsr	r18
    1544:	26 95       	lsr	r18
    1546:	29 5f       	subi	r18, 0xF9	; 249
    1548:	27 70       	andi	r18, 0x07	; 7
    154a:	22 0f       	add	r18, r18
    154c:	22 0f       	add	r18, r18
    154e:	22 0f       	add	r18, r18
    1550:	87 7c       	andi	r24, 0xC7	; 199
    1552:	82 2b       	or	r24, r18
    1554:	80 93 26 03 	sts	0x0326, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	98 27       	eor	r25, r24
    155c:	90 93 98 03 	sts	0x0398, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1560:	40 91 21 03 	lds	r20, 0x0321
    1564:	4c 7f       	andi	r20, 0xFC	; 252
    1566:	40 93 21 03 	sts	0x0321, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    156a:	90 91 26 03 	lds	r25, 0x0326
    156e:	96 95       	lsr	r25
    1570:	96 95       	lsr	r25
    1572:	96 95       	lsr	r25
    1574:	97 70       	andi	r25, 0x07	; 7
    1576:	89 2f       	mov	r24, r25
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	91 05       	cpc	r25, r1
    157e:	84 f0       	brlt	.+32     	; 0x15a0 <update_octave_range+0x14a>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1580:	fc 01       	movw	r30, r24
    1582:	ec 5f       	subi	r30, 0xFC	; 252
    1584:	fd 4f       	sbci	r31, 0xFD	; 253
    1586:	21 e0       	ldi	r18, 0x01	; 1
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	c9 01       	movw	r24, r18
    158c:	00 80       	ld	r0, Z
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <update_octave_range+0x13e>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <update_octave_range+0x13a>
    1598:	84 2b       	or	r24, r20
    159a:	80 93 21 03 	sts	0x0321, r24
    159e:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    15a0:	fc 01       	movw	r30, r24
    15a2:	ec 5f       	subi	r30, 0xFC	; 252
    15a4:	fd 4f       	sbci	r31, 0xFD	; 253
    15a6:	21 e0       	ldi	r18, 0x01	; 1
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	c9 01       	movw	r24, r18
    15ac:	00 80       	ld	r0, Z
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <update_octave_range+0x15e>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <update_octave_range+0x15a>
    15b8:	85 2b       	or	r24, r21
    15ba:	80 93 22 03 	sts	0x0322, r24
    15be:	08 95       	ret

000015c0 <update_patch_programmer>:
	
}

void update_patch_programmer(void) {
	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    15c0:	80 91 99 03 	lds	r24, 0x0399
    15c4:	98 2f       	mov	r25, r24
    15c6:	92 95       	swap	r25
    15c8:	96 95       	lsr	r25
    15ca:	96 95       	lsr	r25
    15cc:	93 70       	andi	r25, 0x03	; 3
    15ce:	90 ff       	sbrs	r25, 0
    15d0:	0e c0       	rjmp	.+28     	; 0x15ee <update_patch_programmer+0x2e>
		
		if (++current_patch.number == 43) current_patch.number = 42;
    15d2:	90 91 24 03 	lds	r25, 0x0324
    15d6:	9f 5f       	subi	r25, 0xFF	; 255
    15d8:	90 93 24 03 	sts	0x0324, r25
    15dc:	9b 32       	cpi	r25, 0x2B	; 43
    15de:	19 f4       	brne	.+6      	; 0x15e6 <update_patch_programmer+0x26>
    15e0:	9a e2       	ldi	r25, 0x2A	; 42
    15e2:	90 93 24 03 	sts	0x0324, r25
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    15e6:	90 e4       	ldi	r25, 0x40	; 64
    15e8:	89 27       	eor	r24, r25
    15ea:	80 93 99 03 	sts	0x0399, r24
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    15ee:	80 91 99 03 	lds	r24, 0x0399
    15f2:	98 2f       	mov	r25, r24
    15f4:	92 95       	swap	r25
    15f6:	96 95       	lsr	r25
    15f8:	97 70       	andi	r25, 0x07	; 7
    15fa:	90 ff       	sbrs	r25, 0
    15fc:	0b c0       	rjmp	.+22     	; 0x1614 <update_patch_programmer+0x54>
	
	if (current_patch.number == 1) {} else {current_patch.number--;}
    15fe:	90 91 24 03 	lds	r25, 0x0324
    1602:	91 30       	cpi	r25, 0x01	; 1
    1604:	19 f0       	breq	.+6      	; 0x160c <update_patch_programmer+0x4c>
    1606:	91 50       	subi	r25, 0x01	; 1
    1608:	90 93 24 03 	sts	0x0324, r25
	switch_states.byte2 ^= (1<<PROG_DOWN_SW);
    160c:	90 e2       	ldi	r25, 0x20	; 32
    160e:	89 27       	eor	r24, r25
    1610:	80 93 99 03 	sts	0x0399, r24

	}
	
	value_to_display = current_patch.number;	
    1614:	80 91 24 03 	lds	r24, 0x0324
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	90 93 fe 01 	sts	0x01FE, r25
    161e:	80 93 fd 01 	sts	0x01FD, r24
	
	
}	
    1622:	08 95       	ret

00001624 <refresh_synth>:
	
	
void refresh_synth(void) {
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1628:	90 91 97 03 	lds	r25, 0x0397
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    162c:	80 91 99 03 	lds	r24, 0x0399
    1630:	86 95       	lsr	r24
    1632:	86 95       	lsr	r24
    1634:	68 2f       	mov	r22, r24
    1636:	67 95       	ror	r22
    1638:	66 27       	eor	r22, r22
    163a:	67 95       	ror	r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    163c:	29 2f       	mov	r18, r25
    163e:	21 70       	andi	r18, 0x01	; 1
    1640:	26 2b       	or	r18, r22
    1642:	69 2f       	mov	r22, r25
    1644:	66 1f       	adc	r22, r22
    1646:	66 27       	eor	r22, r22
    1648:	66 1f       	adc	r22, r22
    164a:	66 0f       	add	r22, r22
    164c:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    164e:	c9 2f       	mov	r28, r25
    1650:	c6 95       	lsr	r28
    1652:	c6 95       	lsr	r28
    1654:	d0 e0       	ldi	r29, 0x00	; 0
    1656:	c1 70       	andi	r28, 0x01	; 1
    1658:	d0 70       	andi	r29, 0x00	; 0
    165a:	de 01       	movw	r26, r28
    165c:	aa 0f       	add	r26, r26
    165e:	bb 1f       	adc	r27, r27
    1660:	aa 0f       	add	r26, r26
    1662:	bb 1f       	adc	r27, r27
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1664:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1666:	a9 2f       	mov	r26, r25
    1668:	a6 95       	lsr	r26
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	a1 70       	andi	r26, 0x01	; 1
    166e:	b0 70       	andi	r27, 0x00	; 0
    1670:	fd 01       	movw	r30, r26
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	ee 0f       	add	r30, r30
    1678:	ff 1f       	adc	r31, r31
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    167e:	a6 2f       	mov	r26, r22
    1680:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1682:	e9 2f       	mov	r30, r25
    1684:	e2 95       	swap	r30
    1686:	ef 70       	andi	r30, 0x0F	; 15
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	e1 70       	andi	r30, 0x01	; 1
    168c:	f0 70       	andi	r31, 0x00	; 0
    168e:	bf 01       	movw	r22, r30
    1690:	62 95       	swap	r22
    1692:	72 95       	swap	r23
    1694:	70 7f       	andi	r23, 0xF0	; 240
    1696:	76 27       	eor	r23, r22
    1698:	60 7f       	andi	r22, 0xF0	; 240
    169a:	76 27       	eor	r23, r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    169c:	ea 2f       	mov	r30, r26
    169e:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    16a0:	69 2f       	mov	r22, r25
    16a2:	62 95       	swap	r22
    16a4:	66 95       	lsr	r22
    16a6:	67 70       	andi	r22, 0x07	; 7
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	61 70       	andi	r22, 0x01	; 1
    16ac:	70 70       	andi	r23, 0x00	; 0
    16ae:	ab 01       	movw	r20, r22
    16b0:	44 0f       	add	r20, r20
    16b2:	55 1f       	adc	r21, r21
    16b4:	42 95       	swap	r20
    16b6:	52 95       	swap	r21
    16b8:	50 7f       	andi	r21, 0xF0	; 240
    16ba:	54 27       	eor	r21, r20
    16bc:	40 7f       	andi	r20, 0xF0	; 240
    16be:	54 27       	eor	r21, r20
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    16c0:	6e 2f       	mov	r22, r30
    16c2:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    16c4:	49 2f       	mov	r20, r25
    16c6:	42 95       	swap	r20
    16c8:	46 95       	lsr	r20
    16ca:	46 95       	lsr	r20
    16cc:	43 70       	andi	r20, 0x03	; 3
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	41 70       	andi	r20, 0x01	; 1
    16d2:	50 70       	andi	r21, 0x00	; 0
    16d4:	9a 01       	movw	r18, r20
    16d6:	00 24       	eor	r0, r0
    16d8:	36 95       	lsr	r19
    16da:	27 95       	ror	r18
    16dc:	07 94       	ror	r0
    16de:	36 95       	lsr	r19
    16e0:	27 95       	ror	r18
    16e2:	07 94       	ror	r0
    16e4:	32 2f       	mov	r19, r18
    16e6:	20 2d       	mov	r18, r0
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    16e8:	26 2b       	or	r18, r22
    16ea:	20 93 23 03 	sts	0x0323, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    16ee:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    16f0:	81 95       	neg	r24
    16f2:	89 27       	eor	r24, r25
    16f4:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    16f6:	89 27       	eor	r24, r25
    16f8:	0e 94 0b 12 	call	0x2416	; 0x2416 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    16fc:	ed ed       	ldi	r30, 0xDD	; 221
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	90 81       	ld	r25, Z
    1702:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
    1704:	80 91 99 03 	lds	r24, 0x0399
    1708:	86 95       	lsr	r24
    170a:	86 95       	lsr	r24
    170c:	86 95       	lsr	r24
    170e:	81 70       	andi	r24, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1710:	81 95       	neg	r24
    1712:	82 27       	eor	r24, r18
    1714:	80 71       	andi	r24, 0x10	; 16
    1716:	89 27       	eor	r24, r25
    1718:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    171a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <update_octave_range>
	
	//parse LFO data
	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    171e:	80 91 98 03 	lds	r24, 0x0398
    1722:	88 23       	and	r24, r24
    1724:	84 f5       	brge	.+96     	; 0x1786 <refresh_synth+0x162>
		
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1726:	80 58       	subi	r24, 0x80	; 128
    1728:	80 93 98 03 	sts	0x0398, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    172c:	80 91 27 03 	lds	r24, 0x0327
    1730:	8f 5f       	subi	r24, 0xFF	; 255
    1732:	80 93 27 03 	sts	0x0327, r24
    1736:	85 30       	cpi	r24, 0x05	; 5
    1738:	11 f4       	brne	.+4      	; 0x173e <refresh_synth+0x11a>
    173a:	10 92 27 03 	sts	0x0327, r1
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    173e:	a0 91 27 03 	lds	r26, 0x0327
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	a2 5f       	subi	r26, 0xF2	; 242
    1746:	bd 4f       	sbci	r27, 0xFD	; 253
    1748:	8c 91       	ld	r24, X
    174a:	87 70       	andi	r24, 0x07	; 7
    174c:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    174e:	ed ed       	ldi	r30, 0xDD	; 221
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	80 62       	ori	r24, 0x20	; 32
    1756:	80 83       	st	Z, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1758:	80 81       	ld	r24, Z
    175a:	8f 7d       	andi	r24, 0xDF	; 223
    175c:	80 83       	st	Z, r24
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    175e:	8c 91       	ld	r24, X
    1760:	86 95       	lsr	r24
    1762:	86 95       	lsr	r24
    1764:	86 95       	lsr	r24
    1766:	87 70       	andi	r24, 0x07	; 7
    1768:	21 e0       	ldi	r18, 0x01	; 1
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	a9 01       	movw	r20, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <refresh_synth+0x150>
    1770:	44 0f       	add	r20, r20
    1772:	55 1f       	adc	r21, r21
    1774:	8a 95       	dec	r24
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <refresh_synth+0x14c>
    1778:	ca 01       	movw	r24, r20
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    177a:	90 91 20 03 	lds	r25, 0x0320
    177e:	9f 70       	andi	r25, 0x0F	; 15
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1780:	89 2b       	or	r24, r25
    1782:	80 93 20 03 	sts	0x0320, r24
		
		
	}
	
	update_patch_programmer();		
    1786:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <update_patch_programmer>
				
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) //temporary tune button hack
    178a:	80 91 98 03 	lds	r24, 0x0398
    178e:	98 2f       	mov	r25, r24
    1790:	92 95       	swap	r25
    1792:	96 95       	lsr	r25
    1794:	97 70       	andi	r25, 0x07	; 7
    1796:	90 ff       	sbrs	r25, 0
    1798:	3f c0       	rjmp	.+126    	; 0x1818 <refresh_synth+0x1f4>
		{ 
				
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle read switch state
    179a:	90 e2       	ldi	r25, 0x20	; 32
    179c:	89 27       	eor	r24, r25
    179e:	80 93 98 03 	sts	0x0398, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    17a2:	87 e0       	ldi	r24, 0x07	; 7
    17a4:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    17a6:	cd ed       	ldi	r28, 0xDD	; 221
    17a8:	d0 e0       	ldi	r29, 0x00	; 0
    17aa:	88 81       	ld	r24, Y
    17ac:	80 62       	ori	r24, 0x20	; 32
    17ae:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    17b0:	88 81       	ld	r24, Y
    17b2:	8f 7d       	andi	r24, 0xDF	; 223
    17b4:	88 83       	st	Y, r24
		DATA_BUS = 0;
    17b6:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    17b8:	8f e0       	ldi	r24, 0x0F	; 15
    17ba:	6f e0       	ldi	r22, 0x0F	; 15
    17bc:	7e e5       	ldi	r23, 0x5E	; 94
    17be:	0e 94 8e 0c 	call	0x191c	; 0x191c <set_vco_init_cv>
    17c2:	90 93 8f 03 	sts	0x038F, r25
    17c6:	80 93 8e 03 	sts	0x038E, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    17ca:	80 ef       	ldi	r24, 0xF0	; 240
    17cc:	6f e0       	ldi	r22, 0x0F	; 15
    17ce:	7e e5       	ldi	r23, 0x5E	; 94
    17d0:	0e 94 8e 0c 	call	0x191c	; 0x191c <set_vco_init_cv>
    17d4:	90 93 8d 03 	sts	0x038D, r25
    17d8:	80 93 8c 03 	sts	0x038C, r24

		tune_8ths(VCO1);
    17dc:	8f e0       	ldi	r24, 0x0F	; 15
    17de:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <tune_8ths>
		tune_8ths(VCO2);
    17e2:	80 ef       	ldi	r24, 0xF0	; 240
    17e4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <tune_8ths>
		tune_filter();
    17e8:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <tune_filter>
		save_tuning_tables();
    17ec:	0e 94 62 11 	call	0x22c4	; 0x22c4 <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17f0:	8f e4       	ldi	r24, 0x4F	; 79
    17f2:	93 ec       	ldi	r25, 0xC3	; 195
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <refresh_synth+0x1d0>
    17f8:	00 c0       	rjmp	.+0      	; 0x17fa <refresh_synth+0x1d6>
    17fa:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
    17fc:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    17fe:	88 81       	ld	r24, Y
    1800:	80 62       	ori	r24, 0x20	; 32
    1802:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1804:	88 81       	ld	r24, Y
    1806:	8f 7d       	andi	r24, 0xDF	; 223
    1808:	88 83       	st	Y, r24
		DATA_BUS = 0;
    180a:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    180c:	80 91 20 03 	lds	r24, 0x0320
    1810:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1812:	80 68       	ori	r24, 0x80	; 128
    1814:	80 93 20 03 	sts	0x0320, r24
				
		}
		
		
	
}
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	08 95       	ret

0000181e <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    181e:	88 ed       	ldi	r24, 0xD8	; 216
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    182a:	81 ee       	ldi	r24, 0xE1	; 225
    182c:	91 e0       	ldi	r25, 0x01	; 1
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1836:	82 ee       	ldi	r24, 0xE2	; 226
    1838:	91 e0       	ldi	r25, 0x01	; 1
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1842:	86 e9       	ldi	r24, 0x96	; 150
    1844:	92 e0       	ldi	r25, 0x02	; 2
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    184e:	8a ed       	ldi	r24, 0xDA	; 218
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    185a:	8f ed       	ldi	r24, 0xDF	; 223
    185c:	91 e0       	ldi	r25, 0x01	; 1
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1866:	80 ee       	ldi	r24, 0xE0	; 224
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1872:	81 ed       	ldi	r24, 0xD1	; 209
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    187e:	86 ed       	ldi	r24, 0xD6	; 214
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    188a:	82 ed       	ldi	r24, 0xD2	; 210
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1896:	83 ed       	ldi	r24, 0xD3	; 211
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    18a2:	84 ed       	ldi	r24, 0xD4	; 212
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	6f ef       	ldi	r22, 0xFF	; 255
    18a8:	7f e3       	ldi	r23, 0x3F	; 63
    18aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    18ae:	85 ed       	ldi	r24, 0xD5	; 213
    18b0:	91 e0       	ldi	r25, 0x01	; 1
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    18ba:	89 ed       	ldi	r24, 0xD9	; 217
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    18c6:	8e ec       	ldi	r24, 0xCE	; 206
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    18d2:	8c ec       	ldi	r24, 0xCC	; 204
    18d4:	91 e0       	ldi	r25, 0x01	; 1
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    18de:	8a ec       	ldi	r24, 0xCA	; 202
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	6f ef       	ldi	r22, 0xFF	; 255
    18e4:	7f e3       	ldi	r23, 0x3F	; 63
    18e6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    18ea:	88 ec       	ldi	r24, 0xC8	; 200
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    18f6:	80 ed       	ldi	r24, 0xD0	; 208
    18f8:	91 e0       	ldi	r25, 0x01	; 1
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1902:	83 ee       	ldi	r24, 0xE3	; 227
    1904:	91 e0       	ldi	r25, 0x01	; 1
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    190e:	84 ee       	ldi	r24, 0xE4	; 228
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}	
    191a:	08 95       	ret

0000191c <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    191c:	2f 92       	push	r2
    191e:	3f 92       	push	r3
    1920:	4f 92       	push	r4
    1922:	5f 92       	push	r5
    1924:	6f 92       	push	r6
    1926:	7f 92       	push	r7
    1928:	8f 92       	push	r8
    192a:	9f 92       	push	r9
    192c:	af 92       	push	r10
    192e:	bf 92       	push	r11
    1930:	cf 92       	push	r12
    1932:	df 92       	push	r13
    1934:	ef 92       	push	r14
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	2c 97       	sbiw	r28, 0x0c	; 12
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	08 2f       	mov	r16, r24
    1952:	78 87       	std	Y+8, r23	; 0x08
    1954:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1956:	80 91 94 03 	lds	r24, 0x0394
    195a:	83 60       	ori	r24, 0x03	; 3
    195c:	80 93 94 03 	sts	0x0394, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1960:	0e 94 0f 0c 	call	0x181e	; 0x181e <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1964:	10 92 93 03 	sts	0x0393, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1968:	0f 30       	cpi	r16, 0x0F	; 15
    196a:	e1 f4       	brne	.+56     	; 0x19a4 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    196c:	0f 2e       	mov	r0, r31
    196e:	f6 ee       	ldi	r31, 0xE6	; 230
    1970:	4f 2e       	mov	r4, r31
    1972:	f1 e0       	ldi	r31, 0x01	; 1
    1974:	5f 2e       	mov	r5, r31
    1976:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1978:	0f 2e       	mov	r0, r31
    197a:	fe ed       	ldi	r31, 0xDE	; 222
    197c:	2f 2e       	mov	r2, r31
    197e:	f1 e0       	ldi	r31, 0x01	; 1
    1980:	3f 2e       	mov	r3, r31
    1982:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1984:	23 ee       	ldi	r18, 0xE3	; 227
    1986:	31 e0       	ldi	r19, 0x01	; 1
    1988:	3a 83       	std	Y+2, r19	; 0x02
    198a:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    198c:	0f 2e       	mov	r0, r31
    198e:	fc ed       	ldi	r31, 0xDC	; 220
    1990:	8f 2e       	mov	r8, r31
    1992:	f1 e0       	ldi	r31, 0x01	; 1
    1994:	9f 2e       	mov	r9, r31
    1996:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1998:	84 e7       	ldi	r24, 0x74	; 116
    199a:	97 e0       	ldi	r25, 0x07	; 7
    199c:	9a 87       	std	Y+10, r25	; 0x0a
    199e:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	1b c0       	rjmp	.+54     	; 0x19da <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    19a4:	0f 2e       	mov	r0, r31
    19a6:	f5 ee       	ldi	r31, 0xE5	; 229
    19a8:	4f 2e       	mov	r4, r31
    19aa:	f1 e0       	ldi	r31, 0x01	; 1
    19ac:	5f 2e       	mov	r5, r31
    19ae:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    19b0:	0f 2e       	mov	r0, r31
    19b2:	f7 ed       	ldi	r31, 0xD7	; 215
    19b4:	2f 2e       	mov	r2, r31
    19b6:	f1 e0       	ldi	r31, 0x01	; 1
    19b8:	3f 2e       	mov	r3, r31
    19ba:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    19bc:	e4 ee       	ldi	r30, 0xE4	; 228
    19be:	f1 e0       	ldi	r31, 0x01	; 1
    19c0:	fa 83       	std	Y+2, r31	; 0x02
    19c2:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    19c4:	0f 2e       	mov	r0, r31
    19c6:	fd ed       	ldi	r31, 0xDD	; 221
    19c8:	8f 2e       	mov	r8, r31
    19ca:	f1 e0       	ldi	r31, 0x01	; 1
    19cc:	9f 2e       	mov	r9, r31
    19ce:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    19d0:	22 e7       	ldi	r18, 0x72	; 114
    19d2:	37 e0       	ldi	r19, 0x07	; 7
    19d4:	3a 87       	std	Y+10, r19	; 0x0a
    19d6:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    19d8:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    19da:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    19dc:	ed ed       	ldi	r30, 0xDD	; 221
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	80 64       	ori	r24, 0x40	; 64
    19e4:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    19e6:	80 81       	ld	r24, Z
    19e8:	8f 7b       	andi	r24, 0xBF	; 191
    19ea:	80 83       	st	Z, r24
	DATA_BUS = 0;
    19ec:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    19ee:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    19f0:	84 b5       	in	r24, 0x24	; 36
    19f2:	8f 60       	ori	r24, 0x0F	; 15
    19f4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    19fa:	ee e6       	ldi	r30, 0x6E	; 110
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	90 81       	ld	r25, Z
    1a00:	92 60       	ori	r25, 0x02	; 2
    1a02:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1a04:	80 93 95 03 	sts	0x0395, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1a08:	8d e0       	ldi	r24, 0x0D	; 13
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1a10:	80 2f       	mov	r24, r16
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	8c 01       	movw	r16, r24
    1a16:	0f 5f       	subi	r16, 0xFF	; 255
    1a18:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1a1a:	0f 2e       	mov	r0, r31
    1a1c:	f8 ed       	ldi	r31, 0xD8	; 216
    1a1e:	ef 2e       	mov	r14, r31
    1a20:	f1 e0       	ldi	r31, 0x01	; 1
    1a22:	ff 2e       	mov	r15, r31
    1a24:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1a26:	0f 2e       	mov	r0, r31
    1a28:	f4 ed       	ldi	r31, 0xD4	; 212
    1a2a:	cf 2e       	mov	r12, r31
    1a2c:	f1 e0       	ldi	r31, 0x01	; 1
    1a2e:	df 2e       	mov	r13, r31
    1a30:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1a32:	0f 2e       	mov	r0, r31
    1a34:	fa ec       	ldi	r31, 0xCA	; 202
    1a36:	af 2e       	mov	r10, r31
    1a38:	f1 e0       	ldi	r31, 0x01	; 1
    1a3a:	bf 2e       	mov	r11, r31
    1a3c:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1a3e:	0f 2e       	mov	r0, r31
    1a40:	fb ec       	ldi	r31, 0xCB	; 203
    1a42:	6f 2e       	mov	r6, r31
    1a44:	f1 e0       	ldi	r31, 0x01	; 1
    1a46:	7f 2e       	mov	r7, r31
    1a48:	f0 2d       	mov	r31, r0
    1a4a:	e0 e0       	ldi	r30, 0x00	; 0
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	fc 87       	std	Y+12, r31	; 0x0c
    1a50:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1a52:	21 e0       	ldi	r18, 0x01	; 1
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	0b 80       	ldd	r0, Y+3	; 0x03
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <set_vco_init_cv+0x142>
    1a5a:	22 0f       	add	r18, r18
    1a5c:	33 1f       	adc	r19, r19
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <set_vco_init_cv+0x13e>
    1a62:	3e 83       	std	Y+6, r19	; 0x06
    1a64:	2d 83       	std	Y+5, r18	; 0x05
    1a66:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a68:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a6a:	82 2b       	or	r24, r18
    1a6c:	93 2b       	or	r25, r19
    1a6e:	9c 87       	std	Y+12, r25	; 0x0c
    1a70:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1a72:	c4 01       	movw	r24, r8
    1a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a78:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
		
		count_finished = FALSE;
    1a7c:	10 92 93 03 	sts	0x0393, r1
		period_counter = 0;
    1a80:	10 92 96 03 	sts	0x0396, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1a84:	8f e0       	ldi	r24, 0x0F	; 15
    1a86:	e8 e1       	ldi	r30, 0x18	; 24
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	a8 95       	wdr
    1a90:	e0 93 60 00 	sts	0x0060, r30
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1a9a:	80 91 93 03 	lds	r24, 0x0393
    1a9e:	88 23       	and	r24, r24
    1aa0:	89 f5       	brne	.+98     	; 0x1b04 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1aa2:	c8 01       	movw	r24, r16
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1aaa:	c4 01       	movw	r24, r8
    1aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1ab4:	c1 01       	movw	r24, r2
    1ab6:	6f ef       	ldi	r22, 0xFF	; 255
    1ab8:	7f e3       	ldi	r23, 0x3F	; 63
    1aba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1abe:	c7 01       	movw	r24, r14
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1ac8:	c6 01       	movw	r24, r12
    1aca:	6f ef       	ldi	r22, 0xFF	; 255
    1acc:	7f e3       	ldi	r23, 0x3F	; 63
    1ace:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1ad2:	c5 01       	movw	r24, r10
    1ad4:	6f ef       	ldi	r22, 0xFF	; 255
    1ad6:	7f e3       	ldi	r23, 0x3F	; 63
    1ad8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1adc:	c3 01       	movw	r24, r6
    1ade:	6f ef       	ldi	r22, 0xFF	; 255
    1ae0:	7f e3       	ldi	r23, 0x3F	; 63
    1ae2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aea:	6f ef       	ldi	r22, 0xFF	; 255
    1aec:	7f e3       	ldi	r23, 0x3F	; 63
    1aee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1af2:	c2 01       	movw	r24, r4
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1afc:	80 91 93 03 	lds	r24, 0x0393
    1b00:	88 23       	and	r24, r24
    1b02:	79 f2       	breq	.-98     	; 0x1aa2 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1b04:	88 e1       	ldi	r24, 0x18	; 24
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	80 93 60 00 	sts	0x0060, r24
    1b0e:	10 92 60 00 	sts	0x0060, r1
    1b12:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1b14:	80 91 91 03 	lds	r24, 0x0391
    1b18:	90 91 92 03 	lds	r25, 0x0392
    1b1c:	ef 81       	ldd	r30, Y+7	; 0x07
    1b1e:	f8 85       	ldd	r31, Y+8	; 0x08
    1b20:	e8 17       	cp	r30, r24
    1b22:	f9 07       	cpc	r31, r25
    1b24:	20 f0       	brcs	.+8      	; 0x1b2e <set_vco_init_cv+0x212>
    1b26:	80 91 92 02 	lds	r24, 0x0292
    1b2a:	88 23       	and	r24, r24
    1b2c:	51 f4       	brne	.+20     	; 0x1b42 <set_vco_init_cv+0x226>
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	80 95       	com	r24
    1b34:	90 95       	com	r25
    1b36:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b38:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b3a:	28 23       	and	r18, r24
    1b3c:	39 23       	and	r19, r25
    1b3e:	3c 87       	std	Y+12, r19	; 0x0c
    1b40:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	80 93 92 02 	sts	0x0292, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	9c 83       	std	Y+4, r25	; 0x04
    1b50:	8b 83       	std	Y+3, r24	; 0x03
    1b52:	ef ef       	ldi	r30, 0xFF	; 255
    1b54:	8f 3f       	cpi	r24, 0xFF	; 255
    1b56:	9e 07       	cpc	r25, r30
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <set_vco_init_cv+0x240>
    1b5a:	7b cf       	rjmp	.-266    	; 0x1a52 <set_vco_init_cv+0x136>
    1b5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b60:	3e 83       	std	Y+6, r19	; 0x06
    1b62:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1b64:	88 ec       	ldi	r24, 0xC8	; 200
    1b66:	91 e0       	ldi	r25, 0x01	; 1
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    1b70:	89 ec       	ldi	r24, 0xC9	; 201
    1b72:	91 e0       	ldi	r25, 0x01	; 1
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    1b7c:	84 ed       	ldi	r24, 0xD4	; 212
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    1b88:	88 ed       	ldi	r24, 0xD8	; 216
    1b8a:	91 e0       	ldi	r25, 0x01	; 1
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	70 e0       	ldi	r23, 0x00	; 0
    1b90:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    1b94:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1b96:	ee e6       	ldi	r30, 0x6E	; 110
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8d 7f       	andi	r24, 0xFD	; 253
    1b9e:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    1ba0:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ba8:	7e 81       	ldd	r23, Y+6	; 0x06
    1baa:	0e 94 c6 19 	call	0x338c	; 0x338c <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	2c 96       	adiw	r28, 0x0c	; 12
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	ff 90       	pop	r15
    1bc8:	ef 90       	pop	r14
    1bca:	df 90       	pop	r13
    1bcc:	cf 90       	pop	r12
    1bce:	bf 90       	pop	r11
    1bd0:	af 90       	pop	r10
    1bd2:	9f 90       	pop	r9
    1bd4:	8f 90       	pop	r8
    1bd6:	7f 90       	pop	r7
    1bd8:	6f 90       	pop	r6
    1bda:	5f 90       	pop	r5
    1bdc:	4f 90       	pop	r4
    1bde:	3f 90       	pop	r3
    1be0:	2f 90       	pop	r2
    1be2:	08 95       	ret

00001be4 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1be4:	2f 92       	push	r2
    1be6:	3f 92       	push	r3
    1be8:	4f 92       	push	r4
    1bea:	5f 92       	push	r5
    1bec:	6f 92       	push	r6
    1bee:	7f 92       	push	r7
    1bf0:	8f 92       	push	r8
    1bf2:	9f 92       	push	r9
    1bf4:	af 92       	push	r10
    1bf6:	bf 92       	push	r11
    1bf8:	cf 92       	push	r12
    1bfa:	df 92       	push	r13
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	c0 54       	subi	r28, 0x40	; 64
    1c0e:	d0 40       	sbci	r29, 0x00	; 0
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    1c1c:	de 01       	movw	r26, r28
    1c1e:	11 96       	adiw	r26, 0x01	; 1
    1c20:	e3 e1       	ldi	r30, 0x13	; 19
    1c22:	f2 e0       	ldi	r31, 0x02	; 2
    1c24:	80 e3       	ldi	r24, 0x30	; 48
    1c26:	01 90       	ld	r0, Z+
    1c28:	0d 92       	st	X+, r0
    1c2a:	81 50       	subi	r24, 0x01	; 1
    1c2c:	e1 f7       	brne	.-8      	; 0x1c26 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    1c2e:	0e 94 0f 0c 	call	0x181e	; 0x181e <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1c32:	0f 30       	cpi	r16, 0x0F	; 15
    1c34:	11 f5       	brne	.+68     	; 0x1c7a <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    1c36:	40 90 8e 03 	lds	r4, 0x038E
    1c3a:	50 90 8f 03 	lds	r5, 0x038F
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1c3e:	0f 2e       	mov	r0, r31
    1c40:	f6 ee       	ldi	r31, 0xE6	; 230
    1c42:	8f 2e       	mov	r8, r31
    1c44:	f1 e0       	ldi	r31, 0x01	; 1
    1c46:	9f 2e       	mov	r9, r31
    1c48:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    1c4a:	0f 2e       	mov	r0, r31
    1c4c:	fe ed       	ldi	r31, 0xDE	; 222
    1c4e:	2f 2e       	mov	r2, r31
    1c50:	f1 e0       	ldi	r31, 0x01	; 1
    1c52:	3f 2e       	mov	r3, r31
    1c54:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    1c56:	23 ee       	ldi	r18, 0xE3	; 227
    1c58:	31 e0       	ldi	r19, 0x01	; 1
    1c5a:	3a ab       	sts	0x5a, r19
    1c5c:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1c5e:	0f 2e       	mov	r0, r31
    1c60:	fc ed       	ldi	r31, 0xDC	; 220
    1c62:	6f 2e       	mov	r6, r31
    1c64:	f1 e0       	ldi	r31, 0x01	; 1
    1c66:	7f 2e       	mov	r7, r31
    1c68:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    1c6a:	0a e6       	ldi	r16, 0x6A	; 106
    1c6c:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    1c6e:	cc 24       	eor	r12, r12
    1c70:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    1c72:	ee 24       	eor	r14, r14
    1c74:	68 94       	set
    1c76:	e1 f8       	bld	r14, 1
    1c78:	22 c0       	rjmp	.+68     	; 0x1cbe <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    1c7a:	40 90 8c 03 	lds	r4, 0x038C
    1c7e:	50 90 8d 03 	lds	r5, 0x038D
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1c82:	0f 2e       	mov	r0, r31
    1c84:	f5 ee       	ldi	r31, 0xE5	; 229
    1c86:	8f 2e       	mov	r8, r31
    1c88:	f1 e0       	ldi	r31, 0x01	; 1
    1c8a:	9f 2e       	mov	r9, r31
    1c8c:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    1c8e:	0f 2e       	mov	r0, r31
    1c90:	f7 ed       	ldi	r31, 0xD7	; 215
    1c92:	2f 2e       	mov	r2, r31
    1c94:	f1 e0       	ldi	r31, 0x01	; 1
    1c96:	3f 2e       	mov	r3, r31
    1c98:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    1c9a:	44 ee       	ldi	r20, 0xE4	; 228
    1c9c:	51 e0       	ldi	r21, 0x01	; 1
    1c9e:	5a ab       	sts	0x5a, r21
    1ca0:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1ca2:	0f 2e       	mov	r0, r31
    1ca4:	fd ed       	ldi	r31, 0xDD	; 221
    1ca6:	6f 2e       	mov	r6, r31
    1ca8:	f1 e0       	ldi	r31, 0x01	; 1
    1caa:	7f 2e       	mov	r7, r31
    1cac:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    1cae:	08 e4       	ldi	r16, 0x48	; 72
    1cb0:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    1cb2:	cc 24       	eor	r12, r12
    1cb4:	68 94       	set
    1cb6:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    1cb8:	ee 24       	eor	r14, r14
    1cba:	68 94       	set
    1cbc:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    1cbe:	c3 01       	movw	r24, r6
    1cc0:	b2 01       	movw	r22, r4
    1cc2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    1cc6:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1cc8:	ed ed       	ldi	r30, 0xDD	; 221
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	80 64       	ori	r24, 0x40	; 64
    1cd0:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8f 7b       	andi	r24, 0xBF	; 191
    1cd6:	80 83       	st	Z, r24
		DATA_BUS = 0;
    1cd8:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    1cda:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	80 93 95 03 	sts	0x0395, r24
		
		compare_match_counter = 0;	
    1ce2:	10 92 90 03 	sts	0x0390, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1ce6:	8c 2d       	mov	r24, r12
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	24 e6       	ldi	r18, 0x64	; 100
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	82 9f       	mul	r24, r18
    1cf0:	d0 01       	movw	r26, r0
    1cf2:	83 9f       	mul	r24, r19
    1cf4:	b0 0d       	add	r27, r0
    1cf6:	92 9f       	mul	r25, r18
    1cf8:	b0 0d       	add	r27, r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	bc ab       	sts	0x5c, r27
    1cfe:	ab ab       	sts	0x5b, r26
    1d00:	fe 01       	movw	r30, r28
    1d02:	31 96       	adiw	r30, 0x01	; 1
    1d04:	fc af       	sts	0x7c, r31
    1d06:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    1d08:	98 01       	movw	r18, r16
    1d0a:	2e 5f       	subi	r18, 0xFE	; 254
    1d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0e:	21 96       	adiw	r28, 0x01	; 1
    1d10:	3f af       	sts	0x7f, r19
    1d12:	2e af       	sts	0x7e, r18
    1d14:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1d16:	1e ae       	sts	0xbe, r17
    1d18:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1d1a:	0f 2e       	mov	r0, r31
    1d1c:	f8 ed       	ldi	r31, 0xD8	; 216
    1d1e:	ef 2e       	mov	r14, r31
    1d20:	f1 e0       	ldi	r31, 0x01	; 1
    1d22:	ff 2e       	mov	r15, r31
    1d24:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    1d26:	0f 2e       	mov	r0, r31
    1d28:	f4 ed       	ldi	r31, 0xD4	; 212
    1d2a:	cf 2e       	mov	r12, r31
    1d2c:	f1 e0       	ldi	r31, 0x01	; 1
    1d2e:	df 2e       	mov	r13, r31
    1d30:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1d32:	0f 2e       	mov	r0, r31
    1d34:	fa ec       	ldi	r31, 0xCA	; 202
    1d36:	af 2e       	mov	r10, r31
    1d38:	f1 e0       	ldi	r31, 0x01	; 1
    1d3a:	bf 2e       	mov	r11, r31
    1d3c:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    1d3e:	eb ad       	sts	0x6b, r30
    1d40:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    1d42:	80 81       	ld	r24, Z
    1d44:	80 93 95 03 	sts	0x0395, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1d48:	84 b5       	in	r24, 0x24	; 36
    1d4a:	8f 60       	ori	r24, 0x0F	; 15
    1d4c:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    1d52:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    1d54:	4d ad       	sts	0x6d, r20
    1d56:	5e ad       	sts	0x6e, r21
    1d58:	43 30       	cpi	r20, 0x03	; 3
    1d5a:	51 05       	cpc	r21, r1
    1d5c:	24 f4       	brge	.+8      	; 0x1d66 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	80 93 94 03 	sts	0x0394, r24
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	80 93 94 03 	sts	0x0394, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    1d6c:	81 81       	ldd	r24, Z+1	; 0x01
    1d6e:	92 81       	ldd	r25, Z+2	; 0x02
    1d70:	9a af       	sts	0x7a, r25
    1d72:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1d74:	ad e0       	ldi	r26, 0x0D	; 13
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	be ab       	sts	0x5e, r27
    1d7a:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    1d7c:	00 e0       	ldi	r16, 0x00	; 0
    1d7e:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    1d80:	e1 e0       	ldi	r30, 0x01	; 1
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	0d a8       	sts	0x8d, r16
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <tune_8ths+0x1a8>
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <tune_8ths+0x1a4>
    1d90:	f8 af       	sts	0x78, r31
    1d92:	ef ab       	sts	0x5f, r30
    1d94:	0e 2b       	or	r16, r30
    1d96:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    1d98:	ae e6       	ldi	r26, 0x6E	; 110
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	8c 91       	ld	r24, X
    1d9e:	8d 7f       	andi	r24, 0xFD	; 253
    1da0:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1da2:	c4 01       	movw	r24, r8
    1da4:	b8 01       	movw	r22, r16
    1da6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
    1daa:	e3 ef       	ldi	r30, 0xF3	; 243
    1dac:	f1 e0       	ldi	r31, 0x01	; 1
    1dae:	31 97       	sbiw	r30, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <tune_8ths+0x1ca>
    1db2:	00 c0       	rjmp	.+0      	; 0x1db4 <tune_8ths+0x1d0>
    1db4:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1db6:	ae e6       	ldi	r26, 0x6E	; 110
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	8c 91       	ld	r24, X
    1dbc:	82 60       	ori	r24, 0x02	; 2
    1dbe:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    1dc0:	10 92 93 03 	sts	0x0393, r1
				period_counter = 0;
    1dc4:	10 92 96 03 	sts	0x0396, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    1dc8:	e8 e1       	ldi	r30, 0x18	; 24
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	2f e0       	ldi	r18, 0x0F	; 15
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	a8 95       	wdr
    1dd4:	e0 93 60 00 	sts	0x0060, r30
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    1dde:	80 91 93 03 	lds	r24, 0x0393
    1de2:	88 23       	and	r24, r24
    1de4:	81 f5       	brne	.+96     	; 0x1e46 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1de6:	80 91 95 03 	lds	r24, 0x0395
    1dea:	4b a9       	sts	0x4b, r20
    1dec:	5c a9       	sts	0x4c, r21
    1dee:	48 0f       	add	r20, r24
    1df0:	51 1d       	adc	r21, r1
    1df2:	ca 01       	movw	r24, r20
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    1dfa:	c3 01       	movw	r24, r6
    1dfc:	b2 01       	movw	r22, r4
    1dfe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1e02:	c4 01       	movw	r24, r8
    1e04:	b8 01       	movw	r22, r16
    1e06:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1e0a:	c7 01       	movw	r24, r14
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	70 e0       	ldi	r23, 0x00	; 0
    1e10:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    1e14:	c6 01       	movw	r24, r12
    1e16:	6f ef       	ldi	r22, 0xFF	; 255
    1e18:	7f e3       	ldi	r23, 0x3F	; 63
    1e1a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1e1e:	c5 01       	movw	r24, r10
    1e20:	6f ef       	ldi	r22, 0xFF	; 255
    1e22:	7f e3       	ldi	r23, 0x3F	; 63
    1e24:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    1e28:	c1 01       	movw	r24, r2
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	70 e2       	ldi	r23, 0x20	; 32
    1e2e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    1e32:	89 a9       	sts	0x49, r24
    1e34:	9a a9       	sts	0x4a, r25
    1e36:	6f ef       	ldi	r22, 0xFF	; 255
    1e38:	7f e3       	ldi	r23, 0x3F	; 63
    1e3a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    1e3e:	80 91 93 03 	lds	r24, 0x0393
    1e42:	88 23       	and	r24, r24
    1e44:	81 f2       	breq	.-96     	; 0x1de6 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    1e46:	58 e1       	ldi	r21, 0x18	; 24
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	50 93 60 00 	sts	0x0060, r21
    1e50:	10 92 60 00 	sts	0x0060, r1
    1e54:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    1e56:	80 91 91 03 	lds	r24, 0x0391
    1e5a:	90 91 92 03 	lds	r25, 0x0392
    1e5e:	a9 ad       	sts	0x69, r26
    1e60:	ba ad       	sts	0x6a, r27
    1e62:	a8 17       	cp	r26, r24
    1e64:	b9 07       	cpc	r27, r25
    1e66:	50 f0       	brcs	.+20     	; 0x1e7c <tune_8ths+0x298>
    1e68:	80 91 92 02 	lds	r24, 0x0292
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	31 f4       	brne	.+12     	; 0x1e7c <tune_8ths+0x298>
    1e70:	8f a9       	sts	0x4f, r24
    1e72:	98 ad       	sts	0x68, r25
    1e74:	80 95       	com	r24
    1e76:	90 95       	com	r25
    1e78:	08 23       	and	r16, r24
    1e7a:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    1e7c:	80 91 91 03 	lds	r24, 0x0391
    1e80:	90 91 92 03 	lds	r25, 0x0392
    1e84:	e9 ad       	sts	0x69, r30
    1e86:	fa ad       	sts	0x6a, r31
    1e88:	8e 17       	cp	r24, r30
    1e8a:	9f 07       	cpc	r25, r31
    1e8c:	21 f4       	brne	.+8      	; 0x1e96 <tune_8ths+0x2b2>
    1e8e:	80 91 92 02 	lds	r24, 0x0292
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	71 f0       	breq	.+28     	; 0x1eb2 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    1e96:	f1 e0       	ldi	r31, 0x01	; 1
    1e98:	f0 93 92 02 	sts	0x0292, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1e9c:	2d a9       	sts	0x4d, r18
    1e9e:	3e a9       	sts	0x4e, r19
    1ea0:	21 50       	subi	r18, 0x01	; 1
    1ea2:	30 40       	sbci	r19, 0x00	; 0
    1ea4:	3e ab       	sts	0x5e, r19
    1ea6:	2d ab       	sts	0x5d, r18
    1ea8:	4f ef       	ldi	r20, 0xFF	; 255
    1eaa:	2f 3f       	cpi	r18, 0xFF	; 255
    1eac:	34 07       	cpc	r19, r20
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <tune_8ths+0x2ce>
    1eb0:	67 cf       	rjmp	.-306    	; 0x1d80 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    1eb2:	21 96       	adiw	r28, 0x01	; 1
    1eb4:	ae ad       	sts	0x6e, r26
    1eb6:	bf ad       	sts	0x6f, r27
    1eb8:	21 97       	sbiw	r28, 0x01	; 1
    1eba:	0d 93       	st	X+, r16
    1ebc:	1d 93       	st	X+, r17
    1ebe:	21 96       	adiw	r28, 0x01	; 1
    1ec0:	bf af       	sts	0x7f, r27
    1ec2:	ae af       	sts	0x7e, r26
    1ec4:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    1ec6:	ee e6       	ldi	r30, 0x6E	; 110
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	8d 7f       	andi	r24, 0xFD	; 253
    1ece:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    1ed0:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1ed2:	2d ad       	sts	0x6d, r18
    1ed4:	3e ad       	sts	0x6e, r19
    1ed6:	2f 5f       	subi	r18, 0xFF	; 255
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	3e af       	sts	0x7e, r19
    1edc:	2d af       	sts	0x7d, r18
    1ede:	4b ad       	sts	0x6b, r20
    1ee0:	5c ad       	sts	0x6c, r21
    1ee2:	4d 5f       	subi	r20, 0xFD	; 253
    1ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee6:	5c af       	sts	0x7c, r21
    1ee8:	4b af       	sts	0x7b, r20
    1eea:	20 31       	cpi	r18, 0x10	; 16
    1eec:	31 05       	cpc	r19, r1
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <tune_8ths+0x30e>
    1ef0:	26 cf       	rjmp	.-436    	; 0x1d3e <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		
		PORTF &= ~(1<<GATE); //turn gate off
    1ef2:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    1ef4:	c0 5c       	subi	r28, 0xC0	; 192
    1ef6:	df 4f       	sbci	r29, 0xFF	; 255
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	de bf       	out	0x3e, r29	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	cd bf       	out	0x3d, r28	; 61
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	ff 90       	pop	r15
    1f0c:	ef 90       	pop	r14
    1f0e:	df 90       	pop	r13
    1f10:	cf 90       	pop	r12
    1f12:	bf 90       	pop	r11
    1f14:	af 90       	pop	r10
    1f16:	9f 90       	pop	r9
    1f18:	8f 90       	pop	r8
    1f1a:	7f 90       	pop	r7
    1f1c:	6f 90       	pop	r6
    1f1e:	5f 90       	pop	r5
    1f20:	4f 90       	pop	r4
    1f22:	3f 90       	pop	r3
    1f24:	2f 90       	pop	r2
    1f26:	08 95       	ret

00001f28 <tune_filter>:
	
void tune_filter(void) {
    1f28:	2f 92       	push	r2
    1f2a:	3f 92       	push	r3
    1f2c:	4f 92       	push	r4
    1f2e:	5f 92       	push	r5
    1f30:	6f 92       	push	r6
    1f32:	7f 92       	push	r7
    1f34:	8f 92       	push	r8
    1f36:	9f 92       	push	r9
    1f38:	af 92       	push	r10
    1f3a:	bf 92       	push	r11
    1f3c:	cf 92       	push	r12
    1f3e:	df 92       	push	r13
    1f40:	ef 92       	push	r14
    1f42:	ff 92       	push	r15
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	e9 97       	sbiw	r28, 0x39	; 57
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    1f5c:	de 01       	movw	r26, r28
    1f5e:	11 96       	adiw	r26, 0x01	; 1
    1f60:	e3 e4       	ldi	r30, 0x43	; 67
    1f62:	f2 e0       	ldi	r31, 0x02	; 2
    1f64:	8d e2       	ldi	r24, 0x2D	; 45
    1f66:	01 90       	ld	r0, Z+
    1f68:	0d 92       	st	X+, r0
    1f6a:	81 50       	subi	r24, 0x01	; 1
    1f6c:	e1 f7       	brne	.-8      	; 0x1f66 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1f6e:	88 ed       	ldi	r24, 0xD8	; 216
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1f7a:	81 ee       	ldi	r24, 0xE1	; 225
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1f86:	82 ee       	ldi	r24, 0xE2	; 226
    1f88:	91 e0       	ldi	r25, 0x01	; 1
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1f92:	86 e9       	ldi	r24, 0x96	; 150
    1f94:	92 e0       	ldi	r25, 0x02	; 2
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1f9e:	8a ed       	ldi	r24, 0xDA	; 218
    1fa0:	91 e0       	ldi	r25, 0x01	; 1
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1faa:	8f ed       	ldi	r24, 0xDF	; 223
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1fb6:	80 ee       	ldi	r24, 0xE0	; 224
    1fb8:	91 e0       	ldi	r25, 0x01	; 1
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1fc2:	81 ed       	ldi	r24, 0xD1	; 209
    1fc4:	91 e0       	ldi	r25, 0x01	; 1
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1fce:	86 ed       	ldi	r24, 0xD6	; 214
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1fda:	82 ed       	ldi	r24, 0xD2	; 210
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1fe6:	83 ed       	ldi	r24, 0xD3	; 211
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    1ff2:	84 ed       	ldi	r24, 0xD4	; 212
    1ff4:	91 e0       	ldi	r25, 0x01	; 1
    1ff6:	6f ef       	ldi	r22, 0xFF	; 255
    1ff8:	7f e3       	ldi	r23, 0x3F	; 63
    1ffa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    1ffe:	85 ed       	ldi	r24, 0xD5	; 213
    2000:	91 e0       	ldi	r25, 0x01	; 1
    2002:	6f ef       	ldi	r22, 0xFF	; 255
    2004:	7f e3       	ldi	r23, 0x3F	; 63
    2006:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    200a:	89 ed       	ldi	r24, 0xD9	; 217
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2016:	8e ec       	ldi	r24, 0xCE	; 206
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2022:	8c ec       	ldi	r24, 0xCC	; 204
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    202e:	8a ec       	ldi	r24, 0xCA	; 202
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	6f ef       	ldi	r22, 0xFF	; 255
    2034:	7f e3       	ldi	r23, 0x3F	; 63
    2036:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    203a:	88 ec       	ldi	r24, 0xC8	; 200
    203c:	91 e0       	ldi	r25, 0x01	; 1
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    2046:	80 ed       	ldi	r24, 0xD0	; 208
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2052:	83 ee       	ldi	r24, 0xE3	; 227
    2054:	91 e0       	ldi	r25, 0x01	; 1
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    205e:	84 ee       	ldi	r24, 0xE4	; 228
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    206a:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    206c:	ed ed       	ldi	r30, 0xDD	; 221
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	80 64       	ori	r24, 0x40	; 64
    2074:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2076:	80 81       	ld	r24, Z
    2078:	8f 7b       	andi	r24, 0xBF	; 191
    207a:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	80 93 95 03 	sts	0x0395, r24
	PORTF |= (1<<GATE); //turn gate on
    2082:	89 9a       	sbi	0x11, 1	; 17
    2084:	9e 01       	movw	r18, r28
    2086:	2f 5f       	subi	r18, 0xFF	; 255
    2088:	3f 4f       	sbci	r19, 0xFF	; 255
    208a:	3d ab       	sts	0x5d, r19
    208c:	2c ab       	sts	0x5c, r18
    208e:	8a e2       	ldi	r24, 0x2A	; 42
    2090:	93 e0       	ldi	r25, 0x03	; 3
    2092:	99 af       	sts	0x79, r25
    2094:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2096:	1f aa       	sts	0x9f, r17
    2098:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    209a:	0f 2e       	mov	r0, r31
    209c:	f4 ed       	ldi	r31, 0xD4	; 212
    209e:	af 2e       	mov	r10, r31
    20a0:	f1 e0       	ldi	r31, 0x01	; 1
    20a2:	bf 2e       	mov	r11, r31
    20a4:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    20a6:	0f 2e       	mov	r0, r31
    20a8:	f8 ed       	ldi	r31, 0xD8	; 216
    20aa:	6f 2e       	mov	r6, r31
    20ac:	f1 e0       	ldi	r31, 0x01	; 1
    20ae:	7f 2e       	mov	r7, r31
    20b0:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    20b2:	0f 2e       	mov	r0, r31
    20b4:	f5 ed       	ldi	r31, 0xD5	; 213
    20b6:	4f 2e       	mov	r4, r31
    20b8:	f1 e0       	ldi	r31, 0x01	; 1
    20ba:	5f 2e       	mov	r5, r31
    20bc:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    20be:	0f 2e       	mov	r0, r31
    20c0:	fa ec       	ldi	r31, 0xCA	; 202
    20c2:	2f 2e       	mov	r2, r31
    20c4:	f1 e0       	ldi	r31, 0x01	; 1
    20c6:	3f 2e       	mov	r3, r31
    20c8:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    20ca:	ac a9       	sts	0x4c, r26
    20cc:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    20ce:	8c 91       	ld	r24, X
    20d0:	80 93 95 03 	sts	0x0395, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    20d4:	84 b5       	in	r24, 0x24	; 36
    20d6:	8f 60       	ori	r24, 0x0F	; 15
    20d8:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    20de:	ee e6       	ldi	r30, 0x6E	; 110
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	82 60       	ori	r24, 0x02	; 2
    20e6:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    20e8:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    20ea:	ee a9       	sts	0x4e, r30
    20ec:	ff a9       	sts	0x4f, r31
    20ee:	e2 30       	cpi	r30, 0x02	; 2
    20f0:	f1 05       	cpc	r31, r1
    20f2:	24 f4       	brge	.+8      	; 0x20fc <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    20f4:	83 e0       	ldi	r24, 0x03	; 3
    20f6:	80 93 94 03 	sts	0x0394, r24
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    20fc:	82 e0       	ldi	r24, 0x02	; 2
    20fe:	80 93 94 03 	sts	0x0394, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    2102:	11 96       	adiw	r26, 0x01	; 1
    2104:	2d 91       	ld	r18, X+
    2106:	3c 91       	ld	r19, X
    2108:	12 97       	sbiw	r26, 0x02	; 2
    210a:	3b ab       	sts	0x5b, r19
    210c:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    210e:	8d e0       	ldi	r24, 0x0D	; 13
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9f a7       	lds	r25, 0x7f
    2114:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2116:	ee 24       	eor	r14, r14
    2118:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    211a:	0f 2e       	mov	r0, r31
    211c:	f1 ed       	ldi	r31, 0xD1	; 209
    211e:	cf 2e       	mov	r12, r31
    2120:	f1 e0       	ldi	r31, 0x01	; 1
    2122:	df 2e       	mov	r13, r31
    2124:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2126:	0f 2e       	mov	r0, r31
    2128:	f6 ed       	ldi	r31, 0xD6	; 214
    212a:	8f 2e       	mov	r8, r31
    212c:	f1 e0       	ldi	r31, 0x01	; 1
    212e:	9f 2e       	mov	r9, r31
    2130:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	fc 01       	movw	r30, r24
    2138:	0e a4       	lds	r16, 0xae
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <tune_filter+0x218>
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	0a 94       	dec	r0
    2142:	e2 f7       	brpl	.-8      	; 0x213c <tune_filter+0x214>
    2144:	f9 ab       	sts	0x59, r31
    2146:	e8 ab       	sts	0x58, r30
    2148:	ee 2a       	or	r14, r30
    214a:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    214c:	c5 01       	movw	r24, r10
    214e:	b7 01       	movw	r22, r14
    2150:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
    2154:	10 92 93 03 	sts	0x0393, r1
			period_counter = 0;
    2158:	10 92 96 03 	sts	0x0396, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    215c:	8f e0       	ldi	r24, 0x0F	; 15
    215e:	28 e1       	ldi	r18, 0x18	; 24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	a8 95       	wdr
    2168:	20 93 60 00 	sts	0x0060, r18
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2172:	80 91 93 03 	lds	r24, 0x0393
    2176:	88 23       	and	r24, r24
    2178:	b1 f5       	brne	.+108    	; 0x21e6 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    217a:	02 ed       	ldi	r16, 0xD2	; 210
    217c:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    217e:	80 91 95 03 	lds	r24, 0x0395
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	84 5d       	subi	r24, 0xD4	; 212
    2186:	9e 4f       	sbci	r25, 0xFE	; 254
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    218e:	c5 01       	movw	r24, r10
    2190:	b7 01       	movw	r22, r14
    2192:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2196:	c3 01       	movw	r24, r6
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    21a0:	c2 01       	movw	r24, r4
    21a2:	6f ef       	ldi	r22, 0xFF	; 255
    21a4:	7f e3       	ldi	r23, 0x3F	; 63
    21a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    21aa:	c1 01       	movw	r24, r2
    21ac:	6f ef       	ldi	r22, 0xFF	; 255
    21ae:	7f e3       	ldi	r23, 0x3F	; 63
    21b0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    21b4:	8e ec       	ldi	r24, 0xCE	; 206
    21b6:	91 e0       	ldi	r25, 0x01	; 1
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    21c0:	c6 01       	movw	r24, r12
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    21ca:	c4 01       	movw	r24, r8
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    21d4:	c8 01       	movw	r24, r16
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    21de:	80 91 93 03 	lds	r24, 0x0393
    21e2:	88 23       	and	r24, r24
    21e4:	61 f2       	breq	.-104    	; 0x217e <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    21e6:	88 e1       	ldi	r24, 0x18	; 24
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	80 93 60 00 	sts	0x0060, r24
    21f0:	10 92 60 00 	sts	0x0060, r1
    21f4:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    21f6:	80 91 91 03 	lds	r24, 0x0391
    21fa:	90 91 92 03 	lds	r25, 0x0392
    21fe:	2a a9       	sts	0x4a, r18
    2200:	3b a9       	sts	0x4b, r19
    2202:	28 17       	cp	r18, r24
    2204:	39 07       	cpc	r19, r25
    2206:	50 f0       	brcs	.+20     	; 0x221c <tune_filter+0x2f4>
    2208:	80 91 92 02 	lds	r24, 0x0292
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	31 f4       	brne	.+12     	; 0x221c <tune_filter+0x2f4>
    2210:	88 a9       	sts	0x48, r24
    2212:	99 a9       	sts	0x49, r25
    2214:	80 95       	com	r24
    2216:	90 95       	com	r25
    2218:	e8 22       	and	r14, r24
    221a:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    221c:	80 91 91 03 	lds	r24, 0x0391
    2220:	90 91 92 03 	lds	r25, 0x0392
    2224:	ea a9       	sts	0x4a, r30
    2226:	fb a9       	sts	0x4b, r31
    2228:	8e 17       	cp	r24, r30
    222a:	9f 07       	cpc	r25, r31
    222c:	21 f4       	brne	.+8      	; 0x2236 <tune_filter+0x30e>
    222e:	80 91 92 02 	lds	r24, 0x0292
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	71 f0       	breq	.+28     	; 0x2252 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	80 93 92 02 	sts	0x0292, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    223c:	2e a5       	lds	r18, 0x6e
    223e:	3f a5       	lds	r19, 0x6f
    2240:	21 50       	subi	r18, 0x01	; 1
    2242:	30 40       	sbci	r19, 0x00	; 0
    2244:	3f a7       	lds	r19, 0x7f
    2246:	2e a7       	lds	r18, 0x7e
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	2f 3f       	cpi	r18, 0xFF	; 255
    224c:	38 07       	cpc	r19, r24
    224e:	09 f0       	breq	.+2      	; 0x2252 <tune_filter+0x32a>
    2250:	70 cf       	rjmp	.-288    	; 0x2132 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2252:	ee a9       	sts	0x4e, r30
    2254:	ff a9       	sts	0x4f, r31
    2256:	31 96       	adiw	r30, 0x01	; 1
    2258:	ff ab       	sts	0x5f, r31
    225a:	ee ab       	sts	0x5e, r30
    225c:	c7 01       	movw	r24, r14
    225e:	80 96       	adiw	r24, 0x20	; 32
    2260:	e8 ad       	sts	0x68, r30
    2262:	f9 ad       	sts	0x69, r31
    2264:	81 93       	st	Z+, r24
    2266:	91 93       	st	Z+, r25
    2268:	f9 af       	sts	0x79, r31
    226a:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    226c:	ee e6       	ldi	r30, 0x6E	; 110
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8d 7f       	andi	r24, 0xFD	; 253
    2274:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2276:	14 bc       	out	0x24, r1	; 36
    2278:	2c a9       	sts	0x4c, r18
    227a:	3d a9       	sts	0x4d, r19
    227c:	2d 5f       	subi	r18, 0xFD	; 253
    227e:	3f 4f       	sbci	r19, 0xFF	; 255
    2280:	3d ab       	sts	0x5d, r19
    2282:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2284:	8e a9       	sts	0x4e, r24
    2286:	9f a9       	sts	0x4f, r25
    2288:	8f 30       	cpi	r24, 0x0F	; 15
    228a:	91 05       	cpc	r25, r1
    228c:	09 f0       	breq	.+2      	; 0x2290 <tune_filter+0x368>
    228e:	1d cf       	rjmp	.-454    	; 0x20ca <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2290:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2292:	e9 96       	adiw	r28, 0x39	; 57
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	ff 90       	pop	r15
    22a8:	ef 90       	pop	r14
    22aa:	df 90       	pop	r13
    22ac:	cf 90       	pop	r12
    22ae:	bf 90       	pop	r11
    22b0:	af 90       	pop	r10
    22b2:	9f 90       	pop	r9
    22b4:	8f 90       	pop	r8
    22b6:	7f 90       	pop	r7
    22b8:	6f 90       	pop	r6
    22ba:	5f 90       	pop	r5
    22bc:	4f 90       	pop	r4
    22be:	3f 90       	pop	r3
    22c0:	2f 90       	pop	r2
    22c2:	08 95       	ret

000022c4 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    22c4:	88 e2       	ldi	r24, 0x28	; 40
    22c6:	93 e0       	ldi	r25, 0x03	; 3
    22c8:	6e e0       	ldi	r22, 0x0E	; 14
    22ca:	77 e0       	ldi	r23, 0x07	; 7
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	50 e0       	ldi	r21, 0x00	; 0
    22d0:	0e 94 a5 19 	call	0x334a	; 0x334a <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    22d4:	8a e6       	ldi	r24, 0x6A	; 106
    22d6:	93 e0       	ldi	r25, 0x03	; 3
    22d8:	60 e5       	ldi	r22, 0x50	; 80
    22da:	77 e0       	ldi	r23, 0x07	; 7
    22dc:	42 e2       	ldi	r20, 0x22	; 34
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	0e 94 a5 19 	call	0x334a	; 0x334a <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    22e4:	88 e4       	ldi	r24, 0x48	; 72
    22e6:	93 e0       	ldi	r25, 0x03	; 3
    22e8:	6e e2       	ldi	r22, 0x2E	; 46
    22ea:	77 e0       	ldi	r23, 0x07	; 7
    22ec:	42 e2       	ldi	r20, 0x22	; 34
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	0e 94 a5 19 	call	0x334a	; 0x334a <__eeupd_block_m6450a>
	
	
}
    22f4:	08 95       	ret

000022f6 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    22f6:	84 e7       	ldi	r24, 0x74	; 116
    22f8:	97 e0       	ldi	r25, 0x07	; 7
    22fa:	0e 94 9f 19 	call	0x333e	; 0x333e <__eerd_word_m6450a>
    22fe:	90 93 8f 03 	sts	0x038F, r25
    2302:	80 93 8e 03 	sts	0x038E, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2306:	82 e7       	ldi	r24, 0x72	; 114
    2308:	97 e0       	ldi	r25, 0x07	; 7
    230a:	0e 94 9f 19 	call	0x333e	; 0x333e <__eerd_word_m6450a>
    230e:	90 93 8d 03 	sts	0x038D, r25
    2312:	80 93 8c 03 	sts	0x038C, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2316:	8a e6       	ldi	r24, 0x6A	; 106
    2318:	93 e0       	ldi	r25, 0x03	; 3
    231a:	60 e5       	ldi	r22, 0x50	; 80
    231c:	77 e0       	ldi	r23, 0x07	; 7
    231e:	42 e2       	ldi	r20, 0x22	; 34
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	0e 94 8f 19 	call	0x331e	; 0x331e <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2326:	88 e4       	ldi	r24, 0x48	; 72
    2328:	93 e0       	ldi	r25, 0x03	; 3
    232a:	6e e2       	ldi	r22, 0x2E	; 46
    232c:	77 e0       	ldi	r23, 0x07	; 7
    232e:	42 e2       	ldi	r20, 0x22	; 34
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	0e 94 8f 19 	call	0x331e	; 0x331e <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2336:	88 e2       	ldi	r24, 0x28	; 40
    2338:	93 e0       	ldi	r25, 0x03	; 3
    233a:	6e e0       	ldi	r22, 0x0E	; 14
    233c:	77 e0       	ldi	r23, 0x07	; 7
    233e:	40 e2       	ldi	r20, 0x20	; 32
    2340:	50 e0       	ldi	r21, 0x00	; 0
    2342:	0e 94 8f 19 	call	0x331e	; 0x331e <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2346:	08 95       	ret

00002348 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2348:	98 2f       	mov	r25, r24
    234a:	96 95       	lsr	r25
    234c:	96 95       	lsr	r25
    234e:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2350:	29 2f       	mov	r18, r25
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	f9 01       	movw	r30, r18
    2356:	31 97       	sbiw	r30, 0x01	; 1
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	e6 0f       	add	r30, r22
    235e:	f7 1f       	adc	r31, r23
    2360:	01 90       	ld	r0, Z+
    2362:	f0 81       	ld	r31, Z
    2364:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2366:	22 0f       	add	r18, r18
    2368:	33 1f       	adc	r19, r19
    236a:	26 0f       	add	r18, r22
    236c:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    236e:	d9 01       	movw	r26, r18
    2370:	4d 91       	ld	r20, X+
    2372:	5c 91       	ld	r21, X
    2374:	11 97       	sbiw	r26, 0x01	; 1
    2376:	4e 1b       	sub	r20, r30
    2378:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    237a:	99 0f       	add	r25, r25
    237c:	99 0f       	add	r25, r25
    237e:	99 0f       	add	r25, r25
    2380:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	48 9f       	mul	r20, r24
    2386:	90 01       	movw	r18, r0
    2388:	49 9f       	mul	r20, r25
    238a:	30 0d       	add	r19, r0
    238c:	58 9f       	mul	r21, r24
    238e:	30 0d       	add	r19, r0
    2390:	11 24       	eor	r1, r1
    2392:	36 95       	lsr	r19
    2394:	27 95       	ror	r18
    2396:	36 95       	lsr	r19
    2398:	27 95       	ror	r18
    239a:	36 95       	lsr	r19
    239c:	27 95       	ror	r18
    239e:	e2 0f       	add	r30, r18
    23a0:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    23a2:	8e 2f       	mov	r24, r30
    23a4:	9f 2f       	mov	r25, r31
    23a6:	08 95       	ret

000023a8 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    23a8:	cf 93       	push	r28
    23aa:	df 93       	push	r29
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	a2 97       	sbiw	r28, 0x22	; 34
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    23bc:	de 01       	movw	r26, r28
    23be:	11 96       	adiw	r26, 0x01	; 1
    23c0:	e0 e7       	ldi	r30, 0x70	; 112
    23c2:	f2 e0       	ldi	r31, 0x02	; 2
    23c4:	82 e2       	ldi	r24, 0x22	; 34
    23c6:	01 90       	ld	r0, Z+
    23c8:	0d 92       	st	X+, r0
    23ca:	81 50       	subi	r24, 0x01	; 1
    23cc:	e1 f7       	brne	.-8      	; 0x23c6 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    23ce:	aa e6       	ldi	r26, 0x6A	; 106
    23d0:	b3 e0       	ldi	r27, 0x03	; 3
    23d2:	fe 01       	movw	r30, r28
    23d4:	31 96       	adiw	r30, 0x01	; 1
    23d6:	82 e2       	ldi	r24, 0x22	; 34
    23d8:	01 90       	ld	r0, Z+
    23da:	0d 92       	st	X+, r0
    23dc:	81 50       	subi	r24, 0x01	; 1
    23de:	e1 f7       	brne	.-8      	; 0x23d8 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    23e0:	a8 e4       	ldi	r26, 0x48	; 72
    23e2:	b3 e0       	ldi	r27, 0x03	; 3
    23e4:	fe 01       	movw	r30, r28
    23e6:	31 96       	adiw	r30, 0x01	; 1
    23e8:	82 e2       	ldi	r24, 0x22	; 34
    23ea:	01 90       	ld	r0, Z+
    23ec:	0d 92       	st	X+, r0
    23ee:	81 50       	subi	r24, 0x01	; 1
    23f0:	e1 f7       	brne	.-8      	; 0x23ea <set_one_volt_per_octave+0x42>
	
	
    23f2:	a2 96       	adiw	r28, 0x22	; 34
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	08 95       	ret

00002404 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2404:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2406:	80 91 9a 03 	lds	r24, 0x039A
    240a:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    240c:	89 27       	eor	r24, r25
    240e:	80 93 9a 03 	sts	0x039A, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2412:	89 23       	and	r24, r25
    2414:	08 95       	ret

00002416 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2416:	ed ed       	ldi	r30, 0xDD	; 221
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	90 81       	ld	r25, Z
    241c:	9f 7b       	andi	r25, 0xBF	; 191
    241e:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	21 70       	andi	r18, 0x01	; 1
    2426:	30 70       	andi	r19, 0x00	; 0
    2428:	22 0f       	add	r18, r18
    242a:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    242c:	68 2f       	mov	r22, r24
    242e:	62 95       	swap	r22
    2430:	66 95       	lsr	r22
    2432:	67 70       	andi	r22, 0x07	; 7
    2434:	67 95       	ror	r22
    2436:	66 27       	eor	r22, r22
    2438:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    243a:	26 2b       	or	r18, r22
    243c:	98 2f       	mov	r25, r24
    243e:	96 95       	lsr	r25
    2440:	96 95       	lsr	r25
    2442:	91 70       	andi	r25, 0x01	; 1
    2444:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2446:	68 2f       	mov	r22, r24
    2448:	66 1f       	adc	r22, r22
    244a:	66 27       	eor	r22, r22
    244c:	66 1f       	adc	r22, r22
    244e:	66 0f       	add	r22, r22
    2450:	66 0f       	add	r22, r22
    2452:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2454:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2456:	a8 2f       	mov	r26, r24
    2458:	a6 95       	lsr	r26
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	a1 70       	andi	r26, 0x01	; 1
    245e:	b0 70       	andi	r27, 0x00	; 0
    2460:	bd 01       	movw	r22, r26
    2462:	66 0f       	add	r22, r22
    2464:	77 1f       	adc	r23, r23
    2466:	66 0f       	add	r22, r22
    2468:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    246a:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    246c:	68 2f       	mov	r22, r24
    246e:	62 95       	swap	r22
    2470:	6f 70       	andi	r22, 0x0F	; 15
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	61 70       	andi	r22, 0x01	; 1
    2476:	70 70       	andi	r23, 0x00	; 0
    2478:	ab 01       	movw	r20, r22
    247a:	00 24       	eor	r0, r0
    247c:	56 95       	lsr	r21
    247e:	47 95       	ror	r20
    2480:	07 94       	ror	r0
    2482:	56 95       	lsr	r21
    2484:	47 95       	ror	r20
    2486:	07 94       	ror	r0
    2488:	54 2f       	mov	r21, r20
    248a:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    248c:	62 2f       	mov	r22, r18
    248e:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2490:	48 2f       	mov	r20, r24
    2492:	42 95       	swap	r20
    2494:	46 95       	lsr	r20
    2496:	46 95       	lsr	r20
    2498:	43 70       	andi	r20, 0x03	; 3
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	41 70       	andi	r20, 0x01	; 1
    249e:	50 70       	andi	r21, 0x00	; 0
    24a0:	9a 01       	movw	r18, r20
    24a2:	22 0f       	add	r18, r18
    24a4:	33 1f       	adc	r19, r19
    24a6:	22 95       	swap	r18
    24a8:	32 95       	swap	r19
    24aa:	30 7f       	andi	r19, 0xF0	; 240
    24ac:	32 27       	eor	r19, r18
    24ae:	20 7f       	andi	r18, 0xF0	; 240
    24b0:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    24b2:	46 2f       	mov	r20, r22
    24b4:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    24b6:	86 95       	lsr	r24
    24b8:	86 95       	lsr	r24
    24ba:	86 95       	lsr	r24
    24bc:	28 2f       	mov	r18, r24
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	21 70       	andi	r18, 0x01	; 1
    24c2:	30 70       	andi	r19, 0x00	; 0
    24c4:	c9 01       	movw	r24, r18
    24c6:	82 95       	swap	r24
    24c8:	92 95       	swap	r25
    24ca:	90 7f       	andi	r25, 0xF0	; 240
    24cc:	98 27       	eor	r25, r24
    24ce:	80 7f       	andi	r24, 0xF0	; 240
    24d0:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    24d2:	84 2b       	or	r24, r20
    24d4:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    24d6:	80 81       	ld	r24, Z
    24d8:	80 64       	ori	r24, 0x40	; 64
    24da:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    24dc:	80 81       	ld	r24, Z
    24de:	8f 7b       	andi	r24, 0xBF	; 191
    24e0:	80 83       	st	Z, r24
	DATA_BUS = 0;
    24e2:	12 b8       	out	0x02, r1	; 2
	
	
    24e4:	08 95       	ret

000024e6 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    24e6:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    24e8:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    24ea:	74 83       	std	Z+4, r23	; 0x04
    24ec:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    24ee:	11 82       	std	Z+1, r1	; 0x01
    24f0:	10 82       	st	Z, r1
}
    24f2:	08 95       	ret

000024f4 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	ec 01       	movw	r28, r24
    24fc:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    24fe:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <store_and_clear_interrupt>
    2502:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2504:	39 81       	ldd	r19, Y+1	; 0x01
    2506:	83 2f       	mov	r24, r19
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	01 96       	adiw	r24, 0x01	; 1
    250c:	6a 81       	ldd	r22, Y+2	; 0x02
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__divmodhi4>
    2514:	48 81       	ld	r20, Y
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	84 17       	cp	r24, r20
    251a:	95 07       	cpc	r25, r21
    251c:	29 f4       	brne	.+10     	; 0x2528 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    251e:	82 2f       	mov	r24, r18
    2520:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <restore_interrupt_setting>
      return false;
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	11 c0       	rjmp	.+34     	; 0x254a <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2528:	eb 81       	ldd	r30, Y+3	; 0x03
    252a:	fc 81       	ldd	r31, Y+4	; 0x04
    252c:	e3 0f       	add	r30, r19
    252e:	f1 1d       	adc	r31, r1
    2530:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	6a 81       	ldd	r22, Y+2	; 0x02
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__divmodhi4>
    2540:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2542:	82 2f       	mov	r24, r18
    2544:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <restore_interrupt_setting>
      return true;
    2548:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	1f 91       	pop	r17
    2550:	08 95       	ret

00002552 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2558:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    255c:	29 81       	ldd	r18, Y+1	; 0x01
    255e:	98 81       	ld	r25, Y
    2560:	29 17       	cp	r18, r25
    2562:	18 f0       	brcs	.+6      	; 0x256a <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2564:	c2 2f       	mov	r28, r18
    2566:	c9 1b       	sub	r28, r25
    2568:	03 c0       	rjmp	.+6      	; 0x2570 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    256a:	ca 81       	ldd	r28, Y+2	; 0x02
    256c:	c2 0f       	add	r28, r18
    256e:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2570:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <restore_interrupt_setting>
   return len;
}
    2574:	8c 2f       	mov	r24, r28
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	08 95       	ret

0000257c <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    257c:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    257e:	20 81       	ld	r18, Z
    2580:	86 2f       	mov	r24, r22
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	82 0f       	add	r24, r18
    2586:	91 1d       	adc	r25, r1
    2588:	62 81       	ldd	r22, Z+2	; 0x02
    258a:	70 e0       	ldi	r23, 0x00	; 0
    258c:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__divmodhi4>
    2590:	03 80       	ldd	r0, Z+3	; 0x03
    2592:	f4 81       	ldd	r31, Z+4	; 0x04
    2594:	e0 2d       	mov	r30, r0
    2596:	e8 0f       	add	r30, r24
    2598:	f9 1f       	adc	r31, r25
}
    259a:	80 81       	ld	r24, Z
    259c:	08 95       	ret

0000259e <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    259e:	1f 93       	push	r17
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	ec 01       	movw	r28, r24
    25a6:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    25a8:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <store_and_clear_interrupt>
    25ac:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    25ae:	88 81       	ld	r24, Y
    25b0:	21 2f       	mov	r18, r17
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	28 0f       	add	r18, r24
    25b6:	31 1d       	adc	r19, r1
    25b8:	6a 81       	ldd	r22, Y+2	; 0x02
    25ba:	c9 01       	movw	r24, r18
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__divmodhi4>
    25c2:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    25c4:	84 2f       	mov	r24, r20
    25c6:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <restore_interrupt_setting>
}
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	1f 91       	pop	r17
    25d0:	08 95       	ret

000025d2 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    25d2:	8f b7       	in	r24, 0x3f	; 63
   cli();
    25d4:	f8 94       	cli
   return sreg;
}
    25d6:	08 95       	ret

000025d8 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    25d8:	8f bf       	out	0x3f, r24	; 63
}
    25da:	08 95       	ret

000025dc <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    25dc:	88 1f       	adc	r24, r24
    25de:	88 27       	eor	r24, r24
    25e0:	88 1f       	adc	r24, r24
    25e2:	08 95       	ret

000025e4 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    25e4:	91 e0       	ldi	r25, 0x01	; 1
    25e6:	88 3f       	cpi	r24, 0xF8	; 248
    25e8:	08 f4       	brcc	.+2      	; 0x25ec <midi_is_realtime+0x8>
    25ea:	90 e0       	ldi	r25, 0x00	; 0
}
    25ec:	89 2f       	mov	r24, r25
    25ee:	08 95       	ret

000025f0 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	20 7f       	andi	r18, 0xF0	; 240
    25f6:	30 70       	andi	r19, 0x00	; 0
    25f8:	20 3c       	cpi	r18, 0xC0	; 192
    25fa:	31 05       	cpc	r19, r1
    25fc:	e9 f1       	breq	.+122    	; 0x2678 <midi_packet_length+0x88>
    25fe:	21 3c       	cpi	r18, 0xC1	; 193
    2600:	31 05       	cpc	r19, r1
    2602:	8c f4       	brge	.+34     	; 0x2626 <midi_packet_length+0x36>
    2604:	20 39       	cpi	r18, 0x90	; 144
    2606:	31 05       	cpc	r19, r1
    2608:	e1 f0       	breq	.+56     	; 0x2642 <midi_packet_length+0x52>
    260a:	21 39       	cpi	r18, 0x91	; 145
    260c:	31 05       	cpc	r19, r1
    260e:	24 f4       	brge	.+8      	; 0x2618 <midi_packet_length+0x28>
    2610:	20 38       	cpi	r18, 0x80	; 128
    2612:	31 05       	cpc	r19, r1
    2614:	79 f5       	brne	.+94     	; 0x2674 <midi_packet_length+0x84>
    2616:	15 c0       	rjmp	.+42     	; 0x2642 <midi_packet_length+0x52>
    2618:	20 3a       	cpi	r18, 0xA0	; 160
    261a:	31 05       	cpc	r19, r1
    261c:	91 f0       	breq	.+36     	; 0x2642 <midi_packet_length+0x52>
    261e:	20 3b       	cpi	r18, 0xB0	; 176
    2620:	31 05       	cpc	r19, r1
    2622:	41 f5       	brne	.+80     	; 0x2674 <midi_packet_length+0x84>
    2624:	0e c0       	rjmp	.+28     	; 0x2642 <midi_packet_length+0x52>
    2626:	20 3e       	cpi	r18, 0xE0	; 224
    2628:	31 05       	cpc	r19, r1
    262a:	59 f0       	breq	.+22     	; 0x2642 <midi_packet_length+0x52>
    262c:	21 3e       	cpi	r18, 0xE1	; 225
    262e:	31 05       	cpc	r19, r1
    2630:	24 f4       	brge	.+8      	; 0x263a <midi_packet_length+0x4a>
    2632:	20 3d       	cpi	r18, 0xD0	; 208
    2634:	31 05       	cpc	r19, r1
    2636:	f1 f4       	brne	.+60     	; 0x2674 <midi_packet_length+0x84>
    2638:	1f c0       	rjmp	.+62     	; 0x2678 <midi_packet_length+0x88>
    263a:	20 3f       	cpi	r18, 0xF0	; 240
    263c:	31 05       	cpc	r19, r1
    263e:	d1 f4       	brne	.+52     	; 0x2674 <midi_packet_length+0x84>
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2642:	83 e0       	ldi	r24, 0x03	; 3
    2644:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2646:	86 3f       	cpi	r24, 0xF6	; 246
    2648:	79 f0       	breq	.+30     	; 0x2668 <midi_packet_length+0x78>
    264a:	87 3f       	cpi	r24, 0xF7	; 247
    264c:	38 f4       	brcc	.+14     	; 0x265c <midi_packet_length+0x6c>
    264e:	82 3f       	cpi	r24, 0xF2	; 242
    2650:	a9 f0       	breq	.+42     	; 0x267c <midi_packet_length+0x8c>
    2652:	83 3f       	cpi	r24, 0xF3	; 243
    2654:	59 f0       	breq	.+22     	; 0x266c <midi_packet_length+0x7c>
    2656:	81 3f       	cpi	r24, 0xF1	; 241
    2658:	59 f4       	brne	.+22     	; 0x2670 <midi_packet_length+0x80>
    265a:	08 c0       	rjmp	.+16     	; 0x266c <midi_packet_length+0x7c>
    265c:	88 3f       	cpi	r24, 0xF8	; 248
    265e:	40 f0       	brcs	.+16     	; 0x2670 <midi_packet_length+0x80>
    2660:	8d 3f       	cpi	r24, 0xFD	; 253
    2662:	10 f0       	brcs	.+4      	; 0x2668 <midi_packet_length+0x78>
    2664:	8e 3f       	cpi	r24, 0xFE	; 254
    2666:	20 f0       	brcs	.+8      	; 0x2670 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    266c:	82 e0       	ldi	r24, 0x02	; 2
    266e:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2678:	82 e0       	ldi	r24, 0x02	; 2
    267a:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    267c:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    267e:	08 95       	ret

00002680 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2680:	0f 93       	push	r16
    2682:	34 2f       	mov	r19, r20
    2684:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2686:	46 2f       	mov	r20, r22
    2688:	4f 70       	andi	r20, 0x0F	; 15
    268a:	40 6b       	ori	r20, 0xB0	; 176
    268c:	23 2f       	mov	r18, r19
    268e:	2f 77       	andi	r18, 0x7F	; 127
    2690:	0f 77       	andi	r16, 0x7F	; 127
    2692:	dc 01       	movw	r26, r24
    2694:	ed 91       	ld	r30, X+
    2696:	fc 91       	ld	r31, X
    2698:	63 e0       	ldi	r22, 0x03	; 3
    269a:	70 e0       	ldi	r23, 0x00	; 0
    269c:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    269e:	0f 91       	pop	r16
    26a0:	08 95       	ret

000026a2 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    26a2:	0f 93       	push	r16
    26a4:	34 2f       	mov	r19, r20
    26a6:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    26a8:	46 2f       	mov	r20, r22
    26aa:	4f 70       	andi	r20, 0x0F	; 15
    26ac:	40 69       	ori	r20, 0x90	; 144
    26ae:	23 2f       	mov	r18, r19
    26b0:	2f 77       	andi	r18, 0x7F	; 127
    26b2:	0f 77       	andi	r16, 0x7F	; 127
    26b4:	dc 01       	movw	r26, r24
    26b6:	ed 91       	ld	r30, X+
    26b8:	fc 91       	ld	r31, X
    26ba:	63 e0       	ldi	r22, 0x03	; 3
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    26c0:	0f 91       	pop	r16
    26c2:	08 95       	ret

000026c4 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    26c4:	0f 93       	push	r16
    26c6:	34 2f       	mov	r19, r20
    26c8:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    26ca:	46 2f       	mov	r20, r22
    26cc:	4f 70       	andi	r20, 0x0F	; 15
    26ce:	40 68       	ori	r20, 0x80	; 128
    26d0:	23 2f       	mov	r18, r19
    26d2:	2f 77       	andi	r18, 0x7F	; 127
    26d4:	0f 77       	andi	r16, 0x7F	; 127
    26d6:	dc 01       	movw	r26, r24
    26d8:	ed 91       	ld	r30, X+
    26da:	fc 91       	ld	r31, X
    26dc:	63 e0       	ldi	r22, 0x03	; 3
    26de:	70 e0       	ldi	r23, 0x00	; 0
    26e0:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    26e2:	0f 91       	pop	r16
    26e4:	08 95       	ret

000026e6 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    26e6:	0f 93       	push	r16
    26e8:	34 2f       	mov	r19, r20
    26ea:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    26ec:	46 2f       	mov	r20, r22
    26ee:	4f 70       	andi	r20, 0x0F	; 15
    26f0:	40 6a       	ori	r20, 0xA0	; 160
    26f2:	23 2f       	mov	r18, r19
    26f4:	2f 77       	andi	r18, 0x7F	; 127
    26f6:	0f 77       	andi	r16, 0x7F	; 127
    26f8:	dc 01       	movw	r26, r24
    26fa:	ed 91       	ld	r30, X+
    26fc:	fc 91       	ld	r31, X
    26fe:	63 e0       	ldi	r22, 0x03	; 3
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2704:	0f 91       	pop	r16
    2706:	08 95       	ret

00002708 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2708:	0f 93       	push	r16
    270a:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    270c:	20 e2       	ldi	r18, 0x20	; 32
    270e:	40 30       	cpi	r20, 0x00	; 0
    2710:	52 07       	cpc	r21, r18
    2712:	44 f4       	brge	.+16     	; 0x2724 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2714:	a0 ee       	ldi	r26, 0xE0	; 224
    2716:	40 30       	cpi	r20, 0x00	; 0
    2718:	5a 07       	cpc	r21, r26
    271a:	3c f0       	brlt	.+14     	; 0x272a <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    271c:	8a 01       	movw	r16, r20
    271e:	00 50       	subi	r16, 0x00	; 0
    2720:	10 4e       	sbci	r17, 0xE0	; 224
    2722:	05 c0       	rjmp	.+10     	; 0x272e <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2724:	0f ef       	ldi	r16, 0xFF	; 255
    2726:	1f e3       	ldi	r17, 0x3F	; 63
    2728:	02 c0       	rjmp	.+4      	; 0x272e <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    272a:	00 e0       	ldi	r16, 0x00	; 0
    272c:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    272e:	46 2f       	mov	r20, r22
    2730:	4f 70       	andi	r20, 0x0F	; 15
    2732:	40 6e       	ori	r20, 0xE0	; 224
    2734:	20 2f       	mov	r18, r16
    2736:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2738:	00 0f       	add	r16, r16
    273a:	01 2f       	mov	r16, r17
    273c:	00 1f       	adc	r16, r16
    273e:	11 0b       	sbc	r17, r17
    2740:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2742:	0f 77       	andi	r16, 0x7F	; 127
    2744:	dc 01       	movw	r26, r24
    2746:	ed 91       	ld	r30, X+
    2748:	fc 91       	ld	r31, X
    274a:	63 e0       	ldi	r22, 0x03	; 3
    274c:	70 e0       	ldi	r23, 0x00	; 0
    274e:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	08 95       	ret

00002756 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2756:	0f 93       	push	r16
    2758:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    275a:	46 2f       	mov	r20, r22
    275c:	4f 70       	andi	r20, 0x0F	; 15
    275e:	40 6c       	ori	r20, 0xC0	; 192
    2760:	2f 77       	andi	r18, 0x7F	; 127
    2762:	dc 01       	movw	r26, r24
    2764:	ed 91       	ld	r30, X+
    2766:	fc 91       	ld	r31, X
    2768:	62 e0       	ldi	r22, 0x02	; 2
    276a:	70 e0       	ldi	r23, 0x00	; 0
    276c:	00 e0       	ldi	r16, 0x00	; 0
    276e:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2770:	0f 91       	pop	r16
    2772:	08 95       	ret

00002774 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2774:	0f 93       	push	r16
    2776:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2778:	46 2f       	mov	r20, r22
    277a:	4f 70       	andi	r20, 0x0F	; 15
    277c:	40 6d       	ori	r20, 0xD0	; 208
    277e:	2f 77       	andi	r18, 0x7F	; 127
    2780:	dc 01       	movw	r26, r24
    2782:	ed 91       	ld	r30, X+
    2784:	fc 91       	ld	r31, X
    2786:	62 e0       	ldi	r22, 0x02	; 2
    2788:	70 e0       	ldi	r23, 0x00	; 0
    278a:	00 e0       	ldi	r16, 0x00	; 0
    278c:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    278e:	0f 91       	pop	r16
    2790:	08 95       	ret

00002792 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2792:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2794:	dc 01       	movw	r26, r24
    2796:	ed 91       	ld	r30, X+
    2798:	fc 91       	ld	r31, X
    279a:	61 e0       	ldi	r22, 0x01	; 1
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	48 ef       	ldi	r20, 0xF8	; 248
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	00 e0       	ldi	r16, 0x00	; 0
    27a4:	09 95       	icall
}
    27a6:	0f 91       	pop	r16
    27a8:	08 95       	ret

000027aa <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    27aa:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    27ac:	dc 01       	movw	r26, r24
    27ae:	ed 91       	ld	r30, X+
    27b0:	fc 91       	ld	r31, X
    27b2:	61 e0       	ldi	r22, 0x01	; 1
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	49 ef       	ldi	r20, 0xF9	; 249
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	00 e0       	ldi	r16, 0x00	; 0
    27bc:	09 95       	icall
}
    27be:	0f 91       	pop	r16
    27c0:	08 95       	ret

000027c2 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    27c2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    27c4:	dc 01       	movw	r26, r24
    27c6:	ed 91       	ld	r30, X+
    27c8:	fc 91       	ld	r31, X
    27ca:	61 e0       	ldi	r22, 0x01	; 1
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	4a ef       	ldi	r20, 0xFA	; 250
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	00 e0       	ldi	r16, 0x00	; 0
    27d4:	09 95       	icall
}
    27d6:	0f 91       	pop	r16
    27d8:	08 95       	ret

000027da <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    27da:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    27dc:	dc 01       	movw	r26, r24
    27de:	ed 91       	ld	r30, X+
    27e0:	fc 91       	ld	r31, X
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	4b ef       	ldi	r20, 0xFB	; 251
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	00 e0       	ldi	r16, 0x00	; 0
    27ec:	09 95       	icall
}
    27ee:	0f 91       	pop	r16
    27f0:	08 95       	ret

000027f2 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    27f2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    27f4:	dc 01       	movw	r26, r24
    27f6:	ed 91       	ld	r30, X+
    27f8:	fc 91       	ld	r31, X
    27fa:	61 e0       	ldi	r22, 0x01	; 1
    27fc:	70 e0       	ldi	r23, 0x00	; 0
    27fe:	4c ef       	ldi	r20, 0xFC	; 252
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	00 e0       	ldi	r16, 0x00	; 0
    2804:	09 95       	icall
}
    2806:	0f 91       	pop	r16
    2808:	08 95       	ret

0000280a <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    280a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    280c:	dc 01       	movw	r26, r24
    280e:	ed 91       	ld	r30, X+
    2810:	fc 91       	ld	r31, X
    2812:	61 e0       	ldi	r22, 0x01	; 1
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	4e ef       	ldi	r20, 0xFE	; 254
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	00 e0       	ldi	r16, 0x00	; 0
    281c:	09 95       	icall
}
    281e:	0f 91       	pop	r16
    2820:	08 95       	ret

00002822 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2822:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2824:	dc 01       	movw	r26, r24
    2826:	ed 91       	ld	r30, X+
    2828:	fc 91       	ld	r31, X
    282a:	61 e0       	ldi	r22, 0x01	; 1
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	4f ef       	ldi	r20, 0xFF	; 255
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	00 e0       	ldi	r16, 0x00	; 0
    2834:	09 95       	icall
}
    2836:	0f 91       	pop	r16
    2838:	08 95       	ret

0000283a <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    283a:	0f 93       	push	r16
   device->send_func(device, 2,
    283c:	26 2f       	mov	r18, r22
    283e:	2f 77       	andi	r18, 0x7F	; 127
    2840:	dc 01       	movw	r26, r24
    2842:	ed 91       	ld	r30, X+
    2844:	fc 91       	ld	r31, X
    2846:	62 e0       	ldi	r22, 0x02	; 2
    2848:	70 e0       	ldi	r23, 0x00	; 0
    284a:	41 ef       	ldi	r20, 0xF1	; 241
    284c:	00 e0       	ldi	r16, 0x00	; 0
    284e:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2850:	0f 91       	pop	r16
    2852:	08 95       	ret

00002854 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2854:	0f 93       	push	r16
    2856:	1f 93       	push	r17
   device->send_func(device, 3,
    2858:	26 2f       	mov	r18, r22
    285a:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    285c:	8b 01       	movw	r16, r22
    285e:	00 0f       	add	r16, r16
    2860:	01 2f       	mov	r16, r17
    2862:	00 1f       	adc	r16, r16
    2864:	11 0b       	sbc	r17, r17
    2866:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2868:	0f 77       	andi	r16, 0x7F	; 127
    286a:	dc 01       	movw	r26, r24
    286c:	ed 91       	ld	r30, X+
    286e:	fc 91       	ld	r31, X
    2870:	63 e0       	ldi	r22, 0x03	; 3
    2872:	70 e0       	ldi	r23, 0x00	; 0
    2874:	42 ef       	ldi	r20, 0xF2	; 242
    2876:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	08 95       	ret

0000287e <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    287e:	0f 93       	push	r16
   device->send_func(device, 2,
    2880:	26 2f       	mov	r18, r22
    2882:	2f 77       	andi	r18, 0x7F	; 127
    2884:	dc 01       	movw	r26, r24
    2886:	ed 91       	ld	r30, X+
    2888:	fc 91       	ld	r31, X
    288a:	62 e0       	ldi	r22, 0x02	; 2
    288c:	70 e0       	ldi	r23, 0x00	; 0
    288e:	43 ef       	ldi	r20, 0xF3	; 243
    2890:	00 e0       	ldi	r16, 0x00	; 0
    2892:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2894:	0f 91       	pop	r16
    2896:	08 95       	ret

00002898 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2898:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    289a:	dc 01       	movw	r26, r24
    289c:	ed 91       	ld	r30, X+
    289e:	fc 91       	ld	r31, X
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	70 e0       	ldi	r23, 0x00	; 0
    28a4:	46 ef       	ldi	r20, 0xF6	; 246
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	00 e0       	ldi	r16, 0x00	; 0
    28aa:	09 95       	icall
}
    28ac:	0f 91       	pop	r16
    28ae:	08 95       	ret

000028b0 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    28b0:	0f 93       	push	r16
    28b2:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    28b4:	dc 01       	movw	r26, r24
    28b6:	ed 91       	ld	r30, X+
    28b8:	fc 91       	ld	r31, X
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	70 e0       	ldi	r23, 0x00	; 0
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	00 e0       	ldi	r16, 0x00	; 0
    28c2:	09 95       	icall
}
    28c4:	0f 91       	pop	r16
    28c6:	08 95       	ret

000028c8 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    28c8:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    28ca:	dc 01       	movw	r26, r24
    28cc:	ed 91       	ld	r30, X+
    28ce:	fc 91       	ld	r31, X
    28d0:	09 95       	icall
}
    28d2:	0f 91       	pop	r16
    28d4:	08 95       	ret

000028d6 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    28d6:	6f 92       	push	r6
    28d8:	7f 92       	push	r7
    28da:	8f 92       	push	r8
    28dc:	9f 92       	push	r9
    28de:	af 92       	push	r10
    28e0:	bf 92       	push	r11
    28e2:	cf 92       	push	r12
    28e4:	df 92       	push	r13
    28e6:	ef 92       	push	r14
    28e8:	ff 92       	push	r15
    28ea:	0f 93       	push	r16
    28ec:	1f 93       	push	r17
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <midi_send_array+0x1e>
    28f4:	0f 92       	push	r0
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	4c 01       	movw	r8, r24
    28fc:	6b 01       	movw	r12, r22
    28fe:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2900:	61 15       	cp	r22, r1
    2902:	71 05       	cpc	r23, r1
    2904:	41 f1       	breq	.+80     	; 0x2956 <midi_send_array+0x80>
    2906:	ee 24       	eor	r14, r14
    2908:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    290a:	0f 2e       	mov	r0, r31
    290c:	f3 e0       	ldi	r31, 0x03	; 3
    290e:	6f 2e       	mov	r6, r31
    2910:	77 24       	eor	r7, r7
    2912:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2914:	19 82       	std	Y+1, r1	; 0x01
    2916:	1a 82       	std	Y+2, r1	; 0x02
    2918:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    291a:	86 01       	movw	r16, r12
    291c:	0e 19       	sub	r16, r14
    291e:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2920:	04 30       	cpi	r16, 0x04	; 4
    2922:	11 05       	cpc	r17, r1
    2924:	08 f0       	brcs	.+2      	; 0x2928 <midi_send_array+0x52>
    2926:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2928:	b5 01       	movw	r22, r10
    292a:	6e 0d       	add	r22, r14
    292c:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    292e:	ce 01       	movw	r24, r28
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	40 2f       	mov	r20, r16
    2934:	51 2f       	mov	r21, r17
    2936:	0e 94 74 19 	call	0x32e8	; 0x32e8 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    293a:	c4 01       	movw	r24, r8
    293c:	b8 01       	movw	r22, r16
    293e:	49 81       	ldd	r20, Y+1	; 0x01
    2940:	2a 81       	ldd	r18, Y+2	; 0x02
    2942:	0b 81       	ldd	r16, Y+3	; 0x03
    2944:	0e 94 64 14 	call	0x28c8	; 0x28c8 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2948:	83 e0       	ldi	r24, 0x03	; 3
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	e8 0e       	add	r14, r24
    294e:	f9 1e       	adc	r15, r25
    2950:	ec 14       	cp	r14, r12
    2952:	fd 04       	cpc	r15, r13
    2954:	f8 f2       	brcs	.-66     	; 0x2914 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	1f 91       	pop	r17
    2962:	0f 91       	pop	r16
    2964:	ff 90       	pop	r15
    2966:	ef 90       	pop	r14
    2968:	df 90       	pop	r13
    296a:	cf 90       	pop	r12
    296c:	bf 90       	pop	r11
    296e:	af 90       	pop	r10
    2970:	9f 90       	pop	r9
    2972:	8f 90       	pop	r8
    2974:	7f 90       	pop	r7
    2976:	6f 90       	pop	r6
    2978:	08 95       	ret

0000297a <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    297a:	fc 01       	movw	r30, r24
    297c:	73 83       	std	Z+3, r23	; 0x03
    297e:	62 83       	std	Z+2, r22	; 0x02
}
    2980:	08 95       	ret

00002982 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2982:	fc 01       	movw	r30, r24
    2984:	75 83       	std	Z+5, r23	; 0x05
    2986:	64 83       	std	Z+4, r22	; 0x04
}
    2988:	08 95       	ret

0000298a <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    298a:	fc 01       	movw	r30, r24
    298c:	77 83       	std	Z+7, r23	; 0x07
    298e:	66 83       	std	Z+6, r22	; 0x06
}
    2990:	08 95       	ret

00002992 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2992:	fc 01       	movw	r30, r24
    2994:	71 87       	std	Z+9, r23	; 0x09
    2996:	60 87       	std	Z+8, r22	; 0x08
}
    2998:	08 95       	ret

0000299a <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    299a:	fc 01       	movw	r30, r24
    299c:	73 87       	std	Z+11, r23	; 0x0b
    299e:	62 87       	std	Z+10, r22	; 0x0a
}
    29a0:	08 95       	ret

000029a2 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    29a2:	fc 01       	movw	r30, r24
    29a4:	75 87       	std	Z+13, r23	; 0x0d
    29a6:	64 87       	std	Z+12, r22	; 0x0c
}
    29a8:	08 95       	ret

000029aa <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    29aa:	fc 01       	movw	r30, r24
    29ac:	77 87       	std	Z+15, r23	; 0x0f
    29ae:	66 87       	std	Z+14, r22	; 0x0e
}
    29b0:	08 95       	ret

000029b2 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    29b2:	fc 01       	movw	r30, r24
    29b4:	71 8b       	std	Z+17, r23	; 0x11
    29b6:	60 8b       	std	Z+16, r22	; 0x10
}
    29b8:	08 95       	ret

000029ba <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    29ba:	fc 01       	movw	r30, r24
    29bc:	73 8b       	std	Z+19, r23	; 0x13
    29be:	62 8b       	std	Z+18, r22	; 0x12
}
    29c0:	08 95       	ret

000029c2 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    29c2:	fc 01       	movw	r30, r24
    29c4:	75 8b       	std	Z+21, r23	; 0x15
    29c6:	64 8b       	std	Z+20, r22	; 0x14
}
    29c8:	08 95       	ret

000029ca <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    29ca:	fc 01       	movw	r30, r24
    29cc:	77 8b       	std	Z+23, r23	; 0x17
    29ce:	66 8b       	std	Z+22, r22	; 0x16
}
    29d0:	08 95       	ret

000029d2 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    29d2:	fc 01       	movw	r30, r24
    29d4:	71 8f       	std	Z+25, r23	; 0x19
    29d6:	60 8f       	std	Z+24, r22	; 0x18
}
    29d8:	08 95       	ret

000029da <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    29da:	fc 01       	movw	r30, r24
    29dc:	73 8f       	std	Z+27, r23	; 0x1b
    29de:	62 8f       	std	Z+26, r22	; 0x1a
}
    29e0:	08 95       	ret

000029e2 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    29e2:	fc 01       	movw	r30, r24
    29e4:	75 8f       	std	Z+29, r23	; 0x1d
    29e6:	64 8f       	std	Z+28, r22	; 0x1c
}
    29e8:	08 95       	ret

000029ea <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    29ea:	fc 01       	movw	r30, r24
    29ec:	77 8f       	std	Z+31, r23	; 0x1f
    29ee:	66 8f       	std	Z+30, r22	; 0x1e
}
    29f0:	08 95       	ret

000029f2 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    29f8:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    29fa:	1f a2       	lds	r17, 0x9f
    29fc:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    29fe:	bc 01       	movw	r22, r24
    2a00:	68 5d       	subi	r22, 0xD8	; 216
    2a02:	7f 4f       	sbci	r23, 0xFF	; 255
    2a04:	88 51       	subi	r24, 0x18	; 24
    2a06:	9f 4f       	sbci	r25, 0xFF	; 255
    2a08:	40 ec       	ldi	r20, 0xC0	; 192
    2a0a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2a0e:	1b 82       	std	Y+3, r1	; 0x03
    2a10:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2a12:	1d 82       	std	Y+5, r1	; 0x05
    2a14:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2a16:	1f 82       	std	Y+7, r1	; 0x07
    2a18:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    2a1a:	19 86       	std	Y+9, r1	; 0x09
    2a1c:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2a1e:	1b 86       	std	Y+11, r1	; 0x0b
    2a20:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2a22:	1d 86       	std	Y+13, r1	; 0x0d
    2a24:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2a26:	1f 86       	std	Y+15, r1	; 0x0f
    2a28:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    2a2a:	19 8a       	std	Y+17, r1	; 0x11
    2a2c:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2a2e:	1b 8a       	std	Y+19, r1	; 0x13
    2a30:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2a32:	1d 8a       	std	Y+21, r1	; 0x15
    2a34:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2a36:	1f 8a       	std	Y+23, r1	; 0x17
    2a38:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    2a3a:	19 8e       	std	Y+25, r1	; 0x19
    2a3c:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2a3e:	1b 8e       	std	Y+27, r1	; 0x1b
    2a40:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2a42:	1d 8e       	std	Y+29, r1	; 0x1d
    2a44:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2a46:	1f 8e       	std	Y+31, r1	; 0x1f
    2a48:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    2a4a:	19 a2       	lds	r17, 0x99
    2a4c:	18 a2       	lds	r17, 0x98
}
    2a4e:	df 91       	pop	r29
    2a50:	cf 91       	pop	r28
    2a52:	08 95       	ret

00002a54 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2a54:	ef 92       	push	r14
    2a56:	ff 92       	push	r15
    2a58:	0f 93       	push	r16
    2a5a:	1f 93       	push	r17
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2a62:	66 23       	and	r22, r22
    2a64:	99 f0       	breq	.+38     	; 0x2a8c <midi_device_input+0x38>
    2a66:	04 2f       	mov	r16, r20
    2a68:	15 2f       	mov	r17, r21
    2a6a:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    2a6c:	0f 2e       	mov	r0, r31
    2a6e:	f8 ee       	ldi	r31, 0xE8	; 232
    2a70:	ef 2e       	mov	r14, r31
    2a72:	ff 24       	eor	r15, r15
    2a74:	f0 2d       	mov	r31, r0
    2a76:	e8 0e       	add	r14, r24
    2a78:	f9 1e       	adc	r15, r25
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	61 91       	ld	r22, Z+
    2a7e:	8f 01       	movw	r16, r30
    2a80:	c7 01       	movw	r24, r14
    2a82:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2a86:	cf 5f       	subi	r28, 0xFF	; 255
    2a88:	cd 17       	cp	r28, r29
    2a8a:	b9 f7       	brne	.-18     	; 0x2a7a <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	1f 91       	pop	r17
    2a92:	0f 91       	pop	r16
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	08 95       	ret

00002a9a <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	71 83       	std	Z+1, r23	; 0x01
    2a9e:	60 83       	st	Z, r22
}
    2aa0:	08 95       	ret

00002aa2 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	71 a3       	lds	r23, 0x51
    2aa6:	60 a3       	lds	r22, 0x50
}
    2aa8:	08 95       	ret

00002aaa <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    2aaa:	af 92       	push	r10
    2aac:	bf 92       	push	r11
    2aae:	cf 92       	push	r12
    2ab0:	df 92       	push	r13
    2ab2:	ef 92       	push	r14
    2ab4:	ff 92       	push	r15
    2ab6:	0f 93       	push	r16
    2ab8:	1f 93       	push	r17
    2aba:	cf 93       	push	r28
    2abc:	df 93       	push	r29
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <midi_input_callbacks+0x16>
    2ac0:	0f 92       	push	r0
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	6c 01       	movw	r12, r24
    2ac8:	5b 01       	movw	r10, r22
    2aca:	f4 2e       	mov	r15, r20
    2acc:	e2 2e       	mov	r14, r18
    2ace:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	95 96       	adiw	r26, 0x25	; 37
    2ad4:	8c 91       	ld	r24, X
    2ad6:	95 97       	sbiw	r26, 0x25	; 37
    2ad8:	84 30       	cpi	r24, 0x04	; 4
    2ada:	e9 f4       	brne	.+58     	; 0x2b16 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    2adc:	5a 96       	adiw	r26, 0x1a	; 26
    2ade:	ed 91       	ld	r30, X+
    2ae0:	fc 91       	ld	r31, X
    2ae2:	5b 97       	sbiw	r26, 0x1b	; 27
    2ae4:	30 97       	sbiw	r30, 0x00	; 0
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <midi_input_callbacks+0x40>
    2ae8:	ee c0       	rjmp	.+476    	; 0x2cc6 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    2aea:	cb 01       	movw	r24, r22
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	63 e0       	ldi	r22, 0x03	; 3
    2af0:	70 e0       	ldi	r23, 0x00	; 0
    2af2:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodhi4>
    2af6:	cb 01       	movw	r24, r22
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	68 0f       	add	r22, r24
    2afe:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2b00:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2b02:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    2b04:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2b06:	4a 2d       	mov	r20, r10
    2b08:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    2b0a:	c6 01       	movw	r24, r12
    2b0c:	9e 01       	movw	r18, r28
    2b0e:	2f 5f       	subi	r18, 0xFF	; 255
    2b10:	3f 4f       	sbci	r19, 0xFF	; 255
    2b12:	09 95       	icall
    2b14:	c8 c0       	rjmp	.+400    	; 0x2ca6 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    2b16:	62 30       	cpi	r22, 0x02	; 2
    2b18:	71 05       	cpc	r23, r1
    2b1a:	09 f4       	brne	.+2      	; 0x2b1e <midi_input_callbacks+0x74>
    2b1c:	5f c0       	rjmp	.+190    	; 0x2bdc <midi_input_callbacks+0x132>
    2b1e:	63 30       	cpi	r22, 0x03	; 3
    2b20:	71 05       	cpc	r23, r1
    2b22:	29 f0       	breq	.+10     	; 0x2b2e <midi_input_callbacks+0x84>
    2b24:	61 30       	cpi	r22, 0x01	; 1
    2b26:	71 05       	cpc	r23, r1
    2b28:	09 f0       	breq	.+2      	; 0x2b2c <midi_input_callbacks+0x82>
    2b2a:	b3 c0       	rjmp	.+358    	; 0x2c92 <midi_input_callbacks+0x1e8>
    2b2c:	99 c0       	rjmp	.+306    	; 0x2c60 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2b2e:	84 2f       	mov	r24, r20
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	80 7f       	andi	r24, 0xF0	; 240
    2b34:	90 70       	andi	r25, 0x00	; 0
    2b36:	80 3a       	cpi	r24, 0xA0	; 160
    2b38:	91 05       	cpc	r25, r1
    2b3a:	29 f1       	breq	.+74     	; 0x2b86 <midi_input_callbacks+0xdc>
    2b3c:	81 3a       	cpi	r24, 0xA1	; 161
    2b3e:	91 05       	cpc	r25, r1
    2b40:	3c f4       	brge	.+14     	; 0x2b50 <midi_input_callbacks+0xa6>
    2b42:	80 38       	cpi	r24, 0x80	; 128
    2b44:	91 05       	cpc	r25, r1
    2b46:	c9 f0       	breq	.+50     	; 0x2b7a <midi_input_callbacks+0xd0>
    2b48:	80 39       	cpi	r24, 0x90	; 144
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	91 f5       	brne	.+100    	; 0x2bb2 <midi_input_callbacks+0x108>
    2b4e:	0f c0       	rjmp	.+30     	; 0x2b6e <midi_input_callbacks+0xc4>
    2b50:	80 3e       	cpi	r24, 0xE0	; 224
    2b52:	91 05       	cpc	r25, r1
    2b54:	f1 f0       	breq	.+60     	; 0x2b92 <midi_input_callbacks+0xe8>
    2b56:	80 3f       	cpi	r24, 0xF0	; 240
    2b58:	91 05       	cpc	r25, r1
    2b5a:	09 f1       	breq	.+66     	; 0x2b9e <midi_input_callbacks+0xf4>
    2b5c:	80 3b       	cpi	r24, 0xB0	; 176
    2b5e:	91 05       	cpc	r25, r1
    2b60:	41 f5       	brne	.+80     	; 0x2bb2 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2b62:	d6 01       	movw	r26, r12
    2b64:	12 96       	adiw	r26, 0x02	; 2
    2b66:	ed 91       	ld	r30, X+
    2b68:	fc 91       	ld	r31, X
    2b6a:	13 97       	sbiw	r26, 0x03	; 3
              break;
    2b6c:	24 c0       	rjmp	.+72     	; 0x2bb6 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    2b6e:	d6 01       	movw	r26, r12
    2b70:	14 96       	adiw	r26, 0x04	; 4
    2b72:	ed 91       	ld	r30, X+
    2b74:	fc 91       	ld	r31, X
    2b76:	15 97       	sbiw	r26, 0x05	; 5
              break;
    2b78:	1e c0       	rjmp	.+60     	; 0x2bb6 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    2b7a:	d6 01       	movw	r26, r12
    2b7c:	16 96       	adiw	r26, 0x06	; 6
    2b7e:	ed 91       	ld	r30, X+
    2b80:	fc 91       	ld	r31, X
    2b82:	17 97       	sbiw	r26, 0x07	; 7
              break;
    2b84:	18 c0       	rjmp	.+48     	; 0x2bb6 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    2b86:	d6 01       	movw	r26, r12
    2b88:	18 96       	adiw	r26, 0x08	; 8
    2b8a:	ed 91       	ld	r30, X+
    2b8c:	fc 91       	ld	r31, X
    2b8e:	19 97       	sbiw	r26, 0x09	; 9
              break;
    2b90:	12 c0       	rjmp	.+36     	; 0x2bb6 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    2b92:	d6 01       	movw	r26, r12
    2b94:	1a 96       	adiw	r26, 0x0a	; 10
    2b96:	ed 91       	ld	r30, X+
    2b98:	fc 91       	ld	r31, X
    2b9a:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    2b9c:	0c c0       	rjmp	.+24     	; 0x2bb6 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    2b9e:	b2 ef       	ldi	r27, 0xF2	; 242
    2ba0:	4b 17       	cp	r20, r27
    2ba2:	09 f0       	breq	.+2      	; 0x2ba6 <midi_input_callbacks+0xfc>
    2ba4:	90 c0       	rjmp	.+288    	; 0x2cc6 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    2ba6:	d6 01       	movw	r26, r12
    2ba8:	1c 96       	adiw	r26, 0x0c	; 12
    2baa:	ed 91       	ld	r30, X+
    2bac:	fc 91       	ld	r31, X
    2bae:	1d 97       	sbiw	r26, 0x0d	; 13
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    2bb2:	e0 e0       	ldi	r30, 0x00	; 0
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    2bb6:	30 97       	sbiw	r30, 0x00	; 0
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <midi_input_callbacks+0x112>
    2bba:	85 c0       	rjmp	.+266    	; 0x2cc6 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    2bbc:	b2 ef       	ldi	r27, 0xF2	; 242
    2bbe:	fb 16       	cp	r15, r27
    2bc0:	31 f4       	brne	.+12     	; 0x2bce <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    2bc2:	c6 01       	movw	r24, r12
    2bc4:	62 ef       	ldi	r22, 0xF2	; 242
    2bc6:	4e 2d       	mov	r20, r14
    2bc8:	21 2f       	mov	r18, r17
    2bca:	09 95       	icall
    2bcc:	6c c0       	rjmp	.+216    	; 0x2ca6 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    2bce:	6f 2d       	mov	r22, r15
    2bd0:	6f 70       	andi	r22, 0x0F	; 15
    2bd2:	c6 01       	movw	r24, r12
    2bd4:	4e 2d       	mov	r20, r14
    2bd6:	21 2f       	mov	r18, r17
    2bd8:	09 95       	icall
    2bda:	65 c0       	rjmp	.+202    	; 0x2ca6 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2bdc:	84 2f       	mov	r24, r20
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	80 7f       	andi	r24, 0xF0	; 240
    2be2:	90 70       	andi	r25, 0x00	; 0
    2be4:	80 3d       	cpi	r24, 0xD0	; 208
    2be6:	91 05       	cpc	r25, r1
    2be8:	61 f0       	breq	.+24     	; 0x2c02 <midi_input_callbacks+0x158>
    2bea:	80 3f       	cpi	r24, 0xF0	; 240
    2bec:	91 05       	cpc	r25, r1
    2bee:	79 f0       	breq	.+30     	; 0x2c0e <midi_input_callbacks+0x164>
    2bf0:	80 3c       	cpi	r24, 0xC0	; 192
    2bf2:	91 05       	cpc	r25, r1
    2bf4:	f9 f4       	brne	.+62     	; 0x2c34 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    2bf6:	d6 01       	movw	r26, r12
    2bf8:	1e 96       	adiw	r26, 0x0e	; 14
    2bfa:	ed 91       	ld	r30, X+
    2bfc:	fc 91       	ld	r31, X
    2bfe:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2c00:	1b c0       	rjmp	.+54     	; 0x2c38 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2c02:	d6 01       	movw	r26, r12
    2c04:	50 96       	adiw	r26, 0x10	; 16
    2c06:	ed 91       	ld	r30, X+
    2c08:	fc 91       	ld	r31, X
    2c0a:	51 97       	sbiw	r26, 0x11	; 17
              break;
    2c0c:	15 c0       	rjmp	.+42     	; 0x2c38 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2c0e:	b3 ef       	ldi	r27, 0xF3	; 243
    2c10:	4b 17       	cp	r20, r27
    2c12:	31 f4       	brne	.+12     	; 0x2c20 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    2c14:	d6 01       	movw	r26, r12
    2c16:	52 96       	adiw	r26, 0x12	; 18
    2c18:	ed 91       	ld	r30, X+
    2c1a:	fc 91       	ld	r31, X
    2c1c:	53 97       	sbiw	r26, 0x13	; 19
    2c1e:	0c c0       	rjmp	.+24     	; 0x2c38 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2c20:	b1 ef       	ldi	r27, 0xF1	; 241
    2c22:	4b 17       	cp	r20, r27
    2c24:	09 f0       	breq	.+2      	; 0x2c28 <midi_input_callbacks+0x17e>
    2c26:	4f c0       	rjmp	.+158    	; 0x2cc6 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    2c28:	d6 01       	movw	r26, r12
    2c2a:	54 96       	adiw	r26, 0x14	; 20
    2c2c:	ed 91       	ld	r30, X+
    2c2e:	fc 91       	ld	r31, X
    2c30:	55 97       	sbiw	r26, 0x15	; 21
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    2c34:	e0 e0       	ldi	r30, 0x00	; 0
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    2c38:	30 97       	sbiw	r30, 0x00	; 0
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <midi_input_callbacks+0x194>
    2c3c:	44 c0       	rjmp	.+136    	; 0x2cc6 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2c3e:	b3 ef       	ldi	r27, 0xF3	; 243
    2c40:	fb 16       	cp	r15, r27
    2c42:	19 f0       	breq	.+6      	; 0x2c4a <midi_input_callbacks+0x1a0>
    2c44:	81 ef       	ldi	r24, 0xF1	; 241
    2c46:	f8 16       	cp	r15, r24
    2c48:	29 f4       	brne	.+10     	; 0x2c54 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    2c4a:	c6 01       	movw	r24, r12
    2c4c:	6f 2d       	mov	r22, r15
    2c4e:	4e 2d       	mov	r20, r14
    2c50:	09 95       	icall
    2c52:	29 c0       	rjmp	.+82     	; 0x2ca6 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    2c54:	6f 2d       	mov	r22, r15
    2c56:	6f 70       	andi	r22, 0x0F	; 15
    2c58:	c6 01       	movw	r24, r12
    2c5a:	4e 2d       	mov	r20, r14
    2c5c:	09 95       	icall
    2c5e:	23 c0       	rjmp	.+70     	; 0x2ca6 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2c60:	84 2f       	mov	r24, r20
    2c62:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <midi_is_realtime>
    2c66:	88 23       	and	r24, r24
    2c68:	31 f0       	breq	.+12     	; 0x2c76 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    2c6a:	d6 01       	movw	r26, r12
    2c6c:	56 96       	adiw	r26, 0x16	; 22
    2c6e:	ed 91       	ld	r30, X+
    2c70:	fc 91       	ld	r31, X
    2c72:	57 97       	sbiw	r26, 0x17	; 23
    2c74:	08 c0       	rjmp	.+16     	; 0x2c86 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    2c76:	b6 ef       	ldi	r27, 0xF6	; 246
    2c78:	fb 16       	cp	r15, r27
    2c7a:	29 f5       	brne	.+74     	; 0x2cc6 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    2c7c:	d6 01       	movw	r26, r12
    2c7e:	58 96       	adiw	r26, 0x18	; 24
    2c80:	ed 91       	ld	r30, X+
    2c82:	fc 91       	ld	r31, X
    2c84:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    2c86:	30 97       	sbiw	r30, 0x00	; 0
    2c88:	f1 f0       	breq	.+60     	; 0x2cc6 <midi_input_callbacks+0x21c>
            func(device, byte0);
    2c8a:	c6 01       	movw	r24, r12
    2c8c:	6f 2d       	mov	r22, r15
    2c8e:	09 95       	icall
    2c90:	0a c0       	rjmp	.+20     	; 0x2ca6 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    2c92:	64 30       	cpi	r22, 0x04	; 4
    2c94:	71 05       	cpc	r23, r1
    2c96:	a8 f4       	brcc	.+42     	; 0x2cc2 <midi_input_callbacks+0x218>
    2c98:	16 c0       	rjmp	.+44     	; 0x2cc6 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    2c9a:	c6 01       	movw	r24, r12
    2c9c:	b5 01       	movw	r22, r10
    2c9e:	4f 2d       	mov	r20, r15
    2ca0:	2e 2d       	mov	r18, r14
    2ca2:	01 2f       	mov	r16, r17
    2ca4:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    2ca6:	d6 01       	movw	r26, r12
    2ca8:	5e 96       	adiw	r26, 0x1e	; 30
    2caa:	ed 91       	ld	r30, X+
    2cac:	fc 91       	ld	r31, X
    2cae:	5f 97       	sbiw	r26, 0x1f	; 31
    2cb0:	30 97       	sbiw	r30, 0x00	; 0
    2cb2:	89 f0       	breq	.+34     	; 0x2cd6 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    2cb4:	c6 01       	movw	r24, r12
    2cb6:	b5 01       	movw	r22, r10
    2cb8:	4f 2d       	mov	r20, r15
    2cba:	2e 2d       	mov	r18, r14
    2cbc:	01 2f       	mov	r16, r17
    2cbe:	09 95       	icall
    2cc0:	0a c0       	rjmp	.+20     	; 0x2cd6 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    2cc2:	aa 24       	eor	r10, r10
    2cc4:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    2cc6:	d6 01       	movw	r26, r12
    2cc8:	5c 96       	adiw	r26, 0x1c	; 28
    2cca:	ed 91       	ld	r30, X+
    2ccc:	fc 91       	ld	r31, X
    2cce:	5d 97       	sbiw	r26, 0x1d	; 29
    2cd0:	30 97       	sbiw	r30, 0x00	; 0
    2cd2:	19 f7       	brne	.-58     	; 0x2c9a <midi_input_callbacks+0x1f0>
    2cd4:	e8 cf       	rjmp	.-48     	; 0x2ca6 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	df 91       	pop	r29
    2cde:	cf 91       	pop	r28
    2ce0:	1f 91       	pop	r17
    2ce2:	0f 91       	pop	r16
    2ce4:	ff 90       	pop	r15
    2ce6:	ef 90       	pop	r14
    2ce8:	df 90       	pop	r13
    2cea:	cf 90       	pop	r12
    2cec:	bf 90       	pop	r11
    2cee:	af 90       	pop	r10
    2cf0:	08 95       	ret

00002cf2 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    2cf2:	ef 92       	push	r14
    2cf4:	ff 92       	push	r15
    2cf6:	0f 93       	push	r16
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	7c 01       	movw	r14, r24
    2cfe:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    2d00:	86 2f       	mov	r24, r22
    2d02:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <midi_is_realtime>
    2d06:	88 23       	and	r24, r24
    2d08:	91 f0       	breq	.+36     	; 0x2d2e <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    2d0a:	d7 01       	movw	r26, r14
    2d0c:	95 96       	adiw	r26, 0x25	; 37
    2d0e:	dc 91       	ld	r29, X
    2d10:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	95 96       	adiw	r26, 0x25	; 37
    2d16:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    2d18:	c7 01       	movw	r24, r14
    2d1a:	61 e0       	ldi	r22, 0x01	; 1
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	4c 2f       	mov	r20, r28
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	00 e0       	ldi	r16, 0x00	; 0
    2d24:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <midi_input_callbacks>
    device->input_state = state;
    2d28:	f7 01       	movw	r30, r14
    2d2a:	d5 a3       	lds	r29, 0x55
    2d2c:	b7 c0       	rjmp	.+366    	; 0x2e9c <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    2d2e:	8c 2f       	mov	r24, r28
    2d30:	0e 94 ee 12 	call	0x25dc	; 0x25dc <midi_is_statusbyte>
    2d34:	88 23       	and	r24, r24
    2d36:	09 f4       	brne	.+2      	; 0x2d3a <midi_process_byte+0x48>
    2d38:	73 c0       	rjmp	.+230    	; 0x2e20 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    2d3a:	d7 01       	movw	r26, r14
    2d3c:	95 96       	adiw	r26, 0x25	; 37
    2d3e:	8c 91       	ld	r24, X
    2d40:	95 97       	sbiw	r26, 0x25	; 37
    2d42:	84 30       	cpi	r24, 0x04	; 4
    2d44:	49 f0       	breq	.+18     	; 0x2d58 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    2d46:	92 96       	adiw	r26, 0x22	; 34
    2d48:	cc 93       	st	X, r28
    2d4a:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	97 96       	adiw	r26, 0x27	; 39
    2d52:	9c 93       	st	X, r25
    2d54:	8e 93       	st	-X, r24
    2d56:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    2d58:	8c 2f       	mov	r24, r28
    2d5a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <midi_packet_length>
    2d5e:	81 30       	cpi	r24, 0x01	; 1
    2d60:	41 f0       	breq	.+16     	; 0x2d72 <midi_process_byte+0x80>
    2d62:	81 30       	cpi	r24, 0x01	; 1
    2d64:	00 f1       	brcs	.+64     	; 0x2da6 <midi_process_byte+0xb4>
    2d66:	82 30       	cpi	r24, 0x02	; 2
    2d68:	a1 f0       	breq	.+40     	; 0x2d92 <midi_process_byte+0xa0>
    2d6a:	83 30       	cpi	r24, 0x03	; 3
    2d6c:	09 f0       	breq	.+2      	; 0x2d70 <midi_process_byte+0x7e>
    2d6e:	4f c0       	rjmp	.+158    	; 0x2e0e <midi_process_byte+0x11c>
    2d70:	14 c0       	rjmp	.+40     	; 0x2d9a <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	f7 01       	movw	r30, r14
    2d76:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    2d78:	c7 01       	movw	r24, r14
    2d7a:	61 e0       	ldi	r22, 0x01	; 1
    2d7c:	70 e0       	ldi	r23, 0x00	; 0
    2d7e:	4c 2f       	mov	r20, r28
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	00 e0       	ldi	r16, 0x00	; 0
    2d84:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <midi_input_callbacks>
        device->input_state = IDLE;
    2d88:	d7 01       	movw	r26, r14
    2d8a:	95 96       	adiw	r26, 0x25	; 37
    2d8c:	1c 92       	st	X, r1
    2d8e:	95 97       	sbiw	r26, 0x25	; 37
        break;
    2d90:	85 c0       	rjmp	.+266    	; 0x2e9c <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    2d92:	82 e0       	ldi	r24, 0x02	; 2
    2d94:	f7 01       	movw	r30, r14
    2d96:	85 a3       	lds	r24, 0x55
        break;
    2d98:	81 c0       	rjmp	.+258    	; 0x2e9c <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    2d9a:	83 e0       	ldi	r24, 0x03	; 3
    2d9c:	d7 01       	movw	r26, r14
    2d9e:	95 96       	adiw	r26, 0x25	; 37
    2da0:	8c 93       	st	X, r24
    2da2:	95 97       	sbiw	r26, 0x25	; 37
        break;
    2da4:	7b c0       	rjmp	.+246    	; 0x2e9c <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    2da6:	c0 3f       	cpi	r28, 0xF0	; 240
    2da8:	19 f0       	breq	.+6      	; 0x2db0 <midi_process_byte+0xbe>
    2daa:	c7 3f       	cpi	r28, 0xF7	; 247
    2dac:	59 f5       	brne	.+86     	; 0x2e04 <midi_process_byte+0x112>
    2dae:	0a c0       	rjmp	.+20     	; 0x2dc4 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    2db0:	84 e0       	ldi	r24, 0x04	; 4
    2db2:	f7 01       	movw	r30, r14
    2db4:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    2db6:	80 ef       	ldi	r24, 0xF0	; 240
    2db8:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	97 a3       	lds	r25, 0x57
    2dc0:	86 a3       	lds	r24, 0x56
            break;
    2dc2:	6c c0       	rjmp	.+216    	; 0x2e9c <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    2dc4:	d7 01       	movw	r26, r14
    2dc6:	96 96       	adiw	r26, 0x26	; 38
    2dc8:	2d 91       	ld	r18, X+
    2dca:	3c 91       	ld	r19, X
    2dcc:	97 97       	sbiw	r26, 0x27	; 39
    2dce:	c9 01       	movw	r24, r18
    2dd0:	63 e0       	ldi	r22, 0x03	; 3
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodhi4>
    2dd8:	f7 01       	movw	r30, r14
    2dda:	e8 0f       	add	r30, r24
    2ddc:	f9 1f       	adc	r31, r25
    2dde:	87 ef       	ldi	r24, 0xF7	; 247
    2de0:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    2de2:	b9 01       	movw	r22, r18
    2de4:	6f 5f       	subi	r22, 0xFF	; 255
    2de6:	7f 4f       	sbci	r23, 0xFF	; 255
    2de8:	f7 01       	movw	r30, r14
    2dea:	77 a3       	lds	r23, 0x57
    2dec:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    2dee:	c7 01       	movw	r24, r14
    2df0:	42 a1       	lds	r20, 0x42
    2df2:	23 a1       	lds	r18, 0x43
    2df4:	04 a1       	lds	r16, 0x44
    2df6:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    2dfa:	d7 01       	movw	r26, r14
    2dfc:	95 96       	adiw	r26, 0x25	; 37
    2dfe:	1c 92       	st	X, r1
    2e00:	95 97       	sbiw	r26, 0x25	; 37
            break;
    2e02:	4c c0       	rjmp	.+152    	; 0x2e9c <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    2e04:	f7 01       	movw	r30, r14
    2e06:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    2e08:	17 a2       	lds	r17, 0x97
    2e0a:	16 a2       	lds	r17, 0x96
    2e0c:	47 c0       	rjmp	.+142    	; 0x2e9c <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    2e0e:	d7 01       	movw	r26, r14
    2e10:	95 96       	adiw	r26, 0x25	; 37
    2e12:	1c 92       	st	X, r1
    2e14:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    2e16:	97 96       	adiw	r26, 0x27	; 39
    2e18:	1c 92       	st	X, r1
    2e1a:	1e 92       	st	-X, r1
    2e1c:	96 97       	sbiw	r26, 0x26	; 38
        break;
    2e1e:	3e c0       	rjmp	.+124    	; 0x2e9c <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    2e20:	f7 01       	movw	r30, r14
    2e22:	25 a1       	lds	r18, 0x45
    2e24:	22 23       	and	r18, r18
    2e26:	d1 f1       	breq	.+116    	; 0x2e9c <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    2e28:	06 a0       	lds	r16, 0x86
    2e2a:	f7 a1       	lds	r31, 0x47
    2e2c:	e0 2d       	mov	r30, r0
    2e2e:	cf 01       	movw	r24, r30
    2e30:	63 e0       	ldi	r22, 0x03	; 3
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodhi4>
    2e38:	ac 01       	movw	r20, r24
    2e3a:	8e 0d       	add	r24, r14
    2e3c:	9f 1d       	adc	r25, r15
    2e3e:	dc 01       	movw	r26, r24
    2e40:	92 96       	adiw	r26, 0x22	; 34
    2e42:	cc 93       	st	X, r28
    2e44:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    2e46:	bf 01       	movw	r22, r30
    2e48:	6f 5f       	subi	r22, 0xFF	; 255
    2e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4c:	f7 01       	movw	r30, r14
    2e4e:	77 a3       	lds	r23, 0x57
    2e50:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    2e52:	41 30       	cpi	r20, 0x01	; 1
    2e54:	51 05       	cpc	r21, r1
    2e56:	91 f0       	breq	.+36     	; 0x2e7c <midi_process_byte+0x18a>
    2e58:	42 30       	cpi	r20, 0x02	; 2
    2e5a:	51 05       	cpc	r21, r1
    2e5c:	f9 f4       	brne	.+62     	; 0x2e9c <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    2e5e:	c7 01       	movw	r24, r14
    2e60:	42 a1       	lds	r20, 0x42
    2e62:	23 a1       	lds	r18, 0x43
    2e64:	04 a1       	lds	r16, 0x44
    2e66:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    2e6a:	f7 01       	movw	r30, r14
    2e6c:	85 a1       	lds	r24, 0x45
    2e6e:	84 30       	cpi	r24, 0x04	; 4
    2e70:	a9 f0       	breq	.+42     	; 0x2e9c <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	97 a3       	lds	r25, 0x57
    2e78:	86 a3       	lds	r24, 0x56
    2e7a:	10 c0       	rjmp	.+32     	; 0x2e9c <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    2e7c:	22 30       	cpi	r18, 0x02	; 2
    2e7e:	71 f4       	brne	.+28     	; 0x2e9c <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    2e80:	c7 01       	movw	r24, r14
    2e82:	42 a1       	lds	r20, 0x42
    2e84:	23 a1       	lds	r18, 0x43
    2e86:	00 e0       	ldi	r16, 0x00	; 0
    2e88:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    2e8c:	f7 01       	movw	r30, r14
    2e8e:	85 a1       	lds	r24, 0x45
    2e90:	84 30       	cpi	r24, 0x04	; 4
    2e92:	21 f0       	breq	.+8      	; 0x2e9c <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	97 a3       	lds	r25, 0x57
    2e9a:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	0f 91       	pop	r16
    2ea2:	ff 90       	pop	r15
    2ea4:	ef 90       	pop	r14
    2ea6:	08 95       	ret

00002ea8 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    2ea8:	cf 92       	push	r12
    2eaa:	df 92       	push	r13
    2eac:	ef 92       	push	r14
    2eae:	ff 92       	push	r15
    2eb0:	0f 93       	push	r16
    2eb2:	1f 93       	push	r17
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    2eba:	dc 01       	movw	r26, r24
    2ebc:	90 96       	adiw	r26, 0x20	; 32
    2ebe:	ed 91       	ld	r30, X+
    2ec0:	fc 91       	ld	r31, X
    2ec2:	91 97       	sbiw	r26, 0x21	; 33
    2ec4:	30 97       	sbiw	r30, 0x00	; 0
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    2ec8:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    2eca:	0f 2e       	mov	r0, r31
    2ecc:	f8 ee       	ldi	r31, 0xE8	; 232
    2ece:	ef 2e       	mov	r14, r31
    2ed0:	ff 24       	eor	r15, r15
    2ed2:	f0 2d       	mov	r31, r0
    2ed4:	ec 0c       	add	r14, r12
    2ed6:	fd 1c       	adc	r15, r13
    2ed8:	c7 01       	movw	r24, r14
    2eda:	0e 94 a9 12 	call	0x2552	; 0x2552 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2ede:	c8 2f       	mov	r28, r24
    2ee0:	d0 e0       	ldi	r29, 0x00	; 0
    2ee2:	20 97       	sbiw	r28, 0x00	; 0
    2ee4:	99 f0       	breq	.+38     	; 0x2f0c <midi_device_process+0x64>
    2ee6:	00 e0       	ldi	r16, 0x00	; 0
    2ee8:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    2eea:	c7 01       	movw	r24, r14
    2eec:	60 e0       	ldi	r22, 0x00	; 0
    2eee:	0e 94 be 12 	call	0x257c	; 0x257c <bytequeue_get>
    2ef2:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    2ef4:	c6 01       	movw	r24, r12
    2ef6:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    2efa:	c7 01       	movw	r24, r14
    2efc:	61 e0       	ldi	r22, 0x01	; 1
    2efe:	0e 94 cf 12 	call	0x259e	; 0x259e <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2f02:	0f 5f       	subi	r16, 0xFF	; 255
    2f04:	1f 4f       	sbci	r17, 0xFF	; 255
    2f06:	0c 17       	cp	r16, r28
    2f08:	1d 07       	cpc	r17, r29
    2f0a:	78 f3       	brcs	.-34     	; 0x2eea <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	1f 91       	pop	r17
    2f12:	0f 91       	pop	r16
    2f14:	ff 90       	pop	r15
    2f16:	ef 90       	pop	r14
    2f18:	df 90       	pop	r13
    2f1a:	cf 90       	pop	r12
    2f1c:	08 95       	ret

00002f1e <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    2f1e:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    2f20:	67 e0       	ldi	r22, 0x07	; 7
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodhi4>
    2f28:	48 2f       	mov	r20, r24
   if (remainder)
    2f2a:	88 23       	and	r24, r24
    2f2c:	81 f0       	breq	.+32     	; 0x2f4e <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    2f2e:	c9 01       	movw	r24, r18
    2f30:	67 e0       	ldi	r22, 0x07	; 7
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodhi4>
    2f38:	cb 01       	movw	r24, r22
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	88 0f       	add	r24, r24
    2f40:	99 1f       	adc	r25, r25
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	01 96       	adiw	r24, 0x01	; 1
    2f48:	84 0f       	add	r24, r20
    2f4a:	91 1d       	adc	r25, r1
    2f4c:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    2f4e:	c9 01       	movw	r24, r18
    2f50:	67 e0       	ldi	r22, 0x07	; 7
    2f52:	70 e0       	ldi	r23, 0x00	; 0
    2f54:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodhi4>
    2f58:	cb 01       	movw	r24, r22
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	88 0f       	add	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
}
    2f66:	08 95       	ret

00002f68 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    2f68:	48 2f       	mov	r20, r24
    2f6a:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    2f6c:	a1 f0       	breq	.+40     	; 0x2f96 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    2f6e:	9c 01       	movw	r18, r24
    2f70:	36 95       	lsr	r19
    2f72:	27 95       	ror	r18
    2f74:	36 95       	lsr	r19
    2f76:	27 95       	ror	r18
    2f78:	36 95       	lsr	r19
    2f7a:	27 95       	ror	r18
    2f7c:	c9 01       	movw	r24, r18
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	88 0f       	add	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	82 1b       	sub	r24, r18
    2f8c:	93 0b       	sbc	r25, r19
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	84 0f       	add	r24, r20
    2f92:	91 1d       	adc	r25, r1
    2f94:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    2f96:	9c 01       	movw	r18, r24
    2f98:	36 95       	lsr	r19
    2f9a:	27 95       	ror	r18
    2f9c:	36 95       	lsr	r19
    2f9e:	27 95       	ror	r18
    2fa0:	36 95       	lsr	r19
    2fa2:	27 95       	ror	r18
    2fa4:	c9 01       	movw	r24, r18
    2fa6:	88 0f       	add	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	88 0f       	add	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	82 1b       	sub	r24, r18
    2fb4:	93 0b       	sbc	r25, r19
}
    2fb6:	08 95       	ret

00002fb8 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2fb8:	2f 92       	push	r2
    2fba:	3f 92       	push	r3
    2fbc:	4f 92       	push	r4
    2fbe:	5f 92       	push	r5
    2fc0:	6f 92       	push	r6
    2fc2:	7f 92       	push	r7
    2fc4:	8f 92       	push	r8
    2fc6:	9f 92       	push	r9
    2fc8:	af 92       	push	r10
    2fca:	bf 92       	push	r11
    2fcc:	cf 92       	push	r12
    2fce:	df 92       	push	r13
    2fd0:	ef 92       	push	r14
    2fd2:	ff 92       	push	r15
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <sysex_encode+0x26>
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <sysex_encode+0x28>
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <sysex_encode+0x2a>
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	1c 01       	movw	r2, r24
    2fe8:	7a 83       	std	Y+2, r23	; 0x02
    2fea:	69 83       	std	Y+1, r22	; 0x01
    2fec:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    2fee:	ca 01       	movw	r24, r20
    2ff0:	67 e0       	ldi	r22, 0x07	; 7
    2ff2:	70 e0       	ldi	r23, 0x00	; 0
    2ff4:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodhi4>
    2ff8:	2b 01       	movw	r4, r22
    2ffa:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2ffc:	61 15       	cp	r22, r1
    2ffe:	71 05       	cpc	r23, r1
    3000:	b1 f1       	breq	.+108    	; 0x306e <sysex_encode+0xb6>
    3002:	81 01       	movw	r16, r2
    3004:	e9 80       	ldd	r14, Y+1	; 0x01
    3006:	fa 80       	ldd	r15, Y+2	; 0x02
    3008:	cc 24       	eor	r12, r12
    300a:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    300c:	88 24       	eor	r8, r8
    300e:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3010:	1e 83       	std	Y+6, r17	; 0x06
    3012:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    3014:	f8 01       	movw	r30, r16
    3016:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3018:	fc 82       	std	Y+4, r15	; 0x04
    301a:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    301c:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    301e:	ab 81       	ldd	r26, Y+3	; 0x03
    3020:	bc 81       	ldd	r27, Y+4	; 0x04
    3022:	2d 91       	ld	r18, X+
    3024:	bc 83       	std	Y+4, r27	; 0x04
    3026:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3028:	4f 5f       	subi	r20, 0xFF	; 255
    302a:	5f 4f       	sbci	r21, 0xFF	; 255
    302c:	82 2f       	mov	r24, r18
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	80 78       	andi	r24, 0x80	; 128
    3032:	90 70       	andi	r25, 0x00	; 0
    3034:	bc 01       	movw	r22, r24
    3036:	04 2e       	mov	r0, r20
    3038:	02 c0       	rjmp	.+4      	; 0x303e <sysex_encode+0x86>
    303a:	75 95       	asr	r23
    303c:	67 95       	ror	r22
    303e:	0a 94       	dec	r0
    3040:	e2 f7       	brpl	.-8      	; 0x303a <sysex_encode+0x82>
    3042:	ad 81       	ldd	r26, Y+5	; 0x05
    3044:	be 81       	ldd	r27, Y+6	; 0x06
    3046:	8c 91       	ld	r24, X
    3048:	86 2b       	or	r24, r22
    304a:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    304c:	2f 77       	andi	r18, 0x7F	; 127
    304e:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3050:	47 30       	cpi	r20, 0x07	; 7
    3052:	51 05       	cpc	r21, r1
    3054:	21 f7       	brne	.-56     	; 0x301e <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3056:	08 94       	sec
    3058:	c1 1c       	adc	r12, r1
    305a:	d1 1c       	adc	r13, r1
    305c:	08 5f       	subi	r16, 0xF8	; 248
    305e:	1f 4f       	sbci	r17, 0xFF	; 255
    3060:	e7 e0       	ldi	r30, 0x07	; 7
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	ee 0e       	add	r14, r30
    3066:	ff 1e       	adc	r15, r31
    3068:	ca 14       	cp	r12, r10
    306a:	db 04       	cpc	r13, r11
    306c:	89 f6       	brne	.-94     	; 0x3010 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    306e:	c3 01       	movw	r24, r6
    3070:	67 e0       	ldi	r22, 0x07	; 7
    3072:	70 e0       	ldi	r23, 0x00	; 0
    3074:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodhi4>
   if (remainder) {
    3078:	88 23       	and	r24, r24
    307a:	d9 f1       	breq	.+118    	; 0x30f2 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    307c:	82 01       	movw	r16, r4
    307e:	00 0f       	add	r16, r16
    3080:	11 1f       	adc	r17, r17
    3082:	00 0f       	add	r16, r16
    3084:	11 1f       	adc	r17, r17
    3086:	00 0f       	add	r16, r16
    3088:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    308a:	78 01       	movw	r14, r16
    308c:	e4 18       	sub	r14, r4
    308e:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3090:	d1 01       	movw	r26, r2
    3092:	a0 0f       	add	r26, r16
    3094:	b1 1f       	adc	r27, r17
    3096:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3098:	68 2f       	mov	r22, r24
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	61 15       	cp	r22, r1
    309e:	71 05       	cpc	r23, r1
    30a0:	19 f1       	breq	.+70     	; 0x30e8 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    30a2:	e9 81       	ldd	r30, Y+1	; 0x01
    30a4:	fa 81       	ldd	r31, Y+2	; 0x02
    30a6:	ee 0e       	add	r14, r30
    30a8:	ff 1e       	adc	r15, r31
    30aa:	c8 01       	movw	r24, r16
    30ac:	01 96       	adiw	r24, 0x01	; 1
    30ae:	28 0e       	add	r2, r24
    30b0:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    30b6:	f7 01       	movw	r30, r14
    30b8:	41 91       	ld	r20, Z+
    30ba:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    30bc:	2f 5f       	subi	r18, 0xFF	; 255
    30be:	3f 4f       	sbci	r19, 0xFF	; 255
    30c0:	84 2f       	mov	r24, r20
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	80 78       	andi	r24, 0x80	; 128
    30c6:	90 70       	andi	r25, 0x00	; 0
    30c8:	02 2e       	mov	r0, r18
    30ca:	02 c0       	rjmp	.+4      	; 0x30d0 <sysex_encode+0x118>
    30cc:	95 95       	asr	r25
    30ce:	87 95       	ror	r24
    30d0:	0a 94       	dec	r0
    30d2:	e2 f7       	brpl	.-8      	; 0x30cc <sysex_encode+0x114>
    30d4:	9c 91       	ld	r25, X
    30d6:	89 2b       	or	r24, r25
    30d8:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    30da:	4f 77       	andi	r20, 0x7F	; 127
    30dc:	f1 01       	movw	r30, r2
    30de:	41 93       	st	Z+, r20
    30e0:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    30e2:	26 17       	cp	r18, r22
    30e4:	37 07       	cpc	r19, r23
    30e6:	38 f3       	brcs	.-50     	; 0x30b6 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    30e8:	c8 01       	movw	r24, r16
    30ea:	01 96       	adiw	r24, 0x01	; 1
    30ec:	86 0f       	add	r24, r22
    30ee:	97 1f       	adc	r25, r23
    30f0:	07 c0       	rjmp	.+14     	; 0x3100 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    30f2:	c2 01       	movw	r24, r4
    30f4:	88 0f       	add	r24, r24
    30f6:	99 1f       	adc	r25, r25
    30f8:	88 0f       	add	r24, r24
    30fa:	99 1f       	adc	r25, r25
    30fc:	88 0f       	add	r24, r24
    30fe:	99 1f       	adc	r25, r25
   }
}
    3100:	26 96       	adiw	r28, 0x06	; 6
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	ff 90       	pop	r15
    3116:	ef 90       	pop	r14
    3118:	df 90       	pop	r13
    311a:	cf 90       	pop	r12
    311c:	bf 90       	pop	r11
    311e:	af 90       	pop	r10
    3120:	9f 90       	pop	r9
    3122:	8f 90       	pop	r8
    3124:	7f 90       	pop	r7
    3126:	6f 90       	pop	r6
    3128:	5f 90       	pop	r5
    312a:	4f 90       	pop	r4
    312c:	3f 90       	pop	r3
    312e:	2f 90       	pop	r2
    3130:	08 95       	ret

00003132 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3132:	6f 92       	push	r6
    3134:	7f 92       	push	r7
    3136:	8f 92       	push	r8
    3138:	9f 92       	push	r9
    313a:	af 92       	push	r10
    313c:	bf 92       	push	r11
    313e:	cf 92       	push	r12
    3140:	df 92       	push	r13
    3142:	ef 92       	push	r14
    3144:	ff 92       	push	r15
    3146:	0f 93       	push	r16
    3148:	1f 93       	push	r17
    314a:	cf 93       	push	r28
    314c:	df 93       	push	r29
    314e:	3c 01       	movw	r6, r24
    3150:	4b 01       	movw	r8, r22
    3152:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3154:	42 30       	cpi	r20, 0x02	; 2
    3156:	51 05       	cpc	r21, r1
    3158:	08 f4       	brcc	.+2      	; 0x315c <sysex_decode+0x2a>
    315a:	6f c0       	rjmp	.+222    	; 0x323a <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    315c:	7a 01       	movw	r14, r20
    315e:	f6 94       	lsr	r15
    3160:	e7 94       	ror	r14
    3162:	f6 94       	lsr	r15
    3164:	e7 94       	ror	r14
    3166:	f6 94       	lsr	r15
    3168:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    316a:	e1 14       	cp	r14, r1
    316c:	f1 04       	cpc	r15, r1
    316e:	29 f1       	breq	.+74     	; 0x31ba <sysex_decode+0x88>
    3170:	eb 01       	movw	r28, r22
    3172:	b3 01       	movw	r22, r6
    3174:	00 e0       	ldi	r16, 0x00	; 0
    3176:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3178:	cc 24       	eor	r12, r12
    317a:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    317c:	de 01       	movw	r26, r28
    317e:	11 96       	adiw	r26, 0x01	; 1
    3180:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3182:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3184:	2d 91       	ld	r18, X+
    3186:	2f 77       	andi	r18, 0x7F	; 127
    3188:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    318a:	4f 5f       	subi	r20, 0xFF	; 255
    318c:	5f 4f       	sbci	r21, 0xFF	; 255
    318e:	88 81       	ld	r24, Y
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	04 2e       	mov	r0, r20
    3194:	02 c0       	rjmp	.+4      	; 0x319a <sysex_decode+0x68>
    3196:	88 0f       	add	r24, r24
    3198:	99 1f       	adc	r25, r25
    319a:	0a 94       	dec	r0
    319c:	e2 f7       	brpl	.-8      	; 0x3196 <sysex_decode+0x64>
    319e:	80 78       	andi	r24, 0x80	; 128
    31a0:	28 2b       	or	r18, r24
    31a2:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    31a4:	47 30       	cpi	r20, 0x07	; 7
    31a6:	51 05       	cpc	r21, r1
    31a8:	69 f7       	brne	.-38     	; 0x3184 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    31aa:	0f 5f       	subi	r16, 0xFF	; 255
    31ac:	1f 4f       	sbci	r17, 0xFF	; 255
    31ae:	28 96       	adiw	r28, 0x08	; 8
    31b0:	69 5f       	subi	r22, 0xF9	; 249
    31b2:	7f 4f       	sbci	r23, 0xFF	; 255
    31b4:	0e 15       	cp	r16, r14
    31b6:	1f 05       	cpc	r17, r15
    31b8:	09 f7       	brne	.-62     	; 0x317c <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    31ba:	5a 2d       	mov	r21, r10
    31bc:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    31be:	99 f1       	breq	.+102    	; 0x3226 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    31c0:	e7 01       	movw	r28, r14
    31c2:	cc 0f       	add	r28, r28
    31c4:	dd 1f       	adc	r29, r29
    31c6:	cc 0f       	add	r28, r28
    31c8:	dd 1f       	adc	r29, r29
    31ca:	cc 0f       	add	r28, r28
    31cc:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    31ce:	8e 01       	movw	r16, r28
    31d0:	0e 19       	sub	r16, r14
    31d2:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    31d4:	65 2f       	mov	r22, r21
    31d6:	70 e0       	ldi	r23, 0x00	; 0
    31d8:	61 50       	subi	r22, 0x01	; 1
    31da:	70 40       	sbci	r23, 0x00	; 0
    31dc:	f9 f0       	breq	.+62     	; 0x321c <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    31de:	ce 01       	movw	r24, r28
    31e0:	01 96       	adiw	r24, 0x01	; 1
    31e2:	d4 01       	movw	r26, r8
    31e4:	a8 0f       	add	r26, r24
    31e6:	b9 1f       	adc	r27, r25
    31e8:	f3 01       	movw	r30, r6
    31ea:	e0 0f       	add	r30, r16
    31ec:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    31f2:	c8 0d       	add	r28, r8
    31f4:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    31f6:	4d 91       	ld	r20, X+
    31f8:	4f 77       	andi	r20, 0x7F	; 127
    31fa:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    31fc:	2f 5f       	subi	r18, 0xFF	; 255
    31fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3200:	88 81       	ld	r24, Y
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	02 2e       	mov	r0, r18
    3206:	02 c0       	rjmp	.+4      	; 0x320c <sysex_decode+0xda>
    3208:	88 0f       	add	r24, r24
    320a:	99 1f       	adc	r25, r25
    320c:	0a 94       	dec	r0
    320e:	e2 f7       	brpl	.-8      	; 0x3208 <sysex_decode+0xd6>
    3210:	80 78       	andi	r24, 0x80	; 128
    3212:	48 2b       	or	r20, r24
    3214:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3216:	26 17       	cp	r18, r22
    3218:	37 07       	cpc	r19, r23
    321a:	68 f3       	brcs	.-38     	; 0x31f6 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    321c:	c8 01       	movw	r24, r16
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	85 0f       	add	r24, r21
    3222:	91 1d       	adc	r25, r1
    3224:	0c c0       	rjmp	.+24     	; 0x323e <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3226:	c7 01       	movw	r24, r14
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	88 0f       	add	r24, r24
    322e:	99 1f       	adc	r25, r25
    3230:	88 0f       	add	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	8e 19       	sub	r24, r14
    3236:	9f 09       	sbc	r25, r15
    3238:	02 c0       	rjmp	.+4      	; 0x323e <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    323e:	df 91       	pop	r29
    3240:	cf 91       	pop	r28
    3242:	1f 91       	pop	r17
    3244:	0f 91       	pop	r16
    3246:	ff 90       	pop	r15
    3248:	ef 90       	pop	r14
    324a:	df 90       	pop	r13
    324c:	cf 90       	pop	r12
    324e:	bf 90       	pop	r11
    3250:	af 90       	pop	r10
    3252:	9f 90       	pop	r9
    3254:	8f 90       	pop	r8
    3256:	7f 90       	pop	r7
    3258:	6f 90       	pop	r6
    325a:	08 95       	ret

0000325c <__mulsi3>:
    325c:	62 9f       	mul	r22, r18
    325e:	d0 01       	movw	r26, r0
    3260:	73 9f       	mul	r23, r19
    3262:	f0 01       	movw	r30, r0
    3264:	82 9f       	mul	r24, r18
    3266:	e0 0d       	add	r30, r0
    3268:	f1 1d       	adc	r31, r1
    326a:	64 9f       	mul	r22, r20
    326c:	e0 0d       	add	r30, r0
    326e:	f1 1d       	adc	r31, r1
    3270:	92 9f       	mul	r25, r18
    3272:	f0 0d       	add	r31, r0
    3274:	83 9f       	mul	r24, r19
    3276:	f0 0d       	add	r31, r0
    3278:	74 9f       	mul	r23, r20
    327a:	f0 0d       	add	r31, r0
    327c:	65 9f       	mul	r22, r21
    327e:	f0 0d       	add	r31, r0
    3280:	99 27       	eor	r25, r25
    3282:	72 9f       	mul	r23, r18
    3284:	b0 0d       	add	r27, r0
    3286:	e1 1d       	adc	r30, r1
    3288:	f9 1f       	adc	r31, r25
    328a:	63 9f       	mul	r22, r19
    328c:	b0 0d       	add	r27, r0
    328e:	e1 1d       	adc	r30, r1
    3290:	f9 1f       	adc	r31, r25
    3292:	bd 01       	movw	r22, r26
    3294:	cf 01       	movw	r24, r30
    3296:	11 24       	eor	r1, r1
    3298:	08 95       	ret

0000329a <__udivmodhi4>:
    329a:	aa 1b       	sub	r26, r26
    329c:	bb 1b       	sub	r27, r27
    329e:	51 e1       	ldi	r21, 0x11	; 17
    32a0:	07 c0       	rjmp	.+14     	; 0x32b0 <__udivmodhi4_ep>

000032a2 <__udivmodhi4_loop>:
    32a2:	aa 1f       	adc	r26, r26
    32a4:	bb 1f       	adc	r27, r27
    32a6:	a6 17       	cp	r26, r22
    32a8:	b7 07       	cpc	r27, r23
    32aa:	10 f0       	brcs	.+4      	; 0x32b0 <__udivmodhi4_ep>
    32ac:	a6 1b       	sub	r26, r22
    32ae:	b7 0b       	sbc	r27, r23

000032b0 <__udivmodhi4_ep>:
    32b0:	88 1f       	adc	r24, r24
    32b2:	99 1f       	adc	r25, r25
    32b4:	5a 95       	dec	r21
    32b6:	a9 f7       	brne	.-22     	; 0x32a2 <__udivmodhi4_loop>
    32b8:	80 95       	com	r24
    32ba:	90 95       	com	r25
    32bc:	bc 01       	movw	r22, r24
    32be:	cd 01       	movw	r24, r26
    32c0:	08 95       	ret

000032c2 <__divmodhi4>:
    32c2:	97 fb       	bst	r25, 7
    32c4:	09 2e       	mov	r0, r25
    32c6:	07 26       	eor	r0, r23
    32c8:	0a d0       	rcall	.+20     	; 0x32de <__divmodhi4_neg1>
    32ca:	77 fd       	sbrc	r23, 7
    32cc:	04 d0       	rcall	.+8      	; 0x32d6 <__divmodhi4_neg2>
    32ce:	e5 df       	rcall	.-54     	; 0x329a <__udivmodhi4>
    32d0:	06 d0       	rcall	.+12     	; 0x32de <__divmodhi4_neg1>
    32d2:	00 20       	and	r0, r0
    32d4:	1a f4       	brpl	.+6      	; 0x32dc <__divmodhi4_exit>

000032d6 <__divmodhi4_neg2>:
    32d6:	70 95       	com	r23
    32d8:	61 95       	neg	r22
    32da:	7f 4f       	sbci	r23, 0xFF	; 255

000032dc <__divmodhi4_exit>:
    32dc:	08 95       	ret

000032de <__divmodhi4_neg1>:
    32de:	f6 f7       	brtc	.-4      	; 0x32dc <__divmodhi4_exit>
    32e0:	90 95       	com	r25
    32e2:	81 95       	neg	r24
    32e4:	9f 4f       	sbci	r25, 0xFF	; 255
    32e6:	08 95       	ret

000032e8 <memcpy>:
    32e8:	fb 01       	movw	r30, r22
    32ea:	dc 01       	movw	r26, r24
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <memcpy+0xa>
    32ee:	01 90       	ld	r0, Z+
    32f0:	0d 92       	st	X+, r0
    32f2:	41 50       	subi	r20, 0x01	; 1
    32f4:	50 40       	sbci	r21, 0x00	; 0
    32f6:	d8 f7       	brcc	.-10     	; 0x32ee <memcpy+0x6>
    32f8:	08 95       	ret

000032fa <memmove>:
    32fa:	68 17       	cp	r22, r24
    32fc:	79 07       	cpc	r23, r25
    32fe:	68 f4       	brcc	.+26     	; 0x331a <memmove+0x20>
    3300:	fb 01       	movw	r30, r22
    3302:	dc 01       	movw	r26, r24
    3304:	e4 0f       	add	r30, r20
    3306:	f5 1f       	adc	r31, r21
    3308:	a4 0f       	add	r26, r20
    330a:	b5 1f       	adc	r27, r21
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <memmove+0x18>
    330e:	02 90       	ld	r0, -Z
    3310:	0e 92       	st	-X, r0
    3312:	41 50       	subi	r20, 0x01	; 1
    3314:	50 40       	sbci	r21, 0x00	; 0
    3316:	d8 f7       	brcc	.-10     	; 0x330e <memmove+0x14>
    3318:	08 95       	ret
    331a:	0c 94 74 19 	jmp	0x32e8	; 0x32e8 <memcpy>

0000331e <__eerd_block_m6450a>:
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22

00003322 <__eerd_blraw_m6450a>:
    3322:	fc 01       	movw	r30, r24
    3324:	f9 99       	sbic	0x1f, 1	; 31
    3326:	fe cf       	rjmp	.-4      	; 0x3324 <__eerd_blraw_m6450a+0x2>
    3328:	06 c0       	rjmp	.+12     	; 0x3336 <__eerd_blraw_m6450a+0x14>
    332a:	f2 bd       	out	0x22, r31	; 34
    332c:	e1 bd       	out	0x21, r30	; 33
    332e:	f8 9a       	sbi	0x1f, 0	; 31
    3330:	31 96       	adiw	r30, 0x01	; 1
    3332:	00 b4       	in	r0, 0x20	; 32
    3334:	0d 92       	st	X+, r0
    3336:	41 50       	subi	r20, 0x01	; 1
    3338:	50 40       	sbci	r21, 0x00	; 0
    333a:	b8 f7       	brcc	.-18     	; 0x332a <__eerd_blraw_m6450a+0x8>
    333c:	08 95       	ret

0000333e <__eerd_word_m6450a>:
    333e:	a8 e1       	ldi	r26, 0x18	; 24
    3340:	b0 e0       	ldi	r27, 0x00	; 0
    3342:	42 e0       	ldi	r20, 0x02	; 2
    3344:	50 e0       	ldi	r21, 0x00	; 0
    3346:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__eerd_blraw_m6450a>

0000334a <__eeupd_block_m6450a>:
    334a:	dc 01       	movw	r26, r24
    334c:	a4 0f       	add	r26, r20
    334e:	b5 1f       	adc	r27, r21
    3350:	41 50       	subi	r20, 0x01	; 1
    3352:	50 40       	sbci	r21, 0x00	; 0
    3354:	48 f0       	brcs	.+18     	; 0x3368 <__eeupd_block_m6450a+0x1e>
    3356:	cb 01       	movw	r24, r22
    3358:	84 0f       	add	r24, r20
    335a:	95 1f       	adc	r25, r21
    335c:	2e 91       	ld	r18, -X
    335e:	0e 94 b6 19 	call	0x336c	; 0x336c <__eeupd_r18_m6450a>
    3362:	41 50       	subi	r20, 0x01	; 1
    3364:	50 40       	sbci	r21, 0x00	; 0
    3366:	d0 f7       	brcc	.-12     	; 0x335c <__eeupd_block_m6450a+0x12>
    3368:	08 95       	ret

0000336a <__eeupd_byte_m6450a>:
    336a:	26 2f       	mov	r18, r22

0000336c <__eeupd_r18_m6450a>:
    336c:	f9 99       	sbic	0x1f, 1	; 31
    336e:	fe cf       	rjmp	.-4      	; 0x336c <__eeupd_r18_m6450a>
    3370:	92 bd       	out	0x22, r25	; 34
    3372:	81 bd       	out	0x21, r24	; 33
    3374:	f8 9a       	sbi	0x1f, 0	; 31
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	00 b4       	in	r0, 0x20	; 32
    337a:	02 16       	cp	r0, r18
    337c:	31 f0       	breq	.+12     	; 0x338a <__eeupd_r18_m6450a+0x1e>
    337e:	20 bd       	out	0x20, r18	; 32
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	fa 9a       	sbi	0x1f, 2	; 31
    3386:	f9 9a       	sbi	0x1f, 1	; 31
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	08 95       	ret

0000338c <__eeupd_word_m6450a>:
    338c:	01 96       	adiw	r24, 0x01	; 1
    338e:	27 2f       	mov	r18, r23
    3390:	0e 94 b6 19 	call	0x336c	; 0x336c <__eeupd_r18_m6450a>
    3394:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__eeupd_byte_m6450a>

00003398 <_exit>:
    3398:	f8 94       	cli

0000339a <__stop_program>:
    339a:	ff cf       	rjmp	.-2      	; 0x339a <__stop_program>
