
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d2  00800100  00002ace  00002b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ace  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f4  008002d2  008002d2  00002d54  2**0
                  ALLOC
  3 .eeprom       00000776  00810000  00810000  00002d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  000034cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00004400  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000568c  00000000  00000000  000046c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000145a  00000000  00000000  00009d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d0b  00000000  00000000  0000b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c10  00000000  00000000  0000ceb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000174c  00000000  00000000  0000dac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002d3b  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  00011f4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_9>
      28:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ee ec       	ldi	r30, 0xCE	; 206
      78:	fa e2       	ldi	r31, 0x2A	; 42
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a2 3d       	cpi	r26, 0xD2	; 210
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a2 ed       	ldi	r26, 0xD2	; 210
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a6 3c       	cpi	r26, 0xC6	; 198
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <main>
      9a:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 d2 02 	lds	r24, 0x02D2
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 d2 02 	sts	0x02D2, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 d2 02 	sts	0x02D2, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 d2 02 	sts	0x02D2, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1f6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1f8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1fa:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1fe:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     200:	8c 91       	ld	r24, X
     202:	87 70       	andi	r24, 0x07	; 7
     204:	82 b9       	out	0x02, r24	; 2
     206:	66 e0       	ldi	r22, 0x06	; 6
     208:	6a 95       	dec	r22
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x12>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     20e:	ea ed       	ldi	r30, 0xDA	; 218
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	40 81       	ld	r20, Z
     214:	8c 91       	ld	r24, X
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	86 95       	lsr	r24
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	b9 01       	movw	r22, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <set_control_voltage+0x34>
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <set_control_voltage+0x30>
     22e:	cb 01       	movw	r24, r22
     230:	84 2b       	or	r24, r20
     232:	80 83       	st	Z, r24
     234:	76 e0       	ldi	r23, 0x06	; 6
     236:	7a 95       	dec	r23
     238:	f1 f7       	brne	.-4      	; 0x236 <set_control_voltage+0x40>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     23c:	80 81       	ld	r24, Z
     23e:	9c 91       	ld	r25, X
     240:	96 95       	lsr	r25
     242:	96 95       	lsr	r25
     244:	96 95       	lsr	r25
     246:	97 70       	andi	r25, 0x07	; 7
     248:	02 c0       	rjmp	.+4      	; 0x24e <set_control_voltage+0x58>
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	9a 95       	dec	r25
     250:	e2 f7       	brpl	.-8      	; 0x24a <set_control_voltage+0x54>
     252:	20 95       	com	r18
     254:	28 23       	and	r18, r24
     256:	20 83       	st	Z, r18
	
}	
     258:	08 95       	ret

0000025a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     25a:	83 b3       	in	r24, 0x13	; 19
     25c:	83 60       	ori	r24, 0x03	; 3
     25e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     264:	97 b1       	in	r25, 0x07	; 7
     266:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     268:	e9 ed       	ldi	r30, 0xD9	; 217
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     272:	ea ed       	ldi	r30, 0xDA	; 218
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     27c:	84 b3       	in	r24, 0x14	; 20
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     282:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     284:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     286:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     288:	a0 9a       	sbi	0x14, 0	; 20
}
     28a:	08 95       	ret

0000028c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t place)
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2e 97       	sbiw	r28, 0x0e	; 14
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ac 01       	movw	r20, r24
	
	uint8_t digit[] = {
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	8a 83       	std	Y+2, r24	; 0x02
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	8b 83       	std	Y+3, r24	; 0x03
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	8c 83       	std	Y+4, r24	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2b6:	de 01       	movw	r26, r28
     2b8:	15 96       	adiw	r26, 0x05	; 5
     2ba:	e7 ee       	ldi	r30, 0xE7	; 231
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <display_dec+0x34>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2cc:	ea ed       	ldi	r30, 0xDA	; 218
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d6:	80 81       	ld	r24, Z
     2d8:	8f 7e       	andi	r24, 0xEF	; 239
     2da:	80 83       	st	Z, r24
	
	//set anode bit
	DATA_BUS = digit[place];
     2dc:	06 2f       	mov	r16, r22
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	de 01       	movw	r26, r28
     2e2:	a0 0f       	add	r26, r16
     2e4:	b1 1f       	adc	r27, r17
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	8c 91       	ld	r24, X
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	82 b9       	out	0x02, r24	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2ee:	80 81       	ld	r24, Z
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	80 83       	st	Z, r24
	//if (number > 999) {
	//number = 999;
	//}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     2fa:	ca 01       	movw	r24, r20
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	9a 01       	movw	r18, r20
     306:	36 95       	lsr	r19
     308:	27 95       	ror	r18
     30a:	28 0f       	add	r18, r24
     30c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     30e:	c9 01       	movw	r24, r18
     310:	92 95       	swap	r25
     312:	82 95       	swap	r24
     314:	8f 70       	andi	r24, 0x0F	; 15
     316:	89 27       	eor	r24, r25
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	89 27       	eor	r24, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     320:	29 2f       	mov	r18, r25
     322:	33 27       	eor	r19, r19
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
	q1 += q1 >> 16;
	q2 = q1 >> 3;
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
	r = number - q2 * 10;
     334:	28 2f       	mov	r18, r24
     336:	22 0f       	add	r18, r18
     338:	32 2f       	mov	r19, r18
     33a:	33 0f       	add	r19, r19
     33c:	33 0f       	add	r19, r19
     33e:	23 0f       	add	r18, r19
     340:	e4 2f       	mov	r30, r20
     342:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	ea 30       	cpi	r30, 0x0A	; 10
     34a:	10 f4       	brcc	.+4      	; 0x350 <display_dec+0xc4>
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	68 0f       	add	r22, r24
     352:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     354:	9b 01       	movw	r18, r22
     356:	36 95       	lsr	r19
     358:	27 95       	ror	r18
     35a:	36 95       	lsr	r19
     35c:	27 95       	ror	r18
     35e:	ab 01       	movw	r20, r22
     360:	56 95       	lsr	r21
     362:	47 95       	ror	r20
     364:	24 0f       	add	r18, r20
     366:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     368:	c9 01       	movw	r24, r18
     36a:	92 95       	swap	r25
     36c:	82 95       	swap	r24
     36e:	8f 70       	andi	r24, 0x0F	; 15
     370:	89 27       	eor	r24, r25
     372:	9f 70       	andi	r25, 0x0F	; 15
     374:	89 27       	eor	r24, r25
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     37a:	29 2f       	mov	r18, r25
     37c:	33 27       	eor	r19, r19
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
	r = qa - q3 * 10;
     38e:	98 2f       	mov	r25, r24
     390:	99 0f       	add	r25, r25
     392:	29 2f       	mov	r18, r25
     394:	22 0f       	add	r18, r18
     396:	22 0f       	add	r18, r18
     398:	92 0f       	add	r25, r18
     39a:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	6a 30       	cpi	r22, 0x0A	; 10
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <display_dec+0x118>
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3a6:	41 ef       	ldi	r20, 0xF1	; 241
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	da 01       	movw	r26, r20
     3ac:	a6 0f       	add	r26, r22
     3ae:	b1 1d       	adc	r27, r1
     3b0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3b2:	28 2f       	mov	r18, r24
     3b4:	26 95       	lsr	r18
     3b6:	26 95       	lsr	r18
     3b8:	98 2f       	mov	r25, r24
     3ba:	96 95       	lsr	r25
     3bc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3be:	29 2f       	mov	r18, r25
     3c0:	22 95       	swap	r18
     3c2:	2f 70       	andi	r18, 0x0F	; 15
     3c4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 0f       	add	r18, r18
     3d0:	62 2f       	mov	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	66 0f       	add	r22, r22
     3d6:	26 0f       	add	r18, r22
     3d8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3da:	da 01       	movw	r26, r20
     3dc:	a8 0f       	add	r26, r24
     3de:	b1 1d       	adc	r27, r1
     3e0:	2c 91       	ld	r18, X
	q1 += q1 >> 16;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3e2:	4e 0f       	add	r20, r30
     3e4:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3e6:	fa 01       	movw	r30, r20
     3e8:	40 81       	ld	r20, Z
     3ea:	40 93 d5 02 	sts	0x02D5, r20
	digit_index[1] = tens_place;
     3ee:	30 93 d6 02 	sts	0x02D6, r19
	digit_index[2] = hunds_place;
     3f2:	20 93 d7 02 	sts	0x02D7, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	8a 30       	cpi	r24, 0x0A	; 10
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <display_dec+0x172>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     400:	90 93 d8 02 	sts	0x02D8, r25

	cathode_byte = dec[digit_index[place]];
     404:	f8 01       	movw	r30, r16
     406:	eb 52       	subi	r30, 0x2B	; 43
     408:	fd 4f       	sbci	r31, 0xFD	; 253
     40a:	80 81       	ld	r24, Z
     40c:	fe 01       	movw	r30, r28
     40e:	e8 0f       	add	r30, r24
     410:	f1 1d       	adc	r31, r1
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     412:	85 81       	ldd	r24, Z+5	; 0x05
     414:	80 95       	com	r24
     416:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     418:	ea ed       	ldi	r30, 0xDA	; 218
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     422:	80 81       	ld	r24, Z
     424:	8f 7e       	andi	r24, 0xEF	; 239
     426:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     428:	2e 96       	adiw	r28, 0x0e	; 14
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret

0000043e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     43e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     440:	66 23       	and	r22, r22
     442:	69 f4       	brne	.+26     	; 0x45e <update_display+0x20>

		
			
		display_dec(number, place);
     444:	c0 91 d9 02 	lds	r28, 0x02D9
     448:	6c 2f       	mov	r22, r28
     44a:	0e 94 46 01 	call	0x28c	; 0x28c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     44e:	8c 2f       	mov	r24, r28
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	80 93 d9 02 	sts	0x02D9, r24
     456:	c3 30       	cpi	r28, 0x03	; 3
     458:	11 f4       	brne	.+4      	; 0x45e <update_display+0x20>
		{
			place = 0;
     45a:	10 92 d9 02 	sts	0x02D9, r1
		
		
	}
	
	
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	8f 93       	push	r24
     46e:	9f 93       	push	r25
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     474:	80 91 d3 03 	lds	r24, 0x03D3
     478:	81 50       	subi	r24, 0x01	; 1
     47a:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     47c:	80 91 d4 03 	lds	r24, 0x03D4
     480:	88 23       	and	r24, r24
     482:	a1 f4       	brne	.+40     	; 0x4ac <__vector_10+0x4a>
		count_finished = FALSE;
     484:	10 92 d1 03 	sts	0x03D1, r1
		no_overflow = TRUE;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 d0 02 	sts	0x02D0, r24
		period_counter = 1; //set period counter to 1
     48e:	80 93 d4 03 	sts	0x03D4, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     492:	e1 e8       	ldi	r30, 0x81	; 129
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	90 91 d2 03 	lds	r25, 0x03D2
     49c:	89 2b       	or	r24, r25
     49e:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4a0:	ef e6       	ldi	r30, 0x6F	; 111
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	81 60       	ori	r24, 0x01	; 1
     4a8:	80 83       	st	Z, r24
     4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4ac:	e4 e8       	ldi	r30, 0x84	; 132
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	90 93 d0 03 	sts	0x03D0, r25
     4b8:	80 93 cf 03 	sts	0x03CF, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4bc:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 d1 03 	sts	0x03D1, r24
		period_counter = 0;
     4c6:	10 92 d4 03 	sts	0x03D4, r1
		TCNT1 = 0; //reset timer/counter 1
     4ca:	11 82       	std	Z+1, r1	; 0x01
     4cc:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	9f 91       	pop	r25
     4d4:	8f 91       	pop	r24
     4d6:	0f 90       	pop	r0
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	0f 90       	pop	r0
     4dc:	1f 90       	pop	r1
     4de:	18 95       	reti

000004e0 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     4ea:	10 92 d0 02 	sts	0x02D0, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     4f8:	84 2f       	mov	r24, r20
	remove_note(note);
     4fa:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     4fe:	80 91 db 02 	lds	r24, 0x02DB
     502:	81 50       	subi	r24, 0x01	; 1
     504:	80 93 db 02 	sts	0x02DB, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     508:	88 23       	and	r24, r24
     50a:	09 f4       	brne	.+2      	; 0x50e <note_off_event+0x16>
     50c:	89 98       	cbi	0x11, 1	; 17
     50e:	08 95       	ret

00000510 <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     510:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     512:	40 93 1a 03 	sts	0x031A, r20
	if (velocity == 0) {
     516:	22 23       	and	r18, r18
     518:	59 f4       	brne	.+22     	; 0x530 <note_on_event+0x20>
		remove_note(note);
     51a:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     51e:	80 91 db 02 	lds	r24, 0x02DB
     522:	81 50       	subi	r24, 0x01	; 1
     524:	80 93 db 02 	sts	0x02DB, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     528:	88 23       	and	r24, r24
     52a:	59 f4       	brne	.+22     	; 0x542 <note_on_event+0x32>
     52c:	89 98       	cbi	0x11, 1	; 17
     52e:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     530:	62 2f       	mov	r22, r18
     532:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     536:	80 91 db 02 	lds	r24, 0x02DB
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 93 db 02 	sts	0x02DB, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     540:	89 9a       	sbi	0x11, 1	; 17
     542:	08 95       	ret

00000544 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     544:	87 e2       	ldi	r24, 0x27	; 39
     546:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     54a:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     54e:	88 e9       	ldi	r24, 0x98	; 152
     550:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     554:	08 95       	ret

00000556 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	3f 93       	push	r19
     564:	4f 93       	push	r20
     566:	5f 93       	push	r21
     568:	6f 93       	push	r22
     56a:	7f 93       	push	r23
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
     570:	af 93       	push	r26
     572:	bf 93       	push	r27
     574:	ef 93       	push	r30
     576:	ff 93       	push	r31
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	0f 92       	push	r0
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     582:	80 91 c6 00 	lds	r24, 0x00C6
     586:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     588:	89 ed       	ldi	r24, 0xD9	; 217
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	ae 01       	movw	r20, r28
     590:	4f 5f       	subi	r20, 0xFF	; 255
     592:	5f 4f       	sbci	r21, 0xFF	; 255
     594:	0e 94 c3 10 	call	0x2186	; 0x2186 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	ff 91       	pop	r31
     5a0:	ef 91       	pop	r30
     5a2:	bf 91       	pop	r27
     5a4:	af 91       	pop	r26
     5a6:	9f 91       	pop	r25
     5a8:	8f 91       	pop	r24
     5aa:	7f 91       	pop	r23
     5ac:	6f 91       	pop	r22
     5ae:	5f 91       	pop	r21
     5b0:	4f 91       	pop	r20
     5b2:	3f 91       	pop	r19
     5b4:	2f 91       	pop	r18
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     5c0:	c0 e8       	ldi	r28, 0x80	; 128
     5c2:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     5c4:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     5c6:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     5c8:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     5ca:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     5cc:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     5ce:	0e 94 34 05 	call	0xa68	; 0xa68 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     5d2:	a9 ed       	ldi	r26, 0xD9	; 217
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	8c 91       	ld	r24, X
     5d8:	80 6c       	ori	r24, 0xC0	; 192
     5da:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     5dc:	ea ed       	ldi	r30, 0xDA	; 218
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 6c       	ori	r24, 0xC0	; 192
     5e4:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     5e6:	81 b1       	in	r24, 0x01	; 1
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     5ec:	92 b1       	in	r25, 0x02	; 2
     5ee:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     5f0:	8c 91       	ld	r24, X
     5f2:	80 63       	ori	r24, 0x30	; 48
     5f4:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     5f6:	80 81       	ld	r24, Z
     5f8:	8f 7c       	andi	r24, 0xCF	; 207
     5fa:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     5fc:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     5fe:	ec ed       	ldi	r30, 0xDC	; 220
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	80 62       	ori	r24, 0x20	; 32
     606:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     608:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     60a:	ed ed       	ldi	r30, 0xDD	; 221
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	80 62       	ori	r24, 0x20	; 32
     612:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     614:	80 81       	ld	r24, Z
     616:	8f 7d       	andi	r24, 0xDF	; 223
     618:	80 83       	st	Z, r24
	DATA_BUS = 0;
     61a:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     61c:	c0 93 60 03 	sts	0x0360, r28
	
	//setup ADC
    setup_adc();		
     620:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     624:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     628:	c9 ed       	ldi	r28, 0xD9	; 217
     62a:	d3 e0       	ldi	r29, 0x03	; 3
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 92 10 	call	0x2124	; 0x2124 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     632:	ce 01       	movw	r24, r28
     634:	68 e8       	ldi	r22, 0x88	; 136
     636:	72 e0       	ldi	r23, 0x02	; 2
     638:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     63c:	ce 01       	movw	r24, r28
     63e:	6c e7       	ldi	r22, 0x7C	; 124
     640:	72 e0       	ldi	r23, 0x02	; 2
     642:	0e 94 5e 10 	call	0x20bc	; 0x20bc <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     646:	0e 94 a2 02 	call	0x544	; 0x544 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     64a:	0e 94 59 05 	call	0xab2	; 0xab2 <update_spi>
	
	
	
		
	sei(); //enable global interrupts
     64e:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     650:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
     654:	81 e4       	ldi	r24, 0x41	; 65
     656:	80 93 d5 03 	sts	0x03D5, r24
	current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
     65a:	82 e2       	ldi	r24, 0x22	; 34
     65c:	80 93 62 03 	sts	0x0362, r24
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     660:	8e 01       	movw	r16, r28
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     662:	0f 2e       	mov	r0, r31
     664:	f7 ed       	ldi	r31, 0xD7	; 215
     666:	ef 2e       	mov	r14, r31
     668:	f3 e0       	ldi	r31, 0x03	; 3
     66a:	ff 2e       	mov	r15, r31
     66c:	f0 2d       	mov	r31, r0
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     66e:	c8 01       	movw	r24, r16
     670:	0e 94 ed 12 	call	0x25da	; 0x25da <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     674:	80 91 3b 02 	lds	r24, 0x023B
     678:	90 91 3c 02 	lds	r25, 0x023C
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		scan_pots_and_update_control_voltages();
     682:	0e 94 c0 03 	call	0x780	; 0x780 <scan_pots_and_update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     686:	80 91 da 02 	lds	r24, 0x02DA
     68a:	98 2f       	mov	r25, r24
     68c:	9f 5f       	subi	r25, 0xFF	; 255
     68e:	90 93 da 02 	sts	0x02DA, r25
     692:	85 30       	cpi	r24, 0x05	; 5
     694:	61 f7       	brne	.-40     	; 0x66e <main+0xae>
		{
			switch_timer = 0;
     696:	10 92 da 02 	sts	0x02DA, r1
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     69a:	f7 01       	movw	r30, r14
     69c:	c0 81       	ld	r28, Z
     69e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <read_switch_port>
     6a2:	8c 27       	eor	r24, r28
     6a4:	f7 01       	movw	r30, r14
     6a6:	80 83       	st	Z, r24
			update_spi();
     6a8:	0e 94 59 05 	call	0xab2	; 0xab2 <update_spi>
			refresh_synth();
     6ac:	0e 94 ae 06 	call	0xd5c	; 0xd5c <refresh_synth>
     6b0:	de cf       	rjmp	.-68     	; 0x66e <main+0xae>

000006b2 <scan_pots>:
	&release_2_cv,
	&release_1_cv
	}; 
	
	
void scan_pots(void) {
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	c0 e0       	ldi	r28, 0x00	; 0
     6c4:	d1 e0       	ldi	r29, 0x01	; 1
     6c6:	03 e2       	ldi	r16, 0x23	; 35
     6c8:	13 e0       	ldi	r17, 0x03	; 3
     6ca:	0f 2e       	mov	r0, r31
     6cc:	fc e3       	ldi	r31, 0x3C	; 60
     6ce:	cf 2e       	mov	r12, r31
     6d0:	dd 24       	eor	r13, r13
     6d2:	f0 2d       	mov	r31, r0
     6d4:	cc 0e       	add	r12, r28
     6d6:	dd 1e       	adc	r13, r29
     6d8:	7e 01       	movw	r14, r28
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     6da:	88 81       	ld	r24, Y
     6dc:	99 81       	ldd	r25, Y+1	; 0x01
     6de:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     6e2:	90 93 1e 03 	sts	0x031E, r25
     6e6:	80 93 1d 03 	sts	0x031D, r24
		adc_change = adc_value - pot_id[i]->value;
     6ea:	e9 91       	ld	r30, Y+
     6ec:	f9 91       	ld	r31, Y+
     6ee:	40 81       	ld	r20, Z
     6f0:	21 81       	ldd	r18, Z+1	; 0x01
     6f2:	52 2f       	mov	r21, r18
     6f4:	53 70       	andi	r21, 0x03	; 3
     6f6:	84 1b       	sub	r24, r20
     6f8:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     6fa:	95 95       	asr	r25
     6fc:	87 95       	ror	r24
     6fe:	95 95       	asr	r25
     700:	87 95       	ror	r24
     702:	84 0f       	add	r24, r20
     704:	95 1f       	adc	r25, r21
     706:	80 83       	st	Z, r24
     708:	89 2f       	mov	r24, r25
     70a:	83 70       	andi	r24, 0x03	; 3
     70c:	2c 7f       	andi	r18, 0xFC	; 252
     70e:	28 2b       	or	r18, r24
     710:	21 83       	std	Z+1, r18	; 0x01
		*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     712:	d7 01       	movw	r26, r14
     714:	ed 91       	ld	r30, X+
     716:	fc 91       	ld	r31, X
     718:	11 97       	sbiw	r26, 0x01	; 1
     71a:	90 81       	ld	r25, Z
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	83 70       	andi	r24, 0x03	; 3
     720:	f8 01       	movw	r30, r16
     722:	90 83       	st	Z, r25
     724:	81 83       	std	Z+1, r24	; 0x01
     726:	0e 5f       	subi	r16, 0xFE	; 254
     728:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     72a:	cc 15       	cp	r28, r12
     72c:	dd 05       	cpc	r29, r13
     72e:	a1 f6       	brne	.-88     	; 0x6d8 <scan_pots+0x26>
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
	}

	//scan volume pot
	adc_value = read_pot(&volume_pot);
     730:	8c e7       	ldi	r24, 0x7C	; 124
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     738:	90 93 1e 03 	sts	0x031E, r25
     73c:	80 93 1d 03 	sts	0x031D, r24
	adc_change = adc_value - volume_pot.value;
     740:	20 91 7c 01 	lds	r18, 0x017C
     744:	40 91 7d 01 	lds	r20, 0x017D
     748:	34 2f       	mov	r19, r20
     74a:	33 70       	andi	r19, 0x03	; 3
     74c:	82 1b       	sub	r24, r18
     74e:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     750:	95 95       	asr	r25
     752:	87 95       	ror	r24
     754:	95 95       	asr	r25
     756:	87 95       	ror	r24
     758:	28 0f       	add	r18, r24
     75a:	39 1f       	adc	r19, r25
     75c:	20 93 7c 01 	sts	0x017C, r18
     760:	83 2f       	mov	r24, r19
     762:	83 70       	andi	r24, 0x03	; 3
     764:	4c 7f       	andi	r20, 0xFC	; 252
     766:	48 2b       	or	r20, r24
     768:	40 93 7d 01 	sts	0x017D, r20
	
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	08 95       	ret

0000077e <update_control_voltages>:

void update_control_voltages(void) {
	
	
	
}			
     77e:	08 95       	ret

00000780 <scan_pots_and_update_control_voltages>:
	
void scan_pots_and_update_control_voltages(void) {
     780:	2f 92       	push	r2
     782:	3f 92       	push	r3
     784:	4f 92       	push	r4
     786:	5f 92       	push	r5
     788:	6f 92       	push	r6
     78a:	7f 92       	push	r7
     78c:	8f 92       	push	r8
     78e:	9f 92       	push	r9
     790:	af 92       	push	r10
     792:	bf 92       	push	r11
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	value_to_display = note;	
     7a4:	0f 2e       	mov	r0, r31
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	cf 2e       	mov	r12, r31
     7aa:	f1 e0       	ldi	r31, 0x01	; 1
     7ac:	df 2e       	mov	r13, r31
     7ae:	f0 2d       	mov	r31, r0
     7b0:	0a ef       	ldi	r16, 0xFA	; 250
     7b2:	12 e0       	ldi	r17, 0x02	; 2
     7b4:	0f 2e       	mov	r0, r31
     7b6:	fb e1       	ldi	r31, 0x1B	; 27
     7b8:	ef 2e       	mov	r14, r31
     7ba:	f2 e0       	ldi	r31, 0x02	; 2
     7bc:	ff 2e       	mov	r15, r31
     7be:	f0 2d       	mov	r31, r0
	
	
	
}			
	
void scan_pots_and_update_control_voltages(void) {
     7c0:	c1 e0       	ldi	r28, 0x01	; 1
     7c2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     7c4:	0f 2e       	mov	r0, r31
     7c6:	fd ed       	ldi	r31, 0xDD	; 221
     7c8:	8f 2e       	mov	r8, r31
     7ca:	f1 e0       	ldi	r31, 0x01	; 1
     7cc:	9f 2e       	mov	r9, r31
     7ce:	f0 2d       	mov	r31, r0
				break;
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     7d0:	aa 24       	eor	r10, r10
     7d2:	bb 24       	eor	r11, r11
     7d4:	68 94       	set
     7d6:	b1 f8       	bld	r11, 1
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     7d8:	0f 2e       	mov	r0, r31
     7da:	fc ed       	ldi	r31, 0xDC	; 220
     7dc:	6f 2e       	mov	r6, r31
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	7f 2e       	mov	r7, r31
     7e2:	f0 2d       	mov	r31, r0
				//value_to_display = pot_group_0[11];
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     7e4:	0f 2e       	mov	r0, r31
     7e6:	f1 ee       	ldi	r31, 0xE1	; 225
     7e8:	4f 2e       	mov	r4, r31
     7ea:	f1 e0       	ldi	r31, 0x01	; 1
     7ec:	5f 2e       	mov	r5, r31
     7ee:	f0 2d       	mov	r31, r0
     7f0:	05 c0       	rjmp	.+10     	; 0x7fc <scan_pots_and_update_control_voltages+0x7c>
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	value_to_display = note;	
     7f2:	21 96       	adiw	r28, 0x01	; 1
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	e8 0e       	add	r14, r24
     7fa:	f9 1e       	adc	r15, r25

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{

		adc_value = read_pot(pot_id[i]);
     7fc:	f6 01       	movw	r30, r12
     7fe:	81 91       	ld	r24, Z+
     800:	91 91       	ld	r25, Z+
     802:	6f 01       	movw	r12, r30
     804:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     808:	90 93 1e 03 	sts	0x031E, r25
     80c:	80 93 1d 03 	sts	0x031D, r24
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
     810:	f8 01       	movw	r30, r16
     812:	60 81       	ld	r22, Z
     814:	71 81       	ldd	r23, Z+1	; 0x01
     816:	86 1b       	sub	r24, r22
     818:	97 0b       	sbc	r25, r23
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
     81a:	95 95       	asr	r25
     81c:	87 95       	ror	r24
     81e:	95 95       	asr	r25
     820:	87 95       	ror	r24
     822:	9c 01       	movw	r18, r24
     824:	26 0f       	add	r18, r22
     826:	37 1f       	adc	r19, r23
     828:	21 93       	st	Z+, r18
     82a:	31 93       	st	Z+, r19
     82c:	8f 01       	movw	r16, r30
	
	
	
}			
	
void scan_pots_and_update_control_voltages(void) {
     82e:	ce 01       	movw	r24, r28
     830:	01 97       	sbiw	r24, 0x01	; 1
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
		int fine_offset = 0;
		
		switch (i)
     832:	88 30       	cpi	r24, 0x08	; 8
     834:	91 05       	cpc	r25, r1
     836:	71 f0       	breq	.+28     	; 0x854 <scan_pots_and_update_control_voltages+0xd4>
     838:	89 30       	cpi	r24, 0x09	; 9
     83a:	91 05       	cpc	r25, r1
     83c:	24 f4       	brge	.+8      	; 0x846 <scan_pots_and_update_control_voltages+0xc6>
     83e:	84 30       	cpi	r24, 0x04	; 4
     840:	91 05       	cpc	r25, r1
     842:	b1 f5       	brne	.+108    	; 0x8b0 <scan_pots_and_update_control_voltages+0x130>
     844:	2a c0       	rjmp	.+84     	; 0x89a <scan_pots_and_update_control_voltages+0x11a>
     846:	89 30       	cpi	r24, 0x09	; 9
     848:	91 05       	cpc	r25, r1
     84a:	b1 f0       	breq	.+44     	; 0x878 <scan_pots_and_update_control_voltages+0xf8>
     84c:	8b 30       	cpi	r24, 0x0B	; 11
     84e:	91 05       	cpc	r25, r1
     850:	79 f5       	brne	.+94     	; 0x8b0 <scan_pots_and_update_control_voltages+0x130>
     852:	3a c0       	rjmp	.+116    	; 0x8c8 <scan_pots_and_update_control_voltages+0x148>
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
     854:	60 91 ca 03 	lds	r22, 0x03CA
     858:	70 91 cb 03 	lds	r23, 0x03CB
     85c:	60 50       	subi	r22, 0x00	; 0
     85e:	7e 4f       	sbci	r23, 0xFE	; 254
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     860:	80 91 1b 03 	lds	r24, 0x031B
     864:	90 91 1c 03 	lds	r25, 0x031C
     868:	68 0f       	add	r22, r24
     86a:	79 1f       	adc	r23, r25
     86c:	62 1b       	sub	r22, r18
     86e:	73 0b       	sbc	r23, r19
     870:	c4 01       	movw	r24, r8
     872:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				break;
     876:	bd cf       	rjmp	.-134    	; 0x7f2 <scan_pots_and_update_control_voltages+0x72>
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     878:	b5 01       	movw	r22, r10
     87a:	62 1b       	sub	r22, r18
     87c:	73 0b       	sbc	r23, r19
     87e:	70 93 1c 03 	sts	0x031C, r23
     882:	60 93 1b 03 	sts	0x031B, r22
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     886:	80 91 cc 03 	lds	r24, 0x03CC
     88a:	90 91 cd 03 	lds	r25, 0x03CD
     88e:	68 0f       	add	r22, r24
     890:	79 1f       	adc	r23, r25
     892:	c3 01       	movw	r24, r6
     894:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				break;
     898:	ac cf       	rjmp	.-168    	; 0x7f2 <scan_pots_and_update_control_voltages+0x72>
				//value_to_display = pot_group_0[11];
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     89a:	b9 01       	movw	r22, r18
     89c:	66 0f       	add	r22, r22
     89e:	77 1f       	adc	r23, r23
     8a0:	66 0f       	add	r22, r22
     8a2:	77 1f       	adc	r23, r23
     8a4:	66 0f       	add	r22, r22
     8a6:	77 1f       	adc	r23, r23
     8a8:	c2 01       	movw	r24, r4
     8aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				break;
     8ae:	a1 cf       	rjmp	.-190    	; 0x7f2 <scan_pots_and_update_control_voltages+0x72>
			
			default: //set control voltage full-scale
				set_control_voltage(pot_decoder_0[i], pot_group_0[i] << 4);
     8b0:	b9 01       	movw	r22, r18
     8b2:	62 95       	swap	r22
     8b4:	72 95       	swap	r23
     8b6:	70 7f       	andi	r23, 0xF0	; 240
     8b8:	76 27       	eor	r23, r22
     8ba:	60 7f       	andi	r22, 0xF0	; 240
     8bc:	76 27       	eor	r23, r22
     8be:	f7 01       	movw	r30, r14
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}			
	
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     8c8:	c0 31       	cpi	r28, 0x10	; 16
     8ca:	d1 05       	cpc	r29, r1
     8cc:	0c f4       	brge	.+2      	; 0x8d0 <scan_pots_and_update_control_voltages+0x150>
     8ce:	91 cf       	rjmp	.-222    	; 0x7f2 <scan_pots_and_update_control_voltages+0x72>
			
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
     8d0:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     8d4:	a8 2e       	mov	r10, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     8d6:	f7 e0       	ldi	r31, 0x07	; 7
     8d8:	f8 17       	cp	r31, r24
     8da:	18 f0       	brcs	.+6      	; 0x8e2 <scan_pots_and_update_control_voltages+0x162>
     8dc:	aa 24       	eor	r10, r10
     8de:	68 94       	set
     8e0:	a3 f8       	bld	r10, 3
	value_to_display = note;	
     8e2:	8a 2d       	mov	r24, r10
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	90 93 3c 02 	sts	0x023C, r25
     8ea:	80 93 3b 02 	sts	0x023B, r24
     8ee:	0f 2e       	mov	r0, r31
     8f0:	f0 e2       	ldi	r31, 0x20	; 32
     8f2:	cf 2e       	mov	r12, r31
     8f4:	f1 e0       	ldi	r31, 0x01	; 1
     8f6:	df 2e       	mov	r13, r31
     8f8:	f0 2d       	mov	r31, r0
     8fa:	0c ed       	ldi	r16, 0xDC	; 220
     8fc:	12 e0       	ldi	r17, 0x02	; 2
     8fe:	0f 2e       	mov	r0, r31
     900:	fd ef       	ldi	r31, 0xFD	; 253
     902:	ef 2e       	mov	r14, r31
     904:	f1 e0       	ldi	r31, 0x01	; 1
     906:	ff 2e       	mov	r15, r31
     908:	f0 2d       	mov	r31, r0
     90a:	c1 e0       	ldi	r28, 0x01	; 1
     90c:	d0 e0       	ldi	r29, 0x00	; 0
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
		
		switch(i) 
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     90e:	0f 2e       	mov	r0, r31
     910:	f8 ef       	ldi	r31, 0xF8	; 248
     912:	bf 2e       	mov	r11, r31
     914:	f0 2d       	mov	r31, r0
     916:	ba 0c       	add	r11, r10
     918:	0f 2e       	mov	r0, r31
     91a:	f6 e6       	ldi	r31, 0x66	; 102
     91c:	6f 2e       	mov	r6, r31
     91e:	f3 e0       	ldi	r31, 0x03	; 3
     920:	7f 2e       	mov	r7, r31
     922:	f0 2d       	mov	r31, r0
				uint16_t key_track_byte = (pot_group_1[3]); //
     924:	0f 2e       	mov	r0, r31
     926:	f2 ee       	ldi	r31, 0xE2	; 226
     928:	8f 2e       	mov	r8, r31
     92a:	f2 e0       	ldi	r31, 0x02	; 2
     92c:	9f 2e       	mov	r9, r31
     92e:	f0 2d       	mov	r31, r0
				//if (key_track_byte > 1020) key_track_byte = 1024;			 
				uint16_t divided_pitch_cv = ((uint32_t)key_track_byte*interpolated_pitch_cv) >> 10; //note that product of key_track_byte and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly

				//value_to_display = divided_pitch_cv;
							
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     930:	0f 2e       	mov	r0, r31
     932:	fe ef       	ldi	r31, 0xFE	; 254
     934:	4f 2e       	mov	r4, r31
     936:	ff ef       	ldi	r31, 0xFF	; 255
     938:	5f 2e       	mov	r5, r31
     93a:	f0 2d       	mov	r31, r0
     93c:	48 0c       	add	r4, r8
     93e:	59 1c       	adc	r5, r9
				if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
				set_control_voltage(&cutoff_cv, filter_cutoff_cv);
     940:	0f 2e       	mov	r0, r31
     942:	f4 ed       	ldi	r31, 0xD4	; 212
     944:	2f 2e       	mov	r2, r31
     946:	f1 e0       	ldi	r31, 0x01	; 1
     948:	3f 2e       	mov	r3, r31
     94a:	f0 2d       	mov	r31, r0
     94c:	05 c0       	rjmp	.+10     	; 0x958 <scan_pots_and_update_control_voltages+0x1d8>
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	value_to_display = note;	
     94e:	21 96       	adiw	r28, 0x01	; 1
     950:	82 e0       	ldi	r24, 0x02	; 2
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	e8 0e       	add	r14, r24
     956:	f9 1e       	adc	r15, r25
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(pot_id[i+16]);
     958:	f6 01       	movw	r30, r12
     95a:	81 91       	ld	r24, Z+
     95c:	91 91       	ld	r25, Z+
     95e:	6f 01       	movw	r12, r30
     960:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     964:	90 93 1e 03 	sts	0x031E, r25
     968:	80 93 1d 03 	sts	0x031D, r24
		int adc_change = adc_value - pot_group_1[i];
     96c:	f8 01       	movw	r30, r16
     96e:	20 81       	ld	r18, Z
     970:	31 81       	ldd	r19, Z+1	; 0x01
     972:	82 1b       	sub	r24, r18
     974:	93 0b       	sbc	r25, r19
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
     976:	95 95       	asr	r25
     978:	87 95       	ror	r24
     97a:	95 95       	asr	r25
     97c:	87 95       	ror	r24
     97e:	82 0f       	add	r24, r18
     980:	93 1f       	adc	r25, r19
     982:	81 93       	st	Z+, r24
     984:	91 93       	st	Z+, r25
     986:	8f 01       	movw	r16, r30
		
		switch(i) 
     988:	c3 30       	cpi	r28, 0x03	; 3
     98a:	d1 05       	cpc	r29, r1
     98c:	71 f5       	brne	.+92     	; 0x9ea <scan_pots_and_update_control_voltages+0x26a>
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     98e:	8b 2d       	mov	r24, r11
     990:	b3 01       	movw	r22, r6
     992:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <interpolate_pitch_cv>
				uint16_t key_track_byte = (pot_group_1[3]); //
				//if (key_track_byte > 1020) key_track_byte = 1024;			 
				uint16_t divided_pitch_cv = ((uint32_t)key_track_byte*interpolated_pitch_cv) >> 10; //note that product of key_track_byte and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
     996:	bc 01       	movw	r22, r24
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	f4 01       	movw	r30, r8
     99e:	20 81       	ld	r18, Z
     9a0:	31 81       	ldd	r19, Z+1	; 0x01
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	0e 94 c7 14 	call	0x298e	; 0x298e <__mulsi3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	07 2e       	mov	r0, r23
     9b0:	7a e0       	ldi	r23, 0x0A	; 10
     9b2:	b6 95       	lsr	r27
     9b4:	a7 95       	ror	r26
     9b6:	97 95       	ror	r25
     9b8:	87 95       	ror	r24
     9ba:	7a 95       	dec	r23
     9bc:	d1 f7       	brne	.-12     	; 0x9b2 <scan_pots_and_update_control_voltages+0x232>
     9be:	70 2d       	mov	r23, r0

				//value_to_display = divided_pitch_cv;
							
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     9c0:	f2 01       	movw	r30, r4
     9c2:	60 81       	ld	r22, Z
     9c4:	71 81       	ldd	r23, Z+1	; 0x01
     9c6:	62 95       	swap	r22
     9c8:	72 95       	swap	r23
     9ca:	70 7f       	andi	r23, 0xF0	; 240
     9cc:	76 27       	eor	r23, r22
     9ce:	60 7f       	andi	r22, 0xF0	; 240
     9d0:	76 27       	eor	r23, r22
     9d2:	68 0f       	add	r22, r24
     9d4:	79 1f       	adc	r23, r25
				if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
				set_control_voltage(&cutoff_cv, filter_cutoff_cv);
     9d6:	f0 e4       	ldi	r31, 0x40	; 64
     9d8:	60 30       	cpi	r22, 0x00	; 0
     9da:	7f 07       	cpc	r23, r31
     9dc:	10 f0       	brcs	.+4      	; 0x9e2 <scan_pots_and_update_control_voltages+0x262>
     9de:	6f ef       	ldi	r22, 0xFF	; 255
     9e0:	7f e3       	ldi	r23, 0x3F	; 63
     9e2:	c1 01       	movw	r24, r2
     9e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
     9e8:	b2 cf       	rjmp	.-156    	; 0x94e <scan_pots_and_update_control_voltages+0x1ce>
				//value_to_display = filter_cutoff_cv;
				break;
			
			default:
				set_control_voltage(pot_decoder_1[i], pot_group_1[i] <<4);
     9ea:	bc 01       	movw	r22, r24
     9ec:	62 95       	swap	r22
     9ee:	72 95       	swap	r23
     9f0:	70 7f       	andi	r23, 0xF0	; 240
     9f2:	76 27       	eor	r23, r22
     9f4:	60 7f       	andi	r22, 0xF0	; 240
     9f6:	76 27       	eor	r23, r22
     9f8:	f7 01       	movw	r30, r14
     9fa:	80 81       	ld	r24, Z
     9fc:	91 81       	ldd	r25, Z+1	; 0x01
     9fe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	value_to_display = note;	
	
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     a02:	cf 30       	cpi	r28, 0x0F	; 15
     a04:	d1 05       	cpc	r29, r1
     a06:	0c f4       	brge	.+2      	; 0xa0a <scan_pots_and_update_control_voltages+0x28a>
     a08:	a2 cf       	rjmp	.-188    	; 0x94e <scan_pots_and_update_control_voltages+0x1ce>
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose 
     a0a:	8a 2d       	mov	r24, r10
     a0c:	6f e0       	ldi	r22, 0x0F	; 15
     a0e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     a12:	68 ea       	ldi	r22, 0xA8	; 168
     a14:	73 e0       	ldi	r23, 0x03	; 3
     a16:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <interpolate_pitch_cv>
     a1a:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     a1c:	86 ee       	ldi	r24, 0xE6	; 230
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     a24:	8a 2d       	mov	r24, r10
     a26:	60 ef       	ldi	r22, 0xF0	; 240
     a28:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     a2c:	66 e8       	ldi	r22, 0x86	; 134
     a2e:	73 e0       	ldi	r23, 0x03	; 3
     a30:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <interpolate_pitch_cv>
     a34:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv); 
     a36:	85 ee       	ldi	r24, 0xE5	; 229
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     a3e:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     a40:	a1 9a       	sbi	0x14, 1	; 20
	
	
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	9f 90       	pop	r9
     a58:	8f 90       	pop	r8
     a5a:	7f 90       	pop	r7
     a5c:	6f 90       	pop	r6
     a5e:	5f 90       	pop	r5
     a60:	4f 90       	pop	r4
     a62:	3f 90       	pop	r3
     a64:	2f 90       	pop	r2
     a66:	08 95       	ret

00000a68 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     a68:	84 b1       	in	r24, 0x04	; 4
     a6a:	87 62       	ori	r24, 0x27	; 39
     a6c:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     a6e:	ec ed       	ldi	r30, 0xDC	; 220
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	8c 65       	ori	r24, 0x5C	; 92
     a76:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     a78:	85 b1       	in	r24, 0x05	; 5
     a7a:	89 7d       	andi	r24, 0xD9	; 217
     a7c:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     a7e:	ed ed       	ldi	r30, 0xDD	; 221
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	83 7f       	andi	r24, 0xF3	; 243
     a86:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     a88:	80 e5       	ldi	r24, 0x50	; 80
     a8a:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     a8c:	80 81       	ld	r24, Z
     a8e:	87 7f       	andi	r24, 0xF7	; 247
     a90:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     a92:	80 81       	ld	r24, Z
     a94:	87 7f       	andi	r24, 0xF7	; 247
     a96:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     a98:	80 81       	ld	r24, Z
     a9a:	88 60       	ori	r24, 0x08	; 8
     a9c:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     a9e:	80 81       	ld	r24, Z
     aa0:	8f 7e       	andi	r24, 0xEF	; 239
     aa2:	80 83       	st	Z, r24
	
}
     aa4:	08 95       	ret

00000aa6 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     aa6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     aa8:	0d b4       	in	r0, 0x2d	; 45
     aaa:	07 fe       	sbrs	r0, 7
     aac:	fd cf       	rjmp	.-6      	; 0xaa8 <spi_shift_byte+0x2>
	return SPDR;
     aae:	8e b5       	in	r24, 0x2e	; 46
	
}
     ab0:	08 95       	ret

00000ab2 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     ab2:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     ab4:	80 91 63 03 	lds	r24, 0x0363
     ab8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     abc:	90 91 20 03 	lds	r25, 0x0320
     ac0:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     ac2:	98 27       	eor	r25, r24
     ac4:	90 93 20 03 	sts	0x0320, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     ac8:	98 23       	and	r25, r24
     aca:	90 93 1f 03 	sts	0x031F, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     ace:	80 91 d5 03 	lds	r24, 0x03D5
     ad2:	98 27       	eor	r25, r24
     ad4:	90 93 d5 03 	sts	0x03D5, r25
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     ad8:	80 91 62 03 	lds	r24, 0x0362
     adc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     ae0:	90 91 22 03 	lds	r25, 0x0322
     ae4:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     ae6:	98 27       	eor	r25, r24
     ae8:	90 93 22 03 	sts	0x0322, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     aec:	98 23       	and	r25, r24
     aee:	90 93 21 03 	sts	0x0321, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     af2:	80 91 d6 03 	lds	r24, 0x03D6
     af6:	98 27       	eor	r25, r24
     af8:	90 93 d6 03 	sts	0x03D6, r25
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     afc:	80 91 61 03 	lds	r24, 0x0361
     b00:	0e 94 53 05 	call	0xaa6	; 0xaa6 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     b04:	80 91 60 03 	lds	r24, 0x0360
     b08:	0e 94 53 05 	call	0xaa6	; 0xaa6 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     b0c:	90 91 d7 03 	lds	r25, 0x03D7
     b10:	29 2f       	mov	r18, r25
     b12:	22 95       	swap	r18
     b14:	2f 70       	andi	r18, 0x0F	; 15
     b16:	27 95       	ror	r18
     b18:	22 27       	eor	r18, r18
     b1a:	27 95       	ror	r18

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     b1c:	89 2f       	mov	r24, r25
     b1e:	86 95       	lsr	r24
     b20:	86 95       	lsr	r24
     b22:	86 95       	lsr	r24
     b24:	81 70       	andi	r24, 0x01	; 1
     b26:	82 2b       	or	r24, r18
     b28:	40 91 d6 03 	lds	r20, 0x03D6
     b2c:	42 95       	swap	r20
     b2e:	46 95       	lsr	r20
     b30:	47 70       	andi	r20, 0x07	; 7
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	41 70       	andi	r20, 0x01	; 1
     b36:	50 70       	andi	r21, 0x00	; 0
     b38:	9a 01       	movw	r18, r20
     b3a:	22 0f       	add	r18, r18
     b3c:	33 1f       	adc	r19, r19
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	28 2b       	or	r18, r24
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     b44:	99 1f       	adc	r25, r25
     b46:	99 27       	eor	r25, r25
     b48:	99 1f       	adc	r25, r25
     b4a:	89 2f       	mov	r24, r25
     b4c:	82 95       	swap	r24
     b4e:	88 0f       	add	r24, r24
     b50:	88 0f       	add	r24, r24
     b52:	80 7c       	andi	r24, 0xC0	; 192
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     b54:	82 2b       	or	r24, r18
     b56:	0e 94 53 05 	call	0xaa6	; 0xaa6 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     b5a:	ed ed       	ldi	r30, 0xDD	; 221
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	87 7f       	andi	r24, 0xF7	; 247
     b62:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     b6a:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     b6c:	08 95       	ret

00000b6e <save_patch>:
	};
	
	
void save_patch(uint8_t patch_number) {

	eeprom_update_block((const void*)&current_patch, (void*)&patch_memory[patch_number], sizeof(current_patch));
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	2b e2       	ldi	r18, 0x2B	; 43
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	82 9f       	mul	r24, r18
     b76:	b0 01       	movw	r22, r0
     b78:	83 9f       	mul	r24, r19
     b7a:	70 0d       	add	r23, r0
     b7c:	92 9f       	mul	r25, r18
     b7e:	70 0d       	add	r23, r0
     b80:	11 24       	eor	r1, r1
     b82:	60 50       	subi	r22, 0x00	; 0
     b84:	70 40       	sbci	r23, 0x00	; 0
     b86:	83 e2       	ldi	r24, 0x23	; 35
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	41 e4       	ldi	r20, 0x41	; 65
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__eeupd_block_m6450a>
}	
     b92:	08 95       	ret

00000b94 <set_memory_mode>:
	
	
void set_memory_mode() { //run this every time new patch is loaded to lock pots and store locked values
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b1 e0       	ldi	r27, 0x01	; 1
     b98:	9d 01       	movw	r18, r26
     b9a:	24 5c       	subi	r18, 0xC4	; 196
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     b9e:	ed 91       	ld	r30, X+
     ba0:	fc 91       	ld	r31, X
     ba2:	11 97       	sbiw	r26, 0x01	; 1
     ba4:	80 81       	ld	r24, Z
     ba6:	41 81       	ldd	r20, Z+1	; 0x01
     ba8:	94 2f       	mov	r25, r20
     baa:	93 70       	andi	r25, 0x03	; 3
     bac:	95 95       	asr	r25
     bae:	87 95       	ror	r24
     bb0:	95 95       	asr	r25
     bb2:	87 95       	ror	r24
     bb4:	82 83       	std	Z+2, r24	; 0x02
		pot_id[i]->locked = 1; 
     bb6:	ed 91       	ld	r30, X+
     bb8:	fd 91       	ld	r31, X+
     bba:	83 81       	ldd	r24, Z+3	; 0x03
     bbc:	80 68       	ori	r24, 0x80	; 128
     bbe:	83 83       	std	Z+3, r24	; 0x03
}	
	
	
void set_memory_mode() { //run this every time new patch is loaded to lock pots and store locked values
	
	for (int i = 0; i <= 29; i++) {
     bc0:	a2 17       	cp	r26, r18
     bc2:	b3 07       	cpc	r27, r19
     bc4:	61 f7       	brne	.-40     	; 0xb9e <set_memory_mode+0xa>
		pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
		pot_id[i]->locked = 1; 
		
	}
	
}	
     bc6:	08 95       	ret

00000bc8 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
     bc8:	90 91 64 03 	lds	r25, 0x0364
     bcc:	97 70       	andi	r25, 0x07	; 7
	if (vco == VCO2) n = octave_index.vco2;
     bce:	60 3f       	cpi	r22, 0xF0	; 240
     bd0:	31 f4       	brne	.+12     	; 0xbde <transpose_note+0x16>
     bd2:	90 91 64 03 	lds	r25, 0x0364
     bd6:	96 95       	lsr	r25
     bd8:	96 95       	lsr	r25
     bda:	96 95       	lsr	r25
     bdc:	97 70       	andi	r25, 0x07	; 7

	note = (n*12) + note; //calculate MIDI note after octave addition
     bde:	29 2f       	mov	r18, r25
     be0:	22 0f       	add	r18, r18
     be2:	92 0f       	add	r25, r18
     be4:	99 0f       	add	r25, r25
     be6:	99 0f       	add	r25, r25
     be8:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
     bea:	89 38       	cpi	r24, 0x89	; 137
     bec:	08 f0       	brcs	.+2      	; 0xbf0 <transpose_note+0x28>
     bee:	88 e8       	ldi	r24, 0x88	; 136
	
}
     bf0:	08 95       	ret

00000bf2 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
     bf2:	80 91 d5 03 	lds	r24, 0x03D5
     bf6:	98 2f       	mov	r25, r24
     bf8:	96 95       	lsr	r25
     bfa:	96 95       	lsr	r25
     bfc:	96 95       	lsr	r25
     bfe:	90 ff       	sbrs	r25, 0
     c00:	14 c0       	rjmp	.+40     	; 0xc2a <update_octave_range+0x38>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
     c02:	20 91 64 03 	lds	r18, 0x0364
     c06:	92 2f       	mov	r25, r18
     c08:	9f 5f       	subi	r25, 0xFF	; 255
     c0a:	97 70       	andi	r25, 0x07	; 7
     c0c:	28 7f       	andi	r18, 0xF8	; 248
     c0e:	29 2b       	or	r18, r25
     c10:	20 93 64 03 	sts	0x0364, r18
     c14:	95 30       	cpi	r25, 0x05	; 5
     c16:	29 f4       	brne	.+10     	; 0xc22 <update_octave_range+0x30>
     c18:	92 2f       	mov	r25, r18
     c1a:	98 7f       	andi	r25, 0xF8	; 248
     c1c:	94 60       	ori	r25, 0x04	; 4
     c1e:	90 93 64 03 	sts	0x0364, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
     c22:	98 e0       	ldi	r25, 0x08	; 8
     c24:	89 27       	eor	r24, r25
     c26:	80 93 d5 03 	sts	0x03D5, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
     c2a:	80 91 d6 03 	lds	r24, 0x03D6
     c2e:	98 2f       	mov	r25, r24
     c30:	96 95       	lsr	r25
     c32:	96 95       	lsr	r25
     c34:	96 95       	lsr	r25
     c36:	90 ff       	sbrs	r25, 0
     c38:	11 c0       	rjmp	.+34     	; 0xc5c <update_octave_range+0x6a>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
     c3a:	90 91 64 03 	lds	r25, 0x0364
     c3e:	97 70       	andi	r25, 0x07	; 7
     c40:	49 f0       	breq	.+18     	; 0xc54 <update_octave_range+0x62>
     c42:	90 91 64 03 	lds	r25, 0x0364
     c46:	29 2f       	mov	r18, r25
     c48:	29 5f       	subi	r18, 0xF9	; 249
     c4a:	27 70       	andi	r18, 0x07	; 7
     c4c:	98 7f       	andi	r25, 0xF8	; 248
     c4e:	92 2b       	or	r25, r18
     c50:	90 93 64 03 	sts	0x0364, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
     c54:	98 e0       	ldi	r25, 0x08	; 8
     c56:	89 27       	eor	r24, r25
     c58:	80 93 d6 03 	sts	0x03D6, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
     c5c:	80 91 64 03 	lds	r24, 0x0364
     c60:	87 70       	andi	r24, 0x07	; 7
     c62:	e7 e4       	ldi	r30, 0x47	; 71
     c64:	f2 e0       	ldi	r31, 0x02	; 2
     c66:	e8 0f       	add	r30, r24
     c68:	f1 1d       	adc	r31, r1
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	00 80       	ld	r0, Z
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <update_octave_range+0x84>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <update_octave_range+0x80>
     c7a:	58 2f       	mov	r21, r24
     c7c:	80 93 62 03 	sts	0x0362, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
     c80:	90 91 d6 03 	lds	r25, 0x03D6
     c84:	29 2f       	mov	r18, r25
     c86:	26 95       	lsr	r18
     c88:	26 95       	lsr	r18
     c8a:	20 ff       	sbrs	r18, 0
     c8c:	1a c0       	rjmp	.+52     	; 0xcc2 <update_octave_range+0xd0>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
     c8e:	80 91 64 03 	lds	r24, 0x0364
     c92:	28 2f       	mov	r18, r24
     c94:	26 95       	lsr	r18
     c96:	26 95       	lsr	r18
     c98:	26 95       	lsr	r18
     c9a:	2f 5f       	subi	r18, 0xFF	; 255
     c9c:	27 70       	andi	r18, 0x07	; 7
     c9e:	32 2f       	mov	r19, r18
     ca0:	33 0f       	add	r19, r19
     ca2:	33 0f       	add	r19, r19
     ca4:	33 0f       	add	r19, r19
     ca6:	87 7c       	andi	r24, 0xC7	; 199
     ca8:	83 2b       	or	r24, r19
     caa:	80 93 64 03 	sts	0x0364, r24
     cae:	25 30       	cpi	r18, 0x05	; 5
     cb0:	21 f4       	brne	.+8      	; 0xcba <update_octave_range+0xc8>
     cb2:	87 7c       	andi	r24, 0xC7	; 199
     cb4:	80 62       	ori	r24, 0x20	; 32
     cb6:	80 93 64 03 	sts	0x0364, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	98 27       	eor	r25, r24
     cbe:	90 93 d6 03 	sts	0x03D6, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
     cc2:	90 91 d6 03 	lds	r25, 0x03D6
     cc6:	29 2f       	mov	r18, r25
     cc8:	26 95       	lsr	r18
     cca:	20 ff       	sbrs	r18, 0
     ccc:	17 c0       	rjmp	.+46     	; 0xcfc <update_octave_range+0x10a>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
     cce:	80 91 64 03 	lds	r24, 0x0364
     cd2:	88 73       	andi	r24, 0x38	; 56
     cd4:	79 f0       	breq	.+30     	; 0xcf4 <update_octave_range+0x102>
     cd6:	80 91 64 03 	lds	r24, 0x0364
     cda:	28 2f       	mov	r18, r24
     cdc:	26 95       	lsr	r18
     cde:	26 95       	lsr	r18
     ce0:	26 95       	lsr	r18
     ce2:	29 5f       	subi	r18, 0xF9	; 249
     ce4:	27 70       	andi	r18, 0x07	; 7
     ce6:	22 0f       	add	r18, r18
     ce8:	22 0f       	add	r18, r18
     cea:	22 0f       	add	r18, r18
     cec:	87 7c       	andi	r24, 0xC7	; 199
     cee:	82 2b       	or	r24, r18
     cf0:	80 93 64 03 	sts	0x0364, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	98 27       	eor	r25, r24
     cf8:	90 93 d6 03 	sts	0x03D6, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
     cfc:	40 91 61 03 	lds	r20, 0x0361
     d00:	4c 7f       	andi	r20, 0xFC	; 252
     d02:	40 93 61 03 	sts	0x0361, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
     d06:	90 91 64 03 	lds	r25, 0x0364
     d0a:	96 95       	lsr	r25
     d0c:	96 95       	lsr	r25
     d0e:	96 95       	lsr	r25
     d10:	97 70       	andi	r25, 0x07	; 7
     d12:	89 2f       	mov	r24, r25
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	91 05       	cpc	r25, r1
     d1a:	84 f0       	brlt	.+32     	; 0xd3c <update_octave_range+0x14a>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
     d1c:	fc 01       	movw	r30, r24
     d1e:	ee 5b       	subi	r30, 0xBE	; 190
     d20:	fd 4f       	sbci	r31, 0xFD	; 253
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	c9 01       	movw	r24, r18
     d28:	00 80       	ld	r0, Z
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <update_octave_range+0x13e>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <update_octave_range+0x13a>
     d34:	84 2b       	or	r24, r20
     d36:	80 93 61 03 	sts	0x0361, r24
     d3a:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
     d3c:	fc 01       	movw	r30, r24
     d3e:	ee 5b       	subi	r30, 0xBE	; 190
     d40:	fd 4f       	sbci	r31, 0xFD	; 253
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	c9 01       	movw	r24, r18
     d48:	00 80       	ld	r0, Z
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <update_octave_range+0x15e>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <update_octave_range+0x15a>
     d54:	85 2b       	or	r24, r21
     d56:	80 93 62 03 	sts	0x0362, r24
     d5a:	08 95       	ret

00000d5c <refresh_synth>:
	}	
	
}
	
	
void refresh_synth(void) {
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     d60:	90 91 d5 03 	lds	r25, 0x03D5
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
     d64:	80 91 d7 03 	lds	r24, 0x03D7
     d68:	86 95       	lsr	r24
     d6a:	86 95       	lsr	r24
     d6c:	68 2f       	mov	r22, r24
     d6e:	67 95       	ror	r22
     d70:	66 27       	eor	r22, r22
     d72:	67 95       	ror	r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     d74:	29 2f       	mov	r18, r25
     d76:	21 70       	andi	r18, 0x01	; 1
     d78:	26 2b       	or	r18, r22
     d7a:	69 2f       	mov	r22, r25
     d7c:	66 1f       	adc	r22, r22
     d7e:	66 27       	eor	r22, r22
     d80:	66 1f       	adc	r22, r22
     d82:	66 0f       	add	r22, r22
     d84:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
     d86:	c9 2f       	mov	r28, r25
     d88:	c6 95       	lsr	r28
     d8a:	c6 95       	lsr	r28
     d8c:	d0 e0       	ldi	r29, 0x00	; 0
     d8e:	c1 70       	andi	r28, 0x01	; 1
     d90:	d0 70       	andi	r29, 0x00	; 0
     d92:	de 01       	movw	r26, r28
     d94:	aa 0f       	add	r26, r26
     d96:	bb 1f       	adc	r27, r27
     d98:	aa 0f       	add	r26, r26
     d9a:	bb 1f       	adc	r27, r27
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     d9c:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
     d9e:	a9 2f       	mov	r26, r25
     da0:	a6 95       	lsr	r26
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	a1 70       	andi	r26, 0x01	; 1
     da6:	b0 70       	andi	r27, 0x00	; 0
     da8:	fd 01       	movw	r30, r26
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     db6:	a6 2f       	mov	r26, r22
     db8:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
     dba:	e9 2f       	mov	r30, r25
     dbc:	e2 95       	swap	r30
     dbe:	ef 70       	andi	r30, 0x0F	; 15
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	e1 70       	andi	r30, 0x01	; 1
     dc4:	f0 70       	andi	r31, 0x00	; 0
     dc6:	bf 01       	movw	r22, r30
     dc8:	62 95       	swap	r22
     dca:	72 95       	swap	r23
     dcc:	70 7f       	andi	r23, 0xF0	; 240
     dce:	76 27       	eor	r23, r22
     dd0:	60 7f       	andi	r22, 0xF0	; 240
     dd2:	76 27       	eor	r23, r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     dd4:	ea 2f       	mov	r30, r26
     dd6:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
     dd8:	69 2f       	mov	r22, r25
     dda:	62 95       	swap	r22
     ddc:	66 95       	lsr	r22
     dde:	67 70       	andi	r22, 0x07	; 7
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	61 70       	andi	r22, 0x01	; 1
     de4:	70 70       	andi	r23, 0x00	; 0
     de6:	ab 01       	movw	r20, r22
     de8:	44 0f       	add	r20, r20
     dea:	55 1f       	adc	r21, r21
     dec:	42 95       	swap	r20
     dee:	52 95       	swap	r21
     df0:	50 7f       	andi	r21, 0xF0	; 240
     df2:	54 27       	eor	r21, r20
     df4:	40 7f       	andi	r20, 0xF0	; 240
     df6:	54 27       	eor	r21, r20
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     df8:	6e 2f       	mov	r22, r30
     dfa:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
     dfc:	49 2f       	mov	r20, r25
     dfe:	42 95       	swap	r20
     e00:	46 95       	lsr	r20
     e02:	46 95       	lsr	r20
     e04:	43 70       	andi	r20, 0x03	; 3
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	41 70       	andi	r20, 0x01	; 1
     e0a:	50 70       	andi	r21, 0x00	; 0
     e0c:	9a 01       	movw	r18, r20
     e0e:	00 24       	eor	r0, r0
     e10:	36 95       	lsr	r19
     e12:	27 95       	ror	r18
     e14:	07 94       	ror	r0
     e16:	36 95       	lsr	r19
     e18:	27 95       	ror	r18
     e1a:	07 94       	ror	r0
     e1c:	32 2f       	mov	r19, r18
     e1e:	20 2d       	mov	r18, r0
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     e20:	26 2b       	or	r18, r22
     e22:	20 93 63 03 	sts	0x0363, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
     e26:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
     e28:	81 95       	neg	r24
     e2a:	89 27       	eor	r24, r25
     e2c:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
     e2e:	89 27       	eor	r24, r25
     e30:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     e34:	ed ed       	ldi	r30, 0xDD	; 221
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	90 81       	ld	r25, Z
     e3a:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
     e3c:	80 91 d7 03 	lds	r24, 0x03D7
     e40:	86 95       	lsr	r24
     e42:	86 95       	lsr	r24
     e44:	86 95       	lsr	r24
     e46:	81 70       	andi	r24, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     e48:	81 95       	neg	r24
     e4a:	82 27       	eor	r24, r18
     e4c:	80 71       	andi	r24, 0x10	; 16
     e4e:	89 27       	eor	r24, r25
     e50:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
     e52:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <update_octave_range>
	
	//parse LFO data
	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
     e56:	80 91 d6 03 	lds	r24, 0x03D6
     e5a:	88 23       	and	r24, r24
     e5c:	84 f5       	brge	.+96     	; 0xebe <refresh_synth+0x162>
		
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
     e5e:	80 58       	subi	r24, 0x80	; 128
     e60:	80 93 d6 03 	sts	0x03D6, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
     e64:	80 91 65 03 	lds	r24, 0x0365
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	80 93 65 03 	sts	0x0365, r24
     e6e:	85 30       	cpi	r24, 0x05	; 5
     e70:	11 f4       	brne	.+4      	; 0xe76 <refresh_synth+0x11a>
     e72:	10 92 65 03 	sts	0x0365, r1
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
     e76:	a0 91 65 03 	lds	r26, 0x0365
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	a4 5b       	subi	r26, 0xB4	; 180
     e7e:	bd 4f       	sbci	r27, 0xFD	; 253
     e80:	8c 91       	ld	r24, X
     e82:	87 70       	andi	r24, 0x07	; 7
     e84:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     e86:	ed ed       	ldi	r30, 0xDD	; 221
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 62       	ori	r24, 0x20	; 32
     e8e:	80 83       	st	Z, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     e90:	80 81       	ld	r24, Z
     e92:	8f 7d       	andi	r24, 0xDF	; 223
     e94:	80 83       	st	Z, r24
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
     e96:	8c 91       	ld	r24, X
     e98:	86 95       	lsr	r24
     e9a:	86 95       	lsr	r24
     e9c:	86 95       	lsr	r24
     e9e:	87 70       	andi	r24, 0x07	; 7
     ea0:	21 e0       	ldi	r18, 0x01	; 1
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	a9 01       	movw	r20, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <refresh_synth+0x150>
     ea8:	44 0f       	add	r20, r20
     eaa:	55 1f       	adc	r21, r21
     eac:	8a 95       	dec	r24
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <refresh_synth+0x14c>
     eb0:	ca 01       	movw	r24, r20
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
     eb2:	90 91 60 03 	lds	r25, 0x0360
     eb6:	9f 70       	andi	r25, 0x0F	; 15
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
     eb8:	89 2b       	or	r24, r25
     eba:	80 93 60 03 	sts	0x0360, r24
		
		
	}		
				
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) //temporary tune button hack
     ebe:	80 91 d7 03 	lds	r24, 0x03D7
     ec2:	98 2f       	mov	r25, r24
     ec4:	92 95       	swap	r25
     ec6:	9f 70       	andi	r25, 0x0F	; 15
     ec8:	90 ff       	sbrs	r25, 0
     eca:	3f c0       	rjmp	.+126    	; 0xf4a <refresh_synth+0x1ee>
		{ 
				
		switch_states.byte2 ^= (1<<PROG_WRITE_SW); //toggle read switch state
     ecc:	90 e1       	ldi	r25, 0x10	; 16
     ece:	89 27       	eor	r24, r25
     ed0:	80 93 d7 03 	sts	0x03D7, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
     ed4:	87 e0       	ldi	r24, 0x07	; 7
     ed6:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     ed8:	cd ed       	ldi	r28, 0xDD	; 221
     eda:	d0 e0       	ldi	r29, 0x00	; 0
     edc:	88 81       	ld	r24, Y
     ede:	80 62       	ori	r24, 0x20	; 32
     ee0:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     ee2:	88 81       	ld	r24, Y
     ee4:	8f 7d       	andi	r24, 0xDF	; 223
     ee6:	88 83       	st	Y, r24
		DATA_BUS = 0;
     ee8:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
     eea:	8f e0       	ldi	r24, 0x0F	; 15
     eec:	6f e0       	ldi	r22, 0x0F	; 15
     eee:	7e e5       	ldi	r23, 0x5E	; 94
     ef0:	0e 94 27 08 	call	0x104e	; 0x104e <set_vco_init_cv>
     ef4:	90 93 cd 03 	sts	0x03CD, r25
     ef8:	80 93 cc 03 	sts	0x03CC, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
     efc:	80 ef       	ldi	r24, 0xF0	; 240
     efe:	6f e0       	ldi	r22, 0x0F	; 15
     f00:	7e e5       	ldi	r23, 0x5E	; 94
     f02:	0e 94 27 08 	call	0x104e	; 0x104e <set_vco_init_cv>
     f06:	90 93 cb 03 	sts	0x03CB, r25
     f0a:	80 93 ca 03 	sts	0x03CA, r24

		tune_8ths(VCO1);
     f0e:	8f e0       	ldi	r24, 0x0F	; 15
     f10:	0e 94 8b 09 	call	0x1316	; 0x1316 <tune_8ths>
		tune_8ths(VCO2);
     f14:	80 ef       	ldi	r24, 0xF0	; 240
     f16:	0e 94 8b 09 	call	0x1316	; 0x1316 <tune_8ths>
		tune_filter();
     f1a:	0e 94 2d 0b 	call	0x165a	; 0x165a <tune_filter>
		save_tuning_tables();
     f1e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f22:	8f e4       	ldi	r24, 0x4F	; 79
     f24:	93 ec       	ldi	r25, 0xC3	; 195
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <refresh_synth+0x1ca>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <refresh_synth+0x1d0>
     f2c:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
     f2e:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     f30:	88 81       	ld	r24, Y
     f32:	80 62       	ori	r24, 0x20	; 32
     f34:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     f36:	88 81       	ld	r24, Y
     f38:	8f 7d       	andi	r24, 0xDF	; 223
     f3a:	88 83       	st	Y, r24
		DATA_BUS = 0;
     f3c:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
     f3e:	80 91 60 03 	lds	r24, 0x0360
     f42:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
     f44:	80 68       	ori	r24, 0x80	; 128
     f46:	80 93 60 03 	sts	0x0360, r24
				
		}
		
		
	
}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	08 95       	ret

00000f50 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     f50:	88 ed       	ldi	r24, 0xD8	; 216
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     f5c:	81 ee       	ldi	r24, 0xE1	; 225
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     f68:	82 ee       	ldi	r24, 0xE2	; 226
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     f74:	84 ed       	ldi	r24, 0xD4	; 212
     f76:	92 e0       	ldi	r25, 0x02	; 2
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     f80:	8a ed       	ldi	r24, 0xDA	; 218
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     f8c:	8f ed       	ldi	r24, 0xDF	; 223
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     f98:	80 ee       	ldi	r24, 0xE0	; 224
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     fa4:	81 ed       	ldi	r24, 0xD1	; 209
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     fb0:	86 ed       	ldi	r24, 0xD6	; 214
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     fbc:	82 ed       	ldi	r24, 0xD2	; 210
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     fc8:	83 ed       	ldi	r24, 0xD3	; 211
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     fd4:	84 ed       	ldi	r24, 0xD4	; 212
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	6f ef       	ldi	r22, 0xFF	; 255
     fda:	7f e3       	ldi	r23, 0x3F	; 63
     fdc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     fe0:	85 ed       	ldi	r24, 0xD5	; 213
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     fec:	89 ed       	ldi	r24, 0xD9	; 217
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     ff8:	8e ec       	ldi	r24, 0xCE	; 206
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1004:	8c ec       	ldi	r24, 0xCC	; 204
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1010:	8a ec       	ldi	r24, 0xCA	; 202
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	6f ef       	ldi	r22, 0xFF	; 255
    1016:	7f e3       	ldi	r23, 0x3F	; 63
    1018:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    101c:	88 ec       	ldi	r24, 0xC8	; 200
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1028:	80 ed       	ldi	r24, 0xD0	; 208
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1034:	83 ee       	ldi	r24, 0xE3	; 227
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1040:	84 ee       	ldi	r24, 0xE4	; 228
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}	
    104c:	08 95       	ret

0000104e <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    104e:	2f 92       	push	r2
    1050:	3f 92       	push	r3
    1052:	4f 92       	push	r4
    1054:	5f 92       	push	r5
    1056:	6f 92       	push	r6
    1058:	7f 92       	push	r7
    105a:	8f 92       	push	r8
    105c:	9f 92       	push	r9
    105e:	af 92       	push	r10
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	2c 97       	sbiw	r28, 0x0c	; 12
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	08 2f       	mov	r16, r24
    1084:	78 87       	std	Y+8, r23	; 0x08
    1086:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1088:	80 91 d2 03 	lds	r24, 0x03D2
    108c:	83 60       	ori	r24, 0x03	; 3
    108e:	80 93 d2 03 	sts	0x03D2, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1092:	0e 94 a8 07 	call	0xf50	; 0xf50 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1096:	10 92 d1 03 	sts	0x03D1, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    109a:	0f 30       	cpi	r16, 0x0F	; 15
    109c:	e1 f4       	brne	.+56     	; 0x10d6 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    109e:	0f 2e       	mov	r0, r31
    10a0:	f6 ee       	ldi	r31, 0xE6	; 230
    10a2:	4f 2e       	mov	r4, r31
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	5f 2e       	mov	r5, r31
    10a8:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    10aa:	0f 2e       	mov	r0, r31
    10ac:	fe ed       	ldi	r31, 0xDE	; 222
    10ae:	2f 2e       	mov	r2, r31
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	3f 2e       	mov	r3, r31
    10b4:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    10b6:	23 ee       	ldi	r18, 0xE3	; 227
    10b8:	31 e0       	ldi	r19, 0x01	; 1
    10ba:	3a 83       	std	Y+2, r19	; 0x02
    10bc:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    10be:	0f 2e       	mov	r0, r31
    10c0:	fc ed       	ldi	r31, 0xDC	; 220
    10c2:	8f 2e       	mov	r8, r31
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	9f 2e       	mov	r9, r31
    10c8:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    10ca:	84 e7       	ldi	r24, 0x74	; 116
    10cc:	97 e0       	ldi	r25, 0x07	; 7
    10ce:	9a 87       	std	Y+10, r25	; 0x0a
    10d0:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	1b c0       	rjmp	.+54     	; 0x110c <__stack+0xd>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    10d6:	0f 2e       	mov	r0, r31
    10d8:	f5 ee       	ldi	r31, 0xE5	; 229
    10da:	4f 2e       	mov	r4, r31
    10dc:	f1 e0       	ldi	r31, 0x01	; 1
    10de:	5f 2e       	mov	r5, r31
    10e0:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    10e2:	0f 2e       	mov	r0, r31
    10e4:	f7 ed       	ldi	r31, 0xD7	; 215
    10e6:	2f 2e       	mov	r2, r31
    10e8:	f1 e0       	ldi	r31, 0x01	; 1
    10ea:	3f 2e       	mov	r3, r31
    10ec:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    10ee:	e4 ee       	ldi	r30, 0xE4	; 228
    10f0:	f1 e0       	ldi	r31, 0x01	; 1
    10f2:	fa 83       	std	Y+2, r31	; 0x02
    10f4:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    10f6:	0f 2e       	mov	r0, r31
    10f8:	fd ed       	ldi	r31, 0xDD	; 221
    10fa:	8f 2e       	mov	r8, r31
    10fc:	f1 e0       	ldi	r31, 0x01	; 1
    10fe:	9f 2e       	mov	r9, r31
    1100:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1102:	22 e7       	ldi	r18, 0x72	; 114
    1104:	37 e0       	ldi	r19, 0x07	; 7
    1106:	3a 87       	std	Y+10, r19	; 0x0a
    1108:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    110a:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    110c:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    110e:	ed ed       	ldi	r30, 0xDD	; 221
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 64       	ori	r24, 0x40	; 64
    1116:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1118:	80 81       	ld	r24, Z
    111a:	8f 7b       	andi	r24, 0xBF	; 191
    111c:	80 83       	st	Z, r24
	DATA_BUS = 0;
    111e:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1120:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1122:	84 b5       	in	r24, 0x24	; 36
    1124:	8f 60       	ori	r24, 0x0F	; 15
    1126:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    112c:	ee e6       	ldi	r30, 0x6E	; 110
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	90 81       	ld	r25, Z
    1132:	92 60       	ori	r25, 0x02	; 2
    1134:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1136:	80 93 d3 03 	sts	0x03D3, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    113a:	8d e0       	ldi	r24, 0x0D	; 13
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	9c 83       	std	Y+4, r25	; 0x04
    1140:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1142:	80 2f       	mov	r24, r16
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	8c 01       	movw	r16, r24
    1148:	0f 5f       	subi	r16, 0xFF	; 255
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    114c:	0f 2e       	mov	r0, r31
    114e:	f8 ed       	ldi	r31, 0xD8	; 216
    1150:	ef 2e       	mov	r14, r31
    1152:	f1 e0       	ldi	r31, 0x01	; 1
    1154:	ff 2e       	mov	r15, r31
    1156:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1158:	0f 2e       	mov	r0, r31
    115a:	f4 ed       	ldi	r31, 0xD4	; 212
    115c:	cf 2e       	mov	r12, r31
    115e:	f1 e0       	ldi	r31, 0x01	; 1
    1160:	df 2e       	mov	r13, r31
    1162:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1164:	0f 2e       	mov	r0, r31
    1166:	fa ec       	ldi	r31, 0xCA	; 202
    1168:	af 2e       	mov	r10, r31
    116a:	f1 e0       	ldi	r31, 0x01	; 1
    116c:	bf 2e       	mov	r11, r31
    116e:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1170:	0f 2e       	mov	r0, r31
    1172:	fb ec       	ldi	r31, 0xCB	; 203
    1174:	6f 2e       	mov	r6, r31
    1176:	f1 e0       	ldi	r31, 0x01	; 1
    1178:	7f 2e       	mov	r7, r31
    117a:	f0 2d       	mov	r31, r0
    117c:	e0 e0       	ldi	r30, 0x00	; 0
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	fc 87       	std	Y+12, r31	; 0x0c
    1182:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1184:	21 e0       	ldi	r18, 0x01	; 1
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	0b 80       	ldd	r0, Y+3	; 0x03
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <__stack+0x91>
    118c:	22 0f       	add	r18, r18
    118e:	33 1f       	adc	r19, r19
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <__stack+0x8d>
    1194:	3e 83       	std	Y+6, r19	; 0x06
    1196:	2d 83       	std	Y+5, r18	; 0x05
    1198:	8b 85       	ldd	r24, Y+11	; 0x0b
    119a:	9c 85       	ldd	r25, Y+12	; 0x0c
    119c:	82 2b       	or	r24, r18
    119e:	93 2b       	or	r25, r19
    11a0:	9c 87       	std	Y+12, r25	; 0x0c
    11a2:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    11a4:	c4 01       	movw	r24, r8
    11a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
		
		count_finished = FALSE;
    11ae:	10 92 d1 03 	sts	0x03D1, r1
		period_counter = 0;
    11b2:	10 92 d4 03 	sts	0x03D4, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    11b6:	8f e0       	ldi	r24, 0x0F	; 15
    11b8:	e8 e1       	ldi	r30, 0x18	; 24
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	a8 95       	wdr
    11c2:	e0 93 60 00 	sts	0x0060, r30
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    11cc:	80 91 d1 03 	lds	r24, 0x03D1
    11d0:	88 23       	and	r24, r24
    11d2:	89 f5       	brne	.+98     	; 0x1236 <__stack+0x137>
			
			update_display(vco + 1, DEC);
    11d4:	c8 01       	movw	r24, r16
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    11dc:	c4 01       	movw	r24, r8
    11de:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    11e6:	c1 01       	movw	r24, r2
    11e8:	6f ef       	ldi	r22, 0xFF	; 255
    11ea:	7f e3       	ldi	r23, 0x3F	; 63
    11ec:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    11f0:	c7 01       	movw	r24, r14
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    11fa:	c6 01       	movw	r24, r12
    11fc:	6f ef       	ldi	r22, 0xFF	; 255
    11fe:	7f e3       	ldi	r23, 0x3F	; 63
    1200:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1204:	c5 01       	movw	r24, r10
    1206:	6f ef       	ldi	r22, 0xFF	; 255
    1208:	7f e3       	ldi	r23, 0x3F	; 63
    120a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    120e:	c3 01       	movw	r24, r6
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f e3       	ldi	r23, 0x3F	; 63
    1214:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	6f ef       	ldi	r22, 0xFF	; 255
    121e:	7f e3       	ldi	r23, 0x3F	; 63
    1220:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1224:	c2 01       	movw	r24, r4
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    122e:	80 91 d1 03 	lds	r24, 0x03D1
    1232:	88 23       	and	r24, r24
    1234:	79 f2       	breq	.-98     	; 0x11d4 <__stack+0xd5>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1236:	88 e1       	ldi	r24, 0x18	; 24
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	80 93 60 00 	sts	0x0060, r24
    1240:	10 92 60 00 	sts	0x0060, r1
    1244:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1246:	80 91 cf 03 	lds	r24, 0x03CF
    124a:	90 91 d0 03 	lds	r25, 0x03D0
    124e:	ef 81       	ldd	r30, Y+7	; 0x07
    1250:	f8 85       	ldd	r31, Y+8	; 0x08
    1252:	e8 17       	cp	r30, r24
    1254:	f9 07       	cpc	r31, r25
    1256:	20 f0       	brcs	.+8      	; 0x1260 <__stack+0x161>
    1258:	80 91 d0 02 	lds	r24, 0x02D0
    125c:	88 23       	and	r24, r24
    125e:	51 f4       	brne	.+20     	; 0x1274 <__stack+0x175>
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	80 95       	com	r24
    1266:	90 95       	com	r25
    1268:	2b 85       	ldd	r18, Y+11	; 0x0b
    126a:	3c 85       	ldd	r19, Y+12	; 0x0c
    126c:	28 23       	and	r18, r24
    126e:	39 23       	and	r19, r25
    1270:	3c 87       	std	Y+12, r19	; 0x0c
    1272:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 d0 02 	sts	0x02D0, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	9c 83       	std	Y+4, r25	; 0x04
    1282:	8b 83       	std	Y+3, r24	; 0x03
    1284:	ef ef       	ldi	r30, 0xFF	; 255
    1286:	8f 3f       	cpi	r24, 0xFF	; 255
    1288:	9e 07       	cpc	r25, r30
    128a:	09 f0       	breq	.+2      	; 0x128e <__stack+0x18f>
    128c:	7b cf       	rjmp	.-266    	; 0x1184 <__stack+0x85>
    128e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1290:	3c 85       	ldd	r19, Y+12	; 0x0c
    1292:	3e 83       	std	Y+6, r19	; 0x06
    1294:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1296:	88 ec       	ldi	r24, 0xC8	; 200
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    12a2:	89 ec       	ldi	r24, 0xC9	; 201
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    12ae:	84 ed       	ldi	r24, 0xD4	; 212
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    12ba:	88 ed       	ldi	r24, 0xD8	; 216
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    12c6:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    12c8:	ee e6       	ldi	r30, 0x6E	; 110
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8d 7f       	andi	r24, 0xFD	; 253
    12d0:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    12d2:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    12d4:	89 85       	ldd	r24, Y+9	; 0x09
    12d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d8:	6d 81       	ldd	r22, Y+5	; 0x05
    12da:	7e 81       	ldd	r23, Y+6	; 0x06
    12dc:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	2c 96       	adiw	r28, 0x0c	; 12
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	cf 90       	pop	r12
    1300:	bf 90       	pop	r11
    1302:	af 90       	pop	r10
    1304:	9f 90       	pop	r9
    1306:	8f 90       	pop	r8
    1308:	7f 90       	pop	r7
    130a:	6f 90       	pop	r6
    130c:	5f 90       	pop	r5
    130e:	4f 90       	pop	r4
    1310:	3f 90       	pop	r3
    1312:	2f 90       	pop	r2
    1314:	08 95       	ret

00001316 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1316:	2f 92       	push	r2
    1318:	3f 92       	push	r3
    131a:	4f 92       	push	r4
    131c:	5f 92       	push	r5
    131e:	6f 92       	push	r6
    1320:	7f 92       	push	r7
    1322:	8f 92       	push	r8
    1324:	9f 92       	push	r9
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	c0 54       	subi	r28, 0x40	; 64
    1340:	d0 40       	sbci	r29, 0x00	; 0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    134e:	de 01       	movw	r26, r28
    1350:	11 96       	adiw	r26, 0x01	; 1
    1352:	e1 e5       	ldi	r30, 0x51	; 81
    1354:	f2 e0       	ldi	r31, 0x02	; 2
    1356:	80 e3       	ldi	r24, 0x30	; 48
    1358:	01 90       	ld	r0, Z+
    135a:	0d 92       	st	X+, r0
    135c:	81 50       	subi	r24, 0x01	; 1
    135e:	e1 f7       	brne	.-8      	; 0x1358 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    1360:	0e 94 a8 07 	call	0xf50	; 0xf50 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1364:	0f 30       	cpi	r16, 0x0F	; 15
    1366:	11 f5       	brne	.+68     	; 0x13ac <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    1368:	40 90 cc 03 	lds	r4, 0x03CC
    136c:	50 90 cd 03 	lds	r5, 0x03CD
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1370:	0f 2e       	mov	r0, r31
    1372:	f6 ee       	ldi	r31, 0xE6	; 230
    1374:	8f 2e       	mov	r8, r31
    1376:	f1 e0       	ldi	r31, 0x01	; 1
    1378:	9f 2e       	mov	r9, r31
    137a:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    137c:	0f 2e       	mov	r0, r31
    137e:	fe ed       	ldi	r31, 0xDE	; 222
    1380:	2f 2e       	mov	r2, r31
    1382:	f1 e0       	ldi	r31, 0x01	; 1
    1384:	3f 2e       	mov	r3, r31
    1386:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    1388:	23 ee       	ldi	r18, 0xE3	; 227
    138a:	31 e0       	ldi	r19, 0x01	; 1
    138c:	3a ab       	sts	0x5a, r19
    138e:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1390:	0f 2e       	mov	r0, r31
    1392:	fc ed       	ldi	r31, 0xDC	; 220
    1394:	6f 2e       	mov	r6, r31
    1396:	f1 e0       	ldi	r31, 0x01	; 1
    1398:	7f 2e       	mov	r7, r31
    139a:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    139c:	08 ea       	ldi	r16, 0xA8	; 168
    139e:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    13a0:	cc 24       	eor	r12, r12
    13a2:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    13a4:	ee 24       	eor	r14, r14
    13a6:	68 94       	set
    13a8:	e1 f8       	bld	r14, 1
    13aa:	22 c0       	rjmp	.+68     	; 0x13f0 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    13ac:	40 90 ca 03 	lds	r4, 0x03CA
    13b0:	50 90 cb 03 	lds	r5, 0x03CB
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    13b4:	0f 2e       	mov	r0, r31
    13b6:	f5 ee       	ldi	r31, 0xE5	; 229
    13b8:	8f 2e       	mov	r8, r31
    13ba:	f1 e0       	ldi	r31, 0x01	; 1
    13bc:	9f 2e       	mov	r9, r31
    13be:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    13c0:	0f 2e       	mov	r0, r31
    13c2:	f7 ed       	ldi	r31, 0xD7	; 215
    13c4:	2f 2e       	mov	r2, r31
    13c6:	f1 e0       	ldi	r31, 0x01	; 1
    13c8:	3f 2e       	mov	r3, r31
    13ca:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    13cc:	44 ee       	ldi	r20, 0xE4	; 228
    13ce:	51 e0       	ldi	r21, 0x01	; 1
    13d0:	5a ab       	sts	0x5a, r21
    13d2:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    13d4:	0f 2e       	mov	r0, r31
    13d6:	fd ed       	ldi	r31, 0xDD	; 221
    13d8:	6f 2e       	mov	r6, r31
    13da:	f1 e0       	ldi	r31, 0x01	; 1
    13dc:	7f 2e       	mov	r7, r31
    13de:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    13e0:	06 e8       	ldi	r16, 0x86	; 134
    13e2:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    13e4:	cc 24       	eor	r12, r12
    13e6:	68 94       	set
    13e8:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    13ea:	ee 24       	eor	r14, r14
    13ec:	68 94       	set
    13ee:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    13f0:	c3 01       	movw	r24, r6
    13f2:	b2 01       	movw	r22, r4
    13f4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    13f8:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    13fa:	ed ed       	ldi	r30, 0xDD	; 221
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 64       	ori	r24, 0x40	; 64
    1402:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1404:	80 81       	ld	r24, Z
    1406:	8f 7b       	andi	r24, 0xBF	; 191
    1408:	80 83       	st	Z, r24
		DATA_BUS = 0;
    140a:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    140c:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	80 93 d3 03 	sts	0x03D3, r24
		
		compare_match_counter = 0;	
    1414:	10 92 ce 03 	sts	0x03CE, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1418:	8c 2d       	mov	r24, r12
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	24 e6       	ldi	r18, 0x64	; 100
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	82 9f       	mul	r24, r18
    1422:	d0 01       	movw	r26, r0
    1424:	83 9f       	mul	r24, r19
    1426:	b0 0d       	add	r27, r0
    1428:	92 9f       	mul	r25, r18
    142a:	b0 0d       	add	r27, r0
    142c:	11 24       	eor	r1, r1
    142e:	bc ab       	sts	0x5c, r27
    1430:	ab ab       	sts	0x5b, r26
    1432:	fe 01       	movw	r30, r28
    1434:	31 96       	adiw	r30, 0x01	; 1
    1436:	fc af       	sts	0x7c, r31
    1438:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    143a:	98 01       	movw	r18, r16
    143c:	2e 5f       	subi	r18, 0xFE	; 254
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
    1440:	21 96       	adiw	r28, 0x01	; 1
    1442:	3f af       	sts	0x7f, r19
    1444:	2e af       	sts	0x7e, r18
    1446:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1448:	1e ae       	sts	0xbe, r17
    144a:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    144c:	0f 2e       	mov	r0, r31
    144e:	f8 ed       	ldi	r31, 0xD8	; 216
    1450:	ef 2e       	mov	r14, r31
    1452:	f1 e0       	ldi	r31, 0x01	; 1
    1454:	ff 2e       	mov	r15, r31
    1456:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    1458:	0f 2e       	mov	r0, r31
    145a:	f4 ed       	ldi	r31, 0xD4	; 212
    145c:	cf 2e       	mov	r12, r31
    145e:	f1 e0       	ldi	r31, 0x01	; 1
    1460:	df 2e       	mov	r13, r31
    1462:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1464:	0f 2e       	mov	r0, r31
    1466:	fa ec       	ldi	r31, 0xCA	; 202
    1468:	af 2e       	mov	r10, r31
    146a:	f1 e0       	ldi	r31, 0x01	; 1
    146c:	bf 2e       	mov	r11, r31
    146e:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    1470:	eb ad       	sts	0x6b, r30
    1472:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    1474:	80 81       	ld	r24, Z
    1476:	80 93 d3 03 	sts	0x03D3, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    147a:	84 b5       	in	r24, 0x24	; 36
    147c:	8f 60       	ori	r24, 0x0F	; 15
    147e:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    1484:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    1486:	4d ad       	sts	0x6d, r20
    1488:	5e ad       	sts	0x6e, r21
    148a:	43 30       	cpi	r20, 0x03	; 3
    148c:	51 05       	cpc	r21, r1
    148e:	24 f4       	brge	.+8      	; 0x1498 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    1490:	83 e0       	ldi	r24, 0x03	; 3
    1492:	80 93 d2 03 	sts	0x03D2, r24
    1496:	03 c0       	rjmp	.+6      	; 0x149e <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	80 93 d2 03 	sts	0x03D2, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    149e:	81 81       	ldd	r24, Z+1	; 0x01
    14a0:	92 81       	ldd	r25, Z+2	; 0x02
    14a2:	9a af       	sts	0x7a, r25
    14a4:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    14a6:	ad e0       	ldi	r26, 0x0D	; 13
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	be ab       	sts	0x5e, r27
    14ac:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    14ae:	00 e0       	ldi	r16, 0x00	; 0
    14b0:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    14b2:	e1 e0       	ldi	r30, 0x01	; 1
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	0d a8       	sts	0x8d, r16
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <tune_8ths+0x1a8>
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <tune_8ths+0x1a4>
    14c2:	f8 af       	sts	0x78, r31
    14c4:	ef ab       	sts	0x5f, r30
    14c6:	0e 2b       	or	r16, r30
    14c8:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    14ca:	ae e6       	ldi	r26, 0x6E	; 110
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	8c 91       	ld	r24, X
    14d0:	8d 7f       	andi	r24, 0xFD	; 253
    14d2:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    14d4:	c4 01       	movw	r24, r8
    14d6:	b8 01       	movw	r22, r16
    14d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
    14dc:	e3 ef       	ldi	r30, 0xF3	; 243
    14de:	f1 e0       	ldi	r31, 0x01	; 1
    14e0:	31 97       	sbiw	r30, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <tune_8ths+0x1ca>
    14e4:	00 c0       	rjmp	.+0      	; 0x14e6 <tune_8ths+0x1d0>
    14e6:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    14e8:	ae e6       	ldi	r26, 0x6E	; 110
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	8c 91       	ld	r24, X
    14ee:	82 60       	ori	r24, 0x02	; 2
    14f0:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    14f2:	10 92 d1 03 	sts	0x03D1, r1
				period_counter = 0;
    14f6:	10 92 d4 03 	sts	0x03D4, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    14fa:	e8 e1       	ldi	r30, 0x18	; 24
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	2f e0       	ldi	r18, 0x0F	; 15
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	a8 95       	wdr
    1506:	e0 93 60 00 	sts	0x0060, r30
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    1510:	80 91 d1 03 	lds	r24, 0x03D1
    1514:	88 23       	and	r24, r24
    1516:	81 f5       	brne	.+96     	; 0x1578 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1518:	80 91 d3 03 	lds	r24, 0x03D3
    151c:	4b a9       	sts	0x4b, r20
    151e:	5c a9       	sts	0x4c, r21
    1520:	48 0f       	add	r20, r24
    1522:	51 1d       	adc	r21, r1
    1524:	ca 01       	movw	r24, r20
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    152c:	c3 01       	movw	r24, r6
    152e:	b2 01       	movw	r22, r4
    1530:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1534:	c4 01       	movw	r24, r8
    1536:	b8 01       	movw	r22, r16
    1538:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    153c:	c7 01       	movw	r24, r14
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    1546:	c6 01       	movw	r24, r12
    1548:	6f ef       	ldi	r22, 0xFF	; 255
    154a:	7f e3       	ldi	r23, 0x3F	; 63
    154c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1550:	c5 01       	movw	r24, r10
    1552:	6f ef       	ldi	r22, 0xFF	; 255
    1554:	7f e3       	ldi	r23, 0x3F	; 63
    1556:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    155a:	c1 01       	movw	r24, r2
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	70 e2       	ldi	r23, 0x20	; 32
    1560:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    1564:	89 a9       	sts	0x49, r24
    1566:	9a a9       	sts	0x4a, r25
    1568:	6f ef       	ldi	r22, 0xFF	; 255
    156a:	7f e3       	ldi	r23, 0x3F	; 63
    156c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    1570:	80 91 d1 03 	lds	r24, 0x03D1
    1574:	88 23       	and	r24, r24
    1576:	81 f2       	breq	.-96     	; 0x1518 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    1578:	58 e1       	ldi	r21, 0x18	; 24
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	50 93 60 00 	sts	0x0060, r21
    1582:	10 92 60 00 	sts	0x0060, r1
    1586:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    1588:	80 91 cf 03 	lds	r24, 0x03CF
    158c:	90 91 d0 03 	lds	r25, 0x03D0
    1590:	a9 ad       	sts	0x69, r26
    1592:	ba ad       	sts	0x6a, r27
    1594:	a8 17       	cp	r26, r24
    1596:	b9 07       	cpc	r27, r25
    1598:	50 f0       	brcs	.+20     	; 0x15ae <tune_8ths+0x298>
    159a:	80 91 d0 02 	lds	r24, 0x02D0
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	31 f4       	brne	.+12     	; 0x15ae <tune_8ths+0x298>
    15a2:	8f a9       	sts	0x4f, r24
    15a4:	98 ad       	sts	0x68, r25
    15a6:	80 95       	com	r24
    15a8:	90 95       	com	r25
    15aa:	08 23       	and	r16, r24
    15ac:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    15ae:	80 91 cf 03 	lds	r24, 0x03CF
    15b2:	90 91 d0 03 	lds	r25, 0x03D0
    15b6:	e9 ad       	sts	0x69, r30
    15b8:	fa ad       	sts	0x6a, r31
    15ba:	8e 17       	cp	r24, r30
    15bc:	9f 07       	cpc	r25, r31
    15be:	21 f4       	brne	.+8      	; 0x15c8 <tune_8ths+0x2b2>
    15c0:	80 91 d0 02 	lds	r24, 0x02D0
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	71 f0       	breq	.+28     	; 0x15e4 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	f0 93 d0 02 	sts	0x02D0, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    15ce:	2d a9       	sts	0x4d, r18
    15d0:	3e a9       	sts	0x4e, r19
    15d2:	21 50       	subi	r18, 0x01	; 1
    15d4:	30 40       	sbci	r19, 0x00	; 0
    15d6:	3e ab       	sts	0x5e, r19
    15d8:	2d ab       	sts	0x5d, r18
    15da:	4f ef       	ldi	r20, 0xFF	; 255
    15dc:	2f 3f       	cpi	r18, 0xFF	; 255
    15de:	34 07       	cpc	r19, r20
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <tune_8ths+0x2ce>
    15e2:	67 cf       	rjmp	.-306    	; 0x14b2 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    15e4:	21 96       	adiw	r28, 0x01	; 1
    15e6:	ae ad       	sts	0x6e, r26
    15e8:	bf ad       	sts	0x6f, r27
    15ea:	21 97       	sbiw	r28, 0x01	; 1
    15ec:	0d 93       	st	X+, r16
    15ee:	1d 93       	st	X+, r17
    15f0:	21 96       	adiw	r28, 0x01	; 1
    15f2:	bf af       	sts	0x7f, r27
    15f4:	ae af       	sts	0x7e, r26
    15f6:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    15f8:	ee e6       	ldi	r30, 0x6E	; 110
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8d 7f       	andi	r24, 0xFD	; 253
    1600:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    1602:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1604:	2d ad       	sts	0x6d, r18
    1606:	3e ad       	sts	0x6e, r19
    1608:	2f 5f       	subi	r18, 0xFF	; 255
    160a:	3f 4f       	sbci	r19, 0xFF	; 255
    160c:	3e af       	sts	0x7e, r19
    160e:	2d af       	sts	0x7d, r18
    1610:	4b ad       	sts	0x6b, r20
    1612:	5c ad       	sts	0x6c, r21
    1614:	4d 5f       	subi	r20, 0xFD	; 253
    1616:	5f 4f       	sbci	r21, 0xFF	; 255
    1618:	5c af       	sts	0x7c, r21
    161a:	4b af       	sts	0x7b, r20
    161c:	20 31       	cpi	r18, 0x10	; 16
    161e:	31 05       	cpc	r19, r1
    1620:	09 f0       	breq	.+2      	; 0x1624 <tune_8ths+0x30e>
    1622:	26 cf       	rjmp	.-436    	; 0x1470 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		
		PORTF &= ~(1<<GATE); //turn gate off
    1624:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    1626:	c0 5c       	subi	r28, 0xC0	; 192
    1628:	df 4f       	sbci	r29, 0xFF	; 255
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	df 90       	pop	r13
    1642:	cf 90       	pop	r12
    1644:	bf 90       	pop	r11
    1646:	af 90       	pop	r10
    1648:	9f 90       	pop	r9
    164a:	8f 90       	pop	r8
    164c:	7f 90       	pop	r7
    164e:	6f 90       	pop	r6
    1650:	5f 90       	pop	r5
    1652:	4f 90       	pop	r4
    1654:	3f 90       	pop	r3
    1656:	2f 90       	pop	r2
    1658:	08 95       	ret

0000165a <tune_filter>:
	
void tune_filter(void) {
    165a:	2f 92       	push	r2
    165c:	3f 92       	push	r3
    165e:	4f 92       	push	r4
    1660:	5f 92       	push	r5
    1662:	6f 92       	push	r6
    1664:	7f 92       	push	r7
    1666:	8f 92       	push	r8
    1668:	9f 92       	push	r9
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	e9 97       	sbiw	r28, 0x39	; 57
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    168e:	de 01       	movw	r26, r28
    1690:	11 96       	adiw	r26, 0x01	; 1
    1692:	e1 e8       	ldi	r30, 0x81	; 129
    1694:	f2 e0       	ldi	r31, 0x02	; 2
    1696:	8d e2       	ldi	r24, 0x2D	; 45
    1698:	01 90       	ld	r0, Z+
    169a:	0d 92       	st	X+, r0
    169c:	81 50       	subi	r24, 0x01	; 1
    169e:	e1 f7       	brne	.-8      	; 0x1698 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    16a0:	88 ed       	ldi	r24, 0xD8	; 216
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    16ac:	81 ee       	ldi	r24, 0xE1	; 225
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    16b8:	82 ee       	ldi	r24, 0xE2	; 226
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    16c4:	84 ed       	ldi	r24, 0xD4	; 212
    16c6:	92 e0       	ldi	r25, 0x02	; 2
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    16d0:	8a ed       	ldi	r24, 0xDA	; 218
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    16dc:	8f ed       	ldi	r24, 0xDF	; 223
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    16e8:	80 ee       	ldi	r24, 0xE0	; 224
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    16f4:	81 ed       	ldi	r24, 0xD1	; 209
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1700:	86 ed       	ldi	r24, 0xD6	; 214
    1702:	91 e0       	ldi	r25, 0x01	; 1
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    170c:	82 ed       	ldi	r24, 0xD2	; 210
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1718:	83 ed       	ldi	r24, 0xD3	; 211
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    1724:	84 ed       	ldi	r24, 0xD4	; 212
    1726:	91 e0       	ldi	r25, 0x01	; 1
    1728:	6f ef       	ldi	r22, 0xFF	; 255
    172a:	7f e3       	ldi	r23, 0x3F	; 63
    172c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    1730:	85 ed       	ldi	r24, 0xD5	; 213
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	6f ef       	ldi	r22, 0xFF	; 255
    1736:	7f e3       	ldi	r23, 0x3F	; 63
    1738:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    173c:	89 ed       	ldi	r24, 0xD9	; 217
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1748:	8e ec       	ldi	r24, 0xCE	; 206
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1754:	8c ec       	ldi	r24, 0xCC	; 204
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1760:	8a ec       	ldi	r24, 0xCA	; 202
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	6f ef       	ldi	r22, 0xFF	; 255
    1766:	7f e3       	ldi	r23, 0x3F	; 63
    1768:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    176c:	88 ec       	ldi	r24, 0xC8	; 200
    176e:	91 e0       	ldi	r25, 0x01	; 1
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    1778:	80 ed       	ldi	r24, 0xD0	; 208
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1784:	83 ee       	ldi	r24, 0xE3	; 227
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1790:	84 ee       	ldi	r24, 0xE4	; 228
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    179c:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    179e:	ed ed       	ldi	r30, 0xDD	; 221
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	80 64       	ori	r24, 0x40	; 64
    17a6:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    17a8:	80 81       	ld	r24, Z
    17aa:	8f 7b       	andi	r24, 0xBF	; 191
    17ac:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	80 93 d3 03 	sts	0x03D3, r24
	PORTF |= (1<<GATE); //turn gate on
    17b4:	89 9a       	sbi	0x11, 1	; 17
    17b6:	9e 01       	movw	r18, r28
    17b8:	2f 5f       	subi	r18, 0xFF	; 255
    17ba:	3f 4f       	sbci	r19, 0xFF	; 255
    17bc:	3d ab       	sts	0x5d, r19
    17be:	2c ab       	sts	0x5c, r18
    17c0:	88 e6       	ldi	r24, 0x68	; 104
    17c2:	93 e0       	ldi	r25, 0x03	; 3
    17c4:	99 af       	sts	0x79, r25
    17c6:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    17c8:	1f aa       	sts	0x9f, r17
    17ca:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    17cc:	0f 2e       	mov	r0, r31
    17ce:	f4 ed       	ldi	r31, 0xD4	; 212
    17d0:	af 2e       	mov	r10, r31
    17d2:	f1 e0       	ldi	r31, 0x01	; 1
    17d4:	bf 2e       	mov	r11, r31
    17d6:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    17d8:	0f 2e       	mov	r0, r31
    17da:	f8 ed       	ldi	r31, 0xD8	; 216
    17dc:	6f 2e       	mov	r6, r31
    17de:	f1 e0       	ldi	r31, 0x01	; 1
    17e0:	7f 2e       	mov	r7, r31
    17e2:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    17e4:	0f 2e       	mov	r0, r31
    17e6:	f5 ed       	ldi	r31, 0xD5	; 213
    17e8:	4f 2e       	mov	r4, r31
    17ea:	f1 e0       	ldi	r31, 0x01	; 1
    17ec:	5f 2e       	mov	r5, r31
    17ee:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    17f0:	0f 2e       	mov	r0, r31
    17f2:	fa ec       	ldi	r31, 0xCA	; 202
    17f4:	2f 2e       	mov	r2, r31
    17f6:	f1 e0       	ldi	r31, 0x01	; 1
    17f8:	3f 2e       	mov	r3, r31
    17fa:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    17fc:	ac a9       	sts	0x4c, r26
    17fe:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    1800:	8c 91       	ld	r24, X
    1802:	80 93 d3 03 	sts	0x03D3, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1806:	84 b5       	in	r24, 0x24	; 36
    1808:	8f 60       	ori	r24, 0x0F	; 15
    180a:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1810:	ee e6       	ldi	r30, 0x6E	; 110
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	82 60       	ori	r24, 0x02	; 2
    1818:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    181a:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    181c:	ee a9       	sts	0x4e, r30
    181e:	ff a9       	sts	0x4f, r31
    1820:	e2 30       	cpi	r30, 0x02	; 2
    1822:	f1 05       	cpc	r31, r1
    1824:	24 f4       	brge	.+8      	; 0x182e <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    1826:	83 e0       	ldi	r24, 0x03	; 3
    1828:	80 93 d2 03 	sts	0x03D2, r24
    182c:	03 c0       	rjmp	.+6      	; 0x1834 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	80 93 d2 03 	sts	0x03D2, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    1834:	11 96       	adiw	r26, 0x01	; 1
    1836:	2d 91       	ld	r18, X+
    1838:	3c 91       	ld	r19, X
    183a:	12 97       	sbiw	r26, 0x02	; 2
    183c:	3b ab       	sts	0x5b, r19
    183e:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1840:	8d e0       	ldi	r24, 0x0D	; 13
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9f a7       	lds	r25, 0x7f
    1846:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    1848:	ee 24       	eor	r14, r14
    184a:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    184c:	0f 2e       	mov	r0, r31
    184e:	f1 ed       	ldi	r31, 0xD1	; 209
    1850:	cf 2e       	mov	r12, r31
    1852:	f1 e0       	ldi	r31, 0x01	; 1
    1854:	df 2e       	mov	r13, r31
    1856:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    1858:	0f 2e       	mov	r0, r31
    185a:	f6 ed       	ldi	r31, 0xD6	; 214
    185c:	8f 2e       	mov	r8, r31
    185e:	f1 e0       	ldi	r31, 0x01	; 1
    1860:	9f 2e       	mov	r9, r31
    1862:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	fc 01       	movw	r30, r24
    186a:	0e a4       	lds	r16, 0xae
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <tune_filter+0x218>
    186e:	ee 0f       	add	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <tune_filter+0x214>
    1876:	f9 ab       	sts	0x59, r31
    1878:	e8 ab       	sts	0x58, r30
    187a:	ee 2a       	or	r14, r30
    187c:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    187e:	c5 01       	movw	r24, r10
    1880:	b7 01       	movw	r22, r14
    1882:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
    1886:	10 92 d1 03 	sts	0x03D1, r1
			period_counter = 0;
    188a:	10 92 d4 03 	sts	0x03D4, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    188e:	8f e0       	ldi	r24, 0x0F	; 15
    1890:	28 e1       	ldi	r18, 0x18	; 24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	a8 95       	wdr
    189a:	20 93 60 00 	sts	0x0060, r18
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    18a4:	80 91 d1 03 	lds	r24, 0x03D1
    18a8:	88 23       	and	r24, r24
    18aa:	b1 f5       	brne	.+108    	; 0x1918 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    18ac:	02 ed       	ldi	r16, 0xD2	; 210
    18ae:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    18b0:	80 91 d3 03 	lds	r24, 0x03D3
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	84 5d       	subi	r24, 0xD4	; 212
    18b8:	9e 4f       	sbci	r25, 0xFE	; 254
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    18c0:	c5 01       	movw	r24, r10
    18c2:	b7 01       	movw	r22, r14
    18c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    18c8:	c3 01       	movw	r24, r6
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    18d2:	c2 01       	movw	r24, r4
    18d4:	6f ef       	ldi	r22, 0xFF	; 255
    18d6:	7f e3       	ldi	r23, 0x3F	; 63
    18d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    18dc:	c1 01       	movw	r24, r2
    18de:	6f ef       	ldi	r22, 0xFF	; 255
    18e0:	7f e3       	ldi	r23, 0x3F	; 63
    18e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    18e6:	8e ec       	ldi	r24, 0xCE	; 206
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    18f2:	c6 01       	movw	r24, r12
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    18fc:	c4 01       	movw	r24, r8
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    1906:	c8 01       	movw	r24, r16
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    1910:	80 91 d1 03 	lds	r24, 0x03D1
    1914:	88 23       	and	r24, r24
    1916:	61 f2       	breq	.-104    	; 0x18b0 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    1918:	88 e1       	ldi	r24, 0x18	; 24
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	80 93 60 00 	sts	0x0060, r24
    1922:	10 92 60 00 	sts	0x0060, r1
    1926:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    1928:	80 91 cf 03 	lds	r24, 0x03CF
    192c:	90 91 d0 03 	lds	r25, 0x03D0
    1930:	2a a9       	sts	0x4a, r18
    1932:	3b a9       	sts	0x4b, r19
    1934:	28 17       	cp	r18, r24
    1936:	39 07       	cpc	r19, r25
    1938:	50 f0       	brcs	.+20     	; 0x194e <tune_filter+0x2f4>
    193a:	80 91 d0 02 	lds	r24, 0x02D0
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	31 f4       	brne	.+12     	; 0x194e <tune_filter+0x2f4>
    1942:	88 a9       	sts	0x48, r24
    1944:	99 a9       	sts	0x49, r25
    1946:	80 95       	com	r24
    1948:	90 95       	com	r25
    194a:	e8 22       	and	r14, r24
    194c:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    194e:	80 91 cf 03 	lds	r24, 0x03CF
    1952:	90 91 d0 03 	lds	r25, 0x03D0
    1956:	ea a9       	sts	0x4a, r30
    1958:	fb a9       	sts	0x4b, r31
    195a:	8e 17       	cp	r24, r30
    195c:	9f 07       	cpc	r25, r31
    195e:	21 f4       	brne	.+8      	; 0x1968 <tune_filter+0x30e>
    1960:	80 91 d0 02 	lds	r24, 0x02D0
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	71 f0       	breq	.+28     	; 0x1984 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	80 93 d0 02 	sts	0x02D0, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    196e:	2e a5       	lds	r18, 0x6e
    1970:	3f a5       	lds	r19, 0x6f
    1972:	21 50       	subi	r18, 0x01	; 1
    1974:	30 40       	sbci	r19, 0x00	; 0
    1976:	3f a7       	lds	r19, 0x7f
    1978:	2e a7       	lds	r18, 0x7e
    197a:	8f ef       	ldi	r24, 0xFF	; 255
    197c:	2f 3f       	cpi	r18, 0xFF	; 255
    197e:	38 07       	cpc	r19, r24
    1980:	09 f0       	breq	.+2      	; 0x1984 <tune_filter+0x32a>
    1982:	70 cf       	rjmp	.-288    	; 0x1864 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    1984:	ee a9       	sts	0x4e, r30
    1986:	ff a9       	sts	0x4f, r31
    1988:	31 96       	adiw	r30, 0x01	; 1
    198a:	ff ab       	sts	0x5f, r31
    198c:	ee ab       	sts	0x5e, r30
    198e:	c7 01       	movw	r24, r14
    1990:	80 96       	adiw	r24, 0x20	; 32
    1992:	e8 ad       	sts	0x68, r30
    1994:	f9 ad       	sts	0x69, r31
    1996:	81 93       	st	Z+, r24
    1998:	91 93       	st	Z+, r25
    199a:	f9 af       	sts	0x79, r31
    199c:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    199e:	ee e6       	ldi	r30, 0x6E	; 110
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8d 7f       	andi	r24, 0xFD	; 253
    19a6:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    19a8:	14 bc       	out	0x24, r1	; 36
    19aa:	2c a9       	sts	0x4c, r18
    19ac:	3d a9       	sts	0x4d, r19
    19ae:	2d 5f       	subi	r18, 0xFD	; 253
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	3d ab       	sts	0x5d, r19
    19b4:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    19b6:	8e a9       	sts	0x4e, r24
    19b8:	9f a9       	sts	0x4f, r25
    19ba:	8f 30       	cpi	r24, 0x0F	; 15
    19bc:	91 05       	cpc	r25, r1
    19be:	09 f0       	breq	.+2      	; 0x19c2 <tune_filter+0x368>
    19c0:	1d cf       	rjmp	.-454    	; 0x17fc <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    19c2:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    19c4:	e9 96       	adiw	r28, 0x39	; 57
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	df 90       	pop	r13
    19de:	cf 90       	pop	r12
    19e0:	bf 90       	pop	r11
    19e2:	af 90       	pop	r10
    19e4:	9f 90       	pop	r9
    19e6:	8f 90       	pop	r8
    19e8:	7f 90       	pop	r7
    19ea:	6f 90       	pop	r6
    19ec:	5f 90       	pop	r5
    19ee:	4f 90       	pop	r4
    19f0:	3f 90       	pop	r3
    19f2:	2f 90       	pop	r2
    19f4:	08 95       	ret

000019f6 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    19f6:	86 e6       	ldi	r24, 0x66	; 102
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	6e e0       	ldi	r22, 0x0E	; 14
    19fc:	77 e0       	ldi	r23, 0x07	; 7
    19fe:	40 e2       	ldi	r20, 0x20	; 32
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    1a06:	88 ea       	ldi	r24, 0xA8	; 168
    1a08:	93 e0       	ldi	r25, 0x03	; 3
    1a0a:	60 e5       	ldi	r22, 0x50	; 80
    1a0c:	77 e0       	ldi	r23, 0x07	; 7
    1a0e:	42 e2       	ldi	r20, 0x22	; 34
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    1a16:	86 e8       	ldi	r24, 0x86	; 134
    1a18:	93 e0       	ldi	r25, 0x03	; 3
    1a1a:	6e e2       	ldi	r22, 0x2E	; 46
    1a1c:	77 e0       	ldi	r23, 0x07	; 7
    1a1e:	42 e2       	ldi	r20, 0x22	; 34
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__eeupd_block_m6450a>
	
	
}
    1a26:	08 95       	ret

00001a28 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    1a28:	84 e7       	ldi	r24, 0x74	; 116
    1a2a:	97 e0       	ldi	r25, 0x07	; 7
    1a2c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__eerd_word_m6450a>
    1a30:	90 93 cd 03 	sts	0x03CD, r25
    1a34:	80 93 cc 03 	sts	0x03CC, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    1a38:	82 e7       	ldi	r24, 0x72	; 114
    1a3a:	97 e0       	ldi	r25, 0x07	; 7
    1a3c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__eerd_word_m6450a>
    1a40:	90 93 cb 03 	sts	0x03CB, r25
    1a44:	80 93 ca 03 	sts	0x03CA, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    1a48:	88 ea       	ldi	r24, 0xA8	; 168
    1a4a:	93 e0       	ldi	r25, 0x03	; 3
    1a4c:	60 e5       	ldi	r22, 0x50	; 80
    1a4e:	77 e0       	ldi	r23, 0x07	; 7
    1a50:	42 e2       	ldi	r20, 0x22	; 34
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    1a58:	86 e8       	ldi	r24, 0x86	; 134
    1a5a:	93 e0       	ldi	r25, 0x03	; 3
    1a5c:	6e e2       	ldi	r22, 0x2E	; 46
    1a5e:	77 e0       	ldi	r23, 0x07	; 7
    1a60:	42 e2       	ldi	r20, 0x22	; 34
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    1a68:	86 e6       	ldi	r24, 0x66	; 102
    1a6a:	93 e0       	ldi	r25, 0x03	; 3
    1a6c:	6e e0       	ldi	r22, 0x0E	; 14
    1a6e:	77 e0       	ldi	r23, 0x07	; 7
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    1a78:	08 95       	ret

00001a7a <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    1a7a:	98 2f       	mov	r25, r24
    1a7c:	96 95       	lsr	r25
    1a7e:	96 95       	lsr	r25
    1a80:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    1a82:	29 2f       	mov	r18, r25
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	f9 01       	movw	r30, r18
    1a88:	31 97       	sbiw	r30, 0x01	; 1
    1a8a:	ee 0f       	add	r30, r30
    1a8c:	ff 1f       	adc	r31, r31
    1a8e:	e6 0f       	add	r30, r22
    1a90:	f7 1f       	adc	r31, r23
    1a92:	01 90       	ld	r0, Z+
    1a94:	f0 81       	ld	r31, Z
    1a96:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    1a98:	22 0f       	add	r18, r18
    1a9a:	33 1f       	adc	r19, r19
    1a9c:	26 0f       	add	r18, r22
    1a9e:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    1aa0:	d9 01       	movw	r26, r18
    1aa2:	4d 91       	ld	r20, X+
    1aa4:	5c 91       	ld	r21, X
    1aa6:	11 97       	sbiw	r26, 0x01	; 1
    1aa8:	4e 1b       	sub	r20, r30
    1aaa:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    1aac:	99 0f       	add	r25, r25
    1aae:	99 0f       	add	r25, r25
    1ab0:	99 0f       	add	r25, r25
    1ab2:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	48 9f       	mul	r20, r24
    1ab8:	90 01       	movw	r18, r0
    1aba:	49 9f       	mul	r20, r25
    1abc:	30 0d       	add	r19, r0
    1abe:	58 9f       	mul	r21, r24
    1ac0:	30 0d       	add	r19, r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	36 95       	lsr	r19
    1ac6:	27 95       	ror	r18
    1ac8:	36 95       	lsr	r19
    1aca:	27 95       	ror	r18
    1acc:	36 95       	lsr	r19
    1ace:	27 95       	ror	r18
    1ad0:	e2 0f       	add	r30, r18
    1ad2:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    1ad4:	8e 2f       	mov	r24, r30
    1ad6:	9f 2f       	mov	r25, r31
    1ad8:	08 95       	ret

00001ada <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	a2 97       	sbiw	r28, 0x22	; 34
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    1aee:	de 01       	movw	r26, r28
    1af0:	11 96       	adiw	r26, 0x01	; 1
    1af2:	ee ea       	ldi	r30, 0xAE	; 174
    1af4:	f2 e0       	ldi	r31, 0x02	; 2
    1af6:	82 e2       	ldi	r24, 0x22	; 34
    1af8:	01 90       	ld	r0, Z+
    1afa:	0d 92       	st	X+, r0
    1afc:	81 50       	subi	r24, 0x01	; 1
    1afe:	e1 f7       	brne	.-8      	; 0x1af8 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    1b00:	a8 ea       	ldi	r26, 0xA8	; 168
    1b02:	b3 e0       	ldi	r27, 0x03	; 3
    1b04:	fe 01       	movw	r30, r28
    1b06:	31 96       	adiw	r30, 0x01	; 1
    1b08:	82 e2       	ldi	r24, 0x22	; 34
    1b0a:	01 90       	ld	r0, Z+
    1b0c:	0d 92       	st	X+, r0
    1b0e:	81 50       	subi	r24, 0x01	; 1
    1b10:	e1 f7       	brne	.-8      	; 0x1b0a <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    1b12:	a6 e8       	ldi	r26, 0x86	; 134
    1b14:	b3 e0       	ldi	r27, 0x03	; 3
    1b16:	fe 01       	movw	r30, r28
    1b18:	31 96       	adiw	r30, 0x01	; 1
    1b1a:	82 e2       	ldi	r24, 0x22	; 34
    1b1c:	01 90       	ld	r0, Z+
    1b1e:	0d 92       	st	X+, r0
    1b20:	81 50       	subi	r24, 0x01	; 1
    1b22:	e1 f7       	brne	.-8      	; 0x1b1c <set_one_volt_per_octave+0x42>
	
	
    1b24:	a2 96       	adiw	r28, 0x22	; 34
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	08 95       	ret

00001b36 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    1b36:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    1b38:	80 91 d8 03 	lds	r24, 0x03D8
    1b3c:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    1b3e:	89 27       	eor	r24, r25
    1b40:	80 93 d8 03 	sts	0x03D8, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    1b44:	89 23       	and	r24, r25
    1b46:	08 95       	ret

00001b48 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1b48:	ed ed       	ldi	r30, 0xDD	; 221
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	90 81       	ld	r25, Z
    1b4e:	9f 7b       	andi	r25, 0xBF	; 191
    1b50:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	21 70       	andi	r18, 0x01	; 1
    1b58:	30 70       	andi	r19, 0x00	; 0
    1b5a:	22 0f       	add	r18, r18
    1b5c:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    1b5e:	68 2f       	mov	r22, r24
    1b60:	62 95       	swap	r22
    1b62:	66 95       	lsr	r22
    1b64:	67 70       	andi	r22, 0x07	; 7
    1b66:	67 95       	ror	r22
    1b68:	66 27       	eor	r22, r22
    1b6a:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1b6c:	26 2b       	or	r18, r22
    1b6e:	98 2f       	mov	r25, r24
    1b70:	96 95       	lsr	r25
    1b72:	96 95       	lsr	r25
    1b74:	91 70       	andi	r25, 0x01	; 1
    1b76:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    1b78:	68 2f       	mov	r22, r24
    1b7a:	66 1f       	adc	r22, r22
    1b7c:	66 27       	eor	r22, r22
    1b7e:	66 1f       	adc	r22, r22
    1b80:	66 0f       	add	r22, r22
    1b82:	66 0f       	add	r22, r22
    1b84:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1b86:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    1b88:	a8 2f       	mov	r26, r24
    1b8a:	a6 95       	lsr	r26
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	a1 70       	andi	r26, 0x01	; 1
    1b90:	b0 70       	andi	r27, 0x00	; 0
    1b92:	bd 01       	movw	r22, r26
    1b94:	66 0f       	add	r22, r22
    1b96:	77 1f       	adc	r23, r23
    1b98:	66 0f       	add	r22, r22
    1b9a:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1b9c:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    1b9e:	68 2f       	mov	r22, r24
    1ba0:	62 95       	swap	r22
    1ba2:	6f 70       	andi	r22, 0x0F	; 15
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	61 70       	andi	r22, 0x01	; 1
    1ba8:	70 70       	andi	r23, 0x00	; 0
    1baa:	ab 01       	movw	r20, r22
    1bac:	00 24       	eor	r0, r0
    1bae:	56 95       	lsr	r21
    1bb0:	47 95       	ror	r20
    1bb2:	07 94       	ror	r0
    1bb4:	56 95       	lsr	r21
    1bb6:	47 95       	ror	r20
    1bb8:	07 94       	ror	r0
    1bba:	54 2f       	mov	r21, r20
    1bbc:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1bbe:	62 2f       	mov	r22, r18
    1bc0:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	42 95       	swap	r20
    1bc6:	46 95       	lsr	r20
    1bc8:	46 95       	lsr	r20
    1bca:	43 70       	andi	r20, 0x03	; 3
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	41 70       	andi	r20, 0x01	; 1
    1bd0:	50 70       	andi	r21, 0x00	; 0
    1bd2:	9a 01       	movw	r18, r20
    1bd4:	22 0f       	add	r18, r18
    1bd6:	33 1f       	adc	r19, r19
    1bd8:	22 95       	swap	r18
    1bda:	32 95       	swap	r19
    1bdc:	30 7f       	andi	r19, 0xF0	; 240
    1bde:	32 27       	eor	r19, r18
    1be0:	20 7f       	andi	r18, 0xF0	; 240
    1be2:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1be4:	46 2f       	mov	r20, r22
    1be6:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    1be8:	86 95       	lsr	r24
    1bea:	86 95       	lsr	r24
    1bec:	86 95       	lsr	r24
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	21 70       	andi	r18, 0x01	; 1
    1bf4:	30 70       	andi	r19, 0x00	; 0
    1bf6:	c9 01       	movw	r24, r18
    1bf8:	82 95       	swap	r24
    1bfa:	92 95       	swap	r25
    1bfc:	90 7f       	andi	r25, 0xF0	; 240
    1bfe:	98 27       	eor	r25, r24
    1c00:	80 7f       	andi	r24, 0xF0	; 240
    1c02:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1c04:	84 2b       	or	r24, r20
    1c06:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1c08:	80 81       	ld	r24, Z
    1c0a:	80 64       	ori	r24, 0x40	; 64
    1c0c:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1c0e:	80 81       	ld	r24, Z
    1c10:	8f 7b       	andi	r24, 0xBF	; 191
    1c12:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1c14:	12 b8       	out	0x02, r1	; 2
	
	
    1c16:	08 95       	ret

00001c18 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1c18:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1c1a:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1c1c:	74 83       	std	Z+4, r23	; 0x04
    1c1e:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    1c20:	11 82       	std	Z+1, r1	; 0x01
    1c22:	10 82       	st	Z, r1
}
    1c24:	08 95       	ret

00001c26 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	ec 01       	movw	r28, r24
    1c2e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1c30:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <store_and_clear_interrupt>
    1c34:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1c36:	39 81       	ldd	r19, Y+1	; 0x01
    1c38:	83 2f       	mov	r24, r19
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	01 96       	adiw	r24, 0x01	; 1
    1c3e:	6a 81       	ldd	r22, Y+2	; 0x02
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__divmodhi4>
    1c46:	48 81       	ld	r20, Y
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	84 17       	cp	r24, r20
    1c4c:	95 07       	cpc	r25, r21
    1c4e:	29 f4       	brne	.+10     	; 0x1c5a <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    1c50:	82 2f       	mov	r24, r18
    1c52:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <restore_interrupt_setting>
      return false;
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	11 c0       	rjmp	.+34     	; 0x1c7c <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    1c5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c5e:	e3 0f       	add	r30, r19
    1c60:	f1 1d       	adc	r31, r1
    1c62:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	6a 81       	ldd	r22, Y+2	; 0x02
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__divmodhi4>
    1c72:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1c74:	82 2f       	mov	r24, r18
    1c76:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <restore_interrupt_setting>
      return true;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	08 95       	ret

00001c84 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1c8a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1c8e:	29 81       	ldd	r18, Y+1	; 0x01
    1c90:	98 81       	ld	r25, Y
    1c92:	29 17       	cp	r18, r25
    1c94:	18 f0       	brcs	.+6      	; 0x1c9c <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1c96:	c2 2f       	mov	r28, r18
    1c98:	c9 1b       	sub	r28, r25
    1c9a:	03 c0       	rjmp	.+6      	; 0x1ca2 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    1c9c:	ca 81       	ldd	r28, Y+2	; 0x02
    1c9e:	c2 0f       	add	r28, r18
    1ca0:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    1ca2:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <restore_interrupt_setting>
   return len;
}
    1ca6:	8c 2f       	mov	r24, r28
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1cae:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1cb0:	20 81       	ld	r18, Z
    1cb2:	86 2f       	mov	r24, r22
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	82 0f       	add	r24, r18
    1cb8:	91 1d       	adc	r25, r1
    1cba:	62 81       	ldd	r22, Z+2	; 0x02
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__divmodhi4>
    1cc2:	03 80       	ldd	r0, Z+3	; 0x03
    1cc4:	f4 81       	ldd	r31, Z+4	; 0x04
    1cc6:	e0 2d       	mov	r30, r0
    1cc8:	e8 0f       	add	r30, r24
    1cca:	f9 1f       	adc	r31, r25
}
    1ccc:	80 81       	ld	r24, Z
    1cce:	08 95       	ret

00001cd0 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	ec 01       	movw	r28, r24
    1cd8:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1cda:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <store_and_clear_interrupt>
    1cde:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1ce0:	88 81       	ld	r24, Y
    1ce2:	21 2f       	mov	r18, r17
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	28 0f       	add	r18, r24
    1ce8:	31 1d       	adc	r19, r1
    1cea:	6a 81       	ldd	r22, Y+2	; 0x02
    1cec:	c9 01       	movw	r24, r18
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__divmodhi4>
    1cf4:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1cf6:	84 2f       	mov	r24, r20
    1cf8:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <restore_interrupt_setting>
}
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	08 95       	ret

00001d04 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1d04:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1d06:	f8 94       	cli
   return sreg;
}
    1d08:	08 95       	ret

00001d0a <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1d0a:	8f bf       	out	0x3f, r24	; 63
}
    1d0c:	08 95       	ret

00001d0e <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1d0e:	88 1f       	adc	r24, r24
    1d10:	88 27       	eor	r24, r24
    1d12:	88 1f       	adc	r24, r24
    1d14:	08 95       	ret

00001d16 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	88 3f       	cpi	r24, 0xF8	; 248
    1d1a:	08 f4       	brcc	.+2      	; 0x1d1e <midi_is_realtime+0x8>
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
}
    1d1e:	89 2f       	mov	r24, r25
    1d20:	08 95       	ret

00001d22 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	20 7f       	andi	r18, 0xF0	; 240
    1d28:	30 70       	andi	r19, 0x00	; 0
    1d2a:	20 3c       	cpi	r18, 0xC0	; 192
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	e9 f1       	breq	.+122    	; 0x1daa <midi_packet_length+0x88>
    1d30:	21 3c       	cpi	r18, 0xC1	; 193
    1d32:	31 05       	cpc	r19, r1
    1d34:	8c f4       	brge	.+34     	; 0x1d58 <midi_packet_length+0x36>
    1d36:	20 39       	cpi	r18, 0x90	; 144
    1d38:	31 05       	cpc	r19, r1
    1d3a:	e1 f0       	breq	.+56     	; 0x1d74 <midi_packet_length+0x52>
    1d3c:	21 39       	cpi	r18, 0x91	; 145
    1d3e:	31 05       	cpc	r19, r1
    1d40:	24 f4       	brge	.+8      	; 0x1d4a <midi_packet_length+0x28>
    1d42:	20 38       	cpi	r18, 0x80	; 128
    1d44:	31 05       	cpc	r19, r1
    1d46:	79 f5       	brne	.+94     	; 0x1da6 <midi_packet_length+0x84>
    1d48:	15 c0       	rjmp	.+42     	; 0x1d74 <midi_packet_length+0x52>
    1d4a:	20 3a       	cpi	r18, 0xA0	; 160
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	91 f0       	breq	.+36     	; 0x1d74 <midi_packet_length+0x52>
    1d50:	20 3b       	cpi	r18, 0xB0	; 176
    1d52:	31 05       	cpc	r19, r1
    1d54:	41 f5       	brne	.+80     	; 0x1da6 <midi_packet_length+0x84>
    1d56:	0e c0       	rjmp	.+28     	; 0x1d74 <midi_packet_length+0x52>
    1d58:	20 3e       	cpi	r18, 0xE0	; 224
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	59 f0       	breq	.+22     	; 0x1d74 <midi_packet_length+0x52>
    1d5e:	21 3e       	cpi	r18, 0xE1	; 225
    1d60:	31 05       	cpc	r19, r1
    1d62:	24 f4       	brge	.+8      	; 0x1d6c <midi_packet_length+0x4a>
    1d64:	20 3d       	cpi	r18, 0xD0	; 208
    1d66:	31 05       	cpc	r19, r1
    1d68:	f1 f4       	brne	.+60     	; 0x1da6 <midi_packet_length+0x84>
    1d6a:	1f c0       	rjmp	.+62     	; 0x1daa <midi_packet_length+0x88>
    1d6c:	20 3f       	cpi	r18, 0xF0	; 240
    1d6e:	31 05       	cpc	r19, r1
    1d70:	d1 f4       	brne	.+52     	; 0x1da6 <midi_packet_length+0x84>
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1d74:	83 e0       	ldi	r24, 0x03	; 3
    1d76:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    1d78:	86 3f       	cpi	r24, 0xF6	; 246
    1d7a:	79 f0       	breq	.+30     	; 0x1d9a <midi_packet_length+0x78>
    1d7c:	87 3f       	cpi	r24, 0xF7	; 247
    1d7e:	38 f4       	brcc	.+14     	; 0x1d8e <midi_packet_length+0x6c>
    1d80:	82 3f       	cpi	r24, 0xF2	; 242
    1d82:	a9 f0       	breq	.+42     	; 0x1dae <midi_packet_length+0x8c>
    1d84:	83 3f       	cpi	r24, 0xF3	; 243
    1d86:	59 f0       	breq	.+22     	; 0x1d9e <midi_packet_length+0x7c>
    1d88:	81 3f       	cpi	r24, 0xF1	; 241
    1d8a:	59 f4       	brne	.+22     	; 0x1da2 <midi_packet_length+0x80>
    1d8c:	08 c0       	rjmp	.+16     	; 0x1d9e <midi_packet_length+0x7c>
    1d8e:	88 3f       	cpi	r24, 0xF8	; 248
    1d90:	40 f0       	brcs	.+16     	; 0x1da2 <midi_packet_length+0x80>
    1d92:	8d 3f       	cpi	r24, 0xFD	; 253
    1d94:	10 f0       	brcs	.+4      	; 0x1d9a <midi_packet_length+0x78>
    1d96:	8e 3f       	cpi	r24, 0xFE	; 254
    1d98:	20 f0       	brcs	.+8      	; 0x1da2 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1dae:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1db0:	08 95       	ret

00001db2 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1db2:	0f 93       	push	r16
    1db4:	34 2f       	mov	r19, r20
    1db6:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1db8:	46 2f       	mov	r20, r22
    1dba:	4f 70       	andi	r20, 0x0F	; 15
    1dbc:	40 6b       	ori	r20, 0xB0	; 176
    1dbe:	23 2f       	mov	r18, r19
    1dc0:	2f 77       	andi	r18, 0x7F	; 127
    1dc2:	0f 77       	andi	r16, 0x7F	; 127
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	ed 91       	ld	r30, X+
    1dc8:	fc 91       	ld	r31, X
    1dca:	63 e0       	ldi	r22, 0x03	; 3
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1dd0:	0f 91       	pop	r16
    1dd2:	08 95       	ret

00001dd4 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1dd4:	0f 93       	push	r16
    1dd6:	34 2f       	mov	r19, r20
    1dd8:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1dda:	46 2f       	mov	r20, r22
    1ddc:	4f 70       	andi	r20, 0x0F	; 15
    1dde:	40 69       	ori	r20, 0x90	; 144
    1de0:	23 2f       	mov	r18, r19
    1de2:	2f 77       	andi	r18, 0x7F	; 127
    1de4:	0f 77       	andi	r16, 0x7F	; 127
    1de6:	dc 01       	movw	r26, r24
    1de8:	ed 91       	ld	r30, X+
    1dea:	fc 91       	ld	r31, X
    1dec:	63 e0       	ldi	r22, 0x03	; 3
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1df2:	0f 91       	pop	r16
    1df4:	08 95       	ret

00001df6 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1df6:	0f 93       	push	r16
    1df8:	34 2f       	mov	r19, r20
    1dfa:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1dfc:	46 2f       	mov	r20, r22
    1dfe:	4f 70       	andi	r20, 0x0F	; 15
    1e00:	40 68       	ori	r20, 0x80	; 128
    1e02:	23 2f       	mov	r18, r19
    1e04:	2f 77       	andi	r18, 0x7F	; 127
    1e06:	0f 77       	andi	r16, 0x7F	; 127
    1e08:	dc 01       	movw	r26, r24
    1e0a:	ed 91       	ld	r30, X+
    1e0c:	fc 91       	ld	r31, X
    1e0e:	63 e0       	ldi	r22, 0x03	; 3
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1e14:	0f 91       	pop	r16
    1e16:	08 95       	ret

00001e18 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1e18:	0f 93       	push	r16
    1e1a:	34 2f       	mov	r19, r20
    1e1c:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    1e1e:	46 2f       	mov	r20, r22
    1e20:	4f 70       	andi	r20, 0x0F	; 15
    1e22:	40 6a       	ori	r20, 0xA0	; 160
    1e24:	23 2f       	mov	r18, r19
    1e26:	2f 77       	andi	r18, 0x7F	; 127
    1e28:	0f 77       	andi	r16, 0x7F	; 127
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	ed 91       	ld	r30, X+
    1e2e:	fc 91       	ld	r31, X
    1e30:	63 e0       	ldi	r22, 0x03	; 3
    1e32:	70 e0       	ldi	r23, 0x00	; 0
    1e34:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    1e36:	0f 91       	pop	r16
    1e38:	08 95       	ret

00001e3a <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1e3e:	20 e2       	ldi	r18, 0x20	; 32
    1e40:	40 30       	cpi	r20, 0x00	; 0
    1e42:	52 07       	cpc	r21, r18
    1e44:	44 f4       	brge	.+16     	; 0x1e56 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    1e46:	a0 ee       	ldi	r26, 0xE0	; 224
    1e48:	40 30       	cpi	r20, 0x00	; 0
    1e4a:	5a 07       	cpc	r21, r26
    1e4c:	3c f0       	brlt	.+14     	; 0x1e5c <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1e4e:	8a 01       	movw	r16, r20
    1e50:	00 50       	subi	r16, 0x00	; 0
    1e52:	10 4e       	sbci	r17, 0xE0	; 224
    1e54:	05 c0       	rjmp	.+10     	; 0x1e60 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1e56:	0f ef       	ldi	r16, 0xFF	; 255
    1e58:	1f e3       	ldi	r17, 0x3F	; 63
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    1e5c:	00 e0       	ldi	r16, 0x00	; 0
    1e5e:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1e60:	46 2f       	mov	r20, r22
    1e62:	4f 70       	andi	r20, 0x0F	; 15
    1e64:	40 6e       	ori	r20, 0xE0	; 224
    1e66:	20 2f       	mov	r18, r16
    1e68:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1e6a:	00 0f       	add	r16, r16
    1e6c:	01 2f       	mov	r16, r17
    1e6e:	00 1f       	adc	r16, r16
    1e70:	11 0b       	sbc	r17, r17
    1e72:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1e74:	0f 77       	andi	r16, 0x7F	; 127
    1e76:	dc 01       	movw	r26, r24
    1e78:	ed 91       	ld	r30, X+
    1e7a:	fc 91       	ld	r31, X
    1e7c:	63 e0       	ldi	r22, 0x03	; 3
    1e7e:	70 e0       	ldi	r23, 0x00	; 0
    1e80:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	08 95       	ret

00001e88 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1e88:	0f 93       	push	r16
    1e8a:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1e8c:	46 2f       	mov	r20, r22
    1e8e:	4f 70       	andi	r20, 0x0F	; 15
    1e90:	40 6c       	ori	r20, 0xC0	; 192
    1e92:	2f 77       	andi	r18, 0x7F	; 127
    1e94:	dc 01       	movw	r26, r24
    1e96:	ed 91       	ld	r30, X+
    1e98:	fc 91       	ld	r31, X
    1e9a:	62 e0       	ldi	r22, 0x02	; 2
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	00 e0       	ldi	r16, 0x00	; 0
    1ea0:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1ea2:	0f 91       	pop	r16
    1ea4:	08 95       	ret

00001ea6 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1ea6:	0f 93       	push	r16
    1ea8:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1eaa:	46 2f       	mov	r20, r22
    1eac:	4f 70       	andi	r20, 0x0F	; 15
    1eae:	40 6d       	ori	r20, 0xD0	; 208
    1eb0:	2f 77       	andi	r18, 0x7F	; 127
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	ed 91       	ld	r30, X+
    1eb6:	fc 91       	ld	r31, X
    1eb8:	62 e0       	ldi	r22, 0x02	; 2
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	00 e0       	ldi	r16, 0x00	; 0
    1ebe:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1ec4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	ed 91       	ld	r30, X+
    1eca:	fc 91       	ld	r31, X
    1ecc:	61 e0       	ldi	r22, 0x01	; 1
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	48 ef       	ldi	r20, 0xF8	; 248
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	00 e0       	ldi	r16, 0x00	; 0
    1ed6:	09 95       	icall
}
    1ed8:	0f 91       	pop	r16
    1eda:	08 95       	ret

00001edc <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1edc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1ede:	dc 01       	movw	r26, r24
    1ee0:	ed 91       	ld	r30, X+
    1ee2:	fc 91       	ld	r31, X
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	49 ef       	ldi	r20, 0xF9	; 249
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	00 e0       	ldi	r16, 0x00	; 0
    1eee:	09 95       	icall
}
    1ef0:	0f 91       	pop	r16
    1ef2:	08 95       	ret

00001ef4 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1ef4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	ed 91       	ld	r30, X+
    1efa:	fc 91       	ld	r31, X
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	4a ef       	ldi	r20, 0xFA	; 250
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	00 e0       	ldi	r16, 0x00	; 0
    1f06:	09 95       	icall
}
    1f08:	0f 91       	pop	r16
    1f0a:	08 95       	ret

00001f0c <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1f0c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1f0e:	dc 01       	movw	r26, r24
    1f10:	ed 91       	ld	r30, X+
    1f12:	fc 91       	ld	r31, X
    1f14:	61 e0       	ldi	r22, 0x01	; 1
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	4b ef       	ldi	r20, 0xFB	; 251
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	00 e0       	ldi	r16, 0x00	; 0
    1f1e:	09 95       	icall
}
    1f20:	0f 91       	pop	r16
    1f22:	08 95       	ret

00001f24 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1f24:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1f26:	dc 01       	movw	r26, r24
    1f28:	ed 91       	ld	r30, X+
    1f2a:	fc 91       	ld	r31, X
    1f2c:	61 e0       	ldi	r22, 0x01	; 1
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	4c ef       	ldi	r20, 0xFC	; 252
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	00 e0       	ldi	r16, 0x00	; 0
    1f36:	09 95       	icall
}
    1f38:	0f 91       	pop	r16
    1f3a:	08 95       	ret

00001f3c <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1f3c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1f3e:	dc 01       	movw	r26, r24
    1f40:	ed 91       	ld	r30, X+
    1f42:	fc 91       	ld	r31, X
    1f44:	61 e0       	ldi	r22, 0x01	; 1
    1f46:	70 e0       	ldi	r23, 0x00	; 0
    1f48:	4e ef       	ldi	r20, 0xFE	; 254
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	00 e0       	ldi	r16, 0x00	; 0
    1f4e:	09 95       	icall
}
    1f50:	0f 91       	pop	r16
    1f52:	08 95       	ret

00001f54 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1f54:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1f56:	dc 01       	movw	r26, r24
    1f58:	ed 91       	ld	r30, X+
    1f5a:	fc 91       	ld	r31, X
    1f5c:	61 e0       	ldi	r22, 0x01	; 1
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	4f ef       	ldi	r20, 0xFF	; 255
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	00 e0       	ldi	r16, 0x00	; 0
    1f66:	09 95       	icall
}
    1f68:	0f 91       	pop	r16
    1f6a:	08 95       	ret

00001f6c <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1f6c:	0f 93       	push	r16
   device->send_func(device, 2,
    1f6e:	26 2f       	mov	r18, r22
    1f70:	2f 77       	andi	r18, 0x7F	; 127
    1f72:	dc 01       	movw	r26, r24
    1f74:	ed 91       	ld	r30, X+
    1f76:	fc 91       	ld	r31, X
    1f78:	62 e0       	ldi	r22, 0x02	; 2
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	41 ef       	ldi	r20, 0xF1	; 241
    1f7e:	00 e0       	ldi	r16, 0x00	; 0
    1f80:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1f82:	0f 91       	pop	r16
    1f84:	08 95       	ret

00001f86 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
   device->send_func(device, 3,
    1f8a:	26 2f       	mov	r18, r22
    1f8c:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1f8e:	8b 01       	movw	r16, r22
    1f90:	00 0f       	add	r16, r16
    1f92:	01 2f       	mov	r16, r17
    1f94:	00 1f       	adc	r16, r16
    1f96:	11 0b       	sbc	r17, r17
    1f98:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1f9a:	0f 77       	andi	r16, 0x7F	; 127
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	ed 91       	ld	r30, X+
    1fa0:	fc 91       	ld	r31, X
    1fa2:	63 e0       	ldi	r22, 0x03	; 3
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	42 ef       	ldi	r20, 0xF2	; 242
    1fa8:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16
    1fae:	08 95       	ret

00001fb0 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1fb0:	0f 93       	push	r16
   device->send_func(device, 2,
    1fb2:	26 2f       	mov	r18, r22
    1fb4:	2f 77       	andi	r18, 0x7F	; 127
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	ed 91       	ld	r30, X+
    1fba:	fc 91       	ld	r31, X
    1fbc:	62 e0       	ldi	r22, 0x02	; 2
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	43 ef       	ldi	r20, 0xF3	; 243
    1fc2:	00 e0       	ldi	r16, 0x00	; 0
    1fc4:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1fc6:	0f 91       	pop	r16
    1fc8:	08 95       	ret

00001fca <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1fca:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1fcc:	dc 01       	movw	r26, r24
    1fce:	ed 91       	ld	r30, X+
    1fd0:	fc 91       	ld	r31, X
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	46 ef       	ldi	r20, 0xF6	; 246
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	00 e0       	ldi	r16, 0x00	; 0
    1fdc:	09 95       	icall
}
    1fde:	0f 91       	pop	r16
    1fe0:	08 95       	ret

00001fe2 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1fe2:	0f 93       	push	r16
    1fe4:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	ed 91       	ld	r30, X+
    1fea:	fc 91       	ld	r31, X
    1fec:	61 e0       	ldi	r22, 0x01	; 1
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	00 e0       	ldi	r16, 0x00	; 0
    1ff4:	09 95       	icall
}
    1ff6:	0f 91       	pop	r16
    1ff8:	08 95       	ret

00001ffa <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1ffa:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	ed 91       	ld	r30, X+
    2000:	fc 91       	ld	r31, X
    2002:	09 95       	icall
}
    2004:	0f 91       	pop	r16
    2006:	08 95       	ret

00002008 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2008:	6f 92       	push	r6
    200a:	7f 92       	push	r7
    200c:	8f 92       	push	r8
    200e:	9f 92       	push	r9
    2010:	af 92       	push	r10
    2012:	bf 92       	push	r11
    2014:	cf 92       	push	r12
    2016:	df 92       	push	r13
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	00 d0       	rcall	.+0      	; 0x2026 <midi_send_array+0x1e>
    2026:	0f 92       	push	r0
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	4c 01       	movw	r8, r24
    202e:	6b 01       	movw	r12, r22
    2030:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2032:	61 15       	cp	r22, r1
    2034:	71 05       	cpc	r23, r1
    2036:	41 f1       	breq	.+80     	; 0x2088 <midi_send_array+0x80>
    2038:	ee 24       	eor	r14, r14
    203a:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    203c:	0f 2e       	mov	r0, r31
    203e:	f3 e0       	ldi	r31, 0x03	; 3
    2040:	6f 2e       	mov	r6, r31
    2042:	77 24       	eor	r7, r7
    2044:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2046:	19 82       	std	Y+1, r1	; 0x01
    2048:	1a 82       	std	Y+2, r1	; 0x02
    204a:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    204c:	86 01       	movw	r16, r12
    204e:	0e 19       	sub	r16, r14
    2050:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2052:	04 30       	cpi	r16, 0x04	; 4
    2054:	11 05       	cpc	r17, r1
    2056:	08 f0       	brcs	.+2      	; 0x205a <midi_send_array+0x52>
    2058:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    205a:	b5 01       	movw	r22, r10
    205c:	6e 0d       	add	r22, r14
    205e:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2060:	ce 01       	movw	r24, r28
    2062:	01 96       	adiw	r24, 0x01	; 1
    2064:	40 2f       	mov	r20, r16
    2066:	51 2f       	mov	r21, r17
    2068:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    206c:	c4 01       	movw	r24, r8
    206e:	b8 01       	movw	r22, r16
    2070:	49 81       	ldd	r20, Y+1	; 0x01
    2072:	2a 81       	ldd	r18, Y+2	; 0x02
    2074:	0b 81       	ldd	r16, Y+3	; 0x03
    2076:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	e8 0e       	add	r14, r24
    2080:	f9 1e       	adc	r15, r25
    2082:	ec 14       	cp	r14, r12
    2084:	fd 04       	cpc	r15, r13
    2086:	f8 f2       	brcs	.-66     	; 0x2046 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	df 90       	pop	r13
    209c:	cf 90       	pop	r12
    209e:	bf 90       	pop	r11
    20a0:	af 90       	pop	r10
    20a2:	9f 90       	pop	r9
    20a4:	8f 90       	pop	r8
    20a6:	7f 90       	pop	r7
    20a8:	6f 90       	pop	r6
    20aa:	08 95       	ret

000020ac <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    20ac:	fc 01       	movw	r30, r24
    20ae:	73 83       	std	Z+3, r23	; 0x03
    20b0:	62 83       	std	Z+2, r22	; 0x02
}
    20b2:	08 95       	ret

000020b4 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    20b4:	fc 01       	movw	r30, r24
    20b6:	75 83       	std	Z+5, r23	; 0x05
    20b8:	64 83       	std	Z+4, r22	; 0x04
}
    20ba:	08 95       	ret

000020bc <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    20bc:	fc 01       	movw	r30, r24
    20be:	77 83       	std	Z+7, r23	; 0x07
    20c0:	66 83       	std	Z+6, r22	; 0x06
}
    20c2:	08 95       	ret

000020c4 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    20c4:	fc 01       	movw	r30, r24
    20c6:	71 87       	std	Z+9, r23	; 0x09
    20c8:	60 87       	std	Z+8, r22	; 0x08
}
    20ca:	08 95       	ret

000020cc <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    20cc:	fc 01       	movw	r30, r24
    20ce:	73 87       	std	Z+11, r23	; 0x0b
    20d0:	62 87       	std	Z+10, r22	; 0x0a
}
    20d2:	08 95       	ret

000020d4 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    20d4:	fc 01       	movw	r30, r24
    20d6:	75 87       	std	Z+13, r23	; 0x0d
    20d8:	64 87       	std	Z+12, r22	; 0x0c
}
    20da:	08 95       	ret

000020dc <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    20dc:	fc 01       	movw	r30, r24
    20de:	77 87       	std	Z+15, r23	; 0x0f
    20e0:	66 87       	std	Z+14, r22	; 0x0e
}
    20e2:	08 95       	ret

000020e4 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    20e4:	fc 01       	movw	r30, r24
    20e6:	71 8b       	std	Z+17, r23	; 0x11
    20e8:	60 8b       	std	Z+16, r22	; 0x10
}
    20ea:	08 95       	ret

000020ec <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    20ec:	fc 01       	movw	r30, r24
    20ee:	73 8b       	std	Z+19, r23	; 0x13
    20f0:	62 8b       	std	Z+18, r22	; 0x12
}
    20f2:	08 95       	ret

000020f4 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    20f4:	fc 01       	movw	r30, r24
    20f6:	75 8b       	std	Z+21, r23	; 0x15
    20f8:	64 8b       	std	Z+20, r22	; 0x14
}
    20fa:	08 95       	ret

000020fc <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    20fc:	fc 01       	movw	r30, r24
    20fe:	77 8b       	std	Z+23, r23	; 0x17
    2100:	66 8b       	std	Z+22, r22	; 0x16
}
    2102:	08 95       	ret

00002104 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2104:	fc 01       	movw	r30, r24
    2106:	71 8f       	std	Z+25, r23	; 0x19
    2108:	60 8f       	std	Z+24, r22	; 0x18
}
    210a:	08 95       	ret

0000210c <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    210c:	fc 01       	movw	r30, r24
    210e:	73 8f       	std	Z+27, r23	; 0x1b
    2110:	62 8f       	std	Z+26, r22	; 0x1a
}
    2112:	08 95       	ret

00002114 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2114:	fc 01       	movw	r30, r24
    2116:	75 8f       	std	Z+29, r23	; 0x1d
    2118:	64 8f       	std	Z+28, r22	; 0x1c
}
    211a:	08 95       	ret

0000211c <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    211c:	fc 01       	movw	r30, r24
    211e:	77 8f       	std	Z+31, r23	; 0x1f
    2120:	66 8f       	std	Z+30, r22	; 0x1e
}
    2122:	08 95       	ret

00002124 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    212a:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    212c:	1f a2       	lds	r17, 0x9f
    212e:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2130:	bc 01       	movw	r22, r24
    2132:	68 5d       	subi	r22, 0xD8	; 216
    2134:	7f 4f       	sbci	r23, 0xFF	; 255
    2136:	88 51       	subi	r24, 0x18	; 24
    2138:	9f 4f       	sbci	r25, 0xFF	; 255
    213a:	40 ec       	ldi	r20, 0xC0	; 192
    213c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2140:	1b 82       	std	Y+3, r1	; 0x03
    2142:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2144:	1d 82       	std	Y+5, r1	; 0x05
    2146:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2148:	1f 82       	std	Y+7, r1	; 0x07
    214a:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    214c:	19 86       	std	Y+9, r1	; 0x09
    214e:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2150:	1b 86       	std	Y+11, r1	; 0x0b
    2152:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2154:	1d 86       	std	Y+13, r1	; 0x0d
    2156:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2158:	1f 86       	std	Y+15, r1	; 0x0f
    215a:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    215c:	19 8a       	std	Y+17, r1	; 0x11
    215e:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2160:	1b 8a       	std	Y+19, r1	; 0x13
    2162:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2164:	1d 8a       	std	Y+21, r1	; 0x15
    2166:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2168:	1f 8a       	std	Y+23, r1	; 0x17
    216a:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    216c:	19 8e       	std	Y+25, r1	; 0x19
    216e:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2170:	1b 8e       	std	Y+27, r1	; 0x1b
    2172:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2174:	1d 8e       	std	Y+29, r1	; 0x1d
    2176:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2178:	1f 8e       	std	Y+31, r1	; 0x1f
    217a:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    217c:	19 a2       	lds	r17, 0x99
    217e:	18 a2       	lds	r17, 0x98
}
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2194:	66 23       	and	r22, r22
    2196:	99 f0       	breq	.+38     	; 0x21be <midi_device_input+0x38>
    2198:	04 2f       	mov	r16, r20
    219a:	15 2f       	mov	r17, r21
    219c:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    219e:	0f 2e       	mov	r0, r31
    21a0:	f8 ee       	ldi	r31, 0xE8	; 232
    21a2:	ef 2e       	mov	r14, r31
    21a4:	ff 24       	eor	r15, r15
    21a6:	f0 2d       	mov	r31, r0
    21a8:	e8 0e       	add	r14, r24
    21aa:	f9 1e       	adc	r15, r25
    21ac:	f8 01       	movw	r30, r16
    21ae:	61 91       	ld	r22, Z+
    21b0:	8f 01       	movw	r16, r30
    21b2:	c7 01       	movw	r24, r14
    21b4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    21b8:	cf 5f       	subi	r28, 0xFF	; 255
    21ba:	cd 17       	cp	r28, r29
    21bc:	b9 f7       	brne	.-18     	; 0x21ac <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	0f 91       	pop	r16
    21c6:	ff 90       	pop	r15
    21c8:	ef 90       	pop	r14
    21ca:	08 95       	ret

000021cc <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    21cc:	fc 01       	movw	r30, r24
    21ce:	71 83       	std	Z+1, r23	; 0x01
    21d0:	60 83       	st	Z, r22
}
    21d2:	08 95       	ret

000021d4 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    21d4:	fc 01       	movw	r30, r24
    21d6:	71 a3       	lds	r23, 0x51
    21d8:	60 a3       	lds	r22, 0x50
}
    21da:	08 95       	ret

000021dc <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    21dc:	af 92       	push	r10
    21de:	bf 92       	push	r11
    21e0:	cf 92       	push	r12
    21e2:	df 92       	push	r13
    21e4:	ef 92       	push	r14
    21e6:	ff 92       	push	r15
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <midi_input_callbacks+0x16>
    21f2:	0f 92       	push	r0
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	6c 01       	movw	r12, r24
    21fa:	5b 01       	movw	r10, r22
    21fc:	f4 2e       	mov	r15, r20
    21fe:	e2 2e       	mov	r14, r18
    2200:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2202:	dc 01       	movw	r26, r24
    2204:	95 96       	adiw	r26, 0x25	; 37
    2206:	8c 91       	ld	r24, X
    2208:	95 97       	sbiw	r26, 0x25	; 37
    220a:	84 30       	cpi	r24, 0x04	; 4
    220c:	e9 f4       	brne	.+58     	; 0x2248 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    220e:	5a 96       	adiw	r26, 0x1a	; 26
    2210:	ed 91       	ld	r30, X+
    2212:	fc 91       	ld	r31, X
    2214:	5b 97       	sbiw	r26, 0x1b	; 27
    2216:	30 97       	sbiw	r30, 0x00	; 0
    2218:	09 f4       	brne	.+2      	; 0x221c <midi_input_callbacks+0x40>
    221a:	ee c0       	rjmp	.+476    	; 0x23f8 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    221c:	cb 01       	movw	r24, r22
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	63 e0       	ldi	r22, 0x03	; 3
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodhi4>
    2228:	cb 01       	movw	r24, r22
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	68 0f       	add	r22, r24
    2230:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2232:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2234:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    2236:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2238:	4a 2d       	mov	r20, r10
    223a:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    223c:	c6 01       	movw	r24, r12
    223e:	9e 01       	movw	r18, r28
    2240:	2f 5f       	subi	r18, 0xFF	; 255
    2242:	3f 4f       	sbci	r19, 0xFF	; 255
    2244:	09 95       	icall
    2246:	c8 c0       	rjmp	.+400    	; 0x23d8 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    2248:	62 30       	cpi	r22, 0x02	; 2
    224a:	71 05       	cpc	r23, r1
    224c:	09 f4       	brne	.+2      	; 0x2250 <midi_input_callbacks+0x74>
    224e:	5f c0       	rjmp	.+190    	; 0x230e <midi_input_callbacks+0x132>
    2250:	63 30       	cpi	r22, 0x03	; 3
    2252:	71 05       	cpc	r23, r1
    2254:	29 f0       	breq	.+10     	; 0x2260 <midi_input_callbacks+0x84>
    2256:	61 30       	cpi	r22, 0x01	; 1
    2258:	71 05       	cpc	r23, r1
    225a:	09 f0       	breq	.+2      	; 0x225e <midi_input_callbacks+0x82>
    225c:	b3 c0       	rjmp	.+358    	; 0x23c4 <midi_input_callbacks+0x1e8>
    225e:	99 c0       	rjmp	.+306    	; 0x2392 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2260:	84 2f       	mov	r24, r20
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	80 7f       	andi	r24, 0xF0	; 240
    2266:	90 70       	andi	r25, 0x00	; 0
    2268:	80 3a       	cpi	r24, 0xA0	; 160
    226a:	91 05       	cpc	r25, r1
    226c:	29 f1       	breq	.+74     	; 0x22b8 <midi_input_callbacks+0xdc>
    226e:	81 3a       	cpi	r24, 0xA1	; 161
    2270:	91 05       	cpc	r25, r1
    2272:	3c f4       	brge	.+14     	; 0x2282 <midi_input_callbacks+0xa6>
    2274:	80 38       	cpi	r24, 0x80	; 128
    2276:	91 05       	cpc	r25, r1
    2278:	c9 f0       	breq	.+50     	; 0x22ac <midi_input_callbacks+0xd0>
    227a:	80 39       	cpi	r24, 0x90	; 144
    227c:	91 05       	cpc	r25, r1
    227e:	91 f5       	brne	.+100    	; 0x22e4 <midi_input_callbacks+0x108>
    2280:	0f c0       	rjmp	.+30     	; 0x22a0 <midi_input_callbacks+0xc4>
    2282:	80 3e       	cpi	r24, 0xE0	; 224
    2284:	91 05       	cpc	r25, r1
    2286:	f1 f0       	breq	.+60     	; 0x22c4 <midi_input_callbacks+0xe8>
    2288:	80 3f       	cpi	r24, 0xF0	; 240
    228a:	91 05       	cpc	r25, r1
    228c:	09 f1       	breq	.+66     	; 0x22d0 <midi_input_callbacks+0xf4>
    228e:	80 3b       	cpi	r24, 0xB0	; 176
    2290:	91 05       	cpc	r25, r1
    2292:	41 f5       	brne	.+80     	; 0x22e4 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2294:	d6 01       	movw	r26, r12
    2296:	12 96       	adiw	r26, 0x02	; 2
    2298:	ed 91       	ld	r30, X+
    229a:	fc 91       	ld	r31, X
    229c:	13 97       	sbiw	r26, 0x03	; 3
              break;
    229e:	24 c0       	rjmp	.+72     	; 0x22e8 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    22a0:	d6 01       	movw	r26, r12
    22a2:	14 96       	adiw	r26, 0x04	; 4
    22a4:	ed 91       	ld	r30, X+
    22a6:	fc 91       	ld	r31, X
    22a8:	15 97       	sbiw	r26, 0x05	; 5
              break;
    22aa:	1e c0       	rjmp	.+60     	; 0x22e8 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    22ac:	d6 01       	movw	r26, r12
    22ae:	16 96       	adiw	r26, 0x06	; 6
    22b0:	ed 91       	ld	r30, X+
    22b2:	fc 91       	ld	r31, X
    22b4:	17 97       	sbiw	r26, 0x07	; 7
              break;
    22b6:	18 c0       	rjmp	.+48     	; 0x22e8 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    22b8:	d6 01       	movw	r26, r12
    22ba:	18 96       	adiw	r26, 0x08	; 8
    22bc:	ed 91       	ld	r30, X+
    22be:	fc 91       	ld	r31, X
    22c0:	19 97       	sbiw	r26, 0x09	; 9
              break;
    22c2:	12 c0       	rjmp	.+36     	; 0x22e8 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    22c4:	d6 01       	movw	r26, r12
    22c6:	1a 96       	adiw	r26, 0x0a	; 10
    22c8:	ed 91       	ld	r30, X+
    22ca:	fc 91       	ld	r31, X
    22cc:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    22ce:	0c c0       	rjmp	.+24     	; 0x22e8 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    22d0:	b2 ef       	ldi	r27, 0xF2	; 242
    22d2:	4b 17       	cp	r20, r27
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <midi_input_callbacks+0xfc>
    22d6:	90 c0       	rjmp	.+288    	; 0x23f8 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    22d8:	d6 01       	movw	r26, r12
    22da:	1c 96       	adiw	r26, 0x0c	; 12
    22dc:	ed 91       	ld	r30, X+
    22de:	fc 91       	ld	r31, X
    22e0:	1d 97       	sbiw	r26, 0x0d	; 13
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    22e4:	e0 e0       	ldi	r30, 0x00	; 0
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    22e8:	30 97       	sbiw	r30, 0x00	; 0
    22ea:	09 f4       	brne	.+2      	; 0x22ee <midi_input_callbacks+0x112>
    22ec:	85 c0       	rjmp	.+266    	; 0x23f8 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    22ee:	b2 ef       	ldi	r27, 0xF2	; 242
    22f0:	fb 16       	cp	r15, r27
    22f2:	31 f4       	brne	.+12     	; 0x2300 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    22f4:	c6 01       	movw	r24, r12
    22f6:	62 ef       	ldi	r22, 0xF2	; 242
    22f8:	4e 2d       	mov	r20, r14
    22fa:	21 2f       	mov	r18, r17
    22fc:	09 95       	icall
    22fe:	6c c0       	rjmp	.+216    	; 0x23d8 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    2300:	6f 2d       	mov	r22, r15
    2302:	6f 70       	andi	r22, 0x0F	; 15
    2304:	c6 01       	movw	r24, r12
    2306:	4e 2d       	mov	r20, r14
    2308:	21 2f       	mov	r18, r17
    230a:	09 95       	icall
    230c:	65 c0       	rjmp	.+202    	; 0x23d8 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    230e:	84 2f       	mov	r24, r20
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	80 7f       	andi	r24, 0xF0	; 240
    2314:	90 70       	andi	r25, 0x00	; 0
    2316:	80 3d       	cpi	r24, 0xD0	; 208
    2318:	91 05       	cpc	r25, r1
    231a:	61 f0       	breq	.+24     	; 0x2334 <midi_input_callbacks+0x158>
    231c:	80 3f       	cpi	r24, 0xF0	; 240
    231e:	91 05       	cpc	r25, r1
    2320:	79 f0       	breq	.+30     	; 0x2340 <midi_input_callbacks+0x164>
    2322:	80 3c       	cpi	r24, 0xC0	; 192
    2324:	91 05       	cpc	r25, r1
    2326:	f9 f4       	brne	.+62     	; 0x2366 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    2328:	d6 01       	movw	r26, r12
    232a:	1e 96       	adiw	r26, 0x0e	; 14
    232c:	ed 91       	ld	r30, X+
    232e:	fc 91       	ld	r31, X
    2330:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2332:	1b c0       	rjmp	.+54     	; 0x236a <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2334:	d6 01       	movw	r26, r12
    2336:	50 96       	adiw	r26, 0x10	; 16
    2338:	ed 91       	ld	r30, X+
    233a:	fc 91       	ld	r31, X
    233c:	51 97       	sbiw	r26, 0x11	; 17
              break;
    233e:	15 c0       	rjmp	.+42     	; 0x236a <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2340:	b3 ef       	ldi	r27, 0xF3	; 243
    2342:	4b 17       	cp	r20, r27
    2344:	31 f4       	brne	.+12     	; 0x2352 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    2346:	d6 01       	movw	r26, r12
    2348:	52 96       	adiw	r26, 0x12	; 18
    234a:	ed 91       	ld	r30, X+
    234c:	fc 91       	ld	r31, X
    234e:	53 97       	sbiw	r26, 0x13	; 19
    2350:	0c c0       	rjmp	.+24     	; 0x236a <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2352:	b1 ef       	ldi	r27, 0xF1	; 241
    2354:	4b 17       	cp	r20, r27
    2356:	09 f0       	breq	.+2      	; 0x235a <midi_input_callbacks+0x17e>
    2358:	4f c0       	rjmp	.+158    	; 0x23f8 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    235a:	d6 01       	movw	r26, r12
    235c:	54 96       	adiw	r26, 0x14	; 20
    235e:	ed 91       	ld	r30, X+
    2360:	fc 91       	ld	r31, X
    2362:	55 97       	sbiw	r26, 0x15	; 21
    2364:	02 c0       	rjmp	.+4      	; 0x236a <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    2366:	e0 e0       	ldi	r30, 0x00	; 0
    2368:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    236a:	30 97       	sbiw	r30, 0x00	; 0
    236c:	09 f4       	brne	.+2      	; 0x2370 <midi_input_callbacks+0x194>
    236e:	44 c0       	rjmp	.+136    	; 0x23f8 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2370:	b3 ef       	ldi	r27, 0xF3	; 243
    2372:	fb 16       	cp	r15, r27
    2374:	19 f0       	breq	.+6      	; 0x237c <midi_input_callbacks+0x1a0>
    2376:	81 ef       	ldi	r24, 0xF1	; 241
    2378:	f8 16       	cp	r15, r24
    237a:	29 f4       	brne	.+10     	; 0x2386 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    237c:	c6 01       	movw	r24, r12
    237e:	6f 2d       	mov	r22, r15
    2380:	4e 2d       	mov	r20, r14
    2382:	09 95       	icall
    2384:	29 c0       	rjmp	.+82     	; 0x23d8 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    2386:	6f 2d       	mov	r22, r15
    2388:	6f 70       	andi	r22, 0x0F	; 15
    238a:	c6 01       	movw	r24, r12
    238c:	4e 2d       	mov	r20, r14
    238e:	09 95       	icall
    2390:	23 c0       	rjmp	.+70     	; 0x23d8 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2392:	84 2f       	mov	r24, r20
    2394:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <midi_is_realtime>
    2398:	88 23       	and	r24, r24
    239a:	31 f0       	breq	.+12     	; 0x23a8 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    239c:	d6 01       	movw	r26, r12
    239e:	56 96       	adiw	r26, 0x16	; 22
    23a0:	ed 91       	ld	r30, X+
    23a2:	fc 91       	ld	r31, X
    23a4:	57 97       	sbiw	r26, 0x17	; 23
    23a6:	08 c0       	rjmp	.+16     	; 0x23b8 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    23a8:	b6 ef       	ldi	r27, 0xF6	; 246
    23aa:	fb 16       	cp	r15, r27
    23ac:	29 f5       	brne	.+74     	; 0x23f8 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    23ae:	d6 01       	movw	r26, r12
    23b0:	58 96       	adiw	r26, 0x18	; 24
    23b2:	ed 91       	ld	r30, X+
    23b4:	fc 91       	ld	r31, X
    23b6:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    23b8:	30 97       	sbiw	r30, 0x00	; 0
    23ba:	f1 f0       	breq	.+60     	; 0x23f8 <midi_input_callbacks+0x21c>
            func(device, byte0);
    23bc:	c6 01       	movw	r24, r12
    23be:	6f 2d       	mov	r22, r15
    23c0:	09 95       	icall
    23c2:	0a c0       	rjmp	.+20     	; 0x23d8 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    23c4:	64 30       	cpi	r22, 0x04	; 4
    23c6:	71 05       	cpc	r23, r1
    23c8:	a8 f4       	brcc	.+42     	; 0x23f4 <midi_input_callbacks+0x218>
    23ca:	16 c0       	rjmp	.+44     	; 0x23f8 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    23cc:	c6 01       	movw	r24, r12
    23ce:	b5 01       	movw	r22, r10
    23d0:	4f 2d       	mov	r20, r15
    23d2:	2e 2d       	mov	r18, r14
    23d4:	01 2f       	mov	r16, r17
    23d6:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    23d8:	d6 01       	movw	r26, r12
    23da:	5e 96       	adiw	r26, 0x1e	; 30
    23dc:	ed 91       	ld	r30, X+
    23de:	fc 91       	ld	r31, X
    23e0:	5f 97       	sbiw	r26, 0x1f	; 31
    23e2:	30 97       	sbiw	r30, 0x00	; 0
    23e4:	89 f0       	breq	.+34     	; 0x2408 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    23e6:	c6 01       	movw	r24, r12
    23e8:	b5 01       	movw	r22, r10
    23ea:	4f 2d       	mov	r20, r15
    23ec:	2e 2d       	mov	r18, r14
    23ee:	01 2f       	mov	r16, r17
    23f0:	09 95       	icall
    23f2:	0a c0       	rjmp	.+20     	; 0x2408 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    23f4:	aa 24       	eor	r10, r10
    23f6:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    23f8:	d6 01       	movw	r26, r12
    23fa:	5c 96       	adiw	r26, 0x1c	; 28
    23fc:	ed 91       	ld	r30, X+
    23fe:	fc 91       	ld	r31, X
    2400:	5d 97       	sbiw	r26, 0x1d	; 29
    2402:	30 97       	sbiw	r30, 0x00	; 0
    2404:	19 f7       	brne	.-58     	; 0x23cc <midi_input_callbacks+0x1f0>
    2406:	e8 cf       	rjmp	.-48     	; 0x23d8 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	df 90       	pop	r13
    241c:	cf 90       	pop	r12
    241e:	bf 90       	pop	r11
    2420:	af 90       	pop	r10
    2422:	08 95       	ret

00002424 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    2424:	ef 92       	push	r14
    2426:	ff 92       	push	r15
    2428:	0f 93       	push	r16
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	7c 01       	movw	r14, r24
    2430:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    2432:	86 2f       	mov	r24, r22
    2434:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <midi_is_realtime>
    2438:	88 23       	and	r24, r24
    243a:	91 f0       	breq	.+36     	; 0x2460 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    243c:	d7 01       	movw	r26, r14
    243e:	95 96       	adiw	r26, 0x25	; 37
    2440:	dc 91       	ld	r29, X
    2442:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	95 96       	adiw	r26, 0x25	; 37
    2448:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    244a:	c7 01       	movw	r24, r14
    244c:	61 e0       	ldi	r22, 0x01	; 1
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	4c 2f       	mov	r20, r28
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	00 e0       	ldi	r16, 0x00	; 0
    2456:	0e 94 ee 10 	call	0x21dc	; 0x21dc <midi_input_callbacks>
    device->input_state = state;
    245a:	f7 01       	movw	r30, r14
    245c:	d5 a3       	lds	r29, 0x55
    245e:	b7 c0       	rjmp	.+366    	; 0x25ce <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    2460:	8c 2f       	mov	r24, r28
    2462:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <midi_is_statusbyte>
    2466:	88 23       	and	r24, r24
    2468:	09 f4       	brne	.+2      	; 0x246c <midi_process_byte+0x48>
    246a:	73 c0       	rjmp	.+230    	; 0x2552 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    246c:	d7 01       	movw	r26, r14
    246e:	95 96       	adiw	r26, 0x25	; 37
    2470:	8c 91       	ld	r24, X
    2472:	95 97       	sbiw	r26, 0x25	; 37
    2474:	84 30       	cpi	r24, 0x04	; 4
    2476:	49 f0       	breq	.+18     	; 0x248a <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    2478:	92 96       	adiw	r26, 0x22	; 34
    247a:	cc 93       	st	X, r28
    247c:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	97 96       	adiw	r26, 0x27	; 39
    2484:	9c 93       	st	X, r25
    2486:	8e 93       	st	-X, r24
    2488:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    248a:	8c 2f       	mov	r24, r28
    248c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <midi_packet_length>
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	41 f0       	breq	.+16     	; 0x24a4 <midi_process_byte+0x80>
    2494:	81 30       	cpi	r24, 0x01	; 1
    2496:	00 f1       	brcs	.+64     	; 0x24d8 <midi_process_byte+0xb4>
    2498:	82 30       	cpi	r24, 0x02	; 2
    249a:	a1 f0       	breq	.+40     	; 0x24c4 <midi_process_byte+0xa0>
    249c:	83 30       	cpi	r24, 0x03	; 3
    249e:	09 f0       	breq	.+2      	; 0x24a2 <midi_process_byte+0x7e>
    24a0:	4f c0       	rjmp	.+158    	; 0x2540 <midi_process_byte+0x11c>
    24a2:	14 c0       	rjmp	.+40     	; 0x24cc <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	f7 01       	movw	r30, r14
    24a8:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    24aa:	c7 01       	movw	r24, r14
    24ac:	61 e0       	ldi	r22, 0x01	; 1
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	4c 2f       	mov	r20, r28
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	00 e0       	ldi	r16, 0x00	; 0
    24b6:	0e 94 ee 10 	call	0x21dc	; 0x21dc <midi_input_callbacks>
        device->input_state = IDLE;
    24ba:	d7 01       	movw	r26, r14
    24bc:	95 96       	adiw	r26, 0x25	; 37
    24be:	1c 92       	st	X, r1
    24c0:	95 97       	sbiw	r26, 0x25	; 37
        break;
    24c2:	85 c0       	rjmp	.+266    	; 0x25ce <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    24c4:	82 e0       	ldi	r24, 0x02	; 2
    24c6:	f7 01       	movw	r30, r14
    24c8:	85 a3       	lds	r24, 0x55
        break;
    24ca:	81 c0       	rjmp	.+258    	; 0x25ce <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	d7 01       	movw	r26, r14
    24d0:	95 96       	adiw	r26, 0x25	; 37
    24d2:	8c 93       	st	X, r24
    24d4:	95 97       	sbiw	r26, 0x25	; 37
        break;
    24d6:	7b c0       	rjmp	.+246    	; 0x25ce <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    24d8:	c0 3f       	cpi	r28, 0xF0	; 240
    24da:	19 f0       	breq	.+6      	; 0x24e2 <midi_process_byte+0xbe>
    24dc:	c7 3f       	cpi	r28, 0xF7	; 247
    24de:	59 f5       	brne	.+86     	; 0x2536 <midi_process_byte+0x112>
    24e0:	0a c0       	rjmp	.+20     	; 0x24f6 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    24e2:	84 e0       	ldi	r24, 0x04	; 4
    24e4:	f7 01       	movw	r30, r14
    24e6:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    24e8:	80 ef       	ldi	r24, 0xF0	; 240
    24ea:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	97 a3       	lds	r25, 0x57
    24f2:	86 a3       	lds	r24, 0x56
            break;
    24f4:	6c c0       	rjmp	.+216    	; 0x25ce <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    24f6:	d7 01       	movw	r26, r14
    24f8:	96 96       	adiw	r26, 0x26	; 38
    24fa:	2d 91       	ld	r18, X+
    24fc:	3c 91       	ld	r19, X
    24fe:	97 97       	sbiw	r26, 0x27	; 39
    2500:	c9 01       	movw	r24, r18
    2502:	63 e0       	ldi	r22, 0x03	; 3
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodhi4>
    250a:	f7 01       	movw	r30, r14
    250c:	e8 0f       	add	r30, r24
    250e:	f9 1f       	adc	r31, r25
    2510:	87 ef       	ldi	r24, 0xF7	; 247
    2512:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    2514:	b9 01       	movw	r22, r18
    2516:	6f 5f       	subi	r22, 0xFF	; 255
    2518:	7f 4f       	sbci	r23, 0xFF	; 255
    251a:	f7 01       	movw	r30, r14
    251c:	77 a3       	lds	r23, 0x57
    251e:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    2520:	c7 01       	movw	r24, r14
    2522:	42 a1       	lds	r20, 0x42
    2524:	23 a1       	lds	r18, 0x43
    2526:	04 a1       	lds	r16, 0x44
    2528:	0e 94 ee 10 	call	0x21dc	; 0x21dc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    252c:	d7 01       	movw	r26, r14
    252e:	95 96       	adiw	r26, 0x25	; 37
    2530:	1c 92       	st	X, r1
    2532:	95 97       	sbiw	r26, 0x25	; 37
            break;
    2534:	4c c0       	rjmp	.+152    	; 0x25ce <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    2536:	f7 01       	movw	r30, r14
    2538:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    253a:	17 a2       	lds	r17, 0x97
    253c:	16 a2       	lds	r17, 0x96
    253e:	47 c0       	rjmp	.+142    	; 0x25ce <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    2540:	d7 01       	movw	r26, r14
    2542:	95 96       	adiw	r26, 0x25	; 37
    2544:	1c 92       	st	X, r1
    2546:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    2548:	97 96       	adiw	r26, 0x27	; 39
    254a:	1c 92       	st	X, r1
    254c:	1e 92       	st	-X, r1
    254e:	96 97       	sbiw	r26, 0x26	; 38
        break;
    2550:	3e c0       	rjmp	.+124    	; 0x25ce <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    2552:	f7 01       	movw	r30, r14
    2554:	25 a1       	lds	r18, 0x45
    2556:	22 23       	and	r18, r18
    2558:	d1 f1       	breq	.+116    	; 0x25ce <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    255a:	06 a0       	lds	r16, 0x86
    255c:	f7 a1       	lds	r31, 0x47
    255e:	e0 2d       	mov	r30, r0
    2560:	cf 01       	movw	r24, r30
    2562:	63 e0       	ldi	r22, 0x03	; 3
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodhi4>
    256a:	ac 01       	movw	r20, r24
    256c:	8e 0d       	add	r24, r14
    256e:	9f 1d       	adc	r25, r15
    2570:	dc 01       	movw	r26, r24
    2572:	92 96       	adiw	r26, 0x22	; 34
    2574:	cc 93       	st	X, r28
    2576:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    2578:	bf 01       	movw	r22, r30
    257a:	6f 5f       	subi	r22, 0xFF	; 255
    257c:	7f 4f       	sbci	r23, 0xFF	; 255
    257e:	f7 01       	movw	r30, r14
    2580:	77 a3       	lds	r23, 0x57
    2582:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    2584:	41 30       	cpi	r20, 0x01	; 1
    2586:	51 05       	cpc	r21, r1
    2588:	91 f0       	breq	.+36     	; 0x25ae <midi_process_byte+0x18a>
    258a:	42 30       	cpi	r20, 0x02	; 2
    258c:	51 05       	cpc	r21, r1
    258e:	f9 f4       	brne	.+62     	; 0x25ce <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    2590:	c7 01       	movw	r24, r14
    2592:	42 a1       	lds	r20, 0x42
    2594:	23 a1       	lds	r18, 0x43
    2596:	04 a1       	lds	r16, 0x44
    2598:	0e 94 ee 10 	call	0x21dc	; 0x21dc <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    259c:	f7 01       	movw	r30, r14
    259e:	85 a1       	lds	r24, 0x45
    25a0:	84 30       	cpi	r24, 0x04	; 4
    25a2:	a9 f0       	breq	.+42     	; 0x25ce <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	97 a3       	lds	r25, 0x57
    25aa:	86 a3       	lds	r24, 0x56
    25ac:	10 c0       	rjmp	.+32     	; 0x25ce <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    25ae:	22 30       	cpi	r18, 0x02	; 2
    25b0:	71 f4       	brne	.+28     	; 0x25ce <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    25b2:	c7 01       	movw	r24, r14
    25b4:	42 a1       	lds	r20, 0x42
    25b6:	23 a1       	lds	r18, 0x43
    25b8:	00 e0       	ldi	r16, 0x00	; 0
    25ba:	0e 94 ee 10 	call	0x21dc	; 0x21dc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    25be:	f7 01       	movw	r30, r14
    25c0:	85 a1       	lds	r24, 0x45
    25c2:	84 30       	cpi	r24, 0x04	; 4
    25c4:	21 f0       	breq	.+8      	; 0x25ce <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	97 a3       	lds	r25, 0x57
    25cc:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	0f 91       	pop	r16
    25d4:	ff 90       	pop	r15
    25d6:	ef 90       	pop	r14
    25d8:	08 95       	ret

000025da <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    25da:	cf 92       	push	r12
    25dc:	df 92       	push	r13
    25de:	ef 92       	push	r14
    25e0:	ff 92       	push	r15
    25e2:	0f 93       	push	r16
    25e4:	1f 93       	push	r17
    25e6:	cf 93       	push	r28
    25e8:	df 93       	push	r29
    25ea:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    25ec:	dc 01       	movw	r26, r24
    25ee:	90 96       	adiw	r26, 0x20	; 32
    25f0:	ed 91       	ld	r30, X+
    25f2:	fc 91       	ld	r31, X
    25f4:	91 97       	sbiw	r26, 0x21	; 33
    25f6:	30 97       	sbiw	r30, 0x00	; 0
    25f8:	09 f0       	breq	.+2      	; 0x25fc <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    25fa:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    25fc:	0f 2e       	mov	r0, r31
    25fe:	f8 ee       	ldi	r31, 0xE8	; 232
    2600:	ef 2e       	mov	r14, r31
    2602:	ff 24       	eor	r15, r15
    2604:	f0 2d       	mov	r31, r0
    2606:	ec 0c       	add	r14, r12
    2608:	fd 1c       	adc	r15, r13
    260a:	c7 01       	movw	r24, r14
    260c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2610:	c8 2f       	mov	r28, r24
    2612:	d0 e0       	ldi	r29, 0x00	; 0
    2614:	20 97       	sbiw	r28, 0x00	; 0
    2616:	99 f0       	breq	.+38     	; 0x263e <midi_device_process+0x64>
    2618:	00 e0       	ldi	r16, 0x00	; 0
    261a:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    261c:	c7 01       	movw	r24, r14
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	0e 94 57 0e 	call	0x1cae	; 0x1cae <bytequeue_get>
    2624:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    2626:	c6 01       	movw	r24, r12
    2628:	0e 94 12 12 	call	0x2424	; 0x2424 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    262c:	c7 01       	movw	r24, r14
    262e:	61 e0       	ldi	r22, 0x01	; 1
    2630:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2634:	0f 5f       	subi	r16, 0xFF	; 255
    2636:	1f 4f       	sbci	r17, 0xFF	; 255
    2638:	0c 17       	cp	r16, r28
    263a:	1d 07       	cpc	r17, r29
    263c:	78 f3       	brcs	.-34     	; 0x261c <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	1f 91       	pop	r17
    2644:	0f 91       	pop	r16
    2646:	ff 90       	pop	r15
    2648:	ef 90       	pop	r14
    264a:	df 90       	pop	r13
    264c:	cf 90       	pop	r12
    264e:	08 95       	ret

00002650 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    2650:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    2652:	67 e0       	ldi	r22, 0x07	; 7
    2654:	70 e0       	ldi	r23, 0x00	; 0
    2656:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodhi4>
    265a:	48 2f       	mov	r20, r24
   if (remainder)
    265c:	88 23       	and	r24, r24
    265e:	81 f0       	breq	.+32     	; 0x2680 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    2660:	c9 01       	movw	r24, r18
    2662:	67 e0       	ldi	r22, 0x07	; 7
    2664:	70 e0       	ldi	r23, 0x00	; 0
    2666:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodhi4>
    266a:	cb 01       	movw	r24, r22
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	84 0f       	add	r24, r20
    267c:	91 1d       	adc	r25, r1
    267e:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    2680:	c9 01       	movw	r24, r18
    2682:	67 e0       	ldi	r22, 0x07	; 7
    2684:	70 e0       	ldi	r23, 0x00	; 0
    2686:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodhi4>
    268a:	cb 01       	movw	r24, r22
    268c:	88 0f       	add	r24, r24
    268e:	99 1f       	adc	r25, r25
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
}
    2698:	08 95       	ret

0000269a <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    269a:	48 2f       	mov	r20, r24
    269c:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    269e:	a1 f0       	breq	.+40     	; 0x26c8 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    26a0:	9c 01       	movw	r18, r24
    26a2:	36 95       	lsr	r19
    26a4:	27 95       	ror	r18
    26a6:	36 95       	lsr	r19
    26a8:	27 95       	ror	r18
    26aa:	36 95       	lsr	r19
    26ac:	27 95       	ror	r18
    26ae:	c9 01       	movw	r24, r18
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	82 1b       	sub	r24, r18
    26be:	93 0b       	sbc	r25, r19
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	84 0f       	add	r24, r20
    26c4:	91 1d       	adc	r25, r1
    26c6:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    26c8:	9c 01       	movw	r18, r24
    26ca:	36 95       	lsr	r19
    26cc:	27 95       	ror	r18
    26ce:	36 95       	lsr	r19
    26d0:	27 95       	ror	r18
    26d2:	36 95       	lsr	r19
    26d4:	27 95       	ror	r18
    26d6:	c9 01       	movw	r24, r18
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	88 0f       	add	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	82 1b       	sub	r24, r18
    26e6:	93 0b       	sbc	r25, r19
}
    26e8:	08 95       	ret

000026ea <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    26ea:	2f 92       	push	r2
    26ec:	3f 92       	push	r3
    26ee:	4f 92       	push	r4
    26f0:	5f 92       	push	r5
    26f2:	6f 92       	push	r6
    26f4:	7f 92       	push	r7
    26f6:	8f 92       	push	r8
    26f8:	9f 92       	push	r9
    26fa:	af 92       	push	r10
    26fc:	bf 92       	push	r11
    26fe:	cf 92       	push	r12
    2700:	df 92       	push	r13
    2702:	ef 92       	push	r14
    2704:	ff 92       	push	r15
    2706:	0f 93       	push	r16
    2708:	1f 93       	push	r17
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	00 d0       	rcall	.+0      	; 0x2710 <sysex_encode+0x26>
    2710:	00 d0       	rcall	.+0      	; 0x2712 <sysex_encode+0x28>
    2712:	00 d0       	rcall	.+0      	; 0x2714 <sysex_encode+0x2a>
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	1c 01       	movw	r2, r24
    271a:	7a 83       	std	Y+2, r23	; 0x02
    271c:	69 83       	std	Y+1, r22	; 0x01
    271e:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    2720:	ca 01       	movw	r24, r20
    2722:	67 e0       	ldi	r22, 0x07	; 7
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodhi4>
    272a:	2b 01       	movw	r4, r22
    272c:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    272e:	61 15       	cp	r22, r1
    2730:	71 05       	cpc	r23, r1
    2732:	b1 f1       	breq	.+108    	; 0x27a0 <sysex_encode+0xb6>
    2734:	81 01       	movw	r16, r2
    2736:	e9 80       	ldd	r14, Y+1	; 0x01
    2738:	fa 80       	ldd	r15, Y+2	; 0x02
    273a:	cc 24       	eor	r12, r12
    273c:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    273e:	88 24       	eor	r8, r8
    2740:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2742:	1e 83       	std	Y+6, r17	; 0x06
    2744:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    2746:	f8 01       	movw	r30, r16
    2748:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    274a:	fc 82       	std	Y+4, r15	; 0x04
    274c:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    274e:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    2750:	ab 81       	ldd	r26, Y+3	; 0x03
    2752:	bc 81       	ldd	r27, Y+4	; 0x04
    2754:	2d 91       	ld	r18, X+
    2756:	bc 83       	std	Y+4, r27	; 0x04
    2758:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    275a:	4f 5f       	subi	r20, 0xFF	; 255
    275c:	5f 4f       	sbci	r21, 0xFF	; 255
    275e:	82 2f       	mov	r24, r18
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	80 78       	andi	r24, 0x80	; 128
    2764:	90 70       	andi	r25, 0x00	; 0
    2766:	bc 01       	movw	r22, r24
    2768:	04 2e       	mov	r0, r20
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <sysex_encode+0x86>
    276c:	75 95       	asr	r23
    276e:	67 95       	ror	r22
    2770:	0a 94       	dec	r0
    2772:	e2 f7       	brpl	.-8      	; 0x276c <sysex_encode+0x82>
    2774:	ad 81       	ldd	r26, Y+5	; 0x05
    2776:	be 81       	ldd	r27, Y+6	; 0x06
    2778:	8c 91       	ld	r24, X
    277a:	86 2b       	or	r24, r22
    277c:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    277e:	2f 77       	andi	r18, 0x7F	; 127
    2780:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2782:	47 30       	cpi	r20, 0x07	; 7
    2784:	51 05       	cpc	r21, r1
    2786:	21 f7       	brne	.-56     	; 0x2750 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2788:	08 94       	sec
    278a:	c1 1c       	adc	r12, r1
    278c:	d1 1c       	adc	r13, r1
    278e:	08 5f       	subi	r16, 0xF8	; 248
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	e7 e0       	ldi	r30, 0x07	; 7
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	ee 0e       	add	r14, r30
    2798:	ff 1e       	adc	r15, r31
    279a:	ca 14       	cp	r12, r10
    279c:	db 04       	cpc	r13, r11
    279e:	89 f6       	brne	.-94     	; 0x2742 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    27a0:	c3 01       	movw	r24, r6
    27a2:	67 e0       	ldi	r22, 0x07	; 7
    27a4:	70 e0       	ldi	r23, 0x00	; 0
    27a6:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodhi4>
   if (remainder) {
    27aa:	88 23       	and	r24, r24
    27ac:	d9 f1       	breq	.+118    	; 0x2824 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    27ae:	82 01       	movw	r16, r4
    27b0:	00 0f       	add	r16, r16
    27b2:	11 1f       	adc	r17, r17
    27b4:	00 0f       	add	r16, r16
    27b6:	11 1f       	adc	r17, r17
    27b8:	00 0f       	add	r16, r16
    27ba:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    27bc:	78 01       	movw	r14, r16
    27be:	e4 18       	sub	r14, r4
    27c0:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    27c2:	d1 01       	movw	r26, r2
    27c4:	a0 0f       	add	r26, r16
    27c6:	b1 1f       	adc	r27, r17
    27c8:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    27ca:	68 2f       	mov	r22, r24
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	61 15       	cp	r22, r1
    27d0:	71 05       	cpc	r23, r1
    27d2:	19 f1       	breq	.+70     	; 0x281a <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    27d4:	e9 81       	ldd	r30, Y+1	; 0x01
    27d6:	fa 81       	ldd	r31, Y+2	; 0x02
    27d8:	ee 0e       	add	r14, r30
    27da:	ff 1e       	adc	r15, r31
    27dc:	c8 01       	movw	r24, r16
    27de:	01 96       	adiw	r24, 0x01	; 1
    27e0:	28 0e       	add	r2, r24
    27e2:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    27e8:	f7 01       	movw	r30, r14
    27ea:	41 91       	ld	r20, Z+
    27ec:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    27ee:	2f 5f       	subi	r18, 0xFF	; 255
    27f0:	3f 4f       	sbci	r19, 0xFF	; 255
    27f2:	84 2f       	mov	r24, r20
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	80 78       	andi	r24, 0x80	; 128
    27f8:	90 70       	andi	r25, 0x00	; 0
    27fa:	02 2e       	mov	r0, r18
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <sysex_encode+0x118>
    27fe:	95 95       	asr	r25
    2800:	87 95       	ror	r24
    2802:	0a 94       	dec	r0
    2804:	e2 f7       	brpl	.-8      	; 0x27fe <sysex_encode+0x114>
    2806:	9c 91       	ld	r25, X
    2808:	89 2b       	or	r24, r25
    280a:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    280c:	4f 77       	andi	r20, 0x7F	; 127
    280e:	f1 01       	movw	r30, r2
    2810:	41 93       	st	Z+, r20
    2812:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    2814:	26 17       	cp	r18, r22
    2816:	37 07       	cpc	r19, r23
    2818:	38 f3       	brcs	.-50     	; 0x27e8 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    281a:	c8 01       	movw	r24, r16
    281c:	01 96       	adiw	r24, 0x01	; 1
    281e:	86 0f       	add	r24, r22
    2820:	97 1f       	adc	r25, r23
    2822:	07 c0       	rjmp	.+14     	; 0x2832 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    2824:	c2 01       	movw	r24, r4
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	88 0f       	add	r24, r24
    2830:	99 1f       	adc	r25, r25
   }
}
    2832:	26 96       	adiw	r28, 0x06	; 6
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	bf 90       	pop	r11
    2850:	af 90       	pop	r10
    2852:	9f 90       	pop	r9
    2854:	8f 90       	pop	r8
    2856:	7f 90       	pop	r7
    2858:	6f 90       	pop	r6
    285a:	5f 90       	pop	r5
    285c:	4f 90       	pop	r4
    285e:	3f 90       	pop	r3
    2860:	2f 90       	pop	r2
    2862:	08 95       	ret

00002864 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2864:	6f 92       	push	r6
    2866:	7f 92       	push	r7
    2868:	8f 92       	push	r8
    286a:	9f 92       	push	r9
    286c:	af 92       	push	r10
    286e:	bf 92       	push	r11
    2870:	cf 92       	push	r12
    2872:	df 92       	push	r13
    2874:	ef 92       	push	r14
    2876:	ff 92       	push	r15
    2878:	0f 93       	push	r16
    287a:	1f 93       	push	r17
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
    2880:	3c 01       	movw	r6, r24
    2882:	4b 01       	movw	r8, r22
    2884:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    2886:	42 30       	cpi	r20, 0x02	; 2
    2888:	51 05       	cpc	r21, r1
    288a:	08 f4       	brcc	.+2      	; 0x288e <sysex_decode+0x2a>
    288c:	6f c0       	rjmp	.+222    	; 0x296c <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    288e:	7a 01       	movw	r14, r20
    2890:	f6 94       	lsr	r15
    2892:	e7 94       	ror	r14
    2894:	f6 94       	lsr	r15
    2896:	e7 94       	ror	r14
    2898:	f6 94       	lsr	r15
    289a:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    289c:	e1 14       	cp	r14, r1
    289e:	f1 04       	cpc	r15, r1
    28a0:	29 f1       	breq	.+74     	; 0x28ec <sysex_decode+0x88>
    28a2:	eb 01       	movw	r28, r22
    28a4:	b3 01       	movw	r22, r6
    28a6:	00 e0       	ldi	r16, 0x00	; 0
    28a8:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    28aa:	cc 24       	eor	r12, r12
    28ac:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    28ae:	de 01       	movw	r26, r28
    28b0:	11 96       	adiw	r26, 0x01	; 1
    28b2:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    28b4:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    28b6:	2d 91       	ld	r18, X+
    28b8:	2f 77       	andi	r18, 0x7F	; 127
    28ba:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    28bc:	4f 5f       	subi	r20, 0xFF	; 255
    28be:	5f 4f       	sbci	r21, 0xFF	; 255
    28c0:	88 81       	ld	r24, Y
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	04 2e       	mov	r0, r20
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <sysex_decode+0x68>
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	0a 94       	dec	r0
    28ce:	e2 f7       	brpl	.-8      	; 0x28c8 <sysex_decode+0x64>
    28d0:	80 78       	andi	r24, 0x80	; 128
    28d2:	28 2b       	or	r18, r24
    28d4:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    28d6:	47 30       	cpi	r20, 0x07	; 7
    28d8:	51 05       	cpc	r21, r1
    28da:	69 f7       	brne	.-38     	; 0x28b6 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    28dc:	0f 5f       	subi	r16, 0xFF	; 255
    28de:	1f 4f       	sbci	r17, 0xFF	; 255
    28e0:	28 96       	adiw	r28, 0x08	; 8
    28e2:	69 5f       	subi	r22, 0xF9	; 249
    28e4:	7f 4f       	sbci	r23, 0xFF	; 255
    28e6:	0e 15       	cp	r16, r14
    28e8:	1f 05       	cpc	r17, r15
    28ea:	09 f7       	brne	.-62     	; 0x28ae <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    28ec:	5a 2d       	mov	r21, r10
    28ee:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    28f0:	99 f1       	breq	.+102    	; 0x2958 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    28f2:	e7 01       	movw	r28, r14
    28f4:	cc 0f       	add	r28, r28
    28f6:	dd 1f       	adc	r29, r29
    28f8:	cc 0f       	add	r28, r28
    28fa:	dd 1f       	adc	r29, r29
    28fc:	cc 0f       	add	r28, r28
    28fe:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    2900:	8e 01       	movw	r16, r28
    2902:	0e 19       	sub	r16, r14
    2904:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    2906:	65 2f       	mov	r22, r21
    2908:	70 e0       	ldi	r23, 0x00	; 0
    290a:	61 50       	subi	r22, 0x01	; 1
    290c:	70 40       	sbci	r23, 0x00	; 0
    290e:	f9 f0       	breq	.+62     	; 0x294e <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2910:	ce 01       	movw	r24, r28
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	d4 01       	movw	r26, r8
    2916:	a8 0f       	add	r26, r24
    2918:	b9 1f       	adc	r27, r25
    291a:	f3 01       	movw	r30, r6
    291c:	e0 0f       	add	r30, r16
    291e:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2924:	c8 0d       	add	r28, r8
    2926:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    2928:	4d 91       	ld	r20, X+
    292a:	4f 77       	andi	r20, 0x7F	; 127
    292c:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    292e:	2f 5f       	subi	r18, 0xFF	; 255
    2930:	3f 4f       	sbci	r19, 0xFF	; 255
    2932:	88 81       	ld	r24, Y
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	02 2e       	mov	r0, r18
    2938:	02 c0       	rjmp	.+4      	; 0x293e <sysex_decode+0xda>
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	0a 94       	dec	r0
    2940:	e2 f7       	brpl	.-8      	; 0x293a <sysex_decode+0xd6>
    2942:	80 78       	andi	r24, 0x80	; 128
    2944:	48 2b       	or	r20, r24
    2946:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2948:	26 17       	cp	r18, r22
    294a:	37 07       	cpc	r19, r23
    294c:	68 f3       	brcs	.-38     	; 0x2928 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    294e:	c8 01       	movw	r24, r16
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	85 0f       	add	r24, r21
    2954:	91 1d       	adc	r25, r1
    2956:	0c c0       	rjmp	.+24     	; 0x2970 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    2958:	c7 01       	movw	r24, r14
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	8e 19       	sub	r24, r14
    2968:	9f 09       	sbc	r25, r15
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	ff 90       	pop	r15
    297a:	ef 90       	pop	r14
    297c:	df 90       	pop	r13
    297e:	cf 90       	pop	r12
    2980:	bf 90       	pop	r11
    2982:	af 90       	pop	r10
    2984:	9f 90       	pop	r9
    2986:	8f 90       	pop	r8
    2988:	7f 90       	pop	r7
    298a:	6f 90       	pop	r6
    298c:	08 95       	ret

0000298e <__mulsi3>:
    298e:	62 9f       	mul	r22, r18
    2990:	d0 01       	movw	r26, r0
    2992:	73 9f       	mul	r23, r19
    2994:	f0 01       	movw	r30, r0
    2996:	82 9f       	mul	r24, r18
    2998:	e0 0d       	add	r30, r0
    299a:	f1 1d       	adc	r31, r1
    299c:	64 9f       	mul	r22, r20
    299e:	e0 0d       	add	r30, r0
    29a0:	f1 1d       	adc	r31, r1
    29a2:	92 9f       	mul	r25, r18
    29a4:	f0 0d       	add	r31, r0
    29a6:	83 9f       	mul	r24, r19
    29a8:	f0 0d       	add	r31, r0
    29aa:	74 9f       	mul	r23, r20
    29ac:	f0 0d       	add	r31, r0
    29ae:	65 9f       	mul	r22, r21
    29b0:	f0 0d       	add	r31, r0
    29b2:	99 27       	eor	r25, r25
    29b4:	72 9f       	mul	r23, r18
    29b6:	b0 0d       	add	r27, r0
    29b8:	e1 1d       	adc	r30, r1
    29ba:	f9 1f       	adc	r31, r25
    29bc:	63 9f       	mul	r22, r19
    29be:	b0 0d       	add	r27, r0
    29c0:	e1 1d       	adc	r30, r1
    29c2:	f9 1f       	adc	r31, r25
    29c4:	bd 01       	movw	r22, r26
    29c6:	cf 01       	movw	r24, r30
    29c8:	11 24       	eor	r1, r1
    29ca:	08 95       	ret

000029cc <__udivmodhi4>:
    29cc:	aa 1b       	sub	r26, r26
    29ce:	bb 1b       	sub	r27, r27
    29d0:	51 e1       	ldi	r21, 0x11	; 17
    29d2:	07 c0       	rjmp	.+14     	; 0x29e2 <__udivmodhi4_ep>

000029d4 <__udivmodhi4_loop>:
    29d4:	aa 1f       	adc	r26, r26
    29d6:	bb 1f       	adc	r27, r27
    29d8:	a6 17       	cp	r26, r22
    29da:	b7 07       	cpc	r27, r23
    29dc:	10 f0       	brcs	.+4      	; 0x29e2 <__udivmodhi4_ep>
    29de:	a6 1b       	sub	r26, r22
    29e0:	b7 0b       	sbc	r27, r23

000029e2 <__udivmodhi4_ep>:
    29e2:	88 1f       	adc	r24, r24
    29e4:	99 1f       	adc	r25, r25
    29e6:	5a 95       	dec	r21
    29e8:	a9 f7       	brne	.-22     	; 0x29d4 <__udivmodhi4_loop>
    29ea:	80 95       	com	r24
    29ec:	90 95       	com	r25
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	08 95       	ret

000029f4 <__divmodhi4>:
    29f4:	97 fb       	bst	r25, 7
    29f6:	09 2e       	mov	r0, r25
    29f8:	07 26       	eor	r0, r23
    29fa:	0a d0       	rcall	.+20     	; 0x2a10 <__divmodhi4_neg1>
    29fc:	77 fd       	sbrc	r23, 7
    29fe:	04 d0       	rcall	.+8      	; 0x2a08 <__divmodhi4_neg2>
    2a00:	e5 df       	rcall	.-54     	; 0x29cc <__udivmodhi4>
    2a02:	06 d0       	rcall	.+12     	; 0x2a10 <__divmodhi4_neg1>
    2a04:	00 20       	and	r0, r0
    2a06:	1a f4       	brpl	.+6      	; 0x2a0e <__divmodhi4_exit>

00002a08 <__divmodhi4_neg2>:
    2a08:	70 95       	com	r23
    2a0a:	61 95       	neg	r22
    2a0c:	7f 4f       	sbci	r23, 0xFF	; 255

00002a0e <__divmodhi4_exit>:
    2a0e:	08 95       	ret

00002a10 <__divmodhi4_neg1>:
    2a10:	f6 f7       	brtc	.-4      	; 0x2a0e <__divmodhi4_exit>
    2a12:	90 95       	com	r25
    2a14:	81 95       	neg	r24
    2a16:	9f 4f       	sbci	r25, 0xFF	; 255
    2a18:	08 95       	ret

00002a1a <memcpy>:
    2a1a:	fb 01       	movw	r30, r22
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	02 c0       	rjmp	.+4      	; 0x2a24 <memcpy+0xa>
    2a20:	01 90       	ld	r0, Z+
    2a22:	0d 92       	st	X+, r0
    2a24:	41 50       	subi	r20, 0x01	; 1
    2a26:	50 40       	sbci	r21, 0x00	; 0
    2a28:	d8 f7       	brcc	.-10     	; 0x2a20 <memcpy+0x6>
    2a2a:	08 95       	ret

00002a2c <memmove>:
    2a2c:	68 17       	cp	r22, r24
    2a2e:	79 07       	cpc	r23, r25
    2a30:	68 f4       	brcc	.+26     	; 0x2a4c <memmove+0x20>
    2a32:	fb 01       	movw	r30, r22
    2a34:	dc 01       	movw	r26, r24
    2a36:	e4 0f       	add	r30, r20
    2a38:	f5 1f       	adc	r31, r21
    2a3a:	a4 0f       	add	r26, r20
    2a3c:	b5 1f       	adc	r27, r21
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <memmove+0x18>
    2a40:	02 90       	ld	r0, -Z
    2a42:	0e 92       	st	-X, r0
    2a44:	41 50       	subi	r20, 0x01	; 1
    2a46:	50 40       	sbci	r21, 0x00	; 0
    2a48:	d8 f7       	brcc	.-10     	; 0x2a40 <memmove+0x14>
    2a4a:	08 95       	ret
    2a4c:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <memcpy>

00002a50 <__eerd_block_m6450a>:
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22

00002a54 <__eerd_blraw_m6450a>:
    2a54:	fc 01       	movw	r30, r24
    2a56:	f9 99       	sbic	0x1f, 1	; 31
    2a58:	fe cf       	rjmp	.-4      	; 0x2a56 <__eerd_blraw_m6450a+0x2>
    2a5a:	06 c0       	rjmp	.+12     	; 0x2a68 <__eerd_blraw_m6450a+0x14>
    2a5c:	f2 bd       	out	0x22, r31	; 34
    2a5e:	e1 bd       	out	0x21, r30	; 33
    2a60:	f8 9a       	sbi	0x1f, 0	; 31
    2a62:	31 96       	adiw	r30, 0x01	; 1
    2a64:	00 b4       	in	r0, 0x20	; 32
    2a66:	0d 92       	st	X+, r0
    2a68:	41 50       	subi	r20, 0x01	; 1
    2a6a:	50 40       	sbci	r21, 0x00	; 0
    2a6c:	b8 f7       	brcc	.-18     	; 0x2a5c <__eerd_blraw_m6450a+0x8>
    2a6e:	08 95       	ret

00002a70 <__eerd_word_m6450a>:
    2a70:	a8 e1       	ldi	r26, 0x18	; 24
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	42 e0       	ldi	r20, 0x02	; 2
    2a76:	50 e0       	ldi	r21, 0x00	; 0
    2a78:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__eerd_blraw_m6450a>

00002a7c <__eeupd_block_m6450a>:
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	a4 0f       	add	r26, r20
    2a80:	b5 1f       	adc	r27, r21
    2a82:	41 50       	subi	r20, 0x01	; 1
    2a84:	50 40       	sbci	r21, 0x00	; 0
    2a86:	48 f0       	brcs	.+18     	; 0x2a9a <__eeupd_block_m6450a+0x1e>
    2a88:	cb 01       	movw	r24, r22
    2a8a:	84 0f       	add	r24, r20
    2a8c:	95 1f       	adc	r25, r21
    2a8e:	2e 91       	ld	r18, -X
    2a90:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__eeupd_r18_m6450a>
    2a94:	41 50       	subi	r20, 0x01	; 1
    2a96:	50 40       	sbci	r21, 0x00	; 0
    2a98:	d0 f7       	brcc	.-12     	; 0x2a8e <__eeupd_block_m6450a+0x12>
    2a9a:	08 95       	ret

00002a9c <__eeupd_byte_m6450a>:
    2a9c:	26 2f       	mov	r18, r22

00002a9e <__eeupd_r18_m6450a>:
    2a9e:	f9 99       	sbic	0x1f, 1	; 31
    2aa0:	fe cf       	rjmp	.-4      	; 0x2a9e <__eeupd_r18_m6450a>
    2aa2:	92 bd       	out	0x22, r25	; 34
    2aa4:	81 bd       	out	0x21, r24	; 33
    2aa6:	f8 9a       	sbi	0x1f, 0	; 31
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	00 b4       	in	r0, 0x20	; 32
    2aac:	02 16       	cp	r0, r18
    2aae:	31 f0       	breq	.+12     	; 0x2abc <__eeupd_r18_m6450a+0x1e>
    2ab0:	20 bd       	out	0x20, r18	; 32
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	fa 9a       	sbi	0x1f, 2	; 31
    2ab8:	f9 9a       	sbi	0x1f, 1	; 31
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	08 95       	ret

00002abe <__eeupd_word_m6450a>:
    2abe:	01 96       	adiw	r24, 0x01	; 1
    2ac0:	27 2f       	mov	r18, r23
    2ac2:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__eeupd_r18_m6450a>
    2ac6:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__eeupd_byte_m6450a>

00002aca <_exit>:
    2aca:	f8 94       	cli

00002acc <__stop_program>:
    2acc:	ff cf       	rjmp	.-2      	; 0x2acc <__stop_program>
